
HDMI_DEMO.elf:     file format elf32-littlenios2
HDMI_DEMO.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801e8

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0001d73c memsz 0x0001d73c flags r-x
    LOAD off    0x0001e75c vaddr 0x0009d75c paddr 0x0009f5d4 align 2**12
         filesz 0x00001e78 memsz 0x00001e78 flags rw-
    LOAD off    0x0002144c vaddr 0x000a144c paddr 0x000a144c align 2**12
         filesz 0x00000000 memsz 0x000003f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001c8  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000195b0  000801e8  000801e8  000011e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00003fc4  00099798  00099798  0001a798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e78  0009d75c  0009f5d4  0001e75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003f0  000a144c  000a144c  0002144c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000205d4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001010  00000000  00000000  000205f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002d522  00000000  00000000  00021608  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000b443  00000000  00000000  0004eb2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000d172  00000000  00000000  00059f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002098  00000000  00000000  000670e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004e4b  00000000  00000000  00069178  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00012a64  00000000  00000000  0006dfc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000060  00000000  00000000  00080a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b70  00000000  00000000  00080a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00085173  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000a  00000000  00000000  00085176  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00085180  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00085181  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00085182  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00085186  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0008518a  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  0008518e  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00085197  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000851a0  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000009  00000000  00000000  000851a9  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000001a  00000000  00000000  000851b2  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00063d18  00000000  00000000  000851cc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801e8 l    d  .text	00000000 .text
00099798 l    d  .rodata	00000000 .rodata
0009d75c l    d  .rwdata	00000000 .rwdata
000a144c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../HDMI_DEMO_bsp//obj/HAL/src/crt0.o
00080238 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
000800b0 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 adv7513.c
0009d75c l     O .rwdata	000000f0 vic_table.3698
0008093c l     F .text	00000070 adv7513_config_csc
000809ac l     F .text	000000d8 adv7513_video_in_format
00080a84 l     F .text	00000118 adv7513_video_out_format
00080b9c l     F .text	00000410 adv7513_avi_infoframe
00080fac l     F .text	0000017c adv7513_video_in_format_3d
00081128 l     F .text	000004b8 adv7513_avi_infoframe_3d
000815e0 l     F .text	0000004c adv7513_vendor_infoframe_3d
0008162c l     F .text	00000124 adv7513_video_out_format_3d
00081750 l     F .text	000000b0 adv7513_video_init
00081800 l     F .text	00000094 adv7513_video_init_3d
00000000 l    df *ABS*	00000000 edid.c
0008192c l     F .text	000000a8 eb_establish_timing
000819d4 l     F .text	000000ac eb_establish_timing_i
00081a80 l     F .text	000000ac eb_establish_timing_rb
0009d84c l     O .rwdata	00000040 sad_format.3990
0009d88c l     O .rwdata	000000f0 vic_table.4005
0009f590 l     O .rwdata	00000008 header.4101
00000000 l    df *ABS*	00000000 encoder.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 main.c
0008b4f4 l     F .text	00000048 adv7513_int_mask_to_long
0008b53c l     F .text	0000005c adv7513_long_to_int_mask
0008b598 l     F .text	000002ac bin_dump
0008b844 l     F .text	000003c8 adv7513_int_handler
0008be2c l     F .text	000000ac cmd_help
00000000 l    df *ABS*	00000000 fp-bit.c
0008c764 l     F .text	000001f4 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0008ce18 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
0008d654 l     F .text	00000008 __fp_lock
0008d65c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0009d9f0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
0008e67c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 vfprintf.c
0008ee14 l     F .text	00000034 __sprint_r
0009d306 l     O .rodata	00000010 blanks.3515
0009d316 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 ctype_.c
0009d427 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
00090ea8 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0009d5c8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0009d710 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00095e34 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00096d48 l     F .text	00000054 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00096e68 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00096e94 l     F .text	00000054 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00097268 l     F .text	00000054 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00097398 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00097488 l     F .text	00000054 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0009766c l     F .text	00000054 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0009f5c8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00097974 l     F .text	00000054 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00097ab8 l     F .text	0000003c alt_dev_reg
0009e52c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00097dc8 l     F .text	00000204 altera_avalon_jtag_uart_irq
00097fcc l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00098610 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000989f0 l     F .text	00000054 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00098bdc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00098d1c l     F .text	00000054 alt_get_errno
00098d70 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
0008e5c8 g     F .text	0000001c putchar
00094570 g     F .text	00000074 _mprec_log10
0008ab38 g     F .text	00000104 I2C_Read
00094660 g     F .text	00000084 __any_on
0009527c g     F .text	00000064 _isatty_r
0009d5f8 g     O .rodata	00000028 __mprec_tinytens
000975b0 g     F .text	0000007c alt_main
0008d4b0 g     F .text	00000044 __ashldi3
0008e5e4 g     F .text	00000084 _puts_r
000a15ac g     O .bss	00000100 alt_irq
00093400 g     F .text	0000006c _lseek_r
0009f5d4 g       *ABS*	00000000 __flash_rwdata_start
000966d4 g     F .text	0000005c __eqdf2
000a183c g       *ABS*	00000000 __alt_heap_start
0008e584 g     F .text	0000003c printf
000807a4 g     F .text	000000d4 adv7513_edid_read
0008e9c4 g     F .text	0000005c __sseek
0008d6e4 g     F .text	0000010c __sinit
00095000 g     F .text	0000013c __swbuf_r
00093324 g     F .text	0000009c _setlocale_r
0008d670 g     F .text	00000064 __sfmoreglue
0009764c g     F .text	00000020 __malloc_unlock
0008cb8c g     F .text	0000013c __divsf3
00093614 g     F .text	00000128 memmove
0008d6d4 g     F .text	00000010 _cleanup
0009373c g     F .text	000000a8 _Balloc
00080360 g     F .text	00000130 adv7513_hpd_probe
000a1478 g     O .bss	00000004 alt_exception_old_stack_limit
0009678c g     F .text	00000064 __gtdf2
00000000  w      *UND*	00000000 __errno
0008023c g     F .text	00000124 adv7513_chip_identify
0008ae94 g     F .text	00000130 i2c_write
00080000 g     F .entry	0000001c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
00095214 g     F .text	00000068 _fstat_r
000a1458 g     O .bss	00000004 errno
0008cde0 g     F .text	00000038 __make_dp
000a1470 g     O .bss	00000004 alt_argv
000a758c g       *ABS*	00000000 _gp
00097940 g     F .text	00000034 usleep
0008c9a4 g     F .text	00000058 __subsf3
0008d630 g     F .text	00000024 fgets
0009e22c g     O .rwdata	00000300 alt_fd_list
0008e5c0 g     F .text	00000008 _putchar_r
00099154 g     F .text	00000094 alt_find_dev
0008e384 g     F .text	000000f8 memcpy
00080668 g     F .text	00000070 adv7513_power_state
0008d664 g     F .text	0000000c _cleanup_r
000968b0 g     F .text	000000d4 __floatsidf
00098ca0 g     F .text	0000007c alt_io_redirect
00096854 g     F .text	0000005c __ltdf2
00099798 g       *ABS*	00000000 __DTOR_END__
0008e668 g     F .text	00000014 puts
000944cc g     F .text	000000a4 __ratio
000981cc g     F .text	0000021c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0008e558 g     F .text	0000002c _printf_r
0008cf38 g     F .text	00000008 __udivsi3
000972bc g     F .text	000000dc isatty
0009d648 g     O .rodata	000000c8 __mprec_tens
000933c0 g     F .text	0000000c __locale_charset
000993b4 g     F .text	0000008c alt_icache_flush
0008ac3c g     F .text	0000015c I2C_MultipleRead
000a1454 g     O .bss	00000004 __malloc_top_pad
0008edf0 g     F .text	00000024 strtoul
0009f5ac g     O .rwdata	00000004 __mb_cur_max
000933cc g     F .text	0000000c _localeconv_r
00093b3c g     F .text	0000003c __i2b
00092e40 g     F .text	000004e4 __sfvwrite_r
0009d97c g     O .rwdata	00000074 encoder
0008e884 g     F .text	00000064 _sbrk_r
00094890 g     F .text	0000006c _read_r
0009e1f8 g     O .rwdata	0000000c __lc_ctype
0009f5c0 g     O .rwdata	00000004 alt_max_fd
00096b74 g     F .text	00000104 __unpack_d
000926cc g     F .text	0000013c _fclose_r
00092a04 g     F .text	00000030 fflush
000a1450 g     O .bss	00000004 __malloc_max_sbrked_mem
0008b22c g     F .text	0000013c I2CL_Read
0008ccc8 g     F .text	00000044 __extendsfdf2
00080618 g     F .text	00000050 adv7513_do_hpd_powerdown
00096188 g     F .text	00000054 __adddf3
00094240 g     F .text	00000148 __b2d
000958a8 g     F .text	0000058c __umoddi3
000974dc g     F .text	000000d4 lseek
0009f598 g     O .rwdata	00000004 _global_impure_ptr
000948fc g     F .text	000005fc _realloc_r
000cbaf0 g       *ABS*	00000000 __alt_exception_stack_pointer
000a183c g       *ABS*	00000000 __bss_end
00097174 g     F .text	000000f4 alt_iic_isr_register
0009902c g     F .text	00000108 alt_tick
00080490 g     F .text	00000138 adv7513_do_hpd_powerup
00084c2c g     F .text	0000011c edid_decode_extensions
000952e0 g     F .text	000005c8 __udivdi3
0009d620 g     O .rodata	00000028 __mprec_bigtens
00093920 g     F .text	00000104 __s2b
00096a58 g     F .text	0000011c __floatunsidf
00093fe0 g     F .text	00000058 __mcmp
0009f5a8 g     O .rwdata	00000004 __ctype_ptr
0008d8fc g     F .text	00000018 __fp_lock_all
00097128 g     F .text	0000004c alt_ic_irq_enabled
0008aa5c g     F .text	000000dc I2C_Write
000a14ac g     O .bss	00000100 edid
00098f94 g     F .text	00000098 alt_alarm_stop
000a1468 g     O .bss	00000004 alt_irq_active
00080118 g     F .exceptions	000000d0 alt_irq_handler
0009e204 g     O .rwdata	00000028 alt_dev_null
0008d180 g     F .text	000000c8 __unpack_f
0008ad98 g     F .text	00000088 i2c_start
000989ac g     F .text	00000044 alt_dcache_flush_all
00093a24 g     F .text	00000068 __hi0bits
00096984 g     F .text	000000d4 __fixdfsi
0009f5d4 g       *ABS*	00000000 __ram_rwdata_end
0009f5b8 g     O .rwdata	00000008 alt_dev_list
000979c8 g     F .text	000000f0 write
000946e4 g     F .text	000000bc _putc_r
0009d75c g       *ABS*	00000000 __ram_rodata_end
00096ee8 g     F .text	000000b0 fstat
0008d46c g     F .text	00000044 __lshrdi3
00093d58 g     F .text	0000012c __pow5mult
000a1464 g     O .bss	00000004 __nlocale_changed
0008cf40 g     F .text	00000008 __umodsi3
000a183c g       *ABS*	00000000 end
0008d054 g     F .text	0000012c __pack_f
00097d04 g     F .text	000000c4 altera_avalon_jtag_uart_init
00099798 g       *ABS*	00000000 __CTOR_LIST__
000caaf0 g       *ABS*	00000000 __alt_stack_pointer
00098688 g     F .text	0000008c alt_avalon_timer_sc_init
0008cfa8 g     F .text	000000ac __clzsi2
000983e8 g     F .text	00000228 altera_avalon_jtag_uart_write
0008d8ec g     F .text	00000004 __sfp_lock_acquire
0008e210 g     F .text	000000f8 memchr
0008ee48 g     F .text	00001df8 ___vfprintf_internal_r
00092b70 g     F .text	000002d0 _free_r
00080878 g     F .text	000000c4 adv7513_regmap_dump
000995bc g     F .text	000001a0 __call_exitprocs
000a1460 g     O .bss	00000004 __mlocale_changed
0009f5a0 g     O .rwdata	00000004 __malloc_sbrk_base
000801e8 g     F .text	00000054 _start
000a147c g     O .bss	00000004 _alt_tick_rate
00093e84 g     F .text	0000015c __lshift
000a1480 g     O .bss	00000004 _alt_nticks
000976c0 g     F .text	000000f4 read
00097b2c g     F .text	00000064 alt_sys_init
0009948c g     F .text	00000130 __register_exitproc
000833e0 g     F .text	0000184c edid_print_cea
0008a614 g     F .text	0000008c reg_read
00093b78 g     F .text	000001e0 __multiply
00098070 g     F .text	00000068 altera_avalon_jtag_uart_close
0009d75c g       *ABS*	00000000 __ram_rwdata_start
00099798 g       *ABS*	00000000 __ram_rodata_start
0008eab4 g     F .text	000000b8 strncpy
000a1484 g     O .bss	00000028 __malloc_current_mallinfo
00094388 g     F .text	00000144 __d2b
00097b90 g     F .text	00000064 altera_avalon_jtag_uart_read_fd
0008eb6c g     F .text	00000284 _strtoul_r
00099300 g     F .text	000000b4 alt_get_fd
00098854 g     F .text	00000158 alt_busy_sleep
00096c78 g     F .text	000000d0 __fpcmp_parts_d
00090e44 g     F .text	00000064 _close_r
0008e308 g     F .text	0000007c memcmp
00097c58 g     F .text	00000054 altera_avalon_jtag_uart_close_fd
000a183c g       *ABS*	00000000 __alt_stack_base
00097cac g     F .text	00000058 altera_avalon_jtag_uart_ioctl_fd
00090cd0 g     F .text	00000174 __swsetup_r
00096520 g     F .text	000001b4 __divdf3
0008d7f0 g     F .text	000000fc __sfp
000945e4 g     F .text	0000007c __copybits
0009ddf0 g     O .rwdata	00000408 __malloc_av_
0008d8f8 g     F .text	00000004 __sinit_lock_release
0008ae20 g     F .text	00000074 i2c_stop
0009623c g     F .text	000002e4 __muldf3
0008e8e8 g     F .text	00000054 __sread
000806d8 g     F .text	000000cc adv7513_mode_state
0009d1ac g     O .rodata	00000010 __thenan_sf
000991e8 g     F .text	00000118 alt_find_file
00098a44 g     F .text	000000a4 alt_dev_llist_insert
0009762c g     F .text	00000020 __malloc_lock
00097814 g     F .text	0000012c sbrk
0009281c g     F .text	000001e8 _fflush_r
00095158 g     F .text	000000bc _calloc_r
000a144c g       *ABS*	00000000 __bss_start
0008e47c g     F .text	000000dc memset
0008bed8 g     F .text	0000088c main
000a1474 g     O .bss	00000004 alt_envp
000a144c g     O .bss	00000004 __malloc_max_total_mem
00097bf4 g     F .text	00000064 altera_avalon_jtag_uart_write_fd
0008afc4 g     F .text	00000154 i2c_read
0009513c g     F .text	0000001c __swbuf
0008ea20 g     F .text	00000008 __sclose
000caaf0 g       *ABS*	00000000 __alt_heap_limit
00092808 g     F .text	00000014 fclose
000a16ac g     O .bss	00000190 _atexit0
000910b0 g     F .text	0000161c _dtoa_r
0008da8c g     F .text	00000784 _malloc_r
0009f5c4 g     O .rwdata	00000004 alt_errno
0008a730 g     F .text	00000128 reg_update_bits
0008d92c g     F .text	000000a8 _fwalk
000a183c g       *ABS*	00000000 __alt_stack_limit
0008d4f4 g     F .text	0000013c _fgets_r
000947a0 g     F .text	000000f0 putc
000cb2f0 g       *ABS*	00000000 __alt_exception_stack_limit
0008ce8c g     F .text	00000050 __divsi3
0009d71c g     O .rodata	00000014 __thenan_df
00092a34 g     F .text	0000013c _malloc_trim_r
00099798 g       *ABS*	00000000 __CTOR_END__
0008c9fc g     F .text	00000190 __mulsf3
0008a958 g     F .text	00000104 reg_clear_bits
00094f5c g     F .text	000000a4 strcmp
00099798 g       *ABS*	00000000 __flash_rodata_start
00099798 g       *ABS*	00000000 __DTOR_LIST__
00096730 g     F .text	0000005c __nedf2
00097af4 g     F .text	00000038 alt_irq_init
000977b4 g     F .text	00000060 alt_release_fd
0009d1bc g     O .rodata	00000100 __clz_tab
000a145c g     O .bss	00000004 _PathLocale
00099440 g     F .text	00000014 atexit
00090c64 g     F .text	0000006c _write_r
000933d8 g     F .text	0000001c setlocale
0009f59c g     O .rwdata	00000004 _impure_ptr
000a146c g     O .bss	00000004 alt_argc
00098b48 g     F .text	00000060 _do_dtors
000818e0 g     F .text	0000004c adv7513_chip_init_3d
0008b368 g     F .text	0000018c I2CL_MultipleRead
0008e698 g     F .text	000001ec __srefill_r
00080020 g       .exceptions	00000000 alt_irq_entry
000941e0 g     F .text	00000060 __ulp
00094ef8 g     F .text	00000038 __isinfd
0008d914 g     F .text	00000018 __fp_unlock_all
0009f5b0 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
000933f4 g     F .text	0000000c localeconv
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00096f98 g     F .text	00000054 alt_ic_isr_register
0009f58c g     O .rwdata	00000004 alt_stack_limit_value
00084d48 g     F .text	00004168 edid_decode_v14
0009f5d4 g       *ABS*	00000000 _edata
000a183c g       *ABS*	00000000 _end
0008bc0c g     F .text	00000220 adv7513_int_setup
000801e8 g       *ABS*	00000000 __ram_exceptions_end
000980d8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00097088 g     F .text	000000a0 alt_ic_irq_disable
0008a858 g     F .text	00000100 reg_or_bits
0008e93c g     F .text	00000088 __swrite
0009f5a4 g     O .rwdata	00000004 __malloc_trim_threshold
00099134 g     F .text	00000020 altera_nios2_qsys_irq_init
00099454 g     F .text	00000038 exit
0008d9d4 g     F .text	000000b8 _fwalk_reent
0008cd0c g     F .text	000000d4 __floatunsisf
00094038 g     F .text	000001a8 __mdiff
0008a6a0 g     F .text	00000090 reg_write
0008cedc g     F .text	0000005c __modsi3
000caaf0 g       *ABS*	00000000 __alt_data_end
000805c8 g     F .text	00000050 adv7513_kick_up
00080020 g     F .exceptions	00000000 alt_exception
0008d8f0 g     F .text	00000004 __sfp_lock_release
0009d326 g     O .rodata	00000101 _ctype_
0009975c g     F .text	0000003c _exit
00094f30 g     F .text	0000002c __isnand
00098714 g     F .text	00000140 alt_alarm_start
0008cf48 g     F .text	00000060 __muldi3
0009346c g     F .text	000001a8 __smakebuf_r
0008ea28 g     F .text	0000008c strlen
00098e3c g     F .text	00000158 open
000967f0 g     F .text	00000064 __gedf2
00081b2c g     F .text	000018b4 edid_decode_cea
00081894 g     F .text	0000004c adv7513_chip_init
00088eb0 g     F .text	00001764 edid_print_v14
00098ba8 g     F .text	00000034 alt_icache_flush_all
00096fec g     F .text	0000009c alt_ic_irq_enable
00090c40 g     F .text	00000024 __vfprintf_internal
000961dc g     F .text	00000060 __subdf3
00093a8c g     F .text	000000b0 __lo0bits
0009f5cc g     O .rwdata	00000008 alt_alarm_list
00098ae8 g     F .text	00000060 _do_ctors
0008b118 g     F .text	00000114 I2CL_Write
00096d9c g     F .text	000000cc close
0008c958 g     F .text	0000004c __addsf3
00097404 g     F .text	00000084 alt_load
0008d248 g     F .text	00000224 __pack_d
00000000  w      *UND*	00000000 free
0008d8f4 g     F .text	00000004 __sinit_lock_acquire
0009380c g     F .text	00000114 __multadd
000937e4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08407a14 	ori	at,at,488
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:
        /* 
         * When runtime stack checking is enabled, the et register
         * contains the stack limit. Save this in memory before
         * overwriting the et register.
         */
        stw   et, %gprel(alt_exception_old_stack_limit)(gp)
   80020:	d627bb15 	stw	et,-24852(gp)

        /* 
         * Switch to the exception stack and save the current stack pointer
         * in memory. Uses the et register as a scratch register.
         */
        movhi et, %hi(__alt_exception_stack_pointer - 80)
   80024:	06000334 	movhi	et,12
        ori   et, et, %lo(__alt_exception_stack_pointer - 80) 
   80028:	c62ea814 	ori	et,et,47776
        stw   sp, 76(et)
   8002c:	c6c01315 	stw	sp,76(et)
        mov   sp, et
   80030:	c037883a 	mov	sp,et

#ifdef ALT_STACK_CHECK
        /*
         * Restore the stack limit from memory to the et register.
         */
        movhi et, %hi(__alt_exception_stack_limit)
   80034:	06000334 	movhi	et,12
        ori   et, et, %lo(__alt_exception_stack_limit) 
   80038:	c62cbc14 	ori	et,et,45808
        stw   et, %gprel(alt_stack_limit_value)(gp)
   8003c:	d6200015 	stw	et,-32768(gp)
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80040:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80044:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   80048:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   8004c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80050:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80054:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   80058:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   8005c:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80060:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80064:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   80068:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   8006c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80070:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80074:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   80078:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   8007c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80080:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80084:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   80088:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   8008c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80090:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80094:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   80098:	10000326 	beq	r2,zero,800a8 <alt_exception+0x88>
        beq   r4, zero, .Lnot_irq
   8009c:	20000226 	beq	r4,zero,800a8 <alt_exception+0x88>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   800a0:	00801180 	call	80118 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   800a4:	00000306 	br	800b4 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   800a8:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   800ac:	e8bfff17 	ldw	r2,-4(ea)

000800b0 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   800b0:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800dc:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
   800e0:	d627bb17 	ldw	et,-24852(gp)
#endif

        ldw   r8,  36(sp)
   800e4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800e8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800ec:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800f0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800f4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800f8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800fc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   80100:	dbc01017 	ldw	r15,64(sp)

#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
   80104:	d6200015 	stw	et,-32768(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
   80108:	d027bb15 	stw	zero,-24852(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
   8010c:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
   80110:	ef80083a 	eret

#ifdef ALT_STACK_CHECK
.Lstack_overflow:
        break 3
   80114:	003da0fa 	break	3

00080118 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   80118:	defff904 	addi	sp,sp,-28
   8011c:	dfc00615 	stw	ra,24(sp)
   80120:	df000515 	stw	fp,20(sp)
   80124:	df000504 	addi	fp,sp,20
   80128:	d83bb615 	stw	zero,-4392(sp)
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8012c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80130:	0005313a 	rdctl	r2,ipending
   80134:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80138:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8013c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80140:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80144:	00800044 	movi	r2,1
   80148:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8014c:	e0fffb17 	ldw	r3,-20(fp)
   80150:	e0bffc17 	ldw	r2,-16(fp)
   80154:	1884703a 	and	r2,r3,r2
   80158:	10001726 	beq	r2,zero,801b8 <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8015c:	00c002b4 	movhi	r3,10
   80160:	18c56b04 	addi	r3,r3,5548
   80164:	e0bffd17 	ldw	r2,-12(fp)
   80168:	100490fa 	slli	r2,r2,3
   8016c:	1885883a 	add	r2,r3,r2
   80170:	10c00017 	ldw	r3,0(r2)
   80174:	010002b4 	movhi	r4,10
   80178:	21056b04 	addi	r4,r4,5548
   8017c:	e0bffd17 	ldw	r2,-12(fp)
   80180:	100490fa 	slli	r2,r2,3
   80184:	2085883a 	add	r2,r4,r2
   80188:	10800104 	addi	r2,r2,4
   8018c:	10800017 	ldw	r2,0(r2)
   80190:	1009883a 	mov	r4,r2
   80194:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80198:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8019c:	0005313a 	rdctl	r2,ipending
   801a0:	e0bfff15 	stw	r2,-4(fp)

  return active;
   801a4:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fe31e 	bne	r2,zero,80140 <alt_irq_handler+0x28>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	00000706 	br	801d4 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   801b8:	e0bffc17 	ldw	r2,-16(fp)
   801bc:	1085883a 	add	r2,r2,r2
   801c0:	e0bffc15 	stw	r2,-16(fp)
      i++;
   801c4:	e0bffd17 	ldw	r2,-12(fp)
   801c8:	10800044 	addi	r2,r2,1
   801cc:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801d0:	003fde06 	br	8014c <alt_irq_handler+0x34>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801d4:	e037883a 	mov	sp,fp
   801d8:	dfc00117 	ldw	ra,4(sp)
   801dc:	df000017 	ldw	fp,0(sp)
   801e0:	dec00204 	addi	sp,sp,8
   801e4:	f800283a 	ret

Disassembly of section .text:

000801e8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   801e8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   801ec:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   801f0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   801f4:	00bffd16 	blt	zero,r2,801ec <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801f8:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   801fc:	deeabc14 	ori	sp,sp,43760
    movhi gp, %hi(_gp)
   80200:	068002b4 	movhi	gp,10
    ori gp, gp, %lo(_gp)
   80204:	d69d6314 	ori	gp,gp,30092
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80208:	008002b4 	movhi	r2,10
    ori r2, r2, %lo(__bss_start)
   8020c:	10851314 	ori	r2,r2,5196

    movhi r3, %hi(__bss_end)
   80210:	00c002b4 	movhi	r3,10
    ori r3, r3, %lo(__bss_end)
   80214:	18c60f14 	ori	r3,r3,6204

    beq r2, r3, 1f
   80218:	10c00326 	beq	r2,r3,80228 <_start+0x40>

0:
    stw zero, (r2)
   8021c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80220:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80224:	10fffd36 	bltu	r2,r3,8021c <_start+0x34>
     * If the user has selected stack checking then we need to set up a safe
     * value in the stack limit register so that the relocation functions
     * don't think the stack has overflowed (the contents of the rwdata
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
   80228:	0031883a 	mov	et,zero
#endif

    call alt_load
   8022c:	00974040 	call	97404 <alt_load>
    /*
     * Set up the stack limit (if required).  The linker has set up the
     * copy of the variable which is in memory.
     */

    ldw   et, %gprel(alt_stack_limit_value)(gp)
   80230:	d6200017 	ldw	et,-32768(gp)

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80234:	00975b00 	call	975b0 <alt_main>

00080238 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80238:	003fff06 	br	80238 <alt_after_alt_main>

0008023c <adv7513_chip_identify>:
	{ 0x55, 0x02 },
};
#endif

int adv7513_chip_identify(struct hdmi_encoder *ec)
{
   8023c:	defffb04 	addi	sp,sp,-20
   80240:	dfc00415 	stw	ra,16(sp)
   80244:	df000315 	stw	fp,12(sp)
   80248:	df000304 	addi	fp,sp,12
   8024c:	e13fff15 	stw	r4,-4(fp)
   80250:	d83bb615 	stw	zero,-4392(sp)
	bool r = 0;
   80254:	e03ffe15 	stw	zero,-8(fp)

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, ADV7513_REG_CHIP_REVISION, &ec->chip_rev[0]);
   80258:	e0bfff17 	ldw	r2,-4(fp)
   8025c:	10800017 	ldw	r2,0(r2)
   80260:	10803fcc 	andi	r2,r2,255
   80264:	1080201c 	xori	r2,r2,128
   80268:	10bfe004 	addi	r2,r2,-128
   8026c:	e0ffff17 	ldw	r3,-4(fp)
   80270:	18c00804 	addi	r3,r3,32
   80274:	d8c00015 	stw	r3,0(sp)
   80278:	01000434 	movhi	r4,16
   8027c:	21041004 	addi	r4,r4,4160
   80280:	01400434 	movhi	r5,16
   80284:	29441404 	addi	r5,r5,4176
   80288:	100d883a 	mov	r6,r2
   8028c:	000f883a 	mov	r7,zero
   80290:	008ab380 	call	8ab38 <I2C_Read>
   80294:	e0bffe15 	stw	r2,-8(fp)
	if (!r)
   80298:	e0bffe17 	ldw	r2,-8(fp)
   8029c:	1000021e 	bne	r2,zero,802a8 <adv7513_chip_identify+0x6c>
		return -1;
   802a0:	00bfffc4 	movi	r2,-1
   802a4:	00002906 	br	8034c <adv7513_chip_identify+0x110>

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, ADV7513_REG_CHIP_ID_LOW, &ec->chip_id[0]);
   802a8:	e0bfff17 	ldw	r2,-4(fp)
   802ac:	10800017 	ldw	r2,0(r2)
   802b0:	10803fcc 	andi	r2,r2,255
   802b4:	1080201c 	xori	r2,r2,128
   802b8:	10bfe004 	addi	r2,r2,-128
   802bc:	e0ffff17 	ldw	r3,-4(fp)
   802c0:	18c00704 	addi	r3,r3,28
   802c4:	d8c00015 	stw	r3,0(sp)
   802c8:	01000434 	movhi	r4,16
   802cc:	21041004 	addi	r4,r4,4160
   802d0:	01400434 	movhi	r5,16
   802d4:	29441404 	addi	r5,r5,4176
   802d8:	100d883a 	mov	r6,r2
   802dc:	01c03d84 	movi	r7,246
   802e0:	008ab380 	call	8ab38 <I2C_Read>
   802e4:	e0bffe15 	stw	r2,-8(fp)
	if (!r)
   802e8:	e0bffe17 	ldw	r2,-8(fp)
   802ec:	1000021e 	bne	r2,zero,802f8 <adv7513_chip_identify+0xbc>
		return -2;
   802f0:	00bfff84 	movi	r2,-2
   802f4:	00001506 	br	8034c <adv7513_chip_identify+0x110>

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, ADV7513_REG_CHIP_ID_HIGH, &ec->chip_id[1]);
   802f8:	e0bfff17 	ldw	r2,-4(fp)
   802fc:	10800017 	ldw	r2,0(r2)
   80300:	10803fcc 	andi	r2,r2,255
   80304:	1080201c 	xori	r2,r2,128
   80308:	10bfe004 	addi	r2,r2,-128
   8030c:	e0ffff17 	ldw	r3,-4(fp)
   80310:	18c00744 	addi	r3,r3,29
   80314:	d8c00015 	stw	r3,0(sp)
   80318:	01000434 	movhi	r4,16
   8031c:	21041004 	addi	r4,r4,4160
   80320:	01400434 	movhi	r5,16
   80324:	29441404 	addi	r5,r5,4176
   80328:	100d883a 	mov	r6,r2
   8032c:	01c03d44 	movi	r7,245
   80330:	008ab380 	call	8ab38 <I2C_Read>
   80334:	e0bffe15 	stw	r2,-8(fp)
	if (!r)
   80338:	e0bffe17 	ldw	r2,-8(fp)
   8033c:	1000021e 	bne	r2,zero,80348 <adv7513_chip_identify+0x10c>
		return -3;
   80340:	00bfff44 	movi	r2,-3
   80344:	00000106 	br	8034c <adv7513_chip_identify+0x110>

	return 0;
   80348:	0005883a 	mov	r2,zero
}
   8034c:	e037883a 	mov	sp,fp
   80350:	dfc00117 	ldw	ra,4(sp)
   80354:	df000017 	ldw	fp,0(sp)
   80358:	dec00204 	addi	sp,sp,8
   8035c:	f800283a 	ret

00080360 <adv7513_hpd_probe>:

int adv7513_hpd_probe(struct hdmi_encoder *ec)
{
   80360:	defffb04 	addi	sp,sp,-20
   80364:	dfc00415 	stw	ra,16(sp)
   80368:	df000315 	stw	fp,12(sp)
   8036c:	df000304 	addi	fp,sp,12
   80370:	e13fff15 	stw	r4,-4(fp)
   80374:	d83bb615 	stw	zero,-4392(sp)
	bool r = 0;
   80378:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 regv = 0;
   8037c:	e03ffe05 	stb	zero,-8(fp)

	ec->hpd_prev = ec->hpd_latest;
   80380:	e0bfff17 	ldw	r2,-4(fp)
   80384:	10c00317 	ldw	r3,12(r2)
   80388:	e0bfff17 	ldw	r2,-4(fp)
   8038c:	10c00215 	stw	r3,8(r2)

	r = reg_read(ec, ADV7513_REG_STATUS, &regv);
   80390:	e0bffe04 	addi	r2,fp,-8
   80394:	e13fff17 	ldw	r4,-4(fp)
   80398:	01401084 	movi	r5,66
   8039c:	100d883a 	mov	r6,r2
   803a0:	008a6140 	call	8a614 <reg_read>
   803a4:	e0bffd15 	stw	r2,-12(fp)
	if (r != 0)
   803a8:	e0bffd17 	ldw	r2,-12(fp)
   803ac:	10000226 	beq	r2,zero,803b8 <adv7513_hpd_probe+0x58>
		return -1;
   803b0:	00bfffc4 	movi	r2,-1
   803b4:	00003106 	br	8047c <adv7513_hpd_probe+0x11c>

	ec->hpd_latest = regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE));
   803b8:	e0bffe03 	ldbu	r2,-8(fp)
   803bc:	10803fcc 	andi	r2,r2,255
   803c0:	10c0180c 	andi	r3,r2,96
   803c4:	e0bfff17 	ldw	r2,-4(fp)
   803c8:	10c00315 	stw	r3,12(r2)
	ec->hpd_event = ec->hpd_latest ^ ec->hpd_prev;
   803cc:	e0bfff17 	ldw	r2,-4(fp)
   803d0:	10c00317 	ldw	r3,12(r2)
   803d4:	e0bfff17 	ldw	r2,-4(fp)
   803d8:	10800217 	ldw	r2,8(r2)
   803dc:	1886f03a 	xor	r3,r3,r2
   803e0:	e0bfff17 	ldw	r2,-4(fp)
   803e4:	10c00415 	stw	r3,16(r2)

	ec->hpd = 0;
   803e8:	e0bfff17 	ldw	r2,-4(fp)
   803ec:	10000515 	stw	zero,20(r2)

	if ((ec->hpd_event != 0) && ((ec->hpd_latest & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE))) == ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE)))) {
   803f0:	e0bfff17 	ldw	r2,-4(fp)
   803f4:	10800417 	ldw	r2,16(r2)
   803f8:	10000926 	beq	r2,zero,80420 <adv7513_hpd_probe+0xc0>
   803fc:	e0bfff17 	ldw	r2,-4(fp)
   80400:	10800317 	ldw	r2,12(r2)
   80404:	1080180c 	andi	r2,r2,96
   80408:	10801818 	cmpnei	r2,r2,96
   8040c:	1000041e 	bne	r2,zero,80420 <adv7513_hpd_probe+0xc0>
		// if hot-plug state changed and both HPD and monitor-sense are asserted
		ec->hpd = 1;
   80410:	e0bfff17 	ldw	r2,-4(fp)
   80414:	00c00044 	movi	r3,1
   80418:	10c00515 	stw	r3,20(r2)
   8041c:	00001606 	br	80478 <adv7513_hpd_probe+0x118>
	} else {
		if ((ec->hpd_event & (ADV7513_STATUS_HPD)) && ((ec->hpd_latest & (ADV7513_STATUS_HPD)) == 0)) {
   80420:	e0bfff17 	ldw	r2,-4(fp)
   80424:	10800417 	ldw	r2,16(r2)
   80428:	1080100c 	andi	r2,r2,64
   8042c:	10000726 	beq	r2,zero,8044c <adv7513_hpd_probe+0xec>
   80430:	e0bfff17 	ldw	r2,-4(fp)
   80434:	10800317 	ldw	r2,12(r2)
   80438:	1080100c 	andi	r2,r2,64
   8043c:	1000031e 	bne	r2,zero,8044c <adv7513_hpd_probe+0xec>
			// if HPD state changed and HPD was de-asserted
			ec->hpd = -1;
   80440:	e0bfff17 	ldw	r2,-4(fp)
   80444:	00ffffc4 	movi	r3,-1
   80448:	10c00515 	stw	r3,20(r2)
		}

		if ((ec->hpd_event & (ADV7513_STATUS_MONITOR_SENSE)) && ((ec->hpd_latest & (ADV7513_STATUS_MONITOR_SENSE)) == 0)) {
   8044c:	e0bfff17 	ldw	r2,-4(fp)
   80450:	10800417 	ldw	r2,16(r2)
   80454:	1080080c 	andi	r2,r2,32
   80458:	10000726 	beq	r2,zero,80478 <adv7513_hpd_probe+0x118>
   8045c:	e0bfff17 	ldw	r2,-4(fp)
   80460:	10800317 	ldw	r2,12(r2)
   80464:	1080080c 	andi	r2,r2,32
   80468:	1000031e 	bne	r2,zero,80478 <adv7513_hpd_probe+0x118>
			// if monitor-sense state changed and monitor-sense was de-asserted
			ec->hpd = -1;
   8046c:	e0bfff17 	ldw	r2,-4(fp)
   80470:	00ffffc4 	movi	r3,-1
   80474:	10c00515 	stw	r3,20(r2)
	// 0xd6[7:6] <- (2 << 6) (HPD from HPD only) & 0xc0
	//r = reg_update_bits(ec, 0xd6, 0xc0 ,0x02 << 6);
	//if (r != 0)
	//	return -1;

	return 0;
   80478:	0005883a 	mov	r2,zero
}
   8047c:	e037883a 	mov	sp,fp
   80480:	dfc00117 	ldw	ra,4(sp)
   80484:	df000017 	ldw	fp,0(sp)
   80488:	dec00204 	addi	sp,sp,8
   8048c:	f800283a 	ret

00080490 <adv7513_do_hpd_powerup>:

int adv7513_do_hpd_powerup(struct hdmi_encoder *ec)
{
   80490:	defffd04 	addi	sp,sp,-12
   80494:	dfc00215 	stw	ra,8(sp)
   80498:	df000115 	stw	fp,4(sp)
   8049c:	df000104 	addi	fp,sp,4
   804a0:	e13fff15 	stw	r4,-4(fp)
   804a4:	d83bb615 	stw	zero,-4392(sp)
	//printf("adv7513_do_hpd_powerup()\n");

	// power up the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0) != 0)
   804a8:	e13fff17 	ldw	r4,-4(fp)
   804ac:	01401044 	movi	r5,65
   804b0:	01801004 	movi	r6,64
   804b4:	000f883a 	mov	r7,zero
   804b8:	008a7300 	call	8a730 <reg_update_bits>
   804bc:	10000226 	beq	r2,zero,804c8 <adv7513_do_hpd_powerup+0x38>
		return -1;
   804c0:	00bfffc4 	movi	r2,-1
   804c4:	00003b06 	br	805b4 <adv7513_do_hpd_powerup+0x124>

	//usleep(150000);

	// table 14 -- fixed registers must be set after power up
	if (reg_write(ec, 0x98, 0x03) != 0)
   804c8:	e13fff17 	ldw	r4,-4(fp)
   804cc:	01402604 	movi	r5,152
   804d0:	018000c4 	movi	r6,3
   804d4:	008a6a00 	call	8a6a0 <reg_write>
   804d8:	10000226 	beq	r2,zero,804e4 <adv7513_do_hpd_powerup+0x54>
		return -1;
   804dc:	00bfffc4 	movi	r2,-1
   804e0:	00003406 	br	805b4 <adv7513_do_hpd_powerup+0x124>
	if (reg_update_bits(ec, 0x9a, 0xe0, 0x7 << 5) != 0)
   804e4:	e13fff17 	ldw	r4,-4(fp)
   804e8:	01402684 	movi	r5,154
   804ec:	01803804 	movi	r6,224
   804f0:	01c03804 	movi	r7,224
   804f4:	008a7300 	call	8a730 <reg_update_bits>
   804f8:	10000226 	beq	r2,zero,80504 <adv7513_do_hpd_powerup+0x74>
		return -1;
   804fc:	00bfffc4 	movi	r2,-1
   80500:	00002c06 	br	805b4 <adv7513_do_hpd_powerup+0x124>
	if (reg_write(ec, 0x9c, 0x30) != 0)
   80504:	e13fff17 	ldw	r4,-4(fp)
   80508:	01402704 	movi	r5,156
   8050c:	01800c04 	movi	r6,48
   80510:	008a6a00 	call	8a6a0 <reg_write>
   80514:	10000226 	beq	r2,zero,80520 <adv7513_do_hpd_powerup+0x90>
		return -1;
   80518:	00bfffc4 	movi	r2,-1
   8051c:	00002506 	br	805b4 <adv7513_do_hpd_powerup+0x124>
	if (reg_update_bits(ec, 0x9d, 0x03, 0x01) != 0)
   80520:	e13fff17 	ldw	r4,-4(fp)
   80524:	01402744 	movi	r5,157
   80528:	018000c4 	movi	r6,3
   8052c:	01c00044 	movi	r7,1
   80530:	008a7300 	call	8a730 <reg_update_bits>
   80534:	10000226 	beq	r2,zero,80540 <adv7513_do_hpd_powerup+0xb0>
		return -1;
   80538:	00bfffc4 	movi	r2,-1
   8053c:	00001d06 	br	805b4 <adv7513_do_hpd_powerup+0x124>
	if (reg_write(ec, 0xa2, 0xa4) != 0)
   80540:	e13fff17 	ldw	r4,-4(fp)
   80544:	01402884 	movi	r5,162
   80548:	01802904 	movi	r6,164
   8054c:	008a6a00 	call	8a6a0 <reg_write>
   80550:	10000226 	beq	r2,zero,8055c <adv7513_do_hpd_powerup+0xcc>
		return -1;
   80554:	00bfffc4 	movi	r2,-1
   80558:	00001606 	br	805b4 <adv7513_do_hpd_powerup+0x124>
	if (reg_write(ec, 0xa3, 0xa4) != 0)
   8055c:	e13fff17 	ldw	r4,-4(fp)
   80560:	014028c4 	movi	r5,163
   80564:	01802904 	movi	r6,164
   80568:	008a6a00 	call	8a6a0 <reg_write>
   8056c:	10000226 	beq	r2,zero,80578 <adv7513_do_hpd_powerup+0xe8>
		return -1;
   80570:	00bfffc4 	movi	r2,-1
   80574:	00000f06 	br	805b4 <adv7513_do_hpd_powerup+0x124>
	if (reg_write(ec, 0xe0, 0xd0) != 0)
   80578:	e13fff17 	ldw	r4,-4(fp)
   8057c:	01403804 	movi	r5,224
   80580:	01803404 	movi	r6,208
   80584:	008a6a00 	call	8a6a0 <reg_write>
   80588:	10000226 	beq	r2,zero,80594 <adv7513_do_hpd_powerup+0x104>
		return -1;
   8058c:	00bfffc4 	movi	r2,-1
   80590:	00000806 	br	805b4 <adv7513_do_hpd_powerup+0x124>
	//if (reg_write(ec, 0xf9, 0x00) != 0)  // set to a non-conflicting i2c address (suggested addr: 0x00)
	//	return -1;

	// clear hpd interrupts
	// 0x96[7:6] <- 0xc0 & 0xc0
	if (reg_write(ec, 0x96, 0xff) != 0)
   80594:	e13fff17 	ldw	r4,-4(fp)
   80598:	01402584 	movi	r5,150
   8059c:	01803fc4 	movi	r6,255
   805a0:	008a6a00 	call	8a6a0 <reg_write>
   805a4:	10000226 	beq	r2,zero,805b0 <adv7513_do_hpd_powerup+0x120>
		return -1;
   805a8:	00bfffc4 	movi	r2,-1
   805ac:	00000106 	br	805b4 <adv7513_do_hpd_powerup+0x124>

	return 0;
   805b0:	0005883a 	mov	r2,zero
}
   805b4:	e037883a 	mov	sp,fp
   805b8:	dfc00117 	ldw	ra,4(sp)
   805bc:	df000017 	ldw	fp,0(sp)
   805c0:	dec00204 	addi	sp,sp,8
   805c4:	f800283a 	ret

000805c8 <adv7513_kick_up>:
// interrupt if the monitor is in sleep mode and the cable is connected before downloading
// the program to the fpga board. It is verified that kick-off the encoder chip facilitates
// the encoder to detect monitor-sense signal at the program initialization process
//
extern int adv7513_kick_up(struct hdmi_encoder *ec)
{
   805c8:	defffd04 	addi	sp,sp,-12
   805cc:	dfc00215 	stw	ra,8(sp)
   805d0:	df000115 	stw	fp,4(sp)
   805d4:	df000104 	addi	fp,sp,4
   805d8:	e13fff15 	stw	r4,-4(fp)
   805dc:	d83bb615 	stw	zero,-4392(sp)
	// power up the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0) != 0)
   805e0:	e13fff17 	ldw	r4,-4(fp)
   805e4:	01401044 	movi	r5,65
   805e8:	01801004 	movi	r6,64
   805ec:	000f883a 	mov	r7,zero
   805f0:	008a7300 	call	8a730 <reg_update_bits>
   805f4:	10000226 	beq	r2,zero,80600 <adv7513_kick_up+0x38>
		return -1;
   805f8:	00bfffc4 	movi	r2,-1
   805fc:	00000106 	br	80604 <adv7513_kick_up+0x3c>
	return 0;
   80600:	0005883a 	mov	r2,zero
}
   80604:	e037883a 	mov	sp,fp
   80608:	dfc00117 	ldw	ra,4(sp)
   8060c:	df000017 	ldw	fp,0(sp)
   80610:	dec00204 	addi	sp,sp,8
   80614:	f800283a 	ret

00080618 <adv7513_do_hpd_powerdown>:

int adv7513_do_hpd_powerdown(struct hdmi_encoder *ec)
{
   80618:	defffd04 	addi	sp,sp,-12
   8061c:	dfc00215 	stw	ra,8(sp)
   80620:	df000115 	stw	fp,4(sp)
   80624:	df000104 	addi	fp,sp,4
   80628:	e13fff15 	stw	r4,-4(fp)
   8062c:	d83bb615 	stw	zero,-4392(sp)
	// power down the encoder
	if (reg_update_bits(ec, 0x41, 0x40, 0x40) != 0)
   80630:	e13fff17 	ldw	r4,-4(fp)
   80634:	01401044 	movi	r5,65
   80638:	01801004 	movi	r6,64
   8063c:	01c01004 	movi	r7,64
   80640:	008a7300 	call	8a730 <reg_update_bits>
   80644:	10000226 	beq	r2,zero,80650 <adv7513_do_hpd_powerdown+0x38>
		return -1;
   80648:	00bfffc4 	movi	r2,-1
   8064c:	00000106 	br	80654 <adv7513_do_hpd_powerdown+0x3c>

	return 0;
   80650:	0005883a 	mov	r2,zero
}
   80654:	e037883a 	mov	sp,fp
   80658:	dfc00117 	ldw	ra,4(sp)
   8065c:	df000017 	ldw	fp,0(sp)
   80660:	dec00204 	addi	sp,sp,8
   80664:	f800283a 	ret

00080668 <adv7513_power_state>:

int adv7513_power_state(struct hdmi_encoder *ec, int *state)
{
   80668:	defffa04 	addi	sp,sp,-24
   8066c:	dfc00515 	stw	ra,20(sp)
   80670:	df000415 	stw	fp,16(sp)
   80674:	df000404 	addi	fp,sp,16
   80678:	e13ffe15 	stw	r4,-8(fp)
   8067c:	e17fff15 	stw	r5,-4(fp)
   80680:	d83bb615 	stw	zero,-4392(sp)
	bool r = 0;
   80684:	e03ffc15 	stw	zero,-16(fp)
	alt_u8 regv = 0;
   80688:	e03ffd05 	stb	zero,-12(fp)

	r = reg_read(ec, 0x41, &regv);
   8068c:	e0bffd04 	addi	r2,fp,-12
   80690:	e13ffe17 	ldw	r4,-8(fp)
   80694:	01401044 	movi	r5,65
   80698:	100d883a 	mov	r6,r2
   8069c:	008a6140 	call	8a614 <reg_read>
   806a0:	e0bffc15 	stw	r2,-16(fp)
	if (r != 0)
   806a4:	e0bffc17 	ldw	r2,-16(fp)
   806a8:	10000226 	beq	r2,zero,806b4 <adv7513_power_state+0x4c>
		return -1;
   806ac:	00bfffc4 	movi	r2,-1
   806b0:	00000406 	br	806c4 <adv7513_power_state+0x5c>

	if ((regv & 0x40) == 1)
		*state = 0;
	else
		*state = 1;
   806b4:	e0bfff17 	ldw	r2,-4(fp)
   806b8:	00c00044 	movi	r3,1
   806bc:	10c00015 	stw	r3,0(r2)

	return 0;
   806c0:	0005883a 	mov	r2,zero
}
   806c4:	e037883a 	mov	sp,fp
   806c8:	dfc00117 	ldw	ra,4(sp)
   806cc:	df000017 	ldw	fp,0(sp)
   806d0:	dec00204 	addi	sp,sp,8
   806d4:	f800283a 	ret

000806d8 <adv7513_mode_state>:

int adv7513_mode_state(struct hdmi_encoder *ec, int *vic, const char **mode)
{
   806d8:	defff904 	addi	sp,sp,-28
   806dc:	dfc00615 	stw	ra,24(sp)
   806e0:	df000515 	stw	fp,20(sp)
   806e4:	df000504 	addi	fp,sp,20
   806e8:	e13ffd15 	stw	r4,-12(fp)
   806ec:	e17ffe15 	stw	r5,-8(fp)
   806f0:	e1bfff15 	stw	r6,-4(fp)
   806f4:	d83bb615 	stw	zero,-4392(sp)
		"720x480p @239.76/240 Hz (16:9)",
		"720(1440)x480i @239.76/240 Hz (4:3)",
		"720(1440)x480i @239.76/240 Hz (16:9)",
	};

	bool r = 0;
   806f8:	e03ffb15 	stw	zero,-20(fp)
	alt_u8 regv = 0;
   806fc:	e03ffc05 	stb	zero,-16(fp)

	r = reg_read(ec, 0x3d, &regv);
   80700:	e0bffc04 	addi	r2,fp,-16
   80704:	e13ffd17 	ldw	r4,-12(fp)
   80708:	01400f44 	movi	r5,61
   8070c:	100d883a 	mov	r6,r2
   80710:	008a6140 	call	8a614 <reg_read>
   80714:	e0bffb15 	stw	r2,-20(fp)
	if (r != 0)
   80718:	e0bffb17 	ldw	r2,-20(fp)
   8071c:	10000226 	beq	r2,zero,80728 <adv7513_mode_state+0x50>
		return -1;
   80720:	00bfffc4 	movi	r2,-1
   80724:	00001a06 	br	80790 <adv7513_mode_state+0xb8>

	*vic = regv & 0x1f;
   80728:	e0bffc03 	ldbu	r2,-16(fp)
   8072c:	10803fcc 	andi	r2,r2,255
   80730:	10c007cc 	andi	r3,r2,31
   80734:	e0bffe17 	ldw	r2,-8(fp)
   80738:	10c00015 	stw	r3,0(r2)

	if (*vic < 60) {
   8073c:	e0bffe17 	ldw	r2,-8(fp)
   80740:	10800017 	ldw	r2,0(r2)
   80744:	10800f08 	cmpgei	r2,r2,60
   80748:	10000b1e 	bne	r2,zero,80778 <adv7513_mode_state+0xa0>
		*mode = vic_table[*vic];
   8074c:	e0bffe17 	ldw	r2,-8(fp)
   80750:	10800017 	ldw	r2,0(r2)
   80754:	00c002b4 	movhi	r3,10
   80758:	18f5d704 	addi	r3,r3,-10404
   8075c:	1085883a 	add	r2,r2,r2
   80760:	1085883a 	add	r2,r2,r2
   80764:	1885883a 	add	r2,r3,r2
   80768:	10c00017 	ldw	r3,0(r2)
   8076c:	e0bfff17 	ldw	r2,-4(fp)
   80770:	10c00015 	stw	r3,0(r2)
   80774:	00000506 	br	8078c <adv7513_mode_state+0xb4>
	} else {
		*mode = vic_table[0];
   80778:	008002b4 	movhi	r2,10
   8077c:	10b5d704 	addi	r2,r2,-10404
   80780:	10c00017 	ldw	r3,0(r2)
   80784:	e0bfff17 	ldw	r2,-4(fp)
   80788:	10c00015 	stw	r3,0(r2)
	}

	return 0;
   8078c:	0005883a 	mov	r2,zero
}
   80790:	e037883a 	mov	sp,fp
   80794:	dfc00117 	ldw	ra,4(sp)
   80798:	df000017 	ldw	fp,0(sp)
   8079c:	dec00204 	addi	sp,sp,8
   807a0:	f800283a 	ret

000807a4 <adv7513_edid_read>:

int adv7513_edid_read(struct hdmi_encoder *ec, void *edid, int segment)
{
   807a4:	defff704 	addi	sp,sp,-36
   807a8:	dfc00815 	stw	ra,32(sp)
   807ac:	df000715 	stw	fp,28(sp)
   807b0:	df000704 	addi	fp,sp,28
   807b4:	e13ffd15 	stw	r4,-12(fp)
   807b8:	e17ffe15 	stw	r5,-8(fp)
   807bc:	e1bfff15 	stw	r6,-4(fp)
   807c0:	d83bb615 	stw	zero,-4392(sp)
	bool r = 0;
   807c4:	e03ffc15 	stw	zero,-16(fp)
	alt_u8 *regv = (alt_u8 *)edid;
   807c8:	e0bffe17 	ldw	r2,-8(fp)
   807cc:	e0bffa15 	stw	r2,-24(fp)
	int i;

	for (i = 0 + segment * 256; i < (segment + 1) * 256; ++i, ++regv) {
   807d0:	e0bfff17 	ldw	r2,-4(fp)
   807d4:	1004923a 	slli	r2,r2,8
   807d8:	e0bffb15 	stw	r2,-20(fp)
   807dc:	00001b06 	br	8084c <adv7513_edid_read+0xa8>
		r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->edid_addr, i, regv);
   807e0:	e0bffd17 	ldw	r2,-12(fp)
   807e4:	10800117 	ldw	r2,4(r2)
   807e8:	10c03fcc 	andi	r3,r2,255
   807ec:	18c0201c 	xori	r3,r3,128
   807f0:	18ffe004 	addi	r3,r3,-128
   807f4:	e0bffb17 	ldw	r2,-20(fp)
   807f8:	10803fcc 	andi	r2,r2,255
   807fc:	e13ffa17 	ldw	r4,-24(fp)
   80800:	d9000015 	stw	r4,0(sp)
   80804:	01000434 	movhi	r4,16
   80808:	21041004 	addi	r4,r4,4160
   8080c:	01400434 	movhi	r5,16
   80810:	29441404 	addi	r5,r5,4176
   80814:	180d883a 	mov	r6,r3
   80818:	100f883a 	mov	r7,r2
   8081c:	008ab380 	call	8ab38 <I2C_Read>
   80820:	e0bffc15 	stw	r2,-16(fp)
		if (!r)
   80824:	e0bffc17 	ldw	r2,-16(fp)
   80828:	1000021e 	bne	r2,zero,80834 <adv7513_edid_read+0x90>
			return -1;
   8082c:	00bfffc4 	movi	r2,-1
   80830:	00000c06 	br	80864 <adv7513_edid_read+0xc0>
{
	bool r = 0;
	alt_u8 *regv = (alt_u8 *)edid;
	int i;

	for (i = 0 + segment * 256; i < (segment + 1) * 256; ++i, ++regv) {
   80834:	e0bffb17 	ldw	r2,-20(fp)
   80838:	10800044 	addi	r2,r2,1
   8083c:	e0bffb15 	stw	r2,-20(fp)
   80840:	e0bffa17 	ldw	r2,-24(fp)
   80844:	10800044 	addi	r2,r2,1
   80848:	e0bffa15 	stw	r2,-24(fp)
   8084c:	e0bfff17 	ldw	r2,-4(fp)
   80850:	10800044 	addi	r2,r2,1
   80854:	1004923a 	slli	r2,r2,8
   80858:	e0fffb17 	ldw	r3,-20(fp)
   8085c:	18bfe016 	blt	r3,r2,807e0 <adv7513_edid_read+0x3c>
		r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->edid_addr, i, regv);
		if (!r)
			return -1;
	}

	return 0;
   80860:	0005883a 	mov	r2,zero
}
   80864:	e037883a 	mov	sp,fp
   80868:	dfc00117 	ldw	ra,4(sp)
   8086c:	df000017 	ldw	fp,0(sp)
   80870:	dec00204 	addi	sp,sp,8
   80874:	f800283a 	ret

00080878 <adv7513_regmap_dump>:

int adv7513_regmap_dump(struct hdmi_encoder *ec, void *data, int offset)
{
   80878:	defff704 	addi	sp,sp,-36
   8087c:	dfc00815 	stw	ra,32(sp)
   80880:	df000715 	stw	fp,28(sp)
   80884:	df000704 	addi	fp,sp,28
   80888:	e13ffd15 	stw	r4,-12(fp)
   8088c:	e17ffe15 	stw	r5,-8(fp)
   80890:	e1bfff15 	stw	r6,-4(fp)
   80894:	d83bb615 	stw	zero,-4392(sp)
	bool r = 0;
   80898:	e03ffc15 	stw	zero,-16(fp)
	alt_u8 *regv = (alt_u8 *)data;
   8089c:	e0bffe17 	ldw	r2,-8(fp)
   808a0:	e0bffa15 	stw	r2,-24(fp)
	int i;

	for (i = 0; i < 256; ++i, ++regv) {
   808a4:	e03ffb15 	stw	zero,-20(fp)
   808a8:	00001b06 	br	80918 <adv7513_regmap_dump+0xa0>
		r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, i, regv);
   808ac:	e0bffd17 	ldw	r2,-12(fp)
   808b0:	10800017 	ldw	r2,0(r2)
   808b4:	10c03fcc 	andi	r3,r2,255
   808b8:	18c0201c 	xori	r3,r3,128
   808bc:	18ffe004 	addi	r3,r3,-128
   808c0:	e0bffb17 	ldw	r2,-20(fp)
   808c4:	10803fcc 	andi	r2,r2,255
   808c8:	e13ffa17 	ldw	r4,-24(fp)
   808cc:	d9000015 	stw	r4,0(sp)
   808d0:	01000434 	movhi	r4,16
   808d4:	21041004 	addi	r4,r4,4160
   808d8:	01400434 	movhi	r5,16
   808dc:	29441404 	addi	r5,r5,4176
   808e0:	180d883a 	mov	r6,r3
   808e4:	100f883a 	mov	r7,r2
   808e8:	008ab380 	call	8ab38 <I2C_Read>
   808ec:	e0bffc15 	stw	r2,-16(fp)
		if (!r)
   808f0:	e0bffc17 	ldw	r2,-16(fp)
   808f4:	1000021e 	bne	r2,zero,80900 <adv7513_regmap_dump+0x88>
			return -1;
   808f8:	00bfffc4 	movi	r2,-1
   808fc:	00000a06 	br	80928 <adv7513_regmap_dump+0xb0>
{
	bool r = 0;
	alt_u8 *regv = (alt_u8 *)data;
	int i;

	for (i = 0; i < 256; ++i, ++regv) {
   80900:	e0bffb17 	ldw	r2,-20(fp)
   80904:	10800044 	addi	r2,r2,1
   80908:	e0bffb15 	stw	r2,-20(fp)
   8090c:	e0bffa17 	ldw	r2,-24(fp)
   80910:	10800044 	addi	r2,r2,1
   80914:	e0bffa15 	stw	r2,-24(fp)
   80918:	e0bffb17 	ldw	r2,-20(fp)
   8091c:	10804010 	cmplti	r2,r2,256
   80920:	103fe21e 	bne	r2,zero,808ac <adv7513_regmap_dump+0x34>
		r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, i, regv);
		if (!r)
			return -1;
	}

	return 0;
   80924:	0005883a 	mov	r2,zero
}
   80928:	e037883a 	mov	sp,fp
   8092c:	dfc00117 	ldw	ra,4(sp)
   80930:	df000017 	ldw	fp,0(sp)
   80934:	dec00204 	addi	sp,sp,8
   80938:	f800283a 	ret

0008093c <adv7513_config_csc>:

// color space converter (section 4.3.8)
static int adv7513_config_csc(struct hdmi_encoder *ec, int enable, void *config)
{
   8093c:	defffa04 	addi	sp,sp,-24
   80940:	dfc00515 	stw	ra,20(sp)
   80944:	df000415 	stw	fp,16(sp)
   80948:	df000404 	addi	fp,sp,16
   8094c:	e13ffd15 	stw	r4,-12(fp)
   80950:	e17ffe15 	stw	r5,-8(fp)
   80954:	e1bfff15 	stw	r6,-4(fp)
   80958:	d83bb615 	stw	zero,-4392(sp)
	//printf("adv7513_config_csc()\n");

	// 0x18[7] <- enable
	// 0x18[6:5] <- scaling
	// 0x18[4:0] <- csc_a1[4:0]
	int regv = (enable ? 1 : 0) << 7;
   8095c:	e0bffe17 	ldw	r2,-8(fp)
   80960:	10000226 	beq	r2,zero,8096c <adv7513_config_csc+0x30>
   80964:	00802004 	movi	r2,128
   80968:	00000106 	br	80970 <adv7513_config_csc+0x34>
   8096c:	0005883a 	mov	r2,zero
   80970:	e0bffc15 	stw	r2,-16(fp)
	if (reg_update_bits(ec, 0x18, 0x80, regv) != 0)
   80974:	e13ffd17 	ldw	r4,-12(fp)
   80978:	01400604 	movi	r5,24
   8097c:	01802004 	movi	r6,128
   80980:	e1fffc17 	ldw	r7,-16(fp)
   80984:	008a7300 	call	8a730 <reg_update_bits>
   80988:	10000226 	beq	r2,zero,80994 <adv7513_config_csc+0x58>
		return -1;
   8098c:	00bfffc4 	movi	r2,-1
   80990:	00000106 	br	80998 <adv7513_config_csc+0x5c>
	// 0x2d[7:0] <- csc_c3[12:5]

	// 0x2e[4:0] <- csc_c4[4:0]
	// 0x2f[7:0] <- csc_c4[12:5]

	return 0;
   80994:	0005883a 	mov	r2,zero
}
   80998:	e037883a 	mov	sp,fp
   8099c:	dfc00117 	ldw	ra,4(sp)
   809a0:	df000017 	ldw	fp,0(sp)
   809a4:	dec00204 	addi	sp,sp,8
   809a8:	f800283a 	ret

000809ac <adv7513_video_in_format>:
// depth       - adv7513_input_color_depth
// color_space - adv7513_input_color_space
// aspect      - adv7513_input_aspect_ratio
// style       - adv7513_input_style
static int adv7513_video_in_format(struct hdmi_encoder *ec, int id, int depth, int color_space, int aspect, int style)
{
   809ac:	defff904 	addi	sp,sp,-28
   809b0:	dfc00615 	stw	ra,24(sp)
   809b4:	df000515 	stw	fp,20(sp)
   809b8:	df000504 	addi	fp,sp,20
   809bc:	e13ffc15 	stw	r4,-16(fp)
   809c0:	e17ffd15 	stw	r5,-12(fp)
   809c4:	e1bffe15 	stw	r6,-8(fp)
   809c8:	e1ffff15 	stw	r7,-4(fp)
   809cc:	d83bb615 	stw	zero,-4392(sp)
	int regv;

	//printf("adv7513_video_in_format()\n");

	// 0x15[3:0] <- id
	if (reg_update_bits(ec, 0x15, 0x0f, id) != 0)
   809d0:	e13ffc17 	ldw	r4,-16(fp)
   809d4:	01400544 	movi	r5,21
   809d8:	018003c4 	movi	r6,15
   809dc:	e1fffd17 	ldw	r7,-12(fp)
   809e0:	008a7300 	call	8a730 <reg_update_bits>
   809e4:	10000226 	beq	r2,zero,809f0 <adv7513_video_in_format+0x44>
		return -1;
   809e8:	00bfffc4 	movi	r2,-1
   809ec:	00002006 	br	80a70 <adv7513_video_in_format+0xc4>

	// 0x16[5:4] <- depth
	// 0x16[3:2] <- style
	// 0x16[0] <- color_space
	regv = ((depth & 0x03) << 4) | ((style & 0x03) << 2) | (color_space & 0x01);
   809f0:	e0bffe17 	ldw	r2,-8(fp)
   809f4:	108000cc 	andi	r2,r2,3
   809f8:	1006913a 	slli	r3,r2,4
   809fc:	e0800317 	ldw	r2,12(fp)
   80a00:	108000cc 	andi	r2,r2,3
   80a04:	1085883a 	add	r2,r2,r2
   80a08:	1085883a 	add	r2,r2,r2
   80a0c:	1886b03a 	or	r3,r3,r2
   80a10:	e0bfff17 	ldw	r2,-4(fp)
   80a14:	1080004c 	andi	r2,r2,1
   80a18:	1884b03a 	or	r2,r3,r2
   80a1c:	e0bffb15 	stw	r2,-20(fp)
	if (reg_update_bits(ec, 0x16, 0x3d, regv) != 0)
   80a20:	e13ffc17 	ldw	r4,-16(fp)
   80a24:	01400584 	movi	r5,22
   80a28:	01800f44 	movi	r6,61
   80a2c:	e1fffb17 	ldw	r7,-20(fp)
   80a30:	008a7300 	call	8a730 <reg_update_bits>
   80a34:	10000226 	beq	r2,zero,80a40 <adv7513_video_in_format+0x94>
		return -1;
   80a38:	00bfffc4 	movi	r2,-1
   80a3c:	00000c06 	br	80a70 <adv7513_video_in_format+0xc4>

	// 0x17[1] <- aspect
	if (reg_update_bits(ec, 0x17, 0x02, (aspect & 0x01) << 1) != 0)
   80a40:	e0800217 	ldw	r2,8(fp)
   80a44:	1080004c 	andi	r2,r2,1
   80a48:	1085883a 	add	r2,r2,r2
   80a4c:	e13ffc17 	ldw	r4,-16(fp)
   80a50:	014005c4 	movi	r5,23
   80a54:	01800084 	movi	r6,2
   80a58:	100f883a 	mov	r7,r2
   80a5c:	008a7300 	call	8a730 <reg_update_bits>
   80a60:	10000226 	beq	r2,zero,80a6c <adv7513_video_in_format+0xc0>
		return -1;
   80a64:	00bfffc4 	movi	r2,-1
   80a68:	00000106 	br	80a70 <adv7513_video_in_format+0xc4>

	return 0;
   80a6c:	0005883a 	mov	r2,zero
}
   80a70:	e037883a 	mov	sp,fp
   80a74:	dfc00117 	ldw	ra,4(sp)
   80a78:	df000017 	ldw	fp,0(sp)
   80a7c:	dec00204 	addi	sp,sp,8
   80a80:	f800283a 	ret

00080a84 <adv7513_video_out_format>:
// out video format
//
// format   - adv7513_output_format
// dvi		- adv7513_hdmi_dvi
static int adv7513_video_out_format(struct hdmi_encoder *ec, int format, int dvi)
{
   80a84:	defffa04 	addi	sp,sp,-24
   80a88:	dfc00515 	stw	ra,20(sp)
   80a8c:	df000415 	stw	fp,16(sp)
   80a90:	df000404 	addi	fp,sp,16
   80a94:	e13ffd15 	stw	r4,-12(fp)
   80a98:	e17ffe15 	stw	r5,-8(fp)
   80a9c:	e1bfff15 	stw	r6,-4(fp)
   80aa0:	d83bb615 	stw	zero,-4392(sp)
	int regv;

	//printf("adv7513_video_out_format()\n");

	// 0x16[7] <- format
	regv = (format & 0x01) << 7;
   80aa4:	e0bffe17 	ldw	r2,-8(fp)
   80aa8:	100491fa 	slli	r2,r2,7
   80aac:	10803fcc 	andi	r2,r2,255
   80ab0:	e0bffc15 	stw	r2,-16(fp)
	if (reg_update_bits(ec, 0x16, 0x80, regv) != 0)
   80ab4:	e13ffd17 	ldw	r4,-12(fp)
   80ab8:	01400584 	movi	r5,22
   80abc:	01802004 	movi	r6,128
   80ac0:	e1fffc17 	ldw	r7,-16(fp)
   80ac4:	008a7300 	call	8a730 <reg_update_bits>
   80ac8:	10000226 	beq	r2,zero,80ad4 <adv7513_video_out_format+0x50>
		return -1;
   80acc:	00bfffc4 	movi	r2,-1
   80ad0:	00002d06 	br	80b88 <adv7513_video_out_format+0x104>

	// 0x18 ~ 0x2f
	if (adv7513_config_csc(ec, 0, 0) != 0) {
   80ad4:	e13ffd17 	ldw	r4,-12(fp)
   80ad8:	000b883a 	mov	r5,zero
   80adc:	000d883a 	mov	r6,zero
   80ae0:	008093c0 	call	8093c <adv7513_config_csc>
   80ae4:	10000226 	beq	r2,zero,80af0 <adv7513_video_out_format+0x6c>
		return -1;
   80ae8:	00bfffc4 	movi	r2,-1
   80aec:	00002606 	br	80b88 <adv7513_video_out_format+0x104>
	}

	// 0xaf[7] <- hdcp (enable/disable)
	// 0xaf[1] <- dvi (section 4.2.2)
	if (reg_update_bits(ec, 0xaf, 0x82, (dvi & 0x01) << 1) != 0)
   80af0:	e0bfff17 	ldw	r2,-4(fp)
   80af4:	1080004c 	andi	r2,r2,1
   80af8:	1085883a 	add	r2,r2,r2
   80afc:	e13ffd17 	ldw	r4,-12(fp)
   80b00:	01402bc4 	movi	r5,175
   80b04:	01802084 	movi	r6,130
   80b08:	100f883a 	mov	r7,r2
   80b0c:	008a7300 	call	8a730 <reg_update_bits>
   80b10:	10000226 	beq	r2,zero,80b1c <adv7513_video_out_format+0x98>
		return -1;
   80b14:	00bfffc4 	movi	r2,-1
   80b18:	00001b06 	br	80b88 <adv7513_video_out_format+0x104>

	// general control packet
	// 0x40[7] <- gc (section 4.2.3 && 4.3.3)
	if (dvi == ADV7513_MODE_HDMI) {
   80b1c:	e0bfff17 	ldw	r2,-4(fp)
   80b20:	10800058 	cmpnei	r2,r2,1
   80b24:	1000081e 	bne	r2,zero,80b48 <adv7513_video_out_format+0xc4>
		if (reg_update_bits(ec, 0x40, 0x80, (1 & 0x01) << 7) != 0)
   80b28:	e13ffd17 	ldw	r4,-12(fp)
   80b2c:	01401004 	movi	r5,64
   80b30:	01802004 	movi	r6,128
   80b34:	01c02004 	movi	r7,128
   80b38:	008a7300 	call	8a730 <reg_update_bits>
   80b3c:	10000926 	beq	r2,zero,80b64 <adv7513_video_out_format+0xe0>
			return -1;
   80b40:	00bfffc4 	movi	r2,-1
   80b44:	00001006 	br	80b88 <adv7513_video_out_format+0x104>
	} else {
		if (reg_clear_bits(ec, 0x40, 0x80) != 0)
   80b48:	e13ffd17 	ldw	r4,-12(fp)
   80b4c:	01401004 	movi	r5,64
   80b50:	01802004 	movi	r6,128
   80b54:	008a9580 	call	8a958 <reg_clear_bits>
   80b58:	10000226 	beq	r2,zero,80b64 <adv7513_video_out_format+0xe0>
			return -1;
   80b5c:	00bfffc4 	movi	r2,-1
   80b60:	00000906 	br	80b88 <adv7513_video_out_format+0x104>
	}

	// 0x4c[3:0] <- gc_depth (section 4.2.6)
	if (reg_update_bits(ec, 0x4c, 0x0f, 4 & 0x0f) != 0)
   80b64:	e13ffd17 	ldw	r4,-12(fp)
   80b68:	01401304 	movi	r5,76
   80b6c:	018003c4 	movi	r6,15
   80b70:	01c00104 	movi	r7,4
   80b74:	008a7300 	call	8a730 <reg_update_bits>
   80b78:	10000226 	beq	r2,zero,80b84 <adv7513_video_out_format+0x100>
		return -1;
   80b7c:	00bfffc4 	movi	r2,-1
   80b80:	00000106 	br	80b88 <adv7513_video_out_format+0x104>
	// VIC <- vga 4:3
	// 0x3c[5:0] <- 0x01 & 0x3f
	//if (reg_update_bits(ec, 0x3c, 0x3f, 0x01) != 0)
	//	return -1;

	return 0;
   80b84:	0005883a 	mov	r2,zero
}
   80b88:	e037883a 	mov	sp,fp
   80b8c:	dfc00117 	ldw	ra,4(sp)
   80b90:	df000017 	ldw	fp,0(sp)
   80b94:	dec00204 	addi	sp,sp,8
   80b98:	f800283a 	ret

00080b9c <adv7513_avi_infoframe>:
//   CEA-861-D --section 6.2
//   ADV7513 programmer's manual -- section 4.3.9.1
//
// 0x52 ~ 0x71
static int adv7513_avi_infoframe(struct hdmi_encoder *ec)
{
   80b9c:	defffb04 	addi	sp,sp,-20
   80ba0:	dfc00415 	stw	ra,16(sp)
   80ba4:	df000315 	stw	fp,12(sp)
   80ba8:	df000304 	addi	fp,sp,12
   80bac:	e13fff15 	stw	r4,-4(fp)
   80bb0:	d83bb615 	stw	zero,-4392(sp)
	struct avi_infoframe *avi = &ec->avi_if;
   80bb4:	e0bfff17 	ldw	r2,-4(fp)
   80bb8:	10800904 	addi	r2,r2,36
   80bbc:	e0bffd15 	stw	r2,-12(fp)
	int regv;

	//printf("adv7513_avi_infoframe()\n");

#if 1  // local development defaults
	avi->scan_info = 2;  		// scan
   80bc0:	e0bffd17 	ldw	r2,-12(fp)
   80bc4:	00c00084 	movi	r3,2
   80bc8:	10c00015 	stw	r3,0(r2)
	avi->rgb_ycbcr = 0;			// rgb or ycbcr
   80bcc:	e0bffd17 	ldw	r2,-12(fp)
   80bd0:	10000315 	stw	zero,12(r2)
	//avi->f7 = 0;				// reserved
	avi->active_fmt = 1;		// active format r3r0 valid
   80bd4:	e0bffd17 	ldw	r2,-12(fp)
   80bd8:	00c00044 	movi	r3,1
   80bdc:	10c00215 	stw	r3,8(r2)
	avi->active_fmt_ar = 8;		// active format aspect ratio
   80be0:	e0bffd17 	ldw	r2,-12(fp)
   80be4:	00c00204 	movi	r3,8
   80be8:	10c00415 	stw	r3,16(r2)
	avi->pict_ar = 1;			// picture aspect ratio
   80bec:	e0bffd17 	ldw	r2,-12(fp)
   80bf0:	00c00044 	movi	r3,1
   80bf4:	10c00515 	stw	r3,20(r2)
	avi->colorimetry = 0;		// colorimetry
   80bf8:	e0bffd17 	ldw	r2,-12(fp)
   80bfc:	10000615 	stw	zero,24(r2)
	avi->colorimetry_ext = 0;	// extended colorimetry
   80c00:	e0bffd17 	ldw	r2,-12(fp)
   80c04:	10000915 	stw	zero,36(r2)
	avi->scaling = 0;			// non-uniform scaling
   80c08:	e0bffd17 	ldw	r2,-12(fp)
   80c0c:	10000715 	stw	zero,28(r2)
	avi->quant = 0;				// rgb quantization range
   80c10:	e0bffd17 	ldw	r2,-12(fp)
   80c14:	10000815 	stw	zero,32(r2)
	avi->itc = 0;				// it content
   80c18:	e0bffd17 	ldw	r2,-12(fp)
   80c1c:	10000a15 	stw	zero,40(r2)
	avi->pr = 0;				// pixel repetition factor
   80c20:	e0bffd17 	ldw	r2,-12(fp)
   80c24:	10000c15 	stw	zero,48(r2)
	avi->vic = 1;				// video identification code
   80c28:	e0bffd17 	ldw	r2,-12(fp)
   80c2c:	00c00044 	movi	r3,1
   80c30:	10c00b15 	stw	r3,44(r2)
	avi->yq1yq0 = 0;			// ??
   80c34:	e0bffd17 	ldw	r2,-12(fp)
   80c38:	10000d15 	stw	zero,52(r2)

	avi->bar_info = 1;  		// bar fields valid
   80c3c:	e0bffd17 	ldw	r2,-12(fp)
   80c40:	00c00044 	movi	r3,1
   80c44:	10c00115 	stw	r3,4(r2)
	avi->bar.top_e = 0;
   80c48:	e0bffd17 	ldw	r2,-12(fp)
   80c4c:	10000e15 	stw	zero,56(r2)
	avi->bar.bottom_s = 0;
   80c50:	e0bffd17 	ldw	r2,-12(fp)
   80c54:	10000f15 	stw	zero,60(r2)
	avi->bar.left_e = 0;
   80c58:	e0bffd17 	ldw	r2,-12(fp)
   80c5c:	10001015 	stw	zero,64(r2)
	avi->bar.right_s = 0;
   80c60:	e0bffd17 	ldw	r2,-12(fp)
   80c64:	10001115 	stw	zero,68(r2)
	//   0x55[6:5]
	//   0x56[5:4]

	// 0x44[4] avi infoframe enable 0)disable 1)enable
	// 0x44[3] audio infoframe enable 0)disable 1)enable
	if (reg_update_bits(ec, 0x44, 0x10, 1 << 4) != 0)
   80c68:	e13fff17 	ldw	r4,-4(fp)
   80c6c:	01401104 	movi	r5,68
   80c70:	01800404 	movi	r6,16
   80c74:	01c00404 	movi	r7,16
   80c78:	008a7300 	call	8a730 <reg_update_bits>
   80c7c:	10000226 	beq	r2,zero,80c88 <adv7513_avi_infoframe+0xec>
		return -1;
   80c80:	00bfffc4 	movi	r2,-1
   80c84:	0000c406 	br	80f98 <adv7513_avi_infoframe+0x3fc>

	// 0x4a[7] <- auto checksum
	// 0x4a[6] avi infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[5] audio infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[4] gc packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	if (reg_update_bits(ec, 0x4a, 0xc0, 3 << 6) != 0)
   80c88:	e13fff17 	ldw	r4,-4(fp)
   80c8c:	01401284 	movi	r5,74
   80c90:	01803004 	movi	r6,192
   80c94:	01c03004 	movi	r7,192
   80c98:	008a7300 	call	8a730 <reg_update_bits>
   80c9c:	10000226 	beq	r2,zero,80ca8 <adv7513_avi_infoframe+0x10c>
		return -1;
   80ca0:	00bfffc4 	movi	r2,-1
   80ca4:	0000bc06 	br	80f98 <adv7513_avi_infoframe+0x3fc>

	// 0x55[6:5] <- output format 0)rgb 1)ycbcr422 2)ycbcr444
	// 0x55[4]   <- active format indicator 0)no-data 1)valid (bar, scan, colorimetry, non-uniform-scaling, active-aspect-ratio)
	// 0x55[3:2] <- bar 0)invalid-bar 1)vertical 2)horizontal 3)both
	// 0x55[1:0] <- scan 0)no-data 1)tv 2)pc 3)none
	regv = ((avi->rgb_ycbcr & 0x03) << 5) | ((avi->active_fmt & 0x01) << 4) | ((avi->bar_info & 0x03) << 2) | ((avi->scan_info & 0x03) << 0);
   80ca8:	e0bffd17 	ldw	r2,-12(fp)
   80cac:	10800317 	ldw	r2,12(r2)
   80cb0:	108000cc 	andi	r2,r2,3
   80cb4:	1006917a 	slli	r3,r2,5
   80cb8:	e0bffd17 	ldw	r2,-12(fp)
   80cbc:	10800217 	ldw	r2,8(r2)
   80cc0:	1080004c 	andi	r2,r2,1
   80cc4:	1004913a 	slli	r2,r2,4
   80cc8:	1886b03a 	or	r3,r3,r2
   80ccc:	e0bffd17 	ldw	r2,-12(fp)
   80cd0:	10800117 	ldw	r2,4(r2)
   80cd4:	108000cc 	andi	r2,r2,3
   80cd8:	1085883a 	add	r2,r2,r2
   80cdc:	1085883a 	add	r2,r2,r2
   80ce0:	1886b03a 	or	r3,r3,r2
   80ce4:	e0bffd17 	ldw	r2,-12(fp)
   80ce8:	10800017 	ldw	r2,0(r2)
   80cec:	108000cc 	andi	r2,r2,3
   80cf0:	1884b03a 	or	r2,r3,r2
   80cf4:	e0bffe15 	stw	r2,-8(fp)
	if (reg_update_bits(ec, 0x55, 0x70, regv) != 0)
   80cf8:	e13fff17 	ldw	r4,-4(fp)
   80cfc:	01401544 	movi	r5,85
   80d00:	01801c04 	movi	r6,112
   80d04:	e1fffe17 	ldw	r7,-8(fp)
   80d08:	008a7300 	call	8a730 <reg_update_bits>
   80d0c:	10000226 	beq	r2,zero,80d18 <adv7513_avi_infoframe+0x17c>
		return -1;
   80d10:	00bfffc4 	movi	r2,-1
   80d14:	0000a006 	br	80f98 <adv7513_avi_infoframe+0x3fc>

	// 0x56[7:6] <- colorimetry 0)no-data 1)ITU601 2)ITU709 3)extended <- 0x57[6:4]
	// 0x56[5:4] <- picture aspect ratio 0)no-data 1)4:3 2)16:9 3)none
	// 0x56[3:0] <- active aspect ratio 8)same as 0x56[5:4] 9)4:3 10)16:0 11)14:9
	regv = ((avi->colorimetry & 0x03) << 6) | ((avi->pict_ar & 0x03) << 4) | ((avi->active_fmt_ar & 0x0f) << 0);
   80d18:	e0bffd17 	ldw	r2,-12(fp)
   80d1c:	10800617 	ldw	r2,24(r2)
   80d20:	100491ba 	slli	r2,r2,6
   80d24:	10c03fcc 	andi	r3,r2,255
   80d28:	e0bffd17 	ldw	r2,-12(fp)
   80d2c:	10800517 	ldw	r2,20(r2)
   80d30:	108000cc 	andi	r2,r2,3
   80d34:	1004913a 	slli	r2,r2,4
   80d38:	1886b03a 	or	r3,r3,r2
   80d3c:	e0bffd17 	ldw	r2,-12(fp)
   80d40:	10800417 	ldw	r2,16(r2)
   80d44:	108003cc 	andi	r2,r2,15
   80d48:	1884b03a 	or	r2,r3,r2
   80d4c:	e0bffe15 	stw	r2,-8(fp)
	if (reg_write(ec, 0x56, regv) != 0)
   80d50:	e13fff17 	ldw	r4,-4(fp)
   80d54:	01401584 	movi	r5,86
   80d58:	e1bffe17 	ldw	r6,-8(fp)
   80d5c:	008a6a00 	call	8a6a0 <reg_write>
   80d60:	10000226 	beq	r2,zero,80d6c <adv7513_avi_infoframe+0x1d0>
		return -1;
   80d64:	00bfffc4 	movi	r2,-1
   80d68:	00008b06 	br	80f98 <adv7513_avi_infoframe+0x3fc>

	// 0x57[7] <- itc 0)none 1)available in 0x59[5:4]
	// 0x57[6:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	// 0x57[3:2] <- rgb quantization range 0)default 1)limited 2)full 11)reserved
	// 0x57[1:0] <- non-uniform picture scaling 0)unknown 1)h-scaling 2) v-scaling 3)h/v scaling
	regv = ((avi->itc & 0x01) << 7) | ((avi->colorimetry_ext & 0x07) << 4) | ((avi->quant & 0x03) << 2) | ((avi->scaling & 0x03) << 0);
   80d6c:	e0bffd17 	ldw	r2,-12(fp)
   80d70:	10800a17 	ldw	r2,40(r2)
   80d74:	100491fa 	slli	r2,r2,7
   80d78:	10c03fcc 	andi	r3,r2,255
   80d7c:	e0bffd17 	ldw	r2,-12(fp)
   80d80:	10800917 	ldw	r2,36(r2)
   80d84:	108001cc 	andi	r2,r2,7
   80d88:	1004913a 	slli	r2,r2,4
   80d8c:	1886b03a 	or	r3,r3,r2
   80d90:	e0bffd17 	ldw	r2,-12(fp)
   80d94:	10800817 	ldw	r2,32(r2)
   80d98:	108000cc 	andi	r2,r2,3
   80d9c:	1085883a 	add	r2,r2,r2
   80da0:	1085883a 	add	r2,r2,r2
   80da4:	1886b03a 	or	r3,r3,r2
   80da8:	e0bffd17 	ldw	r2,-12(fp)
   80dac:	10800717 	ldw	r2,28(r2)
   80db0:	108000cc 	andi	r2,r2,3
   80db4:	1884b03a 	or	r2,r3,r2
   80db8:	e0bffe15 	stw	r2,-8(fp)
	if (reg_write(ec, 0x57, regv) != 0)
   80dbc:	e13fff17 	ldw	r4,-4(fp)
   80dc0:	014015c4 	movi	r5,87
   80dc4:	e1bffe17 	ldw	r6,-8(fp)
   80dc8:	008a6a00 	call	8a6a0 <reg_write>
   80dcc:	10000226 	beq	r2,zero,80dd8 <adv7513_avi_infoframe+0x23c>
		return -1;
   80dd0:	00bfffc4 	movi	r2,-1
   80dd4:	00007006 	br	80f98 <adv7513_avi_infoframe+0x3fc>

	// 0x59[7:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	regv = ((avi->yq1yq0 & 0x0f) << 4);
   80dd8:	e0bffd17 	ldw	r2,-12(fp)
   80ddc:	10800d17 	ldw	r2,52(r2)
   80de0:	1004913a 	slli	r2,r2,4
   80de4:	10803fcc 	andi	r2,r2,255
   80de8:	e0bffe15 	stw	r2,-8(fp)
	if (reg_write(ec, 0x59, regv) != 0)
   80dec:	e13fff17 	ldw	r4,-4(fp)
   80df0:	01401644 	movi	r5,89
   80df4:	e1bffe17 	ldw	r6,-8(fp)
   80df8:	008a6a00 	call	8a6a0 <reg_write>
   80dfc:	10000226 	beq	r2,zero,80e08 <adv7513_avi_infoframe+0x26c>
		return -1;
   80e00:	00bfffc4 	movi	r2,-1
   80e04:	00006406 	br	80f98 <adv7513_avi_infoframe+0x3fc>

	// 0x5a[7:0] <- active line (bar)
	regv = avi->bar.top_e & 0xff;
   80e08:	e0bffd17 	ldw	r2,-12(fp)
   80e0c:	10800e17 	ldw	r2,56(r2)
   80e10:	10803fcc 	andi	r2,r2,255
   80e14:	e0bffe15 	stw	r2,-8(fp)
	if (reg_write(ec, 0x5a, regv) != 0)
   80e18:	e13fff17 	ldw	r4,-4(fp)
   80e1c:	01401684 	movi	r5,90
   80e20:	e1bffe17 	ldw	r6,-8(fp)
   80e24:	008a6a00 	call	8a6a0 <reg_write>
   80e28:	10000226 	beq	r2,zero,80e34 <adv7513_avi_infoframe+0x298>
		return -1;
   80e2c:	00bfffc4 	movi	r2,-1
   80e30:	00005906 	br	80f98 <adv7513_avi_infoframe+0x3fc>

	// 0x5b[7:0] <- active line (bar)
	regv = (avi->bar.top_e >> 8) & 0xff;
   80e34:	e0bffd17 	ldw	r2,-12(fp)
   80e38:	10800e17 	ldw	r2,56(r2)
   80e3c:	1005d23a 	srai	r2,r2,8
   80e40:	10803fcc 	andi	r2,r2,255
   80e44:	e0bffe15 	stw	r2,-8(fp)
	if (reg_write(ec, 0x5b, regv) != 0)
   80e48:	e13fff17 	ldw	r4,-4(fp)
   80e4c:	014016c4 	movi	r5,91
   80e50:	e1bffe17 	ldw	r6,-8(fp)
   80e54:	008a6a00 	call	8a6a0 <reg_write>
   80e58:	10000226 	beq	r2,zero,80e64 <adv7513_avi_infoframe+0x2c8>
		return -1;
   80e5c:	00bfffc4 	movi	r2,-1
   80e60:	00004d06 	br	80f98 <adv7513_avi_infoframe+0x3fc>

	// 0x5c[7:0] <- active line (bar)
	regv = avi->bar.bottom_s & 0xff;
   80e64:	e0bffd17 	ldw	r2,-12(fp)
   80e68:	10800f17 	ldw	r2,60(r2)
   80e6c:	10803fcc 	andi	r2,r2,255
   80e70:	e0bffe15 	stw	r2,-8(fp)
	if (reg_write(ec, 0x5c, regv) != 0)
   80e74:	e13fff17 	ldw	r4,-4(fp)
   80e78:	01401704 	movi	r5,92
   80e7c:	e1bffe17 	ldw	r6,-8(fp)
   80e80:	008a6a00 	call	8a6a0 <reg_write>
   80e84:	10000226 	beq	r2,zero,80e90 <adv7513_avi_infoframe+0x2f4>
		return -1;
   80e88:	00bfffc4 	movi	r2,-1
   80e8c:	00004206 	br	80f98 <adv7513_avi_infoframe+0x3fc>

	// 0x5d[7:0] <- active line (bar)
	regv = (avi->bar.bottom_s >> 8) & 0xff;
   80e90:	e0bffd17 	ldw	r2,-12(fp)
   80e94:	10800f17 	ldw	r2,60(r2)
   80e98:	1005d23a 	srai	r2,r2,8
   80e9c:	10803fcc 	andi	r2,r2,255
   80ea0:	e0bffe15 	stw	r2,-8(fp)
	if (reg_write(ec, 0x5d, regv) != 0)
   80ea4:	e13fff17 	ldw	r4,-4(fp)
   80ea8:	01401744 	movi	r5,93
   80eac:	e1bffe17 	ldw	r6,-8(fp)
   80eb0:	008a6a00 	call	8a6a0 <reg_write>
   80eb4:	10000226 	beq	r2,zero,80ec0 <adv7513_avi_infoframe+0x324>
		return -1;
   80eb8:	00bfffc4 	movi	r2,-1
   80ebc:	00003606 	br	80f98 <adv7513_avi_infoframe+0x3fc>

	// 0x5e[7:0] <- active line (bar)
	regv = avi->bar.left_e & 0xff;
   80ec0:	e0bffd17 	ldw	r2,-12(fp)
   80ec4:	10801017 	ldw	r2,64(r2)
   80ec8:	10803fcc 	andi	r2,r2,255
   80ecc:	e0bffe15 	stw	r2,-8(fp)
	if (reg_write(ec, 0x5e, regv) != 0)
   80ed0:	e13fff17 	ldw	r4,-4(fp)
   80ed4:	01401784 	movi	r5,94
   80ed8:	e1bffe17 	ldw	r6,-8(fp)
   80edc:	008a6a00 	call	8a6a0 <reg_write>
   80ee0:	10000226 	beq	r2,zero,80eec <adv7513_avi_infoframe+0x350>
		return -1;
   80ee4:	00bfffc4 	movi	r2,-1
   80ee8:	00002b06 	br	80f98 <adv7513_avi_infoframe+0x3fc>

	// 0x5f[7:0] <- active line (bar)
	regv = (avi->bar.left_e >> 8) & 0xff;
   80eec:	e0bffd17 	ldw	r2,-12(fp)
   80ef0:	10801017 	ldw	r2,64(r2)
   80ef4:	1005d23a 	srai	r2,r2,8
   80ef8:	10803fcc 	andi	r2,r2,255
   80efc:	e0bffe15 	stw	r2,-8(fp)
	if (reg_write(ec, 0x5f, regv) != 0)
   80f00:	e13fff17 	ldw	r4,-4(fp)
   80f04:	014017c4 	movi	r5,95
   80f08:	e1bffe17 	ldw	r6,-8(fp)
   80f0c:	008a6a00 	call	8a6a0 <reg_write>
   80f10:	10000226 	beq	r2,zero,80f1c <adv7513_avi_infoframe+0x380>
		return -1;
   80f14:	00bfffc4 	movi	r2,-1
   80f18:	00001f06 	br	80f98 <adv7513_avi_infoframe+0x3fc>

	// 0x60[7:0] <- active line (bar)
	regv = avi->bar.right_s & 0xff;
   80f1c:	e0bffd17 	ldw	r2,-12(fp)
   80f20:	10801117 	ldw	r2,68(r2)
   80f24:	10803fcc 	andi	r2,r2,255
   80f28:	e0bffe15 	stw	r2,-8(fp)
	if (reg_write(ec, 0x60, regv) != 0)
   80f2c:	e13fff17 	ldw	r4,-4(fp)
   80f30:	01401804 	movi	r5,96
   80f34:	e1bffe17 	ldw	r6,-8(fp)
   80f38:	008a6a00 	call	8a6a0 <reg_write>
   80f3c:	10000226 	beq	r2,zero,80f48 <adv7513_avi_infoframe+0x3ac>
		return -1;
   80f40:	00bfffc4 	movi	r2,-1
   80f44:	00001406 	br	80f98 <adv7513_avi_infoframe+0x3fc>

	// 0x61[7:0] <- active line (bar)
	regv = (avi->bar.right_s >> 8) & 0xff;
   80f48:	e0bffd17 	ldw	r2,-12(fp)
   80f4c:	10801117 	ldw	r2,68(r2)
   80f50:	1005d23a 	srai	r2,r2,8
   80f54:	10803fcc 	andi	r2,r2,255
   80f58:	e0bffe15 	stw	r2,-8(fp)
	if (reg_write(ec, 0x61, regv) != 0)
   80f5c:	e13fff17 	ldw	r4,-4(fp)
   80f60:	01401844 	movi	r5,97
   80f64:	e1bffe17 	ldw	r6,-8(fp)
   80f68:	008a6a00 	call	8a6a0 <reg_write>
   80f6c:	10000226 	beq	r2,zero,80f78 <adv7513_avi_infoframe+0x3dc>
		return -1;
   80f70:	00bfffc4 	movi	r2,-1
   80f74:	00000806 	br	80f98 <adv7513_avi_infoframe+0x3fc>

	// 0x4a[7] <- auto checksum
	// 0x4a[6] avi infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[5] audio infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[4] gc packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	if (reg_clear_bits(ec, 0x4a, 0x40) != 0)
   80f78:	e13fff17 	ldw	r4,-4(fp)
   80f7c:	01401284 	movi	r5,74
   80f80:	01801004 	movi	r6,64
   80f84:	008a9580 	call	8a958 <reg_clear_bits>
   80f88:	10000226 	beq	r2,zero,80f94 <adv7513_avi_infoframe+0x3f8>
		return -1;
   80f8c:	00bfffc4 	movi	r2,-1
   80f90:	00000106 	br	80f98 <adv7513_avi_infoframe+0x3fc>

	return 0;
   80f94:	0005883a 	mov	r2,zero
}
   80f98:	e037883a 	mov	sp,fp
   80f9c:	dfc00117 	ldw	ra,4(sp)
   80fa0:	df000017 	ldw	fp,0(sp)
   80fa4:	dec00204 	addi	sp,sp,8
   80fa8:	f800283a 	ret

00080fac <adv7513_video_in_format_3d>:
// depth       - adv7513_input_color_depth
// color_space - adv7513_input_color_space
// style       - adv7513_input_style
// vic		   - adv7513_vic
static int adv7513_video_in_format_3d(struct hdmi_encoder *ec, int id, int depth, int color_space, int style, int vic)
{
   80fac:	defff804 	addi	sp,sp,-32
   80fb0:	dfc00715 	stw	ra,28(sp)
   80fb4:	df000615 	stw	fp,24(sp)
   80fb8:	df000604 	addi	fp,sp,24
   80fbc:	e13ffc15 	stw	r4,-16(fp)
   80fc0:	e17ffd15 	stw	r5,-12(fp)
   80fc4:	e1bffe15 	stw	r6,-8(fp)
   80fc8:	e1ffff15 	stw	r7,-4(fp)
   80fcc:	d83bb615 	stw	zero,-4392(sp)
	int aspect;

	//printf("adv7513_video_in_format_3d()\n");

	// 0x15[3:0] <- id
	if (reg_update_bits(ec, 0x15, 0x0f, id) != 0)
   80fd0:	e13ffc17 	ldw	r4,-16(fp)
   80fd4:	01400544 	movi	r5,21
   80fd8:	018003c4 	movi	r6,15
   80fdc:	e1fffd17 	ldw	r7,-12(fp)
   80fe0:	008a7300 	call	8a730 <reg_update_bits>
   80fe4:	10000226 	beq	r2,zero,80ff0 <adv7513_video_in_format_3d+0x44>
		return -1;
   80fe8:	00bfffc4 	movi	r2,-1
   80fec:	00004906 	br	81114 <adv7513_video_in_format_3d+0x168>

	// 0x16[5:4] <- depth
	// 0x16[3:2] <- style
	// 0x16[0] <- color_space
	regv = ((depth & 0x03) << 4) | ((style & 0x03) << 2) | (color_space & 0x01);
   80ff0:	e0bffe17 	ldw	r2,-8(fp)
   80ff4:	108000cc 	andi	r2,r2,3
   80ff8:	1006913a 	slli	r3,r2,4
   80ffc:	e0800217 	ldw	r2,8(fp)
   81000:	108000cc 	andi	r2,r2,3
   81004:	1085883a 	add	r2,r2,r2
   81008:	1085883a 	add	r2,r2,r2
   8100c:	1886b03a 	or	r3,r3,r2
   81010:	e0bfff17 	ldw	r2,-4(fp)
   81014:	1080004c 	andi	r2,r2,1
   81018:	1884b03a 	or	r2,r3,r2
   8101c:	e0bffb15 	stw	r2,-20(fp)
	if (reg_update_bits(ec, 0x16, 0x3d, regv) != 0)
   81020:	e13ffc17 	ldw	r4,-16(fp)
   81024:	01400584 	movi	r5,22
   81028:	01800f44 	movi	r6,61
   8102c:	e1fffb17 	ldw	r7,-20(fp)
   81030:	008a7300 	call	8a730 <reg_update_bits>
   81034:	10000226 	beq	r2,zero,81040 <adv7513_video_in_format_3d+0x94>
		return -1;
   81038:	00bfffc4 	movi	r2,-1
   8103c:	00003506 	br	81114 <adv7513_video_in_format_3d+0x168>

	switch (vic) {
   81040:	e0800317 	ldw	r2,12(fp)
   81044:	10800668 	cmpgeui	r2,r2,25
   81048:	1000261e 	bne	r2,zero,810e4 <adv7513_video_in_format_3d+0x138>
   8104c:	e0800317 	ldw	r2,12(fp)
   81050:	1085883a 	add	r2,r2,r2
   81054:	1087883a 	add	r3,r2,r2
   81058:	00800234 	movhi	r2,8
   8105c:	10841b04 	addi	r2,r2,4204
   81060:	1885883a 	add	r2,r3,r2
   81064:	10800017 	ldw	r2,0(r2)
   81068:	1000683a 	jmp	r2
   8106c:	000810e4 	muli	zero,zero,8259
   81070:	000810d0 	cmplti	zero,zero,8259
   81074:	000810d0 	cmplti	zero,zero,8259
   81078:	000810d8 	cmpnei	zero,zero,8259
   8107c:	000810d8 	cmpnei	zero,zero,8259
   81080:	000810d8 	cmpnei	zero,zero,8259
   81084:	000810d0 	cmplti	zero,zero,8259
   81088:	000810d8 	cmpnei	zero,zero,8259
   8108c:	000810d0 	cmplti	zero,zero,8259
   81090:	000810d8 	cmpnei	zero,zero,8259
   81094:	000810d0 	cmplti	zero,zero,8259
   81098:	000810d8 	cmpnei	zero,zero,8259
   8109c:	000810d0 	cmplti	zero,zero,8259
   810a0:	000810d8 	cmpnei	zero,zero,8259
   810a4:	000810d0 	cmplti	zero,zero,8259
   810a8:	000810d8 	cmpnei	zero,zero,8259
   810ac:	000810d8 	cmpnei	zero,zero,8259
   810b0:	000810d0 	cmplti	zero,zero,8259
   810b4:	000810d8 	cmpnei	zero,zero,8259
   810b8:	000810d8 	cmpnei	zero,zero,8259
   810bc:	000810d8 	cmpnei	zero,zero,8259
   810c0:	000810d0 	cmplti	zero,zero,8259
   810c4:	000810d8 	cmpnei	zero,zero,8259
   810c8:	000810d0 	cmplti	zero,zero,8259
   810cc:	000810d8 	cmpnei	zero,zero,8259
	case ADV7513_VIC_240p60x8_4_3:	// (2880)x240p 60Hz
	case ADV7513_VIC_480p60x2_4_3:	// 1440x480p 60Hz
	case ADV7513_VIC_576p50_4_3:	// 720x576p 50Hz
	case ADV7513_VIC_576i50x2_4_3:	// 720(1440)x576i 50Hz
	case ADV7513_VIC_288p50x2_4_3:	// 720(1440)x288p 50Hz
		aspect = ADV7513_INPUT_ASPECT_4V3;
   810d0:	e03ffa15 	stw	zero,-24(fp)
		break;
   810d4:	00000306 	br	810e4 <adv7513_video_in_format_3d+0x138>
	case ADV7513_VIC_576p50_16_9:	// 720x576p 50Hz
	case ADV7513_VIC_720p50_16_9:	// 1280x720p 50Hz
	case ADV7513_VIC_1080i50_16_9:	// 1920x1080i 50Hz
	case ADV7513_VIC_576i50x2_16_9:	// 720(1440)x576i 50Hz
	case ADV7513_VIC_288p50x2_16_9:	// 720(1440)x288p 50Hz
		aspect = ADV7513_INPUT_ASPECT_16V9;
   810d8:	00800044 	movi	r2,1
   810dc:	e0bffa15 	stw	r2,-24(fp)
		break;
   810e0:	0001883a 	nop
	}

	// 0x17[1] <- aspect
	if (reg_update_bits(ec, 0x17, 0x02, (aspect & 0x01) << 1) != 0)
   810e4:	e0bffa17 	ldw	r2,-24(fp)
   810e8:	1080004c 	andi	r2,r2,1
   810ec:	1085883a 	add	r2,r2,r2
   810f0:	e13ffc17 	ldw	r4,-16(fp)
   810f4:	014005c4 	movi	r5,23
   810f8:	01800084 	movi	r6,2
   810fc:	100f883a 	mov	r7,r2
   81100:	008a7300 	call	8a730 <reg_update_bits>
   81104:	10000226 	beq	r2,zero,81110 <adv7513_video_in_format_3d+0x164>
		return -1;
   81108:	00bfffc4 	movi	r2,-1
   8110c:	00000106 	br	81114 <adv7513_video_in_format_3d+0x168>

	return 0;
   81110:	0005883a 	mov	r2,zero
}
   81114:	e037883a 	mov	sp,fp
   81118:	dfc00117 	ldw	ra,4(sp)
   8111c:	df000017 	ldw	fp,0(sp)
   81120:	dec00204 	addi	sp,sp,8
   81124:	f800283a 	ret

00081128 <adv7513_avi_infoframe_3d>:
//
// vic		   - adv7513_vic
//
// 0x52 ~ 0x71
static int adv7513_avi_infoframe_3d(struct hdmi_encoder *ec, int vic)
{
   81128:	defffa04 	addi	sp,sp,-24
   8112c:	dfc00515 	stw	ra,20(sp)
   81130:	df000415 	stw	fp,16(sp)
   81134:	df000404 	addi	fp,sp,16
   81138:	e13ffe15 	stw	r4,-8(fp)
   8113c:	e17fff15 	stw	r5,-4(fp)
   81140:	d83bb615 	stw	zero,-4392(sp)
	struct avi_infoframe *avi = &ec->avi_if;
   81144:	e0bffe17 	ldw	r2,-8(fp)
   81148:	10800904 	addi	r2,r2,36
   8114c:	e0bffc15 	stw	r2,-16(fp)
	int regv;

	//printf("adv7513_avi_infoframe_3d()\n");

#if 1  // local development defaults
	avi->scan_info = 2;  		// scan
   81150:	e0bffc17 	ldw	r2,-16(fp)
   81154:	00c00084 	movi	r3,2
   81158:	10c00015 	stw	r3,0(r2)
	avi->rgb_ycbcr = 0;			// rgb or ycbcr
   8115c:	e0bffc17 	ldw	r2,-16(fp)
   81160:	10000315 	stw	zero,12(r2)
	//avi->f7 = 0;				// reserved
	avi->active_fmt = 1;		// active format r3r0 valid
   81164:	e0bffc17 	ldw	r2,-16(fp)
   81168:	00c00044 	movi	r3,1
   8116c:	10c00215 	stw	r3,8(r2)

	avi->colorimetry = 0;		// colorimetry
   81170:	e0bffc17 	ldw	r2,-16(fp)
   81174:	10000615 	stw	zero,24(r2)
	avi->colorimetry_ext = 0;	// extended colorimetry
   81178:	e0bffc17 	ldw	r2,-16(fp)
   8117c:	10000915 	stw	zero,36(r2)
	avi->scaling = 0;			// non-uniform scaling
   81180:	e0bffc17 	ldw	r2,-16(fp)
   81184:	10000715 	stw	zero,28(r2)
	avi->quant = 0;				// rgb quantization range
   81188:	e0bffc17 	ldw	r2,-16(fp)
   8118c:	10000815 	stw	zero,32(r2)
	avi->itc = 0;				// it content
   81190:	e0bffc17 	ldw	r2,-16(fp)
   81194:	10000a15 	stw	zero,40(r2)
	avi->pr = 1;				// pixel repetition factor 0)no 1)2x 2)3x 3)4x ...
   81198:	e0bffc17 	ldw	r2,-16(fp)
   8119c:	00c00044 	movi	r3,1
   811a0:	10c00c15 	stw	r3,48(r2)
	avi->vic = vic;				// video identification code
   811a4:	e0bffc17 	ldw	r2,-16(fp)
   811a8:	e0ffff17 	ldw	r3,-4(fp)
   811ac:	10c00b15 	stw	r3,44(r2)
	avi->yq1yq0 = 0;			// ??
   811b0:	e0bffc17 	ldw	r2,-16(fp)
   811b4:	10000d15 	stw	zero,52(r2)

	avi->bar_info = 0;  		// bar fields valid
   811b8:	e0bffc17 	ldw	r2,-16(fp)
   811bc:	10000115 	stw	zero,4(r2)
	avi->bar.top_e = 0;
   811c0:	e0bffc17 	ldw	r2,-16(fp)
   811c4:	10000e15 	stw	zero,56(r2)
	avi->bar.bottom_s = 0;
   811c8:	e0bffc17 	ldw	r2,-16(fp)
   811cc:	10000f15 	stw	zero,60(r2)
	avi->bar.left_e = 0;
   811d0:	e0bffc17 	ldw	r2,-16(fp)
   811d4:	10001015 	stw	zero,64(r2)
	avi->bar.right_s = 0;
   811d8:	e0bffc17 	ldw	r2,-16(fp)
   811dc:	10001115 	stw	zero,68(r2)

	avi->active_fmt_ar = 8;		// active format aspect ratio (same as pict_ar)
   811e0:	e0bffc17 	ldw	r2,-16(fp)
   811e4:	00c00204 	movi	r3,8
   811e8:	10c00415 	stw	r3,16(r2)

	switch (vic) {
   811ec:	e0bfff17 	ldw	r2,-4(fp)
   811f0:	10800668 	cmpgeui	r2,r2,25
   811f4:	1000291e 	bne	r2,zero,8129c <adv7513_avi_infoframe_3d+0x174>
   811f8:	e0bfff17 	ldw	r2,-4(fp)
   811fc:	1085883a 	add	r2,r2,r2
   81200:	1087883a 	add	r3,r2,r2
   81204:	00800234 	movhi	r2,8
   81208:	10848604 	addi	r2,r2,4632
   8120c:	1885883a 	add	r2,r3,r2
   81210:	10800017 	ldw	r2,0(r2)
   81214:	1000683a 	jmp	r2
   81218:	0008129c 	xori	zero,zero,8266
   8121c:	0008127c 	xorhi	zero,zero,8265
   81220:	0008127c 	xorhi	zero,zero,8265
   81224:	0008128c 	andi	zero,zero,8266
   81228:	0008128c 	andi	zero,zero,8266
   8122c:	0008128c 	andi	zero,zero,8266
   81230:	0008127c 	xorhi	zero,zero,8265
   81234:	0008128c 	andi	zero,zero,8266
   81238:	0008127c 	xorhi	zero,zero,8265
   8123c:	0008128c 	andi	zero,zero,8266
   81240:	0008127c 	xorhi	zero,zero,8265
   81244:	0008128c 	andi	zero,zero,8266
   81248:	0008127c 	xorhi	zero,zero,8265
   8124c:	0008128c 	andi	zero,zero,8266
   81250:	0008127c 	xorhi	zero,zero,8265
   81254:	0008128c 	andi	zero,zero,8266
   81258:	0008128c 	andi	zero,zero,8266
   8125c:	0008127c 	xorhi	zero,zero,8265
   81260:	0008128c 	andi	zero,zero,8266
   81264:	0008128c 	andi	zero,zero,8266
   81268:	0008128c 	andi	zero,zero,8266
   8126c:	0008127c 	xorhi	zero,zero,8265
   81270:	0008128c 	andi	zero,zero,8266
   81274:	0008127c 	xorhi	zero,zero,8265
   81278:	0008128c 	andi	zero,zero,8266
	case ADV7513_VIC_240p60x8_4_3:	// (2880)x240p 60Hz
	case ADV7513_VIC_480p60x2_4_3:	// 1440x480p 60Hz
	case ADV7513_VIC_576p50_4_3:	// 720x576p 50Hz
	case ADV7513_VIC_576i50x2_4_3:	// 720(1440)x576i 50Hz
	case ADV7513_VIC_288p50x2_4_3:	// 720(1440)x288p 50Hz
		avi->pict_ar = 1;			// picture aspect ratio (4:3)
   8127c:	e0bffc17 	ldw	r2,-16(fp)
   81280:	00c00044 	movi	r3,1
   81284:	10c00515 	stw	r3,20(r2)
		break;
   81288:	00000406 	br	8129c <adv7513_avi_infoframe_3d+0x174>
	case ADV7513_VIC_576p50_16_9:	// 720x576p 50Hz
	case ADV7513_VIC_720p50_16_9:	// 1280x720p 50Hz
	case ADV7513_VIC_1080i50_16_9:	// 1920x1080i 50Hz
	case ADV7513_VIC_576i50x2_16_9:	// 720(1440)x576i 50Hz
	case ADV7513_VIC_288p50x2_16_9:	// 720(1440)x288p 50Hz
		avi->pict_ar = 2;			// picture aspect ratio (16:9)
   8128c:	e0bffc17 	ldw	r2,-16(fp)
   81290:	00c00084 	movi	r3,2
   81294:	10c00515 	stw	r3,20(r2)
		break;
   81298:	0001883a 	nop
	//   0x55[6:5]
	//   0x56[5:4]

	// 0x44[4] avi infoframe enable 0)disable 1)enable
	// 0x44[3] audio infoframe enable 0)disable 1)enable
	if (reg_update_bits(ec, 0x44, 0x10, 1 << 4) != 0)
   8129c:	e13ffe17 	ldw	r4,-8(fp)
   812a0:	01401104 	movi	r5,68
   812a4:	01800404 	movi	r6,16
   812a8:	01c00404 	movi	r7,16
   812ac:	008a7300 	call	8a730 <reg_update_bits>
   812b0:	10000226 	beq	r2,zero,812bc <adv7513_avi_infoframe_3d+0x194>
		return -1;
   812b4:	00bfffc4 	movi	r2,-1
   812b8:	0000c406 	br	815cc <adv7513_avi_infoframe_3d+0x4a4>

	// 0x4a[7] <- auto checksum
	// 0x4a[6] avi infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[5] audio infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[4] gc packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	if (reg_update_bits(ec, 0x4a, 0xc0, 3 << 6) != 0)
   812bc:	e13ffe17 	ldw	r4,-8(fp)
   812c0:	01401284 	movi	r5,74
   812c4:	01803004 	movi	r6,192
   812c8:	01c03004 	movi	r7,192
   812cc:	008a7300 	call	8a730 <reg_update_bits>
   812d0:	10000226 	beq	r2,zero,812dc <adv7513_avi_infoframe_3d+0x1b4>
		return -1;
   812d4:	00bfffc4 	movi	r2,-1
   812d8:	0000bc06 	br	815cc <adv7513_avi_infoframe_3d+0x4a4>

	// 0x55[6:5] <- output format 0)rgb 1)ycbcr422 2)ycbcr444
	// 0x55[4]   <- active format indicator 0)no-data 1)valid (bar, scan, colorimetry, non-uniform-scaling, active-aspect-ratio)
	// 0x55[3:2] <- bar 0)invalid-bar 1)vertical 2)horizontal 3)both
	// 0x55[1:0] <- scan 0)no-data 1)tv 2)pc 3)none
	regv = ((avi->rgb_ycbcr & 0x03) << 5) | ((avi->active_fmt & 0x01) << 4) | ((avi->bar_info & 0x03) << 2) | ((avi->scan_info & 0x03) << 0);
   812dc:	e0bffc17 	ldw	r2,-16(fp)
   812e0:	10800317 	ldw	r2,12(r2)
   812e4:	108000cc 	andi	r2,r2,3
   812e8:	1006917a 	slli	r3,r2,5
   812ec:	e0bffc17 	ldw	r2,-16(fp)
   812f0:	10800217 	ldw	r2,8(r2)
   812f4:	1080004c 	andi	r2,r2,1
   812f8:	1004913a 	slli	r2,r2,4
   812fc:	1886b03a 	or	r3,r3,r2
   81300:	e0bffc17 	ldw	r2,-16(fp)
   81304:	10800117 	ldw	r2,4(r2)
   81308:	108000cc 	andi	r2,r2,3
   8130c:	1085883a 	add	r2,r2,r2
   81310:	1085883a 	add	r2,r2,r2
   81314:	1886b03a 	or	r3,r3,r2
   81318:	e0bffc17 	ldw	r2,-16(fp)
   8131c:	10800017 	ldw	r2,0(r2)
   81320:	108000cc 	andi	r2,r2,3
   81324:	1884b03a 	or	r2,r3,r2
   81328:	e0bffd15 	stw	r2,-12(fp)
	if (reg_update_bits(ec, 0x55, 0x70, regv) != 0)
   8132c:	e13ffe17 	ldw	r4,-8(fp)
   81330:	01401544 	movi	r5,85
   81334:	01801c04 	movi	r6,112
   81338:	e1fffd17 	ldw	r7,-12(fp)
   8133c:	008a7300 	call	8a730 <reg_update_bits>
   81340:	10000226 	beq	r2,zero,8134c <adv7513_avi_infoframe_3d+0x224>
		return -1;
   81344:	00bfffc4 	movi	r2,-1
   81348:	0000a006 	br	815cc <adv7513_avi_infoframe_3d+0x4a4>

	// 0x56[7:6] <- colorimetry 0)no-data 1)ITU601 2)ITU709 3)extended <- 0x57[6:4]
	// 0x56[5:4] <- picture aspect ratio 0)no-data 1)4:3 2)16:9 3)none
	// 0x56[3:0] <- active aspect ratio 8)same as 0x56[5:4] 9)4:3 10)16:0 11)14:9
	regv = ((avi->colorimetry & 0x03) << 6) | ((avi->pict_ar & 0x03) << 4) | ((avi->active_fmt_ar & 0x0f) << 0);
   8134c:	e0bffc17 	ldw	r2,-16(fp)
   81350:	10800617 	ldw	r2,24(r2)
   81354:	100491ba 	slli	r2,r2,6
   81358:	10c03fcc 	andi	r3,r2,255
   8135c:	e0bffc17 	ldw	r2,-16(fp)
   81360:	10800517 	ldw	r2,20(r2)
   81364:	108000cc 	andi	r2,r2,3
   81368:	1004913a 	slli	r2,r2,4
   8136c:	1886b03a 	or	r3,r3,r2
   81370:	e0bffc17 	ldw	r2,-16(fp)
   81374:	10800417 	ldw	r2,16(r2)
   81378:	108003cc 	andi	r2,r2,15
   8137c:	1884b03a 	or	r2,r3,r2
   81380:	e0bffd15 	stw	r2,-12(fp)
	if (reg_write(ec, 0x56, regv) != 0)
   81384:	e13ffe17 	ldw	r4,-8(fp)
   81388:	01401584 	movi	r5,86
   8138c:	e1bffd17 	ldw	r6,-12(fp)
   81390:	008a6a00 	call	8a6a0 <reg_write>
   81394:	10000226 	beq	r2,zero,813a0 <adv7513_avi_infoframe_3d+0x278>
		return -1;
   81398:	00bfffc4 	movi	r2,-1
   8139c:	00008b06 	br	815cc <adv7513_avi_infoframe_3d+0x4a4>

	// 0x57[7] <- itc 0)none 1)available in 0x59[5:4]
	// 0x57[6:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	// 0x57[3:2] <- rgb quantization range 0)default 1)limited 2)full 11)reserved
	// 0x57[1:0] <- non-uniform picture scaling 0)unknown 1)h-scaling 2) v-scaling 3)h/v scaling
	regv = ((avi->itc & 0x01) << 7) | ((avi->colorimetry_ext & 0x07) << 4) | ((avi->quant & 0x03) << 2) | ((avi->scaling & 0x03) << 0);
   813a0:	e0bffc17 	ldw	r2,-16(fp)
   813a4:	10800a17 	ldw	r2,40(r2)
   813a8:	100491fa 	slli	r2,r2,7
   813ac:	10c03fcc 	andi	r3,r2,255
   813b0:	e0bffc17 	ldw	r2,-16(fp)
   813b4:	10800917 	ldw	r2,36(r2)
   813b8:	108001cc 	andi	r2,r2,7
   813bc:	1004913a 	slli	r2,r2,4
   813c0:	1886b03a 	or	r3,r3,r2
   813c4:	e0bffc17 	ldw	r2,-16(fp)
   813c8:	10800817 	ldw	r2,32(r2)
   813cc:	108000cc 	andi	r2,r2,3
   813d0:	1085883a 	add	r2,r2,r2
   813d4:	1085883a 	add	r2,r2,r2
   813d8:	1886b03a 	or	r3,r3,r2
   813dc:	e0bffc17 	ldw	r2,-16(fp)
   813e0:	10800717 	ldw	r2,28(r2)
   813e4:	108000cc 	andi	r2,r2,3
   813e8:	1884b03a 	or	r2,r3,r2
   813ec:	e0bffd15 	stw	r2,-12(fp)
	if (reg_write(ec, 0x57, regv) != 0)
   813f0:	e13ffe17 	ldw	r4,-8(fp)
   813f4:	014015c4 	movi	r5,87
   813f8:	e1bffd17 	ldw	r6,-12(fp)
   813fc:	008a6a00 	call	8a6a0 <reg_write>
   81400:	10000226 	beq	r2,zero,8140c <adv7513_avi_infoframe_3d+0x2e4>
		return -1;
   81404:	00bfffc4 	movi	r2,-1
   81408:	00007006 	br	815cc <adv7513_avi_infoframe_3d+0x4a4>

	// 0x59[7:4] <- extended colorimetry 0)xvYCC601 1)xvYCC701 2)sYCC601 3)AdobeYCC601 4)AdobeRGB
	regv = ((avi->yq1yq0 & 0x0f) << 4);
   8140c:	e0bffc17 	ldw	r2,-16(fp)
   81410:	10800d17 	ldw	r2,52(r2)
   81414:	1004913a 	slli	r2,r2,4
   81418:	10803fcc 	andi	r2,r2,255
   8141c:	e0bffd15 	stw	r2,-12(fp)
	if (reg_write(ec, 0x59, regv) != 0)
   81420:	e13ffe17 	ldw	r4,-8(fp)
   81424:	01401644 	movi	r5,89
   81428:	e1bffd17 	ldw	r6,-12(fp)
   8142c:	008a6a00 	call	8a6a0 <reg_write>
   81430:	10000226 	beq	r2,zero,8143c <adv7513_avi_infoframe_3d+0x314>
		return -1;
   81434:	00bfffc4 	movi	r2,-1
   81438:	00006406 	br	815cc <adv7513_avi_infoframe_3d+0x4a4>

	// 0x5a[7:0] <- active line (bar)
	regv = avi->bar.top_e & 0xff;
   8143c:	e0bffc17 	ldw	r2,-16(fp)
   81440:	10800e17 	ldw	r2,56(r2)
   81444:	10803fcc 	andi	r2,r2,255
   81448:	e0bffd15 	stw	r2,-12(fp)
	if (reg_write(ec, 0x5a, regv) != 0)
   8144c:	e13ffe17 	ldw	r4,-8(fp)
   81450:	01401684 	movi	r5,90
   81454:	e1bffd17 	ldw	r6,-12(fp)
   81458:	008a6a00 	call	8a6a0 <reg_write>
   8145c:	10000226 	beq	r2,zero,81468 <adv7513_avi_infoframe_3d+0x340>
		return -1;
   81460:	00bfffc4 	movi	r2,-1
   81464:	00005906 	br	815cc <adv7513_avi_infoframe_3d+0x4a4>

	// 0x5b[7:0] <- active line (bar)
	regv = (avi->bar.top_e >> 8) & 0xff;
   81468:	e0bffc17 	ldw	r2,-16(fp)
   8146c:	10800e17 	ldw	r2,56(r2)
   81470:	1005d23a 	srai	r2,r2,8
   81474:	10803fcc 	andi	r2,r2,255
   81478:	e0bffd15 	stw	r2,-12(fp)
	if (reg_write(ec, 0x5b, regv) != 0)
   8147c:	e13ffe17 	ldw	r4,-8(fp)
   81480:	014016c4 	movi	r5,91
   81484:	e1bffd17 	ldw	r6,-12(fp)
   81488:	008a6a00 	call	8a6a0 <reg_write>
   8148c:	10000226 	beq	r2,zero,81498 <adv7513_avi_infoframe_3d+0x370>
		return -1;
   81490:	00bfffc4 	movi	r2,-1
   81494:	00004d06 	br	815cc <adv7513_avi_infoframe_3d+0x4a4>

	// 0x5c[7:0] <- active line (bar)
	regv = avi->bar.bottom_s & 0xff;
   81498:	e0bffc17 	ldw	r2,-16(fp)
   8149c:	10800f17 	ldw	r2,60(r2)
   814a0:	10803fcc 	andi	r2,r2,255
   814a4:	e0bffd15 	stw	r2,-12(fp)
	if (reg_write(ec, 0x5c, regv) != 0)
   814a8:	e13ffe17 	ldw	r4,-8(fp)
   814ac:	01401704 	movi	r5,92
   814b0:	e1bffd17 	ldw	r6,-12(fp)
   814b4:	008a6a00 	call	8a6a0 <reg_write>
   814b8:	10000226 	beq	r2,zero,814c4 <adv7513_avi_infoframe_3d+0x39c>
		return -1;
   814bc:	00bfffc4 	movi	r2,-1
   814c0:	00004206 	br	815cc <adv7513_avi_infoframe_3d+0x4a4>

	// 0x5d[7:0] <- active line (bar)
	regv = (avi->bar.bottom_s >> 8) & 0xff;
   814c4:	e0bffc17 	ldw	r2,-16(fp)
   814c8:	10800f17 	ldw	r2,60(r2)
   814cc:	1005d23a 	srai	r2,r2,8
   814d0:	10803fcc 	andi	r2,r2,255
   814d4:	e0bffd15 	stw	r2,-12(fp)
	if (reg_write(ec, 0x5d, regv) != 0)
   814d8:	e13ffe17 	ldw	r4,-8(fp)
   814dc:	01401744 	movi	r5,93
   814e0:	e1bffd17 	ldw	r6,-12(fp)
   814e4:	008a6a00 	call	8a6a0 <reg_write>
   814e8:	10000226 	beq	r2,zero,814f4 <adv7513_avi_infoframe_3d+0x3cc>
		return -1;
   814ec:	00bfffc4 	movi	r2,-1
   814f0:	00003606 	br	815cc <adv7513_avi_infoframe_3d+0x4a4>

	// 0x5e[7:0] <- active line (bar)
	regv = avi->bar.left_e & 0xff;
   814f4:	e0bffc17 	ldw	r2,-16(fp)
   814f8:	10801017 	ldw	r2,64(r2)
   814fc:	10803fcc 	andi	r2,r2,255
   81500:	e0bffd15 	stw	r2,-12(fp)
	if (reg_write(ec, 0x5e, regv) != 0)
   81504:	e13ffe17 	ldw	r4,-8(fp)
   81508:	01401784 	movi	r5,94
   8150c:	e1bffd17 	ldw	r6,-12(fp)
   81510:	008a6a00 	call	8a6a0 <reg_write>
   81514:	10000226 	beq	r2,zero,81520 <adv7513_avi_infoframe_3d+0x3f8>
		return -1;
   81518:	00bfffc4 	movi	r2,-1
   8151c:	00002b06 	br	815cc <adv7513_avi_infoframe_3d+0x4a4>

	// 0x5f[7:0] <- active line (bar)
	regv = (avi->bar.left_e >> 8) & 0xff;
   81520:	e0bffc17 	ldw	r2,-16(fp)
   81524:	10801017 	ldw	r2,64(r2)
   81528:	1005d23a 	srai	r2,r2,8
   8152c:	10803fcc 	andi	r2,r2,255
   81530:	e0bffd15 	stw	r2,-12(fp)
	if (reg_write(ec, 0x5f, regv) != 0)
   81534:	e13ffe17 	ldw	r4,-8(fp)
   81538:	014017c4 	movi	r5,95
   8153c:	e1bffd17 	ldw	r6,-12(fp)
   81540:	008a6a00 	call	8a6a0 <reg_write>
   81544:	10000226 	beq	r2,zero,81550 <adv7513_avi_infoframe_3d+0x428>
		return -1;
   81548:	00bfffc4 	movi	r2,-1
   8154c:	00001f06 	br	815cc <adv7513_avi_infoframe_3d+0x4a4>

	// 0x60[7:0] <- active line (bar)
	regv = avi->bar.right_s & 0xff;
   81550:	e0bffc17 	ldw	r2,-16(fp)
   81554:	10801117 	ldw	r2,68(r2)
   81558:	10803fcc 	andi	r2,r2,255
   8155c:	e0bffd15 	stw	r2,-12(fp)
	if (reg_write(ec, 0x60, regv) != 0)
   81560:	e13ffe17 	ldw	r4,-8(fp)
   81564:	01401804 	movi	r5,96
   81568:	e1bffd17 	ldw	r6,-12(fp)
   8156c:	008a6a00 	call	8a6a0 <reg_write>
   81570:	10000226 	beq	r2,zero,8157c <adv7513_avi_infoframe_3d+0x454>
		return -1;
   81574:	00bfffc4 	movi	r2,-1
   81578:	00001406 	br	815cc <adv7513_avi_infoframe_3d+0x4a4>

	// 0x61[7:0] <- active line (bar)
	regv = (avi->bar.right_s >> 8) & 0xff;
   8157c:	e0bffc17 	ldw	r2,-16(fp)
   81580:	10801117 	ldw	r2,68(r2)
   81584:	1005d23a 	srai	r2,r2,8
   81588:	10803fcc 	andi	r2,r2,255
   8158c:	e0bffd15 	stw	r2,-12(fp)
	if (reg_write(ec, 0x61, regv) != 0)
   81590:	e13ffe17 	ldw	r4,-8(fp)
   81594:	01401844 	movi	r5,97
   81598:	e1bffd17 	ldw	r6,-12(fp)
   8159c:	008a6a00 	call	8a6a0 <reg_write>
   815a0:	10000226 	beq	r2,zero,815ac <adv7513_avi_infoframe_3d+0x484>
		return -1;
   815a4:	00bfffc4 	movi	r2,-1
   815a8:	00000806 	br	815cc <adv7513_avi_infoframe_3d+0x4a4>

	// 0x4a[7] <- auto checksum
	// 0x4a[6] avi infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[5] audio infoframe packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	// 0x4a[4] gc packet update 0)locked-by-packet_buffer 1)locked-by-i2c
	if (reg_clear_bits(ec, 0x4a, 0x40) != 0)
   815ac:	e13ffe17 	ldw	r4,-8(fp)
   815b0:	01401284 	movi	r5,74
   815b4:	01801004 	movi	r6,64
   815b8:	008a9580 	call	8a958 <reg_clear_bits>
   815bc:	10000226 	beq	r2,zero,815c8 <adv7513_avi_infoframe_3d+0x4a0>
		return -1;
   815c0:	00bfffc4 	movi	r2,-1
   815c4:	00000106 	br	815cc <adv7513_avi_infoframe_3d+0x4a4>

	return 0;
   815c8:	0005883a 	mov	r2,zero
}
   815cc:	e037883a 	mov	sp,fp
   815d0:	dfc00117 	ldw	ra,4(sp)
   815d4:	df000017 	ldw	fp,0(sp)
   815d8:	dec00204 	addi	sp,sp,8
   815dc:	f800283a 	ret

000815e0 <adv7513_vendor_infoframe_3d>:
//
// vic		   - adv7513_vic
//
// 0x52 ~ 0x71
static int adv7513_vendor_infoframe_3d(struct hdmi_encoder *ec, int vic)
{
   815e0:	defffc04 	addi	sp,sp,-16
   815e4:	df000315 	stw	fp,12(sp)
   815e8:	df000304 	addi	fp,sp,12
   815ec:	e13ffe15 	stw	r4,-8(fp)
   815f0:	e17fff15 	stw	r5,-4(fp)
	struct vendor_infoframe *vsi = &ec->vendor_if;
   815f4:	e0bffe17 	ldw	r2,-8(fp)
   815f8:	10801b04 	addi	r2,r2,108
   815fc:	e0bffd15 	stw	r2,-12(fp)
	int regv;

	//printf("adv7513_vendor_infoframe_3d()\n");

#if 1  // local development defaults
	vsi->struct_3d = 8;		// 0)frame_packing 6)top-bottom 8)side-by-side
   81600:	e0bffd17 	ldw	r2,-12(fp)
   81604:	00c00204 	movi	r3,8
   81608:	10c00015 	stw	r3,0(r2)
	vsi->ext_data_3d = 1;	// valid for side-by-side 0b0000 ~ 0b0011
   8160c:	e0bffd17 	ldw	r2,-12(fp)
   81610:	00c00044 	movi	r3,1
   81614:	10c00115 	stw	r3,4(r2)

#endif


	return 0;
   81618:	0005883a 	mov	r2,zero
}
   8161c:	e037883a 	mov	sp,fp
   81620:	df000017 	ldw	fp,0(sp)
   81624:	dec00104 	addi	sp,sp,4
   81628:	f800283a 	ret

0008162c <adv7513_video_out_format_3d>:
// out video format
//
// format   - adv7513_output_format
// vic		- adv7513_vic
static int adv7513_video_out_format_3d(struct hdmi_encoder *ec, int format, int vic)
{
   8162c:	defffa04 	addi	sp,sp,-24
   81630:	dfc00515 	stw	ra,20(sp)
   81634:	df000415 	stw	fp,16(sp)
   81638:	df000404 	addi	fp,sp,16
   8163c:	e13ffd15 	stw	r4,-12(fp)
   81640:	e17ffe15 	stw	r5,-8(fp)
   81644:	e1bfff15 	stw	r6,-4(fp)
   81648:	d83bb615 	stw	zero,-4392(sp)
	int regv;

	//printf("adv7513_video_out_format_3d()\n");

	// 0x16[7] <- format
	regv = (format & 0x01) << 7;
   8164c:	e0bffe17 	ldw	r2,-8(fp)
   81650:	100491fa 	slli	r2,r2,7
   81654:	10803fcc 	andi	r2,r2,255
   81658:	e0bffc15 	stw	r2,-16(fp)
	if (reg_update_bits(ec, 0x16, 0x80, regv) != 0)
   8165c:	e13ffd17 	ldw	r4,-12(fp)
   81660:	01400584 	movi	r5,22
   81664:	01802004 	movi	r6,128
   81668:	e1fffc17 	ldw	r7,-16(fp)
   8166c:	008a7300 	call	8a730 <reg_update_bits>
   81670:	10000226 	beq	r2,zero,8167c <adv7513_video_out_format_3d+0x50>
		return -1;
   81674:	00bfffc4 	movi	r2,-1
   81678:	00003006 	br	8173c <adv7513_video_out_format_3d+0x110>

	// 0x18 ~ 0x2f
	if (adv7513_config_csc(ec, 0, 0) != 0) {
   8167c:	e13ffd17 	ldw	r4,-12(fp)
   81680:	000b883a 	mov	r5,zero
   81684:	000d883a 	mov	r6,zero
   81688:	008093c0 	call	8093c <adv7513_config_csc>
   8168c:	10000226 	beq	r2,zero,81698 <adv7513_video_out_format_3d+0x6c>
		return -1;
   81690:	00bfffc4 	movi	r2,-1
   81694:	00002906 	br	8173c <adv7513_video_out_format_3d+0x110>
	}

	// 0xaf[7] <- hdcp (enable/disable)
	// 0xaf[1] <- 0)dvi 1)hdmi (section 4.2.2)
	if (reg_update_bits(ec, 0xaf, 0x82, (1 & 0x01) << 1) != 0)
   81698:	e13ffd17 	ldw	r4,-12(fp)
   8169c:	01402bc4 	movi	r5,175
   816a0:	01802084 	movi	r6,130
   816a4:	01c00084 	movi	r7,2
   816a8:	008a7300 	call	8a730 <reg_update_bits>
   816ac:	10000226 	beq	r2,zero,816b8 <adv7513_video_out_format_3d+0x8c>
		return -1;
   816b0:	00bfffc4 	movi	r2,-1
   816b4:	00002106 	br	8173c <adv7513_video_out_format_3d+0x110>

	// general control packet
	// 0x40[7] <- gc (section 4.2.3 && 4.3.3)
	if (reg_update_bits(ec, 0x40, 0x80, (1 & 0x01) << 7) != 0)
   816b8:	e13ffd17 	ldw	r4,-12(fp)
   816bc:	01401004 	movi	r5,64
   816c0:	01802004 	movi	r6,128
   816c4:	01c02004 	movi	r7,128
   816c8:	008a7300 	call	8a730 <reg_update_bits>
   816cc:	10000226 	beq	r2,zero,816d8 <adv7513_video_out_format_3d+0xac>
		return -1;
   816d0:	00bfffc4 	movi	r2,-1
   816d4:	00001906 	br	8173c <adv7513_video_out_format_3d+0x110>

	// 0x4c[3:0] <- gc_depth (section 4.2.6)
	if (reg_update_bits(ec, 0x4c, 0x0f, 4 & 0x0f) != 0)
   816d8:	e13ffd17 	ldw	r4,-12(fp)
   816dc:	01401304 	movi	r5,76
   816e0:	018003c4 	movi	r6,15
   816e4:	01c00104 	movi	r7,4
   816e8:	008a7300 	call	8a730 <reg_update_bits>
   816ec:	10000226 	beq	r2,zero,816f8 <adv7513_video_out_format_3d+0xcc>
		return -1;
   816f0:	00bfffc4 	movi	r2,-1
   816f4:	00001106 	br	8173c <adv7513_video_out_format_3d+0x110>

	// pixel repetition
	// 0x3b[6:5] <- pr mode 0)auto 1)max 2)manual 3)manual
	// 0x3b[4:3] <- pr pll (x input) 0)x1 1)x2 2)x4 3)x4
	// 0x3b[2:1] <- pr pll (sent) 0)x1 1)x2 2)x4 3)x4
	if (reg_update_bits(ec, 0x3b, 0x7e, (2 << 5) | (0 << 3) | (0 << 1)) != 0)
   816f8:	e13ffd17 	ldw	r4,-12(fp)
   816fc:	01400ec4 	movi	r5,59
   81700:	01801f84 	movi	r6,126
   81704:	01c01004 	movi	r7,64
   81708:	008a7300 	call	8a730 <reg_update_bits>
   8170c:	10000226 	beq	r2,zero,81718 <adv7513_video_out_format_3d+0xec>
		return -1;
   81710:	00bfffc4 	movi	r2,-1
   81714:	00000906 	br	8173c <adv7513_video_out_format_3d+0x110>

	// manual VIC
	// 0x3c[5:0] <- 0x01 & 0x3f
	if (reg_update_bits(ec, 0x3c, 0x3f, vic) != 0)
   81718:	e13ffd17 	ldw	r4,-12(fp)
   8171c:	01400f04 	movi	r5,60
   81720:	01800fc4 	movi	r6,63
   81724:	e1ffff17 	ldw	r7,-4(fp)
   81728:	008a7300 	call	8a730 <reg_update_bits>
   8172c:	10000226 	beq	r2,zero,81738 <adv7513_video_out_format_3d+0x10c>
		return -1;
   81730:	00bfffc4 	movi	r2,-1
   81734:	00000106 	br	8173c <adv7513_video_out_format_3d+0x110>

	return 0;
   81738:	0005883a 	mov	r2,zero
}
   8173c:	e037883a 	mov	sp,fp
   81740:	dfc00117 	ldw	ra,4(sp)
   81744:	df000017 	ldw	fp,0(sp)
   81748:	dec00204 	addi	sp,sp,8
   8174c:	f800283a 	ret

00081750 <adv7513_video_init>:
	return 0;
}
#endif

static int adv7513_video_init(struct hdmi_encoder *ec, int dvi)
{
   81750:	defffa04 	addi	sp,sp,-24
   81754:	dfc00515 	stw	ra,20(sp)
   81758:	df000415 	stw	fp,16(sp)
   8175c:	df000404 	addi	fp,sp,16
   81760:	e13ffe15 	stw	r4,-8(fp)
   81764:	e17fff15 	stw	r5,-4(fp)
   81768:	d83bb615 	stw	zero,-4392(sp)
	//	if (adv7513_video_misc_config(ec) != 0)
	//		return -1;
	//}

	// 0x15 0x16 0x17
	if (adv7513_video_in_format(ec, ADV7513_INPUT_ID_24BIT_RGB444_YCBCR444, ADV7513_INPUT_COLOR_DEPTH_8BIT, ADV7513_INPUT_COLOR_SPACE_RGB, ADV7513_INPUT_ASPECT_4V3, ADV7513_INPUT_INVALID) != 0)
   8176c:	d8000015 	stw	zero,0(sp)
   81770:	d8000115 	stw	zero,4(sp)
   81774:	e13ffe17 	ldw	r4,-8(fp)
   81778:	000b883a 	mov	r5,zero
   8177c:	018000c4 	movi	r6,3
   81780:	000f883a 	mov	r7,zero
   81784:	00809ac0 	call	809ac <adv7513_video_in_format>
   81788:	10000226 	beq	r2,zero,81794 <adv7513_video_init+0x44>
		return -1;
   8178c:	00bfffc4 	movi	r2,-1
   81790:	00001606 	br	817ec <adv7513_video_init+0x9c>

	// 0x16 0x18 0xaf 0x40 0x4c 0x3c
	if (dvi != 0) {
   81794:	e0bfff17 	ldw	r2,-4(fp)
   81798:	10000726 	beq	r2,zero,817b8 <adv7513_video_init+0x68>
		if (adv7513_video_out_format(ec, ADV7513_OUTPUT_444, ADV7513_MODE_DVI) != 0)
   8179c:	e13ffe17 	ldw	r4,-8(fp)
   817a0:	000b883a 	mov	r5,zero
   817a4:	000d883a 	mov	r6,zero
   817a8:	0080a840 	call	80a84 <adv7513_video_out_format>
   817ac:	10000926 	beq	r2,zero,817d4 <adv7513_video_init+0x84>
			return -1;
   817b0:	00bfffc4 	movi	r2,-1
   817b4:	00000d06 	br	817ec <adv7513_video_init+0x9c>
	} else {
		if (adv7513_video_out_format(ec, ADV7513_OUTPUT_444, ADV7513_MODE_HDMI) != 0)
   817b8:	e13ffe17 	ldw	r4,-8(fp)
   817bc:	000b883a 	mov	r5,zero
   817c0:	01800044 	movi	r6,1
   817c4:	0080a840 	call	80a84 <adv7513_video_out_format>
   817c8:	10000226 	beq	r2,zero,817d4 <adv7513_video_init+0x84>
			return -1;
   817cc:	00bfffc4 	movi	r2,-1
   817d0:	00000606 	br	817ec <adv7513_video_init+0x9c>
	//	return -1;

	//if (adv7513_de_gen(ec, 0, 40 + 48 + 40, 640, 13 + 3 + 29, 480, 0) != 0)
	//	return -1;

	if (adv7513_avi_infoframe(ec) != 0)
   817d4:	e13ffe17 	ldw	r4,-8(fp)
   817d8:	0080b9c0 	call	80b9c <adv7513_avi_infoframe>
   817dc:	10000226 	beq	r2,zero,817e8 <adv7513_video_init+0x98>
		return -1;
   817e0:	00bfffc4 	movi	r2,-1
   817e4:	00000106 	br	817ec <adv7513_video_init+0x9c>

	return 0;
   817e8:	0005883a 	mov	r2,zero
}
   817ec:	e037883a 	mov	sp,fp
   817f0:	dfc00117 	ldw	ra,4(sp)
   817f4:	df000017 	ldw	fp,0(sp)
   817f8:	dec00204 	addi	sp,sp,8
   817fc:	f800283a 	ret

00081800 <adv7513_video_init_3d>:

static int adv7513_video_init_3d(struct hdmi_encoder *ec, int vic)
{
   81800:	defffa04 	addi	sp,sp,-24
   81804:	dfc00515 	stw	ra,20(sp)
   81808:	df000415 	stw	fp,16(sp)
   8180c:	df000404 	addi	fp,sp,16
   81810:	e13ffe15 	stw	r4,-8(fp)
   81814:	e17fff15 	stw	r5,-4(fp)
   81818:	d83bb615 	stw	zero,-4392(sp)
	//	if (adv7513_video_misc_config(ec) != 0)
	//		return -1;
	//}

	// 0x15 0x16 0x17
	if (adv7513_video_in_format_3d(ec, ADV7513_INPUT_ID_24BIT_RGB444_YCBCR444, ADV7513_INPUT_COLOR_DEPTH_8BIT, ADV7513_INPUT_COLOR_SPACE_RGB, ADV7513_INPUT_INVALID, vic) != 0)
   8181c:	d8000015 	stw	zero,0(sp)
   81820:	e0bfff17 	ldw	r2,-4(fp)
   81824:	d8800115 	stw	r2,4(sp)
   81828:	e13ffe17 	ldw	r4,-8(fp)
   8182c:	000b883a 	mov	r5,zero
   81830:	018000c4 	movi	r6,3
   81834:	000f883a 	mov	r7,zero
   81838:	0080fac0 	call	80fac <adv7513_video_in_format_3d>
   8183c:	10000226 	beq	r2,zero,81848 <adv7513_video_init_3d+0x48>
		return -1;
   81840:	00bfffc4 	movi	r2,-1
   81844:	00000e06 	br	81880 <adv7513_video_init_3d+0x80>

	// 0x16 0x18 0xaf 0x40 0x4c 0x3c
	if (adv7513_video_out_format_3d(ec, ADV7513_OUTPUT_444, vic) != 0)
   81848:	e13ffe17 	ldw	r4,-8(fp)
   8184c:	000b883a 	mov	r5,zero
   81850:	e1bfff17 	ldw	r6,-4(fp)
   81854:	008162c0 	call	8162c <adv7513_video_out_format_3d>
   81858:	10000226 	beq	r2,zero,81864 <adv7513_video_init_3d+0x64>
		return -1;
   8185c:	00bfffc4 	movi	r2,-1
   81860:	00000706 	br	81880 <adv7513_video_init_3d+0x80>
	//	return -1;

	//if (adv7513_de_gen(ec, 0, 40 + 48 + 40, 640, 13 + 3 + 29, 480, 0) != 0)
	//	return -1;

	if (adv7513_avi_infoframe_3d(ec, vic) != 0)
   81864:	e13ffe17 	ldw	r4,-8(fp)
   81868:	e17fff17 	ldw	r5,-4(fp)
   8186c:	00811280 	call	81128 <adv7513_avi_infoframe_3d>
   81870:	10000226 	beq	r2,zero,8187c <adv7513_video_init_3d+0x7c>
		return -1;
   81874:	00bfffc4 	movi	r2,-1
   81878:	00000106 	br	81880 <adv7513_video_init_3d+0x80>

	return 0;
   8187c:	0005883a 	mov	r2,zero
}
   81880:	e037883a 	mov	sp,fp
   81884:	dfc00117 	ldw	ra,4(sp)
   81888:	df000017 	ldw	fp,0(sp)
   8188c:	dec00204 	addi	sp,sp,8
   81890:	f800283a 	ret

00081894 <adv7513_chip_init>:
	return 0;
}
#endif

int adv7513_chip_init(struct hdmi_encoder *ec, int dvi)
{
   81894:	defffc04 	addi	sp,sp,-16
   81898:	dfc00315 	stw	ra,12(sp)
   8189c:	df000215 	stw	fp,8(sp)
   818a0:	df000204 	addi	fp,sp,8
   818a4:	e13ffe15 	stw	r4,-8(fp)
   818a8:	e17fff15 	stw	r5,-4(fp)
   818ac:	d83bb615 	stw	zero,-4392(sp)
	if (adv7513_video_init(ec, dvi) != 0)
   818b0:	e13ffe17 	ldw	r4,-8(fp)
   818b4:	e17fff17 	ldw	r5,-4(fp)
   818b8:	00817500 	call	81750 <adv7513_video_init>
   818bc:	10000226 	beq	r2,zero,818c8 <adv7513_chip_init+0x34>
		return -1;
   818c0:	00bfffc4 	movi	r2,-1
   818c4:	00000106 	br	818cc <adv7513_chip_init+0x38>

	//if (adv7513_audio_init(ec) != 0)
	//	return -1;

	return 0;
   818c8:	0005883a 	mov	r2,zero
}
   818cc:	e037883a 	mov	sp,fp
   818d0:	dfc00117 	ldw	ra,4(sp)
   818d4:	df000017 	ldw	fp,0(sp)
   818d8:	dec00204 	addi	sp,sp,8
   818dc:	f800283a 	ret

000818e0 <adv7513_chip_init_3d>:

int adv7513_chip_init_3d(struct hdmi_encoder *ec, int vic)
{
   818e0:	defffc04 	addi	sp,sp,-16
   818e4:	dfc00315 	stw	ra,12(sp)
   818e8:	df000215 	stw	fp,8(sp)
   818ec:	df000204 	addi	fp,sp,8
   818f0:	e13ffe15 	stw	r4,-8(fp)
   818f4:	e17fff15 	stw	r5,-4(fp)
   818f8:	d83bb615 	stw	zero,-4392(sp)
	if (adv7513_video_init_3d(ec, vic) != 0)
   818fc:	e13ffe17 	ldw	r4,-8(fp)
   81900:	e17fff17 	ldw	r5,-4(fp)
   81904:	00818000 	call	81800 <adv7513_video_init_3d>
   81908:	10000226 	beq	r2,zero,81914 <adv7513_chip_init_3d+0x34>
		return -1;
   8190c:	00bfffc4 	movi	r2,-1
   81910:	00000106 	br	81918 <adv7513_chip_init_3d+0x38>

	//if (adv7513_audio_init(ec) != 0)
	//	return -1;

	return 0;
   81914:	0005883a 	mov	r2,zero
}
   81918:	e037883a 	mov	sp,fp
   8191c:	dfc00117 	ldw	ra,4(sp)
   81920:	df000017 	ldw	fp,0(sp)
   81924:	dec00204 	addi	sp,sp,8
   81928:	f800283a 	ret

0008192c <eb_establish_timing>:
	int interlaced;
	int rb;			// reduced blanking
};

static inline void eb_establish_timing(struct eb_established_timing *et, int x, int y, int r, int valid)
{
   8192c:	defffb04 	addi	sp,sp,-20
   81930:	df000415 	stw	fp,16(sp)
   81934:	df000404 	addi	fp,sp,16
   81938:	e13ffc15 	stw	r4,-16(fp)
   8193c:	e17ffd15 	stw	r5,-12(fp)
   81940:	e1bffe15 	stw	r6,-8(fp)
   81944:	e1ffff15 	stw	r7,-4(fp)
	if (valid) {
   81948:	e0800117 	ldw	r2,4(fp)
   8194c:	10001126 	beq	r2,zero,81994 <eb_establish_timing+0x68>
		et->valid = 1;
   81950:	e0bffc17 	ldw	r2,-16(fp)
   81954:	00c00044 	movi	r3,1
   81958:	10c00015 	stw	r3,0(r2)
		et->width = x;
   8195c:	e0bffc17 	ldw	r2,-16(fp)
   81960:	e0fffd17 	ldw	r3,-12(fp)
   81964:	10c00115 	stw	r3,4(r2)
		et->height = y;
   81968:	e0bffc17 	ldw	r2,-16(fp)
   8196c:	e0fffe17 	ldw	r3,-8(fp)
   81970:	10c00215 	stw	r3,8(r2)
		et->refresh = r;
   81974:	e0bffc17 	ldw	r2,-16(fp)
   81978:	e0ffff17 	ldw	r3,-4(fp)
   8197c:	10c00315 	stw	r3,12(r2)
		et->interlaced = 0;
   81980:	e0bffc17 	ldw	r2,-16(fp)
   81984:	10000415 	stw	zero,16(r2)
		et->rb = 0;
   81988:	e0bffc17 	ldw	r2,-16(fp)
   8198c:	10000515 	stw	zero,20(r2)
   81990:	00000c06 	br	819c4 <eb_establish_timing+0x98>
	} else {
		et->valid = 0;
   81994:	e0bffc17 	ldw	r2,-16(fp)
   81998:	10000015 	stw	zero,0(r2)
		et->width = 0;
   8199c:	e0bffc17 	ldw	r2,-16(fp)
   819a0:	10000115 	stw	zero,4(r2)
		et->height = 0;
   819a4:	e0bffc17 	ldw	r2,-16(fp)
   819a8:	10000215 	stw	zero,8(r2)
		et->refresh = 0;
   819ac:	e0bffc17 	ldw	r2,-16(fp)
   819b0:	10000315 	stw	zero,12(r2)
		et->interlaced = 0;
   819b4:	e0bffc17 	ldw	r2,-16(fp)
   819b8:	10000415 	stw	zero,16(r2)
		et->rb = 0;
   819bc:	e0bffc17 	ldw	r2,-16(fp)
   819c0:	10000515 	stw	zero,20(r2)
	}
}
   819c4:	e037883a 	mov	sp,fp
   819c8:	df000017 	ldw	fp,0(sp)
   819cc:	dec00104 	addi	sp,sp,4
   819d0:	f800283a 	ret

000819d4 <eb_establish_timing_i>:

static inline void eb_establish_timing_i(struct eb_established_timing *et, int x, int y, int r, int valid)
{
   819d4:	defffb04 	addi	sp,sp,-20
   819d8:	df000415 	stw	fp,16(sp)
   819dc:	df000404 	addi	fp,sp,16
   819e0:	e13ffc15 	stw	r4,-16(fp)
   819e4:	e17ffd15 	stw	r5,-12(fp)
   819e8:	e1bffe15 	stw	r6,-8(fp)
   819ec:	e1ffff15 	stw	r7,-4(fp)
	if (valid) {
   819f0:	e0800117 	ldw	r2,4(fp)
   819f4:	10001226 	beq	r2,zero,81a40 <eb_establish_timing_i+0x6c>
		et->valid = 1;
   819f8:	e0bffc17 	ldw	r2,-16(fp)
   819fc:	00c00044 	movi	r3,1
   81a00:	10c00015 	stw	r3,0(r2)
		et->width = x;
   81a04:	e0bffc17 	ldw	r2,-16(fp)
   81a08:	e0fffd17 	ldw	r3,-12(fp)
   81a0c:	10c00115 	stw	r3,4(r2)
		et->height = y;
   81a10:	e0bffc17 	ldw	r2,-16(fp)
   81a14:	e0fffe17 	ldw	r3,-8(fp)
   81a18:	10c00215 	stw	r3,8(r2)
		et->refresh = r;
   81a1c:	e0bffc17 	ldw	r2,-16(fp)
   81a20:	e0ffff17 	ldw	r3,-4(fp)
   81a24:	10c00315 	stw	r3,12(r2)
		et->interlaced = 1;
   81a28:	e0bffc17 	ldw	r2,-16(fp)
   81a2c:	00c00044 	movi	r3,1
   81a30:	10c00415 	stw	r3,16(r2)
		et->rb = 0;
   81a34:	e0bffc17 	ldw	r2,-16(fp)
   81a38:	10000515 	stw	zero,20(r2)
   81a3c:	00000c06 	br	81a70 <eb_establish_timing_i+0x9c>
	} else {
		et->valid = 0;
   81a40:	e0bffc17 	ldw	r2,-16(fp)
   81a44:	10000015 	stw	zero,0(r2)
		et->width = 0;
   81a48:	e0bffc17 	ldw	r2,-16(fp)
   81a4c:	10000115 	stw	zero,4(r2)
		et->height = 0;
   81a50:	e0bffc17 	ldw	r2,-16(fp)
   81a54:	10000215 	stw	zero,8(r2)
		et->refresh = 0;
   81a58:	e0bffc17 	ldw	r2,-16(fp)
   81a5c:	10000315 	stw	zero,12(r2)
		et->interlaced = 0;
   81a60:	e0bffc17 	ldw	r2,-16(fp)
   81a64:	10000415 	stw	zero,16(r2)
		et->rb = 0;
   81a68:	e0bffc17 	ldw	r2,-16(fp)
   81a6c:	10000515 	stw	zero,20(r2)
	}
}
   81a70:	e037883a 	mov	sp,fp
   81a74:	df000017 	ldw	fp,0(sp)
   81a78:	dec00104 	addi	sp,sp,4
   81a7c:	f800283a 	ret

00081a80 <eb_establish_timing_rb>:

static inline void eb_establish_timing_rb(struct eb_established_timing *et, int x, int y, int r, int valid)
{
   81a80:	defffb04 	addi	sp,sp,-20
   81a84:	df000415 	stw	fp,16(sp)
   81a88:	df000404 	addi	fp,sp,16
   81a8c:	e13ffc15 	stw	r4,-16(fp)
   81a90:	e17ffd15 	stw	r5,-12(fp)
   81a94:	e1bffe15 	stw	r6,-8(fp)
   81a98:	e1ffff15 	stw	r7,-4(fp)
	if (valid) {
   81a9c:	e0800117 	ldw	r2,4(fp)
   81aa0:	10001226 	beq	r2,zero,81aec <eb_establish_timing_rb+0x6c>
		et->valid = 1;
   81aa4:	e0bffc17 	ldw	r2,-16(fp)
   81aa8:	00c00044 	movi	r3,1
   81aac:	10c00015 	stw	r3,0(r2)
		et->width = x;
   81ab0:	e0bffc17 	ldw	r2,-16(fp)
   81ab4:	e0fffd17 	ldw	r3,-12(fp)
   81ab8:	10c00115 	stw	r3,4(r2)
		et->height = y;
   81abc:	e0bffc17 	ldw	r2,-16(fp)
   81ac0:	e0fffe17 	ldw	r3,-8(fp)
   81ac4:	10c00215 	stw	r3,8(r2)
		et->refresh = r;
   81ac8:	e0bffc17 	ldw	r2,-16(fp)
   81acc:	e0ffff17 	ldw	r3,-4(fp)
   81ad0:	10c00315 	stw	r3,12(r2)
		et->interlaced = 0;
   81ad4:	e0bffc17 	ldw	r2,-16(fp)
   81ad8:	10000415 	stw	zero,16(r2)
		et->rb = 1;
   81adc:	e0bffc17 	ldw	r2,-16(fp)
   81ae0:	00c00044 	movi	r3,1
   81ae4:	10c00515 	stw	r3,20(r2)
   81ae8:	00000c06 	br	81b1c <eb_establish_timing_rb+0x9c>
	} else {
		et->valid = 0;
   81aec:	e0bffc17 	ldw	r2,-16(fp)
   81af0:	10000015 	stw	zero,0(r2)
		et->width = 0;
   81af4:	e0bffc17 	ldw	r2,-16(fp)
   81af8:	10000115 	stw	zero,4(r2)
		et->height = 0;
   81afc:	e0bffc17 	ldw	r2,-16(fp)
   81b00:	10000215 	stw	zero,8(r2)
		et->refresh = 0;
   81b04:	e0bffc17 	ldw	r2,-16(fp)
   81b08:	10000315 	stw	zero,12(r2)
		et->interlaced = 0;
   81b0c:	e0bffc17 	ldw	r2,-16(fp)
   81b10:	10000415 	stw	zero,16(r2)
		et->rb = 0;
   81b14:	e0bffc17 	ldw	r2,-16(fp)
   81b18:	10000515 	stw	zero,20(r2)
	}
}
   81b1c:	e037883a 	mov	sp,fp
   81b20:	df000017 	ldw	fp,0(sp)
   81b24:	dec00104 	addi	sp,sp,4
   81b28:	f800283a 	ret

00081b2c <edid_decode_cea>:
    return v;
}
#endif

int edid_decode_cea(struct base_edid *edid, const unsigned char *edid_bin, int ext_idx)
{
   81b2c:	deffef04 	addi	sp,sp,-68
   81b30:	dfc01015 	stw	ra,64(sp)
   81b34:	df000f15 	stw	fp,60(sp)
   81b38:	df000f04 	addi	fp,sp,60
   81b3c:	e13ffd15 	stw	r4,-12(fp)
   81b40:	e17ffe15 	stw	r5,-8(fp)
   81b44:	e1bfff15 	stw	r6,-4(fp)
   81b48:	d83bb615 	stw	zero,-4392(sp)
	u8 *ext_bin = (u8 *)&edid_bin[128 * (ext_idx + 1)];
   81b4c:	e0bfff17 	ldw	r2,-4(fp)
   81b50:	10800044 	addi	r2,r2,1
   81b54:	100491fa 	slli	r2,r2,7
   81b58:	e0fffe17 	ldw	r3,-8(fp)
   81b5c:	1885883a 	add	r2,r3,r2
   81b60:	e0bff715 	stw	r2,-36(fp)
	u8 *c, *hv, *dtd = 0;
   81b64:	e03ff315 	stw	zero,-52(fp)
	int i;

	struct ext_data *ext_data = &edid->ext_data[ext_idx];
   81b68:	e0bfff17 	ldw	r2,-4(fp)
   81b6c:	10816f24 	muli	r2,r2,1468
   81b70:	10860b04 	addi	r2,r2,6188
   81b74:	e0fffd17 	ldw	r3,-12(fp)
   81b78:	1885883a 	add	r2,r3,r2
   81b7c:	e0bff815 	stw	r2,-32(fp)
	struct edid_cea *cea = &ext_data->cea_ext;
   81b80:	e0bff817 	ldw	r2,-32(fp)
   81b84:	10800104 	addi	r2,r2,4
   81b88:	e0bff915 	stw	r2,-28(fp)

	c = &ext_bin[1];
   81b8c:	e0bff717 	ldw	r2,-36(fp)
   81b90:	10800044 	addi	r2,r2,1
   81b94:	e0bff115 	stw	r2,-60(fp)

	// version
	if (*c != 0x03)
   81b98:	e0bff117 	ldw	r2,-60(fp)
   81b9c:	10800003 	ldbu	r2,0(r2)
   81ba0:	10803fcc 	andi	r2,r2,255
   81ba4:	108000e0 	cmpeqi	r2,r2,3
   81ba8:	1000021e 	bne	r2,zero,81bb4 <edid_decode_cea+0x88>
		return -1;	// todo: support v1 / v2
   81bac:	00bfffc4 	movi	r2,-1
   81bb0:	00060606 	br	833cc <edid_decode_cea+0x18a0>

	ext_data->ext_tag = EDID_EXT_TAG_CEA;
   81bb4:	e0bff817 	ldw	r2,-32(fp)
   81bb8:	00c00084 	movi	r3,2
   81bbc:	10c00015 	stw	r3,0(r2)
	cea->rev = *c;
   81bc0:	e0bff117 	ldw	r2,-60(fp)
   81bc4:	10800003 	ldbu	r2,0(r2)
   81bc8:	10c03fcc 	andi	r3,r2,255
   81bcc:	e0bff917 	ldw	r2,-28(fp)
   81bd0:	10c00015 	stw	r3,0(r2)

	// obtain offset to detail timing descriptor
	c = &ext_bin[2];
   81bd4:	e0bff717 	ldw	r2,-36(fp)
   81bd8:	10800084 	addi	r2,r2,2
   81bdc:	e0bff115 	stw	r2,-60(fp)
	if (*c > 4)
   81be0:	e0bff117 	ldw	r2,-60(fp)
   81be4:	10800003 	ldbu	r2,0(r2)
   81be8:	10803fcc 	andi	r2,r2,255
   81bec:	10800170 	cmpltui	r2,r2,5
   81bf0:	1000061e 	bne	r2,zero,81c0c <edid_decode_cea+0xe0>
		dtd = &ext_bin[*c];
   81bf4:	e0bff117 	ldw	r2,-60(fp)
   81bf8:	10800003 	ldbu	r2,0(r2)
   81bfc:	10803fcc 	andi	r2,r2,255
   81c00:	e0fff717 	ldw	r3,-36(fp)
   81c04:	1885883a 	add	r2,r3,r2
   81c08:	e0bff315 	stw	r2,-52(fp)

	cea->off_dtd = c[0];
   81c0c:	e0bff117 	ldw	r2,-60(fp)
   81c10:	10800003 	ldbu	r2,0(r2)
   81c14:	10c03fcc 	andi	r3,r2,255
   81c18:	e0bff917 	ldw	r2,-28(fp)
   81c1c:	10c00515 	stw	r3,20(r2)
	cea->nr_dtd = c[1] & 0x0f;
   81c20:	e0bff117 	ldw	r2,-60(fp)
   81c24:	10800044 	addi	r2,r2,1
   81c28:	10800003 	ldbu	r2,0(r2)
   81c2c:	10803fcc 	andi	r2,r2,255
   81c30:	10c003cc 	andi	r3,r2,15
   81c34:	e0bff917 	ldw	r2,-28(fp)
   81c38:	10c00615 	stw	r3,24(r2)

	cea->flags.underscan = ((c[1] & 0x80) > 0) ? 1 : 0;
   81c3c:	e0bff117 	ldw	r2,-60(fp)
   81c40:	10800044 	addi	r2,r2,1
   81c44:	10800003 	ldbu	r2,0(r2)
   81c48:	10803fcc 	andi	r2,r2,255
   81c4c:	1080200c 	andi	r2,r2,128
   81c50:	0084803a 	cmplt	r2,zero,r2
   81c54:	10c03fcc 	andi	r3,r2,255
   81c58:	e0bff917 	ldw	r2,-28(fp)
   81c5c:	10c00115 	stw	r3,4(r2)
	cea->flags.audio = ((c[1] & 0x40) > 0) ? 1 : 0;
   81c60:	e0bff117 	ldw	r2,-60(fp)
   81c64:	10800044 	addi	r2,r2,1
   81c68:	10800003 	ldbu	r2,0(r2)
   81c6c:	10803fcc 	andi	r2,r2,255
   81c70:	1080100c 	andi	r2,r2,64
   81c74:	0084803a 	cmplt	r2,zero,r2
   81c78:	10c03fcc 	andi	r3,r2,255
   81c7c:	e0bff917 	ldw	r2,-28(fp)
   81c80:	10c00215 	stw	r3,8(r2)
	cea->flags.ycbcr444 = ((c[1] & 0x20) > 0) ? 1 : 0;
   81c84:	e0bff117 	ldw	r2,-60(fp)
   81c88:	10800044 	addi	r2,r2,1
   81c8c:	10800003 	ldbu	r2,0(r2)
   81c90:	10803fcc 	andi	r2,r2,255
   81c94:	1080080c 	andi	r2,r2,32
   81c98:	0084803a 	cmplt	r2,zero,r2
   81c9c:	10c03fcc 	andi	r3,r2,255
   81ca0:	e0bff917 	ldw	r2,-28(fp)
   81ca4:	10c00315 	stw	r3,12(r2)
	cea->flags.ycbcr422 = ((c[1] & 0x10) > 0) ? 1 : 0;
   81ca8:	e0bff117 	ldw	r2,-60(fp)
   81cac:	10800044 	addi	r2,r2,1
   81cb0:	10800003 	ldbu	r2,0(r2)
   81cb4:	10803fcc 	andi	r2,r2,255
   81cb8:	1080040c 	andi	r2,r2,16
   81cbc:	0084803a 	cmplt	r2,zero,r2
   81cc0:	10c03fcc 	andi	r3,r2,255
   81cc4:	e0bff917 	ldw	r2,-28(fp)
   81cc8:	10c00415 	stw	r3,16(r2)

	// data block collection
	c = &ext_bin[4];
   81ccc:	e0bff717 	ldw	r2,-36(fp)
   81cd0:	10800104 	addi	r2,r2,4
   81cd4:	e0bff115 	stw	r2,-60(fp)

	cea->nr_dbcs = 0;
   81cd8:	e0bff917 	ldw	r2,-28(fp)
   81cdc:	10000715 	stw	zero,28(r2)
	while (c < dtd) {
   81ce0:	00038f06 	br	82b20 <edid_decode_cea+0xff4>
		switch (*c >> 5) {
   81ce4:	e0bff117 	ldw	r2,-60(fp)
   81ce8:	10800003 	ldbu	r2,0(r2)
   81cec:	10803fcc 	andi	r2,r2,255
   81cf0:	1004d17a 	srli	r2,r2,5
   81cf4:	10803fcc 	andi	r2,r2,255
   81cf8:	10c00228 	cmpgeui	r3,r2,8
   81cfc:	1803851e 	bne	r3,zero,82b14 <edid_decode_cea+0xfe8>
   81d00:	1085883a 	add	r2,r2,r2
   81d04:	1087883a 	add	r3,r2,r2
   81d08:	00800234 	movhi	r2,8
   81d0c:	10874704 	addi	r2,r2,7452
   81d10:	1885883a 	add	r2,r3,r2
   81d14:	10800017 	ldw	r2,0(r2)
   81d18:	1000683a 	jmp	r2
   81d1c:	00082b14 	movui	zero,8364
   81d20:	00081d3c 	xorhi	zero,zero,8308
   81d24:	00081f38 	rdprs	zero,zero,8316
   81d28:	00082030 	cmpltui	zero,zero,8320
   81d2c:	000827b8 	rdprs	zero,zero,8350
   81d30:	00082820 	cmpeqi	zero,zero,8352
   81d34:	00082b14 	movui	zero,8364
   81d38:	0008286c 	andhi	zero,zero,8353
		case CEA_DB_AUDIO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_AUDIO;
   81d3c:	e0bff917 	ldw	r2,-28(fp)
   81d40:	10800717 	ldw	r2,28(r2)
   81d44:	e0fff917 	ldw	r3,-28(fp)
   81d48:	1887883a 	add	r3,r3,r2
   81d4c:	18c00804 	addi	r3,r3,32
   81d50:	01000044 	movi	r4,1
   81d54:	19000005 	stb	r4,0(r3)
   81d58:	10c00044 	addi	r3,r2,1
   81d5c:	e0bff917 	ldw	r2,-28(fp)
   81d60:	10c00715 	stw	r3,28(r2)
			cea->db_audio.nr_sad = (int)(*c & 0x1f) / 3;
   81d64:	e0bff117 	ldw	r2,-60(fp)
   81d68:	10800003 	ldbu	r2,0(r2)
   81d6c:	10803fcc 	andi	r2,r2,255
   81d70:	108007cc 	andi	r2,r2,31
   81d74:	1009883a 	mov	r4,r2
   81d78:	014000c4 	movi	r5,3
   81d7c:	008ce8c0 	call	8ce8c <__divsi3>
   81d80:	1007883a 	mov	r3,r2
   81d84:	e0bff917 	ldw	r2,-28(fp)
   81d88:	10c06815 	stw	r3,416(r2)
			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
   81d8c:	e03ff415 	stw	zero,-48(fp)
   81d90:	00005c06 	br	81f04 <edid_decode_cea+0x3d8>
				u8 *sad_bin = &c[1+3*i];
   81d94:	e0fff417 	ldw	r3,-48(fp)
   81d98:	1805883a 	mov	r2,r3
   81d9c:	1085883a 	add	r2,r2,r2
   81da0:	10c5883a 	add	r2,r2,r3
   81da4:	10800044 	addi	r2,r2,1
   81da8:	e0fff117 	ldw	r3,-60(fp)
   81dac:	1885883a 	add	r2,r3,r2
   81db0:	e0bffa15 	stw	r2,-24(fp)
				cea->db_audio.sad[i].format = (int)((*sad_bin >> 3) & 0xf);
   81db4:	e0bffa17 	ldw	r2,-24(fp)
   81db8:	10800003 	ldbu	r2,0(r2)
   81dbc:	10803fcc 	andi	r2,r2,255
   81dc0:	1004d0fa 	srli	r2,r2,3
   81dc4:	10803fcc 	andi	r2,r2,255
   81dc8:	10c003cc 	andi	r3,r2,15
   81dcc:	e13ff917 	ldw	r4,-28(fp)
   81dd0:	e0bff417 	ldw	r2,-48(fp)
   81dd4:	10800524 	muli	r2,r2,20
   81dd8:	2085883a 	add	r2,r4,r2
   81ddc:	10806904 	addi	r2,r2,420
   81de0:	10c00015 	stw	r3,0(r2)
				cea->db_audio.sad[i].channels = (int)(*sad_bin & 0x7) + 1;
   81de4:	e0bffa17 	ldw	r2,-24(fp)
   81de8:	10800003 	ldbu	r2,0(r2)
   81dec:	10803fcc 	andi	r2,r2,255
   81df0:	108001cc 	andi	r2,r2,7
   81df4:	10c00044 	addi	r3,r2,1
   81df8:	e13ff917 	ldw	r4,-28(fp)
   81dfc:	e0bff417 	ldw	r2,-48(fp)
   81e00:	10800524 	muli	r2,r2,20
   81e04:	2085883a 	add	r2,r4,r2
   81e08:	10806a04 	addi	r2,r2,424
   81e0c:	10c00015 	stw	r3,0(r2)
				cea->db_audio.sad[i].freq = (int)(sad_bin[1] & 0x7f);
   81e10:	e0bffa17 	ldw	r2,-24(fp)
   81e14:	10800044 	addi	r2,r2,1
   81e18:	10800003 	ldbu	r2,0(r2)
   81e1c:	10803fcc 	andi	r2,r2,255
   81e20:	10c01fcc 	andi	r3,r2,127
   81e24:	e13ff917 	ldw	r4,-28(fp)
   81e28:	e0bff417 	ldw	r2,-48(fp)
   81e2c:	10800524 	muli	r2,r2,20
   81e30:	2085883a 	add	r2,r4,r2
   81e34:	10806b04 	addi	r2,r2,428
   81e38:	10c00015 	stw	r3,0(r2)

				if (cea->db_audio.sad[i].format == CEA_SAD_FMT_LPCM) {
   81e3c:	e0fff917 	ldw	r3,-28(fp)
   81e40:	e0bff417 	ldw	r2,-48(fp)
   81e44:	10800524 	muli	r2,r2,20
   81e48:	1885883a 	add	r2,r3,r2
   81e4c:	10806904 	addi	r2,r2,420
   81e50:	10800017 	ldw	r2,0(r2)
   81e54:	10800058 	cmpnei	r2,r2,1
   81e58:	10000c1e 	bne	r2,zero,81e8c <edid_decode_cea+0x360>
					cea->db_audio.sad[i].resolution = (int)(sad_bin[2] & 0x07);
   81e5c:	e0bffa17 	ldw	r2,-24(fp)
   81e60:	10800084 	addi	r2,r2,2
   81e64:	10800003 	ldbu	r2,0(r2)
   81e68:	10803fcc 	andi	r2,r2,255
   81e6c:	10c001cc 	andi	r3,r2,7
   81e70:	e13ff917 	ldw	r4,-28(fp)
   81e74:	e0bff417 	ldw	r2,-48(fp)
   81e78:	10800524 	muli	r2,r2,20
   81e7c:	2085883a 	add	r2,r4,r2
   81e80:	10806c04 	addi	r2,r2,432
   81e84:	10c00015 	stw	r3,0(r2)
   81e88:	00001b06 	br	81ef8 <edid_decode_cea+0x3cc>
				} else if (cea->db_audio.sad[i].format != 0) {
   81e8c:	e0fff917 	ldw	r3,-28(fp)
   81e90:	e0bff417 	ldw	r2,-48(fp)
   81e94:	10800524 	muli	r2,r2,20
   81e98:	1885883a 	add	r2,r3,r2
   81e9c:	10806904 	addi	r2,r2,420
   81ea0:	10800017 	ldw	r2,0(r2)
   81ea4:	10001426 	beq	r2,zero,81ef8 <edid_decode_cea+0x3cc>
					if (cea->db_audio.sad[i].format <= CEA_SAD_FMT_ATRAC) {
   81ea8:	e0fff917 	ldw	r3,-28(fp)
   81eac:	e0bff417 	ldw	r2,-48(fp)
   81eb0:	10800524 	muli	r2,r2,20
   81eb4:	1885883a 	add	r2,r3,r2
   81eb8:	10806904 	addi	r2,r2,420
   81ebc:	10800017 	ldw	r2,0(r2)
   81ec0:	10800248 	cmpgei	r2,r2,9
   81ec4:	10000c1e 	bne	r2,zero,81ef8 <edid_decode_cea+0x3cc>
						cea->db_audio.sad[i].bitrate = (int)sad_bin[2] * 8;
   81ec8:	e0bffa17 	ldw	r2,-24(fp)
   81ecc:	10800084 	addi	r2,r2,2
   81ed0:	10800003 	ldbu	r2,0(r2)
   81ed4:	10803fcc 	andi	r2,r2,255
   81ed8:	100690fa 	slli	r3,r2,3
   81edc:	e13ff917 	ldw	r4,-28(fp)
   81ee0:	e0bff417 	ldw	r2,-48(fp)
   81ee4:	10800044 	addi	r2,r2,1
   81ee8:	10800524 	muli	r2,r2,20
   81eec:	2085883a 	add	r2,r4,r2
   81ef0:	10806804 	addi	r2,r2,416
   81ef4:	10c00015 	stw	r3,0(r2)
	while (c < dtd) {
		switch (*c >> 5) {
		case CEA_DB_AUDIO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_AUDIO;
			cea->db_audio.nr_sad = (int)(*c & 0x1f) / 3;
			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
   81ef8:	e0bff417 	ldw	r2,-48(fp)
   81efc:	10800044 	addi	r2,r2,1
   81f00:	e0bff415 	stw	r2,-48(fp)
   81f04:	e0bff917 	ldw	r2,-28(fp)
   81f08:	10806817 	ldw	r2,416(r2)
   81f0c:	e0fff417 	ldw	r3,-48(fp)
   81f10:	18bfa016 	blt	r3,r2,81d94 <edid_decode_cea+0x268>
					if (cea->db_audio.sad[i].format <= CEA_SAD_FMT_ATRAC) {
						cea->db_audio.sad[i].bitrate = (int)sad_bin[2] * 8;
					}
				}
			}
			c += (*c & 0x1f) + 1;
   81f14:	e0bff117 	ldw	r2,-60(fp)
   81f18:	10800003 	ldbu	r2,0(r2)
   81f1c:	10803fcc 	andi	r2,r2,255
   81f20:	108007cc 	andi	r2,r2,31
   81f24:	10800044 	addi	r2,r2,1
   81f28:	e0fff117 	ldw	r3,-60(fp)
   81f2c:	1885883a 	add	r2,r3,r2
   81f30:	e0bff115 	stw	r2,-60(fp)
			break;
   81f34:	0002fa06 	br	82b20 <edid_decode_cea+0xff4>

		case CEA_DB_VIDEO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_VIDEO;
   81f38:	e0bff917 	ldw	r2,-28(fp)
   81f3c:	10800717 	ldw	r2,28(r2)
   81f40:	e0fff917 	ldw	r3,-28(fp)
   81f44:	1887883a 	add	r3,r3,r2
   81f48:	18c00804 	addi	r3,r3,32
   81f4c:	01000084 	movi	r4,2
   81f50:	19000005 	stb	r4,0(r3)
   81f54:	10c00044 	addi	r3,r2,1
   81f58:	e0bff917 	ldw	r2,-28(fp)
   81f5c:	10c00715 	stw	r3,28(r2)
			cea->db_video.nr_svd = (int)(*c & 0x1f);
   81f60:	e0bff117 	ldw	r2,-60(fp)
   81f64:	10800003 	ldbu	r2,0(r2)
   81f68:	10803fcc 	andi	r2,r2,255
   81f6c:	10c007cc 	andi	r3,r2,31
   81f70:	e0bff917 	ldw	r2,-28(fp)
   81f74:	10c02715 	stw	r3,156(r2)
			for (i = 0; i < cea->db_video.nr_svd; ++i) {
   81f78:	e03ff415 	stw	zero,-48(fp)
   81f7c:	00001f06 	br	81ffc <edid_decode_cea+0x4d0>
				cea->db_video.svd[i].native = c[1 + i] & 0x80 ? 1 : 0;
   81f80:	e0bff417 	ldw	r2,-48(fp)
   81f84:	10800044 	addi	r2,r2,1
   81f88:	e0fff117 	ldw	r3,-60(fp)
   81f8c:	1885883a 	add	r2,r3,r2
   81f90:	10800003 	ldbu	r2,0(r2)
   81f94:	10803fcc 	andi	r2,r2,255
   81f98:	1004d1fa 	srli	r2,r2,7
   81f9c:	10c03fcc 	andi	r3,r2,255
   81fa0:	e13ff917 	ldw	r4,-28(fp)
   81fa4:	e0bff417 	ldw	r2,-48(fp)
   81fa8:	10800504 	addi	r2,r2,20
   81fac:	100490fa 	slli	r2,r2,3
   81fb0:	2085883a 	add	r2,r4,r2
   81fb4:	10c00015 	stw	r3,0(r2)
				cea->db_video.svd[i].vic = (int)(c[1 + i] & 0x7f);
   81fb8:	e0bff417 	ldw	r2,-48(fp)
   81fbc:	10800044 	addi	r2,r2,1
   81fc0:	e0fff117 	ldw	r3,-60(fp)
   81fc4:	1885883a 	add	r2,r3,r2
   81fc8:	10800003 	ldbu	r2,0(r2)
   81fcc:	10803fcc 	andi	r2,r2,255
   81fd0:	10c01fcc 	andi	r3,r2,127
   81fd4:	e13ff917 	ldw	r4,-28(fp)
   81fd8:	e0bff417 	ldw	r2,-48(fp)
   81fdc:	10800044 	addi	r2,r2,1
   81fe0:	100490fa 	slli	r2,r2,3
   81fe4:	2085883a 	add	r2,r4,r2
   81fe8:	10802704 	addi	r2,r2,156
   81fec:	10c00015 	stw	r3,0(r2)
			break;

		case CEA_DB_VIDEO:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_VIDEO;
			cea->db_video.nr_svd = (int)(*c & 0x1f);
			for (i = 0; i < cea->db_video.nr_svd; ++i) {
   81ff0:	e0bff417 	ldw	r2,-48(fp)
   81ff4:	10800044 	addi	r2,r2,1
   81ff8:	e0bff415 	stw	r2,-48(fp)
   81ffc:	e0bff917 	ldw	r2,-28(fp)
   82000:	10802717 	ldw	r2,156(r2)
   82004:	e0fff417 	ldw	r3,-48(fp)
   82008:	18bfdd16 	blt	r3,r2,81f80 <edid_decode_cea+0x454>
				cea->db_video.svd[i].native = c[1 + i] & 0x80 ? 1 : 0;
				cea->db_video.svd[i].vic = (int)(c[1 + i] & 0x7f);
			}
			c += (*c & 0x1f) + 1;
   8200c:	e0bff117 	ldw	r2,-60(fp)
   82010:	10800003 	ldbu	r2,0(r2)
   82014:	10803fcc 	andi	r2,r2,255
   82018:	108007cc 	andi	r2,r2,31
   8201c:	10800044 	addi	r2,r2,1
   82020:	e0fff117 	ldw	r3,-60(fp)
   82024:	1885883a 	add	r2,r3,r2
   82028:	e0bff115 	stw	r2,-60(fp)
			break;
   8202c:	0002bc06 	br	82b20 <edid_decode_cea+0xff4>

		case CEA_DB_VENDOR:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_VENDOR;
   82030:	e0bff917 	ldw	r2,-28(fp)
   82034:	10800717 	ldw	r2,28(r2)
   82038:	e0fff917 	ldw	r3,-28(fp)
   8203c:	1887883a 	add	r3,r3,r2
   82040:	18c00804 	addi	r3,r3,32
   82044:	010000c4 	movi	r4,3
   82048:	19000005 	stb	r4,0(r3)
   8204c:	10c00044 	addi	r3,r2,1
   82050:	e0bff917 	ldw	r2,-28(fp)
   82054:	10c00715 	stw	r3,28(r2)

			if ((c[1] != 0x03) || (c[2] != 0x0c) || (c[3] != 0x00)) {
   82058:	e0bff117 	ldw	r2,-60(fp)
   8205c:	10800044 	addi	r2,r2,1
   82060:	10800003 	ldbu	r2,0(r2)
   82064:	10803fcc 	andi	r2,r2,255
   82068:	108000d8 	cmpnei	r2,r2,3
   8206c:	10000b1e 	bne	r2,zero,8209c <edid_decode_cea+0x570>
   82070:	e0bff117 	ldw	r2,-60(fp)
   82074:	10800084 	addi	r2,r2,2
   82078:	10800003 	ldbu	r2,0(r2)
   8207c:	10803fcc 	andi	r2,r2,255
   82080:	10800318 	cmpnei	r2,r2,12
   82084:	1000051e 	bne	r2,zero,8209c <edid_decode_cea+0x570>
   82088:	e0bff117 	ldw	r2,-60(fp)
   8208c:	108000c4 	addi	r2,r2,3
   82090:	10800003 	ldbu	r2,0(r2)
   82094:	10803fcc 	andi	r2,r2,255
   82098:	10000b26 	beq	r2,zero,820c8 <edid_decode_cea+0x59c>
				cea->db_vsdb_hdmi.ieee_reg_id = 0;
   8209c:	e0bff917 	ldw	r2,-28(fp)
   820a0:	10009d15 	stw	zero,628(r2)
				c += (*c & 0x1f) + 1;
   820a4:	e0bff117 	ldw	r2,-60(fp)
   820a8:	10800003 	ldbu	r2,0(r2)
   820ac:	10803fcc 	andi	r2,r2,255
   820b0:	108007cc 	andi	r2,r2,31
   820b4:	10800044 	addi	r2,r2,1
   820b8:	e0fff117 	ldw	r3,-60(fp)
   820bc:	1885883a 	add	r2,r3,r2
   820c0:	e0bff115 	stw	r2,-60(fp)
				break;
   820c4:	00029606 	br	82b20 <edid_decode_cea+0xff4>
			}

			cea->db_vsdb_hdmi.ext_len = (int)(*c & 0x1f);
   820c8:	e0bff117 	ldw	r2,-60(fp)
   820cc:	10800003 	ldbu	r2,0(r2)
   820d0:	10803fcc 	andi	r2,r2,255
   820d4:	10c007cc 	andi	r3,r2,31
   820d8:	e0bff917 	ldw	r2,-28(fp)
   820dc:	10c09c15 	stw	r3,624(r2)
			cea->db_vsdb_hdmi.ieee_reg_id = (c[3] << 16) | (c[2] << 8) | c[1];
   820e0:	e0bff117 	ldw	r2,-60(fp)
   820e4:	108000c4 	addi	r2,r2,3
   820e8:	10800003 	ldbu	r2,0(r2)
   820ec:	10803fcc 	andi	r2,r2,255
   820f0:	1006943a 	slli	r3,r2,16
   820f4:	e0bff117 	ldw	r2,-60(fp)
   820f8:	10800084 	addi	r2,r2,2
   820fc:	10800003 	ldbu	r2,0(r2)
   82100:	10803fcc 	andi	r2,r2,255
   82104:	1004923a 	slli	r2,r2,8
   82108:	1886b03a 	or	r3,r3,r2
   8210c:	e0bff117 	ldw	r2,-60(fp)
   82110:	10800044 	addi	r2,r2,1
   82114:	10800003 	ldbu	r2,0(r2)
   82118:	10803fcc 	andi	r2,r2,255
   8211c:	1886b03a 	or	r3,r3,r2
   82120:	e0bff917 	ldw	r2,-28(fp)
   82124:	10c09d15 	stw	r3,628(r2)

			cea->db_vsdb_hdmi.addr_a = (int)(c[4] >> 4);
   82128:	e0bff117 	ldw	r2,-60(fp)
   8212c:	10800104 	addi	r2,r2,4
   82130:	10800003 	ldbu	r2,0(r2)
   82134:	10803fcc 	andi	r2,r2,255
   82138:	1004d13a 	srli	r2,r2,4
   8213c:	10c03fcc 	andi	r3,r2,255
   82140:	e0bff917 	ldw	r2,-28(fp)
   82144:	10c09e15 	stw	r3,632(r2)
			cea->db_vsdb_hdmi.addr_b = (int)(c[4] & 0x0f);
   82148:	e0bff117 	ldw	r2,-60(fp)
   8214c:	10800104 	addi	r2,r2,4
   82150:	10800003 	ldbu	r2,0(r2)
   82154:	10803fcc 	andi	r2,r2,255
   82158:	10c003cc 	andi	r3,r2,15
   8215c:	e0bff917 	ldw	r2,-28(fp)
   82160:	10c09f15 	stw	r3,636(r2)
			cea->db_vsdb_hdmi.addr_c = (int)(c[5] >> 4);
   82164:	e0bff117 	ldw	r2,-60(fp)
   82168:	10800144 	addi	r2,r2,5
   8216c:	10800003 	ldbu	r2,0(r2)
   82170:	10803fcc 	andi	r2,r2,255
   82174:	1004d13a 	srli	r2,r2,4
   82178:	10c03fcc 	andi	r3,r2,255
   8217c:	e0bff917 	ldw	r2,-28(fp)
   82180:	10c0a015 	stw	r3,640(r2)
			cea->db_vsdb_hdmi.addr_d = (int)(c[5] & 0x0f);
   82184:	e0bff117 	ldw	r2,-60(fp)
   82188:	10800144 	addi	r2,r2,5
   8218c:	10800003 	ldbu	r2,0(r2)
   82190:	10803fcc 	andi	r2,r2,255
   82194:	10c003cc 	andi	r3,r2,15
   82198:	e0bff917 	ldw	r2,-28(fp)
   8219c:	10c0a115 	stw	r3,644(r2)

			if ((*c & 0x1f) >= 6) {
   821a0:	e0bff117 	ldw	r2,-60(fp)
   821a4:	10800003 	ldbu	r2,0(r2)
   821a8:	10803fcc 	andi	r2,r2,255
   821ac:	108007cc 	andi	r2,r2,31
   821b0:	10800190 	cmplti	r2,r2,6
   821b4:	1000361e 	bne	r2,zero,82290 <edid_decode_cea+0x764>
				cea->db_vsdb_hdmi.ai = (c[6] & 0x80) ? 1 : 0;
   821b8:	e0bff117 	ldw	r2,-60(fp)
   821bc:	10800184 	addi	r2,r2,6
   821c0:	10800003 	ldbu	r2,0(r2)
   821c4:	10803fcc 	andi	r2,r2,255
   821c8:	1004d1fa 	srli	r2,r2,7
   821cc:	10c03fcc 	andi	r3,r2,255
   821d0:	e0bff917 	ldw	r2,-28(fp)
   821d4:	10c0a215 	stw	r3,648(r2)
				cea->db_vsdb_hdmi.bpp48 = (c[6] & 0x40) ? 1 : 0;
   821d8:	e0bff117 	ldw	r2,-60(fp)
   821dc:	10800184 	addi	r2,r2,6
   821e0:	10800003 	ldbu	r2,0(r2)
   821e4:	10803fcc 	andi	r2,r2,255
   821e8:	1080100c 	andi	r2,r2,64
   821ec:	1004c03a 	cmpne	r2,r2,zero
   821f0:	10c03fcc 	andi	r3,r2,255
   821f4:	e0bff917 	ldw	r2,-28(fp)
   821f8:	10c0a515 	stw	r3,660(r2)
				cea->db_vsdb_hdmi.bpp36 = (c[6] & 0x20) ? 1 : 0;
   821fc:	e0bff117 	ldw	r2,-60(fp)
   82200:	10800184 	addi	r2,r2,6
   82204:	10800003 	ldbu	r2,0(r2)
   82208:	10803fcc 	andi	r2,r2,255
   8220c:	1080080c 	andi	r2,r2,32
   82210:	1004c03a 	cmpne	r2,r2,zero
   82214:	10c03fcc 	andi	r3,r2,255
   82218:	e0bff917 	ldw	r2,-28(fp)
   8221c:	10c0a415 	stw	r3,656(r2)
				cea->db_vsdb_hdmi.bpp30 = (c[6] & 0x10) ? 1 : 0;
   82220:	e0bff117 	ldw	r2,-60(fp)
   82224:	10800184 	addi	r2,r2,6
   82228:	10800003 	ldbu	r2,0(r2)
   8222c:	10803fcc 	andi	r2,r2,255
   82230:	1080040c 	andi	r2,r2,16
   82234:	1004c03a 	cmpne	r2,r2,zero
   82238:	10c03fcc 	andi	r3,r2,255
   8223c:	e0bff917 	ldw	r2,-28(fp)
   82240:	10c0a315 	stw	r3,652(r2)
				cea->db_vsdb_hdmi.ycbcr444 = (c[6] & 0x08) ? 1 : 0;
   82244:	e0bff117 	ldw	r2,-60(fp)
   82248:	10800184 	addi	r2,r2,6
   8224c:	10800003 	ldbu	r2,0(r2)
   82250:	10803fcc 	andi	r2,r2,255
   82254:	1080020c 	andi	r2,r2,8
   82258:	1004c03a 	cmpne	r2,r2,zero
   8225c:	10c03fcc 	andi	r3,r2,255
   82260:	e0bff917 	ldw	r2,-28(fp)
   82264:	10c0a615 	stw	r3,664(r2)
				cea->db_vsdb_hdmi.dvi_dual = (c[6] & 0x01) ? 1 : 0;
   82268:	e0bff117 	ldw	r2,-60(fp)
   8226c:	10800184 	addi	r2,r2,6
   82270:	10800003 	ldbu	r2,0(r2)
   82274:	10803fcc 	andi	r2,r2,255
   82278:	1080004c 	andi	r2,r2,1
   8227c:	1004c03a 	cmpne	r2,r2,zero
   82280:	10c03fcc 	andi	r3,r2,255
   82284:	e0bff917 	ldw	r2,-28(fp)
   82288:	10c0a715 	stw	r3,668(r2)
   8228c:	00000c06 	br	822c0 <edid_decode_cea+0x794>
			} else {
				cea->db_vsdb_hdmi.ai = 0;
   82290:	e0bff917 	ldw	r2,-28(fp)
   82294:	1000a215 	stw	zero,648(r2)
				cea->db_vsdb_hdmi.bpp48 = 0;
   82298:	e0bff917 	ldw	r2,-28(fp)
   8229c:	1000a515 	stw	zero,660(r2)
				cea->db_vsdb_hdmi.bpp36 = 0;
   822a0:	e0bff917 	ldw	r2,-28(fp)
   822a4:	1000a415 	stw	zero,656(r2)
				cea->db_vsdb_hdmi.bpp30 = 0;
   822a8:	e0bff917 	ldw	r2,-28(fp)
   822ac:	1000a315 	stw	zero,652(r2)
				cea->db_vsdb_hdmi.ycbcr444 = 0;
   822b0:	e0bff917 	ldw	r2,-28(fp)
   822b4:	1000a615 	stw	zero,664(r2)
				cea->db_vsdb_hdmi.dvi_dual = 0;
   822b8:	e0bff917 	ldw	r2,-28(fp)
   822bc:	1000a715 	stw	zero,668(r2)
			}

			if ((*c & 0x1f) >= 7) {
   822c0:	e0bff117 	ldw	r2,-60(fp)
   822c4:	10800003 	ldbu	r2,0(r2)
   822c8:	10803fcc 	andi	r2,r2,255
   822cc:	108007cc 	andi	r2,r2,31
   822d0:	108001d0 	cmplti	r2,r2,7
   822d4:	1000081e 	bne	r2,zero,822f8 <edid_decode_cea+0x7cc>
				cea->db_vsdb_hdmi.max_tmds_clk = c[7] * 5;
   822d8:	e0bff117 	ldw	r2,-60(fp)
   822dc:	108001c4 	addi	r2,r2,7
   822e0:	10800003 	ldbu	r2,0(r2)
   822e4:	10803fcc 	andi	r2,r2,255
   822e8:	10c00164 	muli	r3,r2,5
   822ec:	e0bff917 	ldw	r2,-28(fp)
   822f0:	10c0ab15 	stw	r3,684(r2)
   822f4:	00000206 	br	82300 <edid_decode_cea+0x7d4>
			} else {
				cea->db_vsdb_hdmi.max_tmds_clk = 0;
   822f8:	e0bff917 	ldw	r2,-28(fp)
   822fc:	1000ab15 	stw	zero,684(r2)
			}

			cea->db_vsdb_hdmi.p_latency = 0;
   82300:	e0bff917 	ldw	r2,-28(fp)
   82304:	1000a815 	stw	zero,672(r2)
			cea->db_vsdb_hdmi.i_latency = 0;
   82308:	e0bff917 	ldw	r2,-28(fp)
   8230c:	1000a915 	stw	zero,676(r2)
			cea->db_vsdb_hdmi.hdmi_video = 0;
   82310:	e0bff917 	ldw	r2,-28(fp)
   82314:	1000aa15 	stw	zero,680(r2)

			cea->db_vsdb_hdmi.vid_latency_p = 0;
   82318:	e0bff917 	ldw	r2,-28(fp)
   8231c:	1000ac15 	stw	zero,688(r2)
			cea->db_vsdb_hdmi.aud_latency_p = 0;
   82320:	e0bff917 	ldw	r2,-28(fp)
   82324:	1000ad15 	stw	zero,692(r2)
			cea->db_vsdb_hdmi.vid_latency_i = 0;
   82328:	e0bff917 	ldw	r2,-28(fp)
   8232c:	1000ae15 	stw	zero,696(r2)
			cea->db_vsdb_hdmi.aud_latency_i = 0;
   82330:	e0bff917 	ldw	r2,-28(fp)
   82334:	1000af15 	stw	zero,700(r2)

			if ((*c & 0x1f) >= 8) {
   82338:	e0bff117 	ldw	r2,-60(fp)
   8233c:	10800003 	ldbu	r2,0(r2)
   82340:	10803fcc 	andi	r2,r2,255
   82344:	108007cc 	andi	r2,r2,31
   82348:	10800210 	cmplti	r2,r2,8
   8234c:	1000421e 	bne	r2,zero,82458 <edid_decode_cea+0x92c>
				u8 c8 = c[8];
   82350:	e0bff117 	ldw	r2,-60(fp)
   82354:	10800203 	ldbu	r2,8(r2)
   82358:	e0bffb05 	stb	r2,-20(fp)
				hv = &c[9];
   8235c:	e0bff117 	ldw	r2,-60(fp)
   82360:	10800244 	addi	r2,r2,9
   82364:	e0bff215 	stw	r2,-56(fp)
				if (c8 & 0x80) {
   82368:	e0bffb03 	ldbu	r2,-20(fp)
   8236c:	10803fcc 	andi	r2,r2,255
   82370:	1080201c 	xori	r2,r2,128
   82374:	10bfe004 	addi	r2,r2,-128
   82378:	1000170e 	bge	r2,zero,823d8 <edid_decode_cea+0x8ac>
					cea->db_vsdb_hdmi.p_latency = 1;
   8237c:	e0bff917 	ldw	r2,-28(fp)
   82380:	00c00044 	movi	r3,1
   82384:	10c0a815 	stw	r3,672(r2)
					cea->db_vsdb_hdmi.vid_latency_p = (hv[0] - 1) * 2;  // (ms)
   82388:	e0bff217 	ldw	r2,-56(fp)
   8238c:	10800003 	ldbu	r2,0(r2)
   82390:	10803fcc 	andi	r2,r2,255
   82394:	10bfffc4 	addi	r2,r2,-1
   82398:	1085883a 	add	r2,r2,r2
   8239c:	1007883a 	mov	r3,r2
   823a0:	e0bff917 	ldw	r2,-28(fp)
   823a4:	10c0ac15 	stw	r3,688(r2)
					cea->db_vsdb_hdmi.aud_latency_p = (hv[1] - 1) * 2;  // (ms)
   823a8:	e0bff217 	ldw	r2,-56(fp)
   823ac:	10800044 	addi	r2,r2,1
   823b0:	10800003 	ldbu	r2,0(r2)
   823b4:	10803fcc 	andi	r2,r2,255
   823b8:	10bfffc4 	addi	r2,r2,-1
   823bc:	1085883a 	add	r2,r2,r2
   823c0:	1007883a 	mov	r3,r2
   823c4:	e0bff917 	ldw	r2,-28(fp)
   823c8:	10c0ad15 	stw	r3,692(r2)
					hv += 2;
   823cc:	e0bff217 	ldw	r2,-56(fp)
   823d0:	10800084 	addi	r2,r2,2
   823d4:	e0bff215 	stw	r2,-56(fp)
				}
				if (c8 & 0x40) {
   823d8:	e0bffb03 	ldbu	r2,-20(fp)
   823dc:	1080100c 	andi	r2,r2,64
   823e0:	10001726 	beq	r2,zero,82440 <edid_decode_cea+0x914>
					cea->db_vsdb_hdmi.i_latency = 1;
   823e4:	e0bff917 	ldw	r2,-28(fp)
   823e8:	00c00044 	movi	r3,1
   823ec:	10c0a915 	stw	r3,676(r2)
					cea->db_vsdb_hdmi.vid_latency_i = (hv[0] - 1) * 2;  // (ms)
   823f0:	e0bff217 	ldw	r2,-56(fp)
   823f4:	10800003 	ldbu	r2,0(r2)
   823f8:	10803fcc 	andi	r2,r2,255
   823fc:	10bfffc4 	addi	r2,r2,-1
   82400:	1085883a 	add	r2,r2,r2
   82404:	1007883a 	mov	r3,r2
   82408:	e0bff917 	ldw	r2,-28(fp)
   8240c:	10c0ae15 	stw	r3,696(r2)
					cea->db_vsdb_hdmi.aud_latency_i = (hv[1] - 1) * 2;  // (ms)
   82410:	e0bff217 	ldw	r2,-56(fp)
   82414:	10800044 	addi	r2,r2,1
   82418:	10800003 	ldbu	r2,0(r2)
   8241c:	10803fcc 	andi	r2,r2,255
   82420:	10bfffc4 	addi	r2,r2,-1
   82424:	1085883a 	add	r2,r2,r2
   82428:	1007883a 	mov	r3,r2
   8242c:	e0bff917 	ldw	r2,-28(fp)
   82430:	10c0af15 	stw	r3,700(r2)
					hv += 2;
   82434:	e0bff217 	ldw	r2,-56(fp)
   82438:	10800084 	addi	r2,r2,2
   8243c:	e0bff215 	stw	r2,-56(fp)
				}
				if (c8 & 0x20) {
   82440:	e0bffb03 	ldbu	r2,-20(fp)
   82444:	1080080c 	andi	r2,r2,32
   82448:	10000326 	beq	r2,zero,82458 <edid_decode_cea+0x92c>
					cea->db_vsdb_hdmi.hdmi_video = 1;
   8244c:	e0bff917 	ldw	r2,-28(fp)
   82450:	00c00044 	movi	r3,1
   82454:	10c0aa15 	stw	r3,680(r2)
				}
			}

			if (cea->db_vsdb_hdmi.hdmi_video > 0) {
   82458:	e0bff917 	ldw	r2,-28(fp)
   8245c:	1080aa17 	ldw	r2,680(r2)
   82460:	0080270e 	bge	zero,r2,82500 <edid_decode_cea+0x9d4>
				cea->db_vsdb_hdmi.present_3d = hv[0] & 0x80 ? 1 : 0;
   82464:	e0bff217 	ldw	r2,-56(fp)
   82468:	10800003 	ldbu	r2,0(r2)
   8246c:	10803fcc 	andi	r2,r2,255
   82470:	1004d1fa 	srli	r2,r2,7
   82474:	10c03fcc 	andi	r3,r2,255
   82478:	e0bff917 	ldw	r2,-28(fp)
   8247c:	10c0b015 	stw	r3,704(r2)
				cea->db_vsdb_hdmi.multi_3d = (hv[0] >> 5) & 0x03;
   82480:	e0bff217 	ldw	r2,-56(fp)
   82484:	10800003 	ldbu	r2,0(r2)
   82488:	10803fcc 	andi	r2,r2,255
   8248c:	1004d17a 	srli	r2,r2,5
   82490:	10803fcc 	andi	r2,r2,255
   82494:	10c000cc 	andi	r3,r2,3
   82498:	e0bff917 	ldw	r2,-28(fp)
   8249c:	10c0b115 	stw	r3,708(r2)
				cea->db_vsdb_hdmi.image_size = (hv[0] >> 3) & 0x03;
   824a0:	e0bff217 	ldw	r2,-56(fp)
   824a4:	10800003 	ldbu	r2,0(r2)
   824a8:	10803fcc 	andi	r2,r2,255
   824ac:	1004d0fa 	srli	r2,r2,3
   824b0:	10803fcc 	andi	r2,r2,255
   824b4:	10c000cc 	andi	r3,r2,3
   824b8:	e0bff917 	ldw	r2,-28(fp)
   824bc:	10c0b215 	stw	r3,712(r2)
				cea->db_vsdb_hdmi.hdmi_xx_len = hv[1] >> 5;
   824c0:	e0bff217 	ldw	r2,-56(fp)
   824c4:	10800044 	addi	r2,r2,1
   824c8:	10800003 	ldbu	r2,0(r2)
   824cc:	10803fcc 	andi	r2,r2,255
   824d0:	1004d17a 	srli	r2,r2,5
   824d4:	10c03fcc 	andi	r3,r2,255
   824d8:	e0bff917 	ldw	r2,-28(fp)
   824dc:	10c0b315 	stw	r3,716(r2)
				cea->db_vsdb_hdmi.hdmi_3d_len = hv[1] & 0x1f;
   824e0:	e0bff217 	ldw	r2,-56(fp)
   824e4:	10800044 	addi	r2,r2,1
   824e8:	10800003 	ldbu	r2,0(r2)
   824ec:	10803fcc 	andi	r2,r2,255
   824f0:	10c007cc 	andi	r3,r2,31
   824f4:	e0bff917 	ldw	r2,-28(fp)
   824f8:	10c0b415 	stw	r3,720(r2)
   824fc:	00000a06 	br	82528 <edid_decode_cea+0x9fc>
			} else {
				cea->db_vsdb_hdmi.present_3d = 0;
   82500:	e0bff917 	ldw	r2,-28(fp)
   82504:	1000b015 	stw	zero,704(r2)
				cea->db_vsdb_hdmi.multi_3d = 0;
   82508:	e0bff917 	ldw	r2,-28(fp)
   8250c:	1000b115 	stw	zero,708(r2)
				cea->db_vsdb_hdmi.image_size = 0;
   82510:	e0bff917 	ldw	r2,-28(fp)
   82514:	1000b215 	stw	zero,712(r2)
				cea->db_vsdb_hdmi.hdmi_xx_len = 0;
   82518:	e0bff917 	ldw	r2,-28(fp)
   8251c:	1000b315 	stw	zero,716(r2)
				cea->db_vsdb_hdmi.hdmi_3d_len = 0;
   82520:	e0bff917 	ldw	r2,-28(fp)
   82524:	1000b415 	stw	zero,720(r2)
			}

			if (cea->db_vsdb_hdmi.hdmi_3d_len > 0) {
   82528:	e0bff917 	ldw	r2,-28(fp)
   8252c:	1080b417 	ldw	r2,720(r2)
   82530:	0080940e 	bge	zero,r2,82784 <edid_decode_cea+0xc58>
				u8 *d = &hv[2 + cea->db_vsdb_hdmi.hdmi_xx_len];  // data pointer starting from 3D_Structure_ALL_15...8
   82534:	e0bff917 	ldw	r2,-28(fp)
   82538:	1080b317 	ldw	r2,716(r2)
   8253c:	10800084 	addi	r2,r2,2
   82540:	e0fff217 	ldw	r3,-56(fp)
   82544:	1885883a 	add	r2,r3,r2
   82548:	e0bffc15 	stw	r2,-16(fp)
				u8 *vic = 0;	// data pointer starting from 2D_VIC_Order_1 + 3D_Structure_1
   8254c:	e03ff515 	stw	zero,-44(fp)
				int vic_l = 0;  // remaining 3D size starting from 2D_VIC_Order_1 + 3D_Structure_1
   82550:	e03ff615 	stw	zero,-40(fp)

				if (cea->db_vsdb_hdmi.multi_3d == 2) {
   82554:	e0bff917 	ldw	r2,-28(fp)
   82558:	1080b117 	ldw	r2,708(r2)
   8255c:	10800098 	cmpnei	r2,r2,2
   82560:	10001f1e 	bne	r2,zero,825e0 <edid_decode_cea+0xab4>
					cea->db_vsdb_hdmi.struct_all_3d = (d[0] << 8) | d[1];
   82564:	e0bffc17 	ldw	r2,-16(fp)
   82568:	10800003 	ldbu	r2,0(r2)
   8256c:	10803fcc 	andi	r2,r2,255
   82570:	1006923a 	slli	r3,r2,8
   82574:	e0bffc17 	ldw	r2,-16(fp)
   82578:	10800044 	addi	r2,r2,1
   8257c:	10800003 	ldbu	r2,0(r2)
   82580:	10803fcc 	andi	r2,r2,255
   82584:	1886b03a 	or	r3,r3,r2
   82588:	e0bff917 	ldw	r2,-28(fp)
   8258c:	10c0b515 	stw	r3,724(r2)
					cea->db_vsdb_hdmi.mask_3d = (d[2] << 8) | d[3];
   82590:	e0bffc17 	ldw	r2,-16(fp)
   82594:	10800084 	addi	r2,r2,2
   82598:	10800003 	ldbu	r2,0(r2)
   8259c:	10803fcc 	andi	r2,r2,255
   825a0:	1006923a 	slli	r3,r2,8
   825a4:	e0bffc17 	ldw	r2,-16(fp)
   825a8:	108000c4 	addi	r2,r2,3
   825ac:	10800003 	ldbu	r2,0(r2)
   825b0:	10803fcc 	andi	r2,r2,255
   825b4:	1886b03a 	or	r3,r3,r2
   825b8:	e0bff917 	ldw	r2,-28(fp)
   825bc:	10c0b615 	stw	r3,728(r2)
					vic = &d[4];
   825c0:	e0bffc17 	ldw	r2,-16(fp)
   825c4:	10800104 	addi	r2,r2,4
   825c8:	e0bff515 	stw	r2,-44(fp)
					vic_l = cea->db_vsdb_hdmi.hdmi_3d_len - 4;
   825cc:	e0bff917 	ldw	r2,-28(fp)
   825d0:	1080b417 	ldw	r2,720(r2)
   825d4:	10bfff04 	addi	r2,r2,-4
   825d8:	e0bff615 	stw	r2,-40(fp)
   825dc:	00001d06 	br	82654 <edid_decode_cea+0xb28>
				} else if (cea->db_vsdb_hdmi.multi_3d == 1) {
   825e0:	e0bff917 	ldw	r2,-28(fp)
   825e4:	1080b117 	ldw	r2,708(r2)
   825e8:	10800058 	cmpnei	r2,r2,1
   825ec:	1000151e 	bne	r2,zero,82644 <edid_decode_cea+0xb18>
					cea->db_vsdb_hdmi.struct_all_3d = (d[0] << 8) | d[1];
   825f0:	e0bffc17 	ldw	r2,-16(fp)
   825f4:	10800003 	ldbu	r2,0(r2)
   825f8:	10803fcc 	andi	r2,r2,255
   825fc:	1006923a 	slli	r3,r2,8
   82600:	e0bffc17 	ldw	r2,-16(fp)
   82604:	10800044 	addi	r2,r2,1
   82608:	10800003 	ldbu	r2,0(r2)
   8260c:	10803fcc 	andi	r2,r2,255
   82610:	1886b03a 	or	r3,r3,r2
   82614:	e0bff917 	ldw	r2,-28(fp)
   82618:	10c0b515 	stw	r3,724(r2)
					cea->db_vsdb_hdmi.mask_3d = 0;
   8261c:	e0bff917 	ldw	r2,-28(fp)
   82620:	1000b615 	stw	zero,728(r2)
					vic = &d[2];
   82624:	e0bffc17 	ldw	r2,-16(fp)
   82628:	10800084 	addi	r2,r2,2
   8262c:	e0bff515 	stw	r2,-44(fp)
					vic_l = cea->db_vsdb_hdmi.hdmi_3d_len - 2;
   82630:	e0bff917 	ldw	r2,-28(fp)
   82634:	1080b417 	ldw	r2,720(r2)
   82638:	10bfff84 	addi	r2,r2,-2
   8263c:	e0bff615 	stw	r2,-40(fp)
   82640:	00000406 	br	82654 <edid_decode_cea+0xb28>
				} else {
					cea->db_vsdb_hdmi.struct_all_3d = 0;
   82644:	e0bff917 	ldw	r2,-28(fp)
   82648:	1000b515 	stw	zero,724(r2)
					cea->db_vsdb_hdmi.mask_3d = 0;
   8264c:	e0bff917 	ldw	r2,-28(fp)
   82650:	1000b615 	stw	zero,728(r2)
				}

				cea->db_vsdb_hdmi.nr_vic_3d = 0;
   82654:	e0bff917 	ldw	r2,-28(fp)
   82658:	1000b715 	stw	zero,732(r2)
				while (vic_l > 0) {
   8265c:	00004606 	br	82778 <edid_decode_cea+0xc4c>
					cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].vic_2d = vic[0] >> 4;
   82660:	e0bff917 	ldw	r2,-28(fp)
   82664:	1080b717 	ldw	r2,732(r2)
   82668:	e0fff517 	ldw	r3,-44(fp)
   8266c:	18c00003 	ldbu	r3,0(r3)
   82670:	18c03fcc 	andi	r3,r3,255
   82674:	1806d13a 	srli	r3,r3,4
   82678:	18c03fcc 	andi	r3,r3,255
   8267c:	e13ff917 	ldw	r4,-28(fp)
   82680:	10800324 	muli	r2,r2,12
   82684:	2085883a 	add	r2,r4,r2
   82688:	1080b804 	addi	r2,r2,736
   8268c:	10c00015 	stw	r3,0(r2)
					cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].struct_3d = vic[0] & 0x0f;
   82690:	e0bff917 	ldw	r2,-28(fp)
   82694:	1080b717 	ldw	r2,732(r2)
   82698:	e0fff517 	ldw	r3,-44(fp)
   8269c:	18c00003 	ldbu	r3,0(r3)
   826a0:	18c03fcc 	andi	r3,r3,255
   826a4:	18c003cc 	andi	r3,r3,15
   826a8:	e13ff917 	ldw	r4,-28(fp)
   826ac:	10800324 	muli	r2,r2,12
   826b0:	2085883a 	add	r2,r4,r2
   826b4:	1080b904 	addi	r2,r2,740
   826b8:	10c00015 	stw	r3,0(r2)
					if (cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].struct_3d >= 0x08) {
   826bc:	e0bff917 	ldw	r2,-28(fp)
   826c0:	1080b717 	ldw	r2,732(r2)
   826c4:	e0fff917 	ldw	r3,-28(fp)
   826c8:	10800324 	muli	r2,r2,12
   826cc:	1885883a 	add	r2,r3,r2
   826d0:	1080b904 	addi	r2,r2,740
   826d4:	10800017 	ldw	r2,0(r2)
   826d8:	10800210 	cmplti	r2,r2,8
   826dc:	1000141e 	bne	r2,zero,82730 <edid_decode_cea+0xc04>
						cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].detail_3d = vic[1] >> 4;
   826e0:	e0bff917 	ldw	r2,-28(fp)
   826e4:	1080b717 	ldw	r2,732(r2)
   826e8:	e0fff517 	ldw	r3,-44(fp)
   826ec:	18c00044 	addi	r3,r3,1
   826f0:	18c00003 	ldbu	r3,0(r3)
   826f4:	18c03fcc 	andi	r3,r3,255
   826f8:	1806d13a 	srli	r3,r3,4
   826fc:	18c03fcc 	andi	r3,r3,255
   82700:	e13ff917 	ldw	r4,-28(fp)
   82704:	10800324 	muli	r2,r2,12
   82708:	2085883a 	add	r2,r4,r2
   8270c:	1080ba04 	addi	r2,r2,744
   82710:	10c00015 	stw	r3,0(r2)
						vic += 2;
   82714:	e0bff517 	ldw	r2,-44(fp)
   82718:	10800084 	addi	r2,r2,2
   8271c:	e0bff515 	stw	r2,-44(fp)
						vic_l -= 2;
   82720:	e0bff617 	ldw	r2,-40(fp)
   82724:	10bfff84 	addi	r2,r2,-2
   82728:	e0bff615 	stw	r2,-40(fp)
   8272c:	00000d06 	br	82764 <edid_decode_cea+0xc38>
					} else {
						cea->db_vsdb_hdmi.vic_3d[cea->db_vsdb_hdmi.nr_vic_3d].detail_3d = 0;
   82730:	e0bff917 	ldw	r2,-28(fp)
   82734:	1080b717 	ldw	r2,732(r2)
   82738:	e0fff917 	ldw	r3,-28(fp)
   8273c:	10800324 	muli	r2,r2,12
   82740:	1885883a 	add	r2,r3,r2
   82744:	1080ba04 	addi	r2,r2,744
   82748:	10000015 	stw	zero,0(r2)
						++vic;
   8274c:	e0bff517 	ldw	r2,-44(fp)
   82750:	10800044 	addi	r2,r2,1
   82754:	e0bff515 	stw	r2,-44(fp)
						--vic_l;
   82758:	e0bff617 	ldw	r2,-40(fp)
   8275c:	10bfffc4 	addi	r2,r2,-1
   82760:	e0bff615 	stw	r2,-40(fp)
					}
					++cea->db_vsdb_hdmi.nr_vic_3d;
   82764:	e0bff917 	ldw	r2,-28(fp)
   82768:	1080b717 	ldw	r2,732(r2)
   8276c:	10c00044 	addi	r3,r2,1
   82770:	e0bff917 	ldw	r2,-28(fp)
   82774:	10c0b715 	stw	r3,732(r2)
					cea->db_vsdb_hdmi.struct_all_3d = 0;
					cea->db_vsdb_hdmi.mask_3d = 0;
				}

				cea->db_vsdb_hdmi.nr_vic_3d = 0;
				while (vic_l > 0) {
   82778:	e0bff617 	ldw	r2,-40(fp)
   8277c:	00bfb816 	blt	zero,r2,82660 <edid_decode_cea+0xb34>
   82780:	00000406 	br	82794 <edid_decode_cea+0xc68>
						--vic_l;
					}
					++cea->db_vsdb_hdmi.nr_vic_3d;
				}
			} else {
				cea->db_vsdb_hdmi.struct_all_3d = 0;
   82784:	e0bff917 	ldw	r2,-28(fp)
   82788:	1000b515 	stw	zero,724(r2)
				cea->db_vsdb_hdmi.mask_3d = 0;
   8278c:	e0bff917 	ldw	r2,-28(fp)
   82790:	1000b615 	stw	zero,728(r2)
			}

			c += (*c & 0x1f) + 1;
   82794:	e0bff117 	ldw	r2,-60(fp)
   82798:	10800003 	ldbu	r2,0(r2)
   8279c:	10803fcc 	andi	r2,r2,255
   827a0:	108007cc 	andi	r2,r2,31
   827a4:	10800044 	addi	r2,r2,1
   827a8:	e0fff117 	ldw	r3,-60(fp)
   827ac:	1885883a 	add	r2,r3,r2
   827b0:	e0bff115 	stw	r2,-60(fp)
			break;
   827b4:	0000da06 	br	82b20 <edid_decode_cea+0xff4>

		case CEA_DB_SPEAKER:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_SPEAKER;
   827b8:	e0bff917 	ldw	r2,-28(fp)
   827bc:	10800717 	ldw	r2,28(r2)
   827c0:	e0fff917 	ldw	r3,-28(fp)
   827c4:	1887883a 	add	r3,r3,r2
   827c8:	18c00804 	addi	r3,r3,32
   827cc:	01000104 	movi	r4,4
   827d0:	19000005 	stb	r4,0(r3)
   827d4:	10c00044 	addi	r3,r2,1
   827d8:	e0bff917 	ldw	r2,-28(fp)
   827dc:	10c00715 	stw	r3,28(r2)
			cea->db_speaker.designation = (int)(c[1] & 0x7f);
   827e0:	e0bff117 	ldw	r2,-60(fp)
   827e4:	10800044 	addi	r2,r2,1
   827e8:	10800003 	ldbu	r2,0(r2)
   827ec:	10803fcc 	andi	r2,r2,255
   827f0:	10c01fcc 	andi	r3,r2,127
   827f4:	e0bff917 	ldw	r2,-28(fp)
   827f8:	10c09b15 	stw	r3,620(r2)
			c += (*c & 0x1f) + 1;
   827fc:	e0bff117 	ldw	r2,-60(fp)
   82800:	10800003 	ldbu	r2,0(r2)
   82804:	10803fcc 	andi	r2,r2,255
   82808:	108007cc 	andi	r2,r2,31
   8280c:	10800044 	addi	r2,r2,1
   82810:	e0fff117 	ldw	r3,-60(fp)
   82814:	1885883a 	add	r2,r3,r2
   82818:	e0bff115 	stw	r2,-60(fp)
			break;
   8281c:	0000c006 	br	82b20 <edid_decode_cea+0xff4>

		case CEA_DB_DTC:
			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_DTC;
   82820:	e0bff917 	ldw	r2,-28(fp)
   82824:	10800717 	ldw	r2,28(r2)
   82828:	e0fff917 	ldw	r3,-28(fp)
   8282c:	1887883a 	add	r3,r3,r2
   82830:	18c00804 	addi	r3,r3,32
   82834:	01000144 	movi	r4,5
   82838:	19000005 	stb	r4,0(r3)
   8283c:	10c00044 	addi	r3,r2,1
   82840:	e0bff917 	ldw	r2,-28(fp)
   82844:	10c00715 	stw	r3,28(r2)
			c += (*c & 0x1f) + 1;
   82848:	e0bff117 	ldw	r2,-60(fp)
   8284c:	10800003 	ldbu	r2,0(r2)
   82850:	10803fcc 	andi	r2,r2,255
   82854:	108007cc 	andi	r2,r2,31
   82858:	10800044 	addi	r2,r2,1
   8285c:	e0fff117 	ldw	r3,-60(fp)
   82860:	1885883a 	add	r2,r3,r2
   82864:	e0bff115 	stw	r2,-60(fp)
			break;
   82868:	0000ad06 	br	82b20 <edid_decode_cea+0xff4>

		case CEA_DB_EXTENDED:
			switch (c[1]) {
   8286c:	e0bff117 	ldw	r2,-60(fp)
   82870:	10800044 	addi	r2,r2,1
   82874:	10800003 	ldbu	r2,0(r2)
   82878:	10803fcc 	andi	r2,r2,255
   8287c:	10c004e8 	cmpgeui	r3,r2,19
   82880:	1800911e 	bne	r3,zero,82ac8 <edid_decode_cea+0xf9c>
   82884:	1085883a 	add	r2,r2,r2
   82888:	1087883a 	add	r3,r2,r2
   8288c:	00800234 	movhi	r2,8
   82890:	108a2804 	addi	r2,r2,10400
   82894:	1885883a 	add	r2,r3,r2
   82898:	10800017 	ldw	r2,0(r2)
   8289c:	1000683a 	jmp	r2
   828a0:	000828ec 	andhi	zero,zero,8355
   828a4:	00082990 	cmplti	zero,zero,8358
   828a8:	000829b0 	cmpltui	zero,zero,8358
   828ac:	000829d0 	cmplti	zero,zero,8359
   828b0:	000829f0 	cmpltui	zero,zero,8359
   828b4:	00082a10 	cmplti	zero,zero,8360
   828b8:	00082ac8 	cmpgei	zero,zero,8363
   828bc:	00082ac8 	cmpgei	zero,zero,8363
   828c0:	00082ac8 	cmpgei	zero,zero,8363
   828c4:	00082ac8 	cmpgei	zero,zero,8363
   828c8:	00082ac8 	cmpgei	zero,zero,8363
   828cc:	00082ac8 	cmpgei	zero,zero,8363
   828d0:	00082ac8 	cmpgei	zero,zero,8363
   828d4:	00082ac8 	cmpgei	zero,zero,8363
   828d8:	00082ac8 	cmpgei	zero,zero,8363
   828dc:	00082ac8 	cmpgei	zero,zero,8363
   828e0:	00082a68 	cmpgeui	zero,zero,8361
   828e4:	00082a88 	cmpgei	zero,zero,8362
   828e8:	00082aa8 	cmpgeui	zero,zero,8362
			case CEA_DBE_VIDEO_CAP:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_CAP;
   828ec:	e0bff917 	ldw	r2,-28(fp)
   828f0:	10800717 	ldw	r2,28(r2)
   828f4:	e0fff917 	ldw	r3,-28(fp)
   828f8:	1885883a 	add	r2,r3,r2
   828fc:	10801704 	addi	r2,r2,92
   82900:	10000085 	stb	zero,2(r2)
				cea->db_vcdb.quant_range_sel = (c[2] & 0x40) ? 1 : 0;
   82904:	e0bff117 	ldw	r2,-60(fp)
   82908:	10800084 	addi	r2,r2,2
   8290c:	10800003 	ldbu	r2,0(r2)
   82910:	10803fcc 	andi	r2,r2,255
   82914:	1080100c 	andi	r2,r2,64
   82918:	1004c03a 	cmpne	r2,r2,zero
   8291c:	10c03fcc 	andi	r3,r2,255
   82920:	e0bff917 	ldw	r2,-28(fp)
   82924:	10c0ea15 	stw	r3,936(r2)
				cea->db_vcdb.pt_scan_behavior = (int)((c[2] >> 4) & 0x03);
   82928:	e0bff117 	ldw	r2,-60(fp)
   8292c:	10800084 	addi	r2,r2,2
   82930:	10800003 	ldbu	r2,0(r2)
   82934:	10803fcc 	andi	r2,r2,255
   82938:	1004d13a 	srli	r2,r2,4
   8293c:	10803fcc 	andi	r2,r2,255
   82940:	10c000cc 	andi	r3,r2,3
   82944:	e0bff917 	ldw	r2,-28(fp)
   82948:	10c0eb15 	stw	r3,940(r2)
				cea->db_vcdb.it_scan_behavior = (int)((c[2] >> 2) & 0x03);
   8294c:	e0bff117 	ldw	r2,-60(fp)
   82950:	10800084 	addi	r2,r2,2
   82954:	10800003 	ldbu	r2,0(r2)
   82958:	10803fcc 	andi	r2,r2,255
   8295c:	1004d0ba 	srli	r2,r2,2
   82960:	10803fcc 	andi	r2,r2,255
   82964:	10c000cc 	andi	r3,r2,3
   82968:	e0bff917 	ldw	r2,-28(fp)
   8296c:	10c0ec15 	stw	r3,944(r2)
				cea->db_vcdb.ce_scan_behavior = (int)(c[2] & 0x03);
   82970:	e0bff117 	ldw	r2,-60(fp)
   82974:	10800084 	addi	r2,r2,2
   82978:	10800003 	ldbu	r2,0(r2)
   8297c:	10803fcc 	andi	r2,r2,255
   82980:	10c000cc 	andi	r3,r2,3
   82984:	e0bff917 	ldw	r2,-28(fp)
   82988:	10c0ed15 	stw	r3,948(r2)
				break;
   8298c:	00004e06 	br	82ac8 <edid_decode_cea+0xf9c>
			case CEA_DBE_VIDEO_VENDOR:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_VENDOR;
   82990:	e0bff917 	ldw	r2,-28(fp)
   82994:	10800717 	ldw	r2,28(r2)
   82998:	e0fff917 	ldw	r3,-28(fp)
   8299c:	1885883a 	add	r2,r3,r2
   829a0:	10801704 	addi	r2,r2,92
   829a4:	00c00044 	movi	r3,1
   829a8:	10c00085 	stb	r3,2(r2)
				break;
   829ac:	00004606 	br	82ac8 <edid_decode_cea+0xf9c>
			case CEA_DBE_VIDEO_DDI:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_DDI;
   829b0:	e0bff917 	ldw	r2,-28(fp)
   829b4:	10800717 	ldw	r2,28(r2)
   829b8:	e0fff917 	ldw	r3,-28(fp)
   829bc:	1885883a 	add	r2,r3,r2
   829c0:	10801704 	addi	r2,r2,92
   829c4:	00c00084 	movi	r3,2
   829c8:	10c00085 	stb	r3,2(r2)
				break;
   829cc:	00003e06 	br	82ac8 <edid_decode_cea+0xf9c>
			case CEA_DBE_VIDEO_VESA:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_VESA;
   829d0:	e0bff917 	ldw	r2,-28(fp)
   829d4:	10800717 	ldw	r2,28(r2)
   829d8:	e0fff917 	ldw	r3,-28(fp)
   829dc:	1885883a 	add	r2,r3,r2
   829e0:	10801704 	addi	r2,r2,92
   829e4:	00c000c4 	movi	r3,3
   829e8:	10c00085 	stb	r3,2(r2)
				break;
   829ec:	00003606 	br	82ac8 <edid_decode_cea+0xf9c>
			case CEA_DBE_VIDEO_HDMI:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_VIDEO_HDMI;
   829f0:	e0bff917 	ldw	r2,-28(fp)
   829f4:	10800717 	ldw	r2,28(r2)
   829f8:	e0fff917 	ldw	r3,-28(fp)
   829fc:	1885883a 	add	r2,r3,r2
   82a00:	10801704 	addi	r2,r2,92
   82a04:	00c00104 	movi	r3,4
   82a08:	10c00085 	stb	r3,2(r2)
				break;
   82a0c:	00002e06 	br	82ac8 <edid_decode_cea+0xf9c>
			case CEA_DBE_COLORIMETRY:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_COLORIMETRY;
   82a10:	e0bff917 	ldw	r2,-28(fp)
   82a14:	10800717 	ldw	r2,28(r2)
   82a18:	e0fff917 	ldw	r3,-28(fp)
   82a1c:	1885883a 	add	r2,r3,r2
   82a20:	10801704 	addi	r2,r2,92
   82a24:	00c00144 	movi	r3,5
   82a28:	10c00085 	stb	r3,2(r2)
				cea->db_colorimetry.xvYCC = (int)(c[2] & 0x03);
   82a2c:	e0bff117 	ldw	r2,-60(fp)
   82a30:	10800084 	addi	r2,r2,2
   82a34:	10800003 	ldbu	r2,0(r2)
   82a38:	10803fcc 	andi	r2,r2,255
   82a3c:	10c000cc 	andi	r3,r2,3
   82a40:	e0bff917 	ldw	r2,-28(fp)
   82a44:	10c0e815 	stw	r3,928(r2)
				cea->db_colorimetry.metadata = (int)(c[3] & 0x07);
   82a48:	e0bff117 	ldw	r2,-60(fp)
   82a4c:	108000c4 	addi	r2,r2,3
   82a50:	10800003 	ldbu	r2,0(r2)
   82a54:	10803fcc 	andi	r2,r2,255
   82a58:	10c001cc 	andi	r3,r2,7
   82a5c:	e0bff917 	ldw	r2,-28(fp)
   82a60:	10c0e915 	stw	r3,932(r2)
				break;
   82a64:	00001806 	br	82ac8 <edid_decode_cea+0xf9c>
			case CEA_DBE_AUDIO_MISC:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_AUDIO_MISC;
   82a68:	e0bff917 	ldw	r2,-28(fp)
   82a6c:	10800717 	ldw	r2,28(r2)
   82a70:	e0fff917 	ldw	r3,-28(fp)
   82a74:	1885883a 	add	r2,r3,r2
   82a78:	10801704 	addi	r2,r2,92
   82a7c:	00c00404 	movi	r3,16
   82a80:	10c00085 	stb	r3,2(r2)
				break;
   82a84:	00001006 	br	82ac8 <edid_decode_cea+0xf9c>
			case CEA_DBE_AUDIO_VENDOR:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_AUDIO_VENDOR;
   82a88:	e0bff917 	ldw	r2,-28(fp)
   82a8c:	10800717 	ldw	r2,28(r2)
   82a90:	e0fff917 	ldw	r3,-28(fp)
   82a94:	1885883a 	add	r2,r3,r2
   82a98:	10801704 	addi	r2,r2,92
   82a9c:	00c00444 	movi	r3,17
   82aa0:	10c00085 	stb	r3,2(r2)
				break;
   82aa4:	00000806 	br	82ac8 <edid_decode_cea+0xf9c>
			case CEA_DBE_AUDIO_HDMI:
				cea->dbe_tags[cea->nr_dbcs] = CEA_DBE_AUDIO_HDMI;
   82aa8:	e0bff917 	ldw	r2,-28(fp)
   82aac:	10800717 	ldw	r2,28(r2)
   82ab0:	e0fff917 	ldw	r3,-28(fp)
   82ab4:	1885883a 	add	r2,r3,r2
   82ab8:	10801704 	addi	r2,r2,92
   82abc:	00c00484 	movi	r3,18
   82ac0:	10c00085 	stb	r3,2(r2)
				break;
   82ac4:	0001883a 	nop
			}

			cea->dbc_tags[cea->nr_dbcs++] = CEA_DB_EXTENDED;
   82ac8:	e0bff917 	ldw	r2,-28(fp)
   82acc:	10800717 	ldw	r2,28(r2)
   82ad0:	e0fff917 	ldw	r3,-28(fp)
   82ad4:	1887883a 	add	r3,r3,r2
   82ad8:	18c00804 	addi	r3,r3,32
   82adc:	010001c4 	movi	r4,7
   82ae0:	19000005 	stb	r4,0(r3)
   82ae4:	10c00044 	addi	r3,r2,1
   82ae8:	e0bff917 	ldw	r2,-28(fp)
   82aec:	10c00715 	stw	r3,28(r2)

			c += (*c & 0x1f) + 1;
   82af0:	e0bff117 	ldw	r2,-60(fp)
   82af4:	10800003 	ldbu	r2,0(r2)
   82af8:	10803fcc 	andi	r2,r2,255
   82afc:	108007cc 	andi	r2,r2,31
   82b00:	10800044 	addi	r2,r2,1
   82b04:	e0fff117 	ldw	r3,-60(fp)
   82b08:	1885883a 	add	r2,r3,r2
   82b0c:	e0bff115 	stw	r2,-60(fp)
			break;
   82b10:	00000306 	br	82b20 <edid_decode_cea+0xff4>

		default:
			c = dtd;
   82b14:	e0bff317 	ldw	r2,-52(fp)
   82b18:	e0bff115 	stw	r2,-60(fp)
			break;
   82b1c:	0001883a 	nop

	// data block collection
	c = &ext_bin[4];

	cea->nr_dbcs = 0;
	while (c < dtd) {
   82b20:	e0fff117 	ldw	r3,-60(fp)
   82b24:	e0bff317 	ldw	r2,-52(fp)
   82b28:	18bc6e36 	bltu	r3,r2,81ce4 <edid_decode_cea+0x1b8>
			break;
		}
	}

	// detail timing descriptor
	if (dtd == 0)
   82b2c:	e0bff317 	ldw	r2,-52(fp)
   82b30:	1000021e 	bne	r2,zero,82b3c <edid_decode_cea+0x1010>
		return 0;
   82b34:	0005883a 	mov	r2,zero
   82b38:	00022406 	br	833cc <edid_decode_cea+0x18a0>

	for (i = 0; i < (int)cea->nr_dtd; ++i) {
   82b3c:	e03ff415 	stw	zero,-48(fp)
   82b40:	00021d06 	br	833b8 <edid_decode_cea+0x188c>
		c = &dtd[18 * i];
   82b44:	e0bff417 	ldw	r2,-48(fp)
   82b48:	108004a4 	muli	r2,r2,18
   82b4c:	e0fff317 	ldw	r3,-52(fp)
   82b50:	1885883a 	add	r2,r3,r2
   82b54:	e0bff115 	stw	r2,-60(fp)

        cea->detailed_timing[i].pixel_clock = (((int)c[1] << 8) | (int)c[0]) * 10000;
   82b58:	e0bff117 	ldw	r2,-60(fp)
   82b5c:	10800044 	addi	r2,r2,1
   82b60:	10800003 	ldbu	r2,0(r2)
   82b64:	10803fcc 	andi	r2,r2,255
   82b68:	1006923a 	slli	r3,r2,8
   82b6c:	e0bff117 	ldw	r2,-60(fp)
   82b70:	10800003 	ldbu	r2,0(r2)
   82b74:	10803fcc 	andi	r2,r2,255
   82b78:	1884b03a 	or	r2,r3,r2
   82b7c:	10c9c424 	muli	r3,r2,10000
   82b80:	e13ff917 	ldw	r4,-28(fp)
   82b84:	e0bff417 	ldw	r2,-48(fp)
   82b88:	100491ba 	slli	r2,r2,6
   82b8c:	2085883a 	add	r2,r4,r2
   82b90:	1080ee04 	addi	r2,r2,952
   82b94:	10c00015 	stw	r3,0(r2)
        cea->detailed_timing[i].width = (((int)c[4] << 4) & 0xf00) | (int)c[2];
   82b98:	e0bff117 	ldw	r2,-60(fp)
   82b9c:	10800104 	addi	r2,r2,4
   82ba0:	10800003 	ldbu	r2,0(r2)
   82ba4:	10803fcc 	andi	r2,r2,255
   82ba8:	1004913a 	slli	r2,r2,4
   82bac:	10c3c00c 	andi	r3,r2,3840
   82bb0:	e0bff117 	ldw	r2,-60(fp)
   82bb4:	10800084 	addi	r2,r2,2
   82bb8:	10800003 	ldbu	r2,0(r2)
   82bbc:	10803fcc 	andi	r2,r2,255
   82bc0:	1886b03a 	or	r3,r3,r2
   82bc4:	e13ff917 	ldw	r4,-28(fp)
   82bc8:	e0bff417 	ldw	r2,-48(fp)
   82bcc:	100491ba 	slli	r2,r2,6
   82bd0:	2085883a 	add	r2,r4,r2
   82bd4:	1080ef04 	addi	r2,r2,956
   82bd8:	10c00015 	stw	r3,0(r2)
        cea->detailed_timing[i].height = (((int)c[7] << 4) & 0xf00) | (int)c[5];
   82bdc:	e0bff117 	ldw	r2,-60(fp)
   82be0:	108001c4 	addi	r2,r2,7
   82be4:	10800003 	ldbu	r2,0(r2)
   82be8:	10803fcc 	andi	r2,r2,255
   82bec:	1004913a 	slli	r2,r2,4
   82bf0:	10c3c00c 	andi	r3,r2,3840
   82bf4:	e0bff117 	ldw	r2,-60(fp)
   82bf8:	10800144 	addi	r2,r2,5
   82bfc:	10800003 	ldbu	r2,0(r2)
   82c00:	10803fcc 	andi	r2,r2,255
   82c04:	1886b03a 	or	r3,r3,r2
   82c08:	e13ff917 	ldw	r4,-28(fp)
   82c0c:	e0bff417 	ldw	r2,-48(fp)
   82c10:	108003c4 	addi	r2,r2,15
   82c14:	100491ba 	slli	r2,r2,6
   82c18:	2085883a 	add	r2,r4,r2
   82c1c:	10c00015 	stw	r3,0(r2)
        cea->detailed_timing[i].h_blank = (((int)c[4] << 8) & 0xf00) | (int)c[3];
   82c20:	e0bff117 	ldw	r2,-60(fp)
   82c24:	10800104 	addi	r2,r2,4
   82c28:	10800003 	ldbu	r2,0(r2)
   82c2c:	10803fcc 	andi	r2,r2,255
   82c30:	1004923a 	slli	r2,r2,8
   82c34:	10c3c00c 	andi	r3,r2,3840
   82c38:	e0bff117 	ldw	r2,-60(fp)
   82c3c:	108000c4 	addi	r2,r2,3
   82c40:	10800003 	ldbu	r2,0(r2)
   82c44:	10803fcc 	andi	r2,r2,255
   82c48:	1886b03a 	or	r3,r3,r2
   82c4c:	e13ff917 	ldw	r4,-28(fp)
   82c50:	e0bff417 	ldw	r2,-48(fp)
   82c54:	100491ba 	slli	r2,r2,6
   82c58:	2085883a 	add	r2,r4,r2
   82c5c:	1080f104 	addi	r2,r2,964
   82c60:	10c00015 	stw	r3,0(r2)
        cea->detailed_timing[i].v_blank = (((int)c[7] << 8) & 0xf00) | (int)c[6];
   82c64:	e0bff117 	ldw	r2,-60(fp)
   82c68:	108001c4 	addi	r2,r2,7
   82c6c:	10800003 	ldbu	r2,0(r2)
   82c70:	10803fcc 	andi	r2,r2,255
   82c74:	1004923a 	slli	r2,r2,8
   82c78:	10c3c00c 	andi	r3,r2,3840
   82c7c:	e0bff117 	ldw	r2,-60(fp)
   82c80:	10800184 	addi	r2,r2,6
   82c84:	10800003 	ldbu	r2,0(r2)
   82c88:	10803fcc 	andi	r2,r2,255
   82c8c:	1886b03a 	or	r3,r3,r2
   82c90:	e13ff917 	ldw	r4,-28(fp)
   82c94:	e0bff417 	ldw	r2,-48(fp)
   82c98:	100491ba 	slli	r2,r2,6
   82c9c:	2085883a 	add	r2,r4,r2
   82ca0:	1080f204 	addi	r2,r2,968
   82ca4:	10c00015 	stw	r3,0(r2)
        cea->detailed_timing[i].h_fp = (((int)c[11] << 2) & 0x300) | (int)c[8];
   82ca8:	e0bff117 	ldw	r2,-60(fp)
   82cac:	108002c4 	addi	r2,r2,11
   82cb0:	10800003 	ldbu	r2,0(r2)
   82cb4:	10803fcc 	andi	r2,r2,255
   82cb8:	1085883a 	add	r2,r2,r2
   82cbc:	1085883a 	add	r2,r2,r2
   82cc0:	10c0c00c 	andi	r3,r2,768
   82cc4:	e0bff117 	ldw	r2,-60(fp)
   82cc8:	10800204 	addi	r2,r2,8
   82ccc:	10800003 	ldbu	r2,0(r2)
   82cd0:	10803fcc 	andi	r2,r2,255
   82cd4:	1886b03a 	or	r3,r3,r2
   82cd8:	e13ff917 	ldw	r4,-28(fp)
   82cdc:	e0bff417 	ldw	r2,-48(fp)
   82ce0:	100491ba 	slli	r2,r2,6
   82ce4:	2085883a 	add	r2,r4,r2
   82ce8:	1080f304 	addi	r2,r2,972
   82cec:	10c00015 	stw	r3,0(r2)
        cea->detailed_timing[i].v_fp = (((int)c[11] << 2) & 0x30) | ((int)c[10] >> 4);
   82cf0:	e0bff117 	ldw	r2,-60(fp)
   82cf4:	108002c4 	addi	r2,r2,11
   82cf8:	10800003 	ldbu	r2,0(r2)
   82cfc:	10803fcc 	andi	r2,r2,255
   82d00:	1085883a 	add	r2,r2,r2
   82d04:	1085883a 	add	r2,r2,r2
   82d08:	10c00c0c 	andi	r3,r2,48
   82d0c:	e0bff117 	ldw	r2,-60(fp)
   82d10:	10800284 	addi	r2,r2,10
   82d14:	10800003 	ldbu	r2,0(r2)
   82d18:	10803fcc 	andi	r2,r2,255
   82d1c:	1004d13a 	srli	r2,r2,4
   82d20:	10803fcc 	andi	r2,r2,255
   82d24:	1886b03a 	or	r3,r3,r2
   82d28:	e13ff917 	ldw	r4,-28(fp)
   82d2c:	e0bff417 	ldw	r2,-48(fp)
   82d30:	100491ba 	slli	r2,r2,6
   82d34:	2085883a 	add	r2,r4,r2
   82d38:	1080f404 	addi	r2,r2,976
   82d3c:	10c00015 	stw	r3,0(r2)
        cea->detailed_timing[i].h_sync = (((int)c[11] << 4) & 0x300) | (int)c[9];
   82d40:	e0bff117 	ldw	r2,-60(fp)
   82d44:	108002c4 	addi	r2,r2,11
   82d48:	10800003 	ldbu	r2,0(r2)
   82d4c:	10803fcc 	andi	r2,r2,255
   82d50:	1004913a 	slli	r2,r2,4
   82d54:	10c0c00c 	andi	r3,r2,768
   82d58:	e0bff117 	ldw	r2,-60(fp)
   82d5c:	10800244 	addi	r2,r2,9
   82d60:	10800003 	ldbu	r2,0(r2)
   82d64:	10803fcc 	andi	r2,r2,255
   82d68:	1886b03a 	or	r3,r3,r2
   82d6c:	e13ff917 	ldw	r4,-28(fp)
   82d70:	e0bff417 	ldw	r2,-48(fp)
   82d74:	100491ba 	slli	r2,r2,6
   82d78:	2085883a 	add	r2,r4,r2
   82d7c:	1080f504 	addi	r2,r2,980
   82d80:	10c00015 	stw	r3,0(r2)
        cea->detailed_timing[i].v_sync = (((int)c[11] << 4) & 0x30) | ((int)c[10] & 0x0f);
   82d84:	e0bff117 	ldw	r2,-60(fp)
   82d88:	108002c4 	addi	r2,r2,11
   82d8c:	10800003 	ldbu	r2,0(r2)
   82d90:	10803fcc 	andi	r2,r2,255
   82d94:	1004913a 	slli	r2,r2,4
   82d98:	10c00c0c 	andi	r3,r2,48
   82d9c:	e0bff117 	ldw	r2,-60(fp)
   82da0:	10800284 	addi	r2,r2,10
   82da4:	10800003 	ldbu	r2,0(r2)
   82da8:	10803fcc 	andi	r2,r2,255
   82dac:	108003cc 	andi	r2,r2,15
   82db0:	1886b03a 	or	r3,r3,r2
   82db4:	e13ff917 	ldw	r4,-28(fp)
   82db8:	e0bff417 	ldw	r2,-48(fp)
   82dbc:	100491ba 	slli	r2,r2,6
   82dc0:	2085883a 	add	r2,r4,r2
   82dc4:	1080f604 	addi	r2,r2,984
   82dc8:	10c00015 	stw	r3,0(r2)
        cea->detailed_timing[i].h_size = (((int)c[14] << 4) & 0xf00) | (int)c[12];
   82dcc:	e0bff117 	ldw	r2,-60(fp)
   82dd0:	10800384 	addi	r2,r2,14
   82dd4:	10800003 	ldbu	r2,0(r2)
   82dd8:	10803fcc 	andi	r2,r2,255
   82ddc:	1004913a 	slli	r2,r2,4
   82de0:	10c3c00c 	andi	r3,r2,3840
   82de4:	e0bff117 	ldw	r2,-60(fp)
   82de8:	10800304 	addi	r2,r2,12
   82dec:	10800003 	ldbu	r2,0(r2)
   82df0:	10803fcc 	andi	r2,r2,255
   82df4:	1886b03a 	or	r3,r3,r2
   82df8:	e13ff917 	ldw	r4,-28(fp)
   82dfc:	e0bff417 	ldw	r2,-48(fp)
   82e00:	100491ba 	slli	r2,r2,6
   82e04:	2085883a 	add	r2,r4,r2
   82e08:	1080f704 	addi	r2,r2,988
   82e0c:	10c00015 	stw	r3,0(r2)
        cea->detailed_timing[i].v_size = (((int)c[14] << 8) & 0xf00) | (int)c[13];
   82e10:	e0bff117 	ldw	r2,-60(fp)
   82e14:	10800384 	addi	r2,r2,14
   82e18:	10800003 	ldbu	r2,0(r2)
   82e1c:	10803fcc 	andi	r2,r2,255
   82e20:	1004923a 	slli	r2,r2,8
   82e24:	10c3c00c 	andi	r3,r2,3840
   82e28:	e0bff117 	ldw	r2,-60(fp)
   82e2c:	10800344 	addi	r2,r2,13
   82e30:	10800003 	ldbu	r2,0(r2)
   82e34:	10803fcc 	andi	r2,r2,255
   82e38:	1886b03a 	or	r3,r3,r2
   82e3c:	e13ff917 	ldw	r4,-28(fp)
   82e40:	e0bff417 	ldw	r2,-48(fp)
   82e44:	100491ba 	slli	r2,r2,6
   82e48:	2085883a 	add	r2,r4,r2
   82e4c:	1080f804 	addi	r2,r2,992
   82e50:	10c00015 	stw	r3,0(r2)
        cea->detailed_timing[i].border_lr = (int)c[15];
   82e54:	e0bff117 	ldw	r2,-60(fp)
   82e58:	108003c4 	addi	r2,r2,15
   82e5c:	10800003 	ldbu	r2,0(r2)
   82e60:	10c03fcc 	andi	r3,r2,255
   82e64:	e13ff917 	ldw	r4,-28(fp)
   82e68:	e0bff417 	ldw	r2,-48(fp)
   82e6c:	100491ba 	slli	r2,r2,6
   82e70:	2085883a 	add	r2,r4,r2
   82e74:	1080f904 	addi	r2,r2,996
   82e78:	10c00015 	stw	r3,0(r2)
        cea->detailed_timing[i].border_tb = (int)c[16];
   82e7c:	e0bff117 	ldw	r2,-60(fp)
   82e80:	10800404 	addi	r2,r2,16
   82e84:	10800003 	ldbu	r2,0(r2)
   82e88:	10c03fcc 	andi	r3,r2,255
   82e8c:	e13ff917 	ldw	r4,-28(fp)
   82e90:	e0bff417 	ldw	r2,-48(fp)
   82e94:	100491ba 	slli	r2,r2,6
   82e98:	2085883a 	add	r2,r4,r2
   82e9c:	1080fa04 	addi	r2,r2,1000
   82ea0:	10c00015 	stw	r3,0(r2)

        cea->detailed_timing[i].interlaced = (c[17] & 0x80) ? 1 : 0;
   82ea4:	e0bff117 	ldw	r2,-60(fp)
   82ea8:	10800444 	addi	r2,r2,17
   82eac:	10800003 	ldbu	r2,0(r2)
   82eb0:	10803fcc 	andi	r2,r2,255
   82eb4:	1004d1fa 	srli	r2,r2,7
   82eb8:	10c03fcc 	andi	r3,r2,255
   82ebc:	e13ff917 	ldw	r4,-28(fp)
   82ec0:	e0bff417 	ldw	r2,-48(fp)
   82ec4:	100491ba 	slli	r2,r2,6
   82ec8:	2085883a 	add	r2,r4,r2
   82ecc:	1080fb04 	addi	r2,r2,1004
   82ed0:	10c00015 	stw	r3,0(r2)

        cea->detailed_timing[i].stereo = STEREO_NONE;
   82ed4:	e0fff917 	ldw	r3,-28(fp)
   82ed8:	e0bff417 	ldw	r2,-48(fp)
   82edc:	100491ba 	slli	r2,r2,6
   82ee0:	1885883a 	add	r2,r3,r2
   82ee4:	1080fc04 	addi	r2,r2,1008
   82ee8:	10000015 	stw	zero,0(r2)
		if ((c[17] & 0x61) == 0x20)
   82eec:	e0bff117 	ldw	r2,-60(fp)
   82ef0:	10800444 	addi	r2,r2,17
   82ef4:	10800003 	ldbu	r2,0(r2)
   82ef8:	10803fcc 	andi	r2,r2,255
   82efc:	1080184c 	andi	r2,r2,97
   82f00:	10800818 	cmpnei	r2,r2,32
   82f04:	10000d1e 	bne	r2,zero,82f3c <edid_decode_cea+0x1410>
			cea->detailed_timing[i].stereo |= STEREO_FIELD_SEQUENTIAL_RIGHT_SYNC;
   82f08:	e0fff917 	ldw	r3,-28(fp)
   82f0c:	e0bff417 	ldw	r2,-48(fp)
   82f10:	100491ba 	slli	r2,r2,6
   82f14:	1885883a 	add	r2,r3,r2
   82f18:	1080fc04 	addi	r2,r2,1008
   82f1c:	10800017 	ldw	r2,0(r2)
   82f20:	10c00094 	ori	r3,r2,2
   82f24:	e13ff917 	ldw	r4,-28(fp)
   82f28:	e0bff417 	ldw	r2,-48(fp)
   82f2c:	100491ba 	slli	r2,r2,6
   82f30:	2085883a 	add	r2,r4,r2
   82f34:	1080fc04 	addi	r2,r2,1008
   82f38:	10c00015 	stw	r3,0(r2)
		if ((c[17] & 0x61) == 0x40)
   82f3c:	e0bff117 	ldw	r2,-60(fp)
   82f40:	10800444 	addi	r2,r2,17
   82f44:	10800003 	ldbu	r2,0(r2)
   82f48:	10803fcc 	andi	r2,r2,255
   82f4c:	1080184c 	andi	r2,r2,97
   82f50:	10801018 	cmpnei	r2,r2,64
   82f54:	10000d1e 	bne	r2,zero,82f8c <edid_decode_cea+0x1460>
			cea->detailed_timing[i].stereo |= STEREO_FIELD_SEQUENTIAL_LEFT_SYNC;
   82f58:	e0fff917 	ldw	r3,-28(fp)
   82f5c:	e0bff417 	ldw	r2,-48(fp)
   82f60:	100491ba 	slli	r2,r2,6
   82f64:	1885883a 	add	r2,r3,r2
   82f68:	1080fc04 	addi	r2,r2,1008
   82f6c:	10800017 	ldw	r2,0(r2)
   82f70:	10c00114 	ori	r3,r2,4
   82f74:	e13ff917 	ldw	r4,-28(fp)
   82f78:	e0bff417 	ldw	r2,-48(fp)
   82f7c:	100491ba 	slli	r2,r2,6
   82f80:	2085883a 	add	r2,r4,r2
   82f84:	1080fc04 	addi	r2,r2,1008
   82f88:	10c00015 	stw	r3,0(r2)
		if ((c[17] & 0x61) == 0x21)
   82f8c:	e0bff117 	ldw	r2,-60(fp)
   82f90:	10800444 	addi	r2,r2,17
   82f94:	10800003 	ldbu	r2,0(r2)
   82f98:	10803fcc 	andi	r2,r2,255
   82f9c:	1080184c 	andi	r2,r2,97
   82fa0:	10800858 	cmpnei	r2,r2,33
   82fa4:	10000d1e 	bne	r2,zero,82fdc <edid_decode_cea+0x14b0>
			cea->detailed_timing[i].stereo |= STEREO_2WAY_INTERLEAVE_RIGHT_EVEN;
   82fa8:	e0fff917 	ldw	r3,-28(fp)
   82fac:	e0bff417 	ldw	r2,-48(fp)
   82fb0:	100491ba 	slli	r2,r2,6
   82fb4:	1885883a 	add	r2,r3,r2
   82fb8:	1080fc04 	addi	r2,r2,1008
   82fbc:	10800017 	ldw	r2,0(r2)
   82fc0:	10c00214 	ori	r3,r2,8
   82fc4:	e13ff917 	ldw	r4,-28(fp)
   82fc8:	e0bff417 	ldw	r2,-48(fp)
   82fcc:	100491ba 	slli	r2,r2,6
   82fd0:	2085883a 	add	r2,r4,r2
   82fd4:	1080fc04 	addi	r2,r2,1008
   82fd8:	10c00015 	stw	r3,0(r2)
		if ((c[17] & 0x61) == 0x41)
   82fdc:	e0bff117 	ldw	r2,-60(fp)
   82fe0:	10800444 	addi	r2,r2,17
   82fe4:	10800003 	ldbu	r2,0(r2)
   82fe8:	10803fcc 	andi	r2,r2,255
   82fec:	1080184c 	andi	r2,r2,97
   82ff0:	10801058 	cmpnei	r2,r2,65
   82ff4:	10000d1e 	bne	r2,zero,8302c <edid_decode_cea+0x1500>
			cea->detailed_timing[i].stereo |= STEREO_2WAY_INTERLEAVE_LEFT_EVEN;
   82ff8:	e0fff917 	ldw	r3,-28(fp)
   82ffc:	e0bff417 	ldw	r2,-48(fp)
   83000:	100491ba 	slli	r2,r2,6
   83004:	1885883a 	add	r2,r3,r2
   83008:	1080fc04 	addi	r2,r2,1008
   8300c:	10800017 	ldw	r2,0(r2)
   83010:	10c00414 	ori	r3,r2,16
   83014:	e13ff917 	ldw	r4,-28(fp)
   83018:	e0bff417 	ldw	r2,-48(fp)
   8301c:	100491ba 	slli	r2,r2,6
   83020:	2085883a 	add	r2,r4,r2
   83024:	1080fc04 	addi	r2,r2,1008
   83028:	10c00015 	stw	r3,0(r2)
		if ((c[17] & 0x61) == 0x60)
   8302c:	e0bff117 	ldw	r2,-60(fp)
   83030:	10800444 	addi	r2,r2,17
   83034:	10800003 	ldbu	r2,0(r2)
   83038:	10803fcc 	andi	r2,r2,255
   8303c:	1080184c 	andi	r2,r2,97
   83040:	10801818 	cmpnei	r2,r2,96
   83044:	10000d1e 	bne	r2,zero,8307c <edid_decode_cea+0x1550>
			cea->detailed_timing[i].stereo |= STEREO_4WAY_INTERLEAVE;
   83048:	e0fff917 	ldw	r3,-28(fp)
   8304c:	e0bff417 	ldw	r2,-48(fp)
   83050:	100491ba 	slli	r2,r2,6
   83054:	1885883a 	add	r2,r3,r2
   83058:	1080fc04 	addi	r2,r2,1008
   8305c:	10800017 	ldw	r2,0(r2)
   83060:	10c00814 	ori	r3,r2,32
   83064:	e13ff917 	ldw	r4,-28(fp)
   83068:	e0bff417 	ldw	r2,-48(fp)
   8306c:	100491ba 	slli	r2,r2,6
   83070:	2085883a 	add	r2,r4,r2
   83074:	1080fc04 	addi	r2,r2,1008
   83078:	10c00015 	stw	r3,0(r2)
		if ((c[17] & 0x61) == 0x61)
   8307c:	e0bff117 	ldw	r2,-60(fp)
   83080:	10800444 	addi	r2,r2,17
   83084:	10800003 	ldbu	r2,0(r2)
   83088:	10803fcc 	andi	r2,r2,255
   8308c:	1080184c 	andi	r2,r2,97
   83090:	10801858 	cmpnei	r2,r2,97
   83094:	10000d1e 	bne	r2,zero,830cc <edid_decode_cea+0x15a0>
			cea->detailed_timing[i].stereo |= STEREO_SIDE_BY_SIDE_INTERLEAVE;
   83098:	e0fff917 	ldw	r3,-28(fp)
   8309c:	e0bff417 	ldw	r2,-48(fp)
   830a0:	100491ba 	slli	r2,r2,6
   830a4:	1885883a 	add	r2,r3,r2
   830a8:	1080fc04 	addi	r2,r2,1008
   830ac:	10800017 	ldw	r2,0(r2)
   830b0:	10c01014 	ori	r3,r2,64
   830b4:	e13ff917 	ldw	r4,-28(fp)
   830b8:	e0bff417 	ldw	r2,-48(fp)
   830bc:	100491ba 	slli	r2,r2,6
   830c0:	2085883a 	add	r2,r4,r2
   830c4:	1080fc04 	addi	r2,r2,1008
   830c8:	10c00015 	stw	r3,0(r2)

		cea->detailed_timing[i].sync = 0;
   830cc:	e0fff917 	ldw	r3,-28(fp)
   830d0:	e0bff417 	ldw	r2,-48(fp)
   830d4:	100491ba 	slli	r2,r2,6
   830d8:	1885883a 	add	r2,r3,r2
   830dc:	1080fd04 	addi	r2,r2,1012
   830e0:	10000015 	stw	zero,0(r2)
        if (c[17] & 0x10) {
   830e4:	e0bff117 	ldw	r2,-60(fp)
   830e8:	10800444 	addi	r2,r2,17
   830ec:	10800003 	ldbu	r2,0(r2)
   830f0:	10803fcc 	andi	r2,r2,255
   830f4:	1080040c 	andi	r2,r2,16
   830f8:	10005626 	beq	r2,zero,83254 <edid_decode_cea+0x1728>
            if (c[17] & 0x08) {
   830fc:	e0bff117 	ldw	r2,-60(fp)
   83100:	10800444 	addi	r2,r2,17
   83104:	10800003 	ldbu	r2,0(r2)
   83108:	10803fcc 	andi	r2,r2,255
   8310c:	1080020c 	andi	r2,r2,8
   83110:	10002f26 	beq	r2,zero,831d0 <edid_decode_cea+0x16a4>
            	cea->detailed_timing[i].sync |= D_SEPERATE_SYNC;
   83114:	e0fff917 	ldw	r3,-28(fp)
   83118:	e0bff417 	ldw	r2,-48(fp)
   8311c:	100491ba 	slli	r2,r2,6
   83120:	1885883a 	add	r2,r3,r2
   83124:	1080fd04 	addi	r2,r2,1012
   83128:	10800017 	ldw	r2,0(r2)
   8312c:	10c02014 	ori	r3,r2,128
   83130:	e13ff917 	ldw	r4,-28(fp)
   83134:	e0bff417 	ldw	r2,-48(fp)
   83138:	100491ba 	slli	r2,r2,6
   8313c:	2085883a 	add	r2,r4,r2
   83140:	1080fd04 	addi	r2,r2,1012
   83144:	10c00015 	stw	r3,0(r2)
            	if (c[17] & 0x04)
   83148:	e0bff117 	ldw	r2,-60(fp)
   8314c:	10800444 	addi	r2,r2,17
   83150:	10800003 	ldbu	r2,0(r2)
   83154:	10803fcc 	andi	r2,r2,255
   83158:	1080010c 	andi	r2,r2,4
   8315c:	10000e26 	beq	r2,zero,83198 <edid_decode_cea+0x166c>
                	cea->detailed_timing[i].sync |= D_SEPERATE_VSYNC_P;
   83160:	e0fff917 	ldw	r3,-28(fp)
   83164:	e0bff417 	ldw	r2,-48(fp)
   83168:	100491ba 	slli	r2,r2,6
   8316c:	1885883a 	add	r2,r3,r2
   83170:	1080fd04 	addi	r2,r2,1012
   83174:	10800017 	ldw	r2,0(r2)
   83178:	10c08014 	ori	r3,r2,512
   8317c:	e13ff917 	ldw	r4,-28(fp)
   83180:	e0bff417 	ldw	r2,-48(fp)
   83184:	100491ba 	slli	r2,r2,6
   83188:	2085883a 	add	r2,r4,r2
   8318c:	1080fd04 	addi	r2,r2,1012
   83190:	10c00015 	stw	r3,0(r2)
   83194:	00008506 	br	833ac <edid_decode_cea+0x1880>
            	else
            		cea->detailed_timing[i].sync |= D_SEPERATE_VSYNC_N;
   83198:	e0fff917 	ldw	r3,-28(fp)
   8319c:	e0bff417 	ldw	r2,-48(fp)
   831a0:	100491ba 	slli	r2,r2,6
   831a4:	1885883a 	add	r2,r3,r2
   831a8:	1080fd04 	addi	r2,r2,1012
   831ac:	10800017 	ldw	r2,0(r2)
   831b0:	10c04014 	ori	r3,r2,256
   831b4:	e13ff917 	ldw	r4,-28(fp)
   831b8:	e0bff417 	ldw	r2,-48(fp)
   831bc:	100491ba 	slli	r2,r2,6
   831c0:	2085883a 	add	r2,r4,r2
   831c4:	1080fd04 	addi	r2,r2,1012
   831c8:	10c00015 	stw	r3,0(r2)
   831cc:	00007706 	br	833ac <edid_decode_cea+0x1880>
            } else {
            	cea->detailed_timing[i].sync |= D_COMPOSITE_SYNC;
   831d0:	e0fff917 	ldw	r3,-28(fp)
   831d4:	e0bff417 	ldw	r2,-48(fp)
   831d8:	100491ba 	slli	r2,r2,6
   831dc:	1885883a 	add	r2,r3,r2
   831e0:	1080fd04 	addi	r2,r2,1012
   831e4:	10800017 	ldw	r2,0(r2)
   831e8:	10c00814 	ori	r3,r2,32
   831ec:	e13ff917 	ldw	r4,-28(fp)
   831f0:	e0bff417 	ldw	r2,-48(fp)
   831f4:	100491ba 	slli	r2,r2,6
   831f8:	2085883a 	add	r2,r4,r2
   831fc:	1080fd04 	addi	r2,r2,1012
   83200:	10c00015 	stw	r3,0(r2)
            	if (c[17] & 0x04)
   83204:	e0bff117 	ldw	r2,-60(fp)
   83208:	10800444 	addi	r2,r2,17
   8320c:	10800003 	ldbu	r2,0(r2)
   83210:	10803fcc 	andi	r2,r2,255
   83214:	1080010c 	andi	r2,r2,4
   83218:	10006426 	beq	r2,zero,833ac <edid_decode_cea+0x1880>
                	cea->detailed_timing[i].sync |= D_COMPOSITE_SERRATION;
   8321c:	e0fff917 	ldw	r3,-28(fp)
   83220:	e0bff417 	ldw	r2,-48(fp)
   83224:	100491ba 	slli	r2,r2,6
   83228:	1885883a 	add	r2,r3,r2
   8322c:	1080fd04 	addi	r2,r2,1012
   83230:	10800017 	ldw	r2,0(r2)
   83234:	10c01014 	ori	r3,r2,64
   83238:	e13ff917 	ldw	r4,-28(fp)
   8323c:	e0bff417 	ldw	r2,-48(fp)
   83240:	100491ba 	slli	r2,r2,6
   83244:	2085883a 	add	r2,r4,r2
   83248:	1080fd04 	addi	r2,r2,1012
   8324c:	10c00015 	stw	r3,0(r2)
   83250:	00005606 	br	833ac <edid_decode_cea+0x1880>
            }
        } else {
        	if (c[17] & 0x80) {
   83254:	e0bff117 	ldw	r2,-60(fp)
   83258:	10800444 	addi	r2,r2,17
   8325c:	10800003 	ldbu	r2,0(r2)
   83260:	10803fcc 	andi	r2,r2,255
   83264:	1080201c 	xori	r2,r2,128
   83268:	10bfe004 	addi	r2,r2,-128
   8326c:	1000420e 	bge	r2,zero,83378 <edid_decode_cea+0x184c>
        		cea->detailed_timing[i].sync |= A_BIPOLAR_COMPOSITE_SYNC;
   83270:	e0fff917 	ldw	r3,-28(fp)
   83274:	e0bff417 	ldw	r2,-48(fp)
   83278:	100491ba 	slli	r2,r2,6
   8327c:	1885883a 	add	r2,r3,r2
   83280:	1080fd04 	addi	r2,r2,1012
   83284:	10800017 	ldw	r2,0(r2)
   83288:	10c00094 	ori	r3,r2,2
   8328c:	e13ff917 	ldw	r4,-28(fp)
   83290:	e0bff417 	ldw	r2,-48(fp)
   83294:	100491ba 	slli	r2,r2,6
   83298:	2085883a 	add	r2,r4,r2
   8329c:	1080fd04 	addi	r2,r2,1012
   832a0:	10c00015 	stw	r3,0(r2)
        		if (c[17] & 0x40) {
   832a4:	e0bff117 	ldw	r2,-60(fp)
   832a8:	10800444 	addi	r2,r2,17
   832ac:	10800003 	ldbu	r2,0(r2)
   832b0:	10803fcc 	andi	r2,r2,255
   832b4:	1080100c 	andi	r2,r2,64
   832b8:	10003c26 	beq	r2,zero,833ac <edid_decode_cea+0x1880>
            		cea->detailed_timing[i].sync |= A_BIPOLAR_SERRATION;
   832bc:	e0fff917 	ldw	r3,-28(fp)
   832c0:	e0bff417 	ldw	r2,-48(fp)
   832c4:	100491ba 	slli	r2,r2,6
   832c8:	1885883a 	add	r2,r3,r2
   832cc:	1080fd04 	addi	r2,r2,1012
   832d0:	10800017 	ldw	r2,0(r2)
   832d4:	10c00114 	ori	r3,r2,4
   832d8:	e13ff917 	ldw	r4,-28(fp)
   832dc:	e0bff417 	ldw	r2,-48(fp)
   832e0:	100491ba 	slli	r2,r2,6
   832e4:	2085883a 	add	r2,r4,r2
   832e8:	1080fd04 	addi	r2,r2,1012
   832ec:	10c00015 	stw	r3,0(r2)
            		if (c[17] & 0x20)
   832f0:	e0bff117 	ldw	r2,-60(fp)
   832f4:	10800444 	addi	r2,r2,17
   832f8:	10800003 	ldbu	r2,0(r2)
   832fc:	10803fcc 	andi	r2,r2,255
   83300:	1080080c 	andi	r2,r2,32
   83304:	10000e26 	beq	r2,zero,83340 <edid_decode_cea+0x1814>
                		cea->detailed_timing[i].sync |= A_BIPOLAR_SERRATION_SYNC_RGB;
   83308:	e0fff917 	ldw	r3,-28(fp)
   8330c:	e0bff417 	ldw	r2,-48(fp)
   83310:	100491ba 	slli	r2,r2,6
   83314:	1885883a 	add	r2,r3,r2
   83318:	1080fd04 	addi	r2,r2,1012
   8331c:	10800017 	ldw	r2,0(r2)
   83320:	10c00414 	ori	r3,r2,16
   83324:	e13ff917 	ldw	r4,-28(fp)
   83328:	e0bff417 	ldw	r2,-48(fp)
   8332c:	100491ba 	slli	r2,r2,6
   83330:	2085883a 	add	r2,r4,r2
   83334:	1080fd04 	addi	r2,r2,1012
   83338:	10c00015 	stw	r3,0(r2)
   8333c:	00001b06 	br	833ac <edid_decode_cea+0x1880>
            		else
                		cea->detailed_timing[i].sync |= A_BIPOLAR_SERRATION_SYNC_G;
   83340:	e0fff917 	ldw	r3,-28(fp)
   83344:	e0bff417 	ldw	r2,-48(fp)
   83348:	100491ba 	slli	r2,r2,6
   8334c:	1885883a 	add	r2,r3,r2
   83350:	1080fd04 	addi	r2,r2,1012
   83354:	10800017 	ldw	r2,0(r2)
   83358:	10c00214 	ori	r3,r2,8
   8335c:	e13ff917 	ldw	r4,-28(fp)
   83360:	e0bff417 	ldw	r2,-48(fp)
   83364:	100491ba 	slli	r2,r2,6
   83368:	2085883a 	add	r2,r4,r2
   8336c:	1080fd04 	addi	r2,r2,1012
   83370:	10c00015 	stw	r3,0(r2)
   83374:	00000d06 	br	833ac <edid_decode_cea+0x1880>
        		}
        	} else {
        		cea->detailed_timing[i].sync |= A_COMPOSITE_SYNC;
   83378:	e0fff917 	ldw	r3,-28(fp)
   8337c:	e0bff417 	ldw	r2,-48(fp)
   83380:	100491ba 	slli	r2,r2,6
   83384:	1885883a 	add	r2,r3,r2
   83388:	1080fd04 	addi	r2,r2,1012
   8338c:	10800017 	ldw	r2,0(r2)
   83390:	10c00054 	ori	r3,r2,1
   83394:	e13ff917 	ldw	r4,-28(fp)
   83398:	e0bff417 	ldw	r2,-48(fp)
   8339c:	100491ba 	slli	r2,r2,6
   833a0:	2085883a 	add	r2,r4,r2
   833a4:	1080fd04 	addi	r2,r2,1012
   833a8:	10c00015 	stw	r3,0(r2)

	// detail timing descriptor
	if (dtd == 0)
		return 0;

	for (i = 0; i < (int)cea->nr_dtd; ++i) {
   833ac:	e0bff417 	ldw	r2,-48(fp)
   833b0:	10800044 	addi	r2,r2,1
   833b4:	e0bff415 	stw	r2,-48(fp)
   833b8:	e0bff917 	ldw	r2,-28(fp)
   833bc:	10800617 	ldw	r2,24(r2)
   833c0:	e0fff417 	ldw	r3,-48(fp)
   833c4:	18bddf16 	blt	r3,r2,82b44 <edid_decode_cea+0x1018>
        		cea->detailed_timing[i].sync |= A_COMPOSITE_SYNC;
        	}
        }
	}

	return 0;
   833c8:	0005883a 	mov	r2,zero
}
   833cc:	e037883a 	mov	sp,fp
   833d0:	dfc00117 	ldw	ra,4(sp)
   833d4:	df000017 	ldw	fp,0(sp)
   833d8:	dec00204 	addi	sp,sp,8
   833dc:	f800283a 	ret

000833e0 <edid_print_cea>:

void edid_print_cea(struct base_edid *edid, int ext_idx)
{
   833e0:	defff204 	addi	sp,sp,-56
   833e4:	dfc00d15 	stw	ra,52(sp)
   833e8:	df000c15 	stw	fp,48(sp)
   833ec:	df000c04 	addi	fp,sp,48
   833f0:	e13ffe15 	stw	r4,-8(fp)
   833f4:	e17fff15 	stw	r5,-4(fp)
   833f8:	d83bb615 	stw	zero,-4392(sp)
	u8 *c, *dtd = 0;
   833fc:	e03ffa15 	stw	zero,-24(fp)
	int i, t;

	struct ext_data *ext_data = &edid->ext_data[ext_idx];
   83400:	e0bfff17 	ldw	r2,-4(fp)
   83404:	10816f24 	muli	r2,r2,1468
   83408:	10860b04 	addi	r2,r2,6188
   8340c:	e0fffe17 	ldw	r3,-8(fp)
   83410:	1885883a 	add	r2,r3,r2
   83414:	e0bffb15 	stw	r2,-20(fp)
	struct edid_cea *cea = &ext_data->cea_ext;
   83418:	e0bffb17 	ldw	r2,-20(fp)
   8341c:	10800104 	addi	r2,r2,4
   83420:	e0bffc15 	stw	r2,-16(fp)

	printf("\n[%02d] extension block -- CEA-Extension Revision-%02d ...\n\n", ext_idx, cea->rev);
   83424:	e0bffc17 	ldw	r2,-16(fp)
   83428:	10800017 	ldw	r2,0(r2)
   8342c:	010002b4 	movhi	r4,10
   83430:	21279d04 	addi	r4,r4,-24972
   83434:	e17fff17 	ldw	r5,-4(fp)
   83438:	100d883a 	mov	r6,r2
   8343c:	008e5840 	call	8e584 <printf>

	printf("  number of DBCs (data block collections)      : %d\n", cea->nr_dbcs);
   83440:	e0bffc17 	ldw	r2,-16(fp)
   83444:	10800717 	ldw	r2,28(r2)
   83448:	010002b4 	movhi	r4,10
   8344c:	2127ad04 	addi	r4,r4,-24908
   83450:	100b883a 	mov	r5,r2
   83454:	008e5840 	call	8e584 <printf>
	printf("  number of DTDs (detailed timing descriptors) : %d\n", cea->nr_dtd);
   83458:	e0bffc17 	ldw	r2,-16(fp)
   8345c:	10800617 	ldw	r2,24(r2)
   83460:	010002b4 	movhi	r4,10
   83464:	2127bb04 	addi	r4,r4,-24852
   83468:	100b883a 	mov	r5,r2
   8346c:	008e5840 	call	8e584 <printf>
	printf("  offset to DTD                                : %d\n", cea->off_dtd);
   83470:	e0bffc17 	ldw	r2,-16(fp)
   83474:	10800517 	ldw	r2,20(r2)
   83478:	010002b4 	movhi	r4,10
   8347c:	2127c904 	addi	r4,r4,-24796
   83480:	100b883a 	mov	r5,r2
   83484:	008e5840 	call	8e584 <printf>
	printf("  monitor underscans IT formats                : %s\n", cea->flags.underscan ? "yes" : "no");
   83488:	e0bffc17 	ldw	r2,-16(fp)
   8348c:	10800117 	ldw	r2,4(r2)
   83490:	10000326 	beq	r2,zero,834a0 <edid_print_cea+0xc0>
   83494:	008002b4 	movhi	r2,10
   83498:	10a7d704 	addi	r2,r2,-24740
   8349c:	00000206 	br	834a8 <edid_print_cea+0xc8>
   834a0:	008002b4 	movhi	r2,10
   834a4:	10a7d804 	addi	r2,r2,-24736
   834a8:	010002b4 	movhi	r4,10
   834ac:	2127d904 	addi	r4,r4,-24732
   834b0:	100b883a 	mov	r5,r2
   834b4:	008e5840 	call	8e584 <printf>
	printf("  supports audio                               : %s\n", cea->flags.audio ? "yes" : "no");
   834b8:	e0bffc17 	ldw	r2,-16(fp)
   834bc:	10800217 	ldw	r2,8(r2)
   834c0:	10000326 	beq	r2,zero,834d0 <edid_print_cea+0xf0>
   834c4:	008002b4 	movhi	r2,10
   834c8:	10a7d704 	addi	r2,r2,-24740
   834cc:	00000206 	br	834d8 <edid_print_cea+0xf8>
   834d0:	008002b4 	movhi	r2,10
   834d4:	10a7d804 	addi	r2,r2,-24736
   834d8:	010002b4 	movhi	r4,10
   834dc:	2127e704 	addi	r4,r4,-24676
   834e0:	100b883a 	mov	r5,r2
   834e4:	008e5840 	call	8e584 <printf>
	printf("  supports YCbCr 4:4:4 in addition to RGB      : %s\n", cea->flags.ycbcr444 ? "yes" : "no");
   834e8:	e0bffc17 	ldw	r2,-16(fp)
   834ec:	10800317 	ldw	r2,12(r2)
   834f0:	10000326 	beq	r2,zero,83500 <edid_print_cea+0x120>
   834f4:	008002b4 	movhi	r2,10
   834f8:	10a7d704 	addi	r2,r2,-24740
   834fc:	00000206 	br	83508 <edid_print_cea+0x128>
   83500:	008002b4 	movhi	r2,10
   83504:	10a7d804 	addi	r2,r2,-24736
   83508:	010002b4 	movhi	r4,10
   8350c:	2127f504 	addi	r4,r4,-24620
   83510:	100b883a 	mov	r5,r2
   83514:	008e5840 	call	8e584 <printf>
	printf("  supports YCbCr 4:2:2 in addition to RGB      : %s\n", cea->flags.ycbcr422 ? "yes" : "no");
   83518:	e0bffc17 	ldw	r2,-16(fp)
   8351c:	10800417 	ldw	r2,16(r2)
   83520:	10000326 	beq	r2,zero,83530 <edid_print_cea+0x150>
   83524:	008002b4 	movhi	r2,10
   83528:	10a7d704 	addi	r2,r2,-24740
   8352c:	00000206 	br	83538 <edid_print_cea+0x158>
   83530:	008002b4 	movhi	r2,10
   83534:	10a7d804 	addi	r2,r2,-24736
   83538:	010002b4 	movhi	r4,10
   8353c:	21280304 	addi	r4,r4,-24564
   83540:	100b883a 	mov	r5,r2
   83544:	008e5840 	call	8e584 <printf>

	printf("\n  data block collections\n  ---------------------------------\n");
   83548:	010002b4 	movhi	r4,10
   8354c:	21281104 	addi	r4,r4,-24508
   83550:	008e6680 	call	8e668 <puts>

	// data block collection
	for (t = 0; t < cea->nr_dbcs; ++t) {
   83554:	e03ff915 	stw	zero,-28(fp)
   83558:	00040406 	br	8456c <edid_print_cea+0x118c>

		switch (cea->dbc_tags[t]) {
   8355c:	e0fffc17 	ldw	r3,-16(fp)
   83560:	e0bff917 	ldw	r2,-28(fp)
   83564:	1885883a 	add	r2,r3,r2
   83568:	10800804 	addi	r2,r2,32
   8356c:	10800003 	ldbu	r2,0(r2)
   83570:	10803fcc 	andi	r2,r2,255
   83574:	10c00228 	cmpgeui	r3,r2,8
   83578:	1803ea1e 	bne	r3,zero,84524 <edid_print_cea+0x1144>
   8357c:	1085883a 	add	r2,r2,r2
   83580:	1087883a 	add	r3,r2,r2
   83584:	00800234 	movhi	r2,8
   83588:	108d6604 	addi	r2,r2,13720
   8358c:	1885883a 	add	r2,r3,r2
   83590:	10800017 	ldw	r2,0(r2)
   83594:	1000683a 	jmp	r2
   83598:	00084524 	muli	zero,zero,8468
   8359c:	000835b8 	rdprs	zero,zero,8406
   835a0:	00083878 	rdprs	zero,zero,8417
   835a4:	000839ec 	andhi	zero,zero,8423
   835a8:	0008408c 	andi	zero,zero,8450
   835ac:	0008420c 	andi	zero,zero,8456
   835b0:	00084524 	muli	zero,zero,8468
   835b4:	00084220 	cmpeqi	zero,zero,8456
		case CEA_DB_AUDIO:
			printf("\n  [%02d] audio data block ...\n", t);
   835b8:	010002b4 	movhi	r4,10
   835bc:	21282104 	addi	r4,r4,-24444
   835c0:	e17ff917 	ldw	r5,-28(fp)
   835c4:	008e5840 	call	8e584 <printf>
			printf("       number of SADs (short audio descriptor) : %d\n", cea->db_audio.nr_sad);
   835c8:	e0bffc17 	ldw	r2,-16(fp)
   835cc:	10806817 	ldw	r2,416(r2)
   835d0:	010002b4 	movhi	r4,10
   835d4:	21282904 	addi	r4,r4,-24412
   835d8:	100b883a 	mov	r5,r2
   835dc:	008e5840 	call	8e584 <printf>

			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
   835e0:	e03ff815 	stw	zero,-32(fp)
   835e4:	00009f06 	br	83864 <edid_print_cea+0x484>
					"DST",
					"WMA Pro",
					"unknown (15)",
				};

				printf("       %02d) format      : %s\n", i, sad_format[cea->db_audio.sad[i].format]);
   835e8:	e0fffc17 	ldw	r3,-16(fp)
   835ec:	e0bff817 	ldw	r2,-32(fp)
   835f0:	10800524 	muli	r2,r2,20
   835f4:	1885883a 	add	r2,r3,r2
   835f8:	10806904 	addi	r2,r2,420
   835fc:	10800017 	ldw	r2,0(r2)
   83600:	00c002b4 	movhi	r3,10
   83604:	18f61304 	addi	r3,r3,-10164
   83608:	1085883a 	add	r2,r2,r2
   8360c:	1085883a 	add	r2,r2,r2
   83610:	1885883a 	add	r2,r3,r2
   83614:	10800017 	ldw	r2,0(r2)
   83618:	010002b4 	movhi	r4,10
   8361c:	21283704 	addi	r4,r4,-24356
   83620:	e17ff817 	ldw	r5,-32(fp)
   83624:	100d883a 	mov	r6,r2
   83628:	008e5840 	call	8e584 <printf>
				printf("           channels    : %d\n", cea->db_audio.sad[i].channels);
   8362c:	e0fffc17 	ldw	r3,-16(fp)
   83630:	e0bff817 	ldw	r2,-32(fp)
   83634:	10800524 	muli	r2,r2,20
   83638:	1885883a 	add	r2,r3,r2
   8363c:	10806a04 	addi	r2,r2,424
   83640:	10800017 	ldw	r2,0(r2)
   83644:	010002b4 	movhi	r4,10
   83648:	21283f04 	addi	r4,r4,-24324
   8364c:	100b883a 	mov	r5,r2
   83650:	008e5840 	call	8e584 <printf>
				printf("           frequency   : 192K)%d 176.4k)%d 96k)%d 88.2k)%d 48k)%d 44.1k)%d 32k)%d\n",
					cea->db_audio.sad[i].freq & CEA_SAD_SF_192K ? 1 : 0,
   83654:	e0fffc17 	ldw	r3,-16(fp)
   83658:	e0bff817 	ldw	r2,-32(fp)
   8365c:	10800524 	muli	r2,r2,20
   83660:	1885883a 	add	r2,r3,r2
   83664:	10806b04 	addi	r2,r2,428
   83668:	10800017 	ldw	r2,0(r2)
   8366c:	1080100c 	andi	r2,r2,64
					"unknown (15)",
				};

				printf("       %02d) format      : %s\n", i, sad_format[cea->db_audio.sad[i].format]);
				printf("           channels    : %d\n", cea->db_audio.sad[i].channels);
				printf("           frequency   : 192K)%d 176.4k)%d 96k)%d 88.2k)%d 48k)%d 44.1k)%d 32k)%d\n",
   83670:	1004c03a 	cmpne	r2,r2,zero
   83674:	11403fcc 	andi	r5,r2,255
					cea->db_audio.sad[i].freq & CEA_SAD_SF_192K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_176P4K ? 1 : 0,
   83678:	e0fffc17 	ldw	r3,-16(fp)
   8367c:	e0bff817 	ldw	r2,-32(fp)
   83680:	10800524 	muli	r2,r2,20
   83684:	1885883a 	add	r2,r3,r2
   83688:	10806b04 	addi	r2,r2,428
   8368c:	10800017 	ldw	r2,0(r2)
   83690:	1080080c 	andi	r2,r2,32
					"unknown (15)",
				};

				printf("       %02d) format      : %s\n", i, sad_format[cea->db_audio.sad[i].format]);
				printf("           channels    : %d\n", cea->db_audio.sad[i].channels);
				printf("           frequency   : 192K)%d 176.4k)%d 96k)%d 88.2k)%d 48k)%d 44.1k)%d 32k)%d\n",
   83694:	1004c03a 	cmpne	r2,r2,zero
   83698:	10c03fcc 	andi	r3,r2,255
					cea->db_audio.sad[i].freq & CEA_SAD_SF_192K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_176P4K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_96K ? 1 : 0,
   8369c:	e13ffc17 	ldw	r4,-16(fp)
   836a0:	e0bff817 	ldw	r2,-32(fp)
   836a4:	10800524 	muli	r2,r2,20
   836a8:	2085883a 	add	r2,r4,r2
   836ac:	10806b04 	addi	r2,r2,428
   836b0:	10800017 	ldw	r2,0(r2)
   836b4:	1080040c 	andi	r2,r2,16
					"unknown (15)",
				};

				printf("       %02d) format      : %s\n", i, sad_format[cea->db_audio.sad[i].format]);
				printf("           channels    : %d\n", cea->db_audio.sad[i].channels);
				printf("           frequency   : 192K)%d 176.4k)%d 96k)%d 88.2k)%d 48k)%d 44.1k)%d 32k)%d\n",
   836b8:	1004c03a 	cmpne	r2,r2,zero
   836bc:	10803fcc 	andi	r2,r2,255
					cea->db_audio.sad[i].freq & CEA_SAD_SF_192K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_176P4K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_96K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_88P2K ? 1 : 0,
   836c0:	e1bffc17 	ldw	r6,-16(fp)
   836c4:	e13ff817 	ldw	r4,-32(fp)
   836c8:	21000524 	muli	r4,r4,20
   836cc:	3109883a 	add	r4,r6,r4
   836d0:	21006b04 	addi	r4,r4,428
   836d4:	21000017 	ldw	r4,0(r4)
   836d8:	2100020c 	andi	r4,r4,8
					"unknown (15)",
				};

				printf("       %02d) format      : %s\n", i, sad_format[cea->db_audio.sad[i].format]);
				printf("           channels    : %d\n", cea->db_audio.sad[i].channels);
				printf("           frequency   : 192K)%d 176.4k)%d 96k)%d 88.2k)%d 48k)%d 44.1k)%d 32k)%d\n",
   836dc:	2008c03a 	cmpne	r4,r4,zero
   836e0:	22003fcc 	andi	r8,r4,255
					cea->db_audio.sad[i].freq & CEA_SAD_SF_192K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_176P4K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_96K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_88P2K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_48K ? 1 : 0,
   836e4:	e1bffc17 	ldw	r6,-16(fp)
   836e8:	e13ff817 	ldw	r4,-32(fp)
   836ec:	21000524 	muli	r4,r4,20
   836f0:	3109883a 	add	r4,r6,r4
   836f4:	21006b04 	addi	r4,r4,428
   836f8:	21000017 	ldw	r4,0(r4)
   836fc:	2100010c 	andi	r4,r4,4
					"unknown (15)",
				};

				printf("       %02d) format      : %s\n", i, sad_format[cea->db_audio.sad[i].format]);
				printf("           channels    : %d\n", cea->db_audio.sad[i].channels);
				printf("           frequency   : 192K)%d 176.4k)%d 96k)%d 88.2k)%d 48k)%d 44.1k)%d 32k)%d\n",
   83700:	2008c03a 	cmpne	r4,r4,zero
   83704:	21c03fcc 	andi	r7,r4,255
					cea->db_audio.sad[i].freq & CEA_SAD_SF_192K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_176P4K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_96K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_88P2K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_48K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_44P1K ? 1 : 0,
   83708:	e1bffc17 	ldw	r6,-16(fp)
   8370c:	e13ff817 	ldw	r4,-32(fp)
   83710:	21000524 	muli	r4,r4,20
   83714:	3109883a 	add	r4,r6,r4
   83718:	21006b04 	addi	r4,r4,428
   8371c:	21000017 	ldw	r4,0(r4)
   83720:	2100008c 	andi	r4,r4,2
					"unknown (15)",
				};

				printf("       %02d) format      : %s\n", i, sad_format[cea->db_audio.sad[i].format]);
				printf("           channels    : %d\n", cea->db_audio.sad[i].channels);
				printf("           frequency   : 192K)%d 176.4k)%d 96k)%d 88.2k)%d 48k)%d 44.1k)%d 32k)%d\n",
   83724:	2008c03a 	cmpne	r4,r4,zero
   83728:	21803fcc 	andi	r6,r4,255
					cea->db_audio.sad[i].freq & CEA_SAD_SF_176P4K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_96K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_88P2K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_48K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_44P1K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_32K ? 1 : 0);
   8372c:	e27ffc17 	ldw	r9,-16(fp)
   83730:	e13ff817 	ldw	r4,-32(fp)
   83734:	21000524 	muli	r4,r4,20
   83738:	4909883a 	add	r4,r9,r4
   8373c:	21006b04 	addi	r4,r4,428
   83740:	21000017 	ldw	r4,0(r4)
   83744:	2100004c 	andi	r4,r4,1
					"unknown (15)",
				};

				printf("       %02d) format      : %s\n", i, sad_format[cea->db_audio.sad[i].format]);
				printf("           channels    : %d\n", cea->db_audio.sad[i].channels);
				printf("           frequency   : 192K)%d 176.4k)%d 96k)%d 88.2k)%d 48k)%d 44.1k)%d 32k)%d\n",
   83748:	2008c03a 	cmpne	r4,r4,zero
   8374c:	21003fcc 	andi	r4,r4,255
   83750:	da000015 	stw	r8,0(sp)
   83754:	d9c00115 	stw	r7,4(sp)
   83758:	d9800215 	stw	r6,8(sp)
   8375c:	d9000315 	stw	r4,12(sp)
   83760:	010002b4 	movhi	r4,10
   83764:	21284704 	addi	r4,r4,-24292
   83768:	180d883a 	mov	r6,r3
   8376c:	100f883a 	mov	r7,r2
   83770:	008e5840 	call	8e584 <printf>
					cea->db_audio.sad[i].freq & CEA_SAD_SF_88P2K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_48K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_44P1K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_32K ? 1 : 0);

				switch (cea->db_audio.sad[i].format) {
   83774:	e0fffc17 	ldw	r3,-16(fp)
   83778:	e0bff817 	ldw	r2,-32(fp)
   8377c:	10800524 	muli	r2,r2,20
   83780:	1885883a 	add	r2,r3,r2
   83784:	10806904 	addi	r2,r2,420
   83788:	10800017 	ldw	r2,0(r2)
   8378c:	10c00060 	cmpeqi	r3,r2,1
   83790:	1800041e 	bne	r3,zero,837a4 <edid_print_cea+0x3c4>
   83794:	0080300e 	bge	zero,r2,83858 <edid_print_cea+0x478>
   83798:	10800248 	cmpgei	r2,r2,9
   8379c:	10002e1e 	bne	r2,zero,83858 <edid_print_cea+0x478>
   837a0:	00002106 	br	83828 <edid_print_cea+0x448>
				case CEA_SAD_FMT_LPCM:
					printf("           resolution  : 24-bit)%d 20-bit)%d 16-bit)%d\n",
						cea->db_audio.sad[i].resolution & 0x04 ? 1 : 0,
   837a4:	e0fffc17 	ldw	r3,-16(fp)
   837a8:	e0bff817 	ldw	r2,-32(fp)
   837ac:	10800524 	muli	r2,r2,20
   837b0:	1885883a 	add	r2,r3,r2
   837b4:	10806c04 	addi	r2,r2,432
   837b8:	10800017 	ldw	r2,0(r2)
   837bc:	1080010c 	andi	r2,r2,4
					cea->db_audio.sad[i].freq & CEA_SAD_SF_44P1K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_32K ? 1 : 0);

				switch (cea->db_audio.sad[i].format) {
				case CEA_SAD_FMT_LPCM:
					printf("           resolution  : 24-bit)%d 20-bit)%d 16-bit)%d\n",
   837c0:	1004c03a 	cmpne	r2,r2,zero
   837c4:	11403fcc 	andi	r5,r2,255
						cea->db_audio.sad[i].resolution & 0x04 ? 1 : 0,
						cea->db_audio.sad[i].resolution & 0x02 ? 1 : 0,
   837c8:	e0fffc17 	ldw	r3,-16(fp)
   837cc:	e0bff817 	ldw	r2,-32(fp)
   837d0:	10800524 	muli	r2,r2,20
   837d4:	1885883a 	add	r2,r3,r2
   837d8:	10806c04 	addi	r2,r2,432
   837dc:	10800017 	ldw	r2,0(r2)
   837e0:	1080008c 	andi	r2,r2,2
					cea->db_audio.sad[i].freq & CEA_SAD_SF_44P1K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_32K ? 1 : 0);

				switch (cea->db_audio.sad[i].format) {
				case CEA_SAD_FMT_LPCM:
					printf("           resolution  : 24-bit)%d 20-bit)%d 16-bit)%d\n",
   837e4:	1004c03a 	cmpne	r2,r2,zero
   837e8:	10c03fcc 	andi	r3,r2,255
						cea->db_audio.sad[i].resolution & 0x04 ? 1 : 0,
						cea->db_audio.sad[i].resolution & 0x02 ? 1 : 0,
						cea->db_audio.sad[i].resolution & 0x01 ? 1 : 0);
   837ec:	e13ffc17 	ldw	r4,-16(fp)
   837f0:	e0bff817 	ldw	r2,-32(fp)
   837f4:	10800524 	muli	r2,r2,20
   837f8:	2085883a 	add	r2,r4,r2
   837fc:	10806c04 	addi	r2,r2,432
   83800:	10800017 	ldw	r2,0(r2)
   83804:	1080004c 	andi	r2,r2,1
					cea->db_audio.sad[i].freq & CEA_SAD_SF_44P1K ? 1 : 0,
					cea->db_audio.sad[i].freq & CEA_SAD_SF_32K ? 1 : 0);

				switch (cea->db_audio.sad[i].format) {
				case CEA_SAD_FMT_LPCM:
					printf("           resolution  : 24-bit)%d 20-bit)%d 16-bit)%d\n",
   83808:	1004c03a 	cmpne	r2,r2,zero
   8380c:	10803fcc 	andi	r2,r2,255
   83810:	010002b4 	movhi	r4,10
   83814:	21285c04 	addi	r4,r4,-24208
   83818:	180d883a 	mov	r6,r3
   8381c:	100f883a 	mov	r7,r2
   83820:	008e5840 	call	8e584 <printf>
						cea->db_audio.sad[i].resolution & 0x04 ? 1 : 0,
						cea->db_audio.sad[i].resolution & 0x02 ? 1 : 0,
						cea->db_audio.sad[i].resolution & 0x01 ? 1 : 0);
					break;
   83824:	00000c06 	br	83858 <edid_print_cea+0x478>
				case CEA_SAD_FMT_MP3:
				case CEA_SAD_FMT_MPEG2:
				case CEA_SAD_FMT_AAC:
				case CEA_SAD_FMT_DTS:
				case CEA_SAD_FMT_ATRAC:
					printf("           bitrate max : %d (kHz)\n", cea->db_audio.sad[i].bitrate);
   83828:	e0fffc17 	ldw	r3,-16(fp)
   8382c:	e0bff817 	ldw	r2,-32(fp)
   83830:	10800044 	addi	r2,r2,1
   83834:	10800524 	muli	r2,r2,20
   83838:	1885883a 	add	r2,r3,r2
   8383c:	10806804 	addi	r2,r2,416
   83840:	10800017 	ldw	r2,0(r2)
   83844:	010002b4 	movhi	r4,10
   83848:	21286a04 	addi	r4,r4,-24152
   8384c:	100b883a 	mov	r5,r2
   83850:	008e5840 	call	8e584 <printf>
					break;
   83854:	0001883a 	nop
		switch (cea->dbc_tags[t]) {
		case CEA_DB_AUDIO:
			printf("\n  [%02d] audio data block ...\n", t);
			printf("       number of SADs (short audio descriptor) : %d\n", cea->db_audio.nr_sad);

			for (i = 0; i < cea->db_audio.nr_sad; ++i) {
   83858:	e0bff817 	ldw	r2,-32(fp)
   8385c:	10800044 	addi	r2,r2,1
   83860:	e0bff815 	stw	r2,-32(fp)
   83864:	e0bffc17 	ldw	r2,-16(fp)
   83868:	10806817 	ldw	r2,416(r2)
   8386c:	e0fff817 	ldw	r3,-32(fp)
   83870:	18bf5d16 	blt	r3,r2,835e8 <edid_print_cea+0x208>
				//case CEA_SAD_FMT_DST:
				//case CEA_SAD_FMT_WMA_PRO:
				//	break;
				}
			}
			break;
   83874:	00033a06 	br	84560 <edid_print_cea+0x1180>
				"720x480p       @239.76/240 Hz (16:9)",
				"720(1440)x480i @239.76/240 Hz (4:3)",
				"720(1440)x480i @239.76/240 Hz (16:9)",
			};

			printf("\n  [%02d] video data block ...\n", t);
   83878:	010002b4 	movhi	r4,10
   8387c:	21287304 	addi	r4,r4,-24116
   83880:	e17ff917 	ldw	r5,-28(fp)
   83884:	008e5840 	call	8e584 <printf>
			printf("       number of SVDs (short video descriptor) : %d\n", cea->db_video.nr_svd);
   83888:	e0bffc17 	ldw	r2,-16(fp)
   8388c:	10802717 	ldw	r2,156(r2)
   83890:	010002b4 	movhi	r4,10
   83894:	21287b04 	addi	r4,r4,-24084
   83898:	100b883a 	mov	r5,r2
   8389c:	008e5840 	call	8e584 <printf>

			for (i = 0; i < cea->db_video.nr_svd; ++i) {
   838a0:	e03ff815 	stw	zero,-32(fp)
   838a4:	00004c06 	br	839d8 <edid_print_cea+0x5f8>
				if (cea->db_video.svd[i].vic < 60)
   838a8:	e0fffc17 	ldw	r3,-16(fp)
   838ac:	e0bff817 	ldw	r2,-32(fp)
   838b0:	10800044 	addi	r2,r2,1
   838b4:	100490fa 	slli	r2,r2,3
   838b8:	1885883a 	add	r2,r3,r2
   838bc:	10802704 	addi	r2,r2,156
   838c0:	10800017 	ldw	r2,0(r2)
   838c4:	10800f08 	cmpgei	r2,r2,60
   838c8:	1000271e 	bne	r2,zero,83968 <edid_print_cea+0x588>
					printf("       %02d) VIC-%02d %s %s\n", i, cea->db_video.svd[i].vic, vic_table[cea->db_video.svd[i].vic], cea->db_video.svd[i].native ? "(native)" : " ");
   838cc:	e0fffc17 	ldw	r3,-16(fp)
   838d0:	e0bff817 	ldw	r2,-32(fp)
   838d4:	10800044 	addi	r2,r2,1
   838d8:	100490fa 	slli	r2,r2,3
   838dc:	1885883a 	add	r2,r3,r2
   838e0:	10802704 	addi	r2,r2,156
   838e4:	11800017 	ldw	r6,0(r2)
   838e8:	e0fffc17 	ldw	r3,-16(fp)
   838ec:	e0bff817 	ldw	r2,-32(fp)
   838f0:	10800044 	addi	r2,r2,1
   838f4:	100490fa 	slli	r2,r2,3
   838f8:	1885883a 	add	r2,r3,r2
   838fc:	10802704 	addi	r2,r2,156
   83900:	10800017 	ldw	r2,0(r2)
   83904:	00c002b4 	movhi	r3,10
   83908:	18f62304 	addi	r3,r3,-10100
   8390c:	1085883a 	add	r2,r2,r2
   83910:	1085883a 	add	r2,r2,r2
   83914:	1885883a 	add	r2,r3,r2
   83918:	10c00017 	ldw	r3,0(r2)
   8391c:	e13ffc17 	ldw	r4,-16(fp)
   83920:	e0bff817 	ldw	r2,-32(fp)
   83924:	10800504 	addi	r2,r2,20
   83928:	100490fa 	slli	r2,r2,3
   8392c:	2085883a 	add	r2,r4,r2
   83930:	10800017 	ldw	r2,0(r2)
   83934:	10000326 	beq	r2,zero,83944 <edid_print_cea+0x564>
   83938:	008002b4 	movhi	r2,10
   8393c:	10a88904 	addi	r2,r2,-24028
   83940:	00000206 	br	8394c <edid_print_cea+0x56c>
   83944:	008002b4 	movhi	r2,10
   83948:	10a88c04 	addi	r2,r2,-24016
   8394c:	d8800015 	stw	r2,0(sp)
   83950:	010002b4 	movhi	r4,10
   83954:	21288d04 	addi	r4,r4,-24012
   83958:	e17ff817 	ldw	r5,-32(fp)
   8395c:	180f883a 	mov	r7,r3
   83960:	008e5840 	call	8e584 <printf>
   83964:	00001906 	br	839cc <edid_print_cea+0x5ec>
				else
					printf("       %02d) VIC-%02d unknown %s\n", i, cea->db_video.svd[i].vic, cea->db_video.svd[i].native ? "(native)" : " ");
   83968:	e0fffc17 	ldw	r3,-16(fp)
   8396c:	e0bff817 	ldw	r2,-32(fp)
   83970:	10800044 	addi	r2,r2,1
   83974:	100490fa 	slli	r2,r2,3
   83978:	1885883a 	add	r2,r3,r2
   8397c:	10802704 	addi	r2,r2,156
   83980:	10c00017 	ldw	r3,0(r2)
   83984:	e13ffc17 	ldw	r4,-16(fp)
   83988:	e0bff817 	ldw	r2,-32(fp)
   8398c:	10800504 	addi	r2,r2,20
   83990:	100490fa 	slli	r2,r2,3
   83994:	2085883a 	add	r2,r4,r2
   83998:	10800017 	ldw	r2,0(r2)
   8399c:	10000326 	beq	r2,zero,839ac <edid_print_cea+0x5cc>
   839a0:	008002b4 	movhi	r2,10
   839a4:	10a88904 	addi	r2,r2,-24028
   839a8:	00000206 	br	839b4 <edid_print_cea+0x5d4>
   839ac:	008002b4 	movhi	r2,10
   839b0:	10a88c04 	addi	r2,r2,-24016
   839b4:	010002b4 	movhi	r4,10
   839b8:	21289504 	addi	r4,r4,-23980
   839bc:	e17ff817 	ldw	r5,-32(fp)
   839c0:	180d883a 	mov	r6,r3
   839c4:	100f883a 	mov	r7,r2
   839c8:	008e5840 	call	8e584 <printf>
			};

			printf("\n  [%02d] video data block ...\n", t);
			printf("       number of SVDs (short video descriptor) : %d\n", cea->db_video.nr_svd);

			for (i = 0; i < cea->db_video.nr_svd; ++i) {
   839cc:	e0bff817 	ldw	r2,-32(fp)
   839d0:	10800044 	addi	r2,r2,1
   839d4:	e0bff815 	stw	r2,-32(fp)
   839d8:	e0bffc17 	ldw	r2,-16(fp)
   839dc:	10802717 	ldw	r2,156(r2)
   839e0:	e0fff817 	ldw	r3,-32(fp)
   839e4:	18bfb016 	blt	r3,r2,838a8 <edid_print_cea+0x4c8>
				if (cea->db_video.svd[i].vic < 60)
					printf("       %02d) VIC-%02d %s %s\n", i, cea->db_video.svd[i].vic, vic_table[cea->db_video.svd[i].vic], cea->db_video.svd[i].native ? "(native)" : " ");
				else
					printf("       %02d) VIC-%02d unknown %s\n", i, cea->db_video.svd[i].vic, cea->db_video.svd[i].native ? "(native)" : " ");
			}
			break;
   839e8:	0002dd06 	br	84560 <edid_print_cea+0x1180>
		}
		case CEA_DB_VENDOR:
			if (cea->db_vsdb_hdmi.ieee_reg_id != 0x000c03) {
   839ec:	e0bffc17 	ldw	r2,-16(fp)
   839f0:	10809d17 	ldw	r2,628(r2)
   839f4:	108300e0 	cmpeqi	r2,r2,3075
   839f8:	1000051e 	bne	r2,zero,83a10 <edid_print_cea+0x630>
				printf("\n  [%02d] VSDB vendor specific data block ...\n", t);
   839fc:	010002b4 	movhi	r4,10
   83a00:	21289e04 	addi	r4,r4,-23944
   83a04:	e17ff917 	ldw	r5,-28(fp)
   83a08:	008e5840 	call	8e584 <printf>
				break;
   83a0c:	0002d406 	br	84560 <edid_print_cea+0x1180>
			}

			printf("\n  [%02d] HDMI VSDB vendor specific data block ...\n", t);
   83a10:	010002b4 	movhi	r4,10
   83a14:	2128aa04 	addi	r4,r4,-23896
   83a18:	e17ff917 	ldw	r5,-28(fp)
   83a1c:	008e5840 	call	8e584 <printf>
			printf("       source physical address         : %d.%d.%d.%d\n",
				cea->db_vsdb_hdmi.addr_a, cea->db_vsdb_hdmi.addr_b,
   83a20:	e0bffc17 	ldw	r2,-16(fp)
				printf("\n  [%02d] VSDB vendor specific data block ...\n", t);
				break;
			}

			printf("\n  [%02d] HDMI VSDB vendor specific data block ...\n", t);
			printf("       source physical address         : %d.%d.%d.%d\n",
   83a24:	11409e17 	ldw	r5,632(r2)
				cea->db_vsdb_hdmi.addr_a, cea->db_vsdb_hdmi.addr_b,
   83a28:	e0bffc17 	ldw	r2,-16(fp)
				printf("\n  [%02d] VSDB vendor specific data block ...\n", t);
				break;
			}

			printf("\n  [%02d] HDMI VSDB vendor specific data block ...\n", t);
			printf("       source physical address         : %d.%d.%d.%d\n",
   83a2c:	10c09f17 	ldw	r3,636(r2)
				cea->db_vsdb_hdmi.addr_a, cea->db_vsdb_hdmi.addr_b,
				cea->db_vsdb_hdmi.addr_c, cea->db_vsdb_hdmi.addr_d);
   83a30:	e0bffc17 	ldw	r2,-16(fp)
				printf("\n  [%02d] VSDB vendor specific data block ...\n", t);
				break;
			}

			printf("\n  [%02d] HDMI VSDB vendor specific data block ...\n", t);
			printf("       source physical address         : %d.%d.%d.%d\n",
   83a34:	1080a017 	ldw	r2,640(r2)
				cea->db_vsdb_hdmi.addr_a, cea->db_vsdb_hdmi.addr_b,
				cea->db_vsdb_hdmi.addr_c, cea->db_vsdb_hdmi.addr_d);
   83a38:	e13ffc17 	ldw	r4,-16(fp)
				printf("\n  [%02d] VSDB vendor specific data block ...\n", t);
				break;
			}

			printf("\n  [%02d] HDMI VSDB vendor specific data block ...\n", t);
			printf("       source physical address         : %d.%d.%d.%d\n",
   83a3c:	2100a117 	ldw	r4,644(r4)
   83a40:	d9000015 	stw	r4,0(sp)
   83a44:	010002b4 	movhi	r4,10
   83a48:	2128b704 	addi	r4,r4,-23844
   83a4c:	180d883a 	mov	r6,r3
   83a50:	100f883a 	mov	r7,r2
   83a54:	008e5840 	call	8e584 <printf>
				cea->db_vsdb_hdmi.addr_a, cea->db_vsdb_hdmi.addr_b,
				cea->db_vsdb_hdmi.addr_c, cea->db_vsdb_hdmi.addr_d);

			if (cea->db_vsdb_hdmi.ext_len >= 6) {
   83a58:	e0bffc17 	ldw	r2,-16(fp)
   83a5c:	10809c17 	ldw	r2,624(r2)
   83a60:	10800190 	cmplti	r2,r2,6
   83a64:	1000481e 	bne	r2,zero,83b88 <edid_print_cea+0x7a8>
				printf("       support ACP ISRC1 ISRC2 packets : %s\n", cea->db_vsdb_hdmi.ai ? "yes" : "no");
   83a68:	e0bffc17 	ldw	r2,-16(fp)
   83a6c:	1080a217 	ldw	r2,648(r2)
   83a70:	10000326 	beq	r2,zero,83a80 <edid_print_cea+0x6a0>
   83a74:	008002b4 	movhi	r2,10
   83a78:	10a7d704 	addi	r2,r2,-24740
   83a7c:	00000206 	br	83a88 <edid_print_cea+0x6a8>
   83a80:	008002b4 	movhi	r2,10
   83a84:	10a7d804 	addi	r2,r2,-24736
   83a88:	010002b4 	movhi	r4,10
   83a8c:	2128c504 	addi	r4,r4,-23788
   83a90:	100b883a 	mov	r5,r2
   83a94:	008e5840 	call	8e584 <printf>
				printf("       support 48 bpp                  : %s\n", cea->db_vsdb_hdmi.bpp48 ? "yes" : "no");
   83a98:	e0bffc17 	ldw	r2,-16(fp)
   83a9c:	1080a517 	ldw	r2,660(r2)
   83aa0:	10000326 	beq	r2,zero,83ab0 <edid_print_cea+0x6d0>
   83aa4:	008002b4 	movhi	r2,10
   83aa8:	10a7d704 	addi	r2,r2,-24740
   83aac:	00000206 	br	83ab8 <edid_print_cea+0x6d8>
   83ab0:	008002b4 	movhi	r2,10
   83ab4:	10a7d804 	addi	r2,r2,-24736
   83ab8:	010002b4 	movhi	r4,10
   83abc:	2128d104 	addi	r4,r4,-23740
   83ac0:	100b883a 	mov	r5,r2
   83ac4:	008e5840 	call	8e584 <printf>
				printf("       support 36 bpp                  : %s\n", cea->db_vsdb_hdmi.bpp36 ? "yes" : "no");
   83ac8:	e0bffc17 	ldw	r2,-16(fp)
   83acc:	1080a417 	ldw	r2,656(r2)
   83ad0:	10000326 	beq	r2,zero,83ae0 <edid_print_cea+0x700>
   83ad4:	008002b4 	movhi	r2,10
   83ad8:	10a7d704 	addi	r2,r2,-24740
   83adc:	00000206 	br	83ae8 <edid_print_cea+0x708>
   83ae0:	008002b4 	movhi	r2,10
   83ae4:	10a7d804 	addi	r2,r2,-24736
   83ae8:	010002b4 	movhi	r4,10
   83aec:	2128dd04 	addi	r4,r4,-23692
   83af0:	100b883a 	mov	r5,r2
   83af4:	008e5840 	call	8e584 <printf>
				printf("       support 30 bpp                  : %s\n", cea->db_vsdb_hdmi.bpp30 ? "yes" : "no");
   83af8:	e0bffc17 	ldw	r2,-16(fp)
   83afc:	1080a317 	ldw	r2,652(r2)
   83b00:	10000326 	beq	r2,zero,83b10 <edid_print_cea+0x730>
   83b04:	008002b4 	movhi	r2,10
   83b08:	10a7d704 	addi	r2,r2,-24740
   83b0c:	00000206 	br	83b18 <edid_print_cea+0x738>
   83b10:	008002b4 	movhi	r2,10
   83b14:	10a7d804 	addi	r2,r2,-24736
   83b18:	010002b4 	movhi	r4,10
   83b1c:	2128e904 	addi	r4,r4,-23644
   83b20:	100b883a 	mov	r5,r2
   83b24:	008e5840 	call	8e584 <printf>
				printf("       support YCbCr 4:4:4 deep color  : %s\n", cea->db_vsdb_hdmi.ycbcr444 ? "yes" : "no");
   83b28:	e0bffc17 	ldw	r2,-16(fp)
   83b2c:	1080a617 	ldw	r2,664(r2)
   83b30:	10000326 	beq	r2,zero,83b40 <edid_print_cea+0x760>
   83b34:	008002b4 	movhi	r2,10
   83b38:	10a7d704 	addi	r2,r2,-24740
   83b3c:	00000206 	br	83b48 <edid_print_cea+0x768>
   83b40:	008002b4 	movhi	r2,10
   83b44:	10a7d804 	addi	r2,r2,-24736
   83b48:	010002b4 	movhi	r4,10
   83b4c:	2128f504 	addi	r4,r4,-23596
   83b50:	100b883a 	mov	r5,r2
   83b54:	008e5840 	call	8e584 <printf>
				printf("       support DVI dual-link           : %s\n", cea->db_vsdb_hdmi.dvi_dual ? "yes" : "no");
   83b58:	e0bffc17 	ldw	r2,-16(fp)
   83b5c:	1080a717 	ldw	r2,668(r2)
   83b60:	10000326 	beq	r2,zero,83b70 <edid_print_cea+0x790>
   83b64:	008002b4 	movhi	r2,10
   83b68:	10a7d704 	addi	r2,r2,-24740
   83b6c:	00000206 	br	83b78 <edid_print_cea+0x798>
   83b70:	008002b4 	movhi	r2,10
   83b74:	10a7d804 	addi	r2,r2,-24736
   83b78:	010002b4 	movhi	r4,10
   83b7c:	21290104 	addi	r4,r4,-23548
   83b80:	100b883a 	mov	r5,r2
   83b84:	008e5840 	call	8e584 <printf>
			}

			if (cea->db_vsdb_hdmi.ext_len >= 7) {
   83b88:	e0bffc17 	ldw	r2,-16(fp)
   83b8c:	10809c17 	ldw	r2,624(r2)
   83b90:	108001d0 	cmplti	r2,r2,7
   83b94:	1000061e 	bne	r2,zero,83bb0 <edid_print_cea+0x7d0>
				printf("       max TMDS clock                  : %d (MHz)\n", cea->db_vsdb_hdmi.max_tmds_clk);
   83b98:	e0bffc17 	ldw	r2,-16(fp)
   83b9c:	1080ab17 	ldw	r2,684(r2)
   83ba0:	010002b4 	movhi	r4,10
   83ba4:	21290d04 	addi	r4,r4,-23500
   83ba8:	100b883a 	mov	r5,r2
   83bac:	008e5840 	call	8e584 <printf>
			}

			if (cea->db_vsdb_hdmi.p_latency != 0) {
   83bb0:	e0bffc17 	ldw	r2,-16(fp)
   83bb4:	1080a817 	ldw	r2,672(r2)
   83bb8:	10000c26 	beq	r2,zero,83bec <edid_print_cea+0x80c>
				printf("       video latency (progressive)     : %d (ms)\n", cea->db_vsdb_hdmi.vid_latency_p);
   83bbc:	e0bffc17 	ldw	r2,-16(fp)
   83bc0:	1080ac17 	ldw	r2,688(r2)
   83bc4:	010002b4 	movhi	r4,10
   83bc8:	21291a04 	addi	r4,r4,-23448
   83bcc:	100b883a 	mov	r5,r2
   83bd0:	008e5840 	call	8e584 <printf>
				printf("       audio latency (progressive)     : %d (ms)\n", cea->db_vsdb_hdmi.aud_latency_p);
   83bd4:	e0bffc17 	ldw	r2,-16(fp)
   83bd8:	1080ad17 	ldw	r2,692(r2)
   83bdc:	010002b4 	movhi	r4,10
   83be0:	21292704 	addi	r4,r4,-23396
   83be4:	100b883a 	mov	r5,r2
   83be8:	008e5840 	call	8e584 <printf>
			}

			if (cea->db_vsdb_hdmi.i_latency != 0) {
   83bec:	e0bffc17 	ldw	r2,-16(fp)
   83bf0:	1080a917 	ldw	r2,676(r2)
   83bf4:	10000c26 	beq	r2,zero,83c28 <edid_print_cea+0x848>
				printf("       video latency (interlaced)      : %d (ms)\n", cea->db_vsdb_hdmi.vid_latency_i);
   83bf8:	e0bffc17 	ldw	r2,-16(fp)
   83bfc:	1080ae17 	ldw	r2,696(r2)
   83c00:	010002b4 	movhi	r4,10
   83c04:	21293404 	addi	r4,r4,-23344
   83c08:	100b883a 	mov	r5,r2
   83c0c:	008e5840 	call	8e584 <printf>
				printf("       audio latency (interlaced)      : %d (ms)\n", cea->db_vsdb_hdmi.aud_latency_i);
   83c10:	e0bffc17 	ldw	r2,-16(fp)
   83c14:	1080af17 	ldw	r2,700(r2)
   83c18:	010002b4 	movhi	r4,10
   83c1c:	21294104 	addi	r4,r4,-23292
   83c20:	100b883a 	mov	r5,r2
   83c24:	008e5840 	call	8e584 <printf>
			}

			printf("       HDMI video fields               : %s\n", cea->db_vsdb_hdmi.hdmi_video ? "yes" : "no");
   83c28:	e0bffc17 	ldw	r2,-16(fp)
   83c2c:	1080aa17 	ldw	r2,680(r2)
   83c30:	10000326 	beq	r2,zero,83c40 <edid_print_cea+0x860>
   83c34:	008002b4 	movhi	r2,10
   83c38:	10a7d704 	addi	r2,r2,-24740
   83c3c:	00000206 	br	83c48 <edid_print_cea+0x868>
   83c40:	008002b4 	movhi	r2,10
   83c44:	10a7d804 	addi	r2,r2,-24736
   83c48:	010002b4 	movhi	r4,10
   83c4c:	21294e04 	addi	r4,r4,-23240
   83c50:	100b883a 	mov	r5,r2
   83c54:	008e5840 	call	8e584 <printf>
			printf("       HDMI 3D video fields            : %s\n", cea->db_vsdb_hdmi.present_3d ? "yes" : "no");
   83c58:	e0bffc17 	ldw	r2,-16(fp)
   83c5c:	1080b017 	ldw	r2,704(r2)
   83c60:	10000326 	beq	r2,zero,83c70 <edid_print_cea+0x890>
   83c64:	008002b4 	movhi	r2,10
   83c68:	10a7d704 	addi	r2,r2,-24740
   83c6c:	00000206 	br	83c78 <edid_print_cea+0x898>
   83c70:	008002b4 	movhi	r2,10
   83c74:	10a7d804 	addi	r2,r2,-24736
   83c78:	010002b4 	movhi	r4,10
   83c7c:	21295a04 	addi	r4,r4,-23192
   83c80:	100b883a 	mov	r5,r2
   83c84:	008e5840 	call	8e584 <printf>

			if (cea->db_vsdb_hdmi.hdmi_video != 0) {
   83c88:	e0bffc17 	ldw	r2,-16(fp)
   83c8c:	1080aa17 	ldw	r2,680(r2)
   83c90:	10023026 	beq	r2,zero,84554 <edid_print_cea+0x1174>
				switch (cea->db_vsdb_hdmi.multi_3d) {
   83c94:	e0bffc17 	ldw	r2,-16(fp)
   83c98:	1080b117 	ldw	r2,708(r2)
   83c9c:	10c00060 	cmpeqi	r3,r2,1
   83ca0:	18000d1e 	bne	r3,zero,83cd8 <edid_print_cea+0x8f8>
   83ca4:	10c00088 	cmpgei	r3,r2,2
   83ca8:	1800021e 	bne	r3,zero,83cb4 <edid_print_cea+0x8d4>
   83cac:	10000626 	beq	r2,zero,83cc8 <edid_print_cea+0x8e8>
   83cb0:	00001506 	br	83d08 <edid_print_cea+0x928>
   83cb4:	10c000a0 	cmpeqi	r3,r2,2
   83cb8:	18000b1e 	bne	r3,zero,83ce8 <edid_print_cea+0x908>
   83cbc:	108000e0 	cmpeqi	r2,r2,3
   83cc0:	10000d1e 	bne	r2,zero,83cf8 <edid_print_cea+0x918>
   83cc4:	00001006 	br	83d08 <edid_print_cea+0x928>
				case 0:
					printf("         3D-Multi_present              : 2b00 (no 3D_Structure_ALL_15..0, no 3D_MASK_15..0)\n");
   83cc8:	010002b4 	movhi	r4,10
   83ccc:	21296604 	addi	r4,r4,-23144
   83cd0:	008e6680 	call	8e668 <puts>
					break;
   83cd4:	00000c06 	br	83d08 <edid_print_cea+0x928>
				case 1:
					printf("         3D-Multi_present              : 2b01 (with 3D_Structure_ALL_15..0, no 3D_MASK_15..0)\n");
   83cd8:	010002b4 	movhi	r4,10
   83cdc:	21297d04 	addi	r4,r4,-23052
   83ce0:	008e6680 	call	8e668 <puts>
					break;
   83ce4:	00000806 	br	83d08 <edid_print_cea+0x928>
				case 2:
					printf("         3D-Multi_present              : 2b10 (with 3D_Structure_ALL_15..0, with 3D_MASK_15..0)\n");
   83ce8:	010002b4 	movhi	r4,10
   83cec:	21299504 	addi	r4,r4,-22956
   83cf0:	008e6680 	call	8e668 <puts>
					break;
   83cf4:	00000406 	br	83d08 <edid_print_cea+0x928>
				case 3:
					printf("         3D-Multi_present              : 2b11 (no 3D_Structure_ALL_15..0, no 3D_MASK_15..0)\n");
   83cf8:	010002b4 	movhi	r4,10
   83cfc:	2129ad04 	addi	r4,r4,-22860
   83d00:	008e6680 	call	8e668 <puts>
					break;
   83d04:	0001883a 	nop
				}

				if ((cea->db_vsdb_hdmi.multi_3d == 1) || (cea->db_vsdb_hdmi.multi_3d == 2)) {
   83d08:	e0bffc17 	ldw	r2,-16(fp)
   83d0c:	1080b117 	ldw	r2,708(r2)
   83d10:	10800060 	cmpeqi	r2,r2,1
   83d14:	1000041e 	bne	r2,zero,83d28 <edid_print_cea+0x948>
   83d18:	e0bffc17 	ldw	r2,-16(fp)
   83d1c:	1080b117 	ldw	r2,708(r2)
   83d20:	10800098 	cmpnei	r2,r2,2
   83d24:	1000211e 	bne	r2,zero,83dac <edid_print_cea+0x9cc>
					if (cea->db_vsdb_hdmi.struct_all_3d == 0) {
   83d28:	e0bffc17 	ldw	r2,-16(fp)
   83d2c:	1080b517 	ldw	r2,724(r2)
   83d30:	1000041e 	bne	r2,zero,83d44 <edid_print_cea+0x964>
						printf("         3D_Structure_ALL              : none\n");
   83d34:	010002b4 	movhi	r4,10
   83d38:	2129c404 	addi	r4,r4,-22768
   83d3c:	008e6680 	call	8e668 <puts>
   83d40:	00001a06 	br	83dac <edid_print_cea+0x9cc>
					} else {
						printf("         3D_Structure_ALL              : ");
   83d44:	010002b4 	movhi	r4,10
   83d48:	2129d004 	addi	r4,r4,-22720
   83d4c:	008e5840 	call	8e584 <printf>
						if (cea->db_vsdb_hdmi.struct_all_3d & 0x01)
   83d50:	e0bffc17 	ldw	r2,-16(fp)
   83d54:	1080b517 	ldw	r2,724(r2)
   83d58:	1080004c 	andi	r2,r2,1
   83d5c:	10000326 	beq	r2,zero,83d6c <edid_print_cea+0x98c>
							printf("frame_packing ");
   83d60:	010002b4 	movhi	r4,10
   83d64:	2129db04 	addi	r4,r4,-22676
   83d68:	008e5840 	call	8e584 <printf>
						if (cea->db_vsdb_hdmi.struct_all_3d & 0x40)
   83d6c:	e0bffc17 	ldw	r2,-16(fp)
   83d70:	1080b517 	ldw	r2,724(r2)
   83d74:	1080100c 	andi	r2,r2,64
   83d78:	10000326 	beq	r2,zero,83d88 <edid_print_cea+0x9a8>
							printf("top-and-bottom ");
   83d7c:	010002b4 	movhi	r4,10
   83d80:	2129df04 	addi	r4,r4,-22660
   83d84:	008e5840 	call	8e584 <printf>
						if (cea->db_vsdb_hdmi.struct_all_3d & 0x100)
   83d88:	e0bffc17 	ldw	r2,-16(fp)
   83d8c:	1080b517 	ldw	r2,724(r2)
   83d90:	1080400c 	andi	r2,r2,256
   83d94:	10000326 	beq	r2,zero,83da4 <edid_print_cea+0x9c4>
							printf("side-by-side(half h_subsampling)");
   83d98:	010002b4 	movhi	r4,10
   83d9c:	2129e304 	addi	r4,r4,-22644
   83da0:	008e5840 	call	8e584 <printf>
						printf("\n");
   83da4:	01000284 	movi	r4,10
   83da8:	008e5c80 	call	8e5c8 <putchar>
					}
				}

				if (cea->db_vsdb_hdmi.multi_3d == 2) {
   83dac:	e0bffc17 	ldw	r2,-16(fp)
   83db0:	1080b117 	ldw	r2,708(r2)
   83db4:	10800098 	cmpnei	r2,r2,2
   83db8:	1000061e 	bne	r2,zero,83dd4 <edid_print_cea+0x9f4>
					printf("         3D_MASK                       : 0x%04x\n", cea->db_vsdb_hdmi.mask_3d);
   83dbc:	e0bffc17 	ldw	r2,-16(fp)
   83dc0:	1080b617 	ldw	r2,728(r2)
   83dc4:	010002b4 	movhi	r4,10
   83dc8:	2129ec04 	addi	r4,r4,-22608
   83dcc:	100b883a 	mov	r5,r2
   83dd0:	008e5840 	call	8e584 <printf>
				}

				switch (cea->db_vsdb_hdmi.image_size) {
   83dd4:	e0bffc17 	ldw	r2,-16(fp)
   83dd8:	1080b217 	ldw	r2,712(r2)
   83ddc:	10c00060 	cmpeqi	r3,r2,1
   83de0:	18000d1e 	bne	r3,zero,83e18 <edid_print_cea+0xa38>
   83de4:	10c00088 	cmpgei	r3,r2,2
   83de8:	1800021e 	bne	r3,zero,83df4 <edid_print_cea+0xa14>
   83dec:	10000626 	beq	r2,zero,83e08 <edid_print_cea+0xa28>
   83df0:	00001506 	br	83e48 <edid_print_cea+0xa68>
   83df4:	10c000a0 	cmpeqi	r3,r2,2
   83df8:	18000b1e 	bne	r3,zero,83e28 <edid_print_cea+0xa48>
   83dfc:	108000e0 	cmpeqi	r2,r2,3
   83e00:	10000d1e 	bne	r2,zero,83e38 <edid_print_cea+0xa58>
   83e04:	00001006 	br	83e48 <edid_print_cea+0xa68>
				case 0:
					printf("         image size extra properties   : none\n");
   83e08:	010002b4 	movhi	r4,10
   83e0c:	2129f904 	addi	r4,r4,-22556
   83e10:	008e6680 	call	8e668 <puts>
					break;
   83e14:	00000c06 	br	83e48 <edid_print_cea+0xa68>
				case 1:
					printf("         image size extra properties   : exact aspect ratio only\n");
   83e18:	010002b4 	movhi	r4,10
   83e1c:	212a0504 	addi	r4,r4,-22508
   83e20:	008e6680 	call	8e668 <puts>
					break;
   83e24:	00000806 	br	83e48 <edid_print_cea+0xa68>
				case 2:
					printf("         image size extra properties   : size correct (1cm nearest rounded)\n");
   83e28:	010002b4 	movhi	r4,10
   83e2c:	212a1604 	addi	r4,r4,-22440
   83e30:	008e6680 	call	8e668 <puts>
					break;
   83e34:	00000406 	br	83e48 <edid_print_cea+0xa68>
				case 3:
					printf("         image size extra properties   : size correct (div by 5cm nearest rounded)\n");
   83e38:	010002b4 	movhi	r4,10
   83e3c:	212a2904 	addi	r4,r4,-22364
   83e40:	008e6680 	call	8e668 <puts>
					break;
   83e44:	0001883a 	nop
				}

				for (i = 0; i < cea->db_vsdb_hdmi.nr_vic_3d; ++ i) {
   83e48:	e03ff815 	stw	zero,-32(fp)
   83e4c:	00008a06 	br	84078 <edid_print_cea+0xc98>

					printf("         [%02d] 2D_VIC_Order)%02d ", i, cea->db_vsdb_hdmi.vic_3d[i].vic_2d);
   83e50:	e0fffc17 	ldw	r3,-16(fp)
   83e54:	e0bff817 	ldw	r2,-32(fp)
   83e58:	10800324 	muli	r2,r2,12
   83e5c:	1885883a 	add	r2,r3,r2
   83e60:	1080b804 	addi	r2,r2,736
   83e64:	10800017 	ldw	r2,0(r2)
   83e68:	010002b4 	movhi	r4,10
   83e6c:	212a3e04 	addi	r4,r4,-22280
   83e70:	e17ff817 	ldw	r5,-32(fp)
   83e74:	100d883a 	mov	r6,r2
   83e78:	008e5840 	call	8e584 <printf>

					switch (cea->db_vsdb_hdmi.vic_3d[i].struct_3d) {
   83e7c:	e0fffc17 	ldw	r3,-16(fp)
   83e80:	e0bff817 	ldw	r2,-32(fp)
   83e84:	10800324 	muli	r2,r2,12
   83e88:	1885883a 	add	r2,r3,r2
   83e8c:	1080b904 	addi	r2,r2,740
   83e90:	10800017 	ldw	r2,0(r2)
   83e94:	10c00268 	cmpgeui	r3,r2,9
   83e98:	1800301e 	bne	r3,zero,83f5c <edid_print_cea+0xb7c>
   83e9c:	1085883a 	add	r2,r2,r2
   83ea0:	1087883a 	add	r3,r2,r2
   83ea4:	00800234 	movhi	r2,8
   83ea8:	108fae04 	addi	r2,r2,16056
   83eac:	1885883a 	add	r2,r3,r2
   83eb0:	10800017 	ldw	r2,0(r2)
   83eb4:	1000683a 	jmp	r2
   83eb8:	00083edc 	xori	zero,zero,8443
   83ebc:	00083eec 	andhi	zero,zero,8443
   83ec0:	00083efc 	xorhi	zero,zero,8443
   83ec4:	00083f0c 	andi	zero,zero,8444
   83ec8:	00083f1c 	xori	zero,zero,8444
   83ecc:	00083f2c 	andhi	zero,zero,8444
   83ed0:	00083f3c 	xorhi	zero,zero,8444
   83ed4:	00083f5c 	xori	zero,zero,8445
   83ed8:	00083f4c 	andi	zero,zero,8445
					case 0:
						printf("3D_Structure)frame_packing ");
   83edc:	010002b4 	movhi	r4,10
   83ee0:	212a4704 	addi	r4,r4,-22244
   83ee4:	008e5840 	call	8e584 <printf>
						break;
   83ee8:	00002006 	br	83f6c <edid_print_cea+0xb8c>
					case 1:
						printf("3D_Structure)field_alternative ");
   83eec:	010002b4 	movhi	r4,10
   83ef0:	212a4e04 	addi	r4,r4,-22216
   83ef4:	008e5840 	call	8e584 <printf>
						break;
   83ef8:	00001c06 	br	83f6c <edid_print_cea+0xb8c>
					case 2:
						printf("3D_Structure)line_alternative ");
   83efc:	010002b4 	movhi	r4,10
   83f00:	212a5604 	addi	r4,r4,-22184
   83f04:	008e5840 	call	8e584 <printf>
						break;
   83f08:	00001806 	br	83f6c <edid_print_cea+0xb8c>
					case 3:
						printf("3D_Structure)side-by-side(full) ");
   83f0c:	010002b4 	movhi	r4,10
   83f10:	212a5e04 	addi	r4,r4,-22152
   83f14:	008e5840 	call	8e584 <printf>
						break;
   83f18:	00001406 	br	83f6c <edid_print_cea+0xb8c>
					case 4:
						printf("3D_Structure)L+depth ");
   83f1c:	010002b4 	movhi	r4,10
   83f20:	212a6704 	addi	r4,r4,-22116
   83f24:	008e5840 	call	8e584 <printf>
						break;
   83f28:	00001006 	br	83f6c <edid_print_cea+0xb8c>
					case 5:
						printf("3D_Structure)L+depth+graphics+graphics_depth ");
   83f2c:	010002b4 	movhi	r4,10
   83f30:	212a6d04 	addi	r4,r4,-22092
   83f34:	008e5840 	call	8e584 <printf>
						break;
   83f38:	00000c06 	br	83f6c <edid_print_cea+0xb8c>
					case 6:
						printf("3D_Structure)top-and-bottom ");
   83f3c:	010002b4 	movhi	r4,10
   83f40:	212a7904 	addi	r4,r4,-22044
   83f44:	008e5840 	call	8e584 <printf>
						break;
   83f48:	00000806 	br	83f6c <edid_print_cea+0xb8c>
					case 8:
						printf("3D_Structure)side-by-side(half) ");
   83f4c:	010002b4 	movhi	r4,10
   83f50:	212a8104 	addi	r4,r4,-22012
   83f54:	008e5840 	call	8e584 <printf>
						break;
   83f58:	00000406 	br	83f6c <edid_print_cea+0xb8c>
					default:
						printf("3D_Structure)unknown ");
   83f5c:	010002b4 	movhi	r4,10
   83f60:	212a8a04 	addi	r4,r4,-21976
   83f64:	008e5840 	call	8e584 <printf>
						break;
   83f68:	0001883a 	nop
					}

					if (cea->db_vsdb_hdmi.vic_3d[i].struct_3d == 0x08) {
   83f6c:	e0fffc17 	ldw	r3,-16(fp)
   83f70:	e0bff817 	ldw	r2,-32(fp)
   83f74:	10800324 	muli	r2,r2,12
   83f78:	1885883a 	add	r2,r3,r2
   83f7c:	1080b904 	addi	r2,r2,740
   83f80:	10800017 	ldw	r2,0(r2)
   83f84:	10800218 	cmpnei	r2,r2,8
   83f88:	1000361e 	bne	r2,zero,84064 <edid_print_cea+0xc84>
						switch (cea->db_vsdb_hdmi.vic_3d[i].detail_3d) {
   83f8c:	e0fffc17 	ldw	r3,-16(fp)
   83f90:	e0bff817 	ldw	r2,-32(fp)
   83f94:	10800324 	muli	r2,r2,12
   83f98:	1885883a 	add	r2,r3,r2
   83f9c:	1080ba04 	addi	r2,r2,744
   83fa0:	10800017 	ldw	r2,0(r2)
   83fa4:	10c002e8 	cmpgeui	r3,r2,11
   83fa8:	18002e1e 	bne	r3,zero,84064 <edid_print_cea+0xc84>
   83fac:	1085883a 	add	r2,r2,r2
   83fb0:	1087883a 	add	r3,r2,r2
   83fb4:	00800234 	movhi	r2,8
   83fb8:	108ff204 	addi	r2,r2,16328
   83fbc:	1885883a 	add	r2,r3,r2
   83fc0:	10800017 	ldw	r2,0(r2)
   83fc4:	1000683a 	jmp	r2
   83fc8:	00083ff4 	movhi	zero,8447
   83fcc:	00084004 	movi	zero,8448
   83fd0:	00084064 	muli	zero,zero,8449
   83fd4:	00084064 	muli	zero,zero,8449
   83fd8:	00084064 	muli	zero,zero,8449
   83fdc:	00084064 	muli	zero,zero,8449
   83fe0:	00084014 	movui	zero,8448
   83fe4:	00084024 	muli	zero,zero,8448
   83fe8:	00084034 	movhi	zero,8448
   83fec:	00084044 	movi	zero,8449
   83ff0:	00084054 	movui	zero,8449
						case 0:
							printf("3D_Detail)h_sub_sampling+four_quincunx_matrix");
   83ff4:	010002b4 	movhi	r4,10
   83ff8:	212a9004 	addi	r4,r4,-21952
   83ffc:	008e5840 	call	8e584 <printf>
							break;
   84000:	00001806 	br	84064 <edid_print_cea+0xc84>
						case 1:
							printf("3D_Detail)h_sub_sampling");
   84004:	010002b4 	movhi	r4,10
   84008:	212a9c04 	addi	r4,r4,-21904
   8400c:	008e5840 	call	8e584 <printf>
							break;
   84010:	00001406 	br	84064 <edid_print_cea+0xc84>
						case 6:
							printf("3D_Detail)all_4_sub_sampling_position");
   84014:	010002b4 	movhi	r4,10
   84018:	212aa304 	addi	r4,r4,-21876
   8401c:	008e5840 	call	8e584 <printf>
							break;
   84020:	00001006 	br	84064 <edid_print_cea+0xc84>
						case 7:
							printf("3D_Detail)odd_left+odd_right");
   84024:	010002b4 	movhi	r4,10
   84028:	212aad04 	addi	r4,r4,-21836
   8402c:	008e5840 	call	8e584 <printf>
							break;
   84030:	00000c06 	br	84064 <edid_print_cea+0xc84>
						case 8:
							printf("3D_Detail)odd_left+even_right");
   84034:	010002b4 	movhi	r4,10
   84038:	212ab504 	addi	r4,r4,-21804
   8403c:	008e5840 	call	8e584 <printf>
							break;
   84040:	00000806 	br	84064 <edid_print_cea+0xc84>
						case 9:
							printf("3D_Detail)even_left+odd_right");
   84044:	010002b4 	movhi	r4,10
   84048:	212abd04 	addi	r4,r4,-21772
   8404c:	008e5840 	call	8e584 <printf>
							break;
   84050:	00000406 	br	84064 <edid_print_cea+0xc84>
						case 10:
							printf("3D_Detail)even_left+even_right");
   84054:	010002b4 	movhi	r4,10
   84058:	212ac504 	addi	r4,r4,-21740
   8405c:	008e5840 	call	8e584 <printf>
							break;
   84060:	0001883a 	nop
						}
					}

					printf("\n");
   84064:	01000284 	movi	r4,10
   84068:	008e5c80 	call	8e5c8 <putchar>
				case 3:
					printf("         image size extra properties   : size correct (div by 5cm nearest rounded)\n");
					break;
				}

				for (i = 0; i < cea->db_vsdb_hdmi.nr_vic_3d; ++ i) {
   8406c:	e0bff817 	ldw	r2,-32(fp)
   84070:	10800044 	addi	r2,r2,1
   84074:	e0bff815 	stw	r2,-32(fp)
   84078:	e0bffc17 	ldw	r2,-16(fp)
   8407c:	1080b717 	ldw	r2,732(r2)
   84080:	e0fff817 	ldw	r3,-32(fp)
   84084:	18bf7216 	blt	r3,r2,83e50 <edid_print_cea+0xa70>

					printf("\n");
				}
			}

			break;
   84088:	00013206 	br	84554 <edid_print_cea+0x1174>

		case CEA_DB_SPEAKER:
			printf("\n  [%02d] speaker allocation data block ...\n", t);
   8408c:	010002b4 	movhi	r4,10
   84090:	212acd04 	addi	r4,r4,-21708
   84094:	e17ff917 	ldw	r5,-28(fp)
   84098:	008e5840 	call	8e584 <printf>

			printf("       RLC/RRC : %s\n", cea->db_speaker.designation & CEA_SPK_RLC_RRC ? "yes" : "no");
   8409c:	e0bffc17 	ldw	r2,-16(fp)
   840a0:	10809b17 	ldw	r2,620(r2)
   840a4:	1080100c 	andi	r2,r2,64
   840a8:	10000326 	beq	r2,zero,840b8 <edid_print_cea+0xcd8>
   840ac:	008002b4 	movhi	r2,10
   840b0:	10a7d704 	addi	r2,r2,-24740
   840b4:	00000206 	br	840c0 <edid_print_cea+0xce0>
   840b8:	008002b4 	movhi	r2,10
   840bc:	10a7d804 	addi	r2,r2,-24736
   840c0:	010002b4 	movhi	r4,10
   840c4:	212ad904 	addi	r4,r4,-21660
   840c8:	100b883a 	mov	r5,r2
   840cc:	008e5840 	call	8e584 <printf>
			printf("       FLC/FRC : %s\n", cea->db_speaker.designation & CEA_SPK_FLC_FRC ? "yes" : "no");
   840d0:	e0bffc17 	ldw	r2,-16(fp)
   840d4:	10809b17 	ldw	r2,620(r2)
   840d8:	1080080c 	andi	r2,r2,32
   840dc:	10000326 	beq	r2,zero,840ec <edid_print_cea+0xd0c>
   840e0:	008002b4 	movhi	r2,10
   840e4:	10a7d704 	addi	r2,r2,-24740
   840e8:	00000206 	br	840f4 <edid_print_cea+0xd14>
   840ec:	008002b4 	movhi	r2,10
   840f0:	10a7d804 	addi	r2,r2,-24736
   840f4:	010002b4 	movhi	r4,10
   840f8:	212adf04 	addi	r4,r4,-21636
   840fc:	100b883a 	mov	r5,r2
   84100:	008e5840 	call	8e584 <printf>
			printf("       RC      : %s\n", cea->db_speaker.designation & CEA_SPK_RC ? "yes" : "no");
   84104:	e0bffc17 	ldw	r2,-16(fp)
   84108:	10809b17 	ldw	r2,620(r2)
   8410c:	1080040c 	andi	r2,r2,16
   84110:	10000326 	beq	r2,zero,84120 <edid_print_cea+0xd40>
   84114:	008002b4 	movhi	r2,10
   84118:	10a7d704 	addi	r2,r2,-24740
   8411c:	00000206 	br	84128 <edid_print_cea+0xd48>
   84120:	008002b4 	movhi	r2,10
   84124:	10a7d804 	addi	r2,r2,-24736
   84128:	010002b4 	movhi	r4,10
   8412c:	212ae504 	addi	r4,r4,-21612
   84130:	100b883a 	mov	r5,r2
   84134:	008e5840 	call	8e584 <printf>
			printf("       RL/RR   : %s\n", cea->db_speaker.designation & CEA_SPK_RL_RR ? "yes" : "no");
   84138:	e0bffc17 	ldw	r2,-16(fp)
   8413c:	10809b17 	ldw	r2,620(r2)
   84140:	1080020c 	andi	r2,r2,8
   84144:	10000326 	beq	r2,zero,84154 <edid_print_cea+0xd74>
   84148:	008002b4 	movhi	r2,10
   8414c:	10a7d704 	addi	r2,r2,-24740
   84150:	00000206 	br	8415c <edid_print_cea+0xd7c>
   84154:	008002b4 	movhi	r2,10
   84158:	10a7d804 	addi	r2,r2,-24736
   8415c:	010002b4 	movhi	r4,10
   84160:	212aeb04 	addi	r4,r4,-21588
   84164:	100b883a 	mov	r5,r2
   84168:	008e5840 	call	8e584 <printf>
			printf("       FC      : %s\n", cea->db_speaker.designation & CEA_SPK_FC ? "yes" : "no");
   8416c:	e0bffc17 	ldw	r2,-16(fp)
   84170:	10809b17 	ldw	r2,620(r2)
   84174:	1080010c 	andi	r2,r2,4
   84178:	10000326 	beq	r2,zero,84188 <edid_print_cea+0xda8>
   8417c:	008002b4 	movhi	r2,10
   84180:	10a7d704 	addi	r2,r2,-24740
   84184:	00000206 	br	84190 <edid_print_cea+0xdb0>
   84188:	008002b4 	movhi	r2,10
   8418c:	10a7d804 	addi	r2,r2,-24736
   84190:	010002b4 	movhi	r4,10
   84194:	212af104 	addi	r4,r4,-21564
   84198:	100b883a 	mov	r5,r2
   8419c:	008e5840 	call	8e584 <printf>
			printf("       LFE     : %s\n", cea->db_speaker.designation & CEA_SPK_LFE ? "yes" : "no");
   841a0:	e0bffc17 	ldw	r2,-16(fp)
   841a4:	10809b17 	ldw	r2,620(r2)
   841a8:	1080008c 	andi	r2,r2,2
   841ac:	10000326 	beq	r2,zero,841bc <edid_print_cea+0xddc>
   841b0:	008002b4 	movhi	r2,10
   841b4:	10a7d704 	addi	r2,r2,-24740
   841b8:	00000206 	br	841c4 <edid_print_cea+0xde4>
   841bc:	008002b4 	movhi	r2,10
   841c0:	10a7d804 	addi	r2,r2,-24736
   841c4:	010002b4 	movhi	r4,10
   841c8:	212af704 	addi	r4,r4,-21540
   841cc:	100b883a 	mov	r5,r2
   841d0:	008e5840 	call	8e584 <printf>
			printf("       FL/FR   : %s\n", cea->db_speaker.designation & CEA_SPK_FL_FR ? "yes" : "no");
   841d4:	e0bffc17 	ldw	r2,-16(fp)
   841d8:	10809b17 	ldw	r2,620(r2)
   841dc:	1080004c 	andi	r2,r2,1
   841e0:	10000326 	beq	r2,zero,841f0 <edid_print_cea+0xe10>
   841e4:	008002b4 	movhi	r2,10
   841e8:	10a7d704 	addi	r2,r2,-24740
   841ec:	00000206 	br	841f8 <edid_print_cea+0xe18>
   841f0:	008002b4 	movhi	r2,10
   841f4:	10a7d804 	addi	r2,r2,-24736
   841f8:	010002b4 	movhi	r4,10
   841fc:	212afd04 	addi	r4,r4,-21516
   84200:	100b883a 	mov	r5,r2
   84204:	008e5840 	call	8e584 <printf>

			break;
   84208:	0000d506 	br	84560 <edid_print_cea+0x1180>

		case CEA_DB_DTC:
			printf("\n  [%02d] VESA DTC data block ... (todo)\n", t);
   8420c:	010002b4 	movhi	r4,10
   84210:	212b0304 	addi	r4,r4,-21492
   84214:	e17ff917 	ldw	r5,-28(fp)
   84218:	008e5840 	call	8e584 <printf>
			break;
   8421c:	0000d006 	br	84560 <edid_print_cea+0x1180>

		case CEA_DB_EXTENDED:
			switch (cea->dbe_tags[t]) {
   84220:	e0fffc17 	ldw	r3,-16(fp)
   84224:	e0bff917 	ldw	r2,-28(fp)
   84228:	1885883a 	add	r2,r3,r2
   8422c:	10801704 	addi	r2,r2,92
   84230:	10800083 	ldbu	r2,2(r2)
   84234:	10803fcc 	andi	r2,r2,255
   84238:	10c004e8 	cmpgeui	r3,r2,19
   8423c:	1800c71e 	bne	r3,zero,8455c <edid_print_cea+0x117c>
   84240:	1085883a 	add	r2,r2,r2
   84244:	1087883a 	add	r3,r2,r2
   84248:	00800234 	movhi	r2,8
   8424c:	10909704 	addi	r2,r2,16988
   84250:	1885883a 	add	r2,r3,r2
   84254:	10800017 	ldw	r2,0(r2)
   84258:	1000683a 	jmp	r2
   8425c:	000842a8 	cmpgeui	zero,zero,8458
   84260:	00084448 	cmpgei	zero,zero,8465
   84264:	0008445c 	xori	zero,zero,8465
   84268:	00084470 	cmpltui	zero,zero,8465
   8426c:	00084484 	movi	zero,8466
   84270:	00084498 	cmpnei	zero,zero,8466
   84274:	0008455c 	xori	zero,zero,8469
   84278:	0008455c 	xori	zero,zero,8469
   8427c:	0008455c 	xori	zero,zero,8469
   84280:	0008455c 	xori	zero,zero,8469
   84284:	0008455c 	xori	zero,zero,8469
   84288:	0008455c 	xori	zero,zero,8469
   8428c:	0008455c 	xori	zero,zero,8469
   84290:	0008455c 	xori	zero,zero,8469
   84294:	0008455c 	xori	zero,zero,8469
   84298:	0008455c 	xori	zero,zero,8469
   8429c:	000844e4 	muli	zero,zero,8467
   842a0:	000844f8 	rdprs	zero,zero,8467
   842a4:	0008450c 	andi	zero,zero,8468
			case CEA_DBE_VIDEO_CAP:
				printf("\n  [%02d] video capability data block (ext) ...\n", t);
   842a8:	010002b4 	movhi	r4,10
   842ac:	212b0e04 	addi	r4,r4,-21448
   842b0:	e17ff917 	ldw	r5,-28(fp)
   842b4:	008e5840 	call	8e584 <printf>

				printf("       quantization range selectable : %s\n", cea->db_vcdb.quant_range_sel ? "yes" : "no");
   842b8:	e0bffc17 	ldw	r2,-16(fp)
   842bc:	1080ea17 	ldw	r2,936(r2)
   842c0:	10000326 	beq	r2,zero,842d0 <edid_print_cea+0xef0>
   842c4:	008002b4 	movhi	r2,10
   842c8:	10a7d704 	addi	r2,r2,-24740
   842cc:	00000206 	br	842d8 <edid_print_cea+0xef8>
   842d0:	008002b4 	movhi	r2,10
   842d4:	10a7d804 	addi	r2,r2,-24736
   842d8:	010002b4 	movhi	r4,10
   842dc:	212b1b04 	addi	r4,r4,-21396
   842e0:	100b883a 	mov	r5,r2
   842e4:	008e5840 	call	8e584 <printf>

				switch (cea->db_vcdb.pt_scan_behavior) {
   842e8:	e0bffc17 	ldw	r2,-16(fp)
   842ec:	1080eb17 	ldw	r2,940(r2)
   842f0:	10c00060 	cmpeqi	r3,r2,1
   842f4:	18000d1e 	bne	r3,zero,8432c <edid_print_cea+0xf4c>
   842f8:	10c00088 	cmpgei	r3,r2,2
   842fc:	1800021e 	bne	r3,zero,84308 <edid_print_cea+0xf28>
   84300:	10000626 	beq	r2,zero,8431c <edid_print_cea+0xf3c>
   84304:	00001506 	br	8435c <edid_print_cea+0xf7c>
   84308:	10c000a0 	cmpeqi	r3,r2,2
   8430c:	18000b1e 	bne	r3,zero,8433c <edid_print_cea+0xf5c>
   84310:	108000e0 	cmpeqi	r2,r2,3
   84314:	10000d1e 	bne	r2,zero,8434c <edid_print_cea+0xf6c>
   84318:	00001006 	br	8435c <edid_print_cea+0xf7c>
				case 0:
					printf("       PT scan behavior              : none\n");
   8431c:	010002b4 	movhi	r4,10
   84320:	212b2604 	addi	r4,r4,-21352
   84324:	008e6680 	call	8e668 <puts>
					break;
   84328:	00000c06 	br	8435c <edid_print_cea+0xf7c>
				case 1:
					printf("       PT scan behavior              : overscanned always\n");
   8432c:	010002b4 	movhi	r4,10
   84330:	212b3104 	addi	r4,r4,-21308
   84334:	008e6680 	call	8e668 <puts>
					break;
   84338:	00000806 	br	8435c <edid_print_cea+0xf7c>
				case 2:
					printf("       PT scan behavior              : underscanned always\n");
   8433c:	010002b4 	movhi	r4,10
   84340:	212b4004 	addi	r4,r4,-21248
   84344:	008e6680 	call	8e668 <puts>
					break;
   84348:	00000406 	br	8435c <edid_print_cea+0xf7c>
				case 3:
					printf("       PT scan behavior              : supports both over/under-scan\n");
   8434c:	010002b4 	movhi	r4,10
   84350:	212b4f04 	addi	r4,r4,-21188
   84354:	008e6680 	call	8e668 <puts>
					break;
   84358:	0001883a 	nop
				}

				switch (cea->db_vcdb.it_scan_behavior) {
   8435c:	e0bffc17 	ldw	r2,-16(fp)
   84360:	1080ec17 	ldw	r2,944(r2)
   84364:	10c00060 	cmpeqi	r3,r2,1
   84368:	18000d1e 	bne	r3,zero,843a0 <edid_print_cea+0xfc0>
   8436c:	10c00088 	cmpgei	r3,r2,2
   84370:	1800021e 	bne	r3,zero,8437c <edid_print_cea+0xf9c>
   84374:	10000626 	beq	r2,zero,84390 <edid_print_cea+0xfb0>
   84378:	00001506 	br	843d0 <edid_print_cea+0xff0>
   8437c:	10c000a0 	cmpeqi	r3,r2,2
   84380:	18000b1e 	bne	r3,zero,843b0 <edid_print_cea+0xfd0>
   84384:	108000e0 	cmpeqi	r2,r2,3
   84388:	10000d1e 	bne	r2,zero,843c0 <edid_print_cea+0xfe0>
   8438c:	00001006 	br	843d0 <edid_print_cea+0xff0>
				case 0:
					printf("       IT scan behavior              : none\n");
   84390:	010002b4 	movhi	r4,10
   84394:	212b6104 	addi	r4,r4,-21116
   84398:	008e6680 	call	8e668 <puts>
					break;
   8439c:	00000c06 	br	843d0 <edid_print_cea+0xff0>
				case 1:
					printf("       IT scan behavior              : overscanned always\n");
   843a0:	010002b4 	movhi	r4,10
   843a4:	212b6c04 	addi	r4,r4,-21072
   843a8:	008e6680 	call	8e668 <puts>
					break;
   843ac:	00000806 	br	843d0 <edid_print_cea+0xff0>
				case 2:
					printf("       IT scan behavior              : underscanned always\n");
   843b0:	010002b4 	movhi	r4,10
   843b4:	212b7b04 	addi	r4,r4,-21012
   843b8:	008e6680 	call	8e668 <puts>
					break;
   843bc:	00000406 	br	843d0 <edid_print_cea+0xff0>
				case 3:
					printf("       IT scan behavior              : supports both over/under-scan\n");
   843c0:	010002b4 	movhi	r4,10
   843c4:	212b8a04 	addi	r4,r4,-20952
   843c8:	008e6680 	call	8e668 <puts>
					break;
   843cc:	0001883a 	nop
				}

				switch (cea->db_vcdb.ce_scan_behavior) {
   843d0:	e0bffc17 	ldw	r2,-16(fp)
   843d4:	1080ed17 	ldw	r2,948(r2)
   843d8:	10c00060 	cmpeqi	r3,r2,1
   843dc:	18000d1e 	bne	r3,zero,84414 <edid_print_cea+0x1034>
   843e0:	10c00088 	cmpgei	r3,r2,2
   843e4:	1800021e 	bne	r3,zero,843f0 <edid_print_cea+0x1010>
   843e8:	10000626 	beq	r2,zero,84404 <edid_print_cea+0x1024>
   843ec:	00001506 	br	84444 <edid_print_cea+0x1064>
   843f0:	10c000a0 	cmpeqi	r3,r2,2
   843f4:	18000b1e 	bne	r3,zero,84424 <edid_print_cea+0x1044>
   843f8:	108000e0 	cmpeqi	r2,r2,3
   843fc:	10000d1e 	bne	r2,zero,84434 <edid_print_cea+0x1054>
   84400:	00001006 	br	84444 <edid_print_cea+0x1064>
				case 0:
					printf("       CE scan behavior              : none\n");
   84404:	010002b4 	movhi	r4,10
   84408:	212b9c04 	addi	r4,r4,-20880
   8440c:	008e6680 	call	8e668 <puts>
					break;
   84410:	00000c06 	br	84444 <edid_print_cea+0x1064>
				case 1:
					printf("       CE scan behavior              : overscanned always\n");
   84414:	010002b4 	movhi	r4,10
   84418:	212ba704 	addi	r4,r4,-20836
   8441c:	008e6680 	call	8e668 <puts>
					break;
   84420:	00000806 	br	84444 <edid_print_cea+0x1064>
				case 2:
					printf("       CE scan behavior              : underscanned always\n");
   84424:	010002b4 	movhi	r4,10
   84428:	212bb604 	addi	r4,r4,-20776
   8442c:	008e6680 	call	8e668 <puts>
					break;
   84430:	00000406 	br	84444 <edid_print_cea+0x1064>
				case 3:
					printf("       CE scan behavior              : supports both over/under-scan\n");
   84434:	010002b4 	movhi	r4,10
   84438:	212bc504 	addi	r4,r4,-20716
   8443c:	008e6680 	call	8e668 <puts>
					break;
   84440:	0001883a 	nop
				}
				break;
   84444:	00003606 	br	84520 <edid_print_cea+0x1140>
			case CEA_DBE_VIDEO_VENDOR:
				printf("\n  [%02d] vendor-specific video data block (ext) ... (todo)\n", t);
   84448:	010002b4 	movhi	r4,10
   8444c:	212bd704 	addi	r4,r4,-20644
   84450:	e17ff917 	ldw	r5,-28(fp)
   84454:	008e5840 	call	8e584 <printf>
				break;
   84458:	00003106 	br	84520 <edid_print_cea+0x1140>
			case CEA_DBE_VIDEO_DDI:
				printf("\n  [%02d] VESA video display device information data block (ext) ... (todo)\n", t);
   8445c:	010002b4 	movhi	r4,10
   84460:	212be704 	addi	r4,r4,-20580
   84464:	e17ff917 	ldw	r5,-28(fp)
   84468:	008e5840 	call	8e584 <printf>
				break;
   8446c:	00002c06 	br	84520 <edid_print_cea+0x1140>
			case CEA_DBE_VIDEO_VESA:
				printf("\n  [%02d] VESA video data block (ext) ... (todo)\n", t);
   84470:	010002b4 	movhi	r4,10
   84474:	212bfb04 	addi	r4,r4,-20500
   84478:	e17ff917 	ldw	r5,-28(fp)
   8447c:	008e5840 	call	8e584 <printf>
				break;
   84480:	00002706 	br	84520 <edid_print_cea+0x1140>
			case CEA_DBE_VIDEO_HDMI:
				printf("\n  [%02d] HDMI video data block (ext) ... (todo)\n", t);
   84484:	010002b4 	movhi	r4,10
   84488:	212c0804 	addi	r4,r4,-20448
   8448c:	e17ff917 	ldw	r5,-28(fp)
   84490:	008e5840 	call	8e584 <printf>
				break;
   84494:	00002206 	br	84520 <edid_print_cea+0x1140>
			case CEA_DBE_COLORIMETRY:
				printf("\n  [%02d] colorimetry data block (ext) ... (todo)\n", t);
   84498:	010002b4 	movhi	r4,10
   8449c:	212c1504 	addi	r4,r4,-20396
   844a0:	e17ff917 	ldw	r5,-28(fp)
   844a4:	008e5840 	call	8e584 <printf>
				cea->db_colorimetry.xvYCC = (int)(c[2] & 0x03);
   844a8:	e0bffd17 	ldw	r2,-12(fp)
   844ac:	10800084 	addi	r2,r2,2
   844b0:	10800003 	ldbu	r2,0(r2)
   844b4:	10803fcc 	andi	r2,r2,255
   844b8:	10c000cc 	andi	r3,r2,3
   844bc:	e0bffc17 	ldw	r2,-16(fp)
   844c0:	10c0e815 	stw	r3,928(r2)
				cea->db_colorimetry.metadata = (int)(c[3] & 0x07);
   844c4:	e0bffd17 	ldw	r2,-12(fp)
   844c8:	108000c4 	addi	r2,r2,3
   844cc:	10800003 	ldbu	r2,0(r2)
   844d0:	10803fcc 	andi	r2,r2,255
   844d4:	10c001cc 	andi	r3,r2,7
   844d8:	e0bffc17 	ldw	r2,-16(fp)
   844dc:	10c0e915 	stw	r3,932(r2)
				break;
   844e0:	00000f06 	br	84520 <edid_print_cea+0x1140>
			case CEA_DBE_AUDIO_MISC:
				printf("\n  [%02d] CEA misc audio fields (ext) ... (todo)\n", t);
   844e4:	010002b4 	movhi	r4,10
   844e8:	212c2204 	addi	r4,r4,-20344
   844ec:	e17ff917 	ldw	r5,-28(fp)
   844f0:	008e5840 	call	8e584 <printf>
				break;
   844f4:	00000a06 	br	84520 <edid_print_cea+0x1140>
			case CEA_DBE_AUDIO_VENDOR:
				printf("\n  [%02d] vendor-specific audio data block (ext) ... (todo)\n", t);
   844f8:	010002b4 	movhi	r4,10
   844fc:	212c2f04 	addi	r4,r4,-20292
   84500:	e17ff917 	ldw	r5,-28(fp)
   84504:	008e5840 	call	8e584 <printf>
				break;
   84508:	00000506 	br	84520 <edid_print_cea+0x1140>
			case CEA_DBE_AUDIO_HDMI:
				printf("\n  [%02d] HDMI audio data block (ext) ... (todo)\n", t);
   8450c:	010002b4 	movhi	r4,10
   84510:	212c3f04 	addi	r4,r4,-20228
   84514:	e17ff917 	ldw	r5,-28(fp)
   84518:	008e5840 	call	8e584 <printf>
				break;
   8451c:	0001883a 	nop
			}

			break;
   84520:	00000e06 	br	8455c <edid_print_cea+0x117c>

		default:
			printf("\n  [%02d] unknown data block (%d).\n", t, cea->dbc_tags[t]);
   84524:	e0fffc17 	ldw	r3,-16(fp)
   84528:	e0bff917 	ldw	r2,-28(fp)
   8452c:	1885883a 	add	r2,r3,r2
   84530:	10800804 	addi	r2,r2,32
   84534:	10800003 	ldbu	r2,0(r2)
   84538:	10803fcc 	andi	r2,r2,255
   8453c:	010002b4 	movhi	r4,10
   84540:	212c4c04 	addi	r4,r4,-20176
   84544:	e17ff917 	ldw	r5,-28(fp)
   84548:	100d883a 	mov	r6,r2
   8454c:	008e5840 	call	8e584 <printf>
			break;
   84550:	00000306 	br	84560 <edid_print_cea+0x1180>

					printf("\n");
				}
			}

			break;
   84554:	0001883a 	nop
   84558:	00000106 	br	84560 <edid_print_cea+0x1180>
			case CEA_DBE_AUDIO_HDMI:
				printf("\n  [%02d] HDMI audio data block (ext) ... (todo)\n", t);
				break;
			}

			break;
   8455c:	0001883a 	nop
	printf("  supports YCbCr 4:2:2 in addition to RGB      : %s\n", cea->flags.ycbcr422 ? "yes" : "no");

	printf("\n  data block collections\n  ---------------------------------\n");

	// data block collection
	for (t = 0; t < cea->nr_dbcs; ++t) {
   84560:	e0bff917 	ldw	r2,-28(fp)
   84564:	10800044 	addi	r2,r2,1
   84568:	e0bff915 	stw	r2,-28(fp)
   8456c:	e0bffc17 	ldw	r2,-16(fp)
   84570:	10800717 	ldw	r2,28(r2)
   84574:	e0fff917 	ldw	r3,-28(fp)
   84578:	18bbf816 	blt	r3,r2,8355c <edid_print_cea+0x17c>
			printf("\n  [%02d] unknown data block (%d).\n", t, cea->dbc_tags[t]);
			break;
		}
	}

	if (cea->nr_dtd != 0)
   8457c:	e0bffc17 	ldw	r2,-16(fp)
   84580:	10800617 	ldw	r2,24(r2)
   84584:	10000326 	beq	r2,zero,84594 <edid_print_cea+0x11b4>
		printf("\n  detailed timing descriptors\n  ---------------------------------\n");
   84588:	010002b4 	movhi	r4,10
   8458c:	212c5504 	addi	r4,r4,-20140
   84590:	008e6680 	call	8e668 <puts>

	// detail timing descriptor
	for (i = 0; i < (int)cea->nr_dtd; ++i) {
   84594:	e03ff815 	stw	zero,-32(fp)
   84598:	00019b06 	br	84c08 <edid_print_cea+0x1828>

		printf("\n  [%d] DTD -- detailed timing descriptor\n", i);
   8459c:	010002b4 	movhi	r4,10
   845a0:	212c6604 	addi	r4,r4,-20072
   845a4:	e17ff817 	ldw	r5,-32(fp)
   845a8:	008e5840 	call	8e584 <printf>

		printf("      pixel clock   : %d (Hz)\n", cea->detailed_timing[i].pixel_clock);
   845ac:	e0fffc17 	ldw	r3,-16(fp)
   845b0:	e0bff817 	ldw	r2,-32(fp)
   845b4:	100491ba 	slli	r2,r2,6
   845b8:	1885883a 	add	r2,r3,r2
   845bc:	1080ee04 	addi	r2,r2,952
   845c0:	10800017 	ldw	r2,0(r2)
   845c4:	010002b4 	movhi	r4,10
   845c8:	212c7104 	addi	r4,r4,-20028
   845cc:	100b883a 	mov	r5,r2
   845d0:	008e5840 	call	8e584 <printf>
		printf("      h addressible : %d (pixels)\n", cea->detailed_timing[i].width);
   845d4:	e0fffc17 	ldw	r3,-16(fp)
   845d8:	e0bff817 	ldw	r2,-32(fp)
   845dc:	100491ba 	slli	r2,r2,6
   845e0:	1885883a 	add	r2,r3,r2
   845e4:	1080ef04 	addi	r2,r2,956
   845e8:	10800017 	ldw	r2,0(r2)
   845ec:	010002b4 	movhi	r4,10
   845f0:	212c7904 	addi	r4,r4,-19996
   845f4:	100b883a 	mov	r5,r2
   845f8:	008e5840 	call	8e584 <printf>
		printf("        blank       : %d (pixels)\n", cea->detailed_timing[i].h_blank);
   845fc:	e0fffc17 	ldw	r3,-16(fp)
   84600:	e0bff817 	ldw	r2,-32(fp)
   84604:	100491ba 	slli	r2,r2,6
   84608:	1885883a 	add	r2,r3,r2
   8460c:	1080f104 	addi	r2,r2,964
   84610:	10800017 	ldw	r2,0(r2)
   84614:	010002b4 	movhi	r4,10
   84618:	212c8204 	addi	r4,r4,-19960
   8461c:	100b883a 	mov	r5,r2
   84620:	008e5840 	call	8e584 <printf>
		printf("        fp          : %d (pixels)\n", cea->detailed_timing[i].h_fp);
   84624:	e0fffc17 	ldw	r3,-16(fp)
   84628:	e0bff817 	ldw	r2,-32(fp)
   8462c:	100491ba 	slli	r2,r2,6
   84630:	1885883a 	add	r2,r3,r2
   84634:	1080f304 	addi	r2,r2,972
   84638:	10800017 	ldw	r2,0(r2)
   8463c:	010002b4 	movhi	r4,10
   84640:	212c8b04 	addi	r4,r4,-19924
   84644:	100b883a 	mov	r5,r2
   84648:	008e5840 	call	8e584 <printf>
		printf("        sync        : %d (pixels)\n", cea->detailed_timing[i].h_sync);
   8464c:	e0fffc17 	ldw	r3,-16(fp)
   84650:	e0bff817 	ldw	r2,-32(fp)
   84654:	100491ba 	slli	r2,r2,6
   84658:	1885883a 	add	r2,r3,r2
   8465c:	1080f504 	addi	r2,r2,980
   84660:	10800017 	ldw	r2,0(r2)
   84664:	010002b4 	movhi	r4,10
   84668:	212c9404 	addi	r4,r4,-19888
   8466c:	100b883a 	mov	r5,r2
   84670:	008e5840 	call	8e584 <printf>
		printf("        bp          : %d (pixels)\n", cea->detailed_timing[i].h_blank - cea->detailed_timing[i].h_fp - cea->detailed_timing[i].h_sync);
   84674:	e0fffc17 	ldw	r3,-16(fp)
   84678:	e0bff817 	ldw	r2,-32(fp)
   8467c:	100491ba 	slli	r2,r2,6
   84680:	1885883a 	add	r2,r3,r2
   84684:	1080f104 	addi	r2,r2,964
   84688:	10c00017 	ldw	r3,0(r2)
   8468c:	e13ffc17 	ldw	r4,-16(fp)
   84690:	e0bff817 	ldw	r2,-32(fp)
   84694:	100491ba 	slli	r2,r2,6
   84698:	2085883a 	add	r2,r4,r2
   8469c:	1080f304 	addi	r2,r2,972
   846a0:	10800017 	ldw	r2,0(r2)
   846a4:	1887c83a 	sub	r3,r3,r2
   846a8:	e13ffc17 	ldw	r4,-16(fp)
   846ac:	e0bff817 	ldw	r2,-32(fp)
   846b0:	100491ba 	slli	r2,r2,6
   846b4:	2085883a 	add	r2,r4,r2
   846b8:	1080f504 	addi	r2,r2,980
   846bc:	10800017 	ldw	r2,0(r2)
   846c0:	1885c83a 	sub	r2,r3,r2
   846c4:	010002b4 	movhi	r4,10
   846c8:	212c9d04 	addi	r4,r4,-19852
   846cc:	100b883a 	mov	r5,r2
   846d0:	008e5840 	call	8e584 <printf>
		printf("        size        : %d (mm)\n", cea->detailed_timing[i].h_size);
   846d4:	e0fffc17 	ldw	r3,-16(fp)
   846d8:	e0bff817 	ldw	r2,-32(fp)
   846dc:	100491ba 	slli	r2,r2,6
   846e0:	1885883a 	add	r2,r3,r2
   846e4:	1080f704 	addi	r2,r2,988
   846e8:	10800017 	ldw	r2,0(r2)
   846ec:	010002b4 	movhi	r4,10
   846f0:	212ca604 	addi	r4,r4,-19816
   846f4:	100b883a 	mov	r5,r2
   846f8:	008e5840 	call	8e584 <printf>
		printf("      v addressible : %d (lines)\n", cea->detailed_timing[i].height);
   846fc:	e0fffc17 	ldw	r3,-16(fp)
   84700:	e0bff817 	ldw	r2,-32(fp)
   84704:	108003c4 	addi	r2,r2,15
   84708:	100491ba 	slli	r2,r2,6
   8470c:	1885883a 	add	r2,r3,r2
   84710:	10800017 	ldw	r2,0(r2)
   84714:	010002b4 	movhi	r4,10
   84718:	212cae04 	addi	r4,r4,-19784
   8471c:	100b883a 	mov	r5,r2
   84720:	008e5840 	call	8e584 <printf>
		printf("        blank       : %d (lines)\n", cea->detailed_timing[i].v_blank);
   84724:	e0fffc17 	ldw	r3,-16(fp)
   84728:	e0bff817 	ldw	r2,-32(fp)
   8472c:	100491ba 	slli	r2,r2,6
   84730:	1885883a 	add	r2,r3,r2
   84734:	1080f204 	addi	r2,r2,968
   84738:	10800017 	ldw	r2,0(r2)
   8473c:	010002b4 	movhi	r4,10
   84740:	212cb704 	addi	r4,r4,-19748
   84744:	100b883a 	mov	r5,r2
   84748:	008e5840 	call	8e584 <printf>
		printf("        fp          : %d (lines)\n", cea->detailed_timing[i].v_fp);
   8474c:	e0fffc17 	ldw	r3,-16(fp)
   84750:	e0bff817 	ldw	r2,-32(fp)
   84754:	100491ba 	slli	r2,r2,6
   84758:	1885883a 	add	r2,r3,r2
   8475c:	1080f404 	addi	r2,r2,976
   84760:	10800017 	ldw	r2,0(r2)
   84764:	010002b4 	movhi	r4,10
   84768:	212cc004 	addi	r4,r4,-19712
   8476c:	100b883a 	mov	r5,r2
   84770:	008e5840 	call	8e584 <printf>
		printf("        sync        : %d (lines)\n", cea->detailed_timing[i].v_sync);
   84774:	e0fffc17 	ldw	r3,-16(fp)
   84778:	e0bff817 	ldw	r2,-32(fp)
   8477c:	100491ba 	slli	r2,r2,6
   84780:	1885883a 	add	r2,r3,r2
   84784:	1080f604 	addi	r2,r2,984
   84788:	10800017 	ldw	r2,0(r2)
   8478c:	010002b4 	movhi	r4,10
   84790:	212cc904 	addi	r4,r4,-19676
   84794:	100b883a 	mov	r5,r2
   84798:	008e5840 	call	8e584 <printf>
		printf("        bp          : %d (lines)\n", cea->detailed_timing[i].v_blank - cea->detailed_timing[i].v_fp - cea->detailed_timing[i].v_sync);
   8479c:	e0fffc17 	ldw	r3,-16(fp)
   847a0:	e0bff817 	ldw	r2,-32(fp)
   847a4:	100491ba 	slli	r2,r2,6
   847a8:	1885883a 	add	r2,r3,r2
   847ac:	1080f204 	addi	r2,r2,968
   847b0:	10c00017 	ldw	r3,0(r2)
   847b4:	e13ffc17 	ldw	r4,-16(fp)
   847b8:	e0bff817 	ldw	r2,-32(fp)
   847bc:	100491ba 	slli	r2,r2,6
   847c0:	2085883a 	add	r2,r4,r2
   847c4:	1080f404 	addi	r2,r2,976
   847c8:	10800017 	ldw	r2,0(r2)
   847cc:	1887c83a 	sub	r3,r3,r2
   847d0:	e13ffc17 	ldw	r4,-16(fp)
   847d4:	e0bff817 	ldw	r2,-32(fp)
   847d8:	100491ba 	slli	r2,r2,6
   847dc:	2085883a 	add	r2,r4,r2
   847e0:	1080f604 	addi	r2,r2,984
   847e4:	10800017 	ldw	r2,0(r2)
   847e8:	1885c83a 	sub	r2,r3,r2
   847ec:	010002b4 	movhi	r4,10
   847f0:	212cd204 	addi	r4,r4,-19640
   847f4:	100b883a 	mov	r5,r2
   847f8:	008e5840 	call	8e584 <printf>
		printf("        size        : %d (mm)\n", cea->detailed_timing[i].v_size);
   847fc:	e0fffc17 	ldw	r3,-16(fp)
   84800:	e0bff817 	ldw	r2,-32(fp)
   84804:	100491ba 	slli	r2,r2,6
   84808:	1885883a 	add	r2,r3,r2
   8480c:	1080f804 	addi	r2,r2,992
   84810:	10800017 	ldw	r2,0(r2)
   84814:	010002b4 	movhi	r4,10
   84818:	212ca604 	addi	r4,r4,-19816
   8481c:	100b883a 	mov	r5,r2
   84820:	008e5840 	call	8e584 <printf>
		printf("      border (L&R)  : %d (pixels)\n", cea->detailed_timing[i].border_lr);
   84824:	e0fffc17 	ldw	r3,-16(fp)
   84828:	e0bff817 	ldw	r2,-32(fp)
   8482c:	100491ba 	slli	r2,r2,6
   84830:	1885883a 	add	r2,r3,r2
   84834:	1080f904 	addi	r2,r2,996
   84838:	10800017 	ldw	r2,0(r2)
   8483c:	010002b4 	movhi	r4,10
   84840:	212cdb04 	addi	r4,r4,-19604
   84844:	100b883a 	mov	r5,r2
   84848:	008e5840 	call	8e584 <printf>
		printf("      border (T&B)  : %d (lines)\n", cea->detailed_timing[i].border_tb);
   8484c:	e0fffc17 	ldw	r3,-16(fp)
   84850:	e0bff817 	ldw	r2,-32(fp)
   84854:	100491ba 	slli	r2,r2,6
   84858:	1885883a 	add	r2,r3,r2
   8485c:	1080fa04 	addi	r2,r2,1000
   84860:	10800017 	ldw	r2,0(r2)
   84864:	010002b4 	movhi	r4,10
   84868:	212ce404 	addi	r4,r4,-19568
   8486c:	100b883a 	mov	r5,r2
   84870:	008e5840 	call	8e584 <printf>
		printf("      interlaced    : %d\n", cea->detailed_timing[i].interlaced);
   84874:	e0fffc17 	ldw	r3,-16(fp)
   84878:	e0bff817 	ldw	r2,-32(fp)
   8487c:	100491ba 	slli	r2,r2,6
   84880:	1885883a 	add	r2,r3,r2
   84884:	1080fb04 	addi	r2,r2,1004
   84888:	10800017 	ldw	r2,0(r2)
   8488c:	010002b4 	movhi	r4,10
   84890:	212ced04 	addi	r4,r4,-19532
   84894:	100b883a 	mov	r5,r2
   84898:	008e5840 	call	8e584 <printf>

		if (cea->detailed_timing[i].stereo == STEREO_NONE) {
   8489c:	e0fffc17 	ldw	r3,-16(fp)
   848a0:	e0bff817 	ldw	r2,-32(fp)
   848a4:	100491ba 	slli	r2,r2,6
   848a8:	1885883a 	add	r2,r3,r2
   848ac:	1080fc04 	addi	r2,r2,1008
   848b0:	10800017 	ldw	r2,0(r2)
   848b4:	1000041e 	bne	r2,zero,848c8 <edid_print_cea+0x14e8>
			printf("      stereo        : none\n");
   848b8:	010002b4 	movhi	r4,10
   848bc:	212cf404 	addi	r4,r4,-19504
   848c0:	008e6680 	call	8e668 <puts>
   848c4:	00004706 	br	849e4 <edid_print_cea+0x1604>
		} else {
    		printf("      stereo        : ");
   848c8:	010002b4 	movhi	r4,10
   848cc:	212cfb04 	addi	r4,r4,-19476
   848d0:	008e5840 	call	8e584 <printf>

    		if (cea->detailed_timing[i].stereo & STEREO_FIELD_SEQUENTIAL_RIGHT_SYNC)
   848d4:	e0fffc17 	ldw	r3,-16(fp)
   848d8:	e0bff817 	ldw	r2,-32(fp)
   848dc:	100491ba 	slli	r2,r2,6
   848e0:	1885883a 	add	r2,r3,r2
   848e4:	1080fc04 	addi	r2,r2,1008
   848e8:	10800017 	ldw	r2,0(r2)
   848ec:	1080008c 	andi	r2,r2,2
   848f0:	10000326 	beq	r2,zero,84900 <edid_print_cea+0x1520>
        		printf("field_seq_right ");
   848f4:	010002b4 	movhi	r4,10
   848f8:	212d0104 	addi	r4,r4,-19452
   848fc:	008e5840 	call	8e584 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_FIELD_SEQUENTIAL_LEFT_SYNC)
   84900:	e0fffc17 	ldw	r3,-16(fp)
   84904:	e0bff817 	ldw	r2,-32(fp)
   84908:	100491ba 	slli	r2,r2,6
   8490c:	1885883a 	add	r2,r3,r2
   84910:	1080fc04 	addi	r2,r2,1008
   84914:	10800017 	ldw	r2,0(r2)
   84918:	1080010c 	andi	r2,r2,4
   8491c:	10000326 	beq	r2,zero,8492c <edid_print_cea+0x154c>
        		printf("field_seq_left ");
   84920:	010002b4 	movhi	r4,10
   84924:	212d0604 	addi	r4,r4,-19432
   84928:	008e5840 	call	8e584 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_2WAY_INTERLEAVE_RIGHT_EVEN)
   8492c:	e0fffc17 	ldw	r3,-16(fp)
   84930:	e0bff817 	ldw	r2,-32(fp)
   84934:	100491ba 	slli	r2,r2,6
   84938:	1885883a 	add	r2,r3,r2
   8493c:	1080fc04 	addi	r2,r2,1008
   84940:	10800017 	ldw	r2,0(r2)
   84944:	1080020c 	andi	r2,r2,8
   84948:	10000326 	beq	r2,zero,84958 <edid_print_cea+0x1578>
        		printf("2way_interleave_right ");
   8494c:	010002b4 	movhi	r4,10
   84950:	212d0a04 	addi	r4,r4,-19416
   84954:	008e5840 	call	8e584 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_2WAY_INTERLEAVE_LEFT_EVEN)
   84958:	e0fffc17 	ldw	r3,-16(fp)
   8495c:	e0bff817 	ldw	r2,-32(fp)
   84960:	100491ba 	slli	r2,r2,6
   84964:	1885883a 	add	r2,r3,r2
   84968:	1080fc04 	addi	r2,r2,1008
   8496c:	10800017 	ldw	r2,0(r2)
   84970:	1080040c 	andi	r2,r2,16
   84974:	10000326 	beq	r2,zero,84984 <edid_print_cea+0x15a4>
        		printf("2way_interleave_left ");
   84978:	010002b4 	movhi	r4,10
   8497c:	212d1004 	addi	r4,r4,-19392
   84980:	008e5840 	call	8e584 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_4WAY_INTERLEAVE)
   84984:	e0fffc17 	ldw	r3,-16(fp)
   84988:	e0bff817 	ldw	r2,-32(fp)
   8498c:	100491ba 	slli	r2,r2,6
   84990:	1885883a 	add	r2,r3,r2
   84994:	1080fc04 	addi	r2,r2,1008
   84998:	10800017 	ldw	r2,0(r2)
   8499c:	1080080c 	andi	r2,r2,32
   849a0:	10000326 	beq	r2,zero,849b0 <edid_print_cea+0x15d0>
        		printf("4way_interleave ");
   849a4:	010002b4 	movhi	r4,10
   849a8:	212d1604 	addi	r4,r4,-19368
   849ac:	008e5840 	call	8e584 <printf>
    		if (cea->detailed_timing[i].stereo & STEREO_SIDE_BY_SIDE_INTERLEAVE)
   849b0:	e0fffc17 	ldw	r3,-16(fp)
   849b4:	e0bff817 	ldw	r2,-32(fp)
   849b8:	100491ba 	slli	r2,r2,6
   849bc:	1885883a 	add	r2,r3,r2
   849c0:	1080fc04 	addi	r2,r2,1008
   849c4:	10800017 	ldw	r2,0(r2)
   849c8:	1080100c 	andi	r2,r2,64
   849cc:	10000326 	beq	r2,zero,849dc <edid_print_cea+0x15fc>
        		printf("side-by-side ");
   849d0:	010002b4 	movhi	r4,10
   849d4:	212d1b04 	addi	r4,r4,-19348
   849d8:	008e5840 	call	8e584 <printf>

    		printf("\n");
   849dc:	01000284 	movi	r4,10
   849e0:	008e5c80 	call	8e5c8 <putchar>
		}

		if (cea->detailed_timing[i].sync & A_COMPOSITE_SYNC) {
   849e4:	e0fffc17 	ldw	r3,-16(fp)
   849e8:	e0bff817 	ldw	r2,-32(fp)
   849ec:	100491ba 	slli	r2,r2,6
   849f0:	1885883a 	add	r2,r3,r2
   849f4:	1080fd04 	addi	r2,r2,1012
   849f8:	10800017 	ldw	r2,0(r2)
   849fc:	1080004c 	andi	r2,r2,1
   84a00:	10003626 	beq	r2,zero,84adc <edid_print_cea+0x16fc>

			printf("      analog sync   : composite");
   84a04:	010002b4 	movhi	r4,10
   84a08:	212d1f04 	addi	r4,r4,-19332
   84a0c:	008e5840 	call	8e584 <printf>

    		if (cea->detailed_timing[i].sync & A_COMPOSITE_SYNC)
   84a10:	e0fffc17 	ldw	r3,-16(fp)
   84a14:	e0bff817 	ldw	r2,-32(fp)
   84a18:	100491ba 	slli	r2,r2,6
   84a1c:	1885883a 	add	r2,r3,r2
   84a20:	1080fd04 	addi	r2,r2,1012
   84a24:	10800017 	ldw	r2,0(r2)
   84a28:	1080004c 	andi	r2,r2,1
   84a2c:	10000326 	beq	r2,zero,84a3c <edid_print_cea+0x165c>
        		printf(" bipolar");
   84a30:	010002b4 	movhi	r4,10
   84a34:	212d2704 	addi	r4,r4,-19300
   84a38:	008e5840 	call	8e584 <printf>

    		if (cea->detailed_timing[i].sync & A_BIPOLAR_SERRATION) {
   84a3c:	e0fffc17 	ldw	r3,-16(fp)
   84a40:	e0bff817 	ldw	r2,-32(fp)
   84a44:	100491ba 	slli	r2,r2,6
   84a48:	1885883a 	add	r2,r3,r2
   84a4c:	1080fd04 	addi	r2,r2,1012
   84a50:	10800017 	ldw	r2,0(r2)
   84a54:	1080010c 	andi	r2,r2,4
   84a58:	10001a26 	beq	r2,zero,84ac4 <edid_print_cea+0x16e4>
        		printf(" with_serrations");
   84a5c:	010002b4 	movhi	r4,10
   84a60:	212d2a04 	addi	r4,r4,-19288
   84a64:	008e5840 	call	8e584 <printf>
    			if (cea->detailed_timing[i].sync & A_BIPOLAR_SERRATION_SYNC_G)
   84a68:	e0fffc17 	ldw	r3,-16(fp)
   84a6c:	e0bff817 	ldw	r2,-32(fp)
   84a70:	100491ba 	slli	r2,r2,6
   84a74:	1885883a 	add	r2,r3,r2
   84a78:	1080fd04 	addi	r2,r2,1012
   84a7c:	10800017 	ldw	r2,0(r2)
   84a80:	1080020c 	andi	r2,r2,8
   84a84:	10000326 	beq	r2,zero,84a94 <edid_print_cea+0x16b4>
					printf(" syn_on_green");
   84a88:	010002b4 	movhi	r4,10
   84a8c:	212d2f04 	addi	r4,r4,-19268
   84a90:	008e5840 	call	8e584 <printf>
				if (cea->detailed_timing[i].sync & A_BIPOLAR_SERRATION_SYNC_RGB)
   84a94:	e0fffc17 	ldw	r3,-16(fp)
   84a98:	e0bff817 	ldw	r2,-32(fp)
   84a9c:	100491ba 	slli	r2,r2,6
   84aa0:	1885883a 	add	r2,r3,r2
   84aa4:	1080fd04 	addi	r2,r2,1012
   84aa8:	10800017 	ldw	r2,0(r2)
   84aac:	1080040c 	andi	r2,r2,16
   84ab0:	10000726 	beq	r2,zero,84ad0 <edid_print_cea+0x16f0>
					printf(" syn_on_rgb");
   84ab4:	010002b4 	movhi	r4,10
   84ab8:	212d3304 	addi	r4,r4,-19252
   84abc:	008e5840 	call	8e584 <printf>
   84ac0:	00000306 	br	84ad0 <edid_print_cea+0x16f0>
    		} else {
        		printf(" without_serrations");
   84ac4:	010002b4 	movhi	r4,10
   84ac8:	212d3604 	addi	r4,r4,-19240
   84acc:	008e5840 	call	8e584 <printf>
    		}

			printf("\n");
   84ad0:	01000284 	movi	r4,10
   84ad4:	008e5c80 	call	8e5c8 <putchar>
   84ad8:	00004806 	br	84bfc <edid_print_cea+0x181c>

		} else if (cea->detailed_timing[i].sync & D_COMPOSITE_SYNC) {
   84adc:	e0fffc17 	ldw	r3,-16(fp)
   84ae0:	e0bff817 	ldw	r2,-32(fp)
   84ae4:	100491ba 	slli	r2,r2,6
   84ae8:	1885883a 	add	r2,r3,r2
   84aec:	1080fd04 	addi	r2,r2,1012
   84af0:	10800017 	ldw	r2,0(r2)
   84af4:	1080080c 	andi	r2,r2,32
   84af8:	10001526 	beq	r2,zero,84b50 <edid_print_cea+0x1770>

			printf("      digital sync  : composite");
   84afc:	010002b4 	movhi	r4,10
   84b00:	212d3b04 	addi	r4,r4,-19220
   84b04:	008e5840 	call	8e584 <printf>

    		if (cea->detailed_timing[i].sync & D_COMPOSITE_SERRATION)
   84b08:	e0fffc17 	ldw	r3,-16(fp)
   84b0c:	e0bff817 	ldw	r2,-32(fp)
   84b10:	100491ba 	slli	r2,r2,6
   84b14:	1885883a 	add	r2,r3,r2
   84b18:	1080fd04 	addi	r2,r2,1012
   84b1c:	10800017 	ldw	r2,0(r2)
   84b20:	1080100c 	andi	r2,r2,64
   84b24:	10000426 	beq	r2,zero,84b38 <edid_print_cea+0x1758>
        		printf(" with_serrations");
   84b28:	010002b4 	movhi	r4,10
   84b2c:	212d2a04 	addi	r4,r4,-19288
   84b30:	008e5840 	call	8e584 <printf>
   84b34:	00000306 	br	84b44 <edid_print_cea+0x1764>
    		else
    			printf(" without_serrations");
   84b38:	010002b4 	movhi	r4,10
   84b3c:	212d3604 	addi	r4,r4,-19240
   84b40:	008e5840 	call	8e584 <printf>

    		printf("\n");
   84b44:	01000284 	movi	r4,10
   84b48:	008e5c80 	call	8e5c8 <putchar>
   84b4c:	00002b06 	br	84bfc <edid_print_cea+0x181c>

		} else if (cea->detailed_timing[i].sync & D_SEPERATE_SYNC) {
   84b50:	e0fffc17 	ldw	r3,-16(fp)
   84b54:	e0bff817 	ldw	r2,-32(fp)
   84b58:	100491ba 	slli	r2,r2,6
   84b5c:	1885883a 	add	r2,r3,r2
   84b60:	1080fd04 	addi	r2,r2,1012
   84b64:	10800017 	ldw	r2,0(r2)
   84b68:	1080200c 	andi	r2,r2,128
   84b6c:	10002326 	beq	r2,zero,84bfc <edid_print_cea+0x181c>

			printf("      digital sync  : seperate");
   84b70:	010002b4 	movhi	r4,10
   84b74:	212d4304 	addi	r4,r4,-19188
   84b78:	008e5840 	call	8e584 <printf>

			if (cea->detailed_timing[i].sync & D_SEPERATE_VSYNC_N)
   84b7c:	e0fffc17 	ldw	r3,-16(fp)
   84b80:	e0bff817 	ldw	r2,-32(fp)
   84b84:	100491ba 	slli	r2,r2,6
   84b88:	1885883a 	add	r2,r3,r2
   84b8c:	1080fd04 	addi	r2,r2,1012
   84b90:	10800017 	ldw	r2,0(r2)
   84b94:	1080400c 	andi	r2,r2,256
   84b98:	10000426 	beq	r2,zero,84bac <edid_print_cea+0x17cc>
				printf(" vsync_n");
   84b9c:	010002b4 	movhi	r4,10
   84ba0:	212d4b04 	addi	r4,r4,-19156
   84ba4:	008e5840 	call	8e584 <printf>
   84ba8:	00000306 	br	84bb8 <edid_print_cea+0x17d8>
			else
				printf(" vsync_p");
   84bac:	010002b4 	movhi	r4,10
   84bb0:	212d4e04 	addi	r4,r4,-19144
   84bb4:	008e5840 	call	8e584 <printf>

			if (cea->detailed_timing[i].sync & D_SEPERATE_HSYNC_N)
   84bb8:	e0fffc17 	ldw	r3,-16(fp)
   84bbc:	e0bff817 	ldw	r2,-32(fp)
   84bc0:	100491ba 	slli	r2,r2,6
   84bc4:	1885883a 	add	r2,r3,r2
   84bc8:	1080fd04 	addi	r2,r2,1012
   84bcc:	10800017 	ldw	r2,0(r2)
   84bd0:	1081000c 	andi	r2,r2,1024
   84bd4:	10000426 	beq	r2,zero,84be8 <edid_print_cea+0x1808>
				printf(" hsync_n");
   84bd8:	010002b4 	movhi	r4,10
   84bdc:	212d5104 	addi	r4,r4,-19132
   84be0:	008e5840 	call	8e584 <printf>
   84be4:	00000306 	br	84bf4 <edid_print_cea+0x1814>
			else
				printf(" hsync_p");
   84be8:	010002b4 	movhi	r4,10
   84bec:	212d5404 	addi	r4,r4,-19120
   84bf0:	008e5840 	call	8e584 <printf>

    		printf("\n");
   84bf4:	01000284 	movi	r4,10
   84bf8:	008e5c80 	call	8e5c8 <putchar>

	if (cea->nr_dtd != 0)
		printf("\n  detailed timing descriptors\n  ---------------------------------\n");

	// detail timing descriptor
	for (i = 0; i < (int)cea->nr_dtd; ++i) {
   84bfc:	e0bff817 	ldw	r2,-32(fp)
   84c00:	10800044 	addi	r2,r2,1
   84c04:	e0bff815 	stw	r2,-32(fp)
   84c08:	e0bffc17 	ldw	r2,-16(fp)
   84c0c:	10800617 	ldw	r2,24(r2)
   84c10:	e0fff817 	ldw	r3,-32(fp)
   84c14:	18be6116 	blt	r3,r2,8459c <edid_print_cea+0x11bc>
				printf(" hsync_p");

    		printf("\n");
		}
	}
}
   84c18:	e037883a 	mov	sp,fp
   84c1c:	dfc00117 	ldw	ra,4(sp)
   84c20:	df000017 	ldw	fp,0(sp)
   84c24:	dec00204 	addi	sp,sp,8
   84c28:	f800283a 	ret

00084c2c <edid_decode_extensions>:

int edid_decode_extensions(struct base_edid *edid, const unsigned char *edid_bin)
{
   84c2c:	defff904 	addi	sp,sp,-28
   84c30:	dfc00615 	stw	ra,24(sp)
   84c34:	df000515 	stw	fp,20(sp)
   84c38:	df000504 	addi	fp,sp,20
   84c3c:	e13ffe15 	stw	r4,-8(fp)
   84c40:	e17fff15 	stw	r5,-4(fp)
   84c44:	d83bb615 	stw	zero,-4392(sp)
	const u8 *c = edid_bin;
   84c48:	e0bfff17 	ldw	r2,-4(fp)
   84c4c:	e0bffd15 	stw	r2,-12(fp)
	int i, nr_ext;

	nr_ext = (int)c[0x7e];
   84c50:	e0bffd17 	ldw	r2,-12(fp)
   84c54:	10801f84 	addi	r2,r2,126
   84c58:	10800003 	ldbu	r2,0(r2)
   84c5c:	10803fcc 	andi	r2,r2,255
   84c60:	e0bffc15 	stw	r2,-16(fp)

#if 1
	// for simplicity, we now support only storing 8 extension data in the edid struct
	if (nr_ext > 1)
   84c64:	e0bffc17 	ldw	r2,-16(fp)
   84c68:	10800090 	cmplti	r2,r2,2
   84c6c:	1000021e 	bne	r2,zero,84c78 <edid_decode_extensions+0x4c>
		nr_ext = 1;
   84c70:	00800044 	movi	r2,1
   84c74:	e0bffc15 	stw	r2,-16(fp)
#endif

	for (i = 0; i < nr_ext; ++i) {
   84c78:	e03ffb15 	stw	zero,-20(fp)
   84c7c:	00002906 	br	84d24 <edid_decode_extensions+0xf8>

		c = &edid_bin[128 + 128 * i];
   84c80:	e0bffb17 	ldw	r2,-20(fp)
   84c84:	10800044 	addi	r2,r2,1
   84c88:	100491fa 	slli	r2,r2,7
   84c8c:	e0ffff17 	ldw	r3,-4(fp)
   84c90:	1885883a 	add	r2,r3,r2
   84c94:	e0bffd15 	stw	r2,-12(fp)

		switch (c[0]) {
   84c98:	e0bffd17 	ldw	r2,-12(fp)
   84c9c:	10800003 	ldbu	r2,0(r2)
   84ca0:	10803fcc 	andi	r2,r2,255
   84ca4:	10c00c20 	cmpeqi	r3,r2,48
   84ca8:	1800141e 	bne	r3,zero,84cfc <edid_decode_extensions+0xd0>
   84cac:	10c00c48 	cmpgei	r3,r2,49
   84cb0:	1800051e 	bne	r3,zero,84cc8 <edid_decode_extensions+0x9c>
   84cb4:	10c000a0 	cmpeqi	r3,r2,2
   84cb8:	1800091e 	bne	r3,zero,84ce0 <edid_decode_extensions+0xb4>
   84cbc:	10c000c8 	cmpgei	r3,r2,3
   84cc0:	18001026 	beq	r3,zero,84d04 <edid_decode_extensions+0xd8>
				return -1;
			break;

		case 0x10:  // 0x10 VTB-EXT (Video Timing Block Extension)
			// todo ...
			break;
   84cc4:	00001406 	br	84d18 <edid_decode_extensions+0xec>

	for (i = 0; i < nr_ext; ++i) {

		c = &edid_bin[128 + 128 * i];

		switch (c[0]) {
   84cc8:	10c01820 	cmpeqi	r3,r2,96
   84ccc:	18000f1e 	bne	r3,zero,84d0c <edid_decode_extensions+0xe0>
   84cd0:	10c01848 	cmpgei	r3,r2,97
   84cd4:	1800011e 	bne	r3,zero,84cdc <edid_decode_extensions+0xb0>
			// todo ...
			break;

		case 0x40:  // 0x40 DI-EXT (Display Information Extension / DVI Feature Data)
			// todo ...
			break;
   84cd8:	00000f06 	br	84d18 <edid_decode_extensions+0xec>
			break;

		case 0xf0:  // 0xf0 (Extension Block Map)
			// extension map at block 1
			// todo ...
			break;
   84cdc:	00000e06 	br	84d18 <edid_decode_extensions+0xec>
		case 0x01:  // 0x01 (LCD Timings)
			// todo ...
			break;

		case EDID_EXT_TAG_CEA:  // 0x02 CEA-EXT (CEA-861 Series Extension)
			if (edid_decode_cea(edid, edid_bin, i) != 0)
   84ce0:	e13ffe17 	ldw	r4,-8(fp)
   84ce4:	e17fff17 	ldw	r5,-4(fp)
   84ce8:	e1bffb17 	ldw	r6,-20(fp)
   84cec:	0081b2c0 	call	81b2c <edid_decode_cea>
   84cf0:	10000826 	beq	r2,zero,84d14 <edid_decode_extensions+0xe8>
				return -1;
   84cf4:	00bfffc4 	movi	r2,-1
   84cf8:	00000e06 	br	84d34 <edid_decode_extensions+0x108>
			// todo ...
			break;

		case 0x30:  // 0x30 (Color Information Type 0 Extension)
			// todo ...
			break;
   84cfc:	0001883a 	nop
   84d00:	00000506 	br	84d18 <edid_decode_extensions+0xec>
		c = &edid_bin[128 + 128 * i];

		switch (c[0]) {
		case 0x01:  // 0x01 (LCD Timings)
			// todo ...
			break;
   84d04:	0001883a 	nop
   84d08:	00000306 	br	84d18 <edid_decode_extensions+0xec>
			// todo ...
			break;

		case 0x60:  // 0x60 DPVL-EXT (Digital Packet Video Link Extension)
			// todo ...
			break;
   84d0c:	0001883a 	nop
   84d10:	00000106 	br	84d18 <edid_decode_extensions+0xec>
			break;

		case EDID_EXT_TAG_CEA:  // 0x02 CEA-EXT (CEA-861 Series Extension)
			if (edid_decode_cea(edid, edid_bin, i) != 0)
				return -1;
			break;
   84d14:	0001883a 	nop
	// for simplicity, we now support only storing 8 extension data in the edid struct
	if (nr_ext > 1)
		nr_ext = 1;
#endif

	for (i = 0; i < nr_ext; ++i) {
   84d18:	e0bffb17 	ldw	r2,-20(fp)
   84d1c:	10800044 	addi	r2,r2,1
   84d20:	e0bffb15 	stw	r2,-20(fp)
   84d24:	e0fffb17 	ldw	r3,-20(fp)
   84d28:	e0bffc17 	ldw	r2,-16(fp)
   84d2c:	18bfd416 	blt	r3,r2,84c80 <edid_decode_extensions+0x54>
		case 0xff:  // 0xff (define by display manufacturer)
			break;
		}
	}

	return 0;
   84d30:	0005883a 	mov	r2,zero
}
   84d34:	e037883a 	mov	sp,fp
   84d38:	dfc00117 	ldw	ra,4(sp)
   84d3c:	df000017 	ldw	fp,0(sp)
   84d40:	dec00204 	addi	sp,sp,8
   84d44:	f800283a 	ret

00084d48 <edid_decode_v14>:

int edid_decode_v14(struct base_edid *edid, const unsigned char *edid_bin)
{
   84d48:	defff504 	addi	sp,sp,-44
   84d4c:	dfc00a15 	stw	ra,40(sp)
   84d50:	df000915 	stw	fp,36(sp)
   84d54:	df000904 	addi	fp,sp,36
   84d58:	e13ffe15 	stw	r4,-8(fp)
   84d5c:	e17fff15 	stw	r5,-4(fp)
   84d60:	d83bb615 	stw	zero,-4392(sp)
	static const u8 header[] = { 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00 };

	const u8 *c = edid_bin;
   84d64:	e0bfff17 	ldw	r2,-4(fp)
   84d68:	e0bff815 	stw	r2,-32(fp)
    u8 checksum = 0;
   84d6c:	e03ff905 	stb	zero,-28(fp)
    int i = 0, s = 0;
   84d70:	e03ffa15 	stw	zero,-24(fp)
   84d74:	e03ffb15 	stw	zero,-20(fp)

    // header
    if (memcmp(c, header, 8) != 0)
   84d78:	e13ff817 	ldw	r4,-32(fp)
   84d7c:	d1600104 	addi	r5,gp,-32764
   84d80:	01800204 	movi	r6,8
   84d84:	008e3080 	call	8e308 <memcmp>
   84d88:	10000226 	beq	r2,zero,84d94 <edid_decode_v14+0x4c>
        return -1;
   84d8c:	00bfffc4 	movi	r2,-1
   84d90:	00104206 	br	88e9c <edid_decode_v14+0x4154>

    // checksum
    for (s = 0; s < 127; ++s)
   84d94:	e03ffb15 	stw	zero,-20(fp)
   84d98:	00000a06 	br	84dc4 <edid_decode_v14+0x7c>
        checksum += c[s];
   84d9c:	e0bffb17 	ldw	r2,-20(fp)
   84da0:	e0fff817 	ldw	r3,-32(fp)
   84da4:	1885883a 	add	r2,r3,r2
   84da8:	10c00003 	ldbu	r3,0(r2)
   84dac:	e0bff903 	ldbu	r2,-28(fp)
   84db0:	1885883a 	add	r2,r3,r2
   84db4:	e0bff905 	stb	r2,-28(fp)
    // header
    if (memcmp(c, header, 8) != 0)
        return -1;

    // checksum
    for (s = 0; s < 127; ++s)
   84db8:	e0bffb17 	ldw	r2,-20(fp)
   84dbc:	10800044 	addi	r2,r2,1
   84dc0:	e0bffb15 	stw	r2,-20(fp)
   84dc4:	e0bffb17 	ldw	r2,-20(fp)
   84dc8:	10801fd0 	cmplti	r2,r2,127
   84dcc:	103ff31e 	bne	r2,zero,84d9c <edid_decode_v14+0x54>
        checksum += c[s];

    if ((u8)(checksum + c[127]) != 0x00)
   84dd0:	e0bff817 	ldw	r2,-32(fp)
   84dd4:	10801fc4 	addi	r2,r2,127
   84dd8:	10c00003 	ldbu	r3,0(r2)
   84ddc:	e0bff903 	ldbu	r2,-28(fp)
   84de0:	1885883a 	add	r2,r3,r2
   84de4:	10803fcc 	andi	r2,r2,255
   84de8:	10000226 	beq	r2,zero,84df4 <edid_decode_v14+0xac>
    	return -1;
   84dec:	00bfffc4 	movi	r2,-1
   84df0:	00102a06 	br	88e9c <edid_decode_v14+0x4154>

    edid->checksum = c[127];
   84df4:	e0bff817 	ldw	r2,-32(fp)
   84df8:	10801fc4 	addi	r2,r2,127
   84dfc:	10800003 	ldbu	r2,0(r2)
   84e00:	10c03fcc 	andi	r3,r2,255
   84e04:	e0bffe17 	ldw	r2,-8(fp)
   84e08:	10c60a15 	stw	r3,6184(r2)

    // vid/pid
    c = &edid_bin[8];
   84e0c:	e0bfff17 	ldw	r2,-4(fp)
   84e10:	10800204 	addi	r2,r2,8
   84e14:	e0bff815 	stw	r2,-32(fp)

    edid->id_mfg[0] = 0x40 + ((c[0] >> 2) & 0x1f);
   84e18:	e0bff817 	ldw	r2,-32(fp)
   84e1c:	10800003 	ldbu	r2,0(r2)
   84e20:	10803fcc 	andi	r2,r2,255
   84e24:	1004d0ba 	srli	r2,r2,2
   84e28:	108007cc 	andi	r2,r2,31
   84e2c:	10801004 	addi	r2,r2,64
   84e30:	1007883a 	mov	r3,r2
   84e34:	e0bffe17 	ldw	r2,-8(fp)
   84e38:	10c00005 	stb	r3,0(r2)
    edid->id_mfg[1] = 0x40 + (((c[0] << 3) | (c[1] >> 5)) & 0x1f);
   84e3c:	e0bff817 	ldw	r2,-32(fp)
   84e40:	10800003 	ldbu	r2,0(r2)
   84e44:	10803fcc 	andi	r2,r2,255
   84e48:	100490fa 	slli	r2,r2,3
   84e4c:	1007883a 	mov	r3,r2
   84e50:	e0bff817 	ldw	r2,-32(fp)
   84e54:	10800044 	addi	r2,r2,1
   84e58:	10800003 	ldbu	r2,0(r2)
   84e5c:	10803fcc 	andi	r2,r2,255
   84e60:	1004d17a 	srli	r2,r2,5
   84e64:	1884b03a 	or	r2,r3,r2
   84e68:	108007cc 	andi	r2,r2,31
   84e6c:	10801004 	addi	r2,r2,64
   84e70:	1007883a 	mov	r3,r2
   84e74:	e0bffe17 	ldw	r2,-8(fp)
   84e78:	10c00045 	stb	r3,1(r2)
    edid->id_mfg[2] = 0x40 + (c[1] & 0x1f);
   84e7c:	e0bff817 	ldw	r2,-32(fp)
   84e80:	10800044 	addi	r2,r2,1
   84e84:	10800003 	ldbu	r2,0(r2)
   84e88:	108007cc 	andi	r2,r2,31
   84e8c:	10801004 	addi	r2,r2,64
   84e90:	1007883a 	mov	r3,r2
   84e94:	e0bffe17 	ldw	r2,-8(fp)
   84e98:	10c00085 	stb	r3,2(r2)
    edid->id_mfg[3] = 0;
   84e9c:	e0bffe17 	ldw	r2,-8(fp)
   84ea0:	100000c5 	stb	zero,3(r2)

    c = &edid_bin[0x0a];
   84ea4:	e0bfff17 	ldw	r2,-4(fp)
   84ea8:	10800284 	addi	r2,r2,10
   84eac:	e0bff815 	stw	r2,-32(fp)
    edid->id_prod = (c[1] << 8) | c[0];
   84eb0:	e0bff817 	ldw	r2,-32(fp)
   84eb4:	10800044 	addi	r2,r2,1
   84eb8:	10800003 	ldbu	r2,0(r2)
   84ebc:	10803fcc 	andi	r2,r2,255
   84ec0:	1006923a 	slli	r3,r2,8
   84ec4:	e0bff817 	ldw	r2,-32(fp)
   84ec8:	10800003 	ldbu	r2,0(r2)
   84ecc:	10803fcc 	andi	r2,r2,255
   84ed0:	1884b03a 	or	r2,r3,r2
   84ed4:	1007883a 	mov	r3,r2
   84ed8:	e0bffe17 	ldw	r2,-8(fp)
   84edc:	10c00115 	stw	r3,4(r2)

    c = &edid_bin[0x0c];
   84ee0:	e0bfff17 	ldw	r2,-4(fp)
   84ee4:	10800304 	addi	r2,r2,12
   84ee8:	e0bff815 	stw	r2,-32(fp)
    edid->id_sn = (c[3] << 24) | (c[2] << 16) | (c[1] << 8) | c[0];
   84eec:	e0bff817 	ldw	r2,-32(fp)
   84ef0:	108000c4 	addi	r2,r2,3
   84ef4:	10800003 	ldbu	r2,0(r2)
   84ef8:	10803fcc 	andi	r2,r2,255
   84efc:	1006963a 	slli	r3,r2,24
   84f00:	e0bff817 	ldw	r2,-32(fp)
   84f04:	10800084 	addi	r2,r2,2
   84f08:	10800003 	ldbu	r2,0(r2)
   84f0c:	10803fcc 	andi	r2,r2,255
   84f10:	1004943a 	slli	r2,r2,16
   84f14:	1886b03a 	or	r3,r3,r2
   84f18:	e0bff817 	ldw	r2,-32(fp)
   84f1c:	10800044 	addi	r2,r2,1
   84f20:	10800003 	ldbu	r2,0(r2)
   84f24:	10803fcc 	andi	r2,r2,255
   84f28:	1004923a 	slli	r2,r2,8
   84f2c:	1886b03a 	or	r3,r3,r2
   84f30:	e0bff817 	ldw	r2,-32(fp)
   84f34:	10800003 	ldbu	r2,0(r2)
   84f38:	10803fcc 	andi	r2,r2,255
   84f3c:	1884b03a 	or	r2,r3,r2
   84f40:	1007883a 	mov	r3,r2
   84f44:	e0bffe17 	ldw	r2,-8(fp)
   84f48:	10c00215 	stw	r3,8(r2)

    c = &edid_bin[0x10];
   84f4c:	e0bfff17 	ldw	r2,-4(fp)
   84f50:	10800404 	addi	r2,r2,16
   84f54:	e0bff815 	stw	r2,-32(fp)

	edid->mfg_week = 0;
   84f58:	e0bffe17 	ldw	r2,-8(fp)
   84f5c:	10000315 	stw	zero,12(r2)
	edid->mfg_year = 0;
   84f60:	e0bffe17 	ldw	r2,-8(fp)
   84f64:	10000415 	stw	zero,16(r2)
	edid->model_year = 0;
   84f68:	e0bffe17 	ldw	r2,-8(fp)
   84f6c:	10000515 	stw	zero,20(r2)

    if ((c[0] >= 0x01) && (c[0] <= 0x36))
   84f70:	e0bff817 	ldw	r2,-32(fp)
   84f74:	10800003 	ldbu	r2,0(r2)
   84f78:	10803fcc 	andi	r2,r2,255
   84f7c:	10000a26 	beq	r2,zero,84fa8 <edid_decode_v14+0x260>
   84f80:	e0bff817 	ldw	r2,-32(fp)
   84f84:	10800003 	ldbu	r2,0(r2)
   84f88:	10803fcc 	andi	r2,r2,255
   84f8c:	10800de8 	cmpgeui	r2,r2,55
   84f90:	1000051e 	bne	r2,zero,84fa8 <edid_decode_v14+0x260>
    	edid->mfg_week = c[0];
   84f94:	e0bff817 	ldw	r2,-32(fp)
   84f98:	10800003 	ldbu	r2,0(r2)
   84f9c:	10c03fcc 	andi	r3,r2,255
   84fa0:	e0bffe17 	ldw	r2,-8(fp)
   84fa4:	10c00315 	stw	r3,12(r2)

    if (c[0] == 0xff)
   84fa8:	e0bff817 	ldw	r2,-32(fp)
   84fac:	10800003 	ldbu	r2,0(r2)
   84fb0:	10803fcc 	andi	r2,r2,255
   84fb4:	10803fd8 	cmpnei	r2,r2,255
   84fb8:	1000081e 	bne	r2,zero,84fdc <edid_decode_v14+0x294>
    	edid->model_year = 1990 + c[1];
   84fbc:	e0bff817 	ldw	r2,-32(fp)
   84fc0:	10800044 	addi	r2,r2,1
   84fc4:	10800003 	ldbu	r2,0(r2)
   84fc8:	10803fcc 	andi	r2,r2,255
   84fcc:	10c1f184 	addi	r3,r2,1990
   84fd0:	e0bffe17 	ldw	r2,-8(fp)
   84fd4:	10c00515 	stw	r3,20(r2)
   84fd8:	00000706 	br	84ff8 <edid_decode_v14+0x2b0>
    else
    	edid->mfg_year = 1990 + c[1];
   84fdc:	e0bff817 	ldw	r2,-32(fp)
   84fe0:	10800044 	addi	r2,r2,1
   84fe4:	10800003 	ldbu	r2,0(r2)
   84fe8:	10803fcc 	andi	r2,r2,255
   84fec:	10c1f184 	addi	r3,r2,1990
   84ff0:	e0bffe17 	ldw	r2,-8(fp)
   84ff4:	10c00415 	stw	r3,16(r2)

    // edid version
    c = &edid_bin[0x12];
   84ff8:	e0bfff17 	ldw	r2,-4(fp)
   84ffc:	10800484 	addi	r2,r2,18
   85000:	e0bff815 	stw	r2,-32(fp)

    edid->ver_mj = c[0];
   85004:	e0bff817 	ldw	r2,-32(fp)
   85008:	10800003 	ldbu	r2,0(r2)
   8500c:	10c03fcc 	andi	r3,r2,255
   85010:	e0bffe17 	ldw	r2,-8(fp)
   85014:	10c00615 	stw	r3,24(r2)
    edid->ver_mn = c[1];
   85018:	e0bff817 	ldw	r2,-32(fp)
   8501c:	10800044 	addi	r2,r2,1
   85020:	10800003 	ldbu	r2,0(r2)
   85024:	10c03fcc 	andi	r3,r2,255
   85028:	e0bffe17 	ldw	r2,-8(fp)
   8502c:	10c00715 	stw	r3,28(r2)

    // basic display parameters & features
    c = &edid_bin[0x14];
   85030:	e0bfff17 	ldw	r2,-4(fp)
   85034:	10800504 	addi	r2,r2,20
   85038:	e0bff815 	stw	r2,-32(fp)

    if (*c & 0x80) {
   8503c:	e0bff817 	ldw	r2,-32(fp)
   85040:	10800003 	ldbu	r2,0(r2)
   85044:	10803fcc 	andi	r2,r2,255
   85048:	1080201c 	xori	r2,r2,128
   8504c:	10bfe004 	addi	r2,r2,-128
   85050:	10005f0e 	bge	r2,zero,851d0 <edid_decode_v14+0x488>
        edid->input.digital_if = 1;
   85054:	e0bffe17 	ldw	r2,-8(fp)
   85058:	00c00044 	movi	r3,1
   8505c:	10c00815 	stw	r3,32(r2)

        switch ((*c >> 4) & 0x7) {
   85060:	e0bff817 	ldw	r2,-32(fp)
   85064:	10800003 	ldbu	r2,0(r2)
   85068:	10803fcc 	andi	r2,r2,255
   8506c:	1004d13a 	srli	r2,r2,4
   85070:	10803fcc 	andi	r2,r2,255
   85074:	108001cc 	andi	r2,r2,7
   85078:	10c001e8 	cmpgeui	r3,r2,7
   8507c:	1800261e 	bne	r3,zero,85118 <edid_decode_v14+0x3d0>
   85080:	1085883a 	add	r2,r2,r2
   85084:	1087883a 	add	r3,r2,r2
   85088:	00800234 	movhi	r2,8
   8508c:	10942704 	addi	r2,r2,20636
   85090:	1885883a 	add	r2,r3,r2
   85094:	10800017 	ldw	r2,0(r2)
   85098:	1000683a 	jmp	r2
   8509c:	00085118 	cmpnei	zero,zero,8516
   850a0:	000850b8 	rdprs	zero,zero,8514
   850a4:	000850c8 	cmpgei	zero,zero,8515
   850a8:	000850d8 	cmpnei	zero,zero,8515
   850ac:	000850e8 	cmpgeui	zero,zero,8515
   850b0:	000850f8 	rdprs	zero,zero,8515
   850b4:	00085108 	cmpgei	zero,zero,8516
        case 1:
            edid->input.digital.depth = VID_6BITS;
   850b8:	e0bffe17 	ldw	r2,-8(fp)
   850bc:	00c00044 	movi	r3,1
   850c0:	10c00915 	stw	r3,36(r2)
            break;
   850c4:	00001706 	br	85124 <edid_decode_v14+0x3dc>
        case 2:
            edid->input.digital.depth = VID_8BITS;
   850c8:	e0bffe17 	ldw	r2,-8(fp)
   850cc:	00c00084 	movi	r3,2
   850d0:	10c00915 	stw	r3,36(r2)
            break;
   850d4:	00001306 	br	85124 <edid_decode_v14+0x3dc>
        case 3:
            edid->input.digital.depth = VID_10BITS;
   850d8:	e0bffe17 	ldw	r2,-8(fp)
   850dc:	00c000c4 	movi	r3,3
   850e0:	10c00915 	stw	r3,36(r2)
            break;
   850e4:	00000f06 	br	85124 <edid_decode_v14+0x3dc>
        case 4:
            edid->input.digital.depth = VID_12BITS;
   850e8:	e0bffe17 	ldw	r2,-8(fp)
   850ec:	00c00104 	movi	r3,4
   850f0:	10c00915 	stw	r3,36(r2)
            break;
   850f4:	00000b06 	br	85124 <edid_decode_v14+0x3dc>
        case 5:
            edid->input.digital.depth = VID_14BITS;
   850f8:	e0bffe17 	ldw	r2,-8(fp)
   850fc:	00c00144 	movi	r3,5
   85100:	10c00915 	stw	r3,36(r2)
            break;
   85104:	00000706 	br	85124 <edid_decode_v14+0x3dc>
        case 6:
            edid->input.digital.depth = VID_16BITS;
   85108:	e0bffe17 	ldw	r2,-8(fp)
   8510c:	00c00184 	movi	r3,6
   85110:	10c00915 	stw	r3,36(r2)
            break;
   85114:	00000306 	br	85124 <edid_decode_v14+0x3dc>
        case 0:
        default:
            edid->input.digital.depth = VID_NOT_DEFINED;
   85118:	e0bffe17 	ldw	r2,-8(fp)
   8511c:	10000915 	stw	zero,36(r2)
            break;
   85120:	0001883a 	nop
        }

        switch (*c & 0xf) {
   85124:	e0bff817 	ldw	r2,-32(fp)
   85128:	10800003 	ldbu	r2,0(r2)
   8512c:	10803fcc 	andi	r2,r2,255
   85130:	108003cc 	andi	r2,r2,15
   85134:	10c001a8 	cmpgeui	r3,r2,6
   85138:	1800221e 	bne	r3,zero,851c4 <edid_decode_v14+0x47c>
   8513c:	1085883a 	add	r2,r2,r2
   85140:	1087883a 	add	r3,r2,r2
   85144:	00800234 	movhi	r2,8
   85148:	10945604 	addi	r2,r2,20824
   8514c:	1885883a 	add	r2,r3,r2
   85150:	10800017 	ldw	r2,0(r2)
   85154:	1000683a 	jmp	r2
   85158:	000851c4 	movi	zero,8519
   8515c:	00085170 	cmpltui	zero,zero,8517
   85160:	00085180 	call	8518 <__alt_mem_onchip_memory2-0x77ae8>
   85164:	00085190 	cmplti	zero,zero,8518
   85168:	000851a0 	cmpeqi	zero,zero,8518
   8516c:	000851b0 	cmpltui	zero,zero,8518
        case 1:
            edid->input.digital.interface = VII_DVI;
   85170:	e0bffe17 	ldw	r2,-8(fp)
   85174:	00c00044 	movi	r3,1
   85178:	10c00a15 	stw	r3,40(r2)
            break;
   8517c:	00006c06 	br	85330 <edid_decode_v14+0x5e8>
        case 2:
            edid->input.digital.interface = VII_HDMI_A;
   85180:	e0bffe17 	ldw	r2,-8(fp)
   85184:	00c00084 	movi	r3,2
   85188:	10c00a15 	stw	r3,40(r2)
            break;
   8518c:	00006806 	br	85330 <edid_decode_v14+0x5e8>
        case 3:
            edid->input.digital.interface = VII_HDMI_B;
   85190:	e0bffe17 	ldw	r2,-8(fp)
   85194:	00c000c4 	movi	r3,3
   85198:	10c00a15 	stw	r3,40(r2)
            break;
   8519c:	00006406 	br	85330 <edid_decode_v14+0x5e8>
        case 4:
            edid->input.digital.interface = VII_MDDI;
   851a0:	e0bffe17 	ldw	r2,-8(fp)
   851a4:	00c00104 	movi	r3,4
   851a8:	10c00a15 	stw	r3,40(r2)
            break;
   851ac:	00006006 	br	85330 <edid_decode_v14+0x5e8>
        case 5:
            edid->input.digital.interface = VII_DISPLAYPORT;
   851b0:	e0bffe17 	ldw	r2,-8(fp)
   851b4:	00c00144 	movi	r3,5
   851b8:	10c00a15 	stw	r3,40(r2)
            break;
   851bc:	0001883a 	nop
   851c0:	00005b06 	br	85330 <edid_decode_v14+0x5e8>
        case 0:
        default:
            edid->input.digital.interface = VII_NOT_DEFINED;
   851c4:	e0bffe17 	ldw	r2,-8(fp)
   851c8:	10000a15 	stw	zero,40(r2)
            break;
   851cc:	00005806 	br	85330 <edid_decode_v14+0x5e8>
        }

    } else {

        edid->input.digital_if = 0;
   851d0:	e0bffe17 	ldw	r2,-8(fp)
   851d4:	10000815 	stw	zero,32(r2)

        switch ((*c >> 5) & 0x3) {
   851d8:	e0bff817 	ldw	r2,-32(fp)
   851dc:	10800003 	ldbu	r2,0(r2)
   851e0:	10803fcc 	andi	r2,r2,255
   851e4:	1004d17a 	srli	r2,r2,5
   851e8:	10803fcc 	andi	r2,r2,255
   851ec:	108000cc 	andi	r2,r2,3
   851f0:	10c00060 	cmpeqi	r3,r2,1
   851f4:	18000c1e 	bne	r3,zero,85228 <edid_decode_v14+0x4e0>
   851f8:	10c00088 	cmpgei	r3,r2,2
   851fc:	1800021e 	bne	r3,zero,85208 <edid_decode_v14+0x4c0>
   85200:	10000626 	beq	r2,zero,8521c <edid_decode_v14+0x4d4>
   85204:	00001406 	br	85258 <edid_decode_v14+0x510>
   85208:	10c000a0 	cmpeqi	r3,r2,2
   8520c:	18000a1e 	bne	r3,zero,85238 <edid_decode_v14+0x4f0>
   85210:	108000e0 	cmpeqi	r2,r2,3
   85214:	10000c1e 	bne	r2,zero,85248 <edid_decode_v14+0x500>
   85218:	00000f06 	br	85258 <edid_decode_v14+0x510>
        case 0:
            edid->input.analog.level = VIL_0P700_0P300_1P000;
   8521c:	e0bffe17 	ldw	r2,-8(fp)
   85220:	10000915 	stw	zero,36(r2)
            break;
   85224:	00000c06 	br	85258 <edid_decode_v14+0x510>
        case 1:
            edid->input.analog.level = VIL_0P714_0P286_1P000;
   85228:	e0bffe17 	ldw	r2,-8(fp)
   8522c:	00c00044 	movi	r3,1
   85230:	10c00915 	stw	r3,36(r2)
            break;
   85234:	00000806 	br	85258 <edid_decode_v14+0x510>
        case 2:
            edid->input.analog.level = VIL_1P000_0P400_1P400;
   85238:	e0bffe17 	ldw	r2,-8(fp)
   8523c:	00c00084 	movi	r3,2
   85240:	10c00915 	stw	r3,36(r2)
            break;
   85244:	00000406 	br	85258 <edid_decode_v14+0x510>
        case 3:
            edid->input.analog.level = VIL_0P700_0P000_0P700;
   85248:	e0bffe17 	ldw	r2,-8(fp)
   8524c:	00c000c4 	movi	r3,3
   85250:	10c00915 	stw	r3,36(r2)
            break;
   85254:	0001883a 	nop
        }

        if (*c & 0x10)
   85258:	e0bff817 	ldw	r2,-32(fp)
   8525c:	10800003 	ldbu	r2,0(r2)
   85260:	10803fcc 	andi	r2,r2,255
   85264:	1080040c 	andi	r2,r2,16
   85268:	10000426 	beq	r2,zero,8527c <edid_decode_v14+0x534>
            edid->input.analog.setup = VIS_BLANK_TO_BLACK_PEDESTAL;
   8526c:	e0bffe17 	ldw	r2,-8(fp)
   85270:	00c00044 	movi	r3,1
   85274:	10c00a15 	stw	r3,40(r2)
   85278:	00000206 	br	85284 <edid_decode_v14+0x53c>
        else
            edid->input.analog.setup = VIS_BLANK_LEVEL_EQ_BLACK_LEVEL;
   8527c:	e0bffe17 	ldw	r2,-8(fp)
   85280:	10000a15 	stw	zero,40(r2)

        edid->input.analog.sync_type = 0;
   85284:	e0bffe17 	ldw	r2,-8(fp)
   85288:	10000b15 	stw	zero,44(r2)
        if (*c & 0x08)
   8528c:	e0bff817 	ldw	r2,-32(fp)
   85290:	10800003 	ldbu	r2,0(r2)
   85294:	10803fcc 	andi	r2,r2,255
   85298:	1080020c 	andi	r2,r2,8
   8529c:	10000526 	beq	r2,zero,852b4 <edid_decode_v14+0x56c>
        	edid->input.analog.sync_type |= VIS_SEPERATE_H_V_SYNC;
   852a0:	e0bffe17 	ldw	r2,-8(fp)
   852a4:	10800b17 	ldw	r2,44(r2)
   852a8:	10c00054 	ori	r3,r2,1
   852ac:	e0bffe17 	ldw	r2,-8(fp)
   852b0:	10c00b15 	stw	r3,44(r2)
        if (*c & 0x04)
   852b4:	e0bff817 	ldw	r2,-32(fp)
   852b8:	10800003 	ldbu	r2,0(r2)
   852bc:	10803fcc 	andi	r2,r2,255
   852c0:	1080010c 	andi	r2,r2,4
   852c4:	10000526 	beq	r2,zero,852dc <edid_decode_v14+0x594>
        	edid->input.analog.sync_type |= VIS_COMPOSITE_H_SYNC;
   852c8:	e0bffe17 	ldw	r2,-8(fp)
   852cc:	10800b17 	ldw	r2,44(r2)
   852d0:	10c00094 	ori	r3,r2,2
   852d4:	e0bffe17 	ldw	r2,-8(fp)
   852d8:	10c00b15 	stw	r3,44(r2)
        if (*c & 0x02)
   852dc:	e0bff817 	ldw	r2,-32(fp)
   852e0:	10800003 	ldbu	r2,0(r2)
   852e4:	10803fcc 	andi	r2,r2,255
   852e8:	1080008c 	andi	r2,r2,2
   852ec:	10000526 	beq	r2,zero,85304 <edid_decode_v14+0x5bc>
        	edid->input.analog.sync_type |= VIS_COMPOSITE_G_VIDEO;
   852f0:	e0bffe17 	ldw	r2,-8(fp)
   852f4:	10800b17 	ldw	r2,44(r2)
   852f8:	10c00114 	ori	r3,r2,4
   852fc:	e0bffe17 	ldw	r2,-8(fp)
   85300:	10c00b15 	stw	r3,44(r2)

        if (*c & 0x01)
   85304:	e0bff817 	ldw	r2,-32(fp)
   85308:	10800003 	ldbu	r2,0(r2)
   8530c:	10803fcc 	andi	r2,r2,255
   85310:	1080004c 	andi	r2,r2,1
   85314:	10000426 	beq	r2,zero,85328 <edid_decode_v14+0x5e0>
        	edid->input.analog.serrations = VISR_VSYNC;
   85318:	e0bffe17 	ldw	r2,-8(fp)
   8531c:	00c00044 	movi	r3,1
   85320:	10c00c15 	stw	r3,48(r2)
   85324:	00000206 	br	85330 <edid_decode_v14+0x5e8>
        else
        	edid->input.analog.serrations = 0;
   85328:	e0bffe17 	ldw	r2,-8(fp)
   8532c:	10000c15 	stw	zero,48(r2)
    }

    c = &edid_bin[0x15];
   85330:	e0bfff17 	ldw	r2,-4(fp)
   85334:	10800544 	addi	r2,r2,21
   85338:	e0bff815 	stw	r2,-32(fp)

    edid->screen.size_defined = 0;
   8533c:	e0bffe17 	ldw	r2,-8(fp)
   85340:	10000d15 	stw	zero,52(r2)
    edid->screen.size.horizontal = 0;
   85344:	e0bffe17 	ldw	r2,-8(fp)
   85348:	10000f15 	stw	zero,60(r2)
    edid->screen.size.vertical = 0;
   8534c:	e0bffe17 	ldw	r2,-8(fp)
   85350:	10001015 	stw	zero,64(r2)
    edid->screen.aspect_defined = 0;
   85354:	e0bffe17 	ldw	r2,-8(fp)
   85358:	10000e15 	stw	zero,56(r2)
    edid->screen.aspect.landscape = 0.0f;
   8535c:	e0bffe17 	ldw	r2,-8(fp)
   85360:	10000f15 	stw	zero,60(r2)
    edid->screen.aspect.portrait = 0.0f;
   85364:	e0bffe17 	ldw	r2,-8(fp)
   85368:	10001015 	stw	zero,64(r2)

    if (c[0] != 0) {
   8536c:	e0bff817 	ldw	r2,-32(fp)
   85370:	10800003 	ldbu	r2,0(r2)
   85374:	10803fcc 	andi	r2,r2,255
   85378:	10002b26 	beq	r2,zero,85428 <edid_decode_v14+0x6e0>
        if (c[1] != 0) {
   8537c:	e0bff817 	ldw	r2,-32(fp)
   85380:	10800044 	addi	r2,r2,1
   85384:	10800003 	ldbu	r2,0(r2)
   85388:	10803fcc 	andi	r2,r2,255
   8538c:	10000f26 	beq	r2,zero,853cc <edid_decode_v14+0x684>
        	edid->screen.size_defined = 1;
   85390:	e0bffe17 	ldw	r2,-8(fp)
   85394:	00c00044 	movi	r3,1
   85398:	10c00d15 	stw	r3,52(r2)
        	edid->screen.size.horizontal = c[0];
   8539c:	e0bff817 	ldw	r2,-32(fp)
   853a0:	10800003 	ldbu	r2,0(r2)
   853a4:	10c03fcc 	andi	r3,r2,255
   853a8:	e0bffe17 	ldw	r2,-8(fp)
   853ac:	10c00f15 	stw	r3,60(r2)
        	edid->screen.size.vertical = c[1];
   853b0:	e0bff817 	ldw	r2,-32(fp)
   853b4:	10800044 	addi	r2,r2,1
   853b8:	10800003 	ldbu	r2,0(r2)
   853bc:	10c03fcc 	andi	r3,r2,255
   853c0:	e0bffe17 	ldw	r2,-8(fp)
   853c4:	10c01015 	stw	r3,64(r2)
   853c8:	00003206 	br	85494 <edid_decode_v14+0x74c>
        } else {
        	edid->screen.aspect_defined = 1;
   853cc:	e0bffe17 	ldw	r2,-8(fp)
   853d0:	00c00044 	movi	r3,1
   853d4:	10c00e15 	stw	r3,56(r2)
        	edid->screen.aspect.landscape = ((float)c[0] + 99.0f) * 0.01f;
   853d8:	e0bff817 	ldw	r2,-32(fp)
   853dc:	10800003 	ldbu	r2,0(r2)
   853e0:	10803fcc 	andi	r2,r2,255
   853e4:	1009883a 	mov	r4,r2
   853e8:	008cd0c0 	call	8cd0c <__floatunsisf>
   853ec:	1007883a 	mov	r3,r2
   853f0:	1809883a 	mov	r4,r3
   853f4:	0150b1b4 	movhi	r5,17094
   853f8:	008c9580 	call	8c958 <__addsf3>
   853fc:	1007883a 	mov	r3,r2
   85400:	1805883a 	mov	r2,r3
   85404:	1009883a 	mov	r4,r2
   85408:	014f0934 	movhi	r5,15396
   8540c:	2975c284 	addi	r5,r5,-10486
   85410:	008c9fc0 	call	8c9fc <__mulsf3>
   85414:	1009883a 	mov	r4,r2
   85418:	2007883a 	mov	r3,r4
   8541c:	e0bffe17 	ldw	r2,-8(fp)
   85420:	10c00f15 	stw	r3,60(r2)
   85424:	00001b06 	br	85494 <edid_decode_v14+0x74c>
        }
    } else if (c[1] != 0) {
   85428:	e0bff817 	ldw	r2,-32(fp)
   8542c:	10800044 	addi	r2,r2,1
   85430:	10800003 	ldbu	r2,0(r2)
   85434:	10803fcc 	andi	r2,r2,255
   85438:	10001626 	beq	r2,zero,85494 <edid_decode_v14+0x74c>
    	edid->screen.aspect_defined = 2;
   8543c:	e0bffe17 	ldw	r2,-8(fp)
   85440:	00c00084 	movi	r3,2
   85444:	10c00e15 	stw	r3,56(r2)
    	edid->screen.aspect.portrait = 100.0f / ((float)c[1] + 99.0f);
   85448:	e0bff817 	ldw	r2,-32(fp)
   8544c:	10800044 	addi	r2,r2,1
   85450:	10800003 	ldbu	r2,0(r2)
   85454:	10803fcc 	andi	r2,r2,255
   85458:	1009883a 	mov	r4,r2
   8545c:	008cd0c0 	call	8cd0c <__floatunsisf>
   85460:	1007883a 	mov	r3,r2
   85464:	1809883a 	mov	r4,r3
   85468:	0150b1b4 	movhi	r5,17094
   8546c:	008c9580 	call	8c958 <__addsf3>
   85470:	1007883a 	mov	r3,r2
   85474:	1805883a 	mov	r2,r3
   85478:	0110b234 	movhi	r4,17096
   8547c:	100b883a 	mov	r5,r2
   85480:	008cb8c0 	call	8cb8c <__divsf3>
   85484:	1009883a 	mov	r4,r2
   85488:	2007883a 	mov	r3,r4
   8548c:	e0bffe17 	ldw	r2,-8(fp)
   85490:	10c01015 	stw	r3,64(r2)
    }

    // gamma
    c = &edid_bin[0x17];
   85494:	e0bfff17 	ldw	r2,-4(fp)
   85498:	108005c4 	addi	r2,r2,23
   8549c:	e0bff815 	stw	r2,-32(fp)

    if (*c < 0xff)
   854a0:	e0bff817 	ldw	r2,-32(fp)
   854a4:	10800003 	ldbu	r2,0(r2)
   854a8:	10803fcc 	andi	r2,r2,255
   854ac:	10803fe0 	cmpeqi	r2,r2,255
   854b0:	1000131e 	bne	r2,zero,85500 <edid_decode_v14+0x7b8>
        edid->gamma = ((float)(*c) + 100.0f) / 100.0f;
   854b4:	e0bff817 	ldw	r2,-32(fp)
   854b8:	10800003 	ldbu	r2,0(r2)
   854bc:	10803fcc 	andi	r2,r2,255
   854c0:	1009883a 	mov	r4,r2
   854c4:	008cd0c0 	call	8cd0c <__floatunsisf>
   854c8:	1007883a 	mov	r3,r2
   854cc:	1809883a 	mov	r4,r3
   854d0:	0150b234 	movhi	r5,17096
   854d4:	008c9580 	call	8c958 <__addsf3>
   854d8:	1007883a 	mov	r3,r2
   854dc:	1805883a 	mov	r2,r3
   854e0:	1009883a 	mov	r4,r2
   854e4:	0150b234 	movhi	r5,17096
   854e8:	008cb8c0 	call	8cb8c <__divsf3>
   854ec:	1009883a 	mov	r4,r2
   854f0:	2007883a 	mov	r3,r4
   854f4:	e0bffe17 	ldw	r2,-8(fp)
   854f8:	10c01115 	stw	r3,68(r2)
   854fc:	00000206 	br	85508 <edid_decode_v14+0x7c0>
    else
        edid->gamma = 0.0f;  // defined in an extension block
   85500:	e0bffe17 	ldw	r2,-8(fp)
   85504:	10001115 	stw	zero,68(r2)

    // feature
    c = &edid_bin[0x18];
   85508:	e0bfff17 	ldw	r2,-4(fp)
   8550c:	10800604 	addi	r2,r2,24
   85510:	e0bff815 	stw	r2,-32(fp)

    edid->feature = 0;
   85514:	e0bffe17 	ldw	r2,-8(fp)
   85518:	10001215 	stw	zero,72(r2)
    if (*c & 0x80)
   8551c:	e0bff817 	ldw	r2,-32(fp)
   85520:	10800003 	ldbu	r2,0(r2)
   85524:	10803fcc 	andi	r2,r2,255
   85528:	1080201c 	xori	r2,r2,128
   8552c:	10bfe004 	addi	r2,r2,-128
   85530:	1000050e 	bge	r2,zero,85548 <edid_decode_v14+0x800>
    	edid->feature |= FS_PM_STANDBY;
   85534:	e0bffe17 	ldw	r2,-8(fp)
   85538:	10801217 	ldw	r2,72(r2)
   8553c:	10c00054 	ori	r3,r2,1
   85540:	e0bffe17 	ldw	r2,-8(fp)
   85544:	10c01215 	stw	r3,72(r2)
    if (*c & 0x40)
   85548:	e0bff817 	ldw	r2,-32(fp)
   8554c:	10800003 	ldbu	r2,0(r2)
   85550:	10803fcc 	andi	r2,r2,255
   85554:	1080100c 	andi	r2,r2,64
   85558:	10000526 	beq	r2,zero,85570 <edid_decode_v14+0x828>
    	edid->feature |= FS_PM_SUSPEND;
   8555c:	e0bffe17 	ldw	r2,-8(fp)
   85560:	10801217 	ldw	r2,72(r2)
   85564:	10c00094 	ori	r3,r2,2
   85568:	e0bffe17 	ldw	r2,-8(fp)
   8556c:	10c01215 	stw	r3,72(r2)
    if (*c & 0x20)
   85570:	e0bff817 	ldw	r2,-32(fp)
   85574:	10800003 	ldbu	r2,0(r2)
   85578:	10803fcc 	andi	r2,r2,255
   8557c:	1080080c 	andi	r2,r2,32
   85580:	10000526 	beq	r2,zero,85598 <edid_decode_v14+0x850>
    	edid->feature |= FS_PM_ACTIVE_OFF;
   85584:	e0bffe17 	ldw	r2,-8(fp)
   85588:	10801217 	ldw	r2,72(r2)
   8558c:	10c00114 	ori	r3,r2,4
   85590:	e0bffe17 	ldw	r2,-8(fp)
   85594:	10c01215 	stw	r3,72(r2)

    if (edid->input.digital_if) {
   85598:	e0bffe17 	ldw	r2,-8(fp)
   8559c:	10800817 	ldw	r2,32(r2)
   855a0:	10002a26 	beq	r2,zero,8564c <edid_decode_v14+0x904>
        switch ((*c >> 3) & 0x03) {
   855a4:	e0bff817 	ldw	r2,-32(fp)
   855a8:	10800003 	ldbu	r2,0(r2)
   855ac:	10803fcc 	andi	r2,r2,255
   855b0:	1004d0fa 	srli	r2,r2,3
   855b4:	10803fcc 	andi	r2,r2,255
   855b8:	108000cc 	andi	r2,r2,3
   855bc:	10c00060 	cmpeqi	r3,r2,1
   855c0:	18000f1e 	bne	r3,zero,85600 <edid_decode_v14+0x8b8>
   855c4:	10c00088 	cmpgei	r3,r2,2
   855c8:	1800021e 	bne	r3,zero,855d4 <edid_decode_v14+0x88c>
   855cc:	10000626 	beq	r2,zero,855e8 <edid_decode_v14+0x8a0>
   855d0:	00003b06 	br	856c0 <edid_decode_v14+0x978>
   855d4:	10c000a0 	cmpeqi	r3,r2,2
   855d8:	18000f1e 	bne	r3,zero,85618 <edid_decode_v14+0x8d0>
   855dc:	108000e0 	cmpeqi	r2,r2,3
   855e0:	1000131e 	bne	r2,zero,85630 <edid_decode_v14+0x8e8>
   855e4:	00003606 	br	856c0 <edid_decode_v14+0x978>
        case 0:
        	edid->feature |= FS_CEF_RGB444;
   855e8:	e0bffe17 	ldw	r2,-8(fp)
   855ec:	10801217 	ldw	r2,72(r2)
   855f0:	10c01014 	ori	r3,r2,64
   855f4:	e0bffe17 	ldw	r2,-8(fp)
   855f8:	10c01215 	stw	r3,72(r2)
            break;
   855fc:	00003006 	br	856c0 <edid_decode_v14+0x978>
        case 1:
        	edid->feature |= (FS_CEF_RGB444 | FS_CEF_YCBCR444);
   85600:	e0bffe17 	ldw	r2,-8(fp)
   85604:	10801217 	ldw	r2,72(r2)
   85608:	10c03014 	ori	r3,r2,192
   8560c:	e0bffe17 	ldw	r2,-8(fp)
   85610:	10c01215 	stw	r3,72(r2)
            break;
   85614:	00002a06 	br	856c0 <edid_decode_v14+0x978>
        case 2:
        	edid->feature |= (FS_CEF_RGB444 | FS_CEF_YCBCR422);
   85618:	e0bffe17 	ldw	r2,-8(fp)
   8561c:	10801217 	ldw	r2,72(r2)
   85620:	10c05014 	ori	r3,r2,320
   85624:	e0bffe17 	ldw	r2,-8(fp)
   85628:	10c01215 	stw	r3,72(r2)
            break;
   8562c:	00002406 	br	856c0 <edid_decode_v14+0x978>
        case 3:
        	edid->feature |= (FS_CEF_RGB444 | FS_CEF_YCBCR444 | FS_CEF_YCBCR422);
   85630:	e0bffe17 	ldw	r2,-8(fp)
   85634:	10801217 	ldw	r2,72(r2)
   85638:	10c07014 	ori	r3,r2,448
   8563c:	e0bffe17 	ldw	r2,-8(fp)
   85640:	10c01215 	stw	r3,72(r2)
            break;
   85644:	0001883a 	nop
   85648:	00001d06 	br	856c0 <edid_decode_v14+0x978>
        }
    } else {
        switch ((*c >> 3) & 0x03) {
   8564c:	e0bff817 	ldw	r2,-32(fp)
   85650:	10800003 	ldbu	r2,0(r2)
   85654:	10803fcc 	andi	r2,r2,255
   85658:	1004d0fa 	srli	r2,r2,3
   8565c:	10803fcc 	andi	r2,r2,255
   85660:	108000cc 	andi	r2,r2,3
   85664:	10c00060 	cmpeqi	r3,r2,1
   85668:	1800091e 	bne	r3,zero,85690 <edid_decode_v14+0x948>
   8566c:	10c000a0 	cmpeqi	r3,r2,2
   85670:	18000d1e 	bne	r3,zero,856a8 <edid_decode_v14+0x960>
   85674:	1000121e 	bne	r2,zero,856c0 <edid_decode_v14+0x978>
        case 0:
        	edid->feature |= FS_DCT_MONO_GRAY;
   85678:	e0bffe17 	ldw	r2,-8(fp)
   8567c:	10801217 	ldw	r2,72(r2)
   85680:	10c00214 	ori	r3,r2,8
   85684:	e0bffe17 	ldw	r2,-8(fp)
   85688:	10c01215 	stw	r3,72(r2)
            break;
   8568c:	00000c06 	br	856c0 <edid_decode_v14+0x978>
        case 1:
        	edid->feature |= FS_DCT_RGB;
   85690:	e0bffe17 	ldw	r2,-8(fp)
   85694:	10801217 	ldw	r2,72(r2)
   85698:	10c00414 	ori	r3,r2,16
   8569c:	e0bffe17 	ldw	r2,-8(fp)
   856a0:	10c01215 	stw	r3,72(r2)
            break;
   856a4:	00000606 	br	856c0 <edid_decode_v14+0x978>
        case 2:
        	edid->feature |= FS_DCT_NON_RGB;
   856a8:	e0bffe17 	ldw	r2,-8(fp)
   856ac:	10801217 	ldw	r2,72(r2)
   856b0:	10c00814 	ori	r3,r2,32
   856b4:	e0bffe17 	ldw	r2,-8(fp)
   856b8:	10c01215 	stw	r3,72(r2)
            break;
   856bc:	0001883a 	nop
        }
    }

    if (*c & 0x04)
   856c0:	e0bff817 	ldw	r2,-32(fp)
   856c4:	10800003 	ldbu	r2,0(r2)
   856c8:	10803fcc 	andi	r2,r2,255
   856cc:	1080010c 	andi	r2,r2,4
   856d0:	10000526 	beq	r2,zero,856e8 <edid_decode_v14+0x9a0>
    	edid->feature |= FS_OF_SRGB_DEFAULT;
   856d4:	e0bffe17 	ldw	r2,-8(fp)
   856d8:	10801217 	ldw	r2,72(r2)
   856dc:	10c08014 	ori	r3,r2,512
   856e0:	e0bffe17 	ldw	r2,-8(fp)
   856e4:	10c01215 	stw	r3,72(r2)
    if (*c & 0x02)
   856e8:	e0bff817 	ldw	r2,-32(fp)
   856ec:	10800003 	ldbu	r2,0(r2)
   856f0:	10803fcc 	andi	r2,r2,255
   856f4:	1080008c 	andi	r2,r2,2
   856f8:	10000526 	beq	r2,zero,85710 <edid_decode_v14+0x9c8>
    	edid->feature |= FS_OF_NATIVE_PREFERRED;
   856fc:	e0bffe17 	ldw	r2,-8(fp)
   85700:	10801217 	ldw	r2,72(r2)
   85704:	10c10014 	ori	r3,r2,1024
   85708:	e0bffe17 	ldw	r2,-8(fp)
   8570c:	10c01215 	stw	r3,72(r2)
    if (*c & 0x01)
   85710:	e0bff817 	ldw	r2,-32(fp)
   85714:	10800003 	ldbu	r2,0(r2)
   85718:	10803fcc 	andi	r2,r2,255
   8571c:	1080004c 	andi	r2,r2,1
   85720:	10000526 	beq	r2,zero,85738 <edid_decode_v14+0x9f0>
    	edid->feature |= FS_OF_CONTINUOUS_FREQ;
   85724:	e0bffe17 	ldw	r2,-8(fp)
   85728:	10801217 	ldw	r2,72(r2)
   8572c:	10c20014 	ori	r3,r2,2048
   85730:	e0bffe17 	ldw	r2,-8(fp)
   85734:	10c01215 	stw	r3,72(r2)

    // chromaticity coordinates
    c = &edid_bin[0x19];
   85738:	e0bfff17 	ldw	r2,-4(fp)
   8573c:	10800644 	addi	r2,r2,25
   85740:	e0bff815 	stw	r2,-32(fp)

    edid->chromaticity.r_x = ((u16)c[2] << 2) | (((u16)c[0] >> 6) & 0x3);
   85744:	e0bff817 	ldw	r2,-32(fp)
   85748:	10800084 	addi	r2,r2,2
   8574c:	10800003 	ldbu	r2,0(r2)
   85750:	10803fcc 	andi	r2,r2,255
   85754:	1085883a 	add	r2,r2,r2
   85758:	1085883a 	add	r2,r2,r2
   8575c:	1007883a 	mov	r3,r2
   85760:	e0bff817 	ldw	r2,-32(fp)
   85764:	10800003 	ldbu	r2,0(r2)
   85768:	10803fcc 	andi	r2,r2,255
   8576c:	1004d1ba 	srli	r2,r2,6
   85770:	10803fcc 	andi	r2,r2,255
   85774:	108000cc 	andi	r2,r2,3
   85778:	1886b03a 	or	r3,r3,r2
   8577c:	e0bffe17 	ldw	r2,-8(fp)
   85780:	10c01315 	stw	r3,76(r2)
    edid->chromaticity.r_y = ((u16)c[3] << 2) | (((u16)c[0] >> 4) & 0x3);
   85784:	e0bff817 	ldw	r2,-32(fp)
   85788:	108000c4 	addi	r2,r2,3
   8578c:	10800003 	ldbu	r2,0(r2)
   85790:	10803fcc 	andi	r2,r2,255
   85794:	1085883a 	add	r2,r2,r2
   85798:	1085883a 	add	r2,r2,r2
   8579c:	1007883a 	mov	r3,r2
   857a0:	e0bff817 	ldw	r2,-32(fp)
   857a4:	10800003 	ldbu	r2,0(r2)
   857a8:	10803fcc 	andi	r2,r2,255
   857ac:	1004d13a 	srli	r2,r2,4
   857b0:	10803fcc 	andi	r2,r2,255
   857b4:	108000cc 	andi	r2,r2,3
   857b8:	1886b03a 	or	r3,r3,r2
   857bc:	e0bffe17 	ldw	r2,-8(fp)
   857c0:	10c01415 	stw	r3,80(r2)
    edid->chromaticity.g_x = ((u16)c[4] << 2) | (((u16)c[0] >> 2) & 0x3);
   857c4:	e0bff817 	ldw	r2,-32(fp)
   857c8:	10800104 	addi	r2,r2,4
   857cc:	10800003 	ldbu	r2,0(r2)
   857d0:	10803fcc 	andi	r2,r2,255
   857d4:	1085883a 	add	r2,r2,r2
   857d8:	1085883a 	add	r2,r2,r2
   857dc:	1007883a 	mov	r3,r2
   857e0:	e0bff817 	ldw	r2,-32(fp)
   857e4:	10800003 	ldbu	r2,0(r2)
   857e8:	10803fcc 	andi	r2,r2,255
   857ec:	1004d0ba 	srli	r2,r2,2
   857f0:	10803fcc 	andi	r2,r2,255
   857f4:	108000cc 	andi	r2,r2,3
   857f8:	1886b03a 	or	r3,r3,r2
   857fc:	e0bffe17 	ldw	r2,-8(fp)
   85800:	10c01515 	stw	r3,84(r2)
    edid->chromaticity.g_y = ((u16)c[5] << 2) | ((u16)c[0] & 0x3);
   85804:	e0bff817 	ldw	r2,-32(fp)
   85808:	10800144 	addi	r2,r2,5
   8580c:	10800003 	ldbu	r2,0(r2)
   85810:	10803fcc 	andi	r2,r2,255
   85814:	1085883a 	add	r2,r2,r2
   85818:	1085883a 	add	r2,r2,r2
   8581c:	1007883a 	mov	r3,r2
   85820:	e0bff817 	ldw	r2,-32(fp)
   85824:	10800003 	ldbu	r2,0(r2)
   85828:	10803fcc 	andi	r2,r2,255
   8582c:	108000cc 	andi	r2,r2,3
   85830:	1886b03a 	or	r3,r3,r2
   85834:	e0bffe17 	ldw	r2,-8(fp)
   85838:	10c01615 	stw	r3,88(r2)
    edid->chromaticity.b_x = ((u16)c[6] << 2) | (((u16)c[1] >> 6) & 0x3);
   8583c:	e0bff817 	ldw	r2,-32(fp)
   85840:	10800184 	addi	r2,r2,6
   85844:	10800003 	ldbu	r2,0(r2)
   85848:	10803fcc 	andi	r2,r2,255
   8584c:	1085883a 	add	r2,r2,r2
   85850:	1085883a 	add	r2,r2,r2
   85854:	1007883a 	mov	r3,r2
   85858:	e0bff817 	ldw	r2,-32(fp)
   8585c:	10800044 	addi	r2,r2,1
   85860:	10800003 	ldbu	r2,0(r2)
   85864:	10803fcc 	andi	r2,r2,255
   85868:	1004d1ba 	srli	r2,r2,6
   8586c:	10803fcc 	andi	r2,r2,255
   85870:	108000cc 	andi	r2,r2,3
   85874:	1886b03a 	or	r3,r3,r2
   85878:	e0bffe17 	ldw	r2,-8(fp)
   8587c:	10c01715 	stw	r3,92(r2)
    edid->chromaticity.b_y = ((u16)c[7] << 2) | (((u16)c[1] >> 4) & 0x3);
   85880:	e0bff817 	ldw	r2,-32(fp)
   85884:	108001c4 	addi	r2,r2,7
   85888:	10800003 	ldbu	r2,0(r2)
   8588c:	10803fcc 	andi	r2,r2,255
   85890:	1085883a 	add	r2,r2,r2
   85894:	1085883a 	add	r2,r2,r2
   85898:	1007883a 	mov	r3,r2
   8589c:	e0bff817 	ldw	r2,-32(fp)
   858a0:	10800044 	addi	r2,r2,1
   858a4:	10800003 	ldbu	r2,0(r2)
   858a8:	10803fcc 	andi	r2,r2,255
   858ac:	1004d13a 	srli	r2,r2,4
   858b0:	10803fcc 	andi	r2,r2,255
   858b4:	108000cc 	andi	r2,r2,3
   858b8:	1886b03a 	or	r3,r3,r2
   858bc:	e0bffe17 	ldw	r2,-8(fp)
   858c0:	10c01815 	stw	r3,96(r2)
    edid->chromaticity.w_x = ((u16)c[8] << 2) | (((u16)c[1] >> 2) & 0x3);
   858c4:	e0bff817 	ldw	r2,-32(fp)
   858c8:	10800204 	addi	r2,r2,8
   858cc:	10800003 	ldbu	r2,0(r2)
   858d0:	10803fcc 	andi	r2,r2,255
   858d4:	1085883a 	add	r2,r2,r2
   858d8:	1085883a 	add	r2,r2,r2
   858dc:	1007883a 	mov	r3,r2
   858e0:	e0bff817 	ldw	r2,-32(fp)
   858e4:	10800044 	addi	r2,r2,1
   858e8:	10800003 	ldbu	r2,0(r2)
   858ec:	10803fcc 	andi	r2,r2,255
   858f0:	1004d0ba 	srli	r2,r2,2
   858f4:	10803fcc 	andi	r2,r2,255
   858f8:	108000cc 	andi	r2,r2,3
   858fc:	1886b03a 	or	r3,r3,r2
   85900:	e0bffe17 	ldw	r2,-8(fp)
   85904:	10c01915 	stw	r3,100(r2)
    edid->chromaticity.w_y = ((u16)c[9] << 2) | ((u16)c[1] & 0x3);
   85908:	e0bff817 	ldw	r2,-32(fp)
   8590c:	10800244 	addi	r2,r2,9
   85910:	10800003 	ldbu	r2,0(r2)
   85914:	10803fcc 	andi	r2,r2,255
   85918:	1085883a 	add	r2,r2,r2
   8591c:	1085883a 	add	r2,r2,r2
   85920:	1007883a 	mov	r3,r2
   85924:	e0bff817 	ldw	r2,-32(fp)
   85928:	10800044 	addi	r2,r2,1
   8592c:	10800003 	ldbu	r2,0(r2)
   85930:	10803fcc 	andi	r2,r2,255
   85934:	108000cc 	andi	r2,r2,3
   85938:	1886b03a 	or	r3,r3,r2
   8593c:	e0bffe17 	ldw	r2,-8(fp)
   85940:	10c01a15 	stw	r3,104(r2)

    // established timings I/II
    c = &edid_bin[0x23];
   85944:	e0bfff17 	ldw	r2,-4(fp)
   85948:	108008c4 	addi	r2,r2,35
   8594c:	e0bff815 	stw	r2,-32(fp)

	eb_establish_timing(&edid->timing_1_2[0], 720, 400, 70, c[0] & 0x80);
   85950:	e0bffe17 	ldw	r2,-8(fp)
   85954:	10801b04 	addi	r2,r2,108
   85958:	e0fff817 	ldw	r3,-32(fp)
   8595c:	18c00003 	ldbu	r3,0(r3)
   85960:	18c03fcc 	andi	r3,r3,255
   85964:	18c0200c 	andi	r3,r3,128
   85968:	d8c00015 	stw	r3,0(sp)
   8596c:	1009883a 	mov	r4,r2
   85970:	0140b404 	movi	r5,720
   85974:	01806404 	movi	r6,400
   85978:	01c01184 	movi	r7,70
   8597c:	008192c0 	call	8192c <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[1], 720, 400, 88, c[0] & 0x40);
   85980:	e0bffe17 	ldw	r2,-8(fp)
   85984:	10802104 	addi	r2,r2,132
   85988:	e0fff817 	ldw	r3,-32(fp)
   8598c:	18c00003 	ldbu	r3,0(r3)
   85990:	18c03fcc 	andi	r3,r3,255
   85994:	18c0100c 	andi	r3,r3,64
   85998:	d8c00015 	stw	r3,0(sp)
   8599c:	1009883a 	mov	r4,r2
   859a0:	0140b404 	movi	r5,720
   859a4:	01806404 	movi	r6,400
   859a8:	01c01604 	movi	r7,88
   859ac:	008192c0 	call	8192c <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[2], 640, 480, 60, c[0] & 0x20);
   859b0:	e0bffe17 	ldw	r2,-8(fp)
   859b4:	10802704 	addi	r2,r2,156
   859b8:	e0fff817 	ldw	r3,-32(fp)
   859bc:	18c00003 	ldbu	r3,0(r3)
   859c0:	18c03fcc 	andi	r3,r3,255
   859c4:	18c0080c 	andi	r3,r3,32
   859c8:	d8c00015 	stw	r3,0(sp)
   859cc:	1009883a 	mov	r4,r2
   859d0:	0140a004 	movi	r5,640
   859d4:	01807804 	movi	r6,480
   859d8:	01c00f04 	movi	r7,60
   859dc:	008192c0 	call	8192c <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[3], 640, 480, 67, c[0] & 0x10);
   859e0:	e0bffe17 	ldw	r2,-8(fp)
   859e4:	10802d04 	addi	r2,r2,180
   859e8:	e0fff817 	ldw	r3,-32(fp)
   859ec:	18c00003 	ldbu	r3,0(r3)
   859f0:	18c03fcc 	andi	r3,r3,255
   859f4:	18c0040c 	andi	r3,r3,16
   859f8:	d8c00015 	stw	r3,0(sp)
   859fc:	1009883a 	mov	r4,r2
   85a00:	0140a004 	movi	r5,640
   85a04:	01807804 	movi	r6,480
   85a08:	01c010c4 	movi	r7,67
   85a0c:	008192c0 	call	8192c <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[4], 640, 480, 72, c[0] & 0x08);
   85a10:	e0bffe17 	ldw	r2,-8(fp)
   85a14:	10803304 	addi	r2,r2,204
   85a18:	e0fff817 	ldw	r3,-32(fp)
   85a1c:	18c00003 	ldbu	r3,0(r3)
   85a20:	18c03fcc 	andi	r3,r3,255
   85a24:	18c0020c 	andi	r3,r3,8
   85a28:	d8c00015 	stw	r3,0(sp)
   85a2c:	1009883a 	mov	r4,r2
   85a30:	0140a004 	movi	r5,640
   85a34:	01807804 	movi	r6,480
   85a38:	01c01204 	movi	r7,72
   85a3c:	008192c0 	call	8192c <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[5], 640, 480, 75, c[0] & 0x04);
   85a40:	e0bffe17 	ldw	r2,-8(fp)
   85a44:	10803904 	addi	r2,r2,228
   85a48:	e0fff817 	ldw	r3,-32(fp)
   85a4c:	18c00003 	ldbu	r3,0(r3)
   85a50:	18c03fcc 	andi	r3,r3,255
   85a54:	18c0010c 	andi	r3,r3,4
   85a58:	d8c00015 	stw	r3,0(sp)
   85a5c:	1009883a 	mov	r4,r2
   85a60:	0140a004 	movi	r5,640
   85a64:	01807804 	movi	r6,480
   85a68:	01c012c4 	movi	r7,75
   85a6c:	008192c0 	call	8192c <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[6], 800, 600, 56, c[0] & 0x02);
   85a70:	e0bffe17 	ldw	r2,-8(fp)
   85a74:	10803f04 	addi	r2,r2,252
   85a78:	e0fff817 	ldw	r3,-32(fp)
   85a7c:	18c00003 	ldbu	r3,0(r3)
   85a80:	18c03fcc 	andi	r3,r3,255
   85a84:	18c0008c 	andi	r3,r3,2
   85a88:	d8c00015 	stw	r3,0(sp)
   85a8c:	1009883a 	mov	r4,r2
   85a90:	0140c804 	movi	r5,800
   85a94:	01809604 	movi	r6,600
   85a98:	01c00e04 	movi	r7,56
   85a9c:	008192c0 	call	8192c <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[7], 800, 600, 60, c[0] & 0x01);
   85aa0:	e0bffe17 	ldw	r2,-8(fp)
   85aa4:	10804504 	addi	r2,r2,276
   85aa8:	e0fff817 	ldw	r3,-32(fp)
   85aac:	18c00003 	ldbu	r3,0(r3)
   85ab0:	18c03fcc 	andi	r3,r3,255
   85ab4:	18c0004c 	andi	r3,r3,1
   85ab8:	d8c00015 	stw	r3,0(sp)
   85abc:	1009883a 	mov	r4,r2
   85ac0:	0140c804 	movi	r5,800
   85ac4:	01809604 	movi	r6,600
   85ac8:	01c00f04 	movi	r7,60
   85acc:	008192c0 	call	8192c <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[8], 800, 600, 72, c[1] & 0x80);
   85ad0:	e0bffe17 	ldw	r2,-8(fp)
   85ad4:	10804b04 	addi	r2,r2,300
   85ad8:	e0fff817 	ldw	r3,-32(fp)
   85adc:	18c00044 	addi	r3,r3,1
   85ae0:	18c00003 	ldbu	r3,0(r3)
   85ae4:	18c03fcc 	andi	r3,r3,255
   85ae8:	18c0200c 	andi	r3,r3,128
   85aec:	d8c00015 	stw	r3,0(sp)
   85af0:	1009883a 	mov	r4,r2
   85af4:	0140c804 	movi	r5,800
   85af8:	01809604 	movi	r6,600
   85afc:	01c01204 	movi	r7,72
   85b00:	008192c0 	call	8192c <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[9], 800, 600, 75, c[1] & 0x40);
   85b04:	e0bffe17 	ldw	r2,-8(fp)
   85b08:	10805104 	addi	r2,r2,324
   85b0c:	e0fff817 	ldw	r3,-32(fp)
   85b10:	18c00044 	addi	r3,r3,1
   85b14:	18c00003 	ldbu	r3,0(r3)
   85b18:	18c03fcc 	andi	r3,r3,255
   85b1c:	18c0100c 	andi	r3,r3,64
   85b20:	d8c00015 	stw	r3,0(sp)
   85b24:	1009883a 	mov	r4,r2
   85b28:	0140c804 	movi	r5,800
   85b2c:	01809604 	movi	r6,600
   85b30:	01c012c4 	movi	r7,75
   85b34:	008192c0 	call	8192c <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[10], 823, 624, 75, c[1] & 0x20);
   85b38:	e0bffe17 	ldw	r2,-8(fp)
   85b3c:	10805704 	addi	r2,r2,348
   85b40:	e0fff817 	ldw	r3,-32(fp)
   85b44:	18c00044 	addi	r3,r3,1
   85b48:	18c00003 	ldbu	r3,0(r3)
   85b4c:	18c03fcc 	andi	r3,r3,255
   85b50:	18c0080c 	andi	r3,r3,32
   85b54:	d8c00015 	stw	r3,0(sp)
   85b58:	1009883a 	mov	r4,r2
   85b5c:	0140cdc4 	movi	r5,823
   85b60:	01809c04 	movi	r6,624
   85b64:	01c012c4 	movi	r7,75
   85b68:	008192c0 	call	8192c <eb_establish_timing>
	eb_establish_timing_i(&edid->timing_1_2[11], 1024, 768, 87, c[1] & 0x10);
   85b6c:	e0bffe17 	ldw	r2,-8(fp)
   85b70:	10805d04 	addi	r2,r2,372
   85b74:	e0fff817 	ldw	r3,-32(fp)
   85b78:	18c00044 	addi	r3,r3,1
   85b7c:	18c00003 	ldbu	r3,0(r3)
   85b80:	18c03fcc 	andi	r3,r3,255
   85b84:	18c0040c 	andi	r3,r3,16
   85b88:	d8c00015 	stw	r3,0(sp)
   85b8c:	1009883a 	mov	r4,r2
   85b90:	01410004 	movi	r5,1024
   85b94:	0180c004 	movi	r6,768
   85b98:	01c015c4 	movi	r7,87
   85b9c:	00819d40 	call	819d4 <eb_establish_timing_i>
	eb_establish_timing(&edid->timing_1_2[12], 1024, 768, 60, c[1] & 0x08);
   85ba0:	e0bffe17 	ldw	r2,-8(fp)
   85ba4:	10806304 	addi	r2,r2,396
   85ba8:	e0fff817 	ldw	r3,-32(fp)
   85bac:	18c00044 	addi	r3,r3,1
   85bb0:	18c00003 	ldbu	r3,0(r3)
   85bb4:	18c03fcc 	andi	r3,r3,255
   85bb8:	18c0020c 	andi	r3,r3,8
   85bbc:	d8c00015 	stw	r3,0(sp)
   85bc0:	1009883a 	mov	r4,r2
   85bc4:	01410004 	movi	r5,1024
   85bc8:	0180c004 	movi	r6,768
   85bcc:	01c00f04 	movi	r7,60
   85bd0:	008192c0 	call	8192c <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[13], 1024, 768, 70, c[1] & 0x04);
   85bd4:	e0bffe17 	ldw	r2,-8(fp)
   85bd8:	10806904 	addi	r2,r2,420
   85bdc:	e0fff817 	ldw	r3,-32(fp)
   85be0:	18c00044 	addi	r3,r3,1
   85be4:	18c00003 	ldbu	r3,0(r3)
   85be8:	18c03fcc 	andi	r3,r3,255
   85bec:	18c0010c 	andi	r3,r3,4
   85bf0:	d8c00015 	stw	r3,0(sp)
   85bf4:	1009883a 	mov	r4,r2
   85bf8:	01410004 	movi	r5,1024
   85bfc:	0180c004 	movi	r6,768
   85c00:	01c01184 	movi	r7,70
   85c04:	008192c0 	call	8192c <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[14], 1024, 768, 75, c[1] & 0x02);
   85c08:	e0bffe17 	ldw	r2,-8(fp)
   85c0c:	10806f04 	addi	r2,r2,444
   85c10:	e0fff817 	ldw	r3,-32(fp)
   85c14:	18c00044 	addi	r3,r3,1
   85c18:	18c00003 	ldbu	r3,0(r3)
   85c1c:	18c03fcc 	andi	r3,r3,255
   85c20:	18c0008c 	andi	r3,r3,2
   85c24:	d8c00015 	stw	r3,0(sp)
   85c28:	1009883a 	mov	r4,r2
   85c2c:	01410004 	movi	r5,1024
   85c30:	0180c004 	movi	r6,768
   85c34:	01c012c4 	movi	r7,75
   85c38:	008192c0 	call	8192c <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[15], 1280, 1024, 75, c[1] & 0x01);
   85c3c:	e0bffe17 	ldw	r2,-8(fp)
   85c40:	10807504 	addi	r2,r2,468
   85c44:	e0fff817 	ldw	r3,-32(fp)
   85c48:	18c00044 	addi	r3,r3,1
   85c4c:	18c00003 	ldbu	r3,0(r3)
   85c50:	18c03fcc 	andi	r3,r3,255
   85c54:	18c0004c 	andi	r3,r3,1
   85c58:	d8c00015 	stw	r3,0(sp)
   85c5c:	1009883a 	mov	r4,r2
   85c60:	01414004 	movi	r5,1280
   85c64:	01810004 	movi	r6,1024
   85c68:	01c012c4 	movi	r7,75
   85c6c:	008192c0 	call	8192c <eb_establish_timing>
	eb_establish_timing(&edid->timing_1_2[16], 1152, 870, 75, c[2] & 0x80);
   85c70:	e0bffe17 	ldw	r2,-8(fp)
   85c74:	10807b04 	addi	r2,r2,492
   85c78:	e0fff817 	ldw	r3,-32(fp)
   85c7c:	18c00084 	addi	r3,r3,2
   85c80:	18c00003 	ldbu	r3,0(r3)
   85c84:	18c03fcc 	andi	r3,r3,255
   85c88:	18c0200c 	andi	r3,r3,128
   85c8c:	d8c00015 	stw	r3,0(sp)
   85c90:	1009883a 	mov	r4,r2
   85c94:	01412004 	movi	r5,1152
   85c98:	0180d984 	movi	r6,870
   85c9c:	01c012c4 	movi	r7,75
   85ca0:	008192c0 	call	8192c <eb_establish_timing>

    // standard timings
    c = &edid_bin[0x26];
   85ca4:	e0bfff17 	ldw	r2,-4(fp)
   85ca8:	10800984 	addi	r2,r2,38
   85cac:	e0bff815 	stw	r2,-32(fp)

    for (i = 0; i < 8; ++i, c += 2) {
   85cb0:	e03ffa15 	stw	zero,-24(fp)
   85cb4:	00005406 	br	85e08 <edid_decode_v14+0x10c0>
        if (*c == 0)
   85cb8:	e0bff817 	ldw	r2,-32(fp)
   85cbc:	10800003 	ldbu	r2,0(r2)
   85cc0:	10803fcc 	andi	r2,r2,255
   85cc4:	10004926 	beq	r2,zero,85dec <edid_decode_v14+0x10a4>
        	continue;

        edid->standard_timings[i].horizontal = (c[0] + 31) * 8;
   85cc8:	e0bff817 	ldw	r2,-32(fp)
   85ccc:	10800003 	ldbu	r2,0(r2)
   85cd0:	10803fcc 	andi	r2,r2,255
   85cd4:	108007c4 	addi	r2,r2,31
   85cd8:	100690fa 	slli	r3,r2,3
   85cdc:	e13ffe17 	ldw	r4,-8(fp)
   85ce0:	e0bffa17 	ldw	r2,-24(fp)
   85ce4:	10800324 	muli	r2,r2,12
   85ce8:	2085883a 	add	r2,r4,r2
   85cec:	10808104 	addi	r2,r2,516
   85cf0:	10c00015 	stw	r3,0(r2)

		switch ((c[1] >> 6) & 0x3) {
   85cf4:	e0bff817 	ldw	r2,-32(fp)
   85cf8:	10800044 	addi	r2,r2,1
   85cfc:	10800003 	ldbu	r2,0(r2)
   85d00:	10803fcc 	andi	r2,r2,255
   85d04:	1004d1ba 	srli	r2,r2,6
   85d08:	10803fcc 	andi	r2,r2,255
   85d0c:	108000cc 	andi	r2,r2,3
   85d10:	10c00060 	cmpeqi	r3,r2,1
   85d14:	1800101e 	bne	r3,zero,85d58 <edid_decode_v14+0x1010>
   85d18:	10c00088 	cmpgei	r3,r2,2
   85d1c:	1800021e 	bne	r3,zero,85d28 <edid_decode_v14+0xfe0>
   85d20:	10000626 	beq	r2,zero,85d3c <edid_decode_v14+0xff4>
   85d24:	00002406 	br	85db8 <edid_decode_v14+0x1070>
   85d28:	10c000a0 	cmpeqi	r3,r2,2
   85d2c:	1800121e 	bne	r3,zero,85d78 <edid_decode_v14+0x1030>
   85d30:	108000e0 	cmpeqi	r2,r2,3
   85d34:	1000181e 	bne	r2,zero,85d98 <edid_decode_v14+0x1050>
   85d38:	00001f06 	br	85db8 <edid_decode_v14+0x1070>
		case 0:
			edid->standard_timings[i].aspect_ratio = ST_AR_16_10;
   85d3c:	e0fffe17 	ldw	r3,-8(fp)
   85d40:	e0bffa17 	ldw	r2,-24(fp)
   85d44:	10800324 	muli	r2,r2,12
   85d48:	1885883a 	add	r2,r3,r2
   85d4c:	10808204 	addi	r2,r2,520
   85d50:	10000015 	stw	zero,0(r2)
			break;
   85d54:	00001806 	br	85db8 <edid_decode_v14+0x1070>
		case 1:
			edid->standard_timings[i].aspect_ratio = ST_AR_4_3;
   85d58:	e0fffe17 	ldw	r3,-8(fp)
   85d5c:	e0bffa17 	ldw	r2,-24(fp)
   85d60:	10800324 	muli	r2,r2,12
   85d64:	1885883a 	add	r2,r3,r2
   85d68:	10808204 	addi	r2,r2,520
   85d6c:	00c00044 	movi	r3,1
   85d70:	10c00015 	stw	r3,0(r2)
			break;
   85d74:	00001006 	br	85db8 <edid_decode_v14+0x1070>
		case 2:
			edid->standard_timings[i].aspect_ratio = ST_AR_5_4;
   85d78:	e0fffe17 	ldw	r3,-8(fp)
   85d7c:	e0bffa17 	ldw	r2,-24(fp)
   85d80:	10800324 	muli	r2,r2,12
   85d84:	1885883a 	add	r2,r3,r2
   85d88:	10808204 	addi	r2,r2,520
   85d8c:	00c00084 	movi	r3,2
   85d90:	10c00015 	stw	r3,0(r2)
			break;
   85d94:	00000806 	br	85db8 <edid_decode_v14+0x1070>
		case 3:
			edid->standard_timings[i].aspect_ratio = ST_AR_16_9;
   85d98:	e0fffe17 	ldw	r3,-8(fp)
   85d9c:	e0bffa17 	ldw	r2,-24(fp)
   85da0:	10800324 	muli	r2,r2,12
   85da4:	1885883a 	add	r2,r3,r2
   85da8:	10808204 	addi	r2,r2,520
   85dac:	00c000c4 	movi	r3,3
   85db0:	10c00015 	stw	r3,0(r2)
			break;
   85db4:	0001883a 	nop
		}

		edid->standard_timings[i].refresh_rate = (c[1] & 0x3f) + 60;
   85db8:	e0bff817 	ldw	r2,-32(fp)
   85dbc:	10800044 	addi	r2,r2,1
   85dc0:	10800003 	ldbu	r2,0(r2)
   85dc4:	10803fcc 	andi	r2,r2,255
   85dc8:	10800fcc 	andi	r2,r2,63
   85dcc:	10c00f04 	addi	r3,r2,60
   85dd0:	e13ffe17 	ldw	r4,-8(fp)
   85dd4:	e0bffa17 	ldw	r2,-24(fp)
   85dd8:	10800324 	muli	r2,r2,12
   85ddc:	2085883a 	add	r2,r4,r2
   85de0:	10808304 	addi	r2,r2,524
   85de4:	10c00015 	stw	r3,0(r2)
   85de8:	00000106 	br	85df0 <edid_decode_v14+0x10a8>
    // standard timings
    c = &edid_bin[0x26];

    for (i = 0; i < 8; ++i, c += 2) {
        if (*c == 0)
        	continue;
   85dec:	0001883a 	nop
	eb_establish_timing(&edid->timing_1_2[16], 1152, 870, 75, c[2] & 0x80);

    // standard timings
    c = &edid_bin[0x26];

    for (i = 0; i < 8; ++i, c += 2) {
   85df0:	e0bffa17 	ldw	r2,-24(fp)
   85df4:	10800044 	addi	r2,r2,1
   85df8:	e0bffa15 	stw	r2,-24(fp)
   85dfc:	e0bff817 	ldw	r2,-32(fp)
   85e00:	10800084 	addi	r2,r2,2
   85e04:	e0bff815 	stw	r2,-32(fp)
   85e08:	e0bffa17 	ldw	r2,-24(fp)
   85e0c:	10800210 	cmplti	r2,r2,8
   85e10:	103fa91e 	bne	r2,zero,85cb8 <edid_decode_v14+0xf70>

		edid->standard_timings[i].refresh_rate = (c[1] & 0x3f) + 60;
    }

    // 18-byte descriptors x 4
    for (i = 0; i < 4; ++i) {
   85e14:	e03ffa15 	stw	zero,-24(fp)
   85e18:	000c0e06 	br	88e54 <edid_decode_v14+0x410c>

    	c = &edid_bin[0x36 + 18 * i];
   85e1c:	e0bffa17 	ldw	r2,-24(fp)
   85e20:	108004a4 	muli	r2,r2,18
   85e24:	10800d84 	addi	r2,r2,54
   85e28:	e0ffff17 	ldw	r3,-4(fp)
   85e2c:	1885883a 	add	r2,r3,r2
   85e30:	e0bff815 	stw	r2,-32(fp)

        if ((c[0] != 0) || (c[1] != 0)) {
   85e34:	e0bff817 	ldw	r2,-32(fp)
   85e38:	10800003 	ldbu	r2,0(r2)
   85e3c:	10803fcc 	andi	r2,r2,255
   85e40:	1000051e 	bne	r2,zero,85e58 <edid_decode_v14+0x1110>
   85e44:	e0bff817 	ldw	r2,-32(fp)
   85e48:	10800044 	addi	r2,r2,1
   85e4c:	10800003 	ldbu	r2,0(r2)
   85e50:	10803fcc 	andi	r2,r2,255
   85e54:	10023d26 	beq	r2,zero,8674c <edid_decode_v14+0x1a04>
            // detailed timing definition (preferred timing if is the first descriptor)

        	edid->descriptors[i].type = DT_DETAILED_TIMING;
   85e58:	e0fffe17 	ldw	r3,-8(fp)
   85e5c:	e0bffa17 	ldw	r2,-24(fp)
   85e60:	10815c24 	muli	r2,r2,1392
   85e64:	1885883a 	add	r2,r3,r2
   85e68:	10809904 	addi	r2,r2,612
   85e6c:	10000015 	stw	zero,0(r2)

            edid->descriptors[i].detailed_timing.pixel_clock = (((int)c[1] << 8) | (int)c[0]) * 10000;
   85e70:	e0bff817 	ldw	r2,-32(fp)
   85e74:	10800044 	addi	r2,r2,1
   85e78:	10800003 	ldbu	r2,0(r2)
   85e7c:	10803fcc 	andi	r2,r2,255
   85e80:	1006923a 	slli	r3,r2,8
   85e84:	e0bff817 	ldw	r2,-32(fp)
   85e88:	10800003 	ldbu	r2,0(r2)
   85e8c:	10803fcc 	andi	r2,r2,255
   85e90:	1884b03a 	or	r2,r3,r2
   85e94:	10c9c424 	muli	r3,r2,10000
   85e98:	e13ffe17 	ldw	r4,-8(fp)
   85e9c:	e0bffa17 	ldw	r2,-24(fp)
   85ea0:	10815c24 	muli	r2,r2,1392
   85ea4:	2085883a 	add	r2,r4,r2
   85ea8:	10809b04 	addi	r2,r2,620
   85eac:	10c00015 	stw	r3,0(r2)
            edid->descriptors[i].detailed_timing.width = (((int)c[4] << 4) & 0xf00) | (int)c[2];
   85eb0:	e0bff817 	ldw	r2,-32(fp)
   85eb4:	10800104 	addi	r2,r2,4
   85eb8:	10800003 	ldbu	r2,0(r2)
   85ebc:	10803fcc 	andi	r2,r2,255
   85ec0:	1004913a 	slli	r2,r2,4
   85ec4:	10c3c00c 	andi	r3,r2,3840
   85ec8:	e0bff817 	ldw	r2,-32(fp)
   85ecc:	10800084 	addi	r2,r2,2
   85ed0:	10800003 	ldbu	r2,0(r2)
   85ed4:	10803fcc 	andi	r2,r2,255
   85ed8:	1886b03a 	or	r3,r3,r2
   85edc:	e13ffe17 	ldw	r4,-8(fp)
   85ee0:	e0bffa17 	ldw	r2,-24(fp)
   85ee4:	10815c24 	muli	r2,r2,1392
   85ee8:	2085883a 	add	r2,r4,r2
   85eec:	10809c04 	addi	r2,r2,624
   85ef0:	10c00015 	stw	r3,0(r2)
            edid->descriptors[i].detailed_timing.height = (((int)c[7] << 4) & 0xf00) | (int)c[5];
   85ef4:	e0bff817 	ldw	r2,-32(fp)
   85ef8:	108001c4 	addi	r2,r2,7
   85efc:	10800003 	ldbu	r2,0(r2)
   85f00:	10803fcc 	andi	r2,r2,255
   85f04:	1004913a 	slli	r2,r2,4
   85f08:	10c3c00c 	andi	r3,r2,3840
   85f0c:	e0bff817 	ldw	r2,-32(fp)
   85f10:	10800144 	addi	r2,r2,5
   85f14:	10800003 	ldbu	r2,0(r2)
   85f18:	10803fcc 	andi	r2,r2,255
   85f1c:	1886b03a 	or	r3,r3,r2
   85f20:	e13ffe17 	ldw	r4,-8(fp)
   85f24:	e0bffa17 	ldw	r2,-24(fp)
   85f28:	10815c24 	muli	r2,r2,1392
   85f2c:	2085883a 	add	r2,r4,r2
   85f30:	10809d04 	addi	r2,r2,628
   85f34:	10c00015 	stw	r3,0(r2)
            edid->descriptors[i].detailed_timing.h_blank = (((int)c[4] << 8) & 0xf00) | (int)c[3];
   85f38:	e0bff817 	ldw	r2,-32(fp)
   85f3c:	10800104 	addi	r2,r2,4
   85f40:	10800003 	ldbu	r2,0(r2)
   85f44:	10803fcc 	andi	r2,r2,255
   85f48:	1004923a 	slli	r2,r2,8
   85f4c:	10c3c00c 	andi	r3,r2,3840
   85f50:	e0bff817 	ldw	r2,-32(fp)
   85f54:	108000c4 	addi	r2,r2,3
   85f58:	10800003 	ldbu	r2,0(r2)
   85f5c:	10803fcc 	andi	r2,r2,255
   85f60:	1886b03a 	or	r3,r3,r2
   85f64:	e13ffe17 	ldw	r4,-8(fp)
   85f68:	e0bffa17 	ldw	r2,-24(fp)
   85f6c:	10815c24 	muli	r2,r2,1392
   85f70:	2085883a 	add	r2,r4,r2
   85f74:	10809e04 	addi	r2,r2,632
   85f78:	10c00015 	stw	r3,0(r2)
            edid->descriptors[i].detailed_timing.v_blank = (((int)c[7] << 8) & 0xf00) | (int)c[6];
   85f7c:	e0bff817 	ldw	r2,-32(fp)
   85f80:	108001c4 	addi	r2,r2,7
   85f84:	10800003 	ldbu	r2,0(r2)
   85f88:	10803fcc 	andi	r2,r2,255
   85f8c:	1004923a 	slli	r2,r2,8
   85f90:	10c3c00c 	andi	r3,r2,3840
   85f94:	e0bff817 	ldw	r2,-32(fp)
   85f98:	10800184 	addi	r2,r2,6
   85f9c:	10800003 	ldbu	r2,0(r2)
   85fa0:	10803fcc 	andi	r2,r2,255
   85fa4:	1886b03a 	or	r3,r3,r2
   85fa8:	e13ffe17 	ldw	r4,-8(fp)
   85fac:	e0bffa17 	ldw	r2,-24(fp)
   85fb0:	10815c24 	muli	r2,r2,1392
   85fb4:	2085883a 	add	r2,r4,r2
   85fb8:	10809f04 	addi	r2,r2,636
   85fbc:	10c00015 	stw	r3,0(r2)
            edid->descriptors[i].detailed_timing.h_fp = (((int)c[11] << 2) & 0x300) | (int)c[8];
   85fc0:	e0bff817 	ldw	r2,-32(fp)
   85fc4:	108002c4 	addi	r2,r2,11
   85fc8:	10800003 	ldbu	r2,0(r2)
   85fcc:	10803fcc 	andi	r2,r2,255
   85fd0:	1085883a 	add	r2,r2,r2
   85fd4:	1085883a 	add	r2,r2,r2
   85fd8:	10c0c00c 	andi	r3,r2,768
   85fdc:	e0bff817 	ldw	r2,-32(fp)
   85fe0:	10800204 	addi	r2,r2,8
   85fe4:	10800003 	ldbu	r2,0(r2)
   85fe8:	10803fcc 	andi	r2,r2,255
   85fec:	1886b03a 	or	r3,r3,r2
   85ff0:	e13ffe17 	ldw	r4,-8(fp)
   85ff4:	e0bffa17 	ldw	r2,-24(fp)
   85ff8:	10815c24 	muli	r2,r2,1392
   85ffc:	2085883a 	add	r2,r4,r2
   86000:	1080a004 	addi	r2,r2,640
   86004:	10c00015 	stw	r3,0(r2)
            edid->descriptors[i].detailed_timing.v_fp = (((int)c[11] << 2) & 0x30) | ((int)c[10] >> 4);
   86008:	e0bff817 	ldw	r2,-32(fp)
   8600c:	108002c4 	addi	r2,r2,11
   86010:	10800003 	ldbu	r2,0(r2)
   86014:	10803fcc 	andi	r2,r2,255
   86018:	1085883a 	add	r2,r2,r2
   8601c:	1085883a 	add	r2,r2,r2
   86020:	10c00c0c 	andi	r3,r2,48
   86024:	e0bff817 	ldw	r2,-32(fp)
   86028:	10800284 	addi	r2,r2,10
   8602c:	10800003 	ldbu	r2,0(r2)
   86030:	10803fcc 	andi	r2,r2,255
   86034:	1004d13a 	srli	r2,r2,4
   86038:	10803fcc 	andi	r2,r2,255
   8603c:	1886b03a 	or	r3,r3,r2
   86040:	e13ffe17 	ldw	r4,-8(fp)
   86044:	e0bffa17 	ldw	r2,-24(fp)
   86048:	10815c24 	muli	r2,r2,1392
   8604c:	2085883a 	add	r2,r4,r2
   86050:	1080a104 	addi	r2,r2,644
   86054:	10c00015 	stw	r3,0(r2)
            edid->descriptors[i].detailed_timing.h_sync = (((int)c[11] << 4) & 0x300) | (int)c[9];
   86058:	e0bff817 	ldw	r2,-32(fp)
   8605c:	108002c4 	addi	r2,r2,11
   86060:	10800003 	ldbu	r2,0(r2)
   86064:	10803fcc 	andi	r2,r2,255
   86068:	1004913a 	slli	r2,r2,4
   8606c:	10c0c00c 	andi	r3,r2,768
   86070:	e0bff817 	ldw	r2,-32(fp)
   86074:	10800244 	addi	r2,r2,9
   86078:	10800003 	ldbu	r2,0(r2)
   8607c:	10803fcc 	andi	r2,r2,255
   86080:	1886b03a 	or	r3,r3,r2
   86084:	e13ffe17 	ldw	r4,-8(fp)
   86088:	e0bffa17 	ldw	r2,-24(fp)
   8608c:	10815c24 	muli	r2,r2,1392
   86090:	2085883a 	add	r2,r4,r2
   86094:	1080a204 	addi	r2,r2,648
   86098:	10c00015 	stw	r3,0(r2)
            edid->descriptors[i].detailed_timing.v_sync = (((int)c[11] << 4) & 0x30) | ((int)c[10] & 0x0f);
   8609c:	e0bff817 	ldw	r2,-32(fp)
   860a0:	108002c4 	addi	r2,r2,11
   860a4:	10800003 	ldbu	r2,0(r2)
   860a8:	10803fcc 	andi	r2,r2,255
   860ac:	1004913a 	slli	r2,r2,4
   860b0:	10c00c0c 	andi	r3,r2,48
   860b4:	e0bff817 	ldw	r2,-32(fp)
   860b8:	10800284 	addi	r2,r2,10
   860bc:	10800003 	ldbu	r2,0(r2)
   860c0:	10803fcc 	andi	r2,r2,255
   860c4:	108003cc 	andi	r2,r2,15
   860c8:	1886b03a 	or	r3,r3,r2
   860cc:	e13ffe17 	ldw	r4,-8(fp)
   860d0:	e0bffa17 	ldw	r2,-24(fp)
   860d4:	10815c24 	muli	r2,r2,1392
   860d8:	2085883a 	add	r2,r4,r2
   860dc:	1080a304 	addi	r2,r2,652
   860e0:	10c00015 	stw	r3,0(r2)
            edid->descriptors[i].detailed_timing.h_size = (((int)c[14] << 4) & 0xf00) | (int)c[12];
   860e4:	e0bff817 	ldw	r2,-32(fp)
   860e8:	10800384 	addi	r2,r2,14
   860ec:	10800003 	ldbu	r2,0(r2)
   860f0:	10803fcc 	andi	r2,r2,255
   860f4:	1004913a 	slli	r2,r2,4
   860f8:	10c3c00c 	andi	r3,r2,3840
   860fc:	e0bff817 	ldw	r2,-32(fp)
   86100:	10800304 	addi	r2,r2,12
   86104:	10800003 	ldbu	r2,0(r2)
   86108:	10803fcc 	andi	r2,r2,255
   8610c:	1886b03a 	or	r3,r3,r2
   86110:	e13ffe17 	ldw	r4,-8(fp)
   86114:	e0bffa17 	ldw	r2,-24(fp)
   86118:	10815c24 	muli	r2,r2,1392
   8611c:	2085883a 	add	r2,r4,r2
   86120:	1080a404 	addi	r2,r2,656
   86124:	10c00015 	stw	r3,0(r2)
            edid->descriptors[i].detailed_timing.v_size = (((int)c[14] << 8) & 0xf00) | (int)c[13];
   86128:	e0bff817 	ldw	r2,-32(fp)
   8612c:	10800384 	addi	r2,r2,14
   86130:	10800003 	ldbu	r2,0(r2)
   86134:	10803fcc 	andi	r2,r2,255
   86138:	1004923a 	slli	r2,r2,8
   8613c:	10c3c00c 	andi	r3,r2,3840
   86140:	e0bff817 	ldw	r2,-32(fp)
   86144:	10800344 	addi	r2,r2,13
   86148:	10800003 	ldbu	r2,0(r2)
   8614c:	10803fcc 	andi	r2,r2,255
   86150:	1886b03a 	or	r3,r3,r2
   86154:	e13ffe17 	ldw	r4,-8(fp)
   86158:	e0bffa17 	ldw	r2,-24(fp)
   8615c:	10815c24 	muli	r2,r2,1392
   86160:	2085883a 	add	r2,r4,r2
   86164:	1080a504 	addi	r2,r2,660
   86168:	10c00015 	stw	r3,0(r2)
            edid->descriptors[i].detailed_timing.border_lr = (int)c[15];
   8616c:	e0bff817 	ldw	r2,-32(fp)
   86170:	108003c4 	addi	r2,r2,15
   86174:	10800003 	ldbu	r2,0(r2)
   86178:	10c03fcc 	andi	r3,r2,255
   8617c:	e13ffe17 	ldw	r4,-8(fp)
   86180:	e0bffa17 	ldw	r2,-24(fp)
   86184:	10815c24 	muli	r2,r2,1392
   86188:	2085883a 	add	r2,r4,r2
   8618c:	1080a604 	addi	r2,r2,664
   86190:	10c00015 	stw	r3,0(r2)
            edid->descriptors[i].detailed_timing.border_tb = (int)c[16];
   86194:	e0bff817 	ldw	r2,-32(fp)
   86198:	10800404 	addi	r2,r2,16
   8619c:	10800003 	ldbu	r2,0(r2)
   861a0:	10c03fcc 	andi	r3,r2,255
   861a4:	e13ffe17 	ldw	r4,-8(fp)
   861a8:	e0bffa17 	ldw	r2,-24(fp)
   861ac:	10815c24 	muli	r2,r2,1392
   861b0:	2085883a 	add	r2,r4,r2
   861b4:	1080a704 	addi	r2,r2,668
   861b8:	10c00015 	stw	r3,0(r2)

            edid->descriptors[i].detailed_timing.interlaced = (c[17] & 0x80) ? 1 : 0;
   861bc:	e0bff817 	ldw	r2,-32(fp)
   861c0:	10800444 	addi	r2,r2,17
   861c4:	10800003 	ldbu	r2,0(r2)
   861c8:	10803fcc 	andi	r2,r2,255
   861cc:	1004d1fa 	srli	r2,r2,7
   861d0:	10c03fcc 	andi	r3,r2,255
   861d4:	e13ffe17 	ldw	r4,-8(fp)
   861d8:	e0bffa17 	ldw	r2,-24(fp)
   861dc:	10815c24 	muli	r2,r2,1392
   861e0:	2085883a 	add	r2,r4,r2
   861e4:	1080a804 	addi	r2,r2,672
   861e8:	10c00015 	stw	r3,0(r2)

            edid->descriptors[i].detailed_timing.stereo = STEREO_NONE;
   861ec:	e0fffe17 	ldw	r3,-8(fp)
   861f0:	e0bffa17 	ldw	r2,-24(fp)
   861f4:	10815c24 	muli	r2,r2,1392
   861f8:	1885883a 	add	r2,r3,r2
   861fc:	1080a904 	addi	r2,r2,676
   86200:	10000015 	stw	zero,0(r2)
			if ((c[17] & 0x61) == 0x20)
   86204:	e0bff817 	ldw	r2,-32(fp)
   86208:	10800444 	addi	r2,r2,17
   8620c:	10800003 	ldbu	r2,0(r2)
   86210:	10803fcc 	andi	r2,r2,255
   86214:	1080184c 	andi	r2,r2,97
   86218:	10800818 	cmpnei	r2,r2,32
   8621c:	10000d1e 	bne	r2,zero,86254 <edid_decode_v14+0x150c>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_FIELD_SEQUENTIAL_RIGHT_SYNC;
   86220:	e0fffe17 	ldw	r3,-8(fp)
   86224:	e0bffa17 	ldw	r2,-24(fp)
   86228:	10815c24 	muli	r2,r2,1392
   8622c:	1885883a 	add	r2,r3,r2
   86230:	1080a904 	addi	r2,r2,676
   86234:	10800017 	ldw	r2,0(r2)
   86238:	10c00094 	ori	r3,r2,2
   8623c:	e13ffe17 	ldw	r4,-8(fp)
   86240:	e0bffa17 	ldw	r2,-24(fp)
   86244:	10815c24 	muli	r2,r2,1392
   86248:	2085883a 	add	r2,r4,r2
   8624c:	1080a904 	addi	r2,r2,676
   86250:	10c00015 	stw	r3,0(r2)
			if ((c[17] & 0x61) == 0x40)
   86254:	e0bff817 	ldw	r2,-32(fp)
   86258:	10800444 	addi	r2,r2,17
   8625c:	10800003 	ldbu	r2,0(r2)
   86260:	10803fcc 	andi	r2,r2,255
   86264:	1080184c 	andi	r2,r2,97
   86268:	10801018 	cmpnei	r2,r2,64
   8626c:	10000d1e 	bne	r2,zero,862a4 <edid_decode_v14+0x155c>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_FIELD_SEQUENTIAL_LEFT_SYNC;
   86270:	e0fffe17 	ldw	r3,-8(fp)
   86274:	e0bffa17 	ldw	r2,-24(fp)
   86278:	10815c24 	muli	r2,r2,1392
   8627c:	1885883a 	add	r2,r3,r2
   86280:	1080a904 	addi	r2,r2,676
   86284:	10800017 	ldw	r2,0(r2)
   86288:	10c00114 	ori	r3,r2,4
   8628c:	e13ffe17 	ldw	r4,-8(fp)
   86290:	e0bffa17 	ldw	r2,-24(fp)
   86294:	10815c24 	muli	r2,r2,1392
   86298:	2085883a 	add	r2,r4,r2
   8629c:	1080a904 	addi	r2,r2,676
   862a0:	10c00015 	stw	r3,0(r2)
			if ((c[17] & 0x61) == 0x21)
   862a4:	e0bff817 	ldw	r2,-32(fp)
   862a8:	10800444 	addi	r2,r2,17
   862ac:	10800003 	ldbu	r2,0(r2)
   862b0:	10803fcc 	andi	r2,r2,255
   862b4:	1080184c 	andi	r2,r2,97
   862b8:	10800858 	cmpnei	r2,r2,33
   862bc:	10000d1e 	bne	r2,zero,862f4 <edid_decode_v14+0x15ac>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_2WAY_INTERLEAVE_RIGHT_EVEN;
   862c0:	e0fffe17 	ldw	r3,-8(fp)
   862c4:	e0bffa17 	ldw	r2,-24(fp)
   862c8:	10815c24 	muli	r2,r2,1392
   862cc:	1885883a 	add	r2,r3,r2
   862d0:	1080a904 	addi	r2,r2,676
   862d4:	10800017 	ldw	r2,0(r2)
   862d8:	10c00214 	ori	r3,r2,8
   862dc:	e13ffe17 	ldw	r4,-8(fp)
   862e0:	e0bffa17 	ldw	r2,-24(fp)
   862e4:	10815c24 	muli	r2,r2,1392
   862e8:	2085883a 	add	r2,r4,r2
   862ec:	1080a904 	addi	r2,r2,676
   862f0:	10c00015 	stw	r3,0(r2)
			if ((c[17] & 0x61) == 0x41)
   862f4:	e0bff817 	ldw	r2,-32(fp)
   862f8:	10800444 	addi	r2,r2,17
   862fc:	10800003 	ldbu	r2,0(r2)
   86300:	10803fcc 	andi	r2,r2,255
   86304:	1080184c 	andi	r2,r2,97
   86308:	10801058 	cmpnei	r2,r2,65
   8630c:	10000d1e 	bne	r2,zero,86344 <edid_decode_v14+0x15fc>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_2WAY_INTERLEAVE_LEFT_EVEN;
   86310:	e0fffe17 	ldw	r3,-8(fp)
   86314:	e0bffa17 	ldw	r2,-24(fp)
   86318:	10815c24 	muli	r2,r2,1392
   8631c:	1885883a 	add	r2,r3,r2
   86320:	1080a904 	addi	r2,r2,676
   86324:	10800017 	ldw	r2,0(r2)
   86328:	10c00414 	ori	r3,r2,16
   8632c:	e13ffe17 	ldw	r4,-8(fp)
   86330:	e0bffa17 	ldw	r2,-24(fp)
   86334:	10815c24 	muli	r2,r2,1392
   86338:	2085883a 	add	r2,r4,r2
   8633c:	1080a904 	addi	r2,r2,676
   86340:	10c00015 	stw	r3,0(r2)
			if ((c[17] & 0x61) == 0x60)
   86344:	e0bff817 	ldw	r2,-32(fp)
   86348:	10800444 	addi	r2,r2,17
   8634c:	10800003 	ldbu	r2,0(r2)
   86350:	10803fcc 	andi	r2,r2,255
   86354:	1080184c 	andi	r2,r2,97
   86358:	10801818 	cmpnei	r2,r2,96
   8635c:	10000d1e 	bne	r2,zero,86394 <edid_decode_v14+0x164c>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_4WAY_INTERLEAVE;
   86360:	e0fffe17 	ldw	r3,-8(fp)
   86364:	e0bffa17 	ldw	r2,-24(fp)
   86368:	10815c24 	muli	r2,r2,1392
   8636c:	1885883a 	add	r2,r3,r2
   86370:	1080a904 	addi	r2,r2,676
   86374:	10800017 	ldw	r2,0(r2)
   86378:	10c00814 	ori	r3,r2,32
   8637c:	e13ffe17 	ldw	r4,-8(fp)
   86380:	e0bffa17 	ldw	r2,-24(fp)
   86384:	10815c24 	muli	r2,r2,1392
   86388:	2085883a 	add	r2,r4,r2
   8638c:	1080a904 	addi	r2,r2,676
   86390:	10c00015 	stw	r3,0(r2)
			if ((c[17] & 0x61) == 0x61)
   86394:	e0bff817 	ldw	r2,-32(fp)
   86398:	10800444 	addi	r2,r2,17
   8639c:	10800003 	ldbu	r2,0(r2)
   863a0:	10803fcc 	andi	r2,r2,255
   863a4:	1080184c 	andi	r2,r2,97
   863a8:	10801858 	cmpnei	r2,r2,97
   863ac:	10000d1e 	bne	r2,zero,863e4 <edid_decode_v14+0x169c>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_SIDE_BY_SIDE_INTERLEAVE;
   863b0:	e0fffe17 	ldw	r3,-8(fp)
   863b4:	e0bffa17 	ldw	r2,-24(fp)
   863b8:	10815c24 	muli	r2,r2,1392
   863bc:	1885883a 	add	r2,r3,r2
   863c0:	1080a904 	addi	r2,r2,676
   863c4:	10800017 	ldw	r2,0(r2)
   863c8:	10c01014 	ori	r3,r2,64
   863cc:	e13ffe17 	ldw	r4,-8(fp)
   863d0:	e0bffa17 	ldw	r2,-24(fp)
   863d4:	10815c24 	muli	r2,r2,1392
   863d8:	2085883a 	add	r2,r4,r2
   863dc:	1080a904 	addi	r2,r2,676
   863e0:	10c00015 	stw	r3,0(r2)

			edid->descriptors[i].detailed_timing.sync = 0;
   863e4:	e0fffe17 	ldw	r3,-8(fp)
   863e8:	e0bffa17 	ldw	r2,-24(fp)
   863ec:	10815c24 	muli	r2,r2,1392
   863f0:	1885883a 	add	r2,r3,r2
   863f4:	1080aa04 	addi	r2,r2,680
   863f8:	10000015 	stw	zero,0(r2)
            if (c[17] & 0x10) {
   863fc:	e0bff817 	ldw	r2,-32(fp)
   86400:	10800444 	addi	r2,r2,17
   86404:	10800003 	ldbu	r2,0(r2)
   86408:	10803fcc 	andi	r2,r2,255
   8640c:	1080040c 	andi	r2,r2,16
   86410:	10007726 	beq	r2,zero,865f0 <edid_decode_v14+0x18a8>
                if (c[17] & 0x08) {
   86414:	e0bff817 	ldw	r2,-32(fp)
   86418:	10800444 	addi	r2,r2,17
   8641c:	10800003 	ldbu	r2,0(r2)
   86420:	10803fcc 	andi	r2,r2,255
   86424:	1080020c 	andi	r2,r2,8
   86428:	10005026 	beq	r2,zero,8656c <edid_decode_v14+0x1824>
                	edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_SYNC;
   8642c:	e0fffe17 	ldw	r3,-8(fp)
   86430:	e0bffa17 	ldw	r2,-24(fp)
   86434:	10815c24 	muli	r2,r2,1392
   86438:	1885883a 	add	r2,r3,r2
   8643c:	1080aa04 	addi	r2,r2,680
   86440:	10800017 	ldw	r2,0(r2)
   86444:	10c02014 	ori	r3,r2,128
   86448:	e13ffe17 	ldw	r4,-8(fp)
   8644c:	e0bffa17 	ldw	r2,-24(fp)
   86450:	10815c24 	muli	r2,r2,1392
   86454:	2085883a 	add	r2,r4,r2
   86458:	1080aa04 	addi	r2,r2,680
   8645c:	10c00015 	stw	r3,0(r2)

                	if (c[17] & 0x04)
   86460:	e0bff817 	ldw	r2,-32(fp)
   86464:	10800444 	addi	r2,r2,17
   86468:	10800003 	ldbu	r2,0(r2)
   8646c:	10803fcc 	andi	r2,r2,255
   86470:	1080010c 	andi	r2,r2,4
   86474:	10000e26 	beq	r2,zero,864b0 <edid_decode_v14+0x1768>
                    	edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_VSYNC_P;
   86478:	e0fffe17 	ldw	r3,-8(fp)
   8647c:	e0bffa17 	ldw	r2,-24(fp)
   86480:	10815c24 	muli	r2,r2,1392
   86484:	1885883a 	add	r2,r3,r2
   86488:	1080aa04 	addi	r2,r2,680
   8648c:	10800017 	ldw	r2,0(r2)
   86490:	10c08014 	ori	r3,r2,512
   86494:	e13ffe17 	ldw	r4,-8(fp)
   86498:	e0bffa17 	ldw	r2,-24(fp)
   8649c:	10815c24 	muli	r2,r2,1392
   864a0:	2085883a 	add	r2,r4,r2
   864a4:	1080aa04 	addi	r2,r2,680
   864a8:	10c00015 	stw	r3,0(r2)
   864ac:	00000d06 	br	864e4 <edid_decode_v14+0x179c>
                	else
                		edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_VSYNC_N;
   864b0:	e0fffe17 	ldw	r3,-8(fp)
   864b4:	e0bffa17 	ldw	r2,-24(fp)
   864b8:	10815c24 	muli	r2,r2,1392
   864bc:	1885883a 	add	r2,r3,r2
   864c0:	1080aa04 	addi	r2,r2,680
   864c4:	10800017 	ldw	r2,0(r2)
   864c8:	10c04014 	ori	r3,r2,256
   864cc:	e13ffe17 	ldw	r4,-8(fp)
   864d0:	e0bffa17 	ldw	r2,-24(fp)
   864d4:	10815c24 	muli	r2,r2,1392
   864d8:	2085883a 	add	r2,r4,r2
   864dc:	1080aa04 	addi	r2,r2,680
   864e0:	10c00015 	stw	r3,0(r2)

                	if (c[17] & 0x02)
   864e4:	e0bff817 	ldw	r2,-32(fp)
   864e8:	10800444 	addi	r2,r2,17
   864ec:	10800003 	ldbu	r2,0(r2)
   864f0:	10803fcc 	andi	r2,r2,255
   864f4:	1080008c 	andi	r2,r2,2
   864f8:	10000e26 	beq	r2,zero,86534 <edid_decode_v14+0x17ec>
                    	edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_HSYNC_P;
   864fc:	e0fffe17 	ldw	r3,-8(fp)
   86500:	e0bffa17 	ldw	r2,-24(fp)
   86504:	10815c24 	muli	r2,r2,1392
   86508:	1885883a 	add	r2,r3,r2
   8650c:	1080aa04 	addi	r2,r2,680
   86510:	10800017 	ldw	r2,0(r2)
   86514:	10c20014 	ori	r3,r2,2048
   86518:	e13ffe17 	ldw	r4,-8(fp)
   8651c:	e0bffa17 	ldw	r2,-24(fp)
   86520:	10815c24 	muli	r2,r2,1392
   86524:	2085883a 	add	r2,r4,r2
   86528:	1080aa04 	addi	r2,r2,680
   8652c:	10c00015 	stw	r3,0(r2)
				edid->descriptors[i].detailed_timing.stereo |= STEREO_4WAY_INTERLEAVE;
			if ((c[17] & 0x61) == 0x61)
				edid->descriptors[i].detailed_timing.stereo |= STEREO_SIDE_BY_SIDE_INTERLEAVE;

			edid->descriptors[i].detailed_timing.sync = 0;
            if (c[17] & 0x10) {
   86530:	000a4206 	br	88e3c <edid_decode_v14+0x40f4>
                		edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_VSYNC_N;

                	if (c[17] & 0x02)
                    	edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_HSYNC_P;
                	else
                		edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_HSYNC_N;
   86534:	e0fffe17 	ldw	r3,-8(fp)
   86538:	e0bffa17 	ldw	r2,-24(fp)
   8653c:	10815c24 	muli	r2,r2,1392
   86540:	1885883a 	add	r2,r3,r2
   86544:	1080aa04 	addi	r2,r2,680
   86548:	10800017 	ldw	r2,0(r2)
   8654c:	10c10014 	ori	r3,r2,1024
   86550:	e13ffe17 	ldw	r4,-8(fp)
   86554:	e0bffa17 	ldw	r2,-24(fp)
   86558:	10815c24 	muli	r2,r2,1392
   8655c:	2085883a 	add	r2,r4,r2
   86560:	1080aa04 	addi	r2,r2,680
   86564:	10c00015 	stw	r3,0(r2)
				edid->descriptors[i].detailed_timing.stereo |= STEREO_4WAY_INTERLEAVE;
			if ((c[17] & 0x61) == 0x61)
				edid->descriptors[i].detailed_timing.stereo |= STEREO_SIDE_BY_SIDE_INTERLEAVE;

			edid->descriptors[i].detailed_timing.sync = 0;
            if (c[17] & 0x10) {
   86568:	000a3406 	br	88e3c <edid_decode_v14+0x40f4>
                	if (c[17] & 0x02)
                    	edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_HSYNC_P;
                	else
                		edid->descriptors[i].detailed_timing.sync |= D_SEPERATE_HSYNC_N;
                } else {
                	edid->descriptors[i].detailed_timing.sync |= D_COMPOSITE_SYNC;
   8656c:	e0fffe17 	ldw	r3,-8(fp)
   86570:	e0bffa17 	ldw	r2,-24(fp)
   86574:	10815c24 	muli	r2,r2,1392
   86578:	1885883a 	add	r2,r3,r2
   8657c:	1080aa04 	addi	r2,r2,680
   86580:	10800017 	ldw	r2,0(r2)
   86584:	10c00814 	ori	r3,r2,32
   86588:	e13ffe17 	ldw	r4,-8(fp)
   8658c:	e0bffa17 	ldw	r2,-24(fp)
   86590:	10815c24 	muli	r2,r2,1392
   86594:	2085883a 	add	r2,r4,r2
   86598:	1080aa04 	addi	r2,r2,680
   8659c:	10c00015 	stw	r3,0(r2)
                	if (c[17] & 0x04)
   865a0:	e0bff817 	ldw	r2,-32(fp)
   865a4:	10800444 	addi	r2,r2,17
   865a8:	10800003 	ldbu	r2,0(r2)
   865ac:	10803fcc 	andi	r2,r2,255
   865b0:	1080010c 	andi	r2,r2,4
   865b4:	100a2126 	beq	r2,zero,88e3c <edid_decode_v14+0x40f4>
                    	edid->descriptors[i].detailed_timing.sync |= D_COMPOSITE_SERRATION;
   865b8:	e0fffe17 	ldw	r3,-8(fp)
   865bc:	e0bffa17 	ldw	r2,-24(fp)
   865c0:	10815c24 	muli	r2,r2,1392
   865c4:	1885883a 	add	r2,r3,r2
   865c8:	1080aa04 	addi	r2,r2,680
   865cc:	10800017 	ldw	r2,0(r2)
   865d0:	10c01014 	ori	r3,r2,64
   865d4:	e13ffe17 	ldw	r4,-8(fp)
   865d8:	e0bffa17 	ldw	r2,-24(fp)
   865dc:	10815c24 	muli	r2,r2,1392
   865e0:	2085883a 	add	r2,r4,r2
   865e4:	1080aa04 	addi	r2,r2,680
   865e8:	10c00015 	stw	r3,0(r2)
				edid->descriptors[i].detailed_timing.stereo |= STEREO_4WAY_INTERLEAVE;
			if ((c[17] & 0x61) == 0x61)
				edid->descriptors[i].detailed_timing.stereo |= STEREO_SIDE_BY_SIDE_INTERLEAVE;

			edid->descriptors[i].detailed_timing.sync = 0;
            if (c[17] & 0x10) {
   865ec:	000a1306 	br	88e3c <edid_decode_v14+0x40f4>
                	edid->descriptors[i].detailed_timing.sync |= D_COMPOSITE_SYNC;
                	if (c[17] & 0x04)
                    	edid->descriptors[i].detailed_timing.sync |= D_COMPOSITE_SERRATION;
                }
            } else {
            	if (c[17] & 0x80) {
   865f0:	e0bff817 	ldw	r2,-32(fp)
   865f4:	10800444 	addi	r2,r2,17
   865f8:	10800003 	ldbu	r2,0(r2)
   865fc:	10803fcc 	andi	r2,r2,255
   86600:	1080201c 	xori	r2,r2,128
   86604:	10bfe004 	addi	r2,r2,-128
   86608:	1000420e 	bge	r2,zero,86714 <edid_decode_v14+0x19cc>
            		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_COMPOSITE_SYNC;
   8660c:	e0fffe17 	ldw	r3,-8(fp)
   86610:	e0bffa17 	ldw	r2,-24(fp)
   86614:	10815c24 	muli	r2,r2,1392
   86618:	1885883a 	add	r2,r3,r2
   8661c:	1080aa04 	addi	r2,r2,680
   86620:	10800017 	ldw	r2,0(r2)
   86624:	10c00094 	ori	r3,r2,2
   86628:	e13ffe17 	ldw	r4,-8(fp)
   8662c:	e0bffa17 	ldw	r2,-24(fp)
   86630:	10815c24 	muli	r2,r2,1392
   86634:	2085883a 	add	r2,r4,r2
   86638:	1080aa04 	addi	r2,r2,680
   8663c:	10c00015 	stw	r3,0(r2)
            		if (c[17] & 0x40) {
   86640:	e0bff817 	ldw	r2,-32(fp)
   86644:	10800444 	addi	r2,r2,17
   86648:	10800003 	ldbu	r2,0(r2)
   8664c:	10803fcc 	andi	r2,r2,255
   86650:	1080100c 	andi	r2,r2,64
   86654:	1009f926 	beq	r2,zero,88e3c <edid_decode_v14+0x40f4>
                		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_SERRATION;
   86658:	e0fffe17 	ldw	r3,-8(fp)
   8665c:	e0bffa17 	ldw	r2,-24(fp)
   86660:	10815c24 	muli	r2,r2,1392
   86664:	1885883a 	add	r2,r3,r2
   86668:	1080aa04 	addi	r2,r2,680
   8666c:	10800017 	ldw	r2,0(r2)
   86670:	10c00114 	ori	r3,r2,4
   86674:	e13ffe17 	ldw	r4,-8(fp)
   86678:	e0bffa17 	ldw	r2,-24(fp)
   8667c:	10815c24 	muli	r2,r2,1392
   86680:	2085883a 	add	r2,r4,r2
   86684:	1080aa04 	addi	r2,r2,680
   86688:	10c00015 	stw	r3,0(r2)
                		if (c[17] & 0x20)
   8668c:	e0bff817 	ldw	r2,-32(fp)
   86690:	10800444 	addi	r2,r2,17
   86694:	10800003 	ldbu	r2,0(r2)
   86698:	10803fcc 	andi	r2,r2,255
   8669c:	1080080c 	andi	r2,r2,32
   866a0:	10000e26 	beq	r2,zero,866dc <edid_decode_v14+0x1994>
                    		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_SERRATION_SYNC_RGB;
   866a4:	e0fffe17 	ldw	r3,-8(fp)
   866a8:	e0bffa17 	ldw	r2,-24(fp)
   866ac:	10815c24 	muli	r2,r2,1392
   866b0:	1885883a 	add	r2,r3,r2
   866b4:	1080aa04 	addi	r2,r2,680
   866b8:	10800017 	ldw	r2,0(r2)
   866bc:	10c00414 	ori	r3,r2,16
   866c0:	e13ffe17 	ldw	r4,-8(fp)
   866c4:	e0bffa17 	ldw	r2,-24(fp)
   866c8:	10815c24 	muli	r2,r2,1392
   866cc:	2085883a 	add	r2,r4,r2
   866d0:	1080aa04 	addi	r2,r2,680
   866d4:	10c00015 	stw	r3,0(r2)
				edid->descriptors[i].detailed_timing.stereo |= STEREO_4WAY_INTERLEAVE;
			if ((c[17] & 0x61) == 0x61)
				edid->descriptors[i].detailed_timing.stereo |= STEREO_SIDE_BY_SIDE_INTERLEAVE;

			edid->descriptors[i].detailed_timing.sync = 0;
            if (c[17] & 0x10) {
   866d8:	0009d806 	br	88e3c <edid_decode_v14+0x40f4>
            		if (c[17] & 0x40) {
                		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_SERRATION;
                		if (c[17] & 0x20)
                    		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_SERRATION_SYNC_RGB;
                		else
                    		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_SERRATION_SYNC_G;
   866dc:	e0fffe17 	ldw	r3,-8(fp)
   866e0:	e0bffa17 	ldw	r2,-24(fp)
   866e4:	10815c24 	muli	r2,r2,1392
   866e8:	1885883a 	add	r2,r3,r2
   866ec:	1080aa04 	addi	r2,r2,680
   866f0:	10800017 	ldw	r2,0(r2)
   866f4:	10c00214 	ori	r3,r2,8
   866f8:	e13ffe17 	ldw	r4,-8(fp)
   866fc:	e0bffa17 	ldw	r2,-24(fp)
   86700:	10815c24 	muli	r2,r2,1392
   86704:	2085883a 	add	r2,r4,r2
   86708:	1080aa04 	addi	r2,r2,680
   8670c:	10c00015 	stw	r3,0(r2)
				edid->descriptors[i].detailed_timing.stereo |= STEREO_4WAY_INTERLEAVE;
			if ((c[17] & 0x61) == 0x61)
				edid->descriptors[i].detailed_timing.stereo |= STEREO_SIDE_BY_SIDE_INTERLEAVE;

			edid->descriptors[i].detailed_timing.sync = 0;
            if (c[17] & 0x10) {
   86710:	0009ca06 	br	88e3c <edid_decode_v14+0x40f4>
                    		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_SERRATION_SYNC_RGB;
                		else
                    		edid->descriptors[i].detailed_timing.sync |= A_BIPOLAR_SERRATION_SYNC_G;
            		}
            	} else {
            		edid->descriptors[i].detailed_timing.sync |= A_COMPOSITE_SYNC;
   86714:	e0fffe17 	ldw	r3,-8(fp)
   86718:	e0bffa17 	ldw	r2,-24(fp)
   8671c:	10815c24 	muli	r2,r2,1392
   86720:	1885883a 	add	r2,r3,r2
   86724:	1080aa04 	addi	r2,r2,680
   86728:	10800017 	ldw	r2,0(r2)
   8672c:	10c00054 	ori	r3,r2,1
   86730:	e13ffe17 	ldw	r4,-8(fp)
   86734:	e0bffa17 	ldw	r2,-24(fp)
   86738:	10815c24 	muli	r2,r2,1392
   8673c:	2085883a 	add	r2,r4,r2
   86740:	1080aa04 	addi	r2,r2,680
   86744:	10c00015 	stw	r3,0(r2)
				edid->descriptors[i].detailed_timing.stereo |= STEREO_4WAY_INTERLEAVE;
			if ((c[17] & 0x61) == 0x61)
				edid->descriptors[i].detailed_timing.stereo |= STEREO_SIDE_BY_SIDE_INTERLEAVE;

			edid->descriptors[i].detailed_timing.sync = 0;
            if (c[17] & 0x10) {
   86748:	0009bc06 	br	88e3c <edid_decode_v14+0x40f4>
            }

        } else {
        	// display descriptor

        	edid->descriptors[i].type = DT_DISPLAY_DESCRIPTOR;
   8674c:	e0fffe17 	ldw	r3,-8(fp)
   86750:	e0bffa17 	ldw	r2,-24(fp)
   86754:	10815c24 	muli	r2,r2,1392
   86758:	1885883a 	add	r2,r3,r2
   8675c:	10809904 	addi	r2,r2,612
   86760:	00c00044 	movi	r3,1
   86764:	10c00015 	stw	r3,0(r2)

        	switch (c[3]) {  // tag
   86768:	e0bff817 	ldw	r2,-32(fp)
   8676c:	108000c4 	addi	r2,r2,3
   86770:	10800003 	ldbu	r2,0(r2)
   86774:	10803fcc 	andi	r2,r2,255
   86778:	10c03ea0 	cmpeqi	r3,r2,250
   8677c:	18047d1e 	bne	r3,zero,87974 <edid_decode_v14+0x2c2c>
   86780:	10c03ec8 	cmpgei	r3,r2,251
   86784:	18000c1e 	bne	r3,zero,867b8 <edid_decode_v14+0x1a70>
   86788:	10c03de0 	cmpeqi	r3,r2,247
   8678c:	1806da1e 	bne	r3,zero,882f8 <edid_decode_v14+0x35b0>
   86790:	10c03e08 	cmpgei	r3,r2,248
   86794:	1800031e 	bne	r3,zero,867a4 <edid_decode_v14+0x1a5c>
   86798:	10800420 	cmpeqi	r2,r2,16
   8679c:	10099e1e 	bne	r2,zero,88e18 <edid_decode_v14+0x40d0>
   867a0:	0009a506 	br	88e38 <edid_decode_v14+0x40f0>
   867a4:	10c03e20 	cmpeqi	r3,r2,248
   867a8:	1805601e 	bne	r3,zero,87d2c <edid_decode_v14+0x2fe4>
   867ac:	10803e60 	cmpeqi	r2,r2,249
   867b0:	1004e61e 	bne	r2,zero,87b4c <edid_decode_v14+0x2e04>
   867b4:	0009a006 	br	88e38 <edid_decode_v14+0x40f0>
   867b8:	10c03f60 	cmpeqi	r3,r2,253
   867bc:	1800771e 	bne	r3,zero,8699c <edid_decode_v14+0x1c54>
   867c0:	10c03f88 	cmpgei	r3,r2,254
   867c4:	1800051e 	bne	r3,zero,867dc <edid_decode_v14+0x1a94>
   867c8:	10c03ee0 	cmpeqi	r3,r2,251
   867cc:	1803b31e 	bne	r3,zero,8769c <edid_decode_v14+0x2954>
   867d0:	10803f20 	cmpeqi	r2,r2,252
   867d4:	10037b1e 	bne	r2,zero,875c4 <edid_decode_v14+0x287c>
   867d8:	00099706 	br	88e38 <edid_decode_v14+0x40f0>
   867dc:	10c03fa0 	cmpeqi	r3,r2,254
   867e0:	1800381e 	bne	r3,zero,868c4 <edid_decode_v14+0x1b7c>
   867e4:	10803fe0 	cmpeqi	r2,r2,255
   867e8:	10099326 	beq	r2,zero,88e38 <edid_decode_v14+0x40f0>
            case 0xff:
            	edid->descriptors[i].tag = DTAG_PRODUCT_SERIAL;
   867ec:	e0fffe17 	ldw	r3,-8(fp)
   867f0:	e0bffa17 	ldw	r2,-24(fp)
   867f4:	10815c24 	muli	r2,r2,1392
   867f8:	1885883a 	add	r2,r3,r2
   867fc:	10809a04 	addi	r2,r2,616
   86800:	00c03fc4 	movi	r3,255
   86804:	10c00015 	stw	r3,0(r2)
            	edid->descriptors[i].serial[18] = 0;
   86808:	e0fffe17 	ldw	r3,-8(fp)
   8680c:	e0bffa17 	ldw	r2,-24(fp)
   86810:	10815c24 	muli	r2,r2,1392
   86814:	1885883a 	add	r2,r3,r2
   86818:	10809f84 	addi	r2,r2,638
   8681c:	10000005 	stb	zero,0(r2)
            	memcpy(edid->descriptors[i].serial, &c[5], 18-5);
   86820:	e0bffa17 	ldw	r2,-24(fp)
   86824:	10815c24 	muli	r2,r2,1392
   86828:	10809b04 	addi	r2,r2,620
   8682c:	e0fffe17 	ldw	r3,-8(fp)
   86830:	1887883a 	add	r3,r3,r2
   86834:	e0bff817 	ldw	r2,-32(fp)
   86838:	10800144 	addi	r2,r2,5
   8683c:	1809883a 	mov	r4,r3
   86840:	100b883a 	mov	r5,r2
   86844:	01800344 	movi	r6,13
   86848:	008e3840 	call	8e384 <memcpy>
                for (s = 0; s < 18-5; ++s) {
   8684c:	e03ffb15 	stw	zero,-20(fp)
   86850:	00001806 	br	868b4 <edid_decode_v14+0x1b6c>
                    if (edid->descriptors[i].serial[s] == 0x0a) {
   86854:	e0fffe17 	ldw	r3,-8(fp)
   86858:	e0bffa17 	ldw	r2,-24(fp)
   8685c:	10815c24 	muli	r2,r2,1392
   86860:	1887883a 	add	r3,r3,r2
   86864:	e0bffb17 	ldw	r2,-20(fp)
   86868:	1885883a 	add	r2,r3,r2
   8686c:	10809b04 	addi	r2,r2,620
   86870:	10800003 	ldbu	r2,0(r2)
   86874:	10803fcc 	andi	r2,r2,255
   86878:	1080201c 	xori	r2,r2,128
   8687c:	10bfe004 	addi	r2,r2,-128
   86880:	10800298 	cmpnei	r2,r2,10
   86884:	1000081e 	bne	r2,zero,868a8 <edid_decode_v14+0x1b60>
                    	edid->descriptors[i].serial[s] = 0;
   86888:	e0fffe17 	ldw	r3,-8(fp)
   8688c:	e0bffa17 	ldw	r2,-24(fp)
   86890:	10815c24 	muli	r2,r2,1392
   86894:	1887883a 	add	r3,r3,r2
   86898:	e0bffb17 	ldw	r2,-20(fp)
   8689c:	1885883a 	add	r2,r3,r2
   868a0:	10809b04 	addi	r2,r2,620
   868a4:	10000005 	stb	zero,0(r2)
        	switch (c[3]) {  // tag
            case 0xff:
            	edid->descriptors[i].tag = DTAG_PRODUCT_SERIAL;
            	edid->descriptors[i].serial[18] = 0;
            	memcpy(edid->descriptors[i].serial, &c[5], 18-5);
                for (s = 0; s < 18-5; ++s) {
   868a8:	e0bffb17 	ldw	r2,-20(fp)
   868ac:	10800044 	addi	r2,r2,1
   868b0:	e0bffb15 	stw	r2,-20(fp)
   868b4:	e0bffb17 	ldw	r2,-20(fp)
   868b8:	10800350 	cmplti	r2,r2,13
   868bc:	103fe51e 	bne	r2,zero,86854 <edid_decode_v14+0x1b0c>
                    if (edid->descriptors[i].serial[s] == 0x0a) {
                    	edid->descriptors[i].serial[s] = 0;
                    }
                }
                break;
   868c0:	00096106 	br	88e48 <edid_decode_v14+0x4100>

            case 0xfe:
            	edid->descriptors[i].tag = DTAG_DATA_STRING;
   868c4:	e0fffe17 	ldw	r3,-8(fp)
   868c8:	e0bffa17 	ldw	r2,-24(fp)
   868cc:	10815c24 	muli	r2,r2,1392
   868d0:	1885883a 	add	r2,r3,r2
   868d4:	10809a04 	addi	r2,r2,616
   868d8:	00c03f84 	movi	r3,254
   868dc:	10c00015 	stw	r3,0(r2)
            	edid->descriptors[i].string[18] = 0;
   868e0:	e0fffe17 	ldw	r3,-8(fp)
   868e4:	e0bffa17 	ldw	r2,-24(fp)
   868e8:	10815c24 	muli	r2,r2,1392
   868ec:	1885883a 	add	r2,r3,r2
   868f0:	10809f84 	addi	r2,r2,638
   868f4:	10000005 	stb	zero,0(r2)
            	memcpy(edid->descriptors[i].string, &c[5], 18-5);
   868f8:	e0bffa17 	ldw	r2,-24(fp)
   868fc:	10815c24 	muli	r2,r2,1392
   86900:	10809b04 	addi	r2,r2,620
   86904:	e0fffe17 	ldw	r3,-8(fp)
   86908:	1887883a 	add	r3,r3,r2
   8690c:	e0bff817 	ldw	r2,-32(fp)
   86910:	10800144 	addi	r2,r2,5
   86914:	1809883a 	mov	r4,r3
   86918:	100b883a 	mov	r5,r2
   8691c:	01800344 	movi	r6,13
   86920:	008e3840 	call	8e384 <memcpy>
                for (s = 0; s < 18-5; ++s) {
   86924:	e03ffb15 	stw	zero,-20(fp)
   86928:	00001806 	br	8698c <edid_decode_v14+0x1c44>
                    if (edid->descriptors[i].string[s] == 0x0a) {
   8692c:	e0fffe17 	ldw	r3,-8(fp)
   86930:	e0bffa17 	ldw	r2,-24(fp)
   86934:	10815c24 	muli	r2,r2,1392
   86938:	1887883a 	add	r3,r3,r2
   8693c:	e0bffb17 	ldw	r2,-20(fp)
   86940:	1885883a 	add	r2,r3,r2
   86944:	10809b04 	addi	r2,r2,620
   86948:	10800003 	ldbu	r2,0(r2)
   8694c:	10803fcc 	andi	r2,r2,255
   86950:	1080201c 	xori	r2,r2,128
   86954:	10bfe004 	addi	r2,r2,-128
   86958:	10800298 	cmpnei	r2,r2,10
   8695c:	1000081e 	bne	r2,zero,86980 <edid_decode_v14+0x1c38>
                    	edid->descriptors[i].string[s] = 0;
   86960:	e0fffe17 	ldw	r3,-8(fp)
   86964:	e0bffa17 	ldw	r2,-24(fp)
   86968:	10815c24 	muli	r2,r2,1392
   8696c:	1887883a 	add	r3,r3,r2
   86970:	e0bffb17 	ldw	r2,-20(fp)
   86974:	1885883a 	add	r2,r3,r2
   86978:	10809b04 	addi	r2,r2,620
   8697c:	10000005 	stb	zero,0(r2)

            case 0xfe:
            	edid->descriptors[i].tag = DTAG_DATA_STRING;
            	edid->descriptors[i].string[18] = 0;
            	memcpy(edid->descriptors[i].string, &c[5], 18-5);
                for (s = 0; s < 18-5; ++s) {
   86980:	e0bffb17 	ldw	r2,-20(fp)
   86984:	10800044 	addi	r2,r2,1
   86988:	e0bffb15 	stw	r2,-20(fp)
   8698c:	e0bffb17 	ldw	r2,-20(fp)
   86990:	10800350 	cmplti	r2,r2,13
   86994:	103fe51e 	bne	r2,zero,8692c <edid_decode_v14+0x1be4>
                    if (edid->descriptors[i].string[s] == 0x0a) {
                    	edid->descriptors[i].string[s] = 0;
                    }
                }
                break;
   86998:	00092b06 	br	88e48 <edid_decode_v14+0x4100>

            case 0xfd:
            	edid->descriptors[i].tag = DTAG_RANGE_LIMIT;
   8699c:	e0fffe17 	ldw	r3,-8(fp)
   869a0:	e0bffa17 	ldw	r2,-24(fp)
   869a4:	10815c24 	muli	r2,r2,1392
   869a8:	1885883a 	add	r2,r3,r2
   869ac:	10809a04 	addi	r2,r2,616
   869b0:	00c03f44 	movi	r3,253
   869b4:	10c00015 	stw	r3,0(r2)

            	edid->descriptors[i].range_limits.h_offset = HRO_ZERO;
   869b8:	e0fffe17 	ldw	r3,-8(fp)
   869bc:	e0bffa17 	ldw	r2,-24(fp)
   869c0:	10815c24 	muli	r2,r2,1392
   869c4:	1885883a 	add	r2,r3,r2
   869c8:	10809c04 	addi	r2,r2,624
   869cc:	10000015 	stw	zero,0(r2)

            	switch (c[4] & 0xfc) {
   869d0:	e0bff817 	ldw	r2,-32(fp)
   869d4:	10800104 	addi	r2,r2,4
   869d8:	10800003 	ldbu	r2,0(r2)
   869dc:	10803fcc 	andi	r2,r2,255
   869e0:	10803f0c 	andi	r2,r2,252
   869e4:	10c00220 	cmpeqi	r3,r2,8
   869e8:	1800031e 	bne	r3,zero,869f8 <edid_decode_v14+0x1cb0>
   869ec:	10800320 	cmpeqi	r2,r2,12
   869f0:	1000091e 	bne	r2,zero,86a18 <edid_decode_v14+0x1cd0>
   869f4:	00001006 	br	86a38 <edid_decode_v14+0x1cf0>
                case 0x08:
                	edid->descriptors[i].range_limits.h_offset = HRO_MAX_255_MIN_ZERO;
   869f8:	e0fffe17 	ldw	r3,-8(fp)
   869fc:	e0bffa17 	ldw	r2,-24(fp)
   86a00:	10815c24 	muli	r2,r2,1392
   86a04:	1885883a 	add	r2,r3,r2
   86a08:	10809c04 	addi	r2,r2,624
   86a0c:	00c00044 	movi	r3,1
   86a10:	10c00015 	stw	r3,0(r2)
                    break;
   86a14:	00000806 	br	86a38 <edid_decode_v14+0x1cf0>
                case 0x0c:
                	edid->descriptors[i].range_limits.h_offset = HRO_MAX_255_MIN_255;
   86a18:	e0fffe17 	ldw	r3,-8(fp)
   86a1c:	e0bffa17 	ldw	r2,-24(fp)
   86a20:	10815c24 	muli	r2,r2,1392
   86a24:	1885883a 	add	r2,r3,r2
   86a28:	10809c04 	addi	r2,r2,624
   86a2c:	00c00084 	movi	r3,2
   86a30:	10c00015 	stw	r3,0(r2)
                    break;
   86a34:	0001883a 	nop
                }

            	edid->descriptors[i].range_limits.v_offset = VRO_ZERO;
   86a38:	e0fffe17 	ldw	r3,-8(fp)
   86a3c:	e0bffa17 	ldw	r2,-24(fp)
   86a40:	10815c24 	muli	r2,r2,1392
   86a44:	1885883a 	add	r2,r3,r2
   86a48:	10809b04 	addi	r2,r2,620
   86a4c:	10000015 	stw	zero,0(r2)

                switch (c[4] & 0xf3) {
   86a50:	e0bff817 	ldw	r2,-32(fp)
   86a54:	10800104 	addi	r2,r2,4
   86a58:	10800003 	ldbu	r2,0(r2)
   86a5c:	10803fcc 	andi	r2,r2,255
   86a60:	10803ccc 	andi	r2,r2,243
   86a64:	10c000a0 	cmpeqi	r3,r2,2
   86a68:	1800031e 	bne	r3,zero,86a78 <edid_decode_v14+0x1d30>
   86a6c:	108000e0 	cmpeqi	r2,r2,3
   86a70:	1000091e 	bne	r2,zero,86a98 <edid_decode_v14+0x1d50>
   86a74:	00001006 	br	86ab8 <edid_decode_v14+0x1d70>
                case 0x02:
                	edid->descriptors[i].range_limits.v_offset = VRO_MAX_255_MIN_ZERO;
   86a78:	e0fffe17 	ldw	r3,-8(fp)
   86a7c:	e0bffa17 	ldw	r2,-24(fp)
   86a80:	10815c24 	muli	r2,r2,1392
   86a84:	1885883a 	add	r2,r3,r2
   86a88:	10809b04 	addi	r2,r2,620
   86a8c:	00c00044 	movi	r3,1
   86a90:	10c00015 	stw	r3,0(r2)
                    break;
   86a94:	00000806 	br	86ab8 <edid_decode_v14+0x1d70>
                case 0x03:
                	edid->descriptors[i].range_limits.v_offset = VRO_MAX_255_MIN_255;
   86a98:	e0fffe17 	ldw	r3,-8(fp)
   86a9c:	e0bffa17 	ldw	r2,-24(fp)
   86aa0:	10815c24 	muli	r2,r2,1392
   86aa4:	1885883a 	add	r2,r3,r2
   86aa8:	10809b04 	addi	r2,r2,620
   86aac:	00c00084 	movi	r3,2
   86ab0:	10c00015 	stw	r3,0(r2)
                    break;
   86ab4:	0001883a 	nop
                }

                if (c[5] != 0) {
   86ab8:	e0bff817 	ldw	r2,-32(fp)
   86abc:	10800144 	addi	r2,r2,5
   86ac0:	10800003 	ldbu	r2,0(r2)
   86ac4:	10803fcc 	andi	r2,r2,255
   86ac8:	10001e26 	beq	r2,zero,86b44 <edid_decode_v14+0x1dfc>
					if ((c[4] & 0x03) == 0x03)
   86acc:	e0bff817 	ldw	r2,-32(fp)
   86ad0:	10800104 	addi	r2,r2,4
   86ad4:	10800003 	ldbu	r2,0(r2)
   86ad8:	10803fcc 	andi	r2,r2,255
   86adc:	108000cc 	andi	r2,r2,3
   86ae0:	108000d8 	cmpnei	r2,r2,3
   86ae4:	10000c1e 	bne	r2,zero,86b18 <edid_decode_v14+0x1dd0>
						edid->descriptors[i].range_limits.v_min = c[5] + 255;
   86ae8:	e0bff817 	ldw	r2,-32(fp)
   86aec:	10800144 	addi	r2,r2,5
   86af0:	10800003 	ldbu	r2,0(r2)
   86af4:	10803fcc 	andi	r2,r2,255
   86af8:	10c03fc4 	addi	r3,r2,255
   86afc:	e13ffe17 	ldw	r4,-8(fp)
   86b00:	e0bffa17 	ldw	r2,-24(fp)
   86b04:	10815c24 	muli	r2,r2,1392
   86b08:	2085883a 	add	r2,r4,r2
   86b0c:	10809d04 	addi	r2,r2,628
   86b10:	10c00015 	stw	r3,0(r2)
   86b14:	00001106 	br	86b5c <edid_decode_v14+0x1e14>
					else
						edid->descriptors[i].range_limits.v_min = c[5];
   86b18:	e0bff817 	ldw	r2,-32(fp)
   86b1c:	10800144 	addi	r2,r2,5
   86b20:	10800003 	ldbu	r2,0(r2)
   86b24:	10c03fcc 	andi	r3,r2,255
   86b28:	e13ffe17 	ldw	r4,-8(fp)
   86b2c:	e0bffa17 	ldw	r2,-24(fp)
   86b30:	10815c24 	muli	r2,r2,1392
   86b34:	2085883a 	add	r2,r4,r2
   86b38:	10809d04 	addi	r2,r2,628
   86b3c:	10c00015 	stw	r3,0(r2)
   86b40:	00000606 	br	86b5c <edid_decode_v14+0x1e14>
                } else {
                	edid->descriptors[i].range_limits.v_min = 0;
   86b44:	e0fffe17 	ldw	r3,-8(fp)
   86b48:	e0bffa17 	ldw	r2,-24(fp)
   86b4c:	10815c24 	muli	r2,r2,1392
   86b50:	1885883a 	add	r2,r3,r2
   86b54:	10809d04 	addi	r2,r2,628
   86b58:	10000015 	stw	zero,0(r2)
                }

                if (c[6] != 0) {
   86b5c:	e0bff817 	ldw	r2,-32(fp)
   86b60:	10800184 	addi	r2,r2,6
   86b64:	10800003 	ldbu	r2,0(r2)
   86b68:	10803fcc 	andi	r2,r2,255
   86b6c:	10001d26 	beq	r2,zero,86be4 <edid_decode_v14+0x1e9c>
					if ((c[4] & 0x02) == 0x02)
   86b70:	e0bff817 	ldw	r2,-32(fp)
   86b74:	10800104 	addi	r2,r2,4
   86b78:	10800003 	ldbu	r2,0(r2)
   86b7c:	10803fcc 	andi	r2,r2,255
   86b80:	1080008c 	andi	r2,r2,2
   86b84:	10000c26 	beq	r2,zero,86bb8 <edid_decode_v14+0x1e70>
						edid->descriptors[i].range_limits.v_max = c[6] + 255;
   86b88:	e0bff817 	ldw	r2,-32(fp)
   86b8c:	10800184 	addi	r2,r2,6
   86b90:	10800003 	ldbu	r2,0(r2)
   86b94:	10803fcc 	andi	r2,r2,255
   86b98:	10c03fc4 	addi	r3,r2,255
   86b9c:	e13ffe17 	ldw	r4,-8(fp)
   86ba0:	e0bffa17 	ldw	r2,-24(fp)
   86ba4:	10815c24 	muli	r2,r2,1392
   86ba8:	2085883a 	add	r2,r4,r2
   86bac:	10809e04 	addi	r2,r2,632
   86bb0:	10c00015 	stw	r3,0(r2)
   86bb4:	00001106 	br	86bfc <edid_decode_v14+0x1eb4>
					else
						edid->descriptors[i].range_limits.v_max = c[6];
   86bb8:	e0bff817 	ldw	r2,-32(fp)
   86bbc:	10800184 	addi	r2,r2,6
   86bc0:	10800003 	ldbu	r2,0(r2)
   86bc4:	10c03fcc 	andi	r3,r2,255
   86bc8:	e13ffe17 	ldw	r4,-8(fp)
   86bcc:	e0bffa17 	ldw	r2,-24(fp)
   86bd0:	10815c24 	muli	r2,r2,1392
   86bd4:	2085883a 	add	r2,r4,r2
   86bd8:	10809e04 	addi	r2,r2,632
   86bdc:	10c00015 	stw	r3,0(r2)
   86be0:	00000606 	br	86bfc <edid_decode_v14+0x1eb4>
                } else {
                	edid->descriptors[i].range_limits.v_max = 0;
   86be4:	e0fffe17 	ldw	r3,-8(fp)
   86be8:	e0bffa17 	ldw	r2,-24(fp)
   86bec:	10815c24 	muli	r2,r2,1392
   86bf0:	1885883a 	add	r2,r3,r2
   86bf4:	10809e04 	addi	r2,r2,632
   86bf8:	10000015 	stw	zero,0(r2)
                }

                if (c[7] != 0) {
   86bfc:	e0bff817 	ldw	r2,-32(fp)
   86c00:	108001c4 	addi	r2,r2,7
   86c04:	10800003 	ldbu	r2,0(r2)
   86c08:	10803fcc 	andi	r2,r2,255
   86c0c:	10001e26 	beq	r2,zero,86c88 <edid_decode_v14+0x1f40>
					if ((c[4] & 0x0c) == 0x0c)
   86c10:	e0bff817 	ldw	r2,-32(fp)
   86c14:	10800104 	addi	r2,r2,4
   86c18:	10800003 	ldbu	r2,0(r2)
   86c1c:	10803fcc 	andi	r2,r2,255
   86c20:	1080030c 	andi	r2,r2,12
   86c24:	10800318 	cmpnei	r2,r2,12
   86c28:	10000c1e 	bne	r2,zero,86c5c <edid_decode_v14+0x1f14>
						edid->descriptors[i].range_limits.h_min = c[7] + 255;
   86c2c:	e0bff817 	ldw	r2,-32(fp)
   86c30:	108001c4 	addi	r2,r2,7
   86c34:	10800003 	ldbu	r2,0(r2)
   86c38:	10803fcc 	andi	r2,r2,255
   86c3c:	10c03fc4 	addi	r3,r2,255
   86c40:	e13ffe17 	ldw	r4,-8(fp)
   86c44:	e0bffa17 	ldw	r2,-24(fp)
   86c48:	10815c24 	muli	r2,r2,1392
   86c4c:	2085883a 	add	r2,r4,r2
   86c50:	10809f04 	addi	r2,r2,636
   86c54:	10c00015 	stw	r3,0(r2)
   86c58:	00001106 	br	86ca0 <edid_decode_v14+0x1f58>
					else
						edid->descriptors[i].range_limits.h_min = c[7];
   86c5c:	e0bff817 	ldw	r2,-32(fp)
   86c60:	108001c4 	addi	r2,r2,7
   86c64:	10800003 	ldbu	r2,0(r2)
   86c68:	10c03fcc 	andi	r3,r2,255
   86c6c:	e13ffe17 	ldw	r4,-8(fp)
   86c70:	e0bffa17 	ldw	r2,-24(fp)
   86c74:	10815c24 	muli	r2,r2,1392
   86c78:	2085883a 	add	r2,r4,r2
   86c7c:	10809f04 	addi	r2,r2,636
   86c80:	10c00015 	stw	r3,0(r2)
   86c84:	00000606 	br	86ca0 <edid_decode_v14+0x1f58>
                } else {
                	edid->descriptors[i].range_limits.h_min = 0;
   86c88:	e0fffe17 	ldw	r3,-8(fp)
   86c8c:	e0bffa17 	ldw	r2,-24(fp)
   86c90:	10815c24 	muli	r2,r2,1392
   86c94:	1885883a 	add	r2,r3,r2
   86c98:	10809f04 	addi	r2,r2,636
   86c9c:	10000015 	stw	zero,0(r2)
                }

                if (c[8] != 0) {
   86ca0:	e0bff817 	ldw	r2,-32(fp)
   86ca4:	10800204 	addi	r2,r2,8
   86ca8:	10800003 	ldbu	r2,0(r2)
   86cac:	10803fcc 	andi	r2,r2,255
   86cb0:	10001d26 	beq	r2,zero,86d28 <edid_decode_v14+0x1fe0>
					if ((c[4] & 0x08) == 0x08)
   86cb4:	e0bff817 	ldw	r2,-32(fp)
   86cb8:	10800104 	addi	r2,r2,4
   86cbc:	10800003 	ldbu	r2,0(r2)
   86cc0:	10803fcc 	andi	r2,r2,255
   86cc4:	1080020c 	andi	r2,r2,8
   86cc8:	10000c26 	beq	r2,zero,86cfc <edid_decode_v14+0x1fb4>
						edid->descriptors[i].range_limits.h_max = c[8] + 255;
   86ccc:	e0bff817 	ldw	r2,-32(fp)
   86cd0:	10800204 	addi	r2,r2,8
   86cd4:	10800003 	ldbu	r2,0(r2)
   86cd8:	10803fcc 	andi	r2,r2,255
   86cdc:	10c03fc4 	addi	r3,r2,255
   86ce0:	e13ffe17 	ldw	r4,-8(fp)
   86ce4:	e0bffa17 	ldw	r2,-24(fp)
   86ce8:	10815c24 	muli	r2,r2,1392
   86cec:	2085883a 	add	r2,r4,r2
   86cf0:	1080a004 	addi	r2,r2,640
   86cf4:	10c00015 	stw	r3,0(r2)
   86cf8:	00001106 	br	86d40 <edid_decode_v14+0x1ff8>
					else
						edid->descriptors[i].range_limits.h_max = c[8];
   86cfc:	e0bff817 	ldw	r2,-32(fp)
   86d00:	10800204 	addi	r2,r2,8
   86d04:	10800003 	ldbu	r2,0(r2)
   86d08:	10c03fcc 	andi	r3,r2,255
   86d0c:	e13ffe17 	ldw	r4,-8(fp)
   86d10:	e0bffa17 	ldw	r2,-24(fp)
   86d14:	10815c24 	muli	r2,r2,1392
   86d18:	2085883a 	add	r2,r4,r2
   86d1c:	1080a004 	addi	r2,r2,640
   86d20:	10c00015 	stw	r3,0(r2)
   86d24:	00000606 	br	86d40 <edid_decode_v14+0x1ff8>
                } else {
                	edid->descriptors[i].range_limits.h_max = 0;
   86d28:	e0fffe17 	ldw	r3,-8(fp)
   86d2c:	e0bffa17 	ldw	r2,-24(fp)
   86d30:	10815c24 	muli	r2,r2,1392
   86d34:	1885883a 	add	r2,r3,r2
   86d38:	1080a004 	addi	r2,r2,640
   86d3c:	10000015 	stw	zero,0(r2)
                }

                edid->descriptors[i].range_limits.p_max = c[9] * 10;
   86d40:	e0bff817 	ldw	r2,-32(fp)
   86d44:	10800244 	addi	r2,r2,9
   86d48:	10800003 	ldbu	r2,0(r2)
   86d4c:	10803fcc 	andi	r2,r2,255
   86d50:	10c002a4 	muli	r3,r2,10
   86d54:	e13ffe17 	ldw	r4,-8(fp)
   86d58:	e0bffa17 	ldw	r2,-24(fp)
   86d5c:	10815c24 	muli	r2,r2,1392
   86d60:	2085883a 	add	r2,r4,r2
   86d64:	1080a104 	addi	r2,r2,644
   86d68:	10c00015 	stw	r3,0(r2)

                // additional timing support flags
            	edid->descriptors[i].range_limits.timing_flags = 0;
   86d6c:	e0fffe17 	ldw	r3,-8(fp)
   86d70:	e0bffa17 	ldw	r2,-24(fp)
   86d74:	10815c24 	muli	r2,r2,1392
   86d78:	1885883a 	add	r2,r3,r2
   86d7c:	1080a204 	addi	r2,r2,648
   86d80:	10000015 	stw	zero,0(r2)

            	if ((c[10] == 0) && (edid->feature & FS_OF_CONTINUOUS_FREQ)) {
   86d84:	e0bff817 	ldw	r2,-32(fp)
   86d88:	10800284 	addi	r2,r2,10
   86d8c:	10800003 	ldbu	r2,0(r2)
   86d90:	10803fcc 	andi	r2,r2,255
   86d94:	1000111e 	bne	r2,zero,86ddc <edid_decode_v14+0x2094>
   86d98:	e0bffe17 	ldw	r2,-8(fp)
   86d9c:	10801217 	ldw	r2,72(r2)
   86da0:	1082000c 	andi	r2,r2,2048
   86da4:	10000d26 	beq	r2,zero,86ddc <edid_decode_v14+0x2094>

            		edid->descriptors[i].range_limits.timing_flags |= TF_DEFAULT_GTF;
   86da8:	e0fffe17 	ldw	r3,-8(fp)
   86dac:	e0bffa17 	ldw	r2,-24(fp)
   86db0:	10815c24 	muli	r2,r2,1392
   86db4:	1885883a 	add	r2,r3,r2
   86db8:	1080a204 	addi	r2,r2,648
   86dbc:	10c00017 	ldw	r3,0(r2)
   86dc0:	e13ffe17 	ldw	r4,-8(fp)
   86dc4:	e0bffa17 	ldw	r2,-24(fp)
   86dc8:	10815c24 	muli	r2,r2,1392
   86dcc:	2085883a 	add	r2,r4,r2
   86dd0:	1080a204 	addi	r2,r2,648
   86dd4:	10c00015 	stw	r3,0(r2)
   86dd8:	0001f906 	br	875c0 <edid_decode_v14+0x2878>

            	} else if ((c[10] == 0x04) && (edid->feature & FS_OF_CONTINUOUS_FREQ)) {
   86ddc:	e0bff817 	ldw	r2,-32(fp)
   86de0:	10800284 	addi	r2,r2,10
   86de4:	10800003 	ldbu	r2,0(r2)
   86de8:	10803fcc 	andi	r2,r2,255
   86dec:	10800118 	cmpnei	r2,r2,4
   86df0:	10018c1e 	bne	r2,zero,87424 <edid_decode_v14+0x26dc>
   86df4:	e0bffe17 	ldw	r2,-8(fp)
   86df8:	10801217 	ldw	r2,72(r2)
   86dfc:	1082000c 	andi	r2,r2,2048
   86e00:	10018826 	beq	r2,zero,87424 <edid_decode_v14+0x26dc>

            		edid->descriptors[i].range_limits.timing_flags |= TF_CVT;
   86e04:	e0fffe17 	ldw	r3,-8(fp)
   86e08:	e0bffa17 	ldw	r2,-24(fp)
   86e0c:	10815c24 	muli	r2,r2,1392
   86e10:	1885883a 	add	r2,r3,r2
   86e14:	1080a204 	addi	r2,r2,648
   86e18:	10800017 	ldw	r2,0(r2)
   86e1c:	10c00114 	ori	r3,r2,4
   86e20:	e13ffe17 	ldw	r4,-8(fp)
   86e24:	e0bffa17 	ldw	r2,-24(fp)
   86e28:	10815c24 	muli	r2,r2,1392
   86e2c:	2085883a 	add	r2,r4,r2
   86e30:	1080a204 	addi	r2,r2,648
   86e34:	10c00015 	stw	r3,0(r2)

            		edid->descriptors[i].range_limits.cvt.ver_mj = c[11] >> 4;
   86e38:	e0bff817 	ldw	r2,-32(fp)
   86e3c:	108002c4 	addi	r2,r2,11
   86e40:	10800003 	ldbu	r2,0(r2)
   86e44:	10803fcc 	andi	r2,r2,255
   86e48:	1004d13a 	srli	r2,r2,4
   86e4c:	10c03fcc 	andi	r3,r2,255
   86e50:	e13ffe17 	ldw	r4,-8(fp)
   86e54:	e0bffa17 	ldw	r2,-24(fp)
   86e58:	10815c24 	muli	r2,r2,1392
   86e5c:	2085883a 	add	r2,r4,r2
   86e60:	1080a304 	addi	r2,r2,652
   86e64:	10c00015 	stw	r3,0(r2)
            		edid->descriptors[i].range_limits.cvt.ver_mn = c[11] & 0x0f;
   86e68:	e0bff817 	ldw	r2,-32(fp)
   86e6c:	108002c4 	addi	r2,r2,11
   86e70:	10800003 	ldbu	r2,0(r2)
   86e74:	10803fcc 	andi	r2,r2,255
   86e78:	10c003cc 	andi	r3,r2,15
   86e7c:	e13ffe17 	ldw	r4,-8(fp)
   86e80:	e0bffa17 	ldw	r2,-24(fp)
   86e84:	10815c24 	muli	r2,r2,1392
   86e88:	2085883a 	add	r2,r4,r2
   86e8c:	1080a404 	addi	r2,r2,656
   86e90:	10c00015 	stw	r3,0(r2)

            		edid->descriptors[i].range_limits.cvt.extra_pclk = (float)((u32)c[12] >> 2) * 0.25;
   86e94:	e0bff817 	ldw	r2,-32(fp)
   86e98:	10800304 	addi	r2,r2,12
   86e9c:	10800003 	ldbu	r2,0(r2)
   86ea0:	10803fcc 	andi	r2,r2,255
   86ea4:	1004d0ba 	srli	r2,r2,2
   86ea8:	10803fcc 	andi	r2,r2,255
   86eac:	1009883a 	mov	r4,r2
   86eb0:	008cd0c0 	call	8cd0c <__floatunsisf>
   86eb4:	1007883a 	mov	r3,r2
   86eb8:	1809883a 	mov	r4,r3
   86ebc:	014fa034 	movhi	r5,16000
   86ec0:	008c9fc0 	call	8c9fc <__mulsf3>
   86ec4:	1009883a 	mov	r4,r2
   86ec8:	2007883a 	mov	r3,r4
   86ecc:	e13ffe17 	ldw	r4,-8(fp)
   86ed0:	e0bffa17 	ldw	r2,-24(fp)
   86ed4:	10815c24 	muli	r2,r2,1392
   86ed8:	2085883a 	add	r2,r4,r2
   86edc:	1080a504 	addi	r2,r2,660
   86ee0:	10c00015 	stw	r3,0(r2)
                    if (c[13] != 0)
   86ee4:	e0bff817 	ldw	r2,-32(fp)
   86ee8:	10800344 	addi	r2,r2,13
   86eec:	10800003 	ldbu	r2,0(r2)
   86ef0:	10803fcc 	andi	r2,r2,255
   86ef4:	10001426 	beq	r2,zero,86f48 <edid_decode_v14+0x2200>
                    	edid->descriptors[i].range_limits.cvt.line_max = ((((u32)c[12] & 0x03) << 8) | (u32)c[13]) * 8;
   86ef8:	e0bff817 	ldw	r2,-32(fp)
   86efc:	10800304 	addi	r2,r2,12
   86f00:	10800003 	ldbu	r2,0(r2)
   86f04:	10803fcc 	andi	r2,r2,255
   86f08:	108000cc 	andi	r2,r2,3
   86f0c:	1006923a 	slli	r3,r2,8
   86f10:	e0bff817 	ldw	r2,-32(fp)
   86f14:	10800344 	addi	r2,r2,13
   86f18:	10800003 	ldbu	r2,0(r2)
   86f1c:	10803fcc 	andi	r2,r2,255
   86f20:	1884b03a 	or	r2,r3,r2
   86f24:	100490fa 	slli	r2,r2,3
   86f28:	1007883a 	mov	r3,r2
   86f2c:	e13ffe17 	ldw	r4,-8(fp)
   86f30:	e0bffa17 	ldw	r2,-24(fp)
   86f34:	10815c24 	muli	r2,r2,1392
   86f38:	2085883a 	add	r2,r4,r2
   86f3c:	1080a604 	addi	r2,r2,664
   86f40:	10c00015 	stw	r3,0(r2)
   86f44:	00000606 	br	86f60 <edid_decode_v14+0x2218>
                    else
                    	edid->descriptors[i].range_limits.cvt.line_max = 0;
   86f48:	e0fffe17 	ldw	r3,-8(fp)
   86f4c:	e0bffa17 	ldw	r2,-24(fp)
   86f50:	10815c24 	muli	r2,r2,1392
   86f54:	1885883a 	add	r2,r3,r2
   86f58:	1080a604 	addi	r2,r2,664
   86f5c:	10000015 	stw	zero,0(r2)

                    edid->descriptors[i].range_limits.cvt.aspect_ratios = 0;
   86f60:	e0fffe17 	ldw	r3,-8(fp)
   86f64:	e0bffa17 	ldw	r2,-24(fp)
   86f68:	10815c24 	muli	r2,r2,1392
   86f6c:	1885883a 	add	r2,r3,r2
   86f70:	1080a704 	addi	r2,r2,668
   86f74:	10000015 	stw	zero,0(r2)
                    if (c[14] & 0x80)
   86f78:	e0bff817 	ldw	r2,-32(fp)
   86f7c:	10800384 	addi	r2,r2,14
   86f80:	10800003 	ldbu	r2,0(r2)
   86f84:	10803fcc 	andi	r2,r2,255
   86f88:	1080201c 	xori	r2,r2,128
   86f8c:	10bfe004 	addi	r2,r2,-128
   86f90:	10000d0e 	bge	r2,zero,86fc8 <edid_decode_v14+0x2280>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_4_3;
   86f94:	e0fffe17 	ldw	r3,-8(fp)
   86f98:	e0bffa17 	ldw	r2,-24(fp)
   86f9c:	10815c24 	muli	r2,r2,1392
   86fa0:	1885883a 	add	r2,r3,r2
   86fa4:	1080a704 	addi	r2,r2,668
   86fa8:	10800017 	ldw	r2,0(r2)
   86fac:	10c00054 	ori	r3,r2,1
   86fb0:	e13ffe17 	ldw	r4,-8(fp)
   86fb4:	e0bffa17 	ldw	r2,-24(fp)
   86fb8:	10815c24 	muli	r2,r2,1392
   86fbc:	2085883a 	add	r2,r4,r2
   86fc0:	1080a704 	addi	r2,r2,668
   86fc4:	10c00015 	stw	r3,0(r2)
                    if (c[14] & 0x40)
   86fc8:	e0bff817 	ldw	r2,-32(fp)
   86fcc:	10800384 	addi	r2,r2,14
   86fd0:	10800003 	ldbu	r2,0(r2)
   86fd4:	10803fcc 	andi	r2,r2,255
   86fd8:	1080100c 	andi	r2,r2,64
   86fdc:	10000d26 	beq	r2,zero,87014 <edid_decode_v14+0x22cc>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_16_9;
   86fe0:	e0fffe17 	ldw	r3,-8(fp)
   86fe4:	e0bffa17 	ldw	r2,-24(fp)
   86fe8:	10815c24 	muli	r2,r2,1392
   86fec:	1885883a 	add	r2,r3,r2
   86ff0:	1080a704 	addi	r2,r2,668
   86ff4:	10800017 	ldw	r2,0(r2)
   86ff8:	10c00094 	ori	r3,r2,2
   86ffc:	e13ffe17 	ldw	r4,-8(fp)
   87000:	e0bffa17 	ldw	r2,-24(fp)
   87004:	10815c24 	muli	r2,r2,1392
   87008:	2085883a 	add	r2,r4,r2
   8700c:	1080a704 	addi	r2,r2,668
   87010:	10c00015 	stw	r3,0(r2)
                    if (c[14] & 0x20)
   87014:	e0bff817 	ldw	r2,-32(fp)
   87018:	10800384 	addi	r2,r2,14
   8701c:	10800003 	ldbu	r2,0(r2)
   87020:	10803fcc 	andi	r2,r2,255
   87024:	1080080c 	andi	r2,r2,32
   87028:	10000d26 	beq	r2,zero,87060 <edid_decode_v14+0x2318>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_16_10;
   8702c:	e0fffe17 	ldw	r3,-8(fp)
   87030:	e0bffa17 	ldw	r2,-24(fp)
   87034:	10815c24 	muli	r2,r2,1392
   87038:	1885883a 	add	r2,r3,r2
   8703c:	1080a704 	addi	r2,r2,668
   87040:	10800017 	ldw	r2,0(r2)
   87044:	10c00114 	ori	r3,r2,4
   87048:	e13ffe17 	ldw	r4,-8(fp)
   8704c:	e0bffa17 	ldw	r2,-24(fp)
   87050:	10815c24 	muli	r2,r2,1392
   87054:	2085883a 	add	r2,r4,r2
   87058:	1080a704 	addi	r2,r2,668
   8705c:	10c00015 	stw	r3,0(r2)
                    if (c[14] & 0x10)
   87060:	e0bff817 	ldw	r2,-32(fp)
   87064:	10800384 	addi	r2,r2,14
   87068:	10800003 	ldbu	r2,0(r2)
   8706c:	10803fcc 	andi	r2,r2,255
   87070:	1080040c 	andi	r2,r2,16
   87074:	10000d26 	beq	r2,zero,870ac <edid_decode_v14+0x2364>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_5_4;
   87078:	e0fffe17 	ldw	r3,-8(fp)
   8707c:	e0bffa17 	ldw	r2,-24(fp)
   87080:	10815c24 	muli	r2,r2,1392
   87084:	1885883a 	add	r2,r3,r2
   87088:	1080a704 	addi	r2,r2,668
   8708c:	10800017 	ldw	r2,0(r2)
   87090:	10c00214 	ori	r3,r2,8
   87094:	e13ffe17 	ldw	r4,-8(fp)
   87098:	e0bffa17 	ldw	r2,-24(fp)
   8709c:	10815c24 	muli	r2,r2,1392
   870a0:	2085883a 	add	r2,r4,r2
   870a4:	1080a704 	addi	r2,r2,668
   870a8:	10c00015 	stw	r3,0(r2)
                    if (c[14] & 0x08)
   870ac:	e0bff817 	ldw	r2,-32(fp)
   870b0:	10800384 	addi	r2,r2,14
   870b4:	10800003 	ldbu	r2,0(r2)
   870b8:	10803fcc 	andi	r2,r2,255
   870bc:	1080020c 	andi	r2,r2,8
   870c0:	10000d26 	beq	r2,zero,870f8 <edid_decode_v14+0x23b0>
                    	edid->descriptors[i].range_limits.cvt.aspect_ratios |= CVT_AR_15_9;
   870c4:	e0fffe17 	ldw	r3,-8(fp)
   870c8:	e0bffa17 	ldw	r2,-24(fp)
   870cc:	10815c24 	muli	r2,r2,1392
   870d0:	1885883a 	add	r2,r3,r2
   870d4:	1080a704 	addi	r2,r2,668
   870d8:	10800017 	ldw	r2,0(r2)
   870dc:	10c00414 	ori	r3,r2,16
   870e0:	e13ffe17 	ldw	r4,-8(fp)
   870e4:	e0bffa17 	ldw	r2,-24(fp)
   870e8:	10815c24 	muli	r2,r2,1392
   870ec:	2085883a 	add	r2,r4,r2
   870f0:	1080a704 	addi	r2,r2,668
   870f4:	10c00015 	stw	r3,0(r2)

                    switch (c[15] & 0xe0) {
   870f8:	e0bff817 	ldw	r2,-32(fp)
   870fc:	108003c4 	addi	r2,r2,15
   87100:	10800003 	ldbu	r2,0(r2)
   87104:	10803fcc 	andi	r2,r2,255
   87108:	1080380c 	andi	r2,r2,224
   8710c:	10c01020 	cmpeqi	r3,r2,64
   87110:	18001b1e 	bne	r3,zero,87180 <edid_decode_v14+0x2438>
   87114:	10c01048 	cmpgei	r3,r2,65
   87118:	1800041e 	bne	r3,zero,8712c <edid_decode_v14+0x23e4>
   8711c:	10000826 	beq	r2,zero,87140 <edid_decode_v14+0x23f8>
   87120:	10800820 	cmpeqi	r2,r2,32
   87124:	10000e1e 	bne	r2,zero,87160 <edid_decode_v14+0x2418>
   87128:	00002d06 	br	871e0 <edid_decode_v14+0x2498>
   8712c:	10c01820 	cmpeqi	r3,r2,96
   87130:	18001b1e 	bne	r3,zero,871a0 <edid_decode_v14+0x2458>
   87134:	10802020 	cmpeqi	r2,r2,128
   87138:	1000211e 	bne	r2,zero,871c0 <edid_decode_v14+0x2478>
   8713c:	00002806 	br	871e0 <edid_decode_v14+0x2498>
                    case 0x00:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_4_3;
   87140:	e0fffe17 	ldw	r3,-8(fp)
   87144:	e0bffa17 	ldw	r2,-24(fp)
   87148:	10815c24 	muli	r2,r2,1392
   8714c:	1885883a 	add	r2,r3,r2
   87150:	1080a804 	addi	r2,r2,672
   87154:	00c00044 	movi	r3,1
   87158:	10c00015 	stw	r3,0(r2)
                        break;
   8715c:	00002706 	br	871fc <edid_decode_v14+0x24b4>
                    case 0x20:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_16_9;
   87160:	e0fffe17 	ldw	r3,-8(fp)
   87164:	e0bffa17 	ldw	r2,-24(fp)
   87168:	10815c24 	muli	r2,r2,1392
   8716c:	1885883a 	add	r2,r3,r2
   87170:	1080a804 	addi	r2,r2,672
   87174:	00c00084 	movi	r3,2
   87178:	10c00015 	stw	r3,0(r2)
                        break;
   8717c:	00001f06 	br	871fc <edid_decode_v14+0x24b4>
                    case 0x40:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_16_10;
   87180:	e0fffe17 	ldw	r3,-8(fp)
   87184:	e0bffa17 	ldw	r2,-24(fp)
   87188:	10815c24 	muli	r2,r2,1392
   8718c:	1885883a 	add	r2,r3,r2
   87190:	1080a804 	addi	r2,r2,672
   87194:	00c00104 	movi	r3,4
   87198:	10c00015 	stw	r3,0(r2)
                        break;
   8719c:	00001706 	br	871fc <edid_decode_v14+0x24b4>
                    case 0x60:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_5_4;
   871a0:	e0fffe17 	ldw	r3,-8(fp)
   871a4:	e0bffa17 	ldw	r2,-24(fp)
   871a8:	10815c24 	muli	r2,r2,1392
   871ac:	1885883a 	add	r2,r3,r2
   871b0:	1080a804 	addi	r2,r2,672
   871b4:	00c00204 	movi	r3,8
   871b8:	10c00015 	stw	r3,0(r2)
                        break;
   871bc:	00000f06 	br	871fc <edid_decode_v14+0x24b4>
                    case 0x80:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = CVT_AR_15_9;
   871c0:	e0fffe17 	ldw	r3,-8(fp)
   871c4:	e0bffa17 	ldw	r2,-24(fp)
   871c8:	10815c24 	muli	r2,r2,1392
   871cc:	1885883a 	add	r2,r3,r2
   871d0:	1080a804 	addi	r2,r2,672
   871d4:	00c00404 	movi	r3,16
   871d8:	10c00015 	stw	r3,0(r2)
                        break;
   871dc:	00000706 	br	871fc <edid_decode_v14+0x24b4>
                    default:
                    	edid->descriptors[i].range_limits.cvt.preferred_ar = 0;
   871e0:	e0fffe17 	ldw	r3,-8(fp)
   871e4:	e0bffa17 	ldw	r2,-24(fp)
   871e8:	10815c24 	muli	r2,r2,1392
   871ec:	1885883a 	add	r2,r3,r2
   871f0:	1080a804 	addi	r2,r2,672
   871f4:	10000015 	stw	zero,0(r2)
                        break;
   871f8:	0001883a 	nop
                    }

                    edid->descriptors[i].range_limits.cvt.blanking = 0;
   871fc:	e0fffe17 	ldw	r3,-8(fp)
   87200:	e0bffa17 	ldw	r2,-24(fp)
   87204:	10815c24 	muli	r2,r2,1392
   87208:	1885883a 	add	r2,r3,r2
   8720c:	1080a904 	addi	r2,r2,676
   87210:	10000015 	stw	zero,0(r2)
					if (c[15] & 0x08)
   87214:	e0bff817 	ldw	r2,-32(fp)
   87218:	108003c4 	addi	r2,r2,15
   8721c:	10800003 	ldbu	r2,0(r2)
   87220:	10803fcc 	andi	r2,r2,255
   87224:	1080020c 	andi	r2,r2,8
   87228:	10000d26 	beq	r2,zero,87260 <edid_decode_v14+0x2518>
						edid->descriptors[i].range_limits.cvt.blanking |= CVT_STANDARD_BLANKING;
   8722c:	e0fffe17 	ldw	r3,-8(fp)
   87230:	e0bffa17 	ldw	r2,-24(fp)
   87234:	10815c24 	muli	r2,r2,1392
   87238:	1885883a 	add	r2,r3,r2
   8723c:	1080a904 	addi	r2,r2,676
   87240:	10800017 	ldw	r2,0(r2)
   87244:	10c00054 	ori	r3,r2,1
   87248:	e13ffe17 	ldw	r4,-8(fp)
   8724c:	e0bffa17 	ldw	r2,-24(fp)
   87250:	10815c24 	muli	r2,r2,1392
   87254:	2085883a 	add	r2,r4,r2
   87258:	1080a904 	addi	r2,r2,676
   8725c:	10c00015 	stw	r3,0(r2)
					if (c[15] & 0x10)
   87260:	e0bff817 	ldw	r2,-32(fp)
   87264:	108003c4 	addi	r2,r2,15
   87268:	10800003 	ldbu	r2,0(r2)
   8726c:	10803fcc 	andi	r2,r2,255
   87270:	1080040c 	andi	r2,r2,16
   87274:	10000d26 	beq	r2,zero,872ac <edid_decode_v14+0x2564>
						edid->descriptors[i].range_limits.cvt.blanking |= CVT_REDUCED_BLANKING;
   87278:	e0fffe17 	ldw	r3,-8(fp)
   8727c:	e0bffa17 	ldw	r2,-24(fp)
   87280:	10815c24 	muli	r2,r2,1392
   87284:	1885883a 	add	r2,r3,r2
   87288:	1080a904 	addi	r2,r2,676
   8728c:	10800017 	ldw	r2,0(r2)
   87290:	10c00094 	ori	r3,r2,2
   87294:	e13ffe17 	ldw	r4,-8(fp)
   87298:	e0bffa17 	ldw	r2,-24(fp)
   8729c:	10815c24 	muli	r2,r2,1392
   872a0:	2085883a 	add	r2,r4,r2
   872a4:	1080a904 	addi	r2,r2,676
   872a8:	10c00015 	stw	r3,0(r2)

                    edid->descriptors[i].range_limits.cvt.scaling = 0;
   872ac:	e0fffe17 	ldw	r3,-8(fp)
   872b0:	e0bffa17 	ldw	r2,-24(fp)
   872b4:	10815c24 	muli	r2,r2,1392
   872b8:	1885883a 	add	r2,r3,r2
   872bc:	1080aa04 	addi	r2,r2,680
   872c0:	10000015 	stw	zero,0(r2)
					if (c[16] & 0x80)
   872c4:	e0bff817 	ldw	r2,-32(fp)
   872c8:	10800404 	addi	r2,r2,16
   872cc:	10800003 	ldbu	r2,0(r2)
   872d0:	10803fcc 	andi	r2,r2,255
   872d4:	1080201c 	xori	r2,r2,128
   872d8:	10bfe004 	addi	r2,r2,-128
   872dc:	10000d0e 	bge	r2,zero,87314 <edid_decode_v14+0x25cc>
	                    edid->descriptors[i].range_limits.cvt.scaling |= CVT_H_SHRINK;
   872e0:	e0fffe17 	ldw	r3,-8(fp)
   872e4:	e0bffa17 	ldw	r2,-24(fp)
   872e8:	10815c24 	muli	r2,r2,1392
   872ec:	1885883a 	add	r2,r3,r2
   872f0:	1080aa04 	addi	r2,r2,680
   872f4:	10800017 	ldw	r2,0(r2)
   872f8:	10c00054 	ori	r3,r2,1
   872fc:	e13ffe17 	ldw	r4,-8(fp)
   87300:	e0bffa17 	ldw	r2,-24(fp)
   87304:	10815c24 	muli	r2,r2,1392
   87308:	2085883a 	add	r2,r4,r2
   8730c:	1080aa04 	addi	r2,r2,680
   87310:	10c00015 	stw	r3,0(r2)
					if (c[16] & 0x40)
   87314:	e0bff817 	ldw	r2,-32(fp)
   87318:	10800404 	addi	r2,r2,16
   8731c:	10800003 	ldbu	r2,0(r2)
   87320:	10803fcc 	andi	r2,r2,255
   87324:	1080100c 	andi	r2,r2,64
   87328:	10000d26 	beq	r2,zero,87360 <edid_decode_v14+0x2618>
	                    edid->descriptors[i].range_limits.cvt.scaling |= CVT_H_STRETCH;
   8732c:	e0fffe17 	ldw	r3,-8(fp)
   87330:	e0bffa17 	ldw	r2,-24(fp)
   87334:	10815c24 	muli	r2,r2,1392
   87338:	1885883a 	add	r2,r3,r2
   8733c:	1080aa04 	addi	r2,r2,680
   87340:	10800017 	ldw	r2,0(r2)
   87344:	10c00094 	ori	r3,r2,2
   87348:	e13ffe17 	ldw	r4,-8(fp)
   8734c:	e0bffa17 	ldw	r2,-24(fp)
   87350:	10815c24 	muli	r2,r2,1392
   87354:	2085883a 	add	r2,r4,r2
   87358:	1080aa04 	addi	r2,r2,680
   8735c:	10c00015 	stw	r3,0(r2)
					if (c[16] & 0x20)
   87360:	e0bff817 	ldw	r2,-32(fp)
   87364:	10800404 	addi	r2,r2,16
   87368:	10800003 	ldbu	r2,0(r2)
   8736c:	10803fcc 	andi	r2,r2,255
   87370:	1080080c 	andi	r2,r2,32
   87374:	10000d26 	beq	r2,zero,873ac <edid_decode_v14+0x2664>
	                    edid->descriptors[i].range_limits.cvt.scaling |= CVT_V_SHRINK;
   87378:	e0fffe17 	ldw	r3,-8(fp)
   8737c:	e0bffa17 	ldw	r2,-24(fp)
   87380:	10815c24 	muli	r2,r2,1392
   87384:	1885883a 	add	r2,r3,r2
   87388:	1080aa04 	addi	r2,r2,680
   8738c:	10800017 	ldw	r2,0(r2)
   87390:	10c00114 	ori	r3,r2,4
   87394:	e13ffe17 	ldw	r4,-8(fp)
   87398:	e0bffa17 	ldw	r2,-24(fp)
   8739c:	10815c24 	muli	r2,r2,1392
   873a0:	2085883a 	add	r2,r4,r2
   873a4:	1080aa04 	addi	r2,r2,680
   873a8:	10c00015 	stw	r3,0(r2)
					if (c[16] & 0x10)
   873ac:	e0bff817 	ldw	r2,-32(fp)
   873b0:	10800404 	addi	r2,r2,16
   873b4:	10800003 	ldbu	r2,0(r2)
   873b8:	10803fcc 	andi	r2,r2,255
   873bc:	1080040c 	andi	r2,r2,16
   873c0:	10000d26 	beq	r2,zero,873f8 <edid_decode_v14+0x26b0>
	                    edid->descriptors[i].range_limits.cvt.scaling |= CVT_V_STRETCH;
   873c4:	e0fffe17 	ldw	r3,-8(fp)
   873c8:	e0bffa17 	ldw	r2,-24(fp)
   873cc:	10815c24 	muli	r2,r2,1392
   873d0:	1885883a 	add	r2,r3,r2
   873d4:	1080aa04 	addi	r2,r2,680
   873d8:	10800017 	ldw	r2,0(r2)
   873dc:	10c00214 	ori	r3,r2,8
   873e0:	e13ffe17 	ldw	r4,-8(fp)
   873e4:	e0bffa17 	ldw	r2,-24(fp)
   873e8:	10815c24 	muli	r2,r2,1392
   873ec:	2085883a 	add	r2,r4,r2
   873f0:	1080aa04 	addi	r2,r2,680
   873f4:	10c00015 	stw	r3,0(r2)

					edid->descriptors[i].range_limits.cvt.v_refresh = c[17];
   873f8:	e0bff817 	ldw	r2,-32(fp)
   873fc:	10800444 	addi	r2,r2,17
   87400:	10800003 	ldbu	r2,0(r2)
   87404:	10c03fcc 	andi	r3,r2,255
   87408:	e13ffe17 	ldw	r4,-8(fp)
   8740c:	e0bffa17 	ldw	r2,-24(fp)
   87410:	10815c24 	muli	r2,r2,1392
   87414:	2085883a 	add	r2,r4,r2
   87418:	1080ab04 	addi	r2,r2,684
   8741c:	10c00015 	stw	r3,0(r2)
   87420:	00006706 	br	875c0 <edid_decode_v14+0x2878>

                } else if (c[10] == 0x01) {
   87424:	e0bff817 	ldw	r2,-32(fp)
   87428:	10800284 	addi	r2,r2,10
   8742c:	10800003 	ldbu	r2,0(r2)
   87430:	10803fcc 	andi	r2,r2,255
   87434:	10800058 	cmpnei	r2,r2,1
   87438:	10000e1e 	bne	r2,zero,87474 <edid_decode_v14+0x272c>
                	edid->descriptors[i].range_limits.timing_flags |= TF_RANGE_LIMITS;
   8743c:	e0fffe17 	ldw	r3,-8(fp)
   87440:	e0bffa17 	ldw	r2,-24(fp)
   87444:	10815c24 	muli	r2,r2,1392
   87448:	1885883a 	add	r2,r3,r2
   8744c:	1080a204 	addi	r2,r2,648
   87450:	10800017 	ldw	r2,0(r2)
   87454:	10c00054 	ori	r3,r2,1
   87458:	e13ffe17 	ldw	r4,-8(fp)
   8745c:	e0bffa17 	ldw	r2,-24(fp)
   87460:	10815c24 	muli	r2,r2,1392
   87464:	2085883a 	add	r2,r4,r2
   87468:	1080a204 	addi	r2,r2,648
   8746c:	10c00015 	stw	r3,0(r2)
                	edid->descriptors[i].range_limits.gtf_2nd_curve.M = ((u32)c[15] << 8) | (u32)c[14];
                	edid->descriptors[i].range_limits.gtf_2nd_curve.K = c[16];
                	edid->descriptors[i].range_limits.gtf_2nd_curve.J = c[17] / 2;
                }

                break;
   87470:	00067406 	br	88e44 <edid_decode_v14+0x40fc>

					edid->descriptors[i].range_limits.cvt.v_refresh = c[17];

                } else if (c[10] == 0x01) {
                	edid->descriptors[i].range_limits.timing_flags |= TF_RANGE_LIMITS;
                } else if (c[10] == 0x02) {
   87474:	e0bff817 	ldw	r2,-32(fp)
   87478:	10800284 	addi	r2,r2,10
   8747c:	10800003 	ldbu	r2,0(r2)
   87480:	10803fcc 	andi	r2,r2,255
   87484:	10800098 	cmpnei	r2,r2,2
   87488:	10066e1e 	bne	r2,zero,88e44 <edid_decode_v14+0x40fc>
                	edid->descriptors[i].range_limits.timing_flags |= TF_SECOND_GTF;
   8748c:	e0fffe17 	ldw	r3,-8(fp)
   87490:	e0bffa17 	ldw	r2,-24(fp)
   87494:	10815c24 	muli	r2,r2,1392
   87498:	1885883a 	add	r2,r3,r2
   8749c:	1080a204 	addi	r2,r2,648
   874a0:	10800017 	ldw	r2,0(r2)
   874a4:	10c00094 	ori	r3,r2,2
   874a8:	e13ffe17 	ldw	r4,-8(fp)
   874ac:	e0bffa17 	ldw	r2,-24(fp)
   874b0:	10815c24 	muli	r2,r2,1392
   874b4:	2085883a 	add	r2,r4,r2
   874b8:	1080a204 	addi	r2,r2,648
   874bc:	10c00015 	stw	r3,0(r2)

                	edid->descriptors[i].range_limits.gtf_2nd_curve.break_freq = c[12] * 2;
   874c0:	e0bff817 	ldw	r2,-32(fp)
   874c4:	10800304 	addi	r2,r2,12
   874c8:	10800003 	ldbu	r2,0(r2)
   874cc:	10803fcc 	andi	r2,r2,255
   874d0:	1085883a 	add	r2,r2,r2
   874d4:	1007883a 	mov	r3,r2
   874d8:	e13ffe17 	ldw	r4,-8(fp)
   874dc:	e0bffa17 	ldw	r2,-24(fp)
   874e0:	10815c24 	muli	r2,r2,1392
   874e4:	2085883a 	add	r2,r4,r2
   874e8:	1080a304 	addi	r2,r2,652
   874ec:	10c00015 	stw	r3,0(r2)
                	edid->descriptors[i].range_limits.gtf_2nd_curve.C = c[13] / 2;
   874f0:	e0bff817 	ldw	r2,-32(fp)
   874f4:	10800344 	addi	r2,r2,13
   874f8:	10800003 	ldbu	r2,0(r2)
   874fc:	10803fcc 	andi	r2,r2,255
   87500:	1004d07a 	srli	r2,r2,1
   87504:	10c03fcc 	andi	r3,r2,255
   87508:	e13ffe17 	ldw	r4,-8(fp)
   8750c:	e0bffa17 	ldw	r2,-24(fp)
   87510:	10815c24 	muli	r2,r2,1392
   87514:	2085883a 	add	r2,r4,r2
   87518:	1080a404 	addi	r2,r2,656
   8751c:	10c00015 	stw	r3,0(r2)
                	edid->descriptors[i].range_limits.gtf_2nd_curve.M = ((u32)c[15] << 8) | (u32)c[14];
   87520:	e0bff817 	ldw	r2,-32(fp)
   87524:	108003c4 	addi	r2,r2,15
   87528:	10800003 	ldbu	r2,0(r2)
   8752c:	10803fcc 	andi	r2,r2,255
   87530:	1006923a 	slli	r3,r2,8
   87534:	e0bff817 	ldw	r2,-32(fp)
   87538:	10800384 	addi	r2,r2,14
   8753c:	10800003 	ldbu	r2,0(r2)
   87540:	10803fcc 	andi	r2,r2,255
   87544:	1884b03a 	or	r2,r3,r2
   87548:	1007883a 	mov	r3,r2
   8754c:	e13ffe17 	ldw	r4,-8(fp)
   87550:	e0bffa17 	ldw	r2,-24(fp)
   87554:	10815c24 	muli	r2,r2,1392
   87558:	2085883a 	add	r2,r4,r2
   8755c:	1080a504 	addi	r2,r2,660
   87560:	10c00015 	stw	r3,0(r2)
                	edid->descriptors[i].range_limits.gtf_2nd_curve.K = c[16];
   87564:	e0bff817 	ldw	r2,-32(fp)
   87568:	10800404 	addi	r2,r2,16
   8756c:	10800003 	ldbu	r2,0(r2)
   87570:	10c03fcc 	andi	r3,r2,255
   87574:	e13ffe17 	ldw	r4,-8(fp)
   87578:	e0bffa17 	ldw	r2,-24(fp)
   8757c:	10815c24 	muli	r2,r2,1392
   87580:	2085883a 	add	r2,r4,r2
   87584:	1080a604 	addi	r2,r2,664
   87588:	10c00015 	stw	r3,0(r2)
                	edid->descriptors[i].range_limits.gtf_2nd_curve.J = c[17] / 2;
   8758c:	e0bff817 	ldw	r2,-32(fp)
   87590:	10800444 	addi	r2,r2,17
   87594:	10800003 	ldbu	r2,0(r2)
   87598:	10803fcc 	andi	r2,r2,255
   8759c:	1004d07a 	srli	r2,r2,1
   875a0:	10c03fcc 	andi	r3,r2,255
   875a4:	e13ffe17 	ldw	r4,-8(fp)
   875a8:	e0bffa17 	ldw	r2,-24(fp)
   875ac:	10815c24 	muli	r2,r2,1392
   875b0:	2085883a 	add	r2,r4,r2
   875b4:	1080a704 	addi	r2,r2,668
   875b8:	10c00015 	stw	r3,0(r2)
                }

                break;
   875bc:	00062106 	br	88e44 <edid_decode_v14+0x40fc>
   875c0:	00062006 	br	88e44 <edid_decode_v14+0x40fc>

            case 0xfc:
            	edid->descriptors[i].tag = DTAG_PRODUCT_NAME;
   875c4:	e0fffe17 	ldw	r3,-8(fp)
   875c8:	e0bffa17 	ldw	r2,-24(fp)
   875cc:	10815c24 	muli	r2,r2,1392
   875d0:	1885883a 	add	r2,r3,r2
   875d4:	10809a04 	addi	r2,r2,616
   875d8:	00c03f04 	movi	r3,252
   875dc:	10c00015 	stw	r3,0(r2)
            	edid->descriptors[i].prod_name[18] = 0;
   875e0:	e0fffe17 	ldw	r3,-8(fp)
   875e4:	e0bffa17 	ldw	r2,-24(fp)
   875e8:	10815c24 	muli	r2,r2,1392
   875ec:	1885883a 	add	r2,r3,r2
   875f0:	10809f84 	addi	r2,r2,638
   875f4:	10000005 	stb	zero,0(r2)
            	memcpy(edid->descriptors[i].prod_name, &c[5], 18-5);
   875f8:	e0bffa17 	ldw	r2,-24(fp)
   875fc:	10815c24 	muli	r2,r2,1392
   87600:	10809b04 	addi	r2,r2,620
   87604:	e0fffe17 	ldw	r3,-8(fp)
   87608:	1887883a 	add	r3,r3,r2
   8760c:	e0bff817 	ldw	r2,-32(fp)
   87610:	10800144 	addi	r2,r2,5
   87614:	1809883a 	mov	r4,r3
   87618:	100b883a 	mov	r5,r2
   8761c:	01800344 	movi	r6,13
   87620:	008e3840 	call	8e384 <memcpy>
                for (s = 0; s < 18-5; ++s) {
   87624:	e03ffb15 	stw	zero,-20(fp)
   87628:	00001806 	br	8768c <edid_decode_v14+0x2944>
                    if (edid->descriptors[i].prod_name[s] == 0x0a) {
   8762c:	e0fffe17 	ldw	r3,-8(fp)
   87630:	e0bffa17 	ldw	r2,-24(fp)
   87634:	10815c24 	muli	r2,r2,1392
   87638:	1887883a 	add	r3,r3,r2
   8763c:	e0bffb17 	ldw	r2,-20(fp)
   87640:	1885883a 	add	r2,r3,r2
   87644:	10809b04 	addi	r2,r2,620
   87648:	10800003 	ldbu	r2,0(r2)
   8764c:	10803fcc 	andi	r2,r2,255
   87650:	1080201c 	xori	r2,r2,128
   87654:	10bfe004 	addi	r2,r2,-128
   87658:	10800298 	cmpnei	r2,r2,10
   8765c:	1000081e 	bne	r2,zero,87680 <edid_decode_v14+0x2938>
                    	edid->descriptors[i].prod_name[s] = 0;
   87660:	e0fffe17 	ldw	r3,-8(fp)
   87664:	e0bffa17 	ldw	r2,-24(fp)
   87668:	10815c24 	muli	r2,r2,1392
   8766c:	1887883a 	add	r3,r3,r2
   87670:	e0bffb17 	ldw	r2,-20(fp)
   87674:	1885883a 	add	r2,r3,r2
   87678:	10809b04 	addi	r2,r2,620
   8767c:	10000005 	stb	zero,0(r2)

            case 0xfc:
            	edid->descriptors[i].tag = DTAG_PRODUCT_NAME;
            	edid->descriptors[i].prod_name[18] = 0;
            	memcpy(edid->descriptors[i].prod_name, &c[5], 18-5);
                for (s = 0; s < 18-5; ++s) {
   87680:	e0bffb17 	ldw	r2,-20(fp)
   87684:	10800044 	addi	r2,r2,1
   87688:	e0bffb15 	stw	r2,-20(fp)
   8768c:	e0bffb17 	ldw	r2,-20(fp)
   87690:	10800350 	cmplti	r2,r2,13
   87694:	103fe51e 	bne	r2,zero,8762c <edid_decode_v14+0x28e4>
                    if (edid->descriptors[i].prod_name[s] == 0x0a) {
                    	edid->descriptors[i].prod_name[s] = 0;
                    }
                }
                break;
   87698:	0005eb06 	br	88e48 <edid_decode_v14+0x4100>

            case 0xfb:
            	edid->descriptors[i].tag = DTAG_COLOR_POINT;
   8769c:	e0fffe17 	ldw	r3,-8(fp)
   876a0:	e0bffa17 	ldw	r2,-24(fp)
   876a4:	10815c24 	muli	r2,r2,1392
   876a8:	1885883a 	add	r2,r3,r2
   876ac:	10809a04 	addi	r2,r2,616
   876b0:	00c03ec4 	movi	r3,251
   876b4:	10c00015 	stw	r3,0(r2)

				edid->descriptors[i].white_point[0].index = c[5];
   876b8:	e0bff817 	ldw	r2,-32(fp)
   876bc:	10800144 	addi	r2,r2,5
   876c0:	10800003 	ldbu	r2,0(r2)
   876c4:	10c03fcc 	andi	r3,r2,255
   876c8:	e13ffe17 	ldw	r4,-8(fp)
   876cc:	e0bffa17 	ldw	r2,-24(fp)
   876d0:	10815c24 	muli	r2,r2,1392
   876d4:	2085883a 	add	r2,r4,r2
   876d8:	10809b04 	addi	r2,r2,620
   876dc:	10c00015 	stw	r3,0(r2)
				edid->descriptors[i].white_point[0].x = ((u16)c[7] << 2) | (((u16)c[6] >> 2) & 0x3);
   876e0:	e0bff817 	ldw	r2,-32(fp)
   876e4:	108001c4 	addi	r2,r2,7
   876e8:	10800003 	ldbu	r2,0(r2)
   876ec:	10803fcc 	andi	r2,r2,255
   876f0:	1085883a 	add	r2,r2,r2
   876f4:	1085883a 	add	r2,r2,r2
   876f8:	1007883a 	mov	r3,r2
   876fc:	e0bff817 	ldw	r2,-32(fp)
   87700:	10800184 	addi	r2,r2,6
   87704:	10800003 	ldbu	r2,0(r2)
   87708:	10803fcc 	andi	r2,r2,255
   8770c:	1004d0ba 	srli	r2,r2,2
   87710:	10803fcc 	andi	r2,r2,255
   87714:	108000cc 	andi	r2,r2,3
   87718:	1886b03a 	or	r3,r3,r2
   8771c:	e13ffe17 	ldw	r4,-8(fp)
   87720:	e0bffa17 	ldw	r2,-24(fp)
   87724:	10815c24 	muli	r2,r2,1392
   87728:	2085883a 	add	r2,r4,r2
   8772c:	10809c04 	addi	r2,r2,624
   87730:	10c00015 	stw	r3,0(r2)
				edid->descriptors[i].white_point[0].y = ((u16)c[8] << 2) | ((u16)c[6] & 0x3);
   87734:	e0bff817 	ldw	r2,-32(fp)
   87738:	10800204 	addi	r2,r2,8
   8773c:	10800003 	ldbu	r2,0(r2)
   87740:	10803fcc 	andi	r2,r2,255
   87744:	1085883a 	add	r2,r2,r2
   87748:	1085883a 	add	r2,r2,r2
   8774c:	1007883a 	mov	r3,r2
   87750:	e0bff817 	ldw	r2,-32(fp)
   87754:	10800184 	addi	r2,r2,6
   87758:	10800003 	ldbu	r2,0(r2)
   8775c:	10803fcc 	andi	r2,r2,255
   87760:	108000cc 	andi	r2,r2,3
   87764:	1886b03a 	or	r3,r3,r2
   87768:	e13ffe17 	ldw	r4,-8(fp)
   8776c:	e0bffa17 	ldw	r2,-24(fp)
   87770:	10815c24 	muli	r2,r2,1392
   87774:	2085883a 	add	r2,r4,r2
   87778:	10809d04 	addi	r2,r2,628
   8777c:	10c00015 	stw	r3,0(r2)
				if (c[9] < 0xff)
   87780:	e0bff817 	ldw	r2,-32(fp)
   87784:	10800244 	addi	r2,r2,9
   87788:	10800003 	ldbu	r2,0(r2)
   8778c:	10803fcc 	andi	r2,r2,255
   87790:	10803fe0 	cmpeqi	r2,r2,255
   87794:	1000191e 	bne	r2,zero,877fc <edid_decode_v14+0x2ab4>
					edid->descriptors[i].white_point[0].gamma = ((float)c[9] + 100.0f) * 0.01f;
   87798:	e0bff817 	ldw	r2,-32(fp)
   8779c:	10800244 	addi	r2,r2,9
   877a0:	10800003 	ldbu	r2,0(r2)
   877a4:	10803fcc 	andi	r2,r2,255
   877a8:	1009883a 	mov	r4,r2
   877ac:	008cd0c0 	call	8cd0c <__floatunsisf>
   877b0:	1007883a 	mov	r3,r2
   877b4:	1809883a 	mov	r4,r3
   877b8:	0150b234 	movhi	r5,17096
   877bc:	008c9580 	call	8c958 <__addsf3>
   877c0:	1007883a 	mov	r3,r2
   877c4:	1805883a 	mov	r2,r3
   877c8:	1009883a 	mov	r4,r2
   877cc:	014f0934 	movhi	r5,15396
   877d0:	2975c284 	addi	r5,r5,-10486
   877d4:	008c9fc0 	call	8c9fc <__mulsf3>
   877d8:	1009883a 	mov	r4,r2
   877dc:	2007883a 	mov	r3,r4
   877e0:	e13ffe17 	ldw	r4,-8(fp)
   877e4:	e0bffa17 	ldw	r2,-24(fp)
   877e8:	10815c24 	muli	r2,r2,1392
   877ec:	2085883a 	add	r2,r4,r2
   877f0:	10809e04 	addi	r2,r2,632
   877f4:	10c00015 	stw	r3,0(r2)
   877f8:	00000606 	br	87814 <edid_decode_v14+0x2acc>
				else
					edid->descriptors[i].white_point[0].gamma = 0.0f;
   877fc:	e0fffe17 	ldw	r3,-8(fp)
   87800:	e0bffa17 	ldw	r2,-24(fp)
   87804:	10815c24 	muli	r2,r2,1392
   87808:	1885883a 	add	r2,r3,r2
   8780c:	10809e04 	addi	r2,r2,632
   87810:	10000015 	stw	zero,0(r2)

				edid->descriptors[i].white_point[1].index = c[10];
   87814:	e0bff817 	ldw	r2,-32(fp)
   87818:	10800284 	addi	r2,r2,10
   8781c:	10800003 	ldbu	r2,0(r2)
   87820:	10c03fcc 	andi	r3,r2,255
   87824:	e13ffe17 	ldw	r4,-8(fp)
   87828:	e0bffa17 	ldw	r2,-24(fp)
   8782c:	10815c24 	muli	r2,r2,1392
   87830:	2085883a 	add	r2,r4,r2
   87834:	10809f04 	addi	r2,r2,636
   87838:	10c00015 	stw	r3,0(r2)
				edid->descriptors[i].white_point[1].x = ((u16)c[12] << 2) | (((u16)c[11] >> 2) & 0x3);
   8783c:	e0bff817 	ldw	r2,-32(fp)
   87840:	10800304 	addi	r2,r2,12
   87844:	10800003 	ldbu	r2,0(r2)
   87848:	10803fcc 	andi	r2,r2,255
   8784c:	1085883a 	add	r2,r2,r2
   87850:	1085883a 	add	r2,r2,r2
   87854:	1007883a 	mov	r3,r2
   87858:	e0bff817 	ldw	r2,-32(fp)
   8785c:	108002c4 	addi	r2,r2,11
   87860:	10800003 	ldbu	r2,0(r2)
   87864:	10803fcc 	andi	r2,r2,255
   87868:	1004d0ba 	srli	r2,r2,2
   8786c:	10803fcc 	andi	r2,r2,255
   87870:	108000cc 	andi	r2,r2,3
   87874:	1886b03a 	or	r3,r3,r2
   87878:	e13ffe17 	ldw	r4,-8(fp)
   8787c:	e0bffa17 	ldw	r2,-24(fp)
   87880:	10815c24 	muli	r2,r2,1392
   87884:	2085883a 	add	r2,r4,r2
   87888:	1080a004 	addi	r2,r2,640
   8788c:	10c00015 	stw	r3,0(r2)
				edid->descriptors[i].white_point[1].y = ((u16)c[13] << 2) | ((u16)c[11] & 0x3);
   87890:	e0bff817 	ldw	r2,-32(fp)
   87894:	10800344 	addi	r2,r2,13
   87898:	10800003 	ldbu	r2,0(r2)
   8789c:	10803fcc 	andi	r2,r2,255
   878a0:	1085883a 	add	r2,r2,r2
   878a4:	1085883a 	add	r2,r2,r2
   878a8:	1007883a 	mov	r3,r2
   878ac:	e0bff817 	ldw	r2,-32(fp)
   878b0:	108002c4 	addi	r2,r2,11
   878b4:	10800003 	ldbu	r2,0(r2)
   878b8:	10803fcc 	andi	r2,r2,255
   878bc:	108000cc 	andi	r2,r2,3
   878c0:	1886b03a 	or	r3,r3,r2
   878c4:	e13ffe17 	ldw	r4,-8(fp)
   878c8:	e0bffa17 	ldw	r2,-24(fp)
   878cc:	10815c24 	muli	r2,r2,1392
   878d0:	2085883a 	add	r2,r4,r2
   878d4:	1080a104 	addi	r2,r2,644
   878d8:	10c00015 	stw	r3,0(r2)
				if (c[14] < 0xff)
   878dc:	e0bff817 	ldw	r2,-32(fp)
   878e0:	10800384 	addi	r2,r2,14
   878e4:	10800003 	ldbu	r2,0(r2)
   878e8:	10803fcc 	andi	r2,r2,255
   878ec:	10803fe0 	cmpeqi	r2,r2,255
   878f0:	1000191e 	bne	r2,zero,87958 <edid_decode_v14+0x2c10>
					edid->descriptors[i].white_point[1].gamma = ((float)c[14] + 100.0f) * 0.01f;
   878f4:	e0bff817 	ldw	r2,-32(fp)
   878f8:	10800384 	addi	r2,r2,14
   878fc:	10800003 	ldbu	r2,0(r2)
   87900:	10803fcc 	andi	r2,r2,255
   87904:	1009883a 	mov	r4,r2
   87908:	008cd0c0 	call	8cd0c <__floatunsisf>
   8790c:	1007883a 	mov	r3,r2
   87910:	1809883a 	mov	r4,r3
   87914:	0150b234 	movhi	r5,17096
   87918:	008c9580 	call	8c958 <__addsf3>
   8791c:	1007883a 	mov	r3,r2
   87920:	1805883a 	mov	r2,r3
   87924:	1009883a 	mov	r4,r2
   87928:	014f0934 	movhi	r5,15396
   8792c:	2975c284 	addi	r5,r5,-10486
   87930:	008c9fc0 	call	8c9fc <__mulsf3>
   87934:	1009883a 	mov	r4,r2
   87938:	2007883a 	mov	r3,r4
   8793c:	e13ffe17 	ldw	r4,-8(fp)
   87940:	e0bffa17 	ldw	r2,-24(fp)
   87944:	10815c24 	muli	r2,r2,1392
   87948:	2085883a 	add	r2,r4,r2
   8794c:	1080a204 	addi	r2,r2,648
   87950:	10c00015 	stw	r3,0(r2)
				else
					edid->descriptors[i].white_point[1].gamma = 0.0f;

                break;
   87954:	00053c06 	br	88e48 <edid_decode_v14+0x4100>
				edid->descriptors[i].white_point[1].x = ((u16)c[12] << 2) | (((u16)c[11] >> 2) & 0x3);
				edid->descriptors[i].white_point[1].y = ((u16)c[13] << 2) | ((u16)c[11] & 0x3);
				if (c[14] < 0xff)
					edid->descriptors[i].white_point[1].gamma = ((float)c[14] + 100.0f) * 0.01f;
				else
					edid->descriptors[i].white_point[1].gamma = 0.0f;
   87958:	e0fffe17 	ldw	r3,-8(fp)
   8795c:	e0bffa17 	ldw	r2,-24(fp)
   87960:	10815c24 	muli	r2,r2,1392
   87964:	1885883a 	add	r2,r3,r2
   87968:	1080a204 	addi	r2,r2,648
   8796c:	10000015 	stw	zero,0(r2)

                break;
   87970:	00053506 	br	88e48 <edid_decode_v14+0x4100>

            case 0xfa:
            	edid->descriptors[i].tag = DTAG_STANDARD_TIMING;
   87974:	e0fffe17 	ldw	r3,-8(fp)
   87978:	e0bffa17 	ldw	r2,-24(fp)
   8797c:	10815c24 	muli	r2,r2,1392
   87980:	1885883a 	add	r2,r3,r2
   87984:	10809a04 	addi	r2,r2,616
   87988:	00c03e84 	movi	r3,250
   8798c:	10c00015 	stw	r3,0(r2)

                for (s = 0; s < 6; ++s) {
   87990:	e03ffb15 	stw	zero,-20(fp)
   87994:	00006906 	br	87b3c <edid_decode_v14+0x2df4>
            		u8 *d = (u8 *)&c[5 + 2 * s];
   87998:	e0bffb17 	ldw	r2,-20(fp)
   8799c:	1085883a 	add	r2,r2,r2
   879a0:	10800144 	addi	r2,r2,5
   879a4:	e0fff817 	ldw	r3,-32(fp)
   879a8:	1885883a 	add	r2,r3,r2
   879ac:	e0bffc15 	stw	r2,-16(fp)

            		if (*d == 0)
   879b0:	e0bffc17 	ldw	r2,-16(fp)
   879b4:	10800003 	ldbu	r2,0(r2)
   879b8:	10803fcc 	andi	r2,r2,255
   879bc:	10005b26 	beq	r2,zero,87b2c <edid_decode_v14+0x2de4>
                    	continue;

            		edid->descriptors[i].extra_standard_timings[s].horizontal = (d[0] + 31) * 8;
   879c0:	e0bffc17 	ldw	r2,-16(fp)
   879c4:	10800003 	ldbu	r2,0(r2)
   879c8:	10803fcc 	andi	r2,r2,255
   879cc:	108007c4 	addi	r2,r2,31
   879d0:	100690fa 	slli	r3,r2,3
   879d4:	e13ffe17 	ldw	r4,-8(fp)
   879d8:	e17ffb17 	ldw	r5,-20(fp)
   879dc:	e0bffa17 	ldw	r2,-24(fp)
   879e0:	29400324 	muli	r5,r5,12
   879e4:	10815c24 	muli	r2,r2,1392
   879e8:	2885883a 	add	r2,r5,r2
   879ec:	2085883a 	add	r2,r4,r2
   879f0:	1080ac04 	addi	r2,r2,688
   879f4:	10c00015 	stw	r3,0(r2)

            		switch ((d[1] >> 6) & 0x3) {
   879f8:	e0bffc17 	ldw	r2,-16(fp)
   879fc:	10800044 	addi	r2,r2,1
   87a00:	10800003 	ldbu	r2,0(r2)
   87a04:	10803fcc 	andi	r2,r2,255
   87a08:	1004d1ba 	srli	r2,r2,6
   87a0c:	10803fcc 	andi	r2,r2,255
   87a10:	108000cc 	andi	r2,r2,3
   87a14:	10c00060 	cmpeqi	r3,r2,1
   87a18:	1800131e 	bne	r3,zero,87a68 <edid_decode_v14+0x2d20>
   87a1c:	10c00088 	cmpgei	r3,r2,2
   87a20:	1800021e 	bne	r3,zero,87a2c <edid_decode_v14+0x2ce4>
   87a24:	10000626 	beq	r2,zero,87a40 <edid_decode_v14+0x2cf8>
   87a28:	00003006 	br	87aec <edid_decode_v14+0x2da4>
   87a2c:	10c000a0 	cmpeqi	r3,r2,2
   87a30:	1800181e 	bne	r3,zero,87a94 <edid_decode_v14+0x2d4c>
   87a34:	108000e0 	cmpeqi	r2,r2,3
   87a38:	1000211e 	bne	r2,zero,87ac0 <edid_decode_v14+0x2d78>
   87a3c:	00002b06 	br	87aec <edid_decode_v14+0x2da4>
            		case 0:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_16_10;
   87a40:	e0fffe17 	ldw	r3,-8(fp)
   87a44:	e13ffb17 	ldw	r4,-20(fp)
   87a48:	e0bffa17 	ldw	r2,-24(fp)
   87a4c:	21000324 	muli	r4,r4,12
   87a50:	10815c24 	muli	r2,r2,1392
   87a54:	2085883a 	add	r2,r4,r2
   87a58:	1885883a 	add	r2,r3,r2
   87a5c:	1080ad04 	addi	r2,r2,692
   87a60:	10000015 	stw	zero,0(r2)
            			break;
   87a64:	00002106 	br	87aec <edid_decode_v14+0x2da4>
            		case 1:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_4_3;
   87a68:	e0fffe17 	ldw	r3,-8(fp)
   87a6c:	e13ffb17 	ldw	r4,-20(fp)
   87a70:	e0bffa17 	ldw	r2,-24(fp)
   87a74:	21000324 	muli	r4,r4,12
   87a78:	10815c24 	muli	r2,r2,1392
   87a7c:	2085883a 	add	r2,r4,r2
   87a80:	1885883a 	add	r2,r3,r2
   87a84:	1080ad04 	addi	r2,r2,692
   87a88:	00c00044 	movi	r3,1
   87a8c:	10c00015 	stw	r3,0(r2)
            			break;
   87a90:	00001606 	br	87aec <edid_decode_v14+0x2da4>
            		case 2:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_5_4;
   87a94:	e0fffe17 	ldw	r3,-8(fp)
   87a98:	e13ffb17 	ldw	r4,-20(fp)
   87a9c:	e0bffa17 	ldw	r2,-24(fp)
   87aa0:	21000324 	muli	r4,r4,12
   87aa4:	10815c24 	muli	r2,r2,1392
   87aa8:	2085883a 	add	r2,r4,r2
   87aac:	1885883a 	add	r2,r3,r2
   87ab0:	1080ad04 	addi	r2,r2,692
   87ab4:	00c00084 	movi	r3,2
   87ab8:	10c00015 	stw	r3,0(r2)
            			break;
   87abc:	00000b06 	br	87aec <edid_decode_v14+0x2da4>
            		case 3:
            			edid->descriptors[i].extra_standard_timings[s].aspect_ratio = ST_AR_16_9;
   87ac0:	e0fffe17 	ldw	r3,-8(fp)
   87ac4:	e13ffb17 	ldw	r4,-20(fp)
   87ac8:	e0bffa17 	ldw	r2,-24(fp)
   87acc:	21000324 	muli	r4,r4,12
   87ad0:	10815c24 	muli	r2,r2,1392
   87ad4:	2085883a 	add	r2,r4,r2
   87ad8:	1885883a 	add	r2,r3,r2
   87adc:	1080ad04 	addi	r2,r2,692
   87ae0:	00c000c4 	movi	r3,3
   87ae4:	10c00015 	stw	r3,0(r2)
            			break;
   87ae8:	0001883a 	nop
            		}

            		edid->descriptors[i].extra_standard_timings[s].refresh_rate = (d[1] & 0x3f) + 60;
   87aec:	e0bffc17 	ldw	r2,-16(fp)
   87af0:	10800044 	addi	r2,r2,1
   87af4:	10800003 	ldbu	r2,0(r2)
   87af8:	10803fcc 	andi	r2,r2,255
   87afc:	10800fcc 	andi	r2,r2,63
   87b00:	10c00f04 	addi	r3,r2,60
   87b04:	e13ffe17 	ldw	r4,-8(fp)
   87b08:	e17ffb17 	ldw	r5,-20(fp)
   87b0c:	e0bffa17 	ldw	r2,-24(fp)
   87b10:	29400324 	muli	r5,r5,12
   87b14:	10815c24 	muli	r2,r2,1392
   87b18:	2885883a 	add	r2,r5,r2
   87b1c:	2085883a 	add	r2,r4,r2
   87b20:	1080ae04 	addi	r2,r2,696
   87b24:	10c00015 	stw	r3,0(r2)
   87b28:	00000106 	br	87b30 <edid_decode_v14+0x2de8>

                for (s = 0; s < 6; ++s) {
            		u8 *d = (u8 *)&c[5 + 2 * s];

            		if (*d == 0)
                    	continue;
   87b2c:	0001883a 	nop
                break;

            case 0xfa:
            	edid->descriptors[i].tag = DTAG_STANDARD_TIMING;

                for (s = 0; s < 6; ++s) {
   87b30:	e0bffb17 	ldw	r2,-20(fp)
   87b34:	10800044 	addi	r2,r2,1
   87b38:	e0bffb15 	stw	r2,-20(fp)
   87b3c:	e0bffb17 	ldw	r2,-20(fp)
   87b40:	10800190 	cmplti	r2,r2,6
   87b44:	103f941e 	bne	r2,zero,87998 <edid_decode_v14+0x2c50>
            		}

            		edid->descriptors[i].extra_standard_timings[s].refresh_rate = (d[1] & 0x3f) + 60;
                }

                break;
   87b48:	0004bf06 	br	88e48 <edid_decode_v14+0x4100>

            case 0xf9:
            	// display color management data
            	edid->descriptors[i].tag = DTAG_DCM_DATA;
   87b4c:	e0fffe17 	ldw	r3,-8(fp)
   87b50:	e0bffa17 	ldw	r2,-24(fp)
   87b54:	10815c24 	muli	r2,r2,1392
   87b58:	1885883a 	add	r2,r3,r2
   87b5c:	10809a04 	addi	r2,r2,616
   87b60:	00c03e44 	movi	r3,249
   87b64:	10c00015 	stw	r3,0(r2)

            	edid->descriptors[i].dcm.ver = c[5];
   87b68:	e0bff817 	ldw	r2,-32(fp)
   87b6c:	10800144 	addi	r2,r2,5
   87b70:	10800003 	ldbu	r2,0(r2)
   87b74:	10c03fcc 	andi	r3,r2,255
   87b78:	e13ffe17 	ldw	r4,-8(fp)
   87b7c:	e0bffa17 	ldw	r2,-24(fp)
   87b80:	10815c24 	muli	r2,r2,1392
   87b84:	2085883a 	add	r2,r4,r2
   87b88:	1080be04 	addi	r2,r2,760
   87b8c:	10c00015 	stw	r3,0(r2)
            	edid->descriptors[i].dcm.r_a2 = ((u32)c[9] << 8) | (u32)c[8];
   87b90:	e0bff817 	ldw	r2,-32(fp)
   87b94:	10800244 	addi	r2,r2,9
   87b98:	10800003 	ldbu	r2,0(r2)
   87b9c:	10803fcc 	andi	r2,r2,255
   87ba0:	1006923a 	slli	r3,r2,8
   87ba4:	e0bff817 	ldw	r2,-32(fp)
   87ba8:	10800204 	addi	r2,r2,8
   87bac:	10800003 	ldbu	r2,0(r2)
   87bb0:	10803fcc 	andi	r2,r2,255
   87bb4:	1884b03a 	or	r2,r3,r2
   87bb8:	1007883a 	mov	r3,r2
   87bbc:	e13ffe17 	ldw	r4,-8(fp)
   87bc0:	e0bffa17 	ldw	r2,-24(fp)
   87bc4:	10815c24 	muli	r2,r2,1392
   87bc8:	2085883a 	add	r2,r4,r2
   87bcc:	1080bf04 	addi	r2,r2,764
   87bd0:	10c00015 	stw	r3,0(r2)
            	edid->descriptors[i].dcm.r_a3 = ((u32)c[7] << 8) | (u32)c[6];
   87bd4:	e0bff817 	ldw	r2,-32(fp)
   87bd8:	108001c4 	addi	r2,r2,7
   87bdc:	10800003 	ldbu	r2,0(r2)
   87be0:	10803fcc 	andi	r2,r2,255
   87be4:	1006923a 	slli	r3,r2,8
   87be8:	e0bff817 	ldw	r2,-32(fp)
   87bec:	10800184 	addi	r2,r2,6
   87bf0:	10800003 	ldbu	r2,0(r2)
   87bf4:	10803fcc 	andi	r2,r2,255
   87bf8:	1884b03a 	or	r2,r3,r2
   87bfc:	1007883a 	mov	r3,r2
   87c00:	e13ffe17 	ldw	r4,-8(fp)
   87c04:	e0bffa17 	ldw	r2,-24(fp)
   87c08:	10815c24 	muli	r2,r2,1392
   87c0c:	2085883a 	add	r2,r4,r2
   87c10:	1080c004 	addi	r2,r2,768
   87c14:	10c00015 	stw	r3,0(r2)
            	edid->descriptors[i].dcm.g_a2 = ((u32)c[13] << 8) | (u32)c[12];
   87c18:	e0bff817 	ldw	r2,-32(fp)
   87c1c:	10800344 	addi	r2,r2,13
   87c20:	10800003 	ldbu	r2,0(r2)
   87c24:	10803fcc 	andi	r2,r2,255
   87c28:	1006923a 	slli	r3,r2,8
   87c2c:	e0bff817 	ldw	r2,-32(fp)
   87c30:	10800304 	addi	r2,r2,12
   87c34:	10800003 	ldbu	r2,0(r2)
   87c38:	10803fcc 	andi	r2,r2,255
   87c3c:	1884b03a 	or	r2,r3,r2
   87c40:	1007883a 	mov	r3,r2
   87c44:	e13ffe17 	ldw	r4,-8(fp)
   87c48:	e0bffa17 	ldw	r2,-24(fp)
   87c4c:	10815c24 	muli	r2,r2,1392
   87c50:	2085883a 	add	r2,r4,r2
   87c54:	1080c104 	addi	r2,r2,772
   87c58:	10c00015 	stw	r3,0(r2)
            	edid->descriptors[i].dcm.g_a3 = ((u32)c[11] << 8) | (u32)c[10];
   87c5c:	e0bff817 	ldw	r2,-32(fp)
   87c60:	108002c4 	addi	r2,r2,11
   87c64:	10800003 	ldbu	r2,0(r2)
   87c68:	10803fcc 	andi	r2,r2,255
   87c6c:	1006923a 	slli	r3,r2,8
   87c70:	e0bff817 	ldw	r2,-32(fp)
   87c74:	10800284 	addi	r2,r2,10
   87c78:	10800003 	ldbu	r2,0(r2)
   87c7c:	10803fcc 	andi	r2,r2,255
   87c80:	1884b03a 	or	r2,r3,r2
   87c84:	1007883a 	mov	r3,r2
   87c88:	e13ffe17 	ldw	r4,-8(fp)
   87c8c:	e0bffa17 	ldw	r2,-24(fp)
   87c90:	10815c24 	muli	r2,r2,1392
   87c94:	2085883a 	add	r2,r4,r2
   87c98:	1080c204 	addi	r2,r2,776
   87c9c:	10c00015 	stw	r3,0(r2)
            	edid->descriptors[i].dcm.b_a2 = ((u32)c[17] << 8) | (u32)c[16];
   87ca0:	e0bff817 	ldw	r2,-32(fp)
   87ca4:	10800444 	addi	r2,r2,17
   87ca8:	10800003 	ldbu	r2,0(r2)
   87cac:	10803fcc 	andi	r2,r2,255
   87cb0:	1006923a 	slli	r3,r2,8
   87cb4:	e0bff817 	ldw	r2,-32(fp)
   87cb8:	10800404 	addi	r2,r2,16
   87cbc:	10800003 	ldbu	r2,0(r2)
   87cc0:	10803fcc 	andi	r2,r2,255
   87cc4:	1884b03a 	or	r2,r3,r2
   87cc8:	1007883a 	mov	r3,r2
   87ccc:	e13ffe17 	ldw	r4,-8(fp)
   87cd0:	e0bffa17 	ldw	r2,-24(fp)
   87cd4:	10815c24 	muli	r2,r2,1392
   87cd8:	2085883a 	add	r2,r4,r2
   87cdc:	1080c304 	addi	r2,r2,780
   87ce0:	10c00015 	stw	r3,0(r2)
            	edid->descriptors[i].dcm.b_a3 = ((u32)c[15] << 8) | (u32)c[14];
   87ce4:	e0bff817 	ldw	r2,-32(fp)
   87ce8:	108003c4 	addi	r2,r2,15
   87cec:	10800003 	ldbu	r2,0(r2)
   87cf0:	10803fcc 	andi	r2,r2,255
   87cf4:	1006923a 	slli	r3,r2,8
   87cf8:	e0bff817 	ldw	r2,-32(fp)
   87cfc:	10800384 	addi	r2,r2,14
   87d00:	10800003 	ldbu	r2,0(r2)
   87d04:	10803fcc 	andi	r2,r2,255
   87d08:	1884b03a 	or	r2,r3,r2
   87d0c:	1007883a 	mov	r3,r2
   87d10:	e13ffe17 	ldw	r4,-8(fp)
   87d14:	e0bffa17 	ldw	r2,-24(fp)
   87d18:	10815c24 	muli	r2,r2,1392
   87d1c:	2085883a 	add	r2,r4,r2
   87d20:	1080c404 	addi	r2,r2,784
   87d24:	10c00015 	stw	r3,0(r2)

            	break;
   87d28:	00044706 	br	88e48 <edid_decode_v14+0x4100>

            case 0xf8:
            	edid->descriptors[i].tag = DTAG_CVT_TIMING;
   87d2c:	e0fffe17 	ldw	r3,-8(fp)
   87d30:	e0bffa17 	ldw	r2,-24(fp)
   87d34:	10815c24 	muli	r2,r2,1392
   87d38:	1885883a 	add	r2,r3,r2
   87d3c:	10809a04 	addi	r2,r2,616
   87d40:	00c03e04 	movi	r3,248
   87d44:	10c00015 	stw	r3,0(r2)

                for (s = 0; s < 4; ++s) {
   87d48:	e03ffb15 	stw	zero,-20(fp)
   87d4c:	00016606 	br	882e8 <edid_decode_v14+0x35a0>
                	u8 *d = (u8 *)&c[6 + s * 3];
   87d50:	e0fffb17 	ldw	r3,-20(fp)
   87d54:	1805883a 	mov	r2,r3
   87d58:	1085883a 	add	r2,r2,r2
   87d5c:	10c5883a 	add	r2,r2,r3
   87d60:	10800184 	addi	r2,r2,6
   87d64:	e0fff817 	ldw	r3,-32(fp)
   87d68:	1885883a 	add	r2,r3,r2
   87d6c:	e0bffd15 	stw	r2,-12(fp)

                	edid->descriptors[i].cvt[s].lines = (((u32)d[1] & 0xf0) << 4) | (u32)d[0];
   87d70:	e0bffd17 	ldw	r2,-12(fp)
   87d74:	10800044 	addi	r2,r2,1
   87d78:	10800003 	ldbu	r2,0(r2)
   87d7c:	10803fcc 	andi	r2,r2,255
   87d80:	10803c0c 	andi	r2,r2,240
   87d84:	1006913a 	slli	r3,r2,4
   87d88:	e0bffd17 	ldw	r2,-12(fp)
   87d8c:	10800003 	ldbu	r2,0(r2)
   87d90:	10803fcc 	andi	r2,r2,255
   87d94:	1884b03a 	or	r2,r3,r2
   87d98:	1007883a 	mov	r3,r2
   87d9c:	e13ffe17 	ldw	r4,-8(fp)
   87da0:	e0bffa17 	ldw	r2,-24(fp)
   87da4:	114015e4 	muli	r5,r2,87
   87da8:	e0bffb17 	ldw	r2,-20(fp)
   87dac:	2885883a 	add	r2,r5,r2
   87db0:	108002c4 	addi	r2,r2,11
   87db4:	1004913a 	slli	r2,r2,4
   87db8:	2085883a 	add	r2,r4,r2
   87dbc:	10809904 	addi	r2,r2,612
   87dc0:	10c00015 	stw	r3,0(r2)

                	switch (d[1] & 0x0c) {
   87dc4:	e0bffd17 	ldw	r2,-12(fp)
   87dc8:	10800044 	addi	r2,r2,1
   87dcc:	10800003 	ldbu	r2,0(r2)
   87dd0:	10803fcc 	andi	r2,r2,255
   87dd4:	1080030c 	andi	r2,r2,12
   87dd8:	10c00120 	cmpeqi	r3,r2,4
   87ddc:	18001d1e 	bne	r3,zero,87e54 <edid_decode_v14+0x310c>
   87de0:	10c00148 	cmpgei	r3,r2,5
   87de4:	1800021e 	bne	r3,zero,87df0 <edid_decode_v14+0x30a8>
   87de8:	10000626 	beq	r2,zero,87e04 <edid_decode_v14+0x30bc>
   87dec:	00005506 	br	87f44 <edid_decode_v14+0x31fc>
   87df0:	10c00220 	cmpeqi	r3,r2,8
   87df4:	18002b1e 	bne	r3,zero,87ea4 <edid_decode_v14+0x315c>
   87df8:	10800320 	cmpeqi	r2,r2,12
   87dfc:	10003d1e 	bne	r2,zero,87ef4 <edid_decode_v14+0x31ac>
   87e00:	00005006 	br	87f44 <edid_decode_v14+0x31fc>
                    case 0x00:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_4_3;
   87e04:	e0fffe17 	ldw	r3,-8(fp)
   87e08:	e0bffa17 	ldw	r2,-24(fp)
   87e0c:	110015e4 	muli	r4,r2,87
   87e10:	e0bffb17 	ldw	r2,-20(fp)
   87e14:	2085883a 	add	r2,r4,r2
   87e18:	1004913a 	slli	r2,r2,4
   87e1c:	1885883a 	add	r2,r3,r2
   87e20:	1080c604 	addi	r2,r2,792
   87e24:	10800017 	ldw	r2,0(r2)
   87e28:	10c00054 	ori	r3,r2,1
   87e2c:	e13ffe17 	ldw	r4,-8(fp)
   87e30:	e0bffa17 	ldw	r2,-24(fp)
   87e34:	114015e4 	muli	r5,r2,87
   87e38:	e0bffb17 	ldw	r2,-20(fp)
   87e3c:	2885883a 	add	r2,r5,r2
   87e40:	1004913a 	slli	r2,r2,4
   87e44:	2085883a 	add	r2,r4,r2
   87e48:	1080c604 	addi	r2,r2,792
   87e4c:	10c00015 	stw	r3,0(r2)
                        break;
   87e50:	00003c06 	br	87f44 <edid_decode_v14+0x31fc>
                    case 0x04:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_16_9;
   87e54:	e0fffe17 	ldw	r3,-8(fp)
   87e58:	e0bffa17 	ldw	r2,-24(fp)
   87e5c:	110015e4 	muli	r4,r2,87
   87e60:	e0bffb17 	ldw	r2,-20(fp)
   87e64:	2085883a 	add	r2,r4,r2
   87e68:	1004913a 	slli	r2,r2,4
   87e6c:	1885883a 	add	r2,r3,r2
   87e70:	1080c604 	addi	r2,r2,792
   87e74:	10800017 	ldw	r2,0(r2)
   87e78:	10c00094 	ori	r3,r2,2
   87e7c:	e13ffe17 	ldw	r4,-8(fp)
   87e80:	e0bffa17 	ldw	r2,-24(fp)
   87e84:	114015e4 	muli	r5,r2,87
   87e88:	e0bffb17 	ldw	r2,-20(fp)
   87e8c:	2885883a 	add	r2,r5,r2
   87e90:	1004913a 	slli	r2,r2,4
   87e94:	2085883a 	add	r2,r4,r2
   87e98:	1080c604 	addi	r2,r2,792
   87e9c:	10c00015 	stw	r3,0(r2)
                        break;
   87ea0:	00002806 	br	87f44 <edid_decode_v14+0x31fc>
                    case 0x08:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_16_10;
   87ea4:	e0fffe17 	ldw	r3,-8(fp)
   87ea8:	e0bffa17 	ldw	r2,-24(fp)
   87eac:	110015e4 	muli	r4,r2,87
   87eb0:	e0bffb17 	ldw	r2,-20(fp)
   87eb4:	2085883a 	add	r2,r4,r2
   87eb8:	1004913a 	slli	r2,r2,4
   87ebc:	1885883a 	add	r2,r3,r2
   87ec0:	1080c604 	addi	r2,r2,792
   87ec4:	10800017 	ldw	r2,0(r2)
   87ec8:	10c00114 	ori	r3,r2,4
   87ecc:	e13ffe17 	ldw	r4,-8(fp)
   87ed0:	e0bffa17 	ldw	r2,-24(fp)
   87ed4:	114015e4 	muli	r5,r2,87
   87ed8:	e0bffb17 	ldw	r2,-20(fp)
   87edc:	2885883a 	add	r2,r5,r2
   87ee0:	1004913a 	slli	r2,r2,4
   87ee4:	2085883a 	add	r2,r4,r2
   87ee8:	1080c604 	addi	r2,r2,792
   87eec:	10c00015 	stw	r3,0(r2)
                        break;
   87ef0:	00001406 	br	87f44 <edid_decode_v14+0x31fc>
                    case 0x0c:
                    	edid->descriptors[i].cvt[s].aspect |= CVT_AR_15_9;
   87ef4:	e0fffe17 	ldw	r3,-8(fp)
   87ef8:	e0bffa17 	ldw	r2,-24(fp)
   87efc:	110015e4 	muli	r4,r2,87
   87f00:	e0bffb17 	ldw	r2,-20(fp)
   87f04:	2085883a 	add	r2,r4,r2
   87f08:	1004913a 	slli	r2,r2,4
   87f0c:	1885883a 	add	r2,r3,r2
   87f10:	1080c604 	addi	r2,r2,792
   87f14:	10800017 	ldw	r2,0(r2)
   87f18:	10c00414 	ori	r3,r2,16
   87f1c:	e13ffe17 	ldw	r4,-8(fp)
   87f20:	e0bffa17 	ldw	r2,-24(fp)
   87f24:	114015e4 	muli	r5,r2,87
   87f28:	e0bffb17 	ldw	r2,-20(fp)
   87f2c:	2885883a 	add	r2,r5,r2
   87f30:	1004913a 	slli	r2,r2,4
   87f34:	2085883a 	add	r2,r4,r2
   87f38:	1080c604 	addi	r2,r2,792
   87f3c:	10c00015 	stw	r3,0(r2)
                        break;
   87f40:	0001883a 	nop
                    }

                	switch (d[2] & 0x60) {
   87f44:	e0bffd17 	ldw	r2,-12(fp)
   87f48:	10800084 	addi	r2,r2,2
   87f4c:	10800003 	ldbu	r2,0(r2)
   87f50:	10803fcc 	andi	r2,r2,255
   87f54:	1080180c 	andi	r2,r2,96
   87f58:	10c01020 	cmpeqi	r3,r2,64
   87f5c:	1800311e 	bne	r3,zero,88024 <edid_decode_v14+0x32dc>
   87f60:	10c01048 	cmpgei	r3,r2,65
   87f64:	1800041e 	bne	r3,zero,87f78 <edid_decode_v14+0x3230>
   87f68:	10000626 	beq	r2,zero,87f84 <edid_decode_v14+0x323c>
   87f6c:	10800820 	cmpeqi	r2,r2,32
   87f70:	1000181e 	bne	r2,zero,87fd4 <edid_decode_v14+0x328c>
   87f74:	00005306 	br	880c4 <edid_decode_v14+0x337c>
   87f78:	10801820 	cmpeqi	r2,r2,96
   87f7c:	10003d1e 	bne	r2,zero,88074 <edid_decode_v14+0x332c>
   87f80:	00005006 	br	880c4 <edid_decode_v14+0x337c>
                    case 0x00:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_50HZ;
   87f84:	e0fffe17 	ldw	r3,-8(fp)
   87f88:	e0bffa17 	ldw	r2,-24(fp)
   87f8c:	110015e4 	muli	r4,r2,87
   87f90:	e0bffb17 	ldw	r2,-20(fp)
   87f94:	2085883a 	add	r2,r4,r2
   87f98:	1004913a 	slli	r2,r2,4
   87f9c:	1885883a 	add	r2,r3,r2
   87fa0:	1080c704 	addi	r2,r2,796
   87fa4:	10800017 	ldw	r2,0(r2)
   87fa8:	10c04014 	ori	r3,r2,256
   87fac:	e13ffe17 	ldw	r4,-8(fp)
   87fb0:	e0bffa17 	ldw	r2,-24(fp)
   87fb4:	114015e4 	muli	r5,r2,87
   87fb8:	e0bffb17 	ldw	r2,-20(fp)
   87fbc:	2885883a 	add	r2,r5,r2
   87fc0:	1004913a 	slli	r2,r2,4
   87fc4:	2085883a 	add	r2,r4,r2
   87fc8:	1080c704 	addi	r2,r2,796
   87fcc:	10c00015 	stw	r3,0(r2)
                        break;
   87fd0:	00003c06 	br	880c4 <edid_decode_v14+0x337c>
                    case 0x20:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_60HZ;
   87fd4:	e0fffe17 	ldw	r3,-8(fp)
   87fd8:	e0bffa17 	ldw	r2,-24(fp)
   87fdc:	110015e4 	muli	r4,r2,87
   87fe0:	e0bffb17 	ldw	r2,-20(fp)
   87fe4:	2085883a 	add	r2,r4,r2
   87fe8:	1004913a 	slli	r2,r2,4
   87fec:	1885883a 	add	r2,r3,r2
   87ff0:	1080c704 	addi	r2,r2,796
   87ff4:	10800017 	ldw	r2,0(r2)
   87ff8:	10c08014 	ori	r3,r2,512
   87ffc:	e13ffe17 	ldw	r4,-8(fp)
   88000:	e0bffa17 	ldw	r2,-24(fp)
   88004:	114015e4 	muli	r5,r2,87
   88008:	e0bffb17 	ldw	r2,-20(fp)
   8800c:	2885883a 	add	r2,r5,r2
   88010:	1004913a 	slli	r2,r2,4
   88014:	2085883a 	add	r2,r4,r2
   88018:	1080c704 	addi	r2,r2,796
   8801c:	10c00015 	stw	r3,0(r2)
                        break;
   88020:	00002806 	br	880c4 <edid_decode_v14+0x337c>
                    case 0x40:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_75HZ;
   88024:	e0fffe17 	ldw	r3,-8(fp)
   88028:	e0bffa17 	ldw	r2,-24(fp)
   8802c:	110015e4 	muli	r4,r2,87
   88030:	e0bffb17 	ldw	r2,-20(fp)
   88034:	2085883a 	add	r2,r4,r2
   88038:	1004913a 	slli	r2,r2,4
   8803c:	1885883a 	add	r2,r3,r2
   88040:	1080c704 	addi	r2,r2,796
   88044:	10800017 	ldw	r2,0(r2)
   88048:	10c10014 	ori	r3,r2,1024
   8804c:	e13ffe17 	ldw	r4,-8(fp)
   88050:	e0bffa17 	ldw	r2,-24(fp)
   88054:	114015e4 	muli	r5,r2,87
   88058:	e0bffb17 	ldw	r2,-20(fp)
   8805c:	2885883a 	add	r2,r5,r2
   88060:	1004913a 	slli	r2,r2,4
   88064:	2085883a 	add	r2,r4,r2
   88068:	1080c704 	addi	r2,r2,796
   8806c:	10c00015 	stw	r3,0(r2)
                        break;
   88070:	00001406 	br	880c4 <edid_decode_v14+0x337c>
                    case 0x60:
                    	edid->descriptors[i].cvt[s].preferred_v_rate |= CVT_V_RATE_85HZ;
   88074:	e0fffe17 	ldw	r3,-8(fp)
   88078:	e0bffa17 	ldw	r2,-24(fp)
   8807c:	110015e4 	muli	r4,r2,87
   88080:	e0bffb17 	ldw	r2,-20(fp)
   88084:	2085883a 	add	r2,r4,r2
   88088:	1004913a 	slli	r2,r2,4
   8808c:	1885883a 	add	r2,r3,r2
   88090:	1080c704 	addi	r2,r2,796
   88094:	10800017 	ldw	r2,0(r2)
   88098:	10c20014 	ori	r3,r2,2048
   8809c:	e13ffe17 	ldw	r4,-8(fp)
   880a0:	e0bffa17 	ldw	r2,-24(fp)
   880a4:	114015e4 	muli	r5,r2,87
   880a8:	e0bffb17 	ldw	r2,-20(fp)
   880ac:	2885883a 	add	r2,r5,r2
   880b0:	1004913a 	slli	r2,r2,4
   880b4:	2085883a 	add	r2,r4,r2
   880b8:	1080c704 	addi	r2,r2,796
   880bc:	10c00015 	stw	r3,0(r2)
                        break;
   880c0:	0001883a 	nop
                    }

                	edid->descriptors[i].cvt[s].supported_v_rate_blank = 0;
   880c4:	e0fffe17 	ldw	r3,-8(fp)
   880c8:	e0bffa17 	ldw	r2,-24(fp)
   880cc:	110015e4 	muli	r4,r2,87
   880d0:	e0bffb17 	ldw	r2,-20(fp)
   880d4:	2085883a 	add	r2,r4,r2
   880d8:	10800c84 	addi	r2,r2,50
   880dc:	1004913a 	slli	r2,r2,4
   880e0:	1885883a 	add	r2,r3,r2
   880e4:	10000015 	stw	zero,0(r2)

                    if (d[2] & 0x10)
   880e8:	e0bffd17 	ldw	r2,-12(fp)
   880ec:	10800084 	addi	r2,r2,2
   880f0:	10800003 	ldbu	r2,0(r2)
   880f4:	10803fcc 	andi	r2,r2,255
   880f8:	1080040c 	andi	r2,r2,16
   880fc:	10001326 	beq	r2,zero,8814c <edid_decode_v14+0x3404>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_50HZ | CVT_STANDARD_BLANKING);
   88100:	e0fffe17 	ldw	r3,-8(fp)
   88104:	e0bffa17 	ldw	r2,-24(fp)
   88108:	110015e4 	muli	r4,r2,87
   8810c:	e0bffb17 	ldw	r2,-20(fp)
   88110:	2085883a 	add	r2,r4,r2
   88114:	10800c84 	addi	r2,r2,50
   88118:	1004913a 	slli	r2,r2,4
   8811c:	1885883a 	add	r2,r3,r2
   88120:	10800017 	ldw	r2,0(r2)
   88124:	10c04054 	ori	r3,r2,257
   88128:	e13ffe17 	ldw	r4,-8(fp)
   8812c:	e0bffa17 	ldw	r2,-24(fp)
   88130:	114015e4 	muli	r5,r2,87
   88134:	e0bffb17 	ldw	r2,-20(fp)
   88138:	2885883a 	add	r2,r5,r2
   8813c:	10800c84 	addi	r2,r2,50
   88140:	1004913a 	slli	r2,r2,4
   88144:	2085883a 	add	r2,r4,r2
   88148:	10c00015 	stw	r3,0(r2)
                    if (d[2] & 0x08)
   8814c:	e0bffd17 	ldw	r2,-12(fp)
   88150:	10800084 	addi	r2,r2,2
   88154:	10800003 	ldbu	r2,0(r2)
   88158:	10803fcc 	andi	r2,r2,255
   8815c:	1080020c 	andi	r2,r2,8
   88160:	10001326 	beq	r2,zero,881b0 <edid_decode_v14+0x3468>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_60HZ | CVT_STANDARD_BLANKING);
   88164:	e0fffe17 	ldw	r3,-8(fp)
   88168:	e0bffa17 	ldw	r2,-24(fp)
   8816c:	110015e4 	muli	r4,r2,87
   88170:	e0bffb17 	ldw	r2,-20(fp)
   88174:	2085883a 	add	r2,r4,r2
   88178:	10800c84 	addi	r2,r2,50
   8817c:	1004913a 	slli	r2,r2,4
   88180:	1885883a 	add	r2,r3,r2
   88184:	10800017 	ldw	r2,0(r2)
   88188:	10c08054 	ori	r3,r2,513
   8818c:	e13ffe17 	ldw	r4,-8(fp)
   88190:	e0bffa17 	ldw	r2,-24(fp)
   88194:	114015e4 	muli	r5,r2,87
   88198:	e0bffb17 	ldw	r2,-20(fp)
   8819c:	2885883a 	add	r2,r5,r2
   881a0:	10800c84 	addi	r2,r2,50
   881a4:	1004913a 	slli	r2,r2,4
   881a8:	2085883a 	add	r2,r4,r2
   881ac:	10c00015 	stw	r3,0(r2)
                    if (d[2] & 0x04)
   881b0:	e0bffd17 	ldw	r2,-12(fp)
   881b4:	10800084 	addi	r2,r2,2
   881b8:	10800003 	ldbu	r2,0(r2)
   881bc:	10803fcc 	andi	r2,r2,255
   881c0:	1080010c 	andi	r2,r2,4
   881c4:	10001326 	beq	r2,zero,88214 <edid_decode_v14+0x34cc>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_75HZ | CVT_STANDARD_BLANKING);
   881c8:	e0fffe17 	ldw	r3,-8(fp)
   881cc:	e0bffa17 	ldw	r2,-24(fp)
   881d0:	110015e4 	muli	r4,r2,87
   881d4:	e0bffb17 	ldw	r2,-20(fp)
   881d8:	2085883a 	add	r2,r4,r2
   881dc:	10800c84 	addi	r2,r2,50
   881e0:	1004913a 	slli	r2,r2,4
   881e4:	1885883a 	add	r2,r3,r2
   881e8:	10800017 	ldw	r2,0(r2)
   881ec:	10c10054 	ori	r3,r2,1025
   881f0:	e13ffe17 	ldw	r4,-8(fp)
   881f4:	e0bffa17 	ldw	r2,-24(fp)
   881f8:	114015e4 	muli	r5,r2,87
   881fc:	e0bffb17 	ldw	r2,-20(fp)
   88200:	2885883a 	add	r2,r5,r2
   88204:	10800c84 	addi	r2,r2,50
   88208:	1004913a 	slli	r2,r2,4
   8820c:	2085883a 	add	r2,r4,r2
   88210:	10c00015 	stw	r3,0(r2)
                    if (d[2] & 0x02)
   88214:	e0bffd17 	ldw	r2,-12(fp)
   88218:	10800084 	addi	r2,r2,2
   8821c:	10800003 	ldbu	r2,0(r2)
   88220:	10803fcc 	andi	r2,r2,255
   88224:	1080008c 	andi	r2,r2,2
   88228:	10001326 	beq	r2,zero,88278 <edid_decode_v14+0x3530>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_85HZ | CVT_STANDARD_BLANKING);
   8822c:	e0fffe17 	ldw	r3,-8(fp)
   88230:	e0bffa17 	ldw	r2,-24(fp)
   88234:	110015e4 	muli	r4,r2,87
   88238:	e0bffb17 	ldw	r2,-20(fp)
   8823c:	2085883a 	add	r2,r4,r2
   88240:	10800c84 	addi	r2,r2,50
   88244:	1004913a 	slli	r2,r2,4
   88248:	1885883a 	add	r2,r3,r2
   8824c:	10800017 	ldw	r2,0(r2)
   88250:	10c20054 	ori	r3,r2,2049
   88254:	e13ffe17 	ldw	r4,-8(fp)
   88258:	e0bffa17 	ldw	r2,-24(fp)
   8825c:	114015e4 	muli	r5,r2,87
   88260:	e0bffb17 	ldw	r2,-20(fp)
   88264:	2885883a 	add	r2,r5,r2
   88268:	10800c84 	addi	r2,r2,50
   8826c:	1004913a 	slli	r2,r2,4
   88270:	2085883a 	add	r2,r4,r2
   88274:	10c00015 	stw	r3,0(r2)
                    if (d[2] & 0x01)
   88278:	e0bffd17 	ldw	r2,-12(fp)
   8827c:	10800084 	addi	r2,r2,2
   88280:	10800003 	ldbu	r2,0(r2)
   88284:	10803fcc 	andi	r2,r2,255
   88288:	1080004c 	andi	r2,r2,1
   8828c:	10001326 	beq	r2,zero,882dc <edid_decode_v14+0x3594>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_60HZ | CVT_REDUCED_BLANKING);
   88290:	e0fffe17 	ldw	r3,-8(fp)
   88294:	e0bffa17 	ldw	r2,-24(fp)
   88298:	110015e4 	muli	r4,r2,87
   8829c:	e0bffb17 	ldw	r2,-20(fp)
   882a0:	2085883a 	add	r2,r4,r2
   882a4:	10800c84 	addi	r2,r2,50
   882a8:	1004913a 	slli	r2,r2,4
   882ac:	1885883a 	add	r2,r3,r2
   882b0:	10800017 	ldw	r2,0(r2)
   882b4:	10c08094 	ori	r3,r2,514
   882b8:	e13ffe17 	ldw	r4,-8(fp)
   882bc:	e0bffa17 	ldw	r2,-24(fp)
   882c0:	114015e4 	muli	r5,r2,87
   882c4:	e0bffb17 	ldw	r2,-20(fp)
   882c8:	2885883a 	add	r2,r5,r2
   882cc:	10800c84 	addi	r2,r2,50
   882d0:	1004913a 	slli	r2,r2,4
   882d4:	2085883a 	add	r2,r4,r2
   882d8:	10c00015 	stw	r3,0(r2)
            	break;

            case 0xf8:
            	edid->descriptors[i].tag = DTAG_CVT_TIMING;

                for (s = 0; s < 4; ++s) {
   882dc:	e0bffb17 	ldw	r2,-20(fp)
   882e0:	10800044 	addi	r2,r2,1
   882e4:	e0bffb15 	stw	r2,-20(fp)
   882e8:	e0bffb17 	ldw	r2,-20(fp)
   882ec:	10800110 	cmplti	r2,r2,4
   882f0:	103e971e 	bne	r2,zero,87d50 <edid_decode_v14+0x3008>
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_85HZ | CVT_STANDARD_BLANKING);
                    if (d[2] & 0x01)
                    	edid->descriptors[i].cvt[s].supported_v_rate_blank |= (CVT_V_RATE_60HZ | CVT_REDUCED_BLANKING);
                }

                break;
   882f4:	0002d406 	br	88e48 <edid_decode_v14+0x4100>

            case 0xf7:
            	edid->descriptors[i].tag = DTAG_ESTABLISHED_TIMING_III;
   882f8:	e0fffe17 	ldw	r3,-8(fp)
   882fc:	e0bffa17 	ldw	r2,-24(fp)
   88300:	10815c24 	muli	r2,r2,1392
   88304:	1885883a 	add	r2,r3,r2
   88308:	10809a04 	addi	r2,r2,616
   8830c:	00c03dc4 	movi	r3,247
   88310:	10c00015 	stw	r3,0(r2)

            	eb_establish_timing(&edid->descriptors[i].timing_3[0], 640, 350, 85, c[6] & 0x80);
   88314:	e0bffa17 	ldw	r2,-24(fp)
   88318:	10815c24 	muli	r2,r2,1392
   8831c:	1080d504 	addi	r2,r2,852
   88320:	e0fffe17 	ldw	r3,-8(fp)
   88324:	1885883a 	add	r2,r3,r2
   88328:	e0fff817 	ldw	r3,-32(fp)
   8832c:	18c00184 	addi	r3,r3,6
   88330:	18c00003 	ldbu	r3,0(r3)
   88334:	18c03fcc 	andi	r3,r3,255
   88338:	18c0200c 	andi	r3,r3,128
   8833c:	d8c00015 	stw	r3,0(sp)
   88340:	1009883a 	mov	r4,r2
   88344:	0140a004 	movi	r5,640
   88348:	01805784 	movi	r6,350
   8834c:	01c01544 	movi	r7,85
   88350:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[1], 640, 400, 85, c[6] & 0x40);
   88354:	e0bffa17 	ldw	r2,-24(fp)
   88358:	10815c24 	muli	r2,r2,1392
   8835c:	1080db04 	addi	r2,r2,876
   88360:	e0fffe17 	ldw	r3,-8(fp)
   88364:	1885883a 	add	r2,r3,r2
   88368:	e0fff817 	ldw	r3,-32(fp)
   8836c:	18c00184 	addi	r3,r3,6
   88370:	18c00003 	ldbu	r3,0(r3)
   88374:	18c03fcc 	andi	r3,r3,255
   88378:	18c0100c 	andi	r3,r3,64
   8837c:	d8c00015 	stw	r3,0(sp)
   88380:	1009883a 	mov	r4,r2
   88384:	0140a004 	movi	r5,640
   88388:	01806404 	movi	r6,400
   8838c:	01c01544 	movi	r7,85
   88390:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2], 720, 400, 85, c[6] & 0x20);
   88394:	e0bffa17 	ldw	r2,-24(fp)
   88398:	10815c24 	muli	r2,r2,1392
   8839c:	1080e104 	addi	r2,r2,900
   883a0:	e0fffe17 	ldw	r3,-8(fp)
   883a4:	1885883a 	add	r2,r3,r2
   883a8:	e0fff817 	ldw	r3,-32(fp)
   883ac:	18c00184 	addi	r3,r3,6
   883b0:	18c00003 	ldbu	r3,0(r3)
   883b4:	18c03fcc 	andi	r3,r3,255
   883b8:	18c0080c 	andi	r3,r3,32
   883bc:	d8c00015 	stw	r3,0(sp)
   883c0:	1009883a 	mov	r4,r2
   883c4:	0140b404 	movi	r5,720
   883c8:	01806404 	movi	r6,400
   883cc:	01c01544 	movi	r7,85
   883d0:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3], 640, 480, 85, c[6] & 0x10);
   883d4:	e0bffa17 	ldw	r2,-24(fp)
   883d8:	10815c24 	muli	r2,r2,1392
   883dc:	1080e704 	addi	r2,r2,924
   883e0:	e0fffe17 	ldw	r3,-8(fp)
   883e4:	1885883a 	add	r2,r3,r2
   883e8:	e0fff817 	ldw	r3,-32(fp)
   883ec:	18c00184 	addi	r3,r3,6
   883f0:	18c00003 	ldbu	r3,0(r3)
   883f4:	18c03fcc 	andi	r3,r3,255
   883f8:	18c0040c 	andi	r3,r3,16
   883fc:	d8c00015 	stw	r3,0(sp)
   88400:	1009883a 	mov	r4,r2
   88404:	0140a004 	movi	r5,640
   88408:	01807804 	movi	r6,480
   8840c:	01c01544 	movi	r7,85
   88410:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4], 848, 480, 60, c[6] & 0x08);
   88414:	e0bffa17 	ldw	r2,-24(fp)
   88418:	10815c24 	muli	r2,r2,1392
   8841c:	1080ed04 	addi	r2,r2,948
   88420:	e0fffe17 	ldw	r3,-8(fp)
   88424:	1885883a 	add	r2,r3,r2
   88428:	e0fff817 	ldw	r3,-32(fp)
   8842c:	18c00184 	addi	r3,r3,6
   88430:	18c00003 	ldbu	r3,0(r3)
   88434:	18c03fcc 	andi	r3,r3,255
   88438:	18c0020c 	andi	r3,r3,8
   8843c:	d8c00015 	stw	r3,0(sp)
   88440:	1009883a 	mov	r4,r2
   88444:	0140d404 	movi	r5,848
   88448:	01807804 	movi	r6,480
   8844c:	01c00f04 	movi	r7,60
   88450:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[5], 800, 600, 85, c[6] & 0x04);
   88454:	e0bffa17 	ldw	r2,-24(fp)
   88458:	10815c24 	muli	r2,r2,1392
   8845c:	1080f304 	addi	r2,r2,972
   88460:	e0fffe17 	ldw	r3,-8(fp)
   88464:	1885883a 	add	r2,r3,r2
   88468:	e0fff817 	ldw	r3,-32(fp)
   8846c:	18c00184 	addi	r3,r3,6
   88470:	18c00003 	ldbu	r3,0(r3)
   88474:	18c03fcc 	andi	r3,r3,255
   88478:	18c0010c 	andi	r3,r3,4
   8847c:	d8c00015 	stw	r3,0(sp)
   88480:	1009883a 	mov	r4,r2
   88484:	0140c804 	movi	r5,800
   88488:	01809604 	movi	r6,600
   8848c:	01c01544 	movi	r7,85
   88490:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[6], 1024, 768, 85, c[6] & 0x02);
   88494:	e0bffa17 	ldw	r2,-24(fp)
   88498:	10815c24 	muli	r2,r2,1392
   8849c:	1080f904 	addi	r2,r2,996
   884a0:	e0fffe17 	ldw	r3,-8(fp)
   884a4:	1885883a 	add	r2,r3,r2
   884a8:	e0fff817 	ldw	r3,-32(fp)
   884ac:	18c00184 	addi	r3,r3,6
   884b0:	18c00003 	ldbu	r3,0(r3)
   884b4:	18c03fcc 	andi	r3,r3,255
   884b8:	18c0008c 	andi	r3,r3,2
   884bc:	d8c00015 	stw	r3,0(sp)
   884c0:	1009883a 	mov	r4,r2
   884c4:	01410004 	movi	r5,1024
   884c8:	0180c004 	movi	r6,768
   884cc:	01c01544 	movi	r7,85
   884d0:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[7], 1152, 864, 75, c[6] & 0x01);
   884d4:	e0bffa17 	ldw	r2,-24(fp)
   884d8:	10815c24 	muli	r2,r2,1392
   884dc:	1080ff04 	addi	r2,r2,1020
   884e0:	e0fffe17 	ldw	r3,-8(fp)
   884e4:	1885883a 	add	r2,r3,r2
   884e8:	e0fff817 	ldw	r3,-32(fp)
   884ec:	18c00184 	addi	r3,r3,6
   884f0:	18c00003 	ldbu	r3,0(r3)
   884f4:	18c03fcc 	andi	r3,r3,255
   884f8:	18c0004c 	andi	r3,r3,1
   884fc:	d8c00015 	stw	r3,0(sp)
   88500:	1009883a 	mov	r4,r2
   88504:	01412004 	movi	r5,1152
   88508:	0180d804 	movi	r6,864
   8850c:	01c012c4 	movi	r7,75
   88510:	008192c0 	call	8192c <eb_establish_timing>

				eb_establish_timing_rb(&edid->descriptors[i].timing_3[0 + 1 * 8], 1280, 768, 60, c[7] & 0x80);
   88514:	e0bffa17 	ldw	r2,-24(fp)
   88518:	10815c24 	muli	r2,r2,1392
   8851c:	10810504 	addi	r2,r2,1044
   88520:	e0fffe17 	ldw	r3,-8(fp)
   88524:	1885883a 	add	r2,r3,r2
   88528:	e0fff817 	ldw	r3,-32(fp)
   8852c:	18c001c4 	addi	r3,r3,7
   88530:	18c00003 	ldbu	r3,0(r3)
   88534:	18c03fcc 	andi	r3,r3,255
   88538:	18c0200c 	andi	r3,r3,128
   8853c:	d8c00015 	stw	r3,0(sp)
   88540:	1009883a 	mov	r4,r2
   88544:	01414004 	movi	r5,1280
   88548:	0180c004 	movi	r6,768
   8854c:	01c00f04 	movi	r7,60
   88550:	0081a800 	call	81a80 <eb_establish_timing_rb>
				eb_establish_timing(&edid->descriptors[i].timing_3[1 + 1 * 8], 1280, 768, 60, c[7] & 0x40);
   88554:	e0bffa17 	ldw	r2,-24(fp)
   88558:	10815c24 	muli	r2,r2,1392
   8855c:	10810b04 	addi	r2,r2,1068
   88560:	e0fffe17 	ldw	r3,-8(fp)
   88564:	1885883a 	add	r2,r3,r2
   88568:	e0fff817 	ldw	r3,-32(fp)
   8856c:	18c001c4 	addi	r3,r3,7
   88570:	18c00003 	ldbu	r3,0(r3)
   88574:	18c03fcc 	andi	r3,r3,255
   88578:	18c0100c 	andi	r3,r3,64
   8857c:	d8c00015 	stw	r3,0(sp)
   88580:	1009883a 	mov	r4,r2
   88584:	01414004 	movi	r5,1280
   88588:	0180c004 	movi	r6,768
   8858c:	01c00f04 	movi	r7,60
   88590:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 1 * 8], 1280, 768, 75, c[7] & 0x20);
   88594:	e0bffa17 	ldw	r2,-24(fp)
   88598:	10815c24 	muli	r2,r2,1392
   8859c:	10811104 	addi	r2,r2,1092
   885a0:	e0fffe17 	ldw	r3,-8(fp)
   885a4:	1885883a 	add	r2,r3,r2
   885a8:	e0fff817 	ldw	r3,-32(fp)
   885ac:	18c001c4 	addi	r3,r3,7
   885b0:	18c00003 	ldbu	r3,0(r3)
   885b4:	18c03fcc 	andi	r3,r3,255
   885b8:	18c0080c 	andi	r3,r3,32
   885bc:	d8c00015 	stw	r3,0(sp)
   885c0:	1009883a 	mov	r4,r2
   885c4:	01414004 	movi	r5,1280
   885c8:	0180c004 	movi	r6,768
   885cc:	01c012c4 	movi	r7,75
   885d0:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 1 * 8], 1280, 768, 85, c[7] & 0x10);
   885d4:	e0bffa17 	ldw	r2,-24(fp)
   885d8:	10815c24 	muli	r2,r2,1392
   885dc:	10811704 	addi	r2,r2,1116
   885e0:	e0fffe17 	ldw	r3,-8(fp)
   885e4:	1885883a 	add	r2,r3,r2
   885e8:	e0fff817 	ldw	r3,-32(fp)
   885ec:	18c001c4 	addi	r3,r3,7
   885f0:	18c00003 	ldbu	r3,0(r3)
   885f4:	18c03fcc 	andi	r3,r3,255
   885f8:	18c0040c 	andi	r3,r3,16
   885fc:	d8c00015 	stw	r3,0(sp)
   88600:	1009883a 	mov	r4,r2
   88604:	01414004 	movi	r5,1280
   88608:	0180c004 	movi	r6,768
   8860c:	01c01544 	movi	r7,85
   88610:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4 + 1 * 8], 1280, 960, 60, c[7] & 0x08);
   88614:	e0bffa17 	ldw	r2,-24(fp)
   88618:	10815c24 	muli	r2,r2,1392
   8861c:	10811d04 	addi	r2,r2,1140
   88620:	e0fffe17 	ldw	r3,-8(fp)
   88624:	1885883a 	add	r2,r3,r2
   88628:	e0fff817 	ldw	r3,-32(fp)
   8862c:	18c001c4 	addi	r3,r3,7
   88630:	18c00003 	ldbu	r3,0(r3)
   88634:	18c03fcc 	andi	r3,r3,255
   88638:	18c0020c 	andi	r3,r3,8
   8863c:	d8c00015 	stw	r3,0(sp)
   88640:	1009883a 	mov	r4,r2
   88644:	01414004 	movi	r5,1280
   88648:	0180f004 	movi	r6,960
   8864c:	01c00f04 	movi	r7,60
   88650:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[5 + 1 * 8], 1280, 960, 85, c[7] & 0x04);
   88654:	e0bffa17 	ldw	r2,-24(fp)
   88658:	10815c24 	muli	r2,r2,1392
   8865c:	10812304 	addi	r2,r2,1164
   88660:	e0fffe17 	ldw	r3,-8(fp)
   88664:	1885883a 	add	r2,r3,r2
   88668:	e0fff817 	ldw	r3,-32(fp)
   8866c:	18c001c4 	addi	r3,r3,7
   88670:	18c00003 	ldbu	r3,0(r3)
   88674:	18c03fcc 	andi	r3,r3,255
   88678:	18c0010c 	andi	r3,r3,4
   8867c:	d8c00015 	stw	r3,0(sp)
   88680:	1009883a 	mov	r4,r2
   88684:	01414004 	movi	r5,1280
   88688:	0180f004 	movi	r6,960
   8868c:	01c01544 	movi	r7,85
   88690:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[6 + 1 * 8], 1280, 1024, 60, c[7] & 0x02);
   88694:	e0bffa17 	ldw	r2,-24(fp)
   88698:	10815c24 	muli	r2,r2,1392
   8869c:	10812904 	addi	r2,r2,1188
   886a0:	e0fffe17 	ldw	r3,-8(fp)
   886a4:	1885883a 	add	r2,r3,r2
   886a8:	e0fff817 	ldw	r3,-32(fp)
   886ac:	18c001c4 	addi	r3,r3,7
   886b0:	18c00003 	ldbu	r3,0(r3)
   886b4:	18c03fcc 	andi	r3,r3,255
   886b8:	18c0008c 	andi	r3,r3,2
   886bc:	d8c00015 	stw	r3,0(sp)
   886c0:	1009883a 	mov	r4,r2
   886c4:	01414004 	movi	r5,1280
   886c8:	01810004 	movi	r6,1024
   886cc:	01c00f04 	movi	r7,60
   886d0:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[7 + 1 * 8], 1280, 1024, 85, c[7] & 0x01);
   886d4:	e0bffa17 	ldw	r2,-24(fp)
   886d8:	10815c24 	muli	r2,r2,1392
   886dc:	10812f04 	addi	r2,r2,1212
   886e0:	e0fffe17 	ldw	r3,-8(fp)
   886e4:	1885883a 	add	r2,r3,r2
   886e8:	e0fff817 	ldw	r3,-32(fp)
   886ec:	18c001c4 	addi	r3,r3,7
   886f0:	18c00003 	ldbu	r3,0(r3)
   886f4:	18c03fcc 	andi	r3,r3,255
   886f8:	18c0004c 	andi	r3,r3,1
   886fc:	d8c00015 	stw	r3,0(sp)
   88700:	1009883a 	mov	r4,r2
   88704:	01414004 	movi	r5,1280
   88708:	01810004 	movi	r6,1024
   8870c:	01c01544 	movi	r7,85
   88710:	008192c0 	call	8192c <eb_establish_timing>

				eb_establish_timing(&edid->descriptors[i].timing_3[0 + 2 * 8], 1360, 768, 60, c[8] & 0x80);
   88714:	e0bffa17 	ldw	r2,-24(fp)
   88718:	10815c24 	muli	r2,r2,1392
   8871c:	10813504 	addi	r2,r2,1236
   88720:	e0fffe17 	ldw	r3,-8(fp)
   88724:	1885883a 	add	r2,r3,r2
   88728:	e0fff817 	ldw	r3,-32(fp)
   8872c:	18c00204 	addi	r3,r3,8
   88730:	18c00003 	ldbu	r3,0(r3)
   88734:	18c03fcc 	andi	r3,r3,255
   88738:	18c0200c 	andi	r3,r3,128
   8873c:	d8c00015 	stw	r3,0(sp)
   88740:	1009883a 	mov	r4,r2
   88744:	01415404 	movi	r5,1360
   88748:	0180c004 	movi	r6,768
   8874c:	01c00f04 	movi	r7,60
   88750:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing_rb(&edid->descriptors[i].timing_3[1 + 2 * 8], 1440, 900, 60, c[8] & 0x40);
   88754:	e0bffa17 	ldw	r2,-24(fp)
   88758:	10815c24 	muli	r2,r2,1392
   8875c:	10813b04 	addi	r2,r2,1260
   88760:	e0fffe17 	ldw	r3,-8(fp)
   88764:	1885883a 	add	r2,r3,r2
   88768:	e0fff817 	ldw	r3,-32(fp)
   8876c:	18c00204 	addi	r3,r3,8
   88770:	18c00003 	ldbu	r3,0(r3)
   88774:	18c03fcc 	andi	r3,r3,255
   88778:	18c0100c 	andi	r3,r3,64
   8877c:	d8c00015 	stw	r3,0(sp)
   88780:	1009883a 	mov	r4,r2
   88784:	01416804 	movi	r5,1440
   88788:	0180e104 	movi	r6,900
   8878c:	01c00f04 	movi	r7,60
   88790:	0081a800 	call	81a80 <eb_establish_timing_rb>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 2 * 8], 1440, 900, 60, c[8] & 0x20);
   88794:	e0bffa17 	ldw	r2,-24(fp)
   88798:	10815c24 	muli	r2,r2,1392
   8879c:	10814104 	addi	r2,r2,1284
   887a0:	e0fffe17 	ldw	r3,-8(fp)
   887a4:	1885883a 	add	r2,r3,r2
   887a8:	e0fff817 	ldw	r3,-32(fp)
   887ac:	18c00204 	addi	r3,r3,8
   887b0:	18c00003 	ldbu	r3,0(r3)
   887b4:	18c03fcc 	andi	r3,r3,255
   887b8:	18c0080c 	andi	r3,r3,32
   887bc:	d8c00015 	stw	r3,0(sp)
   887c0:	1009883a 	mov	r4,r2
   887c4:	01416804 	movi	r5,1440
   887c8:	0180e104 	movi	r6,900
   887cc:	01c00f04 	movi	r7,60
   887d0:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 2 * 8], 1440, 900, 75, c[8] & 0x10);
   887d4:	e0bffa17 	ldw	r2,-24(fp)
   887d8:	10815c24 	muli	r2,r2,1392
   887dc:	10814704 	addi	r2,r2,1308
   887e0:	e0fffe17 	ldw	r3,-8(fp)
   887e4:	1885883a 	add	r2,r3,r2
   887e8:	e0fff817 	ldw	r3,-32(fp)
   887ec:	18c00204 	addi	r3,r3,8
   887f0:	18c00003 	ldbu	r3,0(r3)
   887f4:	18c03fcc 	andi	r3,r3,255
   887f8:	18c0040c 	andi	r3,r3,16
   887fc:	d8c00015 	stw	r3,0(sp)
   88800:	1009883a 	mov	r4,r2
   88804:	01416804 	movi	r5,1440
   88808:	0180e104 	movi	r6,900
   8880c:	01c012c4 	movi	r7,75
   88810:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4 + 2 * 8], 1440, 900, 85, c[8] & 0x08);
   88814:	e0bffa17 	ldw	r2,-24(fp)
   88818:	10815c24 	muli	r2,r2,1392
   8881c:	10814d04 	addi	r2,r2,1332
   88820:	e0fffe17 	ldw	r3,-8(fp)
   88824:	1885883a 	add	r2,r3,r2
   88828:	e0fff817 	ldw	r3,-32(fp)
   8882c:	18c00204 	addi	r3,r3,8
   88830:	18c00003 	ldbu	r3,0(r3)
   88834:	18c03fcc 	andi	r3,r3,255
   88838:	18c0020c 	andi	r3,r3,8
   8883c:	d8c00015 	stw	r3,0(sp)
   88840:	1009883a 	mov	r4,r2
   88844:	01416804 	movi	r5,1440
   88848:	0180e104 	movi	r6,900
   8884c:	01c01544 	movi	r7,85
   88850:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing_rb(&edid->descriptors[i].timing_3[5 + 2 * 8], 1400, 1050, 60, c[8] & 0x04);
   88854:	e0bffa17 	ldw	r2,-24(fp)
   88858:	10815c24 	muli	r2,r2,1392
   8885c:	10815304 	addi	r2,r2,1356
   88860:	e0fffe17 	ldw	r3,-8(fp)
   88864:	1885883a 	add	r2,r3,r2
   88868:	e0fff817 	ldw	r3,-32(fp)
   8886c:	18c00204 	addi	r3,r3,8
   88870:	18c00003 	ldbu	r3,0(r3)
   88874:	18c03fcc 	andi	r3,r3,255
   88878:	18c0010c 	andi	r3,r3,4
   8887c:	d8c00015 	stw	r3,0(sp)
   88880:	1009883a 	mov	r4,r2
   88884:	01415e04 	movi	r5,1400
   88888:	01810684 	movi	r6,1050
   8888c:	01c00f04 	movi	r7,60
   88890:	0081a800 	call	81a80 <eb_establish_timing_rb>
				eb_establish_timing(&edid->descriptors[i].timing_3[6 + 2 * 8], 1400, 1050, 60, c[8] & 0x02);
   88894:	e0bffa17 	ldw	r2,-24(fp)
   88898:	10815c24 	muli	r2,r2,1392
   8889c:	10815904 	addi	r2,r2,1380
   888a0:	e0fffe17 	ldw	r3,-8(fp)
   888a4:	1885883a 	add	r2,r3,r2
   888a8:	e0fff817 	ldw	r3,-32(fp)
   888ac:	18c00204 	addi	r3,r3,8
   888b0:	18c00003 	ldbu	r3,0(r3)
   888b4:	18c03fcc 	andi	r3,r3,255
   888b8:	18c0008c 	andi	r3,r3,2
   888bc:	d8c00015 	stw	r3,0(sp)
   888c0:	1009883a 	mov	r4,r2
   888c4:	01415e04 	movi	r5,1400
   888c8:	01810684 	movi	r6,1050
   888cc:	01c00f04 	movi	r7,60
   888d0:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[7 + 2 * 8], 1400, 1050, 75, c[8] & 0x01);
   888d4:	e0bffa17 	ldw	r2,-24(fp)
   888d8:	10815c24 	muli	r2,r2,1392
   888dc:	10815f04 	addi	r2,r2,1404
   888e0:	e0fffe17 	ldw	r3,-8(fp)
   888e4:	1885883a 	add	r2,r3,r2
   888e8:	e0fff817 	ldw	r3,-32(fp)
   888ec:	18c00204 	addi	r3,r3,8
   888f0:	18c00003 	ldbu	r3,0(r3)
   888f4:	18c03fcc 	andi	r3,r3,255
   888f8:	18c0004c 	andi	r3,r3,1
   888fc:	d8c00015 	stw	r3,0(sp)
   88900:	1009883a 	mov	r4,r2
   88904:	01415e04 	movi	r5,1400
   88908:	01810684 	movi	r6,1050
   8890c:	01c012c4 	movi	r7,75
   88910:	008192c0 	call	8192c <eb_establish_timing>

                eb_establish_timing(&edid->descriptors[i].timing_3[0 + 3 * 8], 1400, 1050, 85, c[9] & 0x80);
   88914:	e0bffa17 	ldw	r2,-24(fp)
   88918:	10815c24 	muli	r2,r2,1392
   8891c:	10816504 	addi	r2,r2,1428
   88920:	e0fffe17 	ldw	r3,-8(fp)
   88924:	1885883a 	add	r2,r3,r2
   88928:	e0fff817 	ldw	r3,-32(fp)
   8892c:	18c00244 	addi	r3,r3,9
   88930:	18c00003 	ldbu	r3,0(r3)
   88934:	18c03fcc 	andi	r3,r3,255
   88938:	18c0200c 	andi	r3,r3,128
   8893c:	d8c00015 	stw	r3,0(sp)
   88940:	1009883a 	mov	r4,r2
   88944:	01415e04 	movi	r5,1400
   88948:	01810684 	movi	r6,1050
   8894c:	01c01544 	movi	r7,85
   88950:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[1 + 3 * 8], 1680, 1050, 60, c[9] & 0x40);
   88954:	e0bffa17 	ldw	r2,-24(fp)
   88958:	10815c24 	muli	r2,r2,1392
   8895c:	10816b04 	addi	r2,r2,1452
   88960:	e0fffe17 	ldw	r3,-8(fp)
   88964:	1885883a 	add	r2,r3,r2
   88968:	e0fff817 	ldw	r3,-32(fp)
   8896c:	18c00244 	addi	r3,r3,9
   88970:	18c00003 	ldbu	r3,0(r3)
   88974:	18c03fcc 	andi	r3,r3,255
   88978:	18c0100c 	andi	r3,r3,64
   8897c:	d8c00015 	stw	r3,0(sp)
   88980:	1009883a 	mov	r4,r2
   88984:	0141a404 	movi	r5,1680
   88988:	01810684 	movi	r6,1050
   8898c:	01c00f04 	movi	r7,60
   88990:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 3 * 8], 1680, 1050, 60, c[9] & 0x20);
   88994:	e0bffa17 	ldw	r2,-24(fp)
   88998:	10815c24 	muli	r2,r2,1392
   8899c:	10817104 	addi	r2,r2,1476
   889a0:	e0fffe17 	ldw	r3,-8(fp)
   889a4:	1885883a 	add	r2,r3,r2
   889a8:	e0fff817 	ldw	r3,-32(fp)
   889ac:	18c00244 	addi	r3,r3,9
   889b0:	18c00003 	ldbu	r3,0(r3)
   889b4:	18c03fcc 	andi	r3,r3,255
   889b8:	18c0080c 	andi	r3,r3,32
   889bc:	d8c00015 	stw	r3,0(sp)
   889c0:	1009883a 	mov	r4,r2
   889c4:	0141a404 	movi	r5,1680
   889c8:	01810684 	movi	r6,1050
   889cc:	01c00f04 	movi	r7,60
   889d0:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 3 * 8], 1680, 1050, 75, c[9] & 0x10);
   889d4:	e0bffa17 	ldw	r2,-24(fp)
   889d8:	10815c24 	muli	r2,r2,1392
   889dc:	10817704 	addi	r2,r2,1500
   889e0:	e0fffe17 	ldw	r3,-8(fp)
   889e4:	1885883a 	add	r2,r3,r2
   889e8:	e0fff817 	ldw	r3,-32(fp)
   889ec:	18c00244 	addi	r3,r3,9
   889f0:	18c00003 	ldbu	r3,0(r3)
   889f4:	18c03fcc 	andi	r3,r3,255
   889f8:	18c0040c 	andi	r3,r3,16
   889fc:	d8c00015 	stw	r3,0(sp)
   88a00:	1009883a 	mov	r4,r2
   88a04:	0141a404 	movi	r5,1680
   88a08:	01810684 	movi	r6,1050
   88a0c:	01c012c4 	movi	r7,75
   88a10:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4 + 3 * 8], 1680, 1050, 85, c[9] & 0x08);
   88a14:	e0bffa17 	ldw	r2,-24(fp)
   88a18:	10815c24 	muli	r2,r2,1392
   88a1c:	10817d04 	addi	r2,r2,1524
   88a20:	e0fffe17 	ldw	r3,-8(fp)
   88a24:	1885883a 	add	r2,r3,r2
   88a28:	e0fff817 	ldw	r3,-32(fp)
   88a2c:	18c00244 	addi	r3,r3,9
   88a30:	18c00003 	ldbu	r3,0(r3)
   88a34:	18c03fcc 	andi	r3,r3,255
   88a38:	18c0020c 	andi	r3,r3,8
   88a3c:	d8c00015 	stw	r3,0(sp)
   88a40:	1009883a 	mov	r4,r2
   88a44:	0141a404 	movi	r5,1680
   88a48:	01810684 	movi	r6,1050
   88a4c:	01c01544 	movi	r7,85
   88a50:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[5 + 3 * 8], 1600, 1200, 60, c[9] & 0x04);
   88a54:	e0bffa17 	ldw	r2,-24(fp)
   88a58:	10815c24 	muli	r2,r2,1392
   88a5c:	10818304 	addi	r2,r2,1548
   88a60:	e0fffe17 	ldw	r3,-8(fp)
   88a64:	1885883a 	add	r2,r3,r2
   88a68:	e0fff817 	ldw	r3,-32(fp)
   88a6c:	18c00244 	addi	r3,r3,9
   88a70:	18c00003 	ldbu	r3,0(r3)
   88a74:	18c03fcc 	andi	r3,r3,255
   88a78:	18c0010c 	andi	r3,r3,4
   88a7c:	d8c00015 	stw	r3,0(sp)
   88a80:	1009883a 	mov	r4,r2
   88a84:	01419004 	movi	r5,1600
   88a88:	01812c04 	movi	r6,1200
   88a8c:	01c00f04 	movi	r7,60
   88a90:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[6 + 3 * 8], 1600, 1200, 65, c[9] & 0x02);
   88a94:	e0bffa17 	ldw	r2,-24(fp)
   88a98:	10815c24 	muli	r2,r2,1392
   88a9c:	10818904 	addi	r2,r2,1572
   88aa0:	e0fffe17 	ldw	r3,-8(fp)
   88aa4:	1885883a 	add	r2,r3,r2
   88aa8:	e0fff817 	ldw	r3,-32(fp)
   88aac:	18c00244 	addi	r3,r3,9
   88ab0:	18c00003 	ldbu	r3,0(r3)
   88ab4:	18c03fcc 	andi	r3,r3,255
   88ab8:	18c0008c 	andi	r3,r3,2
   88abc:	d8c00015 	stw	r3,0(sp)
   88ac0:	1009883a 	mov	r4,r2
   88ac4:	01419004 	movi	r5,1600
   88ac8:	01812c04 	movi	r6,1200
   88acc:	01c01044 	movi	r7,65
   88ad0:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[7 + 3 * 8], 1600, 1200, 70, c[9] & 0x01);
   88ad4:	e0bffa17 	ldw	r2,-24(fp)
   88ad8:	10815c24 	muli	r2,r2,1392
   88adc:	10818f04 	addi	r2,r2,1596
   88ae0:	e0fffe17 	ldw	r3,-8(fp)
   88ae4:	1885883a 	add	r2,r3,r2
   88ae8:	e0fff817 	ldw	r3,-32(fp)
   88aec:	18c00244 	addi	r3,r3,9
   88af0:	18c00003 	ldbu	r3,0(r3)
   88af4:	18c03fcc 	andi	r3,r3,255
   88af8:	18c0004c 	andi	r3,r3,1
   88afc:	d8c00015 	stw	r3,0(sp)
   88b00:	1009883a 	mov	r4,r2
   88b04:	01419004 	movi	r5,1600
   88b08:	01812c04 	movi	r6,1200
   88b0c:	01c01184 	movi	r7,70
   88b10:	008192c0 	call	8192c <eb_establish_timing>

               	eb_establish_timing(&edid->descriptors[i].timing_3[0 + 4 * 8], 1600, 1200, 75, c[10] & 0x80);
   88b14:	e0bffa17 	ldw	r2,-24(fp)
   88b18:	10815c24 	muli	r2,r2,1392
   88b1c:	10819504 	addi	r2,r2,1620
   88b20:	e0fffe17 	ldw	r3,-8(fp)
   88b24:	1885883a 	add	r2,r3,r2
   88b28:	e0fff817 	ldw	r3,-32(fp)
   88b2c:	18c00284 	addi	r3,r3,10
   88b30:	18c00003 	ldbu	r3,0(r3)
   88b34:	18c03fcc 	andi	r3,r3,255
   88b38:	18c0200c 	andi	r3,r3,128
   88b3c:	d8c00015 	stw	r3,0(sp)
   88b40:	1009883a 	mov	r4,r2
   88b44:	01419004 	movi	r5,1600
   88b48:	01812c04 	movi	r6,1200
   88b4c:	01c012c4 	movi	r7,75
   88b50:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[1 + 4 * 8], 1600, 1200, 85, c[10] & 0x40);
   88b54:	e0bffa17 	ldw	r2,-24(fp)
   88b58:	10815c24 	muli	r2,r2,1392
   88b5c:	10819b04 	addi	r2,r2,1644
   88b60:	e0fffe17 	ldw	r3,-8(fp)
   88b64:	1885883a 	add	r2,r3,r2
   88b68:	e0fff817 	ldw	r3,-32(fp)
   88b6c:	18c00284 	addi	r3,r3,10
   88b70:	18c00003 	ldbu	r3,0(r3)
   88b74:	18c03fcc 	andi	r3,r3,255
   88b78:	18c0100c 	andi	r3,r3,64
   88b7c:	d8c00015 	stw	r3,0(sp)
   88b80:	1009883a 	mov	r4,r2
   88b84:	01419004 	movi	r5,1600
   88b88:	01812c04 	movi	r6,1200
   88b8c:	01c01544 	movi	r7,85
   88b90:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 4 * 8], 1792, 1344, 60, c[10] & 0x20);
   88b94:	e0bffa17 	ldw	r2,-24(fp)
   88b98:	10815c24 	muli	r2,r2,1392
   88b9c:	1081a104 	addi	r2,r2,1668
   88ba0:	e0fffe17 	ldw	r3,-8(fp)
   88ba4:	1885883a 	add	r2,r3,r2
   88ba8:	e0fff817 	ldw	r3,-32(fp)
   88bac:	18c00284 	addi	r3,r3,10
   88bb0:	18c00003 	ldbu	r3,0(r3)
   88bb4:	18c03fcc 	andi	r3,r3,255
   88bb8:	18c0080c 	andi	r3,r3,32
   88bbc:	d8c00015 	stw	r3,0(sp)
   88bc0:	1009883a 	mov	r4,r2
   88bc4:	0141c004 	movi	r5,1792
   88bc8:	01815004 	movi	r6,1344
   88bcc:	01c00f04 	movi	r7,60
   88bd0:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 4 * 8], 1792, 1344, 75, c[10] & 0x10);
   88bd4:	e0bffa17 	ldw	r2,-24(fp)
   88bd8:	10815c24 	muli	r2,r2,1392
   88bdc:	1081a704 	addi	r2,r2,1692
   88be0:	e0fffe17 	ldw	r3,-8(fp)
   88be4:	1885883a 	add	r2,r3,r2
   88be8:	e0fff817 	ldw	r3,-32(fp)
   88bec:	18c00284 	addi	r3,r3,10
   88bf0:	18c00003 	ldbu	r3,0(r3)
   88bf4:	18c03fcc 	andi	r3,r3,255
   88bf8:	18c0040c 	andi	r3,r3,16
   88bfc:	d8c00015 	stw	r3,0(sp)
   88c00:	1009883a 	mov	r4,r2
   88c04:	0141c004 	movi	r5,1792
   88c08:	01815004 	movi	r6,1344
   88c0c:	01c012c4 	movi	r7,75
   88c10:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[4 + 4 * 8], 1856, 1392, 60, c[10] & 0x08);
   88c14:	e0bffa17 	ldw	r2,-24(fp)
   88c18:	10815c24 	muli	r2,r2,1392
   88c1c:	1081ad04 	addi	r2,r2,1716
   88c20:	e0fffe17 	ldw	r3,-8(fp)
   88c24:	1885883a 	add	r2,r3,r2
   88c28:	e0fff817 	ldw	r3,-32(fp)
   88c2c:	18c00284 	addi	r3,r3,10
   88c30:	18c00003 	ldbu	r3,0(r3)
   88c34:	18c03fcc 	andi	r3,r3,255
   88c38:	18c0020c 	andi	r3,r3,8
   88c3c:	d8c00015 	stw	r3,0(sp)
   88c40:	1009883a 	mov	r4,r2
   88c44:	0141d004 	movi	r5,1856
   88c48:	01815c04 	movi	r6,1392
   88c4c:	01c00f04 	movi	r7,60
   88c50:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[5 + 4 * 8], 1856, 1392, 75, c[10] & 0x04);
   88c54:	e0bffa17 	ldw	r2,-24(fp)
   88c58:	10815c24 	muli	r2,r2,1392
   88c5c:	1081b304 	addi	r2,r2,1740
   88c60:	e0fffe17 	ldw	r3,-8(fp)
   88c64:	1885883a 	add	r2,r3,r2
   88c68:	e0fff817 	ldw	r3,-32(fp)
   88c6c:	18c00284 	addi	r3,r3,10
   88c70:	18c00003 	ldbu	r3,0(r3)
   88c74:	18c03fcc 	andi	r3,r3,255
   88c78:	18c0010c 	andi	r3,r3,4
   88c7c:	d8c00015 	stw	r3,0(sp)
   88c80:	1009883a 	mov	r4,r2
   88c84:	0141d004 	movi	r5,1856
   88c88:	01815c04 	movi	r6,1392
   88c8c:	01c012c4 	movi	r7,75
   88c90:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing_rb(&edid->descriptors[i].timing_3[6 + 4 * 8], 1920, 1200, 60, c[10] & 0x02);
   88c94:	e0bffa17 	ldw	r2,-24(fp)
   88c98:	10815c24 	muli	r2,r2,1392
   88c9c:	1081b904 	addi	r2,r2,1764
   88ca0:	e0fffe17 	ldw	r3,-8(fp)
   88ca4:	1885883a 	add	r2,r3,r2
   88ca8:	e0fff817 	ldw	r3,-32(fp)
   88cac:	18c00284 	addi	r3,r3,10
   88cb0:	18c00003 	ldbu	r3,0(r3)
   88cb4:	18c03fcc 	andi	r3,r3,255
   88cb8:	18c0008c 	andi	r3,r3,2
   88cbc:	d8c00015 	stw	r3,0(sp)
   88cc0:	1009883a 	mov	r4,r2
   88cc4:	0141e004 	movi	r5,1920
   88cc8:	01812c04 	movi	r6,1200
   88ccc:	01c00f04 	movi	r7,60
   88cd0:	0081a800 	call	81a80 <eb_establish_timing_rb>
				eb_establish_timing(&edid->descriptors[i].timing_3[7 + 4 * 8], 1920, 1200, 60, c[10] & 0x01);
   88cd4:	e0bffa17 	ldw	r2,-24(fp)
   88cd8:	10815c24 	muli	r2,r2,1392
   88cdc:	1081bf04 	addi	r2,r2,1788
   88ce0:	e0fffe17 	ldw	r3,-8(fp)
   88ce4:	1885883a 	add	r2,r3,r2
   88ce8:	e0fff817 	ldw	r3,-32(fp)
   88cec:	18c00284 	addi	r3,r3,10
   88cf0:	18c00003 	ldbu	r3,0(r3)
   88cf4:	18c03fcc 	andi	r3,r3,255
   88cf8:	18c0004c 	andi	r3,r3,1
   88cfc:	d8c00015 	stw	r3,0(sp)
   88d00:	1009883a 	mov	r4,r2
   88d04:	0141e004 	movi	r5,1920
   88d08:	01812c04 	movi	r6,1200
   88d0c:	01c00f04 	movi	r7,60
   88d10:	008192c0 	call	8192c <eb_establish_timing>

				eb_establish_timing(&edid->descriptors[i].timing_3[0 + 5 * 8], 1920, 1200, 75, c[11] & 0x80);
   88d14:	e0bffa17 	ldw	r2,-24(fp)
   88d18:	10815c24 	muli	r2,r2,1392
   88d1c:	1081c504 	addi	r2,r2,1812
   88d20:	e0fffe17 	ldw	r3,-8(fp)
   88d24:	1885883a 	add	r2,r3,r2
   88d28:	e0fff817 	ldw	r3,-32(fp)
   88d2c:	18c002c4 	addi	r3,r3,11
   88d30:	18c00003 	ldbu	r3,0(r3)
   88d34:	18c03fcc 	andi	r3,r3,255
   88d38:	18c0200c 	andi	r3,r3,128
   88d3c:	d8c00015 	stw	r3,0(sp)
   88d40:	1009883a 	mov	r4,r2
   88d44:	0141e004 	movi	r5,1920
   88d48:	01812c04 	movi	r6,1200
   88d4c:	01c012c4 	movi	r7,75
   88d50:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[1 + 5 * 8], 1920, 1200, 85, c[11] & 0x40);
   88d54:	e0bffa17 	ldw	r2,-24(fp)
   88d58:	10815c24 	muli	r2,r2,1392
   88d5c:	1081cb04 	addi	r2,r2,1836
   88d60:	e0fffe17 	ldw	r3,-8(fp)
   88d64:	1885883a 	add	r2,r3,r2
   88d68:	e0fff817 	ldw	r3,-32(fp)
   88d6c:	18c002c4 	addi	r3,r3,11
   88d70:	18c00003 	ldbu	r3,0(r3)
   88d74:	18c03fcc 	andi	r3,r3,255
   88d78:	18c0100c 	andi	r3,r3,64
   88d7c:	d8c00015 	stw	r3,0(sp)
   88d80:	1009883a 	mov	r4,r2
   88d84:	0141e004 	movi	r5,1920
   88d88:	01812c04 	movi	r6,1200
   88d8c:	01c01544 	movi	r7,85
   88d90:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[2 + 5 * 8], 1920, 1440, 65, c[11] & 0x20);
   88d94:	e0bffa17 	ldw	r2,-24(fp)
   88d98:	10815c24 	muli	r2,r2,1392
   88d9c:	1081d104 	addi	r2,r2,1860
   88da0:	e0fffe17 	ldw	r3,-8(fp)
   88da4:	1885883a 	add	r2,r3,r2
   88da8:	e0fff817 	ldw	r3,-32(fp)
   88dac:	18c002c4 	addi	r3,r3,11
   88db0:	18c00003 	ldbu	r3,0(r3)
   88db4:	18c03fcc 	andi	r3,r3,255
   88db8:	18c0080c 	andi	r3,r3,32
   88dbc:	d8c00015 	stw	r3,0(sp)
   88dc0:	1009883a 	mov	r4,r2
   88dc4:	0141e004 	movi	r5,1920
   88dc8:	01816804 	movi	r6,1440
   88dcc:	01c01044 	movi	r7,65
   88dd0:	008192c0 	call	8192c <eb_establish_timing>
				eb_establish_timing(&edid->descriptors[i].timing_3[3 + 5 * 8], 1920, 1440, 75, c[11] & 0x10);
   88dd4:	e0bffa17 	ldw	r2,-24(fp)
   88dd8:	10815c24 	muli	r2,r2,1392
   88ddc:	1081d704 	addi	r2,r2,1884
   88de0:	e0fffe17 	ldw	r3,-8(fp)
   88de4:	1885883a 	add	r2,r3,r2
   88de8:	e0fff817 	ldw	r3,-32(fp)
   88dec:	18c002c4 	addi	r3,r3,11
   88df0:	18c00003 	ldbu	r3,0(r3)
   88df4:	18c03fcc 	andi	r3,r3,255
   88df8:	18c0040c 	andi	r3,r3,16
   88dfc:	d8c00015 	stw	r3,0(sp)
   88e00:	1009883a 	mov	r4,r2
   88e04:	0141e004 	movi	r5,1920
   88e08:	01816804 	movi	r6,1440
   88e0c:	01c012c4 	movi	r7,75
   88e10:	008192c0 	call	8192c <eb_establish_timing>
                break;
   88e14:	00000c06 	br	88e48 <edid_decode_v14+0x4100>

            case 0x10:
            	edid->descriptors[i].tag = DTAG_DUMMY;
   88e18:	e0fffe17 	ldw	r3,-8(fp)
   88e1c:	e0bffa17 	ldw	r2,-24(fp)
   88e20:	10815c24 	muli	r2,r2,1392
   88e24:	1885883a 	add	r2,r3,r2
   88e28:	10809a04 	addi	r2,r2,616
   88e2c:	00c00404 	movi	r3,16
   88e30:	10c00015 	stw	r3,0(r2)
                break;
   88e34:	00000406 	br	88e48 <edid_decode_v14+0x4100>
            default:
                break;
   88e38:	00000306 	br	88e48 <edid_decode_v14+0x4100>
				edid->descriptors[i].detailed_timing.stereo |= STEREO_4WAY_INTERLEAVE;
			if ((c[17] & 0x61) == 0x61)
				edid->descriptors[i].detailed_timing.stereo |= STEREO_SIDE_BY_SIDE_INTERLEAVE;

			edid->descriptors[i].detailed_timing.sync = 0;
            if (c[17] & 0x10) {
   88e3c:	0001883a 	nop
   88e40:	00000106 	br	88e48 <edid_decode_v14+0x4100>
                	edid->descriptors[i].range_limits.gtf_2nd_curve.M = ((u32)c[15] << 8) | (u32)c[14];
                	edid->descriptors[i].range_limits.gtf_2nd_curve.K = c[16];
                	edid->descriptors[i].range_limits.gtf_2nd_curve.J = c[17] / 2;
                }

                break;
   88e44:	0001883a 	nop

		edid->standard_timings[i].refresh_rate = (c[1] & 0x3f) + 60;
    }

    // 18-byte descriptors x 4
    for (i = 0; i < 4; ++i) {
   88e48:	e0bffa17 	ldw	r2,-24(fp)
   88e4c:	10800044 	addi	r2,r2,1
   88e50:	e0bffa15 	stw	r2,-24(fp)
   88e54:	e0bffa17 	ldw	r2,-24(fp)
   88e58:	10800110 	cmplti	r2,r2,4
   88e5c:	1033ef1e 	bne	r2,zero,85e1c <edid_decode_v14+0x10d4>
            }
        }
    }

    // extension flag & checksum
    c = &edid_bin[0x7e];
   88e60:	e0bfff17 	ldw	r2,-4(fp)
   88e64:	10801f84 	addi	r2,r2,126
   88e68:	e0bff815 	stw	r2,-32(fp)

    edid->extensions = *c;
   88e6c:	e0bff817 	ldw	r2,-32(fp)
   88e70:	10800003 	ldbu	r2,0(r2)
   88e74:	10c03fcc 	andi	r3,r2,255
   88e78:	e0bffe17 	ldw	r2,-8(fp)
   88e7c:	10c60915 	stw	r3,6180(r2)

    if (edid->extensions != 0)
   88e80:	e0bffe17 	ldw	r2,-8(fp)
   88e84:	10860917 	ldw	r2,6180(r2)
   88e88:	10000326 	beq	r2,zero,88e98 <edid_decode_v14+0x4150>
    	edid_decode_extensions(edid, edid_bin);
   88e8c:	e13ffe17 	ldw	r4,-8(fp)
   88e90:	e17fff17 	ldw	r5,-4(fp)
   88e94:	0084c2c0 	call	84c2c <edid_decode_extensions>

    return 0;
   88e98:	0005883a 	mov	r2,zero
}
   88e9c:	e037883a 	mov	sp,fp
   88ea0:	dfc00117 	ldw	ra,4(sp)
   88ea4:	df000017 	ldw	fp,0(sp)
   88ea8:	dec00204 	addi	sp,sp,8
   88eac:	f800283a 	ret

00088eb0 <edid_print_v14>:

void edid_print_v14(struct base_edid *edid)
{
   88eb0:	defff404 	addi	sp,sp,-48
   88eb4:	dfc00b15 	stw	ra,44(sp)
   88eb8:	df000a15 	stw	fp,40(sp)
   88ebc:	dc800915 	stw	r18,36(sp)
   88ec0:	dc400815 	stw	r17,32(sp)
   88ec4:	dc000715 	stw	r16,28(sp)
   88ec8:	df000704 	addi	fp,sp,28
   88ecc:	e13fff15 	stw	r4,-4(fp)
   88ed0:	d83bb615 	stw	zero,-4392(sp)
	int i;

	printf("Base EDID Information ...\n\n");
   88ed4:	010002b4 	movhi	r4,10
   88ed8:	212d5704 	addi	r4,r4,-19108
   88edc:	008e6680 	call	8e668 <puts>
	printf("vendor id    : %s\n", edid->id_mfg);
   88ee0:	e0bfff17 	ldw	r2,-4(fp)
   88ee4:	010002b4 	movhi	r4,10
   88ee8:	212d5e04 	addi	r4,r4,-19080
   88eec:	100b883a 	mov	r5,r2
   88ef0:	008e5840 	call	8e584 <printf>
	printf("product code : %04x\n", edid->id_prod);
   88ef4:	e0bfff17 	ldw	r2,-4(fp)
   88ef8:	10800117 	ldw	r2,4(r2)
   88efc:	010002b4 	movhi	r4,10
   88f00:	212d6304 	addi	r4,r4,-19060
   88f04:	100b883a 	mov	r5,r2
   88f08:	008e5840 	call	8e584 <printf>
	printf("serial       : %08x\n", edid->id_sn);
   88f0c:	e0bfff17 	ldw	r2,-4(fp)
   88f10:	10800217 	ldw	r2,8(r2)
   88f14:	010002b4 	movhi	r4,10
   88f18:	212d6904 	addi	r4,r4,-19036
   88f1c:	100b883a 	mov	r5,r2
   88f20:	008e5840 	call	8e584 <printf>
	printf("mfg date     : year %04d week %02d\n", edid->mfg_year, edid->mfg_week);
   88f24:	e0bfff17 	ldw	r2,-4(fp)
   88f28:	10c00417 	ldw	r3,16(r2)
   88f2c:	e0bfff17 	ldw	r2,-4(fp)
   88f30:	10800317 	ldw	r2,12(r2)
   88f34:	010002b4 	movhi	r4,10
   88f38:	212d6f04 	addi	r4,r4,-19012
   88f3c:	180b883a 	mov	r5,r3
   88f40:	100d883a 	mov	r6,r2
   88f44:	008e5840 	call	8e584 <printf>

	if (edid->model_year > 0)
   88f48:	e0bfff17 	ldw	r2,-4(fp)
   88f4c:	10800517 	ldw	r2,20(r2)
   88f50:	0080060e 	bge	zero,r2,88f6c <edid_print_v14+0xbc>
		printf("model year   : %04d\n", edid->model_year);
   88f54:	e0bfff17 	ldw	r2,-4(fp)
   88f58:	10800517 	ldw	r2,20(r2)
   88f5c:	010002b4 	movhi	r4,10
   88f60:	212d7804 	addi	r4,r4,-18976
   88f64:	100b883a 	mov	r5,r2
   88f68:	008e5840 	call	8e584 <printf>

	printf("EDID version : %d.%d\n", edid->ver_mj, edid->ver_mn);
   88f6c:	e0bfff17 	ldw	r2,-4(fp)
   88f70:	10c00617 	ldw	r3,24(r2)
   88f74:	e0bfff17 	ldw	r2,-4(fp)
   88f78:	10800717 	ldw	r2,28(r2)
   88f7c:	010002b4 	movhi	r4,10
   88f80:	212d7e04 	addi	r4,r4,-18952
   88f84:	180b883a 	mov	r5,r3
   88f88:	100d883a 	mov	r6,r2
   88f8c:	008e5840 	call	8e584 <printf>
	printf("extensions   : %d\n", edid->extensions);
   88f90:	e0bfff17 	ldw	r2,-4(fp)
   88f94:	10860917 	ldw	r2,6180(r2)
   88f98:	010002b4 	movhi	r4,10
   88f9c:	212d8404 	addi	r4,r4,-18928
   88fa0:	100b883a 	mov	r5,r2
   88fa4:	008e5840 	call	8e584 <printf>

	if (edid->input.digital_if != 0) {
   88fa8:	e0bfff17 	ldw	r2,-4(fp)
   88fac:	10800817 	ldw	r2,32(r2)
   88fb0:	10006126 	beq	r2,zero,89138 <edid_print_v14+0x288>
		printf("\ndigital input interface ...\n");
   88fb4:	010002b4 	movhi	r4,10
   88fb8:	212d8904 	addi	r4,r4,-18908
   88fbc:	008e6680 	call	8e668 <puts>

		switch (edid->input.digital.depth) {
   88fc0:	e0bfff17 	ldw	r2,-4(fp)
   88fc4:	10800917 	ldw	r2,36(r2)
   88fc8:	10c001e8 	cmpgeui	r3,r2,7
   88fcc:	1800261e 	bne	r3,zero,89068 <edid_print_v14+0x1b8>
   88fd0:	1085883a 	add	r2,r2,r2
   88fd4:	1087883a 	add	r3,r2,r2
   88fd8:	00800274 	movhi	r2,9
   88fdc:	10a3fb04 	addi	r2,r2,-28692
   88fe0:	1885883a 	add	r2,r3,r2
   88fe4:	10800017 	ldw	r2,0(r2)
   88fe8:	1000683a 	jmp	r2
   88fec:	00089068 	cmpgeui	zero,zero,8769
   88ff0:	00089008 	cmpgei	zero,zero,8768
   88ff4:	00089018 	cmpnei	zero,zero,8768
   88ff8:	00089028 	cmpgeui	zero,zero,8768
   88ffc:	00089038 	rdprs	zero,zero,8768
   89000:	00089048 	cmpgei	zero,zero,8769
   89004:	00089058 	cmpnei	zero,zero,8769
		case 1:
			printf("  color depth : 6 bpp\n");
   89008:	010002b4 	movhi	r4,10
   8900c:	212d9104 	addi	r4,r4,-18876
   89010:	008e6680 	call	8e668 <puts>
			break;
   89014:	00001b06 	br	89084 <edid_print_v14+0x1d4>
		case 2:
			printf("  color depth : 8 bpp\n");
   89018:	010002b4 	movhi	r4,10
   8901c:	212d9704 	addi	r4,r4,-18852
   89020:	008e6680 	call	8e668 <puts>
			break;
   89024:	00001706 	br	89084 <edid_print_v14+0x1d4>
		case 3:
			printf("  color depth : 10 bpp\n");
   89028:	010002b4 	movhi	r4,10
   8902c:	212d9d04 	addi	r4,r4,-18828
   89030:	008e6680 	call	8e668 <puts>
			break;
   89034:	00001306 	br	89084 <edid_print_v14+0x1d4>
		case 4:
			printf("  color depth : 12 bpp\n");
   89038:	010002b4 	movhi	r4,10
   8903c:	212da304 	addi	r4,r4,-18804
   89040:	008e6680 	call	8e668 <puts>
			break;
   89044:	00000f06 	br	89084 <edid_print_v14+0x1d4>
		case 5:
			printf("  color depth : 14 bpp\n");
   89048:	010002b4 	movhi	r4,10
   8904c:	212da904 	addi	r4,r4,-18780
   89050:	008e6680 	call	8e668 <puts>
			break;
   89054:	00000b06 	br	89084 <edid_print_v14+0x1d4>
		case 6:
			printf("  color depth : 16 bpp\n");
   89058:	010002b4 	movhi	r4,10
   8905c:	212daf04 	addi	r4,r4,-18756
   89060:	008e6680 	call	8e668 <puts>
			break;
   89064:	00000706 	br	89084 <edid_print_v14+0x1d4>
		default:
			printf("  color depth : undefined (%d)\n", edid->input.digital.depth);
   89068:	e0bfff17 	ldw	r2,-4(fp)
   8906c:	10800917 	ldw	r2,36(r2)
   89070:	010002b4 	movhi	r4,10
   89074:	212db504 	addi	r4,r4,-18732
   89078:	100b883a 	mov	r5,r2
   8907c:	008e5840 	call	8e584 <printf>
			break;
   89080:	0001883a 	nop
		}

		switch (edid->input.digital.interface) {
   89084:	e0bfff17 	ldw	r2,-4(fp)
   89088:	10800a17 	ldw	r2,40(r2)
   8908c:	10c001a8 	cmpgeui	r3,r2,6
   89090:	1800221e 	bne	r3,zero,8911c <edid_print_v14+0x26c>
   89094:	1085883a 	add	r2,r2,r2
   89098:	1087883a 	add	r3,r2,r2
   8909c:	00800274 	movhi	r2,9
   890a0:	10a42c04 	addi	r2,r2,-28496
   890a4:	1885883a 	add	r2,r3,r2
   890a8:	10800017 	ldw	r2,0(r2)
   890ac:	1000683a 	jmp	r2
   890b0:	0008911c 	xori	zero,zero,8772
   890b4:	000890c8 	cmpgei	zero,zero,8771
   890b8:	000890d8 	cmpnei	zero,zero,8771
   890bc:	000890e8 	cmpgeui	zero,zero,8771
   890c0:	000890f8 	rdprs	zero,zero,8771
   890c4:	00089108 	cmpgei	zero,zero,8772
		case 1:
			printf("  interface   : DVI\n");
   890c8:	010002b4 	movhi	r4,10
   890cc:	212dbd04 	addi	r4,r4,-18700
   890d0:	008e6680 	call	8e668 <puts>
			break;
   890d4:	00006706 	br	89274 <edid_print_v14+0x3c4>
		case 2:
			printf("  interface   : HDMI-a\n");
   890d8:	010002b4 	movhi	r4,10
   890dc:	212dc204 	addi	r4,r4,-18680
   890e0:	008e6680 	call	8e668 <puts>
			break;
   890e4:	00006306 	br	89274 <edid_print_v14+0x3c4>
		case 3:
			printf("  interface   : HDMI-b\n");
   890e8:	010002b4 	movhi	r4,10
   890ec:	212dc804 	addi	r4,r4,-18656
   890f0:	008e6680 	call	8e668 <puts>
			break;
   890f4:	00005f06 	br	89274 <edid_print_v14+0x3c4>
		case 4:
			printf("  interface   : MDDI\n");
   890f8:	010002b4 	movhi	r4,10
   890fc:	212dce04 	addi	r4,r4,-18632
   89100:	008e6680 	call	8e668 <puts>
			break;
   89104:	00005b06 	br	89274 <edid_print_v14+0x3c4>
		case 5:
			printf("  interface   : DisplayPort\n");
   89108:	010002b4 	movhi	r4,10
   8910c:	212dd404 	addi	r4,r4,-18608
   89110:	008e6680 	call	8e668 <puts>
			break;
   89114:	0001883a 	nop
   89118:	00005606 	br	89274 <edid_print_v14+0x3c4>
		default:
			printf("  interface   : undefined (%d)\n", edid->input.digital.interface);
   8911c:	e0bfff17 	ldw	r2,-4(fp)
   89120:	10800a17 	ldw	r2,40(r2)
   89124:	010002b4 	movhi	r4,10
   89128:	212ddb04 	addi	r4,r4,-18580
   8912c:	100b883a 	mov	r5,r2
   89130:	008e5840 	call	8e584 <printf>
			break;
   89134:	00004f06 	br	89274 <edid_print_v14+0x3c4>
		}

	} else {
		printf("\nanalog input interface ...\n");
   89138:	010002b4 	movhi	r4,10
   8913c:	212de304 	addi	r4,r4,-18548
   89140:	008e6680 	call	8e668 <puts>

		switch (edid->input.analog.level) {
   89144:	e0bfff17 	ldw	r2,-4(fp)
   89148:	10800917 	ldw	r2,36(r2)
   8914c:	10c00060 	cmpeqi	r3,r2,1
   89150:	18000d1e 	bne	r3,zero,89188 <edid_print_v14+0x2d8>
   89154:	10c00088 	cmpgei	r3,r2,2
   89158:	1800021e 	bne	r3,zero,89164 <edid_print_v14+0x2b4>
   8915c:	10000626 	beq	r2,zero,89178 <edid_print_v14+0x2c8>
   89160:	00001506 	br	891b8 <edid_print_v14+0x308>
   89164:	10c000a0 	cmpeqi	r3,r2,2
   89168:	18000b1e 	bne	r3,zero,89198 <edid_print_v14+0x2e8>
   8916c:	108000e0 	cmpeqi	r2,r2,3
   89170:	10000d1e 	bne	r2,zero,891a8 <edid_print_v14+0x2f8>
   89174:	00001006 	br	891b8 <edid_print_v14+0x308>
		case VIL_0P700_0P300_1P000:
			printf("  signal level    : 0.700 : 0.300 : 1.000 Vpp\n");
   89178:	010002b4 	movhi	r4,10
   8917c:	212dea04 	addi	r4,r4,-18520
   89180:	008e6680 	call	8e668 <puts>
			break;
   89184:	00000c06 	br	891b8 <edid_print_v14+0x308>
		case VIL_0P714_0P286_1P000:
			printf("  signal level    : 0.714 : 0.286 : 1.000 Vpp\n");
   89188:	010002b4 	movhi	r4,10
   8918c:	212df604 	addi	r4,r4,-18472
   89190:	008e6680 	call	8e668 <puts>
			break;
   89194:	00000806 	br	891b8 <edid_print_v14+0x308>
		case VIL_1P000_0P400_1P400:
			printf("  signal level    : 1.000 : 0.400 : 1.400 Vpp\n");
   89198:	010002b4 	movhi	r4,10
   8919c:	212e0204 	addi	r4,r4,-18424
   891a0:	008e6680 	call	8e668 <puts>
			break;
   891a4:	00000406 	br	891b8 <edid_print_v14+0x308>
		case VIL_0P700_0P000_0P700:
			printf("  signal level    : 0.700 : 0.000 : 0.700 Vpp\n");
   891a8:	010002b4 	movhi	r4,10
   891ac:	212e0e04 	addi	r4,r4,-18376
   891b0:	008e6680 	call	8e668 <puts>
			break;
   891b4:	0001883a 	nop
		}

		switch (edid->input.analog.setup) {
   891b8:	e0bfff17 	ldw	r2,-4(fp)
   891bc:	10800a17 	ldw	r2,40(r2)
   891c0:	10000326 	beq	r2,zero,891d0 <edid_print_v14+0x320>
   891c4:	10800060 	cmpeqi	r2,r2,1
   891c8:	1000051e 	bne	r2,zero,891e0 <edid_print_v14+0x330>
   891cc:	00000806 	br	891f0 <edid_print_v14+0x340>
		case VIS_BLANK_LEVEL_EQ_BLACK_LEVEL:
			printf("  video setup     : blank level = black level\n");
   891d0:	010002b4 	movhi	r4,10
   891d4:	212e1a04 	addi	r4,r4,-18328
   891d8:	008e6680 	call	8e668 <puts>
			break;
   891dc:	00000406 	br	891f0 <edid_print_v14+0x340>
		case VIS_BLANK_TO_BLACK_PEDESTAL:
			printf("  video setup     : blank-to-black setup or pedestal\n");
   891e0:	010002b4 	movhi	r4,10
   891e4:	212e2604 	addi	r4,r4,-18280
   891e8:	008e6680 	call	8e668 <puts>
			break;
   891ec:	0001883a 	nop
		}

		printf("  sync types      : seperate_sync_h_v(%d) composite_sync_h(%d) composite_sync_green(%d)\n",
			(edid->input.analog.sync_type & VIS_SEPERATE_H_V_SYNC) ? 1 : 0,
   891f0:	e0bfff17 	ldw	r2,-4(fp)
   891f4:	10800b17 	ldw	r2,44(r2)
   891f8:	1080004c 	andi	r2,r2,1
		case VIS_BLANK_TO_BLACK_PEDESTAL:
			printf("  video setup     : blank-to-black setup or pedestal\n");
			break;
		}

		printf("  sync types      : seperate_sync_h_v(%d) composite_sync_h(%d) composite_sync_green(%d)\n",
   891fc:	1004c03a 	cmpne	r2,r2,zero
   89200:	11403fcc 	andi	r5,r2,255
			(edid->input.analog.sync_type & VIS_SEPERATE_H_V_SYNC) ? 1 : 0,
			(edid->input.analog.sync_type & VIS_COMPOSITE_H_SYNC) ? 1 : 0,
   89204:	e0bfff17 	ldw	r2,-4(fp)
   89208:	10800b17 	ldw	r2,44(r2)
   8920c:	1080008c 	andi	r2,r2,2
		case VIS_BLANK_TO_BLACK_PEDESTAL:
			printf("  video setup     : blank-to-black setup or pedestal\n");
			break;
		}

		printf("  sync types      : seperate_sync_h_v(%d) composite_sync_h(%d) composite_sync_green(%d)\n",
   89210:	1004c03a 	cmpne	r2,r2,zero
   89214:	10c03fcc 	andi	r3,r2,255
			(edid->input.analog.sync_type & VIS_SEPERATE_H_V_SYNC) ? 1 : 0,
			(edid->input.analog.sync_type & VIS_COMPOSITE_H_SYNC) ? 1 : 0,
			(edid->input.analog.sync_type & VIS_COMPOSITE_G_VIDEO) ? 1 : 0);
   89218:	e0bfff17 	ldw	r2,-4(fp)
   8921c:	10800b17 	ldw	r2,44(r2)
   89220:	1080010c 	andi	r2,r2,4
		case VIS_BLANK_TO_BLACK_PEDESTAL:
			printf("  video setup     : blank-to-black setup or pedestal\n");
			break;
		}

		printf("  sync types      : seperate_sync_h_v(%d) composite_sync_h(%d) composite_sync_green(%d)\n",
   89224:	1004c03a 	cmpne	r2,r2,zero
   89228:	10803fcc 	andi	r2,r2,255
   8922c:	010002b4 	movhi	r4,10
   89230:	212e3404 	addi	r4,r4,-18224
   89234:	180d883a 	mov	r6,r3
   89238:	100f883a 	mov	r7,r2
   8923c:	008e5840 	call	8e584 <printf>
			(edid->input.analog.sync_type & VIS_SEPERATE_H_V_SYNC) ? 1 : 0,
			(edid->input.analog.sync_type & VIS_COMPOSITE_H_SYNC) ? 1 : 0,
			(edid->input.analog.sync_type & VIS_COMPOSITE_G_VIDEO) ? 1 : 0);

		printf("  vsync serration : %s\n", (edid->input.analog.serrations & VISR_VSYNC) ? "supported" : "not supported");
   89240:	e0bfff17 	ldw	r2,-4(fp)
   89244:	10800c17 	ldw	r2,48(r2)
   89248:	1080004c 	andi	r2,r2,1
   8924c:	10000326 	beq	r2,zero,8925c <edid_print_v14+0x3ac>
   89250:	008002b4 	movhi	r2,10
   89254:	10ae4b04 	addi	r2,r2,-18132
   89258:	00000206 	br	89264 <edid_print_v14+0x3b4>
   8925c:	008002b4 	movhi	r2,10
   89260:	10ae4e04 	addi	r2,r2,-18120
   89264:	010002b4 	movhi	r4,10
   89268:	212e5204 	addi	r4,r4,-18104
   8926c:	100b883a 	mov	r5,r2
   89270:	008e5840 	call	8e584 <printf>
	}

	if (edid->screen.size_defined) {
   89274:	e0bfff17 	ldw	r2,-4(fp)
   89278:	10800d17 	ldw	r2,52(r2)
   8927c:	10000a26 	beq	r2,zero,892a8 <edid_print_v14+0x3f8>
		printf("\nscreen size  : horizontal) %d (cm)  vertical) %d (cm)\n", edid->screen.size.horizontal, edid->screen.size.vertical);
   89280:	e0bfff17 	ldw	r2,-4(fp)
   89284:	10c00f17 	ldw	r3,60(r2)
   89288:	e0bfff17 	ldw	r2,-4(fp)
   8928c:	10801017 	ldw	r2,64(r2)
   89290:	010002b4 	movhi	r4,10
   89294:	212e5804 	addi	r4,r4,-18080
   89298:	180b883a 	mov	r5,r3
   8929c:	100d883a 	mov	r6,r2
   892a0:	008e5840 	call	8e584 <printf>
   892a4:	00001f06 	br	89324 <edid_print_v14+0x474>
	} else if (edid->screen.aspect_defined == 1) {
   892a8:	e0bfff17 	ldw	r2,-4(fp)
   892ac:	10800e17 	ldw	r2,56(r2)
   892b0:	10800058 	cmpnei	r2,r2,1
   892b4:	10000c1e 	bne	r2,zero,892e8 <edid_print_v14+0x438>
		printf("\naspect ratio : landscape) %.2f\n", edid->screen.aspect.landscape);
   892b8:	e0ffff17 	ldw	r3,-4(fp)
   892bc:	18800f17 	ldw	r2,60(r3)
   892c0:	1009883a 	mov	r4,r2
   892c4:	008ccc80 	call	8ccc8 <__extendsfdf2>
   892c8:	100d883a 	mov	r6,r2
   892cc:	180f883a 	mov	r7,r3
   892d0:	010002b4 	movhi	r4,10
   892d4:	212e6604 	addi	r4,r4,-18024
   892d8:	300b883a 	mov	r5,r6
   892dc:	380d883a 	mov	r6,r7
   892e0:	008e5840 	call	8e584 <printf>
   892e4:	00000f06 	br	89324 <edid_print_v14+0x474>
	} else if (edid->screen.aspect_defined == 2) {
   892e8:	e0bfff17 	ldw	r2,-4(fp)
   892ec:	10800e17 	ldw	r2,56(r2)
   892f0:	10800098 	cmpnei	r2,r2,2
   892f4:	10000b1e 	bne	r2,zero,89324 <edid_print_v14+0x474>
		printf("\naspect ratio : portrait) %.2f\n", edid->screen.aspect.portrait);
   892f8:	e0ffff17 	ldw	r3,-4(fp)
   892fc:	18801017 	ldw	r2,64(r3)
   89300:	1009883a 	mov	r4,r2
   89304:	008ccc80 	call	8ccc8 <__extendsfdf2>
   89308:	100d883a 	mov	r6,r2
   8930c:	180f883a 	mov	r7,r3
   89310:	010002b4 	movhi	r4,10
   89314:	212e6f04 	addi	r4,r4,-17988
   89318:	300b883a 	mov	r5,r6
   8931c:	380d883a 	mov	r6,r7
   89320:	008e5840 	call	8e584 <printf>
	}

	printf("\ngamma        : %.2f\n", edid->gamma);
   89324:	e0ffff17 	ldw	r3,-4(fp)
   89328:	18801117 	ldw	r2,68(r3)
   8932c:	1009883a 	mov	r4,r2
   89330:	008ccc80 	call	8ccc8 <__extendsfdf2>
   89334:	100d883a 	mov	r6,r2
   89338:	180f883a 	mov	r7,r3
   8933c:	010002b4 	movhi	r4,10
   89340:	212e7704 	addi	r4,r4,-17956
   89344:	300b883a 	mov	r5,r6
   89348:	380d883a 	mov	r6,r7
   8934c:	008e5840 	call	8e584 <printf>

	printf("\nfeatures ...\n");
   89350:	010002b4 	movhi	r4,10
   89354:	212e7d04 	addi	r4,r4,-17932
   89358:	008e6680 	call	8e668 <puts>
	printf("  [PM] standby mode                     : %s\n", (edid->feature & FS_PM_STANDBY) ? "yes" : "no");
   8935c:	e0bfff17 	ldw	r2,-4(fp)
   89360:	10801217 	ldw	r2,72(r2)
   89364:	1080004c 	andi	r2,r2,1
   89368:	10000326 	beq	r2,zero,89378 <edid_print_v14+0x4c8>
   8936c:	008002b4 	movhi	r2,10
   89370:	10a7d704 	addi	r2,r2,-24740
   89374:	00000206 	br	89380 <edid_print_v14+0x4d0>
   89378:	008002b4 	movhi	r2,10
   8937c:	10a7d804 	addi	r2,r2,-24736
   89380:	010002b4 	movhi	r4,10
   89384:	212e8104 	addi	r4,r4,-17916
   89388:	100b883a 	mov	r5,r2
   8938c:	008e5840 	call	8e584 <printf>
	printf("  [PM] suspend mode                     : %s\n", (edid->feature & FS_PM_SUSPEND) ? "yes" : "no");
   89390:	e0bfff17 	ldw	r2,-4(fp)
   89394:	10801217 	ldw	r2,72(r2)
   89398:	1080008c 	andi	r2,r2,2
   8939c:	10000326 	beq	r2,zero,893ac <edid_print_v14+0x4fc>
   893a0:	008002b4 	movhi	r2,10
   893a4:	10a7d704 	addi	r2,r2,-24740
   893a8:	00000206 	br	893b4 <edid_print_v14+0x504>
   893ac:	008002b4 	movhi	r2,10
   893b0:	10a7d804 	addi	r2,r2,-24736
   893b4:	010002b4 	movhi	r4,10
   893b8:	212e8d04 	addi	r4,r4,-17868
   893bc:	100b883a 	mov	r5,r2
   893c0:	008e5840 	call	8e584 <printf>
	printf("  [PM] active off                       : %s\n", (edid->feature & FS_PM_ACTIVE_OFF) ? "yes" : "no");
   893c4:	e0bfff17 	ldw	r2,-4(fp)
   893c8:	10801217 	ldw	r2,72(r2)
   893cc:	1080010c 	andi	r2,r2,4
   893d0:	10000326 	beq	r2,zero,893e0 <edid_print_v14+0x530>
   893d4:	008002b4 	movhi	r2,10
   893d8:	10a7d704 	addi	r2,r2,-24740
   893dc:	00000206 	br	893e8 <edid_print_v14+0x538>
   893e0:	008002b4 	movhi	r2,10
   893e4:	10a7d804 	addi	r2,r2,-24736
   893e8:	010002b4 	movhi	r4,10
   893ec:	212e9904 	addi	r4,r4,-17820
   893f0:	100b883a 	mov	r5,r2
   893f4:	008e5840 	call	8e584 <printf>

	printf("  [DI] supported color encoding formats : ");
   893f8:	010002b4 	movhi	r4,10
   893fc:	212ea504 	addi	r4,r4,-17772
   89400:	008e5840 	call	8e584 <printf>
	if (edid->feature & FS_CEF_RGB444)
   89404:	e0bfff17 	ldw	r2,-4(fp)
   89408:	10801217 	ldw	r2,72(r2)
   8940c:	1080100c 	andi	r2,r2,64
   89410:	10000326 	beq	r2,zero,89420 <edid_print_v14+0x570>
		printf("RGB_4:4:4 ");
   89414:	010002b4 	movhi	r4,10
   89418:	212eb004 	addi	r4,r4,-17728
   8941c:	008e5840 	call	8e584 <printf>
	if (edid->feature & FS_CEF_YCBCR444)
   89420:	e0bfff17 	ldw	r2,-4(fp)
   89424:	10801217 	ldw	r2,72(r2)
   89428:	1080200c 	andi	r2,r2,128
   8942c:	10000326 	beq	r2,zero,8943c <edid_print_v14+0x58c>
		printf("YCbCr_4:4:4 ");
   89430:	010002b4 	movhi	r4,10
   89434:	212eb304 	addi	r4,r4,-17716
   89438:	008e5840 	call	8e584 <printf>
	if (edid->feature & FS_CEF_YCBCR422)
   8943c:	e0bfff17 	ldw	r2,-4(fp)
   89440:	10801217 	ldw	r2,72(r2)
   89444:	1080400c 	andi	r2,r2,256
   89448:	10000326 	beq	r2,zero,89458 <edid_print_v14+0x5a8>
		printf("YCbCr_4:2:2 ");
   8944c:	010002b4 	movhi	r4,10
   89450:	212eb704 	addi	r4,r4,-17700
   89454:	008e5840 	call	8e584 <printf>
	printf("\n");
   89458:	01000284 	movi	r4,10
   8945c:	008e5c80 	call	8e5c8 <putchar>

	if (edid->feature & FS_DCT_MONO_GRAY)
   89460:	e0bfff17 	ldw	r2,-4(fp)
   89464:	10801217 	ldw	r2,72(r2)
   89468:	1080020c 	andi	r2,r2,8
   8946c:	10000326 	beq	r2,zero,8947c <edid_print_v14+0x5cc>
		printf("  [AI] display color type               : monochrome or grayscale display\n");
   89470:	010002b4 	movhi	r4,10
   89474:	212ebb04 	addi	r4,r4,-17684
   89478:	008e6680 	call	8e668 <puts>
	if (edid->feature & FS_DCT_RGB)
   8947c:	e0bfff17 	ldw	r2,-4(fp)
   89480:	10801217 	ldw	r2,72(r2)
   89484:	1080040c 	andi	r2,r2,16
   89488:	10000326 	beq	r2,zero,89498 <edid_print_v14+0x5e8>
		printf("  [AI] display color type               : RGB\n");
   8948c:	010002b4 	movhi	r4,10
   89490:	212ece04 	addi	r4,r4,-17608
   89494:	008e6680 	call	8e668 <puts>
	if (edid->feature & FS_DCT_NON_RGB)
   89498:	e0bfff17 	ldw	r2,-4(fp)
   8949c:	10801217 	ldw	r2,72(r2)
   894a0:	1080080c 	andi	r2,r2,32
   894a4:	10000326 	beq	r2,zero,894b4 <edid_print_v14+0x604>
		printf("  [AI] display color type               : non-RGB\n");
   894a8:	010002b4 	movhi	r4,10
   894ac:	212eda04 	addi	r4,r4,-17560
   894b0:	008e6680 	call	8e668 <puts>

	printf("  [OF] sRGB default                     : %s\n", (edid->feature & FS_OF_SRGB_DEFAULT) ? "yes" : "no");
   894b4:	e0bfff17 	ldw	r2,-4(fp)
   894b8:	10801217 	ldw	r2,72(r2)
   894bc:	1080800c 	andi	r2,r2,512
   894c0:	10000326 	beq	r2,zero,894d0 <edid_print_v14+0x620>
   894c4:	008002b4 	movhi	r2,10
   894c8:	10a7d704 	addi	r2,r2,-24740
   894cc:	00000206 	br	894d8 <edid_print_v14+0x628>
   894d0:	008002b4 	movhi	r2,10
   894d4:	10a7d804 	addi	r2,r2,-24736
   894d8:	010002b4 	movhi	r4,10
   894dc:	212ee704 	addi	r4,r4,-17508
   894e0:	100b883a 	mov	r5,r2
   894e4:	008e5840 	call	8e584 <printf>
	printf("  [OF] native preferred timing          : %s\n", (edid->feature & FS_OF_NATIVE_PREFERRED) ? "yes" : "no");
   894e8:	e0bfff17 	ldw	r2,-4(fp)
   894ec:	10801217 	ldw	r2,72(r2)
   894f0:	1081000c 	andi	r2,r2,1024
   894f4:	10000326 	beq	r2,zero,89504 <edid_print_v14+0x654>
   894f8:	008002b4 	movhi	r2,10
   894fc:	10a7d704 	addi	r2,r2,-24740
   89500:	00000206 	br	8950c <edid_print_v14+0x65c>
   89504:	008002b4 	movhi	r2,10
   89508:	10a7d804 	addi	r2,r2,-24736
   8950c:	010002b4 	movhi	r4,10
   89510:	212ef304 	addi	r4,r4,-17460
   89514:	100b883a 	mov	r5,r2
   89518:	008e5840 	call	8e584 <printf>
	printf("  [OF] continuous freq                  : %s\n", (edid->feature & FS_OF_CONTINUOUS_FREQ) ? "yes" : "no");
   8951c:	e0bfff17 	ldw	r2,-4(fp)
   89520:	10801217 	ldw	r2,72(r2)
   89524:	1082000c 	andi	r2,r2,2048
   89528:	10000326 	beq	r2,zero,89538 <edid_print_v14+0x688>
   8952c:	008002b4 	movhi	r2,10
   89530:	10a7d704 	addi	r2,r2,-24740
   89534:	00000206 	br	89540 <edid_print_v14+0x690>
   89538:	008002b4 	movhi	r2,10
   8953c:	10a7d804 	addi	r2,r2,-24736
   89540:	010002b4 	movhi	r4,10
   89544:	212eff04 	addi	r4,r4,-17412
   89548:	100b883a 	mov	r5,r2
   8954c:	008e5840 	call	8e584 <printf>

	printf("\nestablished timing ...\n");
   89550:	010002b4 	movhi	r4,10
   89554:	212f0b04 	addi	r4,r4,-17364
   89558:	008e6680 	call	8e668 <puts>
	for (i = 0; i < 17; ++i) {
   8955c:	e03ffc15 	stw	zero,-16(fp)
   89560:	00002f06 	br	89620 <edid_print_v14+0x770>
		if (edid->timing_1_2[i].valid)
   89564:	e0ffff17 	ldw	r3,-4(fp)
   89568:	e0bffc17 	ldw	r2,-16(fp)
   8956c:	10800624 	muli	r2,r2,24
   89570:	1885883a 	add	r2,r3,r2
   89574:	10801b04 	addi	r2,r2,108
   89578:	10800017 	ldw	r2,0(r2)
   8957c:	10002526 	beq	r2,zero,89614 <edid_print_v14+0x764>
			printf("  [%02d] %03d x %03d @ %02d Hz %s\n", i, edid->timing_1_2[i].width, edid->timing_1_2[i].height, edid->timing_1_2[i].refresh, edid->timing_1_2[i].interlaced ? "(I)" : " ");
   89580:	e0ffff17 	ldw	r3,-4(fp)
   89584:	e0bffc17 	ldw	r2,-16(fp)
   89588:	10800624 	muli	r2,r2,24
   8958c:	1885883a 	add	r2,r3,r2
   89590:	10801c04 	addi	r2,r2,112
   89594:	11800017 	ldw	r6,0(r2)
   89598:	e0ffff17 	ldw	r3,-4(fp)
   8959c:	e0bffc17 	ldw	r2,-16(fp)
   895a0:	10800624 	muli	r2,r2,24
   895a4:	1885883a 	add	r2,r3,r2
   895a8:	10801d04 	addi	r2,r2,116
   895ac:	10c00017 	ldw	r3,0(r2)
   895b0:	e13fff17 	ldw	r4,-4(fp)
   895b4:	e0bffc17 	ldw	r2,-16(fp)
   895b8:	10800624 	muli	r2,r2,24
   895bc:	2085883a 	add	r2,r4,r2
   895c0:	10801e04 	addi	r2,r2,120
   895c4:	11000017 	ldw	r4,0(r2)
   895c8:	e17fff17 	ldw	r5,-4(fp)
   895cc:	e0bffc17 	ldw	r2,-16(fp)
   895d0:	10800624 	muli	r2,r2,24
   895d4:	2885883a 	add	r2,r5,r2
   895d8:	10801f04 	addi	r2,r2,124
   895dc:	10800017 	ldw	r2,0(r2)
   895e0:	10000326 	beq	r2,zero,895f0 <edid_print_v14+0x740>
   895e4:	008002b4 	movhi	r2,10
   895e8:	10af1104 	addi	r2,r2,-17340
   895ec:	00000206 	br	895f8 <edid_print_v14+0x748>
   895f0:	008002b4 	movhi	r2,10
   895f4:	10a88c04 	addi	r2,r2,-24016
   895f8:	d9000015 	stw	r4,0(sp)
   895fc:	d8800115 	stw	r2,4(sp)
   89600:	010002b4 	movhi	r4,10
   89604:	212f1204 	addi	r4,r4,-17336
   89608:	e17ffc17 	ldw	r5,-16(fp)
   8960c:	180f883a 	mov	r7,r3
   89610:	008e5840 	call	8e584 <printf>
	printf("  [OF] sRGB default                     : %s\n", (edid->feature & FS_OF_SRGB_DEFAULT) ? "yes" : "no");
	printf("  [OF] native preferred timing          : %s\n", (edid->feature & FS_OF_NATIVE_PREFERRED) ? "yes" : "no");
	printf("  [OF] continuous freq                  : %s\n", (edid->feature & FS_OF_CONTINUOUS_FREQ) ? "yes" : "no");

	printf("\nestablished timing ...\n");
	for (i = 0; i < 17; ++i) {
   89614:	e0bffc17 	ldw	r2,-16(fp)
   89618:	10800044 	addi	r2,r2,1
   8961c:	e0bffc15 	stw	r2,-16(fp)
   89620:	e0bffc17 	ldw	r2,-16(fp)
   89624:	10800450 	cmplti	r2,r2,17
   89628:	103fce1e 	bne	r2,zero,89564 <edid_print_v14+0x6b4>
		if (edid->timing_1_2[i].valid)
			printf("  [%02d] %03d x %03d @ %02d Hz %s\n", i, edid->timing_1_2[i].width, edid->timing_1_2[i].height, edid->timing_1_2[i].refresh, edid->timing_1_2[i].interlaced ? "(I)" : " ");
	}

	printf("\nstandard timing ...\n");
   8962c:	010002b4 	movhi	r4,10
   89630:	212f1b04 	addi	r4,r4,-17300
   89634:	008e6680 	call	8e668 <puts>
	for (i = 0; i < 8; ++i) {
   89638:	e03ffc15 	stw	zero,-16(fp)
   8963c:	00004006 	br	89740 <edid_print_v14+0x890>
		if (edid->standard_timings[i].refresh_rate) {
   89640:	e0ffff17 	ldw	r3,-4(fp)
   89644:	e0bffc17 	ldw	r2,-16(fp)
   89648:	10800324 	muli	r2,r2,12
   8964c:	1885883a 	add	r2,r3,r2
   89650:	10808304 	addi	r2,r2,524
   89654:	10800017 	ldw	r2,0(r2)
   89658:	10003626 	beq	r2,zero,89734 <edid_print_v14+0x884>
			printf("  [%02d] %03d @ %02d Hz ", i, edid->standard_timings[i].horizontal, edid->standard_timings[i].refresh_rate);
   8965c:	e0ffff17 	ldw	r3,-4(fp)
   89660:	e0bffc17 	ldw	r2,-16(fp)
   89664:	10800324 	muli	r2,r2,12
   89668:	1885883a 	add	r2,r3,r2
   8966c:	10808104 	addi	r2,r2,516
   89670:	10c00017 	ldw	r3,0(r2)
   89674:	e13fff17 	ldw	r4,-4(fp)
   89678:	e0bffc17 	ldw	r2,-16(fp)
   8967c:	10800324 	muli	r2,r2,12
   89680:	2085883a 	add	r2,r4,r2
   89684:	10808304 	addi	r2,r2,524
   89688:	10800017 	ldw	r2,0(r2)
   8968c:	010002b4 	movhi	r4,10
   89690:	212f2104 	addi	r4,r4,-17276
   89694:	e17ffc17 	ldw	r5,-16(fp)
   89698:	180d883a 	mov	r6,r3
   8969c:	100f883a 	mov	r7,r2
   896a0:	008e5840 	call	8e584 <printf>
			switch (edid->standard_timings[i].aspect_ratio) {
   896a4:	e0ffff17 	ldw	r3,-4(fp)
   896a8:	e0bffc17 	ldw	r2,-16(fp)
   896ac:	10800324 	muli	r2,r2,12
   896b0:	1885883a 	add	r2,r3,r2
   896b4:	10808204 	addi	r2,r2,520
   896b8:	10800017 	ldw	r2,0(r2)
   896bc:	10c00060 	cmpeqi	r3,r2,1
   896c0:	18000d1e 	bne	r3,zero,896f8 <edid_print_v14+0x848>
   896c4:	10c00088 	cmpgei	r3,r2,2
   896c8:	1800021e 	bne	r3,zero,896d4 <edid_print_v14+0x824>
   896cc:	10000626 	beq	r2,zero,896e8 <edid_print_v14+0x838>
   896d0:	00001506 	br	89728 <edid_print_v14+0x878>
   896d4:	10c000a0 	cmpeqi	r3,r2,2
   896d8:	18000b1e 	bne	r3,zero,89708 <edid_print_v14+0x858>
   896dc:	108000e0 	cmpeqi	r2,r2,3
   896e0:	10000d1e 	bne	r2,zero,89718 <edid_print_v14+0x868>
   896e4:	00001006 	br	89728 <edid_print_v14+0x878>
			case ST_AR_16_10:
				printf("16:10\n");
   896e8:	010002b4 	movhi	r4,10
   896ec:	212f2804 	addi	r4,r4,-17248
   896f0:	008e6680 	call	8e668 <puts>
				break;
   896f4:	00000f06 	br	89734 <edid_print_v14+0x884>
			case ST_AR_4_3:
				printf("4:3\n");
   896f8:	010002b4 	movhi	r4,10
   896fc:	212f2a04 	addi	r4,r4,-17240
   89700:	008e6680 	call	8e668 <puts>
				break;
   89704:	00000b06 	br	89734 <edid_print_v14+0x884>
			case ST_AR_5_4:
				printf("5:4\n");
   89708:	010002b4 	movhi	r4,10
   8970c:	212f2b04 	addi	r4,r4,-17236
   89710:	008e6680 	call	8e668 <puts>
				break;
   89714:	00000706 	br	89734 <edid_print_v14+0x884>
			case ST_AR_16_9:
				printf("16:9\n");
   89718:	010002b4 	movhi	r4,10
   8971c:	212f2c04 	addi	r4,r4,-17232
   89720:	008e6680 	call	8e668 <puts>
				break;
   89724:	00000306 	br	89734 <edid_print_v14+0x884>
			default:
				printf("\n");
   89728:	01000284 	movi	r4,10
   8972c:	008e5c80 	call	8e5c8 <putchar>
				break;
   89730:	0001883a 	nop
		if (edid->timing_1_2[i].valid)
			printf("  [%02d] %03d x %03d @ %02d Hz %s\n", i, edid->timing_1_2[i].width, edid->timing_1_2[i].height, edid->timing_1_2[i].refresh, edid->timing_1_2[i].interlaced ? "(I)" : " ");
	}

	printf("\nstandard timing ...\n");
	for (i = 0; i < 8; ++i) {
   89734:	e0bffc17 	ldw	r2,-16(fp)
   89738:	10800044 	addi	r2,r2,1
   8973c:	e0bffc15 	stw	r2,-16(fp)
   89740:	e0bffc17 	ldw	r2,-16(fp)
   89744:	10800210 	cmplti	r2,r2,8
   89748:	103fbd1e 	bne	r2,zero,89640 <edid_print_v14+0x790>
				break;
			}
		}
	}

	printf("\ndescriptors ...\n");
   8974c:	010002b4 	movhi	r4,10
   89750:	212f2e04 	addi	r4,r4,-17224
   89754:	008e6680 	call	8e668 <puts>
	for (i = 0; i < 4; ++i) {
   89758:	e03ffc15 	stw	zero,-16(fp)
   8975c:	00038e06 	br	8a598 <edid_print_v14+0x16e8>
    	if (edid->descriptors[i].type == DT_DETAILED_TIMING) {
   89760:	e0ffff17 	ldw	r3,-4(fp)
   89764:	e0bffc17 	ldw	r2,-16(fp)
   89768:	10815c24 	muli	r2,r2,1392
   8976c:	1885883a 	add	r2,r3,r2
   89770:	10809904 	addi	r2,r2,612
   89774:	10800017 	ldw	r2,0(r2)
   89778:	1001991e 	bne	r2,zero,89de0 <edid_print_v14+0xf30>
    		printf("\n  [%d] DTD -- detailed timing descriptor\n", i);
   8977c:	010002b4 	movhi	r4,10
   89780:	212c6604 	addi	r4,r4,-20072
   89784:	e17ffc17 	ldw	r5,-16(fp)
   89788:	008e5840 	call	8e584 <printf>

    		printf("      pixel clock   : %d (Hz)\n", edid->descriptors[i].detailed_timing.pixel_clock);
   8978c:	e0ffff17 	ldw	r3,-4(fp)
   89790:	e0bffc17 	ldw	r2,-16(fp)
   89794:	10815c24 	muli	r2,r2,1392
   89798:	1885883a 	add	r2,r3,r2
   8979c:	10809b04 	addi	r2,r2,620
   897a0:	10800017 	ldw	r2,0(r2)
   897a4:	010002b4 	movhi	r4,10
   897a8:	212c7104 	addi	r4,r4,-20028
   897ac:	100b883a 	mov	r5,r2
   897b0:	008e5840 	call	8e584 <printf>
    		printf("      h addressible : %d (pixels)\n", edid->descriptors[i].detailed_timing.width);
   897b4:	e0ffff17 	ldw	r3,-4(fp)
   897b8:	e0bffc17 	ldw	r2,-16(fp)
   897bc:	10815c24 	muli	r2,r2,1392
   897c0:	1885883a 	add	r2,r3,r2
   897c4:	10809c04 	addi	r2,r2,624
   897c8:	10800017 	ldw	r2,0(r2)
   897cc:	010002b4 	movhi	r4,10
   897d0:	212c7904 	addi	r4,r4,-19996
   897d4:	100b883a 	mov	r5,r2
   897d8:	008e5840 	call	8e584 <printf>
    		printf("        blank       : %d (pixels)\n", edid->descriptors[i].detailed_timing.h_blank);
   897dc:	e0ffff17 	ldw	r3,-4(fp)
   897e0:	e0bffc17 	ldw	r2,-16(fp)
   897e4:	10815c24 	muli	r2,r2,1392
   897e8:	1885883a 	add	r2,r3,r2
   897ec:	10809e04 	addi	r2,r2,632
   897f0:	10800017 	ldw	r2,0(r2)
   897f4:	010002b4 	movhi	r4,10
   897f8:	212c8204 	addi	r4,r4,-19960
   897fc:	100b883a 	mov	r5,r2
   89800:	008e5840 	call	8e584 <printf>
    		printf("        fp          : %d (pixels)\n", edid->descriptors[i].detailed_timing.h_fp);
   89804:	e0ffff17 	ldw	r3,-4(fp)
   89808:	e0bffc17 	ldw	r2,-16(fp)
   8980c:	10815c24 	muli	r2,r2,1392
   89810:	1885883a 	add	r2,r3,r2
   89814:	1080a004 	addi	r2,r2,640
   89818:	10800017 	ldw	r2,0(r2)
   8981c:	010002b4 	movhi	r4,10
   89820:	212c8b04 	addi	r4,r4,-19924
   89824:	100b883a 	mov	r5,r2
   89828:	008e5840 	call	8e584 <printf>
    		printf("        sync        : %d (pixels)\n", edid->descriptors[i].detailed_timing.h_sync);
   8982c:	e0ffff17 	ldw	r3,-4(fp)
   89830:	e0bffc17 	ldw	r2,-16(fp)
   89834:	10815c24 	muli	r2,r2,1392
   89838:	1885883a 	add	r2,r3,r2
   8983c:	1080a204 	addi	r2,r2,648
   89840:	10800017 	ldw	r2,0(r2)
   89844:	010002b4 	movhi	r4,10
   89848:	212c9404 	addi	r4,r4,-19888
   8984c:	100b883a 	mov	r5,r2
   89850:	008e5840 	call	8e584 <printf>
    		printf("        bp          : %d (pixels)\n", edid->descriptors[i].detailed_timing.h_blank - edid->descriptors[i].detailed_timing.h_fp - edid->descriptors[i].detailed_timing.h_sync);
   89854:	e0ffff17 	ldw	r3,-4(fp)
   89858:	e0bffc17 	ldw	r2,-16(fp)
   8985c:	10815c24 	muli	r2,r2,1392
   89860:	1885883a 	add	r2,r3,r2
   89864:	10809e04 	addi	r2,r2,632
   89868:	10c00017 	ldw	r3,0(r2)
   8986c:	e13fff17 	ldw	r4,-4(fp)
   89870:	e0bffc17 	ldw	r2,-16(fp)
   89874:	10815c24 	muli	r2,r2,1392
   89878:	2085883a 	add	r2,r4,r2
   8987c:	1080a004 	addi	r2,r2,640
   89880:	10800017 	ldw	r2,0(r2)
   89884:	1887c83a 	sub	r3,r3,r2
   89888:	e13fff17 	ldw	r4,-4(fp)
   8988c:	e0bffc17 	ldw	r2,-16(fp)
   89890:	10815c24 	muli	r2,r2,1392
   89894:	2085883a 	add	r2,r4,r2
   89898:	1080a204 	addi	r2,r2,648
   8989c:	10800017 	ldw	r2,0(r2)
   898a0:	1885c83a 	sub	r2,r3,r2
   898a4:	010002b4 	movhi	r4,10
   898a8:	212c9d04 	addi	r4,r4,-19852
   898ac:	100b883a 	mov	r5,r2
   898b0:	008e5840 	call	8e584 <printf>
    		printf("        size        : %d (mm)\n", edid->descriptors[i].detailed_timing.h_size);
   898b4:	e0ffff17 	ldw	r3,-4(fp)
   898b8:	e0bffc17 	ldw	r2,-16(fp)
   898bc:	10815c24 	muli	r2,r2,1392
   898c0:	1885883a 	add	r2,r3,r2
   898c4:	1080a404 	addi	r2,r2,656
   898c8:	10800017 	ldw	r2,0(r2)
   898cc:	010002b4 	movhi	r4,10
   898d0:	212ca604 	addi	r4,r4,-19816
   898d4:	100b883a 	mov	r5,r2
   898d8:	008e5840 	call	8e584 <printf>
    		printf("      v addressible : %d (lines)\n", edid->descriptors[i].detailed_timing.height);
   898dc:	e0ffff17 	ldw	r3,-4(fp)
   898e0:	e0bffc17 	ldw	r2,-16(fp)
   898e4:	10815c24 	muli	r2,r2,1392
   898e8:	1885883a 	add	r2,r3,r2
   898ec:	10809d04 	addi	r2,r2,628
   898f0:	10800017 	ldw	r2,0(r2)
   898f4:	010002b4 	movhi	r4,10
   898f8:	212cae04 	addi	r4,r4,-19784
   898fc:	100b883a 	mov	r5,r2
   89900:	008e5840 	call	8e584 <printf>
    		printf("        blank       : %d (lines)\n", edid->descriptors[i].detailed_timing.v_blank);
   89904:	e0ffff17 	ldw	r3,-4(fp)
   89908:	e0bffc17 	ldw	r2,-16(fp)
   8990c:	10815c24 	muli	r2,r2,1392
   89910:	1885883a 	add	r2,r3,r2
   89914:	10809f04 	addi	r2,r2,636
   89918:	10800017 	ldw	r2,0(r2)
   8991c:	010002b4 	movhi	r4,10
   89920:	212cb704 	addi	r4,r4,-19748
   89924:	100b883a 	mov	r5,r2
   89928:	008e5840 	call	8e584 <printf>
    		printf("        fp          : %d (lines)\n", edid->descriptors[i].detailed_timing.v_fp);
   8992c:	e0ffff17 	ldw	r3,-4(fp)
   89930:	e0bffc17 	ldw	r2,-16(fp)
   89934:	10815c24 	muli	r2,r2,1392
   89938:	1885883a 	add	r2,r3,r2
   8993c:	1080a104 	addi	r2,r2,644
   89940:	10800017 	ldw	r2,0(r2)
   89944:	010002b4 	movhi	r4,10
   89948:	212cc004 	addi	r4,r4,-19712
   8994c:	100b883a 	mov	r5,r2
   89950:	008e5840 	call	8e584 <printf>
    		printf("        sync        : %d (lines)\n", edid->descriptors[i].detailed_timing.v_sync);
   89954:	e0ffff17 	ldw	r3,-4(fp)
   89958:	e0bffc17 	ldw	r2,-16(fp)
   8995c:	10815c24 	muli	r2,r2,1392
   89960:	1885883a 	add	r2,r3,r2
   89964:	1080a304 	addi	r2,r2,652
   89968:	10800017 	ldw	r2,0(r2)
   8996c:	010002b4 	movhi	r4,10
   89970:	212cc904 	addi	r4,r4,-19676
   89974:	100b883a 	mov	r5,r2
   89978:	008e5840 	call	8e584 <printf>
    		printf("        bp          : %d (lines)\n", edid->descriptors[i].detailed_timing.v_blank - edid->descriptors[i].detailed_timing.v_fp - edid->descriptors[i].detailed_timing.v_sync);
   8997c:	e0ffff17 	ldw	r3,-4(fp)
   89980:	e0bffc17 	ldw	r2,-16(fp)
   89984:	10815c24 	muli	r2,r2,1392
   89988:	1885883a 	add	r2,r3,r2
   8998c:	10809f04 	addi	r2,r2,636
   89990:	10c00017 	ldw	r3,0(r2)
   89994:	e13fff17 	ldw	r4,-4(fp)
   89998:	e0bffc17 	ldw	r2,-16(fp)
   8999c:	10815c24 	muli	r2,r2,1392
   899a0:	2085883a 	add	r2,r4,r2
   899a4:	1080a104 	addi	r2,r2,644
   899a8:	10800017 	ldw	r2,0(r2)
   899ac:	1887c83a 	sub	r3,r3,r2
   899b0:	e13fff17 	ldw	r4,-4(fp)
   899b4:	e0bffc17 	ldw	r2,-16(fp)
   899b8:	10815c24 	muli	r2,r2,1392
   899bc:	2085883a 	add	r2,r4,r2
   899c0:	1080a304 	addi	r2,r2,652
   899c4:	10800017 	ldw	r2,0(r2)
   899c8:	1885c83a 	sub	r2,r3,r2
   899cc:	010002b4 	movhi	r4,10
   899d0:	212cd204 	addi	r4,r4,-19640
   899d4:	100b883a 	mov	r5,r2
   899d8:	008e5840 	call	8e584 <printf>
    		printf("        size        : %d (mm)\n", edid->descriptors[i].detailed_timing.v_size);
   899dc:	e0ffff17 	ldw	r3,-4(fp)
   899e0:	e0bffc17 	ldw	r2,-16(fp)
   899e4:	10815c24 	muli	r2,r2,1392
   899e8:	1885883a 	add	r2,r3,r2
   899ec:	1080a504 	addi	r2,r2,660
   899f0:	10800017 	ldw	r2,0(r2)
   899f4:	010002b4 	movhi	r4,10
   899f8:	212ca604 	addi	r4,r4,-19816
   899fc:	100b883a 	mov	r5,r2
   89a00:	008e5840 	call	8e584 <printf>
    		printf("      border (L&R)  : %d (pixels)\n", edid->descriptors[i].detailed_timing.border_lr);
   89a04:	e0ffff17 	ldw	r3,-4(fp)
   89a08:	e0bffc17 	ldw	r2,-16(fp)
   89a0c:	10815c24 	muli	r2,r2,1392
   89a10:	1885883a 	add	r2,r3,r2
   89a14:	1080a604 	addi	r2,r2,664
   89a18:	10800017 	ldw	r2,0(r2)
   89a1c:	010002b4 	movhi	r4,10
   89a20:	212cdb04 	addi	r4,r4,-19604
   89a24:	100b883a 	mov	r5,r2
   89a28:	008e5840 	call	8e584 <printf>
    		printf("      border (T&B)  : %d (lines)\n", edid->descriptors[i].detailed_timing.border_tb);
   89a2c:	e0ffff17 	ldw	r3,-4(fp)
   89a30:	e0bffc17 	ldw	r2,-16(fp)
   89a34:	10815c24 	muli	r2,r2,1392
   89a38:	1885883a 	add	r2,r3,r2
   89a3c:	1080a704 	addi	r2,r2,668
   89a40:	10800017 	ldw	r2,0(r2)
   89a44:	010002b4 	movhi	r4,10
   89a48:	212ce404 	addi	r4,r4,-19568
   89a4c:	100b883a 	mov	r5,r2
   89a50:	008e5840 	call	8e584 <printf>
    		printf("      interlaced    : %d\n", edid->descriptors[i].detailed_timing.interlaced);
   89a54:	e0ffff17 	ldw	r3,-4(fp)
   89a58:	e0bffc17 	ldw	r2,-16(fp)
   89a5c:	10815c24 	muli	r2,r2,1392
   89a60:	1885883a 	add	r2,r3,r2
   89a64:	1080a804 	addi	r2,r2,672
   89a68:	10800017 	ldw	r2,0(r2)
   89a6c:	010002b4 	movhi	r4,10
   89a70:	212ced04 	addi	r4,r4,-19532
   89a74:	100b883a 	mov	r5,r2
   89a78:	008e5840 	call	8e584 <printf>

    		if (edid->descriptors[i].detailed_timing.stereo == STEREO_NONE) {
   89a7c:	e0ffff17 	ldw	r3,-4(fp)
   89a80:	e0bffc17 	ldw	r2,-16(fp)
   89a84:	10815c24 	muli	r2,r2,1392
   89a88:	1885883a 	add	r2,r3,r2
   89a8c:	1080a904 	addi	r2,r2,676
   89a90:	10800017 	ldw	r2,0(r2)
   89a94:	1000041e 	bne	r2,zero,89aa8 <edid_print_v14+0xbf8>
    			printf("      stereo        : none\n");
   89a98:	010002b4 	movhi	r4,10
   89a9c:	212cf404 	addi	r4,r4,-19504
   89aa0:	008e6680 	call	8e668 <puts>
   89aa4:	00004706 	br	89bc4 <edid_print_v14+0xd14>
    		} else {
        		printf("      stereo        : ");
   89aa8:	010002b4 	movhi	r4,10
   89aac:	212cfb04 	addi	r4,r4,-19476
   89ab0:	008e5840 	call	8e584 <printf>

        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_FIELD_SEQUENTIAL_RIGHT_SYNC)
   89ab4:	e0ffff17 	ldw	r3,-4(fp)
   89ab8:	e0bffc17 	ldw	r2,-16(fp)
   89abc:	10815c24 	muli	r2,r2,1392
   89ac0:	1885883a 	add	r2,r3,r2
   89ac4:	1080a904 	addi	r2,r2,676
   89ac8:	10800017 	ldw	r2,0(r2)
   89acc:	1080008c 	andi	r2,r2,2
   89ad0:	10000326 	beq	r2,zero,89ae0 <edid_print_v14+0xc30>
            		printf("field_seq_right ");
   89ad4:	010002b4 	movhi	r4,10
   89ad8:	212d0104 	addi	r4,r4,-19452
   89adc:	008e5840 	call	8e584 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_FIELD_SEQUENTIAL_LEFT_SYNC)
   89ae0:	e0ffff17 	ldw	r3,-4(fp)
   89ae4:	e0bffc17 	ldw	r2,-16(fp)
   89ae8:	10815c24 	muli	r2,r2,1392
   89aec:	1885883a 	add	r2,r3,r2
   89af0:	1080a904 	addi	r2,r2,676
   89af4:	10800017 	ldw	r2,0(r2)
   89af8:	1080010c 	andi	r2,r2,4
   89afc:	10000326 	beq	r2,zero,89b0c <edid_print_v14+0xc5c>
            		printf("field_seq_left ");
   89b00:	010002b4 	movhi	r4,10
   89b04:	212d0604 	addi	r4,r4,-19432
   89b08:	008e5840 	call	8e584 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_2WAY_INTERLEAVE_RIGHT_EVEN)
   89b0c:	e0ffff17 	ldw	r3,-4(fp)
   89b10:	e0bffc17 	ldw	r2,-16(fp)
   89b14:	10815c24 	muli	r2,r2,1392
   89b18:	1885883a 	add	r2,r3,r2
   89b1c:	1080a904 	addi	r2,r2,676
   89b20:	10800017 	ldw	r2,0(r2)
   89b24:	1080020c 	andi	r2,r2,8
   89b28:	10000326 	beq	r2,zero,89b38 <edid_print_v14+0xc88>
            		printf("2way_interleave_right ");
   89b2c:	010002b4 	movhi	r4,10
   89b30:	212d0a04 	addi	r4,r4,-19416
   89b34:	008e5840 	call	8e584 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_2WAY_INTERLEAVE_LEFT_EVEN)
   89b38:	e0ffff17 	ldw	r3,-4(fp)
   89b3c:	e0bffc17 	ldw	r2,-16(fp)
   89b40:	10815c24 	muli	r2,r2,1392
   89b44:	1885883a 	add	r2,r3,r2
   89b48:	1080a904 	addi	r2,r2,676
   89b4c:	10800017 	ldw	r2,0(r2)
   89b50:	1080040c 	andi	r2,r2,16
   89b54:	10000326 	beq	r2,zero,89b64 <edid_print_v14+0xcb4>
            		printf("2way_interleave_left ");
   89b58:	010002b4 	movhi	r4,10
   89b5c:	212d1004 	addi	r4,r4,-19392
   89b60:	008e5840 	call	8e584 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_4WAY_INTERLEAVE)
   89b64:	e0ffff17 	ldw	r3,-4(fp)
   89b68:	e0bffc17 	ldw	r2,-16(fp)
   89b6c:	10815c24 	muli	r2,r2,1392
   89b70:	1885883a 	add	r2,r3,r2
   89b74:	1080a904 	addi	r2,r2,676
   89b78:	10800017 	ldw	r2,0(r2)
   89b7c:	1080080c 	andi	r2,r2,32
   89b80:	10000326 	beq	r2,zero,89b90 <edid_print_v14+0xce0>
            		printf("4way_interleave ");
   89b84:	010002b4 	movhi	r4,10
   89b88:	212d1604 	addi	r4,r4,-19368
   89b8c:	008e5840 	call	8e584 <printf>
        		if (edid->descriptors[i].detailed_timing.stereo & STEREO_SIDE_BY_SIDE_INTERLEAVE)
   89b90:	e0ffff17 	ldw	r3,-4(fp)
   89b94:	e0bffc17 	ldw	r2,-16(fp)
   89b98:	10815c24 	muli	r2,r2,1392
   89b9c:	1885883a 	add	r2,r3,r2
   89ba0:	1080a904 	addi	r2,r2,676
   89ba4:	10800017 	ldw	r2,0(r2)
   89ba8:	1080100c 	andi	r2,r2,64
   89bac:	10000326 	beq	r2,zero,89bbc <edid_print_v14+0xd0c>
            		printf("side-by-side ");
   89bb0:	010002b4 	movhi	r4,10
   89bb4:	212d1b04 	addi	r4,r4,-19348
   89bb8:	008e5840 	call	8e584 <printf>

        		printf("\n");
   89bbc:	01000284 	movi	r4,10
   89bc0:	008e5c80 	call	8e5c8 <putchar>
    		}

    		if (edid->descriptors[i].detailed_timing.sync & A_COMPOSITE_SYNC) {
   89bc4:	e0ffff17 	ldw	r3,-4(fp)
   89bc8:	e0bffc17 	ldw	r2,-16(fp)
   89bcc:	10815c24 	muli	r2,r2,1392
   89bd0:	1885883a 	add	r2,r3,r2
   89bd4:	1080aa04 	addi	r2,r2,680
   89bd8:	10800017 	ldw	r2,0(r2)
   89bdc:	1080004c 	andi	r2,r2,1
   89be0:	10003626 	beq	r2,zero,89cbc <edid_print_v14+0xe0c>

    			printf("      analog sync   : composite");
   89be4:	010002b4 	movhi	r4,10
   89be8:	212d1f04 	addi	r4,r4,-19332
   89bec:	008e5840 	call	8e584 <printf>

        		if (edid->descriptors[i].detailed_timing.sync & A_COMPOSITE_SYNC)
   89bf0:	e0ffff17 	ldw	r3,-4(fp)
   89bf4:	e0bffc17 	ldw	r2,-16(fp)
   89bf8:	10815c24 	muli	r2,r2,1392
   89bfc:	1885883a 	add	r2,r3,r2
   89c00:	1080aa04 	addi	r2,r2,680
   89c04:	10800017 	ldw	r2,0(r2)
   89c08:	1080004c 	andi	r2,r2,1
   89c0c:	10000326 	beq	r2,zero,89c1c <edid_print_v14+0xd6c>
            		printf(" bipolar");
   89c10:	010002b4 	movhi	r4,10
   89c14:	212d2704 	addi	r4,r4,-19300
   89c18:	008e5840 	call	8e584 <printf>

        		if (edid->descriptors[i].detailed_timing.sync & A_BIPOLAR_SERRATION) {
   89c1c:	e0ffff17 	ldw	r3,-4(fp)
   89c20:	e0bffc17 	ldw	r2,-16(fp)
   89c24:	10815c24 	muli	r2,r2,1392
   89c28:	1885883a 	add	r2,r3,r2
   89c2c:	1080aa04 	addi	r2,r2,680
   89c30:	10800017 	ldw	r2,0(r2)
   89c34:	1080010c 	andi	r2,r2,4
   89c38:	10001a26 	beq	r2,zero,89ca4 <edid_print_v14+0xdf4>
            		printf(" with_serrations");
   89c3c:	010002b4 	movhi	r4,10
   89c40:	212d2a04 	addi	r4,r4,-19288
   89c44:	008e5840 	call	8e584 <printf>
        			if (edid->descriptors[i].detailed_timing.sync & A_BIPOLAR_SERRATION_SYNC_G)
   89c48:	e0ffff17 	ldw	r3,-4(fp)
   89c4c:	e0bffc17 	ldw	r2,-16(fp)
   89c50:	10815c24 	muli	r2,r2,1392
   89c54:	1885883a 	add	r2,r3,r2
   89c58:	1080aa04 	addi	r2,r2,680
   89c5c:	10800017 	ldw	r2,0(r2)
   89c60:	1080020c 	andi	r2,r2,8
   89c64:	10000326 	beq	r2,zero,89c74 <edid_print_v14+0xdc4>
						printf(" syn_on_green");
   89c68:	010002b4 	movhi	r4,10
   89c6c:	212d2f04 	addi	r4,r4,-19268
   89c70:	008e5840 	call	8e584 <printf>
					if (edid->descriptors[i].detailed_timing.sync & A_BIPOLAR_SERRATION_SYNC_RGB)
   89c74:	e0ffff17 	ldw	r3,-4(fp)
   89c78:	e0bffc17 	ldw	r2,-16(fp)
   89c7c:	10815c24 	muli	r2,r2,1392
   89c80:	1885883a 	add	r2,r3,r2
   89c84:	1080aa04 	addi	r2,r2,680
   89c88:	10800017 	ldw	r2,0(r2)
   89c8c:	1080040c 	andi	r2,r2,16
   89c90:	10000726 	beq	r2,zero,89cb0 <edid_print_v14+0xe00>
						printf(" syn_on_rgb");
   89c94:	010002b4 	movhi	r4,10
   89c98:	212d3304 	addi	r4,r4,-19252
   89c9c:	008e5840 	call	8e584 <printf>
   89ca0:	00000306 	br	89cb0 <edid_print_v14+0xe00>
        		} else {
            		printf(" without_serrations");
   89ca4:	010002b4 	movhi	r4,10
   89ca8:	212d3604 	addi	r4,r4,-19240
   89cac:	008e5840 	call	8e584 <printf>
        		}

				printf("\n");
   89cb0:	01000284 	movi	r4,10
   89cb4:	008e5c80 	call	8e5c8 <putchar>
   89cb8:	00023406 	br	8a58c <edid_print_v14+0x16dc>

    		} else if (edid->descriptors[i].detailed_timing.sync & D_COMPOSITE_SYNC) {
   89cbc:	e0ffff17 	ldw	r3,-4(fp)
   89cc0:	e0bffc17 	ldw	r2,-16(fp)
   89cc4:	10815c24 	muli	r2,r2,1392
   89cc8:	1885883a 	add	r2,r3,r2
   89ccc:	1080aa04 	addi	r2,r2,680
   89cd0:	10800017 	ldw	r2,0(r2)
   89cd4:	1080080c 	andi	r2,r2,32
   89cd8:	10001526 	beq	r2,zero,89d30 <edid_print_v14+0xe80>

    			printf("      digital sync  : composite");
   89cdc:	010002b4 	movhi	r4,10
   89ce0:	212d3b04 	addi	r4,r4,-19220
   89ce4:	008e5840 	call	8e584 <printf>

        		if (edid->descriptors[i].detailed_timing.sync & D_COMPOSITE_SERRATION)
   89ce8:	e0ffff17 	ldw	r3,-4(fp)
   89cec:	e0bffc17 	ldw	r2,-16(fp)
   89cf0:	10815c24 	muli	r2,r2,1392
   89cf4:	1885883a 	add	r2,r3,r2
   89cf8:	1080aa04 	addi	r2,r2,680
   89cfc:	10800017 	ldw	r2,0(r2)
   89d00:	1080100c 	andi	r2,r2,64
   89d04:	10000426 	beq	r2,zero,89d18 <edid_print_v14+0xe68>
            		printf(" with_serrations");
   89d08:	010002b4 	movhi	r4,10
   89d0c:	212d2a04 	addi	r4,r4,-19288
   89d10:	008e5840 	call	8e584 <printf>
   89d14:	00000306 	br	89d24 <edid_print_v14+0xe74>
        		else
        			printf(" without_serrations");
   89d18:	010002b4 	movhi	r4,10
   89d1c:	212d3604 	addi	r4,r4,-19240
   89d20:	008e5840 	call	8e584 <printf>

        		printf("\n");
   89d24:	01000284 	movi	r4,10
   89d28:	008e5c80 	call	8e5c8 <putchar>
   89d2c:	00021706 	br	8a58c <edid_print_v14+0x16dc>

    		} else if (edid->descriptors[i].detailed_timing.sync & D_SEPERATE_SYNC) {
   89d30:	e0ffff17 	ldw	r3,-4(fp)
   89d34:	e0bffc17 	ldw	r2,-16(fp)
   89d38:	10815c24 	muli	r2,r2,1392
   89d3c:	1885883a 	add	r2,r3,r2
   89d40:	1080aa04 	addi	r2,r2,680
   89d44:	10800017 	ldw	r2,0(r2)
   89d48:	1080200c 	andi	r2,r2,128
   89d4c:	10020f26 	beq	r2,zero,8a58c <edid_print_v14+0x16dc>

    			printf("      digital sync  : seperate");
   89d50:	010002b4 	movhi	r4,10
   89d54:	212d4304 	addi	r4,r4,-19188
   89d58:	008e5840 	call	8e584 <printf>

				if (edid->descriptors[i].detailed_timing.sync & D_SEPERATE_VSYNC_N)
   89d5c:	e0ffff17 	ldw	r3,-4(fp)
   89d60:	e0bffc17 	ldw	r2,-16(fp)
   89d64:	10815c24 	muli	r2,r2,1392
   89d68:	1885883a 	add	r2,r3,r2
   89d6c:	1080aa04 	addi	r2,r2,680
   89d70:	10800017 	ldw	r2,0(r2)
   89d74:	1080400c 	andi	r2,r2,256
   89d78:	10000426 	beq	r2,zero,89d8c <edid_print_v14+0xedc>
					printf(" vsync_n");
   89d7c:	010002b4 	movhi	r4,10
   89d80:	212d4b04 	addi	r4,r4,-19156
   89d84:	008e5840 	call	8e584 <printf>
   89d88:	00000306 	br	89d98 <edid_print_v14+0xee8>
				else
					printf(" vsync_p");
   89d8c:	010002b4 	movhi	r4,10
   89d90:	212d4e04 	addi	r4,r4,-19144
   89d94:	008e5840 	call	8e584 <printf>

				if (edid->descriptors[i].detailed_timing.sync & D_SEPERATE_HSYNC_N)
   89d98:	e0ffff17 	ldw	r3,-4(fp)
   89d9c:	e0bffc17 	ldw	r2,-16(fp)
   89da0:	10815c24 	muli	r2,r2,1392
   89da4:	1885883a 	add	r2,r3,r2
   89da8:	1080aa04 	addi	r2,r2,680
   89dac:	10800017 	ldw	r2,0(r2)
   89db0:	1081000c 	andi	r2,r2,1024
   89db4:	10000426 	beq	r2,zero,89dc8 <edid_print_v14+0xf18>
					printf(" hsync_n");
   89db8:	010002b4 	movhi	r4,10
   89dbc:	212d5104 	addi	r4,r4,-19132
   89dc0:	008e5840 	call	8e584 <printf>
   89dc4:	00000306 	br	89dd4 <edid_print_v14+0xf24>
				else
					printf(" hsync_p");
   89dc8:	010002b4 	movhi	r4,10
   89dcc:	212d5404 	addi	r4,r4,-19120
   89dd0:	008e5840 	call	8e584 <printf>

        		printf("\n");
   89dd4:	01000284 	movi	r4,10
   89dd8:	008e5c80 	call	8e5c8 <putchar>
   89ddc:	0001eb06 	br	8a58c <edid_print_v14+0x16dc>
    		}

    	} else if (edid->descriptors[i].type == DT_DISPLAY_DESCRIPTOR) {
   89de0:	e0ffff17 	ldw	r3,-4(fp)
   89de4:	e0bffc17 	ldw	r2,-16(fp)
   89de8:	10815c24 	muli	r2,r2,1392
   89dec:	1885883a 	add	r2,r3,r2
   89df0:	10809904 	addi	r2,r2,612
   89df4:	10800017 	ldw	r2,0(r2)
   89df8:	10800058 	cmpnei	r2,r2,1
   89dfc:	1001e31e 	bne	r2,zero,8a58c <edid_print_v14+0x16dc>

    		printf("\n  [%d] DD -- display descriptor\n", i);
   89e00:	010002b4 	movhi	r4,10
   89e04:	212f3304 	addi	r4,r4,-17204
   89e08:	e17ffc17 	ldw	r5,-16(fp)
   89e0c:	008e5840 	call	8e584 <printf>

        	switch (edid->descriptors[i].tag) {  // tag
   89e10:	e0ffff17 	ldw	r3,-4(fp)
   89e14:	e0bffc17 	ldw	r2,-16(fp)
   89e18:	10815c24 	muli	r2,r2,1392
   89e1c:	1885883a 	add	r2,r3,r2
   89e20:	10809a04 	addi	r2,r2,616
   89e24:	10800017 	ldw	r2,0(r2)
   89e28:	10c03ea0 	cmpeqi	r3,r2,250
   89e2c:	1801211e 	bne	r3,zero,8a2b4 <edid_print_v14+0x1404>
   89e30:	10c03ec8 	cmpgei	r3,r2,251
   89e34:	18000c1e 	bne	r3,zero,89e68 <edid_print_v14+0xfb8>
   89e38:	10c03de0 	cmpeqi	r3,r2,247
   89e3c:	18017b1e 	bne	r3,zero,8a42c <edid_print_v14+0x157c>
   89e40:	10c03e08 	cmpgei	r3,r2,248
   89e44:	1800031e 	bne	r3,zero,89e54 <edid_print_v14+0xfa4>
   89e48:	10800420 	cmpeqi	r2,r2,16
   89e4c:	1001ce1e 	bne	r2,zero,8a588 <edid_print_v14+0x16d8>
   89e50:	0001cc06 	br	8a584 <edid_print_v14+0x16d4>
   89e54:	10c03e20 	cmpeqi	r3,r2,248
   89e58:	1801701e 	bne	r3,zero,8a41c <edid_print_v14+0x156c>
   89e5c:	10803e60 	cmpeqi	r2,r2,249
   89e60:	10016a1e 	bne	r2,zero,8a40c <edid_print_v14+0x155c>
   89e64:	0001c706 	br	8a584 <edid_print_v14+0x16d4>
   89e68:	10c03f60 	cmpeqi	r3,r2,253
   89e6c:	18001f1e 	bne	r3,zero,89eec <edid_print_v14+0x103c>
   89e70:	10c03f88 	cmpgei	r3,r2,254
   89e74:	1800051e 	bne	r3,zero,89e8c <edid_print_v14+0xfdc>
   89e78:	10c03ee0 	cmpeqi	r3,r2,251
   89e7c:	1800c11e 	bne	r3,zero,8a184 <edid_print_v14+0x12d4>
   89e80:	10803f20 	cmpeqi	r2,r2,252
   89e84:	1000b51e 	bne	r2,zero,8a15c <edid_print_v14+0x12ac>
   89e88:	0001be06 	br	8a584 <edid_print_v14+0x16d4>
   89e8c:	10c03fa0 	cmpeqi	r3,r2,254
   89e90:	18000c1e 	bne	r3,zero,89ec4 <edid_print_v14+0x1014>
   89e94:	10803fe0 	cmpeqi	r2,r2,255
   89e98:	1001ba26 	beq	r2,zero,8a584 <edid_print_v14+0x16d4>
            case DTAG_PRODUCT_SERIAL:
            	printf("      product serial : %s\n", edid->descriptors[i].serial);
   89e9c:	e0bffc17 	ldw	r2,-16(fp)
   89ea0:	10815c24 	muli	r2,r2,1392
   89ea4:	10809b04 	addi	r2,r2,620
   89ea8:	e0ffff17 	ldw	r3,-4(fp)
   89eac:	1885883a 	add	r2,r3,r2
   89eb0:	010002b4 	movhi	r4,10
   89eb4:	212f3c04 	addi	r4,r4,-17168
   89eb8:	100b883a 	mov	r5,r2
   89ebc:	008e5840 	call	8e584 <printf>
                break;
   89ec0:	0001b206 	br	8a58c <edid_print_v14+0x16dc>
            case DTAG_DATA_STRING:
            	printf("      data string : %s\n", edid->descriptors[i].string);
   89ec4:	e0bffc17 	ldw	r2,-16(fp)
   89ec8:	10815c24 	muli	r2,r2,1392
   89ecc:	10809b04 	addi	r2,r2,620
   89ed0:	e0ffff17 	ldw	r3,-4(fp)
   89ed4:	1885883a 	add	r2,r3,r2
   89ed8:	010002b4 	movhi	r4,10
   89edc:	212f4304 	addi	r4,r4,-17140
   89ee0:	100b883a 	mov	r5,r2
   89ee4:	008e5840 	call	8e584 <printf>
                break;
   89ee8:	0001a806 	br	8a58c <edid_print_v14+0x16dc>
            case DTAG_RANGE_LIMIT:
            	edid->descriptors[i].tag = DTAG_RANGE_LIMIT;
   89eec:	e0ffff17 	ldw	r3,-4(fp)
   89ef0:	e0bffc17 	ldw	r2,-16(fp)
   89ef4:	10815c24 	muli	r2,r2,1392
   89ef8:	1885883a 	add	r2,r3,r2
   89efc:	10809a04 	addi	r2,r2,616
   89f00:	00c03f44 	movi	r3,253
   89f04:	10c00015 	stw	r3,0(r2)

        		printf("      range limits and additional timing ...\n");
   89f08:	010002b4 	movhi	r4,10
   89f0c:	212f4904 	addi	r4,r4,-17116
   89f10:	008e6680 	call	8e668 <puts>

        		printf("      horizonatal rate minimum : %d (kHz)\n", edid->descriptors[i].range_limits.h_min);
   89f14:	e0ffff17 	ldw	r3,-4(fp)
   89f18:	e0bffc17 	ldw	r2,-16(fp)
   89f1c:	10815c24 	muli	r2,r2,1392
   89f20:	1885883a 	add	r2,r3,r2
   89f24:	10809f04 	addi	r2,r2,636
   89f28:	10800017 	ldw	r2,0(r2)
   89f2c:	010002b4 	movhi	r4,10
   89f30:	212f5504 	addi	r4,r4,-17068
   89f34:	100b883a 	mov	r5,r2
   89f38:	008e5840 	call	8e584 <printf>
        		printf("      horizontal rate maximum  : %d (KHz)\n", edid->descriptors[i].range_limits.h_max);
   89f3c:	e0ffff17 	ldw	r3,-4(fp)
   89f40:	e0bffc17 	ldw	r2,-16(fp)
   89f44:	10815c24 	muli	r2,r2,1392
   89f48:	1885883a 	add	r2,r3,r2
   89f4c:	1080a004 	addi	r2,r2,640
   89f50:	10800017 	ldw	r2,0(r2)
   89f54:	010002b4 	movhi	r4,10
   89f58:	212f6004 	addi	r4,r4,-17024
   89f5c:	100b883a 	mov	r5,r2
   89f60:	008e5840 	call	8e584 <printf>

        		switch (edid->descriptors[i].range_limits.h_offset) {
   89f64:	e0ffff17 	ldw	r3,-4(fp)
   89f68:	e0bffc17 	ldw	r2,-16(fp)
   89f6c:	10815c24 	muli	r2,r2,1392
   89f70:	1885883a 	add	r2,r3,r2
   89f74:	10809c04 	addi	r2,r2,624
   89f78:	10800017 	ldw	r2,0(r2)
   89f7c:	10c00060 	cmpeqi	r3,r2,1
   89f80:	1800071e 	bne	r3,zero,89fa0 <edid_print_v14+0x10f0>
   89f84:	10c000a0 	cmpeqi	r3,r2,2
   89f88:	1800091e 	bne	r3,zero,89fb0 <edid_print_v14+0x1100>
   89f8c:	10000c1e 	bne	r2,zero,89fc0 <edid_print_v14+0x1110>
            	case HRO_ZERO:
            		printf("      horizontal rate offset   : no offset\n");
   89f90:	010002b4 	movhi	r4,10
   89f94:	212f6b04 	addi	r4,r4,-16980
   89f98:	008e6680 	call	8e668 <puts>
            		break;
   89f9c:	00000806 	br	89fc0 <edid_print_v14+0x1110>
            	case HRO_MAX_255_MIN_ZERO:
            		printf("      horizontal rate offset   : max)+255kHz\n");
   89fa0:	010002b4 	movhi	r4,10
   89fa4:	212f7604 	addi	r4,r4,-16936
   89fa8:	008e6680 	call	8e668 <puts>
            		break;
   89fac:	00000406 	br	89fc0 <edid_print_v14+0x1110>
            	case HRO_MAX_255_MIN_255:
            		printf("      horizontal rate offset   : max)+255kHz min)+255kHz\n");
   89fb0:	010002b4 	movhi	r4,10
   89fb4:	212f8204 	addi	r4,r4,-16888
   89fb8:	008e6680 	call	8e668 <puts>
            		break;
   89fbc:	0001883a 	nop
            	}

        		printf("      vertical rate minimum    : %d (Hz)\n", edid->descriptors[i].range_limits.v_min);
   89fc0:	e0ffff17 	ldw	r3,-4(fp)
   89fc4:	e0bffc17 	ldw	r2,-16(fp)
   89fc8:	10815c24 	muli	r2,r2,1392
   89fcc:	1885883a 	add	r2,r3,r2
   89fd0:	10809d04 	addi	r2,r2,628
   89fd4:	10800017 	ldw	r2,0(r2)
   89fd8:	010002b4 	movhi	r4,10
   89fdc:	212f9104 	addi	r4,r4,-16828
   89fe0:	100b883a 	mov	r5,r2
   89fe4:	008e5840 	call	8e584 <printf>
        		printf("      vertical rate maximum    : %d (Hz)\n", edid->descriptors[i].range_limits.v_max);
   89fe8:	e0ffff17 	ldw	r3,-4(fp)
   89fec:	e0bffc17 	ldw	r2,-16(fp)
   89ff0:	10815c24 	muli	r2,r2,1392
   89ff4:	1885883a 	add	r2,r3,r2
   89ff8:	10809e04 	addi	r2,r2,632
   89ffc:	10800017 	ldw	r2,0(r2)
   8a000:	010002b4 	movhi	r4,10
   8a004:	212f9c04 	addi	r4,r4,-16784
   8a008:	100b883a 	mov	r5,r2
   8a00c:	008e5840 	call	8e584 <printf>

        		switch (edid->descriptors[i].range_limits.v_offset) {
   8a010:	e0ffff17 	ldw	r3,-4(fp)
   8a014:	e0bffc17 	ldw	r2,-16(fp)
   8a018:	10815c24 	muli	r2,r2,1392
   8a01c:	1885883a 	add	r2,r3,r2
   8a020:	10809b04 	addi	r2,r2,620
   8a024:	10800017 	ldw	r2,0(r2)
   8a028:	10c00060 	cmpeqi	r3,r2,1
   8a02c:	1800071e 	bne	r3,zero,8a04c <edid_print_v14+0x119c>
   8a030:	10c000a0 	cmpeqi	r3,r2,2
   8a034:	1800091e 	bne	r3,zero,8a05c <edid_print_v14+0x11ac>
   8a038:	10000c1e 	bne	r2,zero,8a06c <edid_print_v14+0x11bc>
            	case VRO_ZERO:
            		printf("      vertical rate offset     : no offset\n");
   8a03c:	010002b4 	movhi	r4,10
   8a040:	212fa704 	addi	r4,r4,-16740
   8a044:	008e6680 	call	8e668 <puts>
            		break;
   8a048:	00000806 	br	8a06c <edid_print_v14+0x11bc>
            	case VRO_MAX_255_MIN_ZERO:
            		printf("      vertical rate offset     : max)+255Hz\n");
   8a04c:	010002b4 	movhi	r4,10
   8a050:	212fb204 	addi	r4,r4,-16696
   8a054:	008e6680 	call	8e668 <puts>
            		break;
   8a058:	00000406 	br	8a06c <edid_print_v14+0x11bc>
            	case VRO_MAX_255_MIN_255:
            		printf("      vertical rate offset     : max)+255Hz && min)+255Hz\n");
   8a05c:	010002b4 	movhi	r4,10
   8a060:	212fbd04 	addi	r4,r4,-16652
   8a064:	008e6680 	call	8e668 <puts>
            		break;
   8a068:	0001883a 	nop
            	}

        		printf("      pixel clock maximum      : %d (MHz)\n", edid->descriptors[i].range_limits.p_max);
   8a06c:	e0ffff17 	ldw	r3,-4(fp)
   8a070:	e0bffc17 	ldw	r2,-16(fp)
   8a074:	10815c24 	muli	r2,r2,1392
   8a078:	1885883a 	add	r2,r3,r2
   8a07c:	1080a104 	addi	r2,r2,644
   8a080:	10800017 	ldw	r2,0(r2)
   8a084:	010002b4 	movhi	r4,10
   8a088:	212fcc04 	addi	r4,r4,-16592
   8a08c:	100b883a 	mov	r5,r2
   8a090:	008e5840 	call	8e584 <printf>

                // additional timing support flags
            	if (edid->descriptors[i].range_limits.timing_flags == 0) {
   8a094:	e0ffff17 	ldw	r3,-4(fp)
   8a098:	e0bffc17 	ldw	r2,-16(fp)
   8a09c:	10815c24 	muli	r2,r2,1392
   8a0a0:	1885883a 	add	r2,r3,r2
   8a0a4:	1080a204 	addi	r2,r2,648
   8a0a8:	10800017 	ldw	r2,0(r2)
   8a0ac:	1000041e 	bne	r2,zero,8a0c0 <edid_print_v14+0x1210>
            		printf("      additional timing flags  : none\n");
   8a0b0:	010002b4 	movhi	r4,10
   8a0b4:	212fd704 	addi	r4,r4,-16548
   8a0b8:	008e6680 	call	8e668 <puts>
                		printf("CVT ");

            		printf("\n");
            	}

                break;
   8a0bc:	00013306 	br	8a58c <edid_print_v14+0x16dc>

                // additional timing support flags
            	if (edid->descriptors[i].range_limits.timing_flags == 0) {
            		printf("      additional timing flags  : none\n");
            	} else {
            		printf("      additional timing flags  : ");
   8a0c0:	010002b4 	movhi	r4,10
   8a0c4:	212fe104 	addi	r4,r4,-16508
   8a0c8:	008e5840 	call	8e584 <printf>

            		if (edid->descriptors[i].range_limits.timing_flags & TF_DEFAULT_GTF)
                		printf("default_GTF ");
            		if (edid->descriptors[i].range_limits.timing_flags & TF_RANGE_LIMITS)
   8a0cc:	e0ffff17 	ldw	r3,-4(fp)
   8a0d0:	e0bffc17 	ldw	r2,-16(fp)
   8a0d4:	10815c24 	muli	r2,r2,1392
   8a0d8:	1885883a 	add	r2,r3,r2
   8a0dc:	1080a204 	addi	r2,r2,648
   8a0e0:	10800017 	ldw	r2,0(r2)
   8a0e4:	1080004c 	andi	r2,r2,1
   8a0e8:	10000326 	beq	r2,zero,8a0f8 <edid_print_v14+0x1248>
                		printf("none ");
   8a0ec:	010002b4 	movhi	r4,10
   8a0f0:	212fea04 	addi	r4,r4,-16472
   8a0f4:	008e5840 	call	8e584 <printf>
            		if (edid->descriptors[i].range_limits.timing_flags & TF_SECOND_GTF)
   8a0f8:	e0ffff17 	ldw	r3,-4(fp)
   8a0fc:	e0bffc17 	ldw	r2,-16(fp)
   8a100:	10815c24 	muli	r2,r2,1392
   8a104:	1885883a 	add	r2,r3,r2
   8a108:	1080a204 	addi	r2,r2,648
   8a10c:	10800017 	ldw	r2,0(r2)
   8a110:	1080008c 	andi	r2,r2,2
   8a114:	10000326 	beq	r2,zero,8a124 <edid_print_v14+0x1274>
                		printf("second_GTF ");
   8a118:	010002b4 	movhi	r4,10
   8a11c:	212fec04 	addi	r4,r4,-16464
   8a120:	008e5840 	call	8e584 <printf>
            		if (edid->descriptors[i].range_limits.timing_flags & TF_CVT)
   8a124:	e0ffff17 	ldw	r3,-4(fp)
   8a128:	e0bffc17 	ldw	r2,-16(fp)
   8a12c:	10815c24 	muli	r2,r2,1392
   8a130:	1885883a 	add	r2,r3,r2
   8a134:	1080a204 	addi	r2,r2,648
   8a138:	10800017 	ldw	r2,0(r2)
   8a13c:	1080010c 	andi	r2,r2,4
   8a140:	10000326 	beq	r2,zero,8a150 <edid_print_v14+0x12a0>
                		printf("CVT ");
   8a144:	010002b4 	movhi	r4,10
   8a148:	212fef04 	addi	r4,r4,-16452
   8a14c:	008e5840 	call	8e584 <printf>

            		printf("\n");
   8a150:	01000284 	movi	r4,10
   8a154:	008e5c80 	call	8e5c8 <putchar>
            	}

                break;
   8a158:	00010c06 	br	8a58c <edid_print_v14+0x16dc>

            case DTAG_PRODUCT_NAME:
            	printf("      data string : %s\n", edid->descriptors[i].prod_name);
   8a15c:	e0bffc17 	ldw	r2,-16(fp)
   8a160:	10815c24 	muli	r2,r2,1392
   8a164:	10809b04 	addi	r2,r2,620
   8a168:	e0ffff17 	ldw	r3,-4(fp)
   8a16c:	1885883a 	add	r2,r3,r2
   8a170:	010002b4 	movhi	r4,10
   8a174:	212f4304 	addi	r4,r4,-17140
   8a178:	100b883a 	mov	r5,r2
   8a17c:	008e5840 	call	8e584 <printf>
                break;
   8a180:	00010206 	br	8a58c <edid_print_v14+0x16dc>
            case DTAG_COLOR_POINT:
            	printf("      color point ...\n");
   8a184:	010002b4 	movhi	r4,10
   8a188:	212ff104 	addi	r4,r4,-16444
   8a18c:	008e6680 	call	8e668 <puts>

            	printf("        white point 0 : index)%d x)%d y)%d gamma)%.2f\n",
            		edid->descriptors[i].white_point[0].index,
   8a190:	e0ffff17 	ldw	r3,-4(fp)
            	printf("      data string : %s\n", edid->descriptors[i].prod_name);
                break;
            case DTAG_COLOR_POINT:
            	printf("      color point ...\n");

            	printf("        white point 0 : index)%d x)%d y)%d gamma)%.2f\n",
   8a194:	e0bffc17 	ldw	r2,-16(fp)
   8a198:	10815c24 	muli	r2,r2,1392
   8a19c:	1885883a 	add	r2,r3,r2
   8a1a0:	10809b04 	addi	r2,r2,620
   8a1a4:	14800017 	ldw	r18,0(r2)
            		edid->descriptors[i].white_point[0].index,
					edid->descriptors[i].white_point[0].x,
   8a1a8:	e0ffff17 	ldw	r3,-4(fp)
            	printf("      data string : %s\n", edid->descriptors[i].prod_name);
                break;
            case DTAG_COLOR_POINT:
            	printf("      color point ...\n");

            	printf("        white point 0 : index)%d x)%d y)%d gamma)%.2f\n",
   8a1ac:	e0bffc17 	ldw	r2,-16(fp)
   8a1b0:	10815c24 	muli	r2,r2,1392
   8a1b4:	1885883a 	add	r2,r3,r2
   8a1b8:	10809c04 	addi	r2,r2,624
   8a1bc:	14400017 	ldw	r17,0(r2)
            		edid->descriptors[i].white_point[0].index,
					edid->descriptors[i].white_point[0].x,
					edid->descriptors[i].white_point[0].y,
   8a1c0:	e0ffff17 	ldw	r3,-4(fp)
            	printf("      data string : %s\n", edid->descriptors[i].prod_name);
                break;
            case DTAG_COLOR_POINT:
            	printf("      color point ...\n");

            	printf("        white point 0 : index)%d x)%d y)%d gamma)%.2f\n",
   8a1c4:	e0bffc17 	ldw	r2,-16(fp)
   8a1c8:	10815c24 	muli	r2,r2,1392
   8a1cc:	1885883a 	add	r2,r3,r2
   8a1d0:	10809d04 	addi	r2,r2,628
   8a1d4:	14000017 	ldw	r16,0(r2)
            		edid->descriptors[i].white_point[0].index,
					edid->descriptors[i].white_point[0].x,
					edid->descriptors[i].white_point[0].y,
					edid->descriptors[i].white_point[0].gamma);
   8a1d8:	e0ffff17 	ldw	r3,-4(fp)
   8a1dc:	e0bffc17 	ldw	r2,-16(fp)
   8a1e0:	10815c24 	muli	r2,r2,1392
   8a1e4:	1885883a 	add	r2,r3,r2
   8a1e8:	10c09e04 	addi	r3,r2,632
   8a1ec:	18800017 	ldw	r2,0(r3)
            	printf("      data string : %s\n", edid->descriptors[i].prod_name);
                break;
            case DTAG_COLOR_POINT:
            	printf("      color point ...\n");

            	printf("        white point 0 : index)%d x)%d y)%d gamma)%.2f\n",
   8a1f0:	1009883a 	mov	r4,r2
   8a1f4:	008ccc80 	call	8ccc8 <__extendsfdf2>
   8a1f8:	1009883a 	mov	r4,r2
   8a1fc:	180b883a 	mov	r5,r3
   8a200:	d9000015 	stw	r4,0(sp)
   8a204:	d9400115 	stw	r5,4(sp)
   8a208:	010002b4 	movhi	r4,10
   8a20c:	212ff704 	addi	r4,r4,-16420
   8a210:	900b883a 	mov	r5,r18
   8a214:	880d883a 	mov	r6,r17
   8a218:	800f883a 	mov	r7,r16
   8a21c:	008e5840 	call	8e584 <printf>
					edid->descriptors[i].white_point[0].x,
					edid->descriptors[i].white_point[0].y,
					edid->descriptors[i].white_point[0].gamma);

            	printf("        white point 1 : index)%d x)%d y)%d gamma)%.2f\n",
            		edid->descriptors[i].white_point[1].index,
   8a220:	e0ffff17 	ldw	r3,-4(fp)
            		edid->descriptors[i].white_point[0].index,
					edid->descriptors[i].white_point[0].x,
					edid->descriptors[i].white_point[0].y,
					edid->descriptors[i].white_point[0].gamma);

            	printf("        white point 1 : index)%d x)%d y)%d gamma)%.2f\n",
   8a224:	e0bffc17 	ldw	r2,-16(fp)
   8a228:	10815c24 	muli	r2,r2,1392
   8a22c:	1885883a 	add	r2,r3,r2
   8a230:	10809f04 	addi	r2,r2,636
   8a234:	14800017 	ldw	r18,0(r2)
            		edid->descriptors[i].white_point[1].index,
					edid->descriptors[i].white_point[1].x,
   8a238:	e0ffff17 	ldw	r3,-4(fp)
            		edid->descriptors[i].white_point[0].index,
					edid->descriptors[i].white_point[0].x,
					edid->descriptors[i].white_point[0].y,
					edid->descriptors[i].white_point[0].gamma);

            	printf("        white point 1 : index)%d x)%d y)%d gamma)%.2f\n",
   8a23c:	e0bffc17 	ldw	r2,-16(fp)
   8a240:	10815c24 	muli	r2,r2,1392
   8a244:	1885883a 	add	r2,r3,r2
   8a248:	1080a004 	addi	r2,r2,640
   8a24c:	14400017 	ldw	r17,0(r2)
            		edid->descriptors[i].white_point[1].index,
					edid->descriptors[i].white_point[1].x,
					edid->descriptors[i].white_point[1].y,
   8a250:	e0ffff17 	ldw	r3,-4(fp)
            		edid->descriptors[i].white_point[0].index,
					edid->descriptors[i].white_point[0].x,
					edid->descriptors[i].white_point[0].y,
					edid->descriptors[i].white_point[0].gamma);

            	printf("        white point 1 : index)%d x)%d y)%d gamma)%.2f\n",
   8a254:	e0bffc17 	ldw	r2,-16(fp)
   8a258:	10815c24 	muli	r2,r2,1392
   8a25c:	1885883a 	add	r2,r3,r2
   8a260:	1080a104 	addi	r2,r2,644
   8a264:	14000017 	ldw	r16,0(r2)
            		edid->descriptors[i].white_point[1].index,
					edid->descriptors[i].white_point[1].x,
					edid->descriptors[i].white_point[1].y,
					edid->descriptors[i].white_point[1].gamma);
   8a268:	e0ffff17 	ldw	r3,-4(fp)
   8a26c:	e0bffc17 	ldw	r2,-16(fp)
   8a270:	10815c24 	muli	r2,r2,1392
   8a274:	1885883a 	add	r2,r3,r2
   8a278:	10c0a204 	addi	r3,r2,648
   8a27c:	18800017 	ldw	r2,0(r3)
            		edid->descriptors[i].white_point[0].index,
					edid->descriptors[i].white_point[0].x,
					edid->descriptors[i].white_point[0].y,
					edid->descriptors[i].white_point[0].gamma);

            	printf("        white point 1 : index)%d x)%d y)%d gamma)%.2f\n",
   8a280:	1009883a 	mov	r4,r2
   8a284:	008ccc80 	call	8ccc8 <__extendsfdf2>
   8a288:	1009883a 	mov	r4,r2
   8a28c:	180b883a 	mov	r5,r3
   8a290:	d9000015 	stw	r4,0(sp)
   8a294:	d9400115 	stw	r5,4(sp)
   8a298:	010002b4 	movhi	r4,10
   8a29c:	21300504 	addi	r4,r4,-16364
   8a2a0:	900b883a 	mov	r5,r18
   8a2a4:	880d883a 	mov	r6,r17
   8a2a8:	800f883a 	mov	r7,r16
   8a2ac:	008e5840 	call	8e584 <printf>
            		edid->descriptors[i].white_point[1].index,
					edid->descriptors[i].white_point[1].x,
					edid->descriptors[i].white_point[1].y,
					edid->descriptors[i].white_point[1].gamma);

                break;
   8a2b0:	0000b606 	br	8a58c <edid_print_v14+0x16dc>

            case DTAG_STANDARD_TIMING:
            {
            	int j;

            	printf("      extra standard timing ...\n");
   8a2b4:	010002b4 	movhi	r4,10
   8a2b8:	21301304 	addi	r4,r4,-16308
   8a2bc:	008e6680 	call	8e668 <puts>

            	for (j = 0; j < 6; ++j) {
   8a2c0:	e03ffd15 	stw	zero,-12(fp)
   8a2c4:	00004d06 	br	8a3fc <edid_print_v14+0x154c>
            		if (edid->descriptors[i].extra_standard_timings[j].refresh_rate) {
   8a2c8:	e0ffff17 	ldw	r3,-4(fp)
   8a2cc:	e13ffd17 	ldw	r4,-12(fp)
   8a2d0:	e0bffc17 	ldw	r2,-16(fp)
   8a2d4:	21000324 	muli	r4,r4,12
   8a2d8:	10815c24 	muli	r2,r2,1392
   8a2dc:	2085883a 	add	r2,r4,r2
   8a2e0:	1885883a 	add	r2,r3,r2
   8a2e4:	1080ae04 	addi	r2,r2,696
   8a2e8:	10800017 	ldw	r2,0(r2)
   8a2ec:	10004026 	beq	r2,zero,8a3f0 <edid_print_v14+0x1540>
            			printf("  [%02d] %03d @ %02d Hz ", j + 9, edid->descriptors[i].extra_standard_timings[j].horizontal, edid->descriptors[i].extra_standard_timings[j].refresh_rate);
   8a2f0:	e0bffd17 	ldw	r2,-12(fp)
   8a2f4:	11400244 	addi	r5,r2,9
   8a2f8:	e0ffff17 	ldw	r3,-4(fp)
   8a2fc:	e13ffd17 	ldw	r4,-12(fp)
   8a300:	e0bffc17 	ldw	r2,-16(fp)
   8a304:	21000324 	muli	r4,r4,12
   8a308:	10815c24 	muli	r2,r2,1392
   8a30c:	2085883a 	add	r2,r4,r2
   8a310:	1885883a 	add	r2,r3,r2
   8a314:	1080ac04 	addi	r2,r2,688
   8a318:	10c00017 	ldw	r3,0(r2)
   8a31c:	e13fff17 	ldw	r4,-4(fp)
   8a320:	e1bffd17 	ldw	r6,-12(fp)
   8a324:	e0bffc17 	ldw	r2,-16(fp)
   8a328:	31800324 	muli	r6,r6,12
   8a32c:	10815c24 	muli	r2,r2,1392
   8a330:	3085883a 	add	r2,r6,r2
   8a334:	2085883a 	add	r2,r4,r2
   8a338:	1080ae04 	addi	r2,r2,696
   8a33c:	10800017 	ldw	r2,0(r2)
   8a340:	010002b4 	movhi	r4,10
   8a344:	212f2104 	addi	r4,r4,-17276
   8a348:	180d883a 	mov	r6,r3
   8a34c:	100f883a 	mov	r7,r2
   8a350:	008e5840 	call	8e584 <printf>
            			switch (edid->descriptors[i].extra_standard_timings[j].aspect_ratio) {
   8a354:	e0ffff17 	ldw	r3,-4(fp)
   8a358:	e13ffd17 	ldw	r4,-12(fp)
   8a35c:	e0bffc17 	ldw	r2,-16(fp)
   8a360:	21000324 	muli	r4,r4,12
   8a364:	10815c24 	muli	r2,r2,1392
   8a368:	2085883a 	add	r2,r4,r2
   8a36c:	1885883a 	add	r2,r3,r2
   8a370:	1080ad04 	addi	r2,r2,692
   8a374:	10800017 	ldw	r2,0(r2)
   8a378:	10c00060 	cmpeqi	r3,r2,1
   8a37c:	18000d1e 	bne	r3,zero,8a3b4 <edid_print_v14+0x1504>
   8a380:	10c00088 	cmpgei	r3,r2,2
   8a384:	1800021e 	bne	r3,zero,8a390 <edid_print_v14+0x14e0>
   8a388:	10000626 	beq	r2,zero,8a3a4 <edid_print_v14+0x14f4>
   8a38c:	00001506 	br	8a3e4 <edid_print_v14+0x1534>
   8a390:	10c000a0 	cmpeqi	r3,r2,2
   8a394:	18000b1e 	bne	r3,zero,8a3c4 <edid_print_v14+0x1514>
   8a398:	108000e0 	cmpeqi	r2,r2,3
   8a39c:	10000d1e 	bne	r2,zero,8a3d4 <edid_print_v14+0x1524>
   8a3a0:	00001006 	br	8a3e4 <edid_print_v14+0x1534>
            			case ST_AR_16_10:
            				printf("16:10\n");
   8a3a4:	010002b4 	movhi	r4,10
   8a3a8:	212f2804 	addi	r4,r4,-17248
   8a3ac:	008e6680 	call	8e668 <puts>
            				break;
   8a3b0:	00000f06 	br	8a3f0 <edid_print_v14+0x1540>
            			case ST_AR_4_3:
            				printf("4:3\n");
   8a3b4:	010002b4 	movhi	r4,10
   8a3b8:	212f2a04 	addi	r4,r4,-17240
   8a3bc:	008e6680 	call	8e668 <puts>
            				break;
   8a3c0:	00000b06 	br	8a3f0 <edid_print_v14+0x1540>
            			case ST_AR_5_4:
            				printf("5:4\n");
   8a3c4:	010002b4 	movhi	r4,10
   8a3c8:	212f2b04 	addi	r4,r4,-17236
   8a3cc:	008e6680 	call	8e668 <puts>
            				break;
   8a3d0:	00000706 	br	8a3f0 <edid_print_v14+0x1540>
            			case ST_AR_16_9:
            				printf("16:9\n");
   8a3d4:	010002b4 	movhi	r4,10
   8a3d8:	212f2c04 	addi	r4,r4,-17232
   8a3dc:	008e6680 	call	8e668 <puts>
            				break;
   8a3e0:	00000306 	br	8a3f0 <edid_print_v14+0x1540>
            			default:
            				printf("\n");
   8a3e4:	01000284 	movi	r4,10
   8a3e8:	008e5c80 	call	8e5c8 <putchar>
            				break;
   8a3ec:	0001883a 	nop
            {
            	int j;

            	printf("      extra standard timing ...\n");

            	for (j = 0; j < 6; ++j) {
   8a3f0:	e0bffd17 	ldw	r2,-12(fp)
   8a3f4:	10800044 	addi	r2,r2,1
   8a3f8:	e0bffd15 	stw	r2,-12(fp)
   8a3fc:	e0bffd17 	ldw	r2,-12(fp)
   8a400:	10800190 	cmplti	r2,r2,6
   8a404:	103fb01e 	bne	r2,zero,8a2c8 <edid_print_v14+0x1418>
            				break;
            			}
            		}
            	}

                break;
   8a408:	00006006 	br	8a58c <edid_print_v14+0x16dc>
            }

            case DTAG_DCM_DATA:
            	// display color management data
            	printf("      DCM -- display color management data ... (skipped)\n");
   8a40c:	010002b4 	movhi	r4,10
   8a410:	21301b04 	addi	r4,r4,-16276
   8a414:	008e6680 	call	8e668 <puts>
            	break;
   8a418:	00005c06 	br	8a58c <edid_print_v14+0x16dc>

            case DTAG_CVT_TIMING:
            	printf("      CVT -- coordinated video timing ... (skipped)\n");
   8a41c:	010002b4 	movhi	r4,10
   8a420:	21302a04 	addi	r4,r4,-16216
   8a424:	008e6680 	call	8e668 <puts>
                break;
   8a428:	00005806 	br	8a58c <edid_print_v14+0x16dc>
            case DTAG_ESTABLISHED_TIMING_III:
            {
            	int j ;

            	printf("      established timing 3 ...\n");
   8a42c:	010002b4 	movhi	r4,10
   8a430:	21303704 	addi	r4,r4,-16164
   8a434:	008e6680 	call	8e668 <puts>

            	for (j = 0; j < 17; ++j) {
   8a438:	e03ffe15 	stw	zero,-8(fp)
   8a43c:	00004d06 	br	8a574 <edid_print_v14+0x16c4>
            		if (edid->descriptors[i].timing_3[j].valid)
   8a440:	e0ffff17 	ldw	r3,-4(fp)
   8a444:	e13ffe17 	ldw	r4,-8(fp)
   8a448:	e0bffc17 	ldw	r2,-16(fp)
   8a44c:	21000624 	muli	r4,r4,24
   8a450:	10815c24 	muli	r2,r2,1392
   8a454:	2085883a 	add	r2,r4,r2
   8a458:	1885883a 	add	r2,r3,r2
   8a45c:	1080d504 	addi	r2,r2,852
   8a460:	10800017 	ldw	r2,0(r2)
   8a464:	10004026 	beq	r2,zero,8a568 <edid_print_v14+0x16b8>
            			printf("  [%02d] %03d x %03d @ %02d Hz %s %s\n", i, edid->descriptors[i].timing_3[j].width, edid->descriptors[i].timing_3[j].height, edid->descriptors[i].timing_3[j].refresh, edid->descriptors[i].timing_3[j].interlaced ? "I" : " ", edid->descriptors[i].timing_3[j].rb ? "RB" : " ");
   8a468:	e0ffff17 	ldw	r3,-4(fp)
   8a46c:	e13ffe17 	ldw	r4,-8(fp)
   8a470:	e0bffc17 	ldw	r2,-16(fp)
   8a474:	21000624 	muli	r4,r4,24
   8a478:	10815c24 	muli	r2,r2,1392
   8a47c:	2085883a 	add	r2,r4,r2
   8a480:	1885883a 	add	r2,r3,r2
   8a484:	1080d604 	addi	r2,r2,856
   8a488:	11800017 	ldw	r6,0(r2)
   8a48c:	e0ffff17 	ldw	r3,-4(fp)
   8a490:	e13ffe17 	ldw	r4,-8(fp)
   8a494:	e0bffc17 	ldw	r2,-16(fp)
   8a498:	21000624 	muli	r4,r4,24
   8a49c:	10815c24 	muli	r2,r2,1392
   8a4a0:	2085883a 	add	r2,r4,r2
   8a4a4:	1885883a 	add	r2,r3,r2
   8a4a8:	1080d704 	addi	r2,r2,860
   8a4ac:	11c00017 	ldw	r7,0(r2)
   8a4b0:	e0ffff17 	ldw	r3,-4(fp)
   8a4b4:	e13ffe17 	ldw	r4,-8(fp)
   8a4b8:	e0bffc17 	ldw	r2,-16(fp)
   8a4bc:	21000624 	muli	r4,r4,24
   8a4c0:	10815c24 	muli	r2,r2,1392
   8a4c4:	2085883a 	add	r2,r4,r2
   8a4c8:	1885883a 	add	r2,r3,r2
   8a4cc:	1080d804 	addi	r2,r2,864
   8a4d0:	11000017 	ldw	r4,0(r2)
   8a4d4:	e0ffff17 	ldw	r3,-4(fp)
   8a4d8:	e17ffe17 	ldw	r5,-8(fp)
   8a4dc:	e0bffc17 	ldw	r2,-16(fp)
   8a4e0:	29400624 	muli	r5,r5,24
   8a4e4:	10815c24 	muli	r2,r2,1392
   8a4e8:	2885883a 	add	r2,r5,r2
   8a4ec:	1885883a 	add	r2,r3,r2
   8a4f0:	1080d904 	addi	r2,r2,868
   8a4f4:	10800017 	ldw	r2,0(r2)
   8a4f8:	10000326 	beq	r2,zero,8a508 <edid_print_v14+0x1658>
   8a4fc:	00c002b4 	movhi	r3,10
   8a500:	18f03f04 	addi	r3,r3,-16132
   8a504:	00000206 	br	8a510 <edid_print_v14+0x1660>
   8a508:	00c002b4 	movhi	r3,10
   8a50c:	18e88c04 	addi	r3,r3,-24016
   8a510:	e17fff17 	ldw	r5,-4(fp)
   8a514:	e23ffe17 	ldw	r8,-8(fp)
   8a518:	e0bffc17 	ldw	r2,-16(fp)
   8a51c:	42000624 	muli	r8,r8,24
   8a520:	10815c24 	muli	r2,r2,1392
   8a524:	4085883a 	add	r2,r8,r2
   8a528:	2885883a 	add	r2,r5,r2
   8a52c:	1080da04 	addi	r2,r2,872
   8a530:	10800017 	ldw	r2,0(r2)
   8a534:	10000326 	beq	r2,zero,8a544 <edid_print_v14+0x1694>
   8a538:	008002b4 	movhi	r2,10
   8a53c:	10b04004 	addi	r2,r2,-16128
   8a540:	00000206 	br	8a54c <edid_print_v14+0x169c>
   8a544:	008002b4 	movhi	r2,10
   8a548:	10a88c04 	addi	r2,r2,-24016
   8a54c:	d9000015 	stw	r4,0(sp)
   8a550:	d8c00115 	stw	r3,4(sp)
   8a554:	d8800215 	stw	r2,8(sp)
   8a558:	010002b4 	movhi	r4,10
   8a55c:	21304104 	addi	r4,r4,-16124
   8a560:	e17ffc17 	ldw	r5,-16(fp)
   8a564:	008e5840 	call	8e584 <printf>
            {
            	int j ;

            	printf("      established timing 3 ...\n");

            	for (j = 0; j < 17; ++j) {
   8a568:	e0bffe17 	ldw	r2,-8(fp)
   8a56c:	10800044 	addi	r2,r2,1
   8a570:	e0bffe15 	stw	r2,-8(fp)
   8a574:	e0bffe17 	ldw	r2,-8(fp)
   8a578:	10800450 	cmplti	r2,r2,17
   8a57c:	103fb01e 	bne	r2,zero,8a440 <edid_print_v14+0x1590>
            		if (edid->descriptors[i].timing_3[j].valid)
            			printf("  [%02d] %03d x %03d @ %02d Hz %s %s\n", i, edid->descriptors[i].timing_3[j].width, edid->descriptors[i].timing_3[j].height, edid->descriptors[i].timing_3[j].refresh, edid->descriptors[i].timing_3[j].interlaced ? "I" : " ", edid->descriptors[i].timing_3[j].rb ? "RB" : " ");
            	}

            	break;
   8a580:	00000206 	br	8a58c <edid_print_v14+0x16dc>
            }
            case DTAG_DUMMY:
                break;
            default:
                break;
   8a584:	00000106 	br	8a58c <edid_print_v14+0x16dc>
            	}

            	break;
            }
            case DTAG_DUMMY:
                break;
   8a588:	0001883a 	nop
			}
		}
	}

	printf("\ndescriptors ...\n");
	for (i = 0; i < 4; ++i) {
   8a58c:	e0bffc17 	ldw	r2,-16(fp)
   8a590:	10800044 	addi	r2,r2,1
   8a594:	e0bffc15 	stw	r2,-16(fp)
   8a598:	e0bffc17 	ldw	r2,-16(fp)
   8a59c:	10800110 	cmplti	r2,r2,4
   8a5a0:	103c6f1e 	bne	r2,zero,89760 <edid_print_v14+0x8b0>
                break;
            }
    	}
	}

	for (i = 0; i < 8; ++i) {
   8a5a4:	e03ffc15 	stw	zero,-16(fp)
   8a5a8:	00000f06 	br	8a5e8 <edid_print_v14+0x1738>
		switch (edid->ext_data[i].ext_tag) {
   8a5ac:	e0ffff17 	ldw	r3,-4(fp)
   8a5b0:	e0bffc17 	ldw	r2,-16(fp)
   8a5b4:	10816f24 	muli	r2,r2,1468
   8a5b8:	1885883a 	add	r2,r3,r2
   8a5bc:	10860b04 	addi	r2,r2,6188
   8a5c0:	10800017 	ldw	r2,0(r2)
   8a5c4:	108000a0 	cmpeqi	r2,r2,2
   8a5c8:	10000426 	beq	r2,zero,8a5dc <edid_print_v14+0x172c>
		case EDID_EXT_TAG_CEA:
			edid_print_cea(edid, i);
   8a5cc:	e13fff17 	ldw	r4,-4(fp)
   8a5d0:	e17ffc17 	ldw	r5,-16(fp)
   8a5d4:	00833e00 	call	833e0 <edid_print_cea>
			break;
   8a5d8:	0001883a 	nop
                break;
            }
    	}
	}

	for (i = 0; i < 8; ++i) {
   8a5dc:	e0bffc17 	ldw	r2,-16(fp)
   8a5e0:	10800044 	addi	r2,r2,1
   8a5e4:	e0bffc15 	stw	r2,-16(fp)
   8a5e8:	e0bffc17 	ldw	r2,-16(fp)
   8a5ec:	10800210 	cmplti	r2,r2,8
   8a5f0:	103fee1e 	bne	r2,zero,8a5ac <edid_print_v14+0x16fc>
		case EDID_EXT_TAG_CEA:
			edid_print_cea(edid, i);
			break;
		}
	}
}
   8a5f4:	e037883a 	mov	sp,fp
   8a5f8:	dfc00417 	ldw	ra,16(sp)
   8a5fc:	df000317 	ldw	fp,12(sp)
   8a600:	dc800217 	ldw	r18,8(sp)
   8a604:	dc400117 	ldw	r17,4(sp)
   8a608:	dc000017 	ldw	r16,0(sp)
   8a60c:	dec00504 	addi	sp,sp,20
   8a610:	f800283a 	ret

0008a614 <reg_read>:
#include "encoder.h"

//#define REG_ACCESS_UDELAY  5000

int reg_read(struct hdmi_encoder *ec, int reg, void *data)
{
   8a614:	defff904 	addi	sp,sp,-28
   8a618:	dfc00615 	stw	ra,24(sp)
   8a61c:	df000515 	stw	fp,20(sp)
   8a620:	df000504 	addi	fp,sp,20
   8a624:	e13ffd15 	stw	r4,-12(fp)
   8a628:	e17ffe15 	stw	r5,-8(fp)
   8a62c:	e1bfff15 	stw	r6,-4(fp)
   8a630:	d83bb615 	stw	zero,-4392(sp)
	bool r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, (alt_u8)reg, (alt_u8 *)data);
   8a634:	e0bffd17 	ldw	r2,-12(fp)
   8a638:	10800017 	ldw	r2,0(r2)
   8a63c:	10c03fcc 	andi	r3,r2,255
   8a640:	18c0201c 	xori	r3,r3,128
   8a644:	18ffe004 	addi	r3,r3,-128
   8a648:	e0bffe17 	ldw	r2,-8(fp)
   8a64c:	10803fcc 	andi	r2,r2,255
   8a650:	e13fff17 	ldw	r4,-4(fp)
   8a654:	d9000015 	stw	r4,0(sp)
   8a658:	01000434 	movhi	r4,16
   8a65c:	21041004 	addi	r4,r4,4160
   8a660:	01400434 	movhi	r5,16
   8a664:	29441404 	addi	r5,r5,4176
   8a668:	180d883a 	mov	r6,r3
   8a66c:	100f883a 	mov	r7,r2
   8a670:	008ab380 	call	8ab38 <I2C_Read>
   8a674:	e0bffc15 	stw	r2,-16(fp)
	if (!r)
   8a678:	e0bffc17 	ldw	r2,-16(fp)
   8a67c:	1000021e 	bne	r2,zero,8a688 <reg_read+0x74>
		return -1;
   8a680:	00bfffc4 	movi	r2,-1
   8a684:	00000106 	br	8a68c <reg_read+0x78>

	//usleep(REG_ACCESS_UDELAY);

	return 0;
   8a688:	0005883a 	mov	r2,zero
}
   8a68c:	e037883a 	mov	sp,fp
   8a690:	dfc00117 	ldw	ra,4(sp)
   8a694:	df000017 	ldw	fp,0(sp)
   8a698:	dec00204 	addi	sp,sp,8
   8a69c:	f800283a 	ret

0008a6a0 <reg_write>:

int reg_write(struct hdmi_encoder *ec, int reg, int data)
{
   8a6a0:	defff904 	addi	sp,sp,-28
   8a6a4:	dfc00615 	stw	ra,24(sp)
   8a6a8:	df000515 	stw	fp,20(sp)
   8a6ac:	df000504 	addi	fp,sp,20
   8a6b0:	e13ffd15 	stw	r4,-12(fp)
   8a6b4:	e17ffe15 	stw	r5,-8(fp)
   8a6b8:	e1bfff15 	stw	r6,-4(fp)
   8a6bc:	d83bb615 	stw	zero,-4392(sp)
	//printf("[%02x] <- %02x\n", reg, data);

	bool r = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, (alt_u8)reg, (alt_u8)data);
   8a6c0:	e0bffd17 	ldw	r2,-12(fp)
   8a6c4:	10800017 	ldw	r2,0(r2)
   8a6c8:	10c03fcc 	andi	r3,r2,255
   8a6cc:	18c0201c 	xori	r3,r3,128
   8a6d0:	18ffe004 	addi	r3,r3,-128
   8a6d4:	e0bffe17 	ldw	r2,-8(fp)
   8a6d8:	10803fcc 	andi	r2,r2,255
   8a6dc:	e13fff17 	ldw	r4,-4(fp)
   8a6e0:	21003fcc 	andi	r4,r4,255
   8a6e4:	d9000015 	stw	r4,0(sp)
   8a6e8:	01000434 	movhi	r4,16
   8a6ec:	21041004 	addi	r4,r4,4160
   8a6f0:	01400434 	movhi	r5,16
   8a6f4:	29441404 	addi	r5,r5,4176
   8a6f8:	180d883a 	mov	r6,r3
   8a6fc:	100f883a 	mov	r7,r2
   8a700:	008aa5c0 	call	8aa5c <I2C_Write>
   8a704:	e0bffc15 	stw	r2,-16(fp)
	if (!r)
   8a708:	e0bffc17 	ldw	r2,-16(fp)
   8a70c:	1000021e 	bne	r2,zero,8a718 <reg_write+0x78>
		return -1;
   8a710:	00bfffc4 	movi	r2,-1
   8a714:	00000106 	br	8a71c <reg_write+0x7c>

	//usleep(REG_ACCESS_UDELAY);

	return 0;
   8a718:	0005883a 	mov	r2,zero
}
   8a71c:	e037883a 	mov	sp,fp
   8a720:	dfc00117 	ldw	ra,4(sp)
   8a724:	df000017 	ldw	fp,0(sp)
   8a728:	dec00204 	addi	sp,sp,8
   8a72c:	f800283a 	ret

0008a730 <reg_update_bits>:

int reg_update_bits(struct hdmi_encoder *ec, int reg, int mask, int data)
{
   8a730:	defff704 	addi	sp,sp,-36
   8a734:	dfc00815 	stw	ra,32(sp)
   8a738:	df000715 	stw	fp,28(sp)
   8a73c:	df000704 	addi	fp,sp,28
   8a740:	e13ffc15 	stw	r4,-16(fp)
   8a744:	e17ffd15 	stw	r5,-12(fp)
   8a748:	e1bffe15 	stw	r6,-8(fp)
   8a74c:	e1ffff15 	stw	r7,-4(fp)
   8a750:	d83bb615 	stw	zero,-4392(sp)
	bool r = 0;
   8a754:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 regv = 0;
   8a758:	e03ffb05 	stb	zero,-20(fp)

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
   8a75c:	e0bffc17 	ldw	r2,-16(fp)
   8a760:	10800017 	ldw	r2,0(r2)
   8a764:	10c03fcc 	andi	r3,r2,255
   8a768:	18c0201c 	xori	r3,r3,128
   8a76c:	18ffe004 	addi	r3,r3,-128
   8a770:	e0bffd17 	ldw	r2,-12(fp)
   8a774:	10803fcc 	andi	r2,r2,255
   8a778:	e13ffb04 	addi	r4,fp,-20
   8a77c:	d9000015 	stw	r4,0(sp)
   8a780:	01000434 	movhi	r4,16
   8a784:	21041004 	addi	r4,r4,4160
   8a788:	01400434 	movhi	r5,16
   8a78c:	29441404 	addi	r5,r5,4176
   8a790:	180d883a 	mov	r6,r3
   8a794:	100f883a 	mov	r7,r2
   8a798:	008ab380 	call	8ab38 <I2C_Read>
   8a79c:	e0bffa15 	stw	r2,-24(fp)
	if (!r)
   8a7a0:	e0bffa17 	ldw	r2,-24(fp)
   8a7a4:	1000021e 	bne	r2,zero,8a7b0 <reg_update_bits+0x80>
		return -1;
   8a7a8:	00bfffc4 	movi	r2,-1
   8a7ac:	00002506 	br	8a844 <reg_update_bits+0x114>

	regv &= ~((alt_u8)mask);
   8a7b0:	e0bffe17 	ldw	r2,-8(fp)
   8a7b4:	0084303a 	nor	r2,zero,r2
   8a7b8:	1007883a 	mov	r3,r2
   8a7bc:	e0bffb03 	ldbu	r2,-20(fp)
   8a7c0:	1884703a 	and	r2,r3,r2
   8a7c4:	e0bffb05 	stb	r2,-20(fp)

	regv |= ((alt_u8)data & (alt_u8)mask);
   8a7c8:	e0bfff17 	ldw	r2,-4(fp)
   8a7cc:	1007883a 	mov	r3,r2
   8a7d0:	e0bffe17 	ldw	r2,-8(fp)
   8a7d4:	1884703a 	and	r2,r3,r2
   8a7d8:	1007883a 	mov	r3,r2
   8a7dc:	e0bffb03 	ldbu	r2,-20(fp)
   8a7e0:	1884b03a 	or	r2,r3,r2
   8a7e4:	e0bffb05 	stb	r2,-20(fp)

	//printf("[%02x] <- %02x\n", reg, regv);

	//usleep(REG_ACCESS_UDELAY);

	r = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, regv);
   8a7e8:	e0bffc17 	ldw	r2,-16(fp)
   8a7ec:	10800017 	ldw	r2,0(r2)
   8a7f0:	10c03fcc 	andi	r3,r2,255
   8a7f4:	18c0201c 	xori	r3,r3,128
   8a7f8:	18ffe004 	addi	r3,r3,-128
   8a7fc:	e0bffd17 	ldw	r2,-12(fp)
   8a800:	10803fcc 	andi	r2,r2,255
   8a804:	e13ffb03 	ldbu	r4,-20(fp)
   8a808:	21003fcc 	andi	r4,r4,255
   8a80c:	d9000015 	stw	r4,0(sp)
   8a810:	01000434 	movhi	r4,16
   8a814:	21041004 	addi	r4,r4,4160
   8a818:	01400434 	movhi	r5,16
   8a81c:	29441404 	addi	r5,r5,4176
   8a820:	180d883a 	mov	r6,r3
   8a824:	100f883a 	mov	r7,r2
   8a828:	008aa5c0 	call	8aa5c <I2C_Write>
   8a82c:	e0bffa15 	stw	r2,-24(fp)
	if (!r)
   8a830:	e0bffa17 	ldw	r2,-24(fp)
   8a834:	1000021e 	bne	r2,zero,8a840 <reg_update_bits+0x110>
		return -1;
   8a838:	00bfffc4 	movi	r2,-1
   8a83c:	00000106 	br	8a844 <reg_update_bits+0x114>

	//usleep(REG_ACCESS_UDELAY);

	return 0;
   8a840:	0005883a 	mov	r2,zero
}
   8a844:	e037883a 	mov	sp,fp
   8a848:	dfc00117 	ldw	ra,4(sp)
   8a84c:	df000017 	ldw	fp,0(sp)
   8a850:	dec00204 	addi	sp,sp,8
   8a854:	f800283a 	ret

0008a858 <reg_or_bits>:

int reg_or_bits(struct hdmi_encoder *ec, int reg, int data)
{
   8a858:	defff804 	addi	sp,sp,-32
   8a85c:	dfc00715 	stw	ra,28(sp)
   8a860:	df000615 	stw	fp,24(sp)
   8a864:	df000604 	addi	fp,sp,24
   8a868:	e13ffd15 	stw	r4,-12(fp)
   8a86c:	e17ffe15 	stw	r5,-8(fp)
   8a870:	e1bfff15 	stw	r6,-4(fp)
   8a874:	d83bb615 	stw	zero,-4392(sp)
	bool r = 0;
   8a878:	e03ffb15 	stw	zero,-20(fp)
	alt_u8 regv = 0;
   8a87c:	e03ffc05 	stb	zero,-16(fp)

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
   8a880:	e0bffd17 	ldw	r2,-12(fp)
   8a884:	10800017 	ldw	r2,0(r2)
   8a888:	10c03fcc 	andi	r3,r2,255
   8a88c:	18c0201c 	xori	r3,r3,128
   8a890:	18ffe004 	addi	r3,r3,-128
   8a894:	e0bffe17 	ldw	r2,-8(fp)
   8a898:	10803fcc 	andi	r2,r2,255
   8a89c:	e13ffc04 	addi	r4,fp,-16
   8a8a0:	d9000015 	stw	r4,0(sp)
   8a8a4:	01000434 	movhi	r4,16
   8a8a8:	21041004 	addi	r4,r4,4160
   8a8ac:	01400434 	movhi	r5,16
   8a8b0:	29441404 	addi	r5,r5,4176
   8a8b4:	180d883a 	mov	r6,r3
   8a8b8:	100f883a 	mov	r7,r2
   8a8bc:	008ab380 	call	8ab38 <I2C_Read>
   8a8c0:	e0bffb15 	stw	r2,-20(fp)
	if (!r)
   8a8c4:	e0bffb17 	ldw	r2,-20(fp)
   8a8c8:	1000021e 	bne	r2,zero,8a8d4 <reg_or_bits+0x7c>
		return -1;
   8a8cc:	00bfffc4 	movi	r2,-1
   8a8d0:	00001c06 	br	8a944 <reg_or_bits+0xec>

	regv |= (alt_u8)data;
   8a8d4:	e0bfff17 	ldw	r2,-4(fp)
   8a8d8:	1007883a 	mov	r3,r2
   8a8dc:	e0bffc03 	ldbu	r2,-16(fp)
   8a8e0:	1884b03a 	or	r2,r3,r2
   8a8e4:	e0bffc05 	stb	r2,-16(fp)

	//printf("[%02x] <- %02x\n", reg, regv);

	//usleep(REG_ACCESS_UDELAY);

	r = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, regv);
   8a8e8:	e0bffd17 	ldw	r2,-12(fp)
   8a8ec:	10800017 	ldw	r2,0(r2)
   8a8f0:	10c03fcc 	andi	r3,r2,255
   8a8f4:	18c0201c 	xori	r3,r3,128
   8a8f8:	18ffe004 	addi	r3,r3,-128
   8a8fc:	e0bffe17 	ldw	r2,-8(fp)
   8a900:	10803fcc 	andi	r2,r2,255
   8a904:	e13ffc03 	ldbu	r4,-16(fp)
   8a908:	21003fcc 	andi	r4,r4,255
   8a90c:	d9000015 	stw	r4,0(sp)
   8a910:	01000434 	movhi	r4,16
   8a914:	21041004 	addi	r4,r4,4160
   8a918:	01400434 	movhi	r5,16
   8a91c:	29441404 	addi	r5,r5,4176
   8a920:	180d883a 	mov	r6,r3
   8a924:	100f883a 	mov	r7,r2
   8a928:	008aa5c0 	call	8aa5c <I2C_Write>
   8a92c:	e0bffb15 	stw	r2,-20(fp)
	if (!r)
   8a930:	e0bffb17 	ldw	r2,-20(fp)
   8a934:	1000021e 	bne	r2,zero,8a940 <reg_or_bits+0xe8>
		return -1;
   8a938:	00bfffc4 	movi	r2,-1
   8a93c:	00000106 	br	8a944 <reg_or_bits+0xec>

	//usleep(REG_ACCESS_UDELAY);

	return 0;
   8a940:	0005883a 	mov	r2,zero
}
   8a944:	e037883a 	mov	sp,fp
   8a948:	dfc00117 	ldw	ra,4(sp)
   8a94c:	df000017 	ldw	fp,0(sp)
   8a950:	dec00204 	addi	sp,sp,8
   8a954:	f800283a 	ret

0008a958 <reg_clear_bits>:

int reg_clear_bits(struct hdmi_encoder *ec, int reg, int mask)
{
   8a958:	defff804 	addi	sp,sp,-32
   8a95c:	dfc00715 	stw	ra,28(sp)
   8a960:	df000615 	stw	fp,24(sp)
   8a964:	df000604 	addi	fp,sp,24
   8a968:	e13ffd15 	stw	r4,-12(fp)
   8a96c:	e17ffe15 	stw	r5,-8(fp)
   8a970:	e1bfff15 	stw	r6,-4(fp)
   8a974:	d83bb615 	stw	zero,-4392(sp)
	bool r = 0;
   8a978:	e03ffb15 	stw	zero,-20(fp)
	alt_u8 regv = 0;
   8a97c:	e03ffc05 	stb	zero,-16(fp)

	r = I2C_Read(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, &regv);
   8a980:	e0bffd17 	ldw	r2,-12(fp)
   8a984:	10800017 	ldw	r2,0(r2)
   8a988:	10c03fcc 	andi	r3,r2,255
   8a98c:	18c0201c 	xori	r3,r3,128
   8a990:	18ffe004 	addi	r3,r3,-128
   8a994:	e0bffe17 	ldw	r2,-8(fp)
   8a998:	10803fcc 	andi	r2,r2,255
   8a99c:	e13ffc04 	addi	r4,fp,-16
   8a9a0:	d9000015 	stw	r4,0(sp)
   8a9a4:	01000434 	movhi	r4,16
   8a9a8:	21041004 	addi	r4,r4,4160
   8a9ac:	01400434 	movhi	r5,16
   8a9b0:	29441404 	addi	r5,r5,4176
   8a9b4:	180d883a 	mov	r6,r3
   8a9b8:	100f883a 	mov	r7,r2
   8a9bc:	008ab380 	call	8ab38 <I2C_Read>
   8a9c0:	e0bffb15 	stw	r2,-20(fp)
	if (!r)
   8a9c4:	e0bffb17 	ldw	r2,-20(fp)
   8a9c8:	1000021e 	bne	r2,zero,8a9d4 <reg_clear_bits+0x7c>
		return -1;
   8a9cc:	00bfffc4 	movi	r2,-1
   8a9d0:	00001d06 	br	8aa48 <reg_clear_bits+0xf0>

	regv &= ~((alt_u8)mask);
   8a9d4:	e0bfff17 	ldw	r2,-4(fp)
   8a9d8:	0084303a 	nor	r2,zero,r2
   8a9dc:	1007883a 	mov	r3,r2
   8a9e0:	e0bffc03 	ldbu	r2,-16(fp)
   8a9e4:	1884703a 	and	r2,r3,r2
   8a9e8:	e0bffc05 	stb	r2,-16(fp)

	//printf("[%02x] <- %02x\n", reg, regv);

	//usleep(REG_ACCESS_UDELAY);

	r = I2C_Write(I2C_SCL_BASE, I2C_SDA_BASE, ec->slave_addr, reg, regv);
   8a9ec:	e0bffd17 	ldw	r2,-12(fp)
   8a9f0:	10800017 	ldw	r2,0(r2)
   8a9f4:	10c03fcc 	andi	r3,r2,255
   8a9f8:	18c0201c 	xori	r3,r3,128
   8a9fc:	18ffe004 	addi	r3,r3,-128
   8aa00:	e0bffe17 	ldw	r2,-8(fp)
   8aa04:	10803fcc 	andi	r2,r2,255
   8aa08:	e13ffc03 	ldbu	r4,-16(fp)
   8aa0c:	21003fcc 	andi	r4,r4,255
   8aa10:	d9000015 	stw	r4,0(sp)
   8aa14:	01000434 	movhi	r4,16
   8aa18:	21041004 	addi	r4,r4,4160
   8aa1c:	01400434 	movhi	r5,16
   8aa20:	29441404 	addi	r5,r5,4176
   8aa24:	180d883a 	mov	r6,r3
   8aa28:	100f883a 	mov	r7,r2
   8aa2c:	008aa5c0 	call	8aa5c <I2C_Write>
   8aa30:	e0bffb15 	stw	r2,-20(fp)
	if (!r)
   8aa34:	e0bffb17 	ldw	r2,-20(fp)
   8aa38:	1000021e 	bne	r2,zero,8aa44 <reg_clear_bits+0xec>
		return -1;
   8aa3c:	00bfffc4 	movi	r2,-1
   8aa40:	00000106 	br	8aa48 <reg_clear_bits+0xf0>

	//usleep(REG_ACCESS_UDELAY);

	return 0;
   8aa44:	0005883a 	mov	r2,zero
}
   8aa48:	e037883a 	mov	sp,fp
   8aa4c:	dfc00117 	ldw	ra,4(sp)
   8aa50:	df000017 	ldw	fp,0(sp)
   8aa54:	dec00204 	addi	sp,sp,8
   8aa58:	f800283a 	ret

0008aa5c <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
   8aa5c:	defff804 	addi	sp,sp,-32
   8aa60:	dfc00715 	stw	ra,28(sp)
   8aa64:	df000615 	stw	fp,24(sp)
   8aa68:	df000604 	addi	fp,sp,24
   8aa6c:	e13ffb15 	stw	r4,-20(fp)
   8aa70:	e17ffc15 	stw	r5,-16(fp)
   8aa74:	3007883a 	mov	r3,r6
   8aa78:	3805883a 	mov	r2,r7
   8aa7c:	e1000217 	ldw	r4,8(fp)
   8aa80:	e0fffd05 	stb	r3,-12(fp)
   8aa84:	e0bffe05 	stb	r2,-8(fp)
   8aa88:	e13fff05 	stb	r4,-4(fp)
   8aa8c:	d83bb615 	stw	zero,-4392(sp)
    bool bSuccess = TRUE;
   8aa90:	00800044 	movi	r2,1
   8aa94:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;

    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   8aa98:	e13ffb17 	ldw	r4,-20(fp)
   8aa9c:	e17ffc17 	ldw	r5,-16(fp)
   8aaa0:	008ad980 	call	8ad98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   8aaa4:	e0bffd03 	ldbu	r2,-12(fp)
   8aaa8:	10803fcc 	andi	r2,r2,255
   8aaac:	e13ffb17 	ldw	r4,-20(fp)
   8aab0:	e17ffc17 	ldw	r5,-16(fp)
   8aab4:	100d883a 	mov	r6,r2
   8aab8:	008ae940 	call	8ae94 <i2c_write>
   8aabc:	1000011e 	bne	r2,zero,8aac4 <I2C_Write+0x68>
        bSuccess = FALSE;
   8aac0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   8aac4:	e0bffa17 	ldw	r2,-24(fp)
   8aac8:	10000726 	beq	r2,zero,8aae8 <I2C_Write+0x8c>
   8aacc:	e0bffe03 	ldbu	r2,-8(fp)
   8aad0:	e13ffb17 	ldw	r4,-20(fp)
   8aad4:	e17ffc17 	ldw	r5,-16(fp)
   8aad8:	100d883a 	mov	r6,r2
   8aadc:	008ae940 	call	8ae94 <i2c_write>
   8aae0:	1000011e 	bne	r2,zero,8aae8 <I2C_Write+0x8c>
        bSuccess = FALSE;
   8aae4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){
   8aae8:	e0bffa17 	ldw	r2,-24(fp)
   8aaec:	10000726 	beq	r2,zero,8ab0c <I2C_Write+0xb0>
   8aaf0:	e0bfff03 	ldbu	r2,-4(fp)
   8aaf4:	e13ffb17 	ldw	r4,-20(fp)
   8aaf8:	e17ffc17 	ldw	r5,-16(fp)
   8aafc:	100d883a 	mov	r6,r2
   8ab00:	008ae940 	call	8ae94 <i2c_write>
   8ab04:	1000011e 	bne	r2,zero,8ab0c <I2C_Write+0xb0>
        bSuccess = FALSE;
   8ab08:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
   8ab0c:	e13ffb17 	ldw	r4,-20(fp)
   8ab10:	e17ffc17 	ldw	r5,-16(fp)
   8ab14:	008ae200 	call	8ae20 <i2c_stop>

    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   8ab18:	0106d604 	movi	r4,7000
   8ab1c:	00979400 	call	97940 <usleep>

    return bSuccess;
   8ab20:	e0bffa17 	ldw	r2,-24(fp)


}
   8ab24:	e037883a 	mov	sp,fp
   8ab28:	dfc00117 	ldw	ra,4(sp)
   8ab2c:	df000017 	ldw	fp,0(sp)
   8ab30:	dec00204 	addi	sp,sp,8
   8ab34:	f800283a 	ret

0008ab38 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
   8ab38:	defff904 	addi	sp,sp,-28
   8ab3c:	dfc00615 	stw	ra,24(sp)
   8ab40:	df000515 	stw	fp,20(sp)
   8ab44:	df000504 	addi	fp,sp,20
   8ab48:	e13ffc15 	stw	r4,-16(fp)
   8ab4c:	e17ffd15 	stw	r5,-12(fp)
   8ab50:	3007883a 	mov	r3,r6
   8ab54:	3805883a 	mov	r2,r7
   8ab58:	e0fffe05 	stb	r3,-8(fp)
   8ab5c:	e0bfff05 	stb	r2,-4(fp)
   8ab60:	d83bb615 	stw	zero,-4392(sp)
    bool bSuccess = TRUE;
   8ab64:	00800044 	movi	r2,1
   8ab68:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;

    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   8ab6c:	e13ffc17 	ldw	r4,-16(fp)
   8ab70:	e17ffd17 	ldw	r5,-12(fp)
   8ab74:	008ad980 	call	8ad98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   8ab78:	e0bffe03 	ldbu	r2,-8(fp)
   8ab7c:	10803fcc 	andi	r2,r2,255
   8ab80:	e13ffc17 	ldw	r4,-16(fp)
   8ab84:	e17ffd17 	ldw	r5,-12(fp)
   8ab88:	100d883a 	mov	r6,r2
   8ab8c:	008ae940 	call	8ae94 <i2c_write>
   8ab90:	1000011e 	bne	r2,zero,8ab98 <I2C_Read+0x60>
        bSuccess = FALSE;
   8ab94:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   8ab98:	e0bffb17 	ldw	r2,-20(fp)
   8ab9c:	10000726 	beq	r2,zero,8abbc <I2C_Read+0x84>
   8aba0:	e0bfff03 	ldbu	r2,-4(fp)
   8aba4:	e13ffc17 	ldw	r4,-16(fp)
   8aba8:	e17ffd17 	ldw	r5,-12(fp)
   8abac:	100d883a 	mov	r6,r2
   8abb0:	008ae940 	call	8ae94 <i2c_write>
   8abb4:	1000011e 	bne	r2,zero,8abbc <I2C_Read+0x84>
        bSuccess = FALSE;
   8abb8:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    i2c_start(clk_base, data_base);  // restart
   8abbc:	e13ffc17 	ldw	r4,-16(fp)
   8abc0:	e17ffd17 	ldw	r5,-12(fp)
   8abc4:	008ad980 	call	8ad98 <i2c_start>
    DeviceAddr |= 1; // Read
   8abc8:	e0bffe03 	ldbu	r2,-8(fp)
   8abcc:	10800054 	ori	r2,r2,1
   8abd0:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   8abd4:	e0bffb17 	ldw	r2,-20(fp)
   8abd8:	10000826 	beq	r2,zero,8abfc <I2C_Read+0xc4>
   8abdc:	e0bffe03 	ldbu	r2,-8(fp)
   8abe0:	10803fcc 	andi	r2,r2,255
   8abe4:	e13ffc17 	ldw	r4,-16(fp)
   8abe8:	e17ffd17 	ldw	r5,-12(fp)
   8abec:	100d883a 	mov	r6,r2
   8abf0:	008ae940 	call	8ae94 <i2c_write>
   8abf4:	1000011e 	bne	r2,zero,8abfc <I2C_Read+0xc4>
        bSuccess = FALSE;
   8abf8:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
   8abfc:	e0bffb17 	ldw	r2,-20(fp)
   8ac00:	10000526 	beq	r2,zero,8ac18 <I2C_Read+0xe0>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
   8ac04:	e13ffc17 	ldw	r4,-16(fp)
   8ac08:	e17ffd17 	ldw	r5,-12(fp)
   8ac0c:	e1800217 	ldw	r6,8(fp)
   8ac10:	000f883a 	mov	r7,zero
   8ac14:	008afc40 	call	8afc4 <i2c_read>
    }
    i2c_stop(clk_base, data_base);
   8ac18:	e13ffc17 	ldw	r4,-16(fp)
   8ac1c:	e17ffd17 	ldw	r5,-12(fp)
   8ac20:	008ae200 	call	8ae20 <i2c_stop>

    return bSuccess;
   8ac24:	e0bffb17 	ldw	r2,-20(fp)
}
   8ac28:	e037883a 	mov	sp,fp
   8ac2c:	dfc00117 	ldw	ra,4(sp)
   8ac30:	df000017 	ldw	fp,0(sp)
   8ac34:	dec00204 	addi	sp,sp,8
   8ac38:	f800283a 	ret

0008ac3c <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 szData[], alt_u16 len){
   8ac3c:	defff704 	addi	sp,sp,-36
   8ac40:	dfc00815 	stw	ra,32(sp)
   8ac44:	df000715 	stw	fp,28(sp)
   8ac48:	df000704 	addi	fp,sp,28
   8ac4c:	e13ffb15 	stw	r4,-20(fp)
   8ac50:	e17ffc15 	stw	r5,-16(fp)
   8ac54:	3007883a 	mov	r3,r6
   8ac58:	3805883a 	mov	r2,r7
   8ac5c:	e1000317 	ldw	r4,12(fp)
   8ac60:	e0fffd05 	stb	r3,-12(fp)
   8ac64:	e0bffe05 	stb	r2,-8(fp)
   8ac68:	e13fff0d 	sth	r4,-4(fp)
   8ac6c:	d83bb615 	stw	zero,-4392(sp)
    int i;
    bool bSuccess = TRUE;
   8ac70:	00800044 	movi	r2,1
   8ac74:	e0bffa15 	stw	r2,-24(fp)


    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   8ac78:	e13ffb17 	ldw	r4,-20(fp)
   8ac7c:	e17ffc17 	ldw	r5,-16(fp)
   8ac80:	008ad980 	call	8ad98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   8ac84:	e0bffd03 	ldbu	r2,-12(fp)
   8ac88:	10803fcc 	andi	r2,r2,255
   8ac8c:	e13ffb17 	ldw	r4,-20(fp)
   8ac90:	e17ffc17 	ldw	r5,-16(fp)
   8ac94:	100d883a 	mov	r6,r2
   8ac98:	008ae940 	call	8ae94 <i2c_write>
   8ac9c:	1000011e 	bne	r2,zero,8aca4 <I2C_MultipleRead+0x68>
        bSuccess = FALSE;
   8aca0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   8aca4:	e0bffa17 	ldw	r2,-24(fp)
   8aca8:	10000726 	beq	r2,zero,8acc8 <I2C_MultipleRead+0x8c>
   8acac:	e0bffe03 	ldbu	r2,-8(fp)
   8acb0:	e13ffb17 	ldw	r4,-20(fp)
   8acb4:	e17ffc17 	ldw	r5,-16(fp)
   8acb8:	100d883a 	mov	r6,r2
   8acbc:	008ae940 	call	8ae94 <i2c_write>
   8acc0:	1000011e 	bne	r2,zero,8acc8 <I2C_MultipleRead+0x8c>
        bSuccess = FALSE;
   8acc4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }
    if (bSuccess)
   8acc8:	e0bffa17 	ldw	r2,-24(fp)
   8accc:	10000326 	beq	r2,zero,8acdc <I2C_MultipleRead+0xa0>
        i2c_start(clk_base, data_base);  // restart
   8acd0:	e13ffb17 	ldw	r4,-20(fp)
   8acd4:	e17ffc17 	ldw	r5,-16(fp)
   8acd8:	008ad980 	call	8ad98 <i2c_start>
    DeviceAddr |= 1; // Read
   8acdc:	e0bffd03 	ldbu	r2,-12(fp)
   8ace0:	10800054 	ori	r2,r2,1
   8ace4:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   8ace8:	e0bffa17 	ldw	r2,-24(fp)
   8acec:	10000826 	beq	r2,zero,8ad10 <I2C_MultipleRead+0xd4>
   8acf0:	e0bffd03 	ldbu	r2,-12(fp)
   8acf4:	10803fcc 	andi	r2,r2,255
   8acf8:	e13ffb17 	ldw	r4,-20(fp)
   8acfc:	e17ffc17 	ldw	r5,-16(fp)
   8ad00:	100d883a 	mov	r6,r2
   8ad04:	008ae940 	call	8ae94 <i2c_write>
   8ad08:	1000011e 	bne	r2,zero,8ad10 <I2C_MultipleRead+0xd4>
        bSuccess = FALSE;
   8ad0c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
   8ad10:	e0bffa17 	ldw	r2,-24(fp)
   8ad14:	10001726 	beq	r2,zero,8ad74 <I2C_MultipleRead+0x138>
        for(i=0;i<len && bSuccess;i++){
   8ad18:	e03ff915 	stw	zero,-28(fp)
   8ad1c:	00001006 	br	8ad60 <I2C_MultipleRead+0x124>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
   8ad20:	e0bff917 	ldw	r2,-28(fp)
   8ad24:	e0c00217 	ldw	r3,8(fp)
   8ad28:	1887883a 	add	r3,r3,r2
   8ad2c:	e0bfff0b 	ldhu	r2,-4(fp)
   8ad30:	113fffc4 	addi	r4,r2,-1
   8ad34:	e0bff917 	ldw	r2,-28(fp)
   8ad38:	2084c03a 	cmpne	r2,r4,r2
   8ad3c:	10803fcc 	andi	r2,r2,255
   8ad40:	e13ffb17 	ldw	r4,-20(fp)
   8ad44:	e17ffc17 	ldw	r5,-16(fp)
   8ad48:	180d883a 	mov	r6,r3
   8ad4c:	100f883a 	mov	r7,r2
   8ad50:	008afc40 	call	8afc4 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   8ad54:	e0bff917 	ldw	r2,-28(fp)
   8ad58:	10800044 	addi	r2,r2,1
   8ad5c:	e0bff915 	stw	r2,-28(fp)
   8ad60:	e0bfff0b 	ldhu	r2,-4(fp)
   8ad64:	e0fff917 	ldw	r3,-28(fp)
   8ad68:	1880020e 	bge	r3,r2,8ad74 <I2C_MultipleRead+0x138>
   8ad6c:	e0bffa17 	ldw	r2,-24(fp)
   8ad70:	103feb1e 	bne	r2,zero,8ad20 <I2C_MultipleRead+0xe4>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }
    }
    i2c_stop(clk_base, data_base);
   8ad74:	e13ffb17 	ldw	r4,-20(fp)
   8ad78:	e17ffc17 	ldw	r5,-16(fp)
   8ad7c:	008ae200 	call	8ae20 <i2c_stop>

    return bSuccess;
   8ad80:	e0bffa17 	ldw	r2,-24(fp)

}
   8ad84:	e037883a 	mov	sp,fp
   8ad88:	dfc00117 	ldw	ra,4(sp)
   8ad8c:	df000017 	ldw	fp,0(sp)
   8ad90:	dec00204 	addi	sp,sp,8
   8ad94:	f800283a 	ret

0008ad98 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
   8ad98:	defffc04 	addi	sp,sp,-16
   8ad9c:	dfc00315 	stw	ra,12(sp)
   8ada0:	df000215 	stw	fp,8(sp)
   8ada4:	df000204 	addi	fp,sp,8
   8ada8:	e13ffe15 	stw	r4,-8(fp)
   8adac:	e17fff15 	stw	r5,-4(fp)
   8adb0:	d83bb615 	stw	zero,-4392(sp)

    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
   8adb4:	e0bfff17 	ldw	r2,-4(fp)
   8adb8:	10800104 	addi	r2,r2,4
   8adbc:	00c00044 	movi	r3,1
   8adc0:	10c00035 	stwio	r3,0(r2)



    // start condition
    SDA_HIGH(data_base); // data high
   8adc4:	e0bfff17 	ldw	r2,-4(fp)
   8adc8:	00c00044 	movi	r3,1
   8adcc:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
   8add0:	e0bffe17 	ldw	r2,-8(fp)
   8add4:	00c00044 	movi	r3,1
   8add8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
   8addc:	01000044 	movi	r4,1
   8ade0:	00979400 	call	97940 <usleep>

    SDA_LOW(data_base); // data low
   8ade4:	e0bfff17 	ldw	r2,-4(fp)
   8ade8:	0007883a 	mov	r3,zero
   8adec:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
   8adf0:	01000044 	movi	r4,1
   8adf4:	00979400 	call	97940 <usleep>
    SCL_LOW(clk_base); // clock low
   8adf8:	e0bffe17 	ldw	r2,-8(fp)
   8adfc:	0007883a 	mov	r3,zero
   8ae00:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
   8ae04:	01000044 	movi	r4,1
   8ae08:	00979400 	call	97940 <usleep>
}
   8ae0c:	e037883a 	mov	sp,fp
   8ae10:	dfc00117 	ldw	ra,4(sp)
   8ae14:	df000017 	ldw	fp,0(sp)
   8ae18:	dec00204 	addi	sp,sp,8
   8ae1c:	f800283a 	ret

0008ae20 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
   8ae20:	defffc04 	addi	sp,sp,-16
   8ae24:	dfc00315 	stw	ra,12(sp)
   8ae28:	df000215 	stw	fp,8(sp)
   8ae2c:	df000204 	addi	fp,sp,8
   8ae30:	e13ffe15 	stw	r4,-8(fp)
   8ae34:	e17fff15 	stw	r5,-4(fp)
   8ae38:	d83bb615 	stw	zero,-4392(sp)
    // assume SCL = 0

    SDA_DIR_OUT(data_base);  // data output enabled
   8ae3c:	e0bfff17 	ldw	r2,-4(fp)
   8ae40:	10800104 	addi	r2,r2,4
   8ae44:	00c00044 	movi	r3,1
   8ae48:	10c00035 	stwio	r3,0(r2)
    SDA_LOW(data_base); // Data Low
   8ae4c:	e0bfff17 	ldw	r2,-4(fp)
   8ae50:	0007883a 	mov	r3,zero
   8ae54:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    SCL_HIGH(clk_base);  // clock high
   8ae58:	e0bffe17 	ldw	r2,-8(fp)
   8ae5c:	00c00044 	movi	r3,1
   8ae60:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
   8ae64:	01000044 	movi	r4,1
   8ae68:	00979400 	call	97940 <usleep>
    SDA_HIGH(data_base); // data high
   8ae6c:	e0bfff17 	ldw	r2,-4(fp)
   8ae70:	00c00044 	movi	r3,1
   8ae74:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
   8ae78:	01000044 	movi	r4,1
   8ae7c:	00979400 	call	97940 <usleep>



}
   8ae80:	e037883a 	mov	sp,fp
   8ae84:	dfc00117 	ldw	ra,4(sp)
   8ae88:	df000017 	ldw	fp,0(sp)
   8ae8c:	dec00204 	addi	sp,sp,8
   8ae90:	f800283a 	ret

0008ae94 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
   8ae94:	defff804 	addi	sp,sp,-32
   8ae98:	dfc00715 	stw	ra,28(sp)
   8ae9c:	df000615 	stw	fp,24(sp)
   8aea0:	df000604 	addi	fp,sp,24
   8aea4:	e13ffd15 	stw	r4,-12(fp)
   8aea8:	e17ffe15 	stw	r5,-8(fp)
   8aeac:	3005883a 	mov	r2,r6
   8aeb0:	e0bfff05 	stb	r2,-4(fp)
   8aeb4:	d83bb615 	stw	zero,-4392(sp)
    alt_u8 Mask = 0x80;
   8aeb8:	00bfe004 	movi	r2,-128
   8aebc:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode
   8aec0:	e0bffe17 	ldw	r2,-8(fp)
   8aec4:	10800104 	addi	r2,r2,4
   8aec8:	00c00044 	movi	r3,1
   8aecc:	10c00035 	stwio	r3,0(r2)

    for(i=0;i<8;i++){
   8aed0:	e03ffb15 	stw	zero,-20(fp)
   8aed4:	00001f06 	br	8af54 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
   8aed8:	e0bffd17 	ldw	r2,-12(fp)
   8aedc:	0007883a 	mov	r3,zero
   8aee0:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
   8aee4:	e0ffff03 	ldbu	r3,-4(fp)
   8aee8:	e0bffa03 	ldbu	r2,-24(fp)
   8aeec:	1884703a 	and	r2,r3,r2
   8aef0:	10803fcc 	andi	r2,r2,255
   8aef4:	10000426 	beq	r2,zero,8af08 <i2c_write+0x74>
            SDA_HIGH(data_base);
   8aef8:	e0bffe17 	ldw	r2,-8(fp)
   8aefc:	00c00044 	movi	r3,1
   8af00:	10c00035 	stwio	r3,0(r2)
   8af04:	00000306 	br	8af14 <i2c_write+0x80>
        }else{
            SDA_LOW(data_base);
   8af08:	e0bffe17 	ldw	r2,-8(fp)
   8af0c:	0007883a 	mov	r3,zero
   8af10:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
   8af14:	e0bffa03 	ldbu	r2,-24(fp)
   8af18:	1004d07a 	srli	r2,r2,1
   8af1c:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
   8af20:	e0bffd17 	ldw	r2,-12(fp)
   8af24:	00c00044 	movi	r3,1
   8af28:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   8af2c:	01000044 	movi	r4,1
   8af30:	00979400 	call	97940 <usleep>
        SCL_LOW(clk_base);
   8af34:	e0bffd17 	ldw	r2,-12(fp)
   8af38:	0007883a 	mov	r3,zero
   8af3c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   8af40:	01000044 	movi	r4,1
   8af44:	00979400 	call	97940 <usleep>

    // assume, SCL = 0

    SDA_DIR_OUT(data_base);  // data write mode

    for(i=0;i<8;i++){
   8af48:	e0bffb17 	ldw	r2,-20(fp)
   8af4c:	10800044 	addi	r2,r2,1
   8af50:	e0bffb15 	stw	r2,-20(fp)
   8af54:	e0bffb17 	ldw	r2,-20(fp)
   8af58:	10800210 	cmplti	r2,r2,8
   8af5c:	103fde1e 	bne	r2,zero,8aed8 <i2c_write+0x44>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }

    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
   8af60:	e0bffe17 	ldw	r2,-8(fp)
   8af64:	10800104 	addi	r2,r2,4
   8af68:	0007883a 	mov	r3,zero
   8af6c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
   8af70:	e0bffd17 	ldw	r2,-12(fp)
   8af74:	00c00044 	movi	r3,1
   8af78:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
   8af7c:	01000044 	movi	r4,1
   8af80:	00979400 	call	97940 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
   8af84:	e0bffe17 	ldw	r2,-8(fp)
   8af88:	10800037 	ldwio	r2,0(r2)
   8af8c:	1005003a 	cmpeq	r2,r2,zero
   8af90:	10803fcc 	andi	r2,r2,255
   8af94:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low
   8af98:	e0bffd17 	ldw	r2,-12(fp)
   8af9c:	0007883a 	mov	r3,zero
   8afa0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   8afa4:	01000044 	movi	r4,1
   8afa8:	00979400 	call	97940 <usleep>
    return bAck;
   8afac:	e0bffc17 	ldw	r2,-16(fp)
}
   8afb0:	e037883a 	mov	sp,fp
   8afb4:	dfc00117 	ldw	ra,4(sp)
   8afb8:	df000017 	ldw	fp,0(sp)
   8afbc:	dec00204 	addi	sp,sp,8
   8afc0:	f800283a 	ret

0008afc4 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
   8afc4:	defff804 	addi	sp,sp,-32
   8afc8:	dfc00715 	stw	ra,28(sp)
   8afcc:	df000615 	stw	fp,24(sp)
   8afd0:	df000604 	addi	fp,sp,24
   8afd4:	e13ffc15 	stw	r4,-16(fp)
   8afd8:	e17ffd15 	stw	r5,-12(fp)
   8afdc:	e1bffe15 	stw	r6,-8(fp)
   8afe0:	e1ffff15 	stw	r7,-4(fp)
   8afe4:	d83bb615 	stw	zero,-4392(sp)
    alt_u8 Data=0;
   8afe8:	e03ffa05 	stb	zero,-24(fp)
    int i;

    // assume SCL = low

    SDA_DIR_IN(data_base);  // set data read mode
   8afec:	e0bffd17 	ldw	r2,-12(fp)
   8aff0:	10800104 	addi	r2,r2,4
   8aff4:	0007883a 	mov	r3,zero
   8aff8:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
   8affc:	e0bffc17 	ldw	r2,-16(fp)
   8b000:	0007883a 	mov	r3,zero
   8b004:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   8b008:	01000044 	movi	r4,1
   8b00c:	00979400 	call	97940 <usleep>

    for(i=0;i<8;i++){
   8b010:	e03ffb15 	stw	zero,-20(fp)
   8b014:	00001606 	br	8b070 <i2c_read+0xac>
        Data <<= 1;
   8b018:	e0bffa03 	ldbu	r2,-24(fp)
   8b01c:	1085883a 	add	r2,r2,r2
   8b020:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
   8b024:	e0bffc17 	ldw	r2,-16(fp)
   8b028:	00c00044 	movi	r3,1
   8b02c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   8b030:	01000044 	movi	r4,1
   8b034:	00979400 	call	97940 <usleep>
        if (SDA_READ(data_base))  // read data
   8b038:	e0bffd17 	ldw	r2,-12(fp)
   8b03c:	10800037 	ldwio	r2,0(r2)
   8b040:	10000326 	beq	r2,zero,8b050 <i2c_read+0x8c>
            Data |= 0x01;
   8b044:	e0bffa03 	ldbu	r2,-24(fp)
   8b048:	10800054 	ori	r2,r2,1
   8b04c:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log
   8b050:	e0bffc17 	ldw	r2,-16(fp)
   8b054:	0007883a 	mov	r3,zero
   8b058:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   8b05c:	01000044 	movi	r4,1
   8b060:	00979400 	call	97940 <usleep>

    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
   8b064:	e0bffb17 	ldw	r2,-20(fp)
   8b068:	10800044 	addi	r2,r2,1
   8b06c:	e0bffb15 	stw	r2,-20(fp)
   8b070:	e0bffb17 	ldw	r2,-20(fp)
   8b074:	10800210 	cmplti	r2,r2,8
   8b078:	103fe71e 	bne	r2,zero,8b018 <i2c_read+0x54>
        SCL_LOW(clk_base);  // clock log
        SCL_DELAY;
    }

    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
   8b07c:	e0bffc17 	ldw	r2,-16(fp)
   8b080:	0007883a 	mov	r3,zero
   8b084:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
   8b088:	e0bffd17 	ldw	r2,-12(fp)
   8b08c:	10800104 	addi	r2,r2,4
   8b090:	00c00044 	movi	r3,1
   8b094:	10c00035 	stwio	r3,0(r2)
    if (bAck)
   8b098:	e0bfff17 	ldw	r2,-4(fp)
   8b09c:	10000426 	beq	r2,zero,8b0b0 <i2c_read+0xec>
        SDA_LOW(data_base);
   8b0a0:	e0bffd17 	ldw	r2,-12(fp)
   8b0a4:	0007883a 	mov	r3,zero
   8b0a8:	10c00035 	stwio	r3,0(r2)
   8b0ac:	00000306 	br	8b0bc <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
   8b0b0:	e0bffd17 	ldw	r2,-12(fp)
   8b0b4:	00c00044 	movi	r3,1
   8b0b8:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
   8b0bc:	e0bffc17 	ldw	r2,-16(fp)
   8b0c0:	00c00044 	movi	r3,1
   8b0c4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
   8b0c8:	01000044 	movi	r4,1
   8b0cc:	00979400 	call	97940 <usleep>
    SCL_LOW(clk_base); // clock low
   8b0d0:	e0bffc17 	ldw	r2,-16(fp)
   8b0d4:	0007883a 	mov	r3,zero
   8b0d8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   8b0dc:	01000044 	movi	r4,1
   8b0e0:	00979400 	call	97940 <usleep>
    SDA_LOW(data_base);  // data low
   8b0e4:	e0bffd17 	ldw	r2,-12(fp)
   8b0e8:	0007883a 	mov	r3,zero
   8b0ec:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
   8b0f0:	01000044 	movi	r4,1
   8b0f4:	00979400 	call	97940 <usleep>
//    SDA_DIR_IN;  // set data read mode

    *pData = Data;
   8b0f8:	e0bffe17 	ldw	r2,-8(fp)
   8b0fc:	e0fffa03 	ldbu	r3,-24(fp)
   8b100:	10c00005 	stb	r3,0(r2)
}
   8b104:	e037883a 	mov	sp,fp
   8b108:	dfc00117 	ldw	ra,4(sp)
   8b10c:	df000017 	ldw	fp,0(sp)
   8b110:	dec00204 	addi	sp,sp,8
   8b114:	f800283a 	ret

0008b118 <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
   8b118:	defff704 	addi	sp,sp,-36
   8b11c:	dfc00815 	stw	ra,32(sp)
   8b120:	df000715 	stw	fp,28(sp)
   8b124:	df000704 	addi	fp,sp,28
   8b128:	e13ffb15 	stw	r4,-20(fp)
   8b12c:	e17ffc15 	stw	r5,-16(fp)
   8b130:	3007883a 	mov	r3,r6
   8b134:	3805883a 	mov	r2,r7
   8b138:	e1000217 	ldw	r4,8(fp)
   8b13c:	e0fffd05 	stb	r3,-12(fp)
   8b140:	e0bffe0d 	sth	r2,-8(fp)
   8b144:	e13fff05 	stb	r4,-4(fp)
   8b148:	d83bb615 	stw	zero,-4392(sp)
    bool bSuccess = TRUE;
   8b14c:	00800044 	movi	r2,1
   8b150:	e0bff915 	stw	r2,-28(fp)
    alt_u8 AddrHigh, AddrLow;

    AddrHigh = (ControlAddr >> 8) & 0xFF;
   8b154:	e0bffe0b 	ldhu	r2,-8(fp)
   8b158:	1004d23a 	srli	r2,r2,8
   8b15c:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF;
   8b160:	e0bffe0b 	ldhu	r2,-8(fp)
   8b164:	e0bffa45 	stb	r2,-23(fp)

    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   8b168:	e13ffb17 	ldw	r4,-20(fp)
   8b16c:	e17ffc17 	ldw	r5,-16(fp)
   8b170:	008ad980 	call	8ad98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   8b174:	e0bffd03 	ldbu	r2,-12(fp)
   8b178:	10803fcc 	andi	r2,r2,255
   8b17c:	e13ffb17 	ldw	r4,-20(fp)
   8b180:	e17ffc17 	ldw	r5,-16(fp)
   8b184:	100d883a 	mov	r6,r2
   8b188:	008ae940 	call	8ae94 <i2c_write>
   8b18c:	1000011e 	bne	r2,zero,8b194 <I2CL_Write+0x7c>
        bSuccess = FALSE;
   8b190:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   8b194:	e0bff917 	ldw	r2,-28(fp)
   8b198:	10000726 	beq	r2,zero,8b1b8 <I2CL_Write+0xa0>
   8b19c:	e0bffa03 	ldbu	r2,-24(fp)
   8b1a0:	e13ffb17 	ldw	r4,-20(fp)
   8b1a4:	e17ffc17 	ldw	r5,-16(fp)
   8b1a8:	100d883a 	mov	r6,r2
   8b1ac:	008ae940 	call	8ae94 <i2c_write>
   8b1b0:	1000011e 	bne	r2,zero,8b1b8 <I2CL_Write+0xa0>
        bSuccess = FALSE;
   8b1b4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   8b1b8:	e0bff917 	ldw	r2,-28(fp)
   8b1bc:	10000726 	beq	r2,zero,8b1dc <I2CL_Write+0xc4>
   8b1c0:	e0bffa43 	ldbu	r2,-23(fp)
   8b1c4:	e13ffb17 	ldw	r4,-20(fp)
   8b1c8:	e17ffc17 	ldw	r5,-16(fp)
   8b1cc:	100d883a 	mov	r6,r2
   8b1d0:	008ae940 	call	8ae94 <i2c_write>
   8b1d4:	1000011e 	bne	r2,zero,8b1dc <I2CL_Write+0xc4>
        bSuccess = FALSE;
   8b1d8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){
   8b1dc:	e0bff917 	ldw	r2,-28(fp)
   8b1e0:	10000726 	beq	r2,zero,8b200 <I2CL_Write+0xe8>
   8b1e4:	e0bfff03 	ldbu	r2,-4(fp)
   8b1e8:	e13ffb17 	ldw	r4,-20(fp)
   8b1ec:	e17ffc17 	ldw	r5,-16(fp)
   8b1f0:	100d883a 	mov	r6,r2
   8b1f4:	008ae940 	call	8ae94 <i2c_write>
   8b1f8:	1000011e 	bne	r2,zero,8b200 <I2CL_Write+0xe8>
        bSuccess = FALSE;
   8b1fc:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
   8b200:	e13ffb17 	ldw	r4,-20(fp)
   8b204:	e17ffc17 	ldw	r5,-16(fp)
   8b208:	008ae200 	call	8ae20 <i2c_stop>

    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   8b20c:	0106d604 	movi	r4,7000
   8b210:	00979400 	call	97940 <usleep>

    return bSuccess;
   8b214:	e0bff917 	ldw	r2,-28(fp)

}
   8b218:	e037883a 	mov	sp,fp
   8b21c:	dfc00117 	ldw	ra,4(sp)
   8b220:	df000017 	ldw	fp,0(sp)
   8b224:	dec00204 	addi	sp,sp,8
   8b228:	f800283a 	ret

0008b22c <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
   8b22c:	defff804 	addi	sp,sp,-32
   8b230:	dfc00715 	stw	ra,28(sp)
   8b234:	df000615 	stw	fp,24(sp)
   8b238:	df000604 	addi	fp,sp,24
   8b23c:	e13ffc15 	stw	r4,-16(fp)
   8b240:	e17ffd15 	stw	r5,-12(fp)
   8b244:	3007883a 	mov	r3,r6
   8b248:	3805883a 	mov	r2,r7
   8b24c:	e0fffe05 	stb	r3,-8(fp)
   8b250:	e0bfff0d 	sth	r2,-4(fp)
   8b254:	d83bb615 	stw	zero,-4392(sp)
    bool bSuccess = TRUE;
   8b258:	00800044 	movi	r2,1
   8b25c:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;

    AddrHigh = (ControlAddr >> 8) & 0xFF;
   8b260:	e0bfff0b 	ldhu	r2,-4(fp)
   8b264:	1004d23a 	srli	r2,r2,8
   8b268:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = ControlAddr & 0xFF;
   8b26c:	e0bfff0b 	ldhu	r2,-4(fp)
   8b270:	e0bffb45 	stb	r2,-19(fp)

    i2c_start(clk_base, data_base);
   8b274:	e13ffc17 	ldw	r4,-16(fp)
   8b278:	e17ffd17 	ldw	r5,-12(fp)
   8b27c:	008ad980 	call	8ad98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   8b280:	e0bffe03 	ldbu	r2,-8(fp)
   8b284:	10803fcc 	andi	r2,r2,255
   8b288:	e13ffc17 	ldw	r4,-16(fp)
   8b28c:	e17ffd17 	ldw	r5,-12(fp)
   8b290:	100d883a 	mov	r6,r2
   8b294:	008ae940 	call	8ae94 <i2c_write>
   8b298:	1000011e 	bne	r2,zero,8b2a0 <I2CL_Read+0x74>
        bSuccess = FALSE;
   8b29c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   8b2a0:	e0bffa17 	ldw	r2,-24(fp)
   8b2a4:	10000726 	beq	r2,zero,8b2c4 <I2CL_Read+0x98>
   8b2a8:	e0bffb03 	ldbu	r2,-20(fp)
   8b2ac:	e13ffc17 	ldw	r4,-16(fp)
   8b2b0:	e17ffd17 	ldw	r5,-12(fp)
   8b2b4:	100d883a 	mov	r6,r2
   8b2b8:	008ae940 	call	8ae94 <i2c_write>
   8b2bc:	1000011e 	bne	r2,zero,8b2c4 <I2CL_Read+0x98>
        bSuccess = FALSE;
   8b2c0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   8b2c4:	e0bffa17 	ldw	r2,-24(fp)
   8b2c8:	10000726 	beq	r2,zero,8b2e8 <I2CL_Read+0xbc>
   8b2cc:	e0bffb43 	ldbu	r2,-19(fp)
   8b2d0:	e13ffc17 	ldw	r4,-16(fp)
   8b2d4:	e17ffd17 	ldw	r5,-12(fp)
   8b2d8:	100d883a 	mov	r6,r2
   8b2dc:	008ae940 	call	8ae94 <i2c_write>
   8b2e0:	1000011e 	bne	r2,zero,8b2e8 <I2CL_Read+0xbc>
        bSuccess = FALSE;
   8b2e4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }
    i2c_start(clk_base, data_base);  // restart
   8b2e8:	e13ffc17 	ldw	r4,-16(fp)
   8b2ec:	e17ffd17 	ldw	r5,-12(fp)
   8b2f0:	008ad980 	call	8ad98 <i2c_start>
    DeviceAddr |= 1; // Read
   8b2f4:	e0bffe03 	ldbu	r2,-8(fp)
   8b2f8:	10800054 	ori	r2,r2,1
   8b2fc:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   8b300:	e0bffa17 	ldw	r2,-24(fp)
   8b304:	10000826 	beq	r2,zero,8b328 <I2CL_Read+0xfc>
   8b308:	e0bffe03 	ldbu	r2,-8(fp)
   8b30c:	10803fcc 	andi	r2,r2,255
   8b310:	e13ffc17 	ldw	r4,-16(fp)
   8b314:	e17ffd17 	ldw	r5,-12(fp)
   8b318:	100d883a 	mov	r6,r2
   8b31c:	008ae940 	call	8ae94 <i2c_write>
   8b320:	1000011e 	bne	r2,zero,8b328 <I2CL_Read+0xfc>
        bSuccess = FALSE;
   8b324:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
   8b328:	e0bffa17 	ldw	r2,-24(fp)
   8b32c:	10000526 	beq	r2,zero,8b344 <I2CL_Read+0x118>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
   8b330:	e13ffc17 	ldw	r4,-16(fp)
   8b334:	e17ffd17 	ldw	r5,-12(fp)
   8b338:	e1800217 	ldw	r6,8(fp)
   8b33c:	000f883a 	mov	r7,zero
   8b340:	008afc40 	call	8afc4 <i2c_read>
    }
    i2c_stop(clk_base, data_base);
   8b344:	e13ffc17 	ldw	r4,-16(fp)
   8b348:	e17ffd17 	ldw	r5,-12(fp)
   8b34c:	008ae200 	call	8ae20 <i2c_stop>

    return bSuccess;
   8b350:	e0bffa17 	ldw	r2,-24(fp)
}
   8b354:	e037883a 	mov	sp,fp
   8b358:	dfc00117 	ldw	ra,4(sp)
   8b35c:	df000017 	ldw	fp,0(sp)
   8b360:	dec00204 	addi	sp,sp,8
   8b364:	f800283a 	ret

0008b368 <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
   8b368:	defff604 	addi	sp,sp,-40
   8b36c:	dfc00915 	stw	ra,36(sp)
   8b370:	df000815 	stw	fp,32(sp)
   8b374:	df000804 	addi	fp,sp,32
   8b378:	e13ffb15 	stw	r4,-20(fp)
   8b37c:	e17ffc15 	stw	r5,-16(fp)
   8b380:	3005883a 	mov	r2,r6
   8b384:	e1fffe15 	stw	r7,-8(fp)
   8b388:	e0c00217 	ldw	r3,8(fp)
   8b38c:	e0bffd05 	stb	r2,-12(fp)
   8b390:	e0ffff0d 	sth	r3,-4(fp)
   8b394:	d83bb615 	stw	zero,-4392(sp)
    int i;
    bool bSuccess = TRUE;
   8b398:	00800044 	movi	r2,1
   8b39c:	e0bff915 	stw	r2,-28(fp)
    alt_u8 ControlAddr = 0;
   8b3a0:	e03ffa05 	stb	zero,-24(fp)
    alt_u8 AddrHigh, AddrLow;

    AddrHigh = (ControlAddr >> 8) & 0xFF;
   8b3a4:	e03ffa45 	stb	zero,-23(fp)
    AddrLow  = ControlAddr & 0xFF;
   8b3a8:	e0bffa03 	ldbu	r2,-24(fp)
   8b3ac:	e0bffa85 	stb	r2,-22(fp)


    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   8b3b0:	e13ffb17 	ldw	r4,-20(fp)
   8b3b4:	e17ffc17 	ldw	r5,-16(fp)
   8b3b8:	008ad980 	call	8ad98 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   8b3bc:	e0bffd03 	ldbu	r2,-12(fp)
   8b3c0:	10803fcc 	andi	r2,r2,255
   8b3c4:	e13ffb17 	ldw	r4,-20(fp)
   8b3c8:	e17ffc17 	ldw	r5,-16(fp)
   8b3cc:	100d883a 	mov	r6,r2
   8b3d0:	008ae940 	call	8ae94 <i2c_write>
   8b3d4:	1000011e 	bne	r2,zero,8b3dc <I2CL_MultipleRead+0x74>
        bSuccess = FALSE;
   8b3d8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   8b3dc:	e0bff917 	ldw	r2,-28(fp)
   8b3e0:	10000726 	beq	r2,zero,8b400 <I2CL_MultipleRead+0x98>
   8b3e4:	e0bffa43 	ldbu	r2,-23(fp)
   8b3e8:	e13ffb17 	ldw	r4,-20(fp)
   8b3ec:	e17ffc17 	ldw	r5,-16(fp)
   8b3f0:	100d883a 	mov	r6,r2
   8b3f4:	008ae940 	call	8ae94 <i2c_write>
   8b3f8:	1000011e 	bne	r2,zero,8b400 <I2CL_MultipleRead+0x98>
        bSuccess = FALSE;
   8b3fc:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   8b400:	e0bff917 	ldw	r2,-28(fp)
   8b404:	10000726 	beq	r2,zero,8b424 <I2CL_MultipleRead+0xbc>
   8b408:	e0bffa83 	ldbu	r2,-22(fp)
   8b40c:	e13ffb17 	ldw	r4,-20(fp)
   8b410:	e17ffc17 	ldw	r5,-16(fp)
   8b414:	100d883a 	mov	r6,r2
   8b418:	008ae940 	call	8ae94 <i2c_write>
   8b41c:	1000011e 	bne	r2,zero,8b424 <I2CL_MultipleRead+0xbc>
        bSuccess = FALSE;
   8b420:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }
    if (bSuccess)
   8b424:	e0bff917 	ldw	r2,-28(fp)
   8b428:	10000326 	beq	r2,zero,8b438 <I2CL_MultipleRead+0xd0>
        i2c_start(clk_base, data_base);  // restart
   8b42c:	e13ffb17 	ldw	r4,-20(fp)
   8b430:	e17ffc17 	ldw	r5,-16(fp)
   8b434:	008ad980 	call	8ad98 <i2c_start>
    DeviceAddr |= 1; // Read
   8b438:	e0bffd03 	ldbu	r2,-12(fp)
   8b43c:	10800054 	ori	r2,r2,1
   8b440:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   8b444:	e0bff917 	ldw	r2,-28(fp)
   8b448:	10000826 	beq	r2,zero,8b46c <I2CL_MultipleRead+0x104>
   8b44c:	e0bffd03 	ldbu	r2,-12(fp)
   8b450:	10803fcc 	andi	r2,r2,255
   8b454:	e13ffb17 	ldw	r4,-20(fp)
   8b458:	e17ffc17 	ldw	r5,-16(fp)
   8b45c:	100d883a 	mov	r6,r2
   8b460:	008ae940 	call	8ae94 <i2c_write>
   8b464:	1000011e 	bne	r2,zero,8b46c <I2CL_MultipleRead+0x104>
        bSuccess = FALSE;
   8b468:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
   8b46c:	e0bff917 	ldw	r2,-28(fp)
   8b470:	10001726 	beq	r2,zero,8b4d0 <I2CL_MultipleRead+0x168>
        for(i=0;i<len && bSuccess;i++){
   8b474:	e03ff815 	stw	zero,-32(fp)
   8b478:	00001006 	br	8b4bc <I2CL_MultipleRead+0x154>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
   8b47c:	e0bff817 	ldw	r2,-32(fp)
   8b480:	e0fffe17 	ldw	r3,-8(fp)
   8b484:	1887883a 	add	r3,r3,r2
   8b488:	e0bfff0b 	ldhu	r2,-4(fp)
   8b48c:	113fffc4 	addi	r4,r2,-1
   8b490:	e0bff817 	ldw	r2,-32(fp)
   8b494:	2084c03a 	cmpne	r2,r4,r2
   8b498:	10803fcc 	andi	r2,r2,255
   8b49c:	e13ffb17 	ldw	r4,-20(fp)
   8b4a0:	e17ffc17 	ldw	r5,-16(fp)
   8b4a4:	180d883a 	mov	r6,r3
   8b4a8:	100f883a 	mov	r7,r2
   8b4ac:	008afc40 	call	8afc4 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   8b4b0:	e0bff817 	ldw	r2,-32(fp)
   8b4b4:	10800044 	addi	r2,r2,1
   8b4b8:	e0bff815 	stw	r2,-32(fp)
   8b4bc:	e0bfff0b 	ldhu	r2,-4(fp)
   8b4c0:	e0fff817 	ldw	r3,-32(fp)
   8b4c4:	1880020e 	bge	r3,r2,8b4d0 <I2CL_MultipleRead+0x168>
   8b4c8:	e0bff917 	ldw	r2,-28(fp)
   8b4cc:	103feb1e 	bne	r2,zero,8b47c <I2CL_MultipleRead+0x114>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }
    }
    i2c_stop(clk_base, data_base);
   8b4d0:	e13ffb17 	ldw	r4,-20(fp)
   8b4d4:	e17ffc17 	ldw	r5,-16(fp)
   8b4d8:	008ae200 	call	8ae20 <i2c_stop>

    return bSuccess;
   8b4dc:	e0bff917 	ldw	r2,-28(fp)

}
   8b4e0:	e037883a 	mov	sp,fp
   8b4e4:	dfc00117 	ldw	ra,4(sp)
   8b4e8:	df000017 	ldw	fp,0(sp)
   8b4ec:	dec00204 	addi	sp,sp,8
   8b4f0:	f800283a 	ret

0008b4f4 <adv7513_int_mask_to_long>:
		unsigned int reg97;
	};
};

static inline unsigned int adv7513_int_mask_to_long(const struct adv7513_int_mask *mask)
{
   8b4f4:	defffe04 	addi	sp,sp,-8
   8b4f8:	df000115 	stw	fp,4(sp)
   8b4fc:	df000104 	addi	fp,sp,4
   8b500:	e13fff15 	stw	r4,-4(fp)
	return ((unsigned int)(mask->reg92 << 16) | (mask->reg94 << 8) | mask->reg95);
   8b504:	e0bfff17 	ldw	r2,-4(fp)
   8b508:	10800017 	ldw	r2,0(r2)
   8b50c:	1006943a 	slli	r3,r2,16
   8b510:	e0bfff17 	ldw	r2,-4(fp)
   8b514:	10800117 	ldw	r2,4(r2)
   8b518:	1004923a 	slli	r2,r2,8
   8b51c:	1886b03a 	or	r3,r3,r2
   8b520:	e0bfff17 	ldw	r2,-4(fp)
   8b524:	10800217 	ldw	r2,8(r2)
   8b528:	1884b03a 	or	r2,r3,r2
}
   8b52c:	e037883a 	mov	sp,fp
   8b530:	df000017 	ldw	fp,0(sp)
   8b534:	dec00104 	addi	sp,sp,4
   8b538:	f800283a 	ret

0008b53c <adv7513_long_to_int_mask>:

static inline void adv7513_long_to_int_mask(struct adv7513_int_mask *mask, unsigned int long_val)
{
   8b53c:	defffd04 	addi	sp,sp,-12
   8b540:	df000215 	stw	fp,8(sp)
   8b544:	df000204 	addi	fp,sp,8
   8b548:	e13ffe15 	stw	r4,-8(fp)
   8b54c:	e17fff15 	stw	r5,-4(fp)
	mask->reg92 = (long_val >> 16) & 0xff;
   8b550:	e0bfff17 	ldw	r2,-4(fp)
   8b554:	1004d43a 	srli	r2,r2,16
   8b558:	10c03fcc 	andi	r3,r2,255
   8b55c:	e0bffe17 	ldw	r2,-8(fp)
   8b560:	10c00015 	stw	r3,0(r2)
	mask->reg94 = (long_val >> 8) & 0xff;
   8b564:	e0bfff17 	ldw	r2,-4(fp)
   8b568:	1004d23a 	srli	r2,r2,8
   8b56c:	10c03fcc 	andi	r3,r2,255
   8b570:	e0bffe17 	ldw	r2,-8(fp)
   8b574:	10c00115 	stw	r3,4(r2)
	mask->reg95 = long_val & 0xff;
   8b578:	e0bfff17 	ldw	r2,-4(fp)
   8b57c:	10c03fcc 	andi	r3,r2,255
   8b580:	e0bffe17 	ldw	r2,-8(fp)
   8b584:	10c00215 	stw	r3,8(r2)
}
   8b588:	e037883a 	mov	sp,fp
   8b58c:	df000017 	ldw	fp,0(sp)
   8b590:	dec00104 	addi	sp,sp,4
   8b594:	f800283a 	ret

0008b598 <bin_dump>:
#define ADV7513_SALVE_ADDR8		((alt_u8)(ADV7513_SALVE_ADDR7) << 1)		// 0x72)PD-low 0x7A)PD-high

#define ADV7513_EDID_ADDR8		0x7e

static int bin_dump(const alt_u8 *buf, int len)
{
   8b598:	defff104 	addi	sp,sp,-60
   8b59c:	dfc00e15 	stw	ra,56(sp)
   8b5a0:	df000d15 	stw	fp,52(sp)
   8b5a4:	df000d04 	addi	fp,sp,52
   8b5a8:	e13ffe15 	stw	r4,-8(fp)
   8b5ac:	e17fff15 	stw	r5,-4(fp)
   8b5b0:	d83bb615 	stw	zero,-4392(sp)
	int r, c;
	const alt_u8 *p = buf;
   8b5b4:	e0bffe17 	ldw	r2,-8(fp)
   8b5b8:	e0bffb15 	stw	r2,-20(fp)

	int rows = len / 16;
   8b5bc:	e0bfff17 	ldw	r2,-4(fp)
   8b5c0:	1000010e 	bge	r2,zero,8b5c8 <bin_dump+0x30>
   8b5c4:	108003c4 	addi	r2,r2,15
   8b5c8:	1005d13a 	srai	r2,r2,4
   8b5cc:	e0bffc15 	stw	r2,-16(fp)
	int cols = len % 16;
   8b5d0:	e0ffff17 	ldw	r3,-4(fp)
   8b5d4:	00a00034 	movhi	r2,32768
   8b5d8:	108003c4 	addi	r2,r2,15
   8b5dc:	1884703a 	and	r2,r3,r2
   8b5e0:	1000040e 	bge	r2,zero,8b5f4 <bin_dump+0x5c>
   8b5e4:	10bfffc4 	addi	r2,r2,-1
   8b5e8:	00fffc04 	movi	r3,-16
   8b5ec:	10c4b03a 	or	r2,r2,r3
   8b5f0:	10800044 	addi	r2,r2,1
   8b5f4:	e0bffd15 	stw	r2,-12(fp)

	if (len <= 0)
   8b5f8:	e0bfff17 	ldw	r2,-4(fp)
   8b5fc:	00800216 	blt	zero,r2,8b608 <bin_dump+0x70>
		return 0;
   8b600:	0005883a 	mov	r2,zero
   8b604:	00008a06 	br	8b830 <bin_dump+0x298>

	for (r = 0; r < rows; ++r, p += 16) {
   8b608:	e03ff915 	stw	zero,-28(fp)
   8b60c:	00005c06 	br	8b780 <bin_dump+0x1e8>
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
   8b610:	e0bff917 	ldw	r2,-28(fp)
   8b614:	100a913a 	slli	r5,r2,4
				r * 16, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);
   8b618:	e0bffb17 	ldw	r2,-20(fp)
   8b61c:	10800003 	ldbu	r2,0(r2)

	if (len <= 0)
		return 0;

	for (r = 0; r < rows; ++r, p += 16) {
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
   8b620:	10c03fcc 	andi	r3,r2,255
				r * 16, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);
   8b624:	e0bffb17 	ldw	r2,-20(fp)
   8b628:	10800044 	addi	r2,r2,1
   8b62c:	10800003 	ldbu	r2,0(r2)

	if (len <= 0)
		return 0;

	for (r = 0; r < rows; ++r, p += 16) {
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
   8b630:	10803fcc 	andi	r2,r2,255
				r * 16, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);
   8b634:	e13ffb17 	ldw	r4,-20(fp)
   8b638:	21000084 	addi	r4,r4,2
   8b63c:	21000003 	ldbu	r4,0(r4)

	if (len <= 0)
		return 0;

	for (r = 0; r < rows; ++r, p += 16) {
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
   8b640:	22803fcc 	andi	r10,r4,255
				r * 16, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);
   8b644:	e13ffb17 	ldw	r4,-20(fp)
   8b648:	210000c4 	addi	r4,r4,3
   8b64c:	21000003 	ldbu	r4,0(r4)

	if (len <= 0)
		return 0;

	for (r = 0; r < rows; ++r, p += 16) {
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
   8b650:	22403fcc 	andi	r9,r4,255
				r * 16, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);
   8b654:	e13ffb17 	ldw	r4,-20(fp)
   8b658:	21000104 	addi	r4,r4,4
   8b65c:	21000003 	ldbu	r4,0(r4)

	if (len <= 0)
		return 0;

	for (r = 0; r < rows; ++r, p += 16) {
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
   8b660:	22003fcc 	andi	r8,r4,255
				r * 16, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);
   8b664:	e13ffb17 	ldw	r4,-20(fp)
   8b668:	21000144 	addi	r4,r4,5
   8b66c:	21000003 	ldbu	r4,0(r4)

	if (len <= 0)
		return 0;

	for (r = 0; r < rows; ++r, p += 16) {
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
   8b670:	21c03fcc 	andi	r7,r4,255
				r * 16, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);
   8b674:	e13ffb17 	ldw	r4,-20(fp)
   8b678:	21000184 	addi	r4,r4,6
   8b67c:	21000003 	ldbu	r4,0(r4)

	if (len <= 0)
		return 0;

	for (r = 0; r < rows; ++r, p += 16) {
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
   8b680:	21803fcc 	andi	r6,r4,255
				r * 16, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);
   8b684:	e13ffb17 	ldw	r4,-20(fp)
   8b688:	210001c4 	addi	r4,r4,7
   8b68c:	21000003 	ldbu	r4,0(r4)

	if (len <= 0)
		return 0;

	for (r = 0; r < rows; ++r, p += 16) {
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
   8b690:	21003fcc 	andi	r4,r4,255
   8b694:	da800015 	stw	r10,0(sp)
   8b698:	da400115 	stw	r9,4(sp)
   8b69c:	da000215 	stw	r8,8(sp)
   8b6a0:	d9c00315 	stw	r7,12(sp)
   8b6a4:	d9800415 	stw	r6,16(sp)
   8b6a8:	d9000515 	stw	r4,20(sp)
   8b6ac:	010002b4 	movhi	r4,10
   8b6b0:	21326604 	addi	r4,r4,-13928
   8b6b4:	180d883a 	mov	r6,r3
   8b6b8:	100f883a 	mov	r7,r2
   8b6bc:	008e5840 	call	8e584 <printf>
				r * 16, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);

		printf("%02x %02x %02x %02x %02x %02x %02x %02x\n",
				p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15]);
   8b6c0:	e0bffb17 	ldw	r2,-20(fp)
   8b6c4:	10800204 	addi	r2,r2,8
   8b6c8:	10800003 	ldbu	r2,0(r2)

	for (r = 0; r < rows; ++r, p += 16) {
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
				r * 16, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);

		printf("%02x %02x %02x %02x %02x %02x %02x %02x\n",
   8b6cc:	11403fcc 	andi	r5,r2,255
				p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15]);
   8b6d0:	e0bffb17 	ldw	r2,-20(fp)
   8b6d4:	10800244 	addi	r2,r2,9
   8b6d8:	10800003 	ldbu	r2,0(r2)

	for (r = 0; r < rows; ++r, p += 16) {
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
				r * 16, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);

		printf("%02x %02x %02x %02x %02x %02x %02x %02x\n",
   8b6dc:	10c03fcc 	andi	r3,r2,255
				p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15]);
   8b6e0:	e0bffb17 	ldw	r2,-20(fp)
   8b6e4:	10800284 	addi	r2,r2,10
   8b6e8:	10800003 	ldbu	r2,0(r2)

	for (r = 0; r < rows; ++r, p += 16) {
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
				r * 16, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);

		printf("%02x %02x %02x %02x %02x %02x %02x %02x\n",
   8b6ec:	10803fcc 	andi	r2,r2,255
				p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15]);
   8b6f0:	e13ffb17 	ldw	r4,-20(fp)
   8b6f4:	210002c4 	addi	r4,r4,11
   8b6f8:	21000003 	ldbu	r4,0(r4)

	for (r = 0; r < rows; ++r, p += 16) {
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
				r * 16, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);

		printf("%02x %02x %02x %02x %02x %02x %02x %02x\n",
   8b6fc:	22403fcc 	andi	r9,r4,255
				p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15]);
   8b700:	e13ffb17 	ldw	r4,-20(fp)
   8b704:	21000304 	addi	r4,r4,12
   8b708:	21000003 	ldbu	r4,0(r4)

	for (r = 0; r < rows; ++r, p += 16) {
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
				r * 16, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);

		printf("%02x %02x %02x %02x %02x %02x %02x %02x\n",
   8b70c:	22003fcc 	andi	r8,r4,255
				p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15]);
   8b710:	e13ffb17 	ldw	r4,-20(fp)
   8b714:	21000344 	addi	r4,r4,13
   8b718:	21000003 	ldbu	r4,0(r4)

	for (r = 0; r < rows; ++r, p += 16) {
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
				r * 16, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);

		printf("%02x %02x %02x %02x %02x %02x %02x %02x\n",
   8b71c:	21c03fcc 	andi	r7,r4,255
				p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15]);
   8b720:	e13ffb17 	ldw	r4,-20(fp)
   8b724:	21000384 	addi	r4,r4,14
   8b728:	21000003 	ldbu	r4,0(r4)

	for (r = 0; r < rows; ++r, p += 16) {
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
				r * 16, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);

		printf("%02x %02x %02x %02x %02x %02x %02x %02x\n",
   8b72c:	21803fcc 	andi	r6,r4,255
				p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15]);
   8b730:	e13ffb17 	ldw	r4,-20(fp)
   8b734:	210003c4 	addi	r4,r4,15
   8b738:	21000003 	ldbu	r4,0(r4)

	for (r = 0; r < rows; ++r, p += 16) {
		printf("%04x | %02x %02x %02x %02x %02x %02x %02x %02x - ",
				r * 16, p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);

		printf("%02x %02x %02x %02x %02x %02x %02x %02x\n",
   8b73c:	21003fcc 	andi	r4,r4,255
   8b740:	da400015 	stw	r9,0(sp)
   8b744:	da000115 	stw	r8,4(sp)
   8b748:	d9c00215 	stw	r7,8(sp)
   8b74c:	d9800315 	stw	r6,12(sp)
   8b750:	d9000415 	stw	r4,16(sp)
   8b754:	010002b4 	movhi	r4,10
   8b758:	21327304 	addi	r4,r4,-13876
   8b75c:	180d883a 	mov	r6,r3
   8b760:	100f883a 	mov	r7,r2
   8b764:	008e5840 	call	8e584 <printf>
	int cols = len % 16;

	if (len <= 0)
		return 0;

	for (r = 0; r < rows; ++r, p += 16) {
   8b768:	e0bff917 	ldw	r2,-28(fp)
   8b76c:	10800044 	addi	r2,r2,1
   8b770:	e0bff915 	stw	r2,-28(fp)
   8b774:	e0bffb17 	ldw	r2,-20(fp)
   8b778:	10800404 	addi	r2,r2,16
   8b77c:	e0bffb15 	stw	r2,-20(fp)
   8b780:	e0fff917 	ldw	r3,-28(fp)
   8b784:	e0bffc17 	ldw	r2,-16(fp)
   8b788:	18bfa116 	blt	r3,r2,8b610 <bin_dump+0x78>

		printf("%02x %02x %02x %02x %02x %02x %02x %02x\n",
				p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15]);
	}

	if (cols > 0) {
   8b78c:	e0bffd17 	ldw	r2,-12(fp)
   8b790:	0080260e 	bge	zero,r2,8b82c <bin_dump+0x294>
		printf("%04x | ", (rows - 1) * 16);
   8b794:	e0bffc17 	ldw	r2,-16(fp)
   8b798:	10bfffc4 	addi	r2,r2,-1
   8b79c:	1004913a 	slli	r2,r2,4
   8b7a0:	010002b4 	movhi	r4,10
   8b7a4:	21327e04 	addi	r4,r4,-13832
   8b7a8:	100b883a 	mov	r5,r2
   8b7ac:	008e5840 	call	8e584 <printf>
		for (c = 0; c < cols; ++c, ++p) {
   8b7b0:	e03ffa15 	stw	zero,-24(fp)
   8b7b4:	00001806 	br	8b818 <bin_dump+0x280>
			if (c == 8) {
   8b7b8:	e0bffa17 	ldw	r2,-24(fp)
   8b7bc:	10800218 	cmpnei	r2,r2,8
   8b7c0:	1000081e 	bne	r2,zero,8b7e4 <bin_dump+0x24c>
				printf("- %02x ", *p);
   8b7c4:	e0bffb17 	ldw	r2,-20(fp)
   8b7c8:	10800003 	ldbu	r2,0(r2)
   8b7cc:	10803fcc 	andi	r2,r2,255
   8b7d0:	010002b4 	movhi	r4,10
   8b7d4:	21328004 	addi	r4,r4,-13824
   8b7d8:	100b883a 	mov	r5,r2
   8b7dc:	008e5840 	call	8e584 <printf>
   8b7e0:	00000706 	br	8b800 <bin_dump+0x268>
			} else {
				printf("%02x ", *p);
   8b7e4:	e0bffb17 	ldw	r2,-20(fp)
   8b7e8:	10800003 	ldbu	r2,0(r2)
   8b7ec:	10803fcc 	andi	r2,r2,255
   8b7f0:	010002b4 	movhi	r4,10
   8b7f4:	21328204 	addi	r4,r4,-13816
   8b7f8:	100b883a 	mov	r5,r2
   8b7fc:	008e5840 	call	8e584 <printf>
				p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15]);
	}

	if (cols > 0) {
		printf("%04x | ", (rows - 1) * 16);
		for (c = 0; c < cols; ++c, ++p) {
   8b800:	e0bffa17 	ldw	r2,-24(fp)
   8b804:	10800044 	addi	r2,r2,1
   8b808:	e0bffa15 	stw	r2,-24(fp)
   8b80c:	e0bffb17 	ldw	r2,-20(fp)
   8b810:	10800044 	addi	r2,r2,1
   8b814:	e0bffb15 	stw	r2,-20(fp)
   8b818:	e0fffa17 	ldw	r3,-24(fp)
   8b81c:	e0bffd17 	ldw	r2,-12(fp)
   8b820:	18bfe516 	blt	r3,r2,8b7b8 <bin_dump+0x220>
				printf("- %02x ", *p);
			} else {
				printf("%02x ", *p);
			}
		}
		printf("\n");
   8b824:	01000284 	movi	r4,10
   8b828:	008e5c80 	call	8e5c8 <putchar>
	}

	return len;
   8b82c:	e0bfff17 	ldw	r2,-4(fp)
}
   8b830:	e037883a 	mov	sp,fp
   8b834:	dfc00117 	ldw	ra,4(sp)
   8b838:	df000017 	ldw	fp,0(sp)
   8b83c:	dec00204 	addi	sp,sp,8
   8b840:	f800283a 	ret

0008b844 <adv7513_int_handler>:

// WARNING: for simplicity, we use potentially cpu-blocking codes in this ISR ...
//  - use printf() (normally you should not)
//  - cope with hot-plug tasks (usually it should be deferred to application level rather than in interrupt level)
static void adv7513_int_handler(void *context)
{
   8b844:	deffed04 	addi	sp,sp,-76
   8b848:	dfc01215 	stw	ra,72(sp)
   8b84c:	df001115 	stw	fp,68(sp)
   8b850:	dc001015 	stw	r16,64(sp)
   8b854:	df001004 	addi	fp,sp,64
   8b858:	e13fff15 	stw	r4,-4(fp)
   8b85c:	d83bb615 	stw	zero,-4392(sp)
	struct hdmi_encoder *ec = (struct hdmi_encoder *)context;
   8b860:	e0bfff17 	ldw	r2,-4(fp)
   8b864:	e0bff315 	stw	r2,-52(fp)
	struct adv7513_int_mask int_mask;
	struct adv7513_int_status int_status;
	int r;

	// get system irq status
	irq_status = IORD_ALTERA_AVALON_PIO_EDGE_CAP(HDMI_TX_INT_N_BASE) & HDMI_TX_INT_MASK;
   8b868:	00800434 	movhi	r2,16
   8b86c:	10840b04 	addi	r2,r2,4140
   8b870:	10800037 	ldwio	r2,0(r2)
   8b874:	1080004c 	andi	r2,r2,1
   8b878:	e0bff415 	stw	r2,-48(fp)
	//if (irq_status == 0)
	//	return;

	// clear system irq flag
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(HDMI_TX_INT_N_BASE, 0x00);
   8b87c:	0007883a 	mov	r3,zero
   8b880:	00800434 	movhi	r2,16
   8b884:	10840b04 	addi	r2,r2,4140
   8b888:	10c00035 	stwio	r3,0(r2)

	// reload adv7513 int mask value
	adv7513_long_to_int_mask(&int_mask, ec->int_mask);
   8b88c:	e0bff317 	ldw	r2,-52(fp)
   8b890:	10800617 	ldw	r2,24(r2)
   8b894:	e0fff804 	addi	r3,fp,-32
   8b898:	1809883a 	mov	r4,r3
   8b89c:	100b883a 	mov	r5,r2
   8b8a0:	008b53c0 	call	8b53c <adv7513_long_to_int_mask>

	// get adv7513 int status
	r = reg_read(ec, 0x93, &regv);
   8b8a4:	e0bff704 	addi	r2,fp,-36
   8b8a8:	e13ff317 	ldw	r4,-52(fp)
   8b8ac:	014024c4 	movi	r5,147
   8b8b0:	100d883a 	mov	r6,r2
   8b8b4:	008a6140 	call	8a614 <reg_read>
   8b8b8:	e0bff515 	stw	r2,-44(fp)
	if (r != 0)
   8b8bc:	e0bff517 	ldw	r2,-44(fp)
   8b8c0:	1000cc1e 	bne	r2,zero,8bbf4 <adv7513_int_handler+0x3b0>
		return;
	int_status.reg93 = regv;
   8b8c4:	e0bff703 	ldbu	r2,-36(fp)
   8b8c8:	10803fcc 	andi	r2,r2,255
   8b8cc:	e0bffb15 	stw	r2,-20(fp)

	r = reg_read(ec, 0x96, &regv);
   8b8d0:	e0bff704 	addi	r2,fp,-36
   8b8d4:	e13ff317 	ldw	r4,-52(fp)
   8b8d8:	01402584 	movi	r5,150
   8b8dc:	100d883a 	mov	r6,r2
   8b8e0:	008a6140 	call	8a614 <reg_read>
   8b8e4:	e0bff515 	stw	r2,-44(fp)
	if (r != 0)
   8b8e8:	e0bff517 	ldw	r2,-44(fp)
   8b8ec:	1000c11e 	bne	r2,zero,8bbf4 <adv7513_int_handler+0x3b0>
		return;
	int_status.reg96 = regv;
   8b8f0:	e0bff703 	ldbu	r2,-36(fp)
   8b8f4:	10803fcc 	andi	r2,r2,255
   8b8f8:	e0bffc15 	stw	r2,-16(fp)

	r = reg_read(ec, 0x97, &regv);
   8b8fc:	e0bff704 	addi	r2,fp,-36
   8b900:	e13ff317 	ldw	r4,-52(fp)
   8b904:	014025c4 	movi	r5,151
   8b908:	100d883a 	mov	r6,r2
   8b90c:	008a6140 	call	8a614 <reg_read>
   8b910:	e0bff515 	stw	r2,-44(fp)
	if (r != 0)
   8b914:	e0bff517 	ldw	r2,-44(fp)
   8b918:	1000b61e 	bne	r2,zero,8bbf4 <adv7513_int_handler+0x3b0>
		return;
	int_status.reg97 = regv;
   8b91c:	e0bff703 	ldbu	r2,-36(fp)
   8b920:	10803fcc 	andi	r2,r2,255
   8b924:	e0bffd15 	stw	r2,-12(fp)

	// disable adv7513 int
	reg_write(ec, 0x92, 0);
   8b928:	e13ff317 	ldw	r4,-52(fp)
   8b92c:	01402484 	movi	r5,146
   8b930:	000d883a 	mov	r6,zero
   8b934:	008a6a00 	call	8a6a0 <reg_write>
	reg_write(ec, 0x94, 0);
   8b938:	e13ff317 	ldw	r4,-52(fp)
   8b93c:	01402504 	movi	r5,148
   8b940:	000d883a 	mov	r6,zero
   8b944:	008a6a00 	call	8a6a0 <reg_write>
	reg_write(ec, 0x95, 0);
   8b948:	e13ff317 	ldw	r4,-52(fp)
   8b94c:	01402544 	movi	r5,149
   8b950:	000d883a 	mov	r6,zero
   8b954:	008a6a00 	call	8a6a0 <reg_write>

	// clear adv7513 int status
	if (int_status.reg93 != 0) {
   8b958:	e0bffb17 	ldw	r2,-20(fp)
   8b95c:	10000426 	beq	r2,zero,8b970 <adv7513_int_handler+0x12c>
		reg_write(ec, 0x93, 0xff);
   8b960:	e13ff317 	ldw	r4,-52(fp)
   8b964:	014024c4 	movi	r5,147
   8b968:	01803fc4 	movi	r6,255
   8b96c:	008a6a00 	call	8a6a0 <reg_write>
	}

	if (int_status.reg96 != 0) {
   8b970:	e0bffc17 	ldw	r2,-16(fp)
   8b974:	10000426 	beq	r2,zero,8b988 <adv7513_int_handler+0x144>
		reg_write(ec, 0x96, 0xff);
   8b978:	e13ff317 	ldw	r4,-52(fp)
   8b97c:	01402584 	movi	r5,150
   8b980:	01803fc4 	movi	r6,255
   8b984:	008a6a00 	call	8a6a0 <reg_write>
	}

	if (int_status.reg97 != 0) {
   8b988:	e0bffd17 	ldw	r2,-12(fp)
   8b98c:	10000426 	beq	r2,zero,8b9a0 <adv7513_int_handler+0x15c>
		reg_write(ec, 0x97, 0xff);
   8b990:	e13ff317 	ldw	r4,-52(fp)
   8b994:	014025c4 	movi	r5,151
   8b998:	01803fc4 	movi	r6,255
   8b99c:	008a6a00 	call	8a6a0 <reg_write>

	// -------------------------------------------------------
	// handle adv7513 interrupt events
	// WARNING: this should be an application level task ...
	//
	if (int_status.reg96_bits.monitor_sense || int_status.reg96_bits.hpd) {
   8b9a0:	e0bffc17 	ldw	r2,-16(fp)
   8b9a4:	1080100c 	andi	r2,r2,64
   8b9a8:	1000031e 	bne	r2,zero,8b9b8 <adv7513_int_handler+0x174>
   8b9ac:	e0bffc17 	ldw	r2,-16(fp)
   8b9b0:	1080200c 	andi	r2,r2,128
   8b9b4:	10006f26 	beq	r2,zero,8bb74 <adv7513_int_handler+0x330>
   8b9b8:	d805883a 	mov	r2,sp
   8b9bc:	1021883a 	mov	r16,r2

		alt_u8 edid[256];
   8b9c0:	d83b7615 	stw	zero,-4648(sp)
   8b9c4:	deffc004 	addi	sp,sp,-256
   8b9c8:	d805883a 	mov	r2,sp
   8b9cc:	1005883a 	mov	r2,r2
   8b9d0:	e0bff615 	stw	r2,-40(fp)
		int dvi_mode = 0;
   8b9d4:	e03ff015 	stw	zero,-64(fp)
		int pwr_state = 0;
   8b9d8:	e03ffe15 	stw	zero,-8(fp)
		int pwron_retry_count = 200;
   8b9dc:	00803204 	movi	r2,200
   8b9e0:	e0bff115 	stw	r2,-60(fp)
		int m_sense_retry_count = 30;
   8b9e4:	00800784 	movi	r2,30
   8b9e8:	e0bff215 	stw	r2,-56(fp)

		while (m_sense_retry_count-- > 0) {
   8b9ec:	00000f06 	br	8ba2c <adv7513_int_handler+0x1e8>
			r = reg_read(ec, ADV7513_REG_STATUS, &regv);
   8b9f0:	e0bff704 	addi	r2,fp,-36
   8b9f4:	e13ff317 	ldw	r4,-52(fp)
   8b9f8:	01401084 	movi	r5,66
   8b9fc:	100d883a 	mov	r6,r2
   8ba00:	008a6140 	call	8a614 <reg_read>
   8ba04:	e0bff515 	stw	r2,-44(fp)
			if (r != 0)
   8ba08:	e0bff517 	ldw	r2,-44(fp)
   8ba0c:	10000226 	beq	r2,zero,8ba18 <adv7513_int_handler+0x1d4>
   8ba10:	0005883a 	mov	r2,zero
   8ba14:	00005506 	br	8bb6c <adv7513_int_handler+0x328>
				goto __unplugged_iret;

			if ((regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE))) == ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE)))
   8ba18:	e0bff703 	ldbu	r2,-36(fp)
   8ba1c:	10803fcc 	andi	r2,r2,255
   8ba20:	1080180c 	andi	r2,r2,96
   8ba24:	10801818 	cmpnei	r2,r2,96
   8ba28:	10000826 	beq	r2,zero,8ba4c <adv7513_int_handler+0x208>
		int dvi_mode = 0;
		int pwr_state = 0;
		int pwron_retry_count = 200;
		int m_sense_retry_count = 30;

		while (m_sense_retry_count-- > 0) {
   8ba2c:	e0bff217 	ldw	r2,-56(fp)
   8ba30:	0084803a 	cmplt	r2,zero,r2
   8ba34:	e0fff217 	ldw	r3,-56(fp)
   8ba38:	18ffffc4 	addi	r3,r3,-1
   8ba3c:	e0fff215 	stw	r3,-56(fp)
   8ba40:	10803fcc 	andi	r2,r2,255
   8ba44:	103fea1e 	bne	r2,zero,8b9f0 <adv7513_int_handler+0x1ac>
   8ba48:	00000106 	br	8ba50 <adv7513_int_handler+0x20c>
			r = reg_read(ec, ADV7513_REG_STATUS, &regv);
			if (r != 0)
				goto __unplugged_iret;

			if ((regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE))) == ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE)))
				break;
   8ba4c:	0001883a 	nop
		}

		if ((regv & ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE))) != ((ADV7513_STATUS_HPD) | (ADV7513_STATUS_MONITOR_SENSE)))
   8ba50:	e0bff703 	ldbu	r2,-36(fp)
   8ba54:	10803fcc 	andi	r2,r2,255
   8ba58:	1080180c 	andi	r2,r2,96
   8ba5c:	10801820 	cmpeqi	r2,r2,96
   8ba60:	1000021e 	bne	r2,zero,8ba6c <adv7513_int_handler+0x228>
   8ba64:	0005883a 	mov	r2,zero
   8ba68:	00004006 	br	8bb6c <adv7513_int_handler+0x328>
			goto __unplugged_iret;

		// now we have both HPD and monitor-sense signal asserted

		// power up the hdmi-encoder ...
		r = adv7513_do_hpd_powerup(ec);
   8ba6c:	e13ff317 	ldw	r4,-52(fp)
   8ba70:	00804900 	call	80490 <adv7513_do_hpd_powerup>
   8ba74:	e0bff515 	stw	r2,-44(fp)
		if (r != 0)
   8ba78:	e0bff517 	ldw	r2,-44(fp)
   8ba7c:	10000226 	beq	r2,zero,8ba88 <adv7513_int_handler+0x244>
   8ba80:	0005883a 	mov	r2,zero
   8ba84:	00003906 	br	8bb6c <adv7513_int_handler+0x328>
			goto __unplugged_iret;

		// readback edid data
		r = adv7513_edid_read(ec, edid, 0);
   8ba88:	e0bff617 	ldw	r2,-40(fp)
   8ba8c:	e13ff317 	ldw	r4,-52(fp)
   8ba90:	100b883a 	mov	r5,r2
   8ba94:	000d883a 	mov	r6,zero
   8ba98:	00807a40 	call	807a4 <adv7513_edid_read>
   8ba9c:	e0bff515 	stw	r2,-44(fp)
		if (r != 0)
   8baa0:	e0bff517 	ldw	r2,-44(fp)
   8baa4:	10000226 	beq	r2,zero,8bab0 <adv7513_int_handler+0x26c>
			dvi_mode = 1;
   8baa8:	00800044 	movi	r2,1
   8baac:	e0bff015 	stw	r2,-64(fp)

		if (edid[0x7e] == 0)
   8bab0:	e0bff617 	ldw	r2,-40(fp)
   8bab4:	10801f83 	ldbu	r2,126(r2)
   8bab8:	10803fcc 	andi	r2,r2,255
   8babc:	1000191e 	bne	r2,zero,8bb24 <adv7513_int_handler+0x2e0>
			dvi_mode = 1;
   8bac0:	00800044 	movi	r2,1
   8bac4:	e0bff015 	stw	r2,-64(fp)

		// configure the hdmi-encoder ...
		while (pwron_retry_count > 0) {
   8bac8:	00001606 	br	8bb24 <adv7513_int_handler+0x2e0>
			r = adv7513_chip_init(ec, dvi_mode);
   8bacc:	e13ff317 	ldw	r4,-52(fp)
   8bad0:	e17ff017 	ldw	r5,-64(fp)
   8bad4:	00818940 	call	81894 <adv7513_chip_init>
   8bad8:	e0bff515 	stw	r2,-44(fp)
			if (r != 0)
   8badc:	e0bff517 	ldw	r2,-44(fp)
   8bae0:	10000226 	beq	r2,zero,8baec <adv7513_int_handler+0x2a8>
   8bae4:	0005883a 	mov	r2,zero
   8bae8:	00002006 	br	8bb6c <adv7513_int_handler+0x328>
				goto __unplugged_iret;

			r = adv7513_power_state(ec, &pwr_state);
   8baec:	e0bffe04 	addi	r2,fp,-8
   8baf0:	e13ff317 	ldw	r4,-52(fp)
   8baf4:	100b883a 	mov	r5,r2
   8baf8:	00806680 	call	80668 <adv7513_power_state>
   8bafc:	e0bff515 	stw	r2,-44(fp)
			if (r != 0)
   8bb00:	e0bff517 	ldw	r2,-44(fp)
   8bb04:	10000226 	beq	r2,zero,8bb10 <adv7513_int_handler+0x2cc>
   8bb08:	0005883a 	mov	r2,zero
   8bb0c:	00001706 	br	8bb6c <adv7513_int_handler+0x328>
				goto __unplugged_iret;

			if (pwr_state != 0)
   8bb10:	e0bffe17 	ldw	r2,-8(fp)
   8bb14:	1000061e 	bne	r2,zero,8bb30 <adv7513_int_handler+0x2ec>
				break;
			--pwron_retry_count;
   8bb18:	e0bff117 	ldw	r2,-60(fp)
   8bb1c:	10bfffc4 	addi	r2,r2,-1
   8bb20:	e0bff115 	stw	r2,-60(fp)

		if (edid[0x7e] == 0)
			dvi_mode = 1;

		// configure the hdmi-encoder ...
		while (pwron_retry_count > 0) {
   8bb24:	e0bff117 	ldw	r2,-60(fp)
   8bb28:	00bfe816 	blt	zero,r2,8bacc <adv7513_int_handler+0x288>
   8bb2c:	00000106 	br	8bb34 <adv7513_int_handler+0x2f0>
			r = adv7513_power_state(ec, &pwr_state);
			if (r != 0)
				goto __unplugged_iret;

			if (pwr_state != 0)
				break;
   8bb30:	0001883a 	nop
			--pwron_retry_count;
		}

		r = adv7513_power_state(ec, &pwr_state);
   8bb34:	e0bffe04 	addi	r2,fp,-8
   8bb38:	e13ff317 	ldw	r4,-52(fp)
   8bb3c:	100b883a 	mov	r5,r2
   8bb40:	00806680 	call	80668 <adv7513_power_state>
   8bb44:	e0bff515 	stw	r2,-44(fp)
		if (r != 0)
   8bb48:	e0bff517 	ldw	r2,-44(fp)
   8bb4c:	10000226 	beq	r2,zero,8bb58 <adv7513_int_handler+0x314>
   8bb50:	0005883a 	mov	r2,zero
   8bb54:	00000506 	br	8bb6c <adv7513_int_handler+0x328>
			goto __unplugged_iret;

		if (pwr_state == 0)
   8bb58:	e0bffe17 	ldw	r2,-8(fp)
   8bb5c:	1000021e 	bne	r2,zero,8bb68 <adv7513_int_handler+0x324>
   8bb60:	0005883a 	mov	r2,zero
   8bb64:	00000106 	br	8bb6c <adv7513_int_handler+0x328>
   8bb68:	00800044 	movi	r2,1
   8bb6c:	8037883a 	mov	sp,r16
   8bb70:	1000101e 	bne	r2,zero,8bbb4 <adv7513_int_handler+0x370>
	}

__unplugged_iret:

	// enable interrupts
	reg_write(ec, 0x92, int_mask.reg92);
   8bb74:	e0bff817 	ldw	r2,-32(fp)
   8bb78:	e13ff317 	ldw	r4,-52(fp)
   8bb7c:	01402484 	movi	r5,146
   8bb80:	100d883a 	mov	r6,r2
   8bb84:	008a6a00 	call	8a6a0 <reg_write>
	reg_write(ec, 0x94, int_mask.reg94);
   8bb88:	e0bff917 	ldw	r2,-28(fp)
   8bb8c:	e13ff317 	ldw	r4,-52(fp)
   8bb90:	01402504 	movi	r5,148
   8bb94:	100d883a 	mov	r6,r2
   8bb98:	008a6a00 	call	8a6a0 <reg_write>
	reg_write(ec, 0x95, int_mask.reg95);
   8bb9c:	e0bffa17 	ldw	r2,-24(fp)
   8bba0:	e13ff317 	ldw	r4,-52(fp)
   8bba4:	01402544 	movi	r5,149
   8bba8:	100d883a 	mov	r6,r2
   8bbac:	008a6a00 	call	8a6a0 <reg_write>
   8bbb0:	00001006 	br	8bbf4 <adv7513_int_handler+0x3b0>
	return;

__plugged_iret:

	// enable interrupts
	reg_write(ec, 0x92, int_mask.reg92);
   8bbb4:	e0bff817 	ldw	r2,-32(fp)
   8bbb8:	e13ff317 	ldw	r4,-52(fp)
   8bbbc:	01402484 	movi	r5,146
   8bbc0:	100d883a 	mov	r6,r2
   8bbc4:	008a6a00 	call	8a6a0 <reg_write>
	reg_write(ec, 0x94, int_mask.reg94 & 0xbf);  // disable sending monitor-sense interrupt since it is already connected
   8bbc8:	e0bff917 	ldw	r2,-28(fp)
   8bbcc:	10802fcc 	andi	r2,r2,191
   8bbd0:	e13ff317 	ldw	r4,-52(fp)
   8bbd4:	01402504 	movi	r5,148
   8bbd8:	100d883a 	mov	r6,r2
   8bbdc:	008a6a00 	call	8a6a0 <reg_write>
	reg_write(ec, 0x95, int_mask.reg95);
   8bbe0:	e0bffa17 	ldw	r2,-24(fp)
   8bbe4:	e13ff317 	ldw	r4,-52(fp)
   8bbe8:	01402544 	movi	r5,149
   8bbec:	100d883a 	mov	r6,r2
   8bbf0:	008a6a00 	call	8a6a0 <reg_write>

	return;
}
   8bbf4:	e037883a 	mov	sp,fp
   8bbf8:	dfc00217 	ldw	ra,8(sp)
   8bbfc:	df000117 	ldw	fp,4(sp)
   8bc00:	dc000017 	ldw	r16,0(sp)
   8bc04:	dec00304 	addi	sp,sp,12
   8bc08:	f800283a 	ret

0008bc0c <adv7513_int_setup>:

int adv7513_int_setup(struct hdmi_encoder *ec, const struct adv7513_int_mask *mask, alt_isr_func isr)
{
   8bc0c:	defff904 	addi	sp,sp,-28
   8bc10:	dfc00615 	stw	ra,24(sp)
   8bc14:	df000515 	stw	fp,20(sp)
   8bc18:	df000504 	addi	fp,sp,20
   8bc1c:	e13ffd15 	stw	r4,-12(fp)
   8bc20:	e17ffe15 	stw	r5,-8(fp)
   8bc24:	e1bfff15 	stw	r6,-4(fp)
   8bc28:	d83bb615 	stw	zero,-4392(sp)
	int r = 0;
   8bc2c:	e03ffc15 	stw	zero,-16(fp)

	//printf("adv7513_int_setup()\n");

	ec->int_mask = adv7513_int_mask_to_long(mask);
   8bc30:	e13ffe17 	ldw	r4,-8(fp)
   8bc34:	008b4f40 	call	8b4f4 <adv7513_int_mask_to_long>
   8bc38:	e0fffd17 	ldw	r3,-12(fp)
   8bc3c:	18800615 	stw	r2,24(r3)

	// disable HDMI_TX_INT
	alt_ic_irq_disable(HDMI_TX_INT_N_IRQ_INTERRUPT_CONTROLLER_ID, HDMI_TX_INT_N_IRQ);
   8bc40:	0009883a 	mov	r4,zero
   8bc44:	01400084 	movi	r5,2
   8bc48:	00970880 	call	97088 <alt_ic_irq_disable>

	r = reg_write(ec, 0x92, 0);
   8bc4c:	e13ffd17 	ldw	r4,-12(fp)
   8bc50:	01402484 	movi	r5,146
   8bc54:	000d883a 	mov	r6,zero
   8bc58:	008a6a00 	call	8a6a0 <reg_write>
   8bc5c:	e0bffc15 	stw	r2,-16(fp)
	if (r != 0)
   8bc60:	e0bffc17 	ldw	r2,-16(fp)
   8bc64:	10000226 	beq	r2,zero,8bc70 <adv7513_int_setup+0x64>
		return -1;
   8bc68:	00bfffc4 	movi	r2,-1
   8bc6c:	00006a06 	br	8be18 <adv7513_int_setup+0x20c>

	r = reg_write(ec, 0x94, 0);
   8bc70:	e13ffd17 	ldw	r4,-12(fp)
   8bc74:	01402504 	movi	r5,148
   8bc78:	000d883a 	mov	r6,zero
   8bc7c:	008a6a00 	call	8a6a0 <reg_write>
   8bc80:	e0bffc15 	stw	r2,-16(fp)
	if (r != 0)
   8bc84:	e0bffc17 	ldw	r2,-16(fp)
   8bc88:	10000226 	beq	r2,zero,8bc94 <adv7513_int_setup+0x88>
		return -1;
   8bc8c:	00bfffc4 	movi	r2,-1
   8bc90:	00006106 	br	8be18 <adv7513_int_setup+0x20c>

	r = reg_write(ec, 0x95, 0);
   8bc94:	e13ffd17 	ldw	r4,-12(fp)
   8bc98:	01402544 	movi	r5,149
   8bc9c:	000d883a 	mov	r6,zero
   8bca0:	008a6a00 	call	8a6a0 <reg_write>
   8bca4:	e0bffc15 	stw	r2,-16(fp)
	if (r != 0)
   8bca8:	e0bffc17 	ldw	r2,-16(fp)
   8bcac:	10000226 	beq	r2,zero,8bcb8 <adv7513_int_setup+0xac>
		return -1;
   8bcb0:	00bfffc4 	movi	r2,-1
   8bcb4:	00005806 	br	8be18 <adv7513_int_setup+0x20c>

	// clear int flags
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(HDMI_TX_INT_N_BASE, 0x00);
   8bcb8:	0007883a 	mov	r3,zero
   8bcbc:	00800434 	movhi	r2,16
   8bcc0:	10840b04 	addi	r2,r2,4140
   8bcc4:	10c00035 	stwio	r3,0(r2)

	r = reg_write(ec, 0x93, 0xff);
   8bcc8:	e13ffd17 	ldw	r4,-12(fp)
   8bccc:	014024c4 	movi	r5,147
   8bcd0:	01803fc4 	movi	r6,255
   8bcd4:	008a6a00 	call	8a6a0 <reg_write>
   8bcd8:	e0bffc15 	stw	r2,-16(fp)
	if (r != 0)
   8bcdc:	e0bffc17 	ldw	r2,-16(fp)
   8bce0:	10000226 	beq	r2,zero,8bcec <adv7513_int_setup+0xe0>
		return -1;
   8bce4:	00bfffc4 	movi	r2,-1
   8bce8:	00004b06 	br	8be18 <adv7513_int_setup+0x20c>

	r = reg_write(ec, 0x96, 0xff);
   8bcec:	e13ffd17 	ldw	r4,-12(fp)
   8bcf0:	01402584 	movi	r5,150
   8bcf4:	01803fc4 	movi	r6,255
   8bcf8:	008a6a00 	call	8a6a0 <reg_write>
   8bcfc:	e0bffc15 	stw	r2,-16(fp)
	if (r != 0)
   8bd00:	e0bffc17 	ldw	r2,-16(fp)
   8bd04:	10000226 	beq	r2,zero,8bd10 <adv7513_int_setup+0x104>
		return -1;
   8bd08:	00bfffc4 	movi	r2,-1
   8bd0c:	00004206 	br	8be18 <adv7513_int_setup+0x20c>

	r = reg_write(ec, 0x97, 0xff);
   8bd10:	e13ffd17 	ldw	r4,-12(fp)
   8bd14:	014025c4 	movi	r5,151
   8bd18:	01803fc4 	movi	r6,255
   8bd1c:	008a6a00 	call	8a6a0 <reg_write>
   8bd20:	e0bffc15 	stw	r2,-16(fp)
	if (r != 0)
   8bd24:	e0bffc17 	ldw	r2,-16(fp)
   8bd28:	10000226 	beq	r2,zero,8bd34 <adv7513_int_setup+0x128>
		return -1;
   8bd2c:	00bfffc4 	movi	r2,-1
   8bd30:	00003906 	br	8be18 <adv7513_int_setup+0x20c>

	// enable interrupt
	if (ec->int_mask > 0) {
   8bd34:	e0bffd17 	ldw	r2,-12(fp)
   8bd38:	10800617 	ldw	r2,24(r2)
   8bd3c:	10003526 	beq	r2,zero,8be14 <adv7513_int_setup+0x208>
		// register isr
		if (isr) {
   8bd40:	e0bfff17 	ldw	r2,-4(fp)
   8bd44:	10000b26 	beq	r2,zero,8bd74 <adv7513_int_setup+0x168>
			// register interrupt handler
			r = alt_ic_isr_register(HDMI_TX_INT_N_IRQ_INTERRUPT_CONTROLLER_ID, HDMI_TX_INT_N_IRQ, isr, ec, NULL);
   8bd48:	d8000015 	stw	zero,0(sp)
   8bd4c:	0009883a 	mov	r4,zero
   8bd50:	01400084 	movi	r5,2
   8bd54:	e1bfff17 	ldw	r6,-4(fp)
   8bd58:	e1fffd17 	ldw	r7,-12(fp)
   8bd5c:	0096f980 	call	96f98 <alt_ic_isr_register>
   8bd60:	e0bffc15 	stw	r2,-16(fp)
			if (r != 0)
   8bd64:	e0bffc17 	ldw	r2,-16(fp)
   8bd68:	10000226 	beq	r2,zero,8bd74 <adv7513_int_setup+0x168>
				return -1;
   8bd6c:	00bfffc4 	movi	r2,-1
   8bd70:	00002906 	br	8be18 <adv7513_int_setup+0x20c>
		}

		// enable interrupts
		r = reg_write(ec, 0x92, mask->reg92);
   8bd74:	e0bffe17 	ldw	r2,-8(fp)
   8bd78:	10800017 	ldw	r2,0(r2)
   8bd7c:	e13ffd17 	ldw	r4,-12(fp)
   8bd80:	01402484 	movi	r5,146
   8bd84:	100d883a 	mov	r6,r2
   8bd88:	008a6a00 	call	8a6a0 <reg_write>
   8bd8c:	e0bffc15 	stw	r2,-16(fp)
		if (r != 0)
   8bd90:	e0bffc17 	ldw	r2,-16(fp)
   8bd94:	10000226 	beq	r2,zero,8bda0 <adv7513_int_setup+0x194>
			return -1;
   8bd98:	00bfffc4 	movi	r2,-1
   8bd9c:	00001e06 	br	8be18 <adv7513_int_setup+0x20c>

		r = reg_write(ec, 0x94, mask->reg94);
   8bda0:	e0bffe17 	ldw	r2,-8(fp)
   8bda4:	10800117 	ldw	r2,4(r2)
   8bda8:	e13ffd17 	ldw	r4,-12(fp)
   8bdac:	01402504 	movi	r5,148
   8bdb0:	100d883a 	mov	r6,r2
   8bdb4:	008a6a00 	call	8a6a0 <reg_write>
   8bdb8:	e0bffc15 	stw	r2,-16(fp)
		if (r != 0)
   8bdbc:	e0bffc17 	ldw	r2,-16(fp)
   8bdc0:	10000226 	beq	r2,zero,8bdcc <adv7513_int_setup+0x1c0>
			return -1;
   8bdc4:	00bfffc4 	movi	r2,-1
   8bdc8:	00001306 	br	8be18 <adv7513_int_setup+0x20c>

		r = reg_write(ec, 0x95, mask->reg95);
   8bdcc:	e0bffe17 	ldw	r2,-8(fp)
   8bdd0:	10800217 	ldw	r2,8(r2)
   8bdd4:	e13ffd17 	ldw	r4,-12(fp)
   8bdd8:	01402544 	movi	r5,149
   8bddc:	100d883a 	mov	r6,r2
   8bde0:	008a6a00 	call	8a6a0 <reg_write>
   8bde4:	e0bffc15 	stw	r2,-16(fp)
		if (r != 0)
   8bde8:	e0bffc17 	ldw	r2,-16(fp)
   8bdec:	10000226 	beq	r2,zero,8bdf8 <adv7513_int_setup+0x1ec>
			return -1;
   8bdf0:	00bfffc4 	movi	r2,-1
   8bdf4:	00000806 	br	8be18 <adv7513_int_setup+0x20c>

		IOWR_ALTERA_AVALON_PIO_IRQ_MASK(HDMI_TX_INT_N_BASE, HDMI_TX_INT_MASK); // 0x01: enable bit0
   8bdf8:	00c00044 	movi	r3,1
   8bdfc:	00800434 	movhi	r2,16
   8be00:	10840a04 	addi	r2,r2,4136
   8be04:	10c00035 	stwio	r3,0(r2)

		alt_ic_irq_enable(HDMI_TX_INT_N_IRQ_INTERRUPT_CONTROLLER_ID, HDMI_TX_INT_N_IRQ);
   8be08:	0009883a 	mov	r4,zero
   8be0c:	01400084 	movi	r5,2
   8be10:	0096fec0 	call	96fec <alt_ic_irq_enable>
	}

	return 0;
   8be14:	0005883a 	mov	r2,zero
}
   8be18:	e037883a 	mov	sp,fp
   8be1c:	dfc00117 	ldw	ra,4(sp)
   8be20:	df000017 	ldw	fp,0(sp)
   8be24:	dec00204 	addi	sp,sp,8
   8be28:	f800283a 	ret

0008be2c <cmd_help>:

static void cmd_help()
{
   8be2c:	defffe04 	addi	sp,sp,-8
   8be30:	dfc00115 	stw	ra,4(sp)
   8be34:	df000015 	stw	fp,0(sp)
   8be38:	d839883a 	mov	fp,sp
   8be3c:	d83bb615 	stw	zero,-4392(sp)
	printf("  d         perform register-space dump of the ADV7513 encoder\n");
   8be40:	010002b4 	movhi	r4,10
   8be44:	21328404 	addi	r4,r4,-13808
   8be48:	008e6680 	call	8e668 <puts>
	printf("  e         display EDID raw data of currently connected monitor\n");
   8be4c:	010002b4 	movhi	r4,10
   8be50:	21329404 	addi	r4,r4,-13744
   8be54:	008e6680 	call	8e668 <puts>
	printf("  e p       display EDID raw data of currently connected monitor\n");
   8be58:	010002b4 	movhi	r4,10
   8be5c:	2132a504 	addi	r4,r4,-13676
   8be60:	008e6680 	call	8e668 <puts>
	printf("            and decode it in the human readable format\n");
   8be64:	010002b4 	movhi	r4,10
   8be68:	2132b604 	addi	r4,r4,-13608
   8be6c:	008e6680 	call	8e668 <puts>
	printf("  m         display current VIC and mode info (not exactly accurate)\n");
   8be70:	010002b4 	movhi	r4,10
   8be74:	2132c404 	addi	r4,r4,-13552
   8be78:	008e6680 	call	8e668 <puts>
	printf("  o         power off the HDMI encoder\n");
   8be7c:	010002b4 	movhi	r4,10
   8be80:	2132d604 	addi	r4,r4,-13480
   8be84:	008e6680 	call	8e668 <puts>
	printf("  i         power up the HDMI encoder and initialize it in HDMI mode\n");
   8be88:	010002b4 	movhi	r4,10
   8be8c:	2132e004 	addi	r4,r4,-13440
   8be90:	008e6680 	call	8e668 <puts>
	printf("  v         power up the HDMI encoder and initialize it in DVI mode\n");
   8be94:	010002b4 	movhi	r4,10
   8be98:	2132f204 	addi	r4,r4,-13368
   8be9c:	008e6680 	call	8e668 <puts>
	printf("  r hh      readback HDMI encoder register at address hh (2-digit hex)\n");
   8bea0:	010002b4 	movhi	r4,10
   8bea4:	21330304 	addi	r4,r4,-13300
   8bea8:	008e6680 	call	8e668 <puts>
	printf("  w hh vv   write HDMI encoder register value vv (2-digit hex) to address hh\n");
   8beac:	010002b4 	movhi	r4,10
   8beb0:	21331504 	addi	r4,r4,-13228
   8beb4:	008e6680 	call	8e668 <puts>
	printf("            (note that hh should be exactly a 2-digit hex number)\n");
   8beb8:	010002b4 	movhi	r4,10
   8bebc:	21332904 	addi	r4,r4,-13148
   8bec0:	008e6680 	call	8e668 <puts>
}
   8bec4:	e037883a 	mov	sp,fp
   8bec8:	dfc00117 	ldw	ra,4(sp)
   8becc:	df000017 	ldw	fp,0(sp)
   8bed0:	dec00204 	addi	sp,sp,8
   8bed4:	f800283a 	ret

0008bed8 <main>:
};

alt_u8 edid[256];

int main(int argc, const char *argv[])
{
   8bed8:	deffea04 	addi	sp,sp,-88
   8bedc:	dfc01515 	stw	ra,84(sp)
   8bee0:	df001415 	stw	fp,80(sp)
   8bee4:	dc401315 	stw	r17,76(sp)
   8bee8:	dc001215 	stw	r16,72(sp)
   8beec:	df001204 	addi	fp,sp,72
   8bef0:	e13ffe15 	stw	r4,-8(fp)
   8bef4:	e17fff15 	stw	r5,-4(fp)
   8bef8:	d83bb615 	stw	zero,-4392(sp)
	int r = 0, rr = 0;
   8befc:	e03fef15 	stw	zero,-68(fp)
   8bf00:	e03fee15 	stw	zero,-72(fp)

	struct adv7513_int_mask ie_mask;

	memset(&ie_mask, 0, sizeof(ie_mask));
   8bf04:	e0bff404 	addi	r2,fp,-48
   8bf08:	1009883a 	mov	r4,r2
   8bf0c:	000b883a 	mov	r5,zero
   8bf10:	01800304 	movi	r6,12
   8bf14:	008e47c0 	call	8e47c <memset>

	printf("\n===== c5g/de1-77 adv7513 hdmi encoder demo =====\n");
   8bf18:	010002b4 	movhi	r4,10
   8bf1c:	21333a04 	addi	r4,r4,-13080
   8bf20:	008e6680 	call	8e668 <puts>

	r = adv7513_chip_identify(&encoder);
   8bf24:	010002b4 	movhi	r4,10
   8bf28:	21365f04 	addi	r4,r4,-9860
   8bf2c:	008023c0 	call	8023c <adv7513_chip_identify>
   8bf30:	e0bfef15 	stw	r2,-68(fp)
	if (r != 0) {
   8bf34:	e0bfef17 	ldw	r2,-68(fp)
   8bf38:	10000726 	beq	r2,zero,8bf58 <main+0x80>
		printf("[err] failed to do chip-identification! (%d)\n", r);
   8bf3c:	010002b4 	movhi	r4,10
   8bf40:	21334704 	addi	r4,r4,-13028
   8bf44:	e17fef17 	ldw	r5,-68(fp)
   8bf48:	008e5840 	call	8e584 <printf>
		rr = -1;
   8bf4c:	00bfffc4 	movi	r2,-1
   8bf50:	e0bfee15 	stw	r2,-72(fp)
		goto _safe_exit;
   8bf54:	0001f806 	br	8c738 <main+0x860>
	}

	if ((encoder.chip_id[0] == 0x11) && (encoder.chip_id[1] == 0x75)) {
   8bf58:	008002b4 	movhi	r2,10
   8bf5c:	10b65f04 	addi	r2,r2,-9860
   8bf60:	10800703 	ldbu	r2,28(r2)
   8bf64:	10803fcc 	andi	r2,r2,255
   8bf68:	10800458 	cmpnei	r2,r2,17
   8bf6c:	1000181e 	bne	r2,zero,8bfd0 <main+0xf8>
   8bf70:	008002b4 	movhi	r2,10
   8bf74:	10b65f04 	addi	r2,r2,-9860
   8bf78:	10800743 	ldbu	r2,29(r2)
   8bf7c:	10803fcc 	andi	r2,r2,255
   8bf80:	10801d58 	cmpnei	r2,r2,117
   8bf84:	1000121e 	bne	r2,zero,8bfd0 <main+0xf8>
		printf("encoder chip : ADV%02x%02x rev: 0x%02x\n", encoder.chip_id[1], encoder.chip_id[0], encoder.chip_rev[0]);
   8bf88:	008002b4 	movhi	r2,10
   8bf8c:	10b65f04 	addi	r2,r2,-9860
   8bf90:	10800743 	ldbu	r2,29(r2)
   8bf94:	11403fcc 	andi	r5,r2,255
   8bf98:	008002b4 	movhi	r2,10
   8bf9c:	10b65f04 	addi	r2,r2,-9860
   8bfa0:	10800703 	ldbu	r2,28(r2)
   8bfa4:	10c03fcc 	andi	r3,r2,255
   8bfa8:	008002b4 	movhi	r2,10
   8bfac:	10b65f04 	addi	r2,r2,-9860
   8bfb0:	10800803 	ldbu	r2,32(r2)
   8bfb4:	10803fcc 	andi	r2,r2,255
   8bfb8:	010002b4 	movhi	r4,10
   8bfbc:	21335304 	addi	r4,r4,-12980
   8bfc0:	180d883a 	mov	r6,r3
   8bfc4:	100f883a 	mov	r7,r2
   8bfc8:	008e5840 	call	8e584 <printf>
   8bfcc:	00001106 	br	8c014 <main+0x13c>
	} else {
		printf("encoder chip : unknown (id: 0x%02x 0x%02x rev: 0x%02x)\n", encoder.chip_id[0], encoder.chip_id[1], encoder.chip_rev[0]);
   8bfd0:	008002b4 	movhi	r2,10
   8bfd4:	10b65f04 	addi	r2,r2,-9860
   8bfd8:	10800703 	ldbu	r2,28(r2)
   8bfdc:	11403fcc 	andi	r5,r2,255
   8bfe0:	008002b4 	movhi	r2,10
   8bfe4:	10b65f04 	addi	r2,r2,-9860
   8bfe8:	10800743 	ldbu	r2,29(r2)
   8bfec:	10c03fcc 	andi	r3,r2,255
   8bff0:	008002b4 	movhi	r2,10
   8bff4:	10b65f04 	addi	r2,r2,-9860
   8bff8:	10800803 	ldbu	r2,32(r2)
   8bffc:	10803fcc 	andi	r2,r2,255
   8c000:	010002b4 	movhi	r4,10
   8c004:	21335d04 	addi	r4,r4,-12940
   8c008:	180d883a 	mov	r6,r3
   8c00c:	100f883a 	mov	r7,r2
   8c010:	008e5840 	call	8e584 <printf>
	}

	ie_mask.reg94_bits.hpd = 1;
   8c014:	e0fff503 	ldbu	r3,-44(fp)
   8c018:	00bfe004 	movi	r2,-128
   8c01c:	1884b03a 	or	r2,r3,r2
   8c020:	e0bff505 	stb	r2,-44(fp)
	ie_mask.reg94_bits.monitor_sense = 1;
   8c024:	e0bff503 	ldbu	r2,-44(fp)
   8c028:	10801014 	ori	r2,r2,64
   8c02c:	e0bff505 	stb	r2,-44(fp)

	r = adv7513_int_setup(&encoder, &ie_mask, adv7513_int_handler);
   8c030:	e0bff404 	addi	r2,fp,-48
   8c034:	010002b4 	movhi	r4,10
   8c038:	21365f04 	addi	r4,r4,-9860
   8c03c:	100b883a 	mov	r5,r2
   8c040:	01800274 	movhi	r6,9
   8c044:	31ae1104 	addi	r6,r6,-18364
   8c048:	008bc0c0 	call	8bc0c <adv7513_int_setup>
   8c04c:	e0bfef15 	stw	r2,-68(fp)
	if (r != 0) {
   8c050:	e0bfef17 	ldw	r2,-68(fp)
   8c054:	10000726 	beq	r2,zero,8c074 <main+0x19c>
		printf("[err] failed to do HDMI_TX_INT interrupt setup! (%d)\n", r);
   8c058:	010002b4 	movhi	r4,10
   8c05c:	21336b04 	addi	r4,r4,-12884
   8c060:	e17fef17 	ldw	r5,-68(fp)
   8c064:	008e5840 	call	8e584 <printf>
		rr = -1;
   8c068:	00bfffc4 	movi	r2,-1
   8c06c:	e0bfee15 	stw	r2,-72(fp)
		goto _safe_exit;
   8c070:	0001b106 	br	8c738 <main+0x860>
	} else {
		printf("success to setup HDMI_TX_INT interrupt handler.\n");
   8c074:	010002b4 	movhi	r4,10
   8c078:	21337904 	addi	r4,r4,-12828
   8c07c:	008e6680 	call	8e668 <puts>
	}

	adv7513_kick_up(&encoder);
   8c080:	010002b4 	movhi	r4,10
   8c084:	21365f04 	addi	r4,r4,-9860
   8c088:	00805c80 	call	805c8 <adv7513_kick_up>

	printf("\noperation hints ...\n");
   8c08c:	010002b4 	movhi	r4,10
   8c090:	21338504 	addi	r4,r4,-12780
   8c094:	008e6680 	call	8e668 <puts>
	printf(" - please wait for monitor sync ...\n");
   8c098:	010002b4 	movhi	r4,10
   8c09c:	21338b04 	addi	r4,r4,-12756
   8c0a0:	008e6680 	call	8e668 <puts>
	printf("   the pattern will be auto sent out to your monitor.\n");
   8c0a4:	010002b4 	movhi	r4,10
   8c0a8:	21339404 	addi	r4,r4,-12720
   8c0ac:	008e6680 	call	8e668 <puts>
	printf(" - press onboard push-button KEY1 can switch current display mode.\n");
   8c0b0:	010002b4 	movhi	r4,10
   8c0b4:	2133a204 	addi	r4,r4,-12664
   8c0b8:	008e6680 	call	8e668 <puts>
	printf(" - type \"h\" in the command line prompt to see available commands.\n");
   8c0bc:	010002b4 	movhi	r4,10
   8c0c0:	2133b304 	addi	r4,r4,-12596
   8c0c4:	008e6680 	call	8e668 <puts>

	printf("\na breif summary of commands for quick start up ...\n");
   8c0c8:	010002b4 	movhi	r4,10
   8c0cc:	2133c404 	addi	r4,r4,-12528
   8c0d0:	008e6680 	call	8e668 <puts>
	printf("  d         perform register-space dump of the ADV7513 encoder\n");
   8c0d4:	010002b4 	movhi	r4,10
   8c0d8:	21328404 	addi	r4,r4,-13808
   8c0dc:	008e6680 	call	8e668 <puts>
	printf("  e         display EDID raw data of currently connected monitor\n");
   8c0e0:	010002b4 	movhi	r4,10
   8c0e4:	21329404 	addi	r4,r4,-13744
   8c0e8:	008e6680 	call	8e668 <puts>
	printf("  e p       display EDID raw data of currently connected monitor\n");
   8c0ec:	010002b4 	movhi	r4,10
   8c0f0:	2132a504 	addi	r4,r4,-13676
   8c0f4:	008e6680 	call	8e668 <puts>
	printf("            and decode it in the human readable format\n");
   8c0f8:	010002b4 	movhi	r4,10
   8c0fc:	2132b604 	addi	r4,r4,-13608
   8c100:	008e6680 	call	8e668 <puts>
	printf("  m         display current VIC and mode info (not exactly accurate)\n");
   8c104:	010002b4 	movhi	r4,10
   8c108:	2132c404 	addi	r4,r4,-13552
   8c10c:	008e6680 	call	8e668 <puts>
	printf("  o         power off the HDMI encoder\n");
   8c110:	010002b4 	movhi	r4,10
   8c114:	2132d604 	addi	r4,r4,-13480
   8c118:	008e6680 	call	8e668 <puts>
	printf("  i         power up the HDMI encoder and initialize it in HDMI mode\n");
   8c11c:	010002b4 	movhi	r4,10
   8c120:	2132e004 	addi	r4,r4,-13440
   8c124:	008e6680 	call	8e668 <puts>
   8c128:	d805883a 	mov	r2,sp
   8c12c:	1021883a 	mov	r16,r2

	// interactive command line mode -- used in local develop-testing
	while (1) {

		char cmd[80] = {0};
   8c130:	d83ba215 	stw	zero,-4472(sp)
   8c134:	deffec04 	addi	sp,sp,-80
   8c138:	d805883a 	mov	r2,sp
   8c13c:	1005883a 	mov	r2,r2
   8c140:	e0bff015 	stw	r2,-64(fp)
   8c144:	e0bff017 	ldw	r2,-64(fp)
   8c148:	1007883a 	mov	r3,r2
   8c14c:	00801404 	movi	r2,80
   8c150:	1809883a 	mov	r4,r3
   8c154:	000b883a 	mov	r5,zero
   8c158:	100d883a 	mov	r6,r2
   8c15c:	008e47c0 	call	8e47c <memset>

		printf("\ncommand (h for help) > ");
   8c160:	010002b4 	movhi	r4,10
   8c164:	2133d104 	addi	r4,r4,-12476
   8c168:	008e5840 	call	8e584 <printf>

		fgets(cmd, 256, stdin);
   8c16c:	e0fff017 	ldw	r3,-64(fp)
   8c170:	008002b4 	movhi	r2,10
   8c174:	10bd6704 	addi	r2,r2,-2660
   8c178:	10800017 	ldw	r2,0(r2)
   8c17c:	10800117 	ldw	r2,4(r2)
   8c180:	1809883a 	mov	r4,r3
   8c184:	01404004 	movi	r5,256
   8c188:	100d883a 	mov	r6,r2
   8c18c:	008d6300 	call	8d630 <fgets>

		if (cmd[0] == 'd') {
   8c190:	e0bff017 	ldw	r2,-64(fp)
   8c194:	10800003 	ldbu	r2,0(r2)
   8c198:	10803fcc 	andi	r2,r2,255
   8c19c:	1080201c 	xori	r2,r2,128
   8c1a0:	10bfe004 	addi	r2,r2,-128
   8c1a4:	10801918 	cmpnei	r2,r2,100
   8c1a8:	10001c1e 	bne	r2,zero,8c21c <main+0x344>
   8c1ac:	d805883a 	mov	r2,sp
   8c1b0:	1023883a 	mov	r17,r2
			alt_u8 regs[256];
   8c1b4:	d83b7615 	stw	zero,-4648(sp)
   8c1b8:	deffc004 	addi	sp,sp,-256
   8c1bc:	d805883a 	mov	r2,sp
   8c1c0:	1005883a 	mov	r2,r2
   8c1c4:	e0bff115 	stw	r2,-60(fp)

			r = adv7513_regmap_dump(&encoder, regs, 0);
   8c1c8:	e0bff117 	ldw	r2,-60(fp)
   8c1cc:	010002b4 	movhi	r4,10
   8c1d0:	21365f04 	addi	r4,r4,-9860
   8c1d4:	100b883a 	mov	r5,r2
   8c1d8:	000d883a 	mov	r6,zero
   8c1dc:	00808780 	call	80878 <adv7513_regmap_dump>
   8c1e0:	e0bfef15 	stw	r2,-68(fp)
			if (r != 0) {
   8c1e4:	e0bfef17 	ldw	r2,-68(fp)
   8c1e8:	10000426 	beq	r2,zero,8c1fc <main+0x324>
				printf("[err] failed to read HDMI encoder regs! (%d)\n", r);
   8c1ec:	010002b4 	movhi	r4,10
   8c1f0:	2133d804 	addi	r4,r4,-12448
   8c1f4:	e17fef17 	ldw	r5,-68(fp)
   8c1f8:	008e5840 	call	8e584 <printf>
			}

			printf("\n\n");
   8c1fc:	010002b4 	movhi	r4,10
   8c200:	2133e404 	addi	r4,r4,-12400
   8c204:	008e6680 	call	8e668 <puts>
			bin_dump(regs, 256);
   8c208:	e0bff117 	ldw	r2,-60(fp)
   8c20c:	1009883a 	mov	r4,r2
   8c210:	01404004 	movi	r5,256
   8c214:	008b5980 	call	8b598 <bin_dump>
   8c218:	8837883a 	mov	sp,r17
		}

		if (cmd[0] == 'e') {
   8c21c:	e0bff017 	ldw	r2,-64(fp)
   8c220:	10800003 	ldbu	r2,0(r2)
   8c224:	10803fcc 	andi	r2,r2,255
   8c228:	1080201c 	xori	r2,r2,128
   8c22c:	10bfe004 	addi	r2,r2,-128
   8c230:	10801958 	cmpnei	r2,r2,101
   8c234:	10003c1e 	bne	r2,zero,8c328 <main+0x450>
			r = adv7513_edid_read(&encoder, edid, 0);
   8c238:	010002b4 	movhi	r4,10
   8c23c:	21365f04 	addi	r4,r4,-9860
   8c240:	014002b4 	movhi	r5,10
   8c244:	29452b04 	addi	r5,r5,5292
   8c248:	000d883a 	mov	r6,zero
   8c24c:	00807a40 	call	807a4 <adv7513_edid_read>
   8c250:	e0bfef15 	stw	r2,-68(fp)
			if (r != 0) {
   8c254:	e0bfef17 	ldw	r2,-68(fp)
   8c258:	10000426 	beq	r2,zero,8c26c <main+0x394>
				printf("[err] failed to read edid data! (%d)\n", r);
   8c25c:	010002b4 	movhi	r4,10
   8c260:	2133e504 	addi	r4,r4,-12396
   8c264:	e17fef17 	ldw	r5,-68(fp)
   8c268:	008e5840 	call	8e584 <printf>
			}

			printf("\n\n");
   8c26c:	010002b4 	movhi	r4,10
   8c270:	2133e404 	addi	r4,r4,-12400
   8c274:	008e6680 	call	8e668 <puts>
			bin_dump(edid, 256);
   8c278:	010002b4 	movhi	r4,10
   8c27c:	21052b04 	addi	r4,r4,5292
   8c280:	01404004 	movi	r5,256
   8c284:	008b5980 	call	8b598 <bin_dump>

			printf("\n");
   8c288:	01000284 	movi	r4,10
   8c28c:	008e5c80 	call	8e5c8 <putchar>
			if (cmd[2] == 'p') {
   8c290:	e0bff017 	ldw	r2,-64(fp)
   8c294:	10800083 	ldbu	r2,2(r2)
   8c298:	10803fcc 	andi	r2,r2,255
   8c29c:	1080201c 	xori	r2,r2,128
   8c2a0:	10bfe004 	addi	r2,r2,-128
   8c2a4:	10801c18 	cmpnei	r2,r2,112
   8c2a8:	10001f1e 	bne	r2,zero,8c328 <main+0x450>
   8c2ac:	d805883a 	mov	r2,sp
   8c2b0:	1023883a 	mov	r17,r2
				struct base_edid edid_info;
   8c2b4:	d837b615 	stw	zero,-8488(sp)
   8c2b8:	d833b615 	stw	zero,-12584(sp)
   8c2bc:	d82fb615 	stw	zero,-16680(sp)
   8c2c0:	d82bb615 	stw	zero,-20776(sp)
   8c2c4:	d82a3215 	stw	zero,-22328(sp)
   8c2c8:	deee7c04 	addi	sp,sp,-17936
   8c2cc:	d805883a 	mov	r2,sp
   8c2d0:	108000c4 	addi	r2,r2,3
   8c2d4:	1004d0ba 	srli	r2,r2,2
   8c2d8:	1085883a 	add	r2,r2,r2
   8c2dc:	1085883a 	add	r2,r2,r2
   8c2e0:	e0bff215 	stw	r2,-56(fp)

				r = edid_decode_v14(&edid_info, edid);
   8c2e4:	e0bff217 	ldw	r2,-56(fp)
   8c2e8:	1009883a 	mov	r4,r2
   8c2ec:	014002b4 	movhi	r5,10
   8c2f0:	29452b04 	addi	r5,r5,5292
   8c2f4:	0084d480 	call	84d48 <edid_decode_v14>
   8c2f8:	e0bfef15 	stw	r2,-68(fp)
				if (r != 0) {
   8c2fc:	e0bfef17 	ldw	r2,-68(fp)
   8c300:	10000526 	beq	r2,zero,8c318 <main+0x440>
					printf("[err] failed to decode edid data! (%d)\n", r);
   8c304:	010002b4 	movhi	r4,10
   8c308:	2133ef04 	addi	r4,r4,-12356
   8c30c:	e17fef17 	ldw	r5,-68(fp)
   8c310:	008e5840 	call	8e584 <printf>
   8c314:	00000306 	br	8c324 <main+0x44c>
				} else {
					edid_print_v14(&edid_info);
   8c318:	e0bff217 	ldw	r2,-56(fp)
   8c31c:	1009883a 	mov	r4,r2
   8c320:	0088eb00 	call	88eb0 <edid_print_v14>
   8c324:	8837883a 	mov	sp,r17
				}
			}
		}

		if (cmd[0] == 'i') {
   8c328:	e0bff017 	ldw	r2,-64(fp)
   8c32c:	10800003 	ldbu	r2,0(r2)
   8c330:	10803fcc 	andi	r2,r2,255
   8c334:	1080201c 	xori	r2,r2,128
   8c338:	10bfe004 	addi	r2,r2,-128
   8c33c:	10801a58 	cmpnei	r2,r2,105
   8c340:	1000201e 	bne	r2,zero,8c3c4 <main+0x4ec>
			printf("\n\n");
   8c344:	010002b4 	movhi	r4,10
   8c348:	2133e404 	addi	r4,r4,-12400
   8c34c:	008e6680 	call	8e668 <puts>

			r = adv7513_do_hpd_powerup(&encoder);
   8c350:	010002b4 	movhi	r4,10
   8c354:	21365f04 	addi	r4,r4,-9860
   8c358:	00804900 	call	80490 <adv7513_do_hpd_powerup>
   8c35c:	e0bfef15 	stw	r2,-68(fp)
			if (r != 0) {
   8c360:	e0bfef17 	ldw	r2,-68(fp)
   8c364:	10000526 	beq	r2,zero,8c37c <main+0x4a4>
				printf("[err] failed to do HDMI encoder power up! (%d)", r);
   8c368:	010002b4 	movhi	r4,10
   8c36c:	2133f904 	addi	r4,r4,-12316
   8c370:	e17fef17 	ldw	r5,-68(fp)
   8c374:	008e5840 	call	8e584 <printf>
   8c378:	00000306 	br	8c388 <main+0x4b0>
			} else {
				printf("[hpd] done HDMI encoder power up.\n");
   8c37c:	010002b4 	movhi	r4,10
   8c380:	21340504 	addi	r4,r4,-12268
   8c384:	008e6680 	call	8e668 <puts>
			}

			r = adv7513_chip_init(&encoder, 0);
   8c388:	010002b4 	movhi	r4,10
   8c38c:	21365f04 	addi	r4,r4,-9860
   8c390:	000b883a 	mov	r5,zero
   8c394:	00818940 	call	81894 <adv7513_chip_init>
   8c398:	e0bfef15 	stw	r2,-68(fp)
			if (r != 0) {
   8c39c:	e0bfef17 	ldw	r2,-68(fp)
   8c3a0:	10000526 	beq	r2,zero,8c3b8 <main+0x4e0>
				printf("[err] failed to do HDMI encoder initialization! (%d)\n", r);
   8c3a4:	010002b4 	movhi	r4,10
   8c3a8:	21340e04 	addi	r4,r4,-12232
   8c3ac:	e17fef17 	ldw	r5,-68(fp)
   8c3b0:	008e5840 	call	8e584 <printf>
   8c3b4:	00000306 	br	8c3c4 <main+0x4ec>
			} else {
				printf("[hpd] done HDMI encoder initialization.\n");
   8c3b8:	010002b4 	movhi	r4,10
   8c3bc:	21341c04 	addi	r4,r4,-12176
   8c3c0:	008e6680 	call	8e668 <puts>
			}
		}

		if (cmd[0] == 'v') {
   8c3c4:	e0bff017 	ldw	r2,-64(fp)
   8c3c8:	10800003 	ldbu	r2,0(r2)
   8c3cc:	10803fcc 	andi	r2,r2,255
   8c3d0:	1080201c 	xori	r2,r2,128
   8c3d4:	10bfe004 	addi	r2,r2,-128
   8c3d8:	10801d98 	cmpnei	r2,r2,118
   8c3dc:	1000201e 	bne	r2,zero,8c460 <main+0x588>
			printf("\n\n");
   8c3e0:	010002b4 	movhi	r4,10
   8c3e4:	2133e404 	addi	r4,r4,-12400
   8c3e8:	008e6680 	call	8e668 <puts>

			r = adv7513_do_hpd_powerup(&encoder);
   8c3ec:	010002b4 	movhi	r4,10
   8c3f0:	21365f04 	addi	r4,r4,-9860
   8c3f4:	00804900 	call	80490 <adv7513_do_hpd_powerup>
   8c3f8:	e0bfef15 	stw	r2,-68(fp)
			if (r != 0) {
   8c3fc:	e0bfef17 	ldw	r2,-68(fp)
   8c400:	10000526 	beq	r2,zero,8c418 <main+0x540>
				printf("[err] failed to do HDMI encoder power up! (%d)\n", r);
   8c404:	010002b4 	movhi	r4,10
   8c408:	21342604 	addi	r4,r4,-12136
   8c40c:	e17fef17 	ldw	r5,-68(fp)
   8c410:	008e5840 	call	8e584 <printf>
   8c414:	00000306 	br	8c424 <main+0x54c>
			} else {
				printf("[hpd] done HDMI encoder power up.\n");
   8c418:	010002b4 	movhi	r4,10
   8c41c:	21340504 	addi	r4,r4,-12268
   8c420:	008e6680 	call	8e668 <puts>
			}

			r = adv7513_chip_init(&encoder, 1);
   8c424:	010002b4 	movhi	r4,10
   8c428:	21365f04 	addi	r4,r4,-9860
   8c42c:	01400044 	movi	r5,1
   8c430:	00818940 	call	81894 <adv7513_chip_init>
   8c434:	e0bfef15 	stw	r2,-68(fp)
			if (r != 0) {
   8c438:	e0bfef17 	ldw	r2,-68(fp)
   8c43c:	10000526 	beq	r2,zero,8c454 <main+0x57c>
				printf("[err] failed to do HDMI encoder initialization! (%d)\n", r);
   8c440:	010002b4 	movhi	r4,10
   8c444:	21340e04 	addi	r4,r4,-12232
   8c448:	e17fef17 	ldw	r5,-68(fp)
   8c44c:	008e5840 	call	8e584 <printf>
   8c450:	00000306 	br	8c460 <main+0x588>
			} else {
				printf("[hpd] done HDMI encoder initialization.\n");
   8c454:	010002b4 	movhi	r4,10
   8c458:	21341c04 	addi	r4,r4,-12176
   8c45c:	008e6680 	call	8e668 <puts>
			}
		}

		if (cmd[0] == 'm') {
   8c460:	e0bff017 	ldw	r2,-64(fp)
   8c464:	10800003 	ldbu	r2,0(r2)
   8c468:	10803fcc 	andi	r2,r2,255
   8c46c:	1080201c 	xori	r2,r2,128
   8c470:	10bfe004 	addi	r2,r2,-128
   8c474:	10801b58 	cmpnei	r2,r2,109
   8c478:	1000161e 	bne	r2,zero,8c4d4 <main+0x5fc>
			int vic;
			const char *mode = 0;
   8c47c:	e03ff815 	stw	zero,-32(fp)

			r = adv7513_mode_state(&encoder, &vic, &mode);
   8c480:	e0fff704 	addi	r3,fp,-36
   8c484:	e0bff804 	addi	r2,fp,-32
   8c488:	010002b4 	movhi	r4,10
   8c48c:	21365f04 	addi	r4,r4,-9860
   8c490:	180b883a 	mov	r5,r3
   8c494:	100d883a 	mov	r6,r2
   8c498:	00806d80 	call	806d8 <adv7513_mode_state>
   8c49c:	e0bfef15 	stw	r2,-68(fp)
			if (r != 0) {
   8c4a0:	e0bfef17 	ldw	r2,-68(fp)
   8c4a4:	10000426 	beq	r2,zero,8c4b8 <main+0x5e0>
				printf("[err] failed to read HDMI encoder regs! (%d)\n", r);
   8c4a8:	010002b4 	movhi	r4,10
   8c4ac:	2133d804 	addi	r4,r4,-12448
   8c4b0:	e17fef17 	ldw	r5,-68(fp)
   8c4b4:	008e5840 	call	8e584 <printf>
			}

			printf("\n\ncurrent mode : VIC)%d %s\n", vic, mode);
   8c4b8:	e0fff717 	ldw	r3,-36(fp)
   8c4bc:	e0bff817 	ldw	r2,-32(fp)
   8c4c0:	010002b4 	movhi	r4,10
   8c4c4:	21343204 	addi	r4,r4,-12088
   8c4c8:	180b883a 	mov	r5,r3
   8c4cc:	100d883a 	mov	r6,r2
   8c4d0:	008e5840 	call	8e584 <printf>
		}

		if (cmd[0] == 'r') {
   8c4d4:	e0bff017 	ldw	r2,-64(fp)
   8c4d8:	10800003 	ldbu	r2,0(r2)
   8c4dc:	10803fcc 	andi	r2,r2,255
   8c4e0:	1080201c 	xori	r2,r2,128
   8c4e4:	10bfe004 	addi	r2,r2,-128
   8c4e8:	10801c98 	cmpnei	r2,r2,114
   8c4ec:	1000201e 	bne	r2,zero,8c570 <main+0x698>
			alt_u8 regv = 0;
   8c4f0:	e03ff905 	stb	zero,-28(fp)
			alt_u8 reg = 0;
   8c4f4:	e03ff305 	stb	zero,-52(fp)

			reg = (alt_u8)strtoul(&cmd[2], 0, 16);
   8c4f8:	e0bff017 	ldw	r2,-64(fp)
   8c4fc:	10800084 	addi	r2,r2,2
   8c500:	1009883a 	mov	r4,r2
   8c504:	000b883a 	mov	r5,zero
   8c508:	01800404 	movi	r6,16
   8c50c:	008edf00 	call	8edf0 <strtoul>
   8c510:	e0bff305 	stb	r2,-52(fp)

			printf("\n\n");
   8c514:	010002b4 	movhi	r4,10
   8c518:	2133e404 	addi	r4,r4,-12400
   8c51c:	008e6680 	call	8e668 <puts>
			if (reg_read(&encoder, reg, &regv) == 0) {
   8c520:	e0fff303 	ldbu	r3,-52(fp)
   8c524:	e0bff904 	addi	r2,fp,-28
   8c528:	010002b4 	movhi	r4,10
   8c52c:	21365f04 	addi	r4,r4,-9860
   8c530:	180b883a 	mov	r5,r3
   8c534:	100d883a 	mov	r6,r2
   8c538:	008a6140 	call	8a614 <reg_read>
   8c53c:	1000091e 	bne	r2,zero,8c564 <main+0x68c>
				printf("[%02x] %02x\n", reg, regv);
   8c540:	e0fff303 	ldbu	r3,-52(fp)
   8c544:	e0bff903 	ldbu	r2,-28(fp)
   8c548:	10803fcc 	andi	r2,r2,255
   8c54c:	010002b4 	movhi	r4,10
   8c550:	21343904 	addi	r4,r4,-12060
   8c554:	180b883a 	mov	r5,r3
   8c558:	100d883a 	mov	r6,r2
   8c55c:	008e5840 	call	8e584 <printf>
   8c560:	00000306 	br	8c570 <main+0x698>
			} else {
				printf("[err] i2c error!\n");
   8c564:	010002b4 	movhi	r4,10
   8c568:	21343d04 	addi	r4,r4,-12044
   8c56c:	008e6680 	call	8e668 <puts>
			}
		}

		if (cmd[0] == 'w') {
   8c570:	e0bff017 	ldw	r2,-64(fp)
   8c574:	10800003 	ldbu	r2,0(r2)
   8c578:	10803fcc 	andi	r2,r2,255
   8c57c:	1080201c 	xori	r2,r2,128
   8c580:	10bfe004 	addi	r2,r2,-128
   8c584:	10801dd8 	cmpnei	r2,r2,119
   8c588:	1000461e 	bne	r2,zero,8c6a4 <main+0x7cc>
			alt_u8 regv = 0;
   8c58c:	e03ff345 	stb	zero,-51(fp)
			alt_u8 reg = 0;
   8c590:	e03ff385 	stb	zero,-50(fp)
			char arg1[8] = {0};
   8c594:	e03ff945 	stb	zero,-27(fp)
   8c598:	e03ff985 	stb	zero,-26(fp)
   8c59c:	e03ff9c5 	stb	zero,-25(fp)
   8c5a0:	e03ffa05 	stb	zero,-24(fp)
   8c5a4:	e03ffa45 	stb	zero,-23(fp)
   8c5a8:	e03ffa85 	stb	zero,-22(fp)
   8c5ac:	e03ffac5 	stb	zero,-21(fp)
   8c5b0:	e03ffb05 	stb	zero,-20(fp)
			char arg2[8] = {0};
   8c5b4:	e03ffb45 	stb	zero,-19(fp)
   8c5b8:	e03ffb85 	stb	zero,-18(fp)
   8c5bc:	e03ffbc5 	stb	zero,-17(fp)
   8c5c0:	e03ffc05 	stb	zero,-16(fp)
   8c5c4:	e03ffc45 	stb	zero,-15(fp)
   8c5c8:	e03ffc85 	stb	zero,-14(fp)
   8c5cc:	e03ffcc5 	stb	zero,-13(fp)
   8c5d0:	e03ffd05 	stb	zero,-12(fp)

			strncpy(arg1, &cmd[2], 2);
   8c5d4:	e0bff017 	ldw	r2,-64(fp)
   8c5d8:	10800084 	addi	r2,r2,2
   8c5dc:	e0fff944 	addi	r3,fp,-27
   8c5e0:	1809883a 	mov	r4,r3
   8c5e4:	100b883a 	mov	r5,r2
   8c5e8:	01800084 	movi	r6,2
   8c5ec:	008eab40 	call	8eab4 <strncpy>
			strncpy(arg2, &cmd[5], 2);
   8c5f0:	e0bff017 	ldw	r2,-64(fp)
   8c5f4:	10800144 	addi	r2,r2,5
   8c5f8:	e0fffb44 	addi	r3,fp,-19
   8c5fc:	1809883a 	mov	r4,r3
   8c600:	100b883a 	mov	r5,r2
   8c604:	01800084 	movi	r6,2
   8c608:	008eab40 	call	8eab4 <strncpy>

			reg = (alt_u8)strtoul(arg1, 0, 16);
   8c60c:	e0bff944 	addi	r2,fp,-27
   8c610:	1009883a 	mov	r4,r2
   8c614:	000b883a 	mov	r5,zero
   8c618:	01800404 	movi	r6,16
   8c61c:	008edf00 	call	8edf0 <strtoul>
   8c620:	e0bff385 	stb	r2,-50(fp)
			regv = (alt_u8)strtoul(arg2, 0, 16);
   8c624:	e0bffb44 	addi	r2,fp,-19
   8c628:	1009883a 	mov	r4,r2
   8c62c:	000b883a 	mov	r5,zero
   8c630:	01800404 	movi	r6,16
   8c634:	008edf00 	call	8edf0 <strtoul>
   8c638:	e0bff345 	stb	r2,-51(fp)

			printf("\n\n");
   8c63c:	010002b4 	movhi	r4,10
   8c640:	2133e404 	addi	r4,r4,-12400
   8c644:	008e6680 	call	8e668 <puts>
			if (reg_write(&encoder, reg, regv) == 0) {
   8c648:	e0fff383 	ldbu	r3,-50(fp)
   8c64c:	e0bff343 	ldbu	r2,-51(fp)
   8c650:	010002b4 	movhi	r4,10
   8c654:	21365f04 	addi	r4,r4,-9860
   8c658:	180b883a 	mov	r5,r3
   8c65c:	100d883a 	mov	r6,r2
   8c660:	008a6a00 	call	8a6a0 <reg_write>
   8c664:	1000081e 	bne	r2,zero,8c688 <main+0x7b0>
				printf("[%02x] <- %02x (done)\n", reg, regv);
   8c668:	e0fff383 	ldbu	r3,-50(fp)
   8c66c:	e0bff343 	ldbu	r2,-51(fp)
   8c670:	010002b4 	movhi	r4,10
   8c674:	21344204 	addi	r4,r4,-12024
   8c678:	180b883a 	mov	r5,r3
   8c67c:	100d883a 	mov	r6,r2
   8c680:	008e5840 	call	8e584 <printf>
   8c684:	00000706 	br	8c6a4 <main+0x7cc>
			} else {
				printf("[%02x] <- %02x (i2c error)\n", reg, regv);
   8c688:	e0fff383 	ldbu	r3,-50(fp)
   8c68c:	e0bff343 	ldbu	r2,-51(fp)
   8c690:	010002b4 	movhi	r4,10
   8c694:	21344804 	addi	r4,r4,-12000
   8c698:	180b883a 	mov	r5,r3
   8c69c:	100d883a 	mov	r6,r2
   8c6a0:	008e5840 	call	8e584 <printf>
			}
		}

		if (cmd[0] == 'o') {
   8c6a4:	e0bff017 	ldw	r2,-64(fp)
   8c6a8:	10800003 	ldbu	r2,0(r2)
   8c6ac:	10803fcc 	andi	r2,r2,255
   8c6b0:	1080201c 	xori	r2,r2,128
   8c6b4:	10bfe004 	addi	r2,r2,-128
   8c6b8:	10801bd8 	cmpnei	r2,r2,111
   8c6bc:	1000111e 	bne	r2,zero,8c704 <main+0x82c>
			printf("\n\n");
   8c6c0:	010002b4 	movhi	r4,10
   8c6c4:	2133e404 	addi	r4,r4,-12400
   8c6c8:	008e6680 	call	8e668 <puts>

			r = adv7513_do_hpd_powerdown(&encoder);
   8c6cc:	010002b4 	movhi	r4,10
   8c6d0:	21365f04 	addi	r4,r4,-9860
   8c6d4:	00806180 	call	80618 <adv7513_do_hpd_powerdown>
   8c6d8:	e0bfef15 	stw	r2,-68(fp)
			if (r != 0) {
   8c6dc:	e0bfef17 	ldw	r2,-68(fp)
   8c6e0:	10000526 	beq	r2,zero,8c6f8 <main+0x820>
				printf("[err] failed to do HDMI encoder power off! (%d)\n", r);
   8c6e4:	010002b4 	movhi	r4,10
   8c6e8:	21344f04 	addi	r4,r4,-11972
   8c6ec:	e17fef17 	ldw	r5,-68(fp)
   8c6f0:	008e5840 	call	8e584 <printf>
   8c6f4:	00000306 	br	8c704 <main+0x82c>
			} else {
				printf("[hpd] done HDMI encoder power off setting.\n");
   8c6f8:	010002b4 	movhi	r4,10
   8c6fc:	21345c04 	addi	r4,r4,-11920
   8c700:	008e6680 	call	8e668 <puts>
			}

			//usleep(100000);
		}

		if (cmd[0] == 'h') {
   8c704:	e0bff017 	ldw	r2,-64(fp)
   8c708:	10800003 	ldbu	r2,0(r2)
   8c70c:	10803fcc 	andi	r2,r2,255
   8c710:	1080201c 	xori	r2,r2,128
   8c714:	10bfe004 	addi	r2,r2,-128
   8c718:	10801a18 	cmpnei	r2,r2,104
   8c71c:	1000041e 	bne	r2,zero,8c730 <main+0x858>
			printf("\n\n");
   8c720:	010002b4 	movhi	r4,10
   8c724:	2133e404 	addi	r4,r4,-12400
   8c728:	008e6680 	call	8e668 <puts>
			cmd_help();
   8c72c:	008be2c0 	call	8be2c <cmd_help>
   8c730:	8037883a 	mov	sp,r16
		}
	}
   8c734:	003e7c06 	br	8c128 <main+0x250>

_safe_exit:

	printf("\nprogram exit!\n");
   8c738:	010002b4 	movhi	r4,10
   8c73c:	21346704 	addi	r4,r4,-11876
   8c740:	008e6680 	call	8e668 <puts>

	return rr;
   8c744:	e0bfee17 	ldw	r2,-72(fp)
}
   8c748:	e037883a 	mov	sp,fp
   8c74c:	dfc00317 	ldw	ra,12(sp)
   8c750:	df000217 	ldw	fp,8(sp)
   8c754:	dc400117 	ldw	r17,4(sp)
   8c758:	dc000017 	ldw	r16,0(sp)
   8c75c:	dec00404 	addi	sp,sp,16
   8c760:	f800283a 	ret

0008c764 <_fpadd_parts>:
   8c764:	2005883a 	mov	r2,r4
   8c768:	21000017 	ldw	r4,0(r4)
   8c76c:	01c00044 	movi	r7,1
   8c770:	3900332e 	bgeu	r7,r4,8c840 <_fpadd_parts+0xdc>
   8c774:	28c00017 	ldw	r3,0(r5)
   8c778:	38c0642e 	bgeu	r7,r3,8c90c <_fpadd_parts+0x1a8>
   8c77c:	01c00104 	movi	r7,4
   8c780:	21c06e26 	beq	r4,r7,8c93c <_fpadd_parts+0x1d8>
   8c784:	19c06126 	beq	r3,r7,8c90c <_fpadd_parts+0x1a8>
   8c788:	01c00084 	movi	r7,2
   8c78c:	19c04226 	beq	r3,r7,8c898 <_fpadd_parts+0x134>
   8c790:	21c05e26 	beq	r4,r7,8c90c <_fpadd_parts+0x1a8>
   8c794:	11000217 	ldw	r4,8(r2)
   8c798:	2a400217 	ldw	r9,8(r5)
   8c79c:	12800317 	ldw	r10,12(r2)
   8c7a0:	29c00317 	ldw	r7,12(r5)
   8c7a4:	2247c83a 	sub	r3,r4,r9
   8c7a8:	1811883a 	mov	r8,r3
   8c7ac:	18005316 	blt	r3,zero,8c8fc <_fpadd_parts+0x198>
   8c7b0:	02c007c4 	movi	r11,31
   8c7b4:	5a002316 	blt	r11,r8,8c844 <_fpadd_parts+0xe0>
   8c7b8:	00c0560e 	bge	zero,r3,8c914 <_fpadd_parts+0x1b0>
   8c7bc:	00c00044 	movi	r3,1
   8c7c0:	1a06983a 	sll	r3,r3,r8
   8c7c4:	3a10d83a 	srl	r8,r7,r8
   8c7c8:	18ffffc4 	addi	r3,r3,-1
   8c7cc:	19ce703a 	and	r7,r3,r7
   8c7d0:	380ec03a 	cmpne	r7,r7,zero
   8c7d4:	3a0eb03a 	or	r7,r7,r8
   8c7d8:	10c00117 	ldw	r3,4(r2)
   8c7dc:	28800117 	ldw	r2,4(r5)
   8c7e0:	18801d26 	beq	r3,r2,8c858 <_fpadd_parts+0xf4>
   8c7e4:	18003a26 	beq	r3,zero,8c8d0 <_fpadd_parts+0x16c>
   8c7e8:	3a85c83a 	sub	r2,r7,r10
   8c7ec:	10003a16 	blt	r2,zero,8c8d8 <_fpadd_parts+0x174>
   8c7f0:	30000115 	stw	zero,4(r6)
   8c7f4:	31000215 	stw	r4,8(r6)
   8c7f8:	30800315 	stw	r2,12(r6)
   8c7fc:	10ffffc4 	addi	r3,r2,-1
   8c800:	01d00034 	movhi	r7,16384
   8c804:	39ffff84 	addi	r7,r7,-2
   8c808:	38c00936 	bltu	r7,r3,8c830 <_fpadd_parts+0xcc>
   8c80c:	30c00217 	ldw	r3,8(r6)
   8c810:	18ffffc4 	addi	r3,r3,-1
   8c814:	1085883a 	add	r2,r2,r2
   8c818:	113fffc4 	addi	r4,r2,-1
   8c81c:	180b883a 	mov	r5,r3
   8c820:	18ffffc4 	addi	r3,r3,-1
   8c824:	393ffb2e 	bgeu	r7,r4,8c814 <_fpadd_parts+0xb0>
   8c828:	30800315 	stw	r2,12(r6)
   8c82c:	31400215 	stw	r5,8(r6)
   8c830:	00c000c4 	movi	r3,3
   8c834:	30c00015 	stw	r3,0(r6)
   8c838:	10000e16 	blt	r2,zero,8c874 <_fpadd_parts+0x110>
   8c83c:	3005883a 	mov	r2,r6
   8c840:	f800283a 	ret
   8c844:	49002a0e 	bge	r9,r4,8c8f0 <_fpadd_parts+0x18c>
   8c848:	10c00117 	ldw	r3,4(r2)
   8c84c:	28800117 	ldw	r2,4(r5)
   8c850:	000f883a 	mov	r7,zero
   8c854:	18bfe31e 	bne	r3,r2,8c7e4 <_fpadd_parts+0x80>
   8c858:	3a85883a 	add	r2,r7,r10
   8c85c:	30c00115 	stw	r3,4(r6)
   8c860:	00c000c4 	movi	r3,3
   8c864:	31000215 	stw	r4,8(r6)
   8c868:	30800315 	stw	r2,12(r6)
   8c86c:	30c00015 	stw	r3,0(r6)
   8c870:	103ff20e 	bge	r2,zero,8c83c <_fpadd_parts+0xd8>
   8c874:	30c00217 	ldw	r3,8(r6)
   8c878:	1008d07a 	srli	r4,r2,1
   8c87c:	1080004c 	andi	r2,r2,1
   8c880:	18c00044 	addi	r3,r3,1
   8c884:	1104b03a 	or	r2,r2,r4
   8c888:	30800315 	stw	r2,12(r6)
   8c88c:	30c00215 	stw	r3,8(r6)
   8c890:	3005883a 	mov	r2,r6
   8c894:	f800283a 	ret
   8c898:	20ffe91e 	bne	r4,r3,8c840 <_fpadd_parts+0xdc>
   8c89c:	31000015 	stw	r4,0(r6)
   8c8a0:	10c00117 	ldw	r3,4(r2)
   8c8a4:	30c00115 	stw	r3,4(r6)
   8c8a8:	11c00217 	ldw	r7,8(r2)
   8c8ac:	10c00117 	ldw	r3,4(r2)
   8c8b0:	29000117 	ldw	r4,4(r5)
   8c8b4:	31c00215 	stw	r7,8(r6)
   8c8b8:	10800317 	ldw	r2,12(r2)
   8c8bc:	20c6703a 	and	r3,r4,r3
   8c8c0:	30c00115 	stw	r3,4(r6)
   8c8c4:	30800315 	stw	r2,12(r6)
   8c8c8:	3005883a 	mov	r2,r6
   8c8cc:	f800283a 	ret
   8c8d0:	51c5c83a 	sub	r2,r10,r7
   8c8d4:	103fc60e 	bge	r2,zero,8c7f0 <_fpadd_parts+0x8c>
   8c8d8:	0085c83a 	sub	r2,zero,r2
   8c8dc:	00c00044 	movi	r3,1
   8c8e0:	30c00115 	stw	r3,4(r6)
   8c8e4:	31000215 	stw	r4,8(r6)
   8c8e8:	30800315 	stw	r2,12(r6)
   8c8ec:	003fc306 	br	8c7fc <_fpadd_parts+0x98>
   8c8f0:	4809883a 	mov	r4,r9
   8c8f4:	0015883a 	mov	r10,zero
   8c8f8:	003fb706 	br	8c7d8 <_fpadd_parts+0x74>
   8c8fc:	00d1c83a 	sub	r8,zero,r3
   8c900:	02c007c4 	movi	r11,31
   8c904:	5a3fcf16 	blt	r11,r8,8c844 <_fpadd_parts+0xe0>
   8c908:	003fab06 	br	8c7b8 <_fpadd_parts+0x54>
   8c90c:	2805883a 	mov	r2,r5
   8c910:	f800283a 	ret
   8c914:	183fb026 	beq	r3,zero,8c7d8 <_fpadd_parts+0x74>
   8c918:	02400044 	movi	r9,1
   8c91c:	4a12983a 	sll	r9,r9,r8
   8c920:	5206d83a 	srl	r3,r10,r8
   8c924:	2209883a 	add	r4,r4,r8
   8c928:	4a3fffc4 	addi	r8,r9,-1
   8c92c:	4294703a 	and	r10,r8,r10
   8c930:	5014c03a 	cmpne	r10,r10,zero
   8c934:	50d4b03a 	or	r10,r10,r3
   8c938:	003fa706 	br	8c7d8 <_fpadd_parts+0x74>
   8c93c:	193fc01e 	bne	r3,r4,8c840 <_fpadd_parts+0xdc>
   8c940:	11000117 	ldw	r4,4(r2)
   8c944:	28c00117 	ldw	r3,4(r5)
   8c948:	20ffbd26 	beq	r4,r3,8c840 <_fpadd_parts+0xdc>
   8c94c:	008002b4 	movhi	r2,10
   8c950:	10b46b04 	addi	r2,r2,-11860
   8c954:	f800283a 	ret

0008c958 <__addsf3>:
   8c958:	defff104 	addi	sp,sp,-60
   8c95c:	d9000d15 	stw	r4,52(sp)
   8c960:	d9400c15 	stw	r5,48(sp)
   8c964:	d9000d04 	addi	r4,sp,52
   8c968:	d9400804 	addi	r5,sp,32
   8c96c:	dfc00e15 	stw	ra,56(sp)
   8c970:	008d1800 	call	8d180 <__unpack_f>
   8c974:	d9000c04 	addi	r4,sp,48
   8c978:	d9400404 	addi	r5,sp,16
   8c97c:	008d1800 	call	8d180 <__unpack_f>
   8c980:	d9000804 	addi	r4,sp,32
   8c984:	d9400404 	addi	r5,sp,16
   8c988:	d80d883a 	mov	r6,sp
   8c98c:	008c7640 	call	8c764 <_fpadd_parts>
   8c990:	1009883a 	mov	r4,r2
   8c994:	008d0540 	call	8d054 <__pack_f>
   8c998:	dfc00e17 	ldw	ra,56(sp)
   8c99c:	dec00f04 	addi	sp,sp,60
   8c9a0:	f800283a 	ret

0008c9a4 <__subsf3>:
   8c9a4:	defff104 	addi	sp,sp,-60
   8c9a8:	d9000d15 	stw	r4,52(sp)
   8c9ac:	d9400c15 	stw	r5,48(sp)
   8c9b0:	d9000d04 	addi	r4,sp,52
   8c9b4:	d9400804 	addi	r5,sp,32
   8c9b8:	dfc00e15 	stw	ra,56(sp)
   8c9bc:	008d1800 	call	8d180 <__unpack_f>
   8c9c0:	d9000c04 	addi	r4,sp,48
   8c9c4:	d9400404 	addi	r5,sp,16
   8c9c8:	008d1800 	call	8d180 <__unpack_f>
   8c9cc:	d8800517 	ldw	r2,20(sp)
   8c9d0:	d9000804 	addi	r4,sp,32
   8c9d4:	d9400404 	addi	r5,sp,16
   8c9d8:	d80d883a 	mov	r6,sp
   8c9dc:	1080005c 	xori	r2,r2,1
   8c9e0:	d8800515 	stw	r2,20(sp)
   8c9e4:	008c7640 	call	8c764 <_fpadd_parts>
   8c9e8:	1009883a 	mov	r4,r2
   8c9ec:	008d0540 	call	8d054 <__pack_f>
   8c9f0:	dfc00e17 	ldw	ra,56(sp)
   8c9f4:	dec00f04 	addi	sp,sp,60
   8c9f8:	f800283a 	ret

0008c9fc <__mulsf3>:
   8c9fc:	defff104 	addi	sp,sp,-60
   8ca00:	d9000d15 	stw	r4,52(sp)
   8ca04:	d9400c15 	stw	r5,48(sp)
   8ca08:	d9000d04 	addi	r4,sp,52
   8ca0c:	d9400804 	addi	r5,sp,32
   8ca10:	dfc00e15 	stw	ra,56(sp)
   8ca14:	008d1800 	call	8d180 <__unpack_f>
   8ca18:	d9000c04 	addi	r4,sp,48
   8ca1c:	d9400404 	addi	r5,sp,16
   8ca20:	008d1800 	call	8d180 <__unpack_f>
   8ca24:	d8c00817 	ldw	r3,32(sp)
   8ca28:	00800044 	movi	r2,1
   8ca2c:	10c00936 	bltu	r2,r3,8ca54 <__mulsf3+0x58>
   8ca30:	d8c00917 	ldw	r3,36(sp)
   8ca34:	d8800517 	ldw	r2,20(sp)
   8ca38:	d9000804 	addi	r4,sp,32
   8ca3c:	1884c03a 	cmpne	r2,r3,r2
   8ca40:	d8800915 	stw	r2,36(sp)
   8ca44:	008d0540 	call	8d054 <__pack_f>
   8ca48:	dfc00e17 	ldw	ra,56(sp)
   8ca4c:	dec00f04 	addi	sp,sp,60
   8ca50:	f800283a 	ret
   8ca54:	d9000417 	ldw	r4,16(sp)
   8ca58:	11000936 	bltu	r2,r4,8ca80 <__mulsf3+0x84>
   8ca5c:	d8800517 	ldw	r2,20(sp)
   8ca60:	d8c00917 	ldw	r3,36(sp)
   8ca64:	d9000404 	addi	r4,sp,16
   8ca68:	1884c03a 	cmpne	r2,r3,r2
   8ca6c:	d8800515 	stw	r2,20(sp)
   8ca70:	008d0540 	call	8d054 <__pack_f>
   8ca74:	dfc00e17 	ldw	ra,56(sp)
   8ca78:	dec00f04 	addi	sp,sp,60
   8ca7c:	f800283a 	ret
   8ca80:	00800104 	movi	r2,4
   8ca84:	1880051e 	bne	r3,r2,8ca9c <__mulsf3+0xa0>
   8ca88:	00800084 	movi	r2,2
   8ca8c:	20bfe81e 	bne	r4,r2,8ca30 <__mulsf3+0x34>
   8ca90:	010002b4 	movhi	r4,10
   8ca94:	21346b04 	addi	r4,r4,-11860
   8ca98:	003fea06 	br	8ca44 <__mulsf3+0x48>
   8ca9c:	2080031e 	bne	r4,r2,8caac <__mulsf3+0xb0>
   8caa0:	00800084 	movi	r2,2
   8caa4:	18bffa26 	beq	r3,r2,8ca90 <__mulsf3+0x94>
   8caa8:	003fec06 	br	8ca5c <__mulsf3+0x60>
   8caac:	00800084 	movi	r2,2
   8cab0:	18bfdf26 	beq	r3,r2,8ca30 <__mulsf3+0x34>
   8cab4:	20bfe926 	beq	r4,r2,8ca5c <__mulsf3+0x60>
   8cab8:	d9000717 	ldw	r4,28(sp)
   8cabc:	d9800b17 	ldw	r6,44(sp)
   8cac0:	000b883a 	mov	r5,zero
   8cac4:	000f883a 	mov	r7,zero
   8cac8:	008cf480 	call	8cf48 <__muldi3>
   8cacc:	d9000617 	ldw	r4,24(sp)
   8cad0:	d9400a17 	ldw	r5,40(sp)
   8cad4:	d9c00917 	ldw	r7,36(sp)
   8cad8:	290b883a 	add	r5,r5,r4
   8cadc:	d9000517 	ldw	r4,20(sp)
   8cae0:	29800084 	addi	r6,r5,2
   8cae4:	d9800215 	stw	r6,8(sp)
   8cae8:	3908c03a 	cmpne	r4,r7,r4
   8caec:	d9000115 	stw	r4,4(sp)
   8caf0:	1809883a 	mov	r4,r3
   8caf4:	1800070e 	bge	r3,zero,8cb14 <__mulsf3+0x118>
   8caf8:	1900004c 	andi	r4,r3,1
   8cafc:	294000c4 	addi	r5,r5,3
   8cb00:	20000226 	beq	r4,zero,8cb0c <__mulsf3+0x110>
   8cb04:	1004d07a 	srli	r2,r2,1
   8cb08:	10a00034 	orhi	r2,r2,32768
   8cb0c:	1808d07a 	srli	r4,r3,1
   8cb10:	d9400215 	stw	r5,8(sp)
   8cb14:	01900034 	movhi	r6,16384
   8cb18:	31bfffc4 	addi	r6,r6,-1
   8cb1c:	31000c36 	bltu	r6,r4,8cb50 <__mulsf3+0x154>
   8cb20:	d8c00217 	ldw	r3,8(sp)
   8cb24:	18ffffc4 	addi	r3,r3,-1
   8cb28:	00000306 	br	8cb38 <__mulsf3+0x13c>
   8cb2c:	1085883a 	add	r2,r2,r2
   8cb30:	18ffffc4 	addi	r3,r3,-1
   8cb34:	31000536 	bltu	r6,r4,8cb4c <__mulsf3+0x150>
   8cb38:	2109883a 	add	r4,r4,r4
   8cb3c:	180b883a 	mov	r5,r3
   8cb40:	103ffa0e 	bge	r2,zero,8cb2c <__mulsf3+0x130>
   8cb44:	21000054 	ori	r4,r4,1
   8cb48:	003ff806 	br	8cb2c <__mulsf3+0x130>
   8cb4c:	d9400215 	stw	r5,8(sp)
   8cb50:	21401fcc 	andi	r5,r4,127
   8cb54:	00c01004 	movi	r3,64
   8cb58:	28c00526 	beq	r5,r3,8cb70 <__mulsf3+0x174>
   8cb5c:	008000c4 	movi	r2,3
   8cb60:	d9000315 	stw	r4,12(sp)
   8cb64:	d8800015 	stw	r2,0(sp)
   8cb68:	d809883a 	mov	r4,sp
   8cb6c:	003fb506 	br	8ca44 <__mulsf3+0x48>
   8cb70:	20c0200c 	andi	r3,r4,128
   8cb74:	183ff91e 	bne	r3,zero,8cb5c <__mulsf3+0x160>
   8cb78:	103ff826 	beq	r2,zero,8cb5c <__mulsf3+0x160>
   8cb7c:	21001004 	addi	r4,r4,64
   8cb80:	00bfe004 	movi	r2,-128
   8cb84:	2088703a 	and	r4,r4,r2
   8cb88:	003ff406 	br	8cb5c <__mulsf3+0x160>

0008cb8c <__divsf3>:
   8cb8c:	defff504 	addi	sp,sp,-44
   8cb90:	d9000915 	stw	r4,36(sp)
   8cb94:	d9400815 	stw	r5,32(sp)
   8cb98:	d9000904 	addi	r4,sp,36
   8cb9c:	d9400404 	addi	r5,sp,16
   8cba0:	dfc00a15 	stw	ra,40(sp)
   8cba4:	008d1800 	call	8d180 <__unpack_f>
   8cba8:	d9000804 	addi	r4,sp,32
   8cbac:	d80b883a 	mov	r5,sp
   8cbb0:	008d1800 	call	8d180 <__unpack_f>
   8cbb4:	d8c00417 	ldw	r3,16(sp)
   8cbb8:	00800044 	movi	r2,1
   8cbbc:	10c00536 	bltu	r2,r3,8cbd4 <__divsf3+0x48>
   8cbc0:	d9000404 	addi	r4,sp,16
   8cbc4:	008d0540 	call	8d054 <__pack_f>
   8cbc8:	dfc00a17 	ldw	ra,40(sp)
   8cbcc:	dec00b04 	addi	sp,sp,44
   8cbd0:	f800283a 	ret
   8cbd4:	d9000017 	ldw	r4,0(sp)
   8cbd8:	11000536 	bltu	r2,r4,8cbf0 <__divsf3+0x64>
   8cbdc:	d809883a 	mov	r4,sp
   8cbe0:	008d0540 	call	8d054 <__pack_f>
   8cbe4:	dfc00a17 	ldw	ra,40(sp)
   8cbe8:	dec00b04 	addi	sp,sp,44
   8cbec:	f800283a 	ret
   8cbf0:	d9800517 	ldw	r6,20(sp)
   8cbf4:	d9400117 	ldw	r5,4(sp)
   8cbf8:	00800104 	movi	r2,4
   8cbfc:	314af03a 	xor	r5,r6,r5
   8cc00:	d9400515 	stw	r5,20(sp)
   8cc04:	18800226 	beq	r3,r2,8cc10 <__divsf3+0x84>
   8cc08:	01400084 	movi	r5,2
   8cc0c:	1940041e 	bne	r3,r5,8cc20 <__divsf3+0x94>
   8cc10:	193feb1e 	bne	r3,r4,8cbc0 <__divsf3+0x34>
   8cc14:	010002b4 	movhi	r4,10
   8cc18:	21346b04 	addi	r4,r4,-11860
   8cc1c:	003fe906 	br	8cbc4 <__divsf3+0x38>
   8cc20:	20802226 	beq	r4,r2,8ccac <__divsf3+0x120>
   8cc24:	21402526 	beq	r4,r5,8ccbc <__divsf3+0x130>
   8cc28:	d9000617 	ldw	r4,24(sp)
   8cc2c:	d8c00217 	ldw	r3,8(sp)
   8cc30:	d8800717 	ldw	r2,28(sp)
   8cc34:	d9400317 	ldw	r5,12(sp)
   8cc38:	20c7c83a 	sub	r3,r4,r3
   8cc3c:	d8c00615 	stw	r3,24(sp)
   8cc40:	1140032e 	bgeu	r2,r5,8cc50 <__divsf3+0xc4>
   8cc44:	18ffffc4 	addi	r3,r3,-1
   8cc48:	1085883a 	add	r2,r2,r2
   8cc4c:	d8c00615 	stw	r3,24(sp)
   8cc50:	00c007c4 	movi	r3,31
   8cc54:	01100034 	movhi	r4,16384
   8cc58:	000d883a 	mov	r6,zero
   8cc5c:	18ffffc4 	addi	r3,r3,-1
   8cc60:	11400236 	bltu	r2,r5,8cc6c <__divsf3+0xe0>
   8cc64:	310cb03a 	or	r6,r6,r4
   8cc68:	1145c83a 	sub	r2,r2,r5
   8cc6c:	2008d07a 	srli	r4,r4,1
   8cc70:	1085883a 	add	r2,r2,r2
   8cc74:	183ff91e 	bne	r3,zero,8cc5c <__divsf3+0xd0>
   8cc78:	31001fcc 	andi	r4,r6,127
   8cc7c:	00c01004 	movi	r3,64
   8cc80:	20c00226 	beq	r4,r3,8cc8c <__divsf3+0x100>
   8cc84:	d9800715 	stw	r6,28(sp)
   8cc88:	003fcd06 	br	8cbc0 <__divsf3+0x34>
   8cc8c:	30c0200c 	andi	r3,r6,128
   8cc90:	183ffc1e 	bne	r3,zero,8cc84 <__divsf3+0xf8>
   8cc94:	103ffb26 	beq	r2,zero,8cc84 <__divsf3+0xf8>
   8cc98:	31801004 	addi	r6,r6,64
   8cc9c:	00bfe004 	movi	r2,-128
   8cca0:	308c703a 	and	r6,r6,r2
   8cca4:	d9800715 	stw	r6,28(sp)
   8cca8:	003fc506 	br	8cbc0 <__divsf3+0x34>
   8ccac:	d8000715 	stw	zero,28(sp)
   8ccb0:	d8000615 	stw	zero,24(sp)
   8ccb4:	d9000404 	addi	r4,sp,16
   8ccb8:	003fc206 	br	8cbc4 <__divsf3+0x38>
   8ccbc:	d8800415 	stw	r2,16(sp)
   8ccc0:	d9000404 	addi	r4,sp,16
   8ccc4:	003fbf06 	br	8cbc4 <__divsf3+0x38>

0008ccc8 <__extendsfdf2>:
   8ccc8:	defff904 	addi	sp,sp,-28
   8cccc:	d9000515 	stw	r4,20(sp)
   8ccd0:	d9400104 	addi	r5,sp,4
   8ccd4:	d9000504 	addi	r4,sp,20
   8ccd8:	dfc00615 	stw	ra,24(sp)
   8ccdc:	008d1800 	call	8d180 <__unpack_f>
   8cce0:	d9c00417 	ldw	r7,16(sp)
   8cce4:	d9000117 	ldw	r4,4(sp)
   8cce8:	d9400217 	ldw	r5,8(sp)
   8ccec:	3804d0ba 	srli	r2,r7,2
   8ccf0:	d9800317 	ldw	r6,12(sp)
   8ccf4:	380e97ba 	slli	r7,r7,30
   8ccf8:	d8800015 	stw	r2,0(sp)
   8ccfc:	008cde00 	call	8cde0 <__make_dp>
   8cd00:	dfc00617 	ldw	ra,24(sp)
   8cd04:	dec00704 	addi	sp,sp,28
   8cd08:	f800283a 	ret

0008cd0c <__floatunsisf>:
   8cd0c:	defffa04 	addi	sp,sp,-24
   8cd10:	dc000415 	stw	r16,16(sp)
   8cd14:	dfc00515 	stw	ra,20(sp)
   8cd18:	d8000115 	stw	zero,4(sp)
   8cd1c:	2021883a 	mov	r16,r4
   8cd20:	20001326 	beq	r4,zero,8cd70 <__floatunsisf+0x64>
   8cd24:	008000c4 	movi	r2,3
   8cd28:	d8800015 	stw	r2,0(sp)
   8cd2c:	00800784 	movi	r2,30
   8cd30:	d8800215 	stw	r2,8(sp)
   8cd34:	008cfa80 	call	8cfa8 <__clzsi2>
   8cd38:	10ffffc4 	addi	r3,r2,-1
   8cd3c:	18001416 	blt	r3,zero,8cd90 <__floatunsisf+0x84>
   8cd40:	18002526 	beq	r3,zero,8cdd8 <__floatunsisf+0xcc>
   8cd44:	80e0983a 	sll	r16,r16,r3
   8cd48:	00c007c4 	movi	r3,31
   8cd4c:	1885c83a 	sub	r2,r3,r2
   8cd50:	dc000315 	stw	r16,12(sp)
   8cd54:	d8800215 	stw	r2,8(sp)
   8cd58:	d809883a 	mov	r4,sp
   8cd5c:	008d0540 	call	8d054 <__pack_f>
   8cd60:	dfc00517 	ldw	ra,20(sp)
   8cd64:	dc000417 	ldw	r16,16(sp)
   8cd68:	dec00604 	addi	sp,sp,24
   8cd6c:	f800283a 	ret
   8cd70:	00800084 	movi	r2,2
   8cd74:	d809883a 	mov	r4,sp
   8cd78:	d8800015 	stw	r2,0(sp)
   8cd7c:	008d0540 	call	8d054 <__pack_f>
   8cd80:	dfc00517 	ldw	ra,20(sp)
   8cd84:	dc000417 	ldw	r16,16(sp)
   8cd88:	dec00604 	addi	sp,sp,24
   8cd8c:	f800283a 	ret
   8cd90:	00c7c83a 	sub	r3,zero,r3
   8cd94:	01000044 	movi	r4,1
   8cd98:	20c8983a 	sll	r4,r4,r3
   8cd9c:	80c6d83a 	srl	r3,r16,r3
   8cda0:	213fffc4 	addi	r4,r4,-1
   8cda4:	2420703a 	and	r16,r4,r16
   8cda8:	8020c03a 	cmpne	r16,r16,zero
   8cdac:	010007c4 	movi	r4,31
   8cdb0:	80c6b03a 	or	r3,r16,r3
   8cdb4:	2085c83a 	sub	r2,r4,r2
   8cdb8:	d809883a 	mov	r4,sp
   8cdbc:	d8c00315 	stw	r3,12(sp)
   8cdc0:	d8800215 	stw	r2,8(sp)
   8cdc4:	008d0540 	call	8d054 <__pack_f>
   8cdc8:	dfc00517 	ldw	ra,20(sp)
   8cdcc:	dc000417 	ldw	r16,16(sp)
   8cdd0:	dec00604 	addi	sp,sp,24
   8cdd4:	f800283a 	ret
   8cdd8:	dc000315 	stw	r16,12(sp)
   8cddc:	003fde06 	br	8cd58 <__floatunsisf+0x4c>

0008cde0 <__make_dp>:
   8cde0:	defff904 	addi	sp,sp,-28
   8cde4:	d8800717 	ldw	r2,28(sp)
   8cde8:	d9000015 	stw	r4,0(sp)
   8cdec:	d809883a 	mov	r4,sp
   8cdf0:	dfc00515 	stw	ra,20(sp)
   8cdf4:	d9c00615 	stw	r7,24(sp)
   8cdf8:	d9400115 	stw	r5,4(sp)
   8cdfc:	d9800215 	stw	r6,8(sp)
   8ce00:	d9c00315 	stw	r7,12(sp)
   8ce04:	d8800415 	stw	r2,16(sp)
   8ce08:	008d2480 	call	8d248 <__pack_d>
   8ce0c:	dfc00517 	ldw	ra,20(sp)
   8ce10:	dec00704 	addi	sp,sp,28
   8ce14:	f800283a 	ret

0008ce18 <udivmodsi4>:
   8ce18:	2005883a 	mov	r2,r4
   8ce1c:	2900182e 	bgeu	r5,r4,8ce80 <udivmodsi4+0x68>
   8ce20:	28001716 	blt	r5,zero,8ce80 <udivmodsi4+0x68>
   8ce24:	01000804 	movi	r4,32
   8ce28:	00c00044 	movi	r3,1
   8ce2c:	00000206 	br	8ce38 <udivmodsi4+0x20>
   8ce30:	20001126 	beq	r4,zero,8ce78 <udivmodsi4+0x60>
   8ce34:	28000516 	blt	r5,zero,8ce4c <udivmodsi4+0x34>
   8ce38:	294b883a 	add	r5,r5,r5
   8ce3c:	213fffc4 	addi	r4,r4,-1
   8ce40:	18c7883a 	add	r3,r3,r3
   8ce44:	28bffa36 	bltu	r5,r2,8ce30 <udivmodsi4+0x18>
   8ce48:	18000b26 	beq	r3,zero,8ce78 <udivmodsi4+0x60>
   8ce4c:	0009883a 	mov	r4,zero
   8ce50:	11400236 	bltu	r2,r5,8ce5c <udivmodsi4+0x44>
   8ce54:	1145c83a 	sub	r2,r2,r5
   8ce58:	20c8b03a 	or	r4,r4,r3
   8ce5c:	1806d07a 	srli	r3,r3,1
   8ce60:	280ad07a 	srli	r5,r5,1
   8ce64:	183ffa1e 	bne	r3,zero,8ce50 <udivmodsi4+0x38>
   8ce68:	3000021e 	bne	r6,zero,8ce74 <udivmodsi4+0x5c>
   8ce6c:	2005883a 	mov	r2,r4
   8ce70:	f800283a 	ret
   8ce74:	f800283a 	ret
   8ce78:	0009883a 	mov	r4,zero
   8ce7c:	003ffa06 	br	8ce68 <udivmodsi4+0x50>
   8ce80:	00c00044 	movi	r3,1
   8ce84:	0009883a 	mov	r4,zero
   8ce88:	003ff106 	br	8ce50 <udivmodsi4+0x38>

0008ce8c <__divsi3>:
   8ce8c:	defffe04 	addi	sp,sp,-8
   8ce90:	dfc00115 	stw	ra,4(sp)
   8ce94:	dc000015 	stw	r16,0(sp)
   8ce98:	20000a16 	blt	r4,zero,8cec4 <__divsi3+0x38>
   8ce9c:	0021883a 	mov	r16,zero
   8cea0:	28000b16 	blt	r5,zero,8ced0 <__divsi3+0x44>
   8cea4:	000d883a 	mov	r6,zero
   8cea8:	008ce180 	call	8ce18 <udivmodsi4>
   8ceac:	80000126 	beq	r16,zero,8ceb4 <__divsi3+0x28>
   8ceb0:	0085c83a 	sub	r2,zero,r2
   8ceb4:	dfc00117 	ldw	ra,4(sp)
   8ceb8:	dc000017 	ldw	r16,0(sp)
   8cebc:	dec00204 	addi	sp,sp,8
   8cec0:	f800283a 	ret
   8cec4:	0109c83a 	sub	r4,zero,r4
   8cec8:	04000044 	movi	r16,1
   8cecc:	283ff50e 	bge	r5,zero,8cea4 <__divsi3+0x18>
   8ced0:	014bc83a 	sub	r5,zero,r5
   8ced4:	8400005c 	xori	r16,r16,1
   8ced8:	003ff206 	br	8cea4 <__divsi3+0x18>

0008cedc <__modsi3>:
   8cedc:	deffff04 	addi	sp,sp,-4
   8cee0:	dfc00015 	stw	ra,0(sp)
   8cee4:	20000516 	blt	r4,zero,8cefc <__modsi3+0x20>
   8cee8:	28000c16 	blt	r5,zero,8cf1c <__modsi3+0x40>
   8ceec:	01800044 	movi	r6,1
   8cef0:	dfc00017 	ldw	ra,0(sp)
   8cef4:	dec00104 	addi	sp,sp,4
   8cef8:	008ce181 	jmpi	8ce18 <udivmodsi4>
   8cefc:	0109c83a 	sub	r4,zero,r4
   8cf00:	28000b16 	blt	r5,zero,8cf30 <__modsi3+0x54>
   8cf04:	01800044 	movi	r6,1
   8cf08:	008ce180 	call	8ce18 <udivmodsi4>
   8cf0c:	0085c83a 	sub	r2,zero,r2
   8cf10:	dfc00017 	ldw	ra,0(sp)
   8cf14:	dec00104 	addi	sp,sp,4
   8cf18:	f800283a 	ret
   8cf1c:	014bc83a 	sub	r5,zero,r5
   8cf20:	01800044 	movi	r6,1
   8cf24:	dfc00017 	ldw	ra,0(sp)
   8cf28:	dec00104 	addi	sp,sp,4
   8cf2c:	008ce181 	jmpi	8ce18 <udivmodsi4>
   8cf30:	014bc83a 	sub	r5,zero,r5
   8cf34:	003ff306 	br	8cf04 <__modsi3+0x28>

0008cf38 <__udivsi3>:
   8cf38:	000d883a 	mov	r6,zero
   8cf3c:	008ce181 	jmpi	8ce18 <udivmodsi4>

0008cf40 <__umodsi3>:
   8cf40:	01800044 	movi	r6,1
   8cf44:	008ce181 	jmpi	8ce18 <udivmodsi4>

0008cf48 <__muldi3>:
   8cf48:	20bfffcc 	andi	r2,r4,65535
   8cf4c:	2010d43a 	srli	r8,r4,16
   8cf50:	30ffffcc 	andi	r3,r6,65535
   8cf54:	3014d43a 	srli	r10,r6,16
   8cf58:	1893383a 	mul	r9,r3,r2
   8cf5c:	1a07383a 	mul	r3,r3,r8
   8cf60:	5085383a 	mul	r2,r10,r2
   8cf64:	4816d43a 	srli	r11,r9,16
   8cf68:	5211383a 	mul	r8,r10,r8
   8cf6c:	1885883a 	add	r2,r3,r2
   8cf70:	12c5883a 	add	r2,r2,r11
   8cf74:	10c0022e 	bgeu	r2,r3,8cf80 <__muldi3+0x38>
   8cf78:	00c00074 	movhi	r3,1
   8cf7c:	40d1883a 	add	r8,r8,r3
   8cf80:	1014d43a 	srli	r10,r2,16
   8cf84:	21c9383a 	mul	r4,r4,r7
   8cf88:	314d383a 	mul	r6,r6,r5
   8cf8c:	1004943a 	slli	r2,r2,16
   8cf90:	4291883a 	add	r8,r8,r10
   8cf94:	4a7fffcc 	andi	r9,r9,65535
   8cf98:	2187883a 	add	r3,r4,r6
   8cf9c:	1245883a 	add	r2,r2,r9
   8cfa0:	1a07883a 	add	r3,r3,r8
   8cfa4:	f800283a 	ret

0008cfa8 <__clzsi2>:
   8cfa8:	00bfffd4 	movui	r2,65535
   8cfac:	11000b36 	bltu	r2,r4,8cfdc <__clzsi2+0x34>
   8cfb0:	00803fc4 	movi	r2,255
   8cfb4:	11001e2e 	bgeu	r2,r4,8d030 <__clzsi2+0x88>
   8cfb8:	00c00204 	movi	r3,8
   8cfbc:	20c8d83a 	srl	r4,r4,r3
   8cfc0:	00c002b4 	movhi	r3,10
   8cfc4:	18f46f04 	addi	r3,r3,-11844
   8cfc8:	00800604 	movi	r2,24
   8cfcc:	1909883a 	add	r4,r3,r4
   8cfd0:	20c00003 	ldbu	r3,0(r4)
   8cfd4:	10c5c83a 	sub	r2,r2,r3
   8cfd8:	f800283a 	ret
   8cfdc:	00804034 	movhi	r2,256
   8cfe0:	10bfffc4 	addi	r2,r2,-1
   8cfe4:	11000936 	bltu	r2,r4,8d00c <__clzsi2+0x64>
   8cfe8:	00800404 	movi	r2,16
   8cfec:	1007883a 	mov	r3,r2
   8cff0:	20c8d83a 	srl	r4,r4,r3
   8cff4:	00c002b4 	movhi	r3,10
   8cff8:	18f46f04 	addi	r3,r3,-11844
   8cffc:	1909883a 	add	r4,r3,r4
   8d000:	20c00003 	ldbu	r3,0(r4)
   8d004:	10c5c83a 	sub	r2,r2,r3
   8d008:	f800283a 	ret
   8d00c:	00c00604 	movi	r3,24
   8d010:	20c8d83a 	srl	r4,r4,r3
   8d014:	00c002b4 	movhi	r3,10
   8d018:	18f46f04 	addi	r3,r3,-11844
   8d01c:	00800204 	movi	r2,8
   8d020:	1909883a 	add	r4,r3,r4
   8d024:	20c00003 	ldbu	r3,0(r4)
   8d028:	10c5c83a 	sub	r2,r2,r3
   8d02c:	f800283a 	ret
   8d030:	0007883a 	mov	r3,zero
   8d034:	20c8d83a 	srl	r4,r4,r3
   8d038:	00c002b4 	movhi	r3,10
   8d03c:	18f46f04 	addi	r3,r3,-11844
   8d040:	00800804 	movi	r2,32
   8d044:	1909883a 	add	r4,r3,r4
   8d048:	20c00003 	ldbu	r3,0(r4)
   8d04c:	10c5c83a 	sub	r2,r2,r3
   8d050:	f800283a 	ret

0008d054 <__pack_f>:
   8d054:	21400017 	ldw	r5,0(r4)
   8d058:	01800044 	movi	r6,1
   8d05c:	20c00317 	ldw	r3,12(r4)
   8d060:	21c00117 	ldw	r7,4(r4)
   8d064:	3140282e 	bgeu	r6,r5,8d108 <__pack_f+0xb4>
   8d068:	00800104 	movi	r2,4
   8d06c:	28802326 	beq	r5,r2,8d0fc <__pack_f+0xa8>
   8d070:	00800084 	movi	r2,2
   8d074:	28800f26 	beq	r5,r2,8d0b4 <__pack_f+0x60>
   8d078:	18000e26 	beq	r3,zero,8d0b4 <__pack_f+0x60>
   8d07c:	21000217 	ldw	r4,8(r4)
   8d080:	00bfe084 	movi	r2,-126
   8d084:	20802616 	blt	r4,r2,8d120 <__pack_f+0xcc>
   8d088:	00801fc4 	movi	r2,127
   8d08c:	11001b16 	blt	r2,r4,8d0fc <__pack_f+0xa8>
   8d090:	188a703a 	and	r5,r3,r2
   8d094:	00801004 	movi	r2,64
   8d098:	28801126 	beq	r5,r2,8d0e0 <__pack_f+0x8c>
   8d09c:	18c00fc4 	addi	r3,r3,63
   8d0a0:	18001316 	blt	r3,zero,8d0f0 <__pack_f+0x9c>
   8d0a4:	21001fc4 	addi	r4,r4,127
   8d0a8:	180690ba 	slli	r3,r3,2
   8d0ac:	1806d27a 	srli	r3,r3,9
   8d0b0:	00000206 	br	8d0bc <__pack_f+0x68>
   8d0b4:	0009883a 	mov	r4,zero
   8d0b8:	0007883a 	mov	r3,zero
   8d0bc:	21003fcc 	andi	r4,r4,255
   8d0c0:	200895fa 	slli	r4,r4,23
   8d0c4:	380a97fa 	slli	r5,r7,31
   8d0c8:	00802034 	movhi	r2,128
   8d0cc:	10bfffc4 	addi	r2,r2,-1
   8d0d0:	1886703a 	and	r3,r3,r2
   8d0d4:	1904b03a 	or	r2,r3,r4
   8d0d8:	1144b03a 	or	r2,r2,r5
   8d0dc:	f800283a 	ret
   8d0e0:	1880200c 	andi	r2,r3,128
   8d0e4:	103fee26 	beq	r2,zero,8d0a0 <__pack_f+0x4c>
   8d0e8:	18c01004 	addi	r3,r3,64
   8d0ec:	183fed0e 	bge	r3,zero,8d0a4 <__pack_f+0x50>
   8d0f0:	1806d07a 	srli	r3,r3,1
   8d0f4:	21002004 	addi	r4,r4,128
   8d0f8:	003feb06 	br	8d0a8 <__pack_f+0x54>
   8d0fc:	013fffc4 	movi	r4,-1
   8d100:	0007883a 	mov	r3,zero
   8d104:	003fed06 	br	8d0bc <__pack_f+0x68>
   8d108:	18c00434 	orhi	r3,r3,16
   8d10c:	00802034 	movhi	r2,128
   8d110:	10bfffc4 	addi	r2,r2,-1
   8d114:	1886703a 	and	r3,r3,r2
   8d118:	013fffc4 	movi	r4,-1
   8d11c:	003fe706 	br	8d0bc <__pack_f+0x68>
   8d120:	1105c83a 	sub	r2,r2,r4
   8d124:	01000644 	movi	r4,25
   8d128:	20801216 	blt	r4,r2,8d174 <__pack_f+0x120>
   8d12c:	3088983a 	sll	r4,r6,r2
   8d130:	1884d83a 	srl	r2,r3,r2
   8d134:	213fffc4 	addi	r4,r4,-1
   8d138:	20c6703a 	and	r3,r4,r3
   8d13c:	1806c03a 	cmpne	r3,r3,zero
   8d140:	1884b03a 	or	r2,r3,r2
   8d144:	11001fcc 	andi	r4,r2,127
   8d148:	00c01004 	movi	r3,64
   8d14c:	20c00a1e 	bne	r4,r3,8d178 <__pack_f+0x124>
   8d150:	10c0200c 	andi	r3,r2,128
   8d154:	18000126 	beq	r3,zero,8d15c <__pack_f+0x108>
   8d158:	10801004 	addi	r2,r2,64
   8d15c:	100690ba 	slli	r3,r2,2
   8d160:	01100034 	movhi	r4,16384
   8d164:	1105403a 	cmpgeu	r2,r2,r4
   8d168:	1806d27a 	srli	r3,r3,9
   8d16c:	1009883a 	mov	r4,r2
   8d170:	003fd206 	br	8d0bc <__pack_f+0x68>
   8d174:	0005883a 	mov	r2,zero
   8d178:	10800fc4 	addi	r2,r2,63
   8d17c:	003ff706 	br	8d15c <__pack_f+0x108>

0008d180 <__unpack_f>:
   8d180:	20c00017 	ldw	r3,0(r4)
   8d184:	00802034 	movhi	r2,128
   8d188:	10bfffc4 	addi	r2,r2,-1
   8d18c:	1808d5fa 	srli	r4,r3,23
   8d190:	180cd7fa 	srli	r6,r3,31
   8d194:	1884703a 	and	r2,r3,r2
   8d198:	21003fcc 	andi	r4,r4,255
   8d19c:	29800115 	stw	r6,4(r5)
   8d1a0:	2000111e 	bne	r4,zero,8d1e8 <__unpack_f+0x68>
   8d1a4:	10001a26 	beq	r2,zero,8d210 <__unpack_f+0x90>
   8d1a8:	00ffe084 	movi	r3,-126
   8d1ac:	100491fa 	slli	r2,r2,7
   8d1b0:	28c00215 	stw	r3,8(r5)
   8d1b4:	00c000c4 	movi	r3,3
   8d1b8:	28c00015 	stw	r3,0(r5)
   8d1bc:	01900034 	movhi	r6,16384
   8d1c0:	31bfffc4 	addi	r6,r6,-1
   8d1c4:	30801036 	bltu	r6,r2,8d208 <__unpack_f+0x88>
   8d1c8:	00ffe044 	movi	r3,-127
   8d1cc:	1085883a 	add	r2,r2,r2
   8d1d0:	1809883a 	mov	r4,r3
   8d1d4:	18ffffc4 	addi	r3,r3,-1
   8d1d8:	30bffc2e 	bgeu	r6,r2,8d1cc <__unpack_f+0x4c>
   8d1dc:	29000215 	stw	r4,8(r5)
   8d1e0:	28800315 	stw	r2,12(r5)
   8d1e4:	f800283a 	ret
   8d1e8:	01803fc4 	movi	r6,255
   8d1ec:	21800b26 	beq	r4,r6,8d21c <__unpack_f+0x9c>
   8d1f0:	100491fa 	slli	r2,r2,7
   8d1f4:	213fe044 	addi	r4,r4,-127
   8d1f8:	00c000c4 	movi	r3,3
   8d1fc:	10900034 	orhi	r2,r2,16384
   8d200:	29000215 	stw	r4,8(r5)
   8d204:	28c00015 	stw	r3,0(r5)
   8d208:	28800315 	stw	r2,12(r5)
   8d20c:	f800283a 	ret
   8d210:	00800084 	movi	r2,2
   8d214:	28800015 	stw	r2,0(r5)
   8d218:	f800283a 	ret
   8d21c:	10000526 	beq	r2,zero,8d234 <__unpack_f+0xb4>
   8d220:	18c0042c 	andhi	r3,r3,16
   8d224:	18000626 	beq	r3,zero,8d240 <__unpack_f+0xc0>
   8d228:	00c00044 	movi	r3,1
   8d22c:	28c00015 	stw	r3,0(r5)
   8d230:	003ff506 	br	8d208 <__unpack_f+0x88>
   8d234:	00800104 	movi	r2,4
   8d238:	28800015 	stw	r2,0(r5)
   8d23c:	f800283a 	ret
   8d240:	28000015 	stw	zero,0(r5)
   8d244:	003ff006 	br	8d208 <__unpack_f+0x88>

0008d248 <__pack_d>:
   8d248:	20800017 	ldw	r2,0(r4)
   8d24c:	defff804 	addi	sp,sp,-32
   8d250:	dcc00315 	stw	r19,12(sp)
   8d254:	dc800215 	stw	r18,8(sp)
   8d258:	dfc00715 	stw	ra,28(sp)
   8d25c:	dd800615 	stw	r22,24(sp)
   8d260:	dd400515 	stw	r21,20(sp)
   8d264:	dd000415 	stw	r20,16(sp)
   8d268:	dc400115 	stw	r17,4(sp)
   8d26c:	dc000015 	stw	r16,0(sp)
   8d270:	04800044 	movi	r18,1
   8d274:	24400317 	ldw	r17,12(r4)
   8d278:	24000417 	ldw	r16,16(r4)
   8d27c:	24c00117 	ldw	r19,4(r4)
   8d280:	9080422e 	bgeu	r18,r2,8d38c <__pack_d+0x144>
   8d284:	00c00104 	movi	r3,4
   8d288:	10c03c26 	beq	r2,r3,8d37c <__pack_d+0x134>
   8d28c:	00c00084 	movi	r3,2
   8d290:	10c01926 	beq	r2,r3,8d2f8 <__pack_d+0xb0>
   8d294:	8c04b03a 	or	r2,r17,r16
   8d298:	10001726 	beq	r2,zero,8d2f8 <__pack_d+0xb0>
   8d29c:	21000217 	ldw	r4,8(r4)
   8d2a0:	00bf0084 	movi	r2,-1022
   8d2a4:	20804016 	blt	r4,r2,8d3a8 <__pack_d+0x160>
   8d2a8:	0080ffc4 	movi	r2,1023
   8d2ac:	11003316 	blt	r2,r4,8d37c <__pack_d+0x134>
   8d2b0:	88803fcc 	andi	r2,r17,255
   8d2b4:	00c02004 	movi	r3,128
   8d2b8:	10c02926 	beq	r2,r3,8d360 <__pack_d+0x118>
   8d2bc:	88801fc4 	addi	r2,r17,127
   8d2c0:	1463803a 	cmpltu	r17,r2,r17
   8d2c4:	8c21883a 	add	r16,r17,r16
   8d2c8:	1023883a 	mov	r17,r2
   8d2cc:	00880034 	movhi	r2,8192
   8d2d0:	10bfffc4 	addi	r2,r2,-1
   8d2d4:	14001c36 	bltu	r2,r16,8d348 <__pack_d+0x100>
   8d2d8:	2100ffc4 	addi	r4,r4,1023
   8d2dc:	8006963a 	slli	r3,r16,24
   8d2e0:	8804d23a 	srli	r2,r17,8
   8d2e4:	8020913a 	slli	r16,r16,4
   8d2e8:	2101ffcc 	andi	r4,r4,2047
   8d2ec:	1884b03a 	or	r2,r3,r2
   8d2f0:	8020d33a 	srli	r16,r16,12
   8d2f4:	00000306 	br	8d304 <__pack_d+0xbc>
   8d2f8:	0009883a 	mov	r4,zero
   8d2fc:	0005883a 	mov	r2,zero
   8d300:	0021883a 	mov	r16,zero
   8d304:	2008953a 	slli	r4,r4,20
   8d308:	982697fa 	slli	r19,r19,31
   8d30c:	00c00434 	movhi	r3,16
   8d310:	18ffffc4 	addi	r3,r3,-1
   8d314:	80e0703a 	and	r16,r16,r3
   8d318:	8106b03a 	or	r3,r16,r4
   8d31c:	1cc6b03a 	or	r3,r3,r19
   8d320:	dfc00717 	ldw	ra,28(sp)
   8d324:	dd800617 	ldw	r22,24(sp)
   8d328:	dd400517 	ldw	r21,20(sp)
   8d32c:	dd000417 	ldw	r20,16(sp)
   8d330:	dcc00317 	ldw	r19,12(sp)
   8d334:	dc800217 	ldw	r18,8(sp)
   8d338:	dc400117 	ldw	r17,4(sp)
   8d33c:	dc000017 	ldw	r16,0(sp)
   8d340:	dec00804 	addi	sp,sp,32
   8d344:	f800283a 	ret
   8d348:	800697fa 	slli	r3,r16,31
   8d34c:	8804d07a 	srli	r2,r17,1
   8d350:	21010004 	addi	r4,r4,1024
   8d354:	8020d07a 	srli	r16,r16,1
   8d358:	18a2b03a 	or	r17,r3,r2
   8d35c:	003fdf06 	br	8d2dc <__pack_d+0x94>
   8d360:	88c0400c 	andi	r3,r17,256
   8d364:	183fd926 	beq	r3,zero,8d2cc <__pack_d+0x84>
   8d368:	8885883a 	add	r2,r17,r2
   8d36c:	1463803a 	cmpltu	r17,r2,r17
   8d370:	8c21883a 	add	r16,r17,r16
   8d374:	1023883a 	mov	r17,r2
   8d378:	003fd406 	br	8d2cc <__pack_d+0x84>
   8d37c:	0101ffc4 	movi	r4,2047
   8d380:	0005883a 	mov	r2,zero
   8d384:	0021883a 	mov	r16,zero
   8d388:	003fde06 	br	8d304 <__pack_d+0xbc>
   8d38c:	84000234 	orhi	r16,r16,8
   8d390:	00c00434 	movhi	r3,16
   8d394:	18ffffc4 	addi	r3,r3,-1
   8d398:	8805883a 	mov	r2,r17
   8d39c:	80e0703a 	and	r16,r16,r3
   8d3a0:	0101ffc4 	movi	r4,2047
   8d3a4:	003fd706 	br	8d304 <__pack_d+0xbc>
   8d3a8:	1129c83a 	sub	r20,r2,r4
   8d3ac:	00800e04 	movi	r2,56
   8d3b0:	15002716 	blt	r2,r20,8d450 <__pack_d+0x208>
   8d3b4:	800b883a 	mov	r5,r16
   8d3b8:	a00d883a 	mov	r6,r20
   8d3bc:	8809883a 	mov	r4,r17
   8d3c0:	008d46c0 	call	8d46c <__lshrdi3>
   8d3c4:	9009883a 	mov	r4,r18
   8d3c8:	000b883a 	mov	r5,zero
   8d3cc:	a00d883a 	mov	r6,r20
   8d3d0:	102d883a 	mov	r22,r2
   8d3d4:	182b883a 	mov	r21,r3
   8d3d8:	008d4b00 	call	8d4b0 <__ashldi3>
   8d3dc:	1009003a 	cmpeq	r4,r2,zero
   8d3e0:	1907c83a 	sub	r3,r3,r4
   8d3e4:	10bfffc4 	addi	r2,r2,-1
   8d3e8:	1c20703a 	and	r16,r3,r16
   8d3ec:	1444703a 	and	r2,r2,r17
   8d3f0:	1404b03a 	or	r2,r2,r16
   8d3f4:	1004c03a 	cmpne	r2,r2,zero
   8d3f8:	1584b03a 	or	r2,r2,r22
   8d3fc:	11003fcc 	andi	r4,r2,255
   8d400:	01402004 	movi	r5,128
   8d404:	a807883a 	mov	r3,r21
   8d408:	2140131e 	bne	r4,r5,8d458 <__pack_d+0x210>
   8d40c:	1140400c 	andi	r5,r2,256
   8d410:	28000426 	beq	r5,zero,8d424 <__pack_d+0x1dc>
   8d414:	1109883a 	add	r4,r2,r4
   8d418:	2085803a 	cmpltu	r2,r4,r2
   8d41c:	1547883a 	add	r3,r2,r21
   8d420:	2005883a 	mov	r2,r4
   8d424:	1808963a 	slli	r4,r3,24
   8d428:	1004d23a 	srli	r2,r2,8
   8d42c:	1820913a 	slli	r16,r3,4
   8d430:	01440034 	movhi	r5,4096
   8d434:	297fffc4 	addi	r5,r5,-1
   8d438:	2084b03a 	or	r2,r4,r2
   8d43c:	8020d33a 	srli	r16,r16,12
   8d440:	01000044 	movi	r4,1
   8d444:	28ffaf36 	bltu	r5,r3,8d304 <__pack_d+0xbc>
   8d448:	0009883a 	mov	r4,zero
   8d44c:	003fad06 	br	8d304 <__pack_d+0xbc>
   8d450:	0005883a 	mov	r2,zero
   8d454:	0007883a 	mov	r3,zero
   8d458:	11001fc4 	addi	r4,r2,127
   8d45c:	2085803a 	cmpltu	r2,r4,r2
   8d460:	10c7883a 	add	r3,r2,r3
   8d464:	2005883a 	mov	r2,r4
   8d468:	003fee06 	br	8d424 <__pack_d+0x1dc>

0008d46c <__lshrdi3>:
   8d46c:	2005883a 	mov	r2,r4
   8d470:	2807883a 	mov	r3,r5
   8d474:	30000826 	beq	r6,zero,8d498 <__lshrdi3+0x2c>
   8d478:	01000804 	movi	r4,32
   8d47c:	2189c83a 	sub	r4,r4,r6
   8d480:	0100060e 	bge	zero,r4,8d49c <__lshrdi3+0x30>
   8d484:	1184d83a 	srl	r2,r2,r6
   8d488:	2908983a 	sll	r4,r5,r4
   8d48c:	298cd83a 	srl	r6,r5,r6
   8d490:	2084b03a 	or	r2,r4,r2
   8d494:	3007883a 	mov	r3,r6
   8d498:	f800283a 	ret
   8d49c:	0105c83a 	sub	r2,zero,r4
   8d4a0:	000d883a 	mov	r6,zero
   8d4a4:	2884d83a 	srl	r2,r5,r2
   8d4a8:	3007883a 	mov	r3,r6
   8d4ac:	003ffa06 	br	8d498 <__lshrdi3+0x2c>

0008d4b0 <__ashldi3>:
   8d4b0:	2005883a 	mov	r2,r4
   8d4b4:	2807883a 	mov	r3,r5
   8d4b8:	30000826 	beq	r6,zero,8d4dc <__ashldi3+0x2c>
   8d4bc:	01000804 	movi	r4,32
   8d4c0:	2189c83a 	sub	r4,r4,r6
   8d4c4:	0100060e 	bge	zero,r4,8d4e0 <__ashldi3+0x30>
   8d4c8:	1108d83a 	srl	r4,r2,r4
   8d4cc:	2986983a 	sll	r3,r5,r6
   8d4d0:	118c983a 	sll	r6,r2,r6
   8d4d4:	20c6b03a 	or	r3,r4,r3
   8d4d8:	3005883a 	mov	r2,r6
   8d4dc:	f800283a 	ret
   8d4e0:	0107c83a 	sub	r3,zero,r4
   8d4e4:	000d883a 	mov	r6,zero
   8d4e8:	10c6983a 	sll	r3,r2,r3
   8d4ec:	3005883a 	mov	r2,r6
   8d4f0:	003ffa06 	br	8d4dc <__ashldi3+0x2c>

0008d4f4 <_fgets_r>:
   8d4f4:	defff704 	addi	sp,sp,-36
   8d4f8:	dd800715 	stw	r22,28(sp)
   8d4fc:	dd400615 	stw	r21,24(sp)
   8d500:	dc400215 	stw	r17,8(sp)
   8d504:	dfc00815 	stw	ra,32(sp)
   8d508:	dd000515 	stw	r20,20(sp)
   8d50c:	dcc00415 	stw	r19,16(sp)
   8d510:	dc800315 	stw	r18,12(sp)
   8d514:	dc000115 	stw	r16,4(sp)
   8d518:	00800044 	movi	r2,1
   8d51c:	202b883a 	mov	r21,r4
   8d520:	282d883a 	mov	r22,r5
   8d524:	3823883a 	mov	r17,r7
   8d528:	11803f0e 	bge	r2,r6,8d628 <_fgets_r+0x134>
   8d52c:	20000226 	beq	r4,zero,8d538 <_fgets_r+0x44>
   8d530:	20800e17 	ldw	r2,56(r4)
   8d534:	10002d26 	beq	r2,zero,8d5ec <_fgets_r+0xf8>
   8d538:	34bfffc4 	addi	r18,r6,-1
   8d53c:	b027883a 	mov	r19,r22
   8d540:	00001506 	br	8d598 <_fgets_r+0xa4>
   8d544:	01400284 	movi	r5,10
   8d548:	8d000017 	ldw	r20,0(r17)
   8d54c:	9400012e 	bgeu	r18,r16,8d554 <_fgets_r+0x60>
   8d550:	9021883a 	mov	r16,r18
   8d554:	a009883a 	mov	r4,r20
   8d558:	800d883a 	mov	r6,r16
   8d55c:	008e2100 	call	8e210 <memchr>
   8d560:	9809883a 	mov	r4,r19
   8d564:	a00b883a 	mov	r5,r20
   8d568:	800d883a 	mov	r6,r16
   8d56c:	9425c83a 	sub	r18,r18,r16
   8d570:	1000221e 	bne	r2,zero,8d5fc <_fgets_r+0x108>
   8d574:	88800117 	ldw	r2,4(r17)
   8d578:	88c00017 	ldw	r3,0(r17)
   8d57c:	9c27883a 	add	r19,r19,r16
   8d580:	1405c83a 	sub	r2,r2,r16
   8d584:	1c21883a 	add	r16,r3,r16
   8d588:	88800115 	stw	r2,4(r17)
   8d58c:	8c000015 	stw	r16,0(r17)
   8d590:	008e3840 	call	8e384 <memcpy>
   8d594:	90000926 	beq	r18,zero,8d5bc <_fgets_r+0xc8>
   8d598:	8c000117 	ldw	r16,4(r17)
   8d59c:	803fe91e 	bne	r16,zero,8d544 <_fgets_r+0x50>
   8d5a0:	a809883a 	mov	r4,r21
   8d5a4:	880b883a 	mov	r5,r17
   8d5a8:	008e6980 	call	8e698 <__srefill_r>
   8d5ac:	1000021e 	bne	r2,zero,8d5b8 <_fgets_r+0xc4>
   8d5b0:	8c000117 	ldw	r16,4(r17)
   8d5b4:	003fe306 	br	8d544 <_fgets_r+0x50>
   8d5b8:	9d801b26 	beq	r19,r22,8d628 <_fgets_r+0x134>
   8d5bc:	98000005 	stb	zero,0(r19)
   8d5c0:	b005883a 	mov	r2,r22
   8d5c4:	dfc00817 	ldw	ra,32(sp)
   8d5c8:	dd800717 	ldw	r22,28(sp)
   8d5cc:	dd400617 	ldw	r21,24(sp)
   8d5d0:	dd000517 	ldw	r20,20(sp)
   8d5d4:	dcc00417 	ldw	r19,16(sp)
   8d5d8:	dc800317 	ldw	r18,12(sp)
   8d5dc:	dc400217 	ldw	r17,8(sp)
   8d5e0:	dc000117 	ldw	r16,4(sp)
   8d5e4:	dec00904 	addi	sp,sp,36
   8d5e8:	f800283a 	ret
   8d5ec:	d9800015 	stw	r6,0(sp)
   8d5f0:	008d6e40 	call	8d6e4 <__sinit>
   8d5f4:	d9800017 	ldw	r6,0(sp)
   8d5f8:	003fcf06 	br	8d538 <_fgets_r+0x44>
   8d5fc:	88c00117 	ldw	r3,4(r17)
   8d600:	10800044 	addi	r2,r2,1
   8d604:	1521c83a 	sub	r16,r2,r20
   8d608:	1c07c83a 	sub	r3,r3,r16
   8d60c:	800d883a 	mov	r6,r16
   8d610:	88c00115 	stw	r3,4(r17)
   8d614:	88800015 	stw	r2,0(r17)
   8d618:	9c21883a 	add	r16,r19,r16
   8d61c:	008e3840 	call	8e384 <memcpy>
   8d620:	80000005 	stb	zero,0(r16)
   8d624:	003fe606 	br	8d5c0 <_fgets_r+0xcc>
   8d628:	002d883a 	mov	r22,zero
   8d62c:	003fe406 	br	8d5c0 <_fgets_r+0xcc>

0008d630 <fgets>:
   8d630:	008002b4 	movhi	r2,10
   8d634:	10bd6704 	addi	r2,r2,-2660
   8d638:	2007883a 	mov	r3,r4
   8d63c:	11000017 	ldw	r4,0(r2)
   8d640:	2805883a 	mov	r2,r5
   8d644:	300f883a 	mov	r7,r6
   8d648:	180b883a 	mov	r5,r3
   8d64c:	100d883a 	mov	r6,r2
   8d650:	008d4f41 	jmpi	8d4f4 <_fgets_r>

0008d654 <__fp_lock>:
   8d654:	0005883a 	mov	r2,zero
   8d658:	f800283a 	ret

0008d65c <__fp_unlock>:
   8d65c:	0005883a 	mov	r2,zero
   8d660:	f800283a 	ret

0008d664 <_cleanup_r>:
   8d664:	01400274 	movhi	r5,9
   8d668:	294a0204 	addi	r5,r5,10248
   8d66c:	008d92c1 	jmpi	8d92c <_fwalk>

0008d670 <__sfmoreglue>:
   8d670:	defffc04 	addi	sp,sp,-16
   8d674:	dc400115 	stw	r17,4(sp)
   8d678:	2c401724 	muli	r17,r5,92
   8d67c:	dc800215 	stw	r18,8(sp)
   8d680:	2825883a 	mov	r18,r5
   8d684:	89400304 	addi	r5,r17,12
   8d688:	dc000015 	stw	r16,0(sp)
   8d68c:	dfc00315 	stw	ra,12(sp)
   8d690:	008da8c0 	call	8da8c <_malloc_r>
   8d694:	1021883a 	mov	r16,r2
   8d698:	10000726 	beq	r2,zero,8d6b8 <__sfmoreglue+0x48>
   8d69c:	11000304 	addi	r4,r2,12
   8d6a0:	10000015 	stw	zero,0(r2)
   8d6a4:	14800115 	stw	r18,4(r2)
   8d6a8:	11000215 	stw	r4,8(r2)
   8d6ac:	000b883a 	mov	r5,zero
   8d6b0:	880d883a 	mov	r6,r17
   8d6b4:	008e47c0 	call	8e47c <memset>
   8d6b8:	8005883a 	mov	r2,r16
   8d6bc:	dfc00317 	ldw	ra,12(sp)
   8d6c0:	dc800217 	ldw	r18,8(sp)
   8d6c4:	dc400117 	ldw	r17,4(sp)
   8d6c8:	dc000017 	ldw	r16,0(sp)
   8d6cc:	dec00404 	addi	sp,sp,16
   8d6d0:	f800283a 	ret

0008d6d4 <_cleanup>:
   8d6d4:	008002b4 	movhi	r2,10
   8d6d8:	10bd6604 	addi	r2,r2,-2664
   8d6dc:	11000017 	ldw	r4,0(r2)
   8d6e0:	008d6641 	jmpi	8d664 <_cleanup_r>

0008d6e4 <__sinit>:
   8d6e4:	20800e17 	ldw	r2,56(r4)
   8d6e8:	1000401e 	bne	r2,zero,8d7ec <__sinit+0x108>
   8d6ec:	21400117 	ldw	r5,4(r4)
   8d6f0:	01800274 	movhi	r6,9
   8d6f4:	31b59904 	addi	r6,r6,-10652
   8d6f8:	20c00217 	ldw	r3,8(r4)
   8d6fc:	21800f15 	stw	r6,60(r4)
   8d700:	2080bb04 	addi	r2,r4,748
   8d704:	02400044 	movi	r9,1
   8d708:	018000c4 	movi	r6,3
   8d70c:	2180b915 	stw	r6,740(r4)
   8d710:	2080ba15 	stw	r2,744(r4)
   8d714:	22400e15 	stw	r9,56(r4)
   8d718:	20800317 	ldw	r2,12(r4)
   8d71c:	2000b815 	stw	zero,736(r4)
   8d720:	02000274 	movhi	r8,9
   8d724:	423a3a04 	addi	r8,r8,-5912
   8d728:	01c00274 	movhi	r7,9
   8d72c:	39fa4f04 	addi	r7,r7,-5828
   8d730:	01800274 	movhi	r6,9
   8d734:	31ba7104 	addi	r6,r6,-5692
   8d738:	01000274 	movhi	r4,9
   8d73c:	213a8804 	addi	r4,r4,-5600
   8d740:	02800104 	movi	r10,4
   8d744:	28000015 	stw	zero,0(r5)
   8d748:	28000115 	stw	zero,4(r5)
   8d74c:	28000215 	stw	zero,8(r5)
   8d750:	2a80030d 	sth	r10,12(r5)
   8d754:	2800038d 	sth	zero,14(r5)
   8d758:	28000415 	stw	zero,16(r5)
   8d75c:	28000515 	stw	zero,20(r5)
   8d760:	28000615 	stw	zero,24(r5)
   8d764:	29400715 	stw	r5,28(r5)
   8d768:	2a000815 	stw	r8,32(r5)
   8d76c:	29c00915 	stw	r7,36(r5)
   8d770:	29800a15 	stw	r6,40(r5)
   8d774:	29000b15 	stw	r4,44(r5)
   8d778:	01400284 	movi	r5,10
   8d77c:	18000015 	stw	zero,0(r3)
   8d780:	18000115 	stw	zero,4(r3)
   8d784:	18000215 	stw	zero,8(r3)
   8d788:	1940030d 	sth	r5,12(r3)
   8d78c:	1a40038d 	sth	r9,14(r3)
   8d790:	18000415 	stw	zero,16(r3)
   8d794:	18000515 	stw	zero,20(r3)
   8d798:	18000615 	stw	zero,24(r3)
   8d79c:	18c00715 	stw	r3,28(r3)
   8d7a0:	1a000815 	stw	r8,32(r3)
   8d7a4:	19c00915 	stw	r7,36(r3)
   8d7a8:	19800a15 	stw	r6,40(r3)
   8d7ac:	19000b15 	stw	r4,44(r3)
   8d7b0:	00c00484 	movi	r3,18
   8d7b4:	10c0030d 	sth	r3,12(r2)
   8d7b8:	00c00084 	movi	r3,2
   8d7bc:	10000015 	stw	zero,0(r2)
   8d7c0:	10000115 	stw	zero,4(r2)
   8d7c4:	10000215 	stw	zero,8(r2)
   8d7c8:	10c0038d 	sth	r3,14(r2)
   8d7cc:	10000415 	stw	zero,16(r2)
   8d7d0:	10000515 	stw	zero,20(r2)
   8d7d4:	10000615 	stw	zero,24(r2)
   8d7d8:	10800715 	stw	r2,28(r2)
   8d7dc:	12000815 	stw	r8,32(r2)
   8d7e0:	11c00915 	stw	r7,36(r2)
   8d7e4:	11800a15 	stw	r6,40(r2)
   8d7e8:	11000b15 	stw	r4,44(r2)
   8d7ec:	f800283a 	ret

0008d7f0 <__sfp>:
   8d7f0:	defffc04 	addi	sp,sp,-16
   8d7f4:	008002b4 	movhi	r2,10
   8d7f8:	10bd6604 	addi	r2,r2,-2664
   8d7fc:	dc400115 	stw	r17,4(sp)
   8d800:	14400017 	ldw	r17,0(r2)
   8d804:	dc800215 	stw	r18,8(sp)
   8d808:	dfc00315 	stw	ra,12(sp)
   8d80c:	88800e17 	ldw	r2,56(r17)
   8d810:	dc000015 	stw	r16,0(sp)
   8d814:	2025883a 	mov	r18,r4
   8d818:	10002826 	beq	r2,zero,8d8bc <__sfp+0xcc>
   8d81c:	8c40b804 	addi	r17,r17,736
   8d820:	043fffc4 	movi	r16,-1
   8d824:	89400117 	ldw	r5,4(r17)
   8d828:	88800217 	ldw	r2,8(r17)
   8d82c:	297fffc4 	addi	r5,r5,-1
   8d830:	28000a16 	blt	r5,zero,8d85c <__sfp+0x6c>
   8d834:	10c0030f 	ldh	r3,12(r2)
   8d838:	18000c26 	beq	r3,zero,8d86c <__sfp+0x7c>
   8d83c:	10c01a04 	addi	r3,r2,104
   8d840:	00000206 	br	8d84c <__sfp+0x5c>
   8d844:	19bfe90f 	ldh	r6,-92(r3)
   8d848:	30000826 	beq	r6,zero,8d86c <__sfp+0x7c>
   8d84c:	297fffc4 	addi	r5,r5,-1
   8d850:	18bffd04 	addi	r2,r3,-12
   8d854:	18c01704 	addi	r3,r3,92
   8d858:	2c3ffa1e 	bne	r5,r16,8d844 <__sfp+0x54>
   8d85c:	88800017 	ldw	r2,0(r17)
   8d860:	10001926 	beq	r2,zero,8d8c8 <__sfp+0xd8>
   8d864:	1023883a 	mov	r17,r2
   8d868:	003fee06 	br	8d824 <__sfp+0x34>
   8d86c:	00ffffc4 	movi	r3,-1
   8d870:	10c0038d 	sth	r3,14(r2)
   8d874:	00c00044 	movi	r3,1
   8d878:	10c0030d 	sth	r3,12(r2)
   8d87c:	10000015 	stw	zero,0(r2)
   8d880:	10000215 	stw	zero,8(r2)
   8d884:	10000115 	stw	zero,4(r2)
   8d888:	10000415 	stw	zero,16(r2)
   8d88c:	10000515 	stw	zero,20(r2)
   8d890:	10000615 	stw	zero,24(r2)
   8d894:	10000c15 	stw	zero,48(r2)
   8d898:	10000d15 	stw	zero,52(r2)
   8d89c:	10001115 	stw	zero,68(r2)
   8d8a0:	10001215 	stw	zero,72(r2)
   8d8a4:	dfc00317 	ldw	ra,12(sp)
   8d8a8:	dc800217 	ldw	r18,8(sp)
   8d8ac:	dc400117 	ldw	r17,4(sp)
   8d8b0:	dc000017 	ldw	r16,0(sp)
   8d8b4:	dec00404 	addi	sp,sp,16
   8d8b8:	f800283a 	ret
   8d8bc:	8809883a 	mov	r4,r17
   8d8c0:	008d6e40 	call	8d6e4 <__sinit>
   8d8c4:	003fd506 	br	8d81c <__sfp+0x2c>
   8d8c8:	9009883a 	mov	r4,r18
   8d8cc:	01400104 	movi	r5,4
   8d8d0:	008d6700 	call	8d670 <__sfmoreglue>
   8d8d4:	88800015 	stw	r2,0(r17)
   8d8d8:	103fe21e 	bne	r2,zero,8d864 <__sfp+0x74>
   8d8dc:	00800304 	movi	r2,12
   8d8e0:	90800015 	stw	r2,0(r18)
   8d8e4:	0005883a 	mov	r2,zero
   8d8e8:	003fee06 	br	8d8a4 <__sfp+0xb4>

0008d8ec <__sfp_lock_acquire>:
   8d8ec:	f800283a 	ret

0008d8f0 <__sfp_lock_release>:
   8d8f0:	f800283a 	ret

0008d8f4 <__sinit_lock_acquire>:
   8d8f4:	f800283a 	ret

0008d8f8 <__sinit_lock_release>:
   8d8f8:	f800283a 	ret

0008d8fc <__fp_lock_all>:
   8d8fc:	008002b4 	movhi	r2,10
   8d900:	10bd6704 	addi	r2,r2,-2660
   8d904:	11000017 	ldw	r4,0(r2)
   8d908:	01400274 	movhi	r5,9
   8d90c:	29759504 	addi	r5,r5,-10668
   8d910:	008d92c1 	jmpi	8d92c <_fwalk>

0008d914 <__fp_unlock_all>:
   8d914:	008002b4 	movhi	r2,10
   8d918:	10bd6704 	addi	r2,r2,-2660
   8d91c:	11000017 	ldw	r4,0(r2)
   8d920:	01400274 	movhi	r5,9
   8d924:	29759704 	addi	r5,r5,-10660
   8d928:	008d92c1 	jmpi	8d92c <_fwalk>

0008d92c <_fwalk>:
   8d92c:	defff904 	addi	sp,sp,-28
   8d930:	dcc00315 	stw	r19,12(sp)
   8d934:	24c0b804 	addi	r19,r4,736
   8d938:	dd400515 	stw	r21,20(sp)
   8d93c:	dd000415 	stw	r20,16(sp)
   8d940:	dfc00615 	stw	ra,24(sp)
   8d944:	dc800215 	stw	r18,8(sp)
   8d948:	dc400115 	stw	r17,4(sp)
   8d94c:	dc000015 	stw	r16,0(sp)
   8d950:	282b883a 	mov	r21,r5
   8d954:	0029883a 	mov	r20,zero
   8d958:	008d8ec0 	call	8d8ec <__sfp_lock_acquire>
   8d95c:	98001226 	beq	r19,zero,8d9a8 <_fwalk+0x7c>
   8d960:	04bfffc4 	movi	r18,-1
   8d964:	9c400117 	ldw	r17,4(r19)
   8d968:	9c000217 	ldw	r16,8(r19)
   8d96c:	8c7fffc4 	addi	r17,r17,-1
   8d970:	88000b16 	blt	r17,zero,8d9a0 <_fwalk+0x74>
   8d974:	84000304 	addi	r16,r16,12
   8d978:	80c0000f 	ldh	r3,0(r16)
   8d97c:	8c7fffc4 	addi	r17,r17,-1
   8d980:	813ffd04 	addi	r4,r16,-12
   8d984:	18000426 	beq	r3,zero,8d998 <_fwalk+0x6c>
   8d988:	80c0008f 	ldh	r3,2(r16)
   8d98c:	1c800226 	beq	r3,r18,8d998 <_fwalk+0x6c>
   8d990:	a83ee83a 	callr	r21
   8d994:	a0a8b03a 	or	r20,r20,r2
   8d998:	84001704 	addi	r16,r16,92
   8d99c:	8cbff61e 	bne	r17,r18,8d978 <_fwalk+0x4c>
   8d9a0:	9cc00017 	ldw	r19,0(r19)
   8d9a4:	983fef1e 	bne	r19,zero,8d964 <_fwalk+0x38>
   8d9a8:	008d8f00 	call	8d8f0 <__sfp_lock_release>
   8d9ac:	a005883a 	mov	r2,r20
   8d9b0:	dfc00617 	ldw	ra,24(sp)
   8d9b4:	dd400517 	ldw	r21,20(sp)
   8d9b8:	dd000417 	ldw	r20,16(sp)
   8d9bc:	dcc00317 	ldw	r19,12(sp)
   8d9c0:	dc800217 	ldw	r18,8(sp)
   8d9c4:	dc400117 	ldw	r17,4(sp)
   8d9c8:	dc000017 	ldw	r16,0(sp)
   8d9cc:	dec00704 	addi	sp,sp,28
   8d9d0:	f800283a 	ret

0008d9d4 <_fwalk_reent>:
   8d9d4:	defff804 	addi	sp,sp,-32
   8d9d8:	dcc00315 	stw	r19,12(sp)
   8d9dc:	24c0b804 	addi	r19,r4,736
   8d9e0:	dd800615 	stw	r22,24(sp)
   8d9e4:	dd400515 	stw	r21,20(sp)
   8d9e8:	dd000415 	stw	r20,16(sp)
   8d9ec:	dfc00715 	stw	ra,28(sp)
   8d9f0:	dc800215 	stw	r18,8(sp)
   8d9f4:	dc400115 	stw	r17,4(sp)
   8d9f8:	dc000015 	stw	r16,0(sp)
   8d9fc:	2029883a 	mov	r20,r4
   8da00:	282b883a 	mov	r21,r5
   8da04:	002d883a 	mov	r22,zero
   8da08:	008d8ec0 	call	8d8ec <__sfp_lock_acquire>
   8da0c:	98001326 	beq	r19,zero,8da5c <_fwalk_reent+0x88>
   8da10:	04bfffc4 	movi	r18,-1
   8da14:	9c400117 	ldw	r17,4(r19)
   8da18:	9c000217 	ldw	r16,8(r19)
   8da1c:	8c7fffc4 	addi	r17,r17,-1
   8da20:	88000c16 	blt	r17,zero,8da54 <_fwalk_reent+0x80>
   8da24:	84000304 	addi	r16,r16,12
   8da28:	80c0000f 	ldh	r3,0(r16)
   8da2c:	8c7fffc4 	addi	r17,r17,-1
   8da30:	817ffd04 	addi	r5,r16,-12
   8da34:	18000526 	beq	r3,zero,8da4c <_fwalk_reent+0x78>
   8da38:	80c0008f 	ldh	r3,2(r16)
   8da3c:	a009883a 	mov	r4,r20
   8da40:	1c800226 	beq	r3,r18,8da4c <_fwalk_reent+0x78>
   8da44:	a83ee83a 	callr	r21
   8da48:	b0acb03a 	or	r22,r22,r2
   8da4c:	84001704 	addi	r16,r16,92
   8da50:	8cbff51e 	bne	r17,r18,8da28 <_fwalk_reent+0x54>
   8da54:	9cc00017 	ldw	r19,0(r19)
   8da58:	983fee1e 	bne	r19,zero,8da14 <_fwalk_reent+0x40>
   8da5c:	008d8f00 	call	8d8f0 <__sfp_lock_release>
   8da60:	b005883a 	mov	r2,r22
   8da64:	dfc00717 	ldw	ra,28(sp)
   8da68:	dd800617 	ldw	r22,24(sp)
   8da6c:	dd400517 	ldw	r21,20(sp)
   8da70:	dd000417 	ldw	r20,16(sp)
   8da74:	dcc00317 	ldw	r19,12(sp)
   8da78:	dc800217 	ldw	r18,8(sp)
   8da7c:	dc400117 	ldw	r17,4(sp)
   8da80:	dc000017 	ldw	r16,0(sp)
   8da84:	dec00804 	addi	sp,sp,32
   8da88:	f800283a 	ret

0008da8c <_malloc_r>:
   8da8c:	defff604 	addi	sp,sp,-40
   8da90:	dc800215 	stw	r18,8(sp)
   8da94:	dfc00915 	stw	ra,36(sp)
   8da98:	df000815 	stw	fp,32(sp)
   8da9c:	ddc00715 	stw	r23,28(sp)
   8daa0:	dd800615 	stw	r22,24(sp)
   8daa4:	dd400515 	stw	r21,20(sp)
   8daa8:	dd000415 	stw	r20,16(sp)
   8daac:	dcc00315 	stw	r19,12(sp)
   8dab0:	dc400115 	stw	r17,4(sp)
   8dab4:	dc000015 	stw	r16,0(sp)
   8dab8:	288002c4 	addi	r2,r5,11
   8dabc:	00c00584 	movi	r3,22
   8dac0:	2025883a 	mov	r18,r4
   8dac4:	18802b2e 	bgeu	r3,r2,8db74 <_malloc_r+0xe8>
   8dac8:	047ffe04 	movi	r17,-8
   8dacc:	1462703a 	and	r17,r2,r17
   8dad0:	88002a16 	blt	r17,zero,8db7c <_malloc_r+0xf0>
   8dad4:	89402936 	bltu	r17,r5,8db7c <_malloc_r+0xf0>
   8dad8:	9009883a 	mov	r4,r18
   8dadc:	009762c0 	call	9762c <__malloc_lock>
   8dae0:	00807dc4 	movi	r2,503
   8dae4:	14402936 	bltu	r2,r17,8db8c <_malloc_r+0x100>
   8dae8:	8808d0fa 	srli	r4,r17,3
   8daec:	04c002b4 	movhi	r19,10
   8daf0:	9cf77c04 	addi	r19,r19,-8720
   8daf4:	2105883a 	add	r2,r4,r4
   8daf8:	1085883a 	add	r2,r2,r2
   8dafc:	1085883a 	add	r2,r2,r2
   8db00:	9885883a 	add	r2,r19,r2
   8db04:	14000317 	ldw	r16,12(r2)
   8db08:	80815526 	beq	r16,r2,8e060 <_malloc_r+0x5d4>
   8db0c:	81000117 	ldw	r4,4(r16)
   8db10:	00bfff04 	movi	r2,-4
   8db14:	80c00317 	ldw	r3,12(r16)
   8db18:	2084703a 	and	r2,r4,r2
   8db1c:	8085883a 	add	r2,r16,r2
   8db20:	11800117 	ldw	r6,4(r2)
   8db24:	81400217 	ldw	r5,8(r16)
   8db28:	9009883a 	mov	r4,r18
   8db2c:	31800054 	ori	r6,r6,1
   8db30:	11800115 	stw	r6,4(r2)
   8db34:	28c00315 	stw	r3,12(r5)
   8db38:	19400215 	stw	r5,8(r3)
   8db3c:	009764c0 	call	9764c <__malloc_unlock>
   8db40:	80800204 	addi	r2,r16,8
   8db44:	dfc00917 	ldw	ra,36(sp)
   8db48:	df000817 	ldw	fp,32(sp)
   8db4c:	ddc00717 	ldw	r23,28(sp)
   8db50:	dd800617 	ldw	r22,24(sp)
   8db54:	dd400517 	ldw	r21,20(sp)
   8db58:	dd000417 	ldw	r20,16(sp)
   8db5c:	dcc00317 	ldw	r19,12(sp)
   8db60:	dc800217 	ldw	r18,8(sp)
   8db64:	dc400117 	ldw	r17,4(sp)
   8db68:	dc000017 	ldw	r16,0(sp)
   8db6c:	dec00a04 	addi	sp,sp,40
   8db70:	f800283a 	ret
   8db74:	04400404 	movi	r17,16
   8db78:	897fd72e 	bgeu	r17,r5,8dad8 <_malloc_r+0x4c>
   8db7c:	00800304 	movi	r2,12
   8db80:	90800015 	stw	r2,0(r18)
   8db84:	0005883a 	mov	r2,zero
   8db88:	003fee06 	br	8db44 <_malloc_r+0xb8>
   8db8c:	8808d27a 	srli	r4,r17,9
   8db90:	20007126 	beq	r4,zero,8dd58 <_malloc_r+0x2cc>
   8db94:	00800104 	movi	r2,4
   8db98:	1100eb36 	bltu	r2,r4,8df48 <_malloc_r+0x4bc>
   8db9c:	8808d1ba 	srli	r4,r17,6
   8dba0:	21000e04 	addi	r4,r4,56
   8dba4:	210b883a 	add	r5,r4,r4
   8dba8:	294b883a 	add	r5,r5,r5
   8dbac:	294b883a 	add	r5,r5,r5
   8dbb0:	04c002b4 	movhi	r19,10
   8dbb4:	9cf77c04 	addi	r19,r19,-8720
   8dbb8:	994b883a 	add	r5,r19,r5
   8dbbc:	2c000317 	ldw	r16,12(r5)
   8dbc0:	2c000e26 	beq	r5,r16,8dbfc <_malloc_r+0x170>
   8dbc4:	80c00117 	ldw	r3,4(r16)
   8dbc8:	01ffff04 	movi	r7,-4
   8dbcc:	018003c4 	movi	r6,15
   8dbd0:	19c6703a 	and	r3,r3,r7
   8dbd4:	1c45c83a 	sub	r2,r3,r17
   8dbd8:	30800716 	blt	r6,r2,8dbf8 <_malloc_r+0x16c>
   8dbdc:	1000610e 	bge	r2,zero,8dd64 <_malloc_r+0x2d8>
   8dbe0:	84000317 	ldw	r16,12(r16)
   8dbe4:	2c000526 	beq	r5,r16,8dbfc <_malloc_r+0x170>
   8dbe8:	80c00117 	ldw	r3,4(r16)
   8dbec:	19c6703a 	and	r3,r3,r7
   8dbf0:	1c45c83a 	sub	r2,r3,r17
   8dbf4:	30bff90e 	bge	r6,r2,8dbdc <_malloc_r+0x150>
   8dbf8:	213fffc4 	addi	r4,r4,-1
   8dbfc:	21000044 	addi	r4,r4,1
   8dc00:	9c000417 	ldw	r16,16(r19)
   8dc04:	00c002b4 	movhi	r3,10
   8dc08:	18f77c04 	addi	r3,r3,-8720
   8dc0c:	1a400204 	addi	r9,r3,8
   8dc10:	8240ff26 	beq	r16,r9,8e010 <_malloc_r+0x584>
   8dc14:	81400117 	ldw	r5,4(r16)
   8dc18:	00bfff04 	movi	r2,-4
   8dc1c:	018003c4 	movi	r6,15
   8dc20:	2884703a 	and	r2,r5,r2
   8dc24:	144bc83a 	sub	r5,r2,r17
   8dc28:	3140ea16 	blt	r6,r5,8dfd4 <_malloc_r+0x548>
   8dc2c:	1a400515 	stw	r9,20(r3)
   8dc30:	1a400415 	stw	r9,16(r3)
   8dc34:	2800570e 	bge	r5,zero,8dd94 <_malloc_r+0x308>
   8dc38:	01407fc4 	movi	r5,511
   8dc3c:	2880ca36 	bltu	r5,r2,8df68 <_malloc_r+0x4dc>
   8dc40:	1004d0fa 	srli	r2,r2,3
   8dc44:	02000044 	movi	r8,1
   8dc48:	19c00117 	ldw	r7,4(r3)
   8dc4c:	108b883a 	add	r5,r2,r2
   8dc50:	294b883a 	add	r5,r5,r5
   8dc54:	1005d0ba 	srai	r2,r2,2
   8dc58:	294b883a 	add	r5,r5,r5
   8dc5c:	28cb883a 	add	r5,r5,r3
   8dc60:	29800217 	ldw	r6,8(r5)
   8dc64:	4084983a 	sll	r2,r8,r2
   8dc68:	81400315 	stw	r5,12(r16)
   8dc6c:	81800215 	stw	r6,8(r16)
   8dc70:	11c4b03a 	or	r2,r2,r7
   8dc74:	18800115 	stw	r2,4(r3)
   8dc78:	2c000215 	stw	r16,8(r5)
   8dc7c:	34000315 	stw	r16,12(r6)
   8dc80:	200bd0ba 	srai	r5,r4,2
   8dc84:	00c00044 	movi	r3,1
   8dc88:	194a983a 	sll	r5,r3,r5
   8dc8c:	11404936 	bltu	r2,r5,8ddb4 <_malloc_r+0x328>
   8dc90:	1146703a 	and	r3,r2,r5
   8dc94:	18000a1e 	bne	r3,zero,8dcc0 <_malloc_r+0x234>
   8dc98:	00ffff04 	movi	r3,-4
   8dc9c:	294b883a 	add	r5,r5,r5
   8dca0:	20c8703a 	and	r4,r4,r3
   8dca4:	1146703a 	and	r3,r2,r5
   8dca8:	21000104 	addi	r4,r4,4
   8dcac:	1800041e 	bne	r3,zero,8dcc0 <_malloc_r+0x234>
   8dcb0:	294b883a 	add	r5,r5,r5
   8dcb4:	1146703a 	and	r3,r2,r5
   8dcb8:	21000104 	addi	r4,r4,4
   8dcbc:	183ffc26 	beq	r3,zero,8dcb0 <_malloc_r+0x224>
   8dcc0:	023fff04 	movi	r8,-4
   8dcc4:	01c003c4 	movi	r7,15
   8dcc8:	2105883a 	add	r2,r4,r4
   8dccc:	1085883a 	add	r2,r2,r2
   8dcd0:	1085883a 	add	r2,r2,r2
   8dcd4:	9899883a 	add	r12,r19,r2
   8dcd8:	62800304 	addi	r10,r12,12
   8dcdc:	2017883a 	mov	r11,r4
   8dce0:	54000017 	ldw	r16,0(r10)
   8dce4:	51bffd04 	addi	r6,r10,-12
   8dce8:	8180041e 	bne	r16,r6,8dcfc <_malloc_r+0x270>
   8dcec:	0000ca06 	br	8e018 <_malloc_r+0x58c>
   8dcf0:	10001c0e 	bge	r2,zero,8dd64 <_malloc_r+0x2d8>
   8dcf4:	84000317 	ldw	r16,12(r16)
   8dcf8:	8180c726 	beq	r16,r6,8e018 <_malloc_r+0x58c>
   8dcfc:	80c00117 	ldw	r3,4(r16)
   8dd00:	1a06703a 	and	r3,r3,r8
   8dd04:	1c45c83a 	sub	r2,r3,r17
   8dd08:	38bff90e 	bge	r7,r2,8dcf0 <_malloc_r+0x264>
   8dd0c:	81000317 	ldw	r4,12(r16)
   8dd10:	81400217 	ldw	r5,8(r16)
   8dd14:	8447883a 	add	r3,r16,r17
   8dd18:	8c400054 	ori	r17,r17,1
   8dd1c:	29000315 	stw	r4,12(r5)
   8dd20:	21400215 	stw	r5,8(r4)
   8dd24:	84400115 	stw	r17,4(r16)
   8dd28:	1889883a 	add	r4,r3,r2
   8dd2c:	11400054 	ori	r5,r2,1
   8dd30:	98c00515 	stw	r3,20(r19)
   8dd34:	98c00415 	stw	r3,16(r19)
   8dd38:	20800015 	stw	r2,0(r4)
   8dd3c:	1a400315 	stw	r9,12(r3)
   8dd40:	1a400215 	stw	r9,8(r3)
   8dd44:	19400115 	stw	r5,4(r3)
   8dd48:	9009883a 	mov	r4,r18
   8dd4c:	009764c0 	call	9764c <__malloc_unlock>
   8dd50:	80800204 	addi	r2,r16,8
   8dd54:	003f7b06 	br	8db44 <_malloc_r+0xb8>
   8dd58:	8808d0fa 	srli	r4,r17,3
   8dd5c:	210b883a 	add	r5,r4,r4
   8dd60:	003f9106 	br	8dba8 <_malloc_r+0x11c>
   8dd64:	80c7883a 	add	r3,r16,r3
   8dd68:	19400117 	ldw	r5,4(r3)
   8dd6c:	80800317 	ldw	r2,12(r16)
   8dd70:	81000217 	ldw	r4,8(r16)
   8dd74:	29400054 	ori	r5,r5,1
   8dd78:	19400115 	stw	r5,4(r3)
   8dd7c:	20800315 	stw	r2,12(r4)
   8dd80:	11000215 	stw	r4,8(r2)
   8dd84:	9009883a 	mov	r4,r18
   8dd88:	009764c0 	call	9764c <__malloc_unlock>
   8dd8c:	80800204 	addi	r2,r16,8
   8dd90:	003f6c06 	br	8db44 <_malloc_r+0xb8>
   8dd94:	8085883a 	add	r2,r16,r2
   8dd98:	10c00117 	ldw	r3,4(r2)
   8dd9c:	9009883a 	mov	r4,r18
   8dda0:	18c00054 	ori	r3,r3,1
   8dda4:	10c00115 	stw	r3,4(r2)
   8dda8:	009764c0 	call	9764c <__malloc_unlock>
   8ddac:	80800204 	addi	r2,r16,8
   8ddb0:	003f6406 	br	8db44 <_malloc_r+0xb8>
   8ddb4:	9c000217 	ldw	r16,8(r19)
   8ddb8:	00bfff04 	movi	r2,-4
   8ddbc:	85400117 	ldw	r21,4(r16)
   8ddc0:	a8aa703a 	and	r21,r21,r2
   8ddc4:	ac400336 	bltu	r21,r17,8ddd4 <_malloc_r+0x348>
   8ddc8:	ac45c83a 	sub	r2,r21,r17
   8ddcc:	00c003c4 	movi	r3,15
   8ddd0:	18805316 	blt	r3,r2,8df20 <_malloc_r+0x494>
   8ddd4:	d5e7b217 	ldw	r23,-24888(gp)
   8ddd8:	d0e00517 	ldw	r3,-32748(gp)
   8dddc:	00bfffc4 	movi	r2,-1
   8dde0:	8579883a 	add	fp,r16,r21
   8dde4:	8def883a 	add	r23,r17,r23
   8dde8:	1880d226 	beq	r3,r2,8e134 <_malloc_r+0x6a8>
   8ddec:	bdc403c4 	addi	r23,r23,4111
   8ddf0:	00bc0004 	movi	r2,-4096
   8ddf4:	b8ae703a 	and	r23,r23,r2
   8ddf8:	9009883a 	mov	r4,r18
   8ddfc:	b80b883a 	mov	r5,r23
   8de00:	008e8840 	call	8e884 <_sbrk_r>
   8de04:	1029883a 	mov	r20,r2
   8de08:	00bfffc4 	movi	r2,-1
   8de0c:	a080d126 	beq	r20,r2,8e154 <_malloc_r+0x6c8>
   8de10:	a7009f36 	bltu	r20,fp,8e090 <_malloc_r+0x604>
   8de14:	058002b4 	movhi	r22,10
   8de18:	b5852104 	addi	r22,r22,5252
   8de1c:	b0800017 	ldw	r2,0(r22)
   8de20:	b885883a 	add	r2,r23,r2
   8de24:	b0800015 	stw	r2,0(r22)
   8de28:	e500cf26 	beq	fp,r20,8e168 <_malloc_r+0x6dc>
   8de2c:	d1200517 	ldw	r4,-32748(gp)
   8de30:	00ffffc4 	movi	r3,-1
   8de34:	20c0e026 	beq	r4,r3,8e1b8 <_malloc_r+0x72c>
   8de38:	a739c83a 	sub	fp,r20,fp
   8de3c:	1705883a 	add	r2,r2,fp
   8de40:	b0800015 	stw	r2,0(r22)
   8de44:	a08001cc 	andi	r2,r20,7
   8de48:	1000a526 	beq	r2,zero,8e0e0 <_malloc_r+0x654>
   8de4c:	a0a9c83a 	sub	r20,r20,r2
   8de50:	00c40204 	movi	r3,4104
   8de54:	a5000204 	addi	r20,r20,8
   8de58:	1885c83a 	sub	r2,r3,r2
   8de5c:	a5c7883a 	add	r3,r20,r23
   8de60:	18c3ffcc 	andi	r3,r3,4095
   8de64:	10efc83a 	sub	r23,r2,r3
   8de68:	9009883a 	mov	r4,r18
   8de6c:	b80b883a 	mov	r5,r23
   8de70:	008e8840 	call	8e884 <_sbrk_r>
   8de74:	00ffffc4 	movi	r3,-1
   8de78:	10c0cc26 	beq	r2,r3,8e1ac <_malloc_r+0x720>
   8de7c:	1505c83a 	sub	r2,r2,r20
   8de80:	b887883a 	add	r3,r23,r2
   8de84:	18c00054 	ori	r3,r3,1
   8de88:	b0800017 	ldw	r2,0(r22)
   8de8c:	9d000215 	stw	r20,8(r19)
   8de90:	a0c00115 	stw	r3,4(r20)
   8de94:	b885883a 	add	r2,r23,r2
   8de98:	b0800015 	stw	r2,0(r22)
   8de9c:	84c00e26 	beq	r16,r19,8ded8 <_malloc_r+0x44c>
   8dea0:	00c003c4 	movi	r3,15
   8dea4:	1d40902e 	bgeu	r3,r21,8e0e8 <_malloc_r+0x65c>
   8dea8:	ad7ffd04 	addi	r21,r21,-12
   8deac:	013ffe04 	movi	r4,-8
   8deb0:	a908703a 	and	r4,r21,r4
   8deb4:	810b883a 	add	r5,r16,r4
   8deb8:	01800144 	movi	r6,5
   8debc:	29800115 	stw	r6,4(r5)
   8dec0:	29800215 	stw	r6,8(r5)
   8dec4:	81400117 	ldw	r5,4(r16)
   8dec8:	2940004c 	andi	r5,r5,1
   8decc:	214ab03a 	or	r5,r4,r5
   8ded0:	81400115 	stw	r5,4(r16)
   8ded4:	1900ae36 	bltu	r3,r4,8e190 <_malloc_r+0x704>
   8ded8:	d0e7b117 	ldw	r3,-24892(gp)
   8dedc:	1880012e 	bgeu	r3,r2,8dee4 <_malloc_r+0x458>
   8dee0:	d0a7b115 	stw	r2,-24892(gp)
   8dee4:	d0e7b017 	ldw	r3,-24896(gp)
   8dee8:	9c000217 	ldw	r16,8(r19)
   8deec:	1880012e 	bgeu	r3,r2,8def4 <_malloc_r+0x468>
   8def0:	d0a7b015 	stw	r2,-24896(gp)
   8def4:	80c00117 	ldw	r3,4(r16)
   8def8:	00bfff04 	movi	r2,-4
   8defc:	1886703a 	and	r3,r3,r2
   8df00:	1c45c83a 	sub	r2,r3,r17
   8df04:	1c400236 	bltu	r3,r17,8df10 <_malloc_r+0x484>
   8df08:	00c003c4 	movi	r3,15
   8df0c:	18800416 	blt	r3,r2,8df20 <_malloc_r+0x494>
   8df10:	9009883a 	mov	r4,r18
   8df14:	009764c0 	call	9764c <__malloc_unlock>
   8df18:	0005883a 	mov	r2,zero
   8df1c:	003f0906 	br	8db44 <_malloc_r+0xb8>
   8df20:	88c00054 	ori	r3,r17,1
   8df24:	10800054 	ori	r2,r2,1
   8df28:	80c00115 	stw	r3,4(r16)
   8df2c:	8463883a 	add	r17,r16,r17
   8df30:	88800115 	stw	r2,4(r17)
   8df34:	9009883a 	mov	r4,r18
   8df38:	9c400215 	stw	r17,8(r19)
   8df3c:	009764c0 	call	9764c <__malloc_unlock>
   8df40:	80800204 	addi	r2,r16,8
   8df44:	003eff06 	br	8db44 <_malloc_r+0xb8>
   8df48:	00800504 	movi	r2,20
   8df4c:	1100492e 	bgeu	r2,r4,8e074 <_malloc_r+0x5e8>
   8df50:	00801504 	movi	r2,84
   8df54:	11005c36 	bltu	r2,r4,8e0c8 <_malloc_r+0x63c>
   8df58:	8808d33a 	srli	r4,r17,12
   8df5c:	21001b84 	addi	r4,r4,110
   8df60:	210b883a 	add	r5,r4,r4
   8df64:	003f1006 	br	8dba8 <_malloc_r+0x11c>
   8df68:	1006d27a 	srli	r3,r2,9
   8df6c:	01400104 	movi	r5,4
   8df70:	28c0432e 	bgeu	r5,r3,8e080 <_malloc_r+0x5f4>
   8df74:	01400504 	movi	r5,20
   8df78:	28c07036 	bltu	r5,r3,8e13c <_malloc_r+0x6b0>
   8df7c:	194016c4 	addi	r5,r3,91
   8df80:	294d883a 	add	r6,r5,r5
   8df84:	318d883a 	add	r6,r6,r6
   8df88:	318d883a 	add	r6,r6,r6
   8df8c:	998d883a 	add	r6,r19,r6
   8df90:	30c00217 	ldw	r3,8(r6)
   8df94:	01c002b4 	movhi	r7,10
   8df98:	39f77c04 	addi	r7,r7,-8720
   8df9c:	19805726 	beq	r3,r6,8e0fc <_malloc_r+0x670>
   8dfa0:	01ffff04 	movi	r7,-4
   8dfa4:	19400117 	ldw	r5,4(r3)
   8dfa8:	29ca703a 	and	r5,r5,r7
   8dfac:	1140022e 	bgeu	r2,r5,8dfb8 <_malloc_r+0x52c>
   8dfb0:	18c00217 	ldw	r3,8(r3)
   8dfb4:	30fffb1e 	bne	r6,r3,8dfa4 <_malloc_r+0x518>
   8dfb8:	19400317 	ldw	r5,12(r3)
   8dfbc:	98800117 	ldw	r2,4(r19)
   8dfc0:	81400315 	stw	r5,12(r16)
   8dfc4:	80c00215 	stw	r3,8(r16)
   8dfc8:	2c000215 	stw	r16,8(r5)
   8dfcc:	1c000315 	stw	r16,12(r3)
   8dfd0:	003f2b06 	br	8dc80 <_malloc_r+0x1f4>
   8dfd4:	8445883a 	add	r2,r16,r17
   8dfd8:	8c400054 	ori	r17,r17,1
   8dfdc:	18800515 	stw	r2,20(r3)
   8dfe0:	18800415 	stw	r2,16(r3)
   8dfe4:	29000054 	ori	r4,r5,1
   8dfe8:	1147883a 	add	r3,r2,r5
   8dfec:	84400115 	stw	r17,4(r16)
   8dff0:	11000115 	stw	r4,4(r2)
   8dff4:	12400315 	stw	r9,12(r2)
   8dff8:	12400215 	stw	r9,8(r2)
   8dffc:	19400015 	stw	r5,0(r3)
   8e000:	9009883a 	mov	r4,r18
   8e004:	009764c0 	call	9764c <__malloc_unlock>
   8e008:	80800204 	addi	r2,r16,8
   8e00c:	003ecd06 	br	8db44 <_malloc_r+0xb8>
   8e010:	18800117 	ldw	r2,4(r3)
   8e014:	003f1a06 	br	8dc80 <_malloc_r+0x1f4>
   8e018:	5ac00044 	addi	r11,r11,1
   8e01c:	588000cc 	andi	r2,r11,3
   8e020:	52800204 	addi	r10,r10,8
   8e024:	103f2e1e 	bne	r2,zero,8dce0 <_malloc_r+0x254>
   8e028:	20c000cc 	andi	r3,r4,3
   8e02c:	60bffe04 	addi	r2,r12,-8
   8e030:	18006f26 	beq	r3,zero,8e1f0 <_malloc_r+0x764>
   8e034:	63000017 	ldw	r12,0(r12)
   8e038:	213fffc4 	addi	r4,r4,-1
   8e03c:	60bffa26 	beq	r12,r2,8e028 <_malloc_r+0x59c>
   8e040:	98800117 	ldw	r2,4(r19)
   8e044:	294b883a 	add	r5,r5,r5
   8e048:	117f5a36 	bltu	r2,r5,8ddb4 <_malloc_r+0x328>
   8e04c:	283f5926 	beq	r5,zero,8ddb4 <_malloc_r+0x328>
   8e050:	1146703a 	and	r3,r2,r5
   8e054:	18001626 	beq	r3,zero,8e0b0 <_malloc_r+0x624>
   8e058:	5809883a 	mov	r4,r11
   8e05c:	003f1a06 	br	8dcc8 <_malloc_r+0x23c>
   8e060:	80800204 	addi	r2,r16,8
   8e064:	84000517 	ldw	r16,20(r16)
   8e068:	143ea81e 	bne	r2,r16,8db0c <_malloc_r+0x80>
   8e06c:	21000084 	addi	r4,r4,2
   8e070:	003ee306 	br	8dc00 <_malloc_r+0x174>
   8e074:	210016c4 	addi	r4,r4,91
   8e078:	210b883a 	add	r5,r4,r4
   8e07c:	003eca06 	br	8dba8 <_malloc_r+0x11c>
   8e080:	100ad1ba 	srli	r5,r2,6
   8e084:	29400e04 	addi	r5,r5,56
   8e088:	294d883a 	add	r6,r5,r5
   8e08c:	003fbd06 	br	8df84 <_malloc_r+0x4f8>
   8e090:	84ff6026 	beq	r16,r19,8de14 <_malloc_r+0x388>
   8e094:	008002b4 	movhi	r2,10
   8e098:	10b77c04 	addi	r2,r2,-8720
   8e09c:	14000217 	ldw	r16,8(r2)
   8e0a0:	00bfff04 	movi	r2,-4
   8e0a4:	80c00117 	ldw	r3,4(r16)
   8e0a8:	1886703a 	and	r3,r3,r2
   8e0ac:	003f9406 	br	8df00 <_malloc_r+0x474>
   8e0b0:	294b883a 	add	r5,r5,r5
   8e0b4:	1146703a 	and	r3,r2,r5
   8e0b8:	5ac00104 	addi	r11,r11,4
   8e0bc:	183ffc26 	beq	r3,zero,8e0b0 <_malloc_r+0x624>
   8e0c0:	5809883a 	mov	r4,r11
   8e0c4:	003f0006 	br	8dcc8 <_malloc_r+0x23c>
   8e0c8:	00805504 	movi	r2,340
   8e0cc:	11001336 	bltu	r2,r4,8e11c <_malloc_r+0x690>
   8e0d0:	8808d3fa 	srli	r4,r17,15
   8e0d4:	21001dc4 	addi	r4,r4,119
   8e0d8:	210b883a 	add	r5,r4,r4
   8e0dc:	003eb206 	br	8dba8 <_malloc_r+0x11c>
   8e0e0:	00840004 	movi	r2,4096
   8e0e4:	003f5d06 	br	8de5c <_malloc_r+0x3d0>
   8e0e8:	00800044 	movi	r2,1
   8e0ec:	a0800115 	stw	r2,4(r20)
   8e0f0:	a021883a 	mov	r16,r20
   8e0f4:	0007883a 	mov	r3,zero
   8e0f8:	003f8106 	br	8df00 <_malloc_r+0x474>
   8e0fc:	280bd0ba 	srai	r5,r5,2
   8e100:	01800044 	movi	r6,1
   8e104:	38800117 	ldw	r2,4(r7)
   8e108:	314c983a 	sll	r6,r6,r5
   8e10c:	180b883a 	mov	r5,r3
   8e110:	3084b03a 	or	r2,r6,r2
   8e114:	38800115 	stw	r2,4(r7)
   8e118:	003fa906 	br	8dfc0 <_malloc_r+0x534>
   8e11c:	00815504 	movi	r2,1364
   8e120:	11001836 	bltu	r2,r4,8e184 <_malloc_r+0x6f8>
   8e124:	8808d4ba 	srli	r4,r17,18
   8e128:	21001f04 	addi	r4,r4,124
   8e12c:	210b883a 	add	r5,r4,r4
   8e130:	003e9d06 	br	8dba8 <_malloc_r+0x11c>
   8e134:	bdc00404 	addi	r23,r23,16
   8e138:	003f2f06 	br	8ddf8 <_malloc_r+0x36c>
   8e13c:	01401504 	movi	r5,84
   8e140:	28c01f36 	bltu	r5,r3,8e1c0 <_malloc_r+0x734>
   8e144:	100ad33a 	srli	r5,r2,12
   8e148:	29401b84 	addi	r5,r5,110
   8e14c:	294d883a 	add	r6,r5,r5
   8e150:	003f8c06 	br	8df84 <_malloc_r+0x4f8>
   8e154:	9c000217 	ldw	r16,8(r19)
   8e158:	00bfff04 	movi	r2,-4
   8e15c:	80c00117 	ldw	r3,4(r16)
   8e160:	1886703a 	and	r3,r3,r2
   8e164:	003f6606 	br	8df00 <_malloc_r+0x474>
   8e168:	e0c3ffcc 	andi	r3,fp,4095
   8e16c:	183f2f1e 	bne	r3,zero,8de2c <_malloc_r+0x3a0>
   8e170:	98c00217 	ldw	r3,8(r19)
   8e174:	bd49883a 	add	r4,r23,r21
   8e178:	21000054 	ori	r4,r4,1
   8e17c:	19000115 	stw	r4,4(r3)
   8e180:	003f5506 	br	8ded8 <_malloc_r+0x44c>
   8e184:	01403f04 	movi	r5,252
   8e188:	01001f84 	movi	r4,126
   8e18c:	003e8606 	br	8dba8 <_malloc_r+0x11c>
   8e190:	9009883a 	mov	r4,r18
   8e194:	81400204 	addi	r5,r16,8
   8e198:	0092b700 	call	92b70 <_free_r>
   8e19c:	008002b4 	movhi	r2,10
   8e1a0:	10852104 	addi	r2,r2,5252
   8e1a4:	10800017 	ldw	r2,0(r2)
   8e1a8:	003f4b06 	br	8ded8 <_malloc_r+0x44c>
   8e1ac:	00c00044 	movi	r3,1
   8e1b0:	002f883a 	mov	r23,zero
   8e1b4:	003f3406 	br	8de88 <_malloc_r+0x3fc>
   8e1b8:	d5200515 	stw	r20,-32748(gp)
   8e1bc:	003f2106 	br	8de44 <_malloc_r+0x3b8>
   8e1c0:	01405504 	movi	r5,340
   8e1c4:	28c00436 	bltu	r5,r3,8e1d8 <_malloc_r+0x74c>
   8e1c8:	100ad3fa 	srli	r5,r2,15
   8e1cc:	29401dc4 	addi	r5,r5,119
   8e1d0:	294d883a 	add	r6,r5,r5
   8e1d4:	003f6b06 	br	8df84 <_malloc_r+0x4f8>
   8e1d8:	01415504 	movi	r5,1364
   8e1dc:	28c00936 	bltu	r5,r3,8e204 <_malloc_r+0x778>
   8e1e0:	100ad4ba 	srli	r5,r2,18
   8e1e4:	29401f04 	addi	r5,r5,124
   8e1e8:	294d883a 	add	r6,r5,r5
   8e1ec:	003f6506 	br	8df84 <_malloc_r+0x4f8>
   8e1f0:	98800117 	ldw	r2,4(r19)
   8e1f4:	0146303a 	nor	r3,zero,r5
   8e1f8:	1884703a 	and	r2,r3,r2
   8e1fc:	98800115 	stw	r2,4(r19)
   8e200:	003f9006 	br	8e044 <_malloc_r+0x5b8>
   8e204:	01803f04 	movi	r6,252
   8e208:	01401f84 	movi	r5,126
   8e20c:	003f5d06 	br	8df84 <_malloc_r+0x4f8>

0008e210 <memchr>:
   8e210:	008000c4 	movi	r2,3
   8e214:	29403fcc 	andi	r5,r5,255
   8e218:	1180282e 	bgeu	r2,r6,8e2bc <memchr+0xac>
   8e21c:	2086703a 	and	r3,r4,r2
   8e220:	1800351e 	bne	r3,zero,8e2f8 <memchr+0xe8>
   8e224:	2816923a 	slli	r11,r5,8
   8e228:	2093883a 	add	r9,r4,r2
   8e22c:	22000084 	addi	r8,r4,2
   8e230:	5957883a 	add	r11,r11,r5
   8e234:	5816923a 	slli	r11,r11,8
   8e238:	20c00044 	addi	r3,r4,1
   8e23c:	037fbff4 	movhi	r13,65279
   8e240:	6b7fbfc4 	addi	r13,r13,-257
   8e244:	5957883a 	add	r11,r11,r5
   8e248:	5816923a 	slli	r11,r11,8
   8e24c:	03202074 	movhi	r12,32897
   8e250:	63202004 	addi	r12,r12,-32640
   8e254:	101d883a 	mov	r14,r2
   8e258:	5957883a 	add	r11,r11,r5
   8e25c:	21c00017 	ldw	r7,0(r4)
   8e260:	31bfff04 	addi	r6,r6,-4
   8e264:	1805883a 	mov	r2,r3
   8e268:	3acef03a 	xor	r7,r7,r11
   8e26c:	3b55883a 	add	r10,r7,r13
   8e270:	01ce303a 	nor	r7,zero,r7
   8e274:	51ce703a 	and	r7,r10,r7
   8e278:	3b0e703a 	and	r7,r7,r12
   8e27c:	38000a26 	beq	r7,zero,8e2a8 <memchr+0x98>
   8e280:	21c00003 	ldbu	r7,0(r4)
   8e284:	39401e26 	beq	r7,r5,8e300 <memchr+0xf0>
   8e288:	19c00003 	ldbu	r7,0(r3)
   8e28c:	39401926 	beq	r7,r5,8e2f4 <memchr+0xe4>
   8e290:	41c00003 	ldbu	r7,0(r8)
   8e294:	4005883a 	mov	r2,r8
   8e298:	39401626 	beq	r7,r5,8e2f4 <memchr+0xe4>
   8e29c:	49c00003 	ldbu	r7,0(r9)
   8e2a0:	4805883a 	mov	r2,r9
   8e2a4:	39401326 	beq	r7,r5,8e2f4 <memchr+0xe4>
   8e2a8:	21000104 	addi	r4,r4,4
   8e2ac:	4a400104 	addi	r9,r9,4
   8e2b0:	42000104 	addi	r8,r8,4
   8e2b4:	18c00104 	addi	r3,r3,4
   8e2b8:	71bfe836 	bltu	r14,r6,8e25c <memchr+0x4c>
   8e2bc:	2005883a 	mov	r2,r4
   8e2c0:	30000a26 	beq	r6,zero,8e2ec <memchr+0xdc>
   8e2c4:	10c00003 	ldbu	r3,0(r2)
   8e2c8:	19400a26 	beq	r3,r5,8e2f4 <memchr+0xe4>
   8e2cc:	10c00044 	addi	r3,r2,1
   8e2d0:	118d883a 	add	r6,r2,r6
   8e2d4:	00000306 	br	8e2e4 <memchr+0xd4>
   8e2d8:	11000003 	ldbu	r4,0(r2)
   8e2dc:	18c00044 	addi	r3,r3,1
   8e2e0:	21400426 	beq	r4,r5,8e2f4 <memchr+0xe4>
   8e2e4:	1805883a 	mov	r2,r3
   8e2e8:	19bffb1e 	bne	r3,r6,8e2d8 <memchr+0xc8>
   8e2ec:	0005883a 	mov	r2,zero
   8e2f0:	f800283a 	ret
   8e2f4:	f800283a 	ret
   8e2f8:	2005883a 	mov	r2,r4
   8e2fc:	003ff106 	br	8e2c4 <memchr+0xb4>
   8e300:	2005883a 	mov	r2,r4
   8e304:	f800283a 	ret

0008e308 <memcmp>:
   8e308:	01c000c4 	movi	r7,3
   8e30c:	3980192e 	bgeu	r7,r6,8e374 <memcmp+0x6c>
   8e310:	2904b03a 	or	r2,r5,r4
   8e314:	11c4703a 	and	r2,r2,r7
   8e318:	10000f26 	beq	r2,zero,8e358 <memcmp+0x50>
   8e31c:	20c00003 	ldbu	r3,0(r4)
   8e320:	28800003 	ldbu	r2,0(r5)
   8e324:	1880151e 	bne	r3,r2,8e37c <memcmp+0x74>
   8e328:	31bfff84 	addi	r6,r6,-2
   8e32c:	01ffffc4 	movi	r7,-1
   8e330:	00000406 	br	8e344 <memcmp+0x3c>
   8e334:	20c00003 	ldbu	r3,0(r4)
   8e338:	28800003 	ldbu	r2,0(r5)
   8e33c:	31bfffc4 	addi	r6,r6,-1
   8e340:	18800e1e 	bne	r3,r2,8e37c <memcmp+0x74>
   8e344:	21000044 	addi	r4,r4,1
   8e348:	29400044 	addi	r5,r5,1
   8e34c:	31fff91e 	bne	r6,r7,8e334 <memcmp+0x2c>
   8e350:	0005883a 	mov	r2,zero
   8e354:	f800283a 	ret
   8e358:	20c00017 	ldw	r3,0(r4)
   8e35c:	28800017 	ldw	r2,0(r5)
   8e360:	1880041e 	bne	r3,r2,8e374 <memcmp+0x6c>
   8e364:	31bfff04 	addi	r6,r6,-4
   8e368:	21000104 	addi	r4,r4,4
   8e36c:	29400104 	addi	r5,r5,4
   8e370:	39bff936 	bltu	r7,r6,8e358 <memcmp+0x50>
   8e374:	303fe91e 	bne	r6,zero,8e31c <memcmp+0x14>
   8e378:	003ff506 	br	8e350 <memcmp+0x48>
   8e37c:	1885c83a 	sub	r2,r3,r2
   8e380:	f800283a 	ret

0008e384 <memcpy>:
   8e384:	00c003c4 	movi	r3,15
   8e388:	2005883a 	mov	r2,r4
   8e38c:	3009883a 	mov	r4,r6
   8e390:	1980032e 	bgeu	r3,r6,8e3a0 <memcpy+0x1c>
   8e394:	2886b03a 	or	r3,r5,r2
   8e398:	18c000cc 	andi	r3,r3,3
   8e39c:	18000926 	beq	r3,zero,8e3c4 <memcpy+0x40>
   8e3a0:	1007883a 	mov	r3,r2
   8e3a4:	290f883a 	add	r7,r5,r4
   8e3a8:	20000526 	beq	r4,zero,8e3c0 <memcpy+0x3c>
   8e3ac:	29800003 	ldbu	r6,0(r5)
   8e3b0:	18c00044 	addi	r3,r3,1
   8e3b4:	29400044 	addi	r5,r5,1
   8e3b8:	19bfffc5 	stb	r6,-1(r3)
   8e3bc:	29fffb1e 	bne	r5,r7,8e3ac <memcpy+0x28>
   8e3c0:	f800283a 	ret
   8e3c4:	327ffc04 	addi	r9,r6,-16
   8e3c8:	4812d13a 	srli	r9,r9,4
   8e3cc:	11000404 	addi	r4,r2,16
   8e3d0:	1007883a 	mov	r3,r2
   8e3d4:	4810913a 	slli	r8,r9,4
   8e3d8:	280f883a 	mov	r7,r5
   8e3dc:	2209883a 	add	r4,r4,r8
   8e3e0:	3a000017 	ldw	r8,0(r7)
   8e3e4:	18c00404 	addi	r3,r3,16
   8e3e8:	39c00404 	addi	r7,r7,16
   8e3ec:	1a3ffc15 	stw	r8,-16(r3)
   8e3f0:	3a3ffd17 	ldw	r8,-12(r7)
   8e3f4:	1a3ffd15 	stw	r8,-12(r3)
   8e3f8:	3a3ffe17 	ldw	r8,-8(r7)
   8e3fc:	1a3ffe15 	stw	r8,-8(r3)
   8e400:	3a3fff17 	ldw	r8,-4(r7)
   8e404:	1a3fff15 	stw	r8,-4(r3)
   8e408:	193ff51e 	bne	r3,r4,8e3e0 <memcpy+0x5c>
   8e40c:	49c00044 	addi	r7,r9,1
   8e410:	380e913a 	slli	r7,r7,4
   8e414:	310003cc 	andi	r4,r6,15
   8e418:	018000c4 	movi	r6,3
   8e41c:	11c7883a 	add	r3,r2,r7
   8e420:	29cb883a 	add	r5,r5,r7
   8e424:	313fdf2e 	bgeu	r6,r4,8e3a4 <memcpy+0x20>
   8e428:	213fff04 	addi	r4,r4,-4
   8e42c:	2014d0ba 	srli	r10,r4,2
   8e430:	1a400104 	addi	r9,r3,4
   8e434:	180d883a 	mov	r6,r3
   8e438:	528f883a 	add	r7,r10,r10
   8e43c:	39cf883a 	add	r7,r7,r7
   8e440:	49d3883a 	add	r9,r9,r7
   8e444:	280f883a 	mov	r7,r5
   8e448:	3a000017 	ldw	r8,0(r7)
   8e44c:	31800104 	addi	r6,r6,4
   8e450:	39c00104 	addi	r7,r7,4
   8e454:	323fff15 	stw	r8,-4(r6)
   8e458:	327ffb1e 	bne	r6,r9,8e448 <memcpy+0xc4>
   8e45c:	51800044 	addi	r6,r10,1
   8e460:	52bfff24 	muli	r10,r10,-4
   8e464:	318d883a 	add	r6,r6,r6
   8e468:	318d883a 	add	r6,r6,r6
   8e46c:	5109883a 	add	r4,r10,r4
   8e470:	298b883a 	add	r5,r5,r6
   8e474:	1987883a 	add	r3,r3,r6
   8e478:	003fca06 	br	8e3a4 <memcpy+0x20>

0008e47c <memset>:
   8e47c:	00c000c4 	movi	r3,3
   8e480:	2005883a 	mov	r2,r4
   8e484:	29403fcc 	andi	r5,r5,255
   8e488:	19802d2e 	bgeu	r3,r6,8e540 <memset+0xc4>
   8e48c:	20c6703a 	and	r3,r4,r3
   8e490:	18002e1e 	bne	r3,zero,8e54c <memset+0xd0>
   8e494:	2806923a 	slli	r3,r5,8
   8e498:	010003c4 	movi	r4,15
   8e49c:	3011883a 	mov	r8,r6
   8e4a0:	1946b03a 	or	r3,r3,r5
   8e4a4:	180e943a 	slli	r7,r3,16
   8e4a8:	38ceb03a 	or	r7,r7,r3
   8e4ac:	1007883a 	mov	r3,r2
   8e4b0:	21800f2e 	bgeu	r4,r6,8e4f0 <memset+0x74>
   8e4b4:	19c00015 	stw	r7,0(r3)
   8e4b8:	19c00115 	stw	r7,4(r3)
   8e4bc:	19c00215 	stw	r7,8(r3)
   8e4c0:	19c00315 	stw	r7,12(r3)
   8e4c4:	423ffc04 	addi	r8,r8,-16
   8e4c8:	18c00404 	addi	r3,r3,16
   8e4cc:	223ff936 	bltu	r4,r8,8e4b4 <memset+0x38>
   8e4d0:	30fffc04 	addi	r3,r6,-16
   8e4d4:	1806d13a 	srli	r3,r3,4
   8e4d8:	318003cc 	andi	r6,r6,15
   8e4dc:	010000c4 	movi	r4,3
   8e4e0:	18c00044 	addi	r3,r3,1
   8e4e4:	1806913a 	slli	r3,r3,4
   8e4e8:	10c7883a 	add	r3,r2,r3
   8e4ec:	21800e2e 	bgeu	r4,r6,8e528 <memset+0xac>
   8e4f0:	1813883a 	mov	r9,r3
   8e4f4:	3011883a 	mov	r8,r6
   8e4f8:	010000c4 	movi	r4,3
   8e4fc:	49c00015 	stw	r7,0(r9)
   8e500:	423fff04 	addi	r8,r8,-4
   8e504:	4a400104 	addi	r9,r9,4
   8e508:	223ffc36 	bltu	r4,r8,8e4fc <memset+0x80>
   8e50c:	313fff04 	addi	r4,r6,-4
   8e510:	2008d0ba 	srli	r4,r4,2
   8e514:	318000cc 	andi	r6,r6,3
   8e518:	21000044 	addi	r4,r4,1
   8e51c:	2109883a 	add	r4,r4,r4
   8e520:	2109883a 	add	r4,r4,r4
   8e524:	1907883a 	add	r3,r3,r4
   8e528:	30000a26 	beq	r6,zero,8e554 <memset+0xd8>
   8e52c:	198d883a 	add	r6,r3,r6
   8e530:	19400005 	stb	r5,0(r3)
   8e534:	18c00044 	addi	r3,r3,1
   8e538:	19bffd1e 	bne	r3,r6,8e530 <memset+0xb4>
   8e53c:	f800283a 	ret
   8e540:	2007883a 	mov	r3,r4
   8e544:	303ff91e 	bne	r6,zero,8e52c <memset+0xb0>
   8e548:	00000206 	br	8e554 <memset+0xd8>
   8e54c:	2007883a 	mov	r3,r4
   8e550:	003ff606 	br	8e52c <memset+0xb0>
   8e554:	f800283a 	ret

0008e558 <_printf_r>:
   8e558:	defffd04 	addi	sp,sp,-12
   8e55c:	dfc00015 	stw	ra,0(sp)
   8e560:	d9800115 	stw	r6,4(sp)
   8e564:	d9c00215 	stw	r7,8(sp)
   8e568:	280d883a 	mov	r6,r5
   8e56c:	21400217 	ldw	r5,8(r4)
   8e570:	d9c00104 	addi	r7,sp,4
   8e574:	008ee480 	call	8ee48 <___vfprintf_internal_r>
   8e578:	dfc00017 	ldw	ra,0(sp)
   8e57c:	dec00304 	addi	sp,sp,12
   8e580:	f800283a 	ret

0008e584 <printf>:
   8e584:	defffc04 	addi	sp,sp,-16
   8e588:	dfc00015 	stw	ra,0(sp)
   8e58c:	d9400115 	stw	r5,4(sp)
   8e590:	d9800215 	stw	r6,8(sp)
   8e594:	d9c00315 	stw	r7,12(sp)
   8e598:	008002b4 	movhi	r2,10
   8e59c:	10bd6704 	addi	r2,r2,-2660
   8e5a0:	10800017 	ldw	r2,0(r2)
   8e5a4:	200b883a 	mov	r5,r4
   8e5a8:	d9800104 	addi	r6,sp,4
   8e5ac:	11000217 	ldw	r4,8(r2)
   8e5b0:	0090c400 	call	90c40 <__vfprintf_internal>
   8e5b4:	dfc00017 	ldw	ra,0(sp)
   8e5b8:	dec00404 	addi	sp,sp,16
   8e5bc:	f800283a 	ret

0008e5c0 <_putchar_r>:
   8e5c0:	21800217 	ldw	r6,8(r4)
   8e5c4:	00946e41 	jmpi	946e4 <_putc_r>

0008e5c8 <putchar>:
   8e5c8:	008002b4 	movhi	r2,10
   8e5cc:	10bd6704 	addi	r2,r2,-2660
   8e5d0:	10800017 	ldw	r2,0(r2)
   8e5d4:	200b883a 	mov	r5,r4
   8e5d8:	11800217 	ldw	r6,8(r2)
   8e5dc:	1009883a 	mov	r4,r2
   8e5e0:	00946e41 	jmpi	946e4 <_putc_r>

0008e5e4 <_puts_r>:
   8e5e4:	defff604 	addi	sp,sp,-40
   8e5e8:	dc400815 	stw	r17,32(sp)
   8e5ec:	2023883a 	mov	r17,r4
   8e5f0:	2809883a 	mov	r4,r5
   8e5f4:	dc000715 	stw	r16,28(sp)
   8e5f8:	dfc00915 	stw	ra,36(sp)
   8e5fc:	2821883a 	mov	r16,r5
   8e600:	008ea280 	call	8ea28 <strlen>
   8e604:	10c00044 	addi	r3,r2,1
   8e608:	d8800115 	stw	r2,4(sp)
   8e60c:	89400217 	ldw	r5,8(r17)
   8e610:	008002b4 	movhi	r2,10
   8e614:	10b4b004 	addi	r2,r2,-11584
   8e618:	d8800215 	stw	r2,8(sp)
   8e61c:	00800044 	movi	r2,1
   8e620:	d8800315 	stw	r2,12(sp)
   8e624:	8809883a 	mov	r4,r17
   8e628:	00800084 	movi	r2,2
   8e62c:	d9800404 	addi	r6,sp,16
   8e630:	dc000015 	stw	r16,0(sp)
   8e634:	d8c00615 	stw	r3,24(sp)
   8e638:	dec00415 	stw	sp,16(sp)
   8e63c:	d8800515 	stw	r2,20(sp)
   8e640:	0092e400 	call	92e40 <__sfvwrite_r>
   8e644:	1000061e 	bne	r2,zero,8e660 <_puts_r+0x7c>
   8e648:	00800284 	movi	r2,10
   8e64c:	dfc00917 	ldw	ra,36(sp)
   8e650:	dc400817 	ldw	r17,32(sp)
   8e654:	dc000717 	ldw	r16,28(sp)
   8e658:	dec00a04 	addi	sp,sp,40
   8e65c:	f800283a 	ret
   8e660:	00bfffc4 	movi	r2,-1
   8e664:	003ff906 	br	8e64c <_puts_r+0x68>

0008e668 <puts>:
   8e668:	008002b4 	movhi	r2,10
   8e66c:	10bd6704 	addi	r2,r2,-2660
   8e670:	200b883a 	mov	r5,r4
   8e674:	11000017 	ldw	r4,0(r2)
   8e678:	008e5e41 	jmpi	8e5e4 <_puts_r>

0008e67c <lflush>:
   8e67c:	20c0030b 	ldhu	r3,12(r4)
   8e680:	00800244 	movi	r2,9
   8e684:	18c0024c 	andi	r3,r3,9
   8e688:	18800226 	beq	r3,r2,8e694 <lflush+0x18>
   8e68c:	0005883a 	mov	r2,zero
   8e690:	f800283a 	ret
   8e694:	0092a041 	jmpi	92a04 <fflush>

0008e698 <__srefill_r>:
   8e698:	defffd04 	addi	sp,sp,-12
   8e69c:	dc400115 	stw	r17,4(sp)
   8e6a0:	dc000015 	stw	r16,0(sp)
   8e6a4:	dfc00215 	stw	ra,8(sp)
   8e6a8:	2023883a 	mov	r17,r4
   8e6ac:	2821883a 	mov	r16,r5
   8e6b0:	20000226 	beq	r4,zero,8e6bc <__srefill_r+0x24>
   8e6b4:	20800e17 	ldw	r2,56(r4)
   8e6b8:	10004426 	beq	r2,zero,8e7cc <__srefill_r+0x134>
   8e6bc:	8080030b 	ldhu	r2,12(r16)
   8e6c0:	80000115 	stw	zero,4(r16)
   8e6c4:	10c0080c 	andi	r3,r2,32
   8e6c8:	18ffffcc 	andi	r3,r3,65535
   8e6cc:	18e0001c 	xori	r3,r3,32768
   8e6d0:	18e00004 	addi	r3,r3,-32768
   8e6d4:	1800371e 	bne	r3,zero,8e7b4 <__srefill_r+0x11c>
   8e6d8:	10c0010c 	andi	r3,r2,4
   8e6dc:	18ffffcc 	andi	r3,r3,65535
   8e6e0:	18e0001c 	xori	r3,r3,32768
   8e6e4:	18e00004 	addi	r3,r3,-32768
   8e6e8:	18002226 	beq	r3,zero,8e774 <__srefill_r+0xdc>
   8e6ec:	81400c17 	ldw	r5,48(r16)
   8e6f0:	28000826 	beq	r5,zero,8e714 <__srefill_r+0x7c>
   8e6f4:	80801004 	addi	r2,r16,64
   8e6f8:	28800226 	beq	r5,r2,8e704 <__srefill_r+0x6c>
   8e6fc:	8809883a 	mov	r4,r17
   8e700:	0092b700 	call	92b70 <_free_r>
   8e704:	80800f17 	ldw	r2,60(r16)
   8e708:	80000c15 	stw	zero,48(r16)
   8e70c:	80800115 	stw	r2,4(r16)
   8e710:	1000401e 	bne	r2,zero,8e814 <__srefill_r+0x17c>
   8e714:	80800417 	ldw	r2,16(r16)
   8e718:	10005026 	beq	r2,zero,8e85c <__srefill_r+0x1c4>
   8e71c:	8080030b 	ldhu	r2,12(r16)
   8e720:	108000cc 	andi	r2,r2,3
   8e724:	10002b1e 	bne	r2,zero,8e7d4 <__srefill_r+0x13c>
   8e728:	81800417 	ldw	r6,16(r16)
   8e72c:	80800817 	ldw	r2,32(r16)
   8e730:	81400717 	ldw	r5,28(r16)
   8e734:	81c00517 	ldw	r7,20(r16)
   8e738:	8809883a 	mov	r4,r17
   8e73c:	81800015 	stw	r6,0(r16)
   8e740:	103ee83a 	callr	r2
   8e744:	8100030b 	ldhu	r4,12(r16)
   8e748:	00f7ffc4 	movi	r3,-8193
   8e74c:	80800115 	stw	r2,4(r16)
   8e750:	20c6703a 	and	r3,r4,r3
   8e754:	80c0030d 	sth	r3,12(r16)
   8e758:	0080130e 	bge	zero,r2,8e7a8 <__srefill_r+0x110>
   8e75c:	0005883a 	mov	r2,zero
   8e760:	dfc00217 	ldw	ra,8(sp)
   8e764:	dc400117 	ldw	r17,4(sp)
   8e768:	dc000017 	ldw	r16,0(sp)
   8e76c:	dec00304 	addi	sp,sp,12
   8e770:	f800283a 	ret
   8e774:	10c0040c 	andi	r3,r2,16
   8e778:	18ffffcc 	andi	r3,r3,65535
   8e77c:	18e0001c 	xori	r3,r3,32768
   8e780:	18e00004 	addi	r3,r3,-32768
   8e784:	18003926 	beq	r3,zero,8e86c <__srefill_r+0x1d4>
   8e788:	10c0020c 	andi	r3,r2,8
   8e78c:	18ffffcc 	andi	r3,r3,65535
   8e790:	18e0001c 	xori	r3,r3,32768
   8e794:	18e00004 	addi	r3,r3,-32768
   8e798:	1800261e 	bne	r3,zero,8e834 <__srefill_r+0x19c>
   8e79c:	10800114 	ori	r2,r2,4
   8e7a0:	8080030d 	sth	r2,12(r16)
   8e7a4:	003fdb06 	br	8e714 <__srefill_r+0x7c>
   8e7a8:	1000111e 	bne	r2,zero,8e7f0 <__srefill_r+0x158>
   8e7ac:	18c00814 	ori	r3,r3,32
   8e7b0:	80c0030d 	sth	r3,12(r16)
   8e7b4:	00bfffc4 	movi	r2,-1
   8e7b8:	dfc00217 	ldw	ra,8(sp)
   8e7bc:	dc400117 	ldw	r17,4(sp)
   8e7c0:	dc000017 	ldw	r16,0(sp)
   8e7c4:	dec00304 	addi	sp,sp,12
   8e7c8:	f800283a 	ret
   8e7cc:	008d6e40 	call	8d6e4 <__sinit>
   8e7d0:	003fba06 	br	8e6bc <__srefill_r+0x24>
   8e7d4:	008002b4 	movhi	r2,10
   8e7d8:	10bd6604 	addi	r2,r2,-2664
   8e7dc:	11000017 	ldw	r4,0(r2)
   8e7e0:	01400274 	movhi	r5,9
   8e7e4:	29799f04 	addi	r5,r5,-6532
   8e7e8:	008d92c0 	call	8d92c <_fwalk>
   8e7ec:	003fce06 	br	8e728 <__srefill_r+0x90>
   8e7f0:	18c01014 	ori	r3,r3,64
   8e7f4:	00bfffc4 	movi	r2,-1
   8e7f8:	80000115 	stw	zero,4(r16)
   8e7fc:	80c0030d 	sth	r3,12(r16)
   8e800:	dfc00217 	ldw	ra,8(sp)
   8e804:	dc400117 	ldw	r17,4(sp)
   8e808:	dc000017 	ldw	r16,0(sp)
   8e80c:	dec00304 	addi	sp,sp,12
   8e810:	f800283a 	ret
   8e814:	80c00e17 	ldw	r3,56(r16)
   8e818:	0005883a 	mov	r2,zero
   8e81c:	80c00015 	stw	r3,0(r16)
   8e820:	dfc00217 	ldw	ra,8(sp)
   8e824:	dc400117 	ldw	r17,4(sp)
   8e828:	dc000017 	ldw	r16,0(sp)
   8e82c:	dec00304 	addi	sp,sp,12
   8e830:	f800283a 	ret
   8e834:	8809883a 	mov	r4,r17
   8e838:	800b883a 	mov	r5,r16
   8e83c:	009281c0 	call	9281c <_fflush_r>
   8e840:	103fdc1e 	bne	r2,zero,8e7b4 <__srefill_r+0x11c>
   8e844:	8080030b 	ldhu	r2,12(r16)
   8e848:	00fffdc4 	movi	r3,-9
   8e84c:	80000215 	stw	zero,8(r16)
   8e850:	1884703a 	and	r2,r3,r2
   8e854:	80000615 	stw	zero,24(r16)
   8e858:	003fd006 	br	8e79c <__srefill_r+0x104>
   8e85c:	8809883a 	mov	r4,r17
   8e860:	800b883a 	mov	r5,r16
   8e864:	009346c0 	call	9346c <__smakebuf_r>
   8e868:	003fac06 	br	8e71c <__srefill_r+0x84>
   8e86c:	00c00244 	movi	r3,9
   8e870:	10801014 	ori	r2,r2,64
   8e874:	88c00015 	stw	r3,0(r17)
   8e878:	8080030d 	sth	r2,12(r16)
   8e87c:	00bfffc4 	movi	r2,-1
   8e880:	003fb706 	br	8e760 <__srefill_r+0xc8>

0008e884 <_sbrk_r>:
   8e884:	defffd04 	addi	sp,sp,-12
   8e888:	dc400115 	stw	r17,4(sp)
   8e88c:	dc000015 	stw	r16,0(sp)
   8e890:	2023883a 	mov	r17,r4
   8e894:	040002b4 	movhi	r16,10
   8e898:	84051604 	addi	r16,r16,5208
   8e89c:	2809883a 	mov	r4,r5
   8e8a0:	dfc00215 	stw	ra,8(sp)
   8e8a4:	80000015 	stw	zero,0(r16)
   8e8a8:	00978140 	call	97814 <sbrk>
   8e8ac:	00ffffc4 	movi	r3,-1
   8e8b0:	10c00526 	beq	r2,r3,8e8c8 <_sbrk_r+0x44>
   8e8b4:	dfc00217 	ldw	ra,8(sp)
   8e8b8:	dc400117 	ldw	r17,4(sp)
   8e8bc:	dc000017 	ldw	r16,0(sp)
   8e8c0:	dec00304 	addi	sp,sp,12
   8e8c4:	f800283a 	ret
   8e8c8:	80c00017 	ldw	r3,0(r16)
   8e8cc:	183ff926 	beq	r3,zero,8e8b4 <_sbrk_r+0x30>
   8e8d0:	88c00015 	stw	r3,0(r17)
   8e8d4:	dfc00217 	ldw	ra,8(sp)
   8e8d8:	dc400117 	ldw	r17,4(sp)
   8e8dc:	dc000017 	ldw	r16,0(sp)
   8e8e0:	dec00304 	addi	sp,sp,12
   8e8e4:	f800283a 	ret

0008e8e8 <__sread>:
   8e8e8:	defffe04 	addi	sp,sp,-8
   8e8ec:	dc000015 	stw	r16,0(sp)
   8e8f0:	2821883a 	mov	r16,r5
   8e8f4:	2940038f 	ldh	r5,14(r5)
   8e8f8:	dfc00115 	stw	ra,4(sp)
   8e8fc:	00948900 	call	94890 <_read_r>
   8e900:	10000716 	blt	r2,zero,8e920 <__sread+0x38>
   8e904:	80c01417 	ldw	r3,80(r16)
   8e908:	1887883a 	add	r3,r3,r2
   8e90c:	80c01415 	stw	r3,80(r16)
   8e910:	dfc00117 	ldw	ra,4(sp)
   8e914:	dc000017 	ldw	r16,0(sp)
   8e918:	dec00204 	addi	sp,sp,8
   8e91c:	f800283a 	ret
   8e920:	80c0030b 	ldhu	r3,12(r16)
   8e924:	18fbffcc 	andi	r3,r3,61439
   8e928:	80c0030d 	sth	r3,12(r16)
   8e92c:	dfc00117 	ldw	ra,4(sp)
   8e930:	dc000017 	ldw	r16,0(sp)
   8e934:	dec00204 	addi	sp,sp,8
   8e938:	f800283a 	ret

0008e93c <__swrite>:
   8e93c:	2880030b 	ldhu	r2,12(r5)
   8e940:	defffb04 	addi	sp,sp,-20
   8e944:	dcc00315 	stw	r19,12(sp)
   8e948:	10c0400c 	andi	r3,r2,256
   8e94c:	18ffffcc 	andi	r3,r3,65535
   8e950:	18e0001c 	xori	r3,r3,32768
   8e954:	dc800215 	stw	r18,8(sp)
   8e958:	dc400115 	stw	r17,4(sp)
   8e95c:	dc000015 	stw	r16,0(sp)
   8e960:	dfc00415 	stw	ra,16(sp)
   8e964:	18e00004 	addi	r3,r3,-32768
   8e968:	2821883a 	mov	r16,r5
   8e96c:	2027883a 	mov	r19,r4
   8e970:	3025883a 	mov	r18,r6
   8e974:	3823883a 	mov	r17,r7
   8e978:	18000526 	beq	r3,zero,8e990 <__swrite+0x54>
   8e97c:	2940038f 	ldh	r5,14(r5)
   8e980:	000d883a 	mov	r6,zero
   8e984:	01c00084 	movi	r7,2
   8e988:	00934000 	call	93400 <_lseek_r>
   8e98c:	8080030b 	ldhu	r2,12(r16)
   8e990:	8140038f 	ldh	r5,14(r16)
   8e994:	10bbffcc 	andi	r2,r2,61439
   8e998:	9809883a 	mov	r4,r19
   8e99c:	900d883a 	mov	r6,r18
   8e9a0:	880f883a 	mov	r7,r17
   8e9a4:	8080030d 	sth	r2,12(r16)
   8e9a8:	dfc00417 	ldw	ra,16(sp)
   8e9ac:	dcc00317 	ldw	r19,12(sp)
   8e9b0:	dc800217 	ldw	r18,8(sp)
   8e9b4:	dc400117 	ldw	r17,4(sp)
   8e9b8:	dc000017 	ldw	r16,0(sp)
   8e9bc:	dec00504 	addi	sp,sp,20
   8e9c0:	0090c641 	jmpi	90c64 <_write_r>

0008e9c4 <__sseek>:
   8e9c4:	defffe04 	addi	sp,sp,-8
   8e9c8:	dc000015 	stw	r16,0(sp)
   8e9cc:	2821883a 	mov	r16,r5
   8e9d0:	2940038f 	ldh	r5,14(r5)
   8e9d4:	dfc00115 	stw	ra,4(sp)
   8e9d8:	00934000 	call	93400 <_lseek_r>
   8e9dc:	00ffffc4 	movi	r3,-1
   8e9e0:	10c00826 	beq	r2,r3,8ea04 <__sseek+0x40>
   8e9e4:	80c0030b 	ldhu	r3,12(r16)
   8e9e8:	80801415 	stw	r2,80(r16)
   8e9ec:	18c40014 	ori	r3,r3,4096
   8e9f0:	80c0030d 	sth	r3,12(r16)
   8e9f4:	dfc00117 	ldw	ra,4(sp)
   8e9f8:	dc000017 	ldw	r16,0(sp)
   8e9fc:	dec00204 	addi	sp,sp,8
   8ea00:	f800283a 	ret
   8ea04:	80c0030b 	ldhu	r3,12(r16)
   8ea08:	18fbffcc 	andi	r3,r3,61439
   8ea0c:	80c0030d 	sth	r3,12(r16)
   8ea10:	dfc00117 	ldw	ra,4(sp)
   8ea14:	dc000017 	ldw	r16,0(sp)
   8ea18:	dec00204 	addi	sp,sp,8
   8ea1c:	f800283a 	ret

0008ea20 <__sclose>:
   8ea20:	2940038f 	ldh	r5,14(r5)
   8ea24:	0090e441 	jmpi	90e44 <_close_r>

0008ea28 <strlen>:
   8ea28:	208000cc 	andi	r2,r4,3
   8ea2c:	10001f1e 	bne	r2,zero,8eaac <strlen+0x84>
   8ea30:	20800017 	ldw	r2,0(r4)
   8ea34:	01ffbff4 	movhi	r7,65279
   8ea38:	39ffbfc4 	addi	r7,r7,-257
   8ea3c:	01a02074 	movhi	r6,32897
   8ea40:	31a02004 	addi	r6,r6,-32640
   8ea44:	11c7883a 	add	r3,r2,r7
   8ea48:	0084303a 	nor	r2,zero,r2
   8ea4c:	1886703a 	and	r3,r3,r2
   8ea50:	1986703a 	and	r3,r3,r6
   8ea54:	2005883a 	mov	r2,r4
   8ea58:	1800101e 	bne	r3,zero,8ea9c <strlen+0x74>
   8ea5c:	10800104 	addi	r2,r2,4
   8ea60:	10c00017 	ldw	r3,0(r2)
   8ea64:	19cb883a 	add	r5,r3,r7
   8ea68:	00c6303a 	nor	r3,zero,r3
   8ea6c:	28c6703a 	and	r3,r5,r3
   8ea70:	1986703a 	and	r3,r3,r6
   8ea74:	1800091e 	bne	r3,zero,8ea9c <strlen+0x74>
   8ea78:	10800104 	addi	r2,r2,4
   8ea7c:	10c00017 	ldw	r3,0(r2)
   8ea80:	19cb883a 	add	r5,r3,r7
   8ea84:	00c6303a 	nor	r3,zero,r3
   8ea88:	28c6703a 	and	r3,r5,r3
   8ea8c:	1986703a 	and	r3,r3,r6
   8ea90:	183ff226 	beq	r3,zero,8ea5c <strlen+0x34>
   8ea94:	00000106 	br	8ea9c <strlen+0x74>
   8ea98:	10800044 	addi	r2,r2,1
   8ea9c:	10c00007 	ldb	r3,0(r2)
   8eaa0:	183ffd1e 	bne	r3,zero,8ea98 <strlen+0x70>
   8eaa4:	1105c83a 	sub	r2,r2,r4
   8eaa8:	f800283a 	ret
   8eaac:	2005883a 	mov	r2,r4
   8eab0:	003ffa06 	br	8ea9c <strlen+0x74>

0008eab4 <strncpy>:
   8eab4:	2906b03a 	or	r3,r5,r4
   8eab8:	18c000cc 	andi	r3,r3,3
   8eabc:	2005883a 	mov	r2,r4
   8eac0:	1800261e 	bne	r3,zero,8eb5c <strncpy+0xa8>
   8eac4:	02c000c4 	movi	r11,3
   8eac8:	200f883a 	mov	r7,r4
   8eacc:	59800f2e 	bgeu	r11,r6,8eb0c <strncpy+0x58>
   8ead0:	02bfbff4 	movhi	r10,65279
   8ead4:	52bfbfc4 	addi	r10,r10,-257
   8ead8:	01202074 	movhi	r4,32897
   8eadc:	21202004 	addi	r4,r4,-32640
   8eae0:	28c00017 	ldw	r3,0(r5)
   8eae4:	00d2303a 	nor	r9,zero,r3
   8eae8:	1a91883a 	add	r8,r3,r10
   8eaec:	4a10703a 	and	r8,r9,r8
   8eaf0:	4110703a 	and	r8,r8,r4
   8eaf4:	4000051e 	bne	r8,zero,8eb0c <strncpy+0x58>
   8eaf8:	38c00015 	stw	r3,0(r7)
   8eafc:	31bfff04 	addi	r6,r6,-4
   8eb00:	39c00104 	addi	r7,r7,4
   8eb04:	29400104 	addi	r5,r5,4
   8eb08:	59bff536 	bltu	r11,r6,8eae0 <strncpy+0x2c>
   8eb0c:	30001226 	beq	r6,zero,8eb58 <strncpy+0xa4>
   8eb10:	29000007 	ldb	r4,0(r5)
   8eb14:	31bfffc4 	addi	r6,r6,-1
   8eb18:	38c00044 	addi	r3,r7,1
   8eb1c:	39000005 	stb	r4,0(r7)
   8eb20:	29400044 	addi	r5,r5,1
   8eb24:	20000726 	beq	r4,zero,8eb44 <strncpy+0x90>
   8eb28:	30000e26 	beq	r6,zero,8eb64 <strncpy+0xb0>
   8eb2c:	29c00007 	ldb	r7,0(r5)
   8eb30:	18c00044 	addi	r3,r3,1
   8eb34:	31bfffc4 	addi	r6,r6,-1
   8eb38:	19ffffc5 	stb	r7,-1(r3)
   8eb3c:	29400044 	addi	r5,r5,1
   8eb40:	383ff91e 	bne	r7,zero,8eb28 <strncpy+0x74>
   8eb44:	198b883a 	add	r5,r3,r6
   8eb48:	30000726 	beq	r6,zero,8eb68 <strncpy+0xb4>
   8eb4c:	18000005 	stb	zero,0(r3)
   8eb50:	18c00044 	addi	r3,r3,1
   8eb54:	197ffd1e 	bne	r3,r5,8eb4c <strncpy+0x98>
   8eb58:	f800283a 	ret
   8eb5c:	200f883a 	mov	r7,r4
   8eb60:	003fea06 	br	8eb0c <strncpy+0x58>
   8eb64:	f800283a 	ret
   8eb68:	f800283a 	ret

0008eb6c <_strtoul_r>:
   8eb6c:	defff604 	addi	sp,sp,-40
   8eb70:	008002b4 	movhi	r2,10
   8eb74:	10bd6a04 	addi	r2,r2,-2648
   8eb78:	dc800315 	stw	r18,12(sp)
   8eb7c:	14800017 	ldw	r18,0(r2)
   8eb80:	dd800715 	stw	r22,28(sp)
   8eb84:	dd400615 	stw	r21,24(sp)
   8eb88:	dcc00415 	stw	r19,16(sp)
   8eb8c:	dc000115 	stw	r16,4(sp)
   8eb90:	dfc00915 	stw	ra,36(sp)
   8eb94:	ddc00815 	stw	r23,32(sp)
   8eb98:	dd000515 	stw	r20,20(sp)
   8eb9c:	dc400215 	stw	r17,8(sp)
   8eba0:	282b883a 	mov	r21,r5
   8eba4:	202d883a 	mov	r22,r4
   8eba8:	3827883a 	mov	r19,r7
   8ebac:	2821883a 	mov	r16,r5
   8ebb0:	84400007 	ldb	r17,0(r16)
   8ebb4:	84000044 	addi	r16,r16,1
   8ebb8:	9445883a 	add	r2,r18,r17
   8ebbc:	10800003 	ldbu	r2,0(r2)
   8ebc0:	1080020c 	andi	r2,r2,8
   8ebc4:	10803fcc 	andi	r2,r2,255
   8ebc8:	1080201c 	xori	r2,r2,128
   8ebcc:	10bfe004 	addi	r2,r2,-128
   8ebd0:	103ff71e 	bne	r2,zero,8ebb0 <_strtoul_r+0x44>
   8ebd4:	00800b44 	movi	r2,45
   8ebd8:	88805926 	beq	r17,r2,8ed40 <_strtoul_r+0x1d4>
   8ebdc:	00800ac4 	movi	r2,43
   8ebe0:	88805b26 	beq	r17,r2,8ed50 <_strtoul_r+0x1e4>
   8ebe4:	002f883a 	mov	r23,zero
   8ebe8:	9800081e 	bne	r19,zero,8ec0c <_strtoul_r+0xa0>
   8ebec:	00800c04 	movi	r2,48
   8ebf0:	88805d26 	beq	r17,r2,8ed68 <_strtoul_r+0x1fc>
   8ebf4:	04c00284 	movi	r19,10
   8ebf8:	01400144 	movi	r5,5
   8ebfc:	050666b4 	movhi	r20,6554
   8ec00:	a5266644 	addi	r20,r20,-26215
   8ec04:	9809883a 	mov	r4,r19
   8ec08:	00000d06 	br	8ec40 <_strtoul_r+0xd4>
   8ec0c:	00800404 	movi	r2,16
   8ec10:	98805326 	beq	r19,r2,8ed60 <_strtoul_r+0x1f4>
   8ec14:	013fffc4 	movi	r4,-1
   8ec18:	980b883a 	mov	r5,r19
   8ec1c:	d9800015 	stw	r6,0(sp)
   8ec20:	008cf380 	call	8cf38 <__udivsi3>
   8ec24:	013fffc4 	movi	r4,-1
   8ec28:	980b883a 	mov	r5,r19
   8ec2c:	1029883a 	mov	r20,r2
   8ec30:	008cf400 	call	8cf40 <__umodsi3>
   8ec34:	d9800017 	ldw	r6,0(sp)
   8ec38:	100b883a 	mov	r5,r2
   8ec3c:	9809883a 	mov	r4,r19
   8ec40:	9447883a 	add	r3,r18,r17
   8ec44:	18c00003 	ldbu	r3,0(r3)
   8ec48:	0013883a 	mov	r9,zero
   8ec4c:	0005883a 	mov	r2,zero
   8ec50:	1a00010c 	andi	r8,r3,4
   8ec54:	42003fcc 	andi	r8,r8,255
   8ec58:	4200201c 	xori	r8,r8,128
   8ec5c:	423fe004 	addi	r8,r8,-128
   8ec60:	02bfffc4 	movi	r10,-1
   8ec64:	40001126 	beq	r8,zero,8ecac <_strtoul_r+0x140>
   8ec68:	8c7ff404 	addi	r17,r17,-48
   8ec6c:	8cc0160e 	bge	r17,r19,8ecc8 <_strtoul_r+0x15c>
   8ec70:	4a800526 	beq	r9,r10,8ec88 <_strtoul_r+0x11c>
   8ec74:	a0802736 	bltu	r20,r2,8ed14 <_strtoul_r+0x1a8>
   8ec78:	15002526 	beq	r2,r20,8ed10 <_strtoul_r+0x1a4>
   8ec7c:	1107383a 	mul	r3,r2,r4
   8ec80:	02400044 	movi	r9,1
   8ec84:	88c5883a 	add	r2,r17,r3
   8ec88:	84400007 	ldb	r17,0(r16)
   8ec8c:	84000044 	addi	r16,r16,1
   8ec90:	9447883a 	add	r3,r18,r17
   8ec94:	18c00003 	ldbu	r3,0(r3)
   8ec98:	1a00010c 	andi	r8,r3,4
   8ec9c:	42003fcc 	andi	r8,r8,255
   8eca0:	4200201c 	xori	r8,r8,128
   8eca4:	423fe004 	addi	r8,r8,-128
   8eca8:	403fef1e 	bne	r8,zero,8ec68 <_strtoul_r+0xfc>
   8ecac:	19c000cc 	andi	r7,r3,3
   8ecb0:	38000526 	beq	r7,zero,8ecc8 <_strtoul_r+0x15c>
   8ecb4:	18c0004c 	andi	r3,r3,1
   8ecb8:	18001826 	beq	r3,zero,8ed1c <_strtoul_r+0x1b0>
   8ecbc:	00c00dc4 	movi	r3,55
   8ecc0:	88e3c83a 	sub	r17,r17,r3
   8ecc4:	8cffea16 	blt	r17,r19,8ec70 <_strtoul_r+0x104>
   8ecc8:	00ffffc4 	movi	r3,-1
   8eccc:	48c01626 	beq	r9,r3,8ed28 <_strtoul_r+0x1bc>
   8ecd0:	b8000126 	beq	r23,zero,8ecd8 <_strtoul_r+0x16c>
   8ecd4:	0085c83a 	sub	r2,zero,r2
   8ecd8:	30000226 	beq	r6,zero,8ece4 <_strtoul_r+0x178>
   8ecdc:	4800161e 	bne	r9,zero,8ed38 <_strtoul_r+0x1cc>
   8ece0:	35400015 	stw	r21,0(r6)
   8ece4:	dfc00917 	ldw	ra,36(sp)
   8ece8:	ddc00817 	ldw	r23,32(sp)
   8ecec:	dd800717 	ldw	r22,28(sp)
   8ecf0:	dd400617 	ldw	r21,24(sp)
   8ecf4:	dd000517 	ldw	r20,20(sp)
   8ecf8:	dcc00417 	ldw	r19,16(sp)
   8ecfc:	dc800317 	ldw	r18,12(sp)
   8ed00:	dc400217 	ldw	r17,8(sp)
   8ed04:	dc000117 	ldw	r16,4(sp)
   8ed08:	dec00a04 	addi	sp,sp,40
   8ed0c:	f800283a 	ret
   8ed10:	2c7fda0e 	bge	r5,r17,8ec7c <_strtoul_r+0x110>
   8ed14:	027fffc4 	movi	r9,-1
   8ed18:	003fdb06 	br	8ec88 <_strtoul_r+0x11c>
   8ed1c:	00c015c4 	movi	r3,87
   8ed20:	88e3c83a 	sub	r17,r17,r3
   8ed24:	003fe706 	br	8ecc4 <_strtoul_r+0x158>
   8ed28:	00800884 	movi	r2,34
   8ed2c:	b0800015 	stw	r2,0(r22)
   8ed30:	4805883a 	mov	r2,r9
   8ed34:	303feb26 	beq	r6,zero,8ece4 <_strtoul_r+0x178>
   8ed38:	857fffc4 	addi	r21,r16,-1
   8ed3c:	003fe806 	br	8ece0 <_strtoul_r+0x174>
   8ed40:	05c00044 	movi	r23,1
   8ed44:	84400007 	ldb	r17,0(r16)
   8ed48:	85e1883a 	add	r16,r16,r23
   8ed4c:	003fa606 	br	8ebe8 <_strtoul_r+0x7c>
   8ed50:	84400007 	ldb	r17,0(r16)
   8ed54:	002f883a 	mov	r23,zero
   8ed58:	84000044 	addi	r16,r16,1
   8ed5c:	003fa206 	br	8ebe8 <_strtoul_r+0x7c>
   8ed60:	00800c04 	movi	r2,48
   8ed64:	88bfab1e 	bne	r17,r2,8ec14 <_strtoul_r+0xa8>
   8ed68:	80800007 	ldb	r2,0(r16)
   8ed6c:	00c01e04 	movi	r3,120
   8ed70:	10c00a26 	beq	r2,r3,8ed9c <_strtoul_r+0x230>
   8ed74:	00c01604 	movi	r3,88
   8ed78:	10c00826 	beq	r2,r3,8ed9c <_strtoul_r+0x230>
   8ed7c:	98000f1e 	bne	r19,zero,8edbc <_strtoul_r+0x250>
   8ed80:	01000204 	movi	r4,8
   8ed84:	014001c4 	movi	r5,7
   8ed88:	05080034 	movhi	r20,8192
   8ed8c:	a53fffc4 	addi	r20,r20,-1
   8ed90:	04400c04 	movi	r17,48
   8ed94:	2027883a 	mov	r19,r4
   8ed98:	003fa906 	br	8ec40 <_strtoul_r+0xd4>
   8ed9c:	01000404 	movi	r4,16
   8eda0:	84400047 	ldb	r17,1(r16)
   8eda4:	014003c4 	movi	r5,15
   8eda8:	84000084 	addi	r16,r16,2
   8edac:	05040034 	movhi	r20,4096
   8edb0:	a53fffc4 	addi	r20,r20,-1
   8edb4:	2027883a 	mov	r19,r4
   8edb8:	003fa106 	br	8ec40 <_strtoul_r+0xd4>
   8edbc:	013fffc4 	movi	r4,-1
   8edc0:	980b883a 	mov	r5,r19
   8edc4:	d9800015 	stw	r6,0(sp)
   8edc8:	008cf380 	call	8cf38 <__udivsi3>
   8edcc:	013fffc4 	movi	r4,-1
   8edd0:	980b883a 	mov	r5,r19
   8edd4:	1029883a 	mov	r20,r2
   8edd8:	008cf400 	call	8cf40 <__umodsi3>
   8eddc:	100b883a 	mov	r5,r2
   8ede0:	9809883a 	mov	r4,r19
   8ede4:	04400c04 	movi	r17,48
   8ede8:	d9800017 	ldw	r6,0(sp)
   8edec:	003f9406 	br	8ec40 <_strtoul_r+0xd4>

0008edf0 <strtoul>:
   8edf0:	008002b4 	movhi	r2,10
   8edf4:	10bd6704 	addi	r2,r2,-2660
   8edf8:	2007883a 	mov	r3,r4
   8edfc:	11000017 	ldw	r4,0(r2)
   8ee00:	2805883a 	mov	r2,r5
   8ee04:	300f883a 	mov	r7,r6
   8ee08:	180b883a 	mov	r5,r3
   8ee0c:	100d883a 	mov	r6,r2
   8ee10:	008eb6c1 	jmpi	8eb6c <_strtoul_r>

0008ee14 <__sprint_r>:
   8ee14:	30800217 	ldw	r2,8(r6)
   8ee18:	defffe04 	addi	sp,sp,-8
   8ee1c:	dc000015 	stw	r16,0(sp)
   8ee20:	dfc00115 	stw	ra,4(sp)
   8ee24:	3021883a 	mov	r16,r6
   8ee28:	10000226 	beq	r2,zero,8ee34 <__sprint_r+0x20>
   8ee2c:	0092e400 	call	92e40 <__sfvwrite_r>
   8ee30:	80000215 	stw	zero,8(r16)
   8ee34:	80000115 	stw	zero,4(r16)
   8ee38:	dfc00117 	ldw	ra,4(sp)
   8ee3c:	dc000017 	ldw	r16,0(sp)
   8ee40:	dec00204 	addi	sp,sp,8
   8ee44:	f800283a 	ret

0008ee48 <___vfprintf_internal_r>:
   8ee48:	defeb904 	addi	sp,sp,-1308
   8ee4c:	dc013d15 	stw	r16,1268(sp)
   8ee50:	d9013015 	stw	r4,1216(sp)
   8ee54:	dfc14615 	stw	ra,1304(sp)
   8ee58:	df014515 	stw	fp,1300(sp)
   8ee5c:	ddc14415 	stw	r23,1296(sp)
   8ee60:	dd814315 	stw	r22,1292(sp)
   8ee64:	dd414215 	stw	r21,1288(sp)
   8ee68:	dd014115 	stw	r20,1284(sp)
   8ee6c:	dcc14015 	stw	r19,1280(sp)
   8ee70:	dc813f15 	stw	r18,1276(sp)
   8ee74:	dc413e15 	stw	r17,1272(sp)
   8ee78:	d9412915 	stw	r5,1188(sp)
   8ee7c:	3021883a 	mov	r16,r6
   8ee80:	d9c12d15 	stw	r7,1204(sp)
   8ee84:	00933cc0 	call	933cc <_localeconv_r>
   8ee88:	10800017 	ldw	r2,0(r2)
   8ee8c:	d9013017 	ldw	r4,1216(sp)
   8ee90:	d8013315 	stw	zero,1228(sp)
   8ee94:	d8813715 	stw	r2,1244(sp)
   8ee98:	d8013415 	stw	zero,1232(sp)
   8ee9c:	20000226 	beq	r4,zero,8eea8 <___vfprintf_internal_r+0x60>
   8eea0:	20800e17 	ldw	r2,56(r4)
   8eea4:	10019826 	beq	r2,zero,8f508 <___vfprintf_internal_r+0x6c0>
   8eea8:	da012917 	ldw	r8,1188(sp)
   8eeac:	4080030b 	ldhu	r2,12(r8)
   8eeb0:	10c0020c 	andi	r3,r2,8
   8eeb4:	18ffffcc 	andi	r3,r3,65535
   8eeb8:	18e0001c 	xori	r3,r3,32768
   8eebc:	18e00004 	addi	r3,r3,-32768
   8eec0:	18013a26 	beq	r3,zero,8f3ac <___vfprintf_internal_r+0x564>
   8eec4:	40c00417 	ldw	r3,16(r8)
   8eec8:	18013826 	beq	r3,zero,8f3ac <___vfprintf_internal_r+0x564>
   8eecc:	1100068c 	andi	r4,r2,26
   8eed0:	00c00284 	movi	r3,10
   8eed4:	20c13e26 	beq	r4,r3,8f3d0 <___vfprintf_internal_r+0x588>
   8eed8:	da010dc4 	addi	r8,sp,1079
   8eedc:	d8800404 	addi	r2,sp,16
   8eee0:	da012615 	stw	r8,1176(sp)
   8eee4:	d8811b15 	stw	r2,1132(sp)
   8eee8:	1013883a 	mov	r9,r2
   8eeec:	d8812617 	ldw	r2,1176(sp)
   8eef0:	da010e04 	addi	r8,sp,1080
   8eef4:	dc413017 	ldw	r17,1216(sp)
   8eef8:	da012715 	stw	r8,1180(sp)
   8eefc:	4091c83a 	sub	r8,r8,r2
   8ef00:	d8011d15 	stw	zero,1140(sp)
   8ef04:	d8011c15 	stw	zero,1136(sp)
   8ef08:	802b883a 	mov	r21,r16
   8ef0c:	d8013215 	stw	zero,1224(sp)
   8ef10:	d8013615 	stw	zero,1240(sp)
   8ef14:	d8013515 	stw	zero,1236(sp)
   8ef18:	d8012c15 	stw	zero,1200(sp)
   8ef1c:	da013915 	stw	r8,1252(sp)
   8ef20:	a8800007 	ldb	r2,0(r21)
   8ef24:	1002ec26 	beq	r2,zero,8fad8 <___vfprintf_internal_r+0xc90>
   8ef28:	00c00944 	movi	r3,37
   8ef2c:	a825883a 	mov	r18,r21
   8ef30:	10c0021e 	bne	r2,r3,8ef3c <___vfprintf_internal_r+0xf4>
   8ef34:	00001406 	br	8ef88 <___vfprintf_internal_r+0x140>
   8ef38:	10c00326 	beq	r2,r3,8ef48 <___vfprintf_internal_r+0x100>
   8ef3c:	94800044 	addi	r18,r18,1
   8ef40:	90800007 	ldb	r2,0(r18)
   8ef44:	103ffc1e 	bne	r2,zero,8ef38 <___vfprintf_internal_r+0xf0>
   8ef48:	9561c83a 	sub	r16,r18,r21
   8ef4c:	80000e26 	beq	r16,zero,8ef88 <___vfprintf_internal_r+0x140>
   8ef50:	da011d17 	ldw	r8,1140(sp)
   8ef54:	d8c11c17 	ldw	r3,1136(sp)
   8ef58:	4d400015 	stw	r21,0(r9)
   8ef5c:	4c000115 	stw	r16,4(r9)
   8ef60:	4411883a 	add	r8,r8,r16
   8ef64:	18c00044 	addi	r3,r3,1
   8ef68:	da011d15 	stw	r8,1140(sp)
   8ef6c:	d8c11c15 	stw	r3,1136(sp)
   8ef70:	008001c4 	movi	r2,7
   8ef74:	10c15d16 	blt	r2,r3,8f4ec <___vfprintf_internal_r+0x6a4>
   8ef78:	4a400204 	addi	r9,r9,8
   8ef7c:	d8812c17 	ldw	r2,1200(sp)
   8ef80:	1405883a 	add	r2,r2,r16
   8ef84:	d8812c15 	stw	r2,1200(sp)
   8ef88:	90800007 	ldb	r2,0(r18)
   8ef8c:	10013b26 	beq	r2,zero,8f47c <___vfprintf_internal_r+0x634>
   8ef90:	95400044 	addi	r21,r18,1
   8ef94:	94800047 	ldb	r18,1(r18)
   8ef98:	d8012585 	stb	zero,1174(sp)
   8ef9c:	073fffc4 	movi	fp,-1
   8efa0:	d8012e15 	stw	zero,1208(sp)
   8efa4:	0021883a 	mov	r16,zero
   8efa8:	00c01604 	movi	r3,88
   8efac:	01400244 	movi	r5,9
   8efb0:	02800a84 	movi	r10,42
   8efb4:	01c01b04 	movi	r7,108
   8efb8:	01800ac4 	movi	r6,43
   8efbc:	02c00804 	movi	r11,32
   8efc0:	ad400044 	addi	r21,r21,1
   8efc4:	90bff804 	addi	r2,r18,-32
   8efc8:	1880092e 	bgeu	r3,r2,8eff0 <___vfprintf_internal_r+0x1a8>
   8efcc:	90012b26 	beq	r18,zero,8f47c <___vfprintf_internal_r+0x634>
   8efd0:	00c00044 	movi	r3,1
   8efd4:	d8c12815 	stw	r3,1184(sp)
   8efd8:	dc810405 	stb	r18,1040(sp)
   8efdc:	d8012585 	stb	zero,1174(sp)
   8efe0:	d8c12b15 	stw	r3,1196(sp)
   8efe4:	dcc10404 	addi	r19,sp,1040
   8efe8:	d8013115 	stw	zero,1220(sp)
   8efec:	00008806 	br	8f210 <___vfprintf_internal_r+0x3c8>
   8eff0:	1085883a 	add	r2,r2,r2
   8eff4:	1085883a 	add	r2,r2,r2
   8eff8:	01000274 	movhi	r4,9
   8effc:	213c0304 	addi	r4,r4,-4084
   8f000:	1105883a 	add	r2,r2,r4
   8f004:	10800017 	ldw	r2,0(r2)
   8f008:	1000683a 	jmp	r2
   8f00c:	0008f5c0 	call	8f5c <__alt_mem_onchip_memory2-0x770a4>
   8f010:	0008efcc 	andi	zero,zero,9151
   8f014:	0008efcc 	andi	zero,zero,9151
   8f018:	0008f5d4 	movui	zero,9175
   8f01c:	0008efcc 	andi	zero,zero,9151
   8f020:	0008efcc 	andi	zero,zero,9151
   8f024:	0008efcc 	andi	zero,zero,9151
   8f028:	0008efcc 	andi	zero,zero,9151
   8f02c:	0008efcc 	andi	zero,zero,9151
   8f030:	0008efcc 	andi	zero,zero,9151
   8f034:	0008f6bc 	xorhi	zero,zero,9178
   8f038:	0008f578 	rdprs	zero,zero,9173
   8f03c:	0008efcc 	andi	zero,zero,9151
   8f040:	0008f3a0 	cmpeqi	zero,zero,9166
   8f044:	0008f584 	movi	zero,9174
   8f048:	0008efcc 	andi	zero,zero,9151
   8f04c:	0008f5e0 	cmpeqi	zero,zero,9175
   8f050:	0008f6e0 	cmpeqi	zero,zero,9179
   8f054:	0008f6e0 	cmpeqi	zero,zero,9179
   8f058:	0008f6e0 	cmpeqi	zero,zero,9179
   8f05c:	0008f6e0 	cmpeqi	zero,zero,9179
   8f060:	0008f6e0 	cmpeqi	zero,zero,9179
   8f064:	0008f6e0 	cmpeqi	zero,zero,9179
   8f068:	0008f6e0 	cmpeqi	zero,zero,9179
   8f06c:	0008f6e0 	cmpeqi	zero,zero,9179
   8f070:	0008f6e0 	cmpeqi	zero,zero,9179
   8f074:	0008efcc 	andi	zero,zero,9151
   8f078:	0008efcc 	andi	zero,zero,9151
   8f07c:	0008efcc 	andi	zero,zero,9151
   8f080:	0008efcc 	andi	zero,zero,9151
   8f084:	0008efcc 	andi	zero,zero,9151
   8f088:	0008efcc 	andi	zero,zero,9151
   8f08c:	0008efcc 	andi	zero,zero,9151
   8f090:	0008efcc 	andi	zero,zero,9151
   8f094:	0008efcc 	andi	zero,zero,9151
   8f098:	0008efcc 	andi	zero,zero,9151
   8f09c:	0008f33c 	xorhi	zero,zero,9164
   8f0a0:	0008f708 	cmpgei	zero,zero,9180
   8f0a4:	0008efcc 	andi	zero,zero,9151
   8f0a8:	0008f708 	cmpgei	zero,zero,9180
   8f0ac:	0008efcc 	andi	zero,zero,9151
   8f0b0:	0008efcc 	andi	zero,zero,9151
   8f0b4:	0008efcc 	andi	zero,zero,9151
   8f0b8:	0008efcc 	andi	zero,zero,9151
   8f0bc:	0008f878 	rdprs	zero,zero,9185
   8f0c0:	0008efcc 	andi	zero,zero,9151
   8f0c4:	0008efcc 	andi	zero,zero,9151
   8f0c8:	0008f304 	movi	zero,9164
   8f0cc:	0008efcc 	andi	zero,zero,9151
   8f0d0:	0008efcc 	andi	zero,zero,9151
   8f0d4:	0008efcc 	andi	zero,zero,9151
   8f0d8:	0008efcc 	andi	zero,zero,9151
   8f0dc:	0008efcc 	andi	zero,zero,9151
   8f0e0:	0008f170 	cmpltui	zero,zero,9157
   8f0e4:	0008efcc 	andi	zero,zero,9151
   8f0e8:	0008efcc 	andi	zero,zero,9151
   8f0ec:	0008f5ec 	andhi	zero,zero,9175
   8f0f0:	0008efcc 	andi	zero,zero,9151
   8f0f4:	0008efcc 	andi	zero,zero,9151
   8f0f8:	0008efcc 	andi	zero,zero,9151
   8f0fc:	0008efcc 	andi	zero,zero,9151
   8f100:	0008efcc 	andi	zero,zero,9151
   8f104:	0008efcc 	andi	zero,zero,9151
   8f108:	0008efcc 	andi	zero,zero,9151
   8f10c:	0008efcc 	andi	zero,zero,9151
   8f110:	0008efcc 	andi	zero,zero,9151
   8f114:	0008efcc 	andi	zero,zero,9151
   8f118:	0008f660 	cmpeqi	zero,zero,9177
   8f11c:	0008f340 	call	8f34 <__alt_mem_onchip_memory2-0x770cc>
   8f120:	0008f708 	cmpgei	zero,zero,9180
   8f124:	0008f708 	cmpgei	zero,zero,9180
   8f128:	0008f708 	cmpgei	zero,zero,9180
   8f12c:	0008f640 	call	8f64 <__alt_mem_onchip_memory2-0x7709c>
   8f130:	0008f340 	call	8f34 <__alt_mem_onchip_memory2-0x770cc>
   8f134:	0008efcc 	andi	zero,zero,9151
   8f138:	0008efcc 	andi	zero,zero,9151
   8f13c:	0008f64c 	andi	zero,zero,9177
   8f140:	0008efcc 	andi	zero,zero,9151
   8f144:	0008f690 	cmplti	zero,zero,9178
   8f148:	0008f308 	cmpgei	zero,zero,9164
   8f14c:	0008f790 	cmplti	zero,zero,9182
   8f150:	0008f7dc 	xori	zero,zero,9183
   8f154:	0008efcc 	andi	zero,zero,9151
   8f158:	0008f7e8 	cmpgeui	zero,zero,9183
   8f15c:	0008efcc 	andi	zero,zero,9151
   8f160:	0008f174 	movhi	zero,9157
   8f164:	0008efcc 	andi	zero,zero,9151
   8f168:	0008efcc 	andi	zero,zero,9151
   8f16c:	0008f844 	movi	zero,9185
   8f170:	84000414 	ori	r16,r16,16
   8f174:	8080080c 	andi	r2,r16,32
   8f178:	1000f51e 	bne	r2,zero,8f550 <___vfprintf_internal_r+0x708>
   8f17c:	8080040c 	andi	r2,r16,16
   8f180:	10042c26 	beq	r2,zero,90234 <___vfprintf_internal_r+0x13ec>
   8f184:	da012d17 	ldw	r8,1204(sp)
   8f188:	002d883a 	mov	r22,zero
   8f18c:	00c00044 	movi	r3,1
   8f190:	45c00017 	ldw	r23,0(r8)
   8f194:	42000104 	addi	r8,r8,4
   8f198:	da012d15 	stw	r8,1204(sp)
   8f19c:	b805883a 	mov	r2,r23
   8f1a0:	d8012585 	stb	zero,1174(sp)
   8f1a4:	e0000216 	blt	fp,zero,8f1b0 <___vfprintf_internal_r+0x368>
   8f1a8:	013fdfc4 	movi	r4,-129
   8f1ac:	8120703a 	and	r16,r16,r4
   8f1b0:	1002671e 	bne	r2,zero,8fb50 <___vfprintf_internal_r+0xd08>
   8f1b4:	e002661e 	bne	fp,zero,8fb50 <___vfprintf_internal_r+0xd08>
   8f1b8:	18c03fcc 	andi	r3,r3,255
   8f1bc:	1803561e 	bne	r3,zero,8ff18 <___vfprintf_internal_r+0x10d0>
   8f1c0:	8080004c 	andi	r2,r16,1
   8f1c4:	10035426 	beq	r2,zero,8ff18 <___vfprintf_internal_r+0x10d0>
   8f1c8:	da013917 	ldw	r8,1252(sp)
   8f1cc:	00800c04 	movi	r2,48
   8f1d0:	d8810dc5 	stb	r2,1079(sp)
   8f1d4:	da012b15 	stw	r8,1196(sp)
   8f1d8:	dcc10dc4 	addi	r19,sp,1079
   8f1dc:	d8812b17 	ldw	r2,1196(sp)
   8f1e0:	d8812815 	stw	r2,1184(sp)
   8f1e4:	1700010e 	bge	r2,fp,8f1ec <___vfprintf_internal_r+0x3a4>
   8f1e8:	df012815 	stw	fp,1184(sp)
   8f1ec:	d8812583 	ldbu	r2,1174(sp)
   8f1f0:	df013115 	stw	fp,1220(sp)
   8f1f4:	10803fcc 	andi	r2,r2,255
   8f1f8:	1080201c 	xori	r2,r2,128
   8f1fc:	10bfe004 	addi	r2,r2,-128
   8f200:	10000326 	beq	r2,zero,8f210 <___vfprintf_internal_r+0x3c8>
   8f204:	da012817 	ldw	r8,1184(sp)
   8f208:	42000044 	addi	r8,r8,1
   8f20c:	da012815 	stw	r8,1184(sp)
   8f210:	80c0008c 	andi	r3,r16,2
   8f214:	d8c12a15 	stw	r3,1192(sp)
   8f218:	18000326 	beq	r3,zero,8f228 <___vfprintf_internal_r+0x3e0>
   8f21c:	da012817 	ldw	r8,1184(sp)
   8f220:	42000084 	addi	r8,r8,2
   8f224:	da012815 	stw	r8,1184(sp)
   8f228:	80c0210c 	andi	r3,r16,132
   8f22c:	d8c12f15 	stw	r3,1212(sp)
   8f230:	1801941e 	bne	r3,zero,8f884 <___vfprintf_internal_r+0xa3c>
   8f234:	da012e17 	ldw	r8,1208(sp)
   8f238:	d8c12817 	ldw	r3,1184(sp)
   8f23c:	40edc83a 	sub	r22,r8,r3
   8f240:	0581900e 	bge	zero,r22,8f884 <___vfprintf_internal_r+0xa3c>
   8f244:	02800404 	movi	r10,16
   8f248:	da011d17 	ldw	r8,1140(sp)
   8f24c:	d8c11c17 	ldw	r3,1136(sp)
   8f250:	05c002b4 	movhi	r23,10
   8f254:	bdf4c184 	addi	r23,r23,-11514
   8f258:	5580200e 	bge	r10,r22,8f2dc <___vfprintf_internal_r+0x494>
   8f25c:	dc813815 	stw	r18,1248(sp)
   8f260:	5039883a 	mov	fp,r10
   8f264:	b825883a 	mov	r18,r23
   8f268:	050001c4 	movi	r20,7
   8f26c:	b02f883a 	mov	r23,r22
   8f270:	802d883a 	mov	r22,r16
   8f274:	dc012917 	ldw	r16,1188(sp)
   8f278:	00000306 	br	8f288 <___vfprintf_internal_r+0x440>
   8f27c:	bdfffc04 	addi	r23,r23,-16
   8f280:	4a400204 	addi	r9,r9,8
   8f284:	e5c0110e 	bge	fp,r23,8f2cc <___vfprintf_internal_r+0x484>
   8f288:	4c800015 	stw	r18,0(r9)
   8f28c:	4f000115 	stw	fp,4(r9)
   8f290:	42000404 	addi	r8,r8,16
   8f294:	18c00044 	addi	r3,r3,1
   8f298:	da011d15 	stw	r8,1140(sp)
   8f29c:	d8c11c15 	stw	r3,1136(sp)
   8f2a0:	a0fff60e 	bge	r20,r3,8f27c <___vfprintf_internal_r+0x434>
   8f2a4:	8809883a 	mov	r4,r17
   8f2a8:	800b883a 	mov	r5,r16
   8f2ac:	d9811b04 	addi	r6,sp,1132
   8f2b0:	008ee140 	call	8ee14 <__sprint_r>
   8f2b4:	1000771e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   8f2b8:	bdfffc04 	addi	r23,r23,-16
   8f2bc:	da011d17 	ldw	r8,1140(sp)
   8f2c0:	d8c11c17 	ldw	r3,1136(sp)
   8f2c4:	da400404 	addi	r9,sp,16
   8f2c8:	e5ffef16 	blt	fp,r23,8f288 <___vfprintf_internal_r+0x440>
   8f2cc:	b021883a 	mov	r16,r22
   8f2d0:	b82d883a 	mov	r22,r23
   8f2d4:	902f883a 	mov	r23,r18
   8f2d8:	dc813817 	ldw	r18,1248(sp)
   8f2dc:	4dc00015 	stw	r23,0(r9)
   8f2e0:	4d800115 	stw	r22,4(r9)
   8f2e4:	4591883a 	add	r8,r8,r22
   8f2e8:	18c00044 	addi	r3,r3,1
   8f2ec:	da011d15 	stw	r8,1140(sp)
   8f2f0:	d8c11c15 	stw	r3,1136(sp)
   8f2f4:	008001c4 	movi	r2,7
   8f2f8:	10c36d16 	blt	r2,r3,900b0 <___vfprintf_internal_r+0x1268>
   8f2fc:	4a400204 	addi	r9,r9,8
   8f300:	00016206 	br	8f88c <___vfprintf_internal_r+0xa44>
   8f304:	84000414 	ori	r16,r16,16
   8f308:	8080080c 	andi	r2,r16,32
   8f30c:	1000801e 	bne	r2,zero,8f510 <___vfprintf_internal_r+0x6c8>
   8f310:	8080040c 	andi	r2,r16,16
   8f314:	1003da26 	beq	r2,zero,90280 <___vfprintf_internal_r+0x1438>
   8f318:	d8c12d17 	ldw	r3,1204(sp)
   8f31c:	002d883a 	mov	r22,zero
   8f320:	1dc00017 	ldw	r23,0(r3)
   8f324:	18c00104 	addi	r3,r3,4
   8f328:	d8c12d15 	stw	r3,1204(sp)
   8f32c:	b805883a 	mov	r2,r23
   8f330:	0007883a 	mov	r3,zero
   8f334:	d8012585 	stb	zero,1174(sp)
   8f338:	003f9a06 	br	8f1a4 <___vfprintf_internal_r+0x35c>
   8f33c:	84000414 	ori	r16,r16,16
   8f340:	8080080c 	andi	r2,r16,32
   8f344:	10007b1e 	bne	r2,zero,8f534 <___vfprintf_internal_r+0x6ec>
   8f348:	8080040c 	andi	r2,r16,16
   8f34c:	1003ed26 	beq	r2,zero,90304 <___vfprintf_internal_r+0x14bc>
   8f350:	d9012d17 	ldw	r4,1204(sp)
   8f354:	25c00017 	ldw	r23,0(r4)
   8f358:	21000104 	addi	r4,r4,4
   8f35c:	d9012d15 	stw	r4,1204(sp)
   8f360:	b82dd7fa 	srai	r22,r23,31
   8f364:	b005883a 	mov	r2,r22
   8f368:	1003230e 	bge	r2,zero,8fff8 <___vfprintf_internal_r+0x11b0>
   8f36c:	05efc83a 	sub	r23,zero,r23
   8f370:	b804c03a 	cmpne	r2,r23,zero
   8f374:	05adc83a 	sub	r22,zero,r22
   8f378:	b0adc83a 	sub	r22,r22,r2
   8f37c:	00800b44 	movi	r2,45
   8f380:	d8812585 	stb	r2,1174(sp)
   8f384:	00c00044 	movi	r3,1
   8f388:	bd84b03a 	or	r2,r23,r22
   8f38c:	003f8506 	br	8f1a4 <___vfprintf_internal_r+0x35c>
   8f390:	da012e17 	ldw	r8,1208(sp)
   8f394:	d8812d15 	stw	r2,1204(sp)
   8f398:	0211c83a 	sub	r8,zero,r8
   8f39c:	da012e15 	stw	r8,1208(sp)
   8f3a0:	84000114 	ori	r16,r16,4
   8f3a4:	ac800007 	ldb	r18,0(r21)
   8f3a8:	003f0506 	br	8efc0 <___vfprintf_internal_r+0x178>
   8f3ac:	d9013017 	ldw	r4,1216(sp)
   8f3b0:	d9412917 	ldw	r5,1188(sp)
   8f3b4:	0090cd00 	call	90cd0 <__swsetup_r>
   8f3b8:	10003d1e 	bne	r2,zero,8f4b0 <___vfprintf_internal_r+0x668>
   8f3bc:	d8c12917 	ldw	r3,1188(sp)
   8f3c0:	1880030b 	ldhu	r2,12(r3)
   8f3c4:	00c00284 	movi	r3,10
   8f3c8:	1100068c 	andi	r4,r2,26
   8f3cc:	20fec21e 	bne	r4,r3,8eed8 <___vfprintf_internal_r+0x90>
   8f3d0:	d9012917 	ldw	r4,1188(sp)
   8f3d4:	20c0038b 	ldhu	r3,14(r4)
   8f3d8:	193fffcc 	andi	r4,r3,65535
   8f3dc:	2120001c 	xori	r4,r4,32768
   8f3e0:	21200004 	addi	r4,r4,-32768
   8f3e4:	203ebc16 	blt	r4,zero,8eed8 <___vfprintf_internal_r+0x90>
   8f3e8:	da012917 	ldw	r8,1188(sp)
   8f3ec:	d9013017 	ldw	r4,1216(sp)
   8f3f0:	d9c12d17 	ldw	r7,1204(sp)
   8f3f4:	42800717 	ldw	r10,28(r8)
   8f3f8:	42400917 	ldw	r9,36(r8)
   8f3fc:	10bfff4c 	andi	r2,r2,65533
   8f400:	02010004 	movi	r8,1024
   8f404:	d881070d 	sth	r2,1052(sp)
   8f408:	d9410404 	addi	r5,sp,1040
   8f40c:	d8800404 	addi	r2,sp,16
   8f410:	800d883a 	mov	r6,r16
   8f414:	d8c1078d 	sth	r3,1054(sp)
   8f418:	da810b15 	stw	r10,1068(sp)
   8f41c:	da410d15 	stw	r9,1076(sp)
   8f420:	d8810415 	stw	r2,1040(sp)
   8f424:	d8810815 	stw	r2,1056(sp)
   8f428:	da010615 	stw	r8,1048(sp)
   8f42c:	da010915 	stw	r8,1060(sp)
   8f430:	d8010a15 	stw	zero,1064(sp)
   8f434:	008ee480 	call	8ee48 <___vfprintf_internal_r>
   8f438:	d8812c15 	stw	r2,1200(sp)
   8f43c:	10000416 	blt	r2,zero,8f450 <___vfprintf_internal_r+0x608>
   8f440:	d9013017 	ldw	r4,1216(sp)
   8f444:	d9410404 	addi	r5,sp,1040
   8f448:	009281c0 	call	9281c <_fflush_r>
   8f44c:	1005d81e 	bne	r2,zero,90bb0 <___vfprintf_internal_r+0x1d68>
   8f450:	d881070b 	ldhu	r2,1052(sp)
   8f454:	1080100c 	andi	r2,r2,64
   8f458:	10bfffcc 	andi	r2,r2,65535
   8f45c:	10a0001c 	xori	r2,r2,32768
   8f460:	10a00004 	addi	r2,r2,-32768
   8f464:	10001426 	beq	r2,zero,8f4b8 <___vfprintf_internal_r+0x670>
   8f468:	d8c12917 	ldw	r3,1188(sp)
   8f46c:	1880030b 	ldhu	r2,12(r3)
   8f470:	10801014 	ori	r2,r2,64
   8f474:	1880030d 	sth	r2,12(r3)
   8f478:	00000f06 	br	8f4b8 <___vfprintf_internal_r+0x670>
   8f47c:	d8811d17 	ldw	r2,1140(sp)
   8f480:	10000426 	beq	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   8f484:	d9013017 	ldw	r4,1216(sp)
   8f488:	d9412917 	ldw	r5,1188(sp)
   8f48c:	d9811b04 	addi	r6,sp,1132
   8f490:	008ee140 	call	8ee14 <__sprint_r>
   8f494:	d8c12917 	ldw	r3,1188(sp)
   8f498:	1880030b 	ldhu	r2,12(r3)
   8f49c:	1080100c 	andi	r2,r2,64
   8f4a0:	10bfffcc 	andi	r2,r2,65535
   8f4a4:	10a0001c 	xori	r2,r2,32768
   8f4a8:	10a00004 	addi	r2,r2,-32768
   8f4ac:	10000226 	beq	r2,zero,8f4b8 <___vfprintf_internal_r+0x670>
   8f4b0:	00bfffc4 	movi	r2,-1
   8f4b4:	d8812c15 	stw	r2,1200(sp)
   8f4b8:	d8812c17 	ldw	r2,1200(sp)
   8f4bc:	dfc14617 	ldw	ra,1304(sp)
   8f4c0:	df014517 	ldw	fp,1300(sp)
   8f4c4:	ddc14417 	ldw	r23,1296(sp)
   8f4c8:	dd814317 	ldw	r22,1292(sp)
   8f4cc:	dd414217 	ldw	r21,1288(sp)
   8f4d0:	dd014117 	ldw	r20,1284(sp)
   8f4d4:	dcc14017 	ldw	r19,1280(sp)
   8f4d8:	dc813f17 	ldw	r18,1276(sp)
   8f4dc:	dc413e17 	ldw	r17,1272(sp)
   8f4e0:	dc013d17 	ldw	r16,1268(sp)
   8f4e4:	dec14704 	addi	sp,sp,1308
   8f4e8:	f800283a 	ret
   8f4ec:	d9412917 	ldw	r5,1188(sp)
   8f4f0:	8809883a 	mov	r4,r17
   8f4f4:	d9811b04 	addi	r6,sp,1132
   8f4f8:	008ee140 	call	8ee14 <__sprint_r>
   8f4fc:	103fe51e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   8f500:	da400404 	addi	r9,sp,16
   8f504:	003e9d06 	br	8ef7c <___vfprintf_internal_r+0x134>
   8f508:	008d6e40 	call	8d6e4 <__sinit>
   8f50c:	003e6606 	br	8eea8 <___vfprintf_internal_r+0x60>
   8f510:	d8812d17 	ldw	r2,1204(sp)
   8f514:	0007883a 	mov	r3,zero
   8f518:	15c00017 	ldw	r23,0(r2)
   8f51c:	15800117 	ldw	r22,4(r2)
   8f520:	10800204 	addi	r2,r2,8
   8f524:	d8812d15 	stw	r2,1204(sp)
   8f528:	d8012585 	stb	zero,1174(sp)
   8f52c:	bd84b03a 	or	r2,r23,r22
   8f530:	003f1c06 	br	8f1a4 <___vfprintf_internal_r+0x35c>
   8f534:	d8c12d17 	ldw	r3,1204(sp)
   8f538:	18800117 	ldw	r2,4(r3)
   8f53c:	1dc00017 	ldw	r23,0(r3)
   8f540:	18c00204 	addi	r3,r3,8
   8f544:	d8c12d15 	stw	r3,1204(sp)
   8f548:	102d883a 	mov	r22,r2
   8f54c:	003f8606 	br	8f368 <___vfprintf_internal_r+0x520>
   8f550:	d8c12d17 	ldw	r3,1204(sp)
   8f554:	d9012d17 	ldw	r4,1204(sp)
   8f558:	1dc00017 	ldw	r23,0(r3)
   8f55c:	1d800117 	ldw	r22,4(r3)
   8f560:	21000204 	addi	r4,r4,8
   8f564:	00c00044 	movi	r3,1
   8f568:	d9012d15 	stw	r4,1204(sp)
   8f56c:	bd84b03a 	or	r2,r23,r22
   8f570:	d8012585 	stb	zero,1174(sp)
   8f574:	003f0b06 	br	8f1a4 <___vfprintf_internal_r+0x35c>
   8f578:	d9812585 	stb	r6,1174(sp)
   8f57c:	ac800007 	ldb	r18,0(r21)
   8f580:	003e8f06 	br	8efc0 <___vfprintf_internal_r+0x178>
   8f584:	ac800007 	ldb	r18,0(r21)
   8f588:	a9000044 	addi	r4,r21,1
   8f58c:	92857d26 	beq	r18,r10,90b84 <___vfprintf_internal_r+0x1d3c>
   8f590:	90bff404 	addi	r2,r18,-48
   8f594:	0039883a 	mov	fp,zero
   8f598:	28800736 	bltu	r5,r2,8f5b8 <___vfprintf_internal_r+0x770>
   8f59c:	24800007 	ldb	r18,0(r4)
   8f5a0:	e70002a4 	muli	fp,fp,10
   8f5a4:	21000044 	addi	r4,r4,1
   8f5a8:	1739883a 	add	fp,r2,fp
   8f5ac:	90bff404 	addi	r2,r18,-48
   8f5b0:	28bffa2e 	bgeu	r5,r2,8f59c <___vfprintf_internal_r+0x754>
   8f5b4:	e0044216 	blt	fp,zero,906c0 <___vfprintf_internal_r+0x1878>
   8f5b8:	202b883a 	mov	r21,r4
   8f5bc:	003e8106 	br	8efc4 <___vfprintf_internal_r+0x17c>
   8f5c0:	d8812587 	ldb	r2,1174(sp)
   8f5c4:	1003581e 	bne	r2,zero,90328 <___vfprintf_internal_r+0x14e0>
   8f5c8:	dac12585 	stb	r11,1174(sp)
   8f5cc:	ac800007 	ldb	r18,0(r21)
   8f5d0:	003e7b06 	br	8efc0 <___vfprintf_internal_r+0x178>
   8f5d4:	84000054 	ori	r16,r16,1
   8f5d8:	ac800007 	ldb	r18,0(r21)
   8f5dc:	003e7806 	br	8efc0 <___vfprintf_internal_r+0x178>
   8f5e0:	84002014 	ori	r16,r16,128
   8f5e4:	ac800007 	ldb	r18,0(r21)
   8f5e8:	003e7506 	br	8efc0 <___vfprintf_internal_r+0x178>
   8f5ec:	020002b4 	movhi	r8,10
   8f5f0:	4234b504 	addi	r8,r8,-11564
   8f5f4:	da013615 	stw	r8,1240(sp)
   8f5f8:	8080080c 	andi	r2,r16,32
   8f5fc:	10009626 	beq	r2,zero,8f858 <___vfprintf_internal_r+0xa10>
   8f600:	d8812d17 	ldw	r2,1204(sp)
   8f604:	15c00017 	ldw	r23,0(r2)
   8f608:	15800117 	ldw	r22,4(r2)
   8f60c:	10800204 	addi	r2,r2,8
   8f610:	d8812d15 	stw	r2,1204(sp)
   8f614:	8080004c 	andi	r2,r16,1
   8f618:	1002ae26 	beq	r2,zero,900d4 <___vfprintf_internal_r+0x128c>
   8f61c:	bd84b03a 	or	r2,r23,r22
   8f620:	10032a26 	beq	r2,zero,902cc <___vfprintf_internal_r+0x1484>
   8f624:	00c00c04 	movi	r3,48
   8f628:	d8c12505 	stb	r3,1172(sp)
   8f62c:	dc812545 	stb	r18,1173(sp)
   8f630:	84000094 	ori	r16,r16,2
   8f634:	00c00084 	movi	r3,2
   8f638:	d8012585 	stb	zero,1174(sp)
   8f63c:	003ed906 	br	8f1a4 <___vfprintf_internal_r+0x35c>
   8f640:	84001014 	ori	r16,r16,64
   8f644:	ac800007 	ldb	r18,0(r21)
   8f648:	003e5d06 	br	8efc0 <___vfprintf_internal_r+0x178>
   8f64c:	ac800007 	ldb	r18,0(r21)
   8f650:	a805883a 	mov	r2,r21
   8f654:	91c43226 	beq	r18,r7,90720 <___vfprintf_internal_r+0x18d8>
   8f658:	84000414 	ori	r16,r16,16
   8f65c:	003e5806 	br	8efc0 <___vfprintf_internal_r+0x178>
   8f660:	d8c12d17 	ldw	r3,1204(sp)
   8f664:	02000044 	movi	r8,1
   8f668:	da012815 	stw	r8,1184(sp)
   8f66c:	18800017 	ldw	r2,0(r3)
   8f670:	18c00104 	addi	r3,r3,4
   8f674:	d8012585 	stb	zero,1174(sp)
   8f678:	d8810405 	stb	r2,1040(sp)
   8f67c:	d8c12d15 	stw	r3,1204(sp)
   8f680:	da012b15 	stw	r8,1196(sp)
   8f684:	dcc10404 	addi	r19,sp,1040
   8f688:	d8013115 	stw	zero,1220(sp)
   8f68c:	003ee006 	br	8f210 <___vfprintf_internal_r+0x3c8>
   8f690:	8080080c 	andi	r2,r16,32
   8f694:	10031026 	beq	r2,zero,902d8 <___vfprintf_internal_r+0x1490>
   8f698:	d9012d17 	ldw	r4,1204(sp)
   8f69c:	da012c17 	ldw	r8,1200(sp)
   8f6a0:	20800017 	ldw	r2,0(r4)
   8f6a4:	4007d7fa 	srai	r3,r8,31
   8f6a8:	21000104 	addi	r4,r4,4
   8f6ac:	d9012d15 	stw	r4,1204(sp)
   8f6b0:	12000015 	stw	r8,0(r2)
   8f6b4:	10c00115 	stw	r3,4(r2)
   8f6b8:	003e1906 	br	8ef20 <___vfprintf_internal_r+0xd8>
   8f6bc:	da012d17 	ldw	r8,1204(sp)
   8f6c0:	d9012d17 	ldw	r4,1204(sp)
   8f6c4:	42000017 	ldw	r8,0(r8)
   8f6c8:	20800104 	addi	r2,r4,4
   8f6cc:	da012e15 	stw	r8,1208(sp)
   8f6d0:	403f2f16 	blt	r8,zero,8f390 <___vfprintf_internal_r+0x548>
   8f6d4:	d8812d15 	stw	r2,1204(sp)
   8f6d8:	ac800007 	ldb	r18,0(r21)
   8f6dc:	003e3806 	br	8efc0 <___vfprintf_internal_r+0x178>
   8f6e0:	0009883a 	mov	r4,zero
   8f6e4:	90bff404 	addi	r2,r18,-48
   8f6e8:	ac800007 	ldb	r18,0(r21)
   8f6ec:	210002a4 	muli	r4,r4,10
   8f6f0:	ad400044 	addi	r21,r21,1
   8f6f4:	2089883a 	add	r4,r4,r2
   8f6f8:	90bff404 	addi	r2,r18,-48
   8f6fc:	28bffa2e 	bgeu	r5,r2,8f6e8 <___vfprintf_internal_r+0x8a0>
   8f700:	d9012e15 	stw	r4,1208(sp)
   8f704:	003e2f06 	br	8efc4 <___vfprintf_internal_r+0x17c>
   8f708:	8080020c 	andi	r2,r16,8
   8f70c:	1002d426 	beq	r2,zero,90260 <___vfprintf_internal_r+0x1418>
   8f710:	d8c12d17 	ldw	r3,1204(sp)
   8f714:	1d800017 	ldw	r22,0(r3)
   8f718:	1d000117 	ldw	r20,4(r3)
   8f71c:	18c00204 	addi	r3,r3,8
   8f720:	d8c12d15 	stw	r3,1204(sp)
   8f724:	dd813315 	stw	r22,1228(sp)
   8f728:	dd013415 	stw	r20,1232(sp)
   8f72c:	b009883a 	mov	r4,r22
   8f730:	a00b883a 	mov	r5,r20
   8f734:	da413c15 	stw	r9,1264(sp)
   8f738:	0094ef80 	call	94ef8 <__isinfd>
   8f73c:	da413c17 	ldw	r9,1264(sp)
   8f740:	b009883a 	mov	r4,r22
   8f744:	a00b883a 	mov	r5,r20
   8f748:	10035726 	beq	r2,zero,904a8 <___vfprintf_internal_r+0x1660>
   8f74c:	000d883a 	mov	r6,zero
   8f750:	000f883a 	mov	r7,zero
   8f754:	00968540 	call	96854 <__ltdf2>
   8f758:	da413c17 	ldw	r9,1264(sp)
   8f75c:	10041b16 	blt	r2,zero,907cc <___vfprintf_internal_r+0x1984>
   8f760:	d8812583 	ldbu	r2,1174(sp)
   8f764:	00c011c4 	movi	r3,71
   8f768:	1c830b16 	blt	r3,r18,90398 <___vfprintf_internal_r+0x1550>
   8f76c:	04c002b4 	movhi	r19,10
   8f770:	9cf4b104 	addi	r19,r19,-11580
   8f774:	020000c4 	movi	r8,3
   8f778:	00ffdfc4 	movi	r3,-129
   8f77c:	da012815 	stw	r8,1184(sp)
   8f780:	80e0703a 	and	r16,r16,r3
   8f784:	da012b15 	stw	r8,1196(sp)
   8f788:	d8013115 	stw	zero,1220(sp)
   8f78c:	003e9906 	br	8f1f4 <___vfprintf_internal_r+0x3ac>
   8f790:	d8812d17 	ldw	r2,1204(sp)
   8f794:	d8c12d17 	ldw	r3,1204(sp)
   8f798:	020002b4 	movhi	r8,10
   8f79c:	4234ba04 	addi	r8,r8,-11544
   8f7a0:	15c00017 	ldw	r23,0(r2)
   8f7a4:	00800c04 	movi	r2,48
   8f7a8:	18c00104 	addi	r3,r3,4
   8f7ac:	d8812505 	stb	r2,1172(sp)
   8f7b0:	00801e04 	movi	r2,120
   8f7b4:	d8812545 	stb	r2,1173(sp)
   8f7b8:	d8c12d15 	stw	r3,1204(sp)
   8f7bc:	002d883a 	mov	r22,zero
   8f7c0:	84000094 	ori	r16,r16,2
   8f7c4:	da013615 	stw	r8,1240(sp)
   8f7c8:	00c00084 	movi	r3,2
   8f7cc:	04801e04 	movi	r18,120
   8f7d0:	b805883a 	mov	r2,r23
   8f7d4:	d8012585 	stb	zero,1174(sp)
   8f7d8:	003e7206 	br	8f1a4 <___vfprintf_internal_r+0x35c>
   8f7dc:	84000814 	ori	r16,r16,32
   8f7e0:	ac800007 	ldb	r18,0(r21)
   8f7e4:	003df606 	br	8efc0 <___vfprintf_internal_r+0x178>
   8f7e8:	d8812d17 	ldw	r2,1204(sp)
   8f7ec:	d8012585 	stb	zero,1174(sp)
   8f7f0:	14c00017 	ldw	r19,0(r2)
   8f7f4:	15c00104 	addi	r23,r2,4
   8f7f8:	98040126 	beq	r19,zero,90800 <___vfprintf_internal_r+0x19b8>
   8f7fc:	9809883a 	mov	r4,r19
   8f800:	e003dd16 	blt	fp,zero,90778 <___vfprintf_internal_r+0x1930>
   8f804:	000b883a 	mov	r5,zero
   8f808:	e00d883a 	mov	r6,fp
   8f80c:	da413c15 	stw	r9,1264(sp)
   8f810:	008e2100 	call	8e210 <memchr>
   8f814:	da413c17 	ldw	r9,1264(sp)
   8f818:	10042e26 	beq	r2,zero,908d4 <___vfprintf_internal_r+0x1a8c>
   8f81c:	14c5c83a 	sub	r2,r2,r19
   8f820:	d8812b15 	stw	r2,1196(sp)
   8f824:	e083790e 	bge	fp,r2,9060c <___vfprintf_internal_r+0x17c4>
   8f828:	df012815 	stw	fp,1184(sp)
   8f82c:	e0049516 	blt	fp,zero,90a84 <___vfprintf_internal_r+0x1c3c>
   8f830:	d8812583 	ldbu	r2,1174(sp)
   8f834:	df012b15 	stw	fp,1196(sp)
   8f838:	ddc12d15 	stw	r23,1204(sp)
   8f83c:	d8013115 	stw	zero,1220(sp)
   8f840:	003e6c06 	br	8f1f4 <___vfprintf_internal_r+0x3ac>
   8f844:	020002b4 	movhi	r8,10
   8f848:	4234ba04 	addi	r8,r8,-11544
   8f84c:	da013615 	stw	r8,1240(sp)
   8f850:	8080080c 	andi	r2,r16,32
   8f854:	103f6a1e 	bne	r2,zero,8f600 <___vfprintf_internal_r+0x7b8>
   8f858:	8080040c 	andi	r2,r16,16
   8f85c:	10029326 	beq	r2,zero,902ac <___vfprintf_internal_r+0x1464>
   8f860:	d8c12d17 	ldw	r3,1204(sp)
   8f864:	002d883a 	mov	r22,zero
   8f868:	1dc00017 	ldw	r23,0(r3)
   8f86c:	18c00104 	addi	r3,r3,4
   8f870:	d8c12d15 	stw	r3,1204(sp)
   8f874:	003f6706 	br	8f614 <___vfprintf_internal_r+0x7cc>
   8f878:	84000214 	ori	r16,r16,8
   8f87c:	ac800007 	ldb	r18,0(r21)
   8f880:	003dcf06 	br	8efc0 <___vfprintf_internal_r+0x178>
   8f884:	da011d17 	ldw	r8,1140(sp)
   8f888:	d8c11c17 	ldw	r3,1136(sp)
   8f88c:	d8812587 	ldb	r2,1174(sp)
   8f890:	10000b26 	beq	r2,zero,8f8c0 <___vfprintf_internal_r+0xa78>
   8f894:	d8812584 	addi	r2,sp,1174
   8f898:	48800015 	stw	r2,0(r9)
   8f89c:	00800044 	movi	r2,1
   8f8a0:	48800115 	stw	r2,4(r9)
   8f8a4:	4091883a 	add	r8,r8,r2
   8f8a8:	1887883a 	add	r3,r3,r2
   8f8ac:	da011d15 	stw	r8,1140(sp)
   8f8b0:	d8c11c15 	stw	r3,1136(sp)
   8f8b4:	008001c4 	movi	r2,7
   8f8b8:	10c18516 	blt	r2,r3,8fed0 <___vfprintf_internal_r+0x1088>
   8f8bc:	4a400204 	addi	r9,r9,8
   8f8c0:	d9012a17 	ldw	r4,1192(sp)
   8f8c4:	20000b26 	beq	r4,zero,8f8f4 <___vfprintf_internal_r+0xaac>
   8f8c8:	d8812504 	addi	r2,sp,1172
   8f8cc:	48800015 	stw	r2,0(r9)
   8f8d0:	00800084 	movi	r2,2
   8f8d4:	48800115 	stw	r2,4(r9)
   8f8d8:	4091883a 	add	r8,r8,r2
   8f8dc:	18c00044 	addi	r3,r3,1
   8f8e0:	da011d15 	stw	r8,1140(sp)
   8f8e4:	d8c11c15 	stw	r3,1136(sp)
   8f8e8:	008001c4 	movi	r2,7
   8f8ec:	10c18116 	blt	r2,r3,8fef4 <___vfprintf_internal_r+0x10ac>
   8f8f0:	4a400204 	addi	r9,r9,8
   8f8f4:	d9012f17 	ldw	r4,1212(sp)
   8f8f8:	00802004 	movi	r2,128
   8f8fc:	2080fc26 	beq	r4,r2,8fcf0 <___vfprintf_internal_r+0xea8>
   8f900:	d8813117 	ldw	r2,1220(sp)
   8f904:	d9012b17 	ldw	r4,1196(sp)
   8f908:	112fc83a 	sub	r23,r2,r4
   8f90c:	05c02a0e 	bge	zero,r23,8f9b8 <___vfprintf_internal_r+0xb70>
   8f910:	07000404 	movi	fp,16
   8f914:	050002b4 	movhi	r20,10
   8f918:	a534c584 	addi	r20,r20,-11498
   8f91c:	e5c01d0e 	bge	fp,r23,8f994 <___vfprintf_internal_r+0xb4c>
   8f920:	dc812a15 	stw	r18,1192(sp)
   8f924:	058001c4 	movi	r22,7
   8f928:	a025883a 	mov	r18,r20
   8f92c:	8029883a 	mov	r20,r16
   8f930:	dc012917 	ldw	r16,1188(sp)
   8f934:	00000306 	br	8f944 <___vfprintf_internal_r+0xafc>
   8f938:	bdfffc04 	addi	r23,r23,-16
   8f93c:	4a400204 	addi	r9,r9,8
   8f940:	e5c0110e 	bge	fp,r23,8f988 <___vfprintf_internal_r+0xb40>
   8f944:	4c800015 	stw	r18,0(r9)
   8f948:	4f000115 	stw	fp,4(r9)
   8f94c:	42000404 	addi	r8,r8,16
   8f950:	18c00044 	addi	r3,r3,1
   8f954:	da011d15 	stw	r8,1140(sp)
   8f958:	d8c11c15 	stw	r3,1136(sp)
   8f95c:	b0fff60e 	bge	r22,r3,8f938 <___vfprintf_internal_r+0xaf0>
   8f960:	8809883a 	mov	r4,r17
   8f964:	800b883a 	mov	r5,r16
   8f968:	d9811b04 	addi	r6,sp,1132
   8f96c:	008ee140 	call	8ee14 <__sprint_r>
   8f970:	103ec81e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   8f974:	bdfffc04 	addi	r23,r23,-16
   8f978:	da011d17 	ldw	r8,1140(sp)
   8f97c:	d8c11c17 	ldw	r3,1136(sp)
   8f980:	da400404 	addi	r9,sp,16
   8f984:	e5ffef16 	blt	fp,r23,8f944 <___vfprintf_internal_r+0xafc>
   8f988:	a021883a 	mov	r16,r20
   8f98c:	9029883a 	mov	r20,r18
   8f990:	dc812a17 	ldw	r18,1192(sp)
   8f994:	4d000015 	stw	r20,0(r9)
   8f998:	4dc00115 	stw	r23,4(r9)
   8f99c:	45d1883a 	add	r8,r8,r23
   8f9a0:	18c00044 	addi	r3,r3,1
   8f9a4:	da011d15 	stw	r8,1140(sp)
   8f9a8:	d8c11c15 	stw	r3,1136(sp)
   8f9ac:	008001c4 	movi	r2,7
   8f9b0:	10c13e16 	blt	r2,r3,8feac <___vfprintf_internal_r+0x1064>
   8f9b4:	4a400204 	addi	r9,r9,8
   8f9b8:	8080400c 	andi	r2,r16,256
   8f9bc:	1000831e 	bne	r2,zero,8fbcc <___vfprintf_internal_r+0xd84>
   8f9c0:	d8812b17 	ldw	r2,1196(sp)
   8f9c4:	4cc00015 	stw	r19,0(r9)
   8f9c8:	48800115 	stw	r2,4(r9)
   8f9cc:	4091883a 	add	r8,r8,r2
   8f9d0:	18c00044 	addi	r3,r3,1
   8f9d4:	da011d15 	stw	r8,1140(sp)
   8f9d8:	d8c11c15 	stw	r3,1136(sp)
   8f9dc:	008001c4 	movi	r2,7
   8f9e0:	10c05316 	blt	r2,r3,8fb30 <___vfprintf_internal_r+0xce8>
   8f9e4:	4a400204 	addi	r9,r9,8
   8f9e8:	8400010c 	andi	r16,r16,4
   8f9ec:	80002e26 	beq	r16,zero,8faa8 <___vfprintf_internal_r+0xc60>
   8f9f0:	d8812e17 	ldw	r2,1208(sp)
   8f9f4:	d8c12817 	ldw	r3,1184(sp)
   8f9f8:	10e1c83a 	sub	r16,r2,r3
   8f9fc:	04002a0e 	bge	zero,r16,8faa8 <___vfprintf_internal_r+0xc60>
   8fa00:	04800404 	movi	r18,16
   8fa04:	d8c11c17 	ldw	r3,1136(sp)
   8fa08:	05c002b4 	movhi	r23,10
   8fa0c:	bdf4c184 	addi	r23,r23,-11514
   8fa10:	9400170e 	bge	r18,r16,8fa70 <___vfprintf_internal_r+0xc28>
   8fa14:	04c001c4 	movi	r19,7
   8fa18:	dd012917 	ldw	r20,1188(sp)
   8fa1c:	00000306 	br	8fa2c <___vfprintf_internal_r+0xbe4>
   8fa20:	843ffc04 	addi	r16,r16,-16
   8fa24:	4a400204 	addi	r9,r9,8
   8fa28:	9400110e 	bge	r18,r16,8fa70 <___vfprintf_internal_r+0xc28>
   8fa2c:	4dc00015 	stw	r23,0(r9)
   8fa30:	4c800115 	stw	r18,4(r9)
   8fa34:	42000404 	addi	r8,r8,16
   8fa38:	18c00044 	addi	r3,r3,1
   8fa3c:	da011d15 	stw	r8,1140(sp)
   8fa40:	d8c11c15 	stw	r3,1136(sp)
   8fa44:	98fff60e 	bge	r19,r3,8fa20 <___vfprintf_internal_r+0xbd8>
   8fa48:	8809883a 	mov	r4,r17
   8fa4c:	a00b883a 	mov	r5,r20
   8fa50:	d9811b04 	addi	r6,sp,1132
   8fa54:	008ee140 	call	8ee14 <__sprint_r>
   8fa58:	103e8e1e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   8fa5c:	843ffc04 	addi	r16,r16,-16
   8fa60:	da011d17 	ldw	r8,1140(sp)
   8fa64:	d8c11c17 	ldw	r3,1136(sp)
   8fa68:	da400404 	addi	r9,sp,16
   8fa6c:	943fef16 	blt	r18,r16,8fa2c <___vfprintf_internal_r+0xbe4>
   8fa70:	4dc00015 	stw	r23,0(r9)
   8fa74:	4c000115 	stw	r16,4(r9)
   8fa78:	8211883a 	add	r8,r16,r8
   8fa7c:	18c00044 	addi	r3,r3,1
   8fa80:	da011d15 	stw	r8,1140(sp)
   8fa84:	d8c11c15 	stw	r3,1136(sp)
   8fa88:	008001c4 	movi	r2,7
   8fa8c:	10c0060e 	bge	r2,r3,8faa8 <___vfprintf_internal_r+0xc60>
   8fa90:	d9412917 	ldw	r5,1188(sp)
   8fa94:	8809883a 	mov	r4,r17
   8fa98:	d9811b04 	addi	r6,sp,1132
   8fa9c:	008ee140 	call	8ee14 <__sprint_r>
   8faa0:	103e7c1e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   8faa4:	da011d17 	ldw	r8,1140(sp)
   8faa8:	dd012817 	ldw	r20,1184(sp)
   8faac:	d9012e17 	ldw	r4,1208(sp)
   8fab0:	a100010e 	bge	r20,r4,8fab8 <___vfprintf_internal_r+0xc70>
   8fab4:	2029883a 	mov	r20,r4
   8fab8:	d8812c17 	ldw	r2,1200(sp)
   8fabc:	1505883a 	add	r2,r2,r20
   8fac0:	d8812c15 	stw	r2,1200(sp)
   8fac4:	4000b91e 	bne	r8,zero,8fdac <___vfprintf_internal_r+0xf64>
   8fac8:	d8011c15 	stw	zero,1136(sp)
   8facc:	a8800007 	ldb	r2,0(r21)
   8fad0:	da400404 	addi	r9,sp,16
   8fad4:	103d141e 	bne	r2,zero,8ef28 <___vfprintf_internal_r+0xe0>
   8fad8:	a825883a 	mov	r18,r21
   8fadc:	003d2a06 	br	8ef88 <___vfprintf_internal_r+0x140>
   8fae0:	d9412917 	ldw	r5,1188(sp)
   8fae4:	8809883a 	mov	r4,r17
   8fae8:	d9811b04 	addi	r6,sp,1132
   8faec:	008ee140 	call	8ee14 <__sprint_r>
   8faf0:	103e681e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   8faf4:	da011d17 	ldw	r8,1140(sp)
   8faf8:	da400404 	addi	r9,sp,16
   8fafc:	8080004c 	andi	r2,r16,1
   8fb00:	103fb926 	beq	r2,zero,8f9e8 <___vfprintf_internal_r+0xba0>
   8fb04:	d8c11c17 	ldw	r3,1136(sp)
   8fb08:	d9013717 	ldw	r4,1244(sp)
   8fb0c:	00800044 	movi	r2,1
   8fb10:	48800115 	stw	r2,4(r9)
   8fb14:	49000015 	stw	r4,0(r9)
   8fb18:	4091883a 	add	r8,r8,r2
   8fb1c:	1887883a 	add	r3,r3,r2
   8fb20:	da011d15 	stw	r8,1140(sp)
   8fb24:	d8c11c15 	stw	r3,1136(sp)
   8fb28:	008001c4 	movi	r2,7
   8fb2c:	10ffad0e 	bge	r2,r3,8f9e4 <___vfprintf_internal_r+0xb9c>
   8fb30:	d9412917 	ldw	r5,1188(sp)
   8fb34:	8809883a 	mov	r4,r17
   8fb38:	d9811b04 	addi	r6,sp,1132
   8fb3c:	008ee140 	call	8ee14 <__sprint_r>
   8fb40:	103e541e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   8fb44:	da400404 	addi	r9,sp,16
   8fb48:	da011d17 	ldw	r8,1140(sp)
   8fb4c:	003fa606 	br	8f9e8 <___vfprintf_internal_r+0xba0>
   8fb50:	18803fcc 	andi	r2,r3,255
   8fb54:	00c00044 	movi	r3,1
   8fb58:	10c10126 	beq	r2,r3,8ff60 <___vfprintf_internal_r+0x1118>
   8fb5c:	00c00084 	movi	r3,2
   8fb60:	10c0f026 	beq	r2,r3,8ff24 <___vfprintf_internal_r+0x10dc>
   8fb64:	d8c10dc4 	addi	r3,sp,1079
   8fb68:	b808d0fa 	srli	r4,r23,3
   8fb6c:	b00a977a 	slli	r5,r22,29
   8fb70:	b02cd0fa 	srli	r22,r22,3
   8fb74:	bdc001cc 	andi	r23,r23,7
   8fb78:	b8800c04 	addi	r2,r23,48
   8fb7c:	292eb03a 	or	r23,r5,r4
   8fb80:	18800005 	stb	r2,0(r3)
   8fb84:	bd88b03a 	or	r4,r23,r22
   8fb88:	1827883a 	mov	r19,r3
   8fb8c:	18ffffc4 	addi	r3,r3,-1
   8fb90:	203ff51e 	bne	r4,zero,8fb68 <___vfprintf_internal_r+0xd20>
   8fb94:	8100004c 	andi	r4,r16,1
   8fb98:	980b883a 	mov	r5,r19
   8fb9c:	20000726 	beq	r4,zero,8fbbc <___vfprintf_internal_r+0xd74>
   8fba0:	10803fcc 	andi	r2,r2,255
   8fba4:	1080201c 	xori	r2,r2,128
   8fba8:	10bfe004 	addi	r2,r2,-128
   8fbac:	01000c04 	movi	r4,48
   8fbb0:	11000226 	beq	r2,r4,8fbbc <___vfprintf_internal_r+0xd74>
   8fbb4:	1827883a 	mov	r19,r3
   8fbb8:	293fffc5 	stb	r4,-1(r5)
   8fbbc:	d8812717 	ldw	r2,1180(sp)
   8fbc0:	14c5c83a 	sub	r2,r2,r19
   8fbc4:	d8812b15 	stw	r2,1196(sp)
   8fbc8:	003d8406 	br	8f1dc <___vfprintf_internal_r+0x394>
   8fbcc:	00801944 	movi	r2,101
   8fbd0:	14807c0e 	bge	r2,r18,8fdc4 <___vfprintf_internal_r+0xf7c>
   8fbd4:	d9013317 	ldw	r4,1228(sp)
   8fbd8:	d9413417 	ldw	r5,1232(sp)
   8fbdc:	000d883a 	mov	r6,zero
   8fbe0:	000f883a 	mov	r7,zero
   8fbe4:	d8c13b15 	stw	r3,1260(sp)
   8fbe8:	da013a15 	stw	r8,1256(sp)
   8fbec:	da413c15 	stw	r9,1264(sp)
   8fbf0:	00966d40 	call	966d4 <__eqdf2>
   8fbf4:	d8c13b17 	ldw	r3,1260(sp)
   8fbf8:	da013a17 	ldw	r8,1256(sp)
   8fbfc:	da413c17 	ldw	r9,1264(sp)
   8fc00:	1001001e 	bne	r2,zero,90004 <___vfprintf_internal_r+0x11bc>
   8fc04:	008002b4 	movhi	r2,10
   8fc08:	10b4c104 	addi	r2,r2,-11516
   8fc0c:	48800015 	stw	r2,0(r9)
   8fc10:	00800044 	movi	r2,1
   8fc14:	48800115 	stw	r2,4(r9)
   8fc18:	4091883a 	add	r8,r8,r2
   8fc1c:	1887883a 	add	r3,r3,r2
   8fc20:	da011d15 	stw	r8,1140(sp)
   8fc24:	d8c11c15 	stw	r3,1136(sp)
   8fc28:	008001c4 	movi	r2,7
   8fc2c:	10c1dd16 	blt	r2,r3,903a4 <___vfprintf_internal_r+0x155c>
   8fc30:	4a400204 	addi	r9,r9,8
   8fc34:	d8812417 	ldw	r2,1168(sp)
   8fc38:	d8c13217 	ldw	r3,1224(sp)
   8fc3c:	10c00216 	blt	r2,r3,8fc48 <___vfprintf_internal_r+0xe00>
   8fc40:	8080004c 	andi	r2,r16,1
   8fc44:	103f6826 	beq	r2,zero,8f9e8 <___vfprintf_internal_r+0xba0>
   8fc48:	d8c11c17 	ldw	r3,1136(sp)
   8fc4c:	d9013717 	ldw	r4,1244(sp)
   8fc50:	00800044 	movi	r2,1
   8fc54:	48800115 	stw	r2,4(r9)
   8fc58:	49000015 	stw	r4,0(r9)
   8fc5c:	4091883a 	add	r8,r8,r2
   8fc60:	1887883a 	add	r3,r3,r2
   8fc64:	da011d15 	stw	r8,1140(sp)
   8fc68:	d8c11c15 	stw	r3,1136(sp)
   8fc6c:	008001c4 	movi	r2,7
   8fc70:	10c2af16 	blt	r2,r3,90730 <___vfprintf_internal_r+0x18e8>
   8fc74:	4a400204 	addi	r9,r9,8
   8fc78:	d8813217 	ldw	r2,1224(sp)
   8fc7c:	14bfffc4 	addi	r18,r2,-1
   8fc80:	04bf590e 	bge	zero,r18,8f9e8 <___vfprintf_internal_r+0xba0>
   8fc84:	04c00404 	movi	r19,16
   8fc88:	d8c11c17 	ldw	r3,1136(sp)
   8fc8c:	050002b4 	movhi	r20,10
   8fc90:	a534c584 	addi	r20,r20,-11498
   8fc94:	9c81630e 	bge	r19,r18,90224 <___vfprintf_internal_r+0x13dc>
   8fc98:	058001c4 	movi	r22,7
   8fc9c:	ddc12917 	ldw	r23,1188(sp)
   8fca0:	00000306 	br	8fcb0 <___vfprintf_internal_r+0xe68>
   8fca4:	4a400204 	addi	r9,r9,8
   8fca8:	94bffc04 	addi	r18,r18,-16
   8fcac:	9c815d0e 	bge	r19,r18,90224 <___vfprintf_internal_r+0x13dc>
   8fcb0:	4d000015 	stw	r20,0(r9)
   8fcb4:	4cc00115 	stw	r19,4(r9)
   8fcb8:	42000404 	addi	r8,r8,16
   8fcbc:	18c00044 	addi	r3,r3,1
   8fcc0:	da011d15 	stw	r8,1140(sp)
   8fcc4:	d8c11c15 	stw	r3,1136(sp)
   8fcc8:	b0fff60e 	bge	r22,r3,8fca4 <___vfprintf_internal_r+0xe5c>
   8fccc:	8809883a 	mov	r4,r17
   8fcd0:	b80b883a 	mov	r5,r23
   8fcd4:	d9811b04 	addi	r6,sp,1132
   8fcd8:	008ee140 	call	8ee14 <__sprint_r>
   8fcdc:	103ded1e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   8fce0:	da011d17 	ldw	r8,1140(sp)
   8fce4:	d8c11c17 	ldw	r3,1136(sp)
   8fce8:	da400404 	addi	r9,sp,16
   8fcec:	003fee06 	br	8fca8 <___vfprintf_internal_r+0xe60>
   8fcf0:	d8812e17 	ldw	r2,1208(sp)
   8fcf4:	d9012817 	ldw	r4,1184(sp)
   8fcf8:	112fc83a 	sub	r23,r2,r4
   8fcfc:	05ff000e 	bge	zero,r23,8f900 <___vfprintf_internal_r+0xab8>
   8fd00:	07000404 	movi	fp,16
   8fd04:	050002b4 	movhi	r20,10
   8fd08:	a534c584 	addi	r20,r20,-11498
   8fd0c:	e5c01d0e 	bge	fp,r23,8fd84 <___vfprintf_internal_r+0xf3c>
   8fd10:	dc812a15 	stw	r18,1192(sp)
   8fd14:	058001c4 	movi	r22,7
   8fd18:	a025883a 	mov	r18,r20
   8fd1c:	8029883a 	mov	r20,r16
   8fd20:	dc012917 	ldw	r16,1188(sp)
   8fd24:	00000306 	br	8fd34 <___vfprintf_internal_r+0xeec>
   8fd28:	bdfffc04 	addi	r23,r23,-16
   8fd2c:	4a400204 	addi	r9,r9,8
   8fd30:	e5c0110e 	bge	fp,r23,8fd78 <___vfprintf_internal_r+0xf30>
   8fd34:	4c800015 	stw	r18,0(r9)
   8fd38:	4f000115 	stw	fp,4(r9)
   8fd3c:	42000404 	addi	r8,r8,16
   8fd40:	18c00044 	addi	r3,r3,1
   8fd44:	da011d15 	stw	r8,1140(sp)
   8fd48:	d8c11c15 	stw	r3,1136(sp)
   8fd4c:	b0fff60e 	bge	r22,r3,8fd28 <___vfprintf_internal_r+0xee0>
   8fd50:	8809883a 	mov	r4,r17
   8fd54:	800b883a 	mov	r5,r16
   8fd58:	d9811b04 	addi	r6,sp,1132
   8fd5c:	008ee140 	call	8ee14 <__sprint_r>
   8fd60:	103dcc1e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   8fd64:	bdfffc04 	addi	r23,r23,-16
   8fd68:	da011d17 	ldw	r8,1140(sp)
   8fd6c:	d8c11c17 	ldw	r3,1136(sp)
   8fd70:	da400404 	addi	r9,sp,16
   8fd74:	e5ffef16 	blt	fp,r23,8fd34 <___vfprintf_internal_r+0xeec>
   8fd78:	a021883a 	mov	r16,r20
   8fd7c:	9029883a 	mov	r20,r18
   8fd80:	dc812a17 	ldw	r18,1192(sp)
   8fd84:	4d000015 	stw	r20,0(r9)
   8fd88:	4dc00115 	stw	r23,4(r9)
   8fd8c:	45d1883a 	add	r8,r8,r23
   8fd90:	18c00044 	addi	r3,r3,1
   8fd94:	da011d15 	stw	r8,1140(sp)
   8fd98:	d8c11c15 	stw	r3,1136(sp)
   8fd9c:	008001c4 	movi	r2,7
   8fda0:	10c11716 	blt	r2,r3,90200 <___vfprintf_internal_r+0x13b8>
   8fda4:	4a400204 	addi	r9,r9,8
   8fda8:	003ed506 	br	8f900 <___vfprintf_internal_r+0xab8>
   8fdac:	d9412917 	ldw	r5,1188(sp)
   8fdb0:	8809883a 	mov	r4,r17
   8fdb4:	d9811b04 	addi	r6,sp,1132
   8fdb8:	008ee140 	call	8ee14 <__sprint_r>
   8fdbc:	103f4226 	beq	r2,zero,8fac8 <___vfprintf_internal_r+0xc80>
   8fdc0:	003db406 	br	8f494 <___vfprintf_internal_r+0x64c>
   8fdc4:	d9013217 	ldw	r4,1224(sp)
   8fdc8:	00800044 	movi	r2,1
   8fdcc:	4cc00015 	stw	r19,0(r9)
   8fdd0:	1100e10e 	bge	r2,r4,90158 <___vfprintf_internal_r+0x1310>
   8fdd4:	00800044 	movi	r2,1
   8fdd8:	48800115 	stw	r2,4(r9)
   8fddc:	4091883a 	add	r8,r8,r2
   8fde0:	1887883a 	add	r3,r3,r2
   8fde4:	da011d15 	stw	r8,1140(sp)
   8fde8:	d8c11c15 	stw	r3,1136(sp)
   8fdec:	008001c4 	movi	r2,7
   8fdf0:	10c0ed16 	blt	r2,r3,901a8 <___vfprintf_internal_r+0x1360>
   8fdf4:	4a400204 	addi	r9,r9,8
   8fdf8:	d8813717 	ldw	r2,1244(sp)
   8fdfc:	48800015 	stw	r2,0(r9)
   8fe00:	00800044 	movi	r2,1
   8fe04:	48800115 	stw	r2,4(r9)
   8fe08:	4091883a 	add	r8,r8,r2
   8fe0c:	1887883a 	add	r3,r3,r2
   8fe10:	da011d15 	stw	r8,1140(sp)
   8fe14:	d8c11c15 	stw	r3,1136(sp)
   8fe18:	008001c4 	movi	r2,7
   8fe1c:	10c0eb16 	blt	r2,r3,901cc <___vfprintf_internal_r+0x1384>
   8fe20:	4c800204 	addi	r18,r9,8
   8fe24:	d9013317 	ldw	r4,1228(sp)
   8fe28:	d9413417 	ldw	r5,1232(sp)
   8fe2c:	000d883a 	mov	r6,zero
   8fe30:	000f883a 	mov	r7,zero
   8fe34:	d8c13b15 	stw	r3,1260(sp)
   8fe38:	da013a15 	stw	r8,1256(sp)
   8fe3c:	00967300 	call	96730 <__nedf2>
   8fe40:	d8c13b17 	ldw	r3,1260(sp)
   8fe44:	da013a17 	ldw	r8,1256(sp)
   8fe48:	1000a626 	beq	r2,zero,900e4 <___vfprintf_internal_r+0x129c>
   8fe4c:	d9013217 	ldw	r4,1224(sp)
   8fe50:	9cc00044 	addi	r19,r19,1
   8fe54:	94c00015 	stw	r19,0(r18)
   8fe58:	20bfffc4 	addi	r2,r4,-1
   8fe5c:	90800115 	stw	r2,4(r18)
   8fe60:	4091883a 	add	r8,r8,r2
   8fe64:	18c00044 	addi	r3,r3,1
   8fe68:	da011d15 	stw	r8,1140(sp)
   8fe6c:	d8c11c15 	stw	r3,1136(sp)
   8fe70:	008001c4 	movi	r2,7
   8fe74:	10c0c316 	blt	r2,r3,90184 <___vfprintf_internal_r+0x133c>
   8fe78:	94800204 	addi	r18,r18,8
   8fe7c:	d9013517 	ldw	r4,1236(sp)
   8fe80:	d8811fc4 	addi	r2,sp,1151
   8fe84:	90800015 	stw	r2,0(r18)
   8fe88:	91000115 	stw	r4,4(r18)
   8fe8c:	4111883a 	add	r8,r8,r4
   8fe90:	18c00044 	addi	r3,r3,1
   8fe94:	da011d15 	stw	r8,1140(sp)
   8fe98:	d8c11c15 	stw	r3,1136(sp)
   8fe9c:	008001c4 	movi	r2,7
   8fea0:	10ff2316 	blt	r2,r3,8fb30 <___vfprintf_internal_r+0xce8>
   8fea4:	92400204 	addi	r9,r18,8
   8fea8:	003ecf06 	br	8f9e8 <___vfprintf_internal_r+0xba0>
   8feac:	d9412917 	ldw	r5,1188(sp)
   8feb0:	8809883a 	mov	r4,r17
   8feb4:	d9811b04 	addi	r6,sp,1132
   8feb8:	008ee140 	call	8ee14 <__sprint_r>
   8febc:	103d751e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   8fec0:	da011d17 	ldw	r8,1140(sp)
   8fec4:	d8c11c17 	ldw	r3,1136(sp)
   8fec8:	da400404 	addi	r9,sp,16
   8fecc:	003eba06 	br	8f9b8 <___vfprintf_internal_r+0xb70>
   8fed0:	d9412917 	ldw	r5,1188(sp)
   8fed4:	8809883a 	mov	r4,r17
   8fed8:	d9811b04 	addi	r6,sp,1132
   8fedc:	008ee140 	call	8ee14 <__sprint_r>
   8fee0:	103d6c1e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   8fee4:	da011d17 	ldw	r8,1140(sp)
   8fee8:	d8c11c17 	ldw	r3,1136(sp)
   8feec:	da400404 	addi	r9,sp,16
   8fef0:	003e7306 	br	8f8c0 <___vfprintf_internal_r+0xa78>
   8fef4:	d9412917 	ldw	r5,1188(sp)
   8fef8:	8809883a 	mov	r4,r17
   8fefc:	d9811b04 	addi	r6,sp,1132
   8ff00:	008ee140 	call	8ee14 <__sprint_r>
   8ff04:	103d631e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   8ff08:	da011d17 	ldw	r8,1140(sp)
   8ff0c:	d8c11c17 	ldw	r3,1136(sp)
   8ff10:	da400404 	addi	r9,sp,16
   8ff14:	003e7706 	br	8f8f4 <___vfprintf_internal_r+0xaac>
   8ff18:	d8012b15 	stw	zero,1196(sp)
   8ff1c:	dcc10e04 	addi	r19,sp,1080
   8ff20:	003cae06 	br	8f1dc <___vfprintf_internal_r+0x394>
   8ff24:	d9413617 	ldw	r5,1240(sp)
   8ff28:	d8810dc4 	addi	r2,sp,1079
   8ff2c:	b8c003cc 	andi	r3,r23,15
   8ff30:	b008973a 	slli	r4,r22,28
   8ff34:	28c7883a 	add	r3,r5,r3
   8ff38:	b82ed13a 	srli	r23,r23,4
   8ff3c:	18c00003 	ldbu	r3,0(r3)
   8ff40:	b02cd13a 	srli	r22,r22,4
   8ff44:	25eeb03a 	or	r23,r4,r23
   8ff48:	10c00005 	stb	r3,0(r2)
   8ff4c:	bd86b03a 	or	r3,r23,r22
   8ff50:	1027883a 	mov	r19,r2
   8ff54:	10bfffc4 	addi	r2,r2,-1
   8ff58:	183ff41e 	bne	r3,zero,8ff2c <___vfprintf_internal_r+0x10e4>
   8ff5c:	003f1706 	br	8fbbc <___vfprintf_internal_r+0xd74>
   8ff60:	b0025826 	beq	r22,zero,908c4 <___vfprintf_internal_r+0x1a7c>
   8ff64:	b807883a 	mov	r3,r23
   8ff68:	d8810dc4 	addi	r2,sp,1079
   8ff6c:	882f883a 	mov	r23,r17
   8ff70:	04c00244 	movi	r19,9
   8ff74:	8023883a 	mov	r17,r16
   8ff78:	da412815 	stw	r9,1184(sp)
   8ff7c:	1821883a 	mov	r16,r3
   8ff80:	8009883a 	mov	r4,r16
   8ff84:	b00b883a 	mov	r5,r22
   8ff88:	01800284 	movi	r6,10
   8ff8c:	000f883a 	mov	r7,zero
   8ff90:	1029883a 	mov	r20,r2
   8ff94:	00958a80 	call	958a8 <__umoddi3>
   8ff98:	10800c04 	addi	r2,r2,48
   8ff9c:	8009883a 	mov	r4,r16
   8ffa0:	b00b883a 	mov	r5,r22
   8ffa4:	a0800005 	stb	r2,0(r20)
   8ffa8:	01800284 	movi	r6,10
   8ffac:	000f883a 	mov	r7,zero
   8ffb0:	00952e00 	call	952e0 <__udivdi3>
   8ffb4:	1021883a 	mov	r16,r2
   8ffb8:	182d883a 	mov	r22,r3
   8ffbc:	a0bfffc4 	addi	r2,r20,-1
   8ffc0:	183fef1e 	bne	r3,zero,8ff80 <___vfprintf_internal_r+0x1138>
   8ffc4:	9c3fee36 	bltu	r19,r16,8ff80 <___vfprintf_internal_r+0x1138>
   8ffc8:	da412817 	ldw	r9,1184(sp)
   8ffcc:	8005883a 	mov	r2,r16
   8ffd0:	8821883a 	mov	r16,r17
   8ffd4:	b823883a 	mov	r17,r23
   8ffd8:	102f883a 	mov	r23,r2
   8ffdc:	d8812717 	ldw	r2,1180(sp)
   8ffe0:	a4ffffc4 	addi	r19,r20,-1
   8ffe4:	bdc00c04 	addi	r23,r23,48
   8ffe8:	14c5c83a 	sub	r2,r2,r19
   8ffec:	a5ffffc5 	stb	r23,-1(r20)
   8fff0:	d8812b15 	stw	r2,1196(sp)
   8fff4:	003c7906 	br	8f1dc <___vfprintf_internal_r+0x394>
   8fff8:	00c00044 	movi	r3,1
   8fffc:	bd84b03a 	or	r2,r23,r22
   90000:	003c6806 	br	8f1a4 <___vfprintf_internal_r+0x35c>
   90004:	dc812417 	ldw	r18,1168(sp)
   90008:	0480ee0e 	bge	zero,r18,903c4 <___vfprintf_internal_r+0x157c>
   9000c:	d9013217 	ldw	r4,1224(sp)
   90010:	4cc00015 	stw	r19,0(r9)
   90014:	9100c616 	blt	r18,r4,90330 <___vfprintf_internal_r+0x14e8>
   90018:	49000115 	stw	r4,4(r9)
   9001c:	4111883a 	add	r8,r8,r4
   90020:	18c00044 	addi	r3,r3,1
   90024:	da011d15 	stw	r8,1140(sp)
   90028:	d8c11c15 	stw	r3,1136(sp)
   9002c:	008001c4 	movi	r2,7
   90030:	10c20916 	blt	r2,r3,90858 <___vfprintf_internal_r+0x1a10>
   90034:	4a400204 	addi	r9,r9,8
   90038:	d8813217 	ldw	r2,1224(sp)
   9003c:	90a5c83a 	sub	r18,r18,r2
   90040:	04beae0e 	bge	zero,r18,8fafc <___vfprintf_internal_r+0xcb4>
   90044:	04c00404 	movi	r19,16
   90048:	d8c11c17 	ldw	r3,1136(sp)
   9004c:	050002b4 	movhi	r20,10
   90050:	a534c584 	addi	r20,r20,-11498
   90054:	9c81be0e 	bge	r19,r18,90750 <___vfprintf_internal_r+0x1908>
   90058:	058001c4 	movi	r22,7
   9005c:	ddc12917 	ldw	r23,1188(sp)
   90060:	00000306 	br	90070 <___vfprintf_internal_r+0x1228>
   90064:	4a400204 	addi	r9,r9,8
   90068:	94bffc04 	addi	r18,r18,-16
   9006c:	9c81b80e 	bge	r19,r18,90750 <___vfprintf_internal_r+0x1908>
   90070:	4d000015 	stw	r20,0(r9)
   90074:	4cc00115 	stw	r19,4(r9)
   90078:	42000404 	addi	r8,r8,16
   9007c:	18c00044 	addi	r3,r3,1
   90080:	da011d15 	stw	r8,1140(sp)
   90084:	d8c11c15 	stw	r3,1136(sp)
   90088:	b0fff60e 	bge	r22,r3,90064 <___vfprintf_internal_r+0x121c>
   9008c:	8809883a 	mov	r4,r17
   90090:	b80b883a 	mov	r5,r23
   90094:	d9811b04 	addi	r6,sp,1132
   90098:	008ee140 	call	8ee14 <__sprint_r>
   9009c:	103cfd1e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   900a0:	da011d17 	ldw	r8,1140(sp)
   900a4:	d8c11c17 	ldw	r3,1136(sp)
   900a8:	da400404 	addi	r9,sp,16
   900ac:	003fee06 	br	90068 <___vfprintf_internal_r+0x1220>
   900b0:	d9412917 	ldw	r5,1188(sp)
   900b4:	8809883a 	mov	r4,r17
   900b8:	d9811b04 	addi	r6,sp,1132
   900bc:	008ee140 	call	8ee14 <__sprint_r>
   900c0:	103cf41e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   900c4:	da011d17 	ldw	r8,1140(sp)
   900c8:	d8c11c17 	ldw	r3,1136(sp)
   900cc:	da400404 	addi	r9,sp,16
   900d0:	003dee06 	br	8f88c <___vfprintf_internal_r+0xa44>
   900d4:	00c00084 	movi	r3,2
   900d8:	bd84b03a 	or	r2,r23,r22
   900dc:	d8012585 	stb	zero,1174(sp)
   900e0:	003c3006 	br	8f1a4 <___vfprintf_internal_r+0x35c>
   900e4:	d8813217 	ldw	r2,1224(sp)
   900e8:	14ffffc4 	addi	r19,r2,-1
   900ec:	04ff630e 	bge	zero,r19,8fe7c <___vfprintf_internal_r+0x1034>
   900f0:	05800404 	movi	r22,16
   900f4:	050002b4 	movhi	r20,10
   900f8:	a534c584 	addi	r20,r20,-11498
   900fc:	b4c03c0e 	bge	r22,r19,901f0 <___vfprintf_internal_r+0x13a8>
   90100:	05c001c4 	movi	r23,7
   90104:	df012917 	ldw	fp,1188(sp)
   90108:	00000306 	br	90118 <___vfprintf_internal_r+0x12d0>
   9010c:	94800204 	addi	r18,r18,8
   90110:	9cfffc04 	addi	r19,r19,-16
   90114:	b4c0360e 	bge	r22,r19,901f0 <___vfprintf_internal_r+0x13a8>
   90118:	95000015 	stw	r20,0(r18)
   9011c:	95800115 	stw	r22,4(r18)
   90120:	42000404 	addi	r8,r8,16
   90124:	18c00044 	addi	r3,r3,1
   90128:	da011d15 	stw	r8,1140(sp)
   9012c:	d8c11c15 	stw	r3,1136(sp)
   90130:	b8fff60e 	bge	r23,r3,9010c <___vfprintf_internal_r+0x12c4>
   90134:	8809883a 	mov	r4,r17
   90138:	e00b883a 	mov	r5,fp
   9013c:	d9811b04 	addi	r6,sp,1132
   90140:	008ee140 	call	8ee14 <__sprint_r>
   90144:	103cd31e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   90148:	da011d17 	ldw	r8,1140(sp)
   9014c:	d8c11c17 	ldw	r3,1136(sp)
   90150:	dc800404 	addi	r18,sp,16
   90154:	003fee06 	br	90110 <___vfprintf_internal_r+0x12c8>
   90158:	8088703a 	and	r4,r16,r2
   9015c:	203f1d1e 	bne	r4,zero,8fdd4 <___vfprintf_internal_r+0xf8c>
   90160:	48800115 	stw	r2,4(r9)
   90164:	42000044 	addi	r8,r8,1
   90168:	18c00044 	addi	r3,r3,1
   9016c:	da011d15 	stw	r8,1140(sp)
   90170:	d8c11c15 	stw	r3,1136(sp)
   90174:	008001c4 	movi	r2,7
   90178:	10c00216 	blt	r2,r3,90184 <___vfprintf_internal_r+0x133c>
   9017c:	4c800204 	addi	r18,r9,8
   90180:	003f3e06 	br	8fe7c <___vfprintf_internal_r+0x1034>
   90184:	d9412917 	ldw	r5,1188(sp)
   90188:	8809883a 	mov	r4,r17
   9018c:	d9811b04 	addi	r6,sp,1132
   90190:	008ee140 	call	8ee14 <__sprint_r>
   90194:	103cbf1e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   90198:	dc800404 	addi	r18,sp,16
   9019c:	da011d17 	ldw	r8,1140(sp)
   901a0:	d8c11c17 	ldw	r3,1136(sp)
   901a4:	003f3506 	br	8fe7c <___vfprintf_internal_r+0x1034>
   901a8:	d9412917 	ldw	r5,1188(sp)
   901ac:	8809883a 	mov	r4,r17
   901b0:	d9811b04 	addi	r6,sp,1132
   901b4:	008ee140 	call	8ee14 <__sprint_r>
   901b8:	103cb61e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   901bc:	da011d17 	ldw	r8,1140(sp)
   901c0:	d8c11c17 	ldw	r3,1136(sp)
   901c4:	da400404 	addi	r9,sp,16
   901c8:	003f0b06 	br	8fdf8 <___vfprintf_internal_r+0xfb0>
   901cc:	d9412917 	ldw	r5,1188(sp)
   901d0:	8809883a 	mov	r4,r17
   901d4:	d9811b04 	addi	r6,sp,1132
   901d8:	008ee140 	call	8ee14 <__sprint_r>
   901dc:	103cad1e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   901e0:	da011d17 	ldw	r8,1140(sp)
   901e4:	d8c11c17 	ldw	r3,1136(sp)
   901e8:	dc800404 	addi	r18,sp,16
   901ec:	003f0d06 	br	8fe24 <___vfprintf_internal_r+0xfdc>
   901f0:	95000015 	stw	r20,0(r18)
   901f4:	94c00115 	stw	r19,4(r18)
   901f8:	44d1883a 	add	r8,r8,r19
   901fc:	003f1906 	br	8fe64 <___vfprintf_internal_r+0x101c>
   90200:	d9412917 	ldw	r5,1188(sp)
   90204:	8809883a 	mov	r4,r17
   90208:	d9811b04 	addi	r6,sp,1132
   9020c:	008ee140 	call	8ee14 <__sprint_r>
   90210:	103ca01e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   90214:	da011d17 	ldw	r8,1140(sp)
   90218:	d8c11c17 	ldw	r3,1136(sp)
   9021c:	da400404 	addi	r9,sp,16
   90220:	003db706 	br	8f900 <___vfprintf_internal_r+0xab8>
   90224:	4d000015 	stw	r20,0(r9)
   90228:	4c800115 	stw	r18,4(r9)
   9022c:	4491883a 	add	r8,r8,r18
   90230:	003de706 	br	8f9d0 <___vfprintf_internal_r+0xb88>
   90234:	8080100c 	andi	r2,r16,64
   90238:	10010226 	beq	r2,zero,90644 <___vfprintf_internal_r+0x17fc>
   9023c:	d8812d17 	ldw	r2,1204(sp)
   90240:	002d883a 	mov	r22,zero
   90244:	00c00044 	movi	r3,1
   90248:	15c0000b 	ldhu	r23,0(r2)
   9024c:	10800104 	addi	r2,r2,4
   90250:	d8812d15 	stw	r2,1204(sp)
   90254:	d8012585 	stb	zero,1174(sp)
   90258:	b805883a 	mov	r2,r23
   9025c:	003bd106 	br	8f1a4 <___vfprintf_internal_r+0x35c>
   90260:	d9012d17 	ldw	r4,1204(sp)
   90264:	25800017 	ldw	r22,0(r4)
   90268:	25000117 	ldw	r20,4(r4)
   9026c:	21000204 	addi	r4,r4,8
   90270:	d9012d15 	stw	r4,1204(sp)
   90274:	dd813315 	stw	r22,1228(sp)
   90278:	dd013415 	stw	r20,1232(sp)
   9027c:	003d2b06 	br	8f72c <___vfprintf_internal_r+0x8e4>
   90280:	8080100c 	andi	r2,r16,64
   90284:	1000fe26 	beq	r2,zero,90680 <___vfprintf_internal_r+0x1838>
   90288:	d9012d17 	ldw	r4,1204(sp)
   9028c:	002d883a 	mov	r22,zero
   90290:	0007883a 	mov	r3,zero
   90294:	25c0000b 	ldhu	r23,0(r4)
   90298:	21000104 	addi	r4,r4,4
   9029c:	d9012d15 	stw	r4,1204(sp)
   902a0:	b805883a 	mov	r2,r23
   902a4:	d8012585 	stb	zero,1174(sp)
   902a8:	003bbe06 	br	8f1a4 <___vfprintf_internal_r+0x35c>
   902ac:	8080100c 	andi	r2,r16,64
   902b0:	1000ed26 	beq	r2,zero,90668 <___vfprintf_internal_r+0x1820>
   902b4:	d9012d17 	ldw	r4,1204(sp)
   902b8:	002d883a 	mov	r22,zero
   902bc:	25c0000b 	ldhu	r23,0(r4)
   902c0:	21000104 	addi	r4,r4,4
   902c4:	d9012d15 	stw	r4,1204(sp)
   902c8:	003cd206 	br	8f614 <___vfprintf_internal_r+0x7cc>
   902cc:	00c00084 	movi	r3,2
   902d0:	d8012585 	stb	zero,1174(sp)
   902d4:	003bb306 	br	8f1a4 <___vfprintf_internal_r+0x35c>
   902d8:	8080040c 	andi	r2,r16,16
   902dc:	1000f11e 	bne	r2,zero,906a4 <___vfprintf_internal_r+0x185c>
   902e0:	8400100c 	andi	r16,r16,64
   902e4:	80015526 	beq	r16,zero,9083c <___vfprintf_internal_r+0x19f4>
   902e8:	da012d17 	ldw	r8,1204(sp)
   902ec:	d8c12c17 	ldw	r3,1200(sp)
   902f0:	40800017 	ldw	r2,0(r8)
   902f4:	42000104 	addi	r8,r8,4
   902f8:	da012d15 	stw	r8,1204(sp)
   902fc:	10c0000d 	sth	r3,0(r2)
   90300:	003b0706 	br	8ef20 <___vfprintf_internal_r+0xd8>
   90304:	8080100c 	andi	r2,r16,64
   90308:	1000c726 	beq	r2,zero,90628 <___vfprintf_internal_r+0x17e0>
   9030c:	da012d17 	ldw	r8,1204(sp)
   90310:	45c0000f 	ldh	r23,0(r8)
   90314:	42000104 	addi	r8,r8,4
   90318:	da012d15 	stw	r8,1204(sp)
   9031c:	b82dd7fa 	srai	r22,r23,31
   90320:	b005883a 	mov	r2,r22
   90324:	003c1006 	br	8f368 <___vfprintf_internal_r+0x520>
   90328:	ac800007 	ldb	r18,0(r21)
   9032c:	003b2406 	br	8efc0 <___vfprintf_internal_r+0x178>
   90330:	4c800115 	stw	r18,4(r9)
   90334:	9211883a 	add	r8,r18,r8
   90338:	18c00044 	addi	r3,r3,1
   9033c:	da011d15 	stw	r8,1140(sp)
   90340:	d8c11c15 	stw	r3,1136(sp)
   90344:	008001c4 	movi	r2,7
   90348:	10c15416 	blt	r2,r3,9089c <___vfprintf_internal_r+0x1a54>
   9034c:	4a400204 	addi	r9,r9,8
   90350:	d8813717 	ldw	r2,1244(sp)
   90354:	9ca7883a 	add	r19,r19,r18
   90358:	48800015 	stw	r2,0(r9)
   9035c:	00800044 	movi	r2,1
   90360:	48800115 	stw	r2,4(r9)
   90364:	4091883a 	add	r8,r8,r2
   90368:	1887883a 	add	r3,r3,r2
   9036c:	da011d15 	stw	r8,1140(sp)
   90370:	d8c11c15 	stw	r3,1136(sp)
   90374:	008001c4 	movi	r2,7
   90378:	10c14016 	blt	r2,r3,9087c <___vfprintf_internal_r+0x1a34>
   9037c:	4a400204 	addi	r9,r9,8
   90380:	d9013217 	ldw	r4,1224(sp)
   90384:	da011d17 	ldw	r8,1140(sp)
   90388:	d8c11c17 	ldw	r3,1136(sp)
   9038c:	24a5c83a 	sub	r18,r4,r18
   90390:	4cc00015 	stw	r19,0(r9)
   90394:	003fa406 	br	90228 <___vfprintf_internal_r+0x13e0>
   90398:	04c002b4 	movhi	r19,10
   9039c:	9cf4b204 	addi	r19,r19,-11576
   903a0:	003cf406 	br	8f774 <___vfprintf_internal_r+0x92c>
   903a4:	d9412917 	ldw	r5,1188(sp)
   903a8:	8809883a 	mov	r4,r17
   903ac:	d9811b04 	addi	r6,sp,1132
   903b0:	008ee140 	call	8ee14 <__sprint_r>
   903b4:	103c371e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   903b8:	da011d17 	ldw	r8,1140(sp)
   903bc:	da400404 	addi	r9,sp,16
   903c0:	003e1c06 	br	8fc34 <___vfprintf_internal_r+0xdec>
   903c4:	008002b4 	movhi	r2,10
   903c8:	10b4c104 	addi	r2,r2,-11516
   903cc:	48800015 	stw	r2,0(r9)
   903d0:	00800044 	movi	r2,1
   903d4:	48800115 	stw	r2,4(r9)
   903d8:	4091883a 	add	r8,r8,r2
   903dc:	1887883a 	add	r3,r3,r2
   903e0:	da011d15 	stw	r8,1140(sp)
   903e4:	d8c11c15 	stw	r3,1136(sp)
   903e8:	008001c4 	movi	r2,7
   903ec:	10c0c316 	blt	r2,r3,906fc <___vfprintf_internal_r+0x18b4>
   903f0:	4a400204 	addi	r9,r9,8
   903f4:	9000041e 	bne	r18,zero,90408 <___vfprintf_internal_r+0x15c0>
   903f8:	d8c13217 	ldw	r3,1224(sp)
   903fc:	1800021e 	bne	r3,zero,90408 <___vfprintf_internal_r+0x15c0>
   90400:	8080004c 	andi	r2,r16,1
   90404:	103d7826 	beq	r2,zero,8f9e8 <___vfprintf_internal_r+0xba0>
   90408:	d8c11c17 	ldw	r3,1136(sp)
   9040c:	d9013717 	ldw	r4,1244(sp)
   90410:	00800044 	movi	r2,1
   90414:	48800115 	stw	r2,4(r9)
   90418:	49000015 	stw	r4,0(r9)
   9041c:	4091883a 	add	r8,r8,r2
   90420:	1887883a 	add	r3,r3,r2
   90424:	da011d15 	stw	r8,1140(sp)
   90428:	d8c11c15 	stw	r3,1136(sp)
   9042c:	008001c4 	movi	r2,7
   90430:	10c12e16 	blt	r2,r3,908ec <___vfprintf_internal_r+0x1aa4>
   90434:	4a400204 	addi	r9,r9,8
   90438:	04a5c83a 	sub	r18,zero,r18
   9043c:	0480de0e 	bge	zero,r18,907b8 <___vfprintf_internal_r+0x1970>
   90440:	05800404 	movi	r22,16
   90444:	050002b4 	movhi	r20,10
   90448:	a534c584 	addi	r20,r20,-11498
   9044c:	b480e20e 	bge	r22,r18,907d8 <___vfprintf_internal_r+0x1990>
   90450:	05c001c4 	movi	r23,7
   90454:	df012917 	ldw	fp,1188(sp)
   90458:	00000306 	br	90468 <___vfprintf_internal_r+0x1620>
   9045c:	4a400204 	addi	r9,r9,8
   90460:	94bffc04 	addi	r18,r18,-16
   90464:	b480dc0e 	bge	r22,r18,907d8 <___vfprintf_internal_r+0x1990>
   90468:	4d000015 	stw	r20,0(r9)
   9046c:	4d800115 	stw	r22,4(r9)
   90470:	42000404 	addi	r8,r8,16
   90474:	18c00044 	addi	r3,r3,1
   90478:	da011d15 	stw	r8,1140(sp)
   9047c:	d8c11c15 	stw	r3,1136(sp)
   90480:	b8fff60e 	bge	r23,r3,9045c <___vfprintf_internal_r+0x1614>
   90484:	8809883a 	mov	r4,r17
   90488:	e00b883a 	mov	r5,fp
   9048c:	d9811b04 	addi	r6,sp,1132
   90490:	008ee140 	call	8ee14 <__sprint_r>
   90494:	103bff1e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   90498:	da011d17 	ldw	r8,1140(sp)
   9049c:	d8c11c17 	ldw	r3,1136(sp)
   904a0:	da400404 	addi	r9,sp,16
   904a4:	003fee06 	br	90460 <___vfprintf_internal_r+0x1618>
   904a8:	da413c15 	stw	r9,1264(sp)
   904ac:	0094f300 	call	94f30 <__isnand>
   904b0:	da413c17 	ldw	r9,1264(sp)
   904b4:	1000851e 	bne	r2,zero,906cc <___vfprintf_internal_r+0x1884>
   904b8:	00bfffc4 	movi	r2,-1
   904bc:	e0817626 	beq	fp,r2,90a98 <___vfprintf_internal_r+0x1c50>
   904c0:	008019c4 	movi	r2,103
   904c4:	90817126 	beq	r18,r2,90a8c <___vfprintf_internal_r+0x1c44>
   904c8:	008011c4 	movi	r2,71
   904cc:	90816f26 	beq	r18,r2,90a8c <___vfprintf_internal_r+0x1c44>
   904d0:	82004014 	ori	r8,r16,256
   904d4:	da012a15 	stw	r8,1192(sp)
   904d8:	a0017116 	blt	r20,zero,90aa0 <___vfprintf_internal_r+0x1c58>
   904dc:	d8012f05 	stb	zero,1212(sp)
   904e0:	00801984 	movi	r2,102
   904e4:	90811226 	beq	r18,r2,90930 <___vfprintf_internal_r+0x1ae8>
   904e8:	00801184 	movi	r2,70
   904ec:	90811026 	beq	r18,r2,90930 <___vfprintf_internal_r+0x1ae8>
   904f0:	00801944 	movi	r2,101
   904f4:	90819b26 	beq	r18,r2,90b64 <___vfprintf_internal_r+0x1d1c>
   904f8:	00801144 	movi	r2,69
   904fc:	90819926 	beq	r18,r2,90b64 <___vfprintf_internal_r+0x1d1c>
   90500:	e02f883a 	mov	r23,fp
   90504:	d8812404 	addi	r2,sp,1168
   90508:	d8800115 	stw	r2,4(sp)
   9050c:	d8812304 	addi	r2,sp,1164
   90510:	d8800215 	stw	r2,8(sp)
   90514:	d8812204 	addi	r2,sp,1160
   90518:	ddc00015 	stw	r23,0(sp)
   9051c:	d8800315 	stw	r2,12(sp)
   90520:	8809883a 	mov	r4,r17
   90524:	b00b883a 	mov	r5,r22
   90528:	a00d883a 	mov	r6,r20
   9052c:	01c00084 	movi	r7,2
   90530:	da413c15 	stw	r9,1264(sp)
   90534:	00910b00 	call	910b0 <_dtoa_r>
   90538:	1027883a 	mov	r19,r2
   9053c:	008019c4 	movi	r2,103
   90540:	da413c17 	ldw	r9,1264(sp)
   90544:	90818c1e 	bne	r18,r2,90b78 <___vfprintf_internal_r+0x1d30>
   90548:	8080004c 	andi	r2,r16,1
   9054c:	10017926 	beq	r2,zero,90b34 <___vfprintf_internal_r+0x1cec>
   90550:	00801184 	movi	r2,70
   90554:	9dc7883a 	add	r3,r19,r23
   90558:	90810626 	beq	r18,r2,90974 <___vfprintf_internal_r+0x1b2c>
   9055c:	b009883a 	mov	r4,r22
   90560:	a00b883a 	mov	r5,r20
   90564:	000d883a 	mov	r6,zero
   90568:	000f883a 	mov	r7,zero
   9056c:	d8c13b15 	stw	r3,1260(sp)
   90570:	da413c15 	stw	r9,1264(sp)
   90574:	00966d40 	call	966d4 <__eqdf2>
   90578:	d8c13b17 	ldw	r3,1260(sp)
   9057c:	da413c17 	ldw	r9,1264(sp)
   90580:	10000726 	beq	r2,zero,905a0 <___vfprintf_internal_r+0x1758>
   90584:	d8812217 	ldw	r2,1160(sp)
   90588:	10c1962e 	bgeu	r2,r3,90be4 <___vfprintf_internal_r+0x1d9c>
   9058c:	01000c04 	movi	r4,48
   90590:	11000005 	stb	r4,0(r2)
   90594:	10800044 	addi	r2,r2,1
   90598:	d8812215 	stw	r2,1160(sp)
   9059c:	10fffc1e 	bne	r2,r3,90590 <___vfprintf_internal_r+0x1748>
   905a0:	1cc7c83a 	sub	r3,r3,r19
   905a4:	d8c13215 	stw	r3,1224(sp)
   905a8:	008019c4 	movi	r2,103
   905ac:	90810626 	beq	r18,r2,909c8 <___vfprintf_internal_r+0x1b80>
   905b0:	008011c4 	movi	r2,71
   905b4:	90810426 	beq	r18,r2,909c8 <___vfprintf_internal_r+0x1b80>
   905b8:	00801984 	movi	r2,102
   905bc:	90819a1e 	bne	r18,r2,90c28 <___vfprintf_internal_r+0x1de0>
   905c0:	d8812417 	ldw	r2,1168(sp)
   905c4:	d8812b15 	stw	r2,1196(sp)
   905c8:	0081880e 	bge	zero,r2,90bec <___vfprintf_internal_r+0x1da4>
   905cc:	e000021e 	bne	fp,zero,905d8 <___vfprintf_internal_r+0x1790>
   905d0:	8400004c 	andi	r16,r16,1
   905d4:	80000426 	beq	r16,zero,905e8 <___vfprintf_internal_r+0x17a0>
   905d8:	d8812b17 	ldw	r2,1196(sp)
   905dc:	e2000044 	addi	r8,fp,1
   905e0:	1205883a 	add	r2,r2,r8
   905e4:	d8812b15 	stw	r2,1196(sp)
   905e8:	d8812815 	stw	r2,1184(sp)
   905ec:	10011716 	blt	r2,zero,90a4c <___vfprintf_internal_r+0x1c04>
   905f0:	ddc12f07 	ldb	r23,1212(sp)
   905f4:	b800ca26 	beq	r23,zero,90920 <___vfprintf_internal_r+0x1ad8>
   905f8:	00800b44 	movi	r2,45
   905fc:	d8812585 	stb	r2,1174(sp)
   90600:	dc012a17 	ldw	r16,1192(sp)
   90604:	d8013115 	stw	zero,1220(sp)
   90608:	003afe06 	br	8f204 <___vfprintf_internal_r+0x3bc>
   9060c:	d8812b17 	ldw	r2,1196(sp)
   90610:	d8812815 	stw	r2,1184(sp)
   90614:	10005e16 	blt	r2,zero,90790 <___vfprintf_internal_r+0x1948>
   90618:	d8812583 	ldbu	r2,1174(sp)
   9061c:	ddc12d15 	stw	r23,1204(sp)
   90620:	d8013115 	stw	zero,1220(sp)
   90624:	003af306 	br	8f1f4 <___vfprintf_internal_r+0x3ac>
   90628:	d8812d17 	ldw	r2,1204(sp)
   9062c:	15c00017 	ldw	r23,0(r2)
   90630:	10800104 	addi	r2,r2,4
   90634:	d8812d15 	stw	r2,1204(sp)
   90638:	b82dd7fa 	srai	r22,r23,31
   9063c:	b005883a 	mov	r2,r22
   90640:	003b4906 	br	8f368 <___vfprintf_internal_r+0x520>
   90644:	d8c12d17 	ldw	r3,1204(sp)
   90648:	002d883a 	mov	r22,zero
   9064c:	1dc00017 	ldw	r23,0(r3)
   90650:	18c00104 	addi	r3,r3,4
   90654:	d8c12d15 	stw	r3,1204(sp)
   90658:	b805883a 	mov	r2,r23
   9065c:	00c00044 	movi	r3,1
   90660:	d8012585 	stb	zero,1174(sp)
   90664:	003acf06 	br	8f1a4 <___vfprintf_internal_r+0x35c>
   90668:	da012d17 	ldw	r8,1204(sp)
   9066c:	002d883a 	mov	r22,zero
   90670:	45c00017 	ldw	r23,0(r8)
   90674:	42000104 	addi	r8,r8,4
   90678:	da012d15 	stw	r8,1204(sp)
   9067c:	003be506 	br	8f614 <___vfprintf_internal_r+0x7cc>
   90680:	da012d17 	ldw	r8,1204(sp)
   90684:	002d883a 	mov	r22,zero
   90688:	0007883a 	mov	r3,zero
   9068c:	45c00017 	ldw	r23,0(r8)
   90690:	42000104 	addi	r8,r8,4
   90694:	da012d15 	stw	r8,1204(sp)
   90698:	b805883a 	mov	r2,r23
   9069c:	d8012585 	stb	zero,1174(sp)
   906a0:	003ac006 	br	8f1a4 <___vfprintf_internal_r+0x35c>
   906a4:	d8c12d17 	ldw	r3,1204(sp)
   906a8:	d9012c17 	ldw	r4,1200(sp)
   906ac:	18800017 	ldw	r2,0(r3)
   906b0:	18c00104 	addi	r3,r3,4
   906b4:	d8c12d15 	stw	r3,1204(sp)
   906b8:	11000015 	stw	r4,0(r2)
   906bc:	003a1806 	br	8ef20 <___vfprintf_internal_r+0xd8>
   906c0:	073fffc4 	movi	fp,-1
   906c4:	202b883a 	mov	r21,r4
   906c8:	003a3e06 	br	8efc4 <___vfprintf_internal_r+0x17c>
   906cc:	008011c4 	movi	r2,71
   906d0:	14809016 	blt	r2,r18,90914 <___vfprintf_internal_r+0x1acc>
   906d4:	04c002b4 	movhi	r19,10
   906d8:	9cf4b304 	addi	r19,r19,-11572
   906dc:	00c000c4 	movi	r3,3
   906e0:	00bfdfc4 	movi	r2,-129
   906e4:	80a0703a 	and	r16,r16,r2
   906e8:	d8c12815 	stw	r3,1184(sp)
   906ec:	d8812583 	ldbu	r2,1174(sp)
   906f0:	d8c12b15 	stw	r3,1196(sp)
   906f4:	d8013115 	stw	zero,1220(sp)
   906f8:	003abe06 	br	8f1f4 <___vfprintf_internal_r+0x3ac>
   906fc:	d9412917 	ldw	r5,1188(sp)
   90700:	8809883a 	mov	r4,r17
   90704:	d9811b04 	addi	r6,sp,1132
   90708:	008ee140 	call	8ee14 <__sprint_r>
   9070c:	103b611e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   90710:	dc812417 	ldw	r18,1168(sp)
   90714:	da011d17 	ldw	r8,1140(sp)
   90718:	da400404 	addi	r9,sp,16
   9071c:	003f3506 	br	903f4 <___vfprintf_internal_r+0x15ac>
   90720:	ad400044 	addi	r21,r21,1
   90724:	84000814 	ori	r16,r16,32
   90728:	14800047 	ldb	r18,1(r2)
   9072c:	003a2406 	br	8efc0 <___vfprintf_internal_r+0x178>
   90730:	d9412917 	ldw	r5,1188(sp)
   90734:	8809883a 	mov	r4,r17
   90738:	d9811b04 	addi	r6,sp,1132
   9073c:	008ee140 	call	8ee14 <__sprint_r>
   90740:	103b541e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   90744:	da011d17 	ldw	r8,1140(sp)
   90748:	da400404 	addi	r9,sp,16
   9074c:	003d4a06 	br	8fc78 <___vfprintf_internal_r+0xe30>
   90750:	4d000015 	stw	r20,0(r9)
   90754:	4c800115 	stw	r18,4(r9)
   90758:	4491883a 	add	r8,r8,r18
   9075c:	18c00044 	addi	r3,r3,1
   90760:	da011d15 	stw	r8,1140(sp)
   90764:	d8c11c15 	stw	r3,1136(sp)
   90768:	008001c4 	movi	r2,7
   9076c:	10fcdc16 	blt	r2,r3,8fae0 <___vfprintf_internal_r+0xc98>
   90770:	4a400204 	addi	r9,r9,8
   90774:	003ce106 	br	8fafc <___vfprintf_internal_r+0xcb4>
   90778:	da413c15 	stw	r9,1264(sp)
   9077c:	008ea280 	call	8ea28 <strlen>
   90780:	d8812b15 	stw	r2,1196(sp)
   90784:	d8812815 	stw	r2,1184(sp)
   90788:	da413c17 	ldw	r9,1264(sp)
   9078c:	103fa20e 	bge	r2,zero,90618 <___vfprintf_internal_r+0x17d0>
   90790:	d8012815 	stw	zero,1184(sp)
   90794:	003fa006 	br	90618 <___vfprintf_internal_r+0x17d0>
   90798:	d9412917 	ldw	r5,1188(sp)
   9079c:	8809883a 	mov	r4,r17
   907a0:	d9811b04 	addi	r6,sp,1132
   907a4:	008ee140 	call	8ee14 <__sprint_r>
   907a8:	103b3a1e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   907ac:	da011d17 	ldw	r8,1140(sp)
   907b0:	d8c11c17 	ldw	r3,1136(sp)
   907b4:	da400404 	addi	r9,sp,16
   907b8:	d8813217 	ldw	r2,1224(sp)
   907bc:	4cc00015 	stw	r19,0(r9)
   907c0:	48800115 	stw	r2,4(r9)
   907c4:	4091883a 	add	r8,r8,r2
   907c8:	003c8106 	br	8f9d0 <___vfprintf_internal_r+0xb88>
   907cc:	00800b44 	movi	r2,45
   907d0:	d8812585 	stb	r2,1174(sp)
   907d4:	003be306 	br	8f764 <___vfprintf_internal_r+0x91c>
   907d8:	4d000015 	stw	r20,0(r9)
   907dc:	4c800115 	stw	r18,4(r9)
   907e0:	4491883a 	add	r8,r8,r18
   907e4:	18c00044 	addi	r3,r3,1
   907e8:	da011d15 	stw	r8,1140(sp)
   907ec:	d8c11c15 	stw	r3,1136(sp)
   907f0:	008001c4 	movi	r2,7
   907f4:	10ffe816 	blt	r2,r3,90798 <___vfprintf_internal_r+0x1950>
   907f8:	4a400204 	addi	r9,r9,8
   907fc:	003fee06 	br	907b8 <___vfprintf_internal_r+0x1970>
   90800:	df012b15 	stw	fp,1196(sp)
   90804:	00800184 	movi	r2,6
   90808:	1700072e 	bgeu	r2,fp,90828 <___vfprintf_internal_r+0x19e0>
   9080c:	d8812b15 	stw	r2,1196(sp)
   90810:	d8812815 	stw	r2,1184(sp)
   90814:	ddc12d15 	stw	r23,1204(sp)
   90818:	04c002b4 	movhi	r19,10
   9081c:	9cf4bf04 	addi	r19,r19,-11524
   90820:	d8013115 	stw	zero,1220(sp)
   90824:	003a7a06 	br	8f210 <___vfprintf_internal_r+0x3c8>
   90828:	d8812b17 	ldw	r2,1196(sp)
   9082c:	d8812815 	stw	r2,1184(sp)
   90830:	103ff80e 	bge	r2,zero,90814 <___vfprintf_internal_r+0x19cc>
   90834:	d8012815 	stw	zero,1184(sp)
   90838:	003ff606 	br	90814 <___vfprintf_internal_r+0x19cc>
   9083c:	d9012d17 	ldw	r4,1204(sp)
   90840:	da012c17 	ldw	r8,1200(sp)
   90844:	20800017 	ldw	r2,0(r4)
   90848:	21000104 	addi	r4,r4,4
   9084c:	d9012d15 	stw	r4,1204(sp)
   90850:	12000015 	stw	r8,0(r2)
   90854:	0039b206 	br	8ef20 <___vfprintf_internal_r+0xd8>
   90858:	d9412917 	ldw	r5,1188(sp)
   9085c:	8809883a 	mov	r4,r17
   90860:	d9811b04 	addi	r6,sp,1132
   90864:	008ee140 	call	8ee14 <__sprint_r>
   90868:	103b0a1e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   9086c:	dc812417 	ldw	r18,1168(sp)
   90870:	da011d17 	ldw	r8,1140(sp)
   90874:	da400404 	addi	r9,sp,16
   90878:	003def06 	br	90038 <___vfprintf_internal_r+0x11f0>
   9087c:	d9412917 	ldw	r5,1188(sp)
   90880:	8809883a 	mov	r4,r17
   90884:	d9811b04 	addi	r6,sp,1132
   90888:	008ee140 	call	8ee14 <__sprint_r>
   9088c:	103b011e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   90890:	dc812417 	ldw	r18,1168(sp)
   90894:	da400404 	addi	r9,sp,16
   90898:	003eb906 	br	90380 <___vfprintf_internal_r+0x1538>
   9089c:	d9412917 	ldw	r5,1188(sp)
   908a0:	8809883a 	mov	r4,r17
   908a4:	d9811b04 	addi	r6,sp,1132
   908a8:	008ee140 	call	8ee14 <__sprint_r>
   908ac:	103af91e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   908b0:	dc812417 	ldw	r18,1168(sp)
   908b4:	da011d17 	ldw	r8,1140(sp)
   908b8:	d8c11c17 	ldw	r3,1136(sp)
   908bc:	da400404 	addi	r9,sp,16
   908c0:	003ea306 	br	90350 <___vfprintf_internal_r+0x1508>
   908c4:	00800244 	movi	r2,9
   908c8:	15fda636 	bltu	r2,r23,8ff64 <___vfprintf_internal_r+0x111c>
   908cc:	dd010e04 	addi	r20,sp,1080
   908d0:	003dc206 	br	8ffdc <___vfprintf_internal_r+0x1194>
   908d4:	df012815 	stw	fp,1184(sp)
   908d8:	d8812583 	ldbu	r2,1174(sp)
   908dc:	df012b15 	stw	fp,1196(sp)
   908e0:	ddc12d15 	stw	r23,1204(sp)
   908e4:	d8013115 	stw	zero,1220(sp)
   908e8:	003a4206 	br	8f1f4 <___vfprintf_internal_r+0x3ac>
   908ec:	d9412917 	ldw	r5,1188(sp)
   908f0:	8809883a 	mov	r4,r17
   908f4:	d9811b04 	addi	r6,sp,1132
   908f8:	008ee140 	call	8ee14 <__sprint_r>
   908fc:	103ae51e 	bne	r2,zero,8f494 <___vfprintf_internal_r+0x64c>
   90900:	dc812417 	ldw	r18,1168(sp)
   90904:	da011d17 	ldw	r8,1140(sp)
   90908:	d8c11c17 	ldw	r3,1136(sp)
   9090c:	da400404 	addi	r9,sp,16
   90910:	003ec906 	br	90438 <___vfprintf_internal_r+0x15f0>
   90914:	04c002b4 	movhi	r19,10
   90918:	9cf4b404 	addi	r19,r19,-11568
   9091c:	003f6f06 	br	906dc <___vfprintf_internal_r+0x1894>
   90920:	d8812583 	ldbu	r2,1174(sp)
   90924:	dc012a17 	ldw	r16,1192(sp)
   90928:	d8013115 	stw	zero,1220(sp)
   9092c:	003a3106 	br	8f1f4 <___vfprintf_internal_r+0x3ac>
   90930:	d8812404 	addi	r2,sp,1168
   90934:	d8800115 	stw	r2,4(sp)
   90938:	d8812304 	addi	r2,sp,1164
   9093c:	d8800215 	stw	r2,8(sp)
   90940:	d8812204 	addi	r2,sp,1160
   90944:	df000015 	stw	fp,0(sp)
   90948:	d8800315 	stw	r2,12(sp)
   9094c:	8809883a 	mov	r4,r17
   90950:	b00b883a 	mov	r5,r22
   90954:	a00d883a 	mov	r6,r20
   90958:	01c000c4 	movi	r7,3
   9095c:	da413c15 	stw	r9,1264(sp)
   90960:	00910b00 	call	910b0 <_dtoa_r>
   90964:	da413c17 	ldw	r9,1264(sp)
   90968:	1027883a 	mov	r19,r2
   9096c:	1707883a 	add	r3,r2,fp
   90970:	e02f883a 	mov	r23,fp
   90974:	99000007 	ldb	r4,0(r19)
   90978:	00800c04 	movi	r2,48
   9097c:	20800326 	beq	r4,r2,9098c <___vfprintf_internal_r+0x1b44>
   90980:	da812417 	ldw	r10,1168(sp)
   90984:	1a87883a 	add	r3,r3,r10
   90988:	003ef406 	br	9055c <___vfprintf_internal_r+0x1714>
   9098c:	b009883a 	mov	r4,r22
   90990:	a00b883a 	mov	r5,r20
   90994:	000d883a 	mov	r6,zero
   90998:	000f883a 	mov	r7,zero
   9099c:	d8c13b15 	stw	r3,1260(sp)
   909a0:	da413c15 	stw	r9,1264(sp)
   909a4:	00967300 	call	96730 <__nedf2>
   909a8:	d8c13b17 	ldw	r3,1260(sp)
   909ac:	da413c17 	ldw	r9,1264(sp)
   909b0:	103ff326 	beq	r2,zero,90980 <___vfprintf_internal_r+0x1b38>
   909b4:	00800044 	movi	r2,1
   909b8:	15d5c83a 	sub	r10,r2,r23
   909bc:	da812415 	stw	r10,1168(sp)
   909c0:	1a87883a 	add	r3,r3,r10
   909c4:	003ee506 	br	9055c <___vfprintf_internal_r+0x1714>
   909c8:	d8812417 	ldw	r2,1168(sp)
   909cc:	d8812b15 	stw	r2,1196(sp)
   909d0:	1029883a 	mov	r20,r2
   909d4:	00bfff44 	movi	r2,-3
   909d8:	a0800116 	blt	r20,r2,909e0 <___vfprintf_internal_r+0x1b98>
   909dc:	e5001d0e 	bge	fp,r20,90a54 <___vfprintf_internal_r+0x1c0c>
   909e0:	94bfff84 	addi	r18,r18,-2
   909e4:	a53fffc4 	addi	r20,r20,-1
   909e8:	dd012415 	stw	r20,1168(sp)
   909ec:	dc811fc5 	stb	r18,1151(sp)
   909f0:	a0007816 	blt	r20,zero,90bd4 <___vfprintf_internal_r+0x1d8c>
   909f4:	00800ac4 	movi	r2,43
   909f8:	d8812005 	stb	r2,1152(sp)
   909fc:	00800244 	movi	r2,9
   90a00:	15002b16 	blt	r2,r20,90ab0 <___vfprintf_internal_r+0x1c68>
   90a04:	00800c04 	movi	r2,48
   90a08:	a5000c04 	addi	r20,r20,48
   90a0c:	d8812045 	stb	r2,1153(sp)
   90a10:	dd012085 	stb	r20,1154(sp)
   90a14:	d8c120c4 	addi	r3,sp,1155
   90a18:	d8811fc4 	addi	r2,sp,1151
   90a1c:	da013217 	ldw	r8,1224(sp)
   90a20:	1885c83a 	sub	r2,r3,r2
   90a24:	d8813515 	stw	r2,1236(sp)
   90a28:	4085883a 	add	r2,r8,r2
   90a2c:	d8812b15 	stw	r2,1196(sp)
   90a30:	00800044 	movi	r2,1
   90a34:	1200610e 	bge	r2,r8,90bbc <___vfprintf_internal_r+0x1d74>
   90a38:	d8812b17 	ldw	r2,1196(sp)
   90a3c:	10800044 	addi	r2,r2,1
   90a40:	d8812b15 	stw	r2,1196(sp)
   90a44:	d8812815 	stw	r2,1184(sp)
   90a48:	103ee90e 	bge	r2,zero,905f0 <___vfprintf_internal_r+0x17a8>
   90a4c:	d8012815 	stw	zero,1184(sp)
   90a50:	003ee706 	br	905f0 <___vfprintf_internal_r+0x17a8>
   90a54:	d8812b17 	ldw	r2,1196(sp)
   90a58:	da013217 	ldw	r8,1224(sp)
   90a5c:	12003716 	blt	r2,r8,90b3c <___vfprintf_internal_r+0x1cf4>
   90a60:	8400004c 	andi	r16,r16,1
   90a64:	80000326 	beq	r16,zero,90a74 <___vfprintf_internal_r+0x1c2c>
   90a68:	d8812b17 	ldw	r2,1196(sp)
   90a6c:	10800044 	addi	r2,r2,1
   90a70:	d8812b15 	stw	r2,1196(sp)
   90a74:	d8812815 	stw	r2,1184(sp)
   90a78:	10003716 	blt	r2,zero,90b58 <___vfprintf_internal_r+0x1d10>
   90a7c:	048019c4 	movi	r18,103
   90a80:	003edb06 	br	905f0 <___vfprintf_internal_r+0x17a8>
   90a84:	d8012815 	stw	zero,1184(sp)
   90a88:	003b6906 	br	8f830 <___vfprintf_internal_r+0x9e8>
   90a8c:	e03e901e 	bne	fp,zero,904d0 <___vfprintf_internal_r+0x1688>
   90a90:	07000044 	movi	fp,1
   90a94:	003e8e06 	br	904d0 <___vfprintf_internal_r+0x1688>
   90a98:	07000184 	movi	fp,6
   90a9c:	003e8c06 	br	904d0 <___vfprintf_internal_r+0x1688>
   90aa0:	00c00b44 	movi	r3,45
   90aa4:	a520003c 	xorhi	r20,r20,32768
   90aa8:	d8c12f05 	stb	r3,1212(sp)
   90aac:	003e8c06 	br	904e0 <___vfprintf_internal_r+0x1698>
   90ab0:	d8c11f84 	addi	r3,sp,1150
   90ab4:	102f883a 	mov	r23,r2
   90ab8:	4839883a 	mov	fp,r9
   90abc:	a009883a 	mov	r4,r20
   90ac0:	01400284 	movi	r5,10
   90ac4:	182d883a 	mov	r22,r3
   90ac8:	008cedc0 	call	8cedc <__modsi3>
   90acc:	10800c04 	addi	r2,r2,48
   90ad0:	a009883a 	mov	r4,r20
   90ad4:	b0800005 	stb	r2,0(r22)
   90ad8:	01400284 	movi	r5,10
   90adc:	008ce8c0 	call	8ce8c <__divsi3>
   90ae0:	1029883a 	mov	r20,r2
   90ae4:	b0ffffc4 	addi	r3,r22,-1
   90ae8:	b8bff416 	blt	r23,r2,90abc <___vfprintf_internal_r+0x1c74>
   90aec:	11400c04 	addi	r5,r2,48
   90af0:	b17fffc5 	stb	r5,-1(r22)
   90af4:	d8811fc4 	addi	r2,sp,1151
   90af8:	e013883a 	mov	r9,fp
   90afc:	1880482e 	bgeu	r3,r2,90c20 <___vfprintf_internal_r+0x1dd8>
   90b00:	b007883a 	mov	r3,r22
   90b04:	d9012044 	addi	r4,sp,1153
   90b08:	00000206 	br	90b14 <___vfprintf_internal_r+0x1ccc>
   90b0c:	19400003 	ldbu	r5,0(r3)
   90b10:	18c00044 	addi	r3,r3,1
   90b14:	21400005 	stb	r5,0(r4)
   90b18:	21000044 	addi	r4,r4,1
   90b1c:	10fffb1e 	bne	r2,r3,90b0c <___vfprintf_internal_r+0x1cc4>
   90b20:	d8c12004 	addi	r3,sp,1152
   90b24:	1d87c83a 	sub	r3,r3,r22
   90b28:	d9012044 	addi	r4,sp,1153
   90b2c:	20c7883a 	add	r3,r4,r3
   90b30:	003fba06 	br	90a1c <___vfprintf_internal_r+0x1bd4>
   90b34:	d8c12217 	ldw	r3,1160(sp)
   90b38:	003e9906 	br	905a0 <___vfprintf_internal_r+0x1758>
   90b3c:	05000b0e 	bge	zero,r20,90b6c <___vfprintf_internal_r+0x1d24>
   90b40:	05000044 	movi	r20,1
   90b44:	da013217 	ldw	r8,1224(sp)
   90b48:	a229883a 	add	r20,r20,r8
   90b4c:	dd012b15 	stw	r20,1196(sp)
   90b50:	dd012815 	stw	r20,1184(sp)
   90b54:	a03fc90e 	bge	r20,zero,90a7c <___vfprintf_internal_r+0x1c34>
   90b58:	d8012815 	stw	zero,1184(sp)
   90b5c:	048019c4 	movi	r18,103
   90b60:	003ea306 	br	905f0 <___vfprintf_internal_r+0x17a8>
   90b64:	e5c00044 	addi	r23,fp,1
   90b68:	003e6606 	br	90504 <___vfprintf_internal_r+0x16bc>
   90b6c:	00800084 	movi	r2,2
   90b70:	1529c83a 	sub	r20,r2,r20
   90b74:	003ff306 	br	90b44 <___vfprintf_internal_r+0x1cfc>
   90b78:	008011c4 	movi	r2,71
   90b7c:	90be7226 	beq	r18,r2,90548 <___vfprintf_internal_r+0x1700>
   90b80:	003e7306 	br	90550 <___vfprintf_internal_r+0x1708>
   90b84:	d8812d17 	ldw	r2,1204(sp)
   90b88:	ac800043 	ldbu	r18,1(r21)
   90b8c:	202b883a 	mov	r21,r4
   90b90:	17000017 	ldw	fp,0(r2)
   90b94:	10800104 	addi	r2,r2,4
   90b98:	d8812d15 	stw	r2,1204(sp)
   90b9c:	e0001b16 	blt	fp,zero,90c0c <___vfprintf_internal_r+0x1dc4>
   90ba0:	94803fcc 	andi	r18,r18,255
   90ba4:	9480201c 	xori	r18,r18,128
   90ba8:	94bfe004 	addi	r18,r18,-128
   90bac:	00390406 	br	8efc0 <___vfprintf_internal_r+0x178>
   90bb0:	00bfffc4 	movi	r2,-1
   90bb4:	d8812c15 	stw	r2,1200(sp)
   90bb8:	003a2506 	br	8f450 <___vfprintf_internal_r+0x608>
   90bbc:	80a0703a 	and	r16,r16,r2
   90bc0:	803f9d1e 	bne	r16,zero,90a38 <___vfprintf_internal_r+0x1bf0>
   90bc4:	d8812b17 	ldw	r2,1196(sp)
   90bc8:	d8812815 	stw	r2,1184(sp)
   90bcc:	103e880e 	bge	r2,zero,905f0 <___vfprintf_internal_r+0x17a8>
   90bd0:	003f9e06 	br	90a4c <___vfprintf_internal_r+0x1c04>
   90bd4:	00800b44 	movi	r2,45
   90bd8:	0529c83a 	sub	r20,zero,r20
   90bdc:	d8812005 	stb	r2,1152(sp)
   90be0:	003f8606 	br	909fc <___vfprintf_internal_r+0x1bb4>
   90be4:	1007883a 	mov	r3,r2
   90be8:	003e6d06 	br	905a0 <___vfprintf_internal_r+0x1758>
   90bec:	e000021e 	bne	fp,zero,90bf8 <___vfprintf_internal_r+0x1db0>
   90bf0:	8400004c 	andi	r16,r16,1
   90bf4:	80000e26 	beq	r16,zero,90c30 <___vfprintf_internal_r+0x1de8>
   90bf8:	e7000084 	addi	fp,fp,2
   90bfc:	df012b15 	stw	fp,1196(sp)
   90c00:	df012815 	stw	fp,1184(sp)
   90c04:	e03e7a0e 	bge	fp,zero,905f0 <___vfprintf_internal_r+0x17a8>
   90c08:	003f9006 	br	90a4c <___vfprintf_internal_r+0x1c04>
   90c0c:	94803fcc 	andi	r18,r18,255
   90c10:	9480201c 	xori	r18,r18,128
   90c14:	073fffc4 	movi	fp,-1
   90c18:	94bfe004 	addi	r18,r18,-128
   90c1c:	0038e806 	br	8efc0 <___vfprintf_internal_r+0x178>
   90c20:	d8c12044 	addi	r3,sp,1153
   90c24:	003f7d06 	br	90a1c <___vfprintf_internal_r+0x1bd4>
   90c28:	dd012417 	ldw	r20,1168(sp)
   90c2c:	003f6d06 	br	909e4 <___vfprintf_internal_r+0x1b9c>
   90c30:	00c00044 	movi	r3,1
   90c34:	d8c12815 	stw	r3,1184(sp)
   90c38:	d8c12b15 	stw	r3,1196(sp)
   90c3c:	003e6c06 	br	905f0 <___vfprintf_internal_r+0x17a8>

00090c40 <__vfprintf_internal>:
   90c40:	008002b4 	movhi	r2,10
   90c44:	10bd6704 	addi	r2,r2,-2660
   90c48:	2007883a 	mov	r3,r4
   90c4c:	11000017 	ldw	r4,0(r2)
   90c50:	2805883a 	mov	r2,r5
   90c54:	300f883a 	mov	r7,r6
   90c58:	180b883a 	mov	r5,r3
   90c5c:	100d883a 	mov	r6,r2
   90c60:	008ee481 	jmpi	8ee48 <___vfprintf_internal_r>

00090c64 <_write_r>:
   90c64:	defffd04 	addi	sp,sp,-12
   90c68:	dc400115 	stw	r17,4(sp)
   90c6c:	dc000015 	stw	r16,0(sp)
   90c70:	2023883a 	mov	r17,r4
   90c74:	040002b4 	movhi	r16,10
   90c78:	84051604 	addi	r16,r16,5208
   90c7c:	2809883a 	mov	r4,r5
   90c80:	300b883a 	mov	r5,r6
   90c84:	380d883a 	mov	r6,r7
   90c88:	dfc00215 	stw	ra,8(sp)
   90c8c:	80000015 	stw	zero,0(r16)
   90c90:	00979c80 	call	979c8 <write>
   90c94:	00ffffc4 	movi	r3,-1
   90c98:	10c00526 	beq	r2,r3,90cb0 <_write_r+0x4c>
   90c9c:	dfc00217 	ldw	ra,8(sp)
   90ca0:	dc400117 	ldw	r17,4(sp)
   90ca4:	dc000017 	ldw	r16,0(sp)
   90ca8:	dec00304 	addi	sp,sp,12
   90cac:	f800283a 	ret
   90cb0:	80c00017 	ldw	r3,0(r16)
   90cb4:	183ff926 	beq	r3,zero,90c9c <_write_r+0x38>
   90cb8:	88c00015 	stw	r3,0(r17)
   90cbc:	dfc00217 	ldw	ra,8(sp)
   90cc0:	dc400117 	ldw	r17,4(sp)
   90cc4:	dc000017 	ldw	r16,0(sp)
   90cc8:	dec00304 	addi	sp,sp,12
   90ccc:	f800283a 	ret

00090cd0 <__swsetup_r>:
   90cd0:	008002b4 	movhi	r2,10
   90cd4:	10bd6704 	addi	r2,r2,-2660
   90cd8:	10800017 	ldw	r2,0(r2)
   90cdc:	defffd04 	addi	sp,sp,-12
   90ce0:	dc400115 	stw	r17,4(sp)
   90ce4:	dc000015 	stw	r16,0(sp)
   90ce8:	dfc00215 	stw	ra,8(sp)
   90cec:	2023883a 	mov	r17,r4
   90cf0:	2821883a 	mov	r16,r5
   90cf4:	10000226 	beq	r2,zero,90d00 <__swsetup_r+0x30>
   90cf8:	10c00e17 	ldw	r3,56(r2)
   90cfc:	18003d26 	beq	r3,zero,90df4 <__swsetup_r+0x124>
   90d00:	8080030b 	ldhu	r2,12(r16)
   90d04:	10c0020c 	andi	r3,r2,8
   90d08:	18ffffcc 	andi	r3,r3,65535
   90d0c:	18e0001c 	xori	r3,r3,32768
   90d10:	18e00004 	addi	r3,r3,-32768
   90d14:	18001226 	beq	r3,zero,90d60 <__swsetup_r+0x90>
   90d18:	80c00417 	ldw	r3,16(r16)
   90d1c:	18001f26 	beq	r3,zero,90d9c <__swsetup_r+0xcc>
   90d20:	1100004c 	andi	r4,r2,1
   90d24:	2000261e 	bne	r4,zero,90dc0 <__swsetup_r+0xf0>
   90d28:	1080008c 	andi	r2,r2,2
   90d2c:	10bfffcc 	andi	r2,r2,65535
   90d30:	10a0001c 	xori	r2,r2,32768
   90d34:	10a00004 	addi	r2,r2,-32768
   90d38:	1000311e 	bne	r2,zero,90e00 <__swsetup_r+0x130>
   90d3c:	80800517 	ldw	r2,20(r16)
   90d40:	80800215 	stw	r2,8(r16)
   90d44:	18002326 	beq	r3,zero,90dd4 <__swsetup_r+0x104>
   90d48:	0005883a 	mov	r2,zero
   90d4c:	dfc00217 	ldw	ra,8(sp)
   90d50:	dc400117 	ldw	r17,4(sp)
   90d54:	dc000017 	ldw	r16,0(sp)
   90d58:	dec00304 	addi	sp,sp,12
   90d5c:	f800283a 	ret
   90d60:	10c0040c 	andi	r3,r2,16
   90d64:	18ffffcc 	andi	r3,r3,65535
   90d68:	18e0001c 	xori	r3,r3,32768
   90d6c:	18e00004 	addi	r3,r3,-32768
   90d70:	18001e26 	beq	r3,zero,90dec <__swsetup_r+0x11c>
   90d74:	10c0010c 	andi	r3,r2,4
   90d78:	18ffffcc 	andi	r3,r3,65535
   90d7c:	18e0001c 	xori	r3,r3,32768
   90d80:	18e00004 	addi	r3,r3,-32768
   90d84:	1800211e 	bne	r3,zero,90e0c <__swsetup_r+0x13c>
   90d88:	80c00417 	ldw	r3,16(r16)
   90d8c:	11400214 	ori	r5,r2,8
   90d90:	8140030d 	sth	r5,12(r16)
   90d94:	2805883a 	mov	r2,r5
   90d98:	183fe11e 	bne	r3,zero,90d20 <__swsetup_r+0x50>
   90d9c:	1140a00c 	andi	r5,r2,640
   90da0:	01008004 	movi	r4,512
   90da4:	293fde26 	beq	r5,r4,90d20 <__swsetup_r+0x50>
   90da8:	8809883a 	mov	r4,r17
   90dac:	800b883a 	mov	r5,r16
   90db0:	009346c0 	call	9346c <__smakebuf_r>
   90db4:	8080030b 	ldhu	r2,12(r16)
   90db8:	80c00417 	ldw	r3,16(r16)
   90dbc:	003fd806 	br	90d20 <__swsetup_r+0x50>
   90dc0:	80800517 	ldw	r2,20(r16)
   90dc4:	80000215 	stw	zero,8(r16)
   90dc8:	0085c83a 	sub	r2,zero,r2
   90dcc:	80800615 	stw	r2,24(r16)
   90dd0:	183fdd1e 	bne	r3,zero,90d48 <__swsetup_r+0x78>
   90dd4:	8080030b 	ldhu	r2,12(r16)
   90dd8:	1080200c 	andi	r2,r2,128
   90ddc:	10bfffcc 	andi	r2,r2,65535
   90de0:	10a0001c 	xori	r2,r2,32768
   90de4:	10a00004 	addi	r2,r2,-32768
   90de8:	103fd826 	beq	r2,zero,90d4c <__swsetup_r+0x7c>
   90dec:	00bfffc4 	movi	r2,-1
   90df0:	003fd606 	br	90d4c <__swsetup_r+0x7c>
   90df4:	1009883a 	mov	r4,r2
   90df8:	008d6e40 	call	8d6e4 <__sinit>
   90dfc:	003fc006 	br	90d00 <__swsetup_r+0x30>
   90e00:	0005883a 	mov	r2,zero
   90e04:	80800215 	stw	r2,8(r16)
   90e08:	003fce06 	br	90d44 <__swsetup_r+0x74>
   90e0c:	81400c17 	ldw	r5,48(r16)
   90e10:	28000626 	beq	r5,zero,90e2c <__swsetup_r+0x15c>
   90e14:	80c01004 	addi	r3,r16,64
   90e18:	28c00326 	beq	r5,r3,90e28 <__swsetup_r+0x158>
   90e1c:	8809883a 	mov	r4,r17
   90e20:	0092b700 	call	92b70 <_free_r>
   90e24:	8080030b 	ldhu	r2,12(r16)
   90e28:	80000c15 	stw	zero,48(r16)
   90e2c:	80c00417 	ldw	r3,16(r16)
   90e30:	013ff6c4 	movi	r4,-37
   90e34:	2084703a 	and	r2,r4,r2
   90e38:	80000115 	stw	zero,4(r16)
   90e3c:	80c00015 	stw	r3,0(r16)
   90e40:	003fd206 	br	90d8c <__swsetup_r+0xbc>

00090e44 <_close_r>:
   90e44:	defffd04 	addi	sp,sp,-12
   90e48:	dc400115 	stw	r17,4(sp)
   90e4c:	dc000015 	stw	r16,0(sp)
   90e50:	2023883a 	mov	r17,r4
   90e54:	040002b4 	movhi	r16,10
   90e58:	84051604 	addi	r16,r16,5208
   90e5c:	2809883a 	mov	r4,r5
   90e60:	dfc00215 	stw	ra,8(sp)
   90e64:	80000015 	stw	zero,0(r16)
   90e68:	0096d9c0 	call	96d9c <close>
   90e6c:	00ffffc4 	movi	r3,-1
   90e70:	10c00526 	beq	r2,r3,90e88 <_close_r+0x44>
   90e74:	dfc00217 	ldw	ra,8(sp)
   90e78:	dc400117 	ldw	r17,4(sp)
   90e7c:	dc000017 	ldw	r16,0(sp)
   90e80:	dec00304 	addi	sp,sp,12
   90e84:	f800283a 	ret
   90e88:	80c00017 	ldw	r3,0(r16)
   90e8c:	183ff926 	beq	r3,zero,90e74 <_close_r+0x30>
   90e90:	88c00015 	stw	r3,0(r17)
   90e94:	dfc00217 	ldw	ra,8(sp)
   90e98:	dc400117 	ldw	r17,4(sp)
   90e9c:	dc000017 	ldw	r16,0(sp)
   90ea0:	dec00304 	addi	sp,sp,12
   90ea4:	f800283a 	ret

00090ea8 <quorem>:
   90ea8:	defff704 	addi	sp,sp,-36
   90eac:	dc400115 	stw	r17,4(sp)
   90eb0:	20800417 	ldw	r2,16(r4)
   90eb4:	2c400417 	ldw	r17,16(r5)
   90eb8:	dd800615 	stw	r22,24(sp)
   90ebc:	dd400515 	stw	r21,20(sp)
   90ec0:	dfc00815 	stw	ra,32(sp)
   90ec4:	ddc00715 	stw	r23,28(sp)
   90ec8:	dd000415 	stw	r20,16(sp)
   90ecc:	dcc00315 	stw	r19,12(sp)
   90ed0:	dc800215 	stw	r18,8(sp)
   90ed4:	dc000015 	stw	r16,0(sp)
   90ed8:	202b883a 	mov	r21,r4
   90edc:	282d883a 	mov	r22,r5
   90ee0:	14407116 	blt	r2,r17,910a8 <quorem+0x200>
   90ee4:	88800104 	addi	r2,r17,4
   90ee8:	1085883a 	add	r2,r2,r2
   90eec:	1085883a 	add	r2,r2,r2
   90ef0:	28a7883a 	add	r19,r5,r2
   90ef4:	2085883a 	add	r2,r4,r2
   90ef8:	15c00017 	ldw	r23,0(r2)
   90efc:	99400017 	ldw	r5,0(r19)
   90f00:	8c7fffc4 	addi	r17,r17,-1
   90f04:	b809883a 	mov	r4,r23
   90f08:	29400044 	addi	r5,r5,1
   90f0c:	008cf380 	call	8cf38 <__udivsi3>
   90f10:	1025883a 	mov	r18,r2
   90f14:	b4000504 	addi	r16,r22,20
   90f18:	ad000504 	addi	r20,r21,20
   90f1c:	10002d26 	beq	r2,zero,90fd4 <quorem+0x12c>
   90f20:	800d883a 	mov	r6,r16
   90f24:	a007883a 	mov	r3,r20
   90f28:	000f883a 	mov	r7,zero
   90f2c:	0005883a 	mov	r2,zero
   90f30:	32c00017 	ldw	r11,0(r6)
   90f34:	1a400017 	ldw	r9,0(r3)
   90f38:	31800104 	addi	r6,r6,4
   90f3c:	5abfffcc 	andi	r10,r11,65535
   90f40:	5495383a 	mul	r10,r10,r18
   90f44:	5816d43a 	srli	r11,r11,16
   90f48:	4a3fffcc 	andi	r8,r9,65535
   90f4c:	3a95883a 	add	r10,r7,r10
   90f50:	500ed43a 	srli	r7,r10,16
   90f54:	5c97383a 	mul	r11,r11,r18
   90f58:	4085883a 	add	r2,r8,r2
   90f5c:	52bfffcc 	andi	r10,r10,65535
   90f60:	1291c83a 	sub	r8,r2,r10
   90f64:	4804d43a 	srli	r2,r9,16
   90f68:	3acf883a 	add	r7,r7,r11
   90f6c:	4015d43a 	srai	r10,r8,16
   90f70:	393fffcc 	andi	r4,r7,65535
   90f74:	1105c83a 	sub	r2,r2,r4
   90f78:	1285883a 	add	r2,r2,r10
   90f7c:	1880008d 	sth	r2,2(r3)
   90f80:	1a00000d 	sth	r8,0(r3)
   90f84:	380ed43a 	srli	r7,r7,16
   90f88:	1005d43a 	srai	r2,r2,16
   90f8c:	18c00104 	addi	r3,r3,4
   90f90:	99bfe72e 	bgeu	r19,r6,90f30 <quorem+0x88>
   90f94:	b8000f1e 	bne	r23,zero,90fd4 <quorem+0x12c>
   90f98:	88800144 	addi	r2,r17,5
   90f9c:	1085883a 	add	r2,r2,r2
   90fa0:	1085883a 	add	r2,r2,r2
   90fa4:	a887883a 	add	r3,r21,r2
   90fa8:	18bfff04 	addi	r2,r3,-4
   90fac:	a080082e 	bgeu	r20,r2,90fd0 <quorem+0x128>
   90fb0:	18ffff17 	ldw	r3,-4(r3)
   90fb4:	18000326 	beq	r3,zero,90fc4 <quorem+0x11c>
   90fb8:	00000506 	br	90fd0 <quorem+0x128>
   90fbc:	10c00017 	ldw	r3,0(r2)
   90fc0:	1800031e 	bne	r3,zero,90fd0 <quorem+0x128>
   90fc4:	10bfff04 	addi	r2,r2,-4
   90fc8:	8c7fffc4 	addi	r17,r17,-1
   90fcc:	a0bffb36 	bltu	r20,r2,90fbc <quorem+0x114>
   90fd0:	ac400415 	stw	r17,16(r21)
   90fd4:	a809883a 	mov	r4,r21
   90fd8:	b00b883a 	mov	r5,r22
   90fdc:	0093fe00 	call	93fe0 <__mcmp>
   90fe0:	10002516 	blt	r2,zero,91078 <quorem+0x1d0>
   90fe4:	94800044 	addi	r18,r18,1
   90fe8:	a007883a 	mov	r3,r20
   90fec:	000b883a 	mov	r5,zero
   90ff0:	1a000017 	ldw	r8,0(r3)
   90ff4:	81c00017 	ldw	r7,0(r16)
   90ff8:	84000104 	addi	r16,r16,4
   90ffc:	41bfffcc 	andi	r6,r8,65535
   91000:	38bfffcc 	andi	r2,r7,65535
   91004:	314b883a 	add	r5,r6,r5
   91008:	288dc83a 	sub	r6,r5,r2
   9100c:	380ed43a 	srli	r7,r7,16
   91010:	400ad43a 	srli	r5,r8,16
   91014:	3005d43a 	srai	r2,r6,16
   91018:	1980000d 	sth	r6,0(r3)
   9101c:	29cbc83a 	sub	r5,r5,r7
   91020:	288b883a 	add	r5,r5,r2
   91024:	1940008d 	sth	r5,2(r3)
   91028:	280bd43a 	srai	r5,r5,16
   9102c:	18c00104 	addi	r3,r3,4
   91030:	9c3fef2e 	bgeu	r19,r16,90ff0 <quorem+0x148>
   91034:	88800144 	addi	r2,r17,5
   91038:	1085883a 	add	r2,r2,r2
   9103c:	1085883a 	add	r2,r2,r2
   91040:	a885883a 	add	r2,r21,r2
   91044:	10c00017 	ldw	r3,0(r2)
   91048:	18000b1e 	bne	r3,zero,91078 <quorem+0x1d0>
   9104c:	10ffff04 	addi	r3,r2,-4
   91050:	a0c0082e 	bgeu	r20,r3,91074 <quorem+0x1cc>
   91054:	10bfff17 	ldw	r2,-4(r2)
   91058:	10000326 	beq	r2,zero,91068 <quorem+0x1c0>
   9105c:	00000506 	br	91074 <quorem+0x1cc>
   91060:	18800017 	ldw	r2,0(r3)
   91064:	1000031e 	bne	r2,zero,91074 <quorem+0x1cc>
   91068:	18ffff04 	addi	r3,r3,-4
   9106c:	8c7fffc4 	addi	r17,r17,-1
   91070:	a0fffb36 	bltu	r20,r3,91060 <quorem+0x1b8>
   91074:	ac400415 	stw	r17,16(r21)
   91078:	9005883a 	mov	r2,r18
   9107c:	dfc00817 	ldw	ra,32(sp)
   91080:	ddc00717 	ldw	r23,28(sp)
   91084:	dd800617 	ldw	r22,24(sp)
   91088:	dd400517 	ldw	r21,20(sp)
   9108c:	dd000417 	ldw	r20,16(sp)
   91090:	dcc00317 	ldw	r19,12(sp)
   91094:	dc800217 	ldw	r18,8(sp)
   91098:	dc400117 	ldw	r17,4(sp)
   9109c:	dc000017 	ldw	r16,0(sp)
   910a0:	dec00904 	addi	sp,sp,36
   910a4:	f800283a 	ret
   910a8:	0005883a 	mov	r2,zero
   910ac:	003ff306 	br	9107c <quorem+0x1d4>

000910b0 <_dtoa_r>:
   910b0:	20801017 	ldw	r2,64(r4)
   910b4:	deffdf04 	addi	sp,sp,-132
   910b8:	dcc01a15 	stw	r19,104(sp)
   910bc:	dc801915 	stw	r18,100(sp)
   910c0:	dc401815 	stw	r17,96(sp)
   910c4:	dc001715 	stw	r16,92(sp)
   910c8:	dfc02015 	stw	ra,128(sp)
   910cc:	df001f15 	stw	fp,124(sp)
   910d0:	ddc01e15 	stw	r23,120(sp)
   910d4:	dd801d15 	stw	r22,116(sp)
   910d8:	dd401c15 	stw	r21,112(sp)
   910dc:	dd001b15 	stw	r20,108(sp)
   910e0:	d9400315 	stw	r5,12(sp)
   910e4:	d9c00415 	stw	r7,16(sp)
   910e8:	2021883a 	mov	r16,r4
   910ec:	3025883a 	mov	r18,r6
   910f0:	dcc02317 	ldw	r19,140(sp)
   910f4:	3023883a 	mov	r17,r6
   910f8:	10000826 	beq	r2,zero,9111c <_dtoa_r+0x6c>
   910fc:	20c01117 	ldw	r3,68(r4)
   91100:	01800044 	movi	r6,1
   91104:	100b883a 	mov	r5,r2
   91108:	30cc983a 	sll	r6,r6,r3
   9110c:	10c00115 	stw	r3,4(r2)
   91110:	11800215 	stw	r6,8(r2)
   91114:	00937e40 	call	937e4 <_Bfree>
   91118:	80001015 	stw	zero,64(r16)
   9111c:	90002f16 	blt	r18,zero,911dc <_dtoa_r+0x12c>
   91120:	98000015 	stw	zero,0(r19)
   91124:	90dffc2c 	andhi	r3,r18,32752
   91128:	009ffc34 	movhi	r2,32752
   9112c:	18801c26 	beq	r3,r2,911a0 <_dtoa_r+0xf0>
   91130:	d9000317 	ldw	r4,12(sp)
   91134:	880b883a 	mov	r5,r17
   91138:	000d883a 	mov	r6,zero
   9113c:	000f883a 	mov	r7,zero
   91140:	00966d40 	call	966d4 <__eqdf2>
   91144:	10002c1e 	bne	r2,zero,911f8 <_dtoa_r+0x148>
   91148:	d9002217 	ldw	r4,136(sp)
   9114c:	d9c02417 	ldw	r7,144(sp)
   91150:	00800044 	movi	r2,1
   91154:	20800015 	stw	r2,0(r4)
   91158:	38019426 	beq	r7,zero,917ac <_dtoa_r+0x6fc>
   9115c:	008002b4 	movhi	r2,10
   91160:	10b4c144 	addi	r2,r2,-11515
   91164:	38800015 	stw	r2,0(r7)
   91168:	15ffffc4 	addi	r23,r2,-1
   9116c:	b805883a 	mov	r2,r23
   91170:	dfc02017 	ldw	ra,128(sp)
   91174:	df001f17 	ldw	fp,124(sp)
   91178:	ddc01e17 	ldw	r23,120(sp)
   9117c:	dd801d17 	ldw	r22,116(sp)
   91180:	dd401c17 	ldw	r21,112(sp)
   91184:	dd001b17 	ldw	r20,108(sp)
   91188:	dcc01a17 	ldw	r19,104(sp)
   9118c:	dc801917 	ldw	r18,100(sp)
   91190:	dc401817 	ldw	r17,96(sp)
   91194:	dc001717 	ldw	r16,92(sp)
   91198:	dec02104 	addi	sp,sp,132
   9119c:	f800283a 	ret
   911a0:	d8c02217 	ldw	r3,136(sp)
   911a4:	d9000317 	ldw	r4,12(sp)
   911a8:	0089c3c4 	movi	r2,9999
   911ac:	18800015 	stw	r2,0(r3)
   911b0:	20016c26 	beq	r4,zero,91764 <_dtoa_r+0x6b4>
   911b4:	05c002b4 	movhi	r23,10
   911b8:	bdf56d04 	addi	r23,r23,-10828
   911bc:	d9c02417 	ldw	r7,144(sp)
   911c0:	383fea26 	beq	r7,zero,9116c <_dtoa_r+0xbc>
   911c4:	b88000c7 	ldb	r2,3(r23)
   911c8:	10016d1e 	bne	r2,zero,91780 <_dtoa_r+0x6d0>
   911cc:	b88000c4 	addi	r2,r23,3
   911d0:	d8c02417 	ldw	r3,144(sp)
   911d4:	18800015 	stw	r2,0(r3)
   911d8:	003fe406 	br	9116c <_dtoa_r+0xbc>
   911dc:	04600034 	movhi	r17,32768
   911e0:	8c7fffc4 	addi	r17,r17,-1
   911e4:	9462703a 	and	r17,r18,r17
   911e8:	00800044 	movi	r2,1
   911ec:	98800015 	stw	r2,0(r19)
   911f0:	8825883a 	mov	r18,r17
   911f4:	003fcb06 	br	91124 <_dtoa_r+0x74>
   911f8:	d9400317 	ldw	r5,12(sp)
   911fc:	9028d53a 	srli	r20,r18,20
   91200:	d8800204 	addi	r2,sp,8
   91204:	d8800015 	stw	r2,0(sp)
   91208:	8009883a 	mov	r4,r16
   9120c:	880d883a 	mov	r6,r17
   91210:	d9c00104 	addi	r7,sp,4
   91214:	00943880 	call	94388 <__d2b>
   91218:	a501ffcc 	andi	r20,r20,2047
   9121c:	1039883a 	mov	fp,r2
   91220:	a001591e 	bne	r20,zero,91788 <_dtoa_r+0x6d8>
   91224:	dd400217 	ldw	r21,8(sp)
   91228:	dd000117 	ldw	r20,4(sp)
   9122c:	00befbc4 	movi	r2,-1041
   91230:	ad29883a 	add	r20,r21,r20
   91234:	a082d216 	blt	r20,r2,91d80 <_dtoa_r+0xcd0>
   91238:	d8c00317 	ldw	r3,12(sp)
   9123c:	013f0384 	movi	r4,-1010
   91240:	2509c83a 	sub	r4,r4,r20
   91244:	a0810484 	addi	r2,r20,1042
   91248:	9124983a 	sll	r18,r18,r4
   9124c:	1884d83a 	srl	r2,r3,r2
   91250:	9088b03a 	or	r4,r18,r2
   91254:	0096a580 	call	96a58 <__floatunsidf>
   91258:	1009883a 	mov	r4,r2
   9125c:	017f8434 	movhi	r5,65040
   91260:	00800044 	movi	r2,1
   91264:	194b883a 	add	r5,r3,r5
   91268:	a53fffc4 	addi	r20,r20,-1
   9126c:	d8800f15 	stw	r2,60(sp)
   91270:	000d883a 	mov	r6,zero
   91274:	01cffe34 	movhi	r7,16376
   91278:	00961dc0 	call	961dc <__subdf3>
   9127c:	1009883a 	mov	r4,r2
   91280:	180b883a 	mov	r5,r3
   91284:	0198dbf4 	movhi	r6,25455
   91288:	3190d844 	addi	r6,r6,17249
   9128c:	01cff4f4 	movhi	r7,16339
   91290:	39e1e9c4 	addi	r7,r7,-30809
   91294:	009623c0 	call	9623c <__muldf3>
   91298:	180b883a 	mov	r5,r3
   9129c:	01a2d874 	movhi	r6,35681
   912a0:	31b22cc4 	addi	r6,r6,-14157
   912a4:	01cff1f4 	movhi	r7,16327
   912a8:	39e28a04 	addi	r7,r7,-30168
   912ac:	1009883a 	mov	r4,r2
   912b0:	00961880 	call	96188 <__adddf3>
   912b4:	a009883a 	mov	r4,r20
   912b8:	1027883a 	mov	r19,r2
   912bc:	1825883a 	mov	r18,r3
   912c0:	00968b00 	call	968b0 <__floatsidf>
   912c4:	1009883a 	mov	r4,r2
   912c8:	180b883a 	mov	r5,r3
   912cc:	019427f4 	movhi	r6,20639
   912d0:	319e7ec4 	addi	r6,r6,31227
   912d4:	01cff4f4 	movhi	r7,16339
   912d8:	39d104c4 	addi	r7,r7,17427
   912dc:	009623c0 	call	9623c <__muldf3>
   912e0:	9809883a 	mov	r4,r19
   912e4:	900b883a 	mov	r5,r18
   912e8:	100d883a 	mov	r6,r2
   912ec:	180f883a 	mov	r7,r3
   912f0:	00961880 	call	96188 <__adddf3>
   912f4:	1009883a 	mov	r4,r2
   912f8:	180b883a 	mov	r5,r3
   912fc:	1027883a 	mov	r19,r2
   91300:	1825883a 	mov	r18,r3
   91304:	00969840 	call	96984 <__fixdfsi>
   91308:	9809883a 	mov	r4,r19
   9130c:	900b883a 	mov	r5,r18
   91310:	000d883a 	mov	r6,zero
   91314:	000f883a 	mov	r7,zero
   91318:	d8800615 	stw	r2,24(sp)
   9131c:	00968540 	call	96854 <__ltdf2>
   91320:	10027e16 	blt	r2,zero,91d1c <_dtoa_r+0xc6c>
   91324:	d8c00617 	ldw	r3,24(sp)
   91328:	00800584 	movi	r2,22
   9132c:	10c26c36 	bltu	r2,r3,91ce0 <_dtoa_r+0xc30>
   91330:	180490fa 	slli	r2,r3,3
   91334:	00c002b4 	movhi	r3,10
   91338:	18f59204 	addi	r3,r3,-10680
   9133c:	d9800317 	ldw	r6,12(sp)
   91340:	1885883a 	add	r2,r3,r2
   91344:	11000017 	ldw	r4,0(r2)
   91348:	11400117 	ldw	r5,4(r2)
   9134c:	880f883a 	mov	r7,r17
   91350:	009678c0 	call	9678c <__gtdf2>
   91354:	00828f0e 	bge	zero,r2,91d94 <_dtoa_r+0xce4>
   91358:	d8800617 	ldw	r2,24(sp)
   9135c:	d8000d15 	stw	zero,52(sp)
   91360:	10bfffc4 	addi	r2,r2,-1
   91364:	d8800615 	stw	r2,24(sp)
   91368:	ad29c83a 	sub	r20,r21,r20
   9136c:	a53fffc4 	addi	r20,r20,-1
   91370:	a0026616 	blt	r20,zero,91d0c <_dtoa_r+0xc5c>
   91374:	dd000715 	stw	r20,28(sp)
   91378:	d8000815 	stw	zero,32(sp)
   9137c:	d8800617 	ldw	r2,24(sp)
   91380:	10025a16 	blt	r2,zero,91cec <_dtoa_r+0xc3c>
   91384:	d8c00717 	ldw	r3,28(sp)
   91388:	d8800b15 	stw	r2,44(sp)
   9138c:	d8000a15 	stw	zero,40(sp)
   91390:	1887883a 	add	r3,r3,r2
   91394:	d8c00715 	stw	r3,28(sp)
   91398:	d9c00417 	ldw	r7,16(sp)
   9139c:	00800244 	movi	r2,9
   913a0:	11c10536 	bltu	r2,r7,917b8 <_dtoa_r+0x708>
   913a4:	00800144 	movi	r2,5
   913a8:	11c4c60e 	bge	r2,r7,926c4 <_dtoa_r+0x1614>
   913ac:	39ffff04 	addi	r7,r7,-4
   913b0:	d9c00415 	stw	r7,16(sp)
   913b4:	0027883a 	mov	r19,zero
   913b8:	d9c00417 	ldw	r7,16(sp)
   913bc:	008000c4 	movi	r2,3
   913c0:	3883a226 	beq	r7,r2,9224c <_dtoa_r+0x119c>
   913c4:	11c2bc16 	blt	r2,r7,91eb8 <_dtoa_r+0xe08>
   913c8:	00800084 	movi	r2,2
   913cc:	3880fb1e 	bne	r7,r2,917bc <_dtoa_r+0x70c>
   913d0:	d8000c15 	stw	zero,48(sp)
   913d4:	d9002117 	ldw	r4,132(sp)
   913d8:	0103ae0e 	bge	zero,r4,92294 <_dtoa_r+0x11e4>
   913dc:	2025883a 	mov	r18,r4
   913e0:	d9000e15 	stw	r4,56(sp)
   913e4:	d9000915 	stw	r4,36(sp)
   913e8:	80001115 	stw	zero,68(r16)
   913ec:	008005c4 	movi	r2,23
   913f0:	1484b22e 	bgeu	r2,r18,926bc <_dtoa_r+0x160c>
   913f4:	00c00044 	movi	r3,1
   913f8:	00800104 	movi	r2,4
   913fc:	1085883a 	add	r2,r2,r2
   91400:	11000504 	addi	r4,r2,20
   91404:	180b883a 	mov	r5,r3
   91408:	18c00044 	addi	r3,r3,1
   9140c:	913ffb2e 	bgeu	r18,r4,913fc <_dtoa_r+0x34c>
   91410:	81401115 	stw	r5,68(r16)
   91414:	8009883a 	mov	r4,r16
   91418:	009373c0 	call	9373c <_Balloc>
   9141c:	102f883a 	mov	r23,r2
   91420:	80801015 	stw	r2,64(r16)
   91424:	00800384 	movi	r2,14
   91428:	1480f036 	bltu	r2,r18,917ec <_dtoa_r+0x73c>
   9142c:	9800ef26 	beq	r19,zero,917ec <_dtoa_r+0x73c>
   91430:	d8800617 	ldw	r2,24(sp)
   91434:	00839c0e 	bge	zero,r2,922a8 <_dtoa_r+0x11f8>
   91438:	d8c00617 	ldw	r3,24(sp)
   9143c:	108003cc 	andi	r2,r2,15
   91440:	100490fa 	slli	r2,r2,3
   91444:	182bd13a 	srai	r21,r3,4
   91448:	00c002b4 	movhi	r3,10
   9144c:	18f59204 	addi	r3,r3,-10680
   91450:	1885883a 	add	r2,r3,r2
   91454:	a8c0040c 	andi	r3,r21,16
   91458:	12800017 	ldw	r10,0(r2)
   9145c:	15800117 	ldw	r22,4(r2)
   91460:	18038726 	beq	r3,zero,92280 <_dtoa_r+0x11d0>
   91464:	008002b4 	movhi	r2,10
   91468:	10b58804 	addi	r2,r2,-10720
   9146c:	11800817 	ldw	r6,32(r2)
   91470:	11c00917 	ldw	r7,36(r2)
   91474:	d9000317 	ldw	r4,12(sp)
   91478:	880b883a 	mov	r5,r17
   9147c:	da801515 	stw	r10,84(sp)
   91480:	00965200 	call	96520 <__divdf3>
   91484:	da801517 	ldw	r10,84(sp)
   91488:	d8801015 	stw	r2,64(sp)
   9148c:	1829883a 	mov	r20,r3
   91490:	ad4003cc 	andi	r21,r21,15
   91494:	048000c4 	movi	r18,3
   91498:	a8001126 	beq	r21,zero,914e0 <_dtoa_r+0x430>
   9149c:	04c002b4 	movhi	r19,10
   914a0:	9cf58804 	addi	r19,r19,-10720
   914a4:	5005883a 	mov	r2,r10
   914a8:	b007883a 	mov	r3,r22
   914ac:	a980004c 	andi	r6,r21,1
   914b0:	1009883a 	mov	r4,r2
   914b4:	a82bd07a 	srai	r21,r21,1
   914b8:	180b883a 	mov	r5,r3
   914bc:	30000426 	beq	r6,zero,914d0 <_dtoa_r+0x420>
   914c0:	99800017 	ldw	r6,0(r19)
   914c4:	99c00117 	ldw	r7,4(r19)
   914c8:	94800044 	addi	r18,r18,1
   914cc:	009623c0 	call	9623c <__muldf3>
   914d0:	9cc00204 	addi	r19,r19,8
   914d4:	a83ff51e 	bne	r21,zero,914ac <_dtoa_r+0x3fc>
   914d8:	1015883a 	mov	r10,r2
   914dc:	182d883a 	mov	r22,r3
   914e0:	d9001017 	ldw	r4,64(sp)
   914e4:	a00b883a 	mov	r5,r20
   914e8:	500d883a 	mov	r6,r10
   914ec:	b00f883a 	mov	r7,r22
   914f0:	00965200 	call	96520 <__divdf3>
   914f4:	1027883a 	mov	r19,r2
   914f8:	1829883a 	mov	r20,r3
   914fc:	d8c00d17 	ldw	r3,52(sp)
   91500:	18000626 	beq	r3,zero,9151c <_dtoa_r+0x46c>
   91504:	9809883a 	mov	r4,r19
   91508:	a00b883a 	mov	r5,r20
   9150c:	000d883a 	mov	r6,zero
   91510:	01cffc34 	movhi	r7,16368
   91514:	00968540 	call	96854 <__ltdf2>
   91518:	10040e16 	blt	r2,zero,92554 <_dtoa_r+0x14a4>
   9151c:	9009883a 	mov	r4,r18
   91520:	00968b00 	call	968b0 <__floatsidf>
   91524:	1009883a 	mov	r4,r2
   91528:	180b883a 	mov	r5,r3
   9152c:	980d883a 	mov	r6,r19
   91530:	a00f883a 	mov	r7,r20
   91534:	009623c0 	call	9623c <__muldf3>
   91538:	1009883a 	mov	r4,r2
   9153c:	180b883a 	mov	r5,r3
   91540:	000d883a 	mov	r6,zero
   91544:	01d00734 	movhi	r7,16412
   91548:	00961880 	call	96188 <__adddf3>
   9154c:	057f3034 	movhi	r21,64704
   91550:	1d6b883a 	add	r21,r3,r21
   91554:	d8c00917 	ldw	r3,36(sp)
   91558:	1025883a 	mov	r18,r2
   9155c:	18031f26 	beq	r3,zero,921dc <_dtoa_r+0x112c>
   91560:	d8800617 	ldw	r2,24(sp)
   91564:	dac00917 	ldw	r11,36(sp)
   91568:	d8801315 	stw	r2,76(sp)
   9156c:	d8c00c17 	ldw	r3,48(sp)
   91570:	18039026 	beq	r3,zero,923b4 <_dtoa_r+0x1304>
   91574:	58bfffc4 	addi	r2,r11,-1
   91578:	100490fa 	slli	r2,r2,3
   9157c:	00c002b4 	movhi	r3,10
   91580:	18f59204 	addi	r3,r3,-10680
   91584:	0009883a 	mov	r4,zero
   91588:	1885883a 	add	r2,r3,r2
   9158c:	11800017 	ldw	r6,0(r2)
   91590:	11c00117 	ldw	r7,4(r2)
   91594:	014ff834 	movhi	r5,16352
   91598:	dac01615 	stw	r11,88(sp)
   9159c:	00965200 	call	96520 <__divdf3>
   915a0:	900d883a 	mov	r6,r18
   915a4:	a80f883a 	mov	r7,r21
   915a8:	1009883a 	mov	r4,r2
   915ac:	180b883a 	mov	r5,r3
   915b0:	00961dc0 	call	961dc <__subdf3>
   915b4:	a00b883a 	mov	r5,r20
   915b8:	9809883a 	mov	r4,r19
   915bc:	182b883a 	mov	r21,r3
   915c0:	d8801015 	stw	r2,64(sp)
   915c4:	00969840 	call	96984 <__fixdfsi>
   915c8:	1009883a 	mov	r4,r2
   915cc:	d8801515 	stw	r2,84(sp)
   915d0:	00968b00 	call	968b0 <__floatsidf>
   915d4:	9809883a 	mov	r4,r19
   915d8:	a00b883a 	mov	r5,r20
   915dc:	100d883a 	mov	r6,r2
   915e0:	180f883a 	mov	r7,r3
   915e4:	00961dc0 	call	961dc <__subdf3>
   915e8:	da401517 	ldw	r9,84(sp)
   915ec:	d9001017 	ldw	r4,64(sp)
   915f0:	a80b883a 	mov	r5,r21
   915f4:	4d000c04 	addi	r20,r9,48
   915f8:	bd000005 	stb	r20,0(r23)
   915fc:	100d883a 	mov	r6,r2
   91600:	180f883a 	mov	r7,r3
   91604:	bd800044 	addi	r22,r23,1
   91608:	1025883a 	mov	r18,r2
   9160c:	1827883a 	mov	r19,r3
   91610:	009678c0 	call	9678c <__gtdf2>
   91614:	00842216 	blt	zero,r2,926a0 <_dtoa_r+0x15f0>
   91618:	0009883a 	mov	r4,zero
   9161c:	014ffc34 	movhi	r5,16368
   91620:	900d883a 	mov	r6,r18
   91624:	980f883a 	mov	r7,r19
   91628:	00961dc0 	call	961dc <__subdf3>
   9162c:	d9001017 	ldw	r4,64(sp)
   91630:	a80b883a 	mov	r5,r21
   91634:	100d883a 	mov	r6,r2
   91638:	180f883a 	mov	r7,r3
   9163c:	009678c0 	call	9678c <__gtdf2>
   91640:	dac01617 	ldw	r11,88(sp)
   91644:	00841316 	blt	zero,r2,92694 <_dtoa_r+0x15e4>
   91648:	00800044 	movi	r2,1
   9164c:	12c0670e 	bge	r2,r11,917ec <_dtoa_r+0x73c>
   91650:	bad7883a 	add	r11,r23,r11
   91654:	df001115 	stw	fp,68(sp)
   91658:	dc401215 	stw	r17,72(sp)
   9165c:	5839883a 	mov	fp,r11
   91660:	dc401017 	ldw	r17,64(sp)
   91664:	00000806 	br	91688 <_dtoa_r+0x5d8>
   91668:	00961dc0 	call	961dc <__subdf3>
   9166c:	1009883a 	mov	r4,r2
   91670:	180b883a 	mov	r5,r3
   91674:	880d883a 	mov	r6,r17
   91678:	a80f883a 	mov	r7,r21
   9167c:	00968540 	call	96854 <__ltdf2>
   91680:	1003ee16 	blt	r2,zero,9263c <_dtoa_r+0x158c>
   91684:	b703f126 	beq	r22,fp,9264c <_dtoa_r+0x159c>
   91688:	8809883a 	mov	r4,r17
   9168c:	a80b883a 	mov	r5,r21
   91690:	000d883a 	mov	r6,zero
   91694:	01d00934 	movhi	r7,16420
   91698:	009623c0 	call	9623c <__muldf3>
   9169c:	000d883a 	mov	r6,zero
   916a0:	01d00934 	movhi	r7,16420
   916a4:	9009883a 	mov	r4,r18
   916a8:	980b883a 	mov	r5,r19
   916ac:	1023883a 	mov	r17,r2
   916b0:	182b883a 	mov	r21,r3
   916b4:	009623c0 	call	9623c <__muldf3>
   916b8:	180b883a 	mov	r5,r3
   916bc:	1009883a 	mov	r4,r2
   916c0:	1825883a 	mov	r18,r3
   916c4:	1027883a 	mov	r19,r2
   916c8:	00969840 	call	96984 <__fixdfsi>
   916cc:	1009883a 	mov	r4,r2
   916d0:	1029883a 	mov	r20,r2
   916d4:	00968b00 	call	968b0 <__floatsidf>
   916d8:	9809883a 	mov	r4,r19
   916dc:	900b883a 	mov	r5,r18
   916e0:	100d883a 	mov	r6,r2
   916e4:	180f883a 	mov	r7,r3
   916e8:	00961dc0 	call	961dc <__subdf3>
   916ec:	a5000c04 	addi	r20,r20,48
   916f0:	b5000005 	stb	r20,0(r22)
   916f4:	1009883a 	mov	r4,r2
   916f8:	180b883a 	mov	r5,r3
   916fc:	880d883a 	mov	r6,r17
   91700:	a80f883a 	mov	r7,r21
   91704:	1025883a 	mov	r18,r2
   91708:	1827883a 	mov	r19,r3
   9170c:	00968540 	call	96854 <__ltdf2>
   91710:	b5800044 	addi	r22,r22,1
   91714:	0009883a 	mov	r4,zero
   91718:	014ffc34 	movhi	r5,16368
   9171c:	900d883a 	mov	r6,r18
   91720:	980f883a 	mov	r7,r19
   91724:	103fd00e 	bge	r2,zero,91668 <_dtoa_r+0x5b8>
   91728:	d9001317 	ldw	r4,76(sp)
   9172c:	df001117 	ldw	fp,68(sp)
   91730:	d9000615 	stw	r4,24(sp)
   91734:	8009883a 	mov	r4,r16
   91738:	e00b883a 	mov	r5,fp
   9173c:	00937e40 	call	937e4 <_Bfree>
   91740:	d9c00617 	ldw	r7,24(sp)
   91744:	d8c02217 	ldw	r3,136(sp)
   91748:	d9002417 	ldw	r4,144(sp)
   9174c:	b0000005 	stb	zero,0(r22)
   91750:	38800044 	addi	r2,r7,1
   91754:	18800015 	stw	r2,0(r3)
   91758:	203e8426 	beq	r4,zero,9116c <_dtoa_r+0xbc>
   9175c:	25800015 	stw	r22,0(r4)
   91760:	003e8206 	br	9116c <_dtoa_r+0xbc>
   91764:	00800434 	movhi	r2,16
   91768:	10bfffc4 	addi	r2,r2,-1
   9176c:	90a4703a 	and	r18,r18,r2
   91770:	903e901e 	bne	r18,zero,911b4 <_dtoa_r+0x104>
   91774:	05c002b4 	movhi	r23,10
   91778:	bdf56a04 	addi	r23,r23,-10840
   9177c:	003e8f06 	br	911bc <_dtoa_r+0x10c>
   91780:	b8800204 	addi	r2,r23,8
   91784:	003e9206 	br	911d0 <_dtoa_r+0x120>
   91788:	01400434 	movhi	r5,16
   9178c:	297fffc4 	addi	r5,r5,-1
   91790:	894a703a 	and	r5,r17,r5
   91794:	d9000317 	ldw	r4,12(sp)
   91798:	294ffc34 	orhi	r5,r5,16368
   9179c:	a53f0044 	addi	r20,r20,-1023
   917a0:	dd400217 	ldw	r21,8(sp)
   917a4:	d8000f15 	stw	zero,60(sp)
   917a8:	003eb106 	br	91270 <_dtoa_r+0x1c0>
   917ac:	05c002b4 	movhi	r23,10
   917b0:	bdf4c104 	addi	r23,r23,-11516
   917b4:	003e6d06 	br	9116c <_dtoa_r+0xbc>
   917b8:	d8000415 	stw	zero,16(sp)
   917bc:	80001115 	stw	zero,68(r16)
   917c0:	8009883a 	mov	r4,r16
   917c4:	000b883a 	mov	r5,zero
   917c8:	009373c0 	call	9373c <_Balloc>
   917cc:	01ffffc4 	movi	r7,-1
   917d0:	102f883a 	mov	r23,r2
   917d4:	80801015 	stw	r2,64(r16)
   917d8:	00800044 	movi	r2,1
   917dc:	d9c00915 	stw	r7,36(sp)
   917e0:	d8002115 	stw	zero,132(sp)
   917e4:	d9c00e15 	stw	r7,56(sp)
   917e8:	d8800c15 	stw	r2,48(sp)
   917ec:	d8800117 	ldw	r2,4(sp)
   917f0:	10008b16 	blt	r2,zero,91a20 <_dtoa_r+0x970>
   917f4:	d9000617 	ldw	r4,24(sp)
   917f8:	00c00384 	movi	r3,14
   917fc:	19008816 	blt	r3,r4,91a20 <_dtoa_r+0x970>
   91800:	200490fa 	slli	r2,r4,3
   91804:	d9c02117 	ldw	r7,132(sp)
   91808:	00c002b4 	movhi	r3,10
   9180c:	18f59204 	addi	r3,r3,-10680
   91810:	1885883a 	add	r2,r3,r2
   91814:	14800017 	ldw	r18,0(r2)
   91818:	14c00117 	ldw	r19,4(r2)
   9181c:	3801c916 	blt	r7,zero,91f44 <_dtoa_r+0xe94>
   91820:	d9000317 	ldw	r4,12(sp)
   91824:	900d883a 	mov	r6,r18
   91828:	980f883a 	mov	r7,r19
   9182c:	880b883a 	mov	r5,r17
   91830:	00965200 	call	96520 <__divdf3>
   91834:	180b883a 	mov	r5,r3
   91838:	1009883a 	mov	r4,r2
   9183c:	00969840 	call	96984 <__fixdfsi>
   91840:	1009883a 	mov	r4,r2
   91844:	102b883a 	mov	r21,r2
   91848:	00968b00 	call	968b0 <__floatsidf>
   9184c:	1009883a 	mov	r4,r2
   91850:	180b883a 	mov	r5,r3
   91854:	900d883a 	mov	r6,r18
   91858:	980f883a 	mov	r7,r19
   9185c:	009623c0 	call	9623c <__muldf3>
   91860:	d9000317 	ldw	r4,12(sp)
   91864:	880b883a 	mov	r5,r17
   91868:	100d883a 	mov	r6,r2
   9186c:	180f883a 	mov	r7,r3
   91870:	00961dc0 	call	961dc <__subdf3>
   91874:	d9c00917 	ldw	r7,36(sp)
   91878:	1009883a 	mov	r4,r2
   9187c:	a8800c04 	addi	r2,r21,48
   91880:	b8800005 	stb	r2,0(r23)
   91884:	01800044 	movi	r6,1
   91888:	180b883a 	mov	r5,r3
   9188c:	2005883a 	mov	r2,r4
   91890:	bd800044 	addi	r22,r23,1
   91894:	39803726 	beq	r7,r6,91974 <_dtoa_r+0x8c4>
   91898:	000d883a 	mov	r6,zero
   9189c:	01d00934 	movhi	r7,16420
   918a0:	009623c0 	call	9623c <__muldf3>
   918a4:	1009883a 	mov	r4,r2
   918a8:	180b883a 	mov	r5,r3
   918ac:	000d883a 	mov	r6,zero
   918b0:	000f883a 	mov	r7,zero
   918b4:	1029883a 	mov	r20,r2
   918b8:	1823883a 	mov	r17,r3
   918bc:	00966d40 	call	966d4 <__eqdf2>
   918c0:	103f9c26 	beq	r2,zero,91734 <_dtoa_r+0x684>
   918c4:	dd400917 	ldw	r21,36(sp)
   918c8:	dc000415 	stw	r16,16(sp)
   918cc:	00000906 	br	918f4 <_dtoa_r+0x844>
   918d0:	009623c0 	call	9623c <__muldf3>
   918d4:	1009883a 	mov	r4,r2
   918d8:	180b883a 	mov	r5,r3
   918dc:	000d883a 	mov	r6,zero
   918e0:	000f883a 	mov	r7,zero
   918e4:	1029883a 	mov	r20,r2
   918e8:	1823883a 	mov	r17,r3
   918ec:	00966d40 	call	966d4 <__eqdf2>
   918f0:	10022926 	beq	r2,zero,92198 <_dtoa_r+0x10e8>
   918f4:	900d883a 	mov	r6,r18
   918f8:	980f883a 	mov	r7,r19
   918fc:	a009883a 	mov	r4,r20
   91900:	880b883a 	mov	r5,r17
   91904:	00965200 	call	96520 <__divdf3>
   91908:	180b883a 	mov	r5,r3
   9190c:	1009883a 	mov	r4,r2
   91910:	00969840 	call	96984 <__fixdfsi>
   91914:	1009883a 	mov	r4,r2
   91918:	1021883a 	mov	r16,r2
   9191c:	00968b00 	call	968b0 <__floatsidf>
   91920:	1009883a 	mov	r4,r2
   91924:	180b883a 	mov	r5,r3
   91928:	900d883a 	mov	r6,r18
   9192c:	980f883a 	mov	r7,r19
   91930:	009623c0 	call	9623c <__muldf3>
   91934:	a009883a 	mov	r4,r20
   91938:	880b883a 	mov	r5,r17
   9193c:	100d883a 	mov	r6,r2
   91940:	180f883a 	mov	r7,r3
   91944:	00961dc0 	call	961dc <__subdf3>
   91948:	82400c04 	addi	r9,r16,48
   9194c:	b2400005 	stb	r9,0(r22)
   91950:	b5800044 	addi	r22,r22,1
   91954:	b5d3c83a 	sub	r9,r22,r23
   91958:	000d883a 	mov	r6,zero
   9195c:	01d00934 	movhi	r7,16420
   91960:	1009883a 	mov	r4,r2
   91964:	180b883a 	mov	r5,r3
   91968:	aa7fd91e 	bne	r21,r9,918d0 <_dtoa_r+0x820>
   9196c:	802b883a 	mov	r21,r16
   91970:	dc000417 	ldw	r16,16(sp)
   91974:	1009883a 	mov	r4,r2
   91978:	180b883a 	mov	r5,r3
   9197c:	100d883a 	mov	r6,r2
   91980:	180f883a 	mov	r7,r3
   91984:	00961880 	call	96188 <__adddf3>
   91988:	9009883a 	mov	r4,r18
   9198c:	980b883a 	mov	r5,r19
   91990:	100d883a 	mov	r6,r2
   91994:	180f883a 	mov	r7,r3
   91998:	1023883a 	mov	r17,r2
   9199c:	1829883a 	mov	r20,r3
   919a0:	00968540 	call	96854 <__ltdf2>
   919a4:	10000816 	blt	r2,zero,919c8 <_dtoa_r+0x918>
   919a8:	9009883a 	mov	r4,r18
   919ac:	980b883a 	mov	r5,r19
   919b0:	880d883a 	mov	r6,r17
   919b4:	a00f883a 	mov	r7,r20
   919b8:	00966d40 	call	966d4 <__eqdf2>
   919bc:	103f5d1e 	bne	r2,zero,91734 <_dtoa_r+0x684>
   919c0:	ad40004c 	andi	r21,r21,1
   919c4:	a83f5b26 	beq	r21,zero,91734 <_dtoa_r+0x684>
   919c8:	b53fffc3 	ldbu	r20,-1(r22)
   919cc:	b0ffff84 	addi	r3,r22,-2
   919d0:	01400e44 	movi	r5,57
   919d4:	00000306 	br	919e4 <_dtoa_r+0x934>
   919d8:	1d000003 	ldbu	r20,0(r3)
   919dc:	102d883a 	mov	r22,r2
   919e0:	18ffffc4 	addi	r3,r3,-1
   919e4:	a1003fcc 	andi	r4,r20,255
   919e8:	2100201c 	xori	r4,r4,128
   919ec:	213fe004 	addi	r4,r4,-128
   919f0:	b0bfffc4 	addi	r2,r22,-1
   919f4:	2142ca1e 	bne	r4,r5,92520 <_dtoa_r+0x1470>
   919f8:	b8bff71e 	bne	r23,r2,919d8 <_dtoa_r+0x928>
   919fc:	d8800617 	ldw	r2,24(sp)
   91a00:	05000c44 	movi	r20,49
   91a04:	10800044 	addi	r2,r2,1
   91a08:	d8800615 	stw	r2,24(sp)
   91a0c:	00800c04 	movi	r2,48
   91a10:	b8800005 	stb	r2,0(r23)
   91a14:	b805883a 	mov	r2,r23
   91a18:	15000005 	stb	r20,0(r2)
   91a1c:	003f4506 	br	91734 <_dtoa_r+0x684>
   91a20:	d9c00c17 	ldw	r7,48(sp)
   91a24:	3800c926 	beq	r7,zero,91d4c <_dtoa_r+0xc9c>
   91a28:	d9c00417 	ldw	r7,16(sp)
   91a2c:	00c00044 	movi	r3,1
   91a30:	19c16c0e 	bge	r3,r7,91fe4 <_dtoa_r+0xf34>
   91a34:	d9000917 	ldw	r4,36(sp)
   91a38:	d9c00a17 	ldw	r7,40(sp)
   91a3c:	24ffffc4 	addi	r19,r4,-1
   91a40:	3cc20716 	blt	r7,r19,92260 <_dtoa_r+0x11b0>
   91a44:	3ce7c83a 	sub	r19,r7,r19
   91a48:	d9c00917 	ldw	r7,36(sp)
   91a4c:	3802ae16 	blt	r7,zero,92508 <_dtoa_r+0x1458>
   91a50:	dc800817 	ldw	r18,32(sp)
   91a54:	d8800917 	ldw	r2,36(sp)
   91a58:	d8c00817 	ldw	r3,32(sp)
   91a5c:	d9c00717 	ldw	r7,28(sp)
   91a60:	8009883a 	mov	r4,r16
   91a64:	1887883a 	add	r3,r3,r2
   91a68:	388f883a 	add	r7,r7,r2
   91a6c:	01400044 	movi	r5,1
   91a70:	d8c00815 	stw	r3,32(sp)
   91a74:	d9c00715 	stw	r7,28(sp)
   91a78:	0093b3c0 	call	93b3c <__i2b>
   91a7c:	102b883a 	mov	r21,r2
   91a80:	90000a26 	beq	r18,zero,91aac <_dtoa_r+0x9fc>
   91a84:	d8800717 	ldw	r2,28(sp)
   91a88:	0080080e 	bge	zero,r2,91aac <_dtoa_r+0x9fc>
   91a8c:	90812b16 	blt	r18,r2,91f3c <_dtoa_r+0xe8c>
   91a90:	d8c00817 	ldw	r3,32(sp)
   91a94:	d9000717 	ldw	r4,28(sp)
   91a98:	90a5c83a 	sub	r18,r18,r2
   91a9c:	1887c83a 	sub	r3,r3,r2
   91aa0:	2089c83a 	sub	r4,r4,r2
   91aa4:	d8c00815 	stw	r3,32(sp)
   91aa8:	d9000715 	stw	r4,28(sp)
   91aac:	d9c00a17 	ldw	r7,40(sp)
   91ab0:	01c0140e 	bge	zero,r7,91b04 <_dtoa_r+0xa54>
   91ab4:	d8800c17 	ldw	r2,48(sp)
   91ab8:	1001de26 	beq	r2,zero,92234 <_dtoa_r+0x1184>
   91abc:	04c00e0e 	bge	zero,r19,91af8 <_dtoa_r+0xa48>
   91ac0:	a80b883a 	mov	r5,r21
   91ac4:	8009883a 	mov	r4,r16
   91ac8:	980d883a 	mov	r6,r19
   91acc:	0093d580 	call	93d58 <__pow5mult>
   91ad0:	e00d883a 	mov	r6,fp
   91ad4:	8009883a 	mov	r4,r16
   91ad8:	100b883a 	mov	r5,r2
   91adc:	102b883a 	mov	r21,r2
   91ae0:	0093b780 	call	93b78 <__multiply>
   91ae4:	1029883a 	mov	r20,r2
   91ae8:	e00b883a 	mov	r5,fp
   91aec:	8009883a 	mov	r4,r16
   91af0:	00937e40 	call	937e4 <_Bfree>
   91af4:	a039883a 	mov	fp,r20
   91af8:	d8c00a17 	ldw	r3,40(sp)
   91afc:	1ccdc83a 	sub	r6,r3,r19
   91b00:	3001291e 	bne	r6,zero,91fa8 <_dtoa_r+0xef8>
   91b04:	8009883a 	mov	r4,r16
   91b08:	01400044 	movi	r5,1
   91b0c:	0093b3c0 	call	93b3c <__i2b>
   91b10:	d9000b17 	ldw	r4,44(sp)
   91b14:	1029883a 	mov	r20,r2
   91b18:	0100050e 	bge	zero,r4,91b30 <_dtoa_r+0xa80>
   91b1c:	d9800b17 	ldw	r6,44(sp)
   91b20:	8009883a 	mov	r4,r16
   91b24:	100b883a 	mov	r5,r2
   91b28:	0093d580 	call	93d58 <__pow5mult>
   91b2c:	1029883a 	mov	r20,r2
   91b30:	d9c00417 	ldw	r7,16(sp)
   91b34:	00800044 	movi	r2,1
   91b38:	11c0f00e 	bge	r2,r7,91efc <_dtoa_r+0xe4c>
   91b3c:	0023883a 	mov	r17,zero
   91b40:	d8800b17 	ldw	r2,44(sp)
   91b44:	1001741e 	bne	r2,zero,92118 <_dtoa_r+0x1068>
   91b48:	00800044 	movi	r2,1
   91b4c:	d8c00717 	ldw	r3,28(sp)
   91b50:	10c5883a 	add	r2,r2,r3
   91b54:	108007cc 	andi	r2,r2,31
   91b58:	10008026 	beq	r2,zero,91d5c <_dtoa_r+0xcac>
   91b5c:	01000804 	movi	r4,32
   91b60:	2089c83a 	sub	r4,r4,r2
   91b64:	00c00104 	movi	r3,4
   91b68:	1902d00e 	bge	r3,r4,926ac <_dtoa_r+0x15fc>
   91b6c:	d9000817 	ldw	r4,32(sp)
   91b70:	d9c00717 	ldw	r7,28(sp)
   91b74:	00c00704 	movi	r3,28
   91b78:	1885c83a 	sub	r2,r3,r2
   91b7c:	2089883a 	add	r4,r4,r2
   91b80:	388f883a 	add	r7,r7,r2
   91b84:	d9000815 	stw	r4,32(sp)
   91b88:	90a5883a 	add	r18,r18,r2
   91b8c:	d9c00715 	stw	r7,28(sp)
   91b90:	d9c00817 	ldw	r7,32(sp)
   91b94:	01c0050e 	bge	zero,r7,91bac <_dtoa_r+0xafc>
   91b98:	e00b883a 	mov	r5,fp
   91b9c:	8009883a 	mov	r4,r16
   91ba0:	380d883a 	mov	r6,r7
   91ba4:	0093e840 	call	93e84 <__lshift>
   91ba8:	1039883a 	mov	fp,r2
   91bac:	d8800717 	ldw	r2,28(sp)
   91bb0:	0080050e 	bge	zero,r2,91bc8 <_dtoa_r+0xb18>
   91bb4:	a00b883a 	mov	r5,r20
   91bb8:	8009883a 	mov	r4,r16
   91bbc:	100d883a 	mov	r6,r2
   91bc0:	0093e840 	call	93e84 <__lshift>
   91bc4:	1029883a 	mov	r20,r2
   91bc8:	d8c00d17 	ldw	r3,52(sp)
   91bcc:	1801401e 	bne	r3,zero,920d0 <_dtoa_r+0x1020>
   91bd0:	d8800917 	ldw	r2,36(sp)
   91bd4:	00815a0e 	bge	zero,r2,92140 <_dtoa_r+0x1090>
   91bd8:	d8c00c17 	ldw	r3,48(sp)
   91bdc:	18006f1e 	bne	r3,zero,91d9c <_dtoa_r+0xcec>
   91be0:	b823883a 	mov	r17,r23
   91be4:	dc800917 	ldw	r18,36(sp)
   91be8:	00000206 	br	91bf4 <_dtoa_r+0xb44>
   91bec:	009380c0 	call	9380c <__multadd>
   91bf0:	1039883a 	mov	fp,r2
   91bf4:	e009883a 	mov	r4,fp
   91bf8:	a00b883a 	mov	r5,r20
   91bfc:	0090ea80 	call	90ea8 <quorem>
   91c00:	10800c04 	addi	r2,r2,48
   91c04:	88800005 	stb	r2,0(r17)
   91c08:	8c400044 	addi	r17,r17,1
   91c0c:	8dc7c83a 	sub	r3,r17,r23
   91c10:	8009883a 	mov	r4,r16
   91c14:	e00b883a 	mov	r5,fp
   91c18:	01800284 	movi	r6,10
   91c1c:	000f883a 	mov	r7,zero
   91c20:	1cbff216 	blt	r3,r18,91bec <_dtoa_r+0xb3c>
   91c24:	dd800917 	ldw	r22,36(sp)
   91c28:	1007883a 	mov	r3,r2
   91c2c:	05823a0e 	bge	zero,r22,92518 <_dtoa_r+0x1468>
   91c30:	bdad883a 	add	r22,r23,r22
   91c34:	0023883a 	mov	r17,zero
   91c38:	e00b883a 	mov	r5,fp
   91c3c:	01800044 	movi	r6,1
   91c40:	8009883a 	mov	r4,r16
   91c44:	d8c01515 	stw	r3,84(sp)
   91c48:	0093e840 	call	93e84 <__lshift>
   91c4c:	1009883a 	mov	r4,r2
   91c50:	a00b883a 	mov	r5,r20
   91c54:	1039883a 	mov	fp,r2
   91c58:	0093fe00 	call	93fe0 <__mcmp>
   91c5c:	d8c01517 	ldw	r3,84(sp)
   91c60:	0080d60e 	bge	zero,r2,91fbc <_dtoa_r+0xf0c>
   91c64:	b13fffc3 	ldbu	r4,-1(r22)
   91c68:	b0ffff84 	addi	r3,r22,-2
   91c6c:	01800e44 	movi	r6,57
   91c70:	00000306 	br	91c80 <_dtoa_r+0xbd0>
   91c74:	19000003 	ldbu	r4,0(r3)
   91c78:	102d883a 	mov	r22,r2
   91c7c:	18ffffc4 	addi	r3,r3,-1
   91c80:	21403fcc 	andi	r5,r4,255
   91c84:	2940201c 	xori	r5,r5,128
   91c88:	297fe004 	addi	r5,r5,-128
   91c8c:	b0bfffc4 	addi	r2,r22,-1
   91c90:	2981a71e 	bne	r5,r6,92330 <_dtoa_r+0x1280>
   91c94:	b8bff71e 	bne	r23,r2,91c74 <_dtoa_r+0xbc4>
   91c98:	d8800617 	ldw	r2,24(sp)
   91c9c:	10800044 	addi	r2,r2,1
   91ca0:	d8800615 	stw	r2,24(sp)
   91ca4:	00800c44 	movi	r2,49
   91ca8:	b8800005 	stb	r2,0(r23)
   91cac:	8009883a 	mov	r4,r16
   91cb0:	a00b883a 	mov	r5,r20
   91cb4:	00937e40 	call	937e4 <_Bfree>
   91cb8:	a83e9e26 	beq	r21,zero,91734 <_dtoa_r+0x684>
   91cbc:	88000426 	beq	r17,zero,91cd0 <_dtoa_r+0xc20>
   91cc0:	8d400326 	beq	r17,r21,91cd0 <_dtoa_r+0xc20>
   91cc4:	8009883a 	mov	r4,r16
   91cc8:	880b883a 	mov	r5,r17
   91ccc:	00937e40 	call	937e4 <_Bfree>
   91cd0:	8009883a 	mov	r4,r16
   91cd4:	a80b883a 	mov	r5,r21
   91cd8:	00937e40 	call	937e4 <_Bfree>
   91cdc:	003e9506 	br	91734 <_dtoa_r+0x684>
   91ce0:	00c00044 	movi	r3,1
   91ce4:	d8c00d15 	stw	r3,52(sp)
   91ce8:	003d9f06 	br	91368 <_dtoa_r+0x2b8>
   91cec:	d9000817 	ldw	r4,32(sp)
   91cf0:	d8800617 	ldw	r2,24(sp)
   91cf4:	d8000b15 	stw	zero,44(sp)
   91cf8:	2089c83a 	sub	r4,r4,r2
   91cfc:	0087c83a 	sub	r3,zero,r2
   91d00:	d9000815 	stw	r4,32(sp)
   91d04:	d8c00a15 	stw	r3,40(sp)
   91d08:	003da306 	br	91398 <_dtoa_r+0x2e8>
   91d0c:	0529c83a 	sub	r20,zero,r20
   91d10:	dd000815 	stw	r20,32(sp)
   91d14:	d8000715 	stw	zero,28(sp)
   91d18:	003d9806 	br	9137c <_dtoa_r+0x2cc>
   91d1c:	d9000617 	ldw	r4,24(sp)
   91d20:	00968b00 	call	968b0 <__floatsidf>
   91d24:	1009883a 	mov	r4,r2
   91d28:	180b883a 	mov	r5,r3
   91d2c:	980d883a 	mov	r6,r19
   91d30:	900f883a 	mov	r7,r18
   91d34:	00967300 	call	96730 <__nedf2>
   91d38:	103d7a26 	beq	r2,zero,91324 <_dtoa_r+0x274>
   91d3c:	d8800617 	ldw	r2,24(sp)
   91d40:	10bfffc4 	addi	r2,r2,-1
   91d44:	d8800615 	stw	r2,24(sp)
   91d48:	003d7606 	br	91324 <_dtoa_r+0x274>
   91d4c:	dcc00a17 	ldw	r19,40(sp)
   91d50:	dc800817 	ldw	r18,32(sp)
   91d54:	002b883a 	mov	r21,zero
   91d58:	003f4906 	br	91a80 <_dtoa_r+0x9d0>
   91d5c:	00800704 	movi	r2,28
   91d60:	d8c00817 	ldw	r3,32(sp)
   91d64:	d9000717 	ldw	r4,28(sp)
   91d68:	90a5883a 	add	r18,r18,r2
   91d6c:	1887883a 	add	r3,r3,r2
   91d70:	2089883a 	add	r4,r4,r2
   91d74:	d8c00815 	stw	r3,32(sp)
   91d78:	d9000715 	stw	r4,28(sp)
   91d7c:	003f8406 	br	91b90 <_dtoa_r+0xae0>
   91d80:	d9c00317 	ldw	r7,12(sp)
   91d84:	013efb84 	movi	r4,-1042
   91d88:	2509c83a 	sub	r4,r4,r20
   91d8c:	3908983a 	sll	r4,r7,r4
   91d90:	003d3006 	br	91254 <_dtoa_r+0x1a4>
   91d94:	d8000d15 	stw	zero,52(sp)
   91d98:	003d7306 	br	91368 <_dtoa_r+0x2b8>
   91d9c:	0480050e 	bge	zero,r18,91db4 <_dtoa_r+0xd04>
   91da0:	a80b883a 	mov	r5,r21
   91da4:	8009883a 	mov	r4,r16
   91da8:	900d883a 	mov	r6,r18
   91dac:	0093e840 	call	93e84 <__lshift>
   91db0:	102b883a 	mov	r21,r2
   91db4:	8801611e 	bne	r17,zero,9233c <_dtoa_r+0x128c>
   91db8:	a827883a 	mov	r19,r21
   91dbc:	d8c00317 	ldw	r3,12(sp)
   91dc0:	d9000917 	ldw	r4,36(sp)
   91dc4:	b8bfffc4 	addi	r2,r23,-1
   91dc8:	18c0004c 	andi	r3,r3,1
   91dcc:	1105883a 	add	r2,r2,r4
   91dd0:	b825883a 	mov	r18,r23
   91dd4:	d8800515 	stw	r2,20(sp)
   91dd8:	a823883a 	mov	r17,r21
   91ddc:	d8c00315 	stw	r3,12(sp)
   91de0:	ddc00715 	stw	r23,28(sp)
   91de4:	e009883a 	mov	r4,fp
   91de8:	a00b883a 	mov	r5,r20
   91dec:	0090ea80 	call	90ea8 <quorem>
   91df0:	e009883a 	mov	r4,fp
   91df4:	880b883a 	mov	r5,r17
   91df8:	102d883a 	mov	r22,r2
   91dfc:	0093fe00 	call	93fe0 <__mcmp>
   91e00:	980d883a 	mov	r6,r19
   91e04:	8009883a 	mov	r4,r16
   91e08:	a00b883a 	mov	r5,r20
   91e0c:	102b883a 	mov	r21,r2
   91e10:	00940380 	call	94038 <__mdiff>
   91e14:	100d883a 	mov	r6,r2
   91e18:	10800317 	ldw	r2,12(r2)
   91e1c:	b5c00c04 	addi	r23,r22,48
   91e20:	10008c26 	beq	r2,zero,92054 <_dtoa_r+0xfa4>
   91e24:	8009883a 	mov	r4,r16
   91e28:	300b883a 	mov	r5,r6
   91e2c:	00937e40 	call	937e4 <_Bfree>
   91e30:	00800044 	movi	r2,1
   91e34:	a8007116 	blt	r21,zero,91ffc <_dtoa_r+0xf4c>
   91e38:	a800041e 	bne	r21,zero,91e4c <_dtoa_r+0xd9c>
   91e3c:	d9c00417 	ldw	r7,16(sp)
   91e40:	3800021e 	bne	r7,zero,91e4c <_dtoa_r+0xd9c>
   91e44:	d8c00317 	ldw	r3,12(sp)
   91e48:	18006c26 	beq	r3,zero,91ffc <_dtoa_r+0xf4c>
   91e4c:	00814c16 	blt	zero,r2,92380 <_dtoa_r+0x12d0>
   91e50:	d8c00517 	ldw	r3,20(sp)
   91e54:	95400044 	addi	r21,r18,1
   91e58:	95c00005 	stb	r23,0(r18)
   91e5c:	a82d883a 	mov	r22,r21
   91e60:	90c14d26 	beq	r18,r3,92398 <_dtoa_r+0x12e8>
   91e64:	e00b883a 	mov	r5,fp
   91e68:	8009883a 	mov	r4,r16
   91e6c:	01800284 	movi	r6,10
   91e70:	000f883a 	mov	r7,zero
   91e74:	009380c0 	call	9380c <__multadd>
   91e78:	1039883a 	mov	fp,r2
   91e7c:	8cc08b26 	beq	r17,r19,920ac <_dtoa_r+0xffc>
   91e80:	880b883a 	mov	r5,r17
   91e84:	01800284 	movi	r6,10
   91e88:	000f883a 	mov	r7,zero
   91e8c:	8009883a 	mov	r4,r16
   91e90:	009380c0 	call	9380c <__multadd>
   91e94:	980b883a 	mov	r5,r19
   91e98:	8009883a 	mov	r4,r16
   91e9c:	01800284 	movi	r6,10
   91ea0:	000f883a 	mov	r7,zero
   91ea4:	1023883a 	mov	r17,r2
   91ea8:	009380c0 	call	9380c <__multadd>
   91eac:	1027883a 	mov	r19,r2
   91eb0:	a825883a 	mov	r18,r21
   91eb4:	003fcb06 	br	91de4 <_dtoa_r+0xd34>
   91eb8:	d9c00417 	ldw	r7,16(sp)
   91ebc:	00800104 	movi	r2,4
   91ec0:	3880e426 	beq	r7,r2,92254 <_dtoa_r+0x11a4>
   91ec4:	00800144 	movi	r2,5
   91ec8:	38be3c1e 	bne	r7,r2,917bc <_dtoa_r+0x70c>
   91ecc:	00c00044 	movi	r3,1
   91ed0:	d8c00c15 	stw	r3,48(sp)
   91ed4:	d9c02117 	ldw	r7,132(sp)
   91ed8:	d8800617 	ldw	r2,24(sp)
   91edc:	388f883a 	add	r7,r7,r2
   91ee0:	3c800044 	addi	r18,r7,1
   91ee4:	d9c00e15 	stw	r7,56(sp)
   91ee8:	dc800915 	stw	r18,36(sp)
   91eec:	04bd3e16 	blt	zero,r18,913e8 <_dtoa_r+0x338>
   91ef0:	80001115 	stw	zero,68(r16)
   91ef4:	000b883a 	mov	r5,zero
   91ef8:	003d4606 	br	91414 <_dtoa_r+0x364>
   91efc:	d8c00317 	ldw	r3,12(sp)
   91f00:	183f0e1e 	bne	r3,zero,91b3c <_dtoa_r+0xa8c>
   91f04:	00c00434 	movhi	r3,16
   91f08:	18ffffc4 	addi	r3,r3,-1
   91f0c:	88c6703a 	and	r3,r17,r3
   91f10:	183f0a1e 	bne	r3,zero,91b3c <_dtoa_r+0xa8c>
   91f14:	8c5ffc2c 	andhi	r17,r17,32752
   91f18:	883f0826 	beq	r17,zero,91b3c <_dtoa_r+0xa8c>
   91f1c:	d9000817 	ldw	r4,32(sp)
   91f20:	d9c00717 	ldw	r7,28(sp)
   91f24:	1023883a 	mov	r17,r2
   91f28:	2089883a 	add	r4,r4,r2
   91f2c:	388f883a 	add	r7,r7,r2
   91f30:	d9000815 	stw	r4,32(sp)
   91f34:	d9c00715 	stw	r7,28(sp)
   91f38:	003f0106 	br	91b40 <_dtoa_r+0xa90>
   91f3c:	9005883a 	mov	r2,r18
   91f40:	003ed306 	br	91a90 <_dtoa_r+0x9e0>
   91f44:	d8800917 	ldw	r2,36(sp)
   91f48:	00be3516 	blt	zero,r2,91820 <_dtoa_r+0x770>
   91f4c:	1000b61e 	bne	r2,zero,92228 <_dtoa_r+0x1178>
   91f50:	9009883a 	mov	r4,r18
   91f54:	980b883a 	mov	r5,r19
   91f58:	000d883a 	mov	r6,zero
   91f5c:	01d00534 	movhi	r7,16404
   91f60:	009623c0 	call	9623c <__muldf3>
   91f64:	d9800317 	ldw	r6,12(sp)
   91f68:	1009883a 	mov	r4,r2
   91f6c:	180b883a 	mov	r5,r3
   91f70:	880f883a 	mov	r7,r17
   91f74:	00967f00 	call	967f0 <__gedf2>
   91f78:	0029883a 	mov	r20,zero
   91f7c:	002b883a 	mov	r21,zero
   91f80:	10007e16 	blt	r2,zero,9217c <_dtoa_r+0x10cc>
   91f84:	d8802117 	ldw	r2,132(sp)
   91f88:	b82d883a 	mov	r22,r23
   91f8c:	0084303a 	nor	r2,zero,r2
   91f90:	d8800615 	stw	r2,24(sp)
   91f94:	8009883a 	mov	r4,r16
   91f98:	a00b883a 	mov	r5,r20
   91f9c:	00937e40 	call	937e4 <_Bfree>
   91fa0:	a83f4b1e 	bne	r21,zero,91cd0 <_dtoa_r+0xc20>
   91fa4:	003de306 	br	91734 <_dtoa_r+0x684>
   91fa8:	e00b883a 	mov	r5,fp
   91fac:	8009883a 	mov	r4,r16
   91fb0:	0093d580 	call	93d58 <__pow5mult>
   91fb4:	1039883a 	mov	fp,r2
   91fb8:	003ed206 	br	91b04 <_dtoa_r+0xa54>
   91fbc:	1000021e 	bne	r2,zero,91fc8 <_dtoa_r+0xf18>
   91fc0:	18c0004c 	andi	r3,r3,1
   91fc4:	183f271e 	bne	r3,zero,91c64 <_dtoa_r+0xbb4>
   91fc8:	01000c04 	movi	r4,48
   91fcc:	00000106 	br	91fd4 <_dtoa_r+0xf24>
   91fd0:	102d883a 	mov	r22,r2
   91fd4:	b0bfffc4 	addi	r2,r22,-1
   91fd8:	10c00007 	ldb	r3,0(r2)
   91fdc:	193ffc26 	beq	r3,r4,91fd0 <_dtoa_r+0xf20>
   91fe0:	003f3206 	br	91cac <_dtoa_r+0xbfc>
   91fe4:	d8c00f17 	ldw	r3,60(sp)
   91fe8:	18015026 	beq	r3,zero,9252c <_dtoa_r+0x147c>
   91fec:	10810cc4 	addi	r2,r2,1075
   91ff0:	dcc00a17 	ldw	r19,40(sp)
   91ff4:	dc800817 	ldw	r18,32(sp)
   91ff8:	003e9706 	br	91a58 <_dtoa_r+0x9a8>
   91ffc:	b807883a 	mov	r3,r23
   92000:	182b883a 	mov	r21,r3
   92004:	ddc00717 	ldw	r23,28(sp)
   92008:	00800e0e 	bge	zero,r2,92044 <_dtoa_r+0xf94>
   9200c:	e00b883a 	mov	r5,fp
   92010:	01800044 	movi	r6,1
   92014:	8009883a 	mov	r4,r16
   92018:	d8c01515 	stw	r3,84(sp)
   9201c:	0093e840 	call	93e84 <__lshift>
   92020:	1009883a 	mov	r4,r2
   92024:	a00b883a 	mov	r5,r20
   92028:	1039883a 	mov	fp,r2
   9202c:	0093fe00 	call	93fe0 <__mcmp>
   92030:	d8c01517 	ldw	r3,84(sp)
   92034:	0081880e 	bge	zero,r2,92658 <_dtoa_r+0x15a8>
   92038:	00800e44 	movi	r2,57
   9203c:	b0c00c44 	addi	r3,r22,49
   92040:	a8816326 	beq	r21,r2,925d0 <_dtoa_r+0x1520>
   92044:	90c00005 	stb	r3,0(r18)
   92048:	95800044 	addi	r22,r18,1
   9204c:	982b883a 	mov	r21,r19
   92050:	003f1606 	br	91cac <_dtoa_r+0xbfc>
   92054:	300b883a 	mov	r5,r6
   92058:	e009883a 	mov	r4,fp
   9205c:	d9801515 	stw	r6,84(sp)
   92060:	0093fe00 	call	93fe0 <__mcmp>
   92064:	d9801517 	ldw	r6,84(sp)
   92068:	8009883a 	mov	r4,r16
   9206c:	d8801515 	stw	r2,84(sp)
   92070:	300b883a 	mov	r5,r6
   92074:	00937e40 	call	937e4 <_Bfree>
   92078:	d8801517 	ldw	r2,84(sp)
   9207c:	103f6d1e 	bne	r2,zero,91e34 <_dtoa_r+0xd84>
   92080:	d9c00417 	ldw	r7,16(sp)
   92084:	383f6b1e 	bne	r7,zero,91e34 <_dtoa_r+0xd84>
   92088:	d8c00317 	ldw	r3,12(sp)
   9208c:	183f691e 	bne	r3,zero,91e34 <_dtoa_r+0xd84>
   92090:	b807883a 	mov	r3,r23
   92094:	00800e44 	movi	r2,57
   92098:	ddc00717 	ldw	r23,28(sp)
   9209c:	18814c26 	beq	r3,r2,925d0 <_dtoa_r+0x1520>
   920a0:	057fe80e 	bge	zero,r21,92044 <_dtoa_r+0xf94>
   920a4:	b0c00c44 	addi	r3,r22,49
   920a8:	003fe606 	br	92044 <_dtoa_r+0xf94>
   920ac:	880b883a 	mov	r5,r17
   920b0:	8009883a 	mov	r4,r16
   920b4:	01800284 	movi	r6,10
   920b8:	000f883a 	mov	r7,zero
   920bc:	009380c0 	call	9380c <__multadd>
   920c0:	1023883a 	mov	r17,r2
   920c4:	1027883a 	mov	r19,r2
   920c8:	a825883a 	mov	r18,r21
   920cc:	003f4506 	br	91de4 <_dtoa_r+0xd34>
   920d0:	e009883a 	mov	r4,fp
   920d4:	a00b883a 	mov	r5,r20
   920d8:	0093fe00 	call	93fe0 <__mcmp>
   920dc:	103ebc0e 	bge	r2,zero,91bd0 <_dtoa_r+0xb20>
   920e0:	e00b883a 	mov	r5,fp
   920e4:	8009883a 	mov	r4,r16
   920e8:	01800284 	movi	r6,10
   920ec:	000f883a 	mov	r7,zero
   920f0:	009380c0 	call	9380c <__multadd>
   920f4:	1039883a 	mov	fp,r2
   920f8:	d8800617 	ldw	r2,24(sp)
   920fc:	d8c00c17 	ldw	r3,48(sp)
   92100:	10bfffc4 	addi	r2,r2,-1
   92104:	d8800615 	stw	r2,24(sp)
   92108:	1801571e 	bne	r3,zero,92668 <_dtoa_r+0x15b8>
   9210c:	d9c00e17 	ldw	r7,56(sp)
   92110:	d9c00915 	stw	r7,36(sp)
   92114:	003eae06 	br	91bd0 <_dtoa_r+0xb20>
   92118:	a0800417 	ldw	r2,16(r20)
   9211c:	10800104 	addi	r2,r2,4
   92120:	1085883a 	add	r2,r2,r2
   92124:	1085883a 	add	r2,r2,r2
   92128:	a085883a 	add	r2,r20,r2
   9212c:	11000017 	ldw	r4,0(r2)
   92130:	0093a240 	call	93a24 <__hi0bits>
   92134:	00c00804 	movi	r3,32
   92138:	1885c83a 	sub	r2,r3,r2
   9213c:	003e8306 	br	91b4c <_dtoa_r+0xa9c>
   92140:	d9c00417 	ldw	r7,16(sp)
   92144:	00800084 	movi	r2,2
   92148:	11fea30e 	bge	r2,r7,91bd8 <_dtoa_r+0xb28>
   9214c:	d8800917 	ldw	r2,36(sp)
   92150:	103f8c1e 	bne	r2,zero,91f84 <_dtoa_r+0xed4>
   92154:	a00b883a 	mov	r5,r20
   92158:	8009883a 	mov	r4,r16
   9215c:	01800144 	movi	r6,5
   92160:	000f883a 	mov	r7,zero
   92164:	009380c0 	call	9380c <__multadd>
   92168:	e009883a 	mov	r4,fp
   9216c:	100b883a 	mov	r5,r2
   92170:	1029883a 	mov	r20,r2
   92174:	0093fe00 	call	93fe0 <__mcmp>
   92178:	00bf820e 	bge	zero,r2,91f84 <_dtoa_r+0xed4>
   9217c:	00800c44 	movi	r2,49
   92180:	b8800005 	stb	r2,0(r23)
   92184:	d8800617 	ldw	r2,24(sp)
   92188:	bd800044 	addi	r22,r23,1
   9218c:	10800044 	addi	r2,r2,1
   92190:	d8800615 	stw	r2,24(sp)
   92194:	003f7f06 	br	91f94 <_dtoa_r+0xee4>
   92198:	dc000417 	ldw	r16,16(sp)
   9219c:	003d6506 	br	91734 <_dtoa_r+0x684>
   921a0:	9009883a 	mov	r4,r18
   921a4:	00968b00 	call	968b0 <__floatsidf>
   921a8:	1009883a 	mov	r4,r2
   921ac:	180b883a 	mov	r5,r3
   921b0:	980d883a 	mov	r6,r19
   921b4:	a00f883a 	mov	r7,r20
   921b8:	009623c0 	call	9623c <__muldf3>
   921bc:	1009883a 	mov	r4,r2
   921c0:	180b883a 	mov	r5,r3
   921c4:	000d883a 	mov	r6,zero
   921c8:	01d00734 	movhi	r7,16412
   921cc:	00961880 	call	96188 <__adddf3>
   921d0:	057f3034 	movhi	r21,64704
   921d4:	1025883a 	mov	r18,r2
   921d8:	1d6b883a 	add	r21,r3,r21
   921dc:	9809883a 	mov	r4,r19
   921e0:	a00b883a 	mov	r5,r20
   921e4:	000d883a 	mov	r6,zero
   921e8:	01d00534 	movhi	r7,16404
   921ec:	00961dc0 	call	961dc <__subdf3>
   921f0:	1009883a 	mov	r4,r2
   921f4:	180b883a 	mov	r5,r3
   921f8:	900d883a 	mov	r6,r18
   921fc:	a80f883a 	mov	r7,r21
   92200:	1027883a 	mov	r19,r2
   92204:	1829883a 	mov	r20,r3
   92208:	009678c0 	call	9678c <__gtdf2>
   9220c:	00806616 	blt	zero,r2,923a8 <_dtoa_r+0x12f8>
   92210:	a9e0003c 	xorhi	r7,r21,32768
   92214:	9809883a 	mov	r4,r19
   92218:	a00b883a 	mov	r5,r20
   9221c:	900d883a 	mov	r6,r18
   92220:	00968540 	call	96854 <__ltdf2>
   92224:	103d710e 	bge	r2,zero,917ec <_dtoa_r+0x73c>
   92228:	0029883a 	mov	r20,zero
   9222c:	002b883a 	mov	r21,zero
   92230:	003f5406 	br	91f84 <_dtoa_r+0xed4>
   92234:	d9800a17 	ldw	r6,40(sp)
   92238:	e00b883a 	mov	r5,fp
   9223c:	8009883a 	mov	r4,r16
   92240:	0093d580 	call	93d58 <__pow5mult>
   92244:	1039883a 	mov	fp,r2
   92248:	003e2e06 	br	91b04 <_dtoa_r+0xa54>
   9224c:	d8000c15 	stw	zero,48(sp)
   92250:	003f2006 	br	91ed4 <_dtoa_r+0xe24>
   92254:	00800044 	movi	r2,1
   92258:	d8800c15 	stw	r2,48(sp)
   9225c:	003c5d06 	br	913d4 <_dtoa_r+0x324>
   92260:	d8c00a17 	ldw	r3,40(sp)
   92264:	d9000b17 	ldw	r4,44(sp)
   92268:	dcc00a15 	stw	r19,40(sp)
   9226c:	98c5c83a 	sub	r2,r19,r3
   92270:	2089883a 	add	r4,r4,r2
   92274:	d9000b15 	stw	r4,44(sp)
   92278:	0027883a 	mov	r19,zero
   9227c:	003df206 	br	91a48 <_dtoa_r+0x998>
   92280:	d9000317 	ldw	r4,12(sp)
   92284:	8829883a 	mov	r20,r17
   92288:	04800084 	movi	r18,2
   9228c:	d9001015 	stw	r4,64(sp)
   92290:	003c8106 	br	91498 <_dtoa_r+0x3e8>
   92294:	04800044 	movi	r18,1
   92298:	dc800e15 	stw	r18,56(sp)
   9229c:	dc800915 	stw	r18,36(sp)
   922a0:	dc802115 	stw	r18,132(sp)
   922a4:	003f1206 	br	91ef0 <_dtoa_r+0xe40>
   922a8:	d8800617 	ldw	r2,24(sp)
   922ac:	00abc83a 	sub	r21,zero,r2
   922b0:	a800a426 	beq	r21,zero,92544 <_dtoa_r+0x1494>
   922b4:	a88003cc 	andi	r2,r21,15
   922b8:	100490fa 	slli	r2,r2,3
   922bc:	00c002b4 	movhi	r3,10
   922c0:	18f59204 	addi	r3,r3,-10680
   922c4:	d9000317 	ldw	r4,12(sp)
   922c8:	1885883a 	add	r2,r3,r2
   922cc:	11800017 	ldw	r6,0(r2)
   922d0:	11c00117 	ldw	r7,4(r2)
   922d4:	a82bd13a 	srai	r21,r21,4
   922d8:	880b883a 	mov	r5,r17
   922dc:	009623c0 	call	9623c <__muldf3>
   922e0:	1027883a 	mov	r19,r2
   922e4:	1829883a 	mov	r20,r3
   922e8:	a800e826 	beq	r21,zero,9268c <_dtoa_r+0x15dc>
   922ec:	058002b4 	movhi	r22,10
   922f0:	b5b58804 	addi	r22,r22,-10720
   922f4:	04800084 	movi	r18,2
   922f8:	a980004c 	andi	r6,r21,1
   922fc:	1009883a 	mov	r4,r2
   92300:	a82bd07a 	srai	r21,r21,1
   92304:	180b883a 	mov	r5,r3
   92308:	30000426 	beq	r6,zero,9231c <_dtoa_r+0x126c>
   9230c:	b1800017 	ldw	r6,0(r22)
   92310:	b1c00117 	ldw	r7,4(r22)
   92314:	94800044 	addi	r18,r18,1
   92318:	009623c0 	call	9623c <__muldf3>
   9231c:	b5800204 	addi	r22,r22,8
   92320:	a83ff51e 	bne	r21,zero,922f8 <_dtoa_r+0x1248>
   92324:	1027883a 	mov	r19,r2
   92328:	1829883a 	mov	r20,r3
   9232c:	003c7306 	br	914fc <_dtoa_r+0x44c>
   92330:	21000044 	addi	r4,r4,1
   92334:	11000005 	stb	r4,0(r2)
   92338:	003e5c06 	br	91cac <_dtoa_r+0xbfc>
   9233c:	a9400117 	ldw	r5,4(r21)
   92340:	8009883a 	mov	r4,r16
   92344:	009373c0 	call	9373c <_Balloc>
   92348:	a9800417 	ldw	r6,16(r21)
   9234c:	11000304 	addi	r4,r2,12
   92350:	a9400304 	addi	r5,r21,12
   92354:	31800084 	addi	r6,r6,2
   92358:	318d883a 	add	r6,r6,r6
   9235c:	318d883a 	add	r6,r6,r6
   92360:	1023883a 	mov	r17,r2
   92364:	008e3840 	call	8e384 <memcpy>
   92368:	8009883a 	mov	r4,r16
   9236c:	880b883a 	mov	r5,r17
   92370:	01800044 	movi	r6,1
   92374:	0093e840 	call	93e84 <__lshift>
   92378:	1027883a 	mov	r19,r2
   9237c:	003e8f06 	br	91dbc <_dtoa_r+0xd0c>
   92380:	b807883a 	mov	r3,r23
   92384:	00800e44 	movi	r2,57
   92388:	ddc00717 	ldw	r23,28(sp)
   9238c:	18809026 	beq	r3,r2,925d0 <_dtoa_r+0x1520>
   92390:	18c00044 	addi	r3,r3,1
   92394:	003f2b06 	br	92044 <_dtoa_r+0xf94>
   92398:	b807883a 	mov	r3,r23
   9239c:	982b883a 	mov	r21,r19
   923a0:	ddc00717 	ldw	r23,28(sp)
   923a4:	003e2406 	br	91c38 <_dtoa_r+0xb88>
   923a8:	0029883a 	mov	r20,zero
   923ac:	002b883a 	mov	r21,zero
   923b0:	003f7206 	br	9217c <_dtoa_r+0x10cc>
   923b4:	593fffc4 	addi	r4,r11,-1
   923b8:	200490fa 	slli	r2,r4,3
   923bc:	00c002b4 	movhi	r3,10
   923c0:	18f59204 	addi	r3,r3,-10680
   923c4:	d9001015 	stw	r4,64(sp)
   923c8:	1885883a 	add	r2,r3,r2
   923cc:	11000017 	ldw	r4,0(r2)
   923d0:	11400117 	ldw	r5,4(r2)
   923d4:	900d883a 	mov	r6,r18
   923d8:	a80f883a 	mov	r7,r21
   923dc:	dac01615 	stw	r11,88(sp)
   923e0:	009623c0 	call	9623c <__muldf3>
   923e4:	a00b883a 	mov	r5,r20
   923e8:	9809883a 	mov	r4,r19
   923ec:	d8c01215 	stw	r3,72(sp)
   923f0:	d8801115 	stw	r2,68(sp)
   923f4:	00969840 	call	96984 <__fixdfsi>
   923f8:	1009883a 	mov	r4,r2
   923fc:	1025883a 	mov	r18,r2
   92400:	00968b00 	call	968b0 <__floatsidf>
   92404:	9809883a 	mov	r4,r19
   92408:	a00b883a 	mov	r5,r20
   9240c:	100d883a 	mov	r6,r2
   92410:	180f883a 	mov	r7,r3
   92414:	94800c04 	addi	r18,r18,48
   92418:	00961dc0 	call	961dc <__subdf3>
   9241c:	bc800005 	stb	r18,0(r23)
   92420:	dac01617 	ldw	r11,88(sp)
   92424:	102b883a 	mov	r21,r2
   92428:	00800044 	movi	r2,1
   9242c:	bd800044 	addi	r22,r23,1
   92430:	1815883a 	mov	r10,r3
   92434:	58802226 	beq	r11,r2,924c0 <_dtoa_r+0x1410>
   92438:	bad7883a 	add	r11,r23,r11
   9243c:	dc001415 	stw	r16,80(sp)
   92440:	a805883a 	mov	r2,r21
   92444:	b027883a 	mov	r19,r22
   92448:	5821883a 	mov	r16,r11
   9244c:	882b883a 	mov	r21,r17
   92450:	000d883a 	mov	r6,zero
   92454:	01d00934 	movhi	r7,16420
   92458:	1009883a 	mov	r4,r2
   9245c:	180b883a 	mov	r5,r3
   92460:	009623c0 	call	9623c <__muldf3>
   92464:	180b883a 	mov	r5,r3
   92468:	1009883a 	mov	r4,r2
   9246c:	1829883a 	mov	r20,r3
   92470:	1023883a 	mov	r17,r2
   92474:	00969840 	call	96984 <__fixdfsi>
   92478:	1009883a 	mov	r4,r2
   9247c:	1025883a 	mov	r18,r2
   92480:	00968b00 	call	968b0 <__floatsidf>
   92484:	8809883a 	mov	r4,r17
   92488:	a00b883a 	mov	r5,r20
   9248c:	100d883a 	mov	r6,r2
   92490:	180f883a 	mov	r7,r3
   92494:	94800c04 	addi	r18,r18,48
   92498:	00961dc0 	call	961dc <__subdf3>
   9249c:	9cc00044 	addi	r19,r19,1
   924a0:	9cbfffc5 	stb	r18,-1(r19)
   924a4:	9c3fea1e 	bne	r19,r16,92450 <_dtoa_r+0x13a0>
   924a8:	1815883a 	mov	r10,r3
   924ac:	d8c01017 	ldw	r3,64(sp)
   924b0:	dc001417 	ldw	r16,80(sp)
   924b4:	a823883a 	mov	r17,r21
   924b8:	b0ed883a 	add	r22,r22,r3
   924bc:	102b883a 	mov	r21,r2
   924c0:	d9001117 	ldw	r4,68(sp)
   924c4:	d9401217 	ldw	r5,72(sp)
   924c8:	000d883a 	mov	r6,zero
   924cc:	01cff834 	movhi	r7,16352
   924d0:	da801515 	stw	r10,84(sp)
   924d4:	00961880 	call	96188 <__adddf3>
   924d8:	da801517 	ldw	r10,84(sp)
   924dc:	1009883a 	mov	r4,r2
   924e0:	180b883a 	mov	r5,r3
   924e4:	500f883a 	mov	r7,r10
   924e8:	a80d883a 	mov	r6,r21
   924ec:	00968540 	call	96854 <__ltdf2>
   924f0:	da801517 	ldw	r10,84(sp)
   924f4:	10003b0e 	bge	r2,zero,925e4 <_dtoa_r+0x1534>
   924f8:	d9c01317 	ldw	r7,76(sp)
   924fc:	b53fffc3 	ldbu	r20,-1(r22)
   92500:	d9c00615 	stw	r7,24(sp)
   92504:	003d3106 	br	919cc <_dtoa_r+0x91c>
   92508:	d8800817 	ldw	r2,32(sp)
   9250c:	11e5c83a 	sub	r18,r2,r7
   92510:	0005883a 	mov	r2,zero
   92514:	003d5006 	br	91a58 <_dtoa_r+0x9a8>
   92518:	05800044 	movi	r22,1
   9251c:	003dc406 	br	91c30 <_dtoa_r+0xb80>
   92520:	a5000044 	addi	r20,r20,1
   92524:	15000005 	stb	r20,0(r2)
   92528:	003c8206 	br	91734 <_dtoa_r+0x684>
   9252c:	d8800217 	ldw	r2,8(sp)
   92530:	00c00d84 	movi	r3,54
   92534:	dcc00a17 	ldw	r19,40(sp)
   92538:	1885c83a 	sub	r2,r3,r2
   9253c:	dc800817 	ldw	r18,32(sp)
   92540:	003d4506 	br	91a58 <_dtoa_r+0x9a8>
   92544:	dcc00317 	ldw	r19,12(sp)
   92548:	8829883a 	mov	r20,r17
   9254c:	04800084 	movi	r18,2
   92550:	003bea06 	br	914fc <_dtoa_r+0x44c>
   92554:	d9000917 	ldw	r4,36(sp)
   92558:	203f1126 	beq	r4,zero,921a0 <_dtoa_r+0x10f0>
   9255c:	d9c00e17 	ldw	r7,56(sp)
   92560:	01fca20e 	bge	zero,r7,917ec <_dtoa_r+0x73c>
   92564:	a00b883a 	mov	r5,r20
   92568:	9809883a 	mov	r4,r19
   9256c:	000d883a 	mov	r6,zero
   92570:	01d00934 	movhi	r7,16420
   92574:	009623c0 	call	9623c <__muldf3>
   92578:	91000044 	addi	r4,r18,1
   9257c:	1027883a 	mov	r19,r2
   92580:	1829883a 	mov	r20,r3
   92584:	00968b00 	call	968b0 <__floatsidf>
   92588:	9809883a 	mov	r4,r19
   9258c:	a00b883a 	mov	r5,r20
   92590:	100d883a 	mov	r6,r2
   92594:	180f883a 	mov	r7,r3
   92598:	009623c0 	call	9623c <__muldf3>
   9259c:	1009883a 	mov	r4,r2
   925a0:	180b883a 	mov	r5,r3
   925a4:	000d883a 	mov	r6,zero
   925a8:	01d00734 	movhi	r7,16412
   925ac:	00961880 	call	96188 <__adddf3>
   925b0:	1025883a 	mov	r18,r2
   925b4:	d8800617 	ldw	r2,24(sp)
   925b8:	057f3034 	movhi	r21,64704
   925bc:	1d6b883a 	add	r21,r3,r21
   925c0:	10bfffc4 	addi	r2,r2,-1
   925c4:	d8801315 	stw	r2,76(sp)
   925c8:	dac00e17 	ldw	r11,56(sp)
   925cc:	003be706 	br	9156c <_dtoa_r+0x4bc>
   925d0:	01000e44 	movi	r4,57
   925d4:	91000005 	stb	r4,0(r18)
   925d8:	95800044 	addi	r22,r18,1
   925dc:	982b883a 	mov	r21,r19
   925e0:	003da106 	br	91c68 <_dtoa_r+0xbb8>
   925e4:	d9801117 	ldw	r6,68(sp)
   925e8:	d9c01217 	ldw	r7,72(sp)
   925ec:	0009883a 	mov	r4,zero
   925f0:	014ff834 	movhi	r5,16352
   925f4:	da801515 	stw	r10,84(sp)
   925f8:	00961dc0 	call	961dc <__subdf3>
   925fc:	da801517 	ldw	r10,84(sp)
   92600:	1009883a 	mov	r4,r2
   92604:	180b883a 	mov	r5,r3
   92608:	a80d883a 	mov	r6,r21
   9260c:	500f883a 	mov	r7,r10
   92610:	009678c0 	call	9678c <__gtdf2>
   92614:	00bc750e 	bge	zero,r2,917ec <_dtoa_r+0x73c>
   92618:	01000c04 	movi	r4,48
   9261c:	00000106 	br	92624 <_dtoa_r+0x1574>
   92620:	102d883a 	mov	r22,r2
   92624:	b0bfffc4 	addi	r2,r22,-1
   92628:	10c00007 	ldb	r3,0(r2)
   9262c:	193ffc26 	beq	r3,r4,92620 <_dtoa_r+0x1570>
   92630:	d8801317 	ldw	r2,76(sp)
   92634:	d8800615 	stw	r2,24(sp)
   92638:	003c3e06 	br	91734 <_dtoa_r+0x684>
   9263c:	d9001317 	ldw	r4,76(sp)
   92640:	df001117 	ldw	fp,68(sp)
   92644:	d9000615 	stw	r4,24(sp)
   92648:	003ce006 	br	919cc <_dtoa_r+0x91c>
   9264c:	df001117 	ldw	fp,68(sp)
   92650:	dc401217 	ldw	r17,72(sp)
   92654:	003c6506 	br	917ec <_dtoa_r+0x73c>
   92658:	103e7a1e 	bne	r2,zero,92044 <_dtoa_r+0xf94>
   9265c:	1880004c 	andi	r2,r3,1
   92660:	103e7826 	beq	r2,zero,92044 <_dtoa_r+0xf94>
   92664:	003e7406 	br	92038 <_dtoa_r+0xf88>
   92668:	8009883a 	mov	r4,r16
   9266c:	a80b883a 	mov	r5,r21
   92670:	01800284 	movi	r6,10
   92674:	000f883a 	mov	r7,zero
   92678:	009380c0 	call	9380c <__multadd>
   9267c:	d9000e17 	ldw	r4,56(sp)
   92680:	102b883a 	mov	r21,r2
   92684:	d9000915 	stw	r4,36(sp)
   92688:	003d5106 	br	91bd0 <_dtoa_r+0xb20>
   9268c:	04800084 	movi	r18,2
   92690:	003b9a06 	br	914fc <_dtoa_r+0x44c>
   92694:	d8c01317 	ldw	r3,76(sp)
   92698:	d8c00615 	stw	r3,24(sp)
   9269c:	003ccb06 	br	919cc <_dtoa_r+0x91c>
   926a0:	d8c01317 	ldw	r3,76(sp)
   926a4:	d8c00615 	stw	r3,24(sp)
   926a8:	003c2206 	br	91734 <_dtoa_r+0x684>
   926ac:	20fd3826 	beq	r4,r3,91b90 <_dtoa_r+0xae0>
   926b0:	00c00f04 	movi	r3,60
   926b4:	1885c83a 	sub	r2,r3,r2
   926b8:	003da906 	br	91d60 <_dtoa_r+0xcb0>
   926bc:	000b883a 	mov	r5,zero
   926c0:	003b5406 	br	91414 <_dtoa_r+0x364>
   926c4:	04c00044 	movi	r19,1
   926c8:	003b3b06 	br	913b8 <_dtoa_r+0x308>

000926cc <_fclose_r>:
   926cc:	defffc04 	addi	sp,sp,-16
   926d0:	dc400115 	stw	r17,4(sp)
   926d4:	dc000015 	stw	r16,0(sp)
   926d8:	dfc00315 	stw	ra,12(sp)
   926dc:	dc800215 	stw	r18,8(sp)
   926e0:	2821883a 	mov	r16,r5
   926e4:	2023883a 	mov	r17,r4
   926e8:	28003426 	beq	r5,zero,927bc <_fclose_r+0xf0>
   926ec:	008d8ec0 	call	8d8ec <__sfp_lock_acquire>
   926f0:	88000226 	beq	r17,zero,926fc <_fclose_r+0x30>
   926f4:	88800e17 	ldw	r2,56(r17)
   926f8:	10003826 	beq	r2,zero,927dc <_fclose_r+0x110>
   926fc:	8080030f 	ldh	r2,12(r16)
   92700:	10002526 	beq	r2,zero,92798 <_fclose_r+0xcc>
   92704:	8809883a 	mov	r4,r17
   92708:	800b883a 	mov	r5,r16
   9270c:	009281c0 	call	9281c <_fflush_r>
   92710:	1025883a 	mov	r18,r2
   92714:	80800b17 	ldw	r2,44(r16)
   92718:	10000426 	beq	r2,zero,9272c <_fclose_r+0x60>
   9271c:	81400717 	ldw	r5,28(r16)
   92720:	8809883a 	mov	r4,r17
   92724:	103ee83a 	callr	r2
   92728:	10003516 	blt	r2,zero,92800 <_fclose_r+0x134>
   9272c:	8080030b 	ldhu	r2,12(r16)
   92730:	1080200c 	andi	r2,r2,128
   92734:	10bfffcc 	andi	r2,r2,65535
   92738:	10a0001c 	xori	r2,r2,32768
   9273c:	10a00004 	addi	r2,r2,-32768
   92740:	10002b1e 	bne	r2,zero,927f0 <_fclose_r+0x124>
   92744:	81400c17 	ldw	r5,48(r16)
   92748:	28000526 	beq	r5,zero,92760 <_fclose_r+0x94>
   9274c:	80801004 	addi	r2,r16,64
   92750:	28800226 	beq	r5,r2,9275c <_fclose_r+0x90>
   92754:	8809883a 	mov	r4,r17
   92758:	0092b700 	call	92b70 <_free_r>
   9275c:	80000c15 	stw	zero,48(r16)
   92760:	81401117 	ldw	r5,68(r16)
   92764:	28000326 	beq	r5,zero,92774 <_fclose_r+0xa8>
   92768:	8809883a 	mov	r4,r17
   9276c:	0092b700 	call	92b70 <_free_r>
   92770:	80001115 	stw	zero,68(r16)
   92774:	8000030d 	sth	zero,12(r16)
   92778:	008d8f00 	call	8d8f0 <__sfp_lock_release>
   9277c:	9005883a 	mov	r2,r18
   92780:	dfc00317 	ldw	ra,12(sp)
   92784:	dc800217 	ldw	r18,8(sp)
   92788:	dc400117 	ldw	r17,4(sp)
   9278c:	dc000017 	ldw	r16,0(sp)
   92790:	dec00404 	addi	sp,sp,16
   92794:	f800283a 	ret
   92798:	008d8f00 	call	8d8f0 <__sfp_lock_release>
   9279c:	0025883a 	mov	r18,zero
   927a0:	9005883a 	mov	r2,r18
   927a4:	dfc00317 	ldw	ra,12(sp)
   927a8:	dc800217 	ldw	r18,8(sp)
   927ac:	dc400117 	ldw	r17,4(sp)
   927b0:	dc000017 	ldw	r16,0(sp)
   927b4:	dec00404 	addi	sp,sp,16
   927b8:	f800283a 	ret
   927bc:	0025883a 	mov	r18,zero
   927c0:	9005883a 	mov	r2,r18
   927c4:	dfc00317 	ldw	ra,12(sp)
   927c8:	dc800217 	ldw	r18,8(sp)
   927cc:	dc400117 	ldw	r17,4(sp)
   927d0:	dc000017 	ldw	r16,0(sp)
   927d4:	dec00404 	addi	sp,sp,16
   927d8:	f800283a 	ret
   927dc:	8809883a 	mov	r4,r17
   927e0:	008d6e40 	call	8d6e4 <__sinit>
   927e4:	8080030f 	ldh	r2,12(r16)
   927e8:	103fc61e 	bne	r2,zero,92704 <_fclose_r+0x38>
   927ec:	003fea06 	br	92798 <_fclose_r+0xcc>
   927f0:	81400417 	ldw	r5,16(r16)
   927f4:	8809883a 	mov	r4,r17
   927f8:	0092b700 	call	92b70 <_free_r>
   927fc:	003fd106 	br	92744 <_fclose_r+0x78>
   92800:	04bfffc4 	movi	r18,-1
   92804:	003fc906 	br	9272c <_fclose_r+0x60>

00092808 <fclose>:
   92808:	008002b4 	movhi	r2,10
   9280c:	10bd6704 	addi	r2,r2,-2660
   92810:	200b883a 	mov	r5,r4
   92814:	11000017 	ldw	r4,0(r2)
   92818:	00926cc1 	jmpi	926cc <_fclose_r>

0009281c <_fflush_r>:
   9281c:	defffb04 	addi	sp,sp,-20
   92820:	dcc00315 	stw	r19,12(sp)
   92824:	dc400115 	stw	r17,4(sp)
   92828:	dfc00415 	stw	ra,16(sp)
   9282c:	dc800215 	stw	r18,8(sp)
   92830:	dc000015 	stw	r16,0(sp)
   92834:	2027883a 	mov	r19,r4
   92838:	2823883a 	mov	r17,r5
   9283c:	20000226 	beq	r4,zero,92848 <_fflush_r+0x2c>
   92840:	20800e17 	ldw	r2,56(r4)
   92844:	10005726 	beq	r2,zero,929a4 <_fflush_r+0x188>
   92848:	8880030b 	ldhu	r2,12(r17)
   9284c:	10c0020c 	andi	r3,r2,8
   92850:	18ffffcc 	andi	r3,r3,65535
   92854:	18e0001c 	xori	r3,r3,32768
   92858:	18e00004 	addi	r3,r3,-32768
   9285c:	1800311e 	bne	r3,zero,92924 <_fflush_r+0x108>
   92860:	89000117 	ldw	r4,4(r17)
   92864:	10c20014 	ori	r3,r2,2048
   92868:	88c0030d 	sth	r3,12(r17)
   9286c:	180b883a 	mov	r5,r3
   92870:	0100520e 	bge	zero,r4,929bc <_fflush_r+0x1a0>
   92874:	88c00a17 	ldw	r3,40(r17)
   92878:	18002226 	beq	r3,zero,92904 <_fflush_r+0xe8>
   9287c:	1084000c 	andi	r2,r2,4096
   92880:	10bfffcc 	andi	r2,r2,65535
   92884:	10a0001c 	xori	r2,r2,32768
   92888:	10a00004 	addi	r2,r2,-32768
   9288c:	10004e26 	beq	r2,zero,929c8 <_fflush_r+0x1ac>
   92890:	8c001417 	ldw	r16,80(r17)
   92894:	2940010c 	andi	r5,r5,4
   92898:	297fffcc 	andi	r5,r5,65535
   9289c:	2960001c 	xori	r5,r5,32768
   928a0:	29600004 	addi	r5,r5,-32768
   928a4:	28000626 	beq	r5,zero,928c0 <_fflush_r+0xa4>
   928a8:	89000117 	ldw	r4,4(r17)
   928ac:	88800c17 	ldw	r2,48(r17)
   928b0:	8121c83a 	sub	r16,r16,r4
   928b4:	10000226 	beq	r2,zero,928c0 <_fflush_r+0xa4>
   928b8:	88800f17 	ldw	r2,60(r17)
   928bc:	80a1c83a 	sub	r16,r16,r2
   928c0:	89400717 	ldw	r5,28(r17)
   928c4:	9809883a 	mov	r4,r19
   928c8:	800d883a 	mov	r6,r16
   928cc:	000f883a 	mov	r7,zero
   928d0:	183ee83a 	callr	r3
   928d4:	8080281e 	bne	r16,r2,92978 <_fflush_r+0x15c>
   928d8:	8880030b 	ldhu	r2,12(r17)
   928dc:	88c00417 	ldw	r3,16(r17)
   928e0:	88000115 	stw	zero,4(r17)
   928e4:	113dffcc 	andi	r4,r2,63487
   928e8:	1084000c 	andi	r2,r2,4096
   928ec:	10bfffcc 	andi	r2,r2,65535
   928f0:	10a0001c 	xori	r2,r2,32768
   928f4:	8900030d 	sth	r4,12(r17)
   928f8:	88c00015 	stw	r3,0(r17)
   928fc:	10a00004 	addi	r2,r2,-32768
   92900:	10002c1e 	bne	r2,zero,929b4 <_fflush_r+0x198>
   92904:	0005883a 	mov	r2,zero
   92908:	dfc00417 	ldw	ra,16(sp)
   9290c:	dcc00317 	ldw	r19,12(sp)
   92910:	dc800217 	ldw	r18,8(sp)
   92914:	dc400117 	ldw	r17,4(sp)
   92918:	dc000017 	ldw	r16,0(sp)
   9291c:	dec00504 	addi	sp,sp,20
   92920:	f800283a 	ret
   92924:	8c800417 	ldw	r18,16(r17)
   92928:	903ff626 	beq	r18,zero,92904 <_fflush_r+0xe8>
   9292c:	8c000017 	ldw	r16,0(r17)
   92930:	108000cc 	andi	r2,r2,3
   92934:	8c800015 	stw	r18,0(r17)
   92938:	84a1c83a 	sub	r16,r16,r18
   9293c:	10001b1e 	bne	r2,zero,929ac <_fflush_r+0x190>
   92940:	88800517 	ldw	r2,20(r17)
   92944:	88800215 	stw	r2,8(r17)
   92948:	04000316 	blt	zero,r16,92958 <_fflush_r+0x13c>
   9294c:	003fed06 	br	92904 <_fflush_r+0xe8>
   92950:	90a5883a 	add	r18,r18,r2
   92954:	043feb0e 	bge	zero,r16,92904 <_fflush_r+0xe8>
   92958:	88800917 	ldw	r2,36(r17)
   9295c:	89400717 	ldw	r5,28(r17)
   92960:	800f883a 	mov	r7,r16
   92964:	900d883a 	mov	r6,r18
   92968:	9809883a 	mov	r4,r19
   9296c:	103ee83a 	callr	r2
   92970:	80a1c83a 	sub	r16,r16,r2
   92974:	00bff616 	blt	zero,r2,92950 <_fflush_r+0x134>
   92978:	88c0030b 	ldhu	r3,12(r17)
   9297c:	00bfffc4 	movi	r2,-1
   92980:	18c01014 	ori	r3,r3,64
   92984:	88c0030d 	sth	r3,12(r17)
   92988:	dfc00417 	ldw	ra,16(sp)
   9298c:	dcc00317 	ldw	r19,12(sp)
   92990:	dc800217 	ldw	r18,8(sp)
   92994:	dc400117 	ldw	r17,4(sp)
   92998:	dc000017 	ldw	r16,0(sp)
   9299c:	dec00504 	addi	sp,sp,20
   929a0:	f800283a 	ret
   929a4:	008d6e40 	call	8d6e4 <__sinit>
   929a8:	003fa706 	br	92848 <_fflush_r+0x2c>
   929ac:	0005883a 	mov	r2,zero
   929b0:	003fe406 	br	92944 <_fflush_r+0x128>
   929b4:	8c001415 	stw	r16,80(r17)
   929b8:	003fd206 	br	92904 <_fflush_r+0xe8>
   929bc:	88c00f17 	ldw	r3,60(r17)
   929c0:	00ffac16 	blt	zero,r3,92874 <_fflush_r+0x58>
   929c4:	003fcf06 	br	92904 <_fflush_r+0xe8>
   929c8:	89400717 	ldw	r5,28(r17)
   929cc:	9809883a 	mov	r4,r19
   929d0:	000d883a 	mov	r6,zero
   929d4:	01c00044 	movi	r7,1
   929d8:	183ee83a 	callr	r3
   929dc:	1021883a 	mov	r16,r2
   929e0:	00bfffc4 	movi	r2,-1
   929e4:	80800326 	beq	r16,r2,929f4 <_fflush_r+0x1d8>
   929e8:	8940030b 	ldhu	r5,12(r17)
   929ec:	88c00a17 	ldw	r3,40(r17)
   929f0:	003fa806 	br	92894 <_fflush_r+0x78>
   929f4:	98c00017 	ldw	r3,0(r19)
   929f8:	00800744 	movi	r2,29
   929fc:	18bfde1e 	bne	r3,r2,92978 <_fflush_r+0x15c>
   92a00:	003fc006 	br	92904 <_fflush_r+0xe8>

00092a04 <fflush>:
   92a04:	200b883a 	mov	r5,r4
   92a08:	20000426 	beq	r4,zero,92a1c <fflush+0x18>
   92a0c:	008002b4 	movhi	r2,10
   92a10:	10bd6704 	addi	r2,r2,-2660
   92a14:	11000017 	ldw	r4,0(r2)
   92a18:	009281c1 	jmpi	9281c <_fflush_r>
   92a1c:	008002b4 	movhi	r2,10
   92a20:	10bd6604 	addi	r2,r2,-2664
   92a24:	11000017 	ldw	r4,0(r2)
   92a28:	01400274 	movhi	r5,9
   92a2c:	294a0704 	addi	r5,r5,10268
   92a30:	008d9d41 	jmpi	8d9d4 <_fwalk_reent>

00092a34 <_malloc_trim_r>:
   92a34:	defffb04 	addi	sp,sp,-20
   92a38:	dcc00315 	stw	r19,12(sp)
   92a3c:	dc800215 	stw	r18,8(sp)
   92a40:	dc400115 	stw	r17,4(sp)
   92a44:	dc000015 	stw	r16,0(sp)
   92a48:	2827883a 	mov	r19,r5
   92a4c:	dfc00415 	stw	ra,16(sp)
   92a50:	044002b4 	movhi	r17,10
   92a54:	8c777c04 	addi	r17,r17,-8720
   92a58:	2021883a 	mov	r16,r4
   92a5c:	009762c0 	call	9762c <__malloc_lock>
   92a60:	88800217 	ldw	r2,8(r17)
   92a64:	14800117 	ldw	r18,4(r2)
   92a68:	00bfff04 	movi	r2,-4
   92a6c:	90a4703a 	and	r18,r18,r2
   92a70:	9083fbc4 	addi	r2,r18,4079
   92a74:	14e7c83a 	sub	r19,r2,r19
   92a78:	9826d33a 	srli	r19,r19,12
   92a7c:	0083ffc4 	movi	r2,4095
   92a80:	9cffffc4 	addi	r19,r19,-1
   92a84:	9826933a 	slli	r19,r19,12
   92a88:	14c0060e 	bge	r2,r19,92aa4 <_malloc_trim_r+0x70>
   92a8c:	8009883a 	mov	r4,r16
   92a90:	000b883a 	mov	r5,zero
   92a94:	008e8840 	call	8e884 <_sbrk_r>
   92a98:	88c00217 	ldw	r3,8(r17)
   92a9c:	1c87883a 	add	r3,r3,r18
   92aa0:	10c00a26 	beq	r2,r3,92acc <_malloc_trim_r+0x98>
   92aa4:	8009883a 	mov	r4,r16
   92aa8:	009764c0 	call	9764c <__malloc_unlock>
   92aac:	0005883a 	mov	r2,zero
   92ab0:	dfc00417 	ldw	ra,16(sp)
   92ab4:	dcc00317 	ldw	r19,12(sp)
   92ab8:	dc800217 	ldw	r18,8(sp)
   92abc:	dc400117 	ldw	r17,4(sp)
   92ac0:	dc000017 	ldw	r16,0(sp)
   92ac4:	dec00504 	addi	sp,sp,20
   92ac8:	f800283a 	ret
   92acc:	8009883a 	mov	r4,r16
   92ad0:	04cbc83a 	sub	r5,zero,r19
   92ad4:	008e8840 	call	8e884 <_sbrk_r>
   92ad8:	00ffffc4 	movi	r3,-1
   92adc:	10c01326 	beq	r2,r3,92b2c <_malloc_trim_r+0xf8>
   92ae0:	008002b4 	movhi	r2,10
   92ae4:	10852104 	addi	r2,r2,5252
   92ae8:	11000017 	ldw	r4,0(r2)
   92aec:	88c00217 	ldw	r3,8(r17)
   92af0:	94e5c83a 	sub	r18,r18,r19
   92af4:	94800054 	ori	r18,r18,1
   92af8:	24e7c83a 	sub	r19,r4,r19
   92afc:	1c800115 	stw	r18,4(r3)
   92b00:	8009883a 	mov	r4,r16
   92b04:	14c00015 	stw	r19,0(r2)
   92b08:	009764c0 	call	9764c <__malloc_unlock>
   92b0c:	00800044 	movi	r2,1
   92b10:	dfc00417 	ldw	ra,16(sp)
   92b14:	dcc00317 	ldw	r19,12(sp)
   92b18:	dc800217 	ldw	r18,8(sp)
   92b1c:	dc400117 	ldw	r17,4(sp)
   92b20:	dc000017 	ldw	r16,0(sp)
   92b24:	dec00504 	addi	sp,sp,20
   92b28:	f800283a 	ret
   92b2c:	8009883a 	mov	r4,r16
   92b30:	000b883a 	mov	r5,zero
   92b34:	008e8840 	call	8e884 <_sbrk_r>
   92b38:	88c00217 	ldw	r3,8(r17)
   92b3c:	014003c4 	movi	r5,15
   92b40:	10c9c83a 	sub	r4,r2,r3
   92b44:	293fd70e 	bge	r5,r4,92aa4 <_malloc_trim_r+0x70>
   92b48:	014002b4 	movhi	r5,10
   92b4c:	297d6804 	addi	r5,r5,-2656
   92b50:	29400017 	ldw	r5,0(r5)
   92b54:	21000054 	ori	r4,r4,1
   92b58:	19000115 	stw	r4,4(r3)
   92b5c:	1145c83a 	sub	r2,r2,r5
   92b60:	014002b4 	movhi	r5,10
   92b64:	29452104 	addi	r5,r5,5252
   92b68:	28800015 	stw	r2,0(r5)
   92b6c:	003fcd06 	br	92aa4 <_malloc_trim_r+0x70>

00092b70 <_free_r>:
   92b70:	defffd04 	addi	sp,sp,-12
   92b74:	dc400115 	stw	r17,4(sp)
   92b78:	dc000015 	stw	r16,0(sp)
   92b7c:	dfc00215 	stw	ra,8(sp)
   92b80:	2821883a 	mov	r16,r5
   92b84:	2023883a 	mov	r17,r4
   92b88:	28004b26 	beq	r5,zero,92cb8 <_free_r+0x148>
   92b8c:	009762c0 	call	9762c <__malloc_lock>
   92b90:	823fff17 	ldw	r8,-4(r16)
   92b94:	00bfff84 	movi	r2,-2
   92b98:	81bffe04 	addi	r6,r16,-8
   92b9c:	4084703a 	and	r2,r8,r2
   92ba0:	3087883a 	add	r3,r6,r2
   92ba4:	014002b4 	movhi	r5,10
   92ba8:	29777c04 	addi	r5,r5,-8720
   92bac:	1a400117 	ldw	r9,4(r3)
   92bb0:	29000217 	ldw	r4,8(r5)
   92bb4:	01ffff04 	movi	r7,-4
   92bb8:	49ce703a 	and	r7,r9,r7
   92bbc:	20c06526 	beq	r4,r3,92d54 <_free_r+0x1e4>
   92bc0:	19c00115 	stw	r7,4(r3)
   92bc4:	4200004c 	andi	r8,r8,1
   92bc8:	40003026 	beq	r8,zero,92c8c <_free_r+0x11c>
   92bcc:	0009883a 	mov	r4,zero
   92bd0:	19d1883a 	add	r8,r3,r7
   92bd4:	42000117 	ldw	r8,4(r8)
   92bd8:	4200004c 	andi	r8,r8,1
   92bdc:	4000061e 	bne	r8,zero,92bf8 <_free_r+0x88>
   92be0:	11c5883a 	add	r2,r2,r7
   92be4:	19c00217 	ldw	r7,8(r3)
   92be8:	20004e26 	beq	r4,zero,92d24 <_free_r+0x1b4>
   92bec:	18c00317 	ldw	r3,12(r3)
   92bf0:	38c00315 	stw	r3,12(r7)
   92bf4:	19c00215 	stw	r7,8(r3)
   92bf8:	11c00054 	ori	r7,r2,1
   92bfc:	3087883a 	add	r3,r6,r2
   92c00:	31c00115 	stw	r7,4(r6)
   92c04:	18800015 	stw	r2,0(r3)
   92c08:	20001a1e 	bne	r4,zero,92c74 <_free_r+0x104>
   92c0c:	00c07fc4 	movi	r3,511
   92c10:	18802e2e 	bgeu	r3,r2,92ccc <_free_r+0x15c>
   92c14:	1006d27a 	srli	r3,r2,9
   92c18:	01000104 	movi	r4,4
   92c1c:	20c06636 	bltu	r4,r3,92db8 <_free_r+0x248>
   92c20:	1008d1ba 	srli	r4,r2,6
   92c24:	21000e04 	addi	r4,r4,56
   92c28:	210f883a 	add	r7,r4,r4
   92c2c:	39cf883a 	add	r7,r7,r7
   92c30:	39cf883a 	add	r7,r7,r7
   92c34:	29cf883a 	add	r7,r5,r7
   92c38:	38c00217 	ldw	r3,8(r7)
   92c3c:	014002b4 	movhi	r5,10
   92c40:	29777c04 	addi	r5,r5,-8720
   92c44:	19c06126 	beq	r3,r7,92dcc <_free_r+0x25c>
   92c48:	013fff04 	movi	r4,-4
   92c4c:	19400117 	ldw	r5,4(r3)
   92c50:	290a703a 	and	r5,r5,r4
   92c54:	1140022e 	bgeu	r2,r5,92c60 <_free_r+0xf0>
   92c58:	18c00217 	ldw	r3,8(r3)
   92c5c:	38fffb1e 	bne	r7,r3,92c4c <_free_r+0xdc>
   92c60:	18800317 	ldw	r2,12(r3)
   92c64:	30800315 	stw	r2,12(r6)
   92c68:	30c00215 	stw	r3,8(r6)
   92c6c:	11800215 	stw	r6,8(r2)
   92c70:	19800315 	stw	r6,12(r3)
   92c74:	8809883a 	mov	r4,r17
   92c78:	dfc00217 	ldw	ra,8(sp)
   92c7c:	dc400117 	ldw	r17,4(sp)
   92c80:	dc000017 	ldw	r16,0(sp)
   92c84:	dec00304 	addi	sp,sp,12
   92c88:	009764c1 	jmpi	9764c <__malloc_unlock>
   92c8c:	813ffe17 	ldw	r4,-8(r16)
   92c90:	2a400204 	addi	r9,r5,8
   92c94:	310dc83a 	sub	r6,r6,r4
   92c98:	32000217 	ldw	r8,8(r6)
   92c9c:	1105883a 	add	r2,r2,r4
   92ca0:	42404326 	beq	r8,r9,92db0 <_free_r+0x240>
   92ca4:	32400317 	ldw	r9,12(r6)
   92ca8:	0009883a 	mov	r4,zero
   92cac:	42400315 	stw	r9,12(r8)
   92cb0:	4a000215 	stw	r8,8(r9)
   92cb4:	003fc606 	br	92bd0 <_free_r+0x60>
   92cb8:	dfc00217 	ldw	ra,8(sp)
   92cbc:	dc400117 	ldw	r17,4(sp)
   92cc0:	dc000017 	ldw	r16,0(sp)
   92cc4:	dec00304 	addi	sp,sp,12
   92cc8:	f800283a 	ret
   92ccc:	1004d0fa 	srli	r2,r2,3
   92cd0:	02000044 	movi	r8,1
   92cd4:	29c00117 	ldw	r7,4(r5)
   92cd8:	1087883a 	add	r3,r2,r2
   92cdc:	18c7883a 	add	r3,r3,r3
   92ce0:	1005d0ba 	srai	r2,r2,2
   92ce4:	18c7883a 	add	r3,r3,r3
   92ce8:	28c7883a 	add	r3,r5,r3
   92cec:	19000217 	ldw	r4,8(r3)
   92cf0:	4084983a 	sll	r2,r8,r2
   92cf4:	30c00315 	stw	r3,12(r6)
   92cf8:	31000215 	stw	r4,8(r6)
   92cfc:	11c4b03a 	or	r2,r2,r7
   92d00:	21800315 	stw	r6,12(r4)
   92d04:	8809883a 	mov	r4,r17
   92d08:	28800115 	stw	r2,4(r5)
   92d0c:	19800215 	stw	r6,8(r3)
   92d10:	dfc00217 	ldw	ra,8(sp)
   92d14:	dc400117 	ldw	r17,4(sp)
   92d18:	dc000017 	ldw	r16,0(sp)
   92d1c:	dec00304 	addi	sp,sp,12
   92d20:	009764c1 	jmpi	9764c <__malloc_unlock>
   92d24:	020002b4 	movhi	r8,10
   92d28:	42377e04 	addi	r8,r8,-8712
   92d2c:	3a3faf1e 	bne	r7,r8,92bec <_free_r+0x7c>
   92d30:	29800515 	stw	r6,20(r5)
   92d34:	29800415 	stw	r6,16(r5)
   92d38:	11000054 	ori	r4,r2,1
   92d3c:	3087883a 	add	r3,r6,r2
   92d40:	31c00315 	stw	r7,12(r6)
   92d44:	31c00215 	stw	r7,8(r6)
   92d48:	31000115 	stw	r4,4(r6)
   92d4c:	18800015 	stw	r2,0(r3)
   92d50:	003fc806 	br	92c74 <_free_r+0x104>
   92d54:	4200004c 	andi	r8,r8,1
   92d58:	3885883a 	add	r2,r7,r2
   92d5c:	4000071e 	bne	r8,zero,92d7c <_free_r+0x20c>
   92d60:	81fffe17 	ldw	r7,-8(r16)
   92d64:	31cdc83a 	sub	r6,r6,r7
   92d68:	30c00317 	ldw	r3,12(r6)
   92d6c:	31000217 	ldw	r4,8(r6)
   92d70:	11c5883a 	add	r2,r2,r7
   92d74:	20c00315 	stw	r3,12(r4)
   92d78:	19000215 	stw	r4,8(r3)
   92d7c:	00c002b4 	movhi	r3,10
   92d80:	18fd6904 	addi	r3,r3,-2652
   92d84:	18c00017 	ldw	r3,0(r3)
   92d88:	11000054 	ori	r4,r2,1
   92d8c:	31000115 	stw	r4,4(r6)
   92d90:	29800215 	stw	r6,8(r5)
   92d94:	10ffb736 	bltu	r2,r3,92c74 <_free_r+0x104>
   92d98:	008002b4 	movhi	r2,10
   92d9c:	10851504 	addi	r2,r2,5204
   92da0:	11400017 	ldw	r5,0(r2)
   92da4:	8809883a 	mov	r4,r17
   92da8:	0092a340 	call	92a34 <_malloc_trim_r>
   92dac:	003fb106 	br	92c74 <_free_r+0x104>
   92db0:	01000044 	movi	r4,1
   92db4:	003f8606 	br	92bd0 <_free_r+0x60>
   92db8:	01000504 	movi	r4,20
   92dbc:	20c00b36 	bltu	r4,r3,92dec <_free_r+0x27c>
   92dc0:	190016c4 	addi	r4,r3,91
   92dc4:	210f883a 	add	r7,r4,r4
   92dc8:	003f9806 	br	92c2c <_free_r+0xbc>
   92dcc:	2009d0ba 	srai	r4,r4,2
   92dd0:	00800044 	movi	r2,1
   92dd4:	29c00117 	ldw	r7,4(r5)
   92dd8:	1108983a 	sll	r4,r2,r4
   92ddc:	1805883a 	mov	r2,r3
   92de0:	21c8b03a 	or	r4,r4,r7
   92de4:	29000115 	stw	r4,4(r5)
   92de8:	003f9e06 	br	92c64 <_free_r+0xf4>
   92dec:	01001504 	movi	r4,84
   92df0:	20c00436 	bltu	r4,r3,92e04 <_free_r+0x294>
   92df4:	1008d33a 	srli	r4,r2,12
   92df8:	21001b84 	addi	r4,r4,110
   92dfc:	210f883a 	add	r7,r4,r4
   92e00:	003f8a06 	br	92c2c <_free_r+0xbc>
   92e04:	01005504 	movi	r4,340
   92e08:	20c00436 	bltu	r4,r3,92e1c <_free_r+0x2ac>
   92e0c:	1008d3fa 	srli	r4,r2,15
   92e10:	21001dc4 	addi	r4,r4,119
   92e14:	210f883a 	add	r7,r4,r4
   92e18:	003f8406 	br	92c2c <_free_r+0xbc>
   92e1c:	01015504 	movi	r4,1364
   92e20:	20c00436 	bltu	r4,r3,92e34 <_free_r+0x2c4>
   92e24:	1008d4ba 	srli	r4,r2,18
   92e28:	21001f04 	addi	r4,r4,124
   92e2c:	210f883a 	add	r7,r4,r4
   92e30:	003f7e06 	br	92c2c <_free_r+0xbc>
   92e34:	01c03f04 	movi	r7,252
   92e38:	01001f84 	movi	r4,126
   92e3c:	003f7b06 	br	92c2c <_free_r+0xbc>

00092e40 <__sfvwrite_r>:
   92e40:	30800217 	ldw	r2,8(r6)
   92e44:	defff504 	addi	sp,sp,-44
   92e48:	dd400615 	stw	r21,24(sp)
   92e4c:	dd000515 	stw	r20,20(sp)
   92e50:	dc000115 	stw	r16,4(sp)
   92e54:	dfc00a15 	stw	ra,40(sp)
   92e58:	df000915 	stw	fp,36(sp)
   92e5c:	ddc00815 	stw	r23,32(sp)
   92e60:	dd800715 	stw	r22,28(sp)
   92e64:	dcc00415 	stw	r19,16(sp)
   92e68:	dc800315 	stw	r18,12(sp)
   92e6c:	dc400215 	stw	r17,8(sp)
   92e70:	3029883a 	mov	r20,r6
   92e74:	202b883a 	mov	r21,r4
   92e78:	2821883a 	mov	r16,r5
   92e7c:	10002126 	beq	r2,zero,92f04 <__sfvwrite_r+0xc4>
   92e80:	2880030b 	ldhu	r2,12(r5)
   92e84:	10c0020c 	andi	r3,r2,8
   92e88:	18ffffcc 	andi	r3,r3,65535
   92e8c:	18e0001c 	xori	r3,r3,32768
   92e90:	18e00004 	addi	r3,r3,-32768
   92e94:	18002826 	beq	r3,zero,92f38 <__sfvwrite_r+0xf8>
   92e98:	28c00417 	ldw	r3,16(r5)
   92e9c:	18002626 	beq	r3,zero,92f38 <__sfvwrite_r+0xf8>
   92ea0:	10c0008c 	andi	r3,r2,2
   92ea4:	18ffffcc 	andi	r3,r3,65535
   92ea8:	18e0001c 	xori	r3,r3,32768
   92eac:	18e00004 	addi	r3,r3,-32768
   92eb0:	a4400017 	ldw	r17,0(r20)
   92eb4:	18002b26 	beq	r3,zero,92f64 <__sfvwrite_r+0x124>
   92eb8:	0027883a 	mov	r19,zero
   92ebc:	0025883a 	mov	r18,zero
   92ec0:	05810004 	movi	r22,1024
   92ec4:	980d883a 	mov	r6,r19
   92ec8:	a809883a 	mov	r4,r21
   92ecc:	90004f26 	beq	r18,zero,9300c <__sfvwrite_r+0x1cc>
   92ed0:	900f883a 	mov	r7,r18
   92ed4:	81400717 	ldw	r5,28(r16)
   92ed8:	b480012e 	bgeu	r22,r18,92ee0 <__sfvwrite_r+0xa0>
   92edc:	01c10004 	movi	r7,1024
   92ee0:	80800917 	ldw	r2,36(r16)
   92ee4:	103ee83a 	callr	r2
   92ee8:	0080540e 	bge	zero,r2,9303c <__sfvwrite_r+0x1fc>
   92eec:	a0c00217 	ldw	r3,8(r20)
   92ef0:	98a7883a 	add	r19,r19,r2
   92ef4:	90a5c83a 	sub	r18,r18,r2
   92ef8:	1885c83a 	sub	r2,r3,r2
   92efc:	a0800215 	stw	r2,8(r20)
   92f00:	103ff01e 	bne	r2,zero,92ec4 <__sfvwrite_r+0x84>
   92f04:	0005883a 	mov	r2,zero
   92f08:	dfc00a17 	ldw	ra,40(sp)
   92f0c:	df000917 	ldw	fp,36(sp)
   92f10:	ddc00817 	ldw	r23,32(sp)
   92f14:	dd800717 	ldw	r22,28(sp)
   92f18:	dd400617 	ldw	r21,24(sp)
   92f1c:	dd000517 	ldw	r20,20(sp)
   92f20:	dcc00417 	ldw	r19,16(sp)
   92f24:	dc800317 	ldw	r18,12(sp)
   92f28:	dc400217 	ldw	r17,8(sp)
   92f2c:	dc000117 	ldw	r16,4(sp)
   92f30:	dec00b04 	addi	sp,sp,44
   92f34:	f800283a 	ret
   92f38:	a809883a 	mov	r4,r21
   92f3c:	800b883a 	mov	r5,r16
   92f40:	0090cd00 	call	90cd0 <__swsetup_r>
   92f44:	1000f01e 	bne	r2,zero,93308 <__sfvwrite_r+0x4c8>
   92f48:	8080030b 	ldhu	r2,12(r16)
   92f4c:	a4400017 	ldw	r17,0(r20)
   92f50:	10c0008c 	andi	r3,r2,2
   92f54:	18ffffcc 	andi	r3,r3,65535
   92f58:	18e0001c 	xori	r3,r3,32768
   92f5c:	18e00004 	addi	r3,r3,-32768
   92f60:	183fd51e 	bne	r3,zero,92eb8 <__sfvwrite_r+0x78>
   92f64:	10c0004c 	andi	r3,r2,1
   92f68:	002d883a 	mov	r22,zero
   92f6c:	1800381e 	bne	r3,zero,93050 <__sfvwrite_r+0x210>
   92f70:	0025883a 	mov	r18,zero
   92f74:	90002126 	beq	r18,zero,92ffc <__sfvwrite_r+0x1bc>
   92f78:	10c0800c 	andi	r3,r2,512
   92f7c:	18ffffcc 	andi	r3,r3,65535
   92f80:	18e0001c 	xori	r3,r3,32768
   92f84:	18e00004 	addi	r3,r3,-32768
   92f88:	84c00217 	ldw	r19,8(r16)
   92f8c:	18006b26 	beq	r3,zero,9313c <__sfvwrite_r+0x2fc>
   92f90:	980f883a 	mov	r7,r19
   92f94:	94c08636 	bltu	r18,r19,931b0 <__sfvwrite_r+0x370>
   92f98:	10c1200c 	andi	r3,r2,1152
   92f9c:	18009f1e 	bne	r3,zero,9321c <__sfvwrite_r+0x3dc>
   92fa0:	81000017 	ldw	r4,0(r16)
   92fa4:	982f883a 	mov	r23,r19
   92fa8:	9039883a 	mov	fp,r18
   92fac:	9027883a 	mov	r19,r18
   92fb0:	380d883a 	mov	r6,r7
   92fb4:	b00b883a 	mov	r5,r22
   92fb8:	d9c00015 	stw	r7,0(sp)
   92fbc:	00936140 	call	93614 <memmove>
   92fc0:	d9c00017 	ldw	r7,0(sp)
   92fc4:	81000217 	ldw	r4,8(r16)
   92fc8:	80800017 	ldw	r2,0(r16)
   92fcc:	25efc83a 	sub	r23,r4,r23
   92fd0:	11cf883a 	add	r7,r2,r7
   92fd4:	85c00215 	stw	r23,8(r16)
   92fd8:	81c00015 	stw	r7,0(r16)
   92fdc:	a0800217 	ldw	r2,8(r20)
   92fe0:	b72d883a 	add	r22,r22,fp
   92fe4:	9725c83a 	sub	r18,r18,fp
   92fe8:	14e7c83a 	sub	r19,r2,r19
   92fec:	a4c00215 	stw	r19,8(r20)
   92ff0:	983fc426 	beq	r19,zero,92f04 <__sfvwrite_r+0xc4>
   92ff4:	8080030b 	ldhu	r2,12(r16)
   92ff8:	903fdf1e 	bne	r18,zero,92f78 <__sfvwrite_r+0x138>
   92ffc:	8d800017 	ldw	r22,0(r17)
   93000:	8c800117 	ldw	r18,4(r17)
   93004:	8c400204 	addi	r17,r17,8
   93008:	003fda06 	br	92f74 <__sfvwrite_r+0x134>
   9300c:	8cc00017 	ldw	r19,0(r17)
   93010:	8c800117 	ldw	r18,4(r17)
   93014:	8c400204 	addi	r17,r17,8
   93018:	003faa06 	br	92ec4 <__sfvwrite_r+0x84>
   9301c:	00948fc0 	call	948fc <_realloc_r>
   93020:	102f883a 	mov	r23,r2
   93024:	10009f1e 	bne	r2,zero,932a4 <__sfvwrite_r+0x464>
   93028:	81400417 	ldw	r5,16(r16)
   9302c:	a809883a 	mov	r4,r21
   93030:	0092b700 	call	92b70 <_free_r>
   93034:	00800304 	movi	r2,12
   93038:	a8800015 	stw	r2,0(r21)
   9303c:	80c0030b 	ldhu	r3,12(r16)
   93040:	00bfffc4 	movi	r2,-1
   93044:	18c01014 	ori	r3,r3,64
   93048:	80c0030d 	sth	r3,12(r16)
   9304c:	003fae06 	br	92f08 <__sfvwrite_r+0xc8>
   93050:	0007883a 	mov	r3,zero
   93054:	0039883a 	mov	fp,zero
   93058:	0025883a 	mov	r18,zero
   9305c:	90001e26 	beq	r18,zero,930d8 <__sfvwrite_r+0x298>
   93060:	18006526 	beq	r3,zero,931f8 <__sfvwrite_r+0x3b8>
   93064:	b02f883a 	mov	r23,r22
   93068:	9580012e 	bgeu	r18,r22,93070 <__sfvwrite_r+0x230>
   9306c:	902f883a 	mov	r23,r18
   93070:	81000017 	ldw	r4,0(r16)
   93074:	80800417 	ldw	r2,16(r16)
   93078:	84c00217 	ldw	r19,8(r16)
   9307c:	81c00517 	ldw	r7,20(r16)
   93080:	1100022e 	bgeu	r2,r4,9308c <__sfvwrite_r+0x24c>
   93084:	99e7883a 	add	r19,r19,r7
   93088:	9dc01816 	blt	r19,r23,930ec <__sfvwrite_r+0x2ac>
   9308c:	b9c03b16 	blt	r23,r7,9317c <__sfvwrite_r+0x33c>
   93090:	80800917 	ldw	r2,36(r16)
   93094:	81400717 	ldw	r5,28(r16)
   93098:	a809883a 	mov	r4,r21
   9309c:	d8c00015 	stw	r3,0(sp)
   930a0:	e00d883a 	mov	r6,fp
   930a4:	103ee83a 	callr	r2
   930a8:	1027883a 	mov	r19,r2
   930ac:	d8c00017 	ldw	r3,0(sp)
   930b0:	00bfe20e 	bge	zero,r2,9303c <__sfvwrite_r+0x1fc>
   930b4:	b4edc83a 	sub	r22,r22,r19
   930b8:	b0001a26 	beq	r22,zero,93124 <__sfvwrite_r+0x2e4>
   930bc:	a0800217 	ldw	r2,8(r20)
   930c0:	e4f9883a 	add	fp,fp,r19
   930c4:	94e5c83a 	sub	r18,r18,r19
   930c8:	14e7c83a 	sub	r19,r2,r19
   930cc:	a4c00215 	stw	r19,8(r20)
   930d0:	983f8c26 	beq	r19,zero,92f04 <__sfvwrite_r+0xc4>
   930d4:	903fe21e 	bne	r18,zero,93060 <__sfvwrite_r+0x220>
   930d8:	8f000017 	ldw	fp,0(r17)
   930dc:	8c800117 	ldw	r18,4(r17)
   930e0:	0007883a 	mov	r3,zero
   930e4:	8c400204 	addi	r17,r17,8
   930e8:	003fdc06 	br	9305c <__sfvwrite_r+0x21c>
   930ec:	e00b883a 	mov	r5,fp
   930f0:	980d883a 	mov	r6,r19
   930f4:	d8c00015 	stw	r3,0(sp)
   930f8:	00936140 	call	93614 <memmove>
   930fc:	80800017 	ldw	r2,0(r16)
   93100:	a809883a 	mov	r4,r21
   93104:	800b883a 	mov	r5,r16
   93108:	14c5883a 	add	r2,r2,r19
   9310c:	80800015 	stw	r2,0(r16)
   93110:	009281c0 	call	9281c <_fflush_r>
   93114:	d8c00017 	ldw	r3,0(sp)
   93118:	103fc81e 	bne	r2,zero,9303c <__sfvwrite_r+0x1fc>
   9311c:	b4edc83a 	sub	r22,r22,r19
   93120:	b03fe61e 	bne	r22,zero,930bc <__sfvwrite_r+0x27c>
   93124:	a809883a 	mov	r4,r21
   93128:	800b883a 	mov	r5,r16
   9312c:	009281c0 	call	9281c <_fflush_r>
   93130:	103fc21e 	bne	r2,zero,9303c <__sfvwrite_r+0x1fc>
   93134:	0007883a 	mov	r3,zero
   93138:	003fe006 	br	930bc <__sfvwrite_r+0x27c>
   9313c:	81000017 	ldw	r4,0(r16)
   93140:	80800417 	ldw	r2,16(r16)
   93144:	1100022e 	bgeu	r2,r4,93150 <__sfvwrite_r+0x310>
   93148:	9839883a 	mov	fp,r19
   9314c:	9c806036 	bltu	r19,r18,932d0 <__sfvwrite_r+0x490>
   93150:	81c00517 	ldw	r7,20(r16)
   93154:	91c01c36 	bltu	r18,r7,931c8 <__sfvwrite_r+0x388>
   93158:	80800917 	ldw	r2,36(r16)
   9315c:	81400717 	ldw	r5,28(r16)
   93160:	a809883a 	mov	r4,r21
   93164:	b00d883a 	mov	r6,r22
   93168:	103ee83a 	callr	r2
   9316c:	1027883a 	mov	r19,r2
   93170:	00bfb20e 	bge	zero,r2,9303c <__sfvwrite_r+0x1fc>
   93174:	1039883a 	mov	fp,r2
   93178:	003f9806 	br	92fdc <__sfvwrite_r+0x19c>
   9317c:	b80d883a 	mov	r6,r23
   93180:	e00b883a 	mov	r5,fp
   93184:	d8c00015 	stw	r3,0(sp)
   93188:	00936140 	call	93614 <memmove>
   9318c:	80800217 	ldw	r2,8(r16)
   93190:	81000017 	ldw	r4,0(r16)
   93194:	b827883a 	mov	r19,r23
   93198:	15c5c83a 	sub	r2,r2,r23
   9319c:	25ef883a 	add	r23,r4,r23
   931a0:	80800215 	stw	r2,8(r16)
   931a4:	85c00015 	stw	r23,0(r16)
   931a8:	d8c00017 	ldw	r3,0(sp)
   931ac:	003fc106 	br	930b4 <__sfvwrite_r+0x274>
   931b0:	81000017 	ldw	r4,0(r16)
   931b4:	902f883a 	mov	r23,r18
   931b8:	9039883a 	mov	fp,r18
   931bc:	9027883a 	mov	r19,r18
   931c0:	900f883a 	mov	r7,r18
   931c4:	003f7a06 	br	92fb0 <__sfvwrite_r+0x170>
   931c8:	b00b883a 	mov	r5,r22
   931cc:	900d883a 	mov	r6,r18
   931d0:	00936140 	call	93614 <memmove>
   931d4:	80c00217 	ldw	r3,8(r16)
   931d8:	80800017 	ldw	r2,0(r16)
   931dc:	9027883a 	mov	r19,r18
   931e0:	1c87c83a 	sub	r3,r3,r18
   931e4:	1485883a 	add	r2,r2,r18
   931e8:	80c00215 	stw	r3,8(r16)
   931ec:	80800015 	stw	r2,0(r16)
   931f0:	9039883a 	mov	fp,r18
   931f4:	003f7906 	br	92fdc <__sfvwrite_r+0x19c>
   931f8:	e009883a 	mov	r4,fp
   931fc:	01400284 	movi	r5,10
   93200:	900d883a 	mov	r6,r18
   93204:	008e2100 	call	8e210 <memchr>
   93208:	10003c26 	beq	r2,zero,932fc <__sfvwrite_r+0x4bc>
   9320c:	15800044 	addi	r22,r2,1
   93210:	b72dc83a 	sub	r22,r22,fp
   93214:	00c00044 	movi	r3,1
   93218:	003f9206 	br	93064 <__sfvwrite_r+0x224>
   9321c:	81000517 	ldw	r4,20(r16)
   93220:	81400417 	ldw	r5,16(r16)
   93224:	80c00017 	ldw	r3,0(r16)
   93228:	210d883a 	add	r6,r4,r4
   9322c:	3109883a 	add	r4,r6,r4
   93230:	2026d7fa 	srli	r19,r4,31
   93234:	1979c83a 	sub	fp,r3,r5
   93238:	e1800044 	addi	r6,fp,1
   9323c:	9909883a 	add	r4,r19,r4
   93240:	2027d07a 	srai	r19,r4,1
   93244:	3489883a 	add	r4,r6,r18
   93248:	980d883a 	mov	r6,r19
   9324c:	9900022e 	bgeu	r19,r4,93258 <__sfvwrite_r+0x418>
   93250:	2027883a 	mov	r19,r4
   93254:	200d883a 	mov	r6,r4
   93258:	1081000c 	andi	r2,r2,1024
   9325c:	10bfffcc 	andi	r2,r2,65535
   93260:	10a0001c 	xori	r2,r2,32768
   93264:	10a00004 	addi	r2,r2,-32768
   93268:	a809883a 	mov	r4,r21
   9326c:	103f6b26 	beq	r2,zero,9301c <__sfvwrite_r+0x1dc>
   93270:	300b883a 	mov	r5,r6
   93274:	008da8c0 	call	8da8c <_malloc_r>
   93278:	102f883a 	mov	r23,r2
   9327c:	103f6d26 	beq	r2,zero,93034 <__sfvwrite_r+0x1f4>
   93280:	81400417 	ldw	r5,16(r16)
   93284:	1009883a 	mov	r4,r2
   93288:	e00d883a 	mov	r6,fp
   9328c:	008e3840 	call	8e384 <memcpy>
   93290:	8080030b 	ldhu	r2,12(r16)
   93294:	00fedfc4 	movi	r3,-1153
   93298:	10c4703a 	and	r2,r2,r3
   9329c:	10802014 	ori	r2,r2,128
   932a0:	8080030d 	sth	r2,12(r16)
   932a4:	bf09883a 	add	r4,r23,fp
   932a8:	9f07c83a 	sub	r3,r19,fp
   932ac:	85c00415 	stw	r23,16(r16)
   932b0:	84c00515 	stw	r19,20(r16)
   932b4:	81000015 	stw	r4,0(r16)
   932b8:	902f883a 	mov	r23,r18
   932bc:	80c00215 	stw	r3,8(r16)
   932c0:	9039883a 	mov	fp,r18
   932c4:	9027883a 	mov	r19,r18
   932c8:	900f883a 	mov	r7,r18
   932cc:	003f3806 	br	92fb0 <__sfvwrite_r+0x170>
   932d0:	b00b883a 	mov	r5,r22
   932d4:	980d883a 	mov	r6,r19
   932d8:	00936140 	call	93614 <memmove>
   932dc:	80800017 	ldw	r2,0(r16)
   932e0:	a809883a 	mov	r4,r21
   932e4:	800b883a 	mov	r5,r16
   932e8:	14c5883a 	add	r2,r2,r19
   932ec:	80800015 	stw	r2,0(r16)
   932f0:	009281c0 	call	9281c <_fflush_r>
   932f4:	103f3926 	beq	r2,zero,92fdc <__sfvwrite_r+0x19c>
   932f8:	003f5006 	br	9303c <__sfvwrite_r+0x1fc>
   932fc:	95800044 	addi	r22,r18,1
   93300:	00c00044 	movi	r3,1
   93304:	003f5706 	br	93064 <__sfvwrite_r+0x224>
   93308:	80c0030b 	ldhu	r3,12(r16)
   9330c:	00bfffc4 	movi	r2,-1
   93310:	18c01014 	ori	r3,r3,64
   93314:	80c0030d 	sth	r3,12(r16)
   93318:	00c00244 	movi	r3,9
   9331c:	a8c00015 	stw	r3,0(r21)
   93320:	003ef906 	br	92f08 <__sfvwrite_r+0xc8>

00093324 <_setlocale_r>:
   93324:	defffc04 	addi	sp,sp,-16
   93328:	dc800215 	stw	r18,8(sp)
   9332c:	dc400115 	stw	r17,4(sp)
   93330:	dc000015 	stw	r16,0(sp)
   93334:	dfc00315 	stw	ra,12(sp)
   93338:	3021883a 	mov	r16,r6
   9333c:	2023883a 	mov	r17,r4
   93340:	2825883a 	mov	r18,r5
   93344:	30001626 	beq	r6,zero,933a0 <_setlocale_r+0x7c>
   93348:	3009883a 	mov	r4,r6
   9334c:	014002b4 	movhi	r5,10
   93350:	2974af04 	addi	r5,r5,-11588
   93354:	0094f5c0 	call	94f5c <strcmp>
   93358:	10000a1e 	bne	r2,zero,93384 <_setlocale_r+0x60>
   9335c:	8c800c15 	stw	r18,48(r17)
   93360:	8c000d15 	stw	r16,52(r17)
   93364:	008002b4 	movhi	r2,10
   93368:	10b4af04 	addi	r2,r2,-11588
   9336c:	dfc00317 	ldw	ra,12(sp)
   93370:	dc800217 	ldw	r18,8(sp)
   93374:	dc400117 	ldw	r17,4(sp)
   93378:	dc000017 	ldw	r16,0(sp)
   9337c:	dec00404 	addi	sp,sp,16
   93380:	f800283a 	ret
   93384:	8009883a 	mov	r4,r16
   93388:	014002b4 	movhi	r5,10
   9338c:	2974b904 	addi	r5,r5,-11548
   93390:	0094f5c0 	call	94f5c <strcmp>
   93394:	103ff126 	beq	r2,zero,9335c <_setlocale_r+0x38>
   93398:	0005883a 	mov	r2,zero
   9339c:	003ff306 	br	9336c <_setlocale_r+0x48>
   933a0:	008002b4 	movhi	r2,10
   933a4:	10b4af04 	addi	r2,r2,-11588
   933a8:	dfc00317 	ldw	ra,12(sp)
   933ac:	dc800217 	ldw	r18,8(sp)
   933b0:	dc400117 	ldw	r17,4(sp)
   933b4:	dc000017 	ldw	r16,0(sp)
   933b8:	dec00404 	addi	sp,sp,16
   933bc:	f800283a 	ret

000933c0 <__locale_charset>:
   933c0:	008002b4 	movhi	r2,10
   933c4:	10b56e04 	addi	r2,r2,-10824
   933c8:	f800283a 	ret

000933cc <_localeconv_r>:
   933cc:	008002b4 	movhi	r2,10
   933d0:	10b57204 	addi	r2,r2,-10808
   933d4:	f800283a 	ret

000933d8 <setlocale>:
   933d8:	00c002b4 	movhi	r3,10
   933dc:	18fd6704 	addi	r3,r3,-2660
   933e0:	2005883a 	mov	r2,r4
   933e4:	19000017 	ldw	r4,0(r3)
   933e8:	280d883a 	mov	r6,r5
   933ec:	100b883a 	mov	r5,r2
   933f0:	00933241 	jmpi	93324 <_setlocale_r>

000933f4 <localeconv>:
   933f4:	008002b4 	movhi	r2,10
   933f8:	10b57204 	addi	r2,r2,-10808
   933fc:	f800283a 	ret

00093400 <_lseek_r>:
   93400:	defffd04 	addi	sp,sp,-12
   93404:	dc400115 	stw	r17,4(sp)
   93408:	dc000015 	stw	r16,0(sp)
   9340c:	2023883a 	mov	r17,r4
   93410:	040002b4 	movhi	r16,10
   93414:	84051604 	addi	r16,r16,5208
   93418:	2809883a 	mov	r4,r5
   9341c:	300b883a 	mov	r5,r6
   93420:	380d883a 	mov	r6,r7
   93424:	dfc00215 	stw	ra,8(sp)
   93428:	80000015 	stw	zero,0(r16)
   9342c:	00974dc0 	call	974dc <lseek>
   93430:	00ffffc4 	movi	r3,-1
   93434:	10c00526 	beq	r2,r3,9344c <_lseek_r+0x4c>
   93438:	dfc00217 	ldw	ra,8(sp)
   9343c:	dc400117 	ldw	r17,4(sp)
   93440:	dc000017 	ldw	r16,0(sp)
   93444:	dec00304 	addi	sp,sp,12
   93448:	f800283a 	ret
   9344c:	80c00017 	ldw	r3,0(r16)
   93450:	183ff926 	beq	r3,zero,93438 <_lseek_r+0x38>
   93454:	88c00015 	stw	r3,0(r17)
   93458:	dfc00217 	ldw	ra,8(sp)
   9345c:	dc400117 	ldw	r17,4(sp)
   93460:	dc000017 	ldw	r16,0(sp)
   93464:	dec00304 	addi	sp,sp,12
   93468:	f800283a 	ret

0009346c <__smakebuf_r>:
   9346c:	2880030b 	ldhu	r2,12(r5)
   93470:	deffed04 	addi	sp,sp,-76
   93474:	dc401015 	stw	r17,64(sp)
   93478:	10c0008c 	andi	r3,r2,2
   9347c:	18ffffcc 	andi	r3,r3,65535
   93480:	18e0001c 	xori	r3,r3,32768
   93484:	dc000f15 	stw	r16,60(sp)
   93488:	dfc01215 	stw	ra,72(sp)
   9348c:	dc801115 	stw	r18,68(sp)
   93490:	18e00004 	addi	r3,r3,-32768
   93494:	2821883a 	mov	r16,r5
   93498:	2023883a 	mov	r17,r4
   9349c:	1800381e 	bne	r3,zero,93580 <__smakebuf_r+0x114>
   934a0:	2940038f 	ldh	r5,14(r5)
   934a4:	28002d16 	blt	r5,zero,9355c <__smakebuf_r+0xf0>
   934a8:	d80d883a 	mov	r6,sp
   934ac:	00952140 	call	95214 <_fstat_r>
   934b0:	10002916 	blt	r2,zero,93558 <__smakebuf_r+0xec>
   934b4:	d8800117 	ldw	r2,4(sp)
   934b8:	00e00014 	movui	r3,32768
   934bc:	10bc000c 	andi	r2,r2,61440
   934c0:	10c03c26 	beq	r2,r3,935b4 <__smakebuf_r+0x148>
   934c4:	80c0030b 	ldhu	r3,12(r16)
   934c8:	18c20014 	ori	r3,r3,2048
   934cc:	80c0030d 	sth	r3,12(r16)
   934d0:	00c80004 	movi	r3,8192
   934d4:	10c00c1e 	bne	r2,r3,93508 <__smakebuf_r+0x9c>
   934d8:	8140038f 	ldh	r5,14(r16)
   934dc:	8809883a 	mov	r4,r17
   934e0:	009527c0 	call	9527c <_isatty_r>
   934e4:	10000826 	beq	r2,zero,93508 <__smakebuf_r+0x9c>
   934e8:	80c0030b 	ldhu	r3,12(r16)
   934ec:	808010c4 	addi	r2,r16,67
   934f0:	80800015 	stw	r2,0(r16)
   934f4:	18c00054 	ori	r3,r3,1
   934f8:	80800415 	stw	r2,16(r16)
   934fc:	00800044 	movi	r2,1
   93500:	80c0030d 	sth	r3,12(r16)
   93504:	80800515 	stw	r2,20(r16)
   93508:	04810004 	movi	r18,1024
   9350c:	8809883a 	mov	r4,r17
   93510:	900b883a 	mov	r5,r18
   93514:	008da8c0 	call	8da8c <_malloc_r>
   93518:	10003026 	beq	r2,zero,935dc <__smakebuf_r+0x170>
   9351c:	80c0030b 	ldhu	r3,12(r16)
   93520:	01000274 	movhi	r4,9
   93524:	21359904 	addi	r4,r4,-10652
   93528:	89000f15 	stw	r4,60(r17)
   9352c:	18c02014 	ori	r3,r3,128
   93530:	80c0030d 	sth	r3,12(r16)
   93534:	80800015 	stw	r2,0(r16)
   93538:	80800415 	stw	r2,16(r16)
   9353c:	84800515 	stw	r18,20(r16)
   93540:	dfc01217 	ldw	ra,72(sp)
   93544:	dc801117 	ldw	r18,68(sp)
   93548:	dc401017 	ldw	r17,64(sp)
   9354c:	dc000f17 	ldw	r16,60(sp)
   93550:	dec01304 	addi	sp,sp,76
   93554:	f800283a 	ret
   93558:	8080030b 	ldhu	r2,12(r16)
   9355c:	10c0200c 	andi	r3,r2,128
   93560:	18ffffcc 	andi	r3,r3,65535
   93564:	18e0001c 	xori	r3,r3,32768
   93568:	18e00004 	addi	r3,r3,-32768
   9356c:	18000f1e 	bne	r3,zero,935ac <__smakebuf_r+0x140>
   93570:	04810004 	movi	r18,1024
   93574:	10820014 	ori	r2,r2,2048
   93578:	8080030d 	sth	r2,12(r16)
   9357c:	003fe306 	br	9350c <__smakebuf_r+0xa0>
   93580:	288010c4 	addi	r2,r5,67
   93584:	28800015 	stw	r2,0(r5)
   93588:	28800415 	stw	r2,16(r5)
   9358c:	00800044 	movi	r2,1
   93590:	28800515 	stw	r2,20(r5)
   93594:	dfc01217 	ldw	ra,72(sp)
   93598:	dc801117 	ldw	r18,68(sp)
   9359c:	dc401017 	ldw	r17,64(sp)
   935a0:	dc000f17 	ldw	r16,60(sp)
   935a4:	dec01304 	addi	sp,sp,76
   935a8:	f800283a 	ret
   935ac:	04801004 	movi	r18,64
   935b0:	003ff006 	br	93574 <__smakebuf_r+0x108>
   935b4:	81000a17 	ldw	r4,40(r16)
   935b8:	00c00274 	movhi	r3,9
   935bc:	18fa7104 	addi	r3,r3,-5692
   935c0:	20ffc01e 	bne	r4,r3,934c4 <__smakebuf_r+0x58>
   935c4:	8080030b 	ldhu	r2,12(r16)
   935c8:	00c10004 	movi	r3,1024
   935cc:	80c01315 	stw	r3,76(r16)
   935d0:	10c4b03a 	or	r2,r2,r3
   935d4:	8080030d 	sth	r2,12(r16)
   935d8:	003fcb06 	br	93508 <__smakebuf_r+0x9c>
   935dc:	8080030b 	ldhu	r2,12(r16)
   935e0:	10c0800c 	andi	r3,r2,512
   935e4:	18ffffcc 	andi	r3,r3,65535
   935e8:	18e0001c 	xori	r3,r3,32768
   935ec:	18e00004 	addi	r3,r3,-32768
   935f0:	183fd31e 	bne	r3,zero,93540 <__smakebuf_r+0xd4>
   935f4:	10800094 	ori	r2,r2,2
   935f8:	80c010c4 	addi	r3,r16,67
   935fc:	8080030d 	sth	r2,12(r16)
   93600:	00800044 	movi	r2,1
   93604:	80c00015 	stw	r3,0(r16)
   93608:	80c00415 	stw	r3,16(r16)
   9360c:	80800515 	stw	r2,20(r16)
   93610:	003fcb06 	br	93540 <__smakebuf_r+0xd4>

00093614 <memmove>:
   93614:	2005883a 	mov	r2,r4
   93618:	300f883a 	mov	r7,r6
   9361c:	29000b2e 	bgeu	r5,r4,9364c <memmove+0x38>
   93620:	2987883a 	add	r3,r5,r6
   93624:	20c0092e 	bgeu	r4,r3,9364c <memmove+0x38>
   93628:	218b883a 	add	r5,r4,r6
   9362c:	198fc83a 	sub	r7,r3,r6
   93630:	30003f26 	beq	r6,zero,93730 <memmove+0x11c>
   93634:	18ffffc4 	addi	r3,r3,-1
   93638:	19000003 	ldbu	r4,0(r3)
   9363c:	297fffc4 	addi	r5,r5,-1
   93640:	29000005 	stb	r4,0(r5)
   93644:	19fffb1e 	bne	r3,r7,93634 <memmove+0x20>
   93648:	f800283a 	ret
   9364c:	00c003c4 	movi	r3,15
   93650:	1980382e 	bgeu	r3,r6,93734 <memmove+0x120>
   93654:	2886b03a 	or	r3,r5,r2
   93658:	18c000cc 	andi	r3,r3,3
   9365c:	1800351e 	bne	r3,zero,93734 <memmove+0x120>
   93660:	327ffc04 	addi	r9,r6,-16
   93664:	4812d13a 	srli	r9,r9,4
   93668:	12000404 	addi	r8,r2,16
   9366c:	1007883a 	mov	r3,r2
   93670:	4808913a 	slli	r4,r9,4
   93674:	280f883a 	mov	r7,r5
   93678:	4111883a 	add	r8,r8,r4
   9367c:	39000017 	ldw	r4,0(r7)
   93680:	18c00404 	addi	r3,r3,16
   93684:	39c00404 	addi	r7,r7,16
   93688:	193ffc15 	stw	r4,-16(r3)
   9368c:	393ffd17 	ldw	r4,-12(r7)
   93690:	193ffd15 	stw	r4,-12(r3)
   93694:	393ffe17 	ldw	r4,-8(r7)
   93698:	193ffe15 	stw	r4,-8(r3)
   9369c:	393fff17 	ldw	r4,-4(r7)
   936a0:	193fff15 	stw	r4,-4(r3)
   936a4:	1a3ff51e 	bne	r3,r8,9367c <memmove+0x68>
   936a8:	49000044 	addi	r4,r9,1
   936ac:	2008913a 	slli	r4,r4,4
   936b0:	31c003cc 	andi	r7,r6,15
   936b4:	1107883a 	add	r3,r2,r4
   936b8:	290b883a 	add	r5,r5,r4
   936bc:	010000c4 	movi	r4,3
   936c0:	21c0142e 	bgeu	r4,r7,93714 <memmove+0x100>
   936c4:	39ffff04 	addi	r7,r7,-4
   936c8:	3814d0ba 	srli	r10,r7,2
   936cc:	1a400104 	addi	r9,r3,4
   936d0:	180d883a 	mov	r6,r3
   936d4:	5289883a 	add	r4,r10,r10
   936d8:	2109883a 	add	r4,r4,r4
   936dc:	4913883a 	add	r9,r9,r4
   936e0:	2809883a 	mov	r4,r5
   936e4:	22000017 	ldw	r8,0(r4)
   936e8:	31800104 	addi	r6,r6,4
   936ec:	21000104 	addi	r4,r4,4
   936f0:	323fff15 	stw	r8,-4(r6)
   936f4:	327ffb1e 	bne	r6,r9,936e4 <memmove+0xd0>
   936f8:	51000044 	addi	r4,r10,1
   936fc:	52bfff24 	muli	r10,r10,-4
   93700:	2109883a 	add	r4,r4,r4
   93704:	2109883a 	add	r4,r4,r4
   93708:	51cf883a 	add	r7,r10,r7
   9370c:	290b883a 	add	r5,r5,r4
   93710:	1907883a 	add	r3,r3,r4
   93714:	38000626 	beq	r7,zero,93730 <memmove+0x11c>
   93718:	19cf883a 	add	r7,r3,r7
   9371c:	29800003 	ldbu	r6,0(r5)
   93720:	18c00044 	addi	r3,r3,1
   93724:	29400044 	addi	r5,r5,1
   93728:	19bfffc5 	stb	r6,-1(r3)
   9372c:	19fffb1e 	bne	r3,r7,9371c <memmove+0x108>
   93730:	f800283a 	ret
   93734:	1007883a 	mov	r3,r2
   93738:	003ff606 	br	93714 <memmove+0x100>

0009373c <_Balloc>:
   9373c:	20801317 	ldw	r2,76(r4)
   93740:	defffc04 	addi	sp,sp,-16
   93744:	dc400115 	stw	r17,4(sp)
   93748:	dc000015 	stw	r16,0(sp)
   9374c:	dfc00315 	stw	ra,12(sp)
   93750:	dc800215 	stw	r18,8(sp)
   93754:	2023883a 	mov	r17,r4
   93758:	2821883a 	mov	r16,r5
   9375c:	10000f26 	beq	r2,zero,9379c <_Balloc+0x60>
   93760:	8407883a 	add	r3,r16,r16
   93764:	18c7883a 	add	r3,r3,r3
   93768:	10c7883a 	add	r3,r2,r3
   9376c:	18800017 	ldw	r2,0(r3)
   93770:	10001126 	beq	r2,zero,937b8 <_Balloc+0x7c>
   93774:	11000017 	ldw	r4,0(r2)
   93778:	19000015 	stw	r4,0(r3)
   9377c:	10000415 	stw	zero,16(r2)
   93780:	10000315 	stw	zero,12(r2)
   93784:	dfc00317 	ldw	ra,12(sp)
   93788:	dc800217 	ldw	r18,8(sp)
   9378c:	dc400117 	ldw	r17,4(sp)
   93790:	dc000017 	ldw	r16,0(sp)
   93794:	dec00404 	addi	sp,sp,16
   93798:	f800283a 	ret
   9379c:	01400104 	movi	r5,4
   937a0:	01800404 	movi	r6,16
   937a4:	00951580 	call	95158 <_calloc_r>
   937a8:	88801315 	stw	r2,76(r17)
   937ac:	103fec1e 	bne	r2,zero,93760 <_Balloc+0x24>
   937b0:	0005883a 	mov	r2,zero
   937b4:	003ff306 	br	93784 <_Balloc+0x48>
   937b8:	01400044 	movi	r5,1
   937bc:	2c24983a 	sll	r18,r5,r16
   937c0:	8809883a 	mov	r4,r17
   937c4:	91800144 	addi	r6,r18,5
   937c8:	318d883a 	add	r6,r6,r6
   937cc:	318d883a 	add	r6,r6,r6
   937d0:	00951580 	call	95158 <_calloc_r>
   937d4:	103ff626 	beq	r2,zero,937b0 <_Balloc+0x74>
   937d8:	14000115 	stw	r16,4(r2)
   937dc:	14800215 	stw	r18,8(r2)
   937e0:	003fe606 	br	9377c <_Balloc+0x40>

000937e4 <_Bfree>:
   937e4:	28000826 	beq	r5,zero,93808 <_Bfree+0x24>
   937e8:	28c00117 	ldw	r3,4(r5)
   937ec:	20801317 	ldw	r2,76(r4)
   937f0:	18c7883a 	add	r3,r3,r3
   937f4:	18c7883a 	add	r3,r3,r3
   937f8:	10c5883a 	add	r2,r2,r3
   937fc:	10c00017 	ldw	r3,0(r2)
   93800:	28c00015 	stw	r3,0(r5)
   93804:	11400015 	stw	r5,0(r2)
   93808:	f800283a 	ret

0009380c <__multadd>:
   9380c:	defffa04 	addi	sp,sp,-24
   93810:	dc000115 	stw	r16,4(sp)
   93814:	2c000417 	ldw	r16,16(r5)
   93818:	dc800315 	stw	r18,12(sp)
   9381c:	dc400215 	stw	r17,8(sp)
   93820:	dfc00515 	stw	ra,20(sp)
   93824:	dcc00415 	stw	r19,16(sp)
   93828:	2823883a 	mov	r17,r5
   9382c:	2025883a 	mov	r18,r4
   93830:	28c00504 	addi	r3,r5,20
   93834:	0011883a 	mov	r8,zero
   93838:	1a800017 	ldw	r10,0(r3)
   9383c:	18c00104 	addi	r3,r3,4
   93840:	42000044 	addi	r8,r8,1
   93844:	527fffcc 	andi	r9,r10,65535
   93848:	4993383a 	mul	r9,r9,r6
   9384c:	5014d43a 	srli	r10,r10,16
   93850:	49d3883a 	add	r9,r9,r7
   93854:	480ed43a 	srli	r7,r9,16
   93858:	5195383a 	mul	r10,r10,r6
   9385c:	4a7fffcc 	andi	r9,r9,65535
   93860:	3a8f883a 	add	r7,r7,r10
   93864:	3814943a 	slli	r10,r7,16
   93868:	380ed43a 	srli	r7,r7,16
   9386c:	5253883a 	add	r9,r10,r9
   93870:	1a7fff15 	stw	r9,-4(r3)
   93874:	443ff016 	blt	r8,r16,93838 <__multadd+0x2c>
   93878:	38000926 	beq	r7,zero,938a0 <__multadd+0x94>
   9387c:	88800217 	ldw	r2,8(r17)
   93880:	80800f0e 	bge	r16,r2,938c0 <__multadd+0xb4>
   93884:	80800144 	addi	r2,r16,5
   93888:	1085883a 	add	r2,r2,r2
   9388c:	1085883a 	add	r2,r2,r2
   93890:	8885883a 	add	r2,r17,r2
   93894:	84000044 	addi	r16,r16,1
   93898:	11c00015 	stw	r7,0(r2)
   9389c:	8c000415 	stw	r16,16(r17)
   938a0:	8805883a 	mov	r2,r17
   938a4:	dfc00517 	ldw	ra,20(sp)
   938a8:	dcc00417 	ldw	r19,16(sp)
   938ac:	dc800317 	ldw	r18,12(sp)
   938b0:	dc400217 	ldw	r17,8(sp)
   938b4:	dc000117 	ldw	r16,4(sp)
   938b8:	dec00604 	addi	sp,sp,24
   938bc:	f800283a 	ret
   938c0:	89400117 	ldw	r5,4(r17)
   938c4:	9009883a 	mov	r4,r18
   938c8:	d9c00015 	stw	r7,0(sp)
   938cc:	29400044 	addi	r5,r5,1
   938d0:	009373c0 	call	9373c <_Balloc>
   938d4:	89800417 	ldw	r6,16(r17)
   938d8:	89400304 	addi	r5,r17,12
   938dc:	11000304 	addi	r4,r2,12
   938e0:	31800084 	addi	r6,r6,2
   938e4:	318d883a 	add	r6,r6,r6
   938e8:	318d883a 	add	r6,r6,r6
   938ec:	1027883a 	mov	r19,r2
   938f0:	008e3840 	call	8e384 <memcpy>
   938f4:	88c00117 	ldw	r3,4(r17)
   938f8:	90801317 	ldw	r2,76(r18)
   938fc:	d9c00017 	ldw	r7,0(sp)
   93900:	18c7883a 	add	r3,r3,r3
   93904:	18c7883a 	add	r3,r3,r3
   93908:	10c5883a 	add	r2,r2,r3
   9390c:	10c00017 	ldw	r3,0(r2)
   93910:	88c00015 	stw	r3,0(r17)
   93914:	14400015 	stw	r17,0(r2)
   93918:	9823883a 	mov	r17,r19
   9391c:	003fd906 	br	93884 <__multadd+0x78>

00093920 <__s2b>:
   93920:	defff904 	addi	sp,sp,-28
   93924:	dd000415 	stw	r20,16(sp)
   93928:	dc400115 	stw	r17,4(sp)
   9392c:	2829883a 	mov	r20,r5
   93930:	2023883a 	mov	r17,r4
   93934:	01400244 	movi	r5,9
   93938:	39000204 	addi	r4,r7,8
   9393c:	dcc00315 	stw	r19,12(sp)
   93940:	dc800215 	stw	r18,8(sp)
   93944:	dfc00615 	stw	ra,24(sp)
   93948:	dd400515 	stw	r21,20(sp)
   9394c:	dc000015 	stw	r16,0(sp)
   93950:	3825883a 	mov	r18,r7
   93954:	3027883a 	mov	r19,r6
   93958:	008ce8c0 	call	8ce8c <__divsi3>
   9395c:	00c00044 	movi	r3,1
   93960:	000b883a 	mov	r5,zero
   93964:	1880030e 	bge	r3,r2,93974 <__s2b+0x54>
   93968:	18c7883a 	add	r3,r3,r3
   9396c:	29400044 	addi	r5,r5,1
   93970:	18bffd16 	blt	r3,r2,93968 <__s2b+0x48>
   93974:	8809883a 	mov	r4,r17
   93978:	009373c0 	call	9373c <_Balloc>
   9397c:	d8c00717 	ldw	r3,28(sp)
   93980:	10c00515 	stw	r3,20(r2)
   93984:	00c00044 	movi	r3,1
   93988:	10c00415 	stw	r3,16(r2)
   9398c:	00c00244 	movi	r3,9
   93990:	1cc0210e 	bge	r3,r19,93a18 <__s2b+0xf8>
   93994:	a0eb883a 	add	r21,r20,r3
   93998:	a821883a 	mov	r16,r21
   9399c:	a4e9883a 	add	r20,r20,r19
   939a0:	81c00007 	ldb	r7,0(r16)
   939a4:	8809883a 	mov	r4,r17
   939a8:	84000044 	addi	r16,r16,1
   939ac:	100b883a 	mov	r5,r2
   939b0:	01800284 	movi	r6,10
   939b4:	39fff404 	addi	r7,r7,-48
   939b8:	009380c0 	call	9380c <__multadd>
   939bc:	853ff81e 	bne	r16,r20,939a0 <__s2b+0x80>
   939c0:	ace1883a 	add	r16,r21,r19
   939c4:	843ffe04 	addi	r16,r16,-8
   939c8:	9c800a0e 	bge	r19,r18,939f4 <__s2b+0xd4>
   939cc:	94e5c83a 	sub	r18,r18,r19
   939d0:	84a5883a 	add	r18,r16,r18
   939d4:	81c00007 	ldb	r7,0(r16)
   939d8:	8809883a 	mov	r4,r17
   939dc:	84000044 	addi	r16,r16,1
   939e0:	100b883a 	mov	r5,r2
   939e4:	01800284 	movi	r6,10
   939e8:	39fff404 	addi	r7,r7,-48
   939ec:	009380c0 	call	9380c <__multadd>
   939f0:	84bff81e 	bne	r16,r18,939d4 <__s2b+0xb4>
   939f4:	dfc00617 	ldw	ra,24(sp)
   939f8:	dd400517 	ldw	r21,20(sp)
   939fc:	dd000417 	ldw	r20,16(sp)
   93a00:	dcc00317 	ldw	r19,12(sp)
   93a04:	dc800217 	ldw	r18,8(sp)
   93a08:	dc400117 	ldw	r17,4(sp)
   93a0c:	dc000017 	ldw	r16,0(sp)
   93a10:	dec00704 	addi	sp,sp,28
   93a14:	f800283a 	ret
   93a18:	a4000284 	addi	r16,r20,10
   93a1c:	1827883a 	mov	r19,r3
   93a20:	003fe906 	br	939c8 <__s2b+0xa8>

00093a24 <__hi0bits>:
   93a24:	20bfffec 	andhi	r2,r4,65535
   93a28:	1000141e 	bne	r2,zero,93a7c <__hi0bits+0x58>
   93a2c:	2008943a 	slli	r4,r4,16
   93a30:	00800404 	movi	r2,16
   93a34:	20ffc02c 	andhi	r3,r4,65280
   93a38:	1800021e 	bne	r3,zero,93a44 <__hi0bits+0x20>
   93a3c:	2008923a 	slli	r4,r4,8
   93a40:	10800204 	addi	r2,r2,8
   93a44:	20fc002c 	andhi	r3,r4,61440
   93a48:	1800021e 	bne	r3,zero,93a54 <__hi0bits+0x30>
   93a4c:	2008913a 	slli	r4,r4,4
   93a50:	10800104 	addi	r2,r2,4
   93a54:	20f0002c 	andhi	r3,r4,49152
   93a58:	1800031e 	bne	r3,zero,93a68 <__hi0bits+0x44>
   93a5c:	2109883a 	add	r4,r4,r4
   93a60:	10800084 	addi	r2,r2,2
   93a64:	2109883a 	add	r4,r4,r4
   93a68:	20000316 	blt	r4,zero,93a78 <__hi0bits+0x54>
   93a6c:	2110002c 	andhi	r4,r4,16384
   93a70:	2000041e 	bne	r4,zero,93a84 <__hi0bits+0x60>
   93a74:	00800804 	movi	r2,32
   93a78:	f800283a 	ret
   93a7c:	0005883a 	mov	r2,zero
   93a80:	003fec06 	br	93a34 <__hi0bits+0x10>
   93a84:	10800044 	addi	r2,r2,1
   93a88:	f800283a 	ret

00093a8c <__lo0bits>:
   93a8c:	20c00017 	ldw	r3,0(r4)
   93a90:	188001cc 	andi	r2,r3,7
   93a94:	10000826 	beq	r2,zero,93ab8 <__lo0bits+0x2c>
   93a98:	1880004c 	andi	r2,r3,1
   93a9c:	1000211e 	bne	r2,zero,93b24 <__lo0bits+0x98>
   93aa0:	1880008c 	andi	r2,r3,2
   93aa4:	1000211e 	bne	r2,zero,93b2c <__lo0bits+0xa0>
   93aa8:	1806d0ba 	srli	r3,r3,2
   93aac:	00800084 	movi	r2,2
   93ab0:	20c00015 	stw	r3,0(r4)
   93ab4:	f800283a 	ret
   93ab8:	18bfffcc 	andi	r2,r3,65535
   93abc:	10001326 	beq	r2,zero,93b0c <__lo0bits+0x80>
   93ac0:	0005883a 	mov	r2,zero
   93ac4:	19403fcc 	andi	r5,r3,255
   93ac8:	2800021e 	bne	r5,zero,93ad4 <__lo0bits+0x48>
   93acc:	1806d23a 	srli	r3,r3,8
   93ad0:	10800204 	addi	r2,r2,8
   93ad4:	194003cc 	andi	r5,r3,15
   93ad8:	2800021e 	bne	r5,zero,93ae4 <__lo0bits+0x58>
   93adc:	1806d13a 	srli	r3,r3,4
   93ae0:	10800104 	addi	r2,r2,4
   93ae4:	194000cc 	andi	r5,r3,3
   93ae8:	2800021e 	bne	r5,zero,93af4 <__lo0bits+0x68>
   93aec:	1806d0ba 	srli	r3,r3,2
   93af0:	10800084 	addi	r2,r2,2
   93af4:	1940004c 	andi	r5,r3,1
   93af8:	2800081e 	bne	r5,zero,93b1c <__lo0bits+0x90>
   93afc:	1806d07a 	srli	r3,r3,1
   93b00:	1800051e 	bne	r3,zero,93b18 <__lo0bits+0x8c>
   93b04:	00800804 	movi	r2,32
   93b08:	f800283a 	ret
   93b0c:	1806d43a 	srli	r3,r3,16
   93b10:	00800404 	movi	r2,16
   93b14:	003feb06 	br	93ac4 <__lo0bits+0x38>
   93b18:	10800044 	addi	r2,r2,1
   93b1c:	20c00015 	stw	r3,0(r4)
   93b20:	f800283a 	ret
   93b24:	0005883a 	mov	r2,zero
   93b28:	f800283a 	ret
   93b2c:	1806d07a 	srli	r3,r3,1
   93b30:	00800044 	movi	r2,1
   93b34:	20c00015 	stw	r3,0(r4)
   93b38:	f800283a 	ret

00093b3c <__i2b>:
   93b3c:	defffd04 	addi	sp,sp,-12
   93b40:	dc000015 	stw	r16,0(sp)
   93b44:	04000044 	movi	r16,1
   93b48:	dc400115 	stw	r17,4(sp)
   93b4c:	2823883a 	mov	r17,r5
   93b50:	800b883a 	mov	r5,r16
   93b54:	dfc00215 	stw	ra,8(sp)
   93b58:	009373c0 	call	9373c <_Balloc>
   93b5c:	14400515 	stw	r17,20(r2)
   93b60:	14000415 	stw	r16,16(r2)
   93b64:	dfc00217 	ldw	ra,8(sp)
   93b68:	dc400117 	ldw	r17,4(sp)
   93b6c:	dc000017 	ldw	r16,0(sp)
   93b70:	dec00304 	addi	sp,sp,12
   93b74:	f800283a 	ret

00093b78 <__multiply>:
   93b78:	defffa04 	addi	sp,sp,-24
   93b7c:	dcc00315 	stw	r19,12(sp)
   93b80:	dc400115 	stw	r17,4(sp)
   93b84:	34c00417 	ldw	r19,16(r6)
   93b88:	2c400417 	ldw	r17,16(r5)
   93b8c:	dd000415 	stw	r20,16(sp)
   93b90:	dc800215 	stw	r18,8(sp)
   93b94:	dfc00515 	stw	ra,20(sp)
   93b98:	dc000015 	stw	r16,0(sp)
   93b9c:	2825883a 	mov	r18,r5
   93ba0:	3029883a 	mov	r20,r6
   93ba4:	8cc0050e 	bge	r17,r19,93bbc <__multiply+0x44>
   93ba8:	8807883a 	mov	r3,r17
   93bac:	3025883a 	mov	r18,r6
   93bb0:	9823883a 	mov	r17,r19
   93bb4:	2829883a 	mov	r20,r5
   93bb8:	1827883a 	mov	r19,r3
   93bbc:	90800217 	ldw	r2,8(r18)
   93bc0:	8ce1883a 	add	r16,r17,r19
   93bc4:	91400117 	ldw	r5,4(r18)
   93bc8:	1400010e 	bge	r2,r16,93bd0 <__multiply+0x58>
   93bcc:	29400044 	addi	r5,r5,1
   93bd0:	009373c0 	call	9373c <_Balloc>
   93bd4:	83c00144 	addi	r15,r16,5
   93bd8:	7bdf883a 	add	r15,r15,r15
   93bdc:	7bdf883a 	add	r15,r15,r15
   93be0:	13800504 	addi	r14,r2,20
   93be4:	13df883a 	add	r15,r2,r15
   93be8:	7007883a 	mov	r3,r14
   93bec:	73c0032e 	bgeu	r14,r15,93bfc <__multiply+0x84>
   93bf0:	18000015 	stw	zero,0(r3)
   93bf4:	18c00104 	addi	r3,r3,4
   93bf8:	1bfffd36 	bltu	r3,r15,93bf0 <__multiply+0x78>
   93bfc:	99800144 	addi	r6,r19,5
   93c00:	8b000144 	addi	r12,r17,5
   93c04:	318d883a 	add	r6,r6,r6
   93c08:	6319883a 	add	r12,r12,r12
   93c0c:	318d883a 	add	r6,r6,r6
   93c10:	6319883a 	add	r12,r12,r12
   93c14:	a3400504 	addi	r13,r20,20
   93c18:	a18d883a 	add	r6,r20,r6
   93c1c:	94400504 	addi	r17,r18,20
   93c20:	9319883a 	add	r12,r18,r12
   93c24:	6980392e 	bgeu	r13,r6,93d0c <__multiply+0x194>
   93c28:	6a800017 	ldw	r10,0(r13)
   93c2c:	52ffffcc 	andi	r11,r10,65535
   93c30:	58001826 	beq	r11,zero,93c94 <__multiply+0x11c>
   93c34:	7007883a 	mov	r3,r14
   93c38:	8809883a 	mov	r4,r17
   93c3c:	000b883a 	mov	r5,zero
   93c40:	22400017 	ldw	r9,0(r4)
   93c44:	1a000017 	ldw	r8,0(r3)
   93c48:	21000104 	addi	r4,r4,4
   93c4c:	49ffffcc 	andi	r7,r9,65535
   93c50:	3acf383a 	mul	r7,r7,r11
   93c54:	4812d43a 	srli	r9,r9,16
   93c58:	42bfffcc 	andi	r10,r8,65535
   93c5c:	3a8f883a 	add	r7,r7,r10
   93c60:	394f883a 	add	r7,r7,r5
   93c64:	4010d43a 	srli	r8,r8,16
   93c68:	4acb383a 	mul	r5,r9,r11
   93c6c:	3814d43a 	srli	r10,r7,16
   93c70:	19c0000d 	sth	r7,0(r3)
   93c74:	2a0b883a 	add	r5,r5,r8
   93c78:	2a8b883a 	add	r5,r5,r10
   93c7c:	1940008d 	sth	r5,2(r3)
   93c80:	280ad43a 	srli	r5,r5,16
   93c84:	18c00104 	addi	r3,r3,4
   93c88:	233fed36 	bltu	r4,r12,93c40 <__multiply+0xc8>
   93c8c:	19400015 	stw	r5,0(r3)
   93c90:	6a800017 	ldw	r10,0(r13)
   93c94:	5014d43a 	srli	r10,r10,16
   93c98:	50001926 	beq	r10,zero,93d00 <__multiply+0x188>
   93c9c:	71400017 	ldw	r5,0(r14)
   93ca0:	7007883a 	mov	r3,r14
   93ca4:	8809883a 	mov	r4,r17
   93ca8:	280f883a 	mov	r7,r5
   93cac:	0017883a 	mov	r11,zero
   93cb0:	22400017 	ldw	r9,0(r4)
   93cb4:	380ed43a 	srli	r7,r7,16
   93cb8:	1940000d 	sth	r5,0(r3)
   93cbc:	4a3fffcc 	andi	r8,r9,65535
   93cc0:	4291383a 	mul	r8,r8,r10
   93cc4:	4812d43a 	srli	r9,r9,16
   93cc8:	18c00104 	addi	r3,r3,4
   93ccc:	41d1883a 	add	r8,r8,r7
   93cd0:	19c00017 	ldw	r7,0(r3)
   93cd4:	42d1883a 	add	r8,r8,r11
   93cd8:	4a93383a 	mul	r9,r9,r10
   93cdc:	1a3fff8d 	sth	r8,-2(r3)
   93ce0:	4010d43a 	srli	r8,r8,16
   93ce4:	397fffcc 	andi	r5,r7,65535
   93ce8:	2a4b883a 	add	r5,r5,r9
   93cec:	2a0b883a 	add	r5,r5,r8
   93cf0:	21000104 	addi	r4,r4,4
   93cf4:	2816d43a 	srli	r11,r5,16
   93cf8:	233fed36 	bltu	r4,r12,93cb0 <__multiply+0x138>
   93cfc:	19400015 	stw	r5,0(r3)
   93d00:	6b400104 	addi	r13,r13,4
   93d04:	73800104 	addi	r14,r14,4
   93d08:	69bfc736 	bltu	r13,r6,93c28 <__multiply+0xb0>
   93d0c:	0400090e 	bge	zero,r16,93d34 <__multiply+0x1bc>
   93d10:	78ffff17 	ldw	r3,-4(r15)
   93d14:	7bffff04 	addi	r15,r15,-4
   93d18:	18000326 	beq	r3,zero,93d28 <__multiply+0x1b0>
   93d1c:	00000506 	br	93d34 <__multiply+0x1bc>
   93d20:	78c00017 	ldw	r3,0(r15)
   93d24:	1800031e 	bne	r3,zero,93d34 <__multiply+0x1bc>
   93d28:	843fffc4 	addi	r16,r16,-1
   93d2c:	7bffff04 	addi	r15,r15,-4
   93d30:	803ffb1e 	bne	r16,zero,93d20 <__multiply+0x1a8>
   93d34:	14000415 	stw	r16,16(r2)
   93d38:	dfc00517 	ldw	ra,20(sp)
   93d3c:	dd000417 	ldw	r20,16(sp)
   93d40:	dcc00317 	ldw	r19,12(sp)
   93d44:	dc800217 	ldw	r18,8(sp)
   93d48:	dc400117 	ldw	r17,4(sp)
   93d4c:	dc000017 	ldw	r16,0(sp)
   93d50:	dec00604 	addi	sp,sp,24
   93d54:	f800283a 	ret

00093d58 <__pow5mult>:
   93d58:	defffb04 	addi	sp,sp,-20
   93d5c:	dcc00315 	stw	r19,12(sp)
   93d60:	dc800215 	stw	r18,8(sp)
   93d64:	dc000015 	stw	r16,0(sp)
   93d68:	dfc00415 	stw	ra,16(sp)
   93d6c:	dc400115 	stw	r17,4(sp)
   93d70:	308000cc 	andi	r2,r6,3
   93d74:	3021883a 	mov	r16,r6
   93d78:	2027883a 	mov	r19,r4
   93d7c:	2825883a 	mov	r18,r5
   93d80:	10002e1e 	bne	r2,zero,93e3c <__pow5mult+0xe4>
   93d84:	8021d0ba 	srai	r16,r16,2
   93d88:	80001a26 	beq	r16,zero,93df4 <__pow5mult+0x9c>
   93d8c:	9c401217 	ldw	r17,72(r19)
   93d90:	8800061e 	bne	r17,zero,93dac <__pow5mult+0x54>
   93d94:	00003406 	br	93e68 <__pow5mult+0x110>
   93d98:	8021d07a 	srai	r16,r16,1
   93d9c:	80001526 	beq	r16,zero,93df4 <__pow5mult+0x9c>
   93da0:	88c00017 	ldw	r3,0(r17)
   93da4:	18001b26 	beq	r3,zero,93e14 <__pow5mult+0xbc>
   93da8:	1823883a 	mov	r17,r3
   93dac:	80c0004c 	andi	r3,r16,1
   93db0:	183ff926 	beq	r3,zero,93d98 <__pow5mult+0x40>
   93db4:	900b883a 	mov	r5,r18
   93db8:	880d883a 	mov	r6,r17
   93dbc:	9809883a 	mov	r4,r19
   93dc0:	0093b780 	call	93b78 <__multiply>
   93dc4:	90001b26 	beq	r18,zero,93e34 <__pow5mult+0xdc>
   93dc8:	91000117 	ldw	r4,4(r18)
   93dcc:	98c01317 	ldw	r3,76(r19)
   93dd0:	8021d07a 	srai	r16,r16,1
   93dd4:	2109883a 	add	r4,r4,r4
   93dd8:	2109883a 	add	r4,r4,r4
   93ddc:	1907883a 	add	r3,r3,r4
   93de0:	19000017 	ldw	r4,0(r3)
   93de4:	91000015 	stw	r4,0(r18)
   93de8:	1c800015 	stw	r18,0(r3)
   93dec:	1025883a 	mov	r18,r2
   93df0:	803feb1e 	bne	r16,zero,93da0 <__pow5mult+0x48>
   93df4:	9005883a 	mov	r2,r18
   93df8:	dfc00417 	ldw	ra,16(sp)
   93dfc:	dcc00317 	ldw	r19,12(sp)
   93e00:	dc800217 	ldw	r18,8(sp)
   93e04:	dc400117 	ldw	r17,4(sp)
   93e08:	dc000017 	ldw	r16,0(sp)
   93e0c:	dec00504 	addi	sp,sp,20
   93e10:	f800283a 	ret
   93e14:	880b883a 	mov	r5,r17
   93e18:	880d883a 	mov	r6,r17
   93e1c:	9809883a 	mov	r4,r19
   93e20:	0093b780 	call	93b78 <__multiply>
   93e24:	88800015 	stw	r2,0(r17)
   93e28:	10000015 	stw	zero,0(r2)
   93e2c:	1023883a 	mov	r17,r2
   93e30:	003fde06 	br	93dac <__pow5mult+0x54>
   93e34:	1025883a 	mov	r18,r2
   93e38:	003fd706 	br	93d98 <__pow5mult+0x40>
   93e3c:	10bfffc4 	addi	r2,r2,-1
   93e40:	1085883a 	add	r2,r2,r2
   93e44:	00c002b4 	movhi	r3,10
   93e48:	18f5c404 	addi	r3,r3,-10480
   93e4c:	1085883a 	add	r2,r2,r2
   93e50:	1885883a 	add	r2,r3,r2
   93e54:	11800017 	ldw	r6,0(r2)
   93e58:	000f883a 	mov	r7,zero
   93e5c:	009380c0 	call	9380c <__multadd>
   93e60:	1025883a 	mov	r18,r2
   93e64:	003fc706 	br	93d84 <__pow5mult+0x2c>
   93e68:	9809883a 	mov	r4,r19
   93e6c:	01409c44 	movi	r5,625
   93e70:	0093b3c0 	call	93b3c <__i2b>
   93e74:	98801215 	stw	r2,72(r19)
   93e78:	1023883a 	mov	r17,r2
   93e7c:	10000015 	stw	zero,0(r2)
   93e80:	003fca06 	br	93dac <__pow5mult+0x54>

00093e84 <__lshift>:
   93e84:	defff904 	addi	sp,sp,-28
   93e88:	dd400515 	stw	r21,20(sp)
   93e8c:	dc400115 	stw	r17,4(sp)
   93e90:	2d400417 	ldw	r21,16(r5)
   93e94:	3023d17a 	srai	r17,r6,5
   93e98:	28800217 	ldw	r2,8(r5)
   93e9c:	dd000415 	stw	r20,16(sp)
   93ea0:	8d6b883a 	add	r21,r17,r21
   93ea4:	dcc00315 	stw	r19,12(sp)
   93ea8:	dc800215 	stw	r18,8(sp)
   93eac:	dc000015 	stw	r16,0(sp)
   93eb0:	dfc00615 	stw	ra,24(sp)
   93eb4:	ac000044 	addi	r16,r21,1
   93eb8:	2825883a 	mov	r18,r5
   93ebc:	3029883a 	mov	r20,r6
   93ec0:	2027883a 	mov	r19,r4
   93ec4:	29400117 	ldw	r5,4(r5)
   93ec8:	1400030e 	bge	r2,r16,93ed8 <__lshift+0x54>
   93ecc:	1085883a 	add	r2,r2,r2
   93ed0:	29400044 	addi	r5,r5,1
   93ed4:	143ffd16 	blt	r2,r16,93ecc <__lshift+0x48>
   93ed8:	9809883a 	mov	r4,r19
   93edc:	009373c0 	call	9373c <_Balloc>
   93ee0:	10c00504 	addi	r3,r2,20
   93ee4:	0440090e 	bge	zero,r17,93f0c <__lshift+0x88>
   93ee8:	000f883a 	mov	r7,zero
   93eec:	18000015 	stw	zero,0(r3)
   93ef0:	39c00044 	addi	r7,r7,1
   93ef4:	18c00104 	addi	r3,r3,4
   93ef8:	3c7ffc1e 	bne	r7,r17,93eec <__lshift+0x68>
   93efc:	38c00144 	addi	r3,r7,5
   93f00:	18c7883a 	add	r3,r3,r3
   93f04:	18c7883a 	add	r3,r3,r3
   93f08:	10c7883a 	add	r3,r2,r3
   93f0c:	92000417 	ldw	r8,16(r18)
   93f10:	a18007cc 	andi	r6,r20,31
   93f14:	91c00504 	addi	r7,r18,20
   93f18:	42000144 	addi	r8,r8,5
   93f1c:	4211883a 	add	r8,r8,r8
   93f20:	4211883a 	add	r8,r8,r8
   93f24:	9211883a 	add	r8,r18,r8
   93f28:	30002226 	beq	r6,zero,93fb4 <__lshift+0x130>
   93f2c:	02800804 	movi	r10,32
   93f30:	5195c83a 	sub	r10,r10,r6
   93f34:	000b883a 	mov	r5,zero
   93f38:	3a400017 	ldw	r9,0(r7)
   93f3c:	18c00104 	addi	r3,r3,4
   93f40:	39c00104 	addi	r7,r7,4
   93f44:	4992983a 	sll	r9,r9,r6
   93f48:	2a4ab03a 	or	r5,r5,r9
   93f4c:	197fff15 	stw	r5,-4(r3)
   93f50:	397fff17 	ldw	r5,-4(r7)
   93f54:	2a8ad83a 	srl	r5,r5,r10
   93f58:	3a3ff736 	bltu	r7,r8,93f38 <__lshift+0xb4>
   93f5c:	19400015 	stw	r5,0(r3)
   93f60:	28000126 	beq	r5,zero,93f68 <__lshift+0xe4>
   93f64:	ac000084 	addi	r16,r21,2
   93f68:	91000117 	ldw	r4,4(r18)
   93f6c:	98c01317 	ldw	r3,76(r19)
   93f70:	843fffc4 	addi	r16,r16,-1
   93f74:	2109883a 	add	r4,r4,r4
   93f78:	2109883a 	add	r4,r4,r4
   93f7c:	1907883a 	add	r3,r3,r4
   93f80:	19000017 	ldw	r4,0(r3)
   93f84:	14000415 	stw	r16,16(r2)
   93f88:	91000015 	stw	r4,0(r18)
   93f8c:	1c800015 	stw	r18,0(r3)
   93f90:	dfc00617 	ldw	ra,24(sp)
   93f94:	dd400517 	ldw	r21,20(sp)
   93f98:	dd000417 	ldw	r20,16(sp)
   93f9c:	dcc00317 	ldw	r19,12(sp)
   93fa0:	dc800217 	ldw	r18,8(sp)
   93fa4:	dc400117 	ldw	r17,4(sp)
   93fa8:	dc000017 	ldw	r16,0(sp)
   93fac:	dec00704 	addi	sp,sp,28
   93fb0:	f800283a 	ret
   93fb4:	39400017 	ldw	r5,0(r7)
   93fb8:	18c00104 	addi	r3,r3,4
   93fbc:	39c00104 	addi	r7,r7,4
   93fc0:	197fff15 	stw	r5,-4(r3)
   93fc4:	3a3fe82e 	bgeu	r7,r8,93f68 <__lshift+0xe4>
   93fc8:	39400017 	ldw	r5,0(r7)
   93fcc:	18c00104 	addi	r3,r3,4
   93fd0:	39c00104 	addi	r7,r7,4
   93fd4:	197fff15 	stw	r5,-4(r3)
   93fd8:	3a3ff636 	bltu	r7,r8,93fb4 <__lshift+0x130>
   93fdc:	003fe206 	br	93f68 <__lshift+0xe4>

00093fe0 <__mcmp>:
   93fe0:	20800417 	ldw	r2,16(r4)
   93fe4:	28c00417 	ldw	r3,16(r5)
   93fe8:	10c5c83a 	sub	r2,r2,r3
   93fec:	10000f1e 	bne	r2,zero,9402c <__mcmp+0x4c>
   93ff0:	18c00144 	addi	r3,r3,5
   93ff4:	18c7883a 	add	r3,r3,r3
   93ff8:	18c7883a 	add	r3,r3,r3
   93ffc:	21c00504 	addi	r7,r4,20
   94000:	28cb883a 	add	r5,r5,r3
   94004:	20c9883a 	add	r4,r4,r3
   94008:	213fff04 	addi	r4,r4,-4
   9400c:	297fff04 	addi	r5,r5,-4
   94010:	21800017 	ldw	r6,0(r4)
   94014:	28c00017 	ldw	r3,0(r5)
   94018:	30c0021e 	bne	r6,r3,94024 <__mcmp+0x44>
   9401c:	393ffa36 	bltu	r7,r4,94008 <__mcmp+0x28>
   94020:	f800283a 	ret
   94024:	30c00236 	bltu	r6,r3,94030 <__mcmp+0x50>
   94028:	00800044 	movi	r2,1
   9402c:	f800283a 	ret
   94030:	00bfffc4 	movi	r2,-1
   94034:	f800283a 	ret

00094038 <__mdiff>:
   94038:	defffb04 	addi	sp,sp,-20
   9403c:	dc000015 	stw	r16,0(sp)
   94040:	2821883a 	mov	r16,r5
   94044:	dc800215 	stw	r18,8(sp)
   94048:	300b883a 	mov	r5,r6
   9404c:	2025883a 	mov	r18,r4
   94050:	8009883a 	mov	r4,r16
   94054:	dc400115 	stw	r17,4(sp)
   94058:	dfc00415 	stw	ra,16(sp)
   9405c:	dcc00315 	stw	r19,12(sp)
   94060:	3023883a 	mov	r17,r6
   94064:	0093fe00 	call	93fe0 <__mcmp>
   94068:	10005026 	beq	r2,zero,941ac <__mdiff+0x174>
   9406c:	10004a16 	blt	r2,zero,94198 <__mdiff+0x160>
   94070:	0027883a 	mov	r19,zero
   94074:	81400117 	ldw	r5,4(r16)
   94078:	9009883a 	mov	r4,r18
   9407c:	009373c0 	call	9373c <_Balloc>
   94080:	82400417 	ldw	r9,16(r16)
   94084:	89800417 	ldw	r6,16(r17)
   94088:	14c00315 	stw	r19,12(r2)
   9408c:	4b800144 	addi	r14,r9,5
   94090:	31800144 	addi	r6,r6,5
   94094:	739d883a 	add	r14,r14,r14
   94098:	318d883a 	add	r6,r6,r6
   9409c:	739d883a 	add	r14,r14,r14
   940a0:	318d883a 	add	r6,r6,r6
   940a4:	81c00504 	addi	r7,r16,20
   940a8:	839d883a 	add	r14,r16,r14
   940ac:	8a000504 	addi	r8,r17,20
   940b0:	898d883a 	add	r6,r17,r6
   940b4:	10c00504 	addi	r3,r2,20
   940b8:	0009883a 	mov	r4,zero
   940bc:	3b000017 	ldw	r12,0(r7)
   940c0:	42c00017 	ldw	r11,0(r8)
   940c4:	42000104 	addi	r8,r8,4
   940c8:	62bfffcc 	andi	r10,r12,65535
   940cc:	5b7fffcc 	andi	r13,r11,65535
   940d0:	5109883a 	add	r4,r10,r4
   940d4:	2355c83a 	sub	r10,r4,r13
   940d8:	5816d43a 	srli	r11,r11,16
   940dc:	6008d43a 	srli	r4,r12,16
   940e0:	501bd43a 	srai	r13,r10,16
   940e4:	1a80000d 	sth	r10,0(r3)
   940e8:	22c9c83a 	sub	r4,r4,r11
   940ec:	2349883a 	add	r4,r4,r13
   940f0:	1900008d 	sth	r4,2(r3)
   940f4:	39c00104 	addi	r7,r7,4
   940f8:	2009d43a 	srai	r4,r4,16
   940fc:	18c00104 	addi	r3,r3,4
   94100:	41bfee36 	bltu	r8,r6,940bc <__mdiff+0x84>
   94104:	180b883a 	mov	r5,r3
   94108:	3815883a 	mov	r10,r7
   9410c:	3b80132e 	bgeu	r7,r14,9415c <__mdiff+0x124>
   94110:	3a000017 	ldw	r8,0(r7)
   94114:	18c00104 	addi	r3,r3,4
   94118:	39c00104 	addi	r7,r7,4
   9411c:	41bfffcc 	andi	r6,r8,65535
   94120:	310d883a 	add	r6,r6,r4
   94124:	3009d43a 	srai	r4,r6,16
   94128:	4010d43a 	srli	r8,r8,16
   9412c:	19bfff0d 	sth	r6,-4(r3)
   94130:	2209883a 	add	r4,r4,r8
   94134:	193fff8d 	sth	r4,-2(r3)
   94138:	2009d43a 	srai	r4,r4,16
   9413c:	3bbff436 	bltu	r7,r14,94110 <__mdiff+0xd8>
   94140:	0286303a 	nor	r3,zero,r10
   94144:	1b87883a 	add	r3,r3,r14
   94148:	1806d0ba 	srli	r3,r3,2
   9414c:	18c00044 	addi	r3,r3,1
   94150:	18c7883a 	add	r3,r3,r3
   94154:	18c7883a 	add	r3,r3,r3
   94158:	28c7883a 	add	r3,r5,r3
   9415c:	193fff17 	ldw	r4,-4(r3)
   94160:	18ffff04 	addi	r3,r3,-4
   94164:	2000041e 	bne	r4,zero,94178 <__mdiff+0x140>
   94168:	18ffff04 	addi	r3,r3,-4
   9416c:	19000017 	ldw	r4,0(r3)
   94170:	4a7fffc4 	addi	r9,r9,-1
   94174:	203ffc26 	beq	r4,zero,94168 <__mdiff+0x130>
   94178:	12400415 	stw	r9,16(r2)
   9417c:	dfc00417 	ldw	ra,16(sp)
   94180:	dcc00317 	ldw	r19,12(sp)
   94184:	dc800217 	ldw	r18,8(sp)
   94188:	dc400117 	ldw	r17,4(sp)
   9418c:	dc000017 	ldw	r16,0(sp)
   94190:	dec00504 	addi	sp,sp,20
   94194:	f800283a 	ret
   94198:	8005883a 	mov	r2,r16
   9419c:	04c00044 	movi	r19,1
   941a0:	8821883a 	mov	r16,r17
   941a4:	1023883a 	mov	r17,r2
   941a8:	003fb206 	br	94074 <__mdiff+0x3c>
   941ac:	9009883a 	mov	r4,r18
   941b0:	000b883a 	mov	r5,zero
   941b4:	009373c0 	call	9373c <_Balloc>
   941b8:	00c00044 	movi	r3,1
   941bc:	10c00415 	stw	r3,16(r2)
   941c0:	10000515 	stw	zero,20(r2)
   941c4:	dfc00417 	ldw	ra,16(sp)
   941c8:	dcc00317 	ldw	r19,12(sp)
   941cc:	dc800217 	ldw	r18,8(sp)
   941d0:	dc400117 	ldw	r17,4(sp)
   941d4:	dc000017 	ldw	r16,0(sp)
   941d8:	dec00504 	addi	sp,sp,20
   941dc:	f800283a 	ret

000941e0 <__ulp>:
   941e0:	295ffc2c 	andhi	r5,r5,32752
   941e4:	00bf3034 	movhi	r2,64704
   941e8:	2887883a 	add	r3,r5,r2
   941ec:	00c0020e 	bge	zero,r3,941f8 <__ulp+0x18>
   941f0:	0005883a 	mov	r2,zero
   941f4:	f800283a 	ret
   941f8:	00c7c83a 	sub	r3,zero,r3
   941fc:	1805d53a 	srai	r2,r3,20
   94200:	00c004c4 	movi	r3,19
   94204:	18800a0e 	bge	r3,r2,94230 <__ulp+0x50>
   94208:	01000c84 	movi	r4,50
   9420c:	0007883a 	mov	r3,zero
   94210:	20800516 	blt	r4,r2,94228 <__ulp+0x48>
   94214:	01000cc4 	movi	r4,51
   94218:	2085c83a 	sub	r2,r4,r2
   9421c:	01000044 	movi	r4,1
   94220:	2084983a 	sll	r2,r4,r2
   94224:	f800283a 	ret
   94228:	00800044 	movi	r2,1
   9422c:	f800283a 	ret
   94230:	00c00234 	movhi	r3,8
   94234:	1887d83a 	sra	r3,r3,r2
   94238:	0005883a 	mov	r2,zero
   9423c:	f800283a 	ret

00094240 <__b2d>:
   94240:	defffa04 	addi	sp,sp,-24
   94244:	dc000015 	stw	r16,0(sp)
   94248:	24000417 	ldw	r16,16(r4)
   9424c:	dc400115 	stw	r17,4(sp)
   94250:	dcc00315 	stw	r19,12(sp)
   94254:	84000144 	addi	r16,r16,5
   94258:	8421883a 	add	r16,r16,r16
   9425c:	8421883a 	add	r16,r16,r16
   94260:	2421883a 	add	r16,r4,r16
   94264:	847fff17 	ldw	r17,-4(r16)
   94268:	24c00504 	addi	r19,r4,20
   9426c:	dd000415 	stw	r20,16(sp)
   94270:	8809883a 	mov	r4,r17
   94274:	dc800215 	stw	r18,8(sp)
   94278:	2829883a 	mov	r20,r5
   9427c:	dfc00515 	stw	ra,20(sp)
   94280:	0093a240 	call	93a24 <__hi0bits>
   94284:	00c00804 	movi	r3,32
   94288:	1887c83a 	sub	r3,r3,r2
   9428c:	a0c00015 	stw	r3,0(r20)
   94290:	00c00284 	movi	r3,10
   94294:	84bfff04 	addi	r18,r16,-4
   94298:	18801216 	blt	r3,r2,942e4 <__b2d+0xa4>
   9429c:	010002c4 	movi	r4,11
   942a0:	2089c83a 	sub	r4,r4,r2
   942a4:	8906d83a 	srl	r3,r17,r4
   942a8:	18cffc34 	orhi	r3,r3,16368
   942ac:	9c80322e 	bgeu	r19,r18,94378 <__b2d+0x138>
   942b0:	817ffe17 	ldw	r5,-8(r16)
   942b4:	2908d83a 	srl	r4,r5,r4
   942b8:	10800544 	addi	r2,r2,21
   942bc:	88a2983a 	sll	r17,r17,r2
   942c0:	2444b03a 	or	r2,r4,r17
   942c4:	dfc00517 	ldw	ra,20(sp)
   942c8:	dd000417 	ldw	r20,16(sp)
   942cc:	dcc00317 	ldw	r19,12(sp)
   942d0:	dc800217 	ldw	r18,8(sp)
   942d4:	dc400117 	ldw	r17,4(sp)
   942d8:	dc000017 	ldw	r16,0(sp)
   942dc:	dec00604 	addi	sp,sp,24
   942e0:	f800283a 	ret
   942e4:	9c801636 	bltu	r19,r18,94340 <__b2d+0x100>
   942e8:	113ffd44 	addi	r4,r2,-11
   942ec:	000b883a 	mov	r5,zero
   942f0:	20001726 	beq	r4,zero,94350 <__b2d+0x110>
   942f4:	00c00ac4 	movi	r3,43
   942f8:	1885c83a 	sub	r2,r3,r2
   942fc:	8906983a 	sll	r3,r17,r4
   94300:	288cd83a 	srl	r6,r5,r2
   94304:	18cffc34 	orhi	r3,r3,16368
   94308:	1986b03a 	or	r3,r3,r6
   9430c:	9c801c2e 	bgeu	r19,r18,94380 <__b2d+0x140>
   94310:	91bfff17 	ldw	r6,-4(r18)
   94314:	3084d83a 	srl	r2,r6,r2
   94318:	2908983a 	sll	r4,r5,r4
   9431c:	1104b03a 	or	r2,r2,r4
   94320:	dfc00517 	ldw	ra,20(sp)
   94324:	dd000417 	ldw	r20,16(sp)
   94328:	dcc00317 	ldw	r19,12(sp)
   9432c:	dc800217 	ldw	r18,8(sp)
   94330:	dc400117 	ldw	r17,4(sp)
   94334:	dc000017 	ldw	r16,0(sp)
   94338:	dec00604 	addi	sp,sp,24
   9433c:	f800283a 	ret
   94340:	113ffd44 	addi	r4,r2,-11
   94344:	84bffe04 	addi	r18,r16,-8
   94348:	817ffe17 	ldw	r5,-8(r16)
   9434c:	203fe91e 	bne	r4,zero,942f4 <__b2d+0xb4>
   94350:	88cffc34 	orhi	r3,r17,16368
   94354:	2805883a 	mov	r2,r5
   94358:	dfc00517 	ldw	ra,20(sp)
   9435c:	dd000417 	ldw	r20,16(sp)
   94360:	dcc00317 	ldw	r19,12(sp)
   94364:	dc800217 	ldw	r18,8(sp)
   94368:	dc400117 	ldw	r17,4(sp)
   9436c:	dc000017 	ldw	r16,0(sp)
   94370:	dec00604 	addi	sp,sp,24
   94374:	f800283a 	ret
   94378:	0009883a 	mov	r4,zero
   9437c:	003fce06 	br	942b8 <__b2d+0x78>
   94380:	0005883a 	mov	r2,zero
   94384:	003fe406 	br	94318 <__b2d+0xd8>

00094388 <__d2b>:
   94388:	defff804 	addi	sp,sp,-32
   9438c:	dc400315 	stw	r17,12(sp)
   94390:	3023883a 	mov	r17,r6
   94394:	dc800415 	stw	r18,16(sp)
   94398:	8824907a 	slli	r18,r17,1
   9439c:	dcc00515 	stw	r19,20(sp)
   943a0:	2827883a 	mov	r19,r5
   943a4:	9024d57a 	srli	r18,r18,21
   943a8:	01400044 	movi	r5,1
   943ac:	dd000615 	stw	r20,24(sp)
   943b0:	dc000215 	stw	r16,8(sp)
   943b4:	dfc00715 	stw	ra,28(sp)
   943b8:	3829883a 	mov	r20,r7
   943bc:	009373c0 	call	9373c <_Balloc>
   943c0:	1021883a 	mov	r16,r2
   943c4:	00800434 	movhi	r2,16
   943c8:	10bfffc4 	addi	r2,r2,-1
   943cc:	88a2703a 	and	r17,r17,r2
   943d0:	90000126 	beq	r18,zero,943d8 <__d2b+0x50>
   943d4:	8c400434 	orhi	r17,r17,16
   943d8:	dc400015 	stw	r17,0(sp)
   943dc:	98002226 	beq	r19,zero,94468 <__d2b+0xe0>
   943e0:	d9000104 	addi	r4,sp,4
   943e4:	dcc00115 	stw	r19,4(sp)
   943e8:	0093a8c0 	call	93a8c <__lo0bits>
   943ec:	d8c00017 	ldw	r3,0(sp)
   943f0:	10002d1e 	bne	r2,zero,944a8 <__d2b+0x120>
   943f4:	d9000117 	ldw	r4,4(sp)
   943f8:	81000515 	stw	r4,20(r16)
   943fc:	1823003a 	cmpeq	r17,r3,zero
   94400:	01000084 	movi	r4,2
   94404:	2463c83a 	sub	r17,r4,r17
   94408:	80c00615 	stw	r3,24(r16)
   9440c:	84400415 	stw	r17,16(r16)
   94410:	90001d1e 	bne	r18,zero,94488 <__d2b+0x100>
   94414:	88c00104 	addi	r3,r17,4
   94418:	18c7883a 	add	r3,r3,r3
   9441c:	18c7883a 	add	r3,r3,r3
   94420:	80c7883a 	add	r3,r16,r3
   94424:	19000017 	ldw	r4,0(r3)
   94428:	10bef384 	addi	r2,r2,-1074
   9442c:	a0800015 	stw	r2,0(r20)
   94430:	0093a240 	call	93a24 <__hi0bits>
   94434:	8822917a 	slli	r17,r17,5
   94438:	d8c00817 	ldw	r3,32(sp)
   9443c:	8885c83a 	sub	r2,r17,r2
   94440:	18800015 	stw	r2,0(r3)
   94444:	8005883a 	mov	r2,r16
   94448:	dfc00717 	ldw	ra,28(sp)
   9444c:	dd000617 	ldw	r20,24(sp)
   94450:	dcc00517 	ldw	r19,20(sp)
   94454:	dc800417 	ldw	r18,16(sp)
   94458:	dc400317 	ldw	r17,12(sp)
   9445c:	dc000217 	ldw	r16,8(sp)
   94460:	dec00804 	addi	sp,sp,32
   94464:	f800283a 	ret
   94468:	d809883a 	mov	r4,sp
   9446c:	0093a8c0 	call	93a8c <__lo0bits>
   94470:	d8c00017 	ldw	r3,0(sp)
   94474:	04400044 	movi	r17,1
   94478:	84400415 	stw	r17,16(r16)
   9447c:	80c00515 	stw	r3,20(r16)
   94480:	10800804 	addi	r2,r2,32
   94484:	903fe326 	beq	r18,zero,94414 <__d2b+0x8c>
   94488:	00c00d44 	movi	r3,53
   9448c:	94bef344 	addi	r18,r18,-1075
   94490:	90a5883a 	add	r18,r18,r2
   94494:	1885c83a 	sub	r2,r3,r2
   94498:	d8c00817 	ldw	r3,32(sp)
   9449c:	a4800015 	stw	r18,0(r20)
   944a0:	18800015 	stw	r2,0(r3)
   944a4:	003fe706 	br	94444 <__d2b+0xbc>
   944a8:	01000804 	movi	r4,32
   944ac:	2089c83a 	sub	r4,r4,r2
   944b0:	1908983a 	sll	r4,r3,r4
   944b4:	d9400117 	ldw	r5,4(sp)
   944b8:	1886d83a 	srl	r3,r3,r2
   944bc:	2148b03a 	or	r4,r4,r5
   944c0:	81000515 	stw	r4,20(r16)
   944c4:	d8c00015 	stw	r3,0(sp)
   944c8:	003fcc06 	br	943fc <__d2b+0x74>

000944cc <__ratio>:
   944cc:	defff904 	addi	sp,sp,-28
   944d0:	dc400315 	stw	r17,12(sp)
   944d4:	2823883a 	mov	r17,r5
   944d8:	d9400104 	addi	r5,sp,4
   944dc:	dfc00615 	stw	ra,24(sp)
   944e0:	dcc00515 	stw	r19,20(sp)
   944e4:	dc800415 	stw	r18,16(sp)
   944e8:	2027883a 	mov	r19,r4
   944ec:	dc000215 	stw	r16,8(sp)
   944f0:	00942400 	call	94240 <__b2d>
   944f4:	8809883a 	mov	r4,r17
   944f8:	d80b883a 	mov	r5,sp
   944fc:	1025883a 	mov	r18,r2
   94500:	1821883a 	mov	r16,r3
   94504:	00942400 	call	94240 <__b2d>
   94508:	99400417 	ldw	r5,16(r19)
   9450c:	89000417 	ldw	r4,16(r17)
   94510:	d9800117 	ldw	r6,4(sp)
   94514:	2909c83a 	sub	r4,r5,r4
   94518:	d9400017 	ldw	r5,0(sp)
   9451c:	2008917a 	slli	r4,r4,5
   94520:	314bc83a 	sub	r5,r6,r5
   94524:	290b883a 	add	r5,r5,r4
   94528:	01400e0e 	bge	zero,r5,94564 <__ratio+0x98>
   9452c:	280a953a 	slli	r5,r5,20
   94530:	2c21883a 	add	r16,r5,r16
   94534:	9009883a 	mov	r4,r18
   94538:	800b883a 	mov	r5,r16
   9453c:	100d883a 	mov	r6,r2
   94540:	180f883a 	mov	r7,r3
   94544:	00965200 	call	96520 <__divdf3>
   94548:	dfc00617 	ldw	ra,24(sp)
   9454c:	dcc00517 	ldw	r19,20(sp)
   94550:	dc800417 	ldw	r18,16(sp)
   94554:	dc400317 	ldw	r17,12(sp)
   94558:	dc000217 	ldw	r16,8(sp)
   9455c:	dec00704 	addi	sp,sp,28
   94560:	f800283a 	ret
   94564:	280a953a 	slli	r5,r5,20
   94568:	1947c83a 	sub	r3,r3,r5
   9456c:	003ff106 	br	94534 <__ratio+0x68>

00094570 <_mprec_log10>:
   94570:	defffe04 	addi	sp,sp,-8
   94574:	dc000015 	stw	r16,0(sp)
   94578:	dfc00115 	stw	ra,4(sp)
   9457c:	008005c4 	movi	r2,23
   94580:	2021883a 	mov	r16,r4
   94584:	11000d0e 	bge	r2,r4,945bc <_mprec_log10+0x4c>
   94588:	0005883a 	mov	r2,zero
   9458c:	00cffc34 	movhi	r3,16368
   94590:	843fffc4 	addi	r16,r16,-1
   94594:	1009883a 	mov	r4,r2
   94598:	180b883a 	mov	r5,r3
   9459c:	000d883a 	mov	r6,zero
   945a0:	01d00934 	movhi	r7,16420
   945a4:	009623c0 	call	9623c <__muldf3>
   945a8:	803ff91e 	bne	r16,zero,94590 <_mprec_log10+0x20>
   945ac:	dfc00117 	ldw	ra,4(sp)
   945b0:	dc000017 	ldw	r16,0(sp)
   945b4:	dec00204 	addi	sp,sp,8
   945b8:	f800283a 	ret
   945bc:	202090fa 	slli	r16,r4,3
   945c0:	008002b4 	movhi	r2,10
   945c4:	10b59204 	addi	r2,r2,-10680
   945c8:	1421883a 	add	r16,r2,r16
   945cc:	80800017 	ldw	r2,0(r16)
   945d0:	80c00117 	ldw	r3,4(r16)
   945d4:	dfc00117 	ldw	ra,4(sp)
   945d8:	dc000017 	ldw	r16,0(sp)
   945dc:	dec00204 	addi	sp,sp,8
   945e0:	f800283a 	ret

000945e4 <__copybits>:
   945e4:	297fffc4 	addi	r5,r5,-1
   945e8:	31c00417 	ldw	r7,16(r6)
   945ec:	2811d17a 	srai	r8,r5,5
   945f0:	30800504 	addi	r2,r6,20
   945f4:	39c00144 	addi	r7,r7,5
   945f8:	42000044 	addi	r8,r8,1
   945fc:	39cf883a 	add	r7,r7,r7
   94600:	4211883a 	add	r8,r8,r8
   94604:	39cf883a 	add	r7,r7,r7
   94608:	4211883a 	add	r8,r8,r8
   9460c:	31cf883a 	add	r7,r6,r7
   94610:	2211883a 	add	r8,r4,r8
   94614:	11c00d2e 	bgeu	r2,r7,9464c <__copybits+0x68>
   94618:	2007883a 	mov	r3,r4
   9461c:	11400017 	ldw	r5,0(r2)
   94620:	18c00104 	addi	r3,r3,4
   94624:	10800104 	addi	r2,r2,4
   94628:	197fff15 	stw	r5,-4(r3)
   9462c:	11fffb36 	bltu	r2,r7,9461c <__copybits+0x38>
   94630:	3985c83a 	sub	r2,r7,r6
   94634:	10bffac4 	addi	r2,r2,-21
   94638:	1004d0ba 	srli	r2,r2,2
   9463c:	10800044 	addi	r2,r2,1
   94640:	1085883a 	add	r2,r2,r2
   94644:	1085883a 	add	r2,r2,r2
   94648:	2089883a 	add	r4,r4,r2
   9464c:	2200032e 	bgeu	r4,r8,9465c <__copybits+0x78>
   94650:	20000015 	stw	zero,0(r4)
   94654:	21000104 	addi	r4,r4,4
   94658:	223ffd36 	bltu	r4,r8,94650 <__copybits+0x6c>
   9465c:	f800283a 	ret

00094660 <__any_on>:
   94660:	21800417 	ldw	r6,16(r4)
   94664:	2805d17a 	srai	r2,r5,5
   94668:	20c00504 	addi	r3,r4,20
   9466c:	30800f0e 	bge	r6,r2,946ac <__any_on+0x4c>
   94670:	3005883a 	mov	r2,r6
   94674:	10800144 	addi	r2,r2,5
   94678:	1085883a 	add	r2,r2,r2
   9467c:	1085883a 	add	r2,r2,r2
   94680:	2089883a 	add	r4,r4,r2
   94684:	1900152e 	bgeu	r3,r4,946dc <__any_on+0x7c>
   94688:	20bfff17 	ldw	r2,-4(r4)
   9468c:	213fff04 	addi	r4,r4,-4
   94690:	1000041e 	bne	r2,zero,946a4 <__any_on+0x44>
   94694:	1900112e 	bgeu	r3,r4,946dc <__any_on+0x7c>
   94698:	213fff04 	addi	r4,r4,-4
   9469c:	20800017 	ldw	r2,0(r4)
   946a0:	103ffc26 	beq	r2,zero,94694 <__any_on+0x34>
   946a4:	00800044 	movi	r2,1
   946a8:	f800283a 	ret
   946ac:	11bff10e 	bge	r2,r6,94674 <__any_on+0x14>
   946b0:	294007cc 	andi	r5,r5,31
   946b4:	283fef26 	beq	r5,zero,94674 <__any_on+0x14>
   946b8:	11800144 	addi	r6,r2,5
   946bc:	318d883a 	add	r6,r6,r6
   946c0:	318d883a 	add	r6,r6,r6
   946c4:	218d883a 	add	r6,r4,r6
   946c8:	31800017 	ldw	r6,0(r6)
   946cc:	314ed83a 	srl	r7,r6,r5
   946d0:	394a983a 	sll	r5,r7,r5
   946d4:	29bff31e 	bne	r5,r6,946a4 <__any_on+0x44>
   946d8:	003fe606 	br	94674 <__any_on+0x14>
   946dc:	0005883a 	mov	r2,zero
   946e0:	f800283a 	ret

000946e4 <_putc_r>:
   946e4:	defffc04 	addi	sp,sp,-16
   946e8:	dc000215 	stw	r16,8(sp)
   946ec:	dfc00315 	stw	ra,12(sp)
   946f0:	2021883a 	mov	r16,r4
   946f4:	20000226 	beq	r4,zero,94700 <_putc_r+0x1c>
   946f8:	20800e17 	ldw	r2,56(r4)
   946fc:	10001d26 	beq	r2,zero,94774 <_putc_r+0x90>
   94700:	30800217 	ldw	r2,8(r6)
   94704:	10bfffc4 	addi	r2,r2,-1
   94708:	30800215 	stw	r2,8(r6)
   9470c:	10000a16 	blt	r2,zero,94738 <_putc_r+0x54>
   94710:	30800017 	ldw	r2,0(r6)
   94714:	11400005 	stb	r5,0(r2)
   94718:	30800017 	ldw	r2,0(r6)
   9471c:	10c00044 	addi	r3,r2,1
   94720:	10800003 	ldbu	r2,0(r2)
   94724:	30c00015 	stw	r3,0(r6)
   94728:	dfc00317 	ldw	ra,12(sp)
   9472c:	dc000217 	ldw	r16,8(sp)
   94730:	dec00404 	addi	sp,sp,16
   94734:	f800283a 	ret
   94738:	30c00617 	ldw	r3,24(r6)
   9473c:	10c01316 	blt	r2,r3,9478c <_putc_r+0xa8>
   94740:	30800017 	ldw	r2,0(r6)
   94744:	01000284 	movi	r4,10
   94748:	11400005 	stb	r5,0(r2)
   9474c:	30c00017 	ldw	r3,0(r6)
   94750:	19400003 	ldbu	r5,0(r3)
   94754:	29000d26 	beq	r5,r4,9478c <_putc_r+0xa8>
   94758:	18c00044 	addi	r3,r3,1
   9475c:	2805883a 	mov	r2,r5
   94760:	30c00015 	stw	r3,0(r6)
   94764:	dfc00317 	ldw	ra,12(sp)
   94768:	dc000217 	ldw	r16,8(sp)
   9476c:	dec00404 	addi	sp,sp,16
   94770:	f800283a 	ret
   94774:	d9400015 	stw	r5,0(sp)
   94778:	d9800115 	stw	r6,4(sp)
   9477c:	008d6e40 	call	8d6e4 <__sinit>
   94780:	d9800117 	ldw	r6,4(sp)
   94784:	d9400017 	ldw	r5,0(sp)
   94788:	003fdd06 	br	94700 <_putc_r+0x1c>
   9478c:	8009883a 	mov	r4,r16
   94790:	dfc00317 	ldw	ra,12(sp)
   94794:	dc000217 	ldw	r16,8(sp)
   94798:	dec00404 	addi	sp,sp,16
   9479c:	00950001 	jmpi	95000 <__swbuf_r>

000947a0 <putc>:
   947a0:	defffc04 	addi	sp,sp,-16
   947a4:	dc400115 	stw	r17,4(sp)
   947a8:	044002b4 	movhi	r17,10
   947ac:	8c7d6704 	addi	r17,r17,-2660
   947b0:	88800017 	ldw	r2,0(r17)
   947b4:	dc800215 	stw	r18,8(sp)
   947b8:	dc000015 	stw	r16,0(sp)
   947bc:	dfc00315 	stw	ra,12(sp)
   947c0:	2025883a 	mov	r18,r4
   947c4:	2821883a 	mov	r16,r5
   947c8:	10000226 	beq	r2,zero,947d4 <putc+0x34>
   947cc:	10c00e17 	ldw	r3,56(r2)
   947d0:	18002126 	beq	r3,zero,94858 <putc+0xb8>
   947d4:	80800217 	ldw	r2,8(r16)
   947d8:	10bfffc4 	addi	r2,r2,-1
   947dc:	80800215 	stw	r2,8(r16)
   947e0:	10000c16 	blt	r2,zero,94814 <putc+0x74>
   947e4:	80800017 	ldw	r2,0(r16)
   947e8:	14800005 	stb	r18,0(r2)
   947ec:	80800017 	ldw	r2,0(r16)
   947f0:	10c00044 	addi	r3,r2,1
   947f4:	10800003 	ldbu	r2,0(r2)
   947f8:	80c00015 	stw	r3,0(r16)
   947fc:	dfc00317 	ldw	ra,12(sp)
   94800:	dc800217 	ldw	r18,8(sp)
   94804:	dc400117 	ldw	r17,4(sp)
   94808:	dc000017 	ldw	r16,0(sp)
   9480c:	dec00404 	addi	sp,sp,16
   94810:	f800283a 	ret
   94814:	80c00617 	ldw	r3,24(r16)
   94818:	10c01216 	blt	r2,r3,94864 <putc+0xc4>
   9481c:	80800017 	ldw	r2,0(r16)
   94820:	01000284 	movi	r4,10
   94824:	14800005 	stb	r18,0(r2)
   94828:	80c00017 	ldw	r3,0(r16)
   9482c:	19400003 	ldbu	r5,0(r3)
   94830:	29001526 	beq	r5,r4,94888 <putc+0xe8>
   94834:	18c00044 	addi	r3,r3,1
   94838:	2805883a 	mov	r2,r5
   9483c:	80c00015 	stw	r3,0(r16)
   94840:	dfc00317 	ldw	ra,12(sp)
   94844:	dc800217 	ldw	r18,8(sp)
   94848:	dc400117 	ldw	r17,4(sp)
   9484c:	dc000017 	ldw	r16,0(sp)
   94850:	dec00404 	addi	sp,sp,16
   94854:	f800283a 	ret
   94858:	1009883a 	mov	r4,r2
   9485c:	008d6e40 	call	8d6e4 <__sinit>
   94860:	003fdc06 	br	947d4 <putc+0x34>
   94864:	89000017 	ldw	r4,0(r17)
   94868:	900b883a 	mov	r5,r18
   9486c:	800d883a 	mov	r6,r16
   94870:	dfc00317 	ldw	ra,12(sp)
   94874:	dc800217 	ldw	r18,8(sp)
   94878:	dc400117 	ldw	r17,4(sp)
   9487c:	dc000017 	ldw	r16,0(sp)
   94880:	dec00404 	addi	sp,sp,16
   94884:	00950001 	jmpi	95000 <__swbuf_r>
   94888:	89000017 	ldw	r4,0(r17)
   9488c:	003ff706 	br	9486c <putc+0xcc>

00094890 <_read_r>:
   94890:	defffd04 	addi	sp,sp,-12
   94894:	dc400115 	stw	r17,4(sp)
   94898:	dc000015 	stw	r16,0(sp)
   9489c:	2023883a 	mov	r17,r4
   948a0:	040002b4 	movhi	r16,10
   948a4:	84051604 	addi	r16,r16,5208
   948a8:	2809883a 	mov	r4,r5
   948ac:	300b883a 	mov	r5,r6
   948b0:	380d883a 	mov	r6,r7
   948b4:	dfc00215 	stw	ra,8(sp)
   948b8:	80000015 	stw	zero,0(r16)
   948bc:	00976c00 	call	976c0 <read>
   948c0:	00ffffc4 	movi	r3,-1
   948c4:	10c00526 	beq	r2,r3,948dc <_read_r+0x4c>
   948c8:	dfc00217 	ldw	ra,8(sp)
   948cc:	dc400117 	ldw	r17,4(sp)
   948d0:	dc000017 	ldw	r16,0(sp)
   948d4:	dec00304 	addi	sp,sp,12
   948d8:	f800283a 	ret
   948dc:	80c00017 	ldw	r3,0(r16)
   948e0:	183ff926 	beq	r3,zero,948c8 <_read_r+0x38>
   948e4:	88c00015 	stw	r3,0(r17)
   948e8:	dfc00217 	ldw	ra,8(sp)
   948ec:	dc400117 	ldw	r17,4(sp)
   948f0:	dc000017 	ldw	r16,0(sp)
   948f4:	dec00304 	addi	sp,sp,12
   948f8:	f800283a 	ret

000948fc <_realloc_r>:
   948fc:	defff504 	addi	sp,sp,-44
   94900:	dd400615 	stw	r21,24(sp)
   94904:	dc800315 	stw	r18,12(sp)
   94908:	dc000115 	stw	r16,4(sp)
   9490c:	dfc00a15 	stw	ra,40(sp)
   94910:	df000915 	stw	fp,36(sp)
   94914:	ddc00815 	stw	r23,32(sp)
   94918:	dd800715 	stw	r22,28(sp)
   9491c:	dd000515 	stw	r20,20(sp)
   94920:	dcc00415 	stw	r19,16(sp)
   94924:	dc400215 	stw	r17,8(sp)
   94928:	2821883a 	mov	r16,r5
   9492c:	202b883a 	mov	r21,r4
   94930:	3025883a 	mov	r18,r6
   94934:	28009626 	beq	r5,zero,94b90 <_realloc_r+0x294>
   94938:	009762c0 	call	9762c <__malloc_lock>
   9493c:	80bfff17 	ldw	r2,-4(r16)
   94940:	04ffff04 	movi	r19,-4
   94944:	90c002c4 	addi	r3,r18,11
   94948:	01000584 	movi	r4,22
   9494c:	85bffe04 	addi	r22,r16,-8
   94950:	14e6703a 	and	r19,r2,r19
   94954:	20c0372e 	bgeu	r4,r3,94a34 <_realloc_r+0x138>
   94958:	047ffe04 	movi	r17,-8
   9495c:	1c62703a 	and	r17,r3,r17
   94960:	8807883a 	mov	r3,r17
   94964:	88005a16 	blt	r17,zero,94ad0 <_realloc_r+0x1d4>
   94968:	8c805936 	bltu	r17,r18,94ad0 <_realloc_r+0x1d4>
   9496c:	98c0340e 	bge	r19,r3,94a40 <_realloc_r+0x144>
   94970:	070002b4 	movhi	fp,10
   94974:	e7377c04 	addi	fp,fp,-8720
   94978:	e1400217 	ldw	r5,8(fp)
   9497c:	b4c9883a 	add	r4,r22,r19
   94980:	29009026 	beq	r5,r4,94bc4 <_realloc_r+0x2c8>
   94984:	21800117 	ldw	r6,4(r4)
   94988:	01ffff84 	movi	r7,-2
   9498c:	31ce703a 	and	r7,r6,r7
   94990:	21cf883a 	add	r7,r4,r7
   94994:	39c00117 	ldw	r7,4(r7)
   94998:	39c0004c 	andi	r7,r7,1
   9499c:	38004326 	beq	r7,zero,94aac <_realloc_r+0x1b0>
   949a0:	000d883a 	mov	r6,zero
   949a4:	0009883a 	mov	r4,zero
   949a8:	1080004c 	andi	r2,r2,1
   949ac:	10005a1e 	bne	r2,zero,94b18 <_realloc_r+0x21c>
   949b0:	85fffe17 	ldw	r23,-8(r16)
   949b4:	00bfff04 	movi	r2,-4
   949b8:	b5efc83a 	sub	r23,r22,r23
   949bc:	b9c00117 	ldw	r7,4(r23)
   949c0:	388e703a 	and	r7,r7,r2
   949c4:	3ccf883a 	add	r7,r7,r19
   949c8:	20005226 	beq	r4,zero,94b14 <_realloc_r+0x218>
   949cc:	31e9883a 	add	r20,r6,r7
   949d0:	2140c726 	beq	r4,r5,94cf0 <_realloc_r+0x3f4>
   949d4:	a0c04f16 	blt	r20,r3,94b14 <_realloc_r+0x218>
   949d8:	20800317 	ldw	r2,12(r4)
   949dc:	20c00217 	ldw	r3,8(r4)
   949e0:	99bfff04 	addi	r6,r19,-4
   949e4:	01000904 	movi	r4,36
   949e8:	18800315 	stw	r2,12(r3)
   949ec:	10c00215 	stw	r3,8(r2)
   949f0:	b8c00217 	ldw	r3,8(r23)
   949f4:	b8800317 	ldw	r2,12(r23)
   949f8:	bc800204 	addi	r18,r23,8
   949fc:	18800315 	stw	r2,12(r3)
   94a00:	10c00215 	stw	r3,8(r2)
   94a04:	2180ed36 	bltu	r4,r6,94dbc <_realloc_r+0x4c0>
   94a08:	008004c4 	movi	r2,19
   94a0c:	11809b2e 	bgeu	r2,r6,94c7c <_realloc_r+0x380>
   94a10:	80800017 	ldw	r2,0(r16)
   94a14:	b8800215 	stw	r2,8(r23)
   94a18:	80800117 	ldw	r2,4(r16)
   94a1c:	b8800315 	stw	r2,12(r23)
   94a20:	008006c4 	movi	r2,27
   94a24:	1180f936 	bltu	r2,r6,94e0c <_realloc_r+0x510>
   94a28:	b8800404 	addi	r2,r23,16
   94a2c:	80c00204 	addi	r3,r16,8
   94a30:	00009406 	br	94c84 <_realloc_r+0x388>
   94a34:	00c00404 	movi	r3,16
   94a38:	1823883a 	mov	r17,r3
   94a3c:	003fca06 	br	94968 <_realloc_r+0x6c>
   94a40:	9829883a 	mov	r20,r19
   94a44:	a447c83a 	sub	r3,r20,r17
   94a48:	010003c4 	movi	r4,15
   94a4c:	1080004c 	andi	r2,r2,1
   94a50:	20c02336 	bltu	r4,r3,94ae0 <_realloc_r+0x1e4>
   94a54:	1504b03a 	or	r2,r2,r20
   94a58:	b0800115 	stw	r2,4(r22)
   94a5c:	b52d883a 	add	r22,r22,r20
   94a60:	b0800117 	ldw	r2,4(r22)
   94a64:	10800054 	ori	r2,r2,1
   94a68:	b0800115 	stw	r2,4(r22)
   94a6c:	a809883a 	mov	r4,r21
   94a70:	009764c0 	call	9764c <__malloc_unlock>
   94a74:	8025883a 	mov	r18,r16
   94a78:	9005883a 	mov	r2,r18
   94a7c:	dfc00a17 	ldw	ra,40(sp)
   94a80:	df000917 	ldw	fp,36(sp)
   94a84:	ddc00817 	ldw	r23,32(sp)
   94a88:	dd800717 	ldw	r22,28(sp)
   94a8c:	dd400617 	ldw	r21,24(sp)
   94a90:	dd000517 	ldw	r20,20(sp)
   94a94:	dcc00417 	ldw	r19,16(sp)
   94a98:	dc800317 	ldw	r18,12(sp)
   94a9c:	dc400217 	ldw	r17,8(sp)
   94aa0:	dc000117 	ldw	r16,4(sp)
   94aa4:	dec00b04 	addi	sp,sp,44
   94aa8:	f800283a 	ret
   94aac:	01ffff04 	movi	r7,-4
   94ab0:	31cc703a 	and	r6,r6,r7
   94ab4:	34e9883a 	add	r20,r6,r19
   94ab8:	a0ffbb16 	blt	r20,r3,949a8 <_realloc_r+0xac>
   94abc:	20c00317 	ldw	r3,12(r4)
   94ac0:	21000217 	ldw	r4,8(r4)
   94ac4:	20c00315 	stw	r3,12(r4)
   94ac8:	19000215 	stw	r4,8(r3)
   94acc:	003fdd06 	br	94a44 <_realloc_r+0x148>
   94ad0:	00800304 	movi	r2,12
   94ad4:	a8800015 	stw	r2,0(r21)
   94ad8:	0025883a 	mov	r18,zero
   94adc:	003fe606 	br	94a78 <_realloc_r+0x17c>
   94ae0:	1444b03a 	or	r2,r2,r17
   94ae4:	b0800115 	stw	r2,4(r22)
   94ae8:	b44b883a 	add	r5,r22,r17
   94aec:	18800054 	ori	r2,r3,1
   94af0:	28800115 	stw	r2,4(r5)
   94af4:	28c7883a 	add	r3,r5,r3
   94af8:	18800117 	ldw	r2,4(r3)
   94afc:	a809883a 	mov	r4,r21
   94b00:	29400204 	addi	r5,r5,8
   94b04:	10800054 	ori	r2,r2,1
   94b08:	18800115 	stw	r2,4(r3)
   94b0c:	0092b700 	call	92b70 <_free_r>
   94b10:	003fd606 	br	94a6c <_realloc_r+0x170>
   94b14:	38c0330e 	bge	r7,r3,94be4 <_realloc_r+0x2e8>
   94b18:	900b883a 	mov	r5,r18
   94b1c:	a809883a 	mov	r4,r21
   94b20:	008da8c0 	call	8da8c <_malloc_r>
   94b24:	1025883a 	mov	r18,r2
   94b28:	10001626 	beq	r2,zero,94b84 <_realloc_r+0x288>
   94b2c:	80bfff17 	ldw	r2,-4(r16)
   94b30:	00ffff84 	movi	r3,-2
   94b34:	913ffe04 	addi	r4,r18,-8
   94b38:	10c6703a 	and	r3,r2,r3
   94b3c:	b0c7883a 	add	r3,r22,r3
   94b40:	20c09926 	beq	r4,r3,94da8 <_realloc_r+0x4ac>
   94b44:	99bfff04 	addi	r6,r19,-4
   94b48:	00800904 	movi	r2,36
   94b4c:	11806436 	bltu	r2,r6,94ce0 <_realloc_r+0x3e4>
   94b50:	00c004c4 	movi	r3,19
   94b54:	19804036 	bltu	r3,r6,94c58 <_realloc_r+0x35c>
   94b58:	9005883a 	mov	r2,r18
   94b5c:	8007883a 	mov	r3,r16
   94b60:	19000017 	ldw	r4,0(r3)
   94b64:	11000015 	stw	r4,0(r2)
   94b68:	19000117 	ldw	r4,4(r3)
   94b6c:	11000115 	stw	r4,4(r2)
   94b70:	18c00217 	ldw	r3,8(r3)
   94b74:	10c00215 	stw	r3,8(r2)
   94b78:	a809883a 	mov	r4,r21
   94b7c:	800b883a 	mov	r5,r16
   94b80:	0092b700 	call	92b70 <_free_r>
   94b84:	a809883a 	mov	r4,r21
   94b88:	009764c0 	call	9764c <__malloc_unlock>
   94b8c:	003fba06 	br	94a78 <_realloc_r+0x17c>
   94b90:	300b883a 	mov	r5,r6
   94b94:	dfc00a17 	ldw	ra,40(sp)
   94b98:	df000917 	ldw	fp,36(sp)
   94b9c:	ddc00817 	ldw	r23,32(sp)
   94ba0:	dd800717 	ldw	r22,28(sp)
   94ba4:	dd400617 	ldw	r21,24(sp)
   94ba8:	dd000517 	ldw	r20,20(sp)
   94bac:	dcc00417 	ldw	r19,16(sp)
   94bb0:	dc800317 	ldw	r18,12(sp)
   94bb4:	dc400217 	ldw	r17,8(sp)
   94bb8:	dc000117 	ldw	r16,4(sp)
   94bbc:	dec00b04 	addi	sp,sp,44
   94bc0:	008da8c1 	jmpi	8da8c <_malloc_r>
   94bc4:	29800117 	ldw	r6,4(r5)
   94bc8:	013fff04 	movi	r4,-4
   94bcc:	89c00404 	addi	r7,r17,16
   94bd0:	310c703a 	and	r6,r6,r4
   94bd4:	34c9883a 	add	r4,r6,r19
   94bd8:	21c0340e 	bge	r4,r7,94cac <_realloc_r+0x3b0>
   94bdc:	2809883a 	mov	r4,r5
   94be0:	003f7106 	br	949a8 <_realloc_r+0xac>
   94be4:	b8800317 	ldw	r2,12(r23)
   94be8:	b8c00217 	ldw	r3,8(r23)
   94bec:	99bfff04 	addi	r6,r19,-4
   94bf0:	01000904 	movi	r4,36
   94bf4:	18800315 	stw	r2,12(r3)
   94bf8:	10c00215 	stw	r3,8(r2)
   94bfc:	bc800204 	addi	r18,r23,8
   94c00:	21807836 	bltu	r4,r6,94de4 <_realloc_r+0x4e8>
   94c04:	008004c4 	movi	r2,19
   94c08:	1180732e 	bgeu	r2,r6,94dd8 <_realloc_r+0x4dc>
   94c0c:	80800017 	ldw	r2,0(r16)
   94c10:	b8800215 	stw	r2,8(r23)
   94c14:	80800117 	ldw	r2,4(r16)
   94c18:	b8800315 	stw	r2,12(r23)
   94c1c:	008006c4 	movi	r2,27
   94c20:	11808936 	bltu	r2,r6,94e48 <_realloc_r+0x54c>
   94c24:	b8800404 	addi	r2,r23,16
   94c28:	80c00204 	addi	r3,r16,8
   94c2c:	19000017 	ldw	r4,0(r3)
   94c30:	9021883a 	mov	r16,r18
   94c34:	3829883a 	mov	r20,r7
   94c38:	11000015 	stw	r4,0(r2)
   94c3c:	19000117 	ldw	r4,4(r3)
   94c40:	b82d883a 	mov	r22,r23
   94c44:	11000115 	stw	r4,4(r2)
   94c48:	18c00217 	ldw	r3,8(r3)
   94c4c:	10c00215 	stw	r3,8(r2)
   94c50:	b8800117 	ldw	r2,4(r23)
   94c54:	003f7b06 	br	94a44 <_realloc_r+0x148>
   94c58:	80c00017 	ldw	r3,0(r16)
   94c5c:	90c00015 	stw	r3,0(r18)
   94c60:	80c00117 	ldw	r3,4(r16)
   94c64:	90c00115 	stw	r3,4(r18)
   94c68:	00c006c4 	movi	r3,27
   94c6c:	19804636 	bltu	r3,r6,94d88 <_realloc_r+0x48c>
   94c70:	90800204 	addi	r2,r18,8
   94c74:	80c00204 	addi	r3,r16,8
   94c78:	003fb906 	br	94b60 <_realloc_r+0x264>
   94c7c:	9005883a 	mov	r2,r18
   94c80:	8007883a 	mov	r3,r16
   94c84:	19000017 	ldw	r4,0(r3)
   94c88:	9021883a 	mov	r16,r18
   94c8c:	b82d883a 	mov	r22,r23
   94c90:	11000015 	stw	r4,0(r2)
   94c94:	19000117 	ldw	r4,4(r3)
   94c98:	11000115 	stw	r4,4(r2)
   94c9c:	18c00217 	ldw	r3,8(r3)
   94ca0:	10c00215 	stw	r3,8(r2)
   94ca4:	b8800117 	ldw	r2,4(r23)
   94ca8:	003f6606 	br	94a44 <_realloc_r+0x148>
   94cac:	2445c83a 	sub	r2,r4,r17
   94cb0:	b46d883a 	add	r22,r22,r17
   94cb4:	10800054 	ori	r2,r2,1
   94cb8:	b0800115 	stw	r2,4(r22)
   94cbc:	80bfff17 	ldw	r2,-4(r16)
   94cc0:	a809883a 	mov	r4,r21
   94cc4:	e5800215 	stw	r22,8(fp)
   94cc8:	1080004c 	andi	r2,r2,1
   94ccc:	88a2b03a 	or	r17,r17,r2
   94cd0:	847fff15 	stw	r17,-4(r16)
   94cd4:	009764c0 	call	9764c <__malloc_unlock>
   94cd8:	8025883a 	mov	r18,r16
   94cdc:	003f6606 	br	94a78 <_realloc_r+0x17c>
   94ce0:	9009883a 	mov	r4,r18
   94ce4:	800b883a 	mov	r5,r16
   94ce8:	00936140 	call	93614 <memmove>
   94cec:	003fa206 	br	94b78 <_realloc_r+0x27c>
   94cf0:	88800404 	addi	r2,r17,16
   94cf4:	a0bf8716 	blt	r20,r2,94b14 <_realloc_r+0x218>
   94cf8:	b8800317 	ldw	r2,12(r23)
   94cfc:	b8c00217 	ldw	r3,8(r23)
   94d00:	99bfff04 	addi	r6,r19,-4
   94d04:	01000904 	movi	r4,36
   94d08:	18800315 	stw	r2,12(r3)
   94d0c:	10c00215 	stw	r3,8(r2)
   94d10:	bc800204 	addi	r18,r23,8
   94d14:	21806536 	bltu	r4,r6,94eac <_realloc_r+0x5b0>
   94d18:	008004c4 	movi	r2,19
   94d1c:	1180592e 	bgeu	r2,r6,94e84 <_realloc_r+0x588>
   94d20:	80800017 	ldw	r2,0(r16)
   94d24:	b8800215 	stw	r2,8(r23)
   94d28:	80800117 	ldw	r2,4(r16)
   94d2c:	b8800315 	stw	r2,12(r23)
   94d30:	008006c4 	movi	r2,27
   94d34:	11806136 	bltu	r2,r6,94ebc <_realloc_r+0x5c0>
   94d38:	b8800404 	addi	r2,r23,16
   94d3c:	80c00204 	addi	r3,r16,8
   94d40:	19000017 	ldw	r4,0(r3)
   94d44:	11000015 	stw	r4,0(r2)
   94d48:	19000117 	ldw	r4,4(r3)
   94d4c:	11000115 	stw	r4,4(r2)
   94d50:	18c00217 	ldw	r3,8(r3)
   94d54:	10c00215 	stw	r3,8(r2)
   94d58:	a447c83a 	sub	r3,r20,r17
   94d5c:	bc45883a 	add	r2,r23,r17
   94d60:	18c00054 	ori	r3,r3,1
   94d64:	10c00115 	stw	r3,4(r2)
   94d68:	b8c00117 	ldw	r3,4(r23)
   94d6c:	e0800215 	stw	r2,8(fp)
   94d70:	a809883a 	mov	r4,r21
   94d74:	1880004c 	andi	r2,r3,1
   94d78:	88a2b03a 	or	r17,r17,r2
   94d7c:	bc400115 	stw	r17,4(r23)
   94d80:	009764c0 	call	9764c <__malloc_unlock>
   94d84:	003f3c06 	br	94a78 <_realloc_r+0x17c>
   94d88:	80c00217 	ldw	r3,8(r16)
   94d8c:	90c00215 	stw	r3,8(r18)
   94d90:	80c00317 	ldw	r3,12(r16)
   94d94:	90c00315 	stw	r3,12(r18)
   94d98:	30802426 	beq	r6,r2,94e2c <_realloc_r+0x530>
   94d9c:	90800404 	addi	r2,r18,16
   94da0:	80c00404 	addi	r3,r16,16
   94da4:	003f6e06 	br	94b60 <_realloc_r+0x264>
   94da8:	953fff17 	ldw	r20,-4(r18)
   94dac:	00ffff04 	movi	r3,-4
   94db0:	a0e8703a 	and	r20,r20,r3
   94db4:	a4e9883a 	add	r20,r20,r19
   94db8:	003f2206 	br	94a44 <_realloc_r+0x148>
   94dbc:	800b883a 	mov	r5,r16
   94dc0:	9009883a 	mov	r4,r18
   94dc4:	00936140 	call	93614 <memmove>
   94dc8:	9021883a 	mov	r16,r18
   94dcc:	b8800117 	ldw	r2,4(r23)
   94dd0:	b82d883a 	mov	r22,r23
   94dd4:	003f1b06 	br	94a44 <_realloc_r+0x148>
   94dd8:	9005883a 	mov	r2,r18
   94ddc:	8007883a 	mov	r3,r16
   94de0:	003f9206 	br	94c2c <_realloc_r+0x330>
   94de4:	800b883a 	mov	r5,r16
   94de8:	9009883a 	mov	r4,r18
   94dec:	d9c00015 	stw	r7,0(sp)
   94df0:	00936140 	call	93614 <memmove>
   94df4:	d9c00017 	ldw	r7,0(sp)
   94df8:	9021883a 	mov	r16,r18
   94dfc:	b8800117 	ldw	r2,4(r23)
   94e00:	3829883a 	mov	r20,r7
   94e04:	b82d883a 	mov	r22,r23
   94e08:	003f0e06 	br	94a44 <_realloc_r+0x148>
   94e0c:	80800217 	ldw	r2,8(r16)
   94e10:	b8800415 	stw	r2,16(r23)
   94e14:	80800317 	ldw	r2,12(r16)
   94e18:	b8800515 	stw	r2,20(r23)
   94e1c:	31001226 	beq	r6,r4,94e68 <_realloc_r+0x56c>
   94e20:	b8800604 	addi	r2,r23,24
   94e24:	80c00404 	addi	r3,r16,16
   94e28:	003f9606 	br	94c84 <_realloc_r+0x388>
   94e2c:	81000417 	ldw	r4,16(r16)
   94e30:	90800604 	addi	r2,r18,24
   94e34:	80c00604 	addi	r3,r16,24
   94e38:	91000415 	stw	r4,16(r18)
   94e3c:	81000517 	ldw	r4,20(r16)
   94e40:	91000515 	stw	r4,20(r18)
   94e44:	003f4606 	br	94b60 <_realloc_r+0x264>
   94e48:	80800217 	ldw	r2,8(r16)
   94e4c:	b8800415 	stw	r2,16(r23)
   94e50:	80800317 	ldw	r2,12(r16)
   94e54:	b8800515 	stw	r2,20(r23)
   94e58:	31000d26 	beq	r6,r4,94e90 <_realloc_r+0x594>
   94e5c:	b8800604 	addi	r2,r23,24
   94e60:	80c00404 	addi	r3,r16,16
   94e64:	003f7106 	br	94c2c <_realloc_r+0x330>
   94e68:	81000417 	ldw	r4,16(r16)
   94e6c:	b8800804 	addi	r2,r23,32
   94e70:	80c00604 	addi	r3,r16,24
   94e74:	b9000615 	stw	r4,24(r23)
   94e78:	81000517 	ldw	r4,20(r16)
   94e7c:	b9000715 	stw	r4,28(r23)
   94e80:	003f8006 	br	94c84 <_realloc_r+0x388>
   94e84:	9005883a 	mov	r2,r18
   94e88:	8007883a 	mov	r3,r16
   94e8c:	003fac06 	br	94d40 <_realloc_r+0x444>
   94e90:	81000417 	ldw	r4,16(r16)
   94e94:	b8800804 	addi	r2,r23,32
   94e98:	80c00604 	addi	r3,r16,24
   94e9c:	b9000615 	stw	r4,24(r23)
   94ea0:	81000517 	ldw	r4,20(r16)
   94ea4:	b9000715 	stw	r4,28(r23)
   94ea8:	003f6006 	br	94c2c <_realloc_r+0x330>
   94eac:	9009883a 	mov	r4,r18
   94eb0:	800b883a 	mov	r5,r16
   94eb4:	00936140 	call	93614 <memmove>
   94eb8:	003fa706 	br	94d58 <_realloc_r+0x45c>
   94ebc:	80800217 	ldw	r2,8(r16)
   94ec0:	b8800415 	stw	r2,16(r23)
   94ec4:	80800317 	ldw	r2,12(r16)
   94ec8:	b8800515 	stw	r2,20(r23)
   94ecc:	31000326 	beq	r6,r4,94edc <_realloc_r+0x5e0>
   94ed0:	b8800604 	addi	r2,r23,24
   94ed4:	80c00404 	addi	r3,r16,16
   94ed8:	003f9906 	br	94d40 <_realloc_r+0x444>
   94edc:	81000417 	ldw	r4,16(r16)
   94ee0:	b8800804 	addi	r2,r23,32
   94ee4:	80c00604 	addi	r3,r16,24
   94ee8:	b9000615 	stw	r4,24(r23)
   94eec:	81000517 	ldw	r4,20(r16)
   94ef0:	b9000715 	stw	r4,28(r23)
   94ef4:	003f9206 	br	94d40 <_realloc_r+0x444>

00094ef8 <__isinfd>:
   94ef8:	0105c83a 	sub	r2,zero,r4
   94efc:	1108b03a 	or	r4,r2,r4
   94f00:	2004d7fa 	srli	r2,r4,31
   94f04:	00e00034 	movhi	r3,32768
   94f08:	18ffffc4 	addi	r3,r3,-1
   94f0c:	28ca703a 	and	r5,r5,r3
   94f10:	1144b03a 	or	r2,r2,r5
   94f14:	00dffc34 	movhi	r3,32752
   94f18:	1885c83a 	sub	r2,r3,r2
   94f1c:	0087c83a 	sub	r3,zero,r2
   94f20:	1884b03a 	or	r2,r3,r2
   94f24:	1005d7fa 	srai	r2,r2,31
   94f28:	10800044 	addi	r2,r2,1
   94f2c:	f800283a 	ret

00094f30 <__isnand>:
   94f30:	0105c83a 	sub	r2,zero,r4
   94f34:	1108b03a 	or	r4,r2,r4
   94f38:	2004d7fa 	srli	r2,r4,31
   94f3c:	00e00034 	movhi	r3,32768
   94f40:	18ffffc4 	addi	r3,r3,-1
   94f44:	28ca703a 	and	r5,r5,r3
   94f48:	1144b03a 	or	r2,r2,r5
   94f4c:	00dffc34 	movhi	r3,32752
   94f50:	1885c83a 	sub	r2,r3,r2
   94f54:	1004d7fa 	srli	r2,r2,31
   94f58:	f800283a 	ret

00094f5c <strcmp>:
   94f5c:	2904b03a 	or	r2,r5,r4
   94f60:	108000cc 	andi	r2,r2,3
   94f64:	1000171e 	bne	r2,zero,94fc4 <strcmp+0x68>
   94f68:	20800017 	ldw	r2,0(r4)
   94f6c:	28c00017 	ldw	r3,0(r5)
   94f70:	10c0141e 	bne	r2,r3,94fc4 <strcmp+0x68>
   94f74:	027fbff4 	movhi	r9,65279
   94f78:	4a7fbfc4 	addi	r9,r9,-257
   94f7c:	1247883a 	add	r3,r2,r9
   94f80:	0084303a 	nor	r2,zero,r2
   94f84:	1884703a 	and	r2,r3,r2
   94f88:	02202074 	movhi	r8,32897
   94f8c:	42202004 	addi	r8,r8,-32640
   94f90:	1204703a 	and	r2,r2,r8
   94f94:	10000226 	beq	r2,zero,94fa0 <strcmp+0x44>
   94f98:	00001706 	br	94ff8 <strcmp+0x9c>
   94f9c:	3000161e 	bne	r6,zero,94ff8 <strcmp+0x9c>
   94fa0:	21000104 	addi	r4,r4,4
   94fa4:	20800017 	ldw	r2,0(r4)
   94fa8:	29400104 	addi	r5,r5,4
   94fac:	28c00017 	ldw	r3,0(r5)
   94fb0:	124f883a 	add	r7,r2,r9
   94fb4:	008c303a 	nor	r6,zero,r2
   94fb8:	398c703a 	and	r6,r7,r6
   94fbc:	320c703a 	and	r6,r6,r8
   94fc0:	10fff626 	beq	r2,r3,94f9c <strcmp+0x40>
   94fc4:	20800007 	ldb	r2,0(r4)
   94fc8:	1000051e 	bne	r2,zero,94fe0 <strcmp+0x84>
   94fcc:	00000606 	br	94fe8 <strcmp+0x8c>
   94fd0:	21000044 	addi	r4,r4,1
   94fd4:	20800007 	ldb	r2,0(r4)
   94fd8:	29400044 	addi	r5,r5,1
   94fdc:	10000226 	beq	r2,zero,94fe8 <strcmp+0x8c>
   94fe0:	28c00007 	ldb	r3,0(r5)
   94fe4:	10fffa26 	beq	r2,r3,94fd0 <strcmp+0x74>
   94fe8:	20c00003 	ldbu	r3,0(r4)
   94fec:	28800003 	ldbu	r2,0(r5)
   94ff0:	1885c83a 	sub	r2,r3,r2
   94ff4:	f800283a 	ret
   94ff8:	0005883a 	mov	r2,zero
   94ffc:	f800283a 	ret

00095000 <__swbuf_r>:
   95000:	defffc04 	addi	sp,sp,-16
   95004:	dc800215 	stw	r18,8(sp)
   95008:	dc400115 	stw	r17,4(sp)
   9500c:	dc000015 	stw	r16,0(sp)
   95010:	dfc00315 	stw	ra,12(sp)
   95014:	2023883a 	mov	r17,r4
   95018:	2825883a 	mov	r18,r5
   9501c:	3021883a 	mov	r16,r6
   95020:	20000226 	beq	r4,zero,9502c <__swbuf_r+0x2c>
   95024:	20800e17 	ldw	r2,56(r4)
   95028:	10003b26 	beq	r2,zero,95118 <__swbuf_r+0x118>
   9502c:	8080030b 	ldhu	r2,12(r16)
   95030:	80c00617 	ldw	r3,24(r16)
   95034:	1080020c 	andi	r2,r2,8
   95038:	10bfffcc 	andi	r2,r2,65535
   9503c:	10a0001c 	xori	r2,r2,32768
   95040:	80c00215 	stw	r3,8(r16)
   95044:	10a00004 	addi	r2,r2,-32768
   95048:	10002226 	beq	r2,zero,950d4 <__swbuf_r+0xd4>
   9504c:	80800417 	ldw	r2,16(r16)
   95050:	10002026 	beq	r2,zero,950d4 <__swbuf_r+0xd4>
   95054:	80c00017 	ldw	r3,0(r16)
   95058:	81000517 	ldw	r4,20(r16)
   9505c:	94803fcc 	andi	r18,r18,255
   95060:	1885c83a 	sub	r2,r3,r2
   95064:	1100250e 	bge	r2,r4,950fc <__swbuf_r+0xfc>
   95068:	10800044 	addi	r2,r2,1
   9506c:	81400217 	ldw	r5,8(r16)
   95070:	19000044 	addi	r4,r3,1
   95074:	297fffc4 	addi	r5,r5,-1
   95078:	81400215 	stw	r5,8(r16)
   9507c:	1c800005 	stb	r18,0(r3)
   95080:	80c00517 	ldw	r3,20(r16)
   95084:	81000015 	stw	r4,0(r16)
   95088:	18800c26 	beq	r3,r2,950bc <__swbuf_r+0xbc>
   9508c:	8080030b 	ldhu	r2,12(r16)
   95090:	1080004c 	andi	r2,r2,1
   95094:	10000226 	beq	r2,zero,950a0 <__swbuf_r+0xa0>
   95098:	00800284 	movi	r2,10
   9509c:	90800726 	beq	r18,r2,950bc <__swbuf_r+0xbc>
   950a0:	9005883a 	mov	r2,r18
   950a4:	dfc00317 	ldw	ra,12(sp)
   950a8:	dc800217 	ldw	r18,8(sp)
   950ac:	dc400117 	ldw	r17,4(sp)
   950b0:	dc000017 	ldw	r16,0(sp)
   950b4:	dec00404 	addi	sp,sp,16
   950b8:	f800283a 	ret
   950bc:	8809883a 	mov	r4,r17
   950c0:	800b883a 	mov	r5,r16
   950c4:	009281c0 	call	9281c <_fflush_r>
   950c8:	103ff526 	beq	r2,zero,950a0 <__swbuf_r+0xa0>
   950cc:	04bfffc4 	movi	r18,-1
   950d0:	003ff306 	br	950a0 <__swbuf_r+0xa0>
   950d4:	8809883a 	mov	r4,r17
   950d8:	800b883a 	mov	r5,r16
   950dc:	0090cd00 	call	90cd0 <__swsetup_r>
   950e0:	10000f1e 	bne	r2,zero,95120 <__swbuf_r+0x120>
   950e4:	80800417 	ldw	r2,16(r16)
   950e8:	80c00017 	ldw	r3,0(r16)
   950ec:	81000517 	ldw	r4,20(r16)
   950f0:	94803fcc 	andi	r18,r18,255
   950f4:	1885c83a 	sub	r2,r3,r2
   950f8:	113fdb16 	blt	r2,r4,95068 <__swbuf_r+0x68>
   950fc:	8809883a 	mov	r4,r17
   95100:	800b883a 	mov	r5,r16
   95104:	009281c0 	call	9281c <_fflush_r>
   95108:	103ff01e 	bne	r2,zero,950cc <__swbuf_r+0xcc>
   9510c:	80c00017 	ldw	r3,0(r16)
   95110:	00800044 	movi	r2,1
   95114:	003fd506 	br	9506c <__swbuf_r+0x6c>
   95118:	008d6e40 	call	8d6e4 <__sinit>
   9511c:	003fc306 	br	9502c <__swbuf_r+0x2c>
   95120:	8080030b 	ldhu	r2,12(r16)
   95124:	04bfffc4 	movi	r18,-1
   95128:	10801014 	ori	r2,r2,64
   9512c:	8080030d 	sth	r2,12(r16)
   95130:	00800244 	movi	r2,9
   95134:	88800015 	stw	r2,0(r17)
   95138:	003fd906 	br	950a0 <__swbuf_r+0xa0>

0009513c <__swbuf>:
   9513c:	00c002b4 	movhi	r3,10
   95140:	18fd6704 	addi	r3,r3,-2660
   95144:	2005883a 	mov	r2,r4
   95148:	19000017 	ldw	r4,0(r3)
   9514c:	280d883a 	mov	r6,r5
   95150:	100b883a 	mov	r5,r2
   95154:	00950001 	jmpi	95000 <__swbuf_r>

00095158 <_calloc_r>:
   95158:	314b383a 	mul	r5,r6,r5
   9515c:	defffe04 	addi	sp,sp,-8
   95160:	dc000015 	stw	r16,0(sp)
   95164:	dfc00115 	stw	ra,4(sp)
   95168:	008da8c0 	call	8da8c <_malloc_r>
   9516c:	1021883a 	mov	r16,r2
   95170:	10000c26 	beq	r2,zero,951a4 <_calloc_r+0x4c>
   95174:	11bfff17 	ldw	r6,-4(r2)
   95178:	00ffff04 	movi	r3,-4
   9517c:	00800904 	movi	r2,36
   95180:	30cc703a 	and	r6,r6,r3
   95184:	30cd883a 	add	r6,r6,r3
   95188:	11801436 	bltu	r2,r6,951dc <_calloc_r+0x84>
   9518c:	00c004c4 	movi	r3,19
   95190:	19800936 	bltu	r3,r6,951b8 <_calloc_r+0x60>
   95194:	8005883a 	mov	r2,r16
   95198:	10000015 	stw	zero,0(r2)
   9519c:	10000115 	stw	zero,4(r2)
   951a0:	10000215 	stw	zero,8(r2)
   951a4:	8005883a 	mov	r2,r16
   951a8:	dfc00117 	ldw	ra,4(sp)
   951ac:	dc000017 	ldw	r16,0(sp)
   951b0:	dec00204 	addi	sp,sp,8
   951b4:	f800283a 	ret
   951b8:	80000015 	stw	zero,0(r16)
   951bc:	80000115 	stw	zero,4(r16)
   951c0:	00c006c4 	movi	r3,27
   951c4:	19800d2e 	bgeu	r3,r6,951fc <_calloc_r+0xa4>
   951c8:	80000215 	stw	zero,8(r16)
   951cc:	80000315 	stw	zero,12(r16)
   951d0:	30800c26 	beq	r6,r2,95204 <_calloc_r+0xac>
   951d4:	80800404 	addi	r2,r16,16
   951d8:	003fef06 	br	95198 <_calloc_r+0x40>
   951dc:	8009883a 	mov	r4,r16
   951e0:	000b883a 	mov	r5,zero
   951e4:	008e47c0 	call	8e47c <memset>
   951e8:	8005883a 	mov	r2,r16
   951ec:	dfc00117 	ldw	ra,4(sp)
   951f0:	dc000017 	ldw	r16,0(sp)
   951f4:	dec00204 	addi	sp,sp,8
   951f8:	f800283a 	ret
   951fc:	80800204 	addi	r2,r16,8
   95200:	003fe506 	br	95198 <_calloc_r+0x40>
   95204:	80000415 	stw	zero,16(r16)
   95208:	80000515 	stw	zero,20(r16)
   9520c:	80800604 	addi	r2,r16,24
   95210:	003fe106 	br	95198 <_calloc_r+0x40>

00095214 <_fstat_r>:
   95214:	defffd04 	addi	sp,sp,-12
   95218:	dc400115 	stw	r17,4(sp)
   9521c:	dc000015 	stw	r16,0(sp)
   95220:	2023883a 	mov	r17,r4
   95224:	040002b4 	movhi	r16,10
   95228:	84051604 	addi	r16,r16,5208
   9522c:	2809883a 	mov	r4,r5
   95230:	300b883a 	mov	r5,r6
   95234:	dfc00215 	stw	ra,8(sp)
   95238:	80000015 	stw	zero,0(r16)
   9523c:	0096ee80 	call	96ee8 <fstat>
   95240:	00ffffc4 	movi	r3,-1
   95244:	10c00526 	beq	r2,r3,9525c <_fstat_r+0x48>
   95248:	dfc00217 	ldw	ra,8(sp)
   9524c:	dc400117 	ldw	r17,4(sp)
   95250:	dc000017 	ldw	r16,0(sp)
   95254:	dec00304 	addi	sp,sp,12
   95258:	f800283a 	ret
   9525c:	80c00017 	ldw	r3,0(r16)
   95260:	183ff926 	beq	r3,zero,95248 <_fstat_r+0x34>
   95264:	88c00015 	stw	r3,0(r17)
   95268:	dfc00217 	ldw	ra,8(sp)
   9526c:	dc400117 	ldw	r17,4(sp)
   95270:	dc000017 	ldw	r16,0(sp)
   95274:	dec00304 	addi	sp,sp,12
   95278:	f800283a 	ret

0009527c <_isatty_r>:
   9527c:	defffd04 	addi	sp,sp,-12
   95280:	dc400115 	stw	r17,4(sp)
   95284:	dc000015 	stw	r16,0(sp)
   95288:	2023883a 	mov	r17,r4
   9528c:	040002b4 	movhi	r16,10
   95290:	84051604 	addi	r16,r16,5208
   95294:	2809883a 	mov	r4,r5
   95298:	dfc00215 	stw	ra,8(sp)
   9529c:	80000015 	stw	zero,0(r16)
   952a0:	00972bc0 	call	972bc <isatty>
   952a4:	00ffffc4 	movi	r3,-1
   952a8:	10c00526 	beq	r2,r3,952c0 <_isatty_r+0x44>
   952ac:	dfc00217 	ldw	ra,8(sp)
   952b0:	dc400117 	ldw	r17,4(sp)
   952b4:	dc000017 	ldw	r16,0(sp)
   952b8:	dec00304 	addi	sp,sp,12
   952bc:	f800283a 	ret
   952c0:	80c00017 	ldw	r3,0(r16)
   952c4:	183ff926 	beq	r3,zero,952ac <_isatty_r+0x30>
   952c8:	88c00015 	stw	r3,0(r17)
   952cc:	dfc00217 	ldw	ra,8(sp)
   952d0:	dc400117 	ldw	r17,4(sp)
   952d4:	dc000017 	ldw	r16,0(sp)
   952d8:	dec00304 	addi	sp,sp,12
   952dc:	f800283a 	ret

000952e0 <__udivdi3>:
   952e0:	defff504 	addi	sp,sp,-44
   952e4:	dd000515 	stw	r20,20(sp)
   952e8:	dcc00415 	stw	r19,16(sp)
   952ec:	dc800315 	stw	r18,12(sp)
   952f0:	dc400215 	stw	r17,8(sp)
   952f4:	dc000115 	stw	r16,4(sp)
   952f8:	dfc00a15 	stw	ra,40(sp)
   952fc:	df000915 	stw	fp,36(sp)
   95300:	ddc00815 	stw	r23,32(sp)
   95304:	dd800715 	stw	r22,28(sp)
   95308:	dd400615 	stw	r21,24(sp)
   9530c:	2025883a 	mov	r18,r4
   95310:	2823883a 	mov	r17,r5
   95314:	3021883a 	mov	r16,r6
   95318:	2027883a 	mov	r19,r4
   9531c:	2829883a 	mov	r20,r5
   95320:	3800401e 	bne	r7,zero,95424 <__udivdi3+0x144>
   95324:	2980602e 	bgeu	r5,r6,954a8 <__udivdi3+0x1c8>
   95328:	00bfffd4 	movui	r2,65535
   9532c:	1180aa36 	bltu	r2,r6,955d8 <__udivdi3+0x2f8>
   95330:	00803fc4 	movi	r2,255
   95334:	11814436 	bltu	r2,r6,95848 <__udivdi3+0x568>
   95338:	0005883a 	mov	r2,zero
   9533c:	0007883a 	mov	r3,zero
   95340:	3084d83a 	srl	r2,r6,r2
   95344:	010002b4 	movhi	r4,10
   95348:	21346f04 	addi	r4,r4,-11844
   9534c:	2085883a 	add	r2,r4,r2
   95350:	10800003 	ldbu	r2,0(r2)
   95354:	10c7883a 	add	r3,r2,r3
   95358:	00800804 	movi	r2,32
   9535c:	10c5c83a 	sub	r2,r2,r3
   95360:	10000526 	beq	r2,zero,95378 <__udivdi3+0x98>
   95364:	88a2983a 	sll	r17,r17,r2
   95368:	90c6d83a 	srl	r3,r18,r3
   9536c:	30a0983a 	sll	r16,r6,r2
   95370:	90a6983a 	sll	r19,r18,r2
   95374:	88e8b03a 	or	r20,r17,r3
   95378:	8022d43a 	srli	r17,r16,16
   9537c:	a009883a 	mov	r4,r20
   95380:	857fffcc 	andi	r21,r16,65535
   95384:	880b883a 	mov	r5,r17
   95388:	008cf400 	call	8cf40 <__umodsi3>
   9538c:	a009883a 	mov	r4,r20
   95390:	880b883a 	mov	r5,r17
   95394:	102d883a 	mov	r22,r2
   95398:	008cf380 	call	8cf38 <__udivsi3>
   9539c:	b02c943a 	slli	r22,r22,16
   953a0:	9806d43a 	srli	r3,r19,16
   953a4:	1549383a 	mul	r4,r2,r21
   953a8:	1025883a 	mov	r18,r2
   953ac:	b0c6b03a 	or	r3,r22,r3
   953b0:	1900052e 	bgeu	r3,r4,953c8 <__udivdi3+0xe8>
   953b4:	1c07883a 	add	r3,r3,r16
   953b8:	10bfffc4 	addi	r2,r2,-1
   953bc:	1c000136 	bltu	r3,r16,953c4 <__udivdi3+0xe4>
   953c0:	19013636 	bltu	r3,r4,9589c <__udivdi3+0x5bc>
   953c4:	1025883a 	mov	r18,r2
   953c8:	1929c83a 	sub	r20,r3,r4
   953cc:	a009883a 	mov	r4,r20
   953d0:	880b883a 	mov	r5,r17
   953d4:	008cf400 	call	8cf40 <__umodsi3>
   953d8:	102d883a 	mov	r22,r2
   953dc:	a009883a 	mov	r4,r20
   953e0:	880b883a 	mov	r5,r17
   953e4:	008cf380 	call	8cf38 <__udivsi3>
   953e8:	b02c943a 	slli	r22,r22,16
   953ec:	156b383a 	mul	r21,r2,r21
   953f0:	9cffffcc 	andi	r19,r19,65535
   953f4:	b4e6b03a 	or	r19,r22,r19
   953f8:	1009883a 	mov	r4,r2
   953fc:	9d40052e 	bgeu	r19,r21,95414 <__udivdi3+0x134>
   95400:	9c27883a 	add	r19,r19,r16
   95404:	10bfffc4 	addi	r2,r2,-1
   95408:	9c00f736 	bltu	r19,r16,957e8 <__udivdi3+0x508>
   9540c:	9d40f62e 	bgeu	r19,r21,957e8 <__udivdi3+0x508>
   95410:	213fff84 	addi	r4,r4,-2
   95414:	9004943a 	slli	r2,r18,16
   95418:	0007883a 	mov	r3,zero
   9541c:	2084b03a 	or	r2,r4,r2
   95420:	00001506 	br	95478 <__udivdi3+0x198>
   95424:	29c06536 	bltu	r5,r7,955bc <__udivdi3+0x2dc>
   95428:	00bfffd4 	movui	r2,65535
   9542c:	11c0652e 	bgeu	r2,r7,955c4 <__udivdi3+0x2e4>
   95430:	00804034 	movhi	r2,256
   95434:	10bfffc4 	addi	r2,r2,-1
   95438:	11c0f736 	bltu	r2,r7,95818 <__udivdi3+0x538>
   9543c:	00c00404 	movi	r3,16
   95440:	180b883a 	mov	r5,r3
   95444:	38c6d83a 	srl	r3,r7,r3
   95448:	010002b4 	movhi	r4,10
   9544c:	21346f04 	addi	r4,r4,-11844
   95450:	04000804 	movi	r16,32
   95454:	20c7883a 	add	r3,r4,r3
   95458:	18800003 	ldbu	r2,0(r3)
   9545c:	1145883a 	add	r2,r2,r5
   95460:	80a1c83a 	sub	r16,r16,r2
   95464:	8000691e 	bne	r16,zero,9560c <__udivdi3+0x32c>
   95468:	0007883a 	mov	r3,zero
   9546c:	3c406536 	bltu	r7,r17,95604 <__udivdi3+0x324>
   95470:	9180642e 	bgeu	r18,r6,95604 <__udivdi3+0x324>
   95474:	0005883a 	mov	r2,zero
   95478:	dfc00a17 	ldw	ra,40(sp)
   9547c:	df000917 	ldw	fp,36(sp)
   95480:	ddc00817 	ldw	r23,32(sp)
   95484:	dd800717 	ldw	r22,28(sp)
   95488:	dd400617 	ldw	r21,24(sp)
   9548c:	dd000517 	ldw	r20,20(sp)
   95490:	dcc00417 	ldw	r19,16(sp)
   95494:	dc800317 	ldw	r18,12(sp)
   95498:	dc400217 	ldw	r17,8(sp)
   9549c:	dc000117 	ldw	r16,4(sp)
   954a0:	dec00b04 	addi	sp,sp,44
   954a4:	f800283a 	ret
   954a8:	3000041e 	bne	r6,zero,954bc <__udivdi3+0x1dc>
   954ac:	01000044 	movi	r4,1
   954b0:	000b883a 	mov	r5,zero
   954b4:	008cf380 	call	8cf38 <__udivsi3>
   954b8:	1021883a 	mov	r16,r2
   954bc:	00bfffd4 	movui	r2,65535
   954c0:	14004b2e 	bgeu	r2,r16,955f0 <__udivdi3+0x310>
   954c4:	00804034 	movhi	r2,256
   954c8:	10bfffc4 	addi	r2,r2,-1
   954cc:	1400d836 	bltu	r2,r16,95830 <__udivdi3+0x550>
   954d0:	00800404 	movi	r2,16
   954d4:	1007883a 	mov	r3,r2
   954d8:	8084d83a 	srl	r2,r16,r2
   954dc:	010002b4 	movhi	r4,10
   954e0:	21346f04 	addi	r4,r4,-11844
   954e4:	2085883a 	add	r2,r4,r2
   954e8:	10800003 	ldbu	r2,0(r2)
   954ec:	10c7883a 	add	r3,r2,r3
   954f0:	00800804 	movi	r2,32
   954f4:	10c5c83a 	sub	r2,r2,r3
   954f8:	1000891e 	bne	r2,zero,95720 <__udivdi3+0x440>
   954fc:	8028d43a 	srli	r20,r16,16
   95500:	8c23c83a 	sub	r17,r17,r16
   95504:	84bfffcc 	andi	r18,r16,65535
   95508:	00c00044 	movi	r3,1
   9550c:	8809883a 	mov	r4,r17
   95510:	a00b883a 	mov	r5,r20
   95514:	d8c00015 	stw	r3,0(sp)
   95518:	008cf400 	call	8cf40 <__umodsi3>
   9551c:	8809883a 	mov	r4,r17
   95520:	a00b883a 	mov	r5,r20
   95524:	102b883a 	mov	r21,r2
   95528:	008cf380 	call	8cf38 <__udivsi3>
   9552c:	a82a943a 	slli	r21,r21,16
   95530:	9808d43a 	srli	r4,r19,16
   95534:	148b383a 	mul	r5,r2,r18
   95538:	1023883a 	mov	r17,r2
   9553c:	a908b03a 	or	r4,r21,r4
   95540:	d8c00017 	ldw	r3,0(sp)
   95544:	2140052e 	bgeu	r4,r5,9555c <__udivdi3+0x27c>
   95548:	2409883a 	add	r4,r4,r16
   9554c:	10bfffc4 	addi	r2,r2,-1
   95550:	24000136 	bltu	r4,r16,95558 <__udivdi3+0x278>
   95554:	2140ce36 	bltu	r4,r5,95890 <__udivdi3+0x5b0>
   95558:	1023883a 	mov	r17,r2
   9555c:	216bc83a 	sub	r21,r4,r5
   95560:	a809883a 	mov	r4,r21
   95564:	a00b883a 	mov	r5,r20
   95568:	d8c00015 	stw	r3,0(sp)
   9556c:	008cf400 	call	8cf40 <__umodsi3>
   95570:	102d883a 	mov	r22,r2
   95574:	a809883a 	mov	r4,r21
   95578:	a00b883a 	mov	r5,r20
   9557c:	008cf380 	call	8cf38 <__udivsi3>
   95580:	b02c943a 	slli	r22,r22,16
   95584:	14a5383a 	mul	r18,r2,r18
   95588:	9cffffcc 	andi	r19,r19,65535
   9558c:	b4e6b03a 	or	r19,r22,r19
   95590:	1009883a 	mov	r4,r2
   95594:	d8c00017 	ldw	r3,0(sp)
   95598:	9c80052e 	bgeu	r19,r18,955b0 <__udivdi3+0x2d0>
   9559c:	9c27883a 	add	r19,r19,r16
   955a0:	10bfffc4 	addi	r2,r2,-1
   955a4:	9c009236 	bltu	r19,r16,957f0 <__udivdi3+0x510>
   955a8:	9c80912e 	bgeu	r19,r18,957f0 <__udivdi3+0x510>
   955ac:	213fff84 	addi	r4,r4,-2
   955b0:	8804943a 	slli	r2,r17,16
   955b4:	2084b03a 	or	r2,r4,r2
   955b8:	003faf06 	br	95478 <__udivdi3+0x198>
   955bc:	0007883a 	mov	r3,zero
   955c0:	003fac06 	br	95474 <__udivdi3+0x194>
   955c4:	00803fc4 	movi	r2,255
   955c8:	11c09636 	bltu	r2,r7,95824 <__udivdi3+0x544>
   955cc:	0007883a 	mov	r3,zero
   955d0:	000b883a 	mov	r5,zero
   955d4:	003f9b06 	br	95444 <__udivdi3+0x164>
   955d8:	00804034 	movhi	r2,256
   955dc:	10bfffc4 	addi	r2,r2,-1
   955e0:	11809636 	bltu	r2,r6,9583c <__udivdi3+0x55c>
   955e4:	00800404 	movi	r2,16
   955e8:	1007883a 	mov	r3,r2
   955ec:	003f5406 	br	95340 <__udivdi3+0x60>
   955f0:	00803fc4 	movi	r2,255
   955f4:	14009736 	bltu	r2,r16,95854 <__udivdi3+0x574>
   955f8:	0005883a 	mov	r2,zero
   955fc:	0007883a 	mov	r3,zero
   95600:	003fb506 	br	954d8 <__udivdi3+0x1f8>
   95604:	00800044 	movi	r2,1
   95608:	003f9b06 	br	95478 <__udivdi3+0x198>
   9560c:	3086d83a 	srl	r3,r6,r2
   95610:	3c0e983a 	sll	r7,r7,r16
   95614:	88aad83a 	srl	r21,r17,r2
   95618:	9084d83a 	srl	r2,r18,r2
   9561c:	38e6b03a 	or	r19,r7,r3
   95620:	9828d43a 	srli	r20,r19,16
   95624:	8c22983a 	sll	r17,r17,r16
   95628:	a809883a 	mov	r4,r21
   9562c:	a00b883a 	mov	r5,r20
   95630:	342c983a 	sll	r22,r6,r16
   95634:	88a2b03a 	or	r17,r17,r2
   95638:	008cf400 	call	8cf40 <__umodsi3>
   9563c:	a809883a 	mov	r4,r21
   95640:	a00b883a 	mov	r5,r20
   95644:	1039883a 	mov	fp,r2
   95648:	008cf380 	call	8cf38 <__udivsi3>
   9564c:	102b883a 	mov	r21,r2
   95650:	9dffffcc 	andi	r23,r19,65535
   95654:	e008943a 	slli	r4,fp,16
   95658:	8804d43a 	srli	r2,r17,16
   9565c:	adcd383a 	mul	r6,r21,r23
   95660:	2088b03a 	or	r4,r4,r2
   95664:	2180042e 	bgeu	r4,r6,95678 <__udivdi3+0x398>
   95668:	24c9883a 	add	r4,r4,r19
   9566c:	a8bfffc4 	addi	r2,r21,-1
   95670:	24c07f2e 	bgeu	r4,r19,95870 <__udivdi3+0x590>
   95674:	102b883a 	mov	r21,r2
   95678:	21b9c83a 	sub	fp,r4,r6
   9567c:	e009883a 	mov	r4,fp
   95680:	a00b883a 	mov	r5,r20
   95684:	008cf400 	call	8cf40 <__umodsi3>
   95688:	e009883a 	mov	r4,fp
   9568c:	a00b883a 	mov	r5,r20
   95690:	d8800015 	stw	r2,0(sp)
   95694:	008cf380 	call	8cf38 <__udivsi3>
   95698:	d8c00017 	ldw	r3,0(sp)
   9569c:	15cb383a 	mul	r5,r2,r23
   956a0:	8c7fffcc 	andi	r17,r17,65535
   956a4:	1806943a 	slli	r3,r3,16
   956a8:	1009883a 	mov	r4,r2
   956ac:	1c46b03a 	or	r3,r3,r17
   956b0:	1940042e 	bgeu	r3,r5,956c4 <__udivdi3+0x3e4>
   956b4:	1cc7883a 	add	r3,r3,r19
   956b8:	10bfffc4 	addi	r2,r2,-1
   956bc:	1cc0682e 	bgeu	r3,r19,95860 <__udivdi3+0x580>
   956c0:	1009883a 	mov	r4,r2
   956c4:	a804943a 	slli	r2,r21,16
   956c8:	b1ffffcc 	andi	r7,r22,65535
   956cc:	b02cd43a 	srli	r22,r22,16
   956d0:	2084b03a 	or	r2,r4,r2
   956d4:	113fffcc 	andi	r4,r2,65535
   956d8:	100cd43a 	srli	r6,r2,16
   956dc:	21d1383a 	mul	r8,r4,r7
   956e0:	2589383a 	mul	r4,r4,r22
   956e4:	31cf383a 	mul	r7,r6,r7
   956e8:	4012d43a 	srli	r9,r8,16
   956ec:	1947c83a 	sub	r3,r3,r5
   956f0:	3909883a 	add	r4,r7,r4
   956f4:	2249883a 	add	r4,r4,r9
   956f8:	35ad383a 	mul	r22,r6,r22
   956fc:	21c0022e 	bgeu	r4,r7,95708 <__udivdi3+0x428>
   95700:	01400074 	movhi	r5,1
   95704:	b16d883a 	add	r22,r22,r5
   95708:	200ad43a 	srli	r5,r4,16
   9570c:	b16d883a 	add	r22,r22,r5
   95710:	1d803e36 	bltu	r3,r22,9580c <__udivdi3+0x52c>
   95714:	1d803826 	beq	r3,r22,957f8 <__udivdi3+0x518>
   95718:	0007883a 	mov	r3,zero
   9571c:	003f5606 	br	95478 <__udivdi3+0x198>
   95720:	80a0983a 	sll	r16,r16,r2
   95724:	88ead83a 	srl	r21,r17,r3
   95728:	90c6d83a 	srl	r3,r18,r3
   9572c:	8028d43a 	srli	r20,r16,16
   95730:	88a2983a 	sll	r17,r17,r2
   95734:	a809883a 	mov	r4,r21
   95738:	a00b883a 	mov	r5,r20
   9573c:	88ecb03a 	or	r22,r17,r3
   95740:	90a6983a 	sll	r19,r18,r2
   95744:	008cf400 	call	8cf40 <__umodsi3>
   95748:	a809883a 	mov	r4,r21
   9574c:	a00b883a 	mov	r5,r20
   95750:	1023883a 	mov	r17,r2
   95754:	008cf380 	call	8cf38 <__udivsi3>
   95758:	102b883a 	mov	r21,r2
   9575c:	84bfffcc 	andi	r18,r16,65535
   95760:	8808943a 	slli	r4,r17,16
   95764:	b004d43a 	srli	r2,r22,16
   95768:	ac87383a 	mul	r3,r21,r18
   9576c:	2088b03a 	or	r4,r4,r2
   95770:	20c0062e 	bgeu	r4,r3,9578c <__udivdi3+0x4ac>
   95774:	2409883a 	add	r4,r4,r16
   95778:	a8bfffc4 	addi	r2,r21,-1
   9577c:	24004236 	bltu	r4,r16,95888 <__udivdi3+0x5a8>
   95780:	20c0412e 	bgeu	r4,r3,95888 <__udivdi3+0x5a8>
   95784:	ad7fff84 	addi	r21,r21,-2
   95788:	2409883a 	add	r4,r4,r16
   9578c:	20efc83a 	sub	r23,r4,r3
   95790:	b809883a 	mov	r4,r23
   95794:	a00b883a 	mov	r5,r20
   95798:	008cf400 	call	8cf40 <__umodsi3>
   9579c:	1023883a 	mov	r17,r2
   957a0:	a00b883a 	mov	r5,r20
   957a4:	b809883a 	mov	r4,r23
   957a8:	008cf380 	call	8cf38 <__udivsi3>
   957ac:	8822943a 	slli	r17,r17,16
   957b0:	148b383a 	mul	r5,r2,r18
   957b4:	b5bfffcc 	andi	r22,r22,65535
   957b8:	8da2b03a 	or	r17,r17,r22
   957bc:	8940062e 	bgeu	r17,r5,957d8 <__udivdi3+0x4f8>
   957c0:	8c23883a 	add	r17,r17,r16
   957c4:	10ffffc4 	addi	r3,r2,-1
   957c8:	8c002d36 	bltu	r17,r16,95880 <__udivdi3+0x5a0>
   957cc:	89402c2e 	bgeu	r17,r5,95880 <__udivdi3+0x5a0>
   957d0:	10bfff84 	addi	r2,r2,-2
   957d4:	8c23883a 	add	r17,r17,r16
   957d8:	a806943a 	slli	r3,r21,16
   957dc:	8963c83a 	sub	r17,r17,r5
   957e0:	10c6b03a 	or	r3,r2,r3
   957e4:	003f4906 	br	9550c <__udivdi3+0x22c>
   957e8:	1009883a 	mov	r4,r2
   957ec:	003f0906 	br	95414 <__udivdi3+0x134>
   957f0:	1009883a 	mov	r4,r2
   957f4:	003f6e06 	br	955b0 <__udivdi3+0x2d0>
   957f8:	2008943a 	slli	r4,r4,16
   957fc:	9420983a 	sll	r16,r18,r16
   95800:	423fffcc 	andi	r8,r8,65535
   95804:	2209883a 	add	r4,r4,r8
   95808:	813fc32e 	bgeu	r16,r4,95718 <__udivdi3+0x438>
   9580c:	10bfffc4 	addi	r2,r2,-1
   95810:	0007883a 	mov	r3,zero
   95814:	003f1806 	br	95478 <__udivdi3+0x198>
   95818:	00c00604 	movi	r3,24
   9581c:	180b883a 	mov	r5,r3
   95820:	003f0806 	br	95444 <__udivdi3+0x164>
   95824:	00c00204 	movi	r3,8
   95828:	180b883a 	mov	r5,r3
   9582c:	003f0506 	br	95444 <__udivdi3+0x164>
   95830:	00800604 	movi	r2,24
   95834:	1007883a 	mov	r3,r2
   95838:	003f2706 	br	954d8 <__udivdi3+0x1f8>
   9583c:	00800604 	movi	r2,24
   95840:	1007883a 	mov	r3,r2
   95844:	003ebe06 	br	95340 <__udivdi3+0x60>
   95848:	00800204 	movi	r2,8
   9584c:	1007883a 	mov	r3,r2
   95850:	003ebb06 	br	95340 <__udivdi3+0x60>
   95854:	00800204 	movi	r2,8
   95858:	1007883a 	mov	r3,r2
   9585c:	003f1e06 	br	954d8 <__udivdi3+0x1f8>
   95860:	197f972e 	bgeu	r3,r5,956c0 <__udivdi3+0x3e0>
   95864:	213fff84 	addi	r4,r4,-2
   95868:	1cc7883a 	add	r3,r3,r19
   9586c:	003f9506 	br	956c4 <__udivdi3+0x3e4>
   95870:	21bf802e 	bgeu	r4,r6,95674 <__udivdi3+0x394>
   95874:	ad7fff84 	addi	r21,r21,-2
   95878:	24c9883a 	add	r4,r4,r19
   9587c:	003f7e06 	br	95678 <__udivdi3+0x398>
   95880:	1805883a 	mov	r2,r3
   95884:	003fd406 	br	957d8 <__udivdi3+0x4f8>
   95888:	102b883a 	mov	r21,r2
   9588c:	003fbf06 	br	9578c <__udivdi3+0x4ac>
   95890:	8c7fff84 	addi	r17,r17,-2
   95894:	2409883a 	add	r4,r4,r16
   95898:	003f3006 	br	9555c <__udivdi3+0x27c>
   9589c:	94bfff84 	addi	r18,r18,-2
   958a0:	1c07883a 	add	r3,r3,r16
   958a4:	003ec806 	br	953c8 <__udivdi3+0xe8>

000958a8 <__umoddi3>:
   958a8:	defff504 	addi	sp,sp,-44
   958ac:	dd000515 	stw	r20,20(sp)
   958b0:	dcc00415 	stw	r19,16(sp)
   958b4:	dc800315 	stw	r18,12(sp)
   958b8:	dc400215 	stw	r17,8(sp)
   958bc:	dc000115 	stw	r16,4(sp)
   958c0:	dfc00a15 	stw	ra,40(sp)
   958c4:	df000915 	stw	fp,36(sp)
   958c8:	ddc00815 	stw	r23,32(sp)
   958cc:	dd800715 	stw	r22,28(sp)
   958d0:	dd400615 	stw	r21,24(sp)
   958d4:	2025883a 	mov	r18,r4
   958d8:	2823883a 	mov	r17,r5
   958dc:	3021883a 	mov	r16,r6
   958e0:	2027883a 	mov	r19,r4
   958e4:	2829883a 	mov	r20,r5
   958e8:	3800351e 	bne	r7,zero,959c0 <__umoddi3+0x118>
   958ec:	29804d2e 	bgeu	r5,r6,95a24 <__umoddi3+0x17c>
   958f0:	00bfffd4 	movui	r2,65535
   958f4:	11809a36 	bltu	r2,r6,95b60 <__umoddi3+0x2b8>
   958f8:	00803fc4 	movi	r2,255
   958fc:	11813936 	bltu	r2,r6,95de4 <__umoddi3+0x53c>
   95900:	0005883a 	mov	r2,zero
   95904:	0009883a 	mov	r4,zero
   95908:	3084d83a 	srl	r2,r6,r2
   9590c:	00c002b4 	movhi	r3,10
   95910:	18f46f04 	addi	r3,r3,-11844
   95914:	05400804 	movi	r21,32
   95918:	1885883a 	add	r2,r3,r2
   9591c:	10800003 	ldbu	r2,0(r2)
   95920:	1109883a 	add	r4,r2,r4
   95924:	a92bc83a 	sub	r21,r21,r4
   95928:	a800ec26 	beq	r21,zero,95cdc <__umoddi3+0x434>
   9592c:	8d62983a 	sll	r17,r17,r21
   95930:	9108d83a 	srl	r4,r18,r4
   95934:	3560983a 	sll	r16,r6,r21
   95938:	9566983a 	sll	r19,r18,r21
   9593c:	8928b03a 	or	r20,r17,r4
   95940:	8022d43a 	srli	r17,r16,16
   95944:	a009883a 	mov	r4,r20
   95948:	84bfffcc 	andi	r18,r16,65535
   9594c:	880b883a 	mov	r5,r17
   95950:	008cf400 	call	8cf40 <__umodsi3>
   95954:	a009883a 	mov	r4,r20
   95958:	880b883a 	mov	r5,r17
   9595c:	102d883a 	mov	r22,r2
   95960:	008cf380 	call	8cf38 <__udivsi3>
   95964:	b02c943a 	slli	r22,r22,16
   95968:	9806d43a 	srli	r3,r19,16
   9596c:	1485383a 	mul	r2,r2,r18
   95970:	b0c6b03a 	or	r3,r22,r3
   95974:	1880042e 	bgeu	r3,r2,95988 <__umoddi3+0xe0>
   95978:	1c07883a 	add	r3,r3,r16
   9597c:	1c000236 	bltu	r3,r16,95988 <__umoddi3+0xe0>
   95980:	1880012e 	bgeu	r3,r2,95988 <__umoddi3+0xe0>
   95984:	1c07883a 	add	r3,r3,r16
   95988:	18a9c83a 	sub	r20,r3,r2
   9598c:	a009883a 	mov	r4,r20
   95990:	880b883a 	mov	r5,r17
   95994:	008cf400 	call	8cf40 <__umodsi3>
   95998:	102d883a 	mov	r22,r2
   9599c:	a009883a 	mov	r4,r20
   959a0:	880b883a 	mov	r5,r17
   959a4:	008cf380 	call	8cf38 <__udivsi3>
   959a8:	b02c943a 	slli	r22,r22,16
   959ac:	1485383a 	mul	r2,r2,r18
   959b0:	9cffffcc 	andi	r19,r19,65535
   959b4:	b4e6b03a 	or	r19,r22,r19
   959b8:	9880522e 	bgeu	r19,r2,95b04 <__umoddi3+0x25c>
   959bc:	00004d06 	br	95af4 <__umoddi3+0x24c>
   959c0:	29c05436 	bltu	r5,r7,95b14 <__umoddi3+0x26c>
   959c4:	00bfffd4 	movui	r2,65535
   959c8:	11c0602e 	bgeu	r2,r7,95b4c <__umoddi3+0x2a4>
   959cc:	00804034 	movhi	r2,256
   959d0:	10bfffc4 	addi	r2,r2,-1
   959d4:	11c0f736 	bltu	r2,r7,95db4 <__umoddi3+0x50c>
   959d8:	00c00404 	movi	r3,16
   959dc:	1827883a 	mov	r19,r3
   959e0:	38c6d83a 	srl	r3,r7,r3
   959e4:	010002b4 	movhi	r4,10
   959e8:	21346f04 	addi	r4,r4,-11844
   959ec:	04000804 	movi	r16,32
   959f0:	20c7883a 	add	r3,r4,r3
   959f4:	18800003 	ldbu	r2,0(r3)
   959f8:	14e7883a 	add	r19,r2,r19
   959fc:	84e1c83a 	sub	r16,r16,r19
   95a00:	8000621e 	bne	r16,zero,95b8c <__umoddi3+0x2e4>
   95a04:	3c400136 	bltu	r7,r17,95a0c <__umoddi3+0x164>
   95a08:	91810336 	bltu	r18,r6,95e18 <__umoddi3+0x570>
   95a0c:	9185c83a 	sub	r2,r18,r6
   95a10:	89e3c83a 	sub	r17,r17,r7
   95a14:	90a5803a 	cmpltu	r18,r18,r2
   95a18:	8ca9c83a 	sub	r20,r17,r18
   95a1c:	a007883a 	mov	r3,r20
   95a20:	00003e06 	br	95b1c <__umoddi3+0x274>
   95a24:	3000041e 	bne	r6,zero,95a38 <__umoddi3+0x190>
   95a28:	01000044 	movi	r4,1
   95a2c:	000b883a 	mov	r5,zero
   95a30:	008cf380 	call	8cf38 <__udivsi3>
   95a34:	1021883a 	mov	r16,r2
   95a38:	00bfffd4 	movui	r2,65535
   95a3c:	14004e2e 	bgeu	r2,r16,95b78 <__umoddi3+0x2d0>
   95a40:	00804034 	movhi	r2,256
   95a44:	10bfffc4 	addi	r2,r2,-1
   95a48:	1400e336 	bltu	r2,r16,95dd8 <__umoddi3+0x530>
   95a4c:	00800404 	movi	r2,16
   95a50:	1007883a 	mov	r3,r2
   95a54:	8084d83a 	srl	r2,r16,r2
   95a58:	010002b4 	movhi	r4,10
   95a5c:	21346f04 	addi	r4,r4,-11844
   95a60:	05400804 	movi	r21,32
   95a64:	2085883a 	add	r2,r4,r2
   95a68:	10800003 	ldbu	r2,0(r2)
   95a6c:	10c7883a 	add	r3,r2,r3
   95a70:	a8ebc83a 	sub	r21,r21,r3
   95a74:	a8009b1e 	bne	r21,zero,95ce4 <__umoddi3+0x43c>
   95a78:	8028d43a 	srli	r20,r16,16
   95a7c:	8c23c83a 	sub	r17,r17,r16
   95a80:	85bfffcc 	andi	r22,r16,65535
   95a84:	8809883a 	mov	r4,r17
   95a88:	a00b883a 	mov	r5,r20
   95a8c:	008cf400 	call	8cf40 <__umodsi3>
   95a90:	8809883a 	mov	r4,r17
   95a94:	a00b883a 	mov	r5,r20
   95a98:	1025883a 	mov	r18,r2
   95a9c:	008cf380 	call	8cf38 <__udivsi3>
   95aa0:	9024943a 	slli	r18,r18,16
   95aa4:	9806d43a 	srli	r3,r19,16
   95aa8:	1585383a 	mul	r2,r2,r22
   95aac:	90c6b03a 	or	r3,r18,r3
   95ab0:	1880032e 	bgeu	r3,r2,95ac0 <__umoddi3+0x218>
   95ab4:	1c07883a 	add	r3,r3,r16
   95ab8:	1c000136 	bltu	r3,r16,95ac0 <__umoddi3+0x218>
   95abc:	1880d436 	bltu	r3,r2,95e10 <__umoddi3+0x568>
   95ac0:	18a3c83a 	sub	r17,r3,r2
   95ac4:	8809883a 	mov	r4,r17
   95ac8:	a00b883a 	mov	r5,r20
   95acc:	008cf400 	call	8cf40 <__umodsi3>
   95ad0:	1025883a 	mov	r18,r2
   95ad4:	8809883a 	mov	r4,r17
   95ad8:	a00b883a 	mov	r5,r20
   95adc:	008cf380 	call	8cf38 <__udivsi3>
   95ae0:	9024943a 	slli	r18,r18,16
   95ae4:	1585383a 	mul	r2,r2,r22
   95ae8:	9cffffcc 	andi	r19,r19,65535
   95aec:	94e6b03a 	or	r19,r18,r19
   95af0:	9880042e 	bgeu	r19,r2,95b04 <__umoddi3+0x25c>
   95af4:	9c27883a 	add	r19,r19,r16
   95af8:	9c000236 	bltu	r19,r16,95b04 <__umoddi3+0x25c>
   95afc:	9880012e 	bgeu	r19,r2,95b04 <__umoddi3+0x25c>
   95b00:	9c27883a 	add	r19,r19,r16
   95b04:	98a7c83a 	sub	r19,r19,r2
   95b08:	9d44d83a 	srl	r2,r19,r21
   95b0c:	0007883a 	mov	r3,zero
   95b10:	00000206 	br	95b1c <__umoddi3+0x274>
   95b14:	2005883a 	mov	r2,r4
   95b18:	2807883a 	mov	r3,r5
   95b1c:	dfc00a17 	ldw	ra,40(sp)
   95b20:	df000917 	ldw	fp,36(sp)
   95b24:	ddc00817 	ldw	r23,32(sp)
   95b28:	dd800717 	ldw	r22,28(sp)
   95b2c:	dd400617 	ldw	r21,24(sp)
   95b30:	dd000517 	ldw	r20,20(sp)
   95b34:	dcc00417 	ldw	r19,16(sp)
   95b38:	dc800317 	ldw	r18,12(sp)
   95b3c:	dc400217 	ldw	r17,8(sp)
   95b40:	dc000117 	ldw	r16,4(sp)
   95b44:	dec00b04 	addi	sp,sp,44
   95b48:	f800283a 	ret
   95b4c:	00803fc4 	movi	r2,255
   95b50:	11c09536 	bltu	r2,r7,95da8 <__umoddi3+0x500>
   95b54:	0007883a 	mov	r3,zero
   95b58:	0027883a 	mov	r19,zero
   95b5c:	003fa006 	br	959e0 <__umoddi3+0x138>
   95b60:	00804034 	movhi	r2,256
   95b64:	10bfffc4 	addi	r2,r2,-1
   95b68:	11809536 	bltu	r2,r6,95dc0 <__umoddi3+0x518>
   95b6c:	00800404 	movi	r2,16
   95b70:	1009883a 	mov	r4,r2
   95b74:	003f6406 	br	95908 <__umoddi3+0x60>
   95b78:	00803fc4 	movi	r2,255
   95b7c:	14009336 	bltu	r2,r16,95dcc <__umoddi3+0x524>
   95b80:	0005883a 	mov	r2,zero
   95b84:	0007883a 	mov	r3,zero
   95b88:	003fb206 	br	95a54 <__umoddi3+0x1ac>
   95b8c:	34c4d83a 	srl	r2,r6,r19
   95b90:	3c0e983a 	sll	r7,r7,r16
   95b94:	8ceed83a 	srl	r23,r17,r19
   95b98:	8c22983a 	sll	r17,r17,r16
   95b9c:	38a8b03a 	or	r20,r7,r2
   95ba0:	a02ad43a 	srli	r21,r20,16
   95ba4:	94c4d83a 	srl	r2,r18,r19
   95ba8:	b809883a 	mov	r4,r23
   95bac:	a80b883a 	mov	r5,r21
   95bb0:	88a2b03a 	or	r17,r17,r2
   95bb4:	342c983a 	sll	r22,r6,r16
   95bb8:	008cf400 	call	8cf40 <__umodsi3>
   95bbc:	b809883a 	mov	r4,r23
   95bc0:	a80b883a 	mov	r5,r21
   95bc4:	d8800015 	stw	r2,0(sp)
   95bc8:	008cf380 	call	8cf38 <__udivsi3>
   95bcc:	d8c00017 	ldw	r3,0(sp)
   95bd0:	102f883a 	mov	r23,r2
   95bd4:	a73fffcc 	andi	fp,r20,65535
   95bd8:	180a943a 	slli	r5,r3,16
   95bdc:	8804d43a 	srli	r2,r17,16
   95be0:	bf09383a 	mul	r4,r23,fp
   95be4:	9424983a 	sll	r18,r18,r16
   95be8:	288ab03a 	or	r5,r5,r2
   95bec:	2900042e 	bgeu	r5,r4,95c00 <__umoddi3+0x358>
   95bf0:	2d0b883a 	add	r5,r5,r20
   95bf4:	b8bfffc4 	addi	r2,r23,-1
   95bf8:	2d00812e 	bgeu	r5,r20,95e00 <__umoddi3+0x558>
   95bfc:	102f883a 	mov	r23,r2
   95c00:	2907c83a 	sub	r3,r5,r4
   95c04:	1809883a 	mov	r4,r3
   95c08:	a80b883a 	mov	r5,r21
   95c0c:	d8c00015 	stw	r3,0(sp)
   95c10:	008cf400 	call	8cf40 <__umodsi3>
   95c14:	d8c00017 	ldw	r3,0(sp)
   95c18:	a80b883a 	mov	r5,r21
   95c1c:	d8800015 	stw	r2,0(sp)
   95c20:	1809883a 	mov	r4,r3
   95c24:	008cf380 	call	8cf38 <__udivsi3>
   95c28:	d9800017 	ldw	r6,0(sp)
   95c2c:	8c7fffcc 	andi	r17,r17,65535
   95c30:	3008943a 	slli	r4,r6,16
   95c34:	170d383a 	mul	r6,r2,fp
   95c38:	2448b03a 	or	r4,r4,r17
   95c3c:	2180042e 	bgeu	r4,r6,95c50 <__umoddi3+0x3a8>
   95c40:	2509883a 	add	r4,r4,r20
   95c44:	10ffffc4 	addi	r3,r2,-1
   95c48:	2500692e 	bgeu	r4,r20,95df0 <__umoddi3+0x548>
   95c4c:	1805883a 	mov	r2,r3
   95c50:	b82e943a 	slli	r23,r23,16
   95c54:	b010d43a 	srli	r8,r22,16
   95c58:	b1ffffcc 	andi	r7,r22,65535
   95c5c:	15eeb03a 	or	r23,r2,r23
   95c60:	b8bfffcc 	andi	r2,r23,65535
   95c64:	b82ed43a 	srli	r23,r23,16
   95c68:	11c7383a 	mul	r3,r2,r7
   95c6c:	1205383a 	mul	r2,r2,r8
   95c70:	b9cf383a 	mul	r7,r23,r7
   95c74:	400b883a 	mov	r5,r8
   95c78:	1810d43a 	srli	r8,r3,16
   95c7c:	3885883a 	add	r2,r7,r2
   95c80:	2189c83a 	sub	r4,r4,r6
   95c84:	1205883a 	add	r2,r2,r8
   95c88:	b94b383a 	mul	r5,r23,r5
   95c8c:	11c0022e 	bgeu	r2,r7,95c98 <__umoddi3+0x3f0>
   95c90:	01800074 	movhi	r6,1
   95c94:	298b883a 	add	r5,r5,r6
   95c98:	100cd43a 	srli	r6,r2,16
   95c9c:	1004943a 	slli	r2,r2,16
   95ca0:	18ffffcc 	andi	r3,r3,65535
   95ca4:	298b883a 	add	r5,r5,r6
   95ca8:	10c5883a 	add	r2,r2,r3
   95cac:	21403836 	bltu	r4,r5,95d90 <__umoddi3+0x4e8>
   95cb0:	21405c26 	beq	r4,r5,95e24 <__umoddi3+0x57c>
   95cb4:	2147c83a 	sub	r3,r4,r5
   95cb8:	102d883a 	mov	r22,r2
   95cbc:	95adc83a 	sub	r22,r18,r22
   95cc0:	95a5803a 	cmpltu	r18,r18,r22
   95cc4:	1c87c83a 	sub	r3,r3,r18
   95cc8:	1cc4983a 	sll	r2,r3,r19
   95ccc:	b42cd83a 	srl	r22,r22,r16
   95cd0:	1c06d83a 	srl	r3,r3,r16
   95cd4:	1584b03a 	or	r2,r2,r22
   95cd8:	003f9006 	br	95b1c <__umoddi3+0x274>
   95cdc:	002b883a 	mov	r21,zero
   95ce0:	003f1706 	br	95940 <__umoddi3+0x98>
   95ce4:	8560983a 	sll	r16,r16,r21
   95ce8:	88e6d83a 	srl	r19,r17,r3
   95cec:	90c6d83a 	srl	r3,r18,r3
   95cf0:	8028d43a 	srli	r20,r16,16
   95cf4:	8d62983a 	sll	r17,r17,r21
   95cf8:	9809883a 	mov	r4,r19
   95cfc:	a00b883a 	mov	r5,r20
   95d00:	88eeb03a 	or	r23,r17,r3
   95d04:	008cf400 	call	8cf40 <__umodsi3>
   95d08:	9809883a 	mov	r4,r19
   95d0c:	a00b883a 	mov	r5,r20
   95d10:	1023883a 	mov	r17,r2
   95d14:	008cf380 	call	8cf38 <__udivsi3>
   95d18:	85bfffcc 	andi	r22,r16,65535
   95d1c:	880a943a 	slli	r5,r17,16
   95d20:	b806d43a 	srli	r3,r23,16
   95d24:	1585383a 	mul	r2,r2,r22
   95d28:	9566983a 	sll	r19,r18,r21
   95d2c:	28cab03a 	or	r5,r5,r3
   95d30:	2880042e 	bgeu	r5,r2,95d44 <__umoddi3+0x49c>
   95d34:	2c0b883a 	add	r5,r5,r16
   95d38:	2c000236 	bltu	r5,r16,95d44 <__umoddi3+0x49c>
   95d3c:	2880012e 	bgeu	r5,r2,95d44 <__umoddi3+0x49c>
   95d40:	2c0b883a 	add	r5,r5,r16
   95d44:	28a5c83a 	sub	r18,r5,r2
   95d48:	9009883a 	mov	r4,r18
   95d4c:	a00b883a 	mov	r5,r20
   95d50:	008cf400 	call	8cf40 <__umodsi3>
   95d54:	1023883a 	mov	r17,r2
   95d58:	9009883a 	mov	r4,r18
   95d5c:	a00b883a 	mov	r5,r20
   95d60:	008cf380 	call	8cf38 <__udivsi3>
   95d64:	8822943a 	slli	r17,r17,16
   95d68:	1585383a 	mul	r2,r2,r22
   95d6c:	bdffffcc 	andi	r23,r23,65535
   95d70:	8de2b03a 	or	r17,r17,r23
   95d74:	8880042e 	bgeu	r17,r2,95d88 <__umoddi3+0x4e0>
   95d78:	8c23883a 	add	r17,r17,r16
   95d7c:	8c000236 	bltu	r17,r16,95d88 <__umoddi3+0x4e0>
   95d80:	8880012e 	bgeu	r17,r2,95d88 <__umoddi3+0x4e0>
   95d84:	8c23883a 	add	r17,r17,r16
   95d88:	88a3c83a 	sub	r17,r17,r2
   95d8c:	003f3d06 	br	95a84 <__umoddi3+0x1dc>
   95d90:	15adc83a 	sub	r22,r2,r22
   95d94:	2d07c83a 	sub	r3,r5,r20
   95d98:	1585803a 	cmpltu	r2,r2,r22
   95d9c:	1887c83a 	sub	r3,r3,r2
   95da0:	20c7c83a 	sub	r3,r4,r3
   95da4:	003fc506 	br	95cbc <__umoddi3+0x414>
   95da8:	00c00204 	movi	r3,8
   95dac:	1827883a 	mov	r19,r3
   95db0:	003f0b06 	br	959e0 <__umoddi3+0x138>
   95db4:	00c00604 	movi	r3,24
   95db8:	1827883a 	mov	r19,r3
   95dbc:	003f0806 	br	959e0 <__umoddi3+0x138>
   95dc0:	00800604 	movi	r2,24
   95dc4:	1009883a 	mov	r4,r2
   95dc8:	003ecf06 	br	95908 <__umoddi3+0x60>
   95dcc:	00800204 	movi	r2,8
   95dd0:	1007883a 	mov	r3,r2
   95dd4:	003f1f06 	br	95a54 <__umoddi3+0x1ac>
   95dd8:	00800604 	movi	r2,24
   95ddc:	1007883a 	mov	r3,r2
   95de0:	003f1c06 	br	95a54 <__umoddi3+0x1ac>
   95de4:	00800204 	movi	r2,8
   95de8:	1009883a 	mov	r4,r2
   95dec:	003ec606 	br	95908 <__umoddi3+0x60>
   95df0:	21bf962e 	bgeu	r4,r6,95c4c <__umoddi3+0x3a4>
   95df4:	10bfff84 	addi	r2,r2,-2
   95df8:	2509883a 	add	r4,r4,r20
   95dfc:	003f9406 	br	95c50 <__umoddi3+0x3a8>
   95e00:	293f7e2e 	bgeu	r5,r4,95bfc <__umoddi3+0x354>
   95e04:	bdffff84 	addi	r23,r23,-2
   95e08:	2d0b883a 	add	r5,r5,r20
   95e0c:	003f7c06 	br	95c00 <__umoddi3+0x358>
   95e10:	1c07883a 	add	r3,r3,r16
   95e14:	003f2a06 	br	95ac0 <__umoddi3+0x218>
   95e18:	9005883a 	mov	r2,r18
   95e1c:	a007883a 	mov	r3,r20
   95e20:	003f3e06 	br	95b1c <__umoddi3+0x274>
   95e24:	90bfda36 	bltu	r18,r2,95d90 <__umoddi3+0x4e8>
   95e28:	102d883a 	mov	r22,r2
   95e2c:	0007883a 	mov	r3,zero
   95e30:	003fa206 	br	95cbc <__umoddi3+0x414>

00095e34 <_fpadd_parts>:
   95e34:	2005883a 	mov	r2,r4
   95e38:	21000017 	ldw	r4,0(r4)
   95e3c:	01c00044 	movi	r7,1
   95e40:	3900622e 	bgeu	r7,r4,95fcc <_fpadd_parts+0x198>
   95e44:	28c00017 	ldw	r3,0(r5)
   95e48:	38c05f2e 	bgeu	r7,r3,95fc8 <_fpadd_parts+0x194>
   95e4c:	01c00104 	movi	r7,4
   95e50:	21c0c626 	beq	r4,r7,9616c <_fpadd_parts+0x338>
   95e54:	19c05c26 	beq	r3,r7,95fc8 <_fpadd_parts+0x194>
   95e58:	01c00084 	movi	r7,2
   95e5c:	19c06b26 	beq	r3,r7,9600c <_fpadd_parts+0x1d8>
   95e60:	21c05926 	beq	r4,r7,95fc8 <_fpadd_parts+0x194>
   95e64:	11c00217 	ldw	r7,8(r2)
   95e68:	2ac00217 	ldw	r11,8(r5)
   95e6c:	13000317 	ldw	r12,12(r2)
   95e70:	13400417 	ldw	r13,16(r2)
   95e74:	3ac9c83a 	sub	r4,r7,r11
   95e78:	2a000317 	ldw	r8,12(r5)
   95e7c:	2a400417 	ldw	r9,16(r5)
   95e80:	2015883a 	mov	r10,r4
   95e84:	20007516 	blt	r4,zero,9605c <_fpadd_parts+0x228>
   95e88:	00c00fc4 	movi	r3,63
   95e8c:	1a805016 	blt	r3,r10,95fd0 <_fpadd_parts+0x19c>
   95e90:	0100870e 	bge	zero,r4,960b0 <_fpadd_parts+0x27c>
   95e94:	50fff804 	addi	r3,r10,-32
   95e98:	18009916 	blt	r3,zero,96100 <_fpadd_parts+0x2cc>
   95e9c:	48d6d83a 	srl	r11,r9,r3
   95ea0:	001d883a 	mov	r14,zero
   95ea4:	18009e16 	blt	r3,zero,96120 <_fpadd_parts+0x2ec>
   95ea8:	01000044 	movi	r4,1
   95eac:	20c6983a 	sll	r3,r4,r3
   95eb0:	0015883a 	mov	r10,zero
   95eb4:	513fffc4 	addi	r4,r10,-1
   95eb8:	2295403a 	cmpgeu	r10,r4,r10
   95ebc:	1a87c83a 	sub	r3,r3,r10
   95ec0:	1a52703a 	and	r9,r3,r9
   95ec4:	2210703a 	and	r8,r4,r8
   95ec8:	4250b03a 	or	r8,r8,r9
   95ecc:	4010c03a 	cmpne	r8,r8,zero
   95ed0:	42d0b03a 	or	r8,r8,r11
   95ed4:	7013883a 	mov	r9,r14
   95ed8:	11000117 	ldw	r4,4(r2)
   95edc:	28800117 	ldw	r2,4(r5)
   95ee0:	20804126 	beq	r4,r2,95fe8 <_fpadd_parts+0x1b4>
   95ee4:	20006326 	beq	r4,zero,96074 <_fpadd_parts+0x240>
   95ee8:	4305c83a 	sub	r2,r8,r12
   95eec:	4091803a 	cmpltu	r8,r8,r2
   95ef0:	4b47c83a 	sub	r3,r9,r13
   95ef4:	1a07c83a 	sub	r3,r3,r8
   95ef8:	18006316 	blt	r3,zero,96088 <_fpadd_parts+0x254>
   95efc:	30000115 	stw	zero,4(r6)
   95f00:	31c00215 	stw	r7,8(r6)
   95f04:	30800315 	stw	r2,12(r6)
   95f08:	30c00415 	stw	r3,16(r6)
   95f0c:	11ffffc4 	addi	r7,r2,-1
   95f10:	388b403a 	cmpgeu	r5,r7,r2
   95f14:	194bc83a 	sub	r5,r3,r5
   95f18:	01040034 	movhi	r4,4096
   95f1c:	213fffc4 	addi	r4,r4,-1
   95f20:	21401736 	bltu	r4,r5,95f80 <_fpadd_parts+0x14c>
   95f24:	29008226 	beq	r5,r4,96130 <_fpadd_parts+0x2fc>
   95f28:	31400217 	ldw	r5,8(r6)
   95f2c:	02840034 	movhi	r10,4096
   95f30:	52bfffc4 	addi	r10,r10,-1
   95f34:	033fff84 	movi	r12,-2
   95f38:	297fffc4 	addi	r5,r5,-1
   95f3c:	00000106 	br	95f44 <_fpadd_parts+0x110>
   95f40:	3a804a26 	beq	r7,r10,9606c <_fpadd_parts+0x238>
   95f44:	1089883a 	add	r4,r2,r2
   95f48:	2091803a 	cmpltu	r8,r4,r2
   95f4c:	18c7883a 	add	r3,r3,r3
   95f50:	227fffc4 	addi	r9,r4,-1
   95f54:	40d1883a 	add	r8,r8,r3
   95f58:	490f403a 	cmpgeu	r7,r9,r4
   95f5c:	41cfc83a 	sub	r7,r8,r7
   95f60:	2817883a 	mov	r11,r5
   95f64:	2005883a 	mov	r2,r4
   95f68:	4007883a 	mov	r3,r8
   95f6c:	297fffc4 	addi	r5,r5,-1
   95f70:	51fff32e 	bgeu	r10,r7,95f40 <_fpadd_parts+0x10c>
   95f74:	31000315 	stw	r4,12(r6)
   95f78:	32000415 	stw	r8,16(r6)
   95f7c:	32c00215 	stw	r11,8(r6)
   95f80:	010000c4 	movi	r4,3
   95f84:	31000015 	stw	r4,0(r6)
   95f88:	01080034 	movhi	r4,8192
   95f8c:	213fffc4 	addi	r4,r4,-1
   95f90:	20c00b2e 	bgeu	r4,r3,95fc0 <_fpadd_parts+0x18c>
   95f94:	180e97fa 	slli	r7,r3,31
   95f98:	1008d07a 	srli	r4,r2,1
   95f9c:	31400217 	ldw	r5,8(r6)
   95fa0:	1806d07a 	srli	r3,r3,1
   95fa4:	1080004c 	andi	r2,r2,1
   95fa8:	3908b03a 	or	r4,r7,r4
   95fac:	1108b03a 	or	r4,r2,r4
   95fb0:	29400044 	addi	r5,r5,1
   95fb4:	31000315 	stw	r4,12(r6)
   95fb8:	30c00415 	stw	r3,16(r6)
   95fbc:	31400215 	stw	r5,8(r6)
   95fc0:	3005883a 	mov	r2,r6
   95fc4:	f800283a 	ret
   95fc8:	2805883a 	mov	r2,r5
   95fcc:	f800283a 	ret
   95fd0:	59c01e0e 	bge	r11,r7,9604c <_fpadd_parts+0x218>
   95fd4:	11000117 	ldw	r4,4(r2)
   95fd8:	28800117 	ldw	r2,4(r5)
   95fdc:	0011883a 	mov	r8,zero
   95fe0:	0013883a 	mov	r9,zero
   95fe4:	20bfbf1e 	bne	r4,r2,95ee4 <_fpadd_parts+0xb0>
   95fe8:	4305883a 	add	r2,r8,r12
   95fec:	1207803a 	cmpltu	r3,r2,r8
   95ff0:	4b53883a 	add	r9,r9,r13
   95ff4:	1a47883a 	add	r3,r3,r9
   95ff8:	31000115 	stw	r4,4(r6)
   95ffc:	31c00215 	stw	r7,8(r6)
   96000:	30800315 	stw	r2,12(r6)
   96004:	30c00415 	stw	r3,16(r6)
   96008:	003fdd06 	br	95f80 <_fpadd_parts+0x14c>
   9600c:	20ffef1e 	bne	r4,r3,95fcc <_fpadd_parts+0x198>
   96010:	31000015 	stw	r4,0(r6)
   96014:	10c00117 	ldw	r3,4(r2)
   96018:	30c00115 	stw	r3,4(r6)
   9601c:	10c00217 	ldw	r3,8(r2)
   96020:	11000117 	ldw	r4,4(r2)
   96024:	29400117 	ldw	r5,4(r5)
   96028:	30c00215 	stw	r3,8(r6)
   9602c:	10c00317 	ldw	r3,12(r2)
   96030:	2908703a 	and	r4,r5,r4
   96034:	30c00315 	stw	r3,12(r6)
   96038:	10c00417 	ldw	r3,16(r2)
   9603c:	31000115 	stw	r4,4(r6)
   96040:	3005883a 	mov	r2,r6
   96044:	30c00415 	stw	r3,16(r6)
   96048:	f800283a 	ret
   9604c:	580f883a 	mov	r7,r11
   96050:	0019883a 	mov	r12,zero
   96054:	001b883a 	mov	r13,zero
   96058:	003f9f06 	br	95ed8 <_fpadd_parts+0xa4>
   9605c:	0115c83a 	sub	r10,zero,r4
   96060:	00c00fc4 	movi	r3,63
   96064:	1abfda16 	blt	r3,r10,95fd0 <_fpadd_parts+0x19c>
   96068:	003f8906 	br	95e90 <_fpadd_parts+0x5c>
   9606c:	627fb52e 	bgeu	r12,r9,95f44 <_fpadd_parts+0x110>
   96070:	003fc006 	br	95f74 <_fpadd_parts+0x140>
   96074:	6205c83a 	sub	r2,r12,r8
   96078:	6099803a 	cmpltu	r12,r12,r2
   9607c:	6a47c83a 	sub	r3,r13,r9
   96080:	1b07c83a 	sub	r3,r3,r12
   96084:	183f9d0e 	bge	r3,zero,95efc <_fpadd_parts+0xc8>
   96088:	0085c83a 	sub	r2,zero,r2
   9608c:	1008c03a 	cmpne	r4,r2,zero
   96090:	00c7c83a 	sub	r3,zero,r3
   96094:	1907c83a 	sub	r3,r3,r4
   96098:	01000044 	movi	r4,1
   9609c:	31000115 	stw	r4,4(r6)
   960a0:	31c00215 	stw	r7,8(r6)
   960a4:	30800315 	stw	r2,12(r6)
   960a8:	30c00415 	stw	r3,16(r6)
   960ac:	003f9706 	br	95f0c <_fpadd_parts+0xd8>
   960b0:	203f8926 	beq	r4,zero,95ed8 <_fpadd_parts+0xa4>
   960b4:	50fff804 	addi	r3,r10,-32
   960b8:	3a8f883a 	add	r7,r7,r10
   960bc:	18002316 	blt	r3,zero,9614c <_fpadd_parts+0x318>
   960c0:	68d6d83a 	srl	r11,r13,r3
   960c4:	001d883a 	mov	r14,zero
   960c8:	18001c16 	blt	r3,zero,9613c <_fpadd_parts+0x308>
   960cc:	01000044 	movi	r4,1
   960d0:	20c6983a 	sll	r3,r4,r3
   960d4:	0015883a 	mov	r10,zero
   960d8:	513fffc4 	addi	r4,r10,-1
   960dc:	2295403a 	cmpgeu	r10,r4,r10
   960e0:	1a87c83a 	sub	r3,r3,r10
   960e4:	1b5a703a 	and	r13,r3,r13
   960e8:	2318703a 	and	r12,r4,r12
   960ec:	6358b03a 	or	r12,r12,r13
   960f0:	6018c03a 	cmpne	r12,r12,zero
   960f4:	62d8b03a 	or	r12,r12,r11
   960f8:	701b883a 	mov	r13,r14
   960fc:	003f7606 	br	95ed8 <_fpadd_parts+0xa4>
   96100:	4808907a 	slli	r4,r9,1
   96104:	02c007c4 	movi	r11,31
   96108:	5a97c83a 	sub	r11,r11,r10
   9610c:	22c8983a 	sll	r4,r4,r11
   96110:	4296d83a 	srl	r11,r8,r10
   96114:	4a9cd83a 	srl	r14,r9,r10
   96118:	22d6b03a 	or	r11,r4,r11
   9611c:	003f6106 	br	95ea4 <_fpadd_parts+0x70>
   96120:	00c00044 	movi	r3,1
   96124:	1a94983a 	sll	r10,r3,r10
   96128:	0007883a 	mov	r3,zero
   9612c:	003f6106 	br	95eb4 <_fpadd_parts+0x80>
   96130:	013fff84 	movi	r4,-2
   96134:	21ff7c2e 	bgeu	r4,r7,95f28 <_fpadd_parts+0xf4>
   96138:	003f9106 	br	95f80 <_fpadd_parts+0x14c>
   9613c:	00c00044 	movi	r3,1
   96140:	1a94983a 	sll	r10,r3,r10
   96144:	0007883a 	mov	r3,zero
   96148:	003fe306 	br	960d8 <_fpadd_parts+0x2a4>
   9614c:	6816907a 	slli	r11,r13,1
   96150:	010007c4 	movi	r4,31
   96154:	2289c83a 	sub	r4,r4,r10
   96158:	5908983a 	sll	r4,r11,r4
   9615c:	6296d83a 	srl	r11,r12,r10
   96160:	6a9cd83a 	srl	r14,r13,r10
   96164:	22d6b03a 	or	r11,r4,r11
   96168:	003fd706 	br	960c8 <_fpadd_parts+0x294>
   9616c:	193f971e 	bne	r3,r4,95fcc <_fpadd_parts+0x198>
   96170:	11000117 	ldw	r4,4(r2)
   96174:	28c00117 	ldw	r3,4(r5)
   96178:	20ff9426 	beq	r4,r3,95fcc <_fpadd_parts+0x198>
   9617c:	008002b4 	movhi	r2,10
   96180:	10b5c704 	addi	r2,r2,-10468
   96184:	f800283a 	ret

00096188 <__adddf3>:
   96188:	deffec04 	addi	sp,sp,-80
   9618c:	d9001115 	stw	r4,68(sp)
   96190:	d9401215 	stw	r5,72(sp)
   96194:	d9001104 	addi	r4,sp,68
   96198:	d9400a04 	addi	r5,sp,40
   9619c:	dfc01315 	stw	ra,76(sp)
   961a0:	d9c01015 	stw	r7,64(sp)
   961a4:	d9800f15 	stw	r6,60(sp)
   961a8:	0096b740 	call	96b74 <__unpack_d>
   961ac:	d9000f04 	addi	r4,sp,60
   961b0:	d9400504 	addi	r5,sp,20
   961b4:	0096b740 	call	96b74 <__unpack_d>
   961b8:	d9000a04 	addi	r4,sp,40
   961bc:	d9400504 	addi	r5,sp,20
   961c0:	d80d883a 	mov	r6,sp
   961c4:	0095e340 	call	95e34 <_fpadd_parts>
   961c8:	1009883a 	mov	r4,r2
   961cc:	008d2480 	call	8d248 <__pack_d>
   961d0:	dfc01317 	ldw	ra,76(sp)
   961d4:	dec01404 	addi	sp,sp,80
   961d8:	f800283a 	ret

000961dc <__subdf3>:
   961dc:	deffec04 	addi	sp,sp,-80
   961e0:	d9001115 	stw	r4,68(sp)
   961e4:	d9401215 	stw	r5,72(sp)
   961e8:	d9001104 	addi	r4,sp,68
   961ec:	d9400a04 	addi	r5,sp,40
   961f0:	dfc01315 	stw	ra,76(sp)
   961f4:	d9c01015 	stw	r7,64(sp)
   961f8:	d9800f15 	stw	r6,60(sp)
   961fc:	0096b740 	call	96b74 <__unpack_d>
   96200:	d9000f04 	addi	r4,sp,60
   96204:	d9400504 	addi	r5,sp,20
   96208:	0096b740 	call	96b74 <__unpack_d>
   9620c:	d8800617 	ldw	r2,24(sp)
   96210:	d9000a04 	addi	r4,sp,40
   96214:	d9400504 	addi	r5,sp,20
   96218:	d80d883a 	mov	r6,sp
   9621c:	1080005c 	xori	r2,r2,1
   96220:	d8800615 	stw	r2,24(sp)
   96224:	0095e340 	call	95e34 <_fpadd_parts>
   96228:	1009883a 	mov	r4,r2
   9622c:	008d2480 	call	8d248 <__pack_d>
   96230:	dfc01317 	ldw	ra,76(sp)
   96234:	dec01404 	addi	sp,sp,80
   96238:	f800283a 	ret

0009623c <__muldf3>:
   9623c:	deffe404 	addi	sp,sp,-112
   96240:	d9001115 	stw	r4,68(sp)
   96244:	d9401215 	stw	r5,72(sp)
   96248:	d9001104 	addi	r4,sp,68
   9624c:	d9400a04 	addi	r5,sp,40
   96250:	dfc01b15 	stw	ra,108(sp)
   96254:	d9800f15 	stw	r6,60(sp)
   96258:	d9c01015 	stw	r7,64(sp)
   9625c:	ddc01a15 	stw	r23,104(sp)
   96260:	dd801915 	stw	r22,100(sp)
   96264:	dd401815 	stw	r21,96(sp)
   96268:	dd001715 	stw	r20,92(sp)
   9626c:	dcc01615 	stw	r19,88(sp)
   96270:	dc801515 	stw	r18,84(sp)
   96274:	dc401415 	stw	r17,80(sp)
   96278:	dc001315 	stw	r16,76(sp)
   9627c:	0096b740 	call	96b74 <__unpack_d>
   96280:	d9000f04 	addi	r4,sp,60
   96284:	d9400504 	addi	r5,sp,20
   96288:	0096b740 	call	96b74 <__unpack_d>
   9628c:	d8c00a17 	ldw	r3,40(sp)
   96290:	00800044 	movi	r2,1
   96294:	10c01136 	bltu	r2,r3,962dc <__muldf3+0xa0>
   96298:	d8c00b17 	ldw	r3,44(sp)
   9629c:	d8800617 	ldw	r2,24(sp)
   962a0:	d9000a04 	addi	r4,sp,40
   962a4:	1884c03a 	cmpne	r2,r3,r2
   962a8:	d8800b15 	stw	r2,44(sp)
   962ac:	008d2480 	call	8d248 <__pack_d>
   962b0:	dfc01b17 	ldw	ra,108(sp)
   962b4:	ddc01a17 	ldw	r23,104(sp)
   962b8:	dd801917 	ldw	r22,100(sp)
   962bc:	dd401817 	ldw	r21,96(sp)
   962c0:	dd001717 	ldw	r20,92(sp)
   962c4:	dcc01617 	ldw	r19,88(sp)
   962c8:	dc801517 	ldw	r18,84(sp)
   962cc:	dc401417 	ldw	r17,80(sp)
   962d0:	dc001317 	ldw	r16,76(sp)
   962d4:	dec01c04 	addi	sp,sp,112
   962d8:	f800283a 	ret
   962dc:	d9000517 	ldw	r4,20(sp)
   962e0:	11000636 	bltu	r2,r4,962fc <__muldf3+0xc0>
   962e4:	d8800617 	ldw	r2,24(sp)
   962e8:	d8c00b17 	ldw	r3,44(sp)
   962ec:	d9000504 	addi	r4,sp,20
   962f0:	1884c03a 	cmpne	r2,r3,r2
   962f4:	d8800615 	stw	r2,24(sp)
   962f8:	003fec06 	br	962ac <__muldf3+0x70>
   962fc:	00800104 	movi	r2,4
   96300:	1880051e 	bne	r3,r2,96318 <__muldf3+0xdc>
   96304:	00800084 	movi	r2,2
   96308:	20bfe31e 	bne	r4,r2,96298 <__muldf3+0x5c>
   9630c:	010002b4 	movhi	r4,10
   96310:	2135c704 	addi	r4,r4,-10468
   96314:	003fe506 	br	962ac <__muldf3+0x70>
   96318:	2080031e 	bne	r4,r2,96328 <__muldf3+0xec>
   9631c:	00800084 	movi	r2,2
   96320:	18bffa26 	beq	r3,r2,9630c <__muldf3+0xd0>
   96324:	003fef06 	br	962e4 <__muldf3+0xa8>
   96328:	00800084 	movi	r2,2
   9632c:	18bfda26 	beq	r3,r2,96298 <__muldf3+0x5c>
   96330:	20bfec26 	beq	r4,r2,962e4 <__muldf3+0xa8>
   96334:	dc000d17 	ldw	r16,52(sp)
   96338:	dd000817 	ldw	r20,32(sp)
   9633c:	dc800917 	ldw	r18,36(sp)
   96340:	8009883a 	mov	r4,r16
   96344:	000b883a 	mov	r5,zero
   96348:	a00d883a 	mov	r6,r20
   9634c:	000f883a 	mov	r7,zero
   96350:	008cf480 	call	8cf48 <__muldi3>
   96354:	dc400e17 	ldw	r17,56(sp)
   96358:	9009883a 	mov	r4,r18
   9635c:	800d883a 	mov	r6,r16
   96360:	000b883a 	mov	r5,zero
   96364:	000f883a 	mov	r7,zero
   96368:	102f883a 	mov	r23,r2
   9636c:	1827883a 	mov	r19,r3
   96370:	008cf480 	call	8cf48 <__muldi3>
   96374:	900d883a 	mov	r6,r18
   96378:	8809883a 	mov	r4,r17
   9637c:	000b883a 	mov	r5,zero
   96380:	000f883a 	mov	r7,zero
   96384:	102b883a 	mov	r21,r2
   96388:	1821883a 	mov	r16,r3
   9638c:	008cf480 	call	8cf48 <__muldi3>
   96390:	8809883a 	mov	r4,r17
   96394:	000b883a 	mov	r5,zero
   96398:	a00d883a 	mov	r6,r20
   9639c:	000f883a 	mov	r7,zero
   963a0:	102d883a 	mov	r22,r2
   963a4:	1825883a 	mov	r18,r3
   963a8:	008cf480 	call	8cf48 <__muldi3>
   963ac:	154b883a 	add	r5,r2,r21
   963b0:	2889803a 	cmpltu	r4,r5,r2
   963b4:	1c07883a 	add	r3,r3,r16
   963b8:	20c9883a 	add	r4,r4,r3
   963bc:	24004b36 	bltu	r4,r16,964ec <__muldf3+0x2b0>
   963c0:	8100011e 	bne	r16,r4,963c8 <__muldf3+0x18c>
   963c4:	2d404936 	bltu	r5,r21,964ec <__muldf3+0x2b0>
   963c8:	0011883a 	mov	r8,zero
   963cc:	0007883a 	mov	r3,zero
   963d0:	2ccb883a 	add	r5,r5,r19
   963d4:	b80d883a 	mov	r6,r23
   963d8:	2cc0012e 	bgeu	r5,r19,963e0 <__muldf3+0x1a4>
   963dc:	02000044 	movi	r8,1
   963e0:	258f883a 	add	r7,r4,r22
   963e4:	3909803a 	cmpltu	r4,r7,r4
   963e8:	da400c17 	ldw	r9,48(sp)
   963ec:	2489883a 	add	r4,r4,r18
   963f0:	d8800717 	ldw	r2,28(sp)
   963f4:	20c9883a 	add	r4,r4,r3
   963f8:	da800b17 	ldw	r10,44(sp)
   963fc:	d8c00617 	ldw	r3,24(sp)
   96400:	3a11883a 	add	r8,r7,r8
   96404:	4885883a 	add	r2,r9,r2
   96408:	50c6c03a 	cmpne	r3,r10,r3
   9640c:	41cf803a 	cmpltu	r7,r8,r7
   96410:	12400104 	addi	r9,r2,4
   96414:	d8c00115 	stw	r3,4(sp)
   96418:	3909883a 	add	r4,r7,r4
   9641c:	da400215 	stw	r9,8(sp)
   96420:	03480034 	movhi	r13,8192
   96424:	6b7fffc4 	addi	r13,r13,-1
   96428:	4007883a 	mov	r3,r8
   9642c:	6900102e 	bgeu	r13,r4,96470 <__muldf3+0x234>
   96430:	10800144 	addi	r2,r2,5
   96434:	180ed07a 	srli	r7,r3,1
   96438:	18c0004c 	andi	r3,r3,1
   9643c:	201097fa 	slli	r8,r4,31
   96440:	281697fa 	slli	r11,r5,31
   96444:	2008d07a 	srli	r4,r4,1
   96448:	3014d07a 	srli	r10,r6,1
   9644c:	2812d07a 	srli	r9,r5,1
   96450:	1019883a 	mov	r12,r2
   96454:	18000226 	beq	r3,zero,96460 <__muldf3+0x224>
   96458:	5a8cb03a 	or	r6,r11,r10
   9645c:	49600034 	orhi	r5,r9,32768
   96460:	41c6b03a 	or	r3,r8,r7
   96464:	10800044 	addi	r2,r2,1
   96468:	693ff236 	bltu	r13,r4,96434 <__muldf3+0x1f8>
   9646c:	db000215 	stw	r12,8(sp)
   96470:	03440034 	movhi	r13,4096
   96474:	6b7fffc4 	addi	r13,r13,-1
   96478:	69001336 	bltu	r13,r4,964c8 <__muldf3+0x28c>
   9647c:	d8800217 	ldw	r2,8(sp)
   96480:	10bfffc4 	addi	r2,r2,-1
   96484:	18d3883a 	add	r9,r3,r3
   96488:	48c7803a 	cmpltu	r3,r9,r3
   9648c:	2109883a 	add	r4,r4,r4
   96490:	190f883a 	add	r7,r3,r4
   96494:	3191883a 	add	r8,r6,r6
   96498:	4197803a 	cmpltu	r11,r8,r6
   9649c:	2955883a 	add	r10,r5,r5
   964a0:	1019883a 	mov	r12,r2
   964a4:	4807883a 	mov	r3,r9
   964a8:	3809883a 	mov	r4,r7
   964ac:	2800010e 	bge	r5,zero,964b4 <__muldf3+0x278>
   964b0:	48c00054 	ori	r3,r9,1
   964b4:	400d883a 	mov	r6,r8
   964b8:	5a8b883a 	add	r5,r11,r10
   964bc:	10bfffc4 	addi	r2,r2,-1
   964c0:	69fff02e 	bgeu	r13,r7,96484 <__muldf3+0x248>
   964c4:	db000215 	stw	r12,8(sp)
   964c8:	18803fcc 	andi	r2,r3,255
   964cc:	01c02004 	movi	r7,128
   964d0:	11c00926 	beq	r2,r7,964f8 <__muldf3+0x2bc>
   964d4:	008000c4 	movi	r2,3
   964d8:	d9000415 	stw	r4,16(sp)
   964dc:	d8c00315 	stw	r3,12(sp)
   964e0:	d8800015 	stw	r2,0(sp)
   964e4:	d809883a 	mov	r4,sp
   964e8:	003f7006 	br	962ac <__muldf3+0x70>
   964ec:	0011883a 	mov	r8,zero
   964f0:	00c00044 	movi	r3,1
   964f4:	003fb606 	br	963d0 <__muldf3+0x194>
   964f8:	19c0400c 	andi	r7,r3,256
   964fc:	383ff51e 	bne	r7,zero,964d4 <__muldf3+0x298>
   96500:	314ab03a 	or	r5,r6,r5
   96504:	283ff326 	beq	r5,zero,964d4 <__muldf3+0x298>
   96508:	1885883a 	add	r2,r3,r2
   9650c:	10cb803a 	cmpltu	r5,r2,r3
   96510:	00ffc004 	movi	r3,-256
   96514:	10c6703a 	and	r3,r2,r3
   96518:	2909883a 	add	r4,r5,r4
   9651c:	003fed06 	br	964d4 <__muldf3+0x298>

00096520 <__divdf3>:
   96520:	defff104 	addi	sp,sp,-60
   96524:	d9000c15 	stw	r4,48(sp)
   96528:	d9400d15 	stw	r5,52(sp)
   9652c:	d9000c04 	addi	r4,sp,48
   96530:	d9400504 	addi	r5,sp,20
   96534:	dfc00e15 	stw	ra,56(sp)
   96538:	d9800a15 	stw	r6,40(sp)
   9653c:	d9c00b15 	stw	r7,44(sp)
   96540:	0096b740 	call	96b74 <__unpack_d>
   96544:	d9000a04 	addi	r4,sp,40
   96548:	d80b883a 	mov	r5,sp
   9654c:	0096b740 	call	96b74 <__unpack_d>
   96550:	d8c00517 	ldw	r3,20(sp)
   96554:	00800044 	movi	r2,1
   96558:	10c00536 	bltu	r2,r3,96570 <__divdf3+0x50>
   9655c:	d9000504 	addi	r4,sp,20
   96560:	008d2480 	call	8d248 <__pack_d>
   96564:	dfc00e17 	ldw	ra,56(sp)
   96568:	dec00f04 	addi	sp,sp,60
   9656c:	f800283a 	ret
   96570:	d9000017 	ldw	r4,0(sp)
   96574:	11000536 	bltu	r2,r4,9658c <__divdf3+0x6c>
   96578:	d809883a 	mov	r4,sp
   9657c:	008d2480 	call	8d248 <__pack_d>
   96580:	dfc00e17 	ldw	ra,56(sp)
   96584:	dec00f04 	addi	sp,sp,60
   96588:	f800283a 	ret
   9658c:	d9800617 	ldw	r6,24(sp)
   96590:	d9400117 	ldw	r5,4(sp)
   96594:	00800104 	movi	r2,4
   96598:	314af03a 	xor	r5,r6,r5
   9659c:	d9400615 	stw	r5,24(sp)
   965a0:	18800226 	beq	r3,r2,965ac <__divdf3+0x8c>
   965a4:	01400084 	movi	r5,2
   965a8:	1940041e 	bne	r3,r5,965bc <__divdf3+0x9c>
   965ac:	193feb1e 	bne	r3,r4,9655c <__divdf3+0x3c>
   965b0:	010002b4 	movhi	r4,10
   965b4:	2135c704 	addi	r4,r4,-10468
   965b8:	003fe906 	br	96560 <__divdf3+0x40>
   965bc:	20803326 	beq	r4,r2,9668c <__divdf3+0x16c>
   965c0:	21403726 	beq	r4,r5,966a0 <__divdf3+0x180>
   965c4:	d8800217 	ldw	r2,8(sp)
   965c8:	d9000717 	ldw	r4,28(sp)
   965cc:	d8c00917 	ldw	r3,36(sp)
   965d0:	da000417 	ldw	r8,16(sp)
   965d4:	2089c83a 	sub	r4,r4,r2
   965d8:	d9000715 	stw	r4,28(sp)
   965dc:	d8800817 	ldw	r2,32(sp)
   965e0:	dbc00317 	ldw	r15,12(sp)
   965e4:	1a000236 	bltu	r3,r8,965f0 <__divdf3+0xd0>
   965e8:	40c0081e 	bne	r8,r3,9660c <__divdf3+0xec>
   965ec:	13c0072e 	bgeu	r2,r15,9660c <__divdf3+0xec>
   965f0:	108b883a 	add	r5,r2,r2
   965f4:	288d803a 	cmpltu	r6,r5,r2
   965f8:	18c7883a 	add	r3,r3,r3
   965fc:	213fffc4 	addi	r4,r4,-1
   96600:	2805883a 	mov	r2,r5
   96604:	30c7883a 	add	r3,r6,r3
   96608:	d9000715 	stw	r4,28(sp)
   9660c:	01400f44 	movi	r5,61
   96610:	000f883a 	mov	r7,zero
   96614:	01040034 	movhi	r4,4096
   96618:	0019883a 	mov	r12,zero
   9661c:	001b883a 	mov	r13,zero
   96620:	201697fa 	slli	r11,r4,31
   96624:	3814d07a 	srli	r10,r7,1
   96628:	297fffc4 	addi	r5,r5,-1
   9662c:	1a000936 	bltu	r3,r8,96654 <__divdf3+0x134>
   96630:	13cdc83a 	sub	r6,r2,r15
   96634:	1193803a 	cmpltu	r9,r2,r6
   96638:	1a1dc83a 	sub	r14,r3,r8
   9663c:	40c0011e 	bne	r8,r3,96644 <__divdf3+0x124>
   96640:	13c00436 	bltu	r2,r15,96654 <__divdf3+0x134>
   96644:	3005883a 	mov	r2,r6
   96648:	7247c83a 	sub	r3,r14,r9
   9664c:	61d8b03a 	or	r12,r12,r7
   96650:	691ab03a 	or	r13,r13,r4
   96654:	108d883a 	add	r6,r2,r2
   96658:	3093803a 	cmpltu	r9,r6,r2
   9665c:	18c7883a 	add	r3,r3,r3
   96660:	5a8eb03a 	or	r7,r11,r10
   96664:	2008d07a 	srli	r4,r4,1
   96668:	3005883a 	mov	r2,r6
   9666c:	48c7883a 	add	r3,r9,r3
   96670:	283feb1e 	bne	r5,zero,96620 <__divdf3+0x100>
   96674:	61003fcc 	andi	r4,r12,255
   96678:	01402004 	movi	r5,128
   9667c:	21400b26 	beq	r4,r5,966ac <__divdf3+0x18c>
   96680:	db000815 	stw	r12,32(sp)
   96684:	db400915 	stw	r13,36(sp)
   96688:	003fb406 	br	9655c <__divdf3+0x3c>
   9668c:	d8000815 	stw	zero,32(sp)
   96690:	d8000915 	stw	zero,36(sp)
   96694:	d8000715 	stw	zero,28(sp)
   96698:	d9000504 	addi	r4,sp,20
   9669c:	003fb006 	br	96560 <__divdf3+0x40>
   966a0:	d8800515 	stw	r2,20(sp)
   966a4:	d9000504 	addi	r4,sp,20
   966a8:	003fad06 	br	96560 <__divdf3+0x40>
   966ac:	6140400c 	andi	r5,r12,256
   966b0:	283ff31e 	bne	r5,zero,96680 <__divdf3+0x160>
   966b4:	30c4b03a 	or	r2,r6,r3
   966b8:	103ff126 	beq	r2,zero,96680 <__divdf3+0x160>
   966bc:	6109883a 	add	r4,r12,r4
   966c0:	2305803a 	cmpltu	r2,r4,r12
   966c4:	033fc004 	movi	r12,-256
   966c8:	2318703a 	and	r12,r4,r12
   966cc:	135b883a 	add	r13,r2,r13
   966d0:	003feb06 	br	96680 <__divdf3+0x160>

000966d4 <__eqdf2>:
   966d4:	defff104 	addi	sp,sp,-60
   966d8:	d9000c15 	stw	r4,48(sp)
   966dc:	d9400d15 	stw	r5,52(sp)
   966e0:	d9000c04 	addi	r4,sp,48
   966e4:	d9400504 	addi	r5,sp,20
   966e8:	dfc00e15 	stw	ra,56(sp)
   966ec:	d9800a15 	stw	r6,40(sp)
   966f0:	d9c00b15 	stw	r7,44(sp)
   966f4:	0096b740 	call	96b74 <__unpack_d>
   966f8:	d9000a04 	addi	r4,sp,40
   966fc:	d80b883a 	mov	r5,sp
   96700:	0096b740 	call	96b74 <__unpack_d>
   96704:	d8c00517 	ldw	r3,20(sp)
   96708:	00800044 	movi	r2,1
   9670c:	10c0052e 	bgeu	r2,r3,96724 <__eqdf2+0x50>
   96710:	d8c00017 	ldw	r3,0(sp)
   96714:	10c0032e 	bgeu	r2,r3,96724 <__eqdf2+0x50>
   96718:	d9000504 	addi	r4,sp,20
   9671c:	d80b883a 	mov	r5,sp
   96720:	0096c780 	call	96c78 <__fpcmp_parts_d>
   96724:	dfc00e17 	ldw	ra,56(sp)
   96728:	dec00f04 	addi	sp,sp,60
   9672c:	f800283a 	ret

00096730 <__nedf2>:
   96730:	defff104 	addi	sp,sp,-60
   96734:	d9000c15 	stw	r4,48(sp)
   96738:	d9400d15 	stw	r5,52(sp)
   9673c:	d9000c04 	addi	r4,sp,48
   96740:	d9400504 	addi	r5,sp,20
   96744:	dfc00e15 	stw	ra,56(sp)
   96748:	d9800a15 	stw	r6,40(sp)
   9674c:	d9c00b15 	stw	r7,44(sp)
   96750:	0096b740 	call	96b74 <__unpack_d>
   96754:	d9000a04 	addi	r4,sp,40
   96758:	d80b883a 	mov	r5,sp
   9675c:	0096b740 	call	96b74 <__unpack_d>
   96760:	d8c00517 	ldw	r3,20(sp)
   96764:	00800044 	movi	r2,1
   96768:	10c0052e 	bgeu	r2,r3,96780 <__nedf2+0x50>
   9676c:	d8c00017 	ldw	r3,0(sp)
   96770:	10c0032e 	bgeu	r2,r3,96780 <__nedf2+0x50>
   96774:	d9000504 	addi	r4,sp,20
   96778:	d80b883a 	mov	r5,sp
   9677c:	0096c780 	call	96c78 <__fpcmp_parts_d>
   96780:	dfc00e17 	ldw	ra,56(sp)
   96784:	dec00f04 	addi	sp,sp,60
   96788:	f800283a 	ret

0009678c <__gtdf2>:
   9678c:	defff104 	addi	sp,sp,-60
   96790:	d9000c15 	stw	r4,48(sp)
   96794:	d9400d15 	stw	r5,52(sp)
   96798:	d9000c04 	addi	r4,sp,48
   9679c:	d9400504 	addi	r5,sp,20
   967a0:	dfc00e15 	stw	ra,56(sp)
   967a4:	d9800a15 	stw	r6,40(sp)
   967a8:	d9c00b15 	stw	r7,44(sp)
   967ac:	0096b740 	call	96b74 <__unpack_d>
   967b0:	d9000a04 	addi	r4,sp,40
   967b4:	d80b883a 	mov	r5,sp
   967b8:	0096b740 	call	96b74 <__unpack_d>
   967bc:	d8c00517 	ldw	r3,20(sp)
   967c0:	00800044 	movi	r2,1
   967c4:	10c0082e 	bgeu	r2,r3,967e8 <__gtdf2+0x5c>
   967c8:	d8c00017 	ldw	r3,0(sp)
   967cc:	10c0062e 	bgeu	r2,r3,967e8 <__gtdf2+0x5c>
   967d0:	d9000504 	addi	r4,sp,20
   967d4:	d80b883a 	mov	r5,sp
   967d8:	0096c780 	call	96c78 <__fpcmp_parts_d>
   967dc:	dfc00e17 	ldw	ra,56(sp)
   967e0:	dec00f04 	addi	sp,sp,60
   967e4:	f800283a 	ret
   967e8:	00bfffc4 	movi	r2,-1
   967ec:	003ffb06 	br	967dc <__gtdf2+0x50>

000967f0 <__gedf2>:
   967f0:	defff104 	addi	sp,sp,-60
   967f4:	d9000c15 	stw	r4,48(sp)
   967f8:	d9400d15 	stw	r5,52(sp)
   967fc:	d9000c04 	addi	r4,sp,48
   96800:	d9400504 	addi	r5,sp,20
   96804:	dfc00e15 	stw	ra,56(sp)
   96808:	d9800a15 	stw	r6,40(sp)
   9680c:	d9c00b15 	stw	r7,44(sp)
   96810:	0096b740 	call	96b74 <__unpack_d>
   96814:	d9000a04 	addi	r4,sp,40
   96818:	d80b883a 	mov	r5,sp
   9681c:	0096b740 	call	96b74 <__unpack_d>
   96820:	d8c00517 	ldw	r3,20(sp)
   96824:	00800044 	movi	r2,1
   96828:	10c0082e 	bgeu	r2,r3,9684c <__gedf2+0x5c>
   9682c:	d8c00017 	ldw	r3,0(sp)
   96830:	10c0062e 	bgeu	r2,r3,9684c <__gedf2+0x5c>
   96834:	d9000504 	addi	r4,sp,20
   96838:	d80b883a 	mov	r5,sp
   9683c:	0096c780 	call	96c78 <__fpcmp_parts_d>
   96840:	dfc00e17 	ldw	ra,56(sp)
   96844:	dec00f04 	addi	sp,sp,60
   96848:	f800283a 	ret
   9684c:	00bfffc4 	movi	r2,-1
   96850:	003ffb06 	br	96840 <__gedf2+0x50>

00096854 <__ltdf2>:
   96854:	defff104 	addi	sp,sp,-60
   96858:	d9000c15 	stw	r4,48(sp)
   9685c:	d9400d15 	stw	r5,52(sp)
   96860:	d9000c04 	addi	r4,sp,48
   96864:	d9400504 	addi	r5,sp,20
   96868:	dfc00e15 	stw	ra,56(sp)
   9686c:	d9800a15 	stw	r6,40(sp)
   96870:	d9c00b15 	stw	r7,44(sp)
   96874:	0096b740 	call	96b74 <__unpack_d>
   96878:	d9000a04 	addi	r4,sp,40
   9687c:	d80b883a 	mov	r5,sp
   96880:	0096b740 	call	96b74 <__unpack_d>
   96884:	d8c00517 	ldw	r3,20(sp)
   96888:	00800044 	movi	r2,1
   9688c:	10c0052e 	bgeu	r2,r3,968a4 <__ltdf2+0x50>
   96890:	d8c00017 	ldw	r3,0(sp)
   96894:	10c0032e 	bgeu	r2,r3,968a4 <__ltdf2+0x50>
   96898:	d9000504 	addi	r4,sp,20
   9689c:	d80b883a 	mov	r5,sp
   968a0:	0096c780 	call	96c78 <__fpcmp_parts_d>
   968a4:	dfc00e17 	ldw	ra,56(sp)
   968a8:	dec00f04 	addi	sp,sp,60
   968ac:	f800283a 	ret

000968b0 <__floatsidf>:
   968b0:	2004d7fa 	srli	r2,r4,31
   968b4:	defff904 	addi	sp,sp,-28
   968b8:	00c000c4 	movi	r3,3
   968bc:	dfc00615 	stw	ra,24(sp)
   968c0:	dc000515 	stw	r16,20(sp)
   968c4:	d8c00015 	stw	r3,0(sp)
   968c8:	d8800115 	stw	r2,4(sp)
   968cc:	2000081e 	bne	r4,zero,968f0 <__floatsidf+0x40>
   968d0:	00800084 	movi	r2,2
   968d4:	d8800015 	stw	r2,0(sp)
   968d8:	d809883a 	mov	r4,sp
   968dc:	008d2480 	call	8d248 <__pack_d>
   968e0:	dfc00617 	ldw	ra,24(sp)
   968e4:	dc000517 	ldw	r16,20(sp)
   968e8:	dec00704 	addi	sp,sp,28
   968ec:	f800283a 	ret
   968f0:	00c00f04 	movi	r3,60
   968f4:	d8c00215 	stw	r3,8(sp)
   968f8:	10000f1e 	bne	r2,zero,96938 <__floatsidf+0x88>
   968fc:	2021883a 	mov	r16,r4
   96900:	8009883a 	mov	r4,r16
   96904:	008cfa80 	call	8cfa8 <__clzsi2>
   96908:	11000744 	addi	r4,r2,29
   9690c:	0100110e 	bge	zero,r4,96954 <__floatsidf+0xa4>
   96910:	10ffff44 	addi	r3,r2,-3
   96914:	18001216 	blt	r3,zero,96960 <__floatsidf+0xb0>
   96918:	80c6983a 	sll	r3,r16,r3
   9691c:	0009883a 	mov	r4,zero
   96920:	014007c4 	movi	r5,31
   96924:	2885c83a 	sub	r2,r5,r2
   96928:	d9000315 	stw	r4,12(sp)
   9692c:	d8c00415 	stw	r3,16(sp)
   96930:	d8800215 	stw	r2,8(sp)
   96934:	003fe806 	br	968d8 <__floatsidf+0x28>
   96938:	00a00034 	movhi	r2,32768
   9693c:	20800e26 	beq	r4,r2,96978 <__floatsidf+0xc8>
   96940:	0121c83a 	sub	r16,zero,r4
   96944:	8009883a 	mov	r4,r16
   96948:	008cfa80 	call	8cfa8 <__clzsi2>
   9694c:	11000744 	addi	r4,r2,29
   96950:	013fef16 	blt	zero,r4,96910 <__floatsidf+0x60>
   96954:	dc000315 	stw	r16,12(sp)
   96958:	d8000415 	stw	zero,16(sp)
   9695c:	003fde06 	br	968d8 <__floatsidf+0x28>
   96960:	800ad07a 	srli	r5,r16,1
   96964:	00c007c4 	movi	r3,31
   96968:	1907c83a 	sub	r3,r3,r4
   9696c:	28c6d83a 	srl	r3,r5,r3
   96970:	8108983a 	sll	r4,r16,r4
   96974:	003fea06 	br	96920 <__floatsidf+0x70>
   96978:	0005883a 	mov	r2,zero
   9697c:	00f07834 	movhi	r3,49632
   96980:	003fd706 	br	968e0 <__floatsidf+0x30>

00096984 <__fixdfsi>:
   96984:	defff804 	addi	sp,sp,-32
   96988:	d9000515 	stw	r4,20(sp)
   9698c:	d9400615 	stw	r5,24(sp)
   96990:	d9000504 	addi	r4,sp,20
   96994:	d80b883a 	mov	r5,sp
   96998:	dfc00715 	stw	ra,28(sp)
   9699c:	0096b740 	call	96b74 <__unpack_d>
   969a0:	d8800017 	ldw	r2,0(sp)
   969a4:	00c00084 	movi	r3,2
   969a8:	10c01c26 	beq	r2,r3,96a1c <__fixdfsi+0x98>
   969ac:	00c00044 	movi	r3,1
   969b0:	18801a2e 	bgeu	r3,r2,96a1c <__fixdfsi+0x98>
   969b4:	00c00104 	movi	r3,4
   969b8:	10c01126 	beq	r2,r3,96a00 <__fixdfsi+0x7c>
   969bc:	d8800217 	ldw	r2,8(sp)
   969c0:	10001616 	blt	r2,zero,96a1c <__fixdfsi+0x98>
   969c4:	00c00784 	movi	r3,30
   969c8:	18800d16 	blt	r3,r2,96a00 <__fixdfsi+0x7c>
   969cc:	00c00f04 	movi	r3,60
   969d0:	1885c83a 	sub	r2,r3,r2
   969d4:	10fff804 	addi	r3,r2,-32
   969d8:	d9400317 	ldw	r5,12(sp)
   969dc:	d9000417 	ldw	r4,16(sp)
   969e0:	18001616 	blt	r3,zero,96a3c <__fixdfsi+0xb8>
   969e4:	20c4d83a 	srl	r2,r4,r3
   969e8:	d8c00117 	ldw	r3,4(sp)
   969ec:	18000126 	beq	r3,zero,969f4 <__fixdfsi+0x70>
   969f0:	0085c83a 	sub	r2,zero,r2
   969f4:	dfc00717 	ldw	ra,28(sp)
   969f8:	dec00804 	addi	sp,sp,32
   969fc:	f800283a 	ret
   96a00:	d8800117 	ldw	r2,4(sp)
   96a04:	1000091e 	bne	r2,zero,96a2c <__fixdfsi+0xa8>
   96a08:	00a00034 	movhi	r2,32768
   96a0c:	10bfffc4 	addi	r2,r2,-1
   96a10:	dfc00717 	ldw	ra,28(sp)
   96a14:	dec00804 	addi	sp,sp,32
   96a18:	f800283a 	ret
   96a1c:	0005883a 	mov	r2,zero
   96a20:	dfc00717 	ldw	ra,28(sp)
   96a24:	dec00804 	addi	sp,sp,32
   96a28:	f800283a 	ret
   96a2c:	00a00034 	movhi	r2,32768
   96a30:	dfc00717 	ldw	ra,28(sp)
   96a34:	dec00804 	addi	sp,sp,32
   96a38:	f800283a 	ret
   96a3c:	2008907a 	slli	r4,r4,1
   96a40:	018007c4 	movi	r6,31
   96a44:	308dc83a 	sub	r6,r6,r2
   96a48:	2188983a 	sll	r4,r4,r6
   96a4c:	2884d83a 	srl	r2,r5,r2
   96a50:	2084b03a 	or	r2,r4,r2
   96a54:	003fe406 	br	969e8 <__fixdfsi+0x64>

00096a58 <__floatunsidf>:
   96a58:	defff904 	addi	sp,sp,-28
   96a5c:	dc000515 	stw	r16,20(sp)
   96a60:	dfc00615 	stw	ra,24(sp)
   96a64:	d8000115 	stw	zero,4(sp)
   96a68:	2021883a 	mov	r16,r4
   96a6c:	20001726 	beq	r4,zero,96acc <__floatunsidf+0x74>
   96a70:	008000c4 	movi	r2,3
   96a74:	d8800015 	stw	r2,0(sp)
   96a78:	00800f04 	movi	r2,60
   96a7c:	d8800215 	stw	r2,8(sp)
   96a80:	008cfa80 	call	8cfa8 <__clzsi2>
   96a84:	10c00744 	addi	r3,r2,29
   96a88:	18001816 	blt	r3,zero,96aec <__floatunsidf+0x94>
   96a8c:	18002d26 	beq	r3,zero,96b44 <__floatunsidf+0xec>
   96a90:	113fff44 	addi	r4,r2,-3
   96a94:	20002e16 	blt	r4,zero,96b50 <__floatunsidf+0xf8>
   96a98:	8108983a 	sll	r4,r16,r4
   96a9c:	0021883a 	mov	r16,zero
   96aa0:	014007c4 	movi	r5,31
   96aa4:	2885c83a 	sub	r2,r5,r2
   96aa8:	dc000315 	stw	r16,12(sp)
   96aac:	d9000415 	stw	r4,16(sp)
   96ab0:	d8800215 	stw	r2,8(sp)
   96ab4:	d809883a 	mov	r4,sp
   96ab8:	008d2480 	call	8d248 <__pack_d>
   96abc:	dfc00617 	ldw	ra,24(sp)
   96ac0:	dc000517 	ldw	r16,20(sp)
   96ac4:	dec00704 	addi	sp,sp,28
   96ac8:	f800283a 	ret
   96acc:	00800084 	movi	r2,2
   96ad0:	d809883a 	mov	r4,sp
   96ad4:	d8800015 	stw	r2,0(sp)
   96ad8:	008d2480 	call	8d248 <__pack_d>
   96adc:	dfc00617 	ldw	ra,24(sp)
   96ae0:	dc000517 	ldw	r16,20(sp)
   96ae4:	dec00704 	addi	sp,sp,28
   96ae8:	f800283a 	ret
   96aec:	00c7c83a 	sub	r3,zero,r3
   96af0:	193ff804 	addi	r4,r3,-32
   96af4:	20001c16 	blt	r4,zero,96b68 <__floatunsidf+0x110>
   96af8:	000b883a 	mov	r5,zero
   96afc:	2009d7fa 	srai	r4,r4,31
   96b00:	80c6d83a 	srl	r3,r16,r3
   96b04:	297fffc4 	addi	r5,r5,-1
   96b08:	2c20703a 	and	r16,r5,r16
   96b0c:	8020c03a 	cmpne	r16,r16,zero
   96b10:	1906703a 	and	r3,r3,r4
   96b14:	010007c4 	movi	r4,31
   96b18:	80c6b03a 	or	r3,r16,r3
   96b1c:	2085c83a 	sub	r2,r4,r2
   96b20:	d809883a 	mov	r4,sp
   96b24:	d8c00315 	stw	r3,12(sp)
   96b28:	d8000415 	stw	zero,16(sp)
   96b2c:	d8800215 	stw	r2,8(sp)
   96b30:	008d2480 	call	8d248 <__pack_d>
   96b34:	dfc00617 	ldw	ra,24(sp)
   96b38:	dc000517 	ldw	r16,20(sp)
   96b3c:	dec00704 	addi	sp,sp,28
   96b40:	f800283a 	ret
   96b44:	dc000315 	stw	r16,12(sp)
   96b48:	d8000415 	stw	zero,16(sp)
   96b4c:	003fd906 	br	96ab4 <__floatunsidf+0x5c>
   96b50:	800ad07a 	srli	r5,r16,1
   96b54:	010007c4 	movi	r4,31
   96b58:	20c9c83a 	sub	r4,r4,r3
   96b5c:	2908d83a 	srl	r4,r5,r4
   96b60:	80e0983a 	sll	r16,r16,r3
   96b64:	003fce06 	br	96aa0 <__floatunsidf+0x48>
   96b68:	01400044 	movi	r5,1
   96b6c:	28ca983a 	sll	r5,r5,r3
   96b70:	003fe206 	br	96afc <__floatunsidf+0xa4>

00096b74 <__unpack_d>:
   96b74:	21800117 	ldw	r6,4(r4)
   96b78:	20c00017 	ldw	r3,0(r4)
   96b7c:	3004d7fa 	srli	r2,r6,31
   96b80:	3008d53a 	srli	r4,r6,20
   96b84:	28800115 	stw	r2,4(r5)
   96b88:	2101ffcc 	andi	r4,r4,2047
   96b8c:	00800434 	movhi	r2,16
   96b90:	10bfffc4 	addi	r2,r2,-1
   96b94:	3084703a 	and	r2,r6,r2
   96b98:	20001a1e 	bne	r4,zero,96c04 <__unpack_d+0x90>
   96b9c:	1888b03a 	or	r4,r3,r2
   96ba0:	20002626 	beq	r4,zero,96c3c <__unpack_d+0xc8>
   96ba4:	1808d63a 	srli	r4,r3,24
   96ba8:	1004923a 	slli	r2,r2,8
   96bac:	01bf0084 	movi	r6,-1022
   96bb0:	29800215 	stw	r6,8(r5)
   96bb4:	2084b03a 	or	r2,r4,r2
   96bb8:	010000c4 	movi	r4,3
   96bbc:	29000015 	stw	r4,0(r5)
   96bc0:	02040034 	movhi	r8,4096
   96bc4:	423fffc4 	addi	r8,r8,-1
   96bc8:	1806923a 	slli	r3,r3,8
   96bcc:	40801836 	bltu	r8,r2,96c30 <__unpack_d+0xbc>
   96bd0:	013f0044 	movi	r4,-1023
   96bd4:	18cd883a 	add	r6,r3,r3
   96bd8:	30c7803a 	cmpltu	r3,r6,r3
   96bdc:	1085883a 	add	r2,r2,r2
   96be0:	1885883a 	add	r2,r3,r2
   96be4:	200f883a 	mov	r7,r4
   96be8:	3007883a 	mov	r3,r6
   96bec:	213fffc4 	addi	r4,r4,-1
   96bf0:	40bff82e 	bgeu	r8,r2,96bd4 <__unpack_d+0x60>
   96bf4:	29c00215 	stw	r7,8(r5)
   96bf8:	28c00315 	stw	r3,12(r5)
   96bfc:	28800415 	stw	r2,16(r5)
   96c00:	f800283a 	ret
   96c04:	01c1ffc4 	movi	r7,2047
   96c08:	21c00f26 	beq	r4,r7,96c48 <__unpack_d+0xd4>
   96c0c:	180cd63a 	srli	r6,r3,24
   96c10:	1004923a 	slli	r2,r2,8
   96c14:	213f0044 	addi	r4,r4,-1023
   96c18:	1806923a 	slli	r3,r3,8
   96c1c:	3084b03a 	or	r2,r6,r2
   96c20:	29000215 	stw	r4,8(r5)
   96c24:	010000c4 	movi	r4,3
   96c28:	10840034 	orhi	r2,r2,4096
   96c2c:	29000015 	stw	r4,0(r5)
   96c30:	28c00315 	stw	r3,12(r5)
   96c34:	28800415 	stw	r2,16(r5)
   96c38:	f800283a 	ret
   96c3c:	00800084 	movi	r2,2
   96c40:	28800015 	stw	r2,0(r5)
   96c44:	f800283a 	ret
   96c48:	1888b03a 	or	r4,r3,r2
   96c4c:	20000526 	beq	r4,zero,96c64 <__unpack_d+0xf0>
   96c50:	3180022c 	andhi	r6,r6,8
   96c54:	30000626 	beq	r6,zero,96c70 <__unpack_d+0xfc>
   96c58:	01000044 	movi	r4,1
   96c5c:	29000015 	stw	r4,0(r5)
   96c60:	003ff306 	br	96c30 <__unpack_d+0xbc>
   96c64:	00800104 	movi	r2,4
   96c68:	28800015 	stw	r2,0(r5)
   96c6c:	f800283a 	ret
   96c70:	28000015 	stw	zero,0(r5)
   96c74:	003fee06 	br	96c30 <__unpack_d+0xbc>

00096c78 <__fpcmp_parts_d>:
   96c78:	20c00017 	ldw	r3,0(r4)
   96c7c:	00800044 	movi	r2,1
   96c80:	10c0142e 	bgeu	r2,r3,96cd4 <__fpcmp_parts_d+0x5c>
   96c84:	29800017 	ldw	r6,0(r5)
   96c88:	1180122e 	bgeu	r2,r6,96cd4 <__fpcmp_parts_d+0x5c>
   96c8c:	01c00104 	movi	r7,4
   96c90:	19c02826 	beq	r3,r7,96d34 <__fpcmp_parts_d+0xbc>
   96c94:	31c00926 	beq	r6,r7,96cbc <__fpcmp_parts_d+0x44>
   96c98:	01c00084 	movi	r7,2
   96c9c:	19c00626 	beq	r3,r7,96cb8 <__fpcmp_parts_d+0x40>
   96ca0:	31c00a26 	beq	r6,r7,96ccc <__fpcmp_parts_d+0x54>
   96ca4:	20c00117 	ldw	r3,4(r4)
   96ca8:	29800117 	ldw	r6,4(r5)
   96cac:	19800b26 	beq	r3,r6,96cdc <__fpcmp_parts_d+0x64>
   96cb0:	1800041e 	bne	r3,zero,96cc4 <__fpcmp_parts_d+0x4c>
   96cb4:	f800283a 	ret
   96cb8:	30c01a26 	beq	r6,r3,96d24 <__fpcmp_parts_d+0xac>
   96cbc:	28800117 	ldw	r2,4(r5)
   96cc0:	1000041e 	bne	r2,zero,96cd4 <__fpcmp_parts_d+0x5c>
   96cc4:	00bfffc4 	movi	r2,-1
   96cc8:	f800283a 	ret
   96ccc:	20800117 	ldw	r2,4(r4)
   96cd0:	103ffc1e 	bne	r2,zero,96cc4 <__fpcmp_parts_d+0x4c>
   96cd4:	00800044 	movi	r2,1
   96cd8:	f800283a 	ret
   96cdc:	21c00217 	ldw	r7,8(r4)
   96ce0:	29800217 	ldw	r6,8(r5)
   96ce4:	31c0020e 	bge	r6,r7,96cf0 <__fpcmp_parts_d+0x78>
   96ce8:	183ff61e 	bne	r3,zero,96cc4 <__fpcmp_parts_d+0x4c>
   96cec:	f800283a 	ret
   96cf0:	39800a16 	blt	r7,r6,96d1c <__fpcmp_parts_d+0xa4>
   96cf4:	20800417 	ldw	r2,16(r4)
   96cf8:	29800417 	ldw	r6,16(r5)
   96cfc:	21c00317 	ldw	r7,12(r4)
   96d00:	29000317 	ldw	r4,12(r5)
   96d04:	30800936 	bltu	r6,r2,96d2c <__fpcmp_parts_d+0xb4>
   96d08:	1180011e 	bne	r2,r6,96d10 <__fpcmp_parts_d+0x98>
   96d0c:	21c00736 	bltu	r4,r7,96d2c <__fpcmp_parts_d+0xb4>
   96d10:	11800236 	bltu	r2,r6,96d1c <__fpcmp_parts_d+0xa4>
   96d14:	3080031e 	bne	r6,r2,96d24 <__fpcmp_parts_d+0xac>
   96d18:	3900022e 	bgeu	r7,r4,96d24 <__fpcmp_parts_d+0xac>
   96d1c:	183fe926 	beq	r3,zero,96cc4 <__fpcmp_parts_d+0x4c>
   96d20:	003fec06 	br	96cd4 <__fpcmp_parts_d+0x5c>
   96d24:	0005883a 	mov	r2,zero
   96d28:	f800283a 	ret
   96d2c:	183fe926 	beq	r3,zero,96cd4 <__fpcmp_parts_d+0x5c>
   96d30:	003fe406 	br	96cc4 <__fpcmp_parts_d+0x4c>
   96d34:	30ffe51e 	bne	r6,r3,96ccc <__fpcmp_parts_d+0x54>
   96d38:	28c00117 	ldw	r3,4(r5)
   96d3c:	20800117 	ldw	r2,4(r4)
   96d40:	1885c83a 	sub	r2,r3,r2
   96d44:	f800283a 	ret

00096d48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   96d48:	defffe04 	addi	sp,sp,-8
   96d4c:	dfc00115 	stw	ra,4(sp)
   96d50:	df000015 	stw	fp,0(sp)
   96d54:	d839883a 	mov	fp,sp
   96d58:	d83bb615 	stw	zero,-4392(sp)
  return ((alt_errno) ? alt_errno() : &errno);
   96d5c:	008002b4 	movhi	r2,10
   96d60:	10bd7104 	addi	r2,r2,-2620
   96d64:	10800017 	ldw	r2,0(r2)
   96d68:	10000526 	beq	r2,zero,96d80 <alt_get_errno+0x38>
   96d6c:	008002b4 	movhi	r2,10
   96d70:	10bd7104 	addi	r2,r2,-2620
   96d74:	10800017 	ldw	r2,0(r2)
   96d78:	103ee83a 	callr	r2
   96d7c:	00000206 	br	96d88 <alt_get_errno+0x40>
   96d80:	008002b4 	movhi	r2,10
   96d84:	10851604 	addi	r2,r2,5208
}
   96d88:	e037883a 	mov	sp,fp
   96d8c:	dfc00117 	ldw	ra,4(sp)
   96d90:	df000017 	ldw	fp,0(sp)
   96d94:	dec00204 	addi	sp,sp,8
   96d98:	f800283a 	ret

00096d9c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   96d9c:	defffb04 	addi	sp,sp,-20
   96da0:	dfc00415 	stw	ra,16(sp)
   96da4:	df000315 	stw	fp,12(sp)
   96da8:	df000304 	addi	fp,sp,12
   96dac:	e13fff15 	stw	r4,-4(fp)
   96db0:	d83bb615 	stw	zero,-4392(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   96db4:	e0bfff17 	ldw	r2,-4(fp)
   96db8:	10000616 	blt	r2,zero,96dd4 <close+0x38>
   96dbc:	e0bfff17 	ldw	r2,-4(fp)
   96dc0:	10c00324 	muli	r3,r2,12
   96dc4:	008002b4 	movhi	r2,10
   96dc8:	10b88b04 	addi	r2,r2,-7636
   96dcc:	1885883a 	add	r2,r3,r2
   96dd0:	00000106 	br	96dd8 <close+0x3c>
   96dd4:	0005883a 	mov	r2,zero
   96dd8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   96ddc:	e0bffd17 	ldw	r2,-12(fp)
   96de0:	10001826 	beq	r2,zero,96e44 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   96de4:	e0bffd17 	ldw	r2,-12(fp)
   96de8:	10800017 	ldw	r2,0(r2)
   96dec:	10800417 	ldw	r2,16(r2)
   96df0:	10000626 	beq	r2,zero,96e0c <close+0x70>
   96df4:	e0bffd17 	ldw	r2,-12(fp)
   96df8:	10800017 	ldw	r2,0(r2)
   96dfc:	10800417 	ldw	r2,16(r2)
   96e00:	e13ffd17 	ldw	r4,-12(fp)
   96e04:	103ee83a 	callr	r2
   96e08:	00000106 	br	96e10 <close+0x74>
   96e0c:	0005883a 	mov	r2,zero
   96e10:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   96e14:	e13fff17 	ldw	r4,-4(fp)
   96e18:	00977b40 	call	977b4 <alt_release_fd>
    if (rval < 0)
   96e1c:	e0bffe17 	ldw	r2,-8(fp)
   96e20:	1000060e 	bge	r2,zero,96e3c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   96e24:	0096d480 	call	96d48 <alt_get_errno>
   96e28:	e0fffe17 	ldw	r3,-8(fp)
   96e2c:	00c7c83a 	sub	r3,zero,r3
   96e30:	10c00015 	stw	r3,0(r2)
      return -1;
   96e34:	00bfffc4 	movi	r2,-1
   96e38:	00000606 	br	96e54 <close+0xb8>
    }
    return 0;
   96e3c:	0005883a 	mov	r2,zero
   96e40:	00000406 	br	96e54 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   96e44:	0096d480 	call	96d48 <alt_get_errno>
   96e48:	00c01444 	movi	r3,81
   96e4c:	10c00015 	stw	r3,0(r2)
    return -1;
   96e50:	00bfffc4 	movi	r2,-1
  }
}
   96e54:	e037883a 	mov	sp,fp
   96e58:	dfc00117 	ldw	ra,4(sp)
   96e5c:	df000017 	ldw	fp,0(sp)
   96e60:	dec00204 	addi	sp,sp,8
   96e64:	f800283a 	ret

00096e68 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   96e68:	defffc04 	addi	sp,sp,-16
   96e6c:	df000315 	stw	fp,12(sp)
   96e70:	df000304 	addi	fp,sp,12
   96e74:	e13ffd15 	stw	r4,-12(fp)
   96e78:	e17ffe15 	stw	r5,-8(fp)
   96e7c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   96e80:	e0bfff17 	ldw	r2,-4(fp)
}
   96e84:	e037883a 	mov	sp,fp
   96e88:	df000017 	ldw	fp,0(sp)
   96e8c:	dec00104 	addi	sp,sp,4
   96e90:	f800283a 	ret

00096e94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   96e94:	defffe04 	addi	sp,sp,-8
   96e98:	dfc00115 	stw	ra,4(sp)
   96e9c:	df000015 	stw	fp,0(sp)
   96ea0:	d839883a 	mov	fp,sp
   96ea4:	d83bb615 	stw	zero,-4392(sp)
  return ((alt_errno) ? alt_errno() : &errno);
   96ea8:	008002b4 	movhi	r2,10
   96eac:	10bd7104 	addi	r2,r2,-2620
   96eb0:	10800017 	ldw	r2,0(r2)
   96eb4:	10000526 	beq	r2,zero,96ecc <alt_get_errno+0x38>
   96eb8:	008002b4 	movhi	r2,10
   96ebc:	10bd7104 	addi	r2,r2,-2620
   96ec0:	10800017 	ldw	r2,0(r2)
   96ec4:	103ee83a 	callr	r2
   96ec8:	00000206 	br	96ed4 <alt_get_errno+0x40>
   96ecc:	008002b4 	movhi	r2,10
   96ed0:	10851604 	addi	r2,r2,5208
}
   96ed4:	e037883a 	mov	sp,fp
   96ed8:	dfc00117 	ldw	ra,4(sp)
   96edc:	df000017 	ldw	fp,0(sp)
   96ee0:	dec00204 	addi	sp,sp,8
   96ee4:	f800283a 	ret

00096ee8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   96ee8:	defffb04 	addi	sp,sp,-20
   96eec:	dfc00415 	stw	ra,16(sp)
   96ef0:	df000315 	stw	fp,12(sp)
   96ef4:	df000304 	addi	fp,sp,12
   96ef8:	e13ffe15 	stw	r4,-8(fp)
   96efc:	e17fff15 	stw	r5,-4(fp)
   96f00:	d83bb615 	stw	zero,-4392(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   96f04:	e0bffe17 	ldw	r2,-8(fp)
   96f08:	10000616 	blt	r2,zero,96f24 <fstat+0x3c>
   96f0c:	e0bffe17 	ldw	r2,-8(fp)
   96f10:	10c00324 	muli	r3,r2,12
   96f14:	008002b4 	movhi	r2,10
   96f18:	10b88b04 	addi	r2,r2,-7636
   96f1c:	1885883a 	add	r2,r3,r2
   96f20:	00000106 	br	96f28 <fstat+0x40>
   96f24:	0005883a 	mov	r2,zero
   96f28:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   96f2c:	e0bffd17 	ldw	r2,-12(fp)
   96f30:	10001026 	beq	r2,zero,96f74 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   96f34:	e0bffd17 	ldw	r2,-12(fp)
   96f38:	10800017 	ldw	r2,0(r2)
   96f3c:	10800817 	ldw	r2,32(r2)
   96f40:	10000726 	beq	r2,zero,96f60 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
   96f44:	e0bffd17 	ldw	r2,-12(fp)
   96f48:	10800017 	ldw	r2,0(r2)
   96f4c:	10800817 	ldw	r2,32(r2)
   96f50:	e13ffd17 	ldw	r4,-12(fp)
   96f54:	e17fff17 	ldw	r5,-4(fp)
   96f58:	103ee83a 	callr	r2
   96f5c:	00000906 	br	96f84 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   96f60:	e0bfff17 	ldw	r2,-4(fp)
   96f64:	00c80004 	movi	r3,8192
   96f68:	10c00115 	stw	r3,4(r2)
      return 0;
   96f6c:	0005883a 	mov	r2,zero
   96f70:	00000406 	br	96f84 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   96f74:	0096e940 	call	96e94 <alt_get_errno>
   96f78:	00c01444 	movi	r3,81
   96f7c:	10c00015 	stw	r3,0(r2)
    return -1;
   96f80:	00bfffc4 	movi	r2,-1
  }
}
   96f84:	e037883a 	mov	sp,fp
   96f88:	dfc00117 	ldw	ra,4(sp)
   96f8c:	df000017 	ldw	fp,0(sp)
   96f90:	dec00204 	addi	sp,sp,8
   96f94:	f800283a 	ret

00096f98 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   96f98:	defff904 	addi	sp,sp,-28
   96f9c:	dfc00615 	stw	ra,24(sp)
   96fa0:	df000515 	stw	fp,20(sp)
   96fa4:	df000504 	addi	fp,sp,20
   96fa8:	e13ffc15 	stw	r4,-16(fp)
   96fac:	e17ffd15 	stw	r5,-12(fp)
   96fb0:	e1bffe15 	stw	r6,-8(fp)
   96fb4:	e1ffff15 	stw	r7,-4(fp)
   96fb8:	d83bb615 	stw	zero,-4392(sp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   96fbc:	e0800217 	ldw	r2,8(fp)
   96fc0:	d8800015 	stw	r2,0(sp)
   96fc4:	e13ffc17 	ldw	r4,-16(fp)
   96fc8:	e17ffd17 	ldw	r5,-12(fp)
   96fcc:	e1bffe17 	ldw	r6,-8(fp)
   96fd0:	e1ffff17 	ldw	r7,-4(fp)
   96fd4:	00971740 	call	97174 <alt_iic_isr_register>
}  
   96fd8:	e037883a 	mov	sp,fp
   96fdc:	dfc00117 	ldw	ra,4(sp)
   96fe0:	df000017 	ldw	fp,0(sp)
   96fe4:	dec00204 	addi	sp,sp,8
   96fe8:	f800283a 	ret

00096fec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   96fec:	defff904 	addi	sp,sp,-28
   96ff0:	df000615 	stw	fp,24(sp)
   96ff4:	df000604 	addi	fp,sp,24
   96ff8:	e13ffe15 	stw	r4,-8(fp)
   96ffc:	e17fff15 	stw	r5,-4(fp)
   97000:	e0bfff17 	ldw	r2,-4(fp)
   97004:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   97008:	0005303a 	rdctl	r2,status
   9700c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   97010:	e0fffb17 	ldw	r3,-20(fp)
   97014:	00bfff84 	movi	r2,-2
   97018:	1884703a 	and	r2,r3,r2
   9701c:	1001703a 	wrctl	status,r2
  
  return context;
   97020:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   97024:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   97028:	e0bffa17 	ldw	r2,-24(fp)
   9702c:	00c00044 	movi	r3,1
   97030:	1884983a 	sll	r2,r3,r2
   97034:	1007883a 	mov	r3,r2
   97038:	008002b4 	movhi	r2,10
   9703c:	10851a04 	addi	r2,r2,5224
   97040:	10800017 	ldw	r2,0(r2)
   97044:	1886b03a 	or	r3,r3,r2
   97048:	008002b4 	movhi	r2,10
   9704c:	10851a04 	addi	r2,r2,5224
   97050:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   97054:	008002b4 	movhi	r2,10
   97058:	10851a04 	addi	r2,r2,5224
   9705c:	10800017 	ldw	r2,0(r2)
   97060:	100170fa 	wrctl	ienable,r2
   97064:	e0bffc17 	ldw	r2,-16(fp)
   97068:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9706c:	e0bffd17 	ldw	r2,-12(fp)
   97070:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   97074:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   97078:	e037883a 	mov	sp,fp
   9707c:	df000017 	ldw	fp,0(sp)
   97080:	dec00104 	addi	sp,sp,4
   97084:	f800283a 	ret

00097088 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   97088:	defff904 	addi	sp,sp,-28
   9708c:	df000615 	stw	fp,24(sp)
   97090:	df000604 	addi	fp,sp,24
   97094:	e13ffe15 	stw	r4,-8(fp)
   97098:	e17fff15 	stw	r5,-4(fp)
   9709c:	e0bfff17 	ldw	r2,-4(fp)
   970a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   970a4:	0005303a 	rdctl	r2,status
   970a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   970ac:	e0fffb17 	ldw	r3,-20(fp)
   970b0:	00bfff84 	movi	r2,-2
   970b4:	1884703a 	and	r2,r3,r2
   970b8:	1001703a 	wrctl	status,r2
  
  return context;
   970bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   970c0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   970c4:	e0bffa17 	ldw	r2,-24(fp)
   970c8:	00c00044 	movi	r3,1
   970cc:	1884983a 	sll	r2,r3,r2
   970d0:	0084303a 	nor	r2,zero,r2
   970d4:	1007883a 	mov	r3,r2
   970d8:	008002b4 	movhi	r2,10
   970dc:	10851a04 	addi	r2,r2,5224
   970e0:	10800017 	ldw	r2,0(r2)
   970e4:	1886703a 	and	r3,r3,r2
   970e8:	008002b4 	movhi	r2,10
   970ec:	10851a04 	addi	r2,r2,5224
   970f0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   970f4:	008002b4 	movhi	r2,10
   970f8:	10851a04 	addi	r2,r2,5224
   970fc:	10800017 	ldw	r2,0(r2)
   97100:	100170fa 	wrctl	ienable,r2
   97104:	e0bffc17 	ldw	r2,-16(fp)
   97108:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9710c:	e0bffd17 	ldw	r2,-12(fp)
   97110:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   97114:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   97118:	e037883a 	mov	sp,fp
   9711c:	df000017 	ldw	fp,0(sp)
   97120:	dec00104 	addi	sp,sp,4
   97124:	f800283a 	ret

00097128 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   97128:	defffc04 	addi	sp,sp,-16
   9712c:	df000315 	stw	fp,12(sp)
   97130:	df000304 	addi	fp,sp,12
   97134:	e13ffe15 	stw	r4,-8(fp)
   97138:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   9713c:	000530fa 	rdctl	r2,ienable
   97140:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   97144:	e0bfff17 	ldw	r2,-4(fp)
   97148:	00c00044 	movi	r3,1
   9714c:	1884983a 	sll	r2,r3,r2
   97150:	1007883a 	mov	r3,r2
   97154:	e0bffd17 	ldw	r2,-12(fp)
   97158:	1884703a 	and	r2,r3,r2
   9715c:	1004c03a 	cmpne	r2,r2,zero
   97160:	10803fcc 	andi	r2,r2,255
}
   97164:	e037883a 	mov	sp,fp
   97168:	df000017 	ldw	fp,0(sp)
   9716c:	dec00104 	addi	sp,sp,4
   97170:	f800283a 	ret

00097174 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   97174:	defff504 	addi	sp,sp,-44
   97178:	dfc00a15 	stw	ra,40(sp)
   9717c:	df000915 	stw	fp,36(sp)
   97180:	df000904 	addi	fp,sp,36
   97184:	e13ffc15 	stw	r4,-16(fp)
   97188:	e17ffd15 	stw	r5,-12(fp)
   9718c:	e1bffe15 	stw	r6,-8(fp)
   97190:	e1ffff15 	stw	r7,-4(fp)
   97194:	d83bb615 	stw	zero,-4392(sp)
  int rc = -EINVAL;  
   97198:	00bffa84 	movi	r2,-22
   9719c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   971a0:	e0bffd17 	ldw	r2,-12(fp)
   971a4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   971a8:	e0bff817 	ldw	r2,-32(fp)
   971ac:	10800808 	cmpgei	r2,r2,32
   971b0:	1000271e 	bne	r2,zero,97250 <alt_iic_isr_register+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   971b4:	0005303a 	rdctl	r2,status
   971b8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   971bc:	e0fffa17 	ldw	r3,-24(fp)
   971c0:	00bfff84 	movi	r2,-2
   971c4:	1884703a 	and	r2,r3,r2
   971c8:	1001703a 	wrctl	status,r2
  
  return context;
   971cc:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   971d0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   971d4:	00c002b4 	movhi	r3,10
   971d8:	18c56b04 	addi	r3,r3,5548
   971dc:	e0bff817 	ldw	r2,-32(fp)
   971e0:	100490fa 	slli	r2,r2,3
   971e4:	1885883a 	add	r2,r3,r2
   971e8:	e0fffe17 	ldw	r3,-8(fp)
   971ec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   971f0:	00c002b4 	movhi	r3,10
   971f4:	18c56b04 	addi	r3,r3,5548
   971f8:	e0bff817 	ldw	r2,-32(fp)
   971fc:	100490fa 	slli	r2,r2,3
   97200:	1885883a 	add	r2,r3,r2
   97204:	10800104 	addi	r2,r2,4
   97208:	e0ffff17 	ldw	r3,-4(fp)
   9720c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   97210:	e0bffe17 	ldw	r2,-8(fp)
   97214:	10000526 	beq	r2,zero,9722c <alt_iic_isr_register+0xb8>
   97218:	e0bff817 	ldw	r2,-32(fp)
   9721c:	e13ffc17 	ldw	r4,-16(fp)
   97220:	100b883a 	mov	r5,r2
   97224:	0096fec0 	call	96fec <alt_ic_irq_enable>
   97228:	00000406 	br	9723c <alt_iic_isr_register+0xc8>
   9722c:	e0bff817 	ldw	r2,-32(fp)
   97230:	e13ffc17 	ldw	r4,-16(fp)
   97234:	100b883a 	mov	r5,r2
   97238:	00970880 	call	97088 <alt_ic_irq_disable>
   9723c:	e0bff715 	stw	r2,-36(fp)
   97240:	e0bff917 	ldw	r2,-28(fp)
   97244:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   97248:	e0bffb17 	ldw	r2,-20(fp)
   9724c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   97250:	e0bff717 	ldw	r2,-36(fp)
}
   97254:	e037883a 	mov	sp,fp
   97258:	dfc00117 	ldw	ra,4(sp)
   9725c:	df000017 	ldw	fp,0(sp)
   97260:	dec00204 	addi	sp,sp,8
   97264:	f800283a 	ret

00097268 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   97268:	defffe04 	addi	sp,sp,-8
   9726c:	dfc00115 	stw	ra,4(sp)
   97270:	df000015 	stw	fp,0(sp)
   97274:	d839883a 	mov	fp,sp
   97278:	d83bb615 	stw	zero,-4392(sp)
  return ((alt_errno) ? alt_errno() : &errno);
   9727c:	008002b4 	movhi	r2,10
   97280:	10bd7104 	addi	r2,r2,-2620
   97284:	10800017 	ldw	r2,0(r2)
   97288:	10000526 	beq	r2,zero,972a0 <alt_get_errno+0x38>
   9728c:	008002b4 	movhi	r2,10
   97290:	10bd7104 	addi	r2,r2,-2620
   97294:	10800017 	ldw	r2,0(r2)
   97298:	103ee83a 	callr	r2
   9729c:	00000206 	br	972a8 <alt_get_errno+0x40>
   972a0:	008002b4 	movhi	r2,10
   972a4:	10851604 	addi	r2,r2,5208
}
   972a8:	e037883a 	mov	sp,fp
   972ac:	dfc00117 	ldw	ra,4(sp)
   972b0:	df000017 	ldw	fp,0(sp)
   972b4:	dec00204 	addi	sp,sp,8
   972b8:	f800283a 	ret

000972bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   972bc:	defffa04 	addi	sp,sp,-24
   972c0:	dfc00515 	stw	ra,20(sp)
   972c4:	df000415 	stw	fp,16(sp)
   972c8:	dc000315 	stw	r16,12(sp)
   972cc:	df000304 	addi	fp,sp,12
   972d0:	e13fff15 	stw	r4,-4(fp)
   972d4:	d83bb615 	stw	zero,-4392(sp)
   972d8:	d805883a 	mov	r2,sp
   972dc:	1021883a 	mov	r16,r2
  alt_fd*     fd;
  struct stat stat;
   972e0:	d83ba615 	stw	zero,-4456(sp)
   972e4:	defff004 	addi	sp,sp,-64
   972e8:	d805883a 	mov	r2,sp
   972ec:	108000c4 	addi	r2,r2,3
   972f0:	1004d0ba 	srli	r2,r2,2
   972f4:	1085883a 	add	r2,r2,r2
   972f8:	1085883a 	add	r2,r2,r2
   972fc:	e0bffd15 	stw	r2,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   97300:	e0bfff17 	ldw	r2,-4(fp)
   97304:	10000616 	blt	r2,zero,97320 <isatty+0x64>
   97308:	e0bfff17 	ldw	r2,-4(fp)
   9730c:	10c00324 	muli	r3,r2,12
   97310:	008002b4 	movhi	r2,10
   97314:	10b88b04 	addi	r2,r2,-7636
   97318:	1885883a 	add	r2,r3,r2
   9731c:	00000106 	br	97324 <isatty+0x68>
   97320:	0005883a 	mov	r2,zero
   97324:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd)
   97328:	e0bffe17 	ldw	r2,-8(fp)
   9732c:	10000f26 	beq	r2,zero,9736c <isatty+0xb0>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   97330:	e0bffe17 	ldw	r2,-8(fp)
   97334:	10800017 	ldw	r2,0(r2)
   97338:	10800817 	ldw	r2,32(r2)
   9733c:	1000021e 	bne	r2,zero,97348 <isatty+0x8c>
    {
      return 1;
   97340:	00800044 	movi	r2,1
   97344:	00000d06 	br	9737c <isatty+0xc0>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   97348:	e0bffd17 	ldw	r2,-12(fp)
   9734c:	e13fff17 	ldw	r4,-4(fp)
   97350:	100b883a 	mov	r5,r2
   97354:	0096ee80 	call	96ee8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   97358:	e0bffd17 	ldw	r2,-12(fp)
   9735c:	10800117 	ldw	r2,4(r2)
   97360:	10880020 	cmpeqi	r2,r2,8192
   97364:	10803fcc 	andi	r2,r2,255
   97368:	00000406 	br	9737c <isatty+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   9736c:	00972680 	call	97268 <alt_get_errno>
   97370:	00c01444 	movi	r3,81
   97374:	10c00015 	stw	r3,0(r2)
    return 0;
   97378:	0005883a 	mov	r2,zero
   9737c:	8037883a 	mov	sp,r16
  }
}
   97380:	e037883a 	mov	sp,fp
   97384:	dfc00217 	ldw	ra,8(sp)
   97388:	df000117 	ldw	fp,4(sp)
   9738c:	dc000017 	ldw	r16,0(sp)
   97390:	dec00304 	addi	sp,sp,12
   97394:	f800283a 	ret

00097398 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   97398:	defffc04 	addi	sp,sp,-16
   9739c:	df000315 	stw	fp,12(sp)
   973a0:	df000304 	addi	fp,sp,12
   973a4:	e13ffd15 	stw	r4,-12(fp)
   973a8:	e17ffe15 	stw	r5,-8(fp)
   973ac:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   973b0:	e0fffe17 	ldw	r3,-8(fp)
   973b4:	e0bffd17 	ldw	r2,-12(fp)
   973b8:	18800e26 	beq	r3,r2,973f4 <alt_load_section+0x5c>
  {
    while( to != end )
   973bc:	00000a06 	br	973e8 <alt_load_section+0x50>
    {
      *to++ = *from++;
   973c0:	e0bffd17 	ldw	r2,-12(fp)
   973c4:	10c00017 	ldw	r3,0(r2)
   973c8:	e0bffe17 	ldw	r2,-8(fp)
   973cc:	10c00015 	stw	r3,0(r2)
   973d0:	e0bffe17 	ldw	r2,-8(fp)
   973d4:	10800104 	addi	r2,r2,4
   973d8:	e0bffe15 	stw	r2,-8(fp)
   973dc:	e0bffd17 	ldw	r2,-12(fp)
   973e0:	10800104 	addi	r2,r2,4
   973e4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   973e8:	e0fffe17 	ldw	r3,-8(fp)
   973ec:	e0bfff17 	ldw	r2,-4(fp)
   973f0:	18bff31e 	bne	r3,r2,973c0 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   973f4:	e037883a 	mov	sp,fp
   973f8:	df000017 	ldw	fp,0(sp)
   973fc:	dec00104 	addi	sp,sp,4
   97400:	f800283a 	ret

00097404 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   97404:	defffe04 	addi	sp,sp,-8
   97408:	dfc00115 	stw	ra,4(sp)
   9740c:	df000015 	stw	fp,0(sp)
   97410:	d839883a 	mov	fp,sp
   97414:	d83bb615 	stw	zero,-4392(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   97418:	010002b4 	movhi	r4,10
   9741c:	213d7504 	addi	r4,r4,-2604
   97420:	014002b4 	movhi	r5,10
   97424:	2975d704 	addi	r5,r5,-10404
   97428:	018002b4 	movhi	r6,10
   9742c:	31bd7504 	addi	r6,r6,-2604
   97430:	00973980 	call	97398 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   97434:	01000234 	movhi	r4,8
   97438:	21000804 	addi	r4,r4,32
   9743c:	01400234 	movhi	r5,8
   97440:	29400804 	addi	r5,r5,32
   97444:	01800234 	movhi	r6,8
   97448:	31807a04 	addi	r6,r6,488
   9744c:	00973980 	call	97398 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   97450:	010002b4 	movhi	r4,10
   97454:	2125e604 	addi	r4,r4,-26728
   97458:	014002b4 	movhi	r5,10
   9745c:	2965e604 	addi	r5,r5,-26728
   97460:	018002b4 	movhi	r6,10
   97464:	31b5d704 	addi	r6,r6,-10404
   97468:	00973980 	call	97398 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   9746c:	00989ac0 	call	989ac <alt_dcache_flush_all>
  alt_icache_flush_all();
   97470:	0098ba80 	call	98ba8 <alt_icache_flush_all>
}
   97474:	e037883a 	mov	sp,fp
   97478:	dfc00117 	ldw	ra,4(sp)
   9747c:	df000017 	ldw	fp,0(sp)
   97480:	dec00204 	addi	sp,sp,8
   97484:	f800283a 	ret

00097488 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   97488:	defffe04 	addi	sp,sp,-8
   9748c:	dfc00115 	stw	ra,4(sp)
   97490:	df000015 	stw	fp,0(sp)
   97494:	d839883a 	mov	fp,sp
   97498:	d83bb615 	stw	zero,-4392(sp)
  return ((alt_errno) ? alt_errno() : &errno);
   9749c:	008002b4 	movhi	r2,10
   974a0:	10bd7104 	addi	r2,r2,-2620
   974a4:	10800017 	ldw	r2,0(r2)
   974a8:	10000526 	beq	r2,zero,974c0 <alt_get_errno+0x38>
   974ac:	008002b4 	movhi	r2,10
   974b0:	10bd7104 	addi	r2,r2,-2620
   974b4:	10800017 	ldw	r2,0(r2)
   974b8:	103ee83a 	callr	r2
   974bc:	00000206 	br	974c8 <alt_get_errno+0x40>
   974c0:	008002b4 	movhi	r2,10
   974c4:	10851604 	addi	r2,r2,5208
}
   974c8:	e037883a 	mov	sp,fp
   974cc:	dfc00117 	ldw	ra,4(sp)
   974d0:	df000017 	ldw	fp,0(sp)
   974d4:	dec00204 	addi	sp,sp,8
   974d8:	f800283a 	ret

000974dc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   974dc:	defff904 	addi	sp,sp,-28
   974e0:	dfc00615 	stw	ra,24(sp)
   974e4:	df000515 	stw	fp,20(sp)
   974e8:	df000504 	addi	fp,sp,20
   974ec:	e13ffd15 	stw	r4,-12(fp)
   974f0:	e17ffe15 	stw	r5,-8(fp)
   974f4:	e1bfff15 	stw	r6,-4(fp)
   974f8:	d83bb615 	stw	zero,-4392(sp)
  alt_fd* fd;
  off_t   rc = 0; 
   974fc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   97500:	e0bffd17 	ldw	r2,-12(fp)
   97504:	10000616 	blt	r2,zero,97520 <lseek+0x44>
   97508:	e0bffd17 	ldw	r2,-12(fp)
   9750c:	10c00324 	muli	r3,r2,12
   97510:	008002b4 	movhi	r2,10
   97514:	10b88b04 	addi	r2,r2,-7636
   97518:	1885883a 	add	r2,r3,r2
   9751c:	00000106 	br	97524 <lseek+0x48>
   97520:	0005883a 	mov	r2,zero
   97524:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   97528:	e0bffc17 	ldw	r2,-16(fp)
   9752c:	10001026 	beq	r2,zero,97570 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   97530:	e0bffc17 	ldw	r2,-16(fp)
   97534:	10800017 	ldw	r2,0(r2)
   97538:	10800717 	ldw	r2,28(r2)
   9753c:	10000926 	beq	r2,zero,97564 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   97540:	e0bffc17 	ldw	r2,-16(fp)
   97544:	10800017 	ldw	r2,0(r2)
   97548:	10800717 	ldw	r2,28(r2)
   9754c:	e13ffc17 	ldw	r4,-16(fp)
   97550:	e17ffe17 	ldw	r5,-8(fp)
   97554:	e1bfff17 	ldw	r6,-4(fp)
   97558:	103ee83a 	callr	r2
   9755c:	e0bffb15 	stw	r2,-20(fp)
   97560:	00000506 	br	97578 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   97564:	00bfde84 	movi	r2,-134
   97568:	e0bffb15 	stw	r2,-20(fp)
   9756c:	00000206 	br	97578 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
   97570:	00bfebc4 	movi	r2,-81
   97574:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   97578:	e0bffb17 	ldw	r2,-20(fp)
   9757c:	1000060e 	bge	r2,zero,97598 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   97580:	00974880 	call	97488 <alt_get_errno>
   97584:	e0fffb17 	ldw	r3,-20(fp)
   97588:	00c7c83a 	sub	r3,zero,r3
   9758c:	10c00015 	stw	r3,0(r2)
    rc = -1;
   97590:	00bfffc4 	movi	r2,-1
   97594:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   97598:	e0bffb17 	ldw	r2,-20(fp)
}
   9759c:	e037883a 	mov	sp,fp
   975a0:	dfc00117 	ldw	ra,4(sp)
   975a4:	df000017 	ldw	fp,0(sp)
   975a8:	dec00204 	addi	sp,sp,8
   975ac:	f800283a 	ret

000975b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   975b0:	defffd04 	addi	sp,sp,-12
   975b4:	dfc00215 	stw	ra,8(sp)
   975b8:	df000115 	stw	fp,4(sp)
   975bc:	df000104 	addi	fp,sp,4
   975c0:	d83bb615 	stw	zero,-4392(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   975c4:	0009883a 	mov	r4,zero
   975c8:	0097af40 	call	97af4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   975cc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   975d0:	0097b2c0 	call	97b2c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   975d4:	010002b4 	movhi	r4,10
   975d8:	2135cf04 	addi	r4,r4,-10436
   975dc:	014002b4 	movhi	r5,10
   975e0:	2975cf04 	addi	r5,r5,-10436
   975e4:	018002b4 	movhi	r6,10
   975e8:	31b5cf04 	addi	r6,r6,-10436
   975ec:	0098ca00 	call	98ca0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   975f0:	0098ae80 	call	98ae8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   975f4:	010002b4 	movhi	r4,10
   975f8:	2122d204 	addi	r4,r4,-29880
   975fc:	00994400 	call	99440 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   97600:	d127b817 	ldw	r4,-24864(gp)
   97604:	d0e7b917 	ldw	r3,-24860(gp)
   97608:	d0a7ba17 	ldw	r2,-24856(gp)
   9760c:	180b883a 	mov	r5,r3
   97610:	100d883a 	mov	r6,r2
   97614:	008bed80 	call	8bed8 <main>
   97618:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   9761c:	01000044 	movi	r4,1
   97620:	0096d9c0 	call	96d9c <close>
  exit (result);
   97624:	e13fff17 	ldw	r4,-4(fp)
   97628:	00994540 	call	99454 <exit>

0009762c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   9762c:	defffe04 	addi	sp,sp,-8
   97630:	df000115 	stw	fp,4(sp)
   97634:	df000104 	addi	fp,sp,4
   97638:	e13fff15 	stw	r4,-4(fp)
}
   9763c:	e037883a 	mov	sp,fp
   97640:	df000017 	ldw	fp,0(sp)
   97644:	dec00104 	addi	sp,sp,4
   97648:	f800283a 	ret

0009764c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   9764c:	defffe04 	addi	sp,sp,-8
   97650:	df000115 	stw	fp,4(sp)
   97654:	df000104 	addi	fp,sp,4
   97658:	e13fff15 	stw	r4,-4(fp)
}
   9765c:	e037883a 	mov	sp,fp
   97660:	df000017 	ldw	fp,0(sp)
   97664:	dec00104 	addi	sp,sp,4
   97668:	f800283a 	ret

0009766c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9766c:	defffe04 	addi	sp,sp,-8
   97670:	dfc00115 	stw	ra,4(sp)
   97674:	df000015 	stw	fp,0(sp)
   97678:	d839883a 	mov	fp,sp
   9767c:	d83bb615 	stw	zero,-4392(sp)
  return ((alt_errno) ? alt_errno() : &errno);
   97680:	008002b4 	movhi	r2,10
   97684:	10bd7104 	addi	r2,r2,-2620
   97688:	10800017 	ldw	r2,0(r2)
   9768c:	10000526 	beq	r2,zero,976a4 <alt_get_errno+0x38>
   97690:	008002b4 	movhi	r2,10
   97694:	10bd7104 	addi	r2,r2,-2620
   97698:	10800017 	ldw	r2,0(r2)
   9769c:	103ee83a 	callr	r2
   976a0:	00000206 	br	976ac <alt_get_errno+0x40>
   976a4:	008002b4 	movhi	r2,10
   976a8:	10851604 	addi	r2,r2,5208
}
   976ac:	e037883a 	mov	sp,fp
   976b0:	dfc00117 	ldw	ra,4(sp)
   976b4:	df000017 	ldw	fp,0(sp)
   976b8:	dec00204 	addi	sp,sp,8
   976bc:	f800283a 	ret

000976c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   976c0:	defff904 	addi	sp,sp,-28
   976c4:	dfc00615 	stw	ra,24(sp)
   976c8:	df000515 	stw	fp,20(sp)
   976cc:	df000504 	addi	fp,sp,20
   976d0:	e13ffd15 	stw	r4,-12(fp)
   976d4:	e17ffe15 	stw	r5,-8(fp)
   976d8:	e1bfff15 	stw	r6,-4(fp)
   976dc:	d83bb615 	stw	zero,-4392(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   976e0:	e0bffd17 	ldw	r2,-12(fp)
   976e4:	10000616 	blt	r2,zero,97700 <read+0x40>
   976e8:	e0bffd17 	ldw	r2,-12(fp)
   976ec:	10c00324 	muli	r3,r2,12
   976f0:	008002b4 	movhi	r2,10
   976f4:	10b88b04 	addi	r2,r2,-7636
   976f8:	1885883a 	add	r2,r3,r2
   976fc:	00000106 	br	97704 <read+0x44>
   97700:	0005883a 	mov	r2,zero
   97704:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   97708:	e0bffb17 	ldw	r2,-20(fp)
   9770c:	10002026 	beq	r2,zero,97790 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   97710:	e0bffb17 	ldw	r2,-20(fp)
   97714:	10800217 	ldw	r2,8(r2)
   97718:	108000cc 	andi	r2,r2,3
   9771c:	10800060 	cmpeqi	r2,r2,1
   97720:	1000171e 	bne	r2,zero,97780 <read+0xc0>
        (fd->dev->read))
   97724:	e0bffb17 	ldw	r2,-20(fp)
   97728:	10800017 	ldw	r2,0(r2)
   9772c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   97730:	10001326 	beq	r2,zero,97780 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   97734:	e0bffb17 	ldw	r2,-20(fp)
   97738:	10800017 	ldw	r2,0(r2)
   9773c:	10c00517 	ldw	r3,20(r2)
   97740:	e0bfff17 	ldw	r2,-4(fp)
   97744:	e13ffb17 	ldw	r4,-20(fp)
   97748:	e17ffe17 	ldw	r5,-8(fp)
   9774c:	100d883a 	mov	r6,r2
   97750:	183ee83a 	callr	r3
   97754:	e0bffc15 	stw	r2,-16(fp)
   97758:	e0bffc17 	ldw	r2,-16(fp)
   9775c:	1000060e 	bge	r2,zero,97778 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   97760:	009766c0 	call	9766c <alt_get_errno>
   97764:	e0fffc17 	ldw	r3,-16(fp)
   97768:	00c7c83a 	sub	r3,zero,r3
   9776c:	10c00015 	stw	r3,0(r2)
          return -1;
   97770:	00bfffc4 	movi	r2,-1
   97774:	00000a06 	br	977a0 <read+0xe0>
        }
        return rval;
   97778:	e0bffc17 	ldw	r2,-16(fp)
   9777c:	00000806 	br	977a0 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   97780:	009766c0 	call	9766c <alt_get_errno>
   97784:	00c00344 	movi	r3,13
   97788:	10c00015 	stw	r3,0(r2)
   9778c:	00000306 	br	9779c <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   97790:	009766c0 	call	9766c <alt_get_errno>
   97794:	00c01444 	movi	r3,81
   97798:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   9779c:	00bfffc4 	movi	r2,-1
}
   977a0:	e037883a 	mov	sp,fp
   977a4:	dfc00117 	ldw	ra,4(sp)
   977a8:	df000017 	ldw	fp,0(sp)
   977ac:	dec00204 	addi	sp,sp,8
   977b0:	f800283a 	ret

000977b4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   977b4:	defffe04 	addi	sp,sp,-8
   977b8:	df000115 	stw	fp,4(sp)
   977bc:	df000104 	addi	fp,sp,4
   977c0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   977c4:	e0bfff17 	ldw	r2,-4(fp)
   977c8:	108000d0 	cmplti	r2,r2,3
   977cc:	10000d1e 	bne	r2,zero,97804 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   977d0:	00c002b4 	movhi	r3,10
   977d4:	18f88b04 	addi	r3,r3,-7636
   977d8:	e0bfff17 	ldw	r2,-4(fp)
   977dc:	10800324 	muli	r2,r2,12
   977e0:	1885883a 	add	r2,r3,r2
   977e4:	10800204 	addi	r2,r2,8
   977e8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   977ec:	00c002b4 	movhi	r3,10
   977f0:	18f88b04 	addi	r3,r3,-7636
   977f4:	e0bfff17 	ldw	r2,-4(fp)
   977f8:	10800324 	muli	r2,r2,12
   977fc:	1885883a 	add	r2,r3,r2
   97800:	10000015 	stw	zero,0(r2)
  }
}
   97804:	e037883a 	mov	sp,fp
   97808:	df000017 	ldw	fp,0(sp)
   9780c:	dec00104 	addi	sp,sp,4
   97810:	f800283a 	ret

00097814 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   97814:	defff504 	addi	sp,sp,-44
   97818:	df000a15 	stw	fp,40(sp)
   9781c:	dc000915 	stw	r16,36(sp)
   97820:	df000904 	addi	fp,sp,36
   97824:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   97828:	0005303a 	rdctl	r2,status
   9782c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   97830:	e0fff917 	ldw	r3,-28(fp)
   97834:	00bfff84 	movi	r2,-2
   97838:	1884703a 	and	r2,r3,r2
   9783c:	1001703a 	wrctl	status,r2
  
  return context;
   97840:	e0bff917 	ldw	r2,-28(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   97844:	e0bff715 	stw	r2,-36(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   97848:	d0a00f17 	ldw	r2,-32708(gp)
   9784c:	10c000c4 	addi	r3,r2,3
   97850:	00bfff04 	movi	r2,-4
   97854:	1884703a 	and	r2,r3,r2
   97858:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   9785c:	d0e00f17 	ldw	r3,-32708(gp)
   97860:	e0bfff17 	ldw	r2,-4(fp)
   97864:	1885883a 	add	r2,r3,r2
   97868:	00c00374 	movhi	r3,13
   9786c:	18eabc04 	addi	r3,r3,-21776
   97870:	1880062e 	bgeu	r3,r2,9788c <sbrk+0x78>
   97874:	e0bff717 	ldw	r2,-36(fp)
   97878:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9787c:	e0bffa17 	ldw	r2,-24(fp)
   97880:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   97884:	00bfffc4 	movi	r2,-1
   97888:	00002806 	br	9792c <sbrk+0x118>
  }
#endif

  prev_heap_end = heap_end; 
   9788c:	d0a00f17 	ldw	r2,-32708(gp)
   97890:	e0bff815 	stw	r2,-32(fp)
  heap_end += incr; 
   97894:	d0e00f17 	ldw	r3,-32708(gp)
   97898:	e0bfff17 	ldw	r2,-4(fp)
   9789c:	1885883a 	add	r2,r3,r2
   978a0:	d0a00f15 	stw	r2,-32708(gp)
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_limit (void)
{
  char * limit;
  NIOS2_READ_ET(limit);
   978a4:	c021883a 	mov	r16,et
   978a8:	e43ffb15 	stw	r16,-20(fp)

  return limit; 
   978ac:	e0bffb17 	ldw	r2,-20(fp)
   * pointer overflow. 
   * If the stack limit isn't pointing at the top of the heap then the code
   * is using a different stack so none of this needs to be done.
   */

  if (alt_stack_limit() == prev_heap_end)
   978b0:	1007883a 	mov	r3,r2
   978b4:	e0bff817 	ldw	r2,-32(fp)
   978b8:	18800e1e 	bne	r3,r2,978f4 <sbrk+0xe0>
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_pointer (void)
{
  char * pointer;
  NIOS2_READ_SP(pointer);
   978bc:	d821883a 	mov	r16,sp
   978c0:	e43ffc15 	stw	r16,-16(fp)

  return pointer; 
   978c4:	e0bffc17 	ldw	r2,-16(fp)
  {
    if (alt_stack_pointer() <= heap_end)
   978c8:	d0e00f17 	ldw	r3,-32708(gp)
   978cc:	18800136 	bltu	r3,r2,978d4 <sbrk+0xc0>
 * alt_report_stack_overflow reports that a stack overflow happened.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_report_stack_overflow (void)
{
  NIOS2_REPORT_STACK_OVERFLOW();
   978d0:	003da0fa 	break	3
      alt_report_stack_overflow();

    alt_set_stack_limit(heap_end);
   978d4:	d0a00f17 	ldw	r2,-32708(gp)
   978d8:	e0bffd15 	stw	r2,-12(fp)
 * limit register.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_set_stack_limit (char * limit)
{
  alt_stack_limit_value = limit;
   978dc:	008002b4 	movhi	r2,10
   978e0:	10bd6304 	addi	r2,r2,-2676
   978e4:	e0fffd17 	ldw	r3,-12(fp)
   978e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_ET(limit);
   978ec:	e0bffd17 	ldw	r2,-12(fp)
   978f0:	1031883a 	mov	et,r2
   * If we are executing from the exception stack then compare against the
   * stack we switched away from as well.  The exception stack is a fixed
   * size so doesn't need to be checked.
   */

  if (alt_exception_old_stack_limit == prev_heap_end)
   978f4:	d0e7bb17 	ldw	r3,-24852(gp)
   978f8:	e0bff817 	ldw	r2,-32(fp)
   978fc:	1880061e 	bne	r3,r2,97918 <sbrk+0x104>
  {
    if (alt_exception_old_stack_limit <= heap_end)
   97900:	d0a7bb17 	ldw	r2,-24852(gp)
   97904:	d0e00f17 	ldw	r3,-32708(gp)
   97908:	18800136 	bltu	r3,r2,97910 <sbrk+0xfc>
 * alt_report_stack_overflow reports that a stack overflow happened.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_report_stack_overflow (void)
{
  NIOS2_REPORT_STACK_OVERFLOW();
   9790c:	003da0fa 	break	3
      alt_report_stack_overflow();

    alt_exception_old_stack_limit = heap_end;
   97910:	d0a00f17 	ldw	r2,-32708(gp)
   97914:	d0a7bb15 	stw	r2,-24852(gp)
   97918:	e0bff717 	ldw	r2,-36(fp)
   9791c:	e0bffe15 	stw	r2,-8(fp)
   97920:	e0bffe17 	ldw	r2,-8(fp)
   97924:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   97928:	e0bff817 	ldw	r2,-32(fp)
} 
   9792c:	e037883a 	mov	sp,fp
   97930:	df000117 	ldw	fp,4(sp)
   97934:	dc000017 	ldw	r16,0(sp)
   97938:	dec00204 	addi	sp,sp,8
   9793c:	f800283a 	ret

00097940 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   97940:	defffd04 	addi	sp,sp,-12
   97944:	dfc00215 	stw	ra,8(sp)
   97948:	df000115 	stw	fp,4(sp)
   9794c:	df000104 	addi	fp,sp,4
   97950:	e13fff15 	stw	r4,-4(fp)
   97954:	d83bb615 	stw	zero,-4392(sp)
  return alt_busy_sleep(us);
   97958:	e13fff17 	ldw	r4,-4(fp)
   9795c:	00988540 	call	98854 <alt_busy_sleep>
}
   97960:	e037883a 	mov	sp,fp
   97964:	dfc00117 	ldw	ra,4(sp)
   97968:	df000017 	ldw	fp,0(sp)
   9796c:	dec00204 	addi	sp,sp,8
   97970:	f800283a 	ret

00097974 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   97974:	defffe04 	addi	sp,sp,-8
   97978:	dfc00115 	stw	ra,4(sp)
   9797c:	df000015 	stw	fp,0(sp)
   97980:	d839883a 	mov	fp,sp
   97984:	d83bb615 	stw	zero,-4392(sp)
  return ((alt_errno) ? alt_errno() : &errno);
   97988:	008002b4 	movhi	r2,10
   9798c:	10bd7104 	addi	r2,r2,-2620
   97990:	10800017 	ldw	r2,0(r2)
   97994:	10000526 	beq	r2,zero,979ac <alt_get_errno+0x38>
   97998:	008002b4 	movhi	r2,10
   9799c:	10bd7104 	addi	r2,r2,-2620
   979a0:	10800017 	ldw	r2,0(r2)
   979a4:	103ee83a 	callr	r2
   979a8:	00000206 	br	979b4 <alt_get_errno+0x40>
   979ac:	008002b4 	movhi	r2,10
   979b0:	10851604 	addi	r2,r2,5208
}
   979b4:	e037883a 	mov	sp,fp
   979b8:	dfc00117 	ldw	ra,4(sp)
   979bc:	df000017 	ldw	fp,0(sp)
   979c0:	dec00204 	addi	sp,sp,8
   979c4:	f800283a 	ret

000979c8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   979c8:	defff904 	addi	sp,sp,-28
   979cc:	dfc00615 	stw	ra,24(sp)
   979d0:	df000515 	stw	fp,20(sp)
   979d4:	df000504 	addi	fp,sp,20
   979d8:	e13ffd15 	stw	r4,-12(fp)
   979dc:	e17ffe15 	stw	r5,-8(fp)
   979e0:	e1bfff15 	stw	r6,-4(fp)
   979e4:	d83bb615 	stw	zero,-4392(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   979e8:	e0bffd17 	ldw	r2,-12(fp)
   979ec:	10000616 	blt	r2,zero,97a08 <write+0x40>
   979f0:	e0bffd17 	ldw	r2,-12(fp)
   979f4:	10c00324 	muli	r3,r2,12
   979f8:	008002b4 	movhi	r2,10
   979fc:	10b88b04 	addi	r2,r2,-7636
   97a00:	1885883a 	add	r2,r3,r2
   97a04:	00000106 	br	97a0c <write+0x44>
   97a08:	0005883a 	mov	r2,zero
   97a0c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   97a10:	e0bffb17 	ldw	r2,-20(fp)
   97a14:	10001f26 	beq	r2,zero,97a94 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   97a18:	e0bffb17 	ldw	r2,-20(fp)
   97a1c:	10800217 	ldw	r2,8(r2)
   97a20:	108000cc 	andi	r2,r2,3
   97a24:	10001726 	beq	r2,zero,97a84 <write+0xbc>
   97a28:	e0bffb17 	ldw	r2,-20(fp)
   97a2c:	10800017 	ldw	r2,0(r2)
   97a30:	10800617 	ldw	r2,24(r2)
   97a34:	10001326 	beq	r2,zero,97a84 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   97a38:	e0bffb17 	ldw	r2,-20(fp)
   97a3c:	10800017 	ldw	r2,0(r2)
   97a40:	10c00617 	ldw	r3,24(r2)
   97a44:	e0bfff17 	ldw	r2,-4(fp)
   97a48:	e13ffb17 	ldw	r4,-20(fp)
   97a4c:	e17ffe17 	ldw	r5,-8(fp)
   97a50:	100d883a 	mov	r6,r2
   97a54:	183ee83a 	callr	r3
   97a58:	e0bffc15 	stw	r2,-16(fp)
   97a5c:	e0bffc17 	ldw	r2,-16(fp)
   97a60:	1000060e 	bge	r2,zero,97a7c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   97a64:	00979740 	call	97974 <alt_get_errno>
   97a68:	e0fffc17 	ldw	r3,-16(fp)
   97a6c:	00c7c83a 	sub	r3,zero,r3
   97a70:	10c00015 	stw	r3,0(r2)
        return -1;
   97a74:	00bfffc4 	movi	r2,-1
   97a78:	00000a06 	br	97aa4 <write+0xdc>
      }
      return rval;
   97a7c:	e0bffc17 	ldw	r2,-16(fp)
   97a80:	00000806 	br	97aa4 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
   97a84:	00979740 	call	97974 <alt_get_errno>
   97a88:	00c00344 	movi	r3,13
   97a8c:	10c00015 	stw	r3,0(r2)
   97a90:	00000306 	br	97aa0 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   97a94:	00979740 	call	97974 <alt_get_errno>
   97a98:	00c01444 	movi	r3,81
   97a9c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   97aa0:	00bfffc4 	movi	r2,-1
}
   97aa4:	e037883a 	mov	sp,fp
   97aa8:	dfc00117 	ldw	ra,4(sp)
   97aac:	df000017 	ldw	fp,0(sp)
   97ab0:	dec00204 	addi	sp,sp,8
   97ab4:	f800283a 	ret

00097ab8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   97ab8:	defffd04 	addi	sp,sp,-12
   97abc:	dfc00215 	stw	ra,8(sp)
   97ac0:	df000115 	stw	fp,4(sp)
   97ac4:	df000104 	addi	fp,sp,4
   97ac8:	e13fff15 	stw	r4,-4(fp)
   97acc:	d83bb615 	stw	zero,-4392(sp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   97ad0:	e13fff17 	ldw	r4,-4(fp)
   97ad4:	014002b4 	movhi	r5,10
   97ad8:	297d6e04 	addi	r5,r5,-2632
   97adc:	0098a440 	call	98a44 <alt_dev_llist_insert>
}
   97ae0:	e037883a 	mov	sp,fp
   97ae4:	dfc00117 	ldw	ra,4(sp)
   97ae8:	df000017 	ldw	fp,0(sp)
   97aec:	dec00204 	addi	sp,sp,8
   97af0:	f800283a 	ret

00097af4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   97af4:	defffd04 	addi	sp,sp,-12
   97af8:	dfc00215 	stw	ra,8(sp)
   97afc:	df000115 	stw	fp,4(sp)
   97b00:	df000104 	addi	fp,sp,4
   97b04:	e13fff15 	stw	r4,-4(fp)
   97b08:	d83bb615 	stw	zero,-4392(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   97b0c:	00991340 	call	99134 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   97b10:	00800044 	movi	r2,1
   97b14:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   97b18:	e037883a 	mov	sp,fp
   97b1c:	dfc00117 	ldw	ra,4(sp)
   97b20:	df000017 	ldw	fp,0(sp)
   97b24:	dec00204 	addi	sp,sp,8
   97b28:	f800283a 	ret

00097b2c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   97b2c:	defffe04 	addi	sp,sp,-8
   97b30:	dfc00115 	stw	ra,4(sp)
   97b34:	df000015 	stw	fp,0(sp)
   97b38:	d839883a 	mov	fp,sp
   97b3c:	d83bb615 	stw	zero,-4392(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   97b40:	01000434 	movhi	r4,16
   97b44:	21040004 	addi	r4,r4,4096
   97b48:	000b883a 	mov	r5,zero
   97b4c:	000d883a 	mov	r6,zero
   97b50:	01c0fa04 	movi	r7,1000
   97b54:	00986880 	call	98688 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   97b58:	010002b4 	movhi	r4,10
   97b5c:	21395504 	addi	r4,r4,-6828
   97b60:	000b883a 	mov	r5,zero
   97b64:	01800044 	movi	r6,1
   97b68:	0097d040 	call	97d04 <altera_avalon_jtag_uart_init>
   97b6c:	010002b4 	movhi	r4,10
   97b70:	21394b04 	addi	r4,r4,-6868
   97b74:	0097ab80 	call	97ab8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   97b78:	0001883a 	nop
}
   97b7c:	e037883a 	mov	sp,fp
   97b80:	dfc00117 	ldw	ra,4(sp)
   97b84:	df000017 	ldw	fp,0(sp)
   97b88:	dec00204 	addi	sp,sp,8
   97b8c:	f800283a 	ret

00097b90 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   97b90:	defffa04 	addi	sp,sp,-24
   97b94:	dfc00515 	stw	ra,20(sp)
   97b98:	df000415 	stw	fp,16(sp)
   97b9c:	df000404 	addi	fp,sp,16
   97ba0:	e13ffd15 	stw	r4,-12(fp)
   97ba4:	e17ffe15 	stw	r5,-8(fp)
   97ba8:	e1bfff15 	stw	r6,-4(fp)
   97bac:	d83bb615 	stw	zero,-4392(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   97bb0:	e0bffd17 	ldw	r2,-12(fp)
   97bb4:	10800017 	ldw	r2,0(r2)
   97bb8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   97bbc:	e0bffc17 	ldw	r2,-16(fp)
   97bc0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   97bc4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   97bc8:	10800217 	ldw	r2,8(r2)
   97bcc:	1809883a 	mov	r4,r3
   97bd0:	e17ffe17 	ldw	r5,-8(fp)
   97bd4:	e1bfff17 	ldw	r6,-4(fp)
   97bd8:	100f883a 	mov	r7,r2
   97bdc:	00981cc0 	call	981cc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   97be0:	e037883a 	mov	sp,fp
   97be4:	dfc00117 	ldw	ra,4(sp)
   97be8:	df000017 	ldw	fp,0(sp)
   97bec:	dec00204 	addi	sp,sp,8
   97bf0:	f800283a 	ret

00097bf4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   97bf4:	defffa04 	addi	sp,sp,-24
   97bf8:	dfc00515 	stw	ra,20(sp)
   97bfc:	df000415 	stw	fp,16(sp)
   97c00:	df000404 	addi	fp,sp,16
   97c04:	e13ffd15 	stw	r4,-12(fp)
   97c08:	e17ffe15 	stw	r5,-8(fp)
   97c0c:	e1bfff15 	stw	r6,-4(fp)
   97c10:	d83bb615 	stw	zero,-4392(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   97c14:	e0bffd17 	ldw	r2,-12(fp)
   97c18:	10800017 	ldw	r2,0(r2)
   97c1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   97c20:	e0bffc17 	ldw	r2,-16(fp)
   97c24:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   97c28:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   97c2c:	10800217 	ldw	r2,8(r2)
   97c30:	1809883a 	mov	r4,r3
   97c34:	e17ffe17 	ldw	r5,-8(fp)
   97c38:	e1bfff17 	ldw	r6,-4(fp)
   97c3c:	100f883a 	mov	r7,r2
   97c40:	00983e80 	call	983e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   97c44:	e037883a 	mov	sp,fp
   97c48:	dfc00117 	ldw	ra,4(sp)
   97c4c:	df000017 	ldw	fp,0(sp)
   97c50:	dec00204 	addi	sp,sp,8
   97c54:	f800283a 	ret

00097c58 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   97c58:	defffc04 	addi	sp,sp,-16
   97c5c:	dfc00315 	stw	ra,12(sp)
   97c60:	df000215 	stw	fp,8(sp)
   97c64:	df000204 	addi	fp,sp,8
   97c68:	e13fff15 	stw	r4,-4(fp)
   97c6c:	d83bb615 	stw	zero,-4392(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   97c70:	e0bfff17 	ldw	r2,-4(fp)
   97c74:	10800017 	ldw	r2,0(r2)
   97c78:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   97c7c:	e0bffe17 	ldw	r2,-8(fp)
   97c80:	10c00a04 	addi	r3,r2,40
   97c84:	e0bfff17 	ldw	r2,-4(fp)
   97c88:	10800217 	ldw	r2,8(r2)
   97c8c:	1809883a 	mov	r4,r3
   97c90:	100b883a 	mov	r5,r2
   97c94:	00980700 	call	98070 <altera_avalon_jtag_uart_close>
}
   97c98:	e037883a 	mov	sp,fp
   97c9c:	dfc00117 	ldw	ra,4(sp)
   97ca0:	df000017 	ldw	fp,0(sp)
   97ca4:	dec00204 	addi	sp,sp,8
   97ca8:	f800283a 	ret

00097cac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   97cac:	defffa04 	addi	sp,sp,-24
   97cb0:	dfc00515 	stw	ra,20(sp)
   97cb4:	df000415 	stw	fp,16(sp)
   97cb8:	df000404 	addi	fp,sp,16
   97cbc:	e13ffd15 	stw	r4,-12(fp)
   97cc0:	e17ffe15 	stw	r5,-8(fp)
   97cc4:	e1bfff15 	stw	r6,-4(fp)
   97cc8:	d83bb615 	stw	zero,-4392(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   97ccc:	e0bffd17 	ldw	r2,-12(fp)
   97cd0:	10800017 	ldw	r2,0(r2)
   97cd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   97cd8:	e0bffc17 	ldw	r2,-16(fp)
   97cdc:	10800a04 	addi	r2,r2,40
   97ce0:	1009883a 	mov	r4,r2
   97ce4:	e17ffe17 	ldw	r5,-8(fp)
   97ce8:	e1bfff17 	ldw	r6,-4(fp)
   97cec:	00980d80 	call	980d8 <altera_avalon_jtag_uart_ioctl>
}
   97cf0:	e037883a 	mov	sp,fp
   97cf4:	dfc00117 	ldw	ra,4(sp)
   97cf8:	df000017 	ldw	fp,0(sp)
   97cfc:	dec00204 	addi	sp,sp,8
   97d00:	f800283a 	ret

00097d04 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   97d04:	defffa04 	addi	sp,sp,-24
   97d08:	dfc00515 	stw	ra,20(sp)
   97d0c:	df000415 	stw	fp,16(sp)
   97d10:	df000404 	addi	fp,sp,16
   97d14:	e13ffd15 	stw	r4,-12(fp)
   97d18:	e17ffe15 	stw	r5,-8(fp)
   97d1c:	e1bfff15 	stw	r6,-4(fp)
   97d20:	d83bb615 	stw	zero,-4392(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   97d24:	e0bffd17 	ldw	r2,-12(fp)
   97d28:	00c00044 	movi	r3,1
   97d2c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   97d30:	e0bffd17 	ldw	r2,-12(fp)
   97d34:	10800017 	ldw	r2,0(r2)
   97d38:	10800104 	addi	r2,r2,4
   97d3c:	e0fffd17 	ldw	r3,-12(fp)
   97d40:	18c00817 	ldw	r3,32(r3)
   97d44:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   97d48:	e0fffe17 	ldw	r3,-8(fp)
   97d4c:	e0bfff17 	ldw	r2,-4(fp)
   97d50:	d8000015 	stw	zero,0(sp)
   97d54:	1809883a 	mov	r4,r3
   97d58:	100b883a 	mov	r5,r2
   97d5c:	01800274 	movhi	r6,9
   97d60:	319f7204 	addi	r6,r6,32200
   97d64:	e1fffd17 	ldw	r7,-12(fp)
   97d68:	0096f980 	call	96f98 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   97d6c:	e0bffd17 	ldw	r2,-12(fp)
   97d70:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   97d74:	e0bffd17 	ldw	r2,-12(fp)
   97d78:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   97d7c:	008002b4 	movhi	r2,10
   97d80:	10851f04 	addi	r2,r2,5244
   97d84:	10800017 	ldw	r2,0(r2)
   97d88:	1809883a 	mov	r4,r3
   97d8c:	100b883a 	mov	r5,r2
   97d90:	01800274 	movhi	r6,9
   97d94:	319ff304 	addi	r6,r6,32716
   97d98:	e1fffd17 	ldw	r7,-12(fp)
   97d9c:	00987140 	call	98714 <alt_alarm_start>
   97da0:	1000040e 	bge	r2,zero,97db4 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   97da4:	e0bffd17 	ldw	r2,-12(fp)
   97da8:	00e00034 	movhi	r3,32768
   97dac:	18ffffc4 	addi	r3,r3,-1
   97db0:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   97db4:	e037883a 	mov	sp,fp
   97db8:	dfc00117 	ldw	ra,4(sp)
   97dbc:	df000017 	ldw	fp,0(sp)
   97dc0:	dec00204 	addi	sp,sp,8
   97dc4:	f800283a 	ret

00097dc8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   97dc8:	defff804 	addi	sp,sp,-32
   97dcc:	df000715 	stw	fp,28(sp)
   97dd0:	df000704 	addi	fp,sp,28
   97dd4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   97dd8:	e0bfff17 	ldw	r2,-4(fp)
   97ddc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   97de0:	e0bffb17 	ldw	r2,-20(fp)
   97de4:	10800017 	ldw	r2,0(r2)
   97de8:	e0bffc15 	stw	r2,-16(fp)
   97dec:	00000106 	br	97df4 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   97df0:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   97df4:	e0bffc17 	ldw	r2,-16(fp)
   97df8:	10800104 	addi	r2,r2,4
   97dfc:	10800037 	ldwio	r2,0(r2)
   97e00:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   97e04:	e0bffd17 	ldw	r2,-12(fp)
   97e08:	1080c00c 	andi	r2,r2,768
   97e0c:	10006a26 	beq	r2,zero,97fb8 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   97e10:	e0bffd17 	ldw	r2,-12(fp)
   97e14:	1080400c 	andi	r2,r2,256
   97e18:	10003326 	beq	r2,zero,97ee8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   97e1c:	00800074 	movhi	r2,1
   97e20:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   97e24:	e0bffb17 	ldw	r2,-20(fp)
   97e28:	10800a17 	ldw	r2,40(r2)
   97e2c:	10800044 	addi	r2,r2,1
   97e30:	1081ffcc 	andi	r2,r2,2047
   97e34:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   97e38:	e0bffb17 	ldw	r2,-20(fp)
   97e3c:	10c00b17 	ldw	r3,44(r2)
   97e40:	e0bffe17 	ldw	r2,-8(fp)
   97e44:	18801426 	beq	r3,r2,97e98 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   97e48:	e0bffc17 	ldw	r2,-16(fp)
   97e4c:	10800037 	ldwio	r2,0(r2)
   97e50:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   97e54:	e0bff917 	ldw	r2,-28(fp)
   97e58:	10a0000c 	andi	r2,r2,32768
   97e5c:	10001026 	beq	r2,zero,97ea0 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   97e60:	e0bffb17 	ldw	r2,-20(fp)
   97e64:	10800a17 	ldw	r2,40(r2)
   97e68:	e0fff917 	ldw	r3,-28(fp)
   97e6c:	e13ffb17 	ldw	r4,-20(fp)
   97e70:	2085883a 	add	r2,r4,r2
   97e74:	10800e04 	addi	r2,r2,56
   97e78:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   97e7c:	e0bffb17 	ldw	r2,-20(fp)
   97e80:	10800a17 	ldw	r2,40(r2)
   97e84:	10800044 	addi	r2,r2,1
   97e88:	10c1ffcc 	andi	r3,r2,2047
   97e8c:	e0bffb17 	ldw	r2,-20(fp)
   97e90:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   97e94:	003fe306 	br	97e24 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   97e98:	0001883a 	nop
   97e9c:	00000106 	br	97ea4 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   97ea0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   97ea4:	e0bff917 	ldw	r2,-28(fp)
   97ea8:	10bfffec 	andhi	r2,r2,65535
   97eac:	10000e26 	beq	r2,zero,97ee8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   97eb0:	e0bffb17 	ldw	r2,-20(fp)
   97eb4:	10c00817 	ldw	r3,32(r2)
   97eb8:	00bfff84 	movi	r2,-2
   97ebc:	1886703a 	and	r3,r3,r2
   97ec0:	e0bffb17 	ldw	r2,-20(fp)
   97ec4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   97ec8:	e0bffc17 	ldw	r2,-16(fp)
   97ecc:	10800104 	addi	r2,r2,4
   97ed0:	e0fffb17 	ldw	r3,-20(fp)
   97ed4:	18c00817 	ldw	r3,32(r3)
   97ed8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   97edc:	e0bffc17 	ldw	r2,-16(fp)
   97ee0:	10800104 	addi	r2,r2,4
   97ee4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   97ee8:	e0bffd17 	ldw	r2,-12(fp)
   97eec:	1080800c 	andi	r2,r2,512
   97ef0:	103fbf26 	beq	r2,zero,97df0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   97ef4:	e0bffd17 	ldw	r2,-12(fp)
   97ef8:	1004d43a 	srli	r2,r2,16
   97efc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   97f00:	00001406 	br	97f54 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   97f04:	e0bffc17 	ldw	r2,-16(fp)
   97f08:	e0fffb17 	ldw	r3,-20(fp)
   97f0c:	18c00d17 	ldw	r3,52(r3)
   97f10:	e13ffb17 	ldw	r4,-20(fp)
   97f14:	20c7883a 	add	r3,r4,r3
   97f18:	18c20e04 	addi	r3,r3,2104
   97f1c:	18c00003 	ldbu	r3,0(r3)
   97f20:	18c03fcc 	andi	r3,r3,255
   97f24:	18c0201c 	xori	r3,r3,128
   97f28:	18ffe004 	addi	r3,r3,-128
   97f2c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   97f30:	e0bffb17 	ldw	r2,-20(fp)
   97f34:	10800d17 	ldw	r2,52(r2)
   97f38:	10800044 	addi	r2,r2,1
   97f3c:	10c1ffcc 	andi	r3,r2,2047
   97f40:	e0bffb17 	ldw	r2,-20(fp)
   97f44:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   97f48:	e0bffa17 	ldw	r2,-24(fp)
   97f4c:	10bfffc4 	addi	r2,r2,-1
   97f50:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   97f54:	e0bffa17 	ldw	r2,-24(fp)
   97f58:	10000526 	beq	r2,zero,97f70 <altera_avalon_jtag_uart_irq+0x1a8>
   97f5c:	e0bffb17 	ldw	r2,-20(fp)
   97f60:	10c00d17 	ldw	r3,52(r2)
   97f64:	e0bffb17 	ldw	r2,-20(fp)
   97f68:	10800c17 	ldw	r2,48(r2)
   97f6c:	18bfe51e 	bne	r3,r2,97f04 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   97f70:	e0bffa17 	ldw	r2,-24(fp)
   97f74:	103f9e26 	beq	r2,zero,97df0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   97f78:	e0bffb17 	ldw	r2,-20(fp)
   97f7c:	10c00817 	ldw	r3,32(r2)
   97f80:	00bfff44 	movi	r2,-3
   97f84:	1886703a 	and	r3,r3,r2
   97f88:	e0bffb17 	ldw	r2,-20(fp)
   97f8c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   97f90:	e0bffb17 	ldw	r2,-20(fp)
   97f94:	10800017 	ldw	r2,0(r2)
   97f98:	10800104 	addi	r2,r2,4
   97f9c:	e0fffb17 	ldw	r3,-20(fp)
   97fa0:	18c00817 	ldw	r3,32(r3)
   97fa4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   97fa8:	e0bffc17 	ldw	r2,-16(fp)
   97fac:	10800104 	addi	r2,r2,4
   97fb0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   97fb4:	003f8e06 	br	97df0 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   97fb8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   97fbc:	e037883a 	mov	sp,fp
   97fc0:	df000017 	ldw	fp,0(sp)
   97fc4:	dec00104 	addi	sp,sp,4
   97fc8:	f800283a 	ret

00097fcc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   97fcc:	defffc04 	addi	sp,sp,-16
   97fd0:	df000315 	stw	fp,12(sp)
   97fd4:	df000304 	addi	fp,sp,12
   97fd8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   97fdc:	e0bfff17 	ldw	r2,-4(fp)
   97fe0:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   97fe4:	e0bffd17 	ldw	r2,-12(fp)
   97fe8:	10800017 	ldw	r2,0(r2)
   97fec:	10800104 	addi	r2,r2,4
   97ff0:	10800037 	ldwio	r2,0(r2)
   97ff4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   97ff8:	e0bffe17 	ldw	r2,-8(fp)
   97ffc:	1081000c 	andi	r2,r2,1024
   98000:	10000a26 	beq	r2,zero,9802c <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   98004:	e0bffd17 	ldw	r2,-12(fp)
   98008:	10800017 	ldw	r2,0(r2)
   9800c:	10800104 	addi	r2,r2,4
   98010:	e0fffd17 	ldw	r3,-12(fp)
   98014:	18c00817 	ldw	r3,32(r3)
   98018:	18c10014 	ori	r3,r3,1024
   9801c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   98020:	e0bffd17 	ldw	r2,-12(fp)
   98024:	10000915 	stw	zero,36(r2)
   98028:	00000a06 	br	98054 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   9802c:	e0bffd17 	ldw	r2,-12(fp)
   98030:	10800917 	ldw	r2,36(r2)
   98034:	00e00034 	movhi	r3,32768
   98038:	18ffff04 	addi	r3,r3,-4
   9803c:	18800536 	bltu	r3,r2,98054 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   98040:	e0bffd17 	ldw	r2,-12(fp)
   98044:	10800917 	ldw	r2,36(r2)
   98048:	10c00044 	addi	r3,r2,1
   9804c:	e0bffd17 	ldw	r2,-12(fp)
   98050:	10c00915 	stw	r3,36(r2)
   98054:	008002b4 	movhi	r2,10
   98058:	10851f04 	addi	r2,r2,5244
   9805c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   98060:	e037883a 	mov	sp,fp
   98064:	df000017 	ldw	fp,0(sp)
   98068:	dec00104 	addi	sp,sp,4
   9806c:	f800283a 	ret

00098070 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   98070:	defffd04 	addi	sp,sp,-12
   98074:	df000215 	stw	fp,8(sp)
   98078:	df000204 	addi	fp,sp,8
   9807c:	e13ffe15 	stw	r4,-8(fp)
   98080:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   98084:	00000506 	br	9809c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   98088:	e0bfff17 	ldw	r2,-4(fp)
   9808c:	1090000c 	andi	r2,r2,16384
   98090:	10000226 	beq	r2,zero,9809c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   98094:	00bffd44 	movi	r2,-11
   98098:	00000b06 	br	980c8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   9809c:	e0bffe17 	ldw	r2,-8(fp)
   980a0:	10c00d17 	ldw	r3,52(r2)
   980a4:	e0bffe17 	ldw	r2,-8(fp)
   980a8:	10800c17 	ldw	r2,48(r2)
   980ac:	18800526 	beq	r3,r2,980c4 <altera_avalon_jtag_uart_close+0x54>
   980b0:	e0bffe17 	ldw	r2,-8(fp)
   980b4:	10c00917 	ldw	r3,36(r2)
   980b8:	e0bffe17 	ldw	r2,-8(fp)
   980bc:	10800117 	ldw	r2,4(r2)
   980c0:	18bff136 	bltu	r3,r2,98088 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   980c4:	0005883a 	mov	r2,zero
}
   980c8:	e037883a 	mov	sp,fp
   980cc:	df000017 	ldw	fp,0(sp)
   980d0:	dec00104 	addi	sp,sp,4
   980d4:	f800283a 	ret

000980d8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   980d8:	defffa04 	addi	sp,sp,-24
   980dc:	df000515 	stw	fp,20(sp)
   980e0:	df000504 	addi	fp,sp,20
   980e4:	e13ffd15 	stw	r4,-12(fp)
   980e8:	e17ffe15 	stw	r5,-8(fp)
   980ec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   980f0:	00bff9c4 	movi	r2,-25
   980f4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   980f8:	e0bffe17 	ldw	r2,-8(fp)
   980fc:	10da8060 	cmpeqi	r3,r2,27137
   98100:	1800031e 	bne	r3,zero,98110 <altera_avalon_jtag_uart_ioctl+0x38>
   98104:	109a80a0 	cmpeqi	r2,r2,27138
   98108:	1000181e 	bne	r2,zero,9816c <altera_avalon_jtag_uart_ioctl+0x94>
   9810c:	00002606 	br	981a8 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   98110:	e0bffd17 	ldw	r2,-12(fp)
   98114:	10c00117 	ldw	r3,4(r2)
   98118:	00a00034 	movhi	r2,32768
   9811c:	10bfffc4 	addi	r2,r2,-1
   98120:	18802226 	beq	r3,r2,981ac <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   98124:	e0bfff17 	ldw	r2,-4(fp)
   98128:	10800017 	ldw	r2,0(r2)
   9812c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   98130:	e0bffc17 	ldw	r2,-16(fp)
   98134:	10800090 	cmplti	r2,r2,2
   98138:	1000061e 	bne	r2,zero,98154 <altera_avalon_jtag_uart_ioctl+0x7c>
   9813c:	e0fffc17 	ldw	r3,-16(fp)
   98140:	00a00034 	movhi	r2,32768
   98144:	10bfffc4 	addi	r2,r2,-1
   98148:	18800226 	beq	r3,r2,98154 <altera_avalon_jtag_uart_ioctl+0x7c>
   9814c:	e0bffc17 	ldw	r2,-16(fp)
   98150:	00000206 	br	9815c <altera_avalon_jtag_uart_ioctl+0x84>
   98154:	00a00034 	movhi	r2,32768
   98158:	10bfff84 	addi	r2,r2,-2
   9815c:	e0fffd17 	ldw	r3,-12(fp)
   98160:	18800115 	stw	r2,4(r3)
      rc = 0;
   98164:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   98168:	00001006 	br	981ac <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   9816c:	e0bffd17 	ldw	r2,-12(fp)
   98170:	10c00117 	ldw	r3,4(r2)
   98174:	00a00034 	movhi	r2,32768
   98178:	10bfffc4 	addi	r2,r2,-1
   9817c:	18800d26 	beq	r3,r2,981b4 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   98180:	e0bffd17 	ldw	r2,-12(fp)
   98184:	10c00917 	ldw	r3,36(r2)
   98188:	e0bffd17 	ldw	r2,-12(fp)
   9818c:	10800117 	ldw	r2,4(r2)
   98190:	1885803a 	cmpltu	r2,r3,r2
   98194:	10c03fcc 	andi	r3,r2,255
   98198:	e0bfff17 	ldw	r2,-4(fp)
   9819c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   981a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   981a4:	00000306 	br	981b4 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   981a8:	00000306 	br	981b8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   981ac:	0001883a 	nop
   981b0:	00000106 	br	981b8 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   981b4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   981b8:	e0bffb17 	ldw	r2,-20(fp)
}
   981bc:	e037883a 	mov	sp,fp
   981c0:	df000017 	ldw	fp,0(sp)
   981c4:	dec00104 	addi	sp,sp,4
   981c8:	f800283a 	ret

000981cc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   981cc:	defff304 	addi	sp,sp,-52
   981d0:	dfc00c15 	stw	ra,48(sp)
   981d4:	df000b15 	stw	fp,44(sp)
   981d8:	df000b04 	addi	fp,sp,44
   981dc:	e13ffc15 	stw	r4,-16(fp)
   981e0:	e17ffd15 	stw	r5,-12(fp)
   981e4:	e1bffe15 	stw	r6,-8(fp)
   981e8:	e1ffff15 	stw	r7,-4(fp)
   981ec:	d83bb615 	stw	zero,-4392(sp)
  char * ptr = buffer;
   981f0:	e0bffd17 	ldw	r2,-12(fp)
   981f4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   981f8:	00004706 	br	98318 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   981fc:	e0bffc17 	ldw	r2,-16(fp)
   98200:	10800a17 	ldw	r2,40(r2)
   98204:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   98208:	e0bffc17 	ldw	r2,-16(fp)
   9820c:	10800b17 	ldw	r2,44(r2)
   98210:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   98214:	e0fff717 	ldw	r3,-36(fp)
   98218:	e0bff817 	ldw	r2,-32(fp)
   9821c:	18800536 	bltu	r3,r2,98234 <altera_avalon_jtag_uart_read+0x68>
        n = in - out;
   98220:	e0fff717 	ldw	r3,-36(fp)
   98224:	e0bff817 	ldw	r2,-32(fp)
   98228:	1885c83a 	sub	r2,r3,r2
   9822c:	e0bff615 	stw	r2,-40(fp)
   98230:	00000406 	br	98244 <altera_avalon_jtag_uart_read+0x78>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   98234:	00c20004 	movi	r3,2048
   98238:	e0bff817 	ldw	r2,-32(fp)
   9823c:	1885c83a 	sub	r2,r3,r2
   98240:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   98244:	e0bff617 	ldw	r2,-40(fp)
   98248:	10001e26 	beq	r2,zero,982c4 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */

      if (n > space)
   9824c:	e0fffe17 	ldw	r3,-8(fp)
   98250:	e0bff617 	ldw	r2,-40(fp)
   98254:	1880022e 	bgeu	r3,r2,98260 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   98258:	e0bffe17 	ldw	r2,-8(fp)
   9825c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   98260:	e0bff817 	ldw	r2,-32(fp)
   98264:	10800e04 	addi	r2,r2,56
   98268:	e0fffc17 	ldw	r3,-16(fp)
   9826c:	1885883a 	add	r2,r3,r2
   98270:	e13ff517 	ldw	r4,-44(fp)
   98274:	100b883a 	mov	r5,r2
   98278:	e1bff617 	ldw	r6,-40(fp)
   9827c:	008e3840 	call	8e384 <memcpy>
      ptr   += n;
   98280:	e0fff517 	ldw	r3,-44(fp)
   98284:	e0bff617 	ldw	r2,-40(fp)
   98288:	1885883a 	add	r2,r3,r2
   9828c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   98290:	e0fffe17 	ldw	r3,-8(fp)
   98294:	e0bff617 	ldw	r2,-40(fp)
   98298:	1885c83a 	sub	r2,r3,r2
   9829c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   982a0:	e0fff817 	ldw	r3,-32(fp)
   982a4:	e0bff617 	ldw	r2,-40(fp)
   982a8:	1885883a 	add	r2,r3,r2
   982ac:	10c1ffcc 	andi	r3,r2,2047
   982b0:	e0bffc17 	ldw	r2,-16(fp)
   982b4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   982b8:	e0bffe17 	ldw	r2,-8(fp)
   982bc:	00bfcf16 	blt	zero,r2,981fc <altera_avalon_jtag_uart_read+0x30>
   982c0:	00000106 	br	982c8 <altera_avalon_jtag_uart_read+0xfc>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   982c4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   982c8:	e0fff517 	ldw	r3,-44(fp)
   982cc:	e0bffd17 	ldw	r2,-12(fp)
   982d0:	1880141e 	bne	r3,r2,98324 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   982d4:	e0bfff17 	ldw	r2,-4(fp)
   982d8:	1090000c 	andi	r2,r2,16384
   982dc:	1000131e 	bne	r2,zero,9832c <altera_avalon_jtag_uart_read+0x160>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   982e0:	0001883a 	nop
   982e4:	e0bffc17 	ldw	r2,-16(fp)
   982e8:	10c00a17 	ldw	r3,40(r2)
   982ec:	e0bff717 	ldw	r2,-36(fp)
   982f0:	1880051e 	bne	r3,r2,98308 <altera_avalon_jtag_uart_read+0x13c>
   982f4:	e0bffc17 	ldw	r2,-16(fp)
   982f8:	10c00917 	ldw	r3,36(r2)
   982fc:	e0bffc17 	ldw	r2,-16(fp)
   98300:	10800117 	ldw	r2,4(r2)
   98304:	18bff736 	bltu	r3,r2,982e4 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   98308:	e0bffc17 	ldw	r2,-16(fp)
   9830c:	10c00a17 	ldw	r3,40(r2)
   98310:	e0bff717 	ldw	r2,-36(fp)
   98314:	18800726 	beq	r3,r2,98334 <altera_avalon_jtag_uart_read+0x168>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   98318:	e0bffe17 	ldw	r2,-8(fp)
   9831c:	00bfb716 	blt	zero,r2,981fc <altera_avalon_jtag_uart_read+0x30>
   98320:	00000506 	br	98338 <altera_avalon_jtag_uart_read+0x16c>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   98324:	0001883a 	nop
   98328:	00000306 	br	98338 <altera_avalon_jtag_uart_read+0x16c>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   9832c:	0001883a 	nop
   98330:	00000106 	br	98338 <altera_avalon_jtag_uart_read+0x16c>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   98334:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   98338:	e0fff517 	ldw	r3,-44(fp)
   9833c:	e0bffd17 	ldw	r2,-12(fp)
   98340:	18801726 	beq	r3,r2,983a0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   98344:	0005303a 	rdctl	r2,status
   98348:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9834c:	e0fffa17 	ldw	r3,-24(fp)
   98350:	00bfff84 	movi	r2,-2
   98354:	1884703a 	and	r2,r3,r2
   98358:	1001703a 	wrctl	status,r2
  
  return context;
   9835c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   98360:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   98364:	e0bffc17 	ldw	r2,-16(fp)
   98368:	10800817 	ldw	r2,32(r2)
   9836c:	10c00054 	ori	r3,r2,1
   98370:	e0bffc17 	ldw	r2,-16(fp)
   98374:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   98378:	e0bffc17 	ldw	r2,-16(fp)
   9837c:	10800017 	ldw	r2,0(r2)
   98380:	10800104 	addi	r2,r2,4
   98384:	e0fffc17 	ldw	r3,-16(fp)
   98388:	18c00817 	ldw	r3,32(r3)
   9838c:	10c00035 	stwio	r3,0(r2)
   98390:	e0bff917 	ldw	r2,-28(fp)
   98394:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   98398:	e0bffb17 	ldw	r2,-20(fp)
   9839c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   983a0:	e0fff517 	ldw	r3,-44(fp)
   983a4:	e0bffd17 	ldw	r2,-12(fp)
   983a8:	18800426 	beq	r3,r2,983bc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   983ac:	e0fff517 	ldw	r3,-44(fp)
   983b0:	e0bffd17 	ldw	r2,-12(fp)
   983b4:	1885c83a 	sub	r2,r3,r2
   983b8:	00000606 	br	983d4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   983bc:	e0bfff17 	ldw	r2,-4(fp)
   983c0:	1090000c 	andi	r2,r2,16384
   983c4:	10000226 	beq	r2,zero,983d0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   983c8:	00bffd44 	movi	r2,-11
   983cc:	00000106 	br	983d4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   983d0:	00bffec4 	movi	r2,-5
}
   983d4:	e037883a 	mov	sp,fp
   983d8:	dfc00117 	ldw	ra,4(sp)
   983dc:	df000017 	ldw	fp,0(sp)
   983e0:	dec00204 	addi	sp,sp,8
   983e4:	f800283a 	ret

000983e8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   983e8:	defff304 	addi	sp,sp,-52
   983ec:	dfc00c15 	stw	ra,48(sp)
   983f0:	df000b15 	stw	fp,44(sp)
   983f4:	df000b04 	addi	fp,sp,44
   983f8:	e13ffc15 	stw	r4,-16(fp)
   983fc:	e17ffd15 	stw	r5,-12(fp)
   98400:	e1bffe15 	stw	r6,-8(fp)
   98404:	e1ffff15 	stw	r7,-4(fp)
   98408:	d83bb615 	stw	zero,-4392(sp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   9840c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   98410:	e0bffd17 	ldw	r2,-12(fp)
   98414:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   98418:	00003706 	br	984f8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   9841c:	e0bffc17 	ldw	r2,-16(fp)
   98420:	10800c17 	ldw	r2,48(r2)
   98424:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   98428:	e0bffc17 	ldw	r2,-16(fp)
   9842c:	10800d17 	ldw	r2,52(r2)
   98430:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   98434:	e0fff817 	ldw	r3,-32(fp)
   98438:	e0bff517 	ldw	r2,-44(fp)
   9843c:	1880062e 	bgeu	r3,r2,98458 <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
   98440:	e0fff517 	ldw	r3,-44(fp)
   98444:	e0bff817 	ldw	r2,-32(fp)
   98448:	1885c83a 	sub	r2,r3,r2
   9844c:	10bfffc4 	addi	r2,r2,-1
   98450:	e0bff615 	stw	r2,-40(fp)
   98454:	00000b06 	br	98484 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   98458:	e0bff517 	ldw	r2,-44(fp)
   9845c:	10000526 	beq	r2,zero,98474 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   98460:	00c20004 	movi	r3,2048
   98464:	e0bff817 	ldw	r2,-32(fp)
   98468:	1885c83a 	sub	r2,r3,r2
   9846c:	e0bff615 	stw	r2,-40(fp)
   98470:	00000406 	br	98484 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   98474:	00c1ffc4 	movi	r3,2047
   98478:	e0bff817 	ldw	r2,-32(fp)
   9847c:	1885c83a 	sub	r2,r3,r2
   98480:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   98484:	e0bff617 	ldw	r2,-40(fp)
   98488:	10001e26 	beq	r2,zero,98504 <altera_avalon_jtag_uart_write+0x11c>
        break;

      if (n > count)
   9848c:	e0fffe17 	ldw	r3,-8(fp)
   98490:	e0bff617 	ldw	r2,-40(fp)
   98494:	1880022e 	bgeu	r3,r2,984a0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   98498:	e0bffe17 	ldw	r2,-8(fp)
   9849c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   984a0:	e0bff817 	ldw	r2,-32(fp)
   984a4:	10820e04 	addi	r2,r2,2104
   984a8:	e0fffc17 	ldw	r3,-16(fp)
   984ac:	1885883a 	add	r2,r3,r2
   984b0:	1009883a 	mov	r4,r2
   984b4:	e17ffd17 	ldw	r5,-12(fp)
   984b8:	e1bff617 	ldw	r6,-40(fp)
   984bc:	008e3840 	call	8e384 <memcpy>
      ptr   += n;
   984c0:	e0fffd17 	ldw	r3,-12(fp)
   984c4:	e0bff617 	ldw	r2,-40(fp)
   984c8:	1885883a 	add	r2,r3,r2
   984cc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   984d0:	e0fffe17 	ldw	r3,-8(fp)
   984d4:	e0bff617 	ldw	r2,-40(fp)
   984d8:	1885c83a 	sub	r2,r3,r2
   984dc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   984e0:	e0fff817 	ldw	r3,-32(fp)
   984e4:	e0bff617 	ldw	r2,-40(fp)
   984e8:	1885883a 	add	r2,r3,r2
   984ec:	10c1ffcc 	andi	r3,r2,2047
   984f0:	e0bffc17 	ldw	r2,-16(fp)
   984f4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   984f8:	e0bffe17 	ldw	r2,-8(fp)
   984fc:	00bfc716 	blt	zero,r2,9841c <altera_avalon_jtag_uart_write+0x34>
   98500:	00000106 	br	98508 <altera_avalon_jtag_uart_write+0x120>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   98504:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   98508:	0005303a 	rdctl	r2,status
   9850c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   98510:	e0fffa17 	ldw	r3,-24(fp)
   98514:	00bfff84 	movi	r2,-2
   98518:	1884703a 	and	r2,r3,r2
   9851c:	1001703a 	wrctl	status,r2
  
  return context;
   98520:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   98524:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   98528:	e0bffc17 	ldw	r2,-16(fp)
   9852c:	10800817 	ldw	r2,32(r2)
   98530:	10c00094 	ori	r3,r2,2
   98534:	e0bffc17 	ldw	r2,-16(fp)
   98538:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   9853c:	e0bffc17 	ldw	r2,-16(fp)
   98540:	10800017 	ldw	r2,0(r2)
   98544:	10800104 	addi	r2,r2,4
   98548:	e0fffc17 	ldw	r3,-16(fp)
   9854c:	18c00817 	ldw	r3,32(r3)
   98550:	10c00035 	stwio	r3,0(r2)
   98554:	e0bff917 	ldw	r2,-28(fp)
   98558:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9855c:	e0bffb17 	ldw	r2,-20(fp)
   98560:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   98564:	e0bffe17 	ldw	r2,-8(fp)
   98568:	0080110e 	bge	zero,r2,985b0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   9856c:	e0bfff17 	ldw	r2,-4(fp)
   98570:	1090000c 	andi	r2,r2,16384
   98574:	1000111e 	bne	r2,zero,985bc <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   98578:	0001883a 	nop
   9857c:	e0bffc17 	ldw	r2,-16(fp)
   98580:	10c00d17 	ldw	r3,52(r2)
   98584:	e0bff517 	ldw	r2,-44(fp)
   98588:	1880051e 	bne	r3,r2,985a0 <altera_avalon_jtag_uart_write+0x1b8>
   9858c:	e0bffc17 	ldw	r2,-16(fp)
   98590:	10c00917 	ldw	r3,36(r2)
   98594:	e0bffc17 	ldw	r2,-16(fp)
   98598:	10800117 	ldw	r2,4(r2)
   9859c:	18bff736 	bltu	r3,r2,9857c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   985a0:	e0bffc17 	ldw	r2,-16(fp)
   985a4:	10c00d17 	ldw	r3,52(r2)
   985a8:	e0bff517 	ldw	r2,-44(fp)
   985ac:	18800526 	beq	r3,r2,985c4 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   985b0:	e0bffe17 	ldw	r2,-8(fp)
   985b4:	00bfd016 	blt	zero,r2,984f8 <altera_avalon_jtag_uart_write+0x110>
   985b8:	00000306 	br	985c8 <altera_avalon_jtag_uart_write+0x1e0>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   985bc:	0001883a 	nop
   985c0:	00000106 	br	985c8 <altera_avalon_jtag_uart_write+0x1e0>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   985c4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   985c8:	e0fffd17 	ldw	r3,-12(fp)
   985cc:	e0bff717 	ldw	r2,-36(fp)
   985d0:	18800426 	beq	r3,r2,985e4 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   985d4:	e0fffd17 	ldw	r3,-12(fp)
   985d8:	e0bff717 	ldw	r2,-36(fp)
   985dc:	1885c83a 	sub	r2,r3,r2
   985e0:	00000606 	br	985fc <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   985e4:	e0bfff17 	ldw	r2,-4(fp)
   985e8:	1090000c 	andi	r2,r2,16384
   985ec:	10000226 	beq	r2,zero,985f8 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   985f0:	00bffd44 	movi	r2,-11
   985f4:	00000106 	br	985fc <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   985f8:	00bffec4 	movi	r2,-5
}
   985fc:	e037883a 	mov	sp,fp
   98600:	dfc00117 	ldw	ra,4(sp)
   98604:	df000017 	ldw	fp,0(sp)
   98608:	dec00204 	addi	sp,sp,8
   9860c:	f800283a 	ret

00098610 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   98610:	defffa04 	addi	sp,sp,-24
   98614:	dfc00515 	stw	ra,20(sp)
   98618:	df000415 	stw	fp,16(sp)
   9861c:	df000404 	addi	fp,sp,16
   98620:	e13fff15 	stw	r4,-4(fp)
   98624:	d83bb615 	stw	zero,-4392(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   98628:	0007883a 	mov	r3,zero
   9862c:	e0bfff17 	ldw	r2,-4(fp)
   98630:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   98634:	e0bfff17 	ldw	r2,-4(fp)
   98638:	10800104 	addi	r2,r2,4
   9863c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   98640:	0005303a 	rdctl	r2,status
   98644:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   98648:	e0fffd17 	ldw	r3,-12(fp)
   9864c:	00bfff84 	movi	r2,-2
   98650:	1884703a 	and	r2,r3,r2
   98654:	1001703a 	wrctl	status,r2
  
  return context;
   98658:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   9865c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   98660:	009902c0 	call	9902c <alt_tick>
   98664:	e0bffc17 	ldw	r2,-16(fp)
   98668:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9866c:	e0bffe17 	ldw	r2,-8(fp)
   98670:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   98674:	e037883a 	mov	sp,fp
   98678:	dfc00117 	ldw	ra,4(sp)
   9867c:	df000017 	ldw	fp,0(sp)
   98680:	dec00204 	addi	sp,sp,8
   98684:	f800283a 	ret

00098688 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   98688:	defff804 	addi	sp,sp,-32
   9868c:	dfc00715 	stw	ra,28(sp)
   98690:	df000615 	stw	fp,24(sp)
   98694:	df000604 	addi	fp,sp,24
   98698:	e13ffc15 	stw	r4,-16(fp)
   9869c:	e17ffd15 	stw	r5,-12(fp)
   986a0:	e1bffe15 	stw	r6,-8(fp)
   986a4:	e1ffff15 	stw	r7,-4(fp)
   986a8:	d83bb615 	stw	zero,-4392(sp)
   986ac:	e0bfff17 	ldw	r2,-4(fp)
   986b0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   986b4:	008002b4 	movhi	r2,10
   986b8:	10851f04 	addi	r2,r2,5244
   986bc:	10800017 	ldw	r2,0(r2)
   986c0:	1000041e 	bne	r2,zero,986d4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   986c4:	008002b4 	movhi	r2,10
   986c8:	10851f04 	addi	r2,r2,5244
   986cc:	e0fffb17 	ldw	r3,-20(fp)
   986d0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   986d4:	e0bffc17 	ldw	r2,-16(fp)
   986d8:	10800104 	addi	r2,r2,4
   986dc:	00c001c4 	movi	r3,7
   986e0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   986e4:	d8000015 	stw	zero,0(sp)
   986e8:	e13ffd17 	ldw	r4,-12(fp)
   986ec:	e17ffe17 	ldw	r5,-8(fp)
   986f0:	018002b4 	movhi	r6,10
   986f4:	31a18404 	addi	r6,r6,-31216
   986f8:	e1fffc17 	ldw	r7,-16(fp)
   986fc:	0096f980 	call	96f98 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   98700:	e037883a 	mov	sp,fp
   98704:	dfc00117 	ldw	ra,4(sp)
   98708:	df000017 	ldw	fp,0(sp)
   9870c:	dec00204 	addi	sp,sp,8
   98710:	f800283a 	ret

00098714 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   98714:	defff504 	addi	sp,sp,-44
   98718:	df000a15 	stw	fp,40(sp)
   9871c:	df000a04 	addi	fp,sp,40
   98720:	e13ffc15 	stw	r4,-16(fp)
   98724:	e17ffd15 	stw	r5,-12(fp)
   98728:	e1bffe15 	stw	r6,-8(fp)
   9872c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   98730:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   98734:	008002b4 	movhi	r2,10
   98738:	10851f04 	addi	r2,r2,5244
   9873c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   98740:	10003f26 	beq	r2,zero,98840 <alt_alarm_start+0x12c>
  {
    if (alarm)
   98744:	e0bffc17 	ldw	r2,-16(fp)
   98748:	10003b26 	beq	r2,zero,98838 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   9874c:	e0bffc17 	ldw	r2,-16(fp)
   98750:	e0fffe17 	ldw	r3,-8(fp)
   98754:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   98758:	e0bffc17 	ldw	r2,-16(fp)
   9875c:	e0ffff17 	ldw	r3,-4(fp)
   98760:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   98764:	0005303a 	rdctl	r2,status
   98768:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9876c:	e0fff817 	ldw	r3,-32(fp)
   98770:	00bfff84 	movi	r2,-2
   98774:	1884703a 	and	r2,r3,r2
   98778:	1001703a 	wrctl	status,r2
  
  return context;
   9877c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   98780:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   98784:	008002b4 	movhi	r2,10
   98788:	10852004 	addi	r2,r2,5248
   9878c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   98790:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   98794:	e0fffd17 	ldw	r3,-12(fp)
   98798:	e0bff617 	ldw	r2,-40(fp)
   9879c:	1885883a 	add	r2,r3,r2
   987a0:	10c00044 	addi	r3,r2,1
   987a4:	e0bffc17 	ldw	r2,-16(fp)
   987a8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   987ac:	e0bffc17 	ldw	r2,-16(fp)
   987b0:	10c00217 	ldw	r3,8(r2)
   987b4:	e0bff617 	ldw	r2,-40(fp)
   987b8:	1880042e 	bgeu	r3,r2,987cc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   987bc:	e0bffc17 	ldw	r2,-16(fp)
   987c0:	00c00044 	movi	r3,1
   987c4:	10c00405 	stb	r3,16(r2)
   987c8:	00000206 	br	987d4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   987cc:	e0bffc17 	ldw	r2,-16(fp)
   987d0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   987d4:	e0bffc17 	ldw	r2,-16(fp)
   987d8:	00c002b4 	movhi	r3,10
   987dc:	18fd7304 	addi	r3,r3,-2612
   987e0:	e0fff915 	stw	r3,-28(fp)
   987e4:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   987e8:	e0bffa17 	ldw	r2,-24(fp)
   987ec:	e0fff917 	ldw	r3,-28(fp)
   987f0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   987f4:	e0bff917 	ldw	r2,-28(fp)
   987f8:	10c00017 	ldw	r3,0(r2)
   987fc:	e0bffa17 	ldw	r2,-24(fp)
   98800:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   98804:	e0bff917 	ldw	r2,-28(fp)
   98808:	10800017 	ldw	r2,0(r2)
   9880c:	e0fffa17 	ldw	r3,-24(fp)
   98810:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   98814:	e0bff917 	ldw	r2,-28(fp)
   98818:	e0fffa17 	ldw	r3,-24(fp)
   9881c:	10c00015 	stw	r3,0(r2)
   98820:	e0bff717 	ldw	r2,-36(fp)
   98824:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   98828:	e0bffb17 	ldw	r2,-20(fp)
   9882c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   98830:	0005883a 	mov	r2,zero
   98834:	00000306 	br	98844 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   98838:	00bffa84 	movi	r2,-22
   9883c:	00000106 	br	98844 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   98840:	00bfde84 	movi	r2,-134
  }
}
   98844:	e037883a 	mov	sp,fp
   98848:	df000017 	ldw	fp,0(sp)
   9884c:	dec00104 	addi	sp,sp,4
   98850:	f800283a 	ret

00098854 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   98854:	defffa04 	addi	sp,sp,-24
   98858:	dfc00515 	stw	ra,20(sp)
   9885c:	df000415 	stw	fp,16(sp)
   98860:	df000404 	addi	fp,sp,16
   98864:	e13fff15 	stw	r4,-4(fp)
   98868:	d83bb615 	stw	zero,-4392(sp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   9886c:	008000c4 	movi	r2,3
   98870:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   98874:	e0fffd17 	ldw	r3,-12(fp)
   98878:	008003f4 	movhi	r2,15
   9887c:	10909004 	addi	r2,r2,16960
   98880:	1885383a 	mul	r2,r3,r2
   98884:	0100bef4 	movhi	r4,763
   98888:	213c2004 	addi	r4,r4,-3968
   9888c:	100b883a 	mov	r5,r2
   98890:	008cf380 	call	8cf38 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   98894:	01200034 	movhi	r4,32768
   98898:	213fffc4 	addi	r4,r4,-1
   9889c:	100b883a 	mov	r5,r2
   988a0:	008cf380 	call	8cf38 <__udivsi3>
   988a4:	e13fff17 	ldw	r4,-4(fp)
   988a8:	100b883a 	mov	r5,r2
   988ac:	008cf380 	call	8cf38 <__udivsi3>
   988b0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   988b4:	e0bffe17 	ldw	r2,-8(fp)
   988b8:	10002926 	beq	r2,zero,98960 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   988bc:	e03ffc15 	stw	zero,-16(fp)
   988c0:	00001606 	br	9891c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   988c4:	00a00034 	movhi	r2,32768
   988c8:	10bfffc4 	addi	r2,r2,-1
   988cc:	10bfffc4 	addi	r2,r2,-1
   988d0:	103ffe1e 	bne	r2,zero,988cc <alt_busy_sleep+0x78>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   988d4:	e0fffd17 	ldw	r3,-12(fp)
   988d8:	008003f4 	movhi	r2,15
   988dc:	10909004 	addi	r2,r2,16960
   988e0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   988e4:	0100bef4 	movhi	r4,763
   988e8:	213c2004 	addi	r4,r4,-3968
   988ec:	100b883a 	mov	r5,r2
   988f0:	008cf380 	call	8cf38 <__udivsi3>
   988f4:	01200034 	movhi	r4,32768
   988f8:	213fffc4 	addi	r4,r4,-1
   988fc:	100b883a 	mov	r5,r2
   98900:	008cf380 	call	8cf38 <__udivsi3>
   98904:	e0ffff17 	ldw	r3,-4(fp)
   98908:	1885c83a 	sub	r2,r3,r2
   9890c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   98910:	e0bffc17 	ldw	r2,-16(fp)
   98914:	10800044 	addi	r2,r2,1
   98918:	e0bffc15 	stw	r2,-16(fp)
   9891c:	e0fffc17 	ldw	r3,-16(fp)
   98920:	e0bffe17 	ldw	r2,-8(fp)
   98924:	18bfe716 	blt	r3,r2,988c4 <alt_busy_sleep+0x70>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   98928:	e0fffd17 	ldw	r3,-12(fp)
   9892c:	008003f4 	movhi	r2,15
   98930:	10909004 	addi	r2,r2,16960
   98934:	1885383a 	mul	r2,r3,r2
   98938:	0100bef4 	movhi	r4,763
   9893c:	213c2004 	addi	r4,r4,-3968
   98940:	100b883a 	mov	r5,r2
   98944:	008cf380 	call	8cf38 <__udivsi3>
   98948:	1007883a 	mov	r3,r2
   9894c:	e0bfff17 	ldw	r2,-4(fp)
   98950:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   98954:	10bfffc4 	addi	r2,r2,-1
   98958:	103ffe1e 	bne	r2,zero,98954 <alt_busy_sleep+0x100>
   9895c:	00000d06 	br	98994 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   98960:	e0fffd17 	ldw	r3,-12(fp)
   98964:	008003f4 	movhi	r2,15
   98968:	10909004 	addi	r2,r2,16960
   9896c:	1885383a 	mul	r2,r3,r2
   98970:	0100bef4 	movhi	r4,763
   98974:	213c2004 	addi	r4,r4,-3968
   98978:	100b883a 	mov	r5,r2
   9897c:	008cf380 	call	8cf38 <__udivsi3>
   98980:	1007883a 	mov	r3,r2
   98984:	e0bfff17 	ldw	r2,-4(fp)
   98988:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   9898c:	10bfffc4 	addi	r2,r2,-1
   98990:	00bffe16 	blt	zero,r2,9898c <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   98994:	0005883a 	mov	r2,zero
}
   98998:	e037883a 	mov	sp,fp
   9899c:	dfc00117 	ldw	ra,4(sp)
   989a0:	df000017 	ldw	fp,0(sp)
   989a4:	dec00204 	addi	sp,sp,8
   989a8:	f800283a 	ret

000989ac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   989ac:	defffe04 	addi	sp,sp,-8
   989b0:	df000115 	stw	fp,4(sp)
   989b4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   989b8:	e03fff15 	stw	zero,-4(fp)
   989bc:	00000506 	br	989d4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   989c0:	e0bfff17 	ldw	r2,-4(fp)
   989c4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   989c8:	e0bfff17 	ldw	r2,-4(fp)
   989cc:	10800804 	addi	r2,r2,32
   989d0:	e0bfff15 	stw	r2,-4(fp)
   989d4:	e0bfff17 	ldw	r2,-4(fp)
   989d8:	10820030 	cmpltui	r2,r2,2048
   989dc:	103ff81e 	bne	r2,zero,989c0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   989e0:	e037883a 	mov	sp,fp
   989e4:	df000017 	ldw	fp,0(sp)
   989e8:	dec00104 	addi	sp,sp,4
   989ec:	f800283a 	ret

000989f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   989f0:	defffe04 	addi	sp,sp,-8
   989f4:	dfc00115 	stw	ra,4(sp)
   989f8:	df000015 	stw	fp,0(sp)
   989fc:	d839883a 	mov	fp,sp
   98a00:	d83bb615 	stw	zero,-4392(sp)
  return ((alt_errno) ? alt_errno() : &errno);
   98a04:	008002b4 	movhi	r2,10
   98a08:	10bd7104 	addi	r2,r2,-2620
   98a0c:	10800017 	ldw	r2,0(r2)
   98a10:	10000526 	beq	r2,zero,98a28 <alt_get_errno+0x38>
   98a14:	008002b4 	movhi	r2,10
   98a18:	10bd7104 	addi	r2,r2,-2620
   98a1c:	10800017 	ldw	r2,0(r2)
   98a20:	103ee83a 	callr	r2
   98a24:	00000206 	br	98a30 <alt_get_errno+0x40>
   98a28:	008002b4 	movhi	r2,10
   98a2c:	10851604 	addi	r2,r2,5208
}
   98a30:	e037883a 	mov	sp,fp
   98a34:	dfc00117 	ldw	ra,4(sp)
   98a38:	df000017 	ldw	fp,0(sp)
   98a3c:	dec00204 	addi	sp,sp,8
   98a40:	f800283a 	ret

00098a44 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   98a44:	defffa04 	addi	sp,sp,-24
   98a48:	dfc00515 	stw	ra,20(sp)
   98a4c:	df000415 	stw	fp,16(sp)
   98a50:	df000404 	addi	fp,sp,16
   98a54:	e13ffe15 	stw	r4,-8(fp)
   98a58:	e17fff15 	stw	r5,-4(fp)
   98a5c:	d83bb615 	stw	zero,-4392(sp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   98a60:	e0bffe17 	ldw	r2,-8(fp)
   98a64:	10000326 	beq	r2,zero,98a74 <alt_dev_llist_insert+0x30>
   98a68:	e0bffe17 	ldw	r2,-8(fp)
   98a6c:	10800217 	ldw	r2,8(r2)
   98a70:	1000051e 	bne	r2,zero,98a88 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   98a74:	00989f00 	call	989f0 <alt_get_errno>
   98a78:	00c00584 	movi	r3,22
   98a7c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   98a80:	00bffa84 	movi	r2,-22
   98a84:	00001306 	br	98ad4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   98a88:	e0bffe17 	ldw	r2,-8(fp)
   98a8c:	e0ffff17 	ldw	r3,-4(fp)
   98a90:	e0fffc15 	stw	r3,-16(fp)
   98a94:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   98a98:	e0bffd17 	ldw	r2,-12(fp)
   98a9c:	e0fffc17 	ldw	r3,-16(fp)
   98aa0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   98aa4:	e0bffc17 	ldw	r2,-16(fp)
   98aa8:	10c00017 	ldw	r3,0(r2)
   98aac:	e0bffd17 	ldw	r2,-12(fp)
   98ab0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   98ab4:	e0bffc17 	ldw	r2,-16(fp)
   98ab8:	10800017 	ldw	r2,0(r2)
   98abc:	e0fffd17 	ldw	r3,-12(fp)
   98ac0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   98ac4:	e0bffc17 	ldw	r2,-16(fp)
   98ac8:	e0fffd17 	ldw	r3,-12(fp)
   98acc:	10c00015 	stw	r3,0(r2)

  return 0;  
   98ad0:	0005883a 	mov	r2,zero
}
   98ad4:	e037883a 	mov	sp,fp
   98ad8:	dfc00117 	ldw	ra,4(sp)
   98adc:	df000017 	ldw	fp,0(sp)
   98ae0:	dec00204 	addi	sp,sp,8
   98ae4:	f800283a 	ret

00098ae8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   98ae8:	defffd04 	addi	sp,sp,-12
   98aec:	dfc00215 	stw	ra,8(sp)
   98af0:	df000115 	stw	fp,4(sp)
   98af4:	df000104 	addi	fp,sp,4
   98af8:	d83bb615 	stw	zero,-4392(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   98afc:	008002b4 	movhi	r2,10
   98b00:	10a5e504 	addi	r2,r2,-26732
   98b04:	e0bfff15 	stw	r2,-4(fp)
   98b08:	00000606 	br	98b24 <_do_ctors+0x3c>
        (*ctor) (); 
   98b0c:	e0bfff17 	ldw	r2,-4(fp)
   98b10:	10800017 	ldw	r2,0(r2)
   98b14:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   98b18:	e0bfff17 	ldw	r2,-4(fp)
   98b1c:	10bfff04 	addi	r2,r2,-4
   98b20:	e0bfff15 	stw	r2,-4(fp)
   98b24:	e0ffff17 	ldw	r3,-4(fp)
   98b28:	008002b4 	movhi	r2,10
   98b2c:	10a5e604 	addi	r2,r2,-26728
   98b30:	18bff62e 	bgeu	r3,r2,98b0c <_do_ctors+0x24>
        (*ctor) (); 
}
   98b34:	e037883a 	mov	sp,fp
   98b38:	dfc00117 	ldw	ra,4(sp)
   98b3c:	df000017 	ldw	fp,0(sp)
   98b40:	dec00204 	addi	sp,sp,8
   98b44:	f800283a 	ret

00098b48 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   98b48:	defffd04 	addi	sp,sp,-12
   98b4c:	dfc00215 	stw	ra,8(sp)
   98b50:	df000115 	stw	fp,4(sp)
   98b54:	df000104 	addi	fp,sp,4
   98b58:	d83bb615 	stw	zero,-4392(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   98b5c:	008002b4 	movhi	r2,10
   98b60:	10a5e504 	addi	r2,r2,-26732
   98b64:	e0bfff15 	stw	r2,-4(fp)
   98b68:	00000606 	br	98b84 <_do_dtors+0x3c>
        (*dtor) (); 
   98b6c:	e0bfff17 	ldw	r2,-4(fp)
   98b70:	10800017 	ldw	r2,0(r2)
   98b74:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   98b78:	e0bfff17 	ldw	r2,-4(fp)
   98b7c:	10bfff04 	addi	r2,r2,-4
   98b80:	e0bfff15 	stw	r2,-4(fp)
   98b84:	e0ffff17 	ldw	r3,-4(fp)
   98b88:	008002b4 	movhi	r2,10
   98b8c:	10a5e604 	addi	r2,r2,-26728
   98b90:	18bff62e 	bgeu	r3,r2,98b6c <_do_dtors+0x24>
        (*dtor) (); 
}
   98b94:	e037883a 	mov	sp,fp
   98b98:	dfc00117 	ldw	ra,4(sp)
   98b9c:	df000017 	ldw	fp,0(sp)
   98ba0:	dec00204 	addi	sp,sp,8
   98ba4:	f800283a 	ret

00098ba8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   98ba8:	defffe04 	addi	sp,sp,-8
   98bac:	dfc00115 	stw	ra,4(sp)
   98bb0:	df000015 	stw	fp,0(sp)
   98bb4:	d839883a 	mov	fp,sp
   98bb8:	d83bb615 	stw	zero,-4392(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   98bbc:	0009883a 	mov	r4,zero
   98bc0:	01440004 	movi	r5,4096
   98bc4:	00993b40 	call	993b4 <alt_icache_flush>
#endif
}
   98bc8:	e037883a 	mov	sp,fp
   98bcc:	dfc00117 	ldw	ra,4(sp)
   98bd0:	df000017 	ldw	fp,0(sp)
   98bd4:	dec00204 	addi	sp,sp,8
   98bd8:	f800283a 	ret

00098bdc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   98bdc:	defff904 	addi	sp,sp,-28
   98be0:	dfc00615 	stw	ra,24(sp)
   98be4:	df000515 	stw	fp,20(sp)
   98be8:	df000504 	addi	fp,sp,20
   98bec:	e13ffc15 	stw	r4,-16(fp)
   98bf0:	e17ffd15 	stw	r5,-12(fp)
   98bf4:	e1bffe15 	stw	r6,-8(fp)
   98bf8:	e1ffff15 	stw	r7,-4(fp)
   98bfc:	d83bb615 	stw	zero,-4392(sp)
  int old;

  old = open (name, flags, mode);
   98c00:	e13ffd17 	ldw	r4,-12(fp)
   98c04:	e17ffe17 	ldw	r5,-8(fp)
   98c08:	e1bfff17 	ldw	r6,-4(fp)
   98c0c:	0098e3c0 	call	98e3c <open>
   98c10:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   98c14:	e0bffb17 	ldw	r2,-20(fp)
   98c18:	10001c16 	blt	r2,zero,98c8c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   98c1c:	00c002b4 	movhi	r3,10
   98c20:	18f88b04 	addi	r3,r3,-7636
   98c24:	e0bffb17 	ldw	r2,-20(fp)
   98c28:	10800324 	muli	r2,r2,12
   98c2c:	1885883a 	add	r2,r3,r2
   98c30:	10c00017 	ldw	r3,0(r2)
   98c34:	e0bffc17 	ldw	r2,-16(fp)
   98c38:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   98c3c:	00c002b4 	movhi	r3,10
   98c40:	18f88b04 	addi	r3,r3,-7636
   98c44:	e0bffb17 	ldw	r2,-20(fp)
   98c48:	10800324 	muli	r2,r2,12
   98c4c:	1885883a 	add	r2,r3,r2
   98c50:	10800104 	addi	r2,r2,4
   98c54:	10c00017 	ldw	r3,0(r2)
   98c58:	e0bffc17 	ldw	r2,-16(fp)
   98c5c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   98c60:	00c002b4 	movhi	r3,10
   98c64:	18f88b04 	addi	r3,r3,-7636
   98c68:	e0bffb17 	ldw	r2,-20(fp)
   98c6c:	10800324 	muli	r2,r2,12
   98c70:	1885883a 	add	r2,r3,r2
   98c74:	10800204 	addi	r2,r2,8
   98c78:	10c00017 	ldw	r3,0(r2)
   98c7c:	e0bffc17 	ldw	r2,-16(fp)
   98c80:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   98c84:	e13ffb17 	ldw	r4,-20(fp)
   98c88:	00977b40 	call	977b4 <alt_release_fd>
  }
} 
   98c8c:	e037883a 	mov	sp,fp
   98c90:	dfc00117 	ldw	ra,4(sp)
   98c94:	df000017 	ldw	fp,0(sp)
   98c98:	dec00204 	addi	sp,sp,8
   98c9c:	f800283a 	ret

00098ca0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   98ca0:	defffb04 	addi	sp,sp,-20
   98ca4:	dfc00415 	stw	ra,16(sp)
   98ca8:	df000315 	stw	fp,12(sp)
   98cac:	df000304 	addi	fp,sp,12
   98cb0:	e13ffd15 	stw	r4,-12(fp)
   98cb4:	e17ffe15 	stw	r5,-8(fp)
   98cb8:	e1bfff15 	stw	r6,-4(fp)
   98cbc:	d83bb615 	stw	zero,-4392(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   98cc0:	010002b4 	movhi	r4,10
   98cc4:	21388e04 	addi	r4,r4,-7624
   98cc8:	e17ffd17 	ldw	r5,-12(fp)
   98ccc:	01800044 	movi	r6,1
   98cd0:	01c07fc4 	movi	r7,511
   98cd4:	0098bdc0 	call	98bdc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   98cd8:	010002b4 	movhi	r4,10
   98cdc:	21388b04 	addi	r4,r4,-7636
   98ce0:	e17ffe17 	ldw	r5,-8(fp)
   98ce4:	000d883a 	mov	r6,zero
   98ce8:	01c07fc4 	movi	r7,511
   98cec:	0098bdc0 	call	98bdc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   98cf0:	010002b4 	movhi	r4,10
   98cf4:	21389104 	addi	r4,r4,-7612
   98cf8:	e17fff17 	ldw	r5,-4(fp)
   98cfc:	01800044 	movi	r6,1
   98d00:	01c07fc4 	movi	r7,511
   98d04:	0098bdc0 	call	98bdc <alt_open_fd>
}  
   98d08:	e037883a 	mov	sp,fp
   98d0c:	dfc00117 	ldw	ra,4(sp)
   98d10:	df000017 	ldw	fp,0(sp)
   98d14:	dec00204 	addi	sp,sp,8
   98d18:	f800283a 	ret

00098d1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   98d1c:	defffe04 	addi	sp,sp,-8
   98d20:	dfc00115 	stw	ra,4(sp)
   98d24:	df000015 	stw	fp,0(sp)
   98d28:	d839883a 	mov	fp,sp
   98d2c:	d83bb615 	stw	zero,-4392(sp)
  return ((alt_errno) ? alt_errno() : &errno);
   98d30:	008002b4 	movhi	r2,10
   98d34:	10bd7104 	addi	r2,r2,-2620
   98d38:	10800017 	ldw	r2,0(r2)
   98d3c:	10000526 	beq	r2,zero,98d54 <alt_get_errno+0x38>
   98d40:	008002b4 	movhi	r2,10
   98d44:	10bd7104 	addi	r2,r2,-2620
   98d48:	10800017 	ldw	r2,0(r2)
   98d4c:	103ee83a 	callr	r2
   98d50:	00000206 	br	98d5c <alt_get_errno+0x40>
   98d54:	008002b4 	movhi	r2,10
   98d58:	10851604 	addi	r2,r2,5208
}
   98d5c:	e037883a 	mov	sp,fp
   98d60:	dfc00117 	ldw	ra,4(sp)
   98d64:	df000017 	ldw	fp,0(sp)
   98d68:	dec00204 	addi	sp,sp,8
   98d6c:	f800283a 	ret

00098d70 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   98d70:	defffd04 	addi	sp,sp,-12
   98d74:	df000215 	stw	fp,8(sp)
   98d78:	df000204 	addi	fp,sp,8
   98d7c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   98d80:	e0bfff17 	ldw	r2,-4(fp)
   98d84:	10800217 	ldw	r2,8(r2)
   98d88:	10d00034 	orhi	r3,r2,16384
   98d8c:	e0bfff17 	ldw	r2,-4(fp)
   98d90:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   98d94:	e03ffe15 	stw	zero,-8(fp)
   98d98:	00001d06 	br	98e10 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   98d9c:	00c002b4 	movhi	r3,10
   98da0:	18f88b04 	addi	r3,r3,-7636
   98da4:	e0bffe17 	ldw	r2,-8(fp)
   98da8:	10800324 	muli	r2,r2,12
   98dac:	1885883a 	add	r2,r3,r2
   98db0:	10c00017 	ldw	r3,0(r2)
   98db4:	e0bfff17 	ldw	r2,-4(fp)
   98db8:	10800017 	ldw	r2,0(r2)
   98dbc:	1880111e 	bne	r3,r2,98e04 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   98dc0:	00c002b4 	movhi	r3,10
   98dc4:	18f88b04 	addi	r3,r3,-7636
   98dc8:	e0bffe17 	ldw	r2,-8(fp)
   98dcc:	10800324 	muli	r2,r2,12
   98dd0:	1885883a 	add	r2,r3,r2
   98dd4:	10800204 	addi	r2,r2,8
   98dd8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   98ddc:	1000090e 	bge	r2,zero,98e04 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   98de0:	e0bffe17 	ldw	r2,-8(fp)
   98de4:	10c00324 	muli	r3,r2,12
   98de8:	008002b4 	movhi	r2,10
   98dec:	10b88b04 	addi	r2,r2,-7636
   98df0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   98df4:	e0bfff17 	ldw	r2,-4(fp)
   98df8:	18800226 	beq	r3,r2,98e04 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   98dfc:	00bffcc4 	movi	r2,-13
   98e00:	00000a06 	br	98e2c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   98e04:	e0bffe17 	ldw	r2,-8(fp)
   98e08:	10800044 	addi	r2,r2,1
   98e0c:	e0bffe15 	stw	r2,-8(fp)
   98e10:	008002b4 	movhi	r2,10
   98e14:	10bd7004 	addi	r2,r2,-2624
   98e18:	10800017 	ldw	r2,0(r2)
   98e1c:	1007883a 	mov	r3,r2
   98e20:	e0bffe17 	ldw	r2,-8(fp)
   98e24:	18bfdd2e 	bgeu	r3,r2,98d9c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   98e28:	0005883a 	mov	r2,zero
}
   98e2c:	e037883a 	mov	sp,fp
   98e30:	df000017 	ldw	fp,0(sp)
   98e34:	dec00104 	addi	sp,sp,4
   98e38:	f800283a 	ret

00098e3c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   98e3c:	defff604 	addi	sp,sp,-40
   98e40:	dfc00915 	stw	ra,36(sp)
   98e44:	df000815 	stw	fp,32(sp)
   98e48:	df000804 	addi	fp,sp,32
   98e4c:	e13ffd15 	stw	r4,-12(fp)
   98e50:	e17ffe15 	stw	r5,-8(fp)
   98e54:	e1bfff15 	stw	r6,-4(fp)
   98e58:	d83bb615 	stw	zero,-4392(sp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   98e5c:	00bfffc4 	movi	r2,-1
   98e60:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   98e64:	00bffb44 	movi	r2,-19
   98e68:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   98e6c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   98e70:	e13ffd17 	ldw	r4,-12(fp)
   98e74:	014002b4 	movhi	r5,10
   98e78:	297d6e04 	addi	r5,r5,-2632
   98e7c:	00991540 	call	99154 <alt_find_dev>
   98e80:	e0bff815 	stw	r2,-32(fp)
   98e84:	e0bff817 	ldw	r2,-32(fp)
   98e88:	1000051e 	bne	r2,zero,98ea0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   98e8c:	e13ffd17 	ldw	r4,-12(fp)
   98e90:	00991e80 	call	991e8 <alt_find_file>
   98e94:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   98e98:	00800044 	movi	r2,1
   98e9c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   98ea0:	e0bff817 	ldw	r2,-32(fp)
   98ea4:	10002926 	beq	r2,zero,98f4c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   98ea8:	e13ff817 	ldw	r4,-32(fp)
   98eac:	00993000 	call	99300 <alt_get_fd>
   98eb0:	e0bff915 	stw	r2,-28(fp)
   98eb4:	e0bff917 	ldw	r2,-28(fp)
   98eb8:	1000030e 	bge	r2,zero,98ec8 <open+0x8c>
    {
      status = index;
   98ebc:	e0bff917 	ldw	r2,-28(fp)
   98ec0:	e0bffa15 	stw	r2,-24(fp)
   98ec4:	00002306 	br	98f54 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   98ec8:	e0bff917 	ldw	r2,-28(fp)
   98ecc:	10c00324 	muli	r3,r2,12
   98ed0:	008002b4 	movhi	r2,10
   98ed4:	10b88b04 	addi	r2,r2,-7636
   98ed8:	1885883a 	add	r2,r3,r2
   98edc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   98ee0:	e0fffe17 	ldw	r3,-8(fp)
   98ee4:	00900034 	movhi	r2,16384
   98ee8:	10bfffc4 	addi	r2,r2,-1
   98eec:	1886703a 	and	r3,r3,r2
   98ef0:	e0bffc17 	ldw	r2,-16(fp)
   98ef4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   98ef8:	e0bffb17 	ldw	r2,-20(fp)
   98efc:	1000051e 	bne	r2,zero,98f14 <open+0xd8>
   98f00:	e13ffc17 	ldw	r4,-16(fp)
   98f04:	0098d700 	call	98d70 <alt_file_locked>
   98f08:	e0bffa15 	stw	r2,-24(fp)
   98f0c:	e0bffa17 	ldw	r2,-24(fp)
   98f10:	10001016 	blt	r2,zero,98f54 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   98f14:	e0bff817 	ldw	r2,-32(fp)
   98f18:	10800317 	ldw	r2,12(r2)
   98f1c:	10000826 	beq	r2,zero,98f40 <open+0x104>
   98f20:	e0bff817 	ldw	r2,-32(fp)
   98f24:	10800317 	ldw	r2,12(r2)
   98f28:	e13ffc17 	ldw	r4,-16(fp)
   98f2c:	e17ffd17 	ldw	r5,-12(fp)
   98f30:	e1bffe17 	ldw	r6,-8(fp)
   98f34:	e1ffff17 	ldw	r7,-4(fp)
   98f38:	103ee83a 	callr	r2
   98f3c:	00000106 	br	98f44 <open+0x108>
   98f40:	0005883a 	mov	r2,zero
   98f44:	e0bffa15 	stw	r2,-24(fp)
   98f48:	00000206 	br	98f54 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   98f4c:	00bffb44 	movi	r2,-19
   98f50:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   98f54:	e0bffa17 	ldw	r2,-24(fp)
   98f58:	1000080e 	bge	r2,zero,98f7c <open+0x140>
  {
    alt_release_fd (index);  
   98f5c:	e13ff917 	ldw	r4,-28(fp)
   98f60:	00977b40 	call	977b4 <alt_release_fd>
    ALT_ERRNO = -status;
   98f64:	0098d1c0 	call	98d1c <alt_get_errno>
   98f68:	e0fffa17 	ldw	r3,-24(fp)
   98f6c:	00c7c83a 	sub	r3,zero,r3
   98f70:	10c00015 	stw	r3,0(r2)
    return -1;
   98f74:	00bfffc4 	movi	r2,-1
   98f78:	00000106 	br	98f80 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   98f7c:	e0bff917 	ldw	r2,-28(fp)
}
   98f80:	e037883a 	mov	sp,fp
   98f84:	dfc00117 	ldw	ra,4(sp)
   98f88:	df000017 	ldw	fp,0(sp)
   98f8c:	dec00204 	addi	sp,sp,8
   98f90:	f800283a 	ret

00098f94 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   98f94:	defffa04 	addi	sp,sp,-24
   98f98:	df000515 	stw	fp,20(sp)
   98f9c:	df000504 	addi	fp,sp,20
   98fa0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   98fa4:	0005303a 	rdctl	r2,status
   98fa8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   98fac:	e0fffc17 	ldw	r3,-16(fp)
   98fb0:	00bfff84 	movi	r2,-2
   98fb4:	1884703a 	and	r2,r3,r2
   98fb8:	1001703a 	wrctl	status,r2
  
  return context;
   98fbc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   98fc0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   98fc4:	e0bfff17 	ldw	r2,-4(fp)
   98fc8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   98fcc:	e0bffd17 	ldw	r2,-12(fp)
   98fd0:	10800017 	ldw	r2,0(r2)
   98fd4:	e0fffd17 	ldw	r3,-12(fp)
   98fd8:	18c00117 	ldw	r3,4(r3)
   98fdc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   98fe0:	e0bffd17 	ldw	r2,-12(fp)
   98fe4:	10800117 	ldw	r2,4(r2)
   98fe8:	e0fffd17 	ldw	r3,-12(fp)
   98fec:	18c00017 	ldw	r3,0(r3)
   98ff0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   98ff4:	e0bffd17 	ldw	r2,-12(fp)
   98ff8:	e0fffd17 	ldw	r3,-12(fp)
   98ffc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   99000:	e0bffd17 	ldw	r2,-12(fp)
   99004:	e0fffd17 	ldw	r3,-12(fp)
   99008:	10c00015 	stw	r3,0(r2)
   9900c:	e0bffb17 	ldw	r2,-20(fp)
   99010:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   99014:	e0bffe17 	ldw	r2,-8(fp)
   99018:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   9901c:	e037883a 	mov	sp,fp
   99020:	df000017 	ldw	fp,0(sp)
   99024:	dec00104 	addi	sp,sp,4
   99028:	f800283a 	ret

0009902c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   9902c:	defffb04 	addi	sp,sp,-20
   99030:	dfc00415 	stw	ra,16(sp)
   99034:	df000315 	stw	fp,12(sp)
   99038:	df000304 	addi	fp,sp,12
   9903c:	d83bb615 	stw	zero,-4392(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   99040:	d0a01017 	ldw	r2,-32704(gp)
   99044:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   99048:	d0a7bd17 	ldw	r2,-24844(gp)
   9904c:	10800044 	addi	r2,r2,1
   99050:	d0a7bd15 	stw	r2,-24844(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   99054:	00002e06 	br	99110 <alt_tick+0xe4>
  {
    next = (alt_alarm*) alarm->llist.next;
   99058:	e0bffd17 	ldw	r2,-12(fp)
   9905c:	10800017 	ldw	r2,0(r2)
   99060:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   99064:	e0bffd17 	ldw	r2,-12(fp)
   99068:	10800403 	ldbu	r2,16(r2)
   9906c:	10803fcc 	andi	r2,r2,255
   99070:	10000426 	beq	r2,zero,99084 <alt_tick+0x58>
   99074:	d0a7bd17 	ldw	r2,-24844(gp)
   99078:	1000021e 	bne	r2,zero,99084 <alt_tick+0x58>
    {
      alarm->rollover = 0;
   9907c:	e0bffd17 	ldw	r2,-12(fp)
   99080:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   99084:	e0bffd17 	ldw	r2,-12(fp)
   99088:	10800217 	ldw	r2,8(r2)
   9908c:	d0e7bd17 	ldw	r3,-24844(gp)
   99090:	18801d36 	bltu	r3,r2,99108 <alt_tick+0xdc>
   99094:	e0bffd17 	ldw	r2,-12(fp)
   99098:	10800403 	ldbu	r2,16(r2)
   9909c:	10803fcc 	andi	r2,r2,255
   990a0:	1000191e 	bne	r2,zero,99108 <alt_tick+0xdc>
    {
      next_callback = alarm->callback (alarm->context);
   990a4:	e0bffd17 	ldw	r2,-12(fp)
   990a8:	10c00317 	ldw	r3,12(r2)
   990ac:	e0bffd17 	ldw	r2,-12(fp)
   990b0:	10800517 	ldw	r2,20(r2)
   990b4:	1009883a 	mov	r4,r2
   990b8:	183ee83a 	callr	r3
   990bc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   990c0:	e0bfff17 	ldw	r2,-4(fp)
   990c4:	1000031e 	bne	r2,zero,990d4 <alt_tick+0xa8>
      {
        alt_alarm_stop (alarm);
   990c8:	e13ffd17 	ldw	r4,-12(fp)
   990cc:	0098f940 	call	98f94 <alt_alarm_stop>
   990d0:	00000d06 	br	99108 <alt_tick+0xdc>
      }
      else
      {
        alarm->time += next_callback;
   990d4:	e0bffd17 	ldw	r2,-12(fp)
   990d8:	10c00217 	ldw	r3,8(r2)
   990dc:	e0bfff17 	ldw	r2,-4(fp)
   990e0:	1887883a 	add	r3,r3,r2
   990e4:	e0bffd17 	ldw	r2,-12(fp)
   990e8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   990ec:	e0bffd17 	ldw	r2,-12(fp)
   990f0:	10c00217 	ldw	r3,8(r2)
   990f4:	d0a7bd17 	ldw	r2,-24844(gp)
   990f8:	1880032e 	bgeu	r3,r2,99108 <alt_tick+0xdc>
        {
          alarm->rollover = 1;
   990fc:	e0bffd17 	ldw	r2,-12(fp)
   99100:	00c00044 	movi	r3,1
   99104:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   99108:	e0bffe17 	ldw	r2,-8(fp)
   9910c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   99110:	e0fffd17 	ldw	r3,-12(fp)
   99114:	d0a01004 	addi	r2,gp,-32704
   99118:	18bfcf1e 	bne	r3,r2,99058 <alt_tick+0x2c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   9911c:	0001883a 	nop
}
   99120:	e037883a 	mov	sp,fp
   99124:	dfc00117 	ldw	ra,4(sp)
   99128:	df000017 	ldw	fp,0(sp)
   9912c:	dec00204 	addi	sp,sp,8
   99130:	f800283a 	ret

00099134 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   99134:	deffff04 	addi	sp,sp,-4
   99138:	df000015 	stw	fp,0(sp)
   9913c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   99140:	000170fa 	wrctl	ienable,zero
}
   99144:	e037883a 	mov	sp,fp
   99148:	df000017 	ldw	fp,0(sp)
   9914c:	dec00104 	addi	sp,sp,4
   99150:	f800283a 	ret

00099154 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   99154:	defffa04 	addi	sp,sp,-24
   99158:	dfc00515 	stw	ra,20(sp)
   9915c:	df000415 	stw	fp,16(sp)
   99160:	df000404 	addi	fp,sp,16
   99164:	e13ffe15 	stw	r4,-8(fp)
   99168:	e17fff15 	stw	r5,-4(fp)
   9916c:	d83bb615 	stw	zero,-4392(sp)
  alt_dev* next = (alt_dev*) llist->next;
   99170:	e0bfff17 	ldw	r2,-4(fp)
   99174:	10800017 	ldw	r2,0(r2)
   99178:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   9917c:	e13ffe17 	ldw	r4,-8(fp)
   99180:	008ea280 	call	8ea28 <strlen>
   99184:	10800044 	addi	r2,r2,1
   99188:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   9918c:	00000d06 	br	991c4 <alt_find_dev+0x70>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   99190:	e0bffc17 	ldw	r2,-16(fp)
   99194:	10c00217 	ldw	r3,8(r2)
   99198:	e0bffd17 	ldw	r2,-12(fp)
   9919c:	1809883a 	mov	r4,r3
   991a0:	e17ffe17 	ldw	r5,-8(fp)
   991a4:	100d883a 	mov	r6,r2
   991a8:	008e3080 	call	8e308 <memcmp>
   991ac:	1000021e 	bne	r2,zero,991b8 <alt_find_dev+0x64>
    {
      /* match found */

      return next;
   991b0:	e0bffc17 	ldw	r2,-16(fp)
   991b4:	00000706 	br	991d4 <alt_find_dev+0x80>
    }
    next = (alt_dev*) next->llist.next;
   991b8:	e0bffc17 	ldw	r2,-16(fp)
   991bc:	10800017 	ldw	r2,0(r2)
   991c0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   991c4:	e0fffc17 	ldw	r3,-16(fp)
   991c8:	e0bfff17 	ldw	r2,-4(fp)
   991cc:	18bff01e 	bne	r3,r2,99190 <alt_find_dev+0x3c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   991d0:	0005883a 	mov	r2,zero
}
   991d4:	e037883a 	mov	sp,fp
   991d8:	dfc00117 	ldw	ra,4(sp)
   991dc:	df000017 	ldw	fp,0(sp)
   991e0:	dec00204 	addi	sp,sp,8
   991e4:	f800283a 	ret

000991e8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   991e8:	defffb04 	addi	sp,sp,-20
   991ec:	dfc00415 	stw	ra,16(sp)
   991f0:	df000315 	stw	fp,12(sp)
   991f4:	df000304 	addi	fp,sp,12
   991f8:	e13fff15 	stw	r4,-4(fp)
   991fc:	d83bb615 	stw	zero,-4392(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   99200:	008002b4 	movhi	r2,10
   99204:	10bd6c04 	addi	r2,r2,-2640
   99208:	10800017 	ldw	r2,0(r2)
   9920c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   99210:	00003106 	br	992d8 <alt_find_file+0xf0>
  {
    len = strlen(next->name);
   99214:	e0bffd17 	ldw	r2,-12(fp)
   99218:	10800217 	ldw	r2,8(r2)
   9921c:	1009883a 	mov	r4,r2
   99220:	008ea280 	call	8ea28 <strlen>
   99224:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   99228:	e0bffd17 	ldw	r2,-12(fp)
   9922c:	10c00217 	ldw	r3,8(r2)
   99230:	e0bffe17 	ldw	r2,-8(fp)
   99234:	10bfffc4 	addi	r2,r2,-1
   99238:	1885883a 	add	r2,r3,r2
   9923c:	10800003 	ldbu	r2,0(r2)
   99240:	10803fcc 	andi	r2,r2,255
   99244:	1080201c 	xori	r2,r2,128
   99248:	10bfe004 	addi	r2,r2,-128
   9924c:	10800bd8 	cmpnei	r2,r2,47
   99250:	1000031e 	bne	r2,zero,99260 <alt_find_file+0x78>
    {
      len -= 1;
   99254:	e0bffe17 	ldw	r2,-8(fp)
   99258:	10bfffc4 	addi	r2,r2,-1
   9925c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   99260:	e0bffe17 	ldw	r2,-8(fp)
   99264:	e0ffff17 	ldw	r3,-4(fp)
   99268:	1885883a 	add	r2,r3,r2
   9926c:	10800003 	ldbu	r2,0(r2)
   99270:	10803fcc 	andi	r2,r2,255
   99274:	1080201c 	xori	r2,r2,128
   99278:	10bfe004 	addi	r2,r2,-128
   9927c:	10800be0 	cmpeqi	r2,r2,47
   99280:	1000081e 	bne	r2,zero,992a4 <alt_find_file+0xbc>
   99284:	e0bffe17 	ldw	r2,-8(fp)
   99288:	e0ffff17 	ldw	r3,-4(fp)
   9928c:	1885883a 	add	r2,r3,r2
   99290:	10800003 	ldbu	r2,0(r2)
   99294:	10803fcc 	andi	r2,r2,255
   99298:	1080201c 	xori	r2,r2,128
   9929c:	10bfe004 	addi	r2,r2,-128
   992a0:	10000a1e 	bne	r2,zero,992cc <alt_find_file+0xe4>
        !memcmp (next->name, name, len))
   992a4:	e0bffd17 	ldw	r2,-12(fp)
   992a8:	10c00217 	ldw	r3,8(r2)
   992ac:	e0bffe17 	ldw	r2,-8(fp)
   992b0:	1809883a 	mov	r4,r3
   992b4:	e17fff17 	ldw	r5,-4(fp)
   992b8:	100d883a 	mov	r6,r2
   992bc:	008e3080 	call	8e308 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   992c0:	1000021e 	bne	r2,zero,992cc <alt_find_file+0xe4>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   992c4:	e0bffd17 	ldw	r2,-12(fp)
   992c8:	00000806 	br	992ec <alt_find_file+0x104>
    }
    next = (alt_dev*) next->llist.next;
   992cc:	e0bffd17 	ldw	r2,-12(fp)
   992d0:	10800017 	ldw	r2,0(r2)
   992d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   992d8:	e0fffd17 	ldw	r3,-12(fp)
   992dc:	008002b4 	movhi	r2,10
   992e0:	10bd6c04 	addi	r2,r2,-2640
   992e4:	18bfcb1e 	bne	r3,r2,99214 <alt_find_file+0x2c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   992e8:	0005883a 	mov	r2,zero
}
   992ec:	e037883a 	mov	sp,fp
   992f0:	dfc00117 	ldw	ra,4(sp)
   992f4:	df000017 	ldw	fp,0(sp)
   992f8:	dec00204 	addi	sp,sp,8
   992fc:	f800283a 	ret

00099300 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   99300:	defffc04 	addi	sp,sp,-16
   99304:	df000315 	stw	fp,12(sp)
   99308:	df000304 	addi	fp,sp,12
   9930c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   99310:	00bffa04 	movi	r2,-24
   99314:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   99318:	e03ffd15 	stw	zero,-12(fp)
   9931c:	00001d06 	br	99394 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   99320:	00c002b4 	movhi	r3,10
   99324:	18f88b04 	addi	r3,r3,-7636
   99328:	e0bffd17 	ldw	r2,-12(fp)
   9932c:	10800324 	muli	r2,r2,12
   99330:	1885883a 	add	r2,r3,r2
   99334:	10800017 	ldw	r2,0(r2)
   99338:	1000131e 	bne	r2,zero,99388 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   9933c:	00c002b4 	movhi	r3,10
   99340:	18f88b04 	addi	r3,r3,-7636
   99344:	e0bffd17 	ldw	r2,-12(fp)
   99348:	10800324 	muli	r2,r2,12
   9934c:	1885883a 	add	r2,r3,r2
   99350:	e0ffff17 	ldw	r3,-4(fp)
   99354:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   99358:	008002b4 	movhi	r2,10
   9935c:	10bd7004 	addi	r2,r2,-2624
   99360:	10c00017 	ldw	r3,0(r2)
   99364:	e0bffd17 	ldw	r2,-12(fp)
   99368:	1880040e 	bge	r3,r2,9937c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   9936c:	008002b4 	movhi	r2,10
   99370:	10bd7004 	addi	r2,r2,-2624
   99374:	e0fffd17 	ldw	r3,-12(fp)
   99378:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   9937c:	e0bffd17 	ldw	r2,-12(fp)
   99380:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   99384:	00000606 	br	993a0 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   99388:	e0bffd17 	ldw	r2,-12(fp)
   9938c:	10800044 	addi	r2,r2,1
   99390:	e0bffd15 	stw	r2,-12(fp)
   99394:	e0bffd17 	ldw	r2,-12(fp)
   99398:	10801010 	cmplti	r2,r2,64
   9939c:	103fe01e 	bne	r2,zero,99320 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   993a0:	e0bffe17 	ldw	r2,-8(fp)
}
   993a4:	e037883a 	mov	sp,fp
   993a8:	df000017 	ldw	fp,0(sp)
   993ac:	dec00104 	addi	sp,sp,4
   993b0:	f800283a 	ret

000993b4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   993b4:	defffb04 	addi	sp,sp,-20
   993b8:	df000415 	stw	fp,16(sp)
   993bc:	df000404 	addi	fp,sp,16
   993c0:	e13ffe15 	stw	r4,-8(fp)
   993c4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   993c8:	e0bfff17 	ldw	r2,-4(fp)
   993cc:	10840070 	cmpltui	r2,r2,4097
   993d0:	1000021e 	bne	r2,zero,993dc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   993d4:	00840004 	movi	r2,4096
   993d8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   993dc:	e0fffe17 	ldw	r3,-8(fp)
   993e0:	e0bfff17 	ldw	r2,-4(fp)
   993e4:	1885883a 	add	r2,r3,r2
   993e8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   993ec:	e0bffe17 	ldw	r2,-8(fp)
   993f0:	e0bffc15 	stw	r2,-16(fp)
   993f4:	00000506 	br	9940c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   993f8:	e0bffc17 	ldw	r2,-16(fp)
   993fc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   99400:	e0bffc17 	ldw	r2,-16(fp)
   99404:	10800804 	addi	r2,r2,32
   99408:	e0bffc15 	stw	r2,-16(fp)
   9940c:	e0fffc17 	ldw	r3,-16(fp)
   99410:	e0bffd17 	ldw	r2,-12(fp)
   99414:	18bff836 	bltu	r3,r2,993f8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   99418:	e0bffe17 	ldw	r2,-8(fp)
   9941c:	108007cc 	andi	r2,r2,31
   99420:	10000226 	beq	r2,zero,9942c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   99424:	e0bffc17 	ldw	r2,-16(fp)
   99428:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   9942c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   99430:	e037883a 	mov	sp,fp
   99434:	df000017 	ldw	fp,0(sp)
   99438:	dec00104 	addi	sp,sp,4
   9943c:	f800283a 	ret

00099440 <atexit>:
   99440:	200b883a 	mov	r5,r4
   99444:	000d883a 	mov	r6,zero
   99448:	0009883a 	mov	r4,zero
   9944c:	000f883a 	mov	r7,zero
   99450:	009948c1 	jmpi	9948c <__register_exitproc>

00099454 <exit>:
   99454:	defffe04 	addi	sp,sp,-8
   99458:	000b883a 	mov	r5,zero
   9945c:	dc000015 	stw	r16,0(sp)
   99460:	dfc00115 	stw	ra,4(sp)
   99464:	2021883a 	mov	r16,r4
   99468:	00995bc0 	call	995bc <__call_exitprocs>
   9946c:	008002b4 	movhi	r2,10
   99470:	10bd6604 	addi	r2,r2,-2664
   99474:	11000017 	ldw	r4,0(r2)
   99478:	20800f17 	ldw	r2,60(r4)
   9947c:	10000126 	beq	r2,zero,99484 <exit+0x30>
   99480:	103ee83a 	callr	r2
   99484:	8009883a 	mov	r4,r16
   99488:	009975c0 	call	9975c <_exit>

0009948c <__register_exitproc>:
   9948c:	defffa04 	addi	sp,sp,-24
   99490:	008002b4 	movhi	r2,10
   99494:	10bd6604 	addi	r2,r2,-2664
   99498:	dc000315 	stw	r16,12(sp)
   9949c:	14000017 	ldw	r16,0(r2)
   994a0:	dc400415 	stw	r17,16(sp)
   994a4:	dfc00515 	stw	ra,20(sp)
   994a8:	80805217 	ldw	r2,328(r16)
   994ac:	2023883a 	mov	r17,r4
   994b0:	10003e26 	beq	r2,zero,995ac <__register_exitproc+0x120>
   994b4:	10c00117 	ldw	r3,4(r2)
   994b8:	020007c4 	movi	r8,31
   994bc:	40c0180e 	bge	r8,r3,99520 <__register_exitproc+0x94>
   994c0:	00800034 	movhi	r2,0
   994c4:	10800004 	addi	r2,r2,0
   994c8:	1000061e 	bne	r2,zero,994e4 <__register_exitproc+0x58>
   994cc:	00bfffc4 	movi	r2,-1
   994d0:	dfc00517 	ldw	ra,20(sp)
   994d4:	dc400417 	ldw	r17,16(sp)
   994d8:	dc000317 	ldw	r16,12(sp)
   994dc:	dec00604 	addi	sp,sp,24
   994e0:	f800283a 	ret
   994e4:	01006404 	movi	r4,400
   994e8:	d9400015 	stw	r5,0(sp)
   994ec:	d9800115 	stw	r6,4(sp)
   994f0:	d9c00215 	stw	r7,8(sp)
   994f4:	00000000 	call	0 <__alt_mem_onchip_memory2-0x80000>
   994f8:	d9400017 	ldw	r5,0(sp)
   994fc:	d9800117 	ldw	r6,4(sp)
   99500:	d9c00217 	ldw	r7,8(sp)
   99504:	103ff126 	beq	r2,zero,994cc <__register_exitproc+0x40>
   99508:	80c05217 	ldw	r3,328(r16)
   9950c:	10000115 	stw	zero,4(r2)
   99510:	10c00015 	stw	r3,0(r2)
   99514:	80805215 	stw	r2,328(r16)
   99518:	10006215 	stw	zero,392(r2)
   9951c:	10006315 	stw	zero,396(r2)
   99520:	10c00117 	ldw	r3,4(r2)
   99524:	88000d1e 	bne	r17,zero,9955c <__register_exitproc+0xd0>
   99528:	19000084 	addi	r4,r3,2
   9952c:	2109883a 	add	r4,r4,r4
   99530:	18c00044 	addi	r3,r3,1
   99534:	2109883a 	add	r4,r4,r4
   99538:	1109883a 	add	r4,r2,r4
   9953c:	10c00115 	stw	r3,4(r2)
   99540:	0005883a 	mov	r2,zero
   99544:	21400015 	stw	r5,0(r4)
   99548:	dfc00517 	ldw	ra,20(sp)
   9954c:	dc400417 	ldw	r17,16(sp)
   99550:	dc000317 	ldw	r16,12(sp)
   99554:	dec00604 	addi	sp,sp,24
   99558:	f800283a 	ret
   9955c:	02400044 	movi	r9,1
   99560:	12806217 	ldw	r10,392(r2)
   99564:	48d2983a 	sll	r9,r9,r3
   99568:	19000804 	addi	r4,r3,32
   9956c:	18d1883a 	add	r8,r3,r3
   99570:	2109883a 	add	r4,r4,r4
   99574:	4211883a 	add	r8,r8,r8
   99578:	2109883a 	add	r4,r4,r4
   9957c:	1109883a 	add	r4,r2,r4
   99580:	1211883a 	add	r8,r2,r8
   99584:	5254b03a 	or	r10,r10,r9
   99588:	21c02215 	stw	r7,136(r4)
   9958c:	41802215 	stw	r6,136(r8)
   99590:	12806215 	stw	r10,392(r2)
   99594:	01000084 	movi	r4,2
   99598:	893fe31e 	bne	r17,r4,99528 <__register_exitproc+0x9c>
   9959c:	11006317 	ldw	r4,396(r2)
   995a0:	2252b03a 	or	r9,r4,r9
   995a4:	12406315 	stw	r9,396(r2)
   995a8:	003fdf06 	br	99528 <__register_exitproc+0x9c>
   995ac:	008002b4 	movhi	r2,10
   995b0:	1085ab04 	addi	r2,r2,5804
   995b4:	80805215 	stw	r2,328(r16)
   995b8:	003fbe06 	br	994b4 <__register_exitproc+0x28>

000995bc <__call_exitprocs>:
   995bc:	008002b4 	movhi	r2,10
   995c0:	10bd6604 	addi	r2,r2,-2664
   995c4:	10800017 	ldw	r2,0(r2)
   995c8:	defff304 	addi	sp,sp,-52
   995cc:	df000b15 	stw	fp,44(sp)
   995d0:	d8800015 	stw	r2,0(sp)
   995d4:	10805204 	addi	r2,r2,328
   995d8:	dd400815 	stw	r21,32(sp)
   995dc:	dfc00c15 	stw	ra,48(sp)
   995e0:	ddc00a15 	stw	r23,40(sp)
   995e4:	dd800915 	stw	r22,36(sp)
   995e8:	dd000715 	stw	r20,28(sp)
   995ec:	dcc00615 	stw	r19,24(sp)
   995f0:	dc800515 	stw	r18,20(sp)
   995f4:	dc400415 	stw	r17,16(sp)
   995f8:	dc000315 	stw	r16,12(sp)
   995fc:	d9000115 	stw	r4,4(sp)
   99600:	2839883a 	mov	fp,r5
   99604:	d8800215 	stw	r2,8(sp)
   99608:	057fffc4 	movi	r21,-1
   9960c:	d8800017 	ldw	r2,0(sp)
   99610:	ddc00217 	ldw	r23,8(sp)
   99614:	14805217 	ldw	r18,328(r2)
   99618:	90001726 	beq	r18,zero,99678 <__call_exitprocs+0xbc>
   9961c:	94400117 	ldw	r17,4(r18)
   99620:	8c3fffc4 	addi	r16,r17,-1
   99624:	80001116 	blt	r16,zero,9966c <__call_exitprocs+0xb0>
   99628:	8c400044 	addi	r17,r17,1
   9962c:	8427883a 	add	r19,r16,r16
   99630:	8c63883a 	add	r17,r17,r17
   99634:	95802204 	addi	r22,r18,136
   99638:	9ce7883a 	add	r19,r19,r19
   9963c:	8c63883a 	add	r17,r17,r17
   99640:	b4e7883a 	add	r19,r22,r19
   99644:	9463883a 	add	r17,r18,r17
   99648:	e0001726 	beq	fp,zero,996a8 <__call_exitprocs+0xec>
   9964c:	8c87c83a 	sub	r3,r17,r18
   99650:	b0c7883a 	add	r3,r22,r3
   99654:	18c01e17 	ldw	r3,120(r3)
   99658:	1f001326 	beq	r3,fp,996a8 <__call_exitprocs+0xec>
   9965c:	843fffc4 	addi	r16,r16,-1
   99660:	9cffff04 	addi	r19,r19,-4
   99664:	8c7fff04 	addi	r17,r17,-4
   99668:	857ff71e 	bne	r16,r21,99648 <__call_exitprocs+0x8c>
   9966c:	00800034 	movhi	r2,0
   99670:	10800004 	addi	r2,r2,0
   99674:	10002a1e 	bne	r2,zero,99720 <__call_exitprocs+0x164>
   99678:	dfc00c17 	ldw	ra,48(sp)
   9967c:	df000b17 	ldw	fp,44(sp)
   99680:	ddc00a17 	ldw	r23,40(sp)
   99684:	dd800917 	ldw	r22,36(sp)
   99688:	dd400817 	ldw	r21,32(sp)
   9968c:	dd000717 	ldw	r20,28(sp)
   99690:	dcc00617 	ldw	r19,24(sp)
   99694:	dc800517 	ldw	r18,20(sp)
   99698:	dc400417 	ldw	r17,16(sp)
   9969c:	dc000317 	ldw	r16,12(sp)
   996a0:	dec00d04 	addi	sp,sp,52
   996a4:	f800283a 	ret
   996a8:	91000117 	ldw	r4,4(r18)
   996ac:	88c00017 	ldw	r3,0(r17)
   996b0:	213fffc4 	addi	r4,r4,-1
   996b4:	24001526 	beq	r4,r16,9970c <__call_exitprocs+0x150>
   996b8:	88000015 	stw	zero,0(r17)
   996bc:	183fe726 	beq	r3,zero,9965c <__call_exitprocs+0xa0>
   996c0:	00800044 	movi	r2,1
   996c4:	1408983a 	sll	r4,r2,r16
   996c8:	91406217 	ldw	r5,392(r18)
   996cc:	95000117 	ldw	r20,4(r18)
   996d0:	214a703a 	and	r5,r4,r5
   996d4:	28000b26 	beq	r5,zero,99704 <__call_exitprocs+0x148>
   996d8:	91406317 	ldw	r5,396(r18)
   996dc:	2148703a 	and	r4,r4,r5
   996e0:	20000c1e 	bne	r4,zero,99714 <__call_exitprocs+0x158>
   996e4:	99400017 	ldw	r5,0(r19)
   996e8:	d9000117 	ldw	r4,4(sp)
   996ec:	183ee83a 	callr	r3
   996f0:	90c00117 	ldw	r3,4(r18)
   996f4:	1d3fc51e 	bne	r3,r20,9960c <__call_exitprocs+0x50>
   996f8:	b8c00017 	ldw	r3,0(r23)
   996fc:	1cbfd726 	beq	r3,r18,9965c <__call_exitprocs+0xa0>
   99700:	003fc206 	br	9960c <__call_exitprocs+0x50>
   99704:	183ee83a 	callr	r3
   99708:	003ff906 	br	996f0 <__call_exitprocs+0x134>
   9970c:	94000115 	stw	r16,4(r18)
   99710:	003fea06 	br	996bc <__call_exitprocs+0x100>
   99714:	99000017 	ldw	r4,0(r19)
   99718:	183ee83a 	callr	r3
   9971c:	003ff406 	br	996f0 <__call_exitprocs+0x134>
   99720:	90c00117 	ldw	r3,4(r18)
   99724:	1800071e 	bne	r3,zero,99744 <__call_exitprocs+0x188>
   99728:	90c00017 	ldw	r3,0(r18)
   9972c:	18000926 	beq	r3,zero,99754 <__call_exitprocs+0x198>
   99730:	9009883a 	mov	r4,r18
   99734:	b8c00015 	stw	r3,0(r23)
   99738:	00000000 	call	0 <__alt_mem_onchip_memory2-0x80000>
   9973c:	bc800017 	ldw	r18,0(r23)
   99740:	003fb506 	br	99618 <__call_exitprocs+0x5c>
   99744:	90c00017 	ldw	r3,0(r18)
   99748:	902f883a 	mov	r23,r18
   9974c:	1825883a 	mov	r18,r3
   99750:	003fb106 	br	99618 <__call_exitprocs+0x5c>
   99754:	0007883a 	mov	r3,zero
   99758:	003ffb06 	br	99748 <__call_exitprocs+0x18c>

0009975c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   9975c:	defffc04 	addi	sp,sp,-16
   99760:	df000315 	stw	fp,12(sp)
   99764:	df000304 	addi	fp,sp,12
   99768:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   9976c:	0001883a 	nop
   99770:	e0bfff17 	ldw	r2,-4(fp)
   99774:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   99778:	e0bffd17 	ldw	r2,-12(fp)
   9977c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   99780:	e0bffe17 	ldw	r2,-8(fp)
   99784:	10000226 	beq	r2,zero,99790 <_exit+0x34>
    ALT_SIM_FAIL();
   99788:	002af070 	cmpltui	zero,zero,43969
   9978c:	00000106 	br	99794 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   99790:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   99794:	003fff06 	br	99794 <_exit+0x38>
