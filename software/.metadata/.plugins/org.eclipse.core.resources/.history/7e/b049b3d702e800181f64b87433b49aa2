#include <stdio.h>

#include "io.h"
#include "system.h"
#include "alt_types.h"
#include "alt_irq.h"
#include "alt_legacy_irq.h"

alt_u32 refreshIO;
alt_u32 counter;

typedef enum {
	NORTH,
	EAST,
	SOUTH,
	WEST
} orientation;

typedef struct {
	alt_u8 charId;
	alt_u32 positionX;
	alt_u32 positionY;
	alt_u8 state;
	orientation orientation;
	alt_u32 bytePacket;
} position;

void init_position(position* charPosition)
{

}

void compute_byte_packet(position* charPosition)
{
	charPosition->bytePacket = (charPosition->charId << 29) + (charPosition->positionX << 17 ) + (charPosition->positionY << 5) + (charPosition->state << 2) + (charPosition->orientation );
}


void refresh_position(position* charPosition)
{
	alt_u8 charId = charPosition->charId;
	alt_u32 positionX = charPosition->positionX;
	alt_u32 positionY = charPosition->positionY;
	alt_u8 state = charPosition->state;
	orientation orientation = charPosition->orientation;
	alt_u32 bytePacket = charPosition->bytePacket;

	switch(orientation)
	{
		case NORTH :
			positionY = (positionY > 0) ? positionY - 1 : positionY ;
		break;
		case EAST :
			positionX = (positionX < 1440) ? positionX + 1 : positionX ;
		break;
		case SOUTH :
			positionY = (positionY < 900) ? positionY + 1 : positionY ;
		break;
		case WEST :
			positionX = (positionX > 0) ? positionX - 1 : positionX ;
		break;
	}
	compute_byte_packet(charPosition);
}

void refresh_position_interrupt_handler(void* context, alt_u32 id)
{
	position* p_pacmanPosition = (position*) context;
	refresh_position(p_pacmanPosition);
	IOWR_32DIRECT(POSITION_BASE, 0, p_pacmanPosition->bytePacket);
}

int main()
{
	position pacmanPosition;

	printf("Hello from Nios II!\n");
	alt_irq_register(REFRESH_IRQ,(void*)&pacmanPosition,refresh_position);
	while(1)
	{
		printf("%lu \n", pacmanPosition.bytePacket);
	}
}
