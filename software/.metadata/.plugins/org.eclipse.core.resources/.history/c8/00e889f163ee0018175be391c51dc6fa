#include "background.h"
#include "refresh_position.h"

#include <stdio.h>


#include "io.h"
#include <system.h>
#include "alt_types.h"
#include "sys\alt_irq.h"
#include "priv\alt_legacy_irq.h"


alt_u32 counter = 0;
alt_8	counter_dir = -1;
alt_u32 temp_counter = 0;
alt_u16 irq_counter[] = {0,0,0,0};

static void refresh_position_interrupt_handler(void* context)
/* interrupt handler : this function is called each time a new frame is build (60Hz)
 * it calls *refresh_position()* function and ensures the char doesn't go out of the frame.
*/
{
	position* p_pacmanPosition = (position*) context;
	refresh_position(p_pacmanPosition);
	IOWR_32DIRECT(POSITION_BASE, 0, p_pacmanPosition->bytePacket);
	if(counter > 600){
		counter_dir = -1;
		p_pacmanPosition->orientation = NORTH;
	}
	if(counter < 60){
		counter_dir = 1;
		p_pacmanPosition->orientation = SOUTH;
	}
	counter = counter + (1<<0)*counter_dir;
	IOWR(REFRESH_BASE,3,0xf);
}

static void left_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the left button direction is pressed */
{
	irq_counter[3] = irq_counter[3] + 1;
	IOWR(LEFT_BUTTON_BASE,3,15);
}

static void up_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the up button direction is pressed */
{
	irq_counter[2] = irq_counter[2] + 1;
	IOWR(UP_BUTTON_BASE,3,0xf);
}

static void down_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the down button direction is pressed */
{
	irq_counter[1] = irq_counter[1] + 1;
	IOWR(DOWN_BUTTON_BASE,3,0xf);
}

static void right_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the right button direction is pressed */
{
	irq_counter[0] = irq_counter[0] + 1;
	IOWR(RIGHT_BUTTON_BASE,3,0xf);
}

int main()
{
	set_background_in_memory(background);

	position pacmanPosition;
	init_position(&pacmanPosition, 0, 60, 60, ACTIVE, SOUTH);
	compute_collision(&pacmanPosition);

	printf("Hello from Nios II!\n");
	printf("get_blocks : %u\n",
		get_block_with_coordinates(50,50)
	);

	//Left button IRQ initialization
	IOWR(LEFT_BUTTON_BASE,2,0xf); //enable interrupt
	IOWR(LEFT_BUTTON_BASE,3,0xf); //clear edge register
	alt_irq_register(LEFT_BUTTON_IRQ,NULL,left_button_interrupt_handler);

	/*//Up button IRQ initialization
	IOWR(UP_BUTTON_BASE,2,0xf); //enable interrupt
	IOWR(UP_BUTTON_BASE,3,0xf); //clear edge register
	alt_irq_register(UP_BUTTON_IRQ,NULL,up_button_interrupt_handler);

	//Down button IRQ initialization
	IOWR(DOWN_BUTTON_BASE,2,0xf); //enable interrupt
	IOWR(DOWN_BUTTON_BASE,3,0xf); //clear edge register
	alt_irq_register(DOWN_BUTTON_IRQ,NULL,down_button_interrupt_handler);

	//Right button IRQ initialization
	IOWR(RIGHT_BUTTON_BASE,2,0xf); //enable interrupt
	IOWR(RIGHT_BUTTON_BASE,3,0xf); //clear edge register
	alt_irq_register(RIGHT_BUTTON_IRQ,NULL,right_button_interrupt_handler);*/

	//IRQ initialization
	IOWR(REFRESH_BASE,2,0xf); //enable interrupt
	IOWR(REFRESH_BASE,3,0xf); //clear edge register
	printf("alt_ic_irq_enabled : %lu \n", alt_ic_irq_enabled(REFRESH_IRQ_INTERRUPT_CONTROLLER_ID, REFRESH_IRQ));
	alt_irq_register(REFRESH_IRQ,(void*)&pacmanPosition,refresh_position_interrupt_handler);

	printf("%lu\n", background[1]);

	long whileCounter = 0;
	while(1)
	{
		whileCounter++;
		if (whileCounter > 30000){
			printf("N : %u, S : %u, E : %u, W : %u, DControl : %u\n",
				pacmanPosition.collision.north,
				pacmanPosition.collision.south,
				pacmanPosition.collision.east,
				pacmanPosition.collision.west,
				pacmanPosition.directionControl
			);
			printf("Left counter = %u\n", irq_counter[3]);
			printf("Up counter = %u\n", irq_counter[2]);
			printf("Down counter = %u\n", irq_counter[1]);
			printf("Right counter = %u\n", irq_counter[0]);
			whileCounter = 0;
			pacmanPosition.directionControl = ((pacmanPosition.orientation + 2*(rand()%2))%4) + 1 ;
		}
	}
}
