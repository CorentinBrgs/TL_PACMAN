
pacman_soft_1.elf:     file format elf32-littlenios2
pacman_soft_1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080244

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00011180 memsz 0x00011180 flags r-x
    LOAD off    0x000121a0 vaddr 0x000911a0 paddr 0x00092ea8 align 2**12
         filesz 0x00001d08 memsz 0x00001d08 flags rw-
    LOAD off    0x00014bb0 vaddr 0x00094bb0 paddr 0x00094bb0 align 2**12
         filesz 0x00000000 memsz 0x00000264 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010b50  00080244  00080244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000040c  00090d94  00090d94  00011d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d08  000911a0  00092ea8  000121a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000264  00094bb0  00094bb0  00014bb0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00094e14  00094e14  00013ea8  2**0
                  CONTENTS
  7 .comment      00000046  00000000  00000000  00013ea8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001020  00000000  00000000  00013ef0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000265de  00000000  00000000  00014f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009d49  00000000  00000000  0003b4ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c1d9  00000000  00000000  00045237  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002530  00000000  00000000  00051410  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003d40  00000000  00000000  00053940  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017a63  00000000  00000000  00057680  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006f0e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001910  00000000  00000000  0006f118  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000741a2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  000741a5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000741af  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000741b0  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000741b1  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000741b5  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000741b9  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000741bd  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000741c6  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000741cf  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  000741d8  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001c  00000000  00000000  000741e1  2**0
                  CONTENTS, READONLY
 29 .jdi          0000677d  00000000  00000000  000741fd  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000b6f4f  00000000  00000000  0007a97a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080244 l    d  .text	00000000 .text
00090d94 l    d  .rodata	00000000 .rodata
000911a0 l    d  .rwdata	00000000 .rwdata
00094bb0 l    d  .bss	00000000 .bss
00094e14 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pacman_soft_1_bsp//obj/HAL/src/crt0.o
0008028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 background.c
000911a0 l     O .rwdata	0000003c charBackground
000911dc l     O .rwdata	0000003c ghostBackground
00094bfc l     O .bss	0000003c foodLayer
00000000 l    df *ABS*	00000000 game_manager.c
00091218 l     O .rwdata	0000003c charBackground
00091254 l     O .rwdata	0000003c ghostBackground
00094c38 l     O .bss	0000003c foodLayer
00091290 l     O .rwdata	0000000a char_array_1
0009129a l     O .rwdata	0000000a char_array_2
00000000 l    df *ABS*	00000000 general.c
00000000 l    df *ABS*	00000000 main.c
000912a4 l     O .rwdata	0000003c charBackground
000912e0 l     O .rwdata	0000003c ghostBackground
00094c74 l     O .bss	0000003c foodLayer
0009131c l     O .rwdata	0000000a char_array_1
00091326 l     O .rwdata	0000000a char_array_2
00080860 l     F .text	000000b8 refresh_position_interrupt_handler
00080918 l     F .text	00000048 left_button_interrupt_handler
00080960 l     F .text	00000048 up_button_interrupt_handler
000809a8 l     F .text	00000048 down_button_interrupt_handler
000809f0 l     F .text	00000048 right_button_interrupt_handler
00000000 l    df *ABS*	00000000 refresh_position.c
00091330 l     O .rwdata	0000003c charBackground
0009136c l     O .rwdata	0000003c ghostBackground
00094cb0 l     O .bss	0000003c foodLayer
00000000 l    df *ABS*	00000000 segments_display.c
000913a8 l     O .rwdata	0000000a char_array_1
000913b2 l     O .rwdata	0000000a char_array_2
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
00090eee l     O .rodata	00000010 zeroes.4404
00083e34 l     F .text	000000bc __sbprintf
00090efe l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00084044 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00085b74 l     F .text	00000008 __fp_unlock
00085b88 l     F .text	0000019c __sinit.part.1
00085d24 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
000913bc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00091800 l     O .rwdata	00000020 lc_ctype_charset
000917e0 l     O .rwdata	00000020 lc_message_charset
00091820 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00090f30 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0008917c l     F .text	000000fc __sprint_r.part.0
00091064 l     O .rodata	00000010 blanks.4348
00091054 l     O .rodata	00000010 zeroes.4349
0008a708 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0008e270 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008e37c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008e3a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0008eaa8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008eb88 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008ec74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0008ee48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00092e9c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0008f238 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008f36c l     F .text	00000034 alt_dev_reg
00091e08 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008f660 l     F .text	0000020c altera_avalon_jtag_uart_irq
0008f86c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0008fea4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0009010c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0009037c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000904bc l     F .text	0000003c alt_get_errno
000904f8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00080290 g     F .text	000000a4 set_background_in_memory
00094bf8 g     O .bss	00000004 alt_instruction_exception_handler
000887c0 g     F .text	00000074 _mprec_log10
000888ac g     F .text	0000008c __any_on
0008aca4 g     F .text	00000054 _isatty_r
00090f3c g     O .rodata	00000028 __mprec_tinytens
0008ed84 g     F .text	0000007c alt_main
00080e64 g     F .text	0000003c init_ghost_position
000819e8 g     F .text	000000c0 _puts_r
00094d14 g     O .bss	00000100 alt_irq
0008acf8 g     F .text	00000060 _lseek_r
00092ea8 g       *ABS*	00000000 __flash_rwdata_start
0008cd9c g     F .text	00000088 .hidden __eqdf2
0008698c g     F .text	0000005c _gettimeofday_r
00080dc8 g     F .text	0000009c init_position
00094e14 g       *ABS*	00000000 __alt_heap_start
000819ac g     F .text	0000003c printf
0008af10 g     F .text	0000009c _wcrtomb_r
0008903c g     F .text	0000005c __sseek
00085ec4 g     F .text	00000010 __sinit
0008adb8 g     F .text	00000140 __swbuf_r
000869e8 g     F .text	0000007c _setlocale_r
00085d2c g     F .text	00000068 __sfmoreglue
0008ee24 g     F .text	00000024 __malloc_unlock
000876b8 g     F .text	0000015c memmove
00085eac g     F .text	00000018 _cleanup
0008793c g     F .text	000000a8 _Balloc
0008ce24 g     F .text	000000dc .hidden __gtdf2
00090710 g     F .text	00000024 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000001c __reset
000805c4 g     F .text	0000006c food_layer_empty
00080020 g       *ABS*	00000000 __flash_exceptions_start
0008ac48 g     F .text	0000005c _fstat_r
00094bb4 g     O .bss	00000004 errno
00088fb8 g     F .text	00000008 __seofread
00094be8 g     O .bss	00000004 alt_argv
0009ae68 g       *ABS*	00000000 _gp
00091c88 g     O .rwdata	00000180 alt_fd_list
00090734 g     F .text	00000090 alt_find_dev
00087570 g     F .text	00000148 memcpy
00085b7c g     F .text	0000000c _cleanup_r
0008e088 g     F .text	000000dc .hidden __floatsidf
00090440 g     F .text	0000007c alt_io_redirect
0008cf00 g     F .text	000000f4 .hidden __ltdf2
00090d94 g       *ABS*	00000000 __DTOR_END__
000814fc g     F .text	00000104 randomDirection
00081aa8 g     F .text	00000014 puts
000902e0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00088e9c g     F .text	00000074 __fpclassifyd
0008871c g     F .text	000000a4 __ratio
0008a6ec g     F .text	0000001c __vfiprintf_internal
0008fa64 g     F .text	0000021c altera_avalon_jtag_uart_read
0008197c g     F .text	00000030 _printf_r
000818c0 g     F .text	00000064 .hidden __udivsi3
0008eae4 g     F .text	000000a4 isatty
00090f8c g     O .rodata	000000c8 __mprec_tens
00086a64 g     F .text	0000000c __locale_charset
00094bd0 g     O .bss	00000008 alt_timezone
00090970 g     F .text	00000090 alt_icache_flush
00094bcc g     O .bss	00000004 __malloc_top_pad
00092e70 g     O .rwdata	00000004 __mb_cur_max
00086a94 g     F .text	0000000c _localeconv_r
00087d48 g     F .text	0000003c __i2b
00086348 g     F .text	000004bc __sfvwrite_r
00088f10 g     F .text	00000054 _sbrk_r
0008ad58 g     F .text	00000060 _read_r
00092e90 g     O .rwdata	00000004 alt_max_fd
0008a93c g     F .text	000000f0 _fclose_r
00085b44 g     F .text	00000030 fflush
00094bc8 g     O .bss	00000004 __malloc_max_sbrked_mem
0008e928 g     F .text	00000180 alt_irq_register
0008bc08 g     F .text	000008ac .hidden __adddf3
000884c4 g     F .text	0000010c __b2d
0008b6d0 g     F .text	00000538 .hidden __umoddi3
0008ecb0 g     F .text	000000d4 lseek
00092e68 g     O .rwdata	00000004 _global_impure_ptr
00088938 g     F .text	00000564 _realloc_r
00094e14 g       *ABS*	00000000 __bss_end
0008e838 g     F .text	000000f0 alt_iic_isr_register
0008f130 g     F .text	00000108 alt_tick
0008b158 g     F .text	00000578 .hidden __udivdi3
00081600 g     F .text	000001c8 display_number
0008aba4 g     F .text	00000024 _fputwc_r
00090f64 g     O .rodata	00000028 __mprec_bigtens
00087b2c g     F .text	00000104 __s2b
0008e164 g     F .text	000000a8 .hidden __floatunsidf
00088204 g     F .text	00000060 __mcmp
00085ee4 g     F .text	00000018 __fp_lock_all
0008e7ec g     F .text	0000004c alt_ic_irq_enabled
0008f094 g     F .text	0000009c alt_alarm_stop
00094be0 g     O .bss	00000004 alt_irq_active
00080d00 g     F .text	00000084 compute_byte_packet
000800fc g     F .exceptions	000000d4 alt_irq_handler
00091c60 g     O .rwdata	00000028 alt_dev_null
000900c4 g     F .text	00000048 alt_dcache_flush_all
00087c30 g     F .text	00000068 __hi0bits
0008e008 g     F .text	00000080 .hidden __fixdfsi
000807cc g     F .text	00000094 get_block_with_coordinates
00092ea8 g       *ABS*	00000000 __ram_rwdata_end
00092e88 g     O .rwdata	00000008 alt_dev_list
00094bb0 g     O .bss	00000002 score
0008f274 g     F .text	000000f8 write
000911a0 g       *ABS*	00000000 __ram_rodata_end
0008e3e4 g     F .text	000000b0 fstat
0008cf00 g     F .text	000000f4 .hidden __ledf2
00087f7c g     F .text	00000140 __pow5mult
00089290 g     F .text	0000145c ___vfiprintf_internal_r
00094bc0 g     O .bss	00000004 __nlocale_changed
00081924 g     F .text	00000058 .hidden __umodsi3
00094e14 g       *ABS*	00000000 end
0008f5a0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000801d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00090d94 g       *ABS*	00000000 __CTOR_LIST__
000e1a80 g       *ABS*	00000000 __alt_stack_pointer
0008ff1c g     F .text	0000007c alt_avalon_timer_sc_init
0008e20c g     F .text	00000064 .hidden __clzsi2
0008fc80 g     F .text	00000224 altera_avalon_jtag_uart_write
00085ed4 g     F .text	00000004 __sfp_lock_acquire
0008748c g     F .text	000000e4 memchr
00081c20 g     F .text	000021f8 ___vfprintf_internal_r
00086038 g     F .text	00000310 _free_r
00086a70 g     F .text	00000010 __locale_mb_cur_max
00090be0 g     F .text	00000180 __call_exitprocs
00094bbc g     O .bss	00000004 __mlocale_changed
00092e74 g     O .rwdata	00000004 __malloc_sbrk_base
00080244 g     F .text	0000004c _start
00094bf0 g     O .bss	00000004 _alt_tick_rate
00081ad4 g     F .text	00000064 rand
000880bc g     F .text	00000148 __lshift
00094bf4 g     O .bss	00000004 _alt_nticks
0008ee84 g     F .text	000000fc read
0008f3d8 g     F .text	00000064 alt_sys_init
00090ac8 g     F .text	00000118 __register_exitproc
00087d84 g     F .text	000001f8 __multiply
0008f90c g     F .text	00000068 altera_avalon_jtag_uart_close
000911a0 g       *ABS*	00000000 __ram_rwdata_start
00090d94 g       *ABS*	00000000 __ram_rodata_start
00094cec g     O .bss	00000028 __malloc_current_mallinfo
000885d0 g     F .text	0000014c __d2b
0008f43c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000908cc g     F .text	000000a4 alt_get_fd
0008a824 g     F .text	00000054 _close_r
00080464 g     F .text	00000160 refresh_food_layer
00090a4c g     F .text	0000007c memcmp
0008f4fc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00094e14 g       *ABS*	00000000 __alt_stack_base
0008f54c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00083ef0 g     F .text	00000154 __swsetup_r
0008c4b4 g     F .text	000008e8 .hidden __divdf3
00085d94 g     F .text	00000118 __sfp
00088834 g     F .text	00000078 __copybits
00091858 g     O .rwdata	00000408 __malloc_av_
00085ee0 g     F .text	00000004 __sinit_lock_release
0008cff4 g     F .text	00000718 .hidden __muldf3
00088f64 g     F .text	00000054 __sread
000907c4 g     F .text	00000108 alt_find_file
00090148 g     F .text	000000a4 alt_dev_llist_insert
0008ee00 g     F .text	00000024 __malloc_lock
0008efe4 g     F .text	000000b0 sbrk
00085ae8 g     F .text	0000005c _fflush_r
0008a878 g     F .text	000000c4 _calloc_r
0008e494 g     F .text	000001f4 gettimeofday
00080ea0 g     F .text	0000026c compute_collision
00094bb0 g       *ABS*	00000000 __bss_start
00087814 g     F .text	00000128 memset
00080a38 g     F .text	000002c8 main
00094bec g     O .bss	00000004 alt_envp
00094bc4 g     O .bss	00000004 __malloc_max_total_mem
0008f49c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008aef8 g     F .text	00000018 __swbuf
00081abc g     F .text	00000018 srand
00089098 g     F .text	00000008 __sclose
000e1a80 g       *ABS*	00000000 __alt_heap_limit
0008aa2c g     F .text	00000014 fclose
00084244 g     F .text	00001688 _dtoa_r
00086c80 g     F .text	0000080c _malloc_r
0008b06c g     F .text	00000030 __ascii_wctomb
00081bd0 g     F .text	00000050 time
00092e94 g     O .rwdata	00000004 alt_errno
00086804 g     F .text	000000c4 _fwalk
000817c8 g     F .text	00000084 .hidden __divsi3
00085f14 g     F .text	00000124 _malloc_trim_r
00090d94 g       *ABS*	00000000 __CTOR_END__
000890a0 g     F .text	000000dc strcmp
00090d94 g       *ABS*	00000000 __flash_rodata_start
00090d94 g       *ABS*	00000000 __DTOR_LIST__
0008cd9c g     F .text	00000088 .hidden __nedf2
0008f3a0 g     F .text	00000038 alt_irq_init
0008ef80 g     F .text	00000064 alt_release_fd
00091074 g     O .rodata	00000100 .hidden __clz_tab
00094bb8 g     O .bss	00000004 _PathLocale
00090a00 g     F .text	00000014 atexit
0008a7c4 g     F .text	00000060 _write_r
00086aa0 g     F .text	00000018 setlocale
00092e6c g     O .rwdata	00000004 _impure_ptr
00094be4 g     O .bss	00000004 alt_argc
000858cc g     F .text	0000021c __sflush_r
0009024c g     F .text	00000060 _do_dtors
00086a8c g     F .text	00000008 __locale_cjk_lang
00080020 g       .exceptions	00000000 alt_irq_entry
00088460 g     F .text	00000064 __ulp
00085efc g     F .text	00000018 __fp_unlock_all
00092e80 g     O .rwdata	00000008 alt_fs_list
00094bd8 g     O .bss	00000008 alt_resettime
00080020 g       *ABS*	00000000 __ram_exceptions_start
00086ab8 g     F .text	0000000c localeconv
0008110c g     F .text	00000240 refresh_position
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00080334 g     F .text	0000008c init_foodLayer
0008e688 g     F .text	00000050 alt_ic_isr_register
00092ea8 g       *ABS*	00000000 _edata
00094e14 g       *ABS*	00000000 _end
00080630 g     F .text	0000019c init_game
0008aa40 g     F .text	00000164 __fputwc
00080244 g       *ABS*	00000000 __ram_exceptions_end
0008f974 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0008e760 g     F .text	0000008c alt_ic_irq_disable
00088fc0 g     F .text	0000007c __swrite
00092e78 g     O .rwdata	00000004 __malloc_trim_threshold
00086a80 g     F .text	0000000c __locale_msgcharset
00090a14 g     F .text	00000038 exit
000868c8 g     F .text	000000c4 _fwalk_reent
00088264 g     F .text	000001fc __mdiff
0008184c g     F .text	00000074 .hidden __modsi3
000e1a80 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00085ed8 g     F .text	00000004 __sfp_lock_release
000803c0 g     F .text	000000a4 set_foodLayer_in_memory
00080d84 g     F .text	00000044 init_collision
00090d60 g     F .text	00000034 _exit
0008ff98 g     F .text	0000012c alt_alarm_start
0008b0f8 g     F .text	00000060 .hidden __muldi3
00086ac4 g     F .text	000001bc __smakebuf_r
00081b38 g     F .text	00000098 strlen
000905bc g     F .text	00000154 open
0008ce24 g     F .text	000000dc .hidden __gedf2
00092e7c g     O .rwdata	00000004 __wctomb
00089278 g     F .text	00000018 __sprint_r
000902ac g     F .text	00000034 alt_icache_flush_all
00092e98 g     O .rwdata	00000004 alt_priority_mask
0008e6d8 g     F .text	00000088 alt_ic_irq_enable
00083e18 g     F .text	0000001c __vfprintf_internal
0008b09c g     F .text	0000005c _wctomb_r
0008d70c g     F .text	000008fc .hidden __subdf3
00087c98 g     F .text	000000b0 __lo0bits
00092ea0 g     O .rwdata	00000008 alt_alarm_list
000901ec g     F .text	00000060 _do_ctors
0008afac g     F .text	000000c0 wcrtomb
0008e2ac g     F .text	000000d0 close
0008134c g     F .text	000001b0 refresh_position_keepGoing
0008ebf0 g     F .text	00000084 alt_load
0008abc8 g     F .text	00000080 fputwc
00085edc g     F .text	00000004 __sinit_lock_acquire
00087a0c g     F .text	00000120 __multadd
000879e4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__alt_data_end+0xfff9e584>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08409114 	ori	at,at,580
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800274 	movhi	r2,9
   80140:	10934504 	addi	r2,r2,19732
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800274 	movhi	r2,9
   80158:	10934504 	addi	r2,r2,19732
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <__alt_data_end+0xfff9e6ac>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <__alt_data_end+0xfff9e6a0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	0001883a 	nop
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   801e4:	000531fa 	rdctl	r2,exception
   801e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   801ec:	e0bffd17 	ldw	r2,-12(fp)
   801f0:	10801f0c 	andi	r2,r2,124
   801f4:	1004d0ba 	srli	r2,r2,2
   801f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   801fc:	0005333a 	rdctl	r2,badaddr
   80200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   80204:	d0a76417 	ldw	r2,-25200(gp)
   80208:	10000726 	beq	r2,zero,80228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   8020c:	d0a76417 	ldw	r2,-25200(gp)
   80210:	e0fffd17 	ldw	r3,-12(fp)
   80214:	e1bffe17 	ldw	r6,-8(fp)
   80218:	e17fff17 	ldw	r5,-4(fp)
   8021c:	1809883a 	mov	r4,r3
   80220:	103ee83a 	callr	r2
   80224:	00000206 	br	80230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   8022c:	0005883a 	mov	r2,zero
}
   80230:	e037883a 	mov	sp,fp
   80234:	dfc00117 	ldw	ra,4(sp)
   80238:	df000017 	ldw	fp,0(sp)
   8023c:	dec00204 	addi	sp,sp,8
   80240:	f800283a 	ret

Disassembly of section .text:

00080244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   80244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   80248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   8024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   80250:	00bffd16 	blt	zero,r2,80248 <__alt_data_end+0xfff9e7c8>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80254:	06c003b4 	movhi	sp,14
    ori sp, sp, %lo(__alt_stack_pointer)
   80258:	dec6a014 	ori	sp,sp,6784
    movhi gp, %hi(_gp)
   8025c:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   80260:	d6ab9a14 	ori	gp,gp,44648
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80264:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   80268:	1092ec14 	ori	r2,r2,19376

    movhi r3, %hi(__bss_end)
   8026c:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   80270:	18d38514 	ori	r3,r3,19988

    beq r2, r3, 1f
   80274:	10c00326 	beq	r2,r3,80284 <_start+0x40>

0:
    stw zero, (r2)
   80278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   8027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80280:	10fffd36 	bltu	r2,r3,80278 <__alt_data_end+0xfff9e7f8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80284:	008ebf00 	call	8ebf0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80288:	008ed840 	call	8ed84 <alt_main>

0008028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   8028c:	003fff06 	br	8028c <__alt_data_end+0xfff9e80c>

00080290 <set_background_in_memory>:


#include "background.h"

void set_background_in_memory(alt_u32 background[15])
{
   80290:	defffd04 	addi	sp,sp,-12
   80294:	df000215 	stw	fp,8(sp)
   80298:	df000204 	addi	fp,sp,8
   8029c:	e13fff15 	stw	r4,-4(fp)
	for(int i=0; i<16; i++){
   802a0:	e03ffe15 	stw	zero,-8(fp)
   802a4:	00001b06 	br	80314 <set_background_in_memory+0x84>
		IOWR_32DIRECT(BACKGROUND_DATA_BASE, 0, background[i]);
   802a8:	e0bffe17 	ldw	r2,-8(fp)
   802ac:	1085883a 	add	r2,r2,r2
   802b0:	1085883a 	add	r2,r2,r2
   802b4:	1007883a 	mov	r3,r2
   802b8:	e0bfff17 	ldw	r2,-4(fp)
   802bc:	10c5883a 	add	r2,r2,r3
   802c0:	10800017 	ldw	r2,0(r2)
   802c4:	1007883a 	mov	r3,r2
   802c8:	00800434 	movhi	r2,16
   802cc:	10842804 	addi	r2,r2,4256
   802d0:	10c00035 	stwio	r3,0(r2)
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b00000 + i);
   802d4:	00800434 	movhi	r2,16
   802d8:	10842404 	addi	r2,r2,4240
   802dc:	e0fffe03 	ldbu	r3,-8(fp)
   802e0:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b10000 + i);
   802e4:	e0bffe17 	ldw	r2,-8(fp)
   802e8:	10c00404 	addi	r3,r2,16
   802ec:	00800434 	movhi	r2,16
   802f0:	10842404 	addi	r2,r2,4240
   802f4:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b00000 + i);
   802f8:	00800434 	movhi	r2,16
   802fc:	10842404 	addi	r2,r2,4240
   80300:	e0fffe03 	ldbu	r3,-8(fp)
   80304:	10c00025 	stbio	r3,0(r2)

#include "background.h"

void set_background_in_memory(alt_u32 background[15])
{
	for(int i=0; i<16; i++){
   80308:	e0bffe17 	ldw	r2,-8(fp)
   8030c:	10800044 	addi	r2,r2,1
   80310:	e0bffe15 	stw	r2,-8(fp)
   80314:	e0bffe17 	ldw	r2,-8(fp)
   80318:	10800410 	cmplti	r2,r2,16
   8031c:	103fe21e 	bne	r2,zero,802a8 <__alt_data_end+0xfff9e828>
		IOWR_32DIRECT(BACKGROUND_DATA_BASE, 0, background[i]);
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b00000 + i);
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b10000 + i);
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b00000 + i);
	}
}
   80320:	0001883a 	nop
   80324:	e037883a 	mov	sp,fp
   80328:	df000017 	ldw	fp,0(sp)
   8032c:	dec00104 	addi	sp,sp,4
   80330:	f800283a 	ret

00080334 <init_foodLayer>:

void init_foodLayer(alt_u32 background[15], alt_u32 foodLayer[15], alt_u8 sizeY)
{
   80334:	defffb04 	addi	sp,sp,-20
   80338:	df000415 	stw	fp,16(sp)
   8033c:	df000404 	addi	fp,sp,16
   80340:	e13ffd15 	stw	r4,-12(fp)
   80344:	e17ffe15 	stw	r5,-8(fp)
   80348:	3005883a 	mov	r2,r6
   8034c:	e0bfff05 	stb	r2,-4(fp)
	for(int i=0; i<sizeY; i++){
   80350:	e03ffc15 	stw	zero,-16(fp)
   80354:	00001206 	br	803a0 <init_foodLayer+0x6c>
		foodLayer[i] = ~background[i];
   80358:	e0bffc17 	ldw	r2,-16(fp)
   8035c:	1085883a 	add	r2,r2,r2
   80360:	1085883a 	add	r2,r2,r2
   80364:	1007883a 	mov	r3,r2
   80368:	e0bffe17 	ldw	r2,-8(fp)
   8036c:	10c7883a 	add	r3,r2,r3
   80370:	e0bffc17 	ldw	r2,-16(fp)
   80374:	1085883a 	add	r2,r2,r2
   80378:	1085883a 	add	r2,r2,r2
   8037c:	1009883a 	mov	r4,r2
   80380:	e0bffd17 	ldw	r2,-12(fp)
   80384:	1105883a 	add	r2,r2,r4
   80388:	10800017 	ldw	r2,0(r2)
   8038c:	0084303a 	nor	r2,zero,r2
   80390:	18800015 	stw	r2,0(r3)
	}
}

void init_foodLayer(alt_u32 background[15], alt_u32 foodLayer[15], alt_u8 sizeY)
{
	for(int i=0; i<sizeY; i++){
   80394:	e0bffc17 	ldw	r2,-16(fp)
   80398:	10800044 	addi	r2,r2,1
   8039c:	e0bffc15 	stw	r2,-16(fp)
   803a0:	e0bfff03 	ldbu	r2,-4(fp)
   803a4:	e0fffc17 	ldw	r3,-16(fp)
   803a8:	18bfeb16 	blt	r3,r2,80358 <__alt_data_end+0xfff9e8d8>
		foodLayer[i] = ~background[i];
	}
}
   803ac:	0001883a 	nop
   803b0:	e037883a 	mov	sp,fp
   803b4:	df000017 	ldw	fp,0(sp)
   803b8:	dec00104 	addi	sp,sp,4
   803bc:	f800283a 	ret

000803c0 <set_foodLayer_in_memory>:


void set_foodLayer_in_memory(alt_u32 foodLayer[15])
{
   803c0:	defffd04 	addi	sp,sp,-12
   803c4:	df000215 	stw	fp,8(sp)
   803c8:	df000204 	addi	fp,sp,8
   803cc:	e13fff15 	stw	r4,-4(fp)
	for(int i=0; i<16; i++){
   803d0:	e03ffe15 	stw	zero,-8(fp)
   803d4:	00001b06 	br	80444 <set_foodLayer_in_memory+0x84>
		IOWR_32DIRECT(FOOD_LAYER_DATA_BASE, 0, foodLayer[i]);
   803d8:	e0bffe17 	ldw	r2,-8(fp)
   803dc:	1085883a 	add	r2,r2,r2
   803e0:	1085883a 	add	r2,r2,r2
   803e4:	1007883a 	mov	r3,r2
   803e8:	e0bfff17 	ldw	r2,-4(fp)
   803ec:	10c5883a 	add	r2,r2,r3
   803f0:	10800017 	ldw	r2,0(r2)
   803f4:	1007883a 	mov	r3,r2
   803f8:	00800434 	movhi	r2,16
   803fc:	10841004 	addi	r2,r2,4160
   80400:	10c00035 	stwio	r3,0(r2)
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b00000 + i);
   80404:	00800434 	movhi	r2,16
   80408:	10840c04 	addi	r2,r2,4144
   8040c:	e0fffe03 	ldbu	r3,-8(fp)
   80410:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b10000 + i);
   80414:	e0bffe17 	ldw	r2,-8(fp)
   80418:	10c00404 	addi	r3,r2,16
   8041c:	00800434 	movhi	r2,16
   80420:	10840c04 	addi	r2,r2,4144
   80424:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b00000 + i);
   80428:	00800434 	movhi	r2,16
   8042c:	10840c04 	addi	r2,r2,4144
   80430:	e0fffe03 	ldbu	r3,-8(fp)
   80434:	10c00025 	stbio	r3,0(r2)
}


void set_foodLayer_in_memory(alt_u32 foodLayer[15])
{
	for(int i=0; i<16; i++){
   80438:	e0bffe17 	ldw	r2,-8(fp)
   8043c:	10800044 	addi	r2,r2,1
   80440:	e0bffe15 	stw	r2,-8(fp)
   80444:	e0bffe17 	ldw	r2,-8(fp)
   80448:	10800410 	cmplti	r2,r2,16
   8044c:	103fe21e 	bne	r2,zero,803d8 <__alt_data_end+0xfff9e958>
		IOWR_32DIRECT(FOOD_LAYER_DATA_BASE, 0, foodLayer[i]);
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b00000 + i);
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b10000 + i);
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b00000 + i);
	}
}
   80450:	0001883a 	nop
   80454:	e037883a 	mov	sp,fp
   80458:	df000017 	ldw	fp,0(sp)
   8045c:	dec00104 	addi	sp,sp,4
   80460:	f800283a 	ret

00080464 <refresh_food_layer>:

void refresh_food_layer(position* charPosition, alt_u32 foodLayer[15], alt_u16* score)
{
   80464:	defff804 	addi	sp,sp,-32
   80468:	dfc00715 	stw	ra,28(sp)
   8046c:	df000615 	stw	fp,24(sp)
   80470:	df000604 	addi	fp,sp,24
   80474:	e13ffd15 	stw	r4,-12(fp)
   80478:	e17ffe15 	stw	r5,-8(fp)
   8047c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 middlePosX = (charPosition->positionX + 30);
   80480:	e0bffd17 	ldw	r2,-12(fp)
   80484:	10800117 	ldw	r2,4(r2)
   80488:	10800784 	addi	r2,r2,30
   8048c:	e0bffa15 	stw	r2,-24(fp)
	alt_u32 middlePosY = (charPosition->positionY + 30);
   80490:	e0bffd17 	ldw	r2,-12(fp)
   80494:	10800217 	ldw	r2,8(r2)
   80498:	10800784 	addi	r2,r2,30
   8049c:	e0bffb15 	stw	r2,-20(fp)

	alt_u16 blockX = middlePosX / 60;
   804a0:	e0bffa17 	ldw	r2,-24(fp)
   804a4:	01400f04 	movi	r5,60
   804a8:	1009883a 	mov	r4,r2
   804ac:	00818c00 	call	818c0 <__udivsi3>
   804b0:	e0bffc0d 	sth	r2,-16(fp)
	alt_u16 blockY = middlePosY / 60;
   804b4:	e0bffb17 	ldw	r2,-20(fp)
   804b8:	01400f04 	movi	r5,60
   804bc:	1009883a 	mov	r4,r2
   804c0:	00818c00 	call	818c0 <__udivsi3>
   804c4:	e0bffc8d 	sth	r2,-14(fp)

	if (get_block_with_coordinates(middlePosX, middlePosY, foodLayer) == 1){
   804c8:	e1bffe17 	ldw	r6,-8(fp)
   804cc:	e17ffb17 	ldw	r5,-20(fp)
   804d0:	e13ffa17 	ldw	r4,-24(fp)
   804d4:	00807cc0 	call	807cc <get_block_with_coordinates>
   804d8:	10803fcc 	andi	r2,r2,255
   804dc:	10800058 	cmpnei	r2,r2,1
   804e0:	1000321e 	bne	r2,zero,805ac <refresh_food_layer+0x148>
		foodLayer[blockY] &= (~(1<<(8+blockX)));
   804e4:	e0bffc8b 	ldhu	r2,-14(fp)
   804e8:	1085883a 	add	r2,r2,r2
   804ec:	1085883a 	add	r2,r2,r2
   804f0:	1007883a 	mov	r3,r2
   804f4:	e0bffe17 	ldw	r2,-8(fp)
   804f8:	10c7883a 	add	r3,r2,r3
   804fc:	e0bffc8b 	ldhu	r2,-14(fp)
   80500:	1085883a 	add	r2,r2,r2
   80504:	1085883a 	add	r2,r2,r2
   80508:	1009883a 	mov	r4,r2
   8050c:	e0bffe17 	ldw	r2,-8(fp)
   80510:	1105883a 	add	r2,r2,r4
   80514:	10800017 	ldw	r2,0(r2)
   80518:	e13ffc0b 	ldhu	r4,-16(fp)
   8051c:	21000204 	addi	r4,r4,8
   80520:	01400044 	movi	r5,1
   80524:	2908983a 	sll	r4,r5,r4
   80528:	0108303a 	nor	r4,zero,r4
   8052c:	1104703a 	and	r2,r2,r4
   80530:	18800015 	stw	r2,0(r3)
		IOWR_32DIRECT(FOOD_LAYER_DATA_BASE, 0, foodLayer[blockY]);
   80534:	e0bffc8b 	ldhu	r2,-14(fp)
   80538:	1085883a 	add	r2,r2,r2
   8053c:	1085883a 	add	r2,r2,r2
   80540:	1007883a 	mov	r3,r2
   80544:	e0bffe17 	ldw	r2,-8(fp)
   80548:	10c5883a 	add	r2,r2,r3
   8054c:	10800017 	ldw	r2,0(r2)
   80550:	1007883a 	mov	r3,r2
   80554:	00800434 	movhi	r2,16
   80558:	10841004 	addi	r2,r2,4160
   8055c:	10c00035 	stwio	r3,0(r2)
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b00000 + blockY);
   80560:	e0fffc8b 	ldhu	r3,-14(fp)
   80564:	00800434 	movhi	r2,16
   80568:	10840c04 	addi	r2,r2,4144
   8056c:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b10000 + blockY);
   80570:	e0bffc8b 	ldhu	r2,-14(fp)
   80574:	10c00404 	addi	r3,r2,16
   80578:	00800434 	movhi	r2,16
   8057c:	10840c04 	addi	r2,r2,4144
   80580:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b00000 + blockY);
   80584:	e0fffc8b 	ldhu	r3,-14(fp)
   80588:	00800434 	movhi	r2,16
   8058c:	10840c04 	addi	r2,r2,4144
   80590:	10c00025 	stbio	r3,0(r2)
		*score = *score+1;
   80594:	e0bfff17 	ldw	r2,-4(fp)
   80598:	1080000b 	ldhu	r2,0(r2)
   8059c:	10800044 	addi	r2,r2,1
   805a0:	1007883a 	mov	r3,r2
   805a4:	e0bfff17 	ldw	r2,-4(fp)
   805a8:	10c0000d 	sth	r3,0(r2)
	}
}
   805ac:	0001883a 	nop
   805b0:	e037883a 	mov	sp,fp
   805b4:	dfc00117 	ldw	ra,4(sp)
   805b8:	df000017 	ldw	fp,0(sp)
   805bc:	dec00204 	addi	sp,sp,8
   805c0:	f800283a 	ret

000805c4 <food_layer_empty>:

alt_u8 food_layer_empty(alt_u32 foodLayer[15]) 
{
   805c4:	defffd04 	addi	sp,sp,-12
   805c8:	df000215 	stw	fp,8(sp)
   805cc:	df000204 	addi	fp,sp,8
   805d0:	e13fff15 	stw	r4,-4(fp)
	for(alt_u8 idx = 0; idx < 15; idx++){
   805d4:	e03ffe05 	stb	zero,-8(fp)
   805d8:	00000d06 	br	80610 <food_layer_empty+0x4c>
		if(foodLayer[idx] != 0){
   805dc:	e0bffe03 	ldbu	r2,-8(fp)
   805e0:	1085883a 	add	r2,r2,r2
   805e4:	1085883a 	add	r2,r2,r2
   805e8:	1007883a 	mov	r3,r2
   805ec:	e0bfff17 	ldw	r2,-4(fp)
   805f0:	10c5883a 	add	r2,r2,r3
   805f4:	10800017 	ldw	r2,0(r2)
   805f8:	10000226 	beq	r2,zero,80604 <food_layer_empty+0x40>
			return 0;
   805fc:	0005883a 	mov	r2,zero
   80600:	00000706 	br	80620 <food_layer_empty+0x5c>
	}
}

alt_u8 food_layer_empty(alt_u32 foodLayer[15]) 
{
	for(alt_u8 idx = 0; idx < 15; idx++){
   80604:	e0bffe03 	ldbu	r2,-8(fp)
   80608:	10800044 	addi	r2,r2,1
   8060c:	e0bffe05 	stb	r2,-8(fp)
   80610:	e0bffe03 	ldbu	r2,-8(fp)
   80614:	108003f0 	cmpltui	r2,r2,15
   80618:	103ff01e 	bne	r2,zero,805dc <__alt_data_end+0xfff9eb5c>
		if(foodLayer[idx] != 0){
			return 0;
		}
	}
	return 1;
   8061c:	00800044 	movi	r2,1
}
   80620:	e037883a 	mov	sp,fp
   80624:	df000017 	ldw	fp,0(sp)
   80628:	dec00104 	addi	sp,sp,4
   8062c:	f800283a 	ret

00080630 <init_game>:
	alt_u32 charBackground[15],
	alt_u32 ghostBackground[15],
	alt_u32 foodLayer[15],
	alt_u16 *score
	)
{
   80630:	defff704 	addi	sp,sp,-36
   80634:	dfc00815 	stw	ra,32(sp)
   80638:	df000715 	stw	fp,28(sp)
   8063c:	df000704 	addi	fp,sp,28
   80640:	e13ffc15 	stw	r4,-16(fp)
   80644:	e17ffd15 	stw	r5,-12(fp)
   80648:	e1bffe15 	stw	r6,-8(fp)
   8064c:	e1ffff15 	stw	r7,-4(fp)
	*score = 0;
   80650:	e0800517 	ldw	r2,20(fp)
   80654:	1000000d 	sth	zero,0(r2)

	init_position(&(charPosition[0]), 0, positionX, positionY, ACTIVE, orientation, charBackground);
   80658:	e0800217 	ldw	r2,8(fp)
   8065c:	d8800215 	stw	r2,8(sp)
   80660:	e0bfff17 	ldw	r2,-4(fp)
   80664:	d8800115 	stw	r2,4(sp)
   80668:	00800044 	movi	r2,1
   8066c:	d8800015 	stw	r2,0(sp)
   80670:	e1fffe17 	ldw	r7,-8(fp)
   80674:	e1bffd17 	ldw	r6,-12(fp)
   80678:	000b883a 	mov	r5,zero
   8067c:	e13ffc17 	ldw	r4,-16(fp)
   80680:	0080dc80 	call	80dc8 <init_position>
	IOWR_32DIRECT(POSITION_BASE, 0, charPosition[0].bytePacket);
   80684:	e0bffc17 	ldw	r2,-16(fp)
   80688:	10800517 	ldw	r2,20(r2)
   8068c:	1007883a 	mov	r3,r2
   80690:	00800434 	movhi	r2,16
   80694:	10843004 	addi	r2,r2,4288
   80698:	10c00035 	stwio	r3,0(r2)

	init_position(&(charPosition[1]), 1, 12*60, 6*60, ACTIVE, NORTH, ghostBackground);
   8069c:	e0bffc17 	ldw	r2,-16(fp)
   806a0:	10c00904 	addi	r3,r2,36
   806a4:	e0800317 	ldw	r2,12(fp)
   806a8:	d8800215 	stw	r2,8(sp)
   806ac:	00800044 	movi	r2,1
   806b0:	d8800115 	stw	r2,4(sp)
   806b4:	00800044 	movi	r2,1
   806b8:	d8800015 	stw	r2,0(sp)
   806bc:	01c05a04 	movi	r7,360
   806c0:	0180b404 	movi	r6,720
   806c4:	01400044 	movi	r5,1
   806c8:	1809883a 	mov	r4,r3
   806cc:	0080dc80 	call	80dc8 <init_position>
	IOWR_32DIRECT(POSITION_BASE, 0, charPosition[1].bytePacket);
   806d0:	e0bffc17 	ldw	r2,-16(fp)
   806d4:	10800904 	addi	r2,r2,36
   806d8:	10800517 	ldw	r2,20(r2)
   806dc:	1007883a 	mov	r3,r2
   806e0:	00800434 	movhi	r2,16
   806e4:	10843004 	addi	r2,r2,4288
   806e8:	10c00035 	stwio	r3,0(r2)

	init_position(&(charPosition[2]), 2, 12*60, 5*60, ACTIVE, SOUTH, ghostBackground);
   806ec:	e0bffc17 	ldw	r2,-16(fp)
   806f0:	10c01204 	addi	r3,r2,72
   806f4:	e0800317 	ldw	r2,12(fp)
   806f8:	d8800215 	stw	r2,8(sp)
   806fc:	008000c4 	movi	r2,3
   80700:	d8800115 	stw	r2,4(sp)
   80704:	00800044 	movi	r2,1
   80708:	d8800015 	stw	r2,0(sp)
   8070c:	01c04b04 	movi	r7,300
   80710:	0180b404 	movi	r6,720
   80714:	01400084 	movi	r5,2
   80718:	1809883a 	mov	r4,r3
   8071c:	0080dc80 	call	80dc8 <init_position>
	IOWR_32DIRECT(POSITION_BASE, 0, charPosition[2].bytePacket);
   80720:	e0bffc17 	ldw	r2,-16(fp)
   80724:	10801204 	addi	r2,r2,72
   80728:	10800517 	ldw	r2,20(r2)
   8072c:	1007883a 	mov	r3,r2
   80730:	00800434 	movhi	r2,16
   80734:	10843004 	addi	r2,r2,4288
   80738:	10c00035 	stwio	r3,0(r2)

	init_position(&(charPosition[3]), 3, 11*60, 5*60, ACTIVE, EAST, ghostBackground);
   8073c:	e0bffc17 	ldw	r2,-16(fp)
   80740:	10c01b04 	addi	r3,r2,108
   80744:	e0800317 	ldw	r2,12(fp)
   80748:	d8800215 	stw	r2,8(sp)
   8074c:	00800084 	movi	r2,2
   80750:	d8800115 	stw	r2,4(sp)
   80754:	00800044 	movi	r2,1
   80758:	d8800015 	stw	r2,0(sp)
   8075c:	01c04b04 	movi	r7,300
   80760:	0180a504 	movi	r6,660
   80764:	014000c4 	movi	r5,3
   80768:	1809883a 	mov	r4,r3
   8076c:	0080dc80 	call	80dc8 <init_position>
	IOWR_32DIRECT(POSITION_BASE, 0, charPosition[3].bytePacket);
   80770:	e0bffc17 	ldw	r2,-16(fp)
   80774:	10801b04 	addi	r2,r2,108
   80778:	10800517 	ldw	r2,20(r2)
   8077c:	1007883a 	mov	r3,r2
   80780:	00800434 	movhi	r2,16
   80784:	10843004 	addi	r2,r2,4288
   80788:	10c00035 	stwio	r3,0(r2)


	set_background_in_memory(ghostBackground);
   8078c:	e1000317 	ldw	r4,12(fp)
   80790:	00802900 	call	80290 <set_background_in_memory>
	init_foodLayer(charBackground, foodLayer, 15);
   80794:	018003c4 	movi	r6,15
   80798:	e1400417 	ldw	r5,16(fp)
   8079c:	e1000217 	ldw	r4,8(fp)
   807a0:	00803340 	call	80334 <init_foodLayer>
	set_foodLayer_in_memory(foodLayer);
   807a4:	e1000417 	ldw	r4,16(fp)
   807a8:	00803c00 	call	803c0 <set_foodLayer_in_memory>
	compute_collision(charPosition);
   807ac:	e13ffc17 	ldw	r4,-16(fp)
   807b0:	0080ea00 	call	80ea0 <compute_collision>
}
   807b4:	0001883a 	nop
   807b8:	e037883a 	mov	sp,fp
   807bc:	dfc00117 	ldw	ra,4(sp)
   807c0:	df000017 	ldw	fp,0(sp)
   807c4:	dec00204 	addi	sp,sp,8
   807c8:	f800283a 	ret

000807cc <get_block_with_coordinates>:
 */

#include "general.h"


alt_u8 get_block_with_coordinates(alt_u32 positionX, alt_u32 positionY, alt_u32 layer[]){
   807cc:	defffa04 	addi	sp,sp,-24
   807d0:	dfc00515 	stw	ra,20(sp)
   807d4:	df000415 	stw	fp,16(sp)
   807d8:	df000404 	addi	fp,sp,16
   807dc:	e13ffd15 	stw	r4,-12(fp)
   807e0:	e17ffe15 	stw	r5,-8(fp)
   807e4:	e1bfff15 	stw	r6,-4(fp)
	alt_u16 blockX = positionX / 60;
   807e8:	e0bffd17 	ldw	r2,-12(fp)
   807ec:	01400f04 	movi	r5,60
   807f0:	1009883a 	mov	r4,r2
   807f4:	00818c00 	call	818c0 <__udivsi3>
   807f8:	e0bffc0d 	sth	r2,-16(fp)
	alt_u16 blockY = positionY / 60;
   807fc:	e0bffe17 	ldw	r2,-8(fp)
   80800:	01400f04 	movi	r5,60
   80804:	1009883a 	mov	r4,r2
   80808:	00818c00 	call	818c0 <__udivsi3>
   8080c:	e0bffc8d 	sth	r2,-14(fp)
	return ((layer[blockY] & 1<<(8+blockX))>>(8+blockX));
   80810:	e0bffc8b 	ldhu	r2,-14(fp)
   80814:	1085883a 	add	r2,r2,r2
   80818:	1085883a 	add	r2,r2,r2
   8081c:	1007883a 	mov	r3,r2
   80820:	e0bfff17 	ldw	r2,-4(fp)
   80824:	10c5883a 	add	r2,r2,r3
   80828:	10800017 	ldw	r2,0(r2)
   8082c:	e0fffc0b 	ldhu	r3,-16(fp)
   80830:	18c00204 	addi	r3,r3,8
   80834:	01000044 	movi	r4,1
   80838:	20c6983a 	sll	r3,r4,r3
   8083c:	10c6703a 	and	r3,r2,r3
   80840:	e0bffc0b 	ldhu	r2,-16(fp)
   80844:	10800204 	addi	r2,r2,8
   80848:	1884d83a 	srl	r2,r3,r2
}
   8084c:	e037883a 	mov	sp,fp
   80850:	dfc00117 	ldw	ra,4(sp)
   80854:	df000017 	ldw	fp,0(sp)
   80858:	dec00204 	addi	sp,sp,8
   8085c:	f800283a 	ret

00080860 <refresh_position_interrupt_handler>:

static void refresh_position_interrupt_handler(void* context)
/* interrupt handler : this function is called each time a new frame is build (60Hz)
 * it calls *refresh_position()* function and ensures the char doesn't go out of the frame.
*/
{
   80860:	defffc04 	addi	sp,sp,-16
   80864:	dfc00315 	stw	ra,12(sp)
   80868:	df000215 	stw	fp,8(sp)
   8086c:	df000204 	addi	fp,sp,8
   80870:	e13fff15 	stw	r4,-4(fp)
	position* charPosition = (position*) context;
   80874:	e0bfff17 	ldw	r2,-4(fp)
   80878:	e0bffe15 	stw	r2,-8(fp)
	refresh_position(&(charPosition[0]), 0);
   8087c:	000b883a 	mov	r5,zero
   80880:	e13ffe17 	ldw	r4,-8(fp)
   80884:	008110c0 	call	8110c <refresh_position>
	refresh_position(&(charPosition[1]), 1);
   80888:	e0bffe17 	ldw	r2,-8(fp)
   8088c:	10800904 	addi	r2,r2,36
   80890:	01400044 	movi	r5,1
   80894:	1009883a 	mov	r4,r2
   80898:	008110c0 	call	8110c <refresh_position>
	refresh_position(&(charPosition[2]), 1);
   8089c:	e0bffe17 	ldw	r2,-8(fp)
   808a0:	10801204 	addi	r2,r2,72
   808a4:	01400044 	movi	r5,1
   808a8:	1009883a 	mov	r4,r2
   808ac:	008110c0 	call	8110c <refresh_position>
	refresh_position(&(charPosition[3]), 1);
   808b0:	e0bffe17 	ldw	r2,-8(fp)
   808b4:	10801b04 	addi	r2,r2,108
   808b8:	01400044 	movi	r5,1
   808bc:	1009883a 	mov	r4,r2
   808c0:	008110c0 	call	8110c <refresh_position>
	refresh_food_layer(&(charPosition[0]), foodLayer, &score);
   808c4:	d1a75204 	addi	r6,gp,-25272
   808c8:	01400274 	movhi	r5,9
   808cc:	29531d04 	addi	r5,r5,19572
   808d0:	e13ffe17 	ldw	r4,-8(fp)
   808d4:	00804640 	call	80464 <refresh_food_layer>
	// 	charPosition[2].positionY,
	// 	charPosition[3].positionX,
	// 	charPosition[3].positionY
	// );

	IOWR_32DIRECT(POSITION_BASE, 0, charPosition[0].bytePacket);
   808d8:	e0bffe17 	ldw	r2,-8(fp)
   808dc:	10800517 	ldw	r2,20(r2)
   808e0:	1007883a 	mov	r3,r2
   808e4:	00800434 	movhi	r2,16
   808e8:	10843004 	addi	r2,r2,4288
   808ec:	10c00035 	stwio	r3,0(r2)
	//IOWR_32DIRECT(POSITION_BASE, 0, charPosition[1].bytePacket);
	//IOWR_32DIRECT(POSITION_BASE, 0, charPosition[2].bytePacket);
	//IOWR_32DIRECT(POSITION_BASE, 0, charPosition[3].bytePacket);
	IOWR(REFRESH_BASE,3,0xf);
   808f0:	00c003c4 	movi	r3,15
   808f4:	00800434 	movhi	r2,16
   808f8:	10842f04 	addi	r2,r2,4284
   808fc:	10c00035 	stwio	r3,0(r2)
}
   80900:	0001883a 	nop
   80904:	e037883a 	mov	sp,fp
   80908:	dfc00117 	ldw	ra,4(sp)
   8090c:	df000017 	ldw	fp,0(sp)
   80910:	dec00204 	addi	sp,sp,8
   80914:	f800283a 	ret

00080918 <left_button_interrupt_handler>:

static void left_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the left button direction is pressed */
{
   80918:	defffd04 	addi	sp,sp,-12
   8091c:	df000215 	stw	fp,8(sp)
   80920:	df000204 	addi	fp,sp,8
   80924:	e13fff15 	stw	r4,-4(fp)
	position* p_pacmanPosition = (position*) context;
   80928:	e0bfff17 	ldw	r2,-4(fp)
   8092c:	e0bffe15 	stw	r2,-8(fp)
	p_pacmanPosition->directionControl = LEFT;
   80930:	e0bffe17 	ldw	r2,-8(fp)
   80934:	00c00104 	movi	r3,4
   80938:	10c00715 	stw	r3,28(r2)
	IOWR(LEFT_BUTTON_BASE,3,0xf);
   8093c:	00c003c4 	movi	r3,15
   80940:	00800434 	movhi	r2,16
   80944:	10842304 	addi	r2,r2,4236
   80948:	10c00035 	stwio	r3,0(r2)
}
   8094c:	0001883a 	nop
   80950:	e037883a 	mov	sp,fp
   80954:	df000017 	ldw	fp,0(sp)
   80958:	dec00104 	addi	sp,sp,4
   8095c:	f800283a 	ret

00080960 <up_button_interrupt_handler>:

static void up_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the up button direction is pressed */
{
   80960:	defffd04 	addi	sp,sp,-12
   80964:	df000215 	stw	fp,8(sp)
   80968:	df000204 	addi	fp,sp,8
   8096c:	e13fff15 	stw	r4,-4(fp)
	position* p_pacmanPosition = (position*) context;
   80970:	e0bfff17 	ldw	r2,-4(fp)
   80974:	e0bffe15 	stw	r2,-8(fp)
	p_pacmanPosition->directionControl = DOWN;
   80978:	e0bffe17 	ldw	r2,-8(fp)
   8097c:	00c000c4 	movi	r3,3
   80980:	10c00715 	stw	r3,28(r2)
	IOWR(UP_BUTTON_BASE,3,0xf);
   80984:	00c003c4 	movi	r3,15
   80988:	00800434 	movhi	r2,16
   8098c:	10841f04 	addi	r2,r2,4220
   80990:	10c00035 	stwio	r3,0(r2)
}
   80994:	0001883a 	nop
   80998:	e037883a 	mov	sp,fp
   8099c:	df000017 	ldw	fp,0(sp)
   809a0:	dec00104 	addi	sp,sp,4
   809a4:	f800283a 	ret

000809a8 <down_button_interrupt_handler>:

static void down_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the down button direction is pressed */
{
   809a8:	defffd04 	addi	sp,sp,-12
   809ac:	df000215 	stw	fp,8(sp)
   809b0:	df000204 	addi	fp,sp,8
   809b4:	e13fff15 	stw	r4,-4(fp)
	position* p_pacmanPosition = (position*) context;
   809b8:	e0bfff17 	ldw	r2,-4(fp)
   809bc:	e0bffe15 	stw	r2,-8(fp)
	p_pacmanPosition->directionControl = UP;
   809c0:	e0bffe17 	ldw	r2,-8(fp)
   809c4:	00c00044 	movi	r3,1
   809c8:	10c00715 	stw	r3,28(r2)
	IOWR(DOWN_BUTTON_BASE,3,0xf);
   809cc:	00c003c4 	movi	r3,15
   809d0:	00800434 	movhi	r2,16
   809d4:	10841b04 	addi	r2,r2,4204
   809d8:	10c00035 	stwio	r3,0(r2)
}
   809dc:	0001883a 	nop
   809e0:	e037883a 	mov	sp,fp
   809e4:	df000017 	ldw	fp,0(sp)
   809e8:	dec00104 	addi	sp,sp,4
   809ec:	f800283a 	ret

000809f0 <right_button_interrupt_handler>:

static void right_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the right button direction is pressed */
{
   809f0:	defffd04 	addi	sp,sp,-12
   809f4:	df000215 	stw	fp,8(sp)
   809f8:	df000204 	addi	fp,sp,8
   809fc:	e13fff15 	stw	r4,-4(fp)
	position* p_pacmanPosition = (position*) context;
   80a00:	e0bfff17 	ldw	r2,-4(fp)
   80a04:	e0bffe15 	stw	r2,-8(fp)
	p_pacmanPosition->directionControl = RIGHT;
   80a08:	e0bffe17 	ldw	r2,-8(fp)
   80a0c:	00c00084 	movi	r3,2
   80a10:	10c00715 	stw	r3,28(r2)
	IOWR(RIGHT_BUTTON_BASE,3,0xf);
   80a14:	00c003c4 	movi	r3,15
   80a18:	00800434 	movhi	r2,16
   80a1c:	10841704 	addi	r2,r2,4188
   80a20:	10c00035 	stwio	r3,0(r2)
}
   80a24:	0001883a 	nop
   80a28:	e037883a 	mov	sp,fp
   80a2c:	df000017 	ldw	fp,0(sp)
   80a30:	dec00104 	addi	sp,sp,4
   80a34:	f800283a 	ret

00080a38 <main>:

int main()
{
   80a38:	deffd404 	addi	sp,sp,-176
   80a3c:	dfc02b15 	stw	ra,172(sp)
   80a40:	df002a15 	stw	fp,168(sp)
   80a44:	df002a04 	addi	fp,sp,168

	position charPosition[4];
	position (*charPosition_ptr)[4] = &charPosition; //& obligatoire
   80a48:	e0bfdc04 	addi	r2,fp,-144
   80a4c:	e0bfdb15 	stw	r2,-148(fp)
	init_game(charPosition, 60, 60, SOUTH, charBackground, ghostBackground, foodLayer, &score);
   80a50:	e0ffdc04 	addi	r3,fp,-144
   80a54:	d0a75204 	addi	r2,gp,-25272
   80a58:	d8800315 	stw	r2,12(sp)
   80a5c:	00800274 	movhi	r2,9
   80a60:	10931d04 	addi	r2,r2,19572
   80a64:	d8800215 	stw	r2,8(sp)
   80a68:	00800274 	movhi	r2,9
   80a6c:	1084b804 	addi	r2,r2,4832
   80a70:	d8800115 	stw	r2,4(sp)
   80a74:	00800274 	movhi	r2,9
   80a78:	1084a904 	addi	r2,r2,4772
   80a7c:	d8800015 	stw	r2,0(sp)
   80a80:	01c000c4 	movi	r7,3
   80a84:	01800f04 	movi	r6,60
   80a88:	01400f04 	movi	r5,60
   80a8c:	1809883a 	mov	r4,r3
   80a90:	00806300 	call	80630 <init_game>

	printf("Hello from Nios II!\n");
   80a94:	01000274 	movhi	r4,9
   80a98:	21036504 	addi	r4,r4,3476
   80a9c:	0081aa80 	call	81aa8 <puts>

	//IRQ initialization
	IOWR(REFRESH_BASE,2,0xf); //enable interrupt
   80aa0:	00c003c4 	movi	r3,15
   80aa4:	00800434 	movhi	r2,16
   80aa8:	10842e04 	addi	r2,r2,4280
   80aac:	10c00035 	stwio	r3,0(r2)
	IOWR(REFRESH_BASE,3,0xf); //clear edge register
   80ab0:	00c003c4 	movi	r3,15
   80ab4:	00800434 	movhi	r2,16
   80ab8:	10842f04 	addi	r2,r2,4284
   80abc:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(REFRESH_IRQ,(void*)charPosition_ptr,refresh_position_interrupt_handler);
   80ac0:	01800234 	movhi	r6,8
   80ac4:	31821804 	addi	r6,r6,2144
   80ac8:	e17fdb17 	ldw	r5,-148(fp)
   80acc:	010000c4 	movi	r4,3
   80ad0:	008e9280 	call	8e928 <alt_irq_register>
	printf("Refresh IRQ : ");
   80ad4:	01000274 	movhi	r4,9
   80ad8:	21036a04 	addi	r4,r4,3496
   80adc:	00819ac0 	call	819ac <printf>
	printf("alt_ic_irq_enabled : %lu \n", alt_ic_irq_enabled(REFRESH_IRQ_INTERRUPT_CONTROLLER_ID, REFRESH_IRQ));
   80ae0:	014000c4 	movi	r5,3
   80ae4:	0009883a 	mov	r4,zero
   80ae8:	008e7ec0 	call	8e7ec <alt_ic_irq_enabled>
   80aec:	100b883a 	mov	r5,r2
   80af0:	01000274 	movhi	r4,9
   80af4:	21036e04 	addi	r4,r4,3512
   80af8:	00819ac0 	call	819ac <printf>

	//Left button IRQ initialization
	IOWR(LEFT_BUTTON_BASE,2,0xf); //enable interrupt
   80afc:	00c003c4 	movi	r3,15
   80b00:	00800434 	movhi	r2,16
   80b04:	10842204 	addi	r2,r2,4232
   80b08:	10c00035 	stwio	r3,0(r2)
	IOWR(LEFT_BUTTON_BASE,3,0xf); //clear edge register
   80b0c:	00c003c4 	movi	r3,15
   80b10:	00800434 	movhi	r2,16
   80b14:	10842304 	addi	r2,r2,4236
   80b18:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(LEFT_BUTTON_IRQ,(void*)charPosition_ptr,left_button_interrupt_handler);
   80b1c:	01800234 	movhi	r6,8
   80b20:	31824604 	addi	r6,r6,2328
   80b24:	e17fdb17 	ldw	r5,-148(fp)
   80b28:	01000104 	movi	r4,4
   80b2c:	008e9280 	call	8e928 <alt_irq_register>
	printf("Left button IRQ : ");
   80b30:	01000274 	movhi	r4,9
   80b34:	21037504 	addi	r4,r4,3540
   80b38:	00819ac0 	call	819ac <printf>
	printf("left_button_irq_enabled : %lu \n", alt_ic_irq_enabled(LEFT_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID, LEFT_BUTTON_IRQ));
   80b3c:	01400104 	movi	r5,4
   80b40:	0009883a 	mov	r4,zero
   80b44:	008e7ec0 	call	8e7ec <alt_ic_irq_enabled>
   80b48:	100b883a 	mov	r5,r2
   80b4c:	01000274 	movhi	r4,9
   80b50:	21037a04 	addi	r4,r4,3560
   80b54:	00819ac0 	call	819ac <printf>

	//Up button IRQ initialization
	IOWR(UP_BUTTON_BASE,2,0xf); //enable interrupt
   80b58:	00c003c4 	movi	r3,15
   80b5c:	00800434 	movhi	r2,16
   80b60:	10841e04 	addi	r2,r2,4216
   80b64:	10c00035 	stwio	r3,0(r2)
	IOWR(UP_BUTTON_BASE,3,0xf); //clear edge register
   80b68:	00c003c4 	movi	r3,15
   80b6c:	00800434 	movhi	r2,16
   80b70:	10841f04 	addi	r2,r2,4220
   80b74:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(UP_BUTTON_IRQ,(void*)charPosition_ptr,up_button_interrupt_handler);
   80b78:	01800234 	movhi	r6,8
   80b7c:	31825804 	addi	r6,r6,2400
   80b80:	e17fdb17 	ldw	r5,-148(fp)
   80b84:	01000144 	movi	r4,5
   80b88:	008e9280 	call	8e928 <alt_irq_register>
	printf("Up button IRQ : ");
   80b8c:	01000274 	movhi	r4,9
   80b90:	21038204 	addi	r4,r4,3592
   80b94:	00819ac0 	call	819ac <printf>
	printf("up_button_irq_enabled : %lu \n", alt_ic_irq_enabled(UP_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID, UP_BUTTON_IRQ));
   80b98:	01400144 	movi	r5,5
   80b9c:	0009883a 	mov	r4,zero
   80ba0:	008e7ec0 	call	8e7ec <alt_ic_irq_enabled>
   80ba4:	100b883a 	mov	r5,r2
   80ba8:	01000274 	movhi	r4,9
   80bac:	21038704 	addi	r4,r4,3612
   80bb0:	00819ac0 	call	819ac <printf>

	//Down button IRQ initialization
	IOWR(DOWN_BUTTON_BASE,2,0xf); //enable interrupt
   80bb4:	00c003c4 	movi	r3,15
   80bb8:	00800434 	movhi	r2,16
   80bbc:	10841a04 	addi	r2,r2,4200
   80bc0:	10c00035 	stwio	r3,0(r2)
	IOWR(DOWN_BUTTON_BASE,3,0xf); //clear edge register
   80bc4:	00c003c4 	movi	r3,15
   80bc8:	00800434 	movhi	r2,16
   80bcc:	10841b04 	addi	r2,r2,4204
   80bd0:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(DOWN_BUTTON_IRQ,(void*)charPosition_ptr,down_button_interrupt_handler);
   80bd4:	01800234 	movhi	r6,8
   80bd8:	31826a04 	addi	r6,r6,2472
   80bdc:	e17fdb17 	ldw	r5,-148(fp)
   80be0:	01000184 	movi	r4,6
   80be4:	008e9280 	call	8e928 <alt_irq_register>
	printf("Down button IRQ : ");
   80be8:	01000274 	movhi	r4,9
   80bec:	21038f04 	addi	r4,r4,3644
   80bf0:	00819ac0 	call	819ac <printf>
	printf("down_button_irq_enabled : %lu \n", alt_ic_irq_enabled(DOWN_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID, DOWN_BUTTON_IRQ));
   80bf4:	01400184 	movi	r5,6
   80bf8:	0009883a 	mov	r4,zero
   80bfc:	008e7ec0 	call	8e7ec <alt_ic_irq_enabled>
   80c00:	100b883a 	mov	r5,r2
   80c04:	01000274 	movhi	r4,9
   80c08:	21039404 	addi	r4,r4,3664
   80c0c:	00819ac0 	call	819ac <printf>

	//Right button IRQ initialization
	IOWR(RIGHT_BUTTON_BASE,2,0xf); //enable interrupt
   80c10:	00c003c4 	movi	r3,15
   80c14:	00800434 	movhi	r2,16
   80c18:	10841604 	addi	r2,r2,4184
   80c1c:	10c00035 	stwio	r3,0(r2)
	IOWR(RIGHT_BUTTON_BASE,3,0xf); //clear edge register
   80c20:	00c003c4 	movi	r3,15
   80c24:	00800434 	movhi	r2,16
   80c28:	10841704 	addi	r2,r2,4188
   80c2c:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(RIGHT_BUTTON_IRQ,(void*)charPosition_ptr,right_button_interrupt_handler);
   80c30:	01800234 	movhi	r6,8
   80c34:	31827c04 	addi	r6,r6,2544
   80c38:	e17fdb17 	ldw	r5,-148(fp)
   80c3c:	010001c4 	movi	r4,7
   80c40:	008e9280 	call	8e928 <alt_irq_register>
	printf("Right button IRQ : ");
   80c44:	01000274 	movhi	r4,9
   80c48:	21039c04 	addi	r4,r4,3696
   80c4c:	00819ac0 	call	819ac <printf>
	printf("right_button_irq_enabled : %lu \n", alt_ic_irq_enabled(RIGHT_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID, RIGHT_BUTTON_IRQ));
   80c50:	014001c4 	movi	r5,7
   80c54:	0009883a 	mov	r4,zero
   80c58:	008e7ec0 	call	8e7ec <alt_ic_irq_enabled>
   80c5c:	100b883a 	mov	r5,r2
   80c60:	01000274 	movhi	r4,9
   80c64:	2103a104 	addi	r4,r4,3716
   80c68:	00819ac0 	call	819ac <printf>



	long whileCounter = 0;
   80c6c:	e03fda15 	stw	zero,-152(fp)
	while(1)
	{
		display_number(score);
   80c70:	d0a7520b 	ldhu	r2,-25272(gp)
   80c74:	10bfffcc 	andi	r2,r2,65535
   80c78:	1009883a 	mov	r4,r2
   80c7c:	00816000 	call	81600 <display_number>
		whileCounter++;
   80c80:	e0bfda17 	ldw	r2,-152(fp)
   80c84:	10800044 	addi	r2,r2,1
   80c88:	e0bfda15 	stw	r2,-152(fp)


		if (whileCounter > 500000){
   80c8c:	e0ffda17 	ldw	r3,-152(fp)
   80c90:	00800234 	movhi	r2,8
   80c94:	10a84804 	addi	r2,r2,-24288
   80c98:	10fff50e 	bge	r2,r3,80c70 <__alt_data_end+0xfff9f1f0>
			if(food_layer_empty(foodLayer) == 1){
   80c9c:	01000274 	movhi	r4,9
   80ca0:	21131d04 	addi	r4,r4,19572
   80ca4:	00805c40 	call	805c4 <food_layer_empty>
   80ca8:	10803fcc 	andi	r2,r2,255
   80cac:	10800058 	cmpnei	r2,r2,1
   80cb0:	1000111e 	bne	r2,zero,80cf8 <main+0x2c0>
				init_game(charPosition, 60, 60, SOUTH, charBackground, ghostBackground, foodLayer, &score);
   80cb4:	e0ffdc04 	addi	r3,fp,-144
   80cb8:	d0a75204 	addi	r2,gp,-25272
   80cbc:	d8800315 	stw	r2,12(sp)
   80cc0:	00800274 	movhi	r2,9
   80cc4:	10931d04 	addi	r2,r2,19572
   80cc8:	d8800215 	stw	r2,8(sp)
   80ccc:	00800274 	movhi	r2,9
   80cd0:	1084b804 	addi	r2,r2,4832
   80cd4:	d8800115 	stw	r2,4(sp)
   80cd8:	00800274 	movhi	r2,9
   80cdc:	1084a904 	addi	r2,r2,4772
   80ce0:	d8800015 	stw	r2,0(sp)
   80ce4:	01c000c4 	movi	r7,3
   80ce8:	01800f04 	movi	r6,60
   80cec:	01400f04 	movi	r5,60
   80cf0:	1809883a 	mov	r4,r3
   80cf4:	00806300 	call	80630 <init_game>
//			 	foodLayer[11],
//			 	foodLayer[12],
//			 	foodLayer[13],
//			 	foodLayer[14]
//			 );
			whileCounter = 0;
   80cf8:	e03fda15 	stw	zero,-152(fp)
		}
	}
   80cfc:	003fdc06 	br	80c70 <__alt_data_end+0xfff9f1f0>

00080d00 <compute_byte_packet>:
#define MOVEMENT_STEP 5

void compute_byte_packet(position* charPosition)
//computes the binary data sent to the logic given the other arguments (position, orientation,...)
//contained in the structure position
{
   80d00:	defffe04 	addi	sp,sp,-8
   80d04:	df000115 	stw	fp,4(sp)
   80d08:	df000104 	addi	fp,sp,4
   80d0c:	e13fff15 	stw	r4,-4(fp)
	charPosition->bytePacket = (charPosition->charId << 29) + (charPosition->positionX << 17 ) + (charPosition->positionY << 5) + (charPosition->state << 2) + (charPosition->orientation );
   80d10:	e0bfff17 	ldw	r2,-4(fp)
   80d14:	10800003 	ldbu	r2,0(r2)
   80d18:	10803fcc 	andi	r2,r2,255
   80d1c:	1004977a 	slli	r2,r2,29
   80d20:	1007883a 	mov	r3,r2
   80d24:	e0bfff17 	ldw	r2,-4(fp)
   80d28:	10800117 	ldw	r2,4(r2)
   80d2c:	1004947a 	slli	r2,r2,17
   80d30:	1887883a 	add	r3,r3,r2
   80d34:	e0bfff17 	ldw	r2,-4(fp)
   80d38:	10800217 	ldw	r2,8(r2)
   80d3c:	1004917a 	slli	r2,r2,5
   80d40:	1887883a 	add	r3,r3,r2
   80d44:	e0bfff17 	ldw	r2,-4(fp)
   80d48:	10800303 	ldbu	r2,12(r2)
   80d4c:	10803fcc 	andi	r2,r2,255
   80d50:	1085883a 	add	r2,r2,r2
   80d54:	1085883a 	add	r2,r2,r2
   80d58:	1887883a 	add	r3,r3,r2
   80d5c:	e0bfff17 	ldw	r2,-4(fp)
   80d60:	10800417 	ldw	r2,16(r2)
   80d64:	1887883a 	add	r3,r3,r2
   80d68:	e0bfff17 	ldw	r2,-4(fp)
   80d6c:	10c00515 	stw	r3,20(r2)
}
   80d70:	0001883a 	nop
   80d74:	e037883a 	mov	sp,fp
   80d78:	df000017 	ldw	fp,0(sp)
   80d7c:	dec00104 	addi	sp,sp,4
   80d80:	f800283a 	ret

00080d84 <init_collision>:

void init_collision(position* charPosition){
   80d84:	defffe04 	addi	sp,sp,-8
   80d88:	df000115 	stw	fp,4(sp)
   80d8c:	df000104 	addi	fp,sp,4
   80d90:	e13fff15 	stw	r4,-4(fp)
	charPosition->collision.north = 0;
   80d94:	e0bfff17 	ldw	r2,-4(fp)
   80d98:	10000605 	stb	zero,24(r2)
	charPosition->collision.east = 0;
   80d9c:	e0bfff17 	ldw	r2,-4(fp)
   80da0:	10000645 	stb	zero,25(r2)
	charPosition->collision.south = 0;
   80da4:	e0bfff17 	ldw	r2,-4(fp)
   80da8:	10000685 	stb	zero,26(r2)
	charPosition->collision.west = 0;
   80dac:	e0bfff17 	ldw	r2,-4(fp)
   80db0:	100006c5 	stb	zero,27(r2)
}
   80db4:	0001883a 	nop
   80db8:	e037883a 	mov	sp,fp
   80dbc:	df000017 	ldw	fp,0(sp)
   80dc0:	dec00104 	addi	sp,sp,4
   80dc4:	f800283a 	ret

00080dc8 <init_position>:

void init_position(position* charPosition, alt_u8 charId, alt_u32 positionX, alt_u32 positionY, alt_u8 state, orientation orientation, alt_u32 background[15])
//initialize the charPosition with the given arguments
{
   80dc8:	defff904 	addi	sp,sp,-28
   80dcc:	dfc00615 	stw	ra,24(sp)
   80dd0:	df000515 	stw	fp,20(sp)
   80dd4:	df000504 	addi	fp,sp,20
   80dd8:	e13ffb15 	stw	r4,-20(fp)
   80ddc:	2807883a 	mov	r3,r5
   80de0:	e1bffd15 	stw	r6,-12(fp)
   80de4:	e1fffe15 	stw	r7,-8(fp)
   80de8:	e0800217 	ldw	r2,8(fp)
   80dec:	e0fffc05 	stb	r3,-16(fp)
   80df0:	e0bfff05 	stb	r2,-4(fp)
	charPosition->charId = charId ;
   80df4:	e0bffb17 	ldw	r2,-20(fp)
   80df8:	e0fffc03 	ldbu	r3,-16(fp)
   80dfc:	10c00005 	stb	r3,0(r2)
	charPosition->positionX = positionX ;
   80e00:	e0bffb17 	ldw	r2,-20(fp)
   80e04:	e0fffd17 	ldw	r3,-12(fp)
   80e08:	10c00115 	stw	r3,4(r2)
	charPosition->positionY = positionY ;
   80e0c:	e0bffb17 	ldw	r2,-20(fp)
   80e10:	e0fffe17 	ldw	r3,-8(fp)
   80e14:	10c00215 	stw	r3,8(r2)
	charPosition->state = state ;
   80e18:	e0bffb17 	ldw	r2,-20(fp)
   80e1c:	e0ffff03 	ldbu	r3,-4(fp)
   80e20:	10c00305 	stb	r3,12(r2)
	charPosition->orientation = orientation ;
   80e24:	e0bffb17 	ldw	r2,-20(fp)
   80e28:	e0c00317 	ldw	r3,12(fp)
   80e2c:	10c00415 	stw	r3,16(r2)
	charPosition->background = background;
   80e30:	e0bffb17 	ldw	r2,-20(fp)
   80e34:	e0c00417 	ldw	r3,16(fp)
   80e38:	10c00815 	stw	r3,32(r2)
	init_collision(charPosition);
   80e3c:	e13ffb17 	ldw	r4,-20(fp)
   80e40:	0080d840 	call	80d84 <init_collision>
	compute_byte_packet(charPosition);
   80e44:	e13ffb17 	ldw	r4,-20(fp)
   80e48:	0080d000 	call	80d00 <compute_byte_packet>
}
   80e4c:	0001883a 	nop
   80e50:	e037883a 	mov	sp,fp
   80e54:	dfc00117 	ldw	ra,4(sp)
   80e58:	df000017 	ldw	fp,0(sp)
   80e5c:	dec00204 	addi	sp,sp,8
   80e60:	f800283a 	ret

00080e64 <init_ghost_position>:

void init_ghost_position(position* charPosition, alt_u8 charId, alt_u32 positionX, alt_u32 positionY, alt_u8 state, orientation orientation){
   80e64:	defffa04 	addi	sp,sp,-24
   80e68:	df000515 	stw	fp,20(sp)
   80e6c:	df000504 	addi	fp,sp,20
   80e70:	e13ffb15 	stw	r4,-20(fp)
   80e74:	2807883a 	mov	r3,r5
   80e78:	e1bffd15 	stw	r6,-12(fp)
   80e7c:	e1fffe15 	stw	r7,-8(fp)
   80e80:	e0800117 	ldw	r2,4(fp)
   80e84:	e0fffc05 	stb	r3,-16(fp)
   80e88:	e0bfff05 	stb	r2,-4(fp)

}
   80e8c:	0001883a 	nop
   80e90:	e037883a 	mov	sp,fp
   80e94:	df000017 	ldw	fp,0(sp)
   80e98:	dec00104 	addi	sp,sp,4
   80e9c:	f800283a 	ret

00080ea0 <compute_collision>:

void compute_collision(position* charPosition){
   80ea0:	defffd04 	addi	sp,sp,-12
   80ea4:	dfc00215 	stw	ra,8(sp)
   80ea8:	df000115 	stw	fp,4(sp)
   80eac:	df000104 	addi	fp,sp,4
   80eb0:	e13fff15 	stw	r4,-4(fp)
	charPosition->collision.north = 1 -
		(int)
		(
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY - 1, charPosition->background) 	== 0)
   80eb4:	e0bfff17 	ldw	r2,-4(fp)
   80eb8:	10c00117 	ldw	r3,4(r2)
   80ebc:	e0bfff17 	ldw	r2,-4(fp)
   80ec0:	10800217 	ldw	r2,8(r2)
   80ec4:	113fffc4 	addi	r4,r2,-1
   80ec8:	e0bfff17 	ldw	r2,-4(fp)
   80ecc:	10800817 	ldw	r2,32(r2)
   80ed0:	100d883a 	mov	r6,r2
   80ed4:	200b883a 	mov	r5,r4
   80ed8:	1809883a 	mov	r4,r3
   80edc:	00807cc0 	call	807cc <get_block_with_coordinates>

}

void compute_collision(position* charPosition){
	charPosition->collision.north = 1 -
		(int)
   80ee0:	10803fcc 	andi	r2,r2,255
   80ee4:	1000101e 	bne	r2,zero,80f28 <compute_collision+0x88>
		(
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY - 1, charPosition->background) 	== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY - 1, charPosition->background) 	== 0)
   80ee8:	e0bfff17 	ldw	r2,-4(fp)
   80eec:	10800117 	ldw	r2,4(r2)
   80ef0:	10c00ec4 	addi	r3,r2,59
   80ef4:	e0bfff17 	ldw	r2,-4(fp)
   80ef8:	10800217 	ldw	r2,8(r2)
   80efc:	113fffc4 	addi	r4,r2,-1
   80f00:	e0bfff17 	ldw	r2,-4(fp)
   80f04:	10800817 	ldw	r2,32(r2)
   80f08:	100d883a 	mov	r6,r2
   80f0c:	200b883a 	mov	r5,r4
   80f10:	1809883a 	mov	r4,r3
   80f14:	00807cc0 	call	807cc <get_block_with_coordinates>

}

void compute_collision(position* charPosition){
	charPosition->collision.north = 1 -
		(int)
   80f18:	10803fcc 	andi	r2,r2,255
   80f1c:	1000021e 	bne	r2,zero,80f28 <compute_collision+0x88>
   80f20:	00800044 	movi	r2,1
   80f24:	00000106 	br	80f2c <compute_collision+0x8c>
   80f28:	0005883a 	mov	r2,zero
void init_ghost_position(position* charPosition, alt_u8 charId, alt_u32 positionX, alt_u32 positionY, alt_u8 state, orientation orientation){

}

void compute_collision(position* charPosition){
	charPosition->collision.north = 1 -
   80f2c:	1007883a 	mov	r3,r2
   80f30:	00800044 	movi	r2,1
   80f34:	10c5c83a 	sub	r2,r2,r3
   80f38:	1007883a 	mov	r3,r2
   80f3c:	e0bfff17 	ldw	r2,-4(fp)
   80f40:	10c00605 	stb	r3,24(r2)
		);

	charPosition->collision.east = 1 -
		(int)
		(
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY, charPosition->background) 		== 0)
   80f44:	e0bfff17 	ldw	r2,-4(fp)
   80f48:	10800117 	ldw	r2,4(r2)
   80f4c:	10c00f04 	addi	r3,r2,60
   80f50:	e0bfff17 	ldw	r2,-4(fp)
   80f54:	11000217 	ldw	r4,8(r2)
   80f58:	e0bfff17 	ldw	r2,-4(fp)
   80f5c:	10800817 	ldw	r2,32(r2)
   80f60:	100d883a 	mov	r6,r2
   80f64:	200b883a 	mov	r5,r4
   80f68:	1809883a 	mov	r4,r3
   80f6c:	00807cc0 	call	807cc <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY - 1, charPosition->background) 	== 0)
		);

	charPosition->collision.east = 1 -
		(int)
   80f70:	10803fcc 	andi	r2,r2,255
   80f74:	1000101e 	bne	r2,zero,80fb8 <compute_collision+0x118>
		(
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY, charPosition->background) 		== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY + 59, charPosition->background) 	== 0)
   80f78:	e0bfff17 	ldw	r2,-4(fp)
   80f7c:	10800117 	ldw	r2,4(r2)
   80f80:	10c00f04 	addi	r3,r2,60
   80f84:	e0bfff17 	ldw	r2,-4(fp)
   80f88:	10800217 	ldw	r2,8(r2)
   80f8c:	11000ec4 	addi	r4,r2,59
   80f90:	e0bfff17 	ldw	r2,-4(fp)
   80f94:	10800817 	ldw	r2,32(r2)
   80f98:	100d883a 	mov	r6,r2
   80f9c:	200b883a 	mov	r5,r4
   80fa0:	1809883a 	mov	r4,r3
   80fa4:	00807cc0 	call	807cc <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY - 1, charPosition->background) 	== 0)
		);

	charPosition->collision.east = 1 -
		(int)
   80fa8:	10803fcc 	andi	r2,r2,255
   80fac:	1000021e 	bne	r2,zero,80fb8 <compute_collision+0x118>
   80fb0:	00800044 	movi	r2,1
   80fb4:	00000106 	br	80fbc <compute_collision+0x11c>
   80fb8:	0005883a 	mov	r2,zero
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY - 1, charPosition->background) 	== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY - 1, charPosition->background) 	== 0)
		);

	charPosition->collision.east = 1 -
   80fbc:	1007883a 	mov	r3,r2
   80fc0:	00800044 	movi	r2,1
   80fc4:	10c5c83a 	sub	r2,r2,r3
   80fc8:	1007883a 	mov	r3,r2
   80fcc:	e0bfff17 	ldw	r2,-4(fp)
   80fd0:	10c00645 	stb	r3,25(r2)
		);

	charPosition->collision.south = 1 -
		(int)
		(
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY + 60, charPosition->background) 	== 0)
   80fd4:	e0bfff17 	ldw	r2,-4(fp)
   80fd8:	10c00117 	ldw	r3,4(r2)
   80fdc:	e0bfff17 	ldw	r2,-4(fp)
   80fe0:	10800217 	ldw	r2,8(r2)
   80fe4:	11000f04 	addi	r4,r2,60
   80fe8:	e0bfff17 	ldw	r2,-4(fp)
   80fec:	10800817 	ldw	r2,32(r2)
   80ff0:	100d883a 	mov	r6,r2
   80ff4:	200b883a 	mov	r5,r4
   80ff8:	1809883a 	mov	r4,r3
   80ffc:	00807cc0 	call	807cc <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY + 59, charPosition->background) 	== 0)
		);

	charPosition->collision.south = 1 -
		(int)
   81000:	10803fcc 	andi	r2,r2,255
   81004:	1000101e 	bne	r2,zero,81048 <compute_collision+0x1a8>
		(
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY + 60, charPosition->background) 	== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY + 60, charPosition->background) 	== 0)
   81008:	e0bfff17 	ldw	r2,-4(fp)
   8100c:	10800117 	ldw	r2,4(r2)
   81010:	10c00ec4 	addi	r3,r2,59
   81014:	e0bfff17 	ldw	r2,-4(fp)
   81018:	10800217 	ldw	r2,8(r2)
   8101c:	11000f04 	addi	r4,r2,60
   81020:	e0bfff17 	ldw	r2,-4(fp)
   81024:	10800817 	ldw	r2,32(r2)
   81028:	100d883a 	mov	r6,r2
   8102c:	200b883a 	mov	r5,r4
   81030:	1809883a 	mov	r4,r3
   81034:	00807cc0 	call	807cc <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY + 59, charPosition->background) 	== 0)
		);

	charPosition->collision.south = 1 -
		(int)
   81038:	10803fcc 	andi	r2,r2,255
   8103c:	1000021e 	bne	r2,zero,81048 <compute_collision+0x1a8>
   81040:	00800044 	movi	r2,1
   81044:	00000106 	br	8104c <compute_collision+0x1ac>
   81048:	0005883a 	mov	r2,zero
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY, charPosition->background) 		== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY + 59, charPosition->background) 	== 0)
		);

	charPosition->collision.south = 1 -
   8104c:	1007883a 	mov	r3,r2
   81050:	00800044 	movi	r2,1
   81054:	10c5c83a 	sub	r2,r2,r3
   81058:	1007883a 	mov	r3,r2
   8105c:	e0bfff17 	ldw	r2,-4(fp)
   81060:	10c00685 	stb	r3,26(r2)
		);

	charPosition->collision.west = 1 -
		(int)
		(
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY, charPosition->background) 		== 0)
   81064:	e0bfff17 	ldw	r2,-4(fp)
   81068:	10800117 	ldw	r2,4(r2)
   8106c:	10ffffc4 	addi	r3,r2,-1
   81070:	e0bfff17 	ldw	r2,-4(fp)
   81074:	11000217 	ldw	r4,8(r2)
   81078:	e0bfff17 	ldw	r2,-4(fp)
   8107c:	10800817 	ldw	r2,32(r2)
   81080:	100d883a 	mov	r6,r2
   81084:	200b883a 	mov	r5,r4
   81088:	1809883a 	mov	r4,r3
   8108c:	00807cc0 	call	807cc <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY + 60, charPosition->background) 	== 0)
		);

	charPosition->collision.west = 1 -
		(int)
   81090:	10803fcc 	andi	r2,r2,255
   81094:	1000101e 	bne	r2,zero,810d8 <compute_collision+0x238>
		(
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY, charPosition->background) 		== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY + 59, charPosition->background) 	== 0)
   81098:	e0bfff17 	ldw	r2,-4(fp)
   8109c:	10800117 	ldw	r2,4(r2)
   810a0:	10ffffc4 	addi	r3,r2,-1
   810a4:	e0bfff17 	ldw	r2,-4(fp)
   810a8:	10800217 	ldw	r2,8(r2)
   810ac:	11000ec4 	addi	r4,r2,59
   810b0:	e0bfff17 	ldw	r2,-4(fp)
   810b4:	10800817 	ldw	r2,32(r2)
   810b8:	100d883a 	mov	r6,r2
   810bc:	200b883a 	mov	r5,r4
   810c0:	1809883a 	mov	r4,r3
   810c4:	00807cc0 	call	807cc <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY + 60, charPosition->background) 	== 0)
		);

	charPosition->collision.west = 1 -
		(int)
   810c8:	10803fcc 	andi	r2,r2,255
   810cc:	1000021e 	bne	r2,zero,810d8 <compute_collision+0x238>
   810d0:	00800044 	movi	r2,1
   810d4:	00000106 	br	810dc <compute_collision+0x23c>
   810d8:	0005883a 	mov	r2,zero
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY + 60, charPosition->background) 	== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY + 60, charPosition->background) 	== 0)
		);

	charPosition->collision.west = 1 -
   810dc:	1007883a 	mov	r3,r2
   810e0:	00800044 	movi	r2,1
   810e4:	10c5c83a 	sub	r2,r2,r3
   810e8:	1007883a 	mov	r3,r2
   810ec:	e0bfff17 	ldw	r2,-4(fp)
   810f0:	10c006c5 	stb	r3,27(r2)
		(
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY, charPosition->background) 		== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY + 59, charPosition->background) 	== 0)
		);
}
   810f4:	0001883a 	nop
   810f8:	e037883a 	mov	sp,fp
   810fc:	dfc00117 	ldw	ra,4(sp)
   81100:	df000017 	ldw	fp,0(sp)
   81104:	dec00204 	addi	sp,sp,8
   81108:	f800283a 	ret

0008110c <refresh_position>:
void refresh_position(position* charPosition, alt_u8 autoMode)
/*this function computes the new position of the pacman given :
 * - the orientation
 * - the collisions around the character
 */
{
   8110c:	defffa04 	addi	sp,sp,-24
   81110:	dfc00515 	stw	ra,20(sp)
   81114:	df000415 	stw	fp,16(sp)
   81118:	df000404 	addi	fp,sp,16
   8111c:	e13ffe15 	stw	r4,-8(fp)
   81120:	2805883a 	mov	r2,r5
   81124:	e0bfff05 	stb	r2,-4(fp)
	compute_collision(charPosition);
   81128:	e13ffe17 	ldw	r4,-8(fp)
   8112c:	0080ea00 	call	80ea0 <compute_collision>
	alt_u16 step = MOVEMENT_STEP;
   81130:	00800144 	movi	r2,5
   81134:	e0bffc0d 	sth	r2,-16(fp)
	
	srand((unsigned int)time(NULL) + charPosition->positionX);
   81138:	0009883a 	mov	r4,zero
   8113c:	0081bd00 	call	81bd0 <time>
   81140:	1007883a 	mov	r3,r2
   81144:	e0bffe17 	ldw	r2,-8(fp)
   81148:	10800117 	ldw	r2,4(r2)
   8114c:	1885883a 	add	r2,r3,r2
   81150:	1009883a 	mov	r4,r2
   81154:	0081abc0 	call	81abc <srand>
	int randomOrientation = rand() % 5;
   81158:	0081ad40 	call	81ad4 <rand>
   8115c:	01400144 	movi	r5,5
   81160:	1009883a 	mov	r4,r2
   81164:	008184c0 	call	8184c <__modsi3>
   81168:	e0bffd15 	stw	r2,-12(fp)

	switch(charPosition->directionControl)
   8116c:	e0bffe17 	ldw	r2,-8(fp)
   81170:	10800717 	ldw	r2,28(r2)
   81174:	10c000a0 	cmpeqi	r3,r2,2
   81178:	1800211e 	bne	r3,zero,81200 <refresh_position+0xf4>
   8117c:	10c000e8 	cmpgeui	r3,r2,3
   81180:	1800031e 	bne	r3,zero,81190 <refresh_position+0x84>
   81184:	10800060 	cmpeqi	r2,r2,1
   81188:	1000061e 	bne	r2,zero,811a4 <refresh_position+0x98>
   8118c:	00006006 	br	81310 <refresh_position+0x204>
   81190:	10c000e0 	cmpeqi	r3,r2,3
   81194:	1800311e 	bne	r3,zero,8125c <refresh_position+0x150>
   81198:	10800120 	cmpeqi	r2,r2,4
   8119c:	1000461e 	bne	r2,zero,812b8 <refresh_position+0x1ac>
   811a0:	00005b06 	br	81310 <refresh_position+0x204>
	{
		case UP:
			if(charPosition->collision.north == 0){
   811a4:	e0bffe17 	ldw	r2,-8(fp)
   811a8:	10800603 	ldbu	r2,24(r2)
   811ac:	10803fcc 	andi	r2,r2,255
   811b0:	10000c1e 	bne	r2,zero,811e4 <refresh_position+0xd8>
				charPosition->orientation = NORTH;
   811b4:	e0bffe17 	ldw	r2,-8(fp)
   811b8:	00c00044 	movi	r3,1
   811bc:	10c00415 	stw	r3,16(r2)
				charPosition->positionY = charPosition->positionY - step;
   811c0:	e0bffe17 	ldw	r2,-8(fp)
   811c4:	10c00217 	ldw	r3,8(r2)
   811c8:	e0bffc0b 	ldhu	r2,-16(fp)
   811cc:	1887c83a 	sub	r3,r3,r2
   811d0:	e0bffe17 	ldw	r2,-8(fp)
   811d4:	10c00215 	stw	r3,8(r2)
				charPosition->directionControl = NONE;
   811d8:	e0bffe17 	ldw	r2,-8(fp)
   811dc:	10000715 	stw	zero,28(r2)
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
			}
		break;
   811e0:	00005206 	br	8132c <refresh_position+0x220>
			if(charPosition->collision.north == 0){
				charPosition->orientation = NORTH;
				charPosition->positionY = charPosition->positionY - step;
				charPosition->directionControl = NONE;
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
   811e4:	e0bffc0b 	ldhu	r2,-16(fp)
   811e8:	e0ffff03 	ldbu	r3,-4(fp)
   811ec:	180d883a 	mov	r6,r3
   811f0:	100b883a 	mov	r5,r2
   811f4:	e13ffe17 	ldw	r4,-8(fp)
   811f8:	008134c0 	call	8134c <refresh_position_keepGoing>
			}
		break;
   811fc:	00004b06 	br	8132c <refresh_position+0x220>
		case RIGHT:
			if(charPosition->collision.east == 0){
   81200:	e0bffe17 	ldw	r2,-8(fp)
   81204:	10800643 	ldbu	r2,25(r2)
   81208:	10803fcc 	andi	r2,r2,255
   8120c:	10000c1e 	bne	r2,zero,81240 <refresh_position+0x134>
				charPosition->orientation = EAST;
   81210:	e0bffe17 	ldw	r2,-8(fp)
   81214:	00c00084 	movi	r3,2
   81218:	10c00415 	stw	r3,16(r2)
				charPosition->positionX = charPosition->positionX + step;
   8121c:	e0bffe17 	ldw	r2,-8(fp)
   81220:	10c00117 	ldw	r3,4(r2)
   81224:	e0bffc0b 	ldhu	r2,-16(fp)
   81228:	1887883a 	add	r3,r3,r2
   8122c:	e0bffe17 	ldw	r2,-8(fp)
   81230:	10c00115 	stw	r3,4(r2)
				charPosition->directionControl = NONE;
   81234:	e0bffe17 	ldw	r2,-8(fp)
   81238:	10000715 	stw	zero,28(r2)
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
			}
		break;
   8123c:	00003b06 	br	8132c <refresh_position+0x220>
			if(charPosition->collision.east == 0){
				charPosition->orientation = EAST;
				charPosition->positionX = charPosition->positionX + step;
				charPosition->directionControl = NONE;
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
   81240:	e0bffc0b 	ldhu	r2,-16(fp)
   81244:	e0ffff03 	ldbu	r3,-4(fp)
   81248:	180d883a 	mov	r6,r3
   8124c:	100b883a 	mov	r5,r2
   81250:	e13ffe17 	ldw	r4,-8(fp)
   81254:	008134c0 	call	8134c <refresh_position_keepGoing>
			}
		break;
   81258:	00003406 	br	8132c <refresh_position+0x220>
		case DOWN:
			if(charPosition->collision.south == 0){
   8125c:	e0bffe17 	ldw	r2,-8(fp)
   81260:	10800683 	ldbu	r2,26(r2)
   81264:	10803fcc 	andi	r2,r2,255
   81268:	10000c1e 	bne	r2,zero,8129c <refresh_position+0x190>
				charPosition->orientation = SOUTH;
   8126c:	e0bffe17 	ldw	r2,-8(fp)
   81270:	00c000c4 	movi	r3,3
   81274:	10c00415 	stw	r3,16(r2)
				charPosition->positionY = charPosition->positionY + step;
   81278:	e0bffe17 	ldw	r2,-8(fp)
   8127c:	10c00217 	ldw	r3,8(r2)
   81280:	e0bffc0b 	ldhu	r2,-16(fp)
   81284:	1887883a 	add	r3,r3,r2
   81288:	e0bffe17 	ldw	r2,-8(fp)
   8128c:	10c00215 	stw	r3,8(r2)
				charPosition->directionControl = NONE;
   81290:	e0bffe17 	ldw	r2,-8(fp)
   81294:	10000715 	stw	zero,28(r2)
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
			}
		break;
   81298:	00002406 	br	8132c <refresh_position+0x220>
			if(charPosition->collision.south == 0){
				charPosition->orientation = SOUTH;
				charPosition->positionY = charPosition->positionY + step;
				charPosition->directionControl = NONE;
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
   8129c:	e0bffc0b 	ldhu	r2,-16(fp)
   812a0:	e0ffff03 	ldbu	r3,-4(fp)
   812a4:	180d883a 	mov	r6,r3
   812a8:	100b883a 	mov	r5,r2
   812ac:	e13ffe17 	ldw	r4,-8(fp)
   812b0:	008134c0 	call	8134c <refresh_position_keepGoing>
			}
		break;
   812b4:	00001d06 	br	8132c <refresh_position+0x220>
		case LEFT:
			if(charPosition->collision.west == 0){
   812b8:	e0bffe17 	ldw	r2,-8(fp)
   812bc:	108006c3 	ldbu	r2,27(r2)
   812c0:	10803fcc 	andi	r2,r2,255
   812c4:	10000b1e 	bne	r2,zero,812f4 <refresh_position+0x1e8>
				charPosition->orientation = WEST;
   812c8:	e0bffe17 	ldw	r2,-8(fp)
   812cc:	10000415 	stw	zero,16(r2)
				charPosition->positionX = charPosition->positionX - step;
   812d0:	e0bffe17 	ldw	r2,-8(fp)
   812d4:	10c00117 	ldw	r3,4(r2)
   812d8:	e0bffc0b 	ldhu	r2,-16(fp)
   812dc:	1887c83a 	sub	r3,r3,r2
   812e0:	e0bffe17 	ldw	r2,-8(fp)
   812e4:	10c00115 	stw	r3,4(r2)
				charPosition->directionControl = NONE;
   812e8:	e0bffe17 	ldw	r2,-8(fp)
   812ec:	10000715 	stw	zero,28(r2)
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
			}
		break;
   812f0:	00000e06 	br	8132c <refresh_position+0x220>
			if(charPosition->collision.west == 0){
				charPosition->orientation = WEST;
				charPosition->positionX = charPosition->positionX - step;
				charPosition->directionControl = NONE;
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
   812f4:	e0bffc0b 	ldhu	r2,-16(fp)
   812f8:	e0ffff03 	ldbu	r3,-4(fp)
   812fc:	180d883a 	mov	r6,r3
   81300:	100b883a 	mov	r5,r2
   81304:	e13ffe17 	ldw	r4,-8(fp)
   81308:	008134c0 	call	8134c <refresh_position_keepGoing>
			}
		break;
   8130c:	00000706 	br	8132c <refresh_position+0x220>
		default :
			refresh_position_keepGoing(charPosition, step, autoMode);
   81310:	e0bffc0b 	ldhu	r2,-16(fp)
   81314:	e0ffff03 	ldbu	r3,-4(fp)
   81318:	180d883a 	mov	r6,r3
   8131c:	100b883a 	mov	r5,r2
   81320:	e13ffe17 	ldw	r4,-8(fp)
   81324:	008134c0 	call	8134c <refresh_position_keepGoing>
		break;
   81328:	0001883a 	nop
	}
	compute_byte_packet(charPosition);
   8132c:	e13ffe17 	ldw	r4,-8(fp)
   81330:	0080d000 	call	80d00 <compute_byte_packet>
}
   81334:	0001883a 	nop
   81338:	e037883a 	mov	sp,fp
   8133c:	dfc00117 	ldw	ra,4(sp)
   81340:	df000017 	ldw	fp,0(sp)
   81344:	dec00204 	addi	sp,sp,8
   81348:	f800283a 	ret

0008134c <refresh_position_keepGoing>:

void refresh_position_keepGoing(position* charPosition, alt_u16 step, alt_u8 autoMode){
   8134c:	defffb04 	addi	sp,sp,-20
   81350:	dfc00415 	stw	ra,16(sp)
   81354:	df000315 	stw	fp,12(sp)
   81358:	df000304 	addi	fp,sp,12
   8135c:	e13ffd15 	stw	r4,-12(fp)
   81360:	2807883a 	mov	r3,r5
   81364:	3005883a 	mov	r2,r6
   81368:	e0fffe0d 	sth	r3,-8(fp)
   8136c:	e0bfff05 	stb	r2,-4(fp)
	switch(charPosition->orientation)
   81370:	e0bffd17 	ldw	r2,-12(fp)
   81374:	10800417 	ldw	r2,16(r2)
   81378:	10c00060 	cmpeqi	r3,r2,1
   8137c:	1800061e 	bne	r3,zero,81398 <refresh_position_keepGoing+0x4c>
   81380:	00803e2e 	bgeu	zero,r2,8147c <refresh_position_keepGoing+0x130>
   81384:	10c000a0 	cmpeqi	r3,r2,2
   81388:	1800161e 	bne	r3,zero,813e4 <refresh_position_keepGoing+0x98>
   8138c:	108000e0 	cmpeqi	r2,r2,3
   81390:	1000271e 	bne	r2,zero,81430 <refresh_position_keepGoing+0xe4>
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
	}
}
   81394:	00005306 	br	814e4 <refresh_position_keepGoing+0x198>

void refresh_position_keepGoing(position* charPosition, alt_u16 step, alt_u8 autoMode){
	switch(charPosition->orientation)
	{
		case NORTH :
			if (charPosition->collision.north == 0){
   81398:	e0bffd17 	ldw	r2,-12(fp)
   8139c:	10800603 	ldbu	r2,24(r2)
   813a0:	10803fcc 	andi	r2,r2,255
   813a4:	1000071e 	bne	r2,zero,813c4 <refresh_position_keepGoing+0x78>
				charPosition->positionY = charPosition->positionY - step;	
   813a8:	e0bffd17 	ldw	r2,-12(fp)
   813ac:	10c00217 	ldw	r3,8(r2)
   813b0:	e0bffe0b 	ldhu	r2,-8(fp)
   813b4:	1887c83a 	sub	r3,r3,r2
   813b8:	e0bffd17 	ldw	r2,-12(fp)
   813bc:	10c00215 	stw	r3,8(r2)
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   813c0:	00004106 	br	814c8 <refresh_position_keepGoing+0x17c>
	switch(charPosition->orientation)
	{
		case NORTH :
			if (charPosition->collision.north == 0){
				charPosition->positionY = charPosition->positionY - step;	
			} else if (autoMode == 1) {
   813c4:	e0bfff03 	ldbu	r2,-4(fp)
   813c8:	10800058 	cmpnei	r2,r2,1
   813cc:	10003e1e 	bne	r2,zero,814c8 <refresh_position_keepGoing+0x17c>
				randomDirection(charPosition, step);
   813d0:	e0bffe0b 	ldhu	r2,-8(fp)
   813d4:	100b883a 	mov	r5,r2
   813d8:	e13ffd17 	ldw	r4,-12(fp)
   813dc:	00814fc0 	call	814fc <randomDirection>
			} 
		break;
   813e0:	00003906 	br	814c8 <refresh_position_keepGoing+0x17c>
		case EAST :
			if (charPosition->collision.east == 0){
   813e4:	e0bffd17 	ldw	r2,-12(fp)
   813e8:	10800643 	ldbu	r2,25(r2)
   813ec:	10803fcc 	andi	r2,r2,255
   813f0:	1000071e 	bne	r2,zero,81410 <refresh_position_keepGoing+0xc4>
				charPosition->positionX = charPosition->positionX + step;
   813f4:	e0bffd17 	ldw	r2,-12(fp)
   813f8:	10c00117 	ldw	r3,4(r2)
   813fc:	e0bffe0b 	ldhu	r2,-8(fp)
   81400:	1887883a 	add	r3,r3,r2
   81404:	e0bffd17 	ldw	r2,-12(fp)
   81408:	10c00115 	stw	r3,4(r2)
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   8140c:	00003006 	br	814d0 <refresh_position_keepGoing+0x184>
			} 
		break;
		case EAST :
			if (charPosition->collision.east == 0){
				charPosition->positionX = charPosition->positionX + step;
			} else if (autoMode == 1) {
   81410:	e0bfff03 	ldbu	r2,-4(fp)
   81414:	10800058 	cmpnei	r2,r2,1
   81418:	10002d1e 	bne	r2,zero,814d0 <refresh_position_keepGoing+0x184>
				randomDirection(charPosition, step);
   8141c:	e0bffe0b 	ldhu	r2,-8(fp)
   81420:	100b883a 	mov	r5,r2
   81424:	e13ffd17 	ldw	r4,-12(fp)
   81428:	00814fc0 	call	814fc <randomDirection>
			} 
		break;
   8142c:	00002806 	br	814d0 <refresh_position_keepGoing+0x184>
		case SOUTH :
			if (charPosition->collision.south == 0){
   81430:	e0bffd17 	ldw	r2,-12(fp)
   81434:	10800683 	ldbu	r2,26(r2)
   81438:	10803fcc 	andi	r2,r2,255
   8143c:	1000071e 	bne	r2,zero,8145c <refresh_position_keepGoing+0x110>
				charPosition->positionY = charPosition->positionY + step;
   81440:	e0bffd17 	ldw	r2,-12(fp)
   81444:	10c00217 	ldw	r3,8(r2)
   81448:	e0bffe0b 	ldhu	r2,-8(fp)
   8144c:	1887883a 	add	r3,r3,r2
   81450:	e0bffd17 	ldw	r2,-12(fp)
   81454:	10c00215 	stw	r3,8(r2)
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   81458:	00001f06 	br	814d8 <refresh_position_keepGoing+0x18c>
			} 
		break;
		case SOUTH :
			if (charPosition->collision.south == 0){
				charPosition->positionY = charPosition->positionY + step;
			} else if (autoMode == 1) {
   8145c:	e0bfff03 	ldbu	r2,-4(fp)
   81460:	10800058 	cmpnei	r2,r2,1
   81464:	10001c1e 	bne	r2,zero,814d8 <refresh_position_keepGoing+0x18c>
				randomDirection(charPosition, step);
   81468:	e0bffe0b 	ldhu	r2,-8(fp)
   8146c:	100b883a 	mov	r5,r2
   81470:	e13ffd17 	ldw	r4,-12(fp)
   81474:	00814fc0 	call	814fc <randomDirection>
			} 
		break;
   81478:	00001706 	br	814d8 <refresh_position_keepGoing+0x18c>
		case WEST :
			if (charPosition->collision.west == 0){
   8147c:	e0bffd17 	ldw	r2,-12(fp)
   81480:	108006c3 	ldbu	r2,27(r2)
   81484:	10803fcc 	andi	r2,r2,255
   81488:	1000071e 	bne	r2,zero,814a8 <refresh_position_keepGoing+0x15c>
				charPosition->positionX = charPosition->positionX - step;
   8148c:	e0bffd17 	ldw	r2,-12(fp)
   81490:	10c00117 	ldw	r3,4(r2)
   81494:	e0bffe0b 	ldhu	r2,-8(fp)
   81498:	1887c83a 	sub	r3,r3,r2
   8149c:	e0bffd17 	ldw	r2,-12(fp)
   814a0:	10c00115 	stw	r3,4(r2)
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   814a4:	00000e06 	br	814e0 <refresh_position_keepGoing+0x194>
			} 
		break;
		case WEST :
			if (charPosition->collision.west == 0){
				charPosition->positionX = charPosition->positionX - step;
			} else if (autoMode == 1) {
   814a8:	e0bfff03 	ldbu	r2,-4(fp)
   814ac:	10800058 	cmpnei	r2,r2,1
   814b0:	10000b1e 	bne	r2,zero,814e0 <refresh_position_keepGoing+0x194>
				randomDirection(charPosition, step);
   814b4:	e0bffe0b 	ldhu	r2,-8(fp)
   814b8:	100b883a 	mov	r5,r2
   814bc:	e13ffd17 	ldw	r4,-12(fp)
   814c0:	00814fc0 	call	814fc <randomDirection>
			} 
		break;
   814c4:	00000606 	br	814e0 <refresh_position_keepGoing+0x194>
			if (charPosition->collision.north == 0){
				charPosition->positionY = charPosition->positionY - step;	
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   814c8:	0001883a 	nop
   814cc:	00000506 	br	814e4 <refresh_position_keepGoing+0x198>
			if (charPosition->collision.east == 0){
				charPosition->positionX = charPosition->positionX + step;
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   814d0:	0001883a 	nop
   814d4:	00000306 	br	814e4 <refresh_position_keepGoing+0x198>
			if (charPosition->collision.south == 0){
				charPosition->positionY = charPosition->positionY + step;
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   814d8:	0001883a 	nop
   814dc:	00000106 	br	814e4 <refresh_position_keepGoing+0x198>
			if (charPosition->collision.west == 0){
				charPosition->positionX = charPosition->positionX - step;
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   814e0:	0001883a 	nop
	}
}
   814e4:	0001883a 	nop
   814e8:	e037883a 	mov	sp,fp
   814ec:	dfc00117 	ldw	ra,4(sp)
   814f0:	df000017 	ldw	fp,0(sp)
   814f4:	dec00204 	addi	sp,sp,8
   814f8:	f800283a 	ret

000814fc <randomDirection>:

//this function should be removed once the button controls are working
void randomDirection(position* charPosition, alt_u16 step){
   814fc:	defffd04 	addi	sp,sp,-12
   81500:	df000215 	stw	fp,8(sp)
   81504:	df000204 	addi	fp,sp,8
   81508:	e13ffe15 	stw	r4,-8(fp)
   8150c:	2805883a 	mov	r2,r5
   81510:	e0bfff0d 	sth	r2,-4(fp)
	if (charPosition->collision.north == 0){
   81514:	e0bffe17 	ldw	r2,-8(fp)
   81518:	10800603 	ldbu	r2,24(r2)
   8151c:	10803fcc 	andi	r2,r2,255
   81520:	10000a1e 	bne	r2,zero,8154c <randomDirection+0x50>
		charPosition->orientation = NORTH;
   81524:	e0bffe17 	ldw	r2,-8(fp)
   81528:	00c00044 	movi	r3,1
   8152c:	10c00415 	stw	r3,16(r2)
		charPosition->positionY = charPosition->positionY - step;				
   81530:	e0bffe17 	ldw	r2,-8(fp)
   81534:	10c00217 	ldw	r3,8(r2)
   81538:	e0bfff0b 	ldhu	r2,-4(fp)
   8153c:	1887c83a 	sub	r3,r3,r2
   81540:	e0bffe17 	ldw	r2,-8(fp)
   81544:	10c00215 	stw	r3,8(r2)
	}	
	else if (charPosition->collision.west == 0){
		charPosition->orientation = WEST;
		charPosition->positionX = charPosition->positionX - step;		
	}
}
   81548:	00002806 	br	815ec <randomDirection+0xf0>
void randomDirection(position* charPosition, alt_u16 step){
	if (charPosition->collision.north == 0){
		charPosition->orientation = NORTH;
		charPosition->positionY = charPosition->positionY - step;				
	}	
	else if (charPosition->collision.east == 0){	
   8154c:	e0bffe17 	ldw	r2,-8(fp)
   81550:	10800643 	ldbu	r2,25(r2)
   81554:	10803fcc 	andi	r2,r2,255
   81558:	10000a1e 	bne	r2,zero,81584 <randomDirection+0x88>
		charPosition->orientation = EAST;
   8155c:	e0bffe17 	ldw	r2,-8(fp)
   81560:	00c00084 	movi	r3,2
   81564:	10c00415 	stw	r3,16(r2)
		charPosition->positionX = charPosition->positionX + step;		
   81568:	e0bffe17 	ldw	r2,-8(fp)
   8156c:	10c00117 	ldw	r3,4(r2)
   81570:	e0bfff0b 	ldhu	r2,-4(fp)
   81574:	1887883a 	add	r3,r3,r2
   81578:	e0bffe17 	ldw	r2,-8(fp)
   8157c:	10c00115 	stw	r3,4(r2)
	}	
	else if (charPosition->collision.west == 0){
		charPosition->orientation = WEST;
		charPosition->positionX = charPosition->positionX - step;		
	}
}
   81580:	00001a06 	br	815ec <randomDirection+0xf0>
	}	
	else if (charPosition->collision.east == 0){	
		charPosition->orientation = EAST;
		charPosition->positionX = charPosition->positionX + step;		
	}	
	else if (charPosition->collision.south == 0){
   81584:	e0bffe17 	ldw	r2,-8(fp)
   81588:	10800683 	ldbu	r2,26(r2)
   8158c:	10803fcc 	andi	r2,r2,255
   81590:	10000a1e 	bne	r2,zero,815bc <randomDirection+0xc0>
		charPosition->orientation = SOUTH;
   81594:	e0bffe17 	ldw	r2,-8(fp)
   81598:	00c000c4 	movi	r3,3
   8159c:	10c00415 	stw	r3,16(r2)
		charPosition->positionY = charPosition->positionY + step;				
   815a0:	e0bffe17 	ldw	r2,-8(fp)
   815a4:	10c00217 	ldw	r3,8(r2)
   815a8:	e0bfff0b 	ldhu	r2,-4(fp)
   815ac:	1887883a 	add	r3,r3,r2
   815b0:	e0bffe17 	ldw	r2,-8(fp)
   815b4:	10c00215 	stw	r3,8(r2)
	}	
	else if (charPosition->collision.west == 0){
		charPosition->orientation = WEST;
		charPosition->positionX = charPosition->positionX - step;		
	}
}
   815b8:	00000c06 	br	815ec <randomDirection+0xf0>
	}	
	else if (charPosition->collision.south == 0){
		charPosition->orientation = SOUTH;
		charPosition->positionY = charPosition->positionY + step;				
	}	
	else if (charPosition->collision.west == 0){
   815bc:	e0bffe17 	ldw	r2,-8(fp)
   815c0:	108006c3 	ldbu	r2,27(r2)
   815c4:	10803fcc 	andi	r2,r2,255
   815c8:	1000081e 	bne	r2,zero,815ec <randomDirection+0xf0>
		charPosition->orientation = WEST;
   815cc:	e0bffe17 	ldw	r2,-8(fp)
   815d0:	10000415 	stw	zero,16(r2)
		charPosition->positionX = charPosition->positionX - step;		
   815d4:	e0bffe17 	ldw	r2,-8(fp)
   815d8:	10c00117 	ldw	r3,4(r2)
   815dc:	e0bfff0b 	ldhu	r2,-4(fp)
   815e0:	1887c83a 	sub	r3,r3,r2
   815e4:	e0bffe17 	ldw	r2,-8(fp)
   815e8:	10c00115 	stw	r3,4(r2)
	}
}
   815ec:	0001883a 	nop
   815f0:	e037883a 	mov	sp,fp
   815f4:	df000017 	ldw	fp,0(sp)
   815f8:	dec00104 	addi	sp,sp,4
   815fc:	f800283a 	ret

00081600 <display_number>:
 *      Author: berges_cor
 */

#include "segments_display.h"

void display_number(alt_u16 number) {
   81600:	defffb04 	addi	sp,sp,-20
   81604:	dfc00415 	stw	ra,16(sp)
   81608:	df000315 	stw	fp,12(sp)
   8160c:	dc000215 	stw	r16,8(sp)
   81610:	df000304 	addi	fp,sp,12
   81614:	2005883a 	mov	r2,r4
   81618:	e0bffe0d 	sth	r2,-8(fp)
 	alt_u32 mask = 0;
   8161c:	e03ffd15 	stw	zero,-12(fp)
	if (number/100 != 0) {
   81620:	e0bffe0b 	ldhu	r2,-8(fp)
   81624:	10801930 	cmpltui	r2,r2,100
   81628:	10002b1e 	bne	r2,zero,816d8 <display_number+0xd8>
		mask |= (char_array_2[number/100] << 14) | 
   8162c:	e0bffe0b 	ldhu	r2,-8(fp)
   81630:	01401904 	movi	r5,100
   81634:	1009883a 	mov	r4,r2
   81638:	00818c00 	call	818c0 <__udivsi3>
   8163c:	10ffffcc 	andi	r3,r2,65535
   81640:	00800274 	movhi	r2,9
   81644:	1084ec84 	addi	r2,r2,5042
   81648:	10c5883a 	add	r2,r2,r3
   8164c:	10800003 	ldbu	r2,0(r2)
   81650:	10803fcc 	andi	r2,r2,255
   81654:	102093ba 	slli	r16,r2,14
				(char_array_1[(number%100)/10] << 7) | 
   81658:	e0bffe0b 	ldhu	r2,-8(fp)
   8165c:	01401904 	movi	r5,100
   81660:	1009883a 	mov	r4,r2
   81664:	00819240 	call	81924 <__umodsi3>
   81668:	10bfffcc 	andi	r2,r2,65535
   8166c:	01400284 	movi	r5,10
   81670:	1009883a 	mov	r4,r2
   81674:	00818c00 	call	818c0 <__udivsi3>
   81678:	10ffffcc 	andi	r3,r2,65535
   8167c:	00800274 	movhi	r2,9
   81680:	1084ea04 	addi	r2,r2,5032
   81684:	10c5883a 	add	r2,r2,r3
   81688:	10800003 	ldbu	r2,0(r2)
   8168c:	10803fcc 	andi	r2,r2,255
   81690:	100491fa 	slli	r2,r2,7
#include "segments_display.h"

void display_number(alt_u16 number) {
 	alt_u32 mask = 0;
	if (number/100 != 0) {
		mask |= (char_array_2[number/100] << 14) | 
   81694:	80a0b03a 	or	r16,r16,r2
				(char_array_1[(number%100)/10] << 7) | 
				(char_array_1[number%10]);
   81698:	e0bffe0b 	ldhu	r2,-8(fp)
   8169c:	01400284 	movi	r5,10
   816a0:	1009883a 	mov	r4,r2
   816a4:	00819240 	call	81924 <__umodsi3>
   816a8:	10ffffcc 	andi	r3,r2,65535
   816ac:	00800274 	movhi	r2,9
   816b0:	1084ea04 	addi	r2,r2,5032
   816b4:	10c5883a 	add	r2,r2,r3
   816b8:	10800003 	ldbu	r2,0(r2)

void display_number(alt_u16 number) {
 	alt_u32 mask = 0;
	if (number/100 != 0) {
		mask |= (char_array_2[number/100] << 14) | 
				(char_array_1[(number%100)/10] << 7) | 
   816bc:	10803fcc 	andi	r2,r2,255
   816c0:	8084b03a 	or	r2,r16,r2
#include "segments_display.h"

void display_number(alt_u16 number) {
 	alt_u32 mask = 0;
	if (number/100 != 0) {
		mask |= (char_array_2[number/100] << 14) | 
   816c4:	1007883a 	mov	r3,r2
   816c8:	e0bffd17 	ldw	r2,-12(fp)
   816cc:	10c4b03a 	or	r2,r2,r3
   816d0:	e0bffd15 	stw	r2,-12(fp)
   816d4:	00002f06 	br	81794 <display_number+0x194>
				(char_array_1[(number%100)/10] << 7) | 
				(char_array_1[number%10]);
	} else if (number/10 != 0) {
   816d8:	e0bffe0b 	ldhu	r2,-8(fp)
   816dc:	108002b0 	cmpltui	r2,r2,10
   816e0:	10001f1e 	bne	r2,zero,81760 <display_number+0x160>
		mask |= (char_array_1[(number%100)/10] << 7) | 
   816e4:	e0bffe0b 	ldhu	r2,-8(fp)
   816e8:	01401904 	movi	r5,100
   816ec:	1009883a 	mov	r4,r2
   816f0:	00819240 	call	81924 <__umodsi3>
   816f4:	10bfffcc 	andi	r2,r2,65535
   816f8:	01400284 	movi	r5,10
   816fc:	1009883a 	mov	r4,r2
   81700:	00818c00 	call	818c0 <__udivsi3>
   81704:	10ffffcc 	andi	r3,r2,65535
   81708:	00800274 	movhi	r2,9
   8170c:	1084ea04 	addi	r2,r2,5032
   81710:	10c5883a 	add	r2,r2,r3
   81714:	10800003 	ldbu	r2,0(r2)
   81718:	10803fcc 	andi	r2,r2,255
   8171c:	102091fa 	slli	r16,r2,7
				(char_array_1[number%10]);
   81720:	e0bffe0b 	ldhu	r2,-8(fp)
   81724:	01400284 	movi	r5,10
   81728:	1009883a 	mov	r4,r2
   8172c:	00819240 	call	81924 <__umodsi3>
   81730:	10ffffcc 	andi	r3,r2,65535
   81734:	00800274 	movhi	r2,9
   81738:	1084ea04 	addi	r2,r2,5032
   8173c:	10c5883a 	add	r2,r2,r3
   81740:	10800003 	ldbu	r2,0(r2)
	if (number/100 != 0) {
		mask |= (char_array_2[number/100] << 14) | 
				(char_array_1[(number%100)/10] << 7) | 
				(char_array_1[number%10]);
	} else if (number/10 != 0) {
		mask |= (char_array_1[(number%100)/10] << 7) | 
   81744:	10803fcc 	andi	r2,r2,255
   81748:	8084b03a 	or	r2,r16,r2
   8174c:	1007883a 	mov	r3,r2
   81750:	e0bffd17 	ldw	r2,-12(fp)
   81754:	10c4b03a 	or	r2,r2,r3
   81758:	e0bffd15 	stw	r2,-12(fp)
   8175c:	00000d06 	br	81794 <display_number+0x194>
				(char_array_1[number%10]);
	} else {
		mask |= (char_array_1[number%10]);
   81760:	e0bffe0b 	ldhu	r2,-8(fp)
   81764:	01400284 	movi	r5,10
   81768:	1009883a 	mov	r4,r2
   8176c:	00819240 	call	81924 <__umodsi3>
   81770:	10ffffcc 	andi	r3,r2,65535
   81774:	00800274 	movhi	r2,9
   81778:	1084ea04 	addi	r2,r2,5032
   8177c:	10c5883a 	add	r2,r2,r3
   81780:	10800003 	ldbu	r2,0(r2)
   81784:	10803fcc 	andi	r2,r2,255
   81788:	e0fffd17 	ldw	r3,-12(fp)
   8178c:	1884b03a 	or	r2,r3,r2
   81790:	e0bffd15 	stw	r2,-12(fp)
	}
	IOWR_32DIRECT(SEGMENTS_DISPLAY_BASE, 0, ~mask);
   81794:	e0bffd17 	ldw	r2,-12(fp)
   81798:	0084303a 	nor	r2,zero,r2
   8179c:	1007883a 	mov	r3,r2
   817a0:	00800434 	movhi	r2,16
   817a4:	10840804 	addi	r2,r2,4128
   817a8:	10c00035 	stwio	r3,0(r2)
}
   817ac:	0001883a 	nop
   817b0:	e6ffff04 	addi	sp,fp,-4
   817b4:	dfc00217 	ldw	ra,8(sp)
   817b8:	df000117 	ldw	fp,4(sp)
   817bc:	dc000017 	ldw	r16,0(sp)
   817c0:	dec00304 	addi	sp,sp,12
   817c4:	f800283a 	ret

000817c8 <__divsi3>:
   817c8:	20001b16 	blt	r4,zero,81838 <__divsi3+0x70>
   817cc:	000f883a 	mov	r7,zero
   817d0:	28001616 	blt	r5,zero,8182c <__divsi3+0x64>
   817d4:	200d883a 	mov	r6,r4
   817d8:	29001a2e 	bgeu	r5,r4,81844 <__divsi3+0x7c>
   817dc:	00800804 	movi	r2,32
   817e0:	00c00044 	movi	r3,1
   817e4:	00000106 	br	817ec <__divsi3+0x24>
   817e8:	10000d26 	beq	r2,zero,81820 <__divsi3+0x58>
   817ec:	294b883a 	add	r5,r5,r5
   817f0:	10bfffc4 	addi	r2,r2,-1
   817f4:	18c7883a 	add	r3,r3,r3
   817f8:	293ffb36 	bltu	r5,r4,817e8 <__alt_data_end+0xfff9fd68>
   817fc:	0005883a 	mov	r2,zero
   81800:	18000726 	beq	r3,zero,81820 <__divsi3+0x58>
   81804:	0005883a 	mov	r2,zero
   81808:	31400236 	bltu	r6,r5,81814 <__divsi3+0x4c>
   8180c:	314dc83a 	sub	r6,r6,r5
   81810:	10c4b03a 	or	r2,r2,r3
   81814:	1806d07a 	srli	r3,r3,1
   81818:	280ad07a 	srli	r5,r5,1
   8181c:	183ffa1e 	bne	r3,zero,81808 <__alt_data_end+0xfff9fd88>
   81820:	38000126 	beq	r7,zero,81828 <__divsi3+0x60>
   81824:	0085c83a 	sub	r2,zero,r2
   81828:	f800283a 	ret
   8182c:	014bc83a 	sub	r5,zero,r5
   81830:	39c0005c 	xori	r7,r7,1
   81834:	003fe706 	br	817d4 <__alt_data_end+0xfff9fd54>
   81838:	0109c83a 	sub	r4,zero,r4
   8183c:	01c00044 	movi	r7,1
   81840:	003fe306 	br	817d0 <__alt_data_end+0xfff9fd50>
   81844:	00c00044 	movi	r3,1
   81848:	003fee06 	br	81804 <__alt_data_end+0xfff9fd84>

0008184c <__modsi3>:
   8184c:	20001716 	blt	r4,zero,818ac <__modsi3+0x60>
   81850:	000f883a 	mov	r7,zero
   81854:	2005883a 	mov	r2,r4
   81858:	28001216 	blt	r5,zero,818a4 <__modsi3+0x58>
   8185c:	2900162e 	bgeu	r5,r4,818b8 <__modsi3+0x6c>
   81860:	01800804 	movi	r6,32
   81864:	00c00044 	movi	r3,1
   81868:	00000106 	br	81870 <__modsi3+0x24>
   8186c:	30000a26 	beq	r6,zero,81898 <__modsi3+0x4c>
   81870:	294b883a 	add	r5,r5,r5
   81874:	31bfffc4 	addi	r6,r6,-1
   81878:	18c7883a 	add	r3,r3,r3
   8187c:	293ffb36 	bltu	r5,r4,8186c <__alt_data_end+0xfff9fdec>
   81880:	18000526 	beq	r3,zero,81898 <__modsi3+0x4c>
   81884:	1806d07a 	srli	r3,r3,1
   81888:	11400136 	bltu	r2,r5,81890 <__modsi3+0x44>
   8188c:	1145c83a 	sub	r2,r2,r5
   81890:	280ad07a 	srli	r5,r5,1
   81894:	183ffb1e 	bne	r3,zero,81884 <__alt_data_end+0xfff9fe04>
   81898:	38000126 	beq	r7,zero,818a0 <__modsi3+0x54>
   8189c:	0085c83a 	sub	r2,zero,r2
   818a0:	f800283a 	ret
   818a4:	014bc83a 	sub	r5,zero,r5
   818a8:	003fec06 	br	8185c <__alt_data_end+0xfff9fddc>
   818ac:	0109c83a 	sub	r4,zero,r4
   818b0:	01c00044 	movi	r7,1
   818b4:	003fe706 	br	81854 <__alt_data_end+0xfff9fdd4>
   818b8:	00c00044 	movi	r3,1
   818bc:	003ff106 	br	81884 <__alt_data_end+0xfff9fe04>

000818c0 <__udivsi3>:
   818c0:	200d883a 	mov	r6,r4
   818c4:	2900152e 	bgeu	r5,r4,8191c <__udivsi3+0x5c>
   818c8:	28001416 	blt	r5,zero,8191c <__udivsi3+0x5c>
   818cc:	00800804 	movi	r2,32
   818d0:	00c00044 	movi	r3,1
   818d4:	00000206 	br	818e0 <__udivsi3+0x20>
   818d8:	10000e26 	beq	r2,zero,81914 <__udivsi3+0x54>
   818dc:	28000516 	blt	r5,zero,818f4 <__udivsi3+0x34>
   818e0:	294b883a 	add	r5,r5,r5
   818e4:	10bfffc4 	addi	r2,r2,-1
   818e8:	18c7883a 	add	r3,r3,r3
   818ec:	293ffa36 	bltu	r5,r4,818d8 <__alt_data_end+0xfff9fe58>
   818f0:	18000826 	beq	r3,zero,81914 <__udivsi3+0x54>
   818f4:	0005883a 	mov	r2,zero
   818f8:	31400236 	bltu	r6,r5,81904 <__udivsi3+0x44>
   818fc:	314dc83a 	sub	r6,r6,r5
   81900:	10c4b03a 	or	r2,r2,r3
   81904:	1806d07a 	srli	r3,r3,1
   81908:	280ad07a 	srli	r5,r5,1
   8190c:	183ffa1e 	bne	r3,zero,818f8 <__alt_data_end+0xfff9fe78>
   81910:	f800283a 	ret
   81914:	0005883a 	mov	r2,zero
   81918:	f800283a 	ret
   8191c:	00c00044 	movi	r3,1
   81920:	003ff406 	br	818f4 <__alt_data_end+0xfff9fe74>

00081924 <__umodsi3>:
   81924:	2005883a 	mov	r2,r4
   81928:	2900122e 	bgeu	r5,r4,81974 <__umodsi3+0x50>
   8192c:	28001116 	blt	r5,zero,81974 <__umodsi3+0x50>
   81930:	01800804 	movi	r6,32
   81934:	00c00044 	movi	r3,1
   81938:	00000206 	br	81944 <__umodsi3+0x20>
   8193c:	30000c26 	beq	r6,zero,81970 <__umodsi3+0x4c>
   81940:	28000516 	blt	r5,zero,81958 <__umodsi3+0x34>
   81944:	294b883a 	add	r5,r5,r5
   81948:	31bfffc4 	addi	r6,r6,-1
   8194c:	18c7883a 	add	r3,r3,r3
   81950:	293ffa36 	bltu	r5,r4,8193c <__alt_data_end+0xfff9febc>
   81954:	18000626 	beq	r3,zero,81970 <__umodsi3+0x4c>
   81958:	1806d07a 	srli	r3,r3,1
   8195c:	11400136 	bltu	r2,r5,81964 <__umodsi3+0x40>
   81960:	1145c83a 	sub	r2,r2,r5
   81964:	280ad07a 	srli	r5,r5,1
   81968:	183ffb1e 	bne	r3,zero,81958 <__alt_data_end+0xfff9fed8>
   8196c:	f800283a 	ret
   81970:	f800283a 	ret
   81974:	00c00044 	movi	r3,1
   81978:	003ff706 	br	81958 <__alt_data_end+0xfff9fed8>

0008197c <_printf_r>:
   8197c:	defffd04 	addi	sp,sp,-12
   81980:	2805883a 	mov	r2,r5
   81984:	dfc00015 	stw	ra,0(sp)
   81988:	d9800115 	stw	r6,4(sp)
   8198c:	d9c00215 	stw	r7,8(sp)
   81990:	21400217 	ldw	r5,8(r4)
   81994:	d9c00104 	addi	r7,sp,4
   81998:	100d883a 	mov	r6,r2
   8199c:	0081c200 	call	81c20 <___vfprintf_internal_r>
   819a0:	dfc00017 	ldw	ra,0(sp)
   819a4:	dec00304 	addi	sp,sp,12
   819a8:	f800283a 	ret

000819ac <printf>:
   819ac:	defffc04 	addi	sp,sp,-16
   819b0:	dfc00015 	stw	ra,0(sp)
   819b4:	d9400115 	stw	r5,4(sp)
   819b8:	d9800215 	stw	r6,8(sp)
   819bc:	d9c00315 	stw	r7,12(sp)
   819c0:	00800274 	movhi	r2,9
   819c4:	108b9b04 	addi	r2,r2,11884
   819c8:	10800017 	ldw	r2,0(r2)
   819cc:	200b883a 	mov	r5,r4
   819d0:	d9800104 	addi	r6,sp,4
   819d4:	11000217 	ldw	r4,8(r2)
   819d8:	0083e180 	call	83e18 <__vfprintf_internal>
   819dc:	dfc00017 	ldw	ra,0(sp)
   819e0:	dec00404 	addi	sp,sp,16
   819e4:	f800283a 	ret

000819e8 <_puts_r>:
   819e8:	defff604 	addi	sp,sp,-40
   819ec:	dc000715 	stw	r16,28(sp)
   819f0:	2021883a 	mov	r16,r4
   819f4:	2809883a 	mov	r4,r5
   819f8:	dc400815 	stw	r17,32(sp)
   819fc:	dfc00915 	stw	ra,36(sp)
   81a00:	2823883a 	mov	r17,r5
   81a04:	0081b380 	call	81b38 <strlen>
   81a08:	10c00044 	addi	r3,r2,1
   81a0c:	d8800115 	stw	r2,4(sp)
   81a10:	00800274 	movhi	r2,9
   81a14:	1083aa04 	addi	r2,r2,3752
   81a18:	d8800215 	stw	r2,8(sp)
   81a1c:	00800044 	movi	r2,1
   81a20:	d8800315 	stw	r2,12(sp)
   81a24:	00800084 	movi	r2,2
   81a28:	dc400015 	stw	r17,0(sp)
   81a2c:	d8c00615 	stw	r3,24(sp)
   81a30:	dec00415 	stw	sp,16(sp)
   81a34:	d8800515 	stw	r2,20(sp)
   81a38:	80000226 	beq	r16,zero,81a44 <_puts_r+0x5c>
   81a3c:	80800e17 	ldw	r2,56(r16)
   81a40:	10001426 	beq	r2,zero,81a94 <_puts_r+0xac>
   81a44:	81400217 	ldw	r5,8(r16)
   81a48:	2880030b 	ldhu	r2,12(r5)
   81a4c:	10c8000c 	andi	r3,r2,8192
   81a50:	1800061e 	bne	r3,zero,81a6c <_puts_r+0x84>
   81a54:	29001917 	ldw	r4,100(r5)
   81a58:	00f7ffc4 	movi	r3,-8193
   81a5c:	10880014 	ori	r2,r2,8192
   81a60:	20c6703a 	and	r3,r4,r3
   81a64:	2880030d 	sth	r2,12(r5)
   81a68:	28c01915 	stw	r3,100(r5)
   81a6c:	d9800404 	addi	r6,sp,16
   81a70:	8009883a 	mov	r4,r16
   81a74:	00863480 	call	86348 <__sfvwrite_r>
   81a78:	1000091e 	bne	r2,zero,81aa0 <_puts_r+0xb8>
   81a7c:	00800284 	movi	r2,10
   81a80:	dfc00917 	ldw	ra,36(sp)
   81a84:	dc400817 	ldw	r17,32(sp)
   81a88:	dc000717 	ldw	r16,28(sp)
   81a8c:	dec00a04 	addi	sp,sp,40
   81a90:	f800283a 	ret
   81a94:	8009883a 	mov	r4,r16
   81a98:	0085ec40 	call	85ec4 <__sinit>
   81a9c:	003fe906 	br	81a44 <__alt_data_end+0xfff9ffc4>
   81aa0:	00bfffc4 	movi	r2,-1
   81aa4:	003ff606 	br	81a80 <__alt_data_end+0xfffa0000>

00081aa8 <puts>:
   81aa8:	00800274 	movhi	r2,9
   81aac:	108b9b04 	addi	r2,r2,11884
   81ab0:	200b883a 	mov	r5,r4
   81ab4:	11000017 	ldw	r4,0(r2)
   81ab8:	00819e81 	jmpi	819e8 <_puts_r>

00081abc <srand>:
   81abc:	00800274 	movhi	r2,9
   81ac0:	108b9b04 	addi	r2,r2,11884
   81ac4:	10800017 	ldw	r2,0(r2)
   81ac8:	11002915 	stw	r4,164(r2)
   81acc:	10002a15 	stw	zero,168(r2)
   81ad0:	f800283a 	ret

00081ad4 <rand>:
   81ad4:	00800274 	movhi	r2,9
   81ad8:	defffe04 	addi	sp,sp,-8
   81adc:	108b9b04 	addi	r2,r2,11884
   81ae0:	dc000015 	stw	r16,0(sp)
   81ae4:	14000017 	ldw	r16,0(r2)
   81ae8:	dfc00115 	stw	ra,4(sp)
   81aec:	01932574 	movhi	r6,19605
   81af0:	81002917 	ldw	r4,164(r16)
   81af4:	81402a17 	ldw	r5,168(r16)
   81af8:	01d614b4 	movhi	r7,22610
   81afc:	319fcb44 	addi	r6,r6,32557
   81b00:	39fd0b44 	addi	r7,r7,-3027
   81b04:	008b0f80 	call	8b0f8 <__muldi3>
   81b08:	11000044 	addi	r4,r2,1
   81b0c:	2085803a 	cmpltu	r2,r4,r2
   81b10:	10c7883a 	add	r3,r2,r3
   81b14:	00a00034 	movhi	r2,32768
   81b18:	10bfffc4 	addi	r2,r2,-1
   81b1c:	1884703a 	and	r2,r3,r2
   81b20:	81002915 	stw	r4,164(r16)
   81b24:	80c02a15 	stw	r3,168(r16)
   81b28:	dfc00117 	ldw	ra,4(sp)
   81b2c:	dc000017 	ldw	r16,0(sp)
   81b30:	dec00204 	addi	sp,sp,8
   81b34:	f800283a 	ret

00081b38 <strlen>:
   81b38:	208000cc 	andi	r2,r4,3
   81b3c:	10002026 	beq	r2,zero,81bc0 <strlen+0x88>
   81b40:	20800007 	ldb	r2,0(r4)
   81b44:	10002026 	beq	r2,zero,81bc8 <strlen+0x90>
   81b48:	2005883a 	mov	r2,r4
   81b4c:	00000206 	br	81b58 <strlen+0x20>
   81b50:	10c00007 	ldb	r3,0(r2)
   81b54:	18001826 	beq	r3,zero,81bb8 <strlen+0x80>
   81b58:	10800044 	addi	r2,r2,1
   81b5c:	10c000cc 	andi	r3,r2,3
   81b60:	183ffb1e 	bne	r3,zero,81b50 <__alt_data_end+0xfffa00d0>
   81b64:	10c00017 	ldw	r3,0(r2)
   81b68:	01ffbff4 	movhi	r7,65279
   81b6c:	39ffbfc4 	addi	r7,r7,-257
   81b70:	00ca303a 	nor	r5,zero,r3
   81b74:	01a02074 	movhi	r6,32897
   81b78:	19c7883a 	add	r3,r3,r7
   81b7c:	31a02004 	addi	r6,r6,-32640
   81b80:	1946703a 	and	r3,r3,r5
   81b84:	1986703a 	and	r3,r3,r6
   81b88:	1800091e 	bne	r3,zero,81bb0 <strlen+0x78>
   81b8c:	10800104 	addi	r2,r2,4
   81b90:	10c00017 	ldw	r3,0(r2)
   81b94:	19cb883a 	add	r5,r3,r7
   81b98:	00c6303a 	nor	r3,zero,r3
   81b9c:	28c6703a 	and	r3,r5,r3
   81ba0:	1986703a 	and	r3,r3,r6
   81ba4:	183ff926 	beq	r3,zero,81b8c <__alt_data_end+0xfffa010c>
   81ba8:	00000106 	br	81bb0 <strlen+0x78>
   81bac:	10800044 	addi	r2,r2,1
   81bb0:	10c00007 	ldb	r3,0(r2)
   81bb4:	183ffd1e 	bne	r3,zero,81bac <__alt_data_end+0xfffa012c>
   81bb8:	1105c83a 	sub	r2,r2,r4
   81bbc:	f800283a 	ret
   81bc0:	2005883a 	mov	r2,r4
   81bc4:	003fe706 	br	81b64 <__alt_data_end+0xfffa00e4>
   81bc8:	0005883a 	mov	r2,zero
   81bcc:	f800283a 	ret

00081bd0 <time>:
   81bd0:	00800274 	movhi	r2,9
   81bd4:	defffc04 	addi	sp,sp,-16
   81bd8:	108b9b04 	addi	r2,r2,11884
   81bdc:	dc000215 	stw	r16,8(sp)
   81be0:	2021883a 	mov	r16,r4
   81be4:	11000017 	ldw	r4,0(r2)
   81be8:	000d883a 	mov	r6,zero
   81bec:	d80b883a 	mov	r5,sp
   81bf0:	dfc00315 	stw	ra,12(sp)
   81bf4:	008698c0 	call	8698c <_gettimeofday_r>
   81bf8:	10000716 	blt	r2,zero,81c18 <time+0x48>
   81bfc:	d8800017 	ldw	r2,0(sp)
   81c00:	80000126 	beq	r16,zero,81c08 <time+0x38>
   81c04:	80800015 	stw	r2,0(r16)
   81c08:	dfc00317 	ldw	ra,12(sp)
   81c0c:	dc000217 	ldw	r16,8(sp)
   81c10:	dec00404 	addi	sp,sp,16
   81c14:	f800283a 	ret
   81c18:	00bfffc4 	movi	r2,-1
   81c1c:	003ffa06 	br	81c08 <__alt_data_end+0xfffa0188>

00081c20 <___vfprintf_internal_r>:
   81c20:	deffb804 	addi	sp,sp,-288
   81c24:	dfc04715 	stw	ra,284(sp)
   81c28:	ddc04515 	stw	r23,276(sp)
   81c2c:	dd404315 	stw	r21,268(sp)
   81c30:	d9002c15 	stw	r4,176(sp)
   81c34:	282f883a 	mov	r23,r5
   81c38:	302b883a 	mov	r21,r6
   81c3c:	d9c02d15 	stw	r7,180(sp)
   81c40:	df004615 	stw	fp,280(sp)
   81c44:	dd804415 	stw	r22,272(sp)
   81c48:	dd004215 	stw	r20,264(sp)
   81c4c:	dcc04115 	stw	r19,260(sp)
   81c50:	dc804015 	stw	r18,256(sp)
   81c54:	dc403f15 	stw	r17,252(sp)
   81c58:	dc003e15 	stw	r16,248(sp)
   81c5c:	0086a940 	call	86a94 <_localeconv_r>
   81c60:	10800017 	ldw	r2,0(r2)
   81c64:	1009883a 	mov	r4,r2
   81c68:	d8803415 	stw	r2,208(sp)
   81c6c:	0081b380 	call	81b38 <strlen>
   81c70:	d8803715 	stw	r2,220(sp)
   81c74:	d8802c17 	ldw	r2,176(sp)
   81c78:	10000226 	beq	r2,zero,81c84 <___vfprintf_internal_r+0x64>
   81c7c:	10800e17 	ldw	r2,56(r2)
   81c80:	1000f926 	beq	r2,zero,82068 <___vfprintf_internal_r+0x448>
   81c84:	b880030b 	ldhu	r2,12(r23)
   81c88:	10c8000c 	andi	r3,r2,8192
   81c8c:	1800061e 	bne	r3,zero,81ca8 <___vfprintf_internal_r+0x88>
   81c90:	b9001917 	ldw	r4,100(r23)
   81c94:	00f7ffc4 	movi	r3,-8193
   81c98:	10880014 	ori	r2,r2,8192
   81c9c:	20c6703a 	and	r3,r4,r3
   81ca0:	b880030d 	sth	r2,12(r23)
   81ca4:	b8c01915 	stw	r3,100(r23)
   81ca8:	10c0020c 	andi	r3,r2,8
   81cac:	1800c126 	beq	r3,zero,81fb4 <___vfprintf_internal_r+0x394>
   81cb0:	b8c00417 	ldw	r3,16(r23)
   81cb4:	1800bf26 	beq	r3,zero,81fb4 <___vfprintf_internal_r+0x394>
   81cb8:	1080068c 	andi	r2,r2,26
   81cbc:	00c00284 	movi	r3,10
   81cc0:	10c0c426 	beq	r2,r3,81fd4 <___vfprintf_internal_r+0x3b4>
   81cc4:	d8c00404 	addi	r3,sp,16
   81cc8:	05000274 	movhi	r20,9
   81ccc:	d9001e04 	addi	r4,sp,120
   81cd0:	a503bb84 	addi	r20,r20,3822
   81cd4:	d8c01e15 	stw	r3,120(sp)
   81cd8:	d8002015 	stw	zero,128(sp)
   81cdc:	d8001f15 	stw	zero,124(sp)
   81ce0:	d8003315 	stw	zero,204(sp)
   81ce4:	d8003615 	stw	zero,216(sp)
   81ce8:	d8003815 	stw	zero,224(sp)
   81cec:	1811883a 	mov	r8,r3
   81cf0:	d8003915 	stw	zero,228(sp)
   81cf4:	d8003a15 	stw	zero,232(sp)
   81cf8:	d8002f15 	stw	zero,188(sp)
   81cfc:	d9002815 	stw	r4,160(sp)
   81d00:	a8800007 	ldb	r2,0(r21)
   81d04:	10027b26 	beq	r2,zero,826f4 <___vfprintf_internal_r+0xad4>
   81d08:	00c00944 	movi	r3,37
   81d0c:	a821883a 	mov	r16,r21
   81d10:	10c0021e 	bne	r2,r3,81d1c <___vfprintf_internal_r+0xfc>
   81d14:	00001406 	br	81d68 <___vfprintf_internal_r+0x148>
   81d18:	10c00326 	beq	r2,r3,81d28 <___vfprintf_internal_r+0x108>
   81d1c:	84000044 	addi	r16,r16,1
   81d20:	80800007 	ldb	r2,0(r16)
   81d24:	103ffc1e 	bne	r2,zero,81d18 <__alt_data_end+0xfffa0298>
   81d28:	8563c83a 	sub	r17,r16,r21
   81d2c:	88000e26 	beq	r17,zero,81d68 <___vfprintf_internal_r+0x148>
   81d30:	d8c02017 	ldw	r3,128(sp)
   81d34:	d8801f17 	ldw	r2,124(sp)
   81d38:	45400015 	stw	r21,0(r8)
   81d3c:	1c47883a 	add	r3,r3,r17
   81d40:	10800044 	addi	r2,r2,1
   81d44:	d8c02015 	stw	r3,128(sp)
   81d48:	44400115 	stw	r17,4(r8)
   81d4c:	d8801f15 	stw	r2,124(sp)
   81d50:	00c001c4 	movi	r3,7
   81d54:	1880a716 	blt	r3,r2,81ff4 <___vfprintf_internal_r+0x3d4>
   81d58:	42000204 	addi	r8,r8,8
   81d5c:	d9402f17 	ldw	r5,188(sp)
   81d60:	2c4b883a 	add	r5,r5,r17
   81d64:	d9402f15 	stw	r5,188(sp)
   81d68:	80800007 	ldb	r2,0(r16)
   81d6c:	1000a826 	beq	r2,zero,82010 <___vfprintf_internal_r+0x3f0>
   81d70:	84400047 	ldb	r17,1(r16)
   81d74:	00bfffc4 	movi	r2,-1
   81d78:	85400044 	addi	r21,r16,1
   81d7c:	d8002785 	stb	zero,158(sp)
   81d80:	0007883a 	mov	r3,zero
   81d84:	000f883a 	mov	r7,zero
   81d88:	d8802915 	stw	r2,164(sp)
   81d8c:	d8003115 	stw	zero,196(sp)
   81d90:	0025883a 	mov	r18,zero
   81d94:	01401604 	movi	r5,88
   81d98:	01800244 	movi	r6,9
   81d9c:	02800a84 	movi	r10,42
   81da0:	02401b04 	movi	r9,108
   81da4:	ad400044 	addi	r21,r21,1
   81da8:	88bff804 	addi	r2,r17,-32
   81dac:	28830436 	bltu	r5,r2,829c0 <___vfprintf_internal_r+0xda0>
   81db0:	100490ba 	slli	r2,r2,2
   81db4:	01000234 	movhi	r4,8
   81db8:	21077204 	addi	r4,r4,7624
   81dbc:	1105883a 	add	r2,r2,r4
   81dc0:	10800017 	ldw	r2,0(r2)
   81dc4:	1000683a 	jmp	r2
   81dc8:	000828e0 	cmpeqi	zero,zero,8355
   81dcc:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81dd0:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81dd4:	00082900 	call	8290 <__alt_mem_onchip_memory2-0x77d70>
   81dd8:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81ddc:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81de0:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81de4:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81de8:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81dec:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81df0:	00082074 	movhi	zero,8321
   81df4:	0008281c 	xori	zero,zero,8352
   81df8:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81dfc:	00081f3c 	xorhi	zero,zero,8316
   81e00:	0008209c 	xori	zero,zero,8322
   81e04:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e08:	000820dc 	xori	zero,zero,8323
   81e0c:	000820e8 	cmpgeui	zero,zero,8323
   81e10:	000820e8 	cmpgeui	zero,zero,8323
   81e14:	000820e8 	cmpgeui	zero,zero,8323
   81e18:	000820e8 	cmpgeui	zero,zero,8323
   81e1c:	000820e8 	cmpgeui	zero,zero,8323
   81e20:	000820e8 	cmpgeui	zero,zero,8323
   81e24:	000820e8 	cmpgeui	zero,zero,8323
   81e28:	000820e8 	cmpgeui	zero,zero,8323
   81e2c:	000820e8 	cmpgeui	zero,zero,8323
   81e30:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e34:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e38:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e3c:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e40:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e44:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e48:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e4c:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e50:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e54:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e58:	0008211c 	xori	zero,zero,8324
   81e5c:	000821d8 	cmpnei	zero,zero,8327
   81e60:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e64:	000821d8 	cmpnei	zero,zero,8327
   81e68:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e6c:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e70:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e74:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e78:	00082278 	rdprs	zero,zero,8329
   81e7c:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e80:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e84:	00082284 	movi	zero,8330
   81e88:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e8c:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e90:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e94:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e98:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81e9c:	000826fc 	xorhi	zero,zero,8347
   81ea0:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81ea4:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81ea8:	0008275c 	xori	zero,zero,8349
   81eac:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81eb0:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81eb4:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81eb8:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81ebc:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81ec0:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81ec4:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81ec8:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81ecc:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81ed0:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81ed4:	0008296c 	andhi	zero,zero,8357
   81ed8:	0008290c 	andi	zero,zero,8356
   81edc:	000821d8 	cmpnei	zero,zero,8327
   81ee0:	000821d8 	cmpnei	zero,zero,8327
   81ee4:	000821d8 	cmpnei	zero,zero,8327
   81ee8:	0008291c 	xori	zero,zero,8356
   81eec:	0008290c 	andi	zero,zero,8356
   81ef0:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81ef4:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81ef8:	00082928 	cmpgeui	zero,zero,8356
   81efc:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81f00:	00082938 	rdprs	zero,zero,8356
   81f04:	0008280c 	andi	zero,zero,8352
   81f08:	00081f48 	cmpgei	zero,zero,8317
   81f0c:	0008282c 	andhi	zero,zero,8352
   81f10:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81f14:	00082838 	rdprs	zero,zero,8352
   81f18:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81f1c:	00082894 	movui	zero,8354
   81f20:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81f24:	000829c0 	call	829c <__alt_mem_onchip_memory2-0x77d64>
   81f28:	000828a4 	muli	zero,zero,8354
   81f2c:	d9003117 	ldw	r4,196(sp)
   81f30:	d8802d15 	stw	r2,180(sp)
   81f34:	0109c83a 	sub	r4,zero,r4
   81f38:	d9003115 	stw	r4,196(sp)
   81f3c:	94800114 	ori	r18,r18,4
   81f40:	ac400007 	ldb	r17,0(r21)
   81f44:	003f9706 	br	81da4 <__alt_data_end+0xfffa0324>
   81f48:	00800c04 	movi	r2,48
   81f4c:	d9002d17 	ldw	r4,180(sp)
   81f50:	d9402917 	ldw	r5,164(sp)
   81f54:	d8802705 	stb	r2,156(sp)
   81f58:	00801e04 	movi	r2,120
   81f5c:	d8802745 	stb	r2,157(sp)
   81f60:	d8002785 	stb	zero,158(sp)
   81f64:	20c00104 	addi	r3,r4,4
   81f68:	24c00017 	ldw	r19,0(r4)
   81f6c:	002d883a 	mov	r22,zero
   81f70:	90800094 	ori	r2,r18,2
   81f74:	28029a16 	blt	r5,zero,829e0 <___vfprintf_internal_r+0xdc0>
   81f78:	00bfdfc4 	movi	r2,-129
   81f7c:	90a4703a 	and	r18,r18,r2
   81f80:	d8c02d15 	stw	r3,180(sp)
   81f84:	94800094 	ori	r18,r18,2
   81f88:	9802871e 	bne	r19,zero,829a8 <___vfprintf_internal_r+0xd88>
   81f8c:	00800274 	movhi	r2,9
   81f90:	1083b404 	addi	r2,r2,3792
   81f94:	d8803915 	stw	r2,228(sp)
   81f98:	04401e04 	movi	r17,120
   81f9c:	d8802917 	ldw	r2,164(sp)
   81fa0:	0039883a 	mov	fp,zero
   81fa4:	1001e926 	beq	r2,zero,8274c <___vfprintf_internal_r+0xb2c>
   81fa8:	0027883a 	mov	r19,zero
   81fac:	002d883a 	mov	r22,zero
   81fb0:	00020506 	br	827c8 <___vfprintf_internal_r+0xba8>
   81fb4:	d9002c17 	ldw	r4,176(sp)
   81fb8:	b80b883a 	mov	r5,r23
   81fbc:	0083ef00 	call	83ef0 <__swsetup_r>
   81fc0:	1005ac1e 	bne	r2,zero,83674 <___vfprintf_internal_r+0x1a54>
   81fc4:	b880030b 	ldhu	r2,12(r23)
   81fc8:	00c00284 	movi	r3,10
   81fcc:	1080068c 	andi	r2,r2,26
   81fd0:	10ff3c1e 	bne	r2,r3,81cc4 <__alt_data_end+0xfffa0244>
   81fd4:	b880038f 	ldh	r2,14(r23)
   81fd8:	103f3a16 	blt	r2,zero,81cc4 <__alt_data_end+0xfffa0244>
   81fdc:	d9c02d17 	ldw	r7,180(sp)
   81fe0:	d9002c17 	ldw	r4,176(sp)
   81fe4:	a80d883a 	mov	r6,r21
   81fe8:	b80b883a 	mov	r5,r23
   81fec:	0083e340 	call	83e34 <__sbprintf>
   81ff0:	00001106 	br	82038 <___vfprintf_internal_r+0x418>
   81ff4:	d9002c17 	ldw	r4,176(sp)
   81ff8:	d9801e04 	addi	r6,sp,120
   81ffc:	b80b883a 	mov	r5,r23
   82000:	00892780 	call	89278 <__sprint_r>
   82004:	1000081e 	bne	r2,zero,82028 <___vfprintf_internal_r+0x408>
   82008:	da000404 	addi	r8,sp,16
   8200c:	003f5306 	br	81d5c <__alt_data_end+0xfffa02dc>
   82010:	d8802017 	ldw	r2,128(sp)
   82014:	10000426 	beq	r2,zero,82028 <___vfprintf_internal_r+0x408>
   82018:	d9002c17 	ldw	r4,176(sp)
   8201c:	d9801e04 	addi	r6,sp,120
   82020:	b80b883a 	mov	r5,r23
   82024:	00892780 	call	89278 <__sprint_r>
   82028:	b880030b 	ldhu	r2,12(r23)
   8202c:	1080100c 	andi	r2,r2,64
   82030:	1005901e 	bne	r2,zero,83674 <___vfprintf_internal_r+0x1a54>
   82034:	d8802f17 	ldw	r2,188(sp)
   82038:	dfc04717 	ldw	ra,284(sp)
   8203c:	df004617 	ldw	fp,280(sp)
   82040:	ddc04517 	ldw	r23,276(sp)
   82044:	dd804417 	ldw	r22,272(sp)
   82048:	dd404317 	ldw	r21,268(sp)
   8204c:	dd004217 	ldw	r20,264(sp)
   82050:	dcc04117 	ldw	r19,260(sp)
   82054:	dc804017 	ldw	r18,256(sp)
   82058:	dc403f17 	ldw	r17,252(sp)
   8205c:	dc003e17 	ldw	r16,248(sp)
   82060:	dec04804 	addi	sp,sp,288
   82064:	f800283a 	ret
   82068:	d9002c17 	ldw	r4,176(sp)
   8206c:	0085ec40 	call	85ec4 <__sinit>
   82070:	003f0406 	br	81c84 <__alt_data_end+0xfffa0204>
   82074:	d8802d17 	ldw	r2,180(sp)
   82078:	d9002d17 	ldw	r4,180(sp)
   8207c:	10800017 	ldw	r2,0(r2)
   82080:	d8803115 	stw	r2,196(sp)
   82084:	20800104 	addi	r2,r4,4
   82088:	d9003117 	ldw	r4,196(sp)
   8208c:	203fa716 	blt	r4,zero,81f2c <__alt_data_end+0xfffa04ac>
   82090:	d8802d15 	stw	r2,180(sp)
   82094:	ac400007 	ldb	r17,0(r21)
   82098:	003f4206 	br	81da4 <__alt_data_end+0xfffa0324>
   8209c:	ac400007 	ldb	r17,0(r21)
   820a0:	aac00044 	addi	r11,r21,1
   820a4:	8a872826 	beq	r17,r10,83d48 <___vfprintf_internal_r+0x2128>
   820a8:	88bff404 	addi	r2,r17,-48
   820ac:	0009883a 	mov	r4,zero
   820b0:	30867d36 	bltu	r6,r2,83aa8 <___vfprintf_internal_r+0x1e88>
   820b4:	5c400007 	ldb	r17,0(r11)
   820b8:	210002a4 	muli	r4,r4,10
   820bc:	5d400044 	addi	r21,r11,1
   820c0:	a817883a 	mov	r11,r21
   820c4:	2089883a 	add	r4,r4,r2
   820c8:	88bff404 	addi	r2,r17,-48
   820cc:	30bff92e 	bgeu	r6,r2,820b4 <__alt_data_end+0xfffa0634>
   820d0:	2005c916 	blt	r4,zero,837f8 <___vfprintf_internal_r+0x1bd8>
   820d4:	d9002915 	stw	r4,164(sp)
   820d8:	003f3306 	br	81da8 <__alt_data_end+0xfffa0328>
   820dc:	94802014 	ori	r18,r18,128
   820e0:	ac400007 	ldb	r17,0(r21)
   820e4:	003f2f06 	br	81da4 <__alt_data_end+0xfffa0324>
   820e8:	a809883a 	mov	r4,r21
   820ec:	d8003115 	stw	zero,196(sp)
   820f0:	88bff404 	addi	r2,r17,-48
   820f4:	0017883a 	mov	r11,zero
   820f8:	24400007 	ldb	r17,0(r4)
   820fc:	5ac002a4 	muli	r11,r11,10
   82100:	ad400044 	addi	r21,r21,1
   82104:	a809883a 	mov	r4,r21
   82108:	12d7883a 	add	r11,r2,r11
   8210c:	88bff404 	addi	r2,r17,-48
   82110:	30bff92e 	bgeu	r6,r2,820f8 <__alt_data_end+0xfffa0678>
   82114:	dac03115 	stw	r11,196(sp)
   82118:	003f2306 	br	81da8 <__alt_data_end+0xfffa0328>
   8211c:	18c03fcc 	andi	r3,r3,255
   82120:	18072b1e 	bne	r3,zero,83dd0 <___vfprintf_internal_r+0x21b0>
   82124:	94800414 	ori	r18,r18,16
   82128:	9080080c 	andi	r2,r18,32
   8212c:	10037b26 	beq	r2,zero,82f1c <___vfprintf_internal_r+0x12fc>
   82130:	d9402d17 	ldw	r5,180(sp)
   82134:	28800117 	ldw	r2,4(r5)
   82138:	2cc00017 	ldw	r19,0(r5)
   8213c:	29400204 	addi	r5,r5,8
   82140:	d9402d15 	stw	r5,180(sp)
   82144:	102d883a 	mov	r22,r2
   82148:	10044b16 	blt	r2,zero,83278 <___vfprintf_internal_r+0x1658>
   8214c:	d9402917 	ldw	r5,164(sp)
   82150:	df002783 	ldbu	fp,158(sp)
   82154:	2803bc16 	blt	r5,zero,83048 <___vfprintf_internal_r+0x1428>
   82158:	00ffdfc4 	movi	r3,-129
   8215c:	9d84b03a 	or	r2,r19,r22
   82160:	90e4703a 	and	r18,r18,r3
   82164:	10017726 	beq	r2,zero,82744 <___vfprintf_internal_r+0xb24>
   82168:	b0038326 	beq	r22,zero,82f78 <___vfprintf_internal_r+0x1358>
   8216c:	dc402a15 	stw	r17,168(sp)
   82170:	dc001e04 	addi	r16,sp,120
   82174:	b023883a 	mov	r17,r22
   82178:	402d883a 	mov	r22,r8
   8217c:	9809883a 	mov	r4,r19
   82180:	880b883a 	mov	r5,r17
   82184:	01800284 	movi	r6,10
   82188:	000f883a 	mov	r7,zero
   8218c:	008b6d00 	call	8b6d0 <__umoddi3>
   82190:	10800c04 	addi	r2,r2,48
   82194:	843fffc4 	addi	r16,r16,-1
   82198:	9809883a 	mov	r4,r19
   8219c:	880b883a 	mov	r5,r17
   821a0:	80800005 	stb	r2,0(r16)
   821a4:	01800284 	movi	r6,10
   821a8:	000f883a 	mov	r7,zero
   821ac:	008b1580 	call	8b158 <__udivdi3>
   821b0:	1027883a 	mov	r19,r2
   821b4:	10c4b03a 	or	r2,r2,r3
   821b8:	1823883a 	mov	r17,r3
   821bc:	103fef1e 	bne	r2,zero,8217c <__alt_data_end+0xfffa06fc>
   821c0:	d8c02817 	ldw	r3,160(sp)
   821c4:	dc402a17 	ldw	r17,168(sp)
   821c8:	b011883a 	mov	r8,r22
   821cc:	1c07c83a 	sub	r3,r3,r16
   821d0:	d8c02e15 	stw	r3,184(sp)
   821d4:	00005906 	br	8233c <___vfprintf_internal_r+0x71c>
   821d8:	18c03fcc 	andi	r3,r3,255
   821dc:	1806fa1e 	bne	r3,zero,83dc8 <___vfprintf_internal_r+0x21a8>
   821e0:	9080020c 	andi	r2,r18,8
   821e4:	10048a26 	beq	r2,zero,83410 <___vfprintf_internal_r+0x17f0>
   821e8:	d8c02d17 	ldw	r3,180(sp)
   821ec:	d9002d17 	ldw	r4,180(sp)
   821f0:	d9402d17 	ldw	r5,180(sp)
   821f4:	18c00017 	ldw	r3,0(r3)
   821f8:	21000117 	ldw	r4,4(r4)
   821fc:	29400204 	addi	r5,r5,8
   82200:	d8c03615 	stw	r3,216(sp)
   82204:	d9003815 	stw	r4,224(sp)
   82208:	d9402d15 	stw	r5,180(sp)
   8220c:	d9003617 	ldw	r4,216(sp)
   82210:	d9403817 	ldw	r5,224(sp)
   82214:	da003d15 	stw	r8,244(sp)
   82218:	04000044 	movi	r16,1
   8221c:	0088e9c0 	call	88e9c <__fpclassifyd>
   82220:	da003d17 	ldw	r8,244(sp)
   82224:	14041f1e 	bne	r2,r16,832a4 <___vfprintf_internal_r+0x1684>
   82228:	d9003617 	ldw	r4,216(sp)
   8222c:	d9403817 	ldw	r5,224(sp)
   82230:	000d883a 	mov	r6,zero
   82234:	000f883a 	mov	r7,zero
   82238:	008cf000 	call	8cf00 <__ledf2>
   8223c:	da003d17 	ldw	r8,244(sp)
   82240:	1005be16 	blt	r2,zero,8393c <___vfprintf_internal_r+0x1d1c>
   82244:	df002783 	ldbu	fp,158(sp)
   82248:	008011c4 	movi	r2,71
   8224c:	1445330e 	bge	r2,r17,8371c <___vfprintf_internal_r+0x1afc>
   82250:	04000274 	movhi	r16,9
   82254:	8403ac04 	addi	r16,r16,3760
   82258:	00c000c4 	movi	r3,3
   8225c:	00bfdfc4 	movi	r2,-129
   82260:	d8c02a15 	stw	r3,168(sp)
   82264:	90a4703a 	and	r18,r18,r2
   82268:	d8c02e15 	stw	r3,184(sp)
   8226c:	d8002915 	stw	zero,164(sp)
   82270:	d8003215 	stw	zero,200(sp)
   82274:	00003706 	br	82354 <___vfprintf_internal_r+0x734>
   82278:	94800214 	ori	r18,r18,8
   8227c:	ac400007 	ldb	r17,0(r21)
   82280:	003ec806 	br	81da4 <__alt_data_end+0xfffa0324>
   82284:	18c03fcc 	andi	r3,r3,255
   82288:	1806db1e 	bne	r3,zero,83df8 <___vfprintf_internal_r+0x21d8>
   8228c:	94800414 	ori	r18,r18,16
   82290:	9080080c 	andi	r2,r18,32
   82294:	1002d826 	beq	r2,zero,82df8 <___vfprintf_internal_r+0x11d8>
   82298:	d9402d17 	ldw	r5,180(sp)
   8229c:	d8c02917 	ldw	r3,164(sp)
   822a0:	d8002785 	stb	zero,158(sp)
   822a4:	28800204 	addi	r2,r5,8
   822a8:	2cc00017 	ldw	r19,0(r5)
   822ac:	2d800117 	ldw	r22,4(r5)
   822b0:	18048f16 	blt	r3,zero,834f0 <___vfprintf_internal_r+0x18d0>
   822b4:	013fdfc4 	movi	r4,-129
   822b8:	9d86b03a 	or	r3,r19,r22
   822bc:	d8802d15 	stw	r2,180(sp)
   822c0:	9124703a 	and	r18,r18,r4
   822c4:	1802d91e 	bne	r3,zero,82e2c <___vfprintf_internal_r+0x120c>
   822c8:	d8c02917 	ldw	r3,164(sp)
   822cc:	0039883a 	mov	fp,zero
   822d0:	1805c326 	beq	r3,zero,839e0 <___vfprintf_internal_r+0x1dc0>
   822d4:	0027883a 	mov	r19,zero
   822d8:	002d883a 	mov	r22,zero
   822dc:	dc001e04 	addi	r16,sp,120
   822e0:	9806d0fa 	srli	r3,r19,3
   822e4:	b008977a 	slli	r4,r22,29
   822e8:	b02cd0fa 	srli	r22,r22,3
   822ec:	9cc001cc 	andi	r19,r19,7
   822f0:	98800c04 	addi	r2,r19,48
   822f4:	843fffc4 	addi	r16,r16,-1
   822f8:	20e6b03a 	or	r19,r4,r3
   822fc:	80800005 	stb	r2,0(r16)
   82300:	9d86b03a 	or	r3,r19,r22
   82304:	183ff61e 	bne	r3,zero,822e0 <__alt_data_end+0xfffa0860>
   82308:	90c0004c 	andi	r3,r18,1
   8230c:	18013b26 	beq	r3,zero,827fc <___vfprintf_internal_r+0xbdc>
   82310:	10803fcc 	andi	r2,r2,255
   82314:	1080201c 	xori	r2,r2,128
   82318:	10bfe004 	addi	r2,r2,-128
   8231c:	00c00c04 	movi	r3,48
   82320:	10c13626 	beq	r2,r3,827fc <___vfprintf_internal_r+0xbdc>
   82324:	80ffffc5 	stb	r3,-1(r16)
   82328:	d8c02817 	ldw	r3,160(sp)
   8232c:	80bfffc4 	addi	r2,r16,-1
   82330:	1021883a 	mov	r16,r2
   82334:	1887c83a 	sub	r3,r3,r2
   82338:	d8c02e15 	stw	r3,184(sp)
   8233c:	d8802e17 	ldw	r2,184(sp)
   82340:	d9002917 	ldw	r4,164(sp)
   82344:	1100010e 	bge	r2,r4,8234c <___vfprintf_internal_r+0x72c>
   82348:	2005883a 	mov	r2,r4
   8234c:	d8802a15 	stw	r2,168(sp)
   82350:	d8003215 	stw	zero,200(sp)
   82354:	e7003fcc 	andi	fp,fp,255
   82358:	e700201c 	xori	fp,fp,128
   8235c:	e73fe004 	addi	fp,fp,-128
   82360:	e0000326 	beq	fp,zero,82370 <___vfprintf_internal_r+0x750>
   82364:	d8c02a17 	ldw	r3,168(sp)
   82368:	18c00044 	addi	r3,r3,1
   8236c:	d8c02a15 	stw	r3,168(sp)
   82370:	90c0008c 	andi	r3,r18,2
   82374:	d8c02b15 	stw	r3,172(sp)
   82378:	18000326 	beq	r3,zero,82388 <___vfprintf_internal_r+0x768>
   8237c:	d8c02a17 	ldw	r3,168(sp)
   82380:	18c00084 	addi	r3,r3,2
   82384:	d8c02a15 	stw	r3,168(sp)
   82388:	90c0210c 	andi	r3,r18,132
   8238c:	d8c03015 	stw	r3,192(sp)
   82390:	1801a31e 	bne	r3,zero,82a20 <___vfprintf_internal_r+0xe00>
   82394:	d9003117 	ldw	r4,196(sp)
   82398:	d8c02a17 	ldw	r3,168(sp)
   8239c:	20e7c83a 	sub	r19,r4,r3
   823a0:	04c19f0e 	bge	zero,r19,82a20 <___vfprintf_internal_r+0xe00>
   823a4:	02400404 	movi	r9,16
   823a8:	d8c02017 	ldw	r3,128(sp)
   823ac:	d8801f17 	ldw	r2,124(sp)
   823b0:	4cc50d0e 	bge	r9,r19,837e8 <___vfprintf_internal_r+0x1bc8>
   823b4:	01400274 	movhi	r5,9
   823b8:	2943bf84 	addi	r5,r5,3838
   823bc:	dc403b15 	stw	r17,236(sp)
   823c0:	d9403515 	stw	r5,212(sp)
   823c4:	9823883a 	mov	r17,r19
   823c8:	482d883a 	mov	r22,r9
   823cc:	9027883a 	mov	r19,r18
   823d0:	070001c4 	movi	fp,7
   823d4:	8025883a 	mov	r18,r16
   823d8:	dc002c17 	ldw	r16,176(sp)
   823dc:	00000306 	br	823ec <___vfprintf_internal_r+0x7cc>
   823e0:	8c7ffc04 	addi	r17,r17,-16
   823e4:	42000204 	addi	r8,r8,8
   823e8:	b440130e 	bge	r22,r17,82438 <___vfprintf_internal_r+0x818>
   823ec:	01000274 	movhi	r4,9
   823f0:	18c00404 	addi	r3,r3,16
   823f4:	10800044 	addi	r2,r2,1
   823f8:	2103bf84 	addi	r4,r4,3838
   823fc:	41000015 	stw	r4,0(r8)
   82400:	45800115 	stw	r22,4(r8)
   82404:	d8c02015 	stw	r3,128(sp)
   82408:	d8801f15 	stw	r2,124(sp)
   8240c:	e0bff40e 	bge	fp,r2,823e0 <__alt_data_end+0xfffa0960>
   82410:	d9801e04 	addi	r6,sp,120
   82414:	b80b883a 	mov	r5,r23
   82418:	8009883a 	mov	r4,r16
   8241c:	00892780 	call	89278 <__sprint_r>
   82420:	103f011e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   82424:	8c7ffc04 	addi	r17,r17,-16
   82428:	d8c02017 	ldw	r3,128(sp)
   8242c:	d8801f17 	ldw	r2,124(sp)
   82430:	da000404 	addi	r8,sp,16
   82434:	b47fed16 	blt	r22,r17,823ec <__alt_data_end+0xfffa096c>
   82438:	9021883a 	mov	r16,r18
   8243c:	9825883a 	mov	r18,r19
   82440:	8827883a 	mov	r19,r17
   82444:	dc403b17 	ldw	r17,236(sp)
   82448:	d9403517 	ldw	r5,212(sp)
   8244c:	98c7883a 	add	r3,r19,r3
   82450:	10800044 	addi	r2,r2,1
   82454:	41400015 	stw	r5,0(r8)
   82458:	44c00115 	stw	r19,4(r8)
   8245c:	d8c02015 	stw	r3,128(sp)
   82460:	d8801f15 	stw	r2,124(sp)
   82464:	010001c4 	movi	r4,7
   82468:	2082a316 	blt	r4,r2,82ef8 <___vfprintf_internal_r+0x12d8>
   8246c:	df002787 	ldb	fp,158(sp)
   82470:	42000204 	addi	r8,r8,8
   82474:	e0000c26 	beq	fp,zero,824a8 <___vfprintf_internal_r+0x888>
   82478:	d8801f17 	ldw	r2,124(sp)
   8247c:	d9002784 	addi	r4,sp,158
   82480:	18c00044 	addi	r3,r3,1
   82484:	10800044 	addi	r2,r2,1
   82488:	41000015 	stw	r4,0(r8)
   8248c:	01000044 	movi	r4,1
   82490:	41000115 	stw	r4,4(r8)
   82494:	d8c02015 	stw	r3,128(sp)
   82498:	d8801f15 	stw	r2,124(sp)
   8249c:	010001c4 	movi	r4,7
   824a0:	20823c16 	blt	r4,r2,82d94 <___vfprintf_internal_r+0x1174>
   824a4:	42000204 	addi	r8,r8,8
   824a8:	d8802b17 	ldw	r2,172(sp)
   824ac:	10000c26 	beq	r2,zero,824e0 <___vfprintf_internal_r+0x8c0>
   824b0:	d8801f17 	ldw	r2,124(sp)
   824b4:	d9002704 	addi	r4,sp,156
   824b8:	18c00084 	addi	r3,r3,2
   824bc:	10800044 	addi	r2,r2,1
   824c0:	41000015 	stw	r4,0(r8)
   824c4:	01000084 	movi	r4,2
   824c8:	41000115 	stw	r4,4(r8)
   824cc:	d8c02015 	stw	r3,128(sp)
   824d0:	d8801f15 	stw	r2,124(sp)
   824d4:	010001c4 	movi	r4,7
   824d8:	20823616 	blt	r4,r2,82db4 <___vfprintf_internal_r+0x1194>
   824dc:	42000204 	addi	r8,r8,8
   824e0:	d9003017 	ldw	r4,192(sp)
   824e4:	00802004 	movi	r2,128
   824e8:	20819926 	beq	r4,r2,82b50 <___vfprintf_internal_r+0xf30>
   824ec:	d9402917 	ldw	r5,164(sp)
   824f0:	d8802e17 	ldw	r2,184(sp)
   824f4:	28adc83a 	sub	r22,r5,r2
   824f8:	0580310e 	bge	zero,r22,825c0 <___vfprintf_internal_r+0x9a0>
   824fc:	07000404 	movi	fp,16
   82500:	d8801f17 	ldw	r2,124(sp)
   82504:	e584140e 	bge	fp,r22,83558 <___vfprintf_internal_r+0x1938>
   82508:	01400274 	movhi	r5,9
   8250c:	2943bb84 	addi	r5,r5,3822
   82510:	dc402915 	stw	r17,164(sp)
   82514:	d9402b15 	stw	r5,172(sp)
   82518:	b023883a 	mov	r17,r22
   8251c:	04c001c4 	movi	r19,7
   82520:	a82d883a 	mov	r22,r21
   82524:	902b883a 	mov	r21,r18
   82528:	8025883a 	mov	r18,r16
   8252c:	dc002c17 	ldw	r16,176(sp)
   82530:	00000306 	br	82540 <___vfprintf_internal_r+0x920>
   82534:	8c7ffc04 	addi	r17,r17,-16
   82538:	42000204 	addi	r8,r8,8
   8253c:	e440110e 	bge	fp,r17,82584 <___vfprintf_internal_r+0x964>
   82540:	18c00404 	addi	r3,r3,16
   82544:	10800044 	addi	r2,r2,1
   82548:	45000015 	stw	r20,0(r8)
   8254c:	47000115 	stw	fp,4(r8)
   82550:	d8c02015 	stw	r3,128(sp)
   82554:	d8801f15 	stw	r2,124(sp)
   82558:	98bff60e 	bge	r19,r2,82534 <__alt_data_end+0xfffa0ab4>
   8255c:	d9801e04 	addi	r6,sp,120
   82560:	b80b883a 	mov	r5,r23
   82564:	8009883a 	mov	r4,r16
   82568:	00892780 	call	89278 <__sprint_r>
   8256c:	103eae1e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   82570:	8c7ffc04 	addi	r17,r17,-16
   82574:	d8c02017 	ldw	r3,128(sp)
   82578:	d8801f17 	ldw	r2,124(sp)
   8257c:	da000404 	addi	r8,sp,16
   82580:	e47fef16 	blt	fp,r17,82540 <__alt_data_end+0xfffa0ac0>
   82584:	9021883a 	mov	r16,r18
   82588:	a825883a 	mov	r18,r21
   8258c:	b02b883a 	mov	r21,r22
   82590:	882d883a 	mov	r22,r17
   82594:	dc402917 	ldw	r17,164(sp)
   82598:	d9002b17 	ldw	r4,172(sp)
   8259c:	1d87883a 	add	r3,r3,r22
   825a0:	10800044 	addi	r2,r2,1
   825a4:	41000015 	stw	r4,0(r8)
   825a8:	45800115 	stw	r22,4(r8)
   825ac:	d8c02015 	stw	r3,128(sp)
   825b0:	d8801f15 	stw	r2,124(sp)
   825b4:	010001c4 	movi	r4,7
   825b8:	2081ee16 	blt	r4,r2,82d74 <___vfprintf_internal_r+0x1154>
   825bc:	42000204 	addi	r8,r8,8
   825c0:	9080400c 	andi	r2,r18,256
   825c4:	1001181e 	bne	r2,zero,82a28 <___vfprintf_internal_r+0xe08>
   825c8:	d9402e17 	ldw	r5,184(sp)
   825cc:	d8801f17 	ldw	r2,124(sp)
   825d0:	44000015 	stw	r16,0(r8)
   825d4:	1947883a 	add	r3,r3,r5
   825d8:	10800044 	addi	r2,r2,1
   825dc:	41400115 	stw	r5,4(r8)
   825e0:	d8c02015 	stw	r3,128(sp)
   825e4:	d8801f15 	stw	r2,124(sp)
   825e8:	010001c4 	movi	r4,7
   825ec:	2081d316 	blt	r4,r2,82d3c <___vfprintf_internal_r+0x111c>
   825f0:	42000204 	addi	r8,r8,8
   825f4:	9480010c 	andi	r18,r18,4
   825f8:	90003226 	beq	r18,zero,826c4 <___vfprintf_internal_r+0xaa4>
   825fc:	d9403117 	ldw	r5,196(sp)
   82600:	d8802a17 	ldw	r2,168(sp)
   82604:	28a1c83a 	sub	r16,r5,r2
   82608:	04002e0e 	bge	zero,r16,826c4 <___vfprintf_internal_r+0xaa4>
   8260c:	04400404 	movi	r17,16
   82610:	d8801f17 	ldw	r2,124(sp)
   82614:	8c04a20e 	bge	r17,r16,838a0 <___vfprintf_internal_r+0x1c80>
   82618:	01400274 	movhi	r5,9
   8261c:	2943bf84 	addi	r5,r5,3838
   82620:	d9403515 	stw	r5,212(sp)
   82624:	048001c4 	movi	r18,7
   82628:	dcc02c17 	ldw	r19,176(sp)
   8262c:	00000306 	br	8263c <___vfprintf_internal_r+0xa1c>
   82630:	843ffc04 	addi	r16,r16,-16
   82634:	42000204 	addi	r8,r8,8
   82638:	8c00130e 	bge	r17,r16,82688 <___vfprintf_internal_r+0xa68>
   8263c:	01000274 	movhi	r4,9
   82640:	18c00404 	addi	r3,r3,16
   82644:	10800044 	addi	r2,r2,1
   82648:	2103bf84 	addi	r4,r4,3838
   8264c:	41000015 	stw	r4,0(r8)
   82650:	44400115 	stw	r17,4(r8)
   82654:	d8c02015 	stw	r3,128(sp)
   82658:	d8801f15 	stw	r2,124(sp)
   8265c:	90bff40e 	bge	r18,r2,82630 <__alt_data_end+0xfffa0bb0>
   82660:	d9801e04 	addi	r6,sp,120
   82664:	b80b883a 	mov	r5,r23
   82668:	9809883a 	mov	r4,r19
   8266c:	00892780 	call	89278 <__sprint_r>
   82670:	103e6d1e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   82674:	843ffc04 	addi	r16,r16,-16
   82678:	d8c02017 	ldw	r3,128(sp)
   8267c:	d8801f17 	ldw	r2,124(sp)
   82680:	da000404 	addi	r8,sp,16
   82684:	8c3fed16 	blt	r17,r16,8263c <__alt_data_end+0xfffa0bbc>
   82688:	d9403517 	ldw	r5,212(sp)
   8268c:	1c07883a 	add	r3,r3,r16
   82690:	10800044 	addi	r2,r2,1
   82694:	41400015 	stw	r5,0(r8)
   82698:	44000115 	stw	r16,4(r8)
   8269c:	d8c02015 	stw	r3,128(sp)
   826a0:	d8801f15 	stw	r2,124(sp)
   826a4:	010001c4 	movi	r4,7
   826a8:	2080060e 	bge	r4,r2,826c4 <___vfprintf_internal_r+0xaa4>
   826ac:	d9002c17 	ldw	r4,176(sp)
   826b0:	d9801e04 	addi	r6,sp,120
   826b4:	b80b883a 	mov	r5,r23
   826b8:	00892780 	call	89278 <__sprint_r>
   826bc:	103e5a1e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   826c0:	d8c02017 	ldw	r3,128(sp)
   826c4:	d8803117 	ldw	r2,196(sp)
   826c8:	d9002a17 	ldw	r4,168(sp)
   826cc:	1100010e 	bge	r2,r4,826d4 <___vfprintf_internal_r+0xab4>
   826d0:	2005883a 	mov	r2,r4
   826d4:	d9402f17 	ldw	r5,188(sp)
   826d8:	288b883a 	add	r5,r5,r2
   826dc:	d9402f15 	stw	r5,188(sp)
   826e0:	18019e1e 	bne	r3,zero,82d5c <___vfprintf_internal_r+0x113c>
   826e4:	a8800007 	ldb	r2,0(r21)
   826e8:	d8001f15 	stw	zero,124(sp)
   826ec:	da000404 	addi	r8,sp,16
   826f0:	103d851e 	bne	r2,zero,81d08 <__alt_data_end+0xfffa0288>
   826f4:	a821883a 	mov	r16,r21
   826f8:	003d9b06 	br	81d68 <__alt_data_end+0xfffa02e8>
   826fc:	18c03fcc 	andi	r3,r3,255
   82700:	1805c11e 	bne	r3,zero,83e08 <___vfprintf_internal_r+0x21e8>
   82704:	94800414 	ori	r18,r18,16
   82708:	9080080c 	andi	r2,r18,32
   8270c:	10020c26 	beq	r2,zero,82f40 <___vfprintf_internal_r+0x1320>
   82710:	d8802d17 	ldw	r2,180(sp)
   82714:	d9002917 	ldw	r4,164(sp)
   82718:	d8002785 	stb	zero,158(sp)
   8271c:	10c00204 	addi	r3,r2,8
   82720:	14c00017 	ldw	r19,0(r2)
   82724:	15800117 	ldw	r22,4(r2)
   82728:	20040f16 	blt	r4,zero,83768 <___vfprintf_internal_r+0x1b48>
   8272c:	013fdfc4 	movi	r4,-129
   82730:	9d84b03a 	or	r2,r19,r22
   82734:	d8c02d15 	stw	r3,180(sp)
   82738:	9124703a 	and	r18,r18,r4
   8273c:	0039883a 	mov	fp,zero
   82740:	103e891e 	bne	r2,zero,82168 <__alt_data_end+0xfffa06e8>
   82744:	d9002917 	ldw	r4,164(sp)
   82748:	2002c11e 	bne	r4,zero,83250 <___vfprintf_internal_r+0x1630>
   8274c:	d8002915 	stw	zero,164(sp)
   82750:	d8002e15 	stw	zero,184(sp)
   82754:	dc001e04 	addi	r16,sp,120
   82758:	003ef806 	br	8233c <__alt_data_end+0xfffa08bc>
   8275c:	18c03fcc 	andi	r3,r3,255
   82760:	18059d1e 	bne	r3,zero,83dd8 <___vfprintf_internal_r+0x21b8>
   82764:	01400274 	movhi	r5,9
   82768:	2943af04 	addi	r5,r5,3772
   8276c:	d9403915 	stw	r5,228(sp)
   82770:	9080080c 	andi	r2,r18,32
   82774:	10005226 	beq	r2,zero,828c0 <___vfprintf_internal_r+0xca0>
   82778:	d8802d17 	ldw	r2,180(sp)
   8277c:	14c00017 	ldw	r19,0(r2)
   82780:	15800117 	ldw	r22,4(r2)
   82784:	10800204 	addi	r2,r2,8
   82788:	d8802d15 	stw	r2,180(sp)
   8278c:	9080004c 	andi	r2,r18,1
   82790:	10019026 	beq	r2,zero,82dd4 <___vfprintf_internal_r+0x11b4>
   82794:	9d84b03a 	or	r2,r19,r22
   82798:	10036926 	beq	r2,zero,83540 <___vfprintf_internal_r+0x1920>
   8279c:	d8c02917 	ldw	r3,164(sp)
   827a0:	00800c04 	movi	r2,48
   827a4:	d8802705 	stb	r2,156(sp)
   827a8:	dc402745 	stb	r17,157(sp)
   827ac:	d8002785 	stb	zero,158(sp)
   827b0:	90800094 	ori	r2,r18,2
   827b4:	18045d16 	blt	r3,zero,8392c <___vfprintf_internal_r+0x1d0c>
   827b8:	00bfdfc4 	movi	r2,-129
   827bc:	90a4703a 	and	r18,r18,r2
   827c0:	94800094 	ori	r18,r18,2
   827c4:	0039883a 	mov	fp,zero
   827c8:	d9003917 	ldw	r4,228(sp)
   827cc:	dc001e04 	addi	r16,sp,120
   827d0:	988003cc 	andi	r2,r19,15
   827d4:	b006973a 	slli	r3,r22,28
   827d8:	2085883a 	add	r2,r4,r2
   827dc:	9826d13a 	srli	r19,r19,4
   827e0:	10800003 	ldbu	r2,0(r2)
   827e4:	b02cd13a 	srli	r22,r22,4
   827e8:	843fffc4 	addi	r16,r16,-1
   827ec:	1ce6b03a 	or	r19,r3,r19
   827f0:	80800005 	stb	r2,0(r16)
   827f4:	9d84b03a 	or	r2,r19,r22
   827f8:	103ff51e 	bne	r2,zero,827d0 <__alt_data_end+0xfffa0d50>
   827fc:	d8c02817 	ldw	r3,160(sp)
   82800:	1c07c83a 	sub	r3,r3,r16
   82804:	d8c02e15 	stw	r3,184(sp)
   82808:	003ecc06 	br	8233c <__alt_data_end+0xfffa08bc>
   8280c:	18c03fcc 	andi	r3,r3,255
   82810:	183e9f26 	beq	r3,zero,82290 <__alt_data_end+0xfffa0810>
   82814:	d9c02785 	stb	r7,158(sp)
   82818:	003e9d06 	br	82290 <__alt_data_end+0xfffa0810>
   8281c:	00c00044 	movi	r3,1
   82820:	01c00ac4 	movi	r7,43
   82824:	ac400007 	ldb	r17,0(r21)
   82828:	003d5e06 	br	81da4 <__alt_data_end+0xfffa0324>
   8282c:	94800814 	ori	r18,r18,32
   82830:	ac400007 	ldb	r17,0(r21)
   82834:	003d5b06 	br	81da4 <__alt_data_end+0xfffa0324>
   82838:	d8c02d17 	ldw	r3,180(sp)
   8283c:	d8002785 	stb	zero,158(sp)
   82840:	1c000017 	ldw	r16,0(r3)
   82844:	1cc00104 	addi	r19,r3,4
   82848:	80041926 	beq	r16,zero,838b0 <___vfprintf_internal_r+0x1c90>
   8284c:	d9002917 	ldw	r4,164(sp)
   82850:	2003d016 	blt	r4,zero,83794 <___vfprintf_internal_r+0x1b74>
   82854:	200d883a 	mov	r6,r4
   82858:	000b883a 	mov	r5,zero
   8285c:	8009883a 	mov	r4,r16
   82860:	da003d15 	stw	r8,244(sp)
   82864:	008748c0 	call	8748c <memchr>
   82868:	da003d17 	ldw	r8,244(sp)
   8286c:	10045426 	beq	r2,zero,839c0 <___vfprintf_internal_r+0x1da0>
   82870:	1405c83a 	sub	r2,r2,r16
   82874:	d8802e15 	stw	r2,184(sp)
   82878:	1003cc16 	blt	r2,zero,837ac <___vfprintf_internal_r+0x1b8c>
   8287c:	df002783 	ldbu	fp,158(sp)
   82880:	d8802a15 	stw	r2,168(sp)
   82884:	dcc02d15 	stw	r19,180(sp)
   82888:	d8002915 	stw	zero,164(sp)
   8288c:	d8003215 	stw	zero,200(sp)
   82890:	003eb006 	br	82354 <__alt_data_end+0xfffa08d4>
   82894:	18c03fcc 	andi	r3,r3,255
   82898:	183f9b26 	beq	r3,zero,82708 <__alt_data_end+0xfffa0c88>
   8289c:	d9c02785 	stb	r7,158(sp)
   828a0:	003f9906 	br	82708 <__alt_data_end+0xfffa0c88>
   828a4:	18c03fcc 	andi	r3,r3,255
   828a8:	1805551e 	bne	r3,zero,83e00 <___vfprintf_internal_r+0x21e0>
   828ac:	01400274 	movhi	r5,9
   828b0:	2943b404 	addi	r5,r5,3792
   828b4:	d9403915 	stw	r5,228(sp)
   828b8:	9080080c 	andi	r2,r18,32
   828bc:	103fae1e 	bne	r2,zero,82778 <__alt_data_end+0xfffa0cf8>
   828c0:	9080040c 	andi	r2,r18,16
   828c4:	1002de26 	beq	r2,zero,83440 <___vfprintf_internal_r+0x1820>
   828c8:	d8c02d17 	ldw	r3,180(sp)
   828cc:	002d883a 	mov	r22,zero
   828d0:	1cc00017 	ldw	r19,0(r3)
   828d4:	18c00104 	addi	r3,r3,4
   828d8:	d8c02d15 	stw	r3,180(sp)
   828dc:	003fab06 	br	8278c <__alt_data_end+0xfffa0d0c>
   828e0:	38803fcc 	andi	r2,r7,255
   828e4:	1080201c 	xori	r2,r2,128
   828e8:	10bfe004 	addi	r2,r2,-128
   828ec:	1002d21e 	bne	r2,zero,83438 <___vfprintf_internal_r+0x1818>
   828f0:	00c00044 	movi	r3,1
   828f4:	01c00804 	movi	r7,32
   828f8:	ac400007 	ldb	r17,0(r21)
   828fc:	003d2906 	br	81da4 <__alt_data_end+0xfffa0324>
   82900:	94800054 	ori	r18,r18,1
   82904:	ac400007 	ldb	r17,0(r21)
   82908:	003d2606 	br	81da4 <__alt_data_end+0xfffa0324>
   8290c:	18c03fcc 	andi	r3,r3,255
   82910:	183e0526 	beq	r3,zero,82128 <__alt_data_end+0xfffa06a8>
   82914:	d9c02785 	stb	r7,158(sp)
   82918:	003e0306 	br	82128 <__alt_data_end+0xfffa06a8>
   8291c:	94801014 	ori	r18,r18,64
   82920:	ac400007 	ldb	r17,0(r21)
   82924:	003d1f06 	br	81da4 <__alt_data_end+0xfffa0324>
   82928:	ac400007 	ldb	r17,0(r21)
   8292c:	8a438726 	beq	r17,r9,8374c <___vfprintf_internal_r+0x1b2c>
   82930:	94800414 	ori	r18,r18,16
   82934:	003d1b06 	br	81da4 <__alt_data_end+0xfffa0324>
   82938:	18c03fcc 	andi	r3,r3,255
   8293c:	1805341e 	bne	r3,zero,83e10 <___vfprintf_internal_r+0x21f0>
   82940:	9080080c 	andi	r2,r18,32
   82944:	1002cd26 	beq	r2,zero,8347c <___vfprintf_internal_r+0x185c>
   82948:	d9402d17 	ldw	r5,180(sp)
   8294c:	d9002f17 	ldw	r4,188(sp)
   82950:	28800017 	ldw	r2,0(r5)
   82954:	2007d7fa 	srai	r3,r4,31
   82958:	29400104 	addi	r5,r5,4
   8295c:	d9402d15 	stw	r5,180(sp)
   82960:	11000015 	stw	r4,0(r2)
   82964:	10c00115 	stw	r3,4(r2)
   82968:	003ce506 	br	81d00 <__alt_data_end+0xfffa0280>
   8296c:	d8c02d17 	ldw	r3,180(sp)
   82970:	d9002d17 	ldw	r4,180(sp)
   82974:	d8002785 	stb	zero,158(sp)
   82978:	18800017 	ldw	r2,0(r3)
   8297c:	21000104 	addi	r4,r4,4
   82980:	00c00044 	movi	r3,1
   82984:	d8c02a15 	stw	r3,168(sp)
   82988:	d8801405 	stb	r2,80(sp)
   8298c:	d9002d15 	stw	r4,180(sp)
   82990:	d8c02e15 	stw	r3,184(sp)
   82994:	d8002915 	stw	zero,164(sp)
   82998:	d8003215 	stw	zero,200(sp)
   8299c:	dc001404 	addi	r16,sp,80
   829a0:	0039883a 	mov	fp,zero
   829a4:	003e7206 	br	82370 <__alt_data_end+0xfffa08f0>
   829a8:	01000274 	movhi	r4,9
   829ac:	2103b404 	addi	r4,r4,3792
   829b0:	0039883a 	mov	fp,zero
   829b4:	d9003915 	stw	r4,228(sp)
   829b8:	04401e04 	movi	r17,120
   829bc:	003f8206 	br	827c8 <__alt_data_end+0xfffa0d48>
   829c0:	18c03fcc 	andi	r3,r3,255
   829c4:	1805061e 	bne	r3,zero,83de0 <___vfprintf_internal_r+0x21c0>
   829c8:	883d9126 	beq	r17,zero,82010 <__alt_data_end+0xfffa0590>
   829cc:	00c00044 	movi	r3,1
   829d0:	d8c02a15 	stw	r3,168(sp)
   829d4:	dc401405 	stb	r17,80(sp)
   829d8:	d8002785 	stb	zero,158(sp)
   829dc:	003fec06 	br	82990 <__alt_data_end+0xfffa0f10>
   829e0:	01400274 	movhi	r5,9
   829e4:	2943b404 	addi	r5,r5,3792
   829e8:	d9403915 	stw	r5,228(sp)
   829ec:	d8c02d15 	stw	r3,180(sp)
   829f0:	1025883a 	mov	r18,r2
   829f4:	04401e04 	movi	r17,120
   829f8:	9d84b03a 	or	r2,r19,r22
   829fc:	1000fc1e 	bne	r2,zero,82df0 <___vfprintf_internal_r+0x11d0>
   82a00:	0039883a 	mov	fp,zero
   82a04:	00800084 	movi	r2,2
   82a08:	10803fcc 	andi	r2,r2,255
   82a0c:	00c00044 	movi	r3,1
   82a10:	10c20f26 	beq	r2,r3,83250 <___vfprintf_internal_r+0x1630>
   82a14:	00c00084 	movi	r3,2
   82a18:	10fd6326 	beq	r2,r3,81fa8 <__alt_data_end+0xfffa0528>
   82a1c:	003e2d06 	br	822d4 <__alt_data_end+0xfffa0854>
   82a20:	d8c02017 	ldw	r3,128(sp)
   82a24:	003e9306 	br	82474 <__alt_data_end+0xfffa09f4>
   82a28:	00801944 	movi	r2,101
   82a2c:	14407e0e 	bge	r2,r17,82c28 <___vfprintf_internal_r+0x1008>
   82a30:	d9003617 	ldw	r4,216(sp)
   82a34:	d9403817 	ldw	r5,224(sp)
   82a38:	000d883a 	mov	r6,zero
   82a3c:	000f883a 	mov	r7,zero
   82a40:	d8c03c15 	stw	r3,240(sp)
   82a44:	da003d15 	stw	r8,244(sp)
   82a48:	008cd9c0 	call	8cd9c <__eqdf2>
   82a4c:	d8c03c17 	ldw	r3,240(sp)
   82a50:	da003d17 	ldw	r8,244(sp)
   82a54:	1000f71e 	bne	r2,zero,82e34 <___vfprintf_internal_r+0x1214>
   82a58:	d8801f17 	ldw	r2,124(sp)
   82a5c:	01000274 	movhi	r4,9
   82a60:	2103bb04 	addi	r4,r4,3820
   82a64:	18c00044 	addi	r3,r3,1
   82a68:	10800044 	addi	r2,r2,1
   82a6c:	41000015 	stw	r4,0(r8)
   82a70:	01000044 	movi	r4,1
   82a74:	41000115 	stw	r4,4(r8)
   82a78:	d8c02015 	stw	r3,128(sp)
   82a7c:	d8801f15 	stw	r2,124(sp)
   82a80:	010001c4 	movi	r4,7
   82a84:	2082b816 	blt	r4,r2,83568 <___vfprintf_internal_r+0x1948>
   82a88:	42000204 	addi	r8,r8,8
   82a8c:	d8802617 	ldw	r2,152(sp)
   82a90:	d9403317 	ldw	r5,204(sp)
   82a94:	11400216 	blt	r2,r5,82aa0 <___vfprintf_internal_r+0xe80>
   82a98:	9080004c 	andi	r2,r18,1
   82a9c:	103ed526 	beq	r2,zero,825f4 <__alt_data_end+0xfffa0b74>
   82aa0:	d8803717 	ldw	r2,220(sp)
   82aa4:	d9003417 	ldw	r4,208(sp)
   82aa8:	d9403717 	ldw	r5,220(sp)
   82aac:	1887883a 	add	r3,r3,r2
   82ab0:	d8801f17 	ldw	r2,124(sp)
   82ab4:	41000015 	stw	r4,0(r8)
   82ab8:	41400115 	stw	r5,4(r8)
   82abc:	10800044 	addi	r2,r2,1
   82ac0:	d8c02015 	stw	r3,128(sp)
   82ac4:	d8801f15 	stw	r2,124(sp)
   82ac8:	010001c4 	movi	r4,7
   82acc:	20832916 	blt	r4,r2,83774 <___vfprintf_internal_r+0x1b54>
   82ad0:	42000204 	addi	r8,r8,8
   82ad4:	d8803317 	ldw	r2,204(sp)
   82ad8:	143fffc4 	addi	r16,r2,-1
   82adc:	043ec50e 	bge	zero,r16,825f4 <__alt_data_end+0xfffa0b74>
   82ae0:	04400404 	movi	r17,16
   82ae4:	d8801f17 	ldw	r2,124(sp)
   82ae8:	8c00880e 	bge	r17,r16,82d0c <___vfprintf_internal_r+0x10ec>
   82aec:	01400274 	movhi	r5,9
   82af0:	2943bb84 	addi	r5,r5,3822
   82af4:	d9402b15 	stw	r5,172(sp)
   82af8:	058001c4 	movi	r22,7
   82afc:	dcc02c17 	ldw	r19,176(sp)
   82b00:	00000306 	br	82b10 <___vfprintf_internal_r+0xef0>
   82b04:	42000204 	addi	r8,r8,8
   82b08:	843ffc04 	addi	r16,r16,-16
   82b0c:	8c00820e 	bge	r17,r16,82d18 <___vfprintf_internal_r+0x10f8>
   82b10:	18c00404 	addi	r3,r3,16
   82b14:	10800044 	addi	r2,r2,1
   82b18:	45000015 	stw	r20,0(r8)
   82b1c:	44400115 	stw	r17,4(r8)
   82b20:	d8c02015 	stw	r3,128(sp)
   82b24:	d8801f15 	stw	r2,124(sp)
   82b28:	b0bff60e 	bge	r22,r2,82b04 <__alt_data_end+0xfffa1084>
   82b2c:	d9801e04 	addi	r6,sp,120
   82b30:	b80b883a 	mov	r5,r23
   82b34:	9809883a 	mov	r4,r19
   82b38:	00892780 	call	89278 <__sprint_r>
   82b3c:	103d3a1e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   82b40:	d8c02017 	ldw	r3,128(sp)
   82b44:	d8801f17 	ldw	r2,124(sp)
   82b48:	da000404 	addi	r8,sp,16
   82b4c:	003fee06 	br	82b08 <__alt_data_end+0xfffa1088>
   82b50:	d9403117 	ldw	r5,196(sp)
   82b54:	d8802a17 	ldw	r2,168(sp)
   82b58:	28adc83a 	sub	r22,r5,r2
   82b5c:	05be630e 	bge	zero,r22,824ec <__alt_data_end+0xfffa0a6c>
   82b60:	07000404 	movi	fp,16
   82b64:	d8801f17 	ldw	r2,124(sp)
   82b68:	e5838f0e 	bge	fp,r22,839a8 <___vfprintf_internal_r+0x1d88>
   82b6c:	01400274 	movhi	r5,9
   82b70:	2943bb84 	addi	r5,r5,3822
   82b74:	dc403015 	stw	r17,192(sp)
   82b78:	d9402b15 	stw	r5,172(sp)
   82b7c:	b023883a 	mov	r17,r22
   82b80:	04c001c4 	movi	r19,7
   82b84:	a82d883a 	mov	r22,r21
   82b88:	902b883a 	mov	r21,r18
   82b8c:	8025883a 	mov	r18,r16
   82b90:	dc002c17 	ldw	r16,176(sp)
   82b94:	00000306 	br	82ba4 <___vfprintf_internal_r+0xf84>
   82b98:	8c7ffc04 	addi	r17,r17,-16
   82b9c:	42000204 	addi	r8,r8,8
   82ba0:	e440110e 	bge	fp,r17,82be8 <___vfprintf_internal_r+0xfc8>
   82ba4:	18c00404 	addi	r3,r3,16
   82ba8:	10800044 	addi	r2,r2,1
   82bac:	45000015 	stw	r20,0(r8)
   82bb0:	47000115 	stw	fp,4(r8)
   82bb4:	d8c02015 	stw	r3,128(sp)
   82bb8:	d8801f15 	stw	r2,124(sp)
   82bbc:	98bff60e 	bge	r19,r2,82b98 <__alt_data_end+0xfffa1118>
   82bc0:	d9801e04 	addi	r6,sp,120
   82bc4:	b80b883a 	mov	r5,r23
   82bc8:	8009883a 	mov	r4,r16
   82bcc:	00892780 	call	89278 <__sprint_r>
   82bd0:	103d151e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   82bd4:	8c7ffc04 	addi	r17,r17,-16
   82bd8:	d8c02017 	ldw	r3,128(sp)
   82bdc:	d8801f17 	ldw	r2,124(sp)
   82be0:	da000404 	addi	r8,sp,16
   82be4:	e47fef16 	blt	fp,r17,82ba4 <__alt_data_end+0xfffa1124>
   82be8:	9021883a 	mov	r16,r18
   82bec:	a825883a 	mov	r18,r21
   82bf0:	b02b883a 	mov	r21,r22
   82bf4:	882d883a 	mov	r22,r17
   82bf8:	dc403017 	ldw	r17,192(sp)
   82bfc:	d9002b17 	ldw	r4,172(sp)
   82c00:	1d87883a 	add	r3,r3,r22
   82c04:	10800044 	addi	r2,r2,1
   82c08:	41000015 	stw	r4,0(r8)
   82c0c:	45800115 	stw	r22,4(r8)
   82c10:	d8c02015 	stw	r3,128(sp)
   82c14:	d8801f15 	stw	r2,124(sp)
   82c18:	010001c4 	movi	r4,7
   82c1c:	20818e16 	blt	r4,r2,83258 <___vfprintf_internal_r+0x1638>
   82c20:	42000204 	addi	r8,r8,8
   82c24:	003e3106 	br	824ec <__alt_data_end+0xfffa0a6c>
   82c28:	d9403317 	ldw	r5,204(sp)
   82c2c:	00800044 	movi	r2,1
   82c30:	18c00044 	addi	r3,r3,1
   82c34:	1141530e 	bge	r2,r5,83184 <___vfprintf_internal_r+0x1564>
   82c38:	dc401f17 	ldw	r17,124(sp)
   82c3c:	00800044 	movi	r2,1
   82c40:	40800115 	stw	r2,4(r8)
   82c44:	8c400044 	addi	r17,r17,1
   82c48:	44000015 	stw	r16,0(r8)
   82c4c:	d8c02015 	stw	r3,128(sp)
   82c50:	dc401f15 	stw	r17,124(sp)
   82c54:	008001c4 	movi	r2,7
   82c58:	14416b16 	blt	r2,r17,83208 <___vfprintf_internal_r+0x15e8>
   82c5c:	42000204 	addi	r8,r8,8
   82c60:	d8803717 	ldw	r2,220(sp)
   82c64:	d9003417 	ldw	r4,208(sp)
   82c68:	8c400044 	addi	r17,r17,1
   82c6c:	10c7883a 	add	r3,r2,r3
   82c70:	40800115 	stw	r2,4(r8)
   82c74:	41000015 	stw	r4,0(r8)
   82c78:	d8c02015 	stw	r3,128(sp)
   82c7c:	dc401f15 	stw	r17,124(sp)
   82c80:	008001c4 	movi	r2,7
   82c84:	14416916 	blt	r2,r17,8322c <___vfprintf_internal_r+0x160c>
   82c88:	45800204 	addi	r22,r8,8
   82c8c:	d9003617 	ldw	r4,216(sp)
   82c90:	d9403817 	ldw	r5,224(sp)
   82c94:	000d883a 	mov	r6,zero
   82c98:	000f883a 	mov	r7,zero
   82c9c:	d8c03c15 	stw	r3,240(sp)
   82ca0:	008cd9c0 	call	8cd9c <__eqdf2>
   82ca4:	d8c03c17 	ldw	r3,240(sp)
   82ca8:	1000bc26 	beq	r2,zero,82f9c <___vfprintf_internal_r+0x137c>
   82cac:	d9403317 	ldw	r5,204(sp)
   82cb0:	84000044 	addi	r16,r16,1
   82cb4:	8c400044 	addi	r17,r17,1
   82cb8:	28bfffc4 	addi	r2,r5,-1
   82cbc:	1887883a 	add	r3,r3,r2
   82cc0:	b0800115 	stw	r2,4(r22)
   82cc4:	b4000015 	stw	r16,0(r22)
   82cc8:	d8c02015 	stw	r3,128(sp)
   82ccc:	dc401f15 	stw	r17,124(sp)
   82cd0:	008001c4 	movi	r2,7
   82cd4:	14414316 	blt	r2,r17,831e4 <___vfprintf_internal_r+0x15c4>
   82cd8:	b5800204 	addi	r22,r22,8
   82cdc:	d9003a17 	ldw	r4,232(sp)
   82ce0:	df0022c4 	addi	fp,sp,139
   82ce4:	8c400044 	addi	r17,r17,1
   82ce8:	20c7883a 	add	r3,r4,r3
   82cec:	b7000015 	stw	fp,0(r22)
   82cf0:	b1000115 	stw	r4,4(r22)
   82cf4:	d8c02015 	stw	r3,128(sp)
   82cf8:	dc401f15 	stw	r17,124(sp)
   82cfc:	008001c4 	movi	r2,7
   82d00:	14400e16 	blt	r2,r17,82d3c <___vfprintf_internal_r+0x111c>
   82d04:	b2000204 	addi	r8,r22,8
   82d08:	003e3a06 	br	825f4 <__alt_data_end+0xfffa0b74>
   82d0c:	01000274 	movhi	r4,9
   82d10:	2103bb84 	addi	r4,r4,3822
   82d14:	d9002b15 	stw	r4,172(sp)
   82d18:	d9002b17 	ldw	r4,172(sp)
   82d1c:	1c07883a 	add	r3,r3,r16
   82d20:	44000115 	stw	r16,4(r8)
   82d24:	41000015 	stw	r4,0(r8)
   82d28:	10800044 	addi	r2,r2,1
   82d2c:	d8c02015 	stw	r3,128(sp)
   82d30:	d8801f15 	stw	r2,124(sp)
   82d34:	010001c4 	movi	r4,7
   82d38:	20be2d0e 	bge	r4,r2,825f0 <__alt_data_end+0xfffa0b70>
   82d3c:	d9002c17 	ldw	r4,176(sp)
   82d40:	d9801e04 	addi	r6,sp,120
   82d44:	b80b883a 	mov	r5,r23
   82d48:	00892780 	call	89278 <__sprint_r>
   82d4c:	103cb61e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   82d50:	d8c02017 	ldw	r3,128(sp)
   82d54:	da000404 	addi	r8,sp,16
   82d58:	003e2606 	br	825f4 <__alt_data_end+0xfffa0b74>
   82d5c:	d9002c17 	ldw	r4,176(sp)
   82d60:	d9801e04 	addi	r6,sp,120
   82d64:	b80b883a 	mov	r5,r23
   82d68:	00892780 	call	89278 <__sprint_r>
   82d6c:	103e5d26 	beq	r2,zero,826e4 <__alt_data_end+0xfffa0c64>
   82d70:	003cad06 	br	82028 <__alt_data_end+0xfffa05a8>
   82d74:	d9002c17 	ldw	r4,176(sp)
   82d78:	d9801e04 	addi	r6,sp,120
   82d7c:	b80b883a 	mov	r5,r23
   82d80:	00892780 	call	89278 <__sprint_r>
   82d84:	103ca81e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   82d88:	d8c02017 	ldw	r3,128(sp)
   82d8c:	da000404 	addi	r8,sp,16
   82d90:	003e0b06 	br	825c0 <__alt_data_end+0xfffa0b40>
   82d94:	d9002c17 	ldw	r4,176(sp)
   82d98:	d9801e04 	addi	r6,sp,120
   82d9c:	b80b883a 	mov	r5,r23
   82da0:	00892780 	call	89278 <__sprint_r>
   82da4:	103ca01e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   82da8:	d8c02017 	ldw	r3,128(sp)
   82dac:	da000404 	addi	r8,sp,16
   82db0:	003dbd06 	br	824a8 <__alt_data_end+0xfffa0a28>
   82db4:	d9002c17 	ldw	r4,176(sp)
   82db8:	d9801e04 	addi	r6,sp,120
   82dbc:	b80b883a 	mov	r5,r23
   82dc0:	00892780 	call	89278 <__sprint_r>
   82dc4:	103c981e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   82dc8:	d8c02017 	ldw	r3,128(sp)
   82dcc:	da000404 	addi	r8,sp,16
   82dd0:	003dc306 	br	824e0 <__alt_data_end+0xfffa0a60>
   82dd4:	d8802917 	ldw	r2,164(sp)
   82dd8:	d8002785 	stb	zero,158(sp)
   82ddc:	103f0616 	blt	r2,zero,829f8 <__alt_data_end+0xfffa0f78>
   82de0:	00ffdfc4 	movi	r3,-129
   82de4:	9d84b03a 	or	r2,r19,r22
   82de8:	90e4703a 	and	r18,r18,r3
   82dec:	103c6b26 	beq	r2,zero,81f9c <__alt_data_end+0xfffa051c>
   82df0:	0039883a 	mov	fp,zero
   82df4:	003e7406 	br	827c8 <__alt_data_end+0xfffa0d48>
   82df8:	9080040c 	andi	r2,r18,16
   82dfc:	1001b326 	beq	r2,zero,834cc <___vfprintf_internal_r+0x18ac>
   82e00:	d9002d17 	ldw	r4,180(sp)
   82e04:	d9402917 	ldw	r5,164(sp)
   82e08:	d8002785 	stb	zero,158(sp)
   82e0c:	20800104 	addi	r2,r4,4
   82e10:	24c00017 	ldw	r19,0(r4)
   82e14:	002d883a 	mov	r22,zero
   82e18:	2801b516 	blt	r5,zero,834f0 <___vfprintf_internal_r+0x18d0>
   82e1c:	00ffdfc4 	movi	r3,-129
   82e20:	d8802d15 	stw	r2,180(sp)
   82e24:	90e4703a 	and	r18,r18,r3
   82e28:	983d2726 	beq	r19,zero,822c8 <__alt_data_end+0xfffa0848>
   82e2c:	0039883a 	mov	fp,zero
   82e30:	003d2a06 	br	822dc <__alt_data_end+0xfffa085c>
   82e34:	dc402617 	ldw	r17,152(sp)
   82e38:	0441d30e 	bge	zero,r17,83588 <___vfprintf_internal_r+0x1968>
   82e3c:	dc403217 	ldw	r17,200(sp)
   82e40:	d8803317 	ldw	r2,204(sp)
   82e44:	1440010e 	bge	r2,r17,82e4c <___vfprintf_internal_r+0x122c>
   82e48:	1023883a 	mov	r17,r2
   82e4c:	04400a0e 	bge	zero,r17,82e78 <___vfprintf_internal_r+0x1258>
   82e50:	d8801f17 	ldw	r2,124(sp)
   82e54:	1c47883a 	add	r3,r3,r17
   82e58:	44000015 	stw	r16,0(r8)
   82e5c:	10800044 	addi	r2,r2,1
   82e60:	44400115 	stw	r17,4(r8)
   82e64:	d8c02015 	stw	r3,128(sp)
   82e68:	d8801f15 	stw	r2,124(sp)
   82e6c:	010001c4 	movi	r4,7
   82e70:	20826516 	blt	r4,r2,83808 <___vfprintf_internal_r+0x1be8>
   82e74:	42000204 	addi	r8,r8,8
   82e78:	88026116 	blt	r17,zero,83800 <___vfprintf_internal_r+0x1be0>
   82e7c:	d9003217 	ldw	r4,200(sp)
   82e80:	2463c83a 	sub	r17,r4,r17
   82e84:	04407b0e 	bge	zero,r17,83074 <___vfprintf_internal_r+0x1454>
   82e88:	05800404 	movi	r22,16
   82e8c:	d8801f17 	ldw	r2,124(sp)
   82e90:	b4419d0e 	bge	r22,r17,83508 <___vfprintf_internal_r+0x18e8>
   82e94:	01000274 	movhi	r4,9
   82e98:	2103bb84 	addi	r4,r4,3822
   82e9c:	d9002b15 	stw	r4,172(sp)
   82ea0:	070001c4 	movi	fp,7
   82ea4:	dcc02c17 	ldw	r19,176(sp)
   82ea8:	00000306 	br	82eb8 <___vfprintf_internal_r+0x1298>
   82eac:	42000204 	addi	r8,r8,8
   82eb0:	8c7ffc04 	addi	r17,r17,-16
   82eb4:	b441970e 	bge	r22,r17,83514 <___vfprintf_internal_r+0x18f4>
   82eb8:	18c00404 	addi	r3,r3,16
   82ebc:	10800044 	addi	r2,r2,1
   82ec0:	45000015 	stw	r20,0(r8)
   82ec4:	45800115 	stw	r22,4(r8)
   82ec8:	d8c02015 	stw	r3,128(sp)
   82ecc:	d8801f15 	stw	r2,124(sp)
   82ed0:	e0bff60e 	bge	fp,r2,82eac <__alt_data_end+0xfffa142c>
   82ed4:	d9801e04 	addi	r6,sp,120
   82ed8:	b80b883a 	mov	r5,r23
   82edc:	9809883a 	mov	r4,r19
   82ee0:	00892780 	call	89278 <__sprint_r>
   82ee4:	103c501e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   82ee8:	d8c02017 	ldw	r3,128(sp)
   82eec:	d8801f17 	ldw	r2,124(sp)
   82ef0:	da000404 	addi	r8,sp,16
   82ef4:	003fee06 	br	82eb0 <__alt_data_end+0xfffa1430>
   82ef8:	d9002c17 	ldw	r4,176(sp)
   82efc:	d9801e04 	addi	r6,sp,120
   82f00:	b80b883a 	mov	r5,r23
   82f04:	00892780 	call	89278 <__sprint_r>
   82f08:	103c471e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   82f0c:	d8c02017 	ldw	r3,128(sp)
   82f10:	df002787 	ldb	fp,158(sp)
   82f14:	da000404 	addi	r8,sp,16
   82f18:	003d5606 	br	82474 <__alt_data_end+0xfffa09f4>
   82f1c:	9080040c 	andi	r2,r18,16
   82f20:	10016126 	beq	r2,zero,834a8 <___vfprintf_internal_r+0x1888>
   82f24:	d8802d17 	ldw	r2,180(sp)
   82f28:	14c00017 	ldw	r19,0(r2)
   82f2c:	10800104 	addi	r2,r2,4
   82f30:	d8802d15 	stw	r2,180(sp)
   82f34:	982dd7fa 	srai	r22,r19,31
   82f38:	b005883a 	mov	r2,r22
   82f3c:	003c8206 	br	82148 <__alt_data_end+0xfffa06c8>
   82f40:	9080040c 	andi	r2,r18,16
   82f44:	10003526 	beq	r2,zero,8301c <___vfprintf_internal_r+0x13fc>
   82f48:	d9402d17 	ldw	r5,180(sp)
   82f4c:	d8c02917 	ldw	r3,164(sp)
   82f50:	d8002785 	stb	zero,158(sp)
   82f54:	28800104 	addi	r2,r5,4
   82f58:	2cc00017 	ldw	r19,0(r5)
   82f5c:	002d883a 	mov	r22,zero
   82f60:	18003716 	blt	r3,zero,83040 <___vfprintf_internal_r+0x1420>
   82f64:	00ffdfc4 	movi	r3,-129
   82f68:	d8802d15 	stw	r2,180(sp)
   82f6c:	90e4703a 	and	r18,r18,r3
   82f70:	0039883a 	mov	fp,zero
   82f74:	983df326 	beq	r19,zero,82744 <__alt_data_end+0xfffa0cc4>
   82f78:	00800244 	movi	r2,9
   82f7c:	14fc7b36 	bltu	r2,r19,8216c <__alt_data_end+0xfffa06ec>
   82f80:	d8c02817 	ldw	r3,160(sp)
   82f84:	dc001dc4 	addi	r16,sp,119
   82f88:	9cc00c04 	addi	r19,r19,48
   82f8c:	1c07c83a 	sub	r3,r3,r16
   82f90:	dcc01dc5 	stb	r19,119(sp)
   82f94:	d8c02e15 	stw	r3,184(sp)
   82f98:	003ce806 	br	8233c <__alt_data_end+0xfffa08bc>
   82f9c:	d8803317 	ldw	r2,204(sp)
   82fa0:	143fffc4 	addi	r16,r2,-1
   82fa4:	043f4d0e 	bge	zero,r16,82cdc <__alt_data_end+0xfffa125c>
   82fa8:	07000404 	movi	fp,16
   82fac:	e400810e 	bge	fp,r16,831b4 <___vfprintf_internal_r+0x1594>
   82fb0:	01400274 	movhi	r5,9
   82fb4:	2943bb84 	addi	r5,r5,3822
   82fb8:	d9402b15 	stw	r5,172(sp)
   82fbc:	01c001c4 	movi	r7,7
   82fc0:	dcc02c17 	ldw	r19,176(sp)
   82fc4:	00000306 	br	82fd4 <___vfprintf_internal_r+0x13b4>
   82fc8:	b5800204 	addi	r22,r22,8
   82fcc:	843ffc04 	addi	r16,r16,-16
   82fd0:	e4007b0e 	bge	fp,r16,831c0 <___vfprintf_internal_r+0x15a0>
   82fd4:	18c00404 	addi	r3,r3,16
   82fd8:	8c400044 	addi	r17,r17,1
   82fdc:	b5000015 	stw	r20,0(r22)
   82fe0:	b7000115 	stw	fp,4(r22)
   82fe4:	d8c02015 	stw	r3,128(sp)
   82fe8:	dc401f15 	stw	r17,124(sp)
   82fec:	3c7ff60e 	bge	r7,r17,82fc8 <__alt_data_end+0xfffa1548>
   82ff0:	d9801e04 	addi	r6,sp,120
   82ff4:	b80b883a 	mov	r5,r23
   82ff8:	9809883a 	mov	r4,r19
   82ffc:	d9c03c15 	stw	r7,240(sp)
   83000:	00892780 	call	89278 <__sprint_r>
   83004:	d9c03c17 	ldw	r7,240(sp)
   83008:	103c071e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   8300c:	d8c02017 	ldw	r3,128(sp)
   83010:	dc401f17 	ldw	r17,124(sp)
   83014:	dd800404 	addi	r22,sp,16
   83018:	003fec06 	br	82fcc <__alt_data_end+0xfffa154c>
   8301c:	9080100c 	andi	r2,r18,64
   83020:	d8002785 	stb	zero,158(sp)
   83024:	10010e26 	beq	r2,zero,83460 <___vfprintf_internal_r+0x1840>
   83028:	d9002d17 	ldw	r4,180(sp)
   8302c:	d9402917 	ldw	r5,164(sp)
   83030:	002d883a 	mov	r22,zero
   83034:	20800104 	addi	r2,r4,4
   83038:	24c0000b 	ldhu	r19,0(r4)
   8303c:	283fc90e 	bge	r5,zero,82f64 <__alt_data_end+0xfffa14e4>
   83040:	d8802d15 	stw	r2,180(sp)
   83044:	0039883a 	mov	fp,zero
   83048:	9d84b03a 	or	r2,r19,r22
   8304c:	103c461e 	bne	r2,zero,82168 <__alt_data_end+0xfffa06e8>
   83050:	00800044 	movi	r2,1
   83054:	003e6c06 	br	82a08 <__alt_data_end+0xfffa0f88>
   83058:	d9002c17 	ldw	r4,176(sp)
   8305c:	d9801e04 	addi	r6,sp,120
   83060:	b80b883a 	mov	r5,r23
   83064:	00892780 	call	89278 <__sprint_r>
   83068:	103bef1e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   8306c:	d8c02017 	ldw	r3,128(sp)
   83070:	da000404 	addi	r8,sp,16
   83074:	d9003217 	ldw	r4,200(sp)
   83078:	d8802617 	ldw	r2,152(sp)
   8307c:	d9403317 	ldw	r5,204(sp)
   83080:	8123883a 	add	r17,r16,r4
   83084:	11400216 	blt	r2,r5,83090 <___vfprintf_internal_r+0x1470>
   83088:	9100004c 	andi	r4,r18,1
   8308c:	20000d26 	beq	r4,zero,830c4 <___vfprintf_internal_r+0x14a4>
   83090:	d9003717 	ldw	r4,220(sp)
   83094:	d9403417 	ldw	r5,208(sp)
   83098:	1907883a 	add	r3,r3,r4
   8309c:	d9001f17 	ldw	r4,124(sp)
   830a0:	41400015 	stw	r5,0(r8)
   830a4:	d9403717 	ldw	r5,220(sp)
   830a8:	21000044 	addi	r4,r4,1
   830ac:	d8c02015 	stw	r3,128(sp)
   830b0:	41400115 	stw	r5,4(r8)
   830b4:	d9001f15 	stw	r4,124(sp)
   830b8:	014001c4 	movi	r5,7
   830bc:	2901e816 	blt	r5,r4,83860 <___vfprintf_internal_r+0x1c40>
   830c0:	42000204 	addi	r8,r8,8
   830c4:	d9003317 	ldw	r4,204(sp)
   830c8:	8121883a 	add	r16,r16,r4
   830cc:	2085c83a 	sub	r2,r4,r2
   830d0:	8461c83a 	sub	r16,r16,r17
   830d4:	1400010e 	bge	r2,r16,830dc <___vfprintf_internal_r+0x14bc>
   830d8:	1021883a 	mov	r16,r2
   830dc:	04000a0e 	bge	zero,r16,83108 <___vfprintf_internal_r+0x14e8>
   830e0:	d9001f17 	ldw	r4,124(sp)
   830e4:	1c07883a 	add	r3,r3,r16
   830e8:	44400015 	stw	r17,0(r8)
   830ec:	21000044 	addi	r4,r4,1
   830f0:	44000115 	stw	r16,4(r8)
   830f4:	d8c02015 	stw	r3,128(sp)
   830f8:	d9001f15 	stw	r4,124(sp)
   830fc:	014001c4 	movi	r5,7
   83100:	2901fb16 	blt	r5,r4,838f0 <___vfprintf_internal_r+0x1cd0>
   83104:	42000204 	addi	r8,r8,8
   83108:	8001f716 	blt	r16,zero,838e8 <___vfprintf_internal_r+0x1cc8>
   8310c:	1421c83a 	sub	r16,r2,r16
   83110:	043d380e 	bge	zero,r16,825f4 <__alt_data_end+0xfffa0b74>
   83114:	04400404 	movi	r17,16
   83118:	d8801f17 	ldw	r2,124(sp)
   8311c:	8c3efb0e 	bge	r17,r16,82d0c <__alt_data_end+0xfffa128c>
   83120:	01400274 	movhi	r5,9
   83124:	2943bb84 	addi	r5,r5,3822
   83128:	d9402b15 	stw	r5,172(sp)
   8312c:	058001c4 	movi	r22,7
   83130:	dcc02c17 	ldw	r19,176(sp)
   83134:	00000306 	br	83144 <___vfprintf_internal_r+0x1524>
   83138:	42000204 	addi	r8,r8,8
   8313c:	843ffc04 	addi	r16,r16,-16
   83140:	8c3ef50e 	bge	r17,r16,82d18 <__alt_data_end+0xfffa1298>
   83144:	18c00404 	addi	r3,r3,16
   83148:	10800044 	addi	r2,r2,1
   8314c:	45000015 	stw	r20,0(r8)
   83150:	44400115 	stw	r17,4(r8)
   83154:	d8c02015 	stw	r3,128(sp)
   83158:	d8801f15 	stw	r2,124(sp)
   8315c:	b0bff60e 	bge	r22,r2,83138 <__alt_data_end+0xfffa16b8>
   83160:	d9801e04 	addi	r6,sp,120
   83164:	b80b883a 	mov	r5,r23
   83168:	9809883a 	mov	r4,r19
   8316c:	00892780 	call	89278 <__sprint_r>
   83170:	103bad1e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   83174:	d8c02017 	ldw	r3,128(sp)
   83178:	d8801f17 	ldw	r2,124(sp)
   8317c:	da000404 	addi	r8,sp,16
   83180:	003fee06 	br	8313c <__alt_data_end+0xfffa16bc>
   83184:	9088703a 	and	r4,r18,r2
   83188:	203eab1e 	bne	r4,zero,82c38 <__alt_data_end+0xfffa11b8>
   8318c:	dc401f17 	ldw	r17,124(sp)
   83190:	40800115 	stw	r2,4(r8)
   83194:	44000015 	stw	r16,0(r8)
   83198:	8c400044 	addi	r17,r17,1
   8319c:	d8c02015 	stw	r3,128(sp)
   831a0:	dc401f15 	stw	r17,124(sp)
   831a4:	008001c4 	movi	r2,7
   831a8:	14400e16 	blt	r2,r17,831e4 <___vfprintf_internal_r+0x15c4>
   831ac:	45800204 	addi	r22,r8,8
   831b0:	003eca06 	br	82cdc <__alt_data_end+0xfffa125c>
   831b4:	01000274 	movhi	r4,9
   831b8:	2103bb84 	addi	r4,r4,3822
   831bc:	d9002b15 	stw	r4,172(sp)
   831c0:	d8802b17 	ldw	r2,172(sp)
   831c4:	1c07883a 	add	r3,r3,r16
   831c8:	8c400044 	addi	r17,r17,1
   831cc:	b0800015 	stw	r2,0(r22)
   831d0:	b4000115 	stw	r16,4(r22)
   831d4:	d8c02015 	stw	r3,128(sp)
   831d8:	dc401f15 	stw	r17,124(sp)
   831dc:	008001c4 	movi	r2,7
   831e0:	147ebd0e 	bge	r2,r17,82cd8 <__alt_data_end+0xfffa1258>
   831e4:	d9002c17 	ldw	r4,176(sp)
   831e8:	d9801e04 	addi	r6,sp,120
   831ec:	b80b883a 	mov	r5,r23
   831f0:	00892780 	call	89278 <__sprint_r>
   831f4:	103b8c1e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   831f8:	d8c02017 	ldw	r3,128(sp)
   831fc:	dc401f17 	ldw	r17,124(sp)
   83200:	dd800404 	addi	r22,sp,16
   83204:	003eb506 	br	82cdc <__alt_data_end+0xfffa125c>
   83208:	d9002c17 	ldw	r4,176(sp)
   8320c:	d9801e04 	addi	r6,sp,120
   83210:	b80b883a 	mov	r5,r23
   83214:	00892780 	call	89278 <__sprint_r>
   83218:	103b831e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   8321c:	d8c02017 	ldw	r3,128(sp)
   83220:	dc401f17 	ldw	r17,124(sp)
   83224:	da000404 	addi	r8,sp,16
   83228:	003e8d06 	br	82c60 <__alt_data_end+0xfffa11e0>
   8322c:	d9002c17 	ldw	r4,176(sp)
   83230:	d9801e04 	addi	r6,sp,120
   83234:	b80b883a 	mov	r5,r23
   83238:	00892780 	call	89278 <__sprint_r>
   8323c:	103b7a1e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   83240:	d8c02017 	ldw	r3,128(sp)
   83244:	dc401f17 	ldw	r17,124(sp)
   83248:	dd800404 	addi	r22,sp,16
   8324c:	003e8f06 	br	82c8c <__alt_data_end+0xfffa120c>
   83250:	0027883a 	mov	r19,zero
   83254:	003f4a06 	br	82f80 <__alt_data_end+0xfffa1500>
   83258:	d9002c17 	ldw	r4,176(sp)
   8325c:	d9801e04 	addi	r6,sp,120
   83260:	b80b883a 	mov	r5,r23
   83264:	00892780 	call	89278 <__sprint_r>
   83268:	103b6f1e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   8326c:	d8c02017 	ldw	r3,128(sp)
   83270:	da000404 	addi	r8,sp,16
   83274:	003c9d06 	br	824ec <__alt_data_end+0xfffa0a6c>
   83278:	04e7c83a 	sub	r19,zero,r19
   8327c:	9804c03a 	cmpne	r2,r19,zero
   83280:	05adc83a 	sub	r22,zero,r22
   83284:	b0adc83a 	sub	r22,r22,r2
   83288:	d8802917 	ldw	r2,164(sp)
   8328c:	07000b44 	movi	fp,45
   83290:	df002785 	stb	fp,158(sp)
   83294:	10017b16 	blt	r2,zero,83884 <___vfprintf_internal_r+0x1c64>
   83298:	00bfdfc4 	movi	r2,-129
   8329c:	90a4703a 	and	r18,r18,r2
   832a0:	003bb106 	br	82168 <__alt_data_end+0xfffa06e8>
   832a4:	d9003617 	ldw	r4,216(sp)
   832a8:	d9403817 	ldw	r5,224(sp)
   832ac:	da003d15 	stw	r8,244(sp)
   832b0:	0088e9c0 	call	88e9c <__fpclassifyd>
   832b4:	da003d17 	ldw	r8,244(sp)
   832b8:	1000f026 	beq	r2,zero,8367c <___vfprintf_internal_r+0x1a5c>
   832bc:	d9002917 	ldw	r4,164(sp)
   832c0:	05bff7c4 	movi	r22,-33
   832c4:	00bfffc4 	movi	r2,-1
   832c8:	8dac703a 	and	r22,r17,r22
   832cc:	20820026 	beq	r4,r2,83ad0 <___vfprintf_internal_r+0x1eb0>
   832d0:	008011c4 	movi	r2,71
   832d4:	b081f726 	beq	r22,r2,83ab4 <___vfprintf_internal_r+0x1e94>
   832d8:	d9003817 	ldw	r4,224(sp)
   832dc:	90c04014 	ori	r3,r18,256
   832e0:	d8c02b15 	stw	r3,172(sp)
   832e4:	20021516 	blt	r4,zero,83b3c <___vfprintf_internal_r+0x1f1c>
   832e8:	dcc03817 	ldw	r19,224(sp)
   832ec:	d8002a05 	stb	zero,168(sp)
   832f0:	00801984 	movi	r2,102
   832f4:	8881f926 	beq	r17,r2,83adc <___vfprintf_internal_r+0x1ebc>
   832f8:	00801184 	movi	r2,70
   832fc:	88821c26 	beq	r17,r2,83b70 <___vfprintf_internal_r+0x1f50>
   83300:	00801144 	movi	r2,69
   83304:	b081ef26 	beq	r22,r2,83ac4 <___vfprintf_internal_r+0x1ea4>
   83308:	d8c02917 	ldw	r3,164(sp)
   8330c:	d8802104 	addi	r2,sp,132
   83310:	d8800315 	stw	r2,12(sp)
   83314:	d9403617 	ldw	r5,216(sp)
   83318:	d8802504 	addi	r2,sp,148
   8331c:	d9002c17 	ldw	r4,176(sp)
   83320:	d8800215 	stw	r2,8(sp)
   83324:	d8802604 	addi	r2,sp,152
   83328:	d8c00015 	stw	r3,0(sp)
   8332c:	d8800115 	stw	r2,4(sp)
   83330:	01c00084 	movi	r7,2
   83334:	980d883a 	mov	r6,r19
   83338:	d8c03c15 	stw	r3,240(sp)
   8333c:	da003d15 	stw	r8,244(sp)
   83340:	00842440 	call	84244 <_dtoa_r>
   83344:	1021883a 	mov	r16,r2
   83348:	008019c4 	movi	r2,103
   8334c:	d8c03c17 	ldw	r3,240(sp)
   83350:	da003d17 	ldw	r8,244(sp)
   83354:	88817126 	beq	r17,r2,8391c <___vfprintf_internal_r+0x1cfc>
   83358:	008011c4 	movi	r2,71
   8335c:	88829226 	beq	r17,r2,83da8 <___vfprintf_internal_r+0x2188>
   83360:	80f9883a 	add	fp,r16,r3
   83364:	d9003617 	ldw	r4,216(sp)
   83368:	000d883a 	mov	r6,zero
   8336c:	000f883a 	mov	r7,zero
   83370:	980b883a 	mov	r5,r19
   83374:	da003d15 	stw	r8,244(sp)
   83378:	008cd9c0 	call	8cd9c <__eqdf2>
   8337c:	da003d17 	ldw	r8,244(sp)
   83380:	10018d26 	beq	r2,zero,839b8 <___vfprintf_internal_r+0x1d98>
   83384:	d8802117 	ldw	r2,132(sp)
   83388:	1700062e 	bgeu	r2,fp,833a4 <___vfprintf_internal_r+0x1784>
   8338c:	01000c04 	movi	r4,48
   83390:	10c00044 	addi	r3,r2,1
   83394:	d8c02115 	stw	r3,132(sp)
   83398:	11000005 	stb	r4,0(r2)
   8339c:	d8802117 	ldw	r2,132(sp)
   833a0:	173ffb36 	bltu	r2,fp,83390 <__alt_data_end+0xfffa1910>
   833a4:	1405c83a 	sub	r2,r2,r16
   833a8:	d8803315 	stw	r2,204(sp)
   833ac:	008011c4 	movi	r2,71
   833b0:	b0817626 	beq	r22,r2,8398c <___vfprintf_internal_r+0x1d6c>
   833b4:	00801944 	movi	r2,101
   833b8:	1442810e 	bge	r2,r17,83dc0 <___vfprintf_internal_r+0x21a0>
   833bc:	d8c02617 	ldw	r3,152(sp)
   833c0:	00801984 	movi	r2,102
   833c4:	d8c03215 	stw	r3,200(sp)
   833c8:	8881fe26 	beq	r17,r2,83bc4 <___vfprintf_internal_r+0x1fa4>
   833cc:	d8c03217 	ldw	r3,200(sp)
   833d0:	d9003317 	ldw	r4,204(sp)
   833d4:	1901dd16 	blt	r3,r4,83b4c <___vfprintf_internal_r+0x1f2c>
   833d8:	9480004c 	andi	r18,r18,1
   833dc:	90022b1e 	bne	r18,zero,83c8c <___vfprintf_internal_r+0x206c>
   833e0:	1805883a 	mov	r2,r3
   833e4:	18028016 	blt	r3,zero,83de8 <___vfprintf_internal_r+0x21c8>
   833e8:	d8c03217 	ldw	r3,200(sp)
   833ec:	044019c4 	movi	r17,103
   833f0:	d8c02e15 	stw	r3,184(sp)
   833f4:	df002a07 	ldb	fp,168(sp)
   833f8:	e001531e 	bne	fp,zero,83948 <___vfprintf_internal_r+0x1d28>
   833fc:	df002783 	ldbu	fp,158(sp)
   83400:	d8802a15 	stw	r2,168(sp)
   83404:	dc802b17 	ldw	r18,172(sp)
   83408:	d8002915 	stw	zero,164(sp)
   8340c:	003bd106 	br	82354 <__alt_data_end+0xfffa08d4>
   83410:	d8802d17 	ldw	r2,180(sp)
   83414:	d8c02d17 	ldw	r3,180(sp)
   83418:	d9002d17 	ldw	r4,180(sp)
   8341c:	10800017 	ldw	r2,0(r2)
   83420:	18c00117 	ldw	r3,4(r3)
   83424:	21000204 	addi	r4,r4,8
   83428:	d8803615 	stw	r2,216(sp)
   8342c:	d8c03815 	stw	r3,224(sp)
   83430:	d9002d15 	stw	r4,180(sp)
   83434:	003b7506 	br	8220c <__alt_data_end+0xfffa078c>
   83438:	ac400007 	ldb	r17,0(r21)
   8343c:	003a5906 	br	81da4 <__alt_data_end+0xfffa0324>
   83440:	9080100c 	andi	r2,r18,64
   83444:	1000a826 	beq	r2,zero,836e8 <___vfprintf_internal_r+0x1ac8>
   83448:	d9002d17 	ldw	r4,180(sp)
   8344c:	002d883a 	mov	r22,zero
   83450:	24c0000b 	ldhu	r19,0(r4)
   83454:	21000104 	addi	r4,r4,4
   83458:	d9002d15 	stw	r4,180(sp)
   8345c:	003ccb06 	br	8278c <__alt_data_end+0xfffa0d0c>
   83460:	d8c02d17 	ldw	r3,180(sp)
   83464:	d9002917 	ldw	r4,164(sp)
   83468:	002d883a 	mov	r22,zero
   8346c:	18800104 	addi	r2,r3,4
   83470:	1cc00017 	ldw	r19,0(r3)
   83474:	203ebb0e 	bge	r4,zero,82f64 <__alt_data_end+0xfffa14e4>
   83478:	003ef106 	br	83040 <__alt_data_end+0xfffa15c0>
   8347c:	9080040c 	andi	r2,r18,16
   83480:	1000921e 	bne	r2,zero,836cc <___vfprintf_internal_r+0x1aac>
   83484:	9480100c 	andi	r18,r18,64
   83488:	90013926 	beq	r18,zero,83970 <___vfprintf_internal_r+0x1d50>
   8348c:	d9002d17 	ldw	r4,180(sp)
   83490:	d9402f17 	ldw	r5,188(sp)
   83494:	20800017 	ldw	r2,0(r4)
   83498:	21000104 	addi	r4,r4,4
   8349c:	d9002d15 	stw	r4,180(sp)
   834a0:	1140000d 	sth	r5,0(r2)
   834a4:	003a1606 	br	81d00 <__alt_data_end+0xfffa0280>
   834a8:	9080100c 	andi	r2,r18,64
   834ac:	10008026 	beq	r2,zero,836b0 <___vfprintf_internal_r+0x1a90>
   834b0:	d8c02d17 	ldw	r3,180(sp)
   834b4:	1cc0000f 	ldh	r19,0(r3)
   834b8:	18c00104 	addi	r3,r3,4
   834bc:	d8c02d15 	stw	r3,180(sp)
   834c0:	982dd7fa 	srai	r22,r19,31
   834c4:	b005883a 	mov	r2,r22
   834c8:	003b1f06 	br	82148 <__alt_data_end+0xfffa06c8>
   834cc:	9080100c 	andi	r2,r18,64
   834d0:	d8002785 	stb	zero,158(sp)
   834d4:	10008a1e 	bne	r2,zero,83700 <___vfprintf_internal_r+0x1ae0>
   834d8:	d9402d17 	ldw	r5,180(sp)
   834dc:	d8c02917 	ldw	r3,164(sp)
   834e0:	002d883a 	mov	r22,zero
   834e4:	28800104 	addi	r2,r5,4
   834e8:	2cc00017 	ldw	r19,0(r5)
   834ec:	183e4b0e 	bge	r3,zero,82e1c <__alt_data_end+0xfffa139c>
   834f0:	9d86b03a 	or	r3,r19,r22
   834f4:	d8802d15 	stw	r2,180(sp)
   834f8:	183e4c1e 	bne	r3,zero,82e2c <__alt_data_end+0xfffa13ac>
   834fc:	0039883a 	mov	fp,zero
   83500:	0005883a 	mov	r2,zero
   83504:	003d4006 	br	82a08 <__alt_data_end+0xfffa0f88>
   83508:	01400274 	movhi	r5,9
   8350c:	2943bb84 	addi	r5,r5,3822
   83510:	d9402b15 	stw	r5,172(sp)
   83514:	d9402b17 	ldw	r5,172(sp)
   83518:	1c47883a 	add	r3,r3,r17
   8351c:	10800044 	addi	r2,r2,1
   83520:	41400015 	stw	r5,0(r8)
   83524:	44400115 	stw	r17,4(r8)
   83528:	d8c02015 	stw	r3,128(sp)
   8352c:	d8801f15 	stw	r2,124(sp)
   83530:	010001c4 	movi	r4,7
   83534:	20bec816 	blt	r4,r2,83058 <__alt_data_end+0xfffa15d8>
   83538:	42000204 	addi	r8,r8,8
   8353c:	003ecd06 	br	83074 <__alt_data_end+0xfffa15f4>
   83540:	d9002917 	ldw	r4,164(sp)
   83544:	d8002785 	stb	zero,158(sp)
   83548:	203d2d16 	blt	r4,zero,82a00 <__alt_data_end+0xfffa0f80>
   8354c:	00bfdfc4 	movi	r2,-129
   83550:	90a4703a 	and	r18,r18,r2
   83554:	003a9106 	br	81f9c <__alt_data_end+0xfffa051c>
   83558:	01000274 	movhi	r4,9
   8355c:	2103bb84 	addi	r4,r4,3822
   83560:	d9002b15 	stw	r4,172(sp)
   83564:	003c0c06 	br	82598 <__alt_data_end+0xfffa0b18>
   83568:	d9002c17 	ldw	r4,176(sp)
   8356c:	d9801e04 	addi	r6,sp,120
   83570:	b80b883a 	mov	r5,r23
   83574:	00892780 	call	89278 <__sprint_r>
   83578:	103aab1e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   8357c:	d8c02017 	ldw	r3,128(sp)
   83580:	da000404 	addi	r8,sp,16
   83584:	003d4106 	br	82a8c <__alt_data_end+0xfffa100c>
   83588:	d8801f17 	ldw	r2,124(sp)
   8358c:	01400274 	movhi	r5,9
   83590:	01000044 	movi	r4,1
   83594:	18c00044 	addi	r3,r3,1
   83598:	10800044 	addi	r2,r2,1
   8359c:	2943bb04 	addi	r5,r5,3820
   835a0:	41000115 	stw	r4,4(r8)
   835a4:	41400015 	stw	r5,0(r8)
   835a8:	d8c02015 	stw	r3,128(sp)
   835ac:	d8801f15 	stw	r2,124(sp)
   835b0:	010001c4 	movi	r4,7
   835b4:	20805c16 	blt	r4,r2,83728 <___vfprintf_internal_r+0x1b08>
   835b8:	42000204 	addi	r8,r8,8
   835bc:	8800041e 	bne	r17,zero,835d0 <___vfprintf_internal_r+0x19b0>
   835c0:	d8803317 	ldw	r2,204(sp)
   835c4:	1000021e 	bne	r2,zero,835d0 <___vfprintf_internal_r+0x19b0>
   835c8:	9080004c 	andi	r2,r18,1
   835cc:	103c0926 	beq	r2,zero,825f4 <__alt_data_end+0xfffa0b74>
   835d0:	d9003717 	ldw	r4,220(sp)
   835d4:	d8801f17 	ldw	r2,124(sp)
   835d8:	d9403417 	ldw	r5,208(sp)
   835dc:	20c7883a 	add	r3,r4,r3
   835e0:	10800044 	addi	r2,r2,1
   835e4:	41000115 	stw	r4,4(r8)
   835e8:	41400015 	stw	r5,0(r8)
   835ec:	d8c02015 	stw	r3,128(sp)
   835f0:	d8801f15 	stw	r2,124(sp)
   835f4:	010001c4 	movi	r4,7
   835f8:	20812116 	blt	r4,r2,83a80 <___vfprintf_internal_r+0x1e60>
   835fc:	42000204 	addi	r8,r8,8
   83600:	0463c83a 	sub	r17,zero,r17
   83604:	0440730e 	bge	zero,r17,837d4 <___vfprintf_internal_r+0x1bb4>
   83608:	05800404 	movi	r22,16
   8360c:	b440860e 	bge	r22,r17,83828 <___vfprintf_internal_r+0x1c08>
   83610:	01400274 	movhi	r5,9
   83614:	2943bb84 	addi	r5,r5,3822
   83618:	d9402b15 	stw	r5,172(sp)
   8361c:	070001c4 	movi	fp,7
   83620:	dcc02c17 	ldw	r19,176(sp)
   83624:	00000306 	br	83634 <___vfprintf_internal_r+0x1a14>
   83628:	42000204 	addi	r8,r8,8
   8362c:	8c7ffc04 	addi	r17,r17,-16
   83630:	b440800e 	bge	r22,r17,83834 <___vfprintf_internal_r+0x1c14>
   83634:	18c00404 	addi	r3,r3,16
   83638:	10800044 	addi	r2,r2,1
   8363c:	45000015 	stw	r20,0(r8)
   83640:	45800115 	stw	r22,4(r8)
   83644:	d8c02015 	stw	r3,128(sp)
   83648:	d8801f15 	stw	r2,124(sp)
   8364c:	e0bff60e 	bge	fp,r2,83628 <__alt_data_end+0xfffa1ba8>
   83650:	d9801e04 	addi	r6,sp,120
   83654:	b80b883a 	mov	r5,r23
   83658:	9809883a 	mov	r4,r19
   8365c:	00892780 	call	89278 <__sprint_r>
   83660:	103a711e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   83664:	d8c02017 	ldw	r3,128(sp)
   83668:	d8801f17 	ldw	r2,124(sp)
   8366c:	da000404 	addi	r8,sp,16
   83670:	003fee06 	br	8362c <__alt_data_end+0xfffa1bac>
   83674:	00bfffc4 	movi	r2,-1
   83678:	003a6f06 	br	82038 <__alt_data_end+0xfffa05b8>
   8367c:	008011c4 	movi	r2,71
   83680:	1440b816 	blt	r2,r17,83964 <___vfprintf_internal_r+0x1d44>
   83684:	04000274 	movhi	r16,9
   83688:	8403ad04 	addi	r16,r16,3764
   8368c:	00c000c4 	movi	r3,3
   83690:	00bfdfc4 	movi	r2,-129
   83694:	d8c02a15 	stw	r3,168(sp)
   83698:	90a4703a 	and	r18,r18,r2
   8369c:	df002783 	ldbu	fp,158(sp)
   836a0:	d8c02e15 	stw	r3,184(sp)
   836a4:	d8002915 	stw	zero,164(sp)
   836a8:	d8003215 	stw	zero,200(sp)
   836ac:	003b2906 	br	82354 <__alt_data_end+0xfffa08d4>
   836b0:	d9002d17 	ldw	r4,180(sp)
   836b4:	24c00017 	ldw	r19,0(r4)
   836b8:	21000104 	addi	r4,r4,4
   836bc:	d9002d15 	stw	r4,180(sp)
   836c0:	982dd7fa 	srai	r22,r19,31
   836c4:	b005883a 	mov	r2,r22
   836c8:	003a9f06 	br	82148 <__alt_data_end+0xfffa06c8>
   836cc:	d9402d17 	ldw	r5,180(sp)
   836d0:	d8c02f17 	ldw	r3,188(sp)
   836d4:	28800017 	ldw	r2,0(r5)
   836d8:	29400104 	addi	r5,r5,4
   836dc:	d9402d15 	stw	r5,180(sp)
   836e0:	10c00015 	stw	r3,0(r2)
   836e4:	00398606 	br	81d00 <__alt_data_end+0xfffa0280>
   836e8:	d9402d17 	ldw	r5,180(sp)
   836ec:	002d883a 	mov	r22,zero
   836f0:	2cc00017 	ldw	r19,0(r5)
   836f4:	29400104 	addi	r5,r5,4
   836f8:	d9402d15 	stw	r5,180(sp)
   836fc:	003c2306 	br	8278c <__alt_data_end+0xfffa0d0c>
   83700:	d8c02d17 	ldw	r3,180(sp)
   83704:	d9002917 	ldw	r4,164(sp)
   83708:	002d883a 	mov	r22,zero
   8370c:	18800104 	addi	r2,r3,4
   83710:	1cc0000b 	ldhu	r19,0(r3)
   83714:	203dc10e 	bge	r4,zero,82e1c <__alt_data_end+0xfffa139c>
   83718:	003f7506 	br	834f0 <__alt_data_end+0xfffa1a70>
   8371c:	04000274 	movhi	r16,9
   83720:	8403ab04 	addi	r16,r16,3756
   83724:	003acc06 	br	82258 <__alt_data_end+0xfffa07d8>
   83728:	d9002c17 	ldw	r4,176(sp)
   8372c:	d9801e04 	addi	r6,sp,120
   83730:	b80b883a 	mov	r5,r23
   83734:	00892780 	call	89278 <__sprint_r>
   83738:	103a3b1e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   8373c:	dc402617 	ldw	r17,152(sp)
   83740:	d8c02017 	ldw	r3,128(sp)
   83744:	da000404 	addi	r8,sp,16
   83748:	003f9c06 	br	835bc <__alt_data_end+0xfffa1b3c>
   8374c:	ac400043 	ldbu	r17,1(r21)
   83750:	94800814 	ori	r18,r18,32
   83754:	ad400044 	addi	r21,r21,1
   83758:	8c403fcc 	andi	r17,r17,255
   8375c:	8c40201c 	xori	r17,r17,128
   83760:	8c7fe004 	addi	r17,r17,-128
   83764:	00398f06 	br	81da4 <__alt_data_end+0xfffa0324>
   83768:	d8c02d15 	stw	r3,180(sp)
   8376c:	0039883a 	mov	fp,zero
   83770:	003e3506 	br	83048 <__alt_data_end+0xfffa15c8>
   83774:	d9002c17 	ldw	r4,176(sp)
   83778:	d9801e04 	addi	r6,sp,120
   8377c:	b80b883a 	mov	r5,r23
   83780:	00892780 	call	89278 <__sprint_r>
   83784:	103a281e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   83788:	d8c02017 	ldw	r3,128(sp)
   8378c:	da000404 	addi	r8,sp,16
   83790:	003cd006 	br	82ad4 <__alt_data_end+0xfffa1054>
   83794:	8009883a 	mov	r4,r16
   83798:	da003d15 	stw	r8,244(sp)
   8379c:	0081b380 	call	81b38 <strlen>
   837a0:	d8802e15 	stw	r2,184(sp)
   837a4:	da003d17 	ldw	r8,244(sp)
   837a8:	103c340e 	bge	r2,zero,8287c <__alt_data_end+0xfffa0dfc>
   837ac:	0005883a 	mov	r2,zero
   837b0:	003c3206 	br	8287c <__alt_data_end+0xfffa0dfc>
   837b4:	d9002c17 	ldw	r4,176(sp)
   837b8:	d9801e04 	addi	r6,sp,120
   837bc:	b80b883a 	mov	r5,r23
   837c0:	00892780 	call	89278 <__sprint_r>
   837c4:	103a181e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   837c8:	d8c02017 	ldw	r3,128(sp)
   837cc:	d8801f17 	ldw	r2,124(sp)
   837d0:	da000404 	addi	r8,sp,16
   837d4:	d9403317 	ldw	r5,204(sp)
   837d8:	10800044 	addi	r2,r2,1
   837dc:	44000015 	stw	r16,0(r8)
   837e0:	28c7883a 	add	r3,r5,r3
   837e4:	003b7d06 	br	825dc <__alt_data_end+0xfffa0b5c>
   837e8:	01000274 	movhi	r4,9
   837ec:	2103bf84 	addi	r4,r4,3838
   837f0:	d9003515 	stw	r4,212(sp)
   837f4:	003b1406 	br	82448 <__alt_data_end+0xfffa09c8>
   837f8:	013fffc4 	movi	r4,-1
   837fc:	003a3506 	br	820d4 <__alt_data_end+0xfffa0654>
   83800:	0023883a 	mov	r17,zero
   83804:	003d9d06 	br	82e7c <__alt_data_end+0xfffa13fc>
   83808:	d9002c17 	ldw	r4,176(sp)
   8380c:	d9801e04 	addi	r6,sp,120
   83810:	b80b883a 	mov	r5,r23
   83814:	00892780 	call	89278 <__sprint_r>
   83818:	103a031e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   8381c:	d8c02017 	ldw	r3,128(sp)
   83820:	da000404 	addi	r8,sp,16
   83824:	003d9406 	br	82e78 <__alt_data_end+0xfffa13f8>
   83828:	01000274 	movhi	r4,9
   8382c:	2103bb84 	addi	r4,r4,3822
   83830:	d9002b15 	stw	r4,172(sp)
   83834:	d9002b17 	ldw	r4,172(sp)
   83838:	1c47883a 	add	r3,r3,r17
   8383c:	10800044 	addi	r2,r2,1
   83840:	41000015 	stw	r4,0(r8)
   83844:	44400115 	stw	r17,4(r8)
   83848:	d8c02015 	stw	r3,128(sp)
   8384c:	d8801f15 	stw	r2,124(sp)
   83850:	010001c4 	movi	r4,7
   83854:	20bfd716 	blt	r4,r2,837b4 <__alt_data_end+0xfffa1d34>
   83858:	42000204 	addi	r8,r8,8
   8385c:	003fdd06 	br	837d4 <__alt_data_end+0xfffa1d54>
   83860:	d9002c17 	ldw	r4,176(sp)
   83864:	d9801e04 	addi	r6,sp,120
   83868:	b80b883a 	mov	r5,r23
   8386c:	00892780 	call	89278 <__sprint_r>
   83870:	1039ed1e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   83874:	d8802617 	ldw	r2,152(sp)
   83878:	d8c02017 	ldw	r3,128(sp)
   8387c:	da000404 	addi	r8,sp,16
   83880:	003e1006 	br	830c4 <__alt_data_end+0xfffa1644>
   83884:	00800044 	movi	r2,1
   83888:	10803fcc 	andi	r2,r2,255
   8388c:	00c00044 	movi	r3,1
   83890:	10fa3526 	beq	r2,r3,82168 <__alt_data_end+0xfffa06e8>
   83894:	00c00084 	movi	r3,2
   83898:	10fbcb26 	beq	r2,r3,827c8 <__alt_data_end+0xfffa0d48>
   8389c:	003a8f06 	br	822dc <__alt_data_end+0xfffa085c>
   838a0:	01000274 	movhi	r4,9
   838a4:	2103bf84 	addi	r4,r4,3838
   838a8:	d9003515 	stw	r4,212(sp)
   838ac:	003b7606 	br	82688 <__alt_data_end+0xfffa0c08>
   838b0:	d8802917 	ldw	r2,164(sp)
   838b4:	00c00184 	movi	r3,6
   838b8:	1880012e 	bgeu	r3,r2,838c0 <___vfprintf_internal_r+0x1ca0>
   838bc:	1805883a 	mov	r2,r3
   838c0:	d8802e15 	stw	r2,184(sp)
   838c4:	1000ef16 	blt	r2,zero,83c84 <___vfprintf_internal_r+0x2064>
   838c8:	04000274 	movhi	r16,9
   838cc:	d8802a15 	stw	r2,168(sp)
   838d0:	dcc02d15 	stw	r19,180(sp)
   838d4:	d8002915 	stw	zero,164(sp)
   838d8:	d8003215 	stw	zero,200(sp)
   838dc:	8403b904 	addi	r16,r16,3812
   838e0:	0039883a 	mov	fp,zero
   838e4:	003aa206 	br	82370 <__alt_data_end+0xfffa08f0>
   838e8:	0021883a 	mov	r16,zero
   838ec:	003e0706 	br	8310c <__alt_data_end+0xfffa168c>
   838f0:	d9002c17 	ldw	r4,176(sp)
   838f4:	d9801e04 	addi	r6,sp,120
   838f8:	b80b883a 	mov	r5,r23
   838fc:	00892780 	call	89278 <__sprint_r>
   83900:	1039c91e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   83904:	d8802617 	ldw	r2,152(sp)
   83908:	d9403317 	ldw	r5,204(sp)
   8390c:	d8c02017 	ldw	r3,128(sp)
   83910:	da000404 	addi	r8,sp,16
   83914:	2885c83a 	sub	r2,r5,r2
   83918:	003dfb06 	br	83108 <__alt_data_end+0xfffa1688>
   8391c:	9080004c 	andi	r2,r18,1
   83920:	103e8f1e 	bne	r2,zero,83360 <__alt_data_end+0xfffa18e0>
   83924:	d8802117 	ldw	r2,132(sp)
   83928:	003e9e06 	br	833a4 <__alt_data_end+0xfffa1924>
   8392c:	1025883a 	mov	r18,r2
   83930:	0039883a 	mov	fp,zero
   83934:	00800084 	movi	r2,2
   83938:	003fd306 	br	83888 <__alt_data_end+0xfffa1e08>
   8393c:	07000b44 	movi	fp,45
   83940:	df002785 	stb	fp,158(sp)
   83944:	003a4006 	br	82248 <__alt_data_end+0xfffa07c8>
   83948:	00c00b44 	movi	r3,45
   8394c:	d8c02785 	stb	r3,158(sp)
   83950:	d8802a15 	stw	r2,168(sp)
   83954:	dc802b17 	ldw	r18,172(sp)
   83958:	d8002915 	stw	zero,164(sp)
   8395c:	07000b44 	movi	fp,45
   83960:	003a8006 	br	82364 <__alt_data_end+0xfffa08e4>
   83964:	04000274 	movhi	r16,9
   83968:	8403ae04 	addi	r16,r16,3768
   8396c:	003f4706 	br	8368c <__alt_data_end+0xfffa1c0c>
   83970:	d8c02d17 	ldw	r3,180(sp)
   83974:	d9002f17 	ldw	r4,188(sp)
   83978:	18800017 	ldw	r2,0(r3)
   8397c:	18c00104 	addi	r3,r3,4
   83980:	d8c02d15 	stw	r3,180(sp)
   83984:	11000015 	stw	r4,0(r2)
   83988:	0038dd06 	br	81d00 <__alt_data_end+0xfffa0280>
   8398c:	dd802617 	ldw	r22,152(sp)
   83990:	00bfff44 	movi	r2,-3
   83994:	b0801c16 	blt	r22,r2,83a08 <___vfprintf_internal_r+0x1de8>
   83998:	d9402917 	ldw	r5,164(sp)
   8399c:	2d801a16 	blt	r5,r22,83a08 <___vfprintf_internal_r+0x1de8>
   839a0:	dd803215 	stw	r22,200(sp)
   839a4:	003e8906 	br	833cc <__alt_data_end+0xfffa194c>
   839a8:	01000274 	movhi	r4,9
   839ac:	2103bb84 	addi	r4,r4,3822
   839b0:	d9002b15 	stw	r4,172(sp)
   839b4:	003c9106 	br	82bfc <__alt_data_end+0xfffa117c>
   839b8:	e005883a 	mov	r2,fp
   839bc:	003e7906 	br	833a4 <__alt_data_end+0xfffa1924>
   839c0:	d9402917 	ldw	r5,164(sp)
   839c4:	df002783 	ldbu	fp,158(sp)
   839c8:	dcc02d15 	stw	r19,180(sp)
   839cc:	d9402a15 	stw	r5,168(sp)
   839d0:	d9402e15 	stw	r5,184(sp)
   839d4:	d8002915 	stw	zero,164(sp)
   839d8:	d8003215 	stw	zero,200(sp)
   839dc:	003a5d06 	br	82354 <__alt_data_end+0xfffa08d4>
   839e0:	9080004c 	andi	r2,r18,1
   839e4:	0039883a 	mov	fp,zero
   839e8:	10000426 	beq	r2,zero,839fc <___vfprintf_internal_r+0x1ddc>
   839ec:	00800c04 	movi	r2,48
   839f0:	dc001dc4 	addi	r16,sp,119
   839f4:	d8801dc5 	stb	r2,119(sp)
   839f8:	003b8006 	br	827fc <__alt_data_end+0xfffa0d7c>
   839fc:	d8002e15 	stw	zero,184(sp)
   83a00:	dc001e04 	addi	r16,sp,120
   83a04:	003a4d06 	br	8233c <__alt_data_end+0xfffa08bc>
   83a08:	8c7fff84 	addi	r17,r17,-2
   83a0c:	b5bfffc4 	addi	r22,r22,-1
   83a10:	dd802615 	stw	r22,152(sp)
   83a14:	dc4022c5 	stb	r17,139(sp)
   83a18:	b000bf16 	blt	r22,zero,83d18 <___vfprintf_internal_r+0x20f8>
   83a1c:	00800ac4 	movi	r2,43
   83a20:	d8802305 	stb	r2,140(sp)
   83a24:	00800244 	movi	r2,9
   83a28:	15807016 	blt	r2,r22,83bec <___vfprintf_internal_r+0x1fcc>
   83a2c:	00800c04 	movi	r2,48
   83a30:	b5800c04 	addi	r22,r22,48
   83a34:	d8802345 	stb	r2,141(sp)
   83a38:	dd802385 	stb	r22,142(sp)
   83a3c:	d88023c4 	addi	r2,sp,143
   83a40:	df0022c4 	addi	fp,sp,139
   83a44:	d8c03317 	ldw	r3,204(sp)
   83a48:	1739c83a 	sub	fp,r2,fp
   83a4c:	d9003317 	ldw	r4,204(sp)
   83a50:	e0c7883a 	add	r3,fp,r3
   83a54:	df003a15 	stw	fp,232(sp)
   83a58:	d8c02e15 	stw	r3,184(sp)
   83a5c:	00800044 	movi	r2,1
   83a60:	1100b30e 	bge	r2,r4,83d30 <___vfprintf_internal_r+0x2110>
   83a64:	d8c02e17 	ldw	r3,184(sp)
   83a68:	18c00044 	addi	r3,r3,1
   83a6c:	d8c02e15 	stw	r3,184(sp)
   83a70:	1805883a 	mov	r2,r3
   83a74:	1800ac16 	blt	r3,zero,83d28 <___vfprintf_internal_r+0x2108>
   83a78:	d8003215 	stw	zero,200(sp)
   83a7c:	003e5d06 	br	833f4 <__alt_data_end+0xfffa1974>
   83a80:	d9002c17 	ldw	r4,176(sp)
   83a84:	d9801e04 	addi	r6,sp,120
   83a88:	b80b883a 	mov	r5,r23
   83a8c:	00892780 	call	89278 <__sprint_r>
   83a90:	1039651e 	bne	r2,zero,82028 <__alt_data_end+0xfffa05a8>
   83a94:	dc402617 	ldw	r17,152(sp)
   83a98:	d8c02017 	ldw	r3,128(sp)
   83a9c:	d8801f17 	ldw	r2,124(sp)
   83aa0:	da000404 	addi	r8,sp,16
   83aa4:	003ed606 	br	83600 <__alt_data_end+0xfffa1b80>
   83aa8:	582b883a 	mov	r21,r11
   83aac:	d8002915 	stw	zero,164(sp)
   83ab0:	0038bd06 	br	81da8 <__alt_data_end+0xfffa0328>
   83ab4:	d8802917 	ldw	r2,164(sp)
   83ab8:	103e071e 	bne	r2,zero,832d8 <__alt_data_end+0xfffa1858>
   83abc:	dc002915 	stw	r16,164(sp)
   83ac0:	003e0506 	br	832d8 <__alt_data_end+0xfffa1858>
   83ac4:	d9002917 	ldw	r4,164(sp)
   83ac8:	20c00044 	addi	r3,r4,1
   83acc:	003e0f06 	br	8330c <__alt_data_end+0xfffa188c>
   83ad0:	01400184 	movi	r5,6
   83ad4:	d9402915 	stw	r5,164(sp)
   83ad8:	003dff06 	br	832d8 <__alt_data_end+0xfffa1858>
   83adc:	d8802104 	addi	r2,sp,132
   83ae0:	d8800315 	stw	r2,12(sp)
   83ae4:	d8802504 	addi	r2,sp,148
   83ae8:	d8800215 	stw	r2,8(sp)
   83aec:	d8802604 	addi	r2,sp,152
   83af0:	d8800115 	stw	r2,4(sp)
   83af4:	d8802917 	ldw	r2,164(sp)
   83af8:	d9403617 	ldw	r5,216(sp)
   83afc:	d9002c17 	ldw	r4,176(sp)
   83b00:	d8800015 	stw	r2,0(sp)
   83b04:	01c000c4 	movi	r7,3
   83b08:	980d883a 	mov	r6,r19
   83b0c:	da003d15 	stw	r8,244(sp)
   83b10:	00842440 	call	84244 <_dtoa_r>
   83b14:	d8c02917 	ldw	r3,164(sp)
   83b18:	da003d17 	ldw	r8,244(sp)
   83b1c:	1021883a 	mov	r16,r2
   83b20:	10f9883a 	add	fp,r2,r3
   83b24:	81000007 	ldb	r4,0(r16)
   83b28:	00800c04 	movi	r2,48
   83b2c:	20805e26 	beq	r4,r2,83ca8 <___vfprintf_internal_r+0x2088>
   83b30:	d8c02617 	ldw	r3,152(sp)
   83b34:	e0f9883a 	add	fp,fp,r3
   83b38:	003e0a06 	br	83364 <__alt_data_end+0xfffa18e4>
   83b3c:	00c00b44 	movi	r3,45
   83b40:	24e0003c 	xorhi	r19,r4,32768
   83b44:	d8c02a05 	stb	r3,168(sp)
   83b48:	003de906 	br	832f0 <__alt_data_end+0xfffa1870>
   83b4c:	d8c03217 	ldw	r3,200(sp)
   83b50:	00c07a0e 	bge	zero,r3,83d3c <___vfprintf_internal_r+0x211c>
   83b54:	00800044 	movi	r2,1
   83b58:	d9003317 	ldw	r4,204(sp)
   83b5c:	1105883a 	add	r2,r2,r4
   83b60:	d8802e15 	stw	r2,184(sp)
   83b64:	10004e16 	blt	r2,zero,83ca0 <___vfprintf_internal_r+0x2080>
   83b68:	044019c4 	movi	r17,103
   83b6c:	003e2106 	br	833f4 <__alt_data_end+0xfffa1974>
   83b70:	d9002917 	ldw	r4,164(sp)
   83b74:	d8802104 	addi	r2,sp,132
   83b78:	d8800315 	stw	r2,12(sp)
   83b7c:	d9000015 	stw	r4,0(sp)
   83b80:	d8802504 	addi	r2,sp,148
   83b84:	d9403617 	ldw	r5,216(sp)
   83b88:	d9002c17 	ldw	r4,176(sp)
   83b8c:	d8800215 	stw	r2,8(sp)
   83b90:	d8802604 	addi	r2,sp,152
   83b94:	d8800115 	stw	r2,4(sp)
   83b98:	01c000c4 	movi	r7,3
   83b9c:	980d883a 	mov	r6,r19
   83ba0:	da003d15 	stw	r8,244(sp)
   83ba4:	00842440 	call	84244 <_dtoa_r>
   83ba8:	d8c02917 	ldw	r3,164(sp)
   83bac:	da003d17 	ldw	r8,244(sp)
   83bb0:	1021883a 	mov	r16,r2
   83bb4:	00801184 	movi	r2,70
   83bb8:	80f9883a 	add	fp,r16,r3
   83bbc:	88bfd926 	beq	r17,r2,83b24 <__alt_data_end+0xfffa20a4>
   83bc0:	003de806 	br	83364 <__alt_data_end+0xfffa18e4>
   83bc4:	d9002917 	ldw	r4,164(sp)
   83bc8:	00c04d0e 	bge	zero,r3,83d00 <___vfprintf_internal_r+0x20e0>
   83bcc:	2000441e 	bne	r4,zero,83ce0 <___vfprintf_internal_r+0x20c0>
   83bd0:	9480004c 	andi	r18,r18,1
   83bd4:	9000421e 	bne	r18,zero,83ce0 <___vfprintf_internal_r+0x20c0>
   83bd8:	1805883a 	mov	r2,r3
   83bdc:	18007016 	blt	r3,zero,83da0 <___vfprintf_internal_r+0x2180>
   83be0:	d8c03217 	ldw	r3,200(sp)
   83be4:	d8c02e15 	stw	r3,184(sp)
   83be8:	003e0206 	br	833f4 <__alt_data_end+0xfffa1974>
   83bec:	df0022c4 	addi	fp,sp,139
   83bf0:	dc002915 	stw	r16,164(sp)
   83bf4:	4027883a 	mov	r19,r8
   83bf8:	e021883a 	mov	r16,fp
   83bfc:	b009883a 	mov	r4,r22
   83c00:	01400284 	movi	r5,10
   83c04:	008184c0 	call	8184c <__modsi3>
   83c08:	10800c04 	addi	r2,r2,48
   83c0c:	843fffc4 	addi	r16,r16,-1
   83c10:	b009883a 	mov	r4,r22
   83c14:	01400284 	movi	r5,10
   83c18:	80800005 	stb	r2,0(r16)
   83c1c:	00817c80 	call	817c8 <__divsi3>
   83c20:	102d883a 	mov	r22,r2
   83c24:	00800244 	movi	r2,9
   83c28:	15bff416 	blt	r2,r22,83bfc <__alt_data_end+0xfffa217c>
   83c2c:	9811883a 	mov	r8,r19
   83c30:	b0800c04 	addi	r2,r22,48
   83c34:	8027883a 	mov	r19,r16
   83c38:	997fffc4 	addi	r5,r19,-1
   83c3c:	98bfffc5 	stb	r2,-1(r19)
   83c40:	dc002917 	ldw	r16,164(sp)
   83c44:	2f006a2e 	bgeu	r5,fp,83df0 <___vfprintf_internal_r+0x21d0>
   83c48:	d9c02384 	addi	r7,sp,142
   83c4c:	3ccfc83a 	sub	r7,r7,r19
   83c50:	d9002344 	addi	r4,sp,141
   83c54:	e1cf883a 	add	r7,fp,r7
   83c58:	00000106 	br	83c60 <___vfprintf_internal_r+0x2040>
   83c5c:	28800003 	ldbu	r2,0(r5)
   83c60:	20800005 	stb	r2,0(r4)
   83c64:	21000044 	addi	r4,r4,1
   83c68:	29400044 	addi	r5,r5,1
   83c6c:	393ffb1e 	bne	r7,r4,83c5c <__alt_data_end+0xfffa21dc>
   83c70:	d8802304 	addi	r2,sp,140
   83c74:	14c5c83a 	sub	r2,r2,r19
   83c78:	d8c02344 	addi	r3,sp,141
   83c7c:	1885883a 	add	r2,r3,r2
   83c80:	003f7006 	br	83a44 <__alt_data_end+0xfffa1fc4>
   83c84:	0005883a 	mov	r2,zero
   83c88:	003f0f06 	br	838c8 <__alt_data_end+0xfffa1e48>
   83c8c:	d8c03217 	ldw	r3,200(sp)
   83c90:	18c00044 	addi	r3,r3,1
   83c94:	d8c02e15 	stw	r3,184(sp)
   83c98:	1805883a 	mov	r2,r3
   83c9c:	183fb20e 	bge	r3,zero,83b68 <__alt_data_end+0xfffa20e8>
   83ca0:	0005883a 	mov	r2,zero
   83ca4:	003fb006 	br	83b68 <__alt_data_end+0xfffa20e8>
   83ca8:	d9003617 	ldw	r4,216(sp)
   83cac:	000d883a 	mov	r6,zero
   83cb0:	000f883a 	mov	r7,zero
   83cb4:	980b883a 	mov	r5,r19
   83cb8:	d8c03c15 	stw	r3,240(sp)
   83cbc:	da003d15 	stw	r8,244(sp)
   83cc0:	008cd9c0 	call	8cd9c <__eqdf2>
   83cc4:	d8c03c17 	ldw	r3,240(sp)
   83cc8:	da003d17 	ldw	r8,244(sp)
   83ccc:	103f9826 	beq	r2,zero,83b30 <__alt_data_end+0xfffa20b0>
   83cd0:	00800044 	movi	r2,1
   83cd4:	10c7c83a 	sub	r3,r2,r3
   83cd8:	d8c02615 	stw	r3,152(sp)
   83cdc:	003f9506 	br	83b34 <__alt_data_end+0xfffa20b4>
   83ce0:	d9002917 	ldw	r4,164(sp)
   83ce4:	d8c03217 	ldw	r3,200(sp)
   83ce8:	20800044 	addi	r2,r4,1
   83cec:	1885883a 	add	r2,r3,r2
   83cf0:	d8802e15 	stw	r2,184(sp)
   83cf4:	103dbf0e 	bge	r2,zero,833f4 <__alt_data_end+0xfffa1974>
   83cf8:	0005883a 	mov	r2,zero
   83cfc:	003dbd06 	br	833f4 <__alt_data_end+0xfffa1974>
   83d00:	2000211e 	bne	r4,zero,83d88 <___vfprintf_internal_r+0x2168>
   83d04:	9480004c 	andi	r18,r18,1
   83d08:	90001f1e 	bne	r18,zero,83d88 <___vfprintf_internal_r+0x2168>
   83d0c:	00800044 	movi	r2,1
   83d10:	d8802e15 	stw	r2,184(sp)
   83d14:	003db706 	br	833f4 <__alt_data_end+0xfffa1974>
   83d18:	00800b44 	movi	r2,45
   83d1c:	05adc83a 	sub	r22,zero,r22
   83d20:	d8802305 	stb	r2,140(sp)
   83d24:	003f3f06 	br	83a24 <__alt_data_end+0xfffa1fa4>
   83d28:	0005883a 	mov	r2,zero
   83d2c:	003f5206 	br	83a78 <__alt_data_end+0xfffa1ff8>
   83d30:	90a4703a 	and	r18,r18,r2
   83d34:	903f4e26 	beq	r18,zero,83a70 <__alt_data_end+0xfffa1ff0>
   83d38:	003f4a06 	br	83a64 <__alt_data_end+0xfffa1fe4>
   83d3c:	00800084 	movi	r2,2
   83d40:	10c5c83a 	sub	r2,r2,r3
   83d44:	003f8406 	br	83b58 <__alt_data_end+0xfffa20d8>
   83d48:	d8802d17 	ldw	r2,180(sp)
   83d4c:	d9002d17 	ldw	r4,180(sp)
   83d50:	ac400043 	ldbu	r17,1(r21)
   83d54:	10800017 	ldw	r2,0(r2)
   83d58:	582b883a 	mov	r21,r11
   83d5c:	d8802915 	stw	r2,164(sp)
   83d60:	20800104 	addi	r2,r4,4
   83d64:	d9002917 	ldw	r4,164(sp)
   83d68:	d8802d15 	stw	r2,180(sp)
   83d6c:	203e7a0e 	bge	r4,zero,83758 <__alt_data_end+0xfffa1cd8>
   83d70:	8c403fcc 	andi	r17,r17,255
   83d74:	00bfffc4 	movi	r2,-1
   83d78:	8c40201c 	xori	r17,r17,128
   83d7c:	d8802915 	stw	r2,164(sp)
   83d80:	8c7fe004 	addi	r17,r17,-128
   83d84:	00380706 	br	81da4 <__alt_data_end+0xfffa0324>
   83d88:	d8c02917 	ldw	r3,164(sp)
   83d8c:	18c00084 	addi	r3,r3,2
   83d90:	d8c02e15 	stw	r3,184(sp)
   83d94:	1805883a 	mov	r2,r3
   83d98:	183d960e 	bge	r3,zero,833f4 <__alt_data_end+0xfffa1974>
   83d9c:	003fd606 	br	83cf8 <__alt_data_end+0xfffa2278>
   83da0:	0005883a 	mov	r2,zero
   83da4:	003f8e06 	br	83be0 <__alt_data_end+0xfffa2160>
   83da8:	9080004c 	andi	r2,r18,1
   83dac:	103f811e 	bne	r2,zero,83bb4 <__alt_data_end+0xfffa2134>
   83db0:	d8802117 	ldw	r2,132(sp)
   83db4:	1405c83a 	sub	r2,r2,r16
   83db8:	d8803315 	stw	r2,204(sp)
   83dbc:	b47ef326 	beq	r22,r17,8398c <__alt_data_end+0xfffa1f0c>
   83dc0:	dd802617 	ldw	r22,152(sp)
   83dc4:	003f1106 	br	83a0c <__alt_data_end+0xfffa1f8c>
   83dc8:	d9c02785 	stb	r7,158(sp)
   83dcc:	00390406 	br	821e0 <__alt_data_end+0xfffa0760>
   83dd0:	d9c02785 	stb	r7,158(sp)
   83dd4:	0038d306 	br	82124 <__alt_data_end+0xfffa06a4>
   83dd8:	d9c02785 	stb	r7,158(sp)
   83ddc:	003a6106 	br	82764 <__alt_data_end+0xfffa0ce4>
   83de0:	d9c02785 	stb	r7,158(sp)
   83de4:	003af806 	br	829c8 <__alt_data_end+0xfffa0f48>
   83de8:	0005883a 	mov	r2,zero
   83dec:	003d7e06 	br	833e8 <__alt_data_end+0xfffa1968>
   83df0:	d8802344 	addi	r2,sp,141
   83df4:	003f1306 	br	83a44 <__alt_data_end+0xfffa1fc4>
   83df8:	d9c02785 	stb	r7,158(sp)
   83dfc:	00392306 	br	8228c <__alt_data_end+0xfffa080c>
   83e00:	d9c02785 	stb	r7,158(sp)
   83e04:	003aa906 	br	828ac <__alt_data_end+0xfffa0e2c>
   83e08:	d9c02785 	stb	r7,158(sp)
   83e0c:	003a3d06 	br	82704 <__alt_data_end+0xfffa0c84>
   83e10:	d9c02785 	stb	r7,158(sp)
   83e14:	003aca06 	br	82940 <__alt_data_end+0xfffa0ec0>

00083e18 <__vfprintf_internal>:
   83e18:	00800274 	movhi	r2,9
   83e1c:	108b9b04 	addi	r2,r2,11884
   83e20:	300f883a 	mov	r7,r6
   83e24:	280d883a 	mov	r6,r5
   83e28:	200b883a 	mov	r5,r4
   83e2c:	11000017 	ldw	r4,0(r2)
   83e30:	0081c201 	jmpi	81c20 <___vfprintf_internal_r>

00083e34 <__sbprintf>:
   83e34:	2880030b 	ldhu	r2,12(r5)
   83e38:	2ac01917 	ldw	r11,100(r5)
   83e3c:	2a80038b 	ldhu	r10,14(r5)
   83e40:	2a400717 	ldw	r9,28(r5)
   83e44:	2a000917 	ldw	r8,36(r5)
   83e48:	defee204 	addi	sp,sp,-1144
   83e4c:	00c10004 	movi	r3,1024
   83e50:	dc011a15 	stw	r16,1128(sp)
   83e54:	10bfff4c 	andi	r2,r2,65533
   83e58:	2821883a 	mov	r16,r5
   83e5c:	d8cb883a 	add	r5,sp,r3
   83e60:	dc811c15 	stw	r18,1136(sp)
   83e64:	dc411b15 	stw	r17,1132(sp)
   83e68:	dfc11d15 	stw	ra,1140(sp)
   83e6c:	2025883a 	mov	r18,r4
   83e70:	d881030d 	sth	r2,1036(sp)
   83e74:	dac11915 	stw	r11,1124(sp)
   83e78:	da81038d 	sth	r10,1038(sp)
   83e7c:	da410715 	stw	r9,1052(sp)
   83e80:	da010915 	stw	r8,1060(sp)
   83e84:	dec10015 	stw	sp,1024(sp)
   83e88:	dec10415 	stw	sp,1040(sp)
   83e8c:	d8c10215 	stw	r3,1032(sp)
   83e90:	d8c10515 	stw	r3,1044(sp)
   83e94:	d8010615 	stw	zero,1048(sp)
   83e98:	0081c200 	call	81c20 <___vfprintf_internal_r>
   83e9c:	1023883a 	mov	r17,r2
   83ea0:	10000416 	blt	r2,zero,83eb4 <__sbprintf+0x80>
   83ea4:	d9410004 	addi	r5,sp,1024
   83ea8:	9009883a 	mov	r4,r18
   83eac:	0085ae80 	call	85ae8 <_fflush_r>
   83eb0:	10000d1e 	bne	r2,zero,83ee8 <__sbprintf+0xb4>
   83eb4:	d881030b 	ldhu	r2,1036(sp)
   83eb8:	1080100c 	andi	r2,r2,64
   83ebc:	10000326 	beq	r2,zero,83ecc <__sbprintf+0x98>
   83ec0:	8080030b 	ldhu	r2,12(r16)
   83ec4:	10801014 	ori	r2,r2,64
   83ec8:	8080030d 	sth	r2,12(r16)
   83ecc:	8805883a 	mov	r2,r17
   83ed0:	dfc11d17 	ldw	ra,1140(sp)
   83ed4:	dc811c17 	ldw	r18,1136(sp)
   83ed8:	dc411b17 	ldw	r17,1132(sp)
   83edc:	dc011a17 	ldw	r16,1128(sp)
   83ee0:	dec11e04 	addi	sp,sp,1144
   83ee4:	f800283a 	ret
   83ee8:	047fffc4 	movi	r17,-1
   83eec:	003ff106 	br	83eb4 <__alt_data_end+0xfffa2434>

00083ef0 <__swsetup_r>:
   83ef0:	00800274 	movhi	r2,9
   83ef4:	defffd04 	addi	sp,sp,-12
   83ef8:	108b9b04 	addi	r2,r2,11884
   83efc:	dc400115 	stw	r17,4(sp)
   83f00:	2023883a 	mov	r17,r4
   83f04:	11000017 	ldw	r4,0(r2)
   83f08:	dc000015 	stw	r16,0(sp)
   83f0c:	dfc00215 	stw	ra,8(sp)
   83f10:	2821883a 	mov	r16,r5
   83f14:	20000226 	beq	r4,zero,83f20 <__swsetup_r+0x30>
   83f18:	20800e17 	ldw	r2,56(r4)
   83f1c:	10003126 	beq	r2,zero,83fe4 <__swsetup_r+0xf4>
   83f20:	8080030b 	ldhu	r2,12(r16)
   83f24:	10c0020c 	andi	r3,r2,8
   83f28:	1009883a 	mov	r4,r2
   83f2c:	18000f26 	beq	r3,zero,83f6c <__swsetup_r+0x7c>
   83f30:	80c00417 	ldw	r3,16(r16)
   83f34:	18001526 	beq	r3,zero,83f8c <__swsetup_r+0x9c>
   83f38:	1100004c 	andi	r4,r2,1
   83f3c:	20001c1e 	bne	r4,zero,83fb0 <__swsetup_r+0xc0>
   83f40:	1080008c 	andi	r2,r2,2
   83f44:	1000291e 	bne	r2,zero,83fec <__swsetup_r+0xfc>
   83f48:	80800517 	ldw	r2,20(r16)
   83f4c:	80800215 	stw	r2,8(r16)
   83f50:	18001c26 	beq	r3,zero,83fc4 <__swsetup_r+0xd4>
   83f54:	0005883a 	mov	r2,zero
   83f58:	dfc00217 	ldw	ra,8(sp)
   83f5c:	dc400117 	ldw	r17,4(sp)
   83f60:	dc000017 	ldw	r16,0(sp)
   83f64:	dec00304 	addi	sp,sp,12
   83f68:	f800283a 	ret
   83f6c:	2080040c 	andi	r2,r4,16
   83f70:	10002e26 	beq	r2,zero,8402c <__swsetup_r+0x13c>
   83f74:	2080010c 	andi	r2,r4,4
   83f78:	10001e1e 	bne	r2,zero,83ff4 <__swsetup_r+0x104>
   83f7c:	80c00417 	ldw	r3,16(r16)
   83f80:	20800214 	ori	r2,r4,8
   83f84:	8080030d 	sth	r2,12(r16)
   83f88:	183feb1e 	bne	r3,zero,83f38 <__alt_data_end+0xfffa24b8>
   83f8c:	1100a00c 	andi	r4,r2,640
   83f90:	01408004 	movi	r5,512
   83f94:	217fe826 	beq	r4,r5,83f38 <__alt_data_end+0xfffa24b8>
   83f98:	800b883a 	mov	r5,r16
   83f9c:	8809883a 	mov	r4,r17
   83fa0:	0086ac40 	call	86ac4 <__smakebuf_r>
   83fa4:	8080030b 	ldhu	r2,12(r16)
   83fa8:	80c00417 	ldw	r3,16(r16)
   83fac:	003fe206 	br	83f38 <__alt_data_end+0xfffa24b8>
   83fb0:	80800517 	ldw	r2,20(r16)
   83fb4:	80000215 	stw	zero,8(r16)
   83fb8:	0085c83a 	sub	r2,zero,r2
   83fbc:	80800615 	stw	r2,24(r16)
   83fc0:	183fe41e 	bne	r3,zero,83f54 <__alt_data_end+0xfffa24d4>
   83fc4:	80c0030b 	ldhu	r3,12(r16)
   83fc8:	0005883a 	mov	r2,zero
   83fcc:	1900200c 	andi	r4,r3,128
   83fd0:	203fe126 	beq	r4,zero,83f58 <__alt_data_end+0xfffa24d8>
   83fd4:	18c01014 	ori	r3,r3,64
   83fd8:	80c0030d 	sth	r3,12(r16)
   83fdc:	00bfffc4 	movi	r2,-1
   83fe0:	003fdd06 	br	83f58 <__alt_data_end+0xfffa24d8>
   83fe4:	0085ec40 	call	85ec4 <__sinit>
   83fe8:	003fcd06 	br	83f20 <__alt_data_end+0xfffa24a0>
   83fec:	0005883a 	mov	r2,zero
   83ff0:	003fd606 	br	83f4c <__alt_data_end+0xfffa24cc>
   83ff4:	81400c17 	ldw	r5,48(r16)
   83ff8:	28000626 	beq	r5,zero,84014 <__swsetup_r+0x124>
   83ffc:	80801004 	addi	r2,r16,64
   84000:	28800326 	beq	r5,r2,84010 <__swsetup_r+0x120>
   84004:	8809883a 	mov	r4,r17
   84008:	00860380 	call	86038 <_free_r>
   8400c:	8100030b 	ldhu	r4,12(r16)
   84010:	80000c15 	stw	zero,48(r16)
   84014:	80c00417 	ldw	r3,16(r16)
   84018:	00bff6c4 	movi	r2,-37
   8401c:	1108703a 	and	r4,r2,r4
   84020:	80000115 	stw	zero,4(r16)
   84024:	80c00015 	stw	r3,0(r16)
   84028:	003fd506 	br	83f80 <__alt_data_end+0xfffa2500>
   8402c:	00800244 	movi	r2,9
   84030:	88800015 	stw	r2,0(r17)
   84034:	20801014 	ori	r2,r4,64
   84038:	8080030d 	sth	r2,12(r16)
   8403c:	00bfffc4 	movi	r2,-1
   84040:	003fc506 	br	83f58 <__alt_data_end+0xfffa24d8>

00084044 <quorem>:
   84044:	defff704 	addi	sp,sp,-36
   84048:	dc800215 	stw	r18,8(sp)
   8404c:	20800417 	ldw	r2,16(r4)
   84050:	2c800417 	ldw	r18,16(r5)
   84054:	dfc00815 	stw	ra,32(sp)
   84058:	ddc00715 	stw	r23,28(sp)
   8405c:	dd800615 	stw	r22,24(sp)
   84060:	dd400515 	stw	r21,20(sp)
   84064:	dd000415 	stw	r20,16(sp)
   84068:	dcc00315 	stw	r19,12(sp)
   8406c:	dc400115 	stw	r17,4(sp)
   84070:	dc000015 	stw	r16,0(sp)
   84074:	14807116 	blt	r2,r18,8423c <quorem+0x1f8>
   84078:	94bfffc4 	addi	r18,r18,-1
   8407c:	94ad883a 	add	r22,r18,r18
   84080:	b5ad883a 	add	r22,r22,r22
   84084:	2c400504 	addi	r17,r5,20
   84088:	8da9883a 	add	r20,r17,r22
   8408c:	25400504 	addi	r21,r4,20
   84090:	282f883a 	mov	r23,r5
   84094:	adad883a 	add	r22,r21,r22
   84098:	a1400017 	ldw	r5,0(r20)
   8409c:	2021883a 	mov	r16,r4
   840a0:	b1000017 	ldw	r4,0(r22)
   840a4:	29400044 	addi	r5,r5,1
   840a8:	00818c00 	call	818c0 <__udivsi3>
   840ac:	1027883a 	mov	r19,r2
   840b0:	10002c26 	beq	r2,zero,84164 <quorem+0x120>
   840b4:	a813883a 	mov	r9,r21
   840b8:	880b883a 	mov	r5,r17
   840bc:	0009883a 	mov	r4,zero
   840c0:	000d883a 	mov	r6,zero
   840c4:	2a000017 	ldw	r8,0(r5)
   840c8:	49c00017 	ldw	r7,0(r9)
   840cc:	29400104 	addi	r5,r5,4
   840d0:	40bfffcc 	andi	r2,r8,65535
   840d4:	14c5383a 	mul	r2,r2,r19
   840d8:	4010d43a 	srli	r8,r8,16
   840dc:	38ffffcc 	andi	r3,r7,65535
   840e0:	1105883a 	add	r2,r2,r4
   840e4:	1008d43a 	srli	r4,r2,16
   840e8:	44d1383a 	mul	r8,r8,r19
   840ec:	198d883a 	add	r6,r3,r6
   840f0:	10ffffcc 	andi	r3,r2,65535
   840f4:	30c7c83a 	sub	r3,r6,r3
   840f8:	380ed43a 	srli	r7,r7,16
   840fc:	4105883a 	add	r2,r8,r4
   84100:	180dd43a 	srai	r6,r3,16
   84104:	113fffcc 	andi	r4,r2,65535
   84108:	390fc83a 	sub	r7,r7,r4
   8410c:	398d883a 	add	r6,r7,r6
   84110:	300e943a 	slli	r7,r6,16
   84114:	18ffffcc 	andi	r3,r3,65535
   84118:	1008d43a 	srli	r4,r2,16
   8411c:	38ceb03a 	or	r7,r7,r3
   84120:	49c00015 	stw	r7,0(r9)
   84124:	300dd43a 	srai	r6,r6,16
   84128:	4a400104 	addi	r9,r9,4
   8412c:	a17fe52e 	bgeu	r20,r5,840c4 <__alt_data_end+0xfffa2644>
   84130:	b0800017 	ldw	r2,0(r22)
   84134:	10000b1e 	bne	r2,zero,84164 <quorem+0x120>
   84138:	b0bfff04 	addi	r2,r22,-4
   8413c:	a880082e 	bgeu	r21,r2,84160 <quorem+0x11c>
   84140:	b0ffff17 	ldw	r3,-4(r22)
   84144:	18000326 	beq	r3,zero,84154 <quorem+0x110>
   84148:	00000506 	br	84160 <quorem+0x11c>
   8414c:	10c00017 	ldw	r3,0(r2)
   84150:	1800031e 	bne	r3,zero,84160 <quorem+0x11c>
   84154:	10bfff04 	addi	r2,r2,-4
   84158:	94bfffc4 	addi	r18,r18,-1
   8415c:	a8bffb36 	bltu	r21,r2,8414c <__alt_data_end+0xfffa26cc>
   84160:	84800415 	stw	r18,16(r16)
   84164:	b80b883a 	mov	r5,r23
   84168:	8009883a 	mov	r4,r16
   8416c:	00882040 	call	88204 <__mcmp>
   84170:	10002616 	blt	r2,zero,8420c <quorem+0x1c8>
   84174:	9cc00044 	addi	r19,r19,1
   84178:	a805883a 	mov	r2,r21
   8417c:	000b883a 	mov	r5,zero
   84180:	11000017 	ldw	r4,0(r2)
   84184:	89800017 	ldw	r6,0(r17)
   84188:	10800104 	addi	r2,r2,4
   8418c:	20ffffcc 	andi	r3,r4,65535
   84190:	194b883a 	add	r5,r3,r5
   84194:	30ffffcc 	andi	r3,r6,65535
   84198:	28c7c83a 	sub	r3,r5,r3
   8419c:	300cd43a 	srli	r6,r6,16
   841a0:	2008d43a 	srli	r4,r4,16
   841a4:	180bd43a 	srai	r5,r3,16
   841a8:	18ffffcc 	andi	r3,r3,65535
   841ac:	2189c83a 	sub	r4,r4,r6
   841b0:	2149883a 	add	r4,r4,r5
   841b4:	200c943a 	slli	r6,r4,16
   841b8:	8c400104 	addi	r17,r17,4
   841bc:	200bd43a 	srai	r5,r4,16
   841c0:	30c6b03a 	or	r3,r6,r3
   841c4:	10ffff15 	stw	r3,-4(r2)
   841c8:	a47fed2e 	bgeu	r20,r17,84180 <__alt_data_end+0xfffa2700>
   841cc:	9485883a 	add	r2,r18,r18
   841d0:	1085883a 	add	r2,r2,r2
   841d4:	a887883a 	add	r3,r21,r2
   841d8:	18800017 	ldw	r2,0(r3)
   841dc:	10000b1e 	bne	r2,zero,8420c <quorem+0x1c8>
   841e0:	18bfff04 	addi	r2,r3,-4
   841e4:	a880082e 	bgeu	r21,r2,84208 <quorem+0x1c4>
   841e8:	18ffff17 	ldw	r3,-4(r3)
   841ec:	18000326 	beq	r3,zero,841fc <quorem+0x1b8>
   841f0:	00000506 	br	84208 <quorem+0x1c4>
   841f4:	10c00017 	ldw	r3,0(r2)
   841f8:	1800031e 	bne	r3,zero,84208 <quorem+0x1c4>
   841fc:	10bfff04 	addi	r2,r2,-4
   84200:	94bfffc4 	addi	r18,r18,-1
   84204:	a8bffb36 	bltu	r21,r2,841f4 <__alt_data_end+0xfffa2774>
   84208:	84800415 	stw	r18,16(r16)
   8420c:	9805883a 	mov	r2,r19
   84210:	dfc00817 	ldw	ra,32(sp)
   84214:	ddc00717 	ldw	r23,28(sp)
   84218:	dd800617 	ldw	r22,24(sp)
   8421c:	dd400517 	ldw	r21,20(sp)
   84220:	dd000417 	ldw	r20,16(sp)
   84224:	dcc00317 	ldw	r19,12(sp)
   84228:	dc800217 	ldw	r18,8(sp)
   8422c:	dc400117 	ldw	r17,4(sp)
   84230:	dc000017 	ldw	r16,0(sp)
   84234:	dec00904 	addi	sp,sp,36
   84238:	f800283a 	ret
   8423c:	0005883a 	mov	r2,zero
   84240:	003ff306 	br	84210 <__alt_data_end+0xfffa2790>

00084244 <_dtoa_r>:
   84244:	20801017 	ldw	r2,64(r4)
   84248:	deffde04 	addi	sp,sp,-136
   8424c:	df002015 	stw	fp,128(sp)
   84250:	dcc01b15 	stw	r19,108(sp)
   84254:	dc801a15 	stw	r18,104(sp)
   84258:	dc401915 	stw	r17,100(sp)
   8425c:	dc001815 	stw	r16,96(sp)
   84260:	dfc02115 	stw	ra,132(sp)
   84264:	ddc01f15 	stw	r23,124(sp)
   84268:	dd801e15 	stw	r22,120(sp)
   8426c:	dd401d15 	stw	r21,116(sp)
   84270:	dd001c15 	stw	r20,112(sp)
   84274:	d9c00315 	stw	r7,12(sp)
   84278:	2039883a 	mov	fp,r4
   8427c:	3023883a 	mov	r17,r6
   84280:	2825883a 	mov	r18,r5
   84284:	dc002417 	ldw	r16,144(sp)
   84288:	3027883a 	mov	r19,r6
   8428c:	10000826 	beq	r2,zero,842b0 <_dtoa_r+0x6c>
   84290:	21801117 	ldw	r6,68(r4)
   84294:	00c00044 	movi	r3,1
   84298:	100b883a 	mov	r5,r2
   8429c:	1986983a 	sll	r3,r3,r6
   842a0:	11800115 	stw	r6,4(r2)
   842a4:	10c00215 	stw	r3,8(r2)
   842a8:	00879e40 	call	879e4 <_Bfree>
   842ac:	e0001015 	stw	zero,64(fp)
   842b0:	88002e16 	blt	r17,zero,8436c <_dtoa_r+0x128>
   842b4:	80000015 	stw	zero,0(r16)
   842b8:	889ffc2c 	andhi	r2,r17,32752
   842bc:	00dffc34 	movhi	r3,32752
   842c0:	10c01c26 	beq	r2,r3,84334 <_dtoa_r+0xf0>
   842c4:	000d883a 	mov	r6,zero
   842c8:	000f883a 	mov	r7,zero
   842cc:	9009883a 	mov	r4,r18
   842d0:	980b883a 	mov	r5,r19
   842d4:	008cd9c0 	call	8cd9c <__eqdf2>
   842d8:	10002b1e 	bne	r2,zero,84388 <_dtoa_r+0x144>
   842dc:	d9c02317 	ldw	r7,140(sp)
   842e0:	00800044 	movi	r2,1
   842e4:	38800015 	stw	r2,0(r7)
   842e8:	d8802517 	ldw	r2,148(sp)
   842ec:	10019e26 	beq	r2,zero,84968 <_dtoa_r+0x724>
   842f0:	d8c02517 	ldw	r3,148(sp)
   842f4:	00800274 	movhi	r2,9
   842f8:	1083bb44 	addi	r2,r2,3821
   842fc:	18800015 	stw	r2,0(r3)
   84300:	10bfffc4 	addi	r2,r2,-1
   84304:	dfc02117 	ldw	ra,132(sp)
   84308:	df002017 	ldw	fp,128(sp)
   8430c:	ddc01f17 	ldw	r23,124(sp)
   84310:	dd801e17 	ldw	r22,120(sp)
   84314:	dd401d17 	ldw	r21,116(sp)
   84318:	dd001c17 	ldw	r20,112(sp)
   8431c:	dcc01b17 	ldw	r19,108(sp)
   84320:	dc801a17 	ldw	r18,104(sp)
   84324:	dc401917 	ldw	r17,100(sp)
   84328:	dc001817 	ldw	r16,96(sp)
   8432c:	dec02204 	addi	sp,sp,136
   84330:	f800283a 	ret
   84334:	d8c02317 	ldw	r3,140(sp)
   84338:	0089c3c4 	movi	r2,9999
   8433c:	18800015 	stw	r2,0(r3)
   84340:	90017726 	beq	r18,zero,84920 <_dtoa_r+0x6dc>
   84344:	00800274 	movhi	r2,9
   84348:	1083c704 	addi	r2,r2,3868
   8434c:	d9002517 	ldw	r4,148(sp)
   84350:	203fec26 	beq	r4,zero,84304 <__alt_data_end+0xfffa2884>
   84354:	10c000c7 	ldb	r3,3(r2)
   84358:	1801781e 	bne	r3,zero,8493c <_dtoa_r+0x6f8>
   8435c:	10c000c4 	addi	r3,r2,3
   84360:	d9802517 	ldw	r6,148(sp)
   84364:	30c00015 	stw	r3,0(r6)
   84368:	003fe606 	br	84304 <__alt_data_end+0xfffa2884>
   8436c:	04e00034 	movhi	r19,32768
   84370:	9cffffc4 	addi	r19,r19,-1
   84374:	00800044 	movi	r2,1
   84378:	8ce6703a 	and	r19,r17,r19
   8437c:	80800015 	stw	r2,0(r16)
   84380:	9823883a 	mov	r17,r19
   84384:	003fcc06 	br	842b8 <__alt_data_end+0xfffa2838>
   84388:	d8800204 	addi	r2,sp,8
   8438c:	d8800015 	stw	r2,0(sp)
   84390:	d9c00104 	addi	r7,sp,4
   84394:	900b883a 	mov	r5,r18
   84398:	980d883a 	mov	r6,r19
   8439c:	e009883a 	mov	r4,fp
   843a0:	8820d53a 	srli	r16,r17,20
   843a4:	00885d00 	call	885d0 <__d2b>
   843a8:	d8800915 	stw	r2,36(sp)
   843ac:	8001651e 	bne	r16,zero,84944 <_dtoa_r+0x700>
   843b0:	dd800217 	ldw	r22,8(sp)
   843b4:	dc000117 	ldw	r16,4(sp)
   843b8:	00800804 	movi	r2,32
   843bc:	b421883a 	add	r16,r22,r16
   843c0:	80c10c84 	addi	r3,r16,1074
   843c4:	10c2d10e 	bge	r2,r3,84f0c <_dtoa_r+0xcc8>
   843c8:	00801004 	movi	r2,64
   843cc:	81010484 	addi	r4,r16,1042
   843d0:	10c7c83a 	sub	r3,r2,r3
   843d4:	9108d83a 	srl	r4,r18,r4
   843d8:	88e2983a 	sll	r17,r17,r3
   843dc:	2448b03a 	or	r4,r4,r17
   843e0:	008e1640 	call	8e164 <__floatunsidf>
   843e4:	017f8434 	movhi	r5,65040
   843e8:	01800044 	movi	r6,1
   843ec:	1009883a 	mov	r4,r2
   843f0:	194b883a 	add	r5,r3,r5
   843f4:	843fffc4 	addi	r16,r16,-1
   843f8:	d9801115 	stw	r6,68(sp)
   843fc:	000d883a 	mov	r6,zero
   84400:	01cffe34 	movhi	r7,16376
   84404:	008d70c0 	call	8d70c <__subdf3>
   84408:	0198dbf4 	movhi	r6,25455
   8440c:	01cff4f4 	movhi	r7,16339
   84410:	3190d844 	addi	r6,r6,17249
   84414:	39e1e9c4 	addi	r7,r7,-30809
   84418:	1009883a 	mov	r4,r2
   8441c:	180b883a 	mov	r5,r3
   84420:	008cff40 	call	8cff4 <__muldf3>
   84424:	01a2d874 	movhi	r6,35681
   84428:	01cff1f4 	movhi	r7,16327
   8442c:	31b22cc4 	addi	r6,r6,-14157
   84430:	39e28a04 	addi	r7,r7,-30168
   84434:	180b883a 	mov	r5,r3
   84438:	1009883a 	mov	r4,r2
   8443c:	008bc080 	call	8bc08 <__adddf3>
   84440:	8009883a 	mov	r4,r16
   84444:	1029883a 	mov	r20,r2
   84448:	1823883a 	mov	r17,r3
   8444c:	008e0880 	call	8e088 <__floatsidf>
   84450:	019427f4 	movhi	r6,20639
   84454:	01cff4f4 	movhi	r7,16339
   84458:	319e7ec4 	addi	r6,r6,31227
   8445c:	39d104c4 	addi	r7,r7,17427
   84460:	1009883a 	mov	r4,r2
   84464:	180b883a 	mov	r5,r3
   84468:	008cff40 	call	8cff4 <__muldf3>
   8446c:	100d883a 	mov	r6,r2
   84470:	180f883a 	mov	r7,r3
   84474:	a009883a 	mov	r4,r20
   84478:	880b883a 	mov	r5,r17
   8447c:	008bc080 	call	8bc08 <__adddf3>
   84480:	1009883a 	mov	r4,r2
   84484:	180b883a 	mov	r5,r3
   84488:	1029883a 	mov	r20,r2
   8448c:	1823883a 	mov	r17,r3
   84490:	008e0080 	call	8e008 <__fixdfsi>
   84494:	000d883a 	mov	r6,zero
   84498:	000f883a 	mov	r7,zero
   8449c:	a009883a 	mov	r4,r20
   844a0:	880b883a 	mov	r5,r17
   844a4:	d8800515 	stw	r2,20(sp)
   844a8:	008cf000 	call	8cf00 <__ledf2>
   844ac:	10028716 	blt	r2,zero,84ecc <_dtoa_r+0xc88>
   844b0:	d8c00517 	ldw	r3,20(sp)
   844b4:	00800584 	movi	r2,22
   844b8:	10c27536 	bltu	r2,r3,84e90 <_dtoa_r+0xc4c>
   844bc:	180490fa 	slli	r2,r3,3
   844c0:	00c00274 	movhi	r3,9
   844c4:	18c3e304 	addi	r3,r3,3980
   844c8:	1885883a 	add	r2,r3,r2
   844cc:	11000017 	ldw	r4,0(r2)
   844d0:	11400117 	ldw	r5,4(r2)
   844d4:	900d883a 	mov	r6,r18
   844d8:	980f883a 	mov	r7,r19
   844dc:	008ce240 	call	8ce24 <__gedf2>
   844e0:	00828d0e 	bge	zero,r2,84f18 <_dtoa_r+0xcd4>
   844e4:	d9000517 	ldw	r4,20(sp)
   844e8:	d8000e15 	stw	zero,56(sp)
   844ec:	213fffc4 	addi	r4,r4,-1
   844f0:	d9000515 	stw	r4,20(sp)
   844f4:	b42dc83a 	sub	r22,r22,r16
   844f8:	b5bfffc4 	addi	r22,r22,-1
   844fc:	b0026f16 	blt	r22,zero,84ebc <_dtoa_r+0xc78>
   84500:	d8000815 	stw	zero,32(sp)
   84504:	d9c00517 	ldw	r7,20(sp)
   84508:	38026416 	blt	r7,zero,84e9c <_dtoa_r+0xc58>
   8450c:	b1ed883a 	add	r22,r22,r7
   84510:	d9c00d15 	stw	r7,52(sp)
   84514:	d8000a15 	stw	zero,40(sp)
   84518:	d9800317 	ldw	r6,12(sp)
   8451c:	00800244 	movi	r2,9
   84520:	11811436 	bltu	r2,r6,84974 <_dtoa_r+0x730>
   84524:	00800144 	movi	r2,5
   84528:	1184e10e 	bge	r2,r6,858b0 <_dtoa_r+0x166c>
   8452c:	31bfff04 	addi	r6,r6,-4
   84530:	d9800315 	stw	r6,12(sp)
   84534:	0023883a 	mov	r17,zero
   84538:	d9800317 	ldw	r6,12(sp)
   8453c:	008000c4 	movi	r2,3
   84540:	30836726 	beq	r6,r2,852e0 <_dtoa_r+0x109c>
   84544:	1183410e 	bge	r2,r6,8524c <_dtoa_r+0x1008>
   84548:	d9c00317 	ldw	r7,12(sp)
   8454c:	00800104 	movi	r2,4
   84550:	38827c26 	beq	r7,r2,84f44 <_dtoa_r+0xd00>
   84554:	00800144 	movi	r2,5
   84558:	3884c41e 	bne	r7,r2,8586c <_dtoa_r+0x1628>
   8455c:	00800044 	movi	r2,1
   84560:	d8800b15 	stw	r2,44(sp)
   84564:	d8c00517 	ldw	r3,20(sp)
   84568:	d9002217 	ldw	r4,136(sp)
   8456c:	1907883a 	add	r3,r3,r4
   84570:	19800044 	addi	r6,r3,1
   84574:	d8c00c15 	stw	r3,48(sp)
   84578:	d9800615 	stw	r6,24(sp)
   8457c:	0183a40e 	bge	zero,r6,85410 <_dtoa_r+0x11cc>
   84580:	d9800617 	ldw	r6,24(sp)
   84584:	3021883a 	mov	r16,r6
   84588:	e0001115 	stw	zero,68(fp)
   8458c:	008005c4 	movi	r2,23
   84590:	1184c92e 	bgeu	r2,r6,858b8 <_dtoa_r+0x1674>
   84594:	00c00044 	movi	r3,1
   84598:	00800104 	movi	r2,4
   8459c:	1085883a 	add	r2,r2,r2
   845a0:	11000504 	addi	r4,r2,20
   845a4:	180b883a 	mov	r5,r3
   845a8:	18c00044 	addi	r3,r3,1
   845ac:	313ffb2e 	bgeu	r6,r4,8459c <__alt_data_end+0xfffa2b1c>
   845b0:	e1401115 	stw	r5,68(fp)
   845b4:	e009883a 	mov	r4,fp
   845b8:	008793c0 	call	8793c <_Balloc>
   845bc:	d8800715 	stw	r2,28(sp)
   845c0:	e0801015 	stw	r2,64(fp)
   845c4:	00800384 	movi	r2,14
   845c8:	1400f736 	bltu	r2,r16,849a8 <_dtoa_r+0x764>
   845cc:	8800f626 	beq	r17,zero,849a8 <_dtoa_r+0x764>
   845d0:	d9c00517 	ldw	r7,20(sp)
   845d4:	01c39a0e 	bge	zero,r7,85440 <_dtoa_r+0x11fc>
   845d8:	388003cc 	andi	r2,r7,15
   845dc:	100490fa 	slli	r2,r2,3
   845e0:	382bd13a 	srai	r21,r7,4
   845e4:	00c00274 	movhi	r3,9
   845e8:	18c3e304 	addi	r3,r3,3980
   845ec:	1885883a 	add	r2,r3,r2
   845f0:	a8c0040c 	andi	r3,r21,16
   845f4:	12400017 	ldw	r9,0(r2)
   845f8:	12000117 	ldw	r8,4(r2)
   845fc:	18037926 	beq	r3,zero,853e4 <_dtoa_r+0x11a0>
   84600:	00800274 	movhi	r2,9
   84604:	1083d904 	addi	r2,r2,3940
   84608:	11800817 	ldw	r6,32(r2)
   8460c:	11c00917 	ldw	r7,36(r2)
   84610:	9009883a 	mov	r4,r18
   84614:	980b883a 	mov	r5,r19
   84618:	da001715 	stw	r8,92(sp)
   8461c:	da401615 	stw	r9,88(sp)
   84620:	008c4b40 	call	8c4b4 <__divdf3>
   84624:	da001717 	ldw	r8,92(sp)
   84628:	da401617 	ldw	r9,88(sp)
   8462c:	ad4003cc 	andi	r21,r21,15
   84630:	040000c4 	movi	r16,3
   84634:	1023883a 	mov	r17,r2
   84638:	1829883a 	mov	r20,r3
   8463c:	a8001126 	beq	r21,zero,84684 <_dtoa_r+0x440>
   84640:	05c00274 	movhi	r23,9
   84644:	bdc3d904 	addi	r23,r23,3940
   84648:	4805883a 	mov	r2,r9
   8464c:	4007883a 	mov	r3,r8
   84650:	a980004c 	andi	r6,r21,1
   84654:	1009883a 	mov	r4,r2
   84658:	a82bd07a 	srai	r21,r21,1
   8465c:	180b883a 	mov	r5,r3
   84660:	30000426 	beq	r6,zero,84674 <_dtoa_r+0x430>
   84664:	b9800017 	ldw	r6,0(r23)
   84668:	b9c00117 	ldw	r7,4(r23)
   8466c:	84000044 	addi	r16,r16,1
   84670:	008cff40 	call	8cff4 <__muldf3>
   84674:	bdc00204 	addi	r23,r23,8
   84678:	a83ff51e 	bne	r21,zero,84650 <__alt_data_end+0xfffa2bd0>
   8467c:	1013883a 	mov	r9,r2
   84680:	1811883a 	mov	r8,r3
   84684:	480d883a 	mov	r6,r9
   84688:	400f883a 	mov	r7,r8
   8468c:	8809883a 	mov	r4,r17
   84690:	a00b883a 	mov	r5,r20
   84694:	008c4b40 	call	8c4b4 <__divdf3>
   84698:	d8800f15 	stw	r2,60(sp)
   8469c:	d8c01015 	stw	r3,64(sp)
   846a0:	d8c00e17 	ldw	r3,56(sp)
   846a4:	18000626 	beq	r3,zero,846c0 <_dtoa_r+0x47c>
   846a8:	d9000f17 	ldw	r4,60(sp)
   846ac:	d9401017 	ldw	r5,64(sp)
   846b0:	000d883a 	mov	r6,zero
   846b4:	01cffc34 	movhi	r7,16368
   846b8:	008cf000 	call	8cf00 <__ledf2>
   846bc:	10040b16 	blt	r2,zero,856ec <_dtoa_r+0x14a8>
   846c0:	8009883a 	mov	r4,r16
   846c4:	008e0880 	call	8e088 <__floatsidf>
   846c8:	d9800f17 	ldw	r6,60(sp)
   846cc:	d9c01017 	ldw	r7,64(sp)
   846d0:	1009883a 	mov	r4,r2
   846d4:	180b883a 	mov	r5,r3
   846d8:	008cff40 	call	8cff4 <__muldf3>
   846dc:	000d883a 	mov	r6,zero
   846e0:	01d00734 	movhi	r7,16412
   846e4:	1009883a 	mov	r4,r2
   846e8:	180b883a 	mov	r5,r3
   846ec:	008bc080 	call	8bc08 <__adddf3>
   846f0:	1021883a 	mov	r16,r2
   846f4:	d8800617 	ldw	r2,24(sp)
   846f8:	047f3034 	movhi	r17,64704
   846fc:	1c63883a 	add	r17,r3,r17
   84700:	10031826 	beq	r2,zero,85364 <_dtoa_r+0x1120>
   84704:	d8c00517 	ldw	r3,20(sp)
   84708:	db000617 	ldw	r12,24(sp)
   8470c:	d8c01315 	stw	r3,76(sp)
   84710:	d9000b17 	ldw	r4,44(sp)
   84714:	20038f26 	beq	r4,zero,85554 <_dtoa_r+0x1310>
   84718:	60bfffc4 	addi	r2,r12,-1
   8471c:	100490fa 	slli	r2,r2,3
   84720:	00c00274 	movhi	r3,9
   84724:	18c3e304 	addi	r3,r3,3980
   84728:	1885883a 	add	r2,r3,r2
   8472c:	11800017 	ldw	r6,0(r2)
   84730:	11c00117 	ldw	r7,4(r2)
   84734:	d8800717 	ldw	r2,28(sp)
   84738:	0009883a 	mov	r4,zero
   8473c:	014ff834 	movhi	r5,16352
   84740:	db001615 	stw	r12,88(sp)
   84744:	15c00044 	addi	r23,r2,1
   84748:	008c4b40 	call	8c4b4 <__divdf3>
   8474c:	800d883a 	mov	r6,r16
   84750:	880f883a 	mov	r7,r17
   84754:	1009883a 	mov	r4,r2
   84758:	180b883a 	mov	r5,r3
   8475c:	008d70c0 	call	8d70c <__subdf3>
   84760:	d9401017 	ldw	r5,64(sp)
   84764:	d9000f17 	ldw	r4,60(sp)
   84768:	102b883a 	mov	r21,r2
   8476c:	d8c01215 	stw	r3,72(sp)
   84770:	008e0080 	call	8e008 <__fixdfsi>
   84774:	1009883a 	mov	r4,r2
   84778:	1029883a 	mov	r20,r2
   8477c:	008e0880 	call	8e088 <__floatsidf>
   84780:	d9000f17 	ldw	r4,60(sp)
   84784:	d9401017 	ldw	r5,64(sp)
   84788:	100d883a 	mov	r6,r2
   8478c:	180f883a 	mov	r7,r3
   84790:	008d70c0 	call	8d70c <__subdf3>
   84794:	1823883a 	mov	r17,r3
   84798:	d8c00717 	ldw	r3,28(sp)
   8479c:	d9401217 	ldw	r5,72(sp)
   847a0:	a2000c04 	addi	r8,r20,48
   847a4:	1021883a 	mov	r16,r2
   847a8:	1a000005 	stb	r8,0(r3)
   847ac:	800d883a 	mov	r6,r16
   847b0:	880f883a 	mov	r7,r17
   847b4:	a809883a 	mov	r4,r21
   847b8:	4029883a 	mov	r20,r8
   847bc:	008ce240 	call	8ce24 <__gedf2>
   847c0:	00841d16 	blt	zero,r2,85838 <_dtoa_r+0x15f4>
   847c4:	800d883a 	mov	r6,r16
   847c8:	880f883a 	mov	r7,r17
   847cc:	0009883a 	mov	r4,zero
   847d0:	014ffc34 	movhi	r5,16368
   847d4:	008d70c0 	call	8d70c <__subdf3>
   847d8:	d9401217 	ldw	r5,72(sp)
   847dc:	100d883a 	mov	r6,r2
   847e0:	180f883a 	mov	r7,r3
   847e4:	a809883a 	mov	r4,r21
   847e8:	008ce240 	call	8ce24 <__gedf2>
   847ec:	db001617 	ldw	r12,88(sp)
   847f0:	00840e16 	blt	zero,r2,8582c <_dtoa_r+0x15e8>
   847f4:	00800044 	movi	r2,1
   847f8:	13006b0e 	bge	r2,r12,849a8 <_dtoa_r+0x764>
   847fc:	d9000717 	ldw	r4,28(sp)
   84800:	dd800f15 	stw	r22,60(sp)
   84804:	dcc01015 	stw	r19,64(sp)
   84808:	2319883a 	add	r12,r4,r12
   8480c:	dcc01217 	ldw	r19,72(sp)
   84810:	602d883a 	mov	r22,r12
   84814:	dc801215 	stw	r18,72(sp)
   84818:	b825883a 	mov	r18,r23
   8481c:	00000906 	br	84844 <_dtoa_r+0x600>
   84820:	008d70c0 	call	8d70c <__subdf3>
   84824:	a80d883a 	mov	r6,r21
   84828:	980f883a 	mov	r7,r19
   8482c:	1009883a 	mov	r4,r2
   84830:	180b883a 	mov	r5,r3
   84834:	008cf000 	call	8cf00 <__ledf2>
   84838:	1003e816 	blt	r2,zero,857dc <_dtoa_r+0x1598>
   8483c:	b825883a 	mov	r18,r23
   84840:	bd83e926 	beq	r23,r22,857e8 <_dtoa_r+0x15a4>
   84844:	a809883a 	mov	r4,r21
   84848:	980b883a 	mov	r5,r19
   8484c:	000d883a 	mov	r6,zero
   84850:	01d00934 	movhi	r7,16420
   84854:	008cff40 	call	8cff4 <__muldf3>
   84858:	000d883a 	mov	r6,zero
   8485c:	01d00934 	movhi	r7,16420
   84860:	8009883a 	mov	r4,r16
   84864:	880b883a 	mov	r5,r17
   84868:	102b883a 	mov	r21,r2
   8486c:	1827883a 	mov	r19,r3
   84870:	008cff40 	call	8cff4 <__muldf3>
   84874:	180b883a 	mov	r5,r3
   84878:	1009883a 	mov	r4,r2
   8487c:	1821883a 	mov	r16,r3
   84880:	1023883a 	mov	r17,r2
   84884:	008e0080 	call	8e008 <__fixdfsi>
   84888:	1009883a 	mov	r4,r2
   8488c:	1029883a 	mov	r20,r2
   84890:	008e0880 	call	8e088 <__floatsidf>
   84894:	8809883a 	mov	r4,r17
   84898:	800b883a 	mov	r5,r16
   8489c:	100d883a 	mov	r6,r2
   848a0:	180f883a 	mov	r7,r3
   848a4:	008d70c0 	call	8d70c <__subdf3>
   848a8:	a5000c04 	addi	r20,r20,48
   848ac:	a80d883a 	mov	r6,r21
   848b0:	980f883a 	mov	r7,r19
   848b4:	1009883a 	mov	r4,r2
   848b8:	180b883a 	mov	r5,r3
   848bc:	95000005 	stb	r20,0(r18)
   848c0:	1021883a 	mov	r16,r2
   848c4:	1823883a 	mov	r17,r3
   848c8:	008cf000 	call	8cf00 <__ledf2>
   848cc:	bdc00044 	addi	r23,r23,1
   848d0:	800d883a 	mov	r6,r16
   848d4:	880f883a 	mov	r7,r17
   848d8:	0009883a 	mov	r4,zero
   848dc:	014ffc34 	movhi	r5,16368
   848e0:	103fcf0e 	bge	r2,zero,84820 <__alt_data_end+0xfffa2da0>
   848e4:	d8c01317 	ldw	r3,76(sp)
   848e8:	d8c00515 	stw	r3,20(sp)
   848ec:	d9400917 	ldw	r5,36(sp)
   848f0:	e009883a 	mov	r4,fp
   848f4:	00879e40 	call	879e4 <_Bfree>
   848f8:	d9000517 	ldw	r4,20(sp)
   848fc:	d9802317 	ldw	r6,140(sp)
   84900:	d9c02517 	ldw	r7,148(sp)
   84904:	b8000005 	stb	zero,0(r23)
   84908:	20800044 	addi	r2,r4,1
   8490c:	30800015 	stw	r2,0(r6)
   84910:	3802aa26 	beq	r7,zero,853bc <_dtoa_r+0x1178>
   84914:	3dc00015 	stw	r23,0(r7)
   84918:	d8800717 	ldw	r2,28(sp)
   8491c:	003e7906 	br	84304 <__alt_data_end+0xfffa2884>
   84920:	00800434 	movhi	r2,16
   84924:	10bfffc4 	addi	r2,r2,-1
   84928:	88a2703a 	and	r17,r17,r2
   8492c:	883e851e 	bne	r17,zero,84344 <__alt_data_end+0xfffa28c4>
   84930:	00800274 	movhi	r2,9
   84934:	1083c404 	addi	r2,r2,3856
   84938:	003e8406 	br	8434c <__alt_data_end+0xfffa28cc>
   8493c:	10c00204 	addi	r3,r2,8
   84940:	003e8706 	br	84360 <__alt_data_end+0xfffa28e0>
   84944:	01400434 	movhi	r5,16
   84948:	297fffc4 	addi	r5,r5,-1
   8494c:	994a703a 	and	r5,r19,r5
   84950:	9009883a 	mov	r4,r18
   84954:	843f0044 	addi	r16,r16,-1023
   84958:	294ffc34 	orhi	r5,r5,16368
   8495c:	dd800217 	ldw	r22,8(sp)
   84960:	d8001115 	stw	zero,68(sp)
   84964:	003ea506 	br	843fc <__alt_data_end+0xfffa297c>
   84968:	00800274 	movhi	r2,9
   8496c:	1083bb04 	addi	r2,r2,3820
   84970:	003e6406 	br	84304 <__alt_data_end+0xfffa2884>
   84974:	e0001115 	stw	zero,68(fp)
   84978:	000b883a 	mov	r5,zero
   8497c:	e009883a 	mov	r4,fp
   84980:	008793c0 	call	8793c <_Balloc>
   84984:	01bfffc4 	movi	r6,-1
   84988:	01c00044 	movi	r7,1
   8498c:	d8800715 	stw	r2,28(sp)
   84990:	d9800c15 	stw	r6,48(sp)
   84994:	e0801015 	stw	r2,64(fp)
   84998:	d8000315 	stw	zero,12(sp)
   8499c:	d9c00b15 	stw	r7,44(sp)
   849a0:	d9800615 	stw	r6,24(sp)
   849a4:	d8002215 	stw	zero,136(sp)
   849a8:	d8800117 	ldw	r2,4(sp)
   849ac:	10008916 	blt	r2,zero,84bd4 <_dtoa_r+0x990>
   849b0:	d9000517 	ldw	r4,20(sp)
   849b4:	00c00384 	movi	r3,14
   849b8:	19008616 	blt	r3,r4,84bd4 <_dtoa_r+0x990>
   849bc:	200490fa 	slli	r2,r4,3
   849c0:	00c00274 	movhi	r3,9
   849c4:	d9802217 	ldw	r6,136(sp)
   849c8:	18c3e304 	addi	r3,r3,3980
   849cc:	1885883a 	add	r2,r3,r2
   849d0:	14000017 	ldw	r16,0(r2)
   849d4:	14400117 	ldw	r17,4(r2)
   849d8:	30016316 	blt	r6,zero,84f68 <_dtoa_r+0xd24>
   849dc:	800d883a 	mov	r6,r16
   849e0:	880f883a 	mov	r7,r17
   849e4:	9009883a 	mov	r4,r18
   849e8:	980b883a 	mov	r5,r19
   849ec:	008c4b40 	call	8c4b4 <__divdf3>
   849f0:	180b883a 	mov	r5,r3
   849f4:	1009883a 	mov	r4,r2
   849f8:	008e0080 	call	8e008 <__fixdfsi>
   849fc:	1009883a 	mov	r4,r2
   84a00:	102b883a 	mov	r21,r2
   84a04:	008e0880 	call	8e088 <__floatsidf>
   84a08:	800d883a 	mov	r6,r16
   84a0c:	880f883a 	mov	r7,r17
   84a10:	1009883a 	mov	r4,r2
   84a14:	180b883a 	mov	r5,r3
   84a18:	008cff40 	call	8cff4 <__muldf3>
   84a1c:	100d883a 	mov	r6,r2
   84a20:	180f883a 	mov	r7,r3
   84a24:	9009883a 	mov	r4,r18
   84a28:	980b883a 	mov	r5,r19
   84a2c:	008d70c0 	call	8d70c <__subdf3>
   84a30:	d9c00717 	ldw	r7,28(sp)
   84a34:	1009883a 	mov	r4,r2
   84a38:	a8800c04 	addi	r2,r21,48
   84a3c:	38800005 	stb	r2,0(r7)
   84a40:	3dc00044 	addi	r23,r7,1
   84a44:	d9c00617 	ldw	r7,24(sp)
   84a48:	01800044 	movi	r6,1
   84a4c:	180b883a 	mov	r5,r3
   84a50:	2005883a 	mov	r2,r4
   84a54:	39803826 	beq	r7,r6,84b38 <_dtoa_r+0x8f4>
   84a58:	000d883a 	mov	r6,zero
   84a5c:	01d00934 	movhi	r7,16420
   84a60:	008cff40 	call	8cff4 <__muldf3>
   84a64:	000d883a 	mov	r6,zero
   84a68:	000f883a 	mov	r7,zero
   84a6c:	1009883a 	mov	r4,r2
   84a70:	180b883a 	mov	r5,r3
   84a74:	1025883a 	mov	r18,r2
   84a78:	1827883a 	mov	r19,r3
   84a7c:	008cd9c0 	call	8cd9c <__eqdf2>
   84a80:	103f9a26 	beq	r2,zero,848ec <__alt_data_end+0xfffa2e6c>
   84a84:	d9c00617 	ldw	r7,24(sp)
   84a88:	d8c00717 	ldw	r3,28(sp)
   84a8c:	b829883a 	mov	r20,r23
   84a90:	38bfffc4 	addi	r2,r7,-1
   84a94:	18ad883a 	add	r22,r3,r2
   84a98:	00000a06 	br	84ac4 <_dtoa_r+0x880>
   84a9c:	008cff40 	call	8cff4 <__muldf3>
   84aa0:	000d883a 	mov	r6,zero
   84aa4:	000f883a 	mov	r7,zero
   84aa8:	1009883a 	mov	r4,r2
   84aac:	180b883a 	mov	r5,r3
   84ab0:	1025883a 	mov	r18,r2
   84ab4:	1827883a 	mov	r19,r3
   84ab8:	b829883a 	mov	r20,r23
   84abc:	008cd9c0 	call	8cd9c <__eqdf2>
   84ac0:	103f8a26 	beq	r2,zero,848ec <__alt_data_end+0xfffa2e6c>
   84ac4:	800d883a 	mov	r6,r16
   84ac8:	880f883a 	mov	r7,r17
   84acc:	9009883a 	mov	r4,r18
   84ad0:	980b883a 	mov	r5,r19
   84ad4:	008c4b40 	call	8c4b4 <__divdf3>
   84ad8:	180b883a 	mov	r5,r3
   84adc:	1009883a 	mov	r4,r2
   84ae0:	008e0080 	call	8e008 <__fixdfsi>
   84ae4:	1009883a 	mov	r4,r2
   84ae8:	102b883a 	mov	r21,r2
   84aec:	008e0880 	call	8e088 <__floatsidf>
   84af0:	800d883a 	mov	r6,r16
   84af4:	880f883a 	mov	r7,r17
   84af8:	1009883a 	mov	r4,r2
   84afc:	180b883a 	mov	r5,r3
   84b00:	008cff40 	call	8cff4 <__muldf3>
   84b04:	100d883a 	mov	r6,r2
   84b08:	180f883a 	mov	r7,r3
   84b0c:	9009883a 	mov	r4,r18
   84b10:	980b883a 	mov	r5,r19
   84b14:	008d70c0 	call	8d70c <__subdf3>
   84b18:	aa000c04 	addi	r8,r21,48
   84b1c:	a2000005 	stb	r8,0(r20)
   84b20:	000d883a 	mov	r6,zero
   84b24:	01d00934 	movhi	r7,16420
   84b28:	1009883a 	mov	r4,r2
   84b2c:	180b883a 	mov	r5,r3
   84b30:	a5c00044 	addi	r23,r20,1
   84b34:	b53fd91e 	bne	r22,r20,84a9c <__alt_data_end+0xfffa301c>
   84b38:	100d883a 	mov	r6,r2
   84b3c:	180f883a 	mov	r7,r3
   84b40:	1009883a 	mov	r4,r2
   84b44:	180b883a 	mov	r5,r3
   84b48:	008bc080 	call	8bc08 <__adddf3>
   84b4c:	100d883a 	mov	r6,r2
   84b50:	180f883a 	mov	r7,r3
   84b54:	8009883a 	mov	r4,r16
   84b58:	880b883a 	mov	r5,r17
   84b5c:	1027883a 	mov	r19,r2
   84b60:	1825883a 	mov	r18,r3
   84b64:	008cf000 	call	8cf00 <__ledf2>
   84b68:	10000816 	blt	r2,zero,84b8c <_dtoa_r+0x948>
   84b6c:	980d883a 	mov	r6,r19
   84b70:	900f883a 	mov	r7,r18
   84b74:	8009883a 	mov	r4,r16
   84b78:	880b883a 	mov	r5,r17
   84b7c:	008cd9c0 	call	8cd9c <__eqdf2>
   84b80:	103f5a1e 	bne	r2,zero,848ec <__alt_data_end+0xfffa2e6c>
   84b84:	ad40004c 	andi	r21,r21,1
   84b88:	a83f5826 	beq	r21,zero,848ec <__alt_data_end+0xfffa2e6c>
   84b8c:	bd3fffc3 	ldbu	r20,-1(r23)
   84b90:	b8bfffc4 	addi	r2,r23,-1
   84b94:	1007883a 	mov	r3,r2
   84b98:	01400e44 	movi	r5,57
   84b9c:	d9800717 	ldw	r6,28(sp)
   84ba0:	00000506 	br	84bb8 <_dtoa_r+0x974>
   84ba4:	18ffffc4 	addi	r3,r3,-1
   84ba8:	11824726 	beq	r2,r6,854c8 <_dtoa_r+0x1284>
   84bac:	1d000003 	ldbu	r20,0(r3)
   84bb0:	102f883a 	mov	r23,r2
   84bb4:	10bfffc4 	addi	r2,r2,-1
   84bb8:	a1003fcc 	andi	r4,r20,255
   84bbc:	2100201c 	xori	r4,r4,128
   84bc0:	213fe004 	addi	r4,r4,-128
   84bc4:	217ff726 	beq	r4,r5,84ba4 <__alt_data_end+0xfffa3124>
   84bc8:	a2000044 	addi	r8,r20,1
   84bcc:	12000005 	stb	r8,0(r2)
   84bd0:	003f4606 	br	848ec <__alt_data_end+0xfffa2e6c>
   84bd4:	d9000b17 	ldw	r4,44(sp)
   84bd8:	2000c826 	beq	r4,zero,84efc <_dtoa_r+0xcb8>
   84bdc:	d9800317 	ldw	r6,12(sp)
   84be0:	00c00044 	movi	r3,1
   84be4:	1980f90e 	bge	r3,r6,84fcc <_dtoa_r+0xd88>
   84be8:	d8800617 	ldw	r2,24(sp)
   84bec:	d8c00a17 	ldw	r3,40(sp)
   84bf0:	157fffc4 	addi	r21,r2,-1
   84bf4:	1d41f316 	blt	r3,r21,853c4 <_dtoa_r+0x1180>
   84bf8:	1d6bc83a 	sub	r21,r3,r21
   84bfc:	d9c00617 	ldw	r7,24(sp)
   84c00:	3802aa16 	blt	r7,zero,856ac <_dtoa_r+0x1468>
   84c04:	dd000817 	ldw	r20,32(sp)
   84c08:	d8800617 	ldw	r2,24(sp)
   84c0c:	d8c00817 	ldw	r3,32(sp)
   84c10:	01400044 	movi	r5,1
   84c14:	e009883a 	mov	r4,fp
   84c18:	1887883a 	add	r3,r3,r2
   84c1c:	d8c00815 	stw	r3,32(sp)
   84c20:	b0ad883a 	add	r22,r22,r2
   84c24:	0087d480 	call	87d48 <__i2b>
   84c28:	1023883a 	mov	r17,r2
   84c2c:	a0000826 	beq	r20,zero,84c50 <_dtoa_r+0xa0c>
   84c30:	0580070e 	bge	zero,r22,84c50 <_dtoa_r+0xa0c>
   84c34:	a005883a 	mov	r2,r20
   84c38:	b500b916 	blt	r22,r20,84f20 <_dtoa_r+0xcdc>
   84c3c:	d9000817 	ldw	r4,32(sp)
   84c40:	a0a9c83a 	sub	r20,r20,r2
   84c44:	b0adc83a 	sub	r22,r22,r2
   84c48:	2089c83a 	sub	r4,r4,r2
   84c4c:	d9000815 	stw	r4,32(sp)
   84c50:	d9800a17 	ldw	r6,40(sp)
   84c54:	0181810e 	bge	zero,r6,8525c <_dtoa_r+0x1018>
   84c58:	d9c00b17 	ldw	r7,44(sp)
   84c5c:	3800b326 	beq	r7,zero,84f2c <_dtoa_r+0xce8>
   84c60:	a800b226 	beq	r21,zero,84f2c <_dtoa_r+0xce8>
   84c64:	880b883a 	mov	r5,r17
   84c68:	a80d883a 	mov	r6,r21
   84c6c:	e009883a 	mov	r4,fp
   84c70:	0087f7c0 	call	87f7c <__pow5mult>
   84c74:	d9800917 	ldw	r6,36(sp)
   84c78:	100b883a 	mov	r5,r2
   84c7c:	e009883a 	mov	r4,fp
   84c80:	1023883a 	mov	r17,r2
   84c84:	0087d840 	call	87d84 <__multiply>
   84c88:	1021883a 	mov	r16,r2
   84c8c:	d8800a17 	ldw	r2,40(sp)
   84c90:	d9400917 	ldw	r5,36(sp)
   84c94:	e009883a 	mov	r4,fp
   84c98:	1545c83a 	sub	r2,r2,r21
   84c9c:	d8800a15 	stw	r2,40(sp)
   84ca0:	00879e40 	call	879e4 <_Bfree>
   84ca4:	d8c00a17 	ldw	r3,40(sp)
   84ca8:	18009f1e 	bne	r3,zero,84f28 <_dtoa_r+0xce4>
   84cac:	05c00044 	movi	r23,1
   84cb0:	e009883a 	mov	r4,fp
   84cb4:	b80b883a 	mov	r5,r23
   84cb8:	0087d480 	call	87d48 <__i2b>
   84cbc:	d9000d17 	ldw	r4,52(sp)
   84cc0:	102b883a 	mov	r21,r2
   84cc4:	2000ce26 	beq	r4,zero,85000 <_dtoa_r+0xdbc>
   84cc8:	200d883a 	mov	r6,r4
   84ccc:	100b883a 	mov	r5,r2
   84cd0:	e009883a 	mov	r4,fp
   84cd4:	0087f7c0 	call	87f7c <__pow5mult>
   84cd8:	d9800317 	ldw	r6,12(sp)
   84cdc:	102b883a 	mov	r21,r2
   84ce0:	b981810e 	bge	r23,r6,852e8 <_dtoa_r+0x10a4>
   84ce4:	0027883a 	mov	r19,zero
   84ce8:	a8800417 	ldw	r2,16(r21)
   84cec:	05c00804 	movi	r23,32
   84cf0:	10800104 	addi	r2,r2,4
   84cf4:	1085883a 	add	r2,r2,r2
   84cf8:	1085883a 	add	r2,r2,r2
   84cfc:	a885883a 	add	r2,r21,r2
   84d00:	11000017 	ldw	r4,0(r2)
   84d04:	0087c300 	call	87c30 <__hi0bits>
   84d08:	b885c83a 	sub	r2,r23,r2
   84d0c:	1585883a 	add	r2,r2,r22
   84d10:	108007cc 	andi	r2,r2,31
   84d14:	1000b326 	beq	r2,zero,84fe4 <_dtoa_r+0xda0>
   84d18:	00c00804 	movi	r3,32
   84d1c:	1887c83a 	sub	r3,r3,r2
   84d20:	01000104 	movi	r4,4
   84d24:	20c2cd0e 	bge	r4,r3,8585c <_dtoa_r+0x1618>
   84d28:	00c00704 	movi	r3,28
   84d2c:	1885c83a 	sub	r2,r3,r2
   84d30:	d8c00817 	ldw	r3,32(sp)
   84d34:	a0a9883a 	add	r20,r20,r2
   84d38:	b0ad883a 	add	r22,r22,r2
   84d3c:	1887883a 	add	r3,r3,r2
   84d40:	d8c00815 	stw	r3,32(sp)
   84d44:	d9800817 	ldw	r6,32(sp)
   84d48:	0180040e 	bge	zero,r6,84d5c <_dtoa_r+0xb18>
   84d4c:	800b883a 	mov	r5,r16
   84d50:	e009883a 	mov	r4,fp
   84d54:	00880bc0 	call	880bc <__lshift>
   84d58:	1021883a 	mov	r16,r2
   84d5c:	0580050e 	bge	zero,r22,84d74 <_dtoa_r+0xb30>
   84d60:	a80b883a 	mov	r5,r21
   84d64:	b00d883a 	mov	r6,r22
   84d68:	e009883a 	mov	r4,fp
   84d6c:	00880bc0 	call	880bc <__lshift>
   84d70:	102b883a 	mov	r21,r2
   84d74:	d9c00e17 	ldw	r7,56(sp)
   84d78:	3801211e 	bne	r7,zero,85200 <_dtoa_r+0xfbc>
   84d7c:	d9800617 	ldw	r6,24(sp)
   84d80:	0181380e 	bge	zero,r6,85264 <_dtoa_r+0x1020>
   84d84:	d8c00b17 	ldw	r3,44(sp)
   84d88:	1800ab1e 	bne	r3,zero,85038 <_dtoa_r+0xdf4>
   84d8c:	dc800717 	ldw	r18,28(sp)
   84d90:	dcc00617 	ldw	r19,24(sp)
   84d94:	9029883a 	mov	r20,r18
   84d98:	00000206 	br	84da4 <_dtoa_r+0xb60>
   84d9c:	0087a0c0 	call	87a0c <__multadd>
   84da0:	1021883a 	mov	r16,r2
   84da4:	a80b883a 	mov	r5,r21
   84da8:	8009883a 	mov	r4,r16
   84dac:	00840440 	call	84044 <quorem>
   84db0:	10800c04 	addi	r2,r2,48
   84db4:	90800005 	stb	r2,0(r18)
   84db8:	94800044 	addi	r18,r18,1
   84dbc:	9507c83a 	sub	r3,r18,r20
   84dc0:	000f883a 	mov	r7,zero
   84dc4:	01800284 	movi	r6,10
   84dc8:	800b883a 	mov	r5,r16
   84dcc:	e009883a 	mov	r4,fp
   84dd0:	1cfff216 	blt	r3,r19,84d9c <__alt_data_end+0xfffa331c>
   84dd4:	1011883a 	mov	r8,r2
   84dd8:	d8800617 	ldw	r2,24(sp)
   84ddc:	0082370e 	bge	zero,r2,856bc <_dtoa_r+0x1478>
   84de0:	d9000717 	ldw	r4,28(sp)
   84de4:	0025883a 	mov	r18,zero
   84de8:	20af883a 	add	r23,r4,r2
   84dec:	01800044 	movi	r6,1
   84df0:	800b883a 	mov	r5,r16
   84df4:	e009883a 	mov	r4,fp
   84df8:	da001715 	stw	r8,92(sp)
   84dfc:	00880bc0 	call	880bc <__lshift>
   84e00:	a80b883a 	mov	r5,r21
   84e04:	1009883a 	mov	r4,r2
   84e08:	d8800915 	stw	r2,36(sp)
   84e0c:	00882040 	call	88204 <__mcmp>
   84e10:	da001717 	ldw	r8,92(sp)
   84e14:	0081800e 	bge	zero,r2,85418 <_dtoa_r+0x11d4>
   84e18:	b93fffc3 	ldbu	r4,-1(r23)
   84e1c:	b8bfffc4 	addi	r2,r23,-1
   84e20:	1007883a 	mov	r3,r2
   84e24:	01800e44 	movi	r6,57
   84e28:	d9c00717 	ldw	r7,28(sp)
   84e2c:	00000506 	br	84e44 <_dtoa_r+0xc00>
   84e30:	18ffffc4 	addi	r3,r3,-1
   84e34:	11c12326 	beq	r2,r7,852c4 <_dtoa_r+0x1080>
   84e38:	19000003 	ldbu	r4,0(r3)
   84e3c:	102f883a 	mov	r23,r2
   84e40:	10bfffc4 	addi	r2,r2,-1
   84e44:	21403fcc 	andi	r5,r4,255
   84e48:	2940201c 	xori	r5,r5,128
   84e4c:	297fe004 	addi	r5,r5,-128
   84e50:	29bff726 	beq	r5,r6,84e30 <__alt_data_end+0xfffa33b0>
   84e54:	21000044 	addi	r4,r4,1
   84e58:	11000005 	stb	r4,0(r2)
   84e5c:	a80b883a 	mov	r5,r21
   84e60:	e009883a 	mov	r4,fp
   84e64:	00879e40 	call	879e4 <_Bfree>
   84e68:	883ea026 	beq	r17,zero,848ec <__alt_data_end+0xfffa2e6c>
   84e6c:	90000426 	beq	r18,zero,84e80 <_dtoa_r+0xc3c>
   84e70:	94400326 	beq	r18,r17,84e80 <_dtoa_r+0xc3c>
   84e74:	900b883a 	mov	r5,r18
   84e78:	e009883a 	mov	r4,fp
   84e7c:	00879e40 	call	879e4 <_Bfree>
   84e80:	880b883a 	mov	r5,r17
   84e84:	e009883a 	mov	r4,fp
   84e88:	00879e40 	call	879e4 <_Bfree>
   84e8c:	003e9706 	br	848ec <__alt_data_end+0xfffa2e6c>
   84e90:	01800044 	movi	r6,1
   84e94:	d9800e15 	stw	r6,56(sp)
   84e98:	003d9606 	br	844f4 <__alt_data_end+0xfffa2a74>
   84e9c:	d8800817 	ldw	r2,32(sp)
   84ea0:	d8c00517 	ldw	r3,20(sp)
   84ea4:	d8000d15 	stw	zero,52(sp)
   84ea8:	10c5c83a 	sub	r2,r2,r3
   84eac:	00c9c83a 	sub	r4,zero,r3
   84eb0:	d8800815 	stw	r2,32(sp)
   84eb4:	d9000a15 	stw	r4,40(sp)
   84eb8:	003d9706 	br	84518 <__alt_data_end+0xfffa2a98>
   84ebc:	05adc83a 	sub	r22,zero,r22
   84ec0:	dd800815 	stw	r22,32(sp)
   84ec4:	002d883a 	mov	r22,zero
   84ec8:	003d8e06 	br	84504 <__alt_data_end+0xfffa2a84>
   84ecc:	d9000517 	ldw	r4,20(sp)
   84ed0:	008e0880 	call	8e088 <__floatsidf>
   84ed4:	100d883a 	mov	r6,r2
   84ed8:	180f883a 	mov	r7,r3
   84edc:	a009883a 	mov	r4,r20
   84ee0:	880b883a 	mov	r5,r17
   84ee4:	008cd9c0 	call	8cd9c <__eqdf2>
   84ee8:	103d7126 	beq	r2,zero,844b0 <__alt_data_end+0xfffa2a30>
   84eec:	d9c00517 	ldw	r7,20(sp)
   84ef0:	39ffffc4 	addi	r7,r7,-1
   84ef4:	d9c00515 	stw	r7,20(sp)
   84ef8:	003d6d06 	br	844b0 <__alt_data_end+0xfffa2a30>
   84efc:	dd400a17 	ldw	r21,40(sp)
   84f00:	dd000817 	ldw	r20,32(sp)
   84f04:	0023883a 	mov	r17,zero
   84f08:	003f4806 	br	84c2c <__alt_data_end+0xfffa31ac>
   84f0c:	10e3c83a 	sub	r17,r2,r3
   84f10:	9448983a 	sll	r4,r18,r17
   84f14:	003d3206 	br	843e0 <__alt_data_end+0xfffa2960>
   84f18:	d8000e15 	stw	zero,56(sp)
   84f1c:	003d7506 	br	844f4 <__alt_data_end+0xfffa2a74>
   84f20:	b005883a 	mov	r2,r22
   84f24:	003f4506 	br	84c3c <__alt_data_end+0xfffa31bc>
   84f28:	dc000915 	stw	r16,36(sp)
   84f2c:	d9800a17 	ldw	r6,40(sp)
   84f30:	d9400917 	ldw	r5,36(sp)
   84f34:	e009883a 	mov	r4,fp
   84f38:	0087f7c0 	call	87f7c <__pow5mult>
   84f3c:	1021883a 	mov	r16,r2
   84f40:	003f5a06 	br	84cac <__alt_data_end+0xfffa322c>
   84f44:	01c00044 	movi	r7,1
   84f48:	d9c00b15 	stw	r7,44(sp)
   84f4c:	d8802217 	ldw	r2,136(sp)
   84f50:	0081280e 	bge	zero,r2,853f4 <_dtoa_r+0x11b0>
   84f54:	100d883a 	mov	r6,r2
   84f58:	1021883a 	mov	r16,r2
   84f5c:	d8800c15 	stw	r2,48(sp)
   84f60:	d8800615 	stw	r2,24(sp)
   84f64:	003d8806 	br	84588 <__alt_data_end+0xfffa2b08>
   84f68:	d8800617 	ldw	r2,24(sp)
   84f6c:	00be9b16 	blt	zero,r2,849dc <__alt_data_end+0xfffa2f5c>
   84f70:	10010f1e 	bne	r2,zero,853b0 <_dtoa_r+0x116c>
   84f74:	880b883a 	mov	r5,r17
   84f78:	000d883a 	mov	r6,zero
   84f7c:	01d00534 	movhi	r7,16404
   84f80:	8009883a 	mov	r4,r16
   84f84:	008cff40 	call	8cff4 <__muldf3>
   84f88:	900d883a 	mov	r6,r18
   84f8c:	980f883a 	mov	r7,r19
   84f90:	1009883a 	mov	r4,r2
   84f94:	180b883a 	mov	r5,r3
   84f98:	008ce240 	call	8ce24 <__gedf2>
   84f9c:	002b883a 	mov	r21,zero
   84fa0:	0023883a 	mov	r17,zero
   84fa4:	1000bf16 	blt	r2,zero,852a4 <_dtoa_r+0x1060>
   84fa8:	d9802217 	ldw	r6,136(sp)
   84fac:	ddc00717 	ldw	r23,28(sp)
   84fb0:	018c303a 	nor	r6,zero,r6
   84fb4:	d9800515 	stw	r6,20(sp)
   84fb8:	a80b883a 	mov	r5,r21
   84fbc:	e009883a 	mov	r4,fp
   84fc0:	00879e40 	call	879e4 <_Bfree>
   84fc4:	883e4926 	beq	r17,zero,848ec <__alt_data_end+0xfffa2e6c>
   84fc8:	003fad06 	br	84e80 <__alt_data_end+0xfffa3400>
   84fcc:	d9c01117 	ldw	r7,68(sp)
   84fd0:	3801bc26 	beq	r7,zero,856c4 <_dtoa_r+0x1480>
   84fd4:	10810cc4 	addi	r2,r2,1075
   84fd8:	dd400a17 	ldw	r21,40(sp)
   84fdc:	dd000817 	ldw	r20,32(sp)
   84fe0:	003f0a06 	br	84c0c <__alt_data_end+0xfffa318c>
   84fe4:	00800704 	movi	r2,28
   84fe8:	d9000817 	ldw	r4,32(sp)
   84fec:	a0a9883a 	add	r20,r20,r2
   84ff0:	b0ad883a 	add	r22,r22,r2
   84ff4:	2089883a 	add	r4,r4,r2
   84ff8:	d9000815 	stw	r4,32(sp)
   84ffc:	003f5106 	br	84d44 <__alt_data_end+0xfffa32c4>
   85000:	d8c00317 	ldw	r3,12(sp)
   85004:	b8c1fc0e 	bge	r23,r3,857f8 <_dtoa_r+0x15b4>
   85008:	0027883a 	mov	r19,zero
   8500c:	b805883a 	mov	r2,r23
   85010:	003f3e06 	br	84d0c <__alt_data_end+0xfffa328c>
   85014:	880b883a 	mov	r5,r17
   85018:	e009883a 	mov	r4,fp
   8501c:	000f883a 	mov	r7,zero
   85020:	01800284 	movi	r6,10
   85024:	0087a0c0 	call	87a0c <__multadd>
   85028:	d9000c17 	ldw	r4,48(sp)
   8502c:	1023883a 	mov	r17,r2
   85030:	0102040e 	bge	zero,r4,85844 <_dtoa_r+0x1600>
   85034:	d9000615 	stw	r4,24(sp)
   85038:	0500050e 	bge	zero,r20,85050 <_dtoa_r+0xe0c>
   8503c:	880b883a 	mov	r5,r17
   85040:	a00d883a 	mov	r6,r20
   85044:	e009883a 	mov	r4,fp
   85048:	00880bc0 	call	880bc <__lshift>
   8504c:	1023883a 	mov	r17,r2
   85050:	9801241e 	bne	r19,zero,854e4 <_dtoa_r+0x12a0>
   85054:	8829883a 	mov	r20,r17
   85058:	d9000617 	ldw	r4,24(sp)
   8505c:	dcc00717 	ldw	r19,28(sp)
   85060:	9480004c 	andi	r18,r18,1
   85064:	20bfffc4 	addi	r2,r4,-1
   85068:	9885883a 	add	r2,r19,r2
   8506c:	d8800415 	stw	r2,16(sp)
   85070:	dc800615 	stw	r18,24(sp)
   85074:	a80b883a 	mov	r5,r21
   85078:	8009883a 	mov	r4,r16
   8507c:	00840440 	call	84044 <quorem>
   85080:	880b883a 	mov	r5,r17
   85084:	8009883a 	mov	r4,r16
   85088:	102f883a 	mov	r23,r2
   8508c:	00882040 	call	88204 <__mcmp>
   85090:	a80b883a 	mov	r5,r21
   85094:	a00d883a 	mov	r6,r20
   85098:	e009883a 	mov	r4,fp
   8509c:	102d883a 	mov	r22,r2
   850a0:	00882640 	call	88264 <__mdiff>
   850a4:	1007883a 	mov	r3,r2
   850a8:	10800317 	ldw	r2,12(r2)
   850ac:	bc800c04 	addi	r18,r23,48
   850b0:	180b883a 	mov	r5,r3
   850b4:	10004e1e 	bne	r2,zero,851f0 <_dtoa_r+0xfac>
   850b8:	8009883a 	mov	r4,r16
   850bc:	d8c01615 	stw	r3,88(sp)
   850c0:	00882040 	call	88204 <__mcmp>
   850c4:	d8c01617 	ldw	r3,88(sp)
   850c8:	e009883a 	mov	r4,fp
   850cc:	d8801615 	stw	r2,88(sp)
   850d0:	180b883a 	mov	r5,r3
   850d4:	00879e40 	call	879e4 <_Bfree>
   850d8:	d8801617 	ldw	r2,88(sp)
   850dc:	1000041e 	bne	r2,zero,850f0 <_dtoa_r+0xeac>
   850e0:	d9800317 	ldw	r6,12(sp)
   850e4:	3000021e 	bne	r6,zero,850f0 <_dtoa_r+0xeac>
   850e8:	d8c00617 	ldw	r3,24(sp)
   850ec:	18003726 	beq	r3,zero,851cc <_dtoa_r+0xf88>
   850f0:	b0002016 	blt	r22,zero,85174 <_dtoa_r+0xf30>
   850f4:	b000041e 	bne	r22,zero,85108 <_dtoa_r+0xec4>
   850f8:	d9000317 	ldw	r4,12(sp)
   850fc:	2000021e 	bne	r4,zero,85108 <_dtoa_r+0xec4>
   85100:	d8c00617 	ldw	r3,24(sp)
   85104:	18001b26 	beq	r3,zero,85174 <_dtoa_r+0xf30>
   85108:	00810716 	blt	zero,r2,85528 <_dtoa_r+0x12e4>
   8510c:	d8c00417 	ldw	r3,16(sp)
   85110:	9d800044 	addi	r22,r19,1
   85114:	9c800005 	stb	r18,0(r19)
   85118:	b02f883a 	mov	r23,r22
   8511c:	98c10626 	beq	r19,r3,85538 <_dtoa_r+0x12f4>
   85120:	800b883a 	mov	r5,r16
   85124:	000f883a 	mov	r7,zero
   85128:	01800284 	movi	r6,10
   8512c:	e009883a 	mov	r4,fp
   85130:	0087a0c0 	call	87a0c <__multadd>
   85134:	1021883a 	mov	r16,r2
   85138:	000f883a 	mov	r7,zero
   8513c:	01800284 	movi	r6,10
   85140:	880b883a 	mov	r5,r17
   85144:	e009883a 	mov	r4,fp
   85148:	8d002526 	beq	r17,r20,851e0 <_dtoa_r+0xf9c>
   8514c:	0087a0c0 	call	87a0c <__multadd>
   85150:	a00b883a 	mov	r5,r20
   85154:	000f883a 	mov	r7,zero
   85158:	01800284 	movi	r6,10
   8515c:	e009883a 	mov	r4,fp
   85160:	1023883a 	mov	r17,r2
   85164:	0087a0c0 	call	87a0c <__multadd>
   85168:	1029883a 	mov	r20,r2
   8516c:	b027883a 	mov	r19,r22
   85170:	003fc006 	br	85074 <__alt_data_end+0xfffa35f4>
   85174:	9011883a 	mov	r8,r18
   85178:	00800e0e 	bge	zero,r2,851b4 <_dtoa_r+0xf70>
   8517c:	800b883a 	mov	r5,r16
   85180:	01800044 	movi	r6,1
   85184:	e009883a 	mov	r4,fp
   85188:	da001715 	stw	r8,92(sp)
   8518c:	00880bc0 	call	880bc <__lshift>
   85190:	a80b883a 	mov	r5,r21
   85194:	1009883a 	mov	r4,r2
   85198:	1021883a 	mov	r16,r2
   8519c:	00882040 	call	88204 <__mcmp>
   851a0:	da001717 	ldw	r8,92(sp)
   851a4:	0081960e 	bge	zero,r2,85800 <_dtoa_r+0x15bc>
   851a8:	00800e44 	movi	r2,57
   851ac:	40817026 	beq	r8,r2,85770 <_dtoa_r+0x152c>
   851b0:	ba000c44 	addi	r8,r23,49
   851b4:	8825883a 	mov	r18,r17
   851b8:	9dc00044 	addi	r23,r19,1
   851bc:	9a000005 	stb	r8,0(r19)
   851c0:	a023883a 	mov	r17,r20
   851c4:	dc000915 	stw	r16,36(sp)
   851c8:	003f2406 	br	84e5c <__alt_data_end+0xfffa33dc>
   851cc:	00800e44 	movi	r2,57
   851d0:	9011883a 	mov	r8,r18
   851d4:	90816626 	beq	r18,r2,85770 <_dtoa_r+0x152c>
   851d8:	05bff516 	blt	zero,r22,851b0 <__alt_data_end+0xfffa3730>
   851dc:	003ff506 	br	851b4 <__alt_data_end+0xfffa3734>
   851e0:	0087a0c0 	call	87a0c <__multadd>
   851e4:	1023883a 	mov	r17,r2
   851e8:	1029883a 	mov	r20,r2
   851ec:	003fdf06 	br	8516c <__alt_data_end+0xfffa36ec>
   851f0:	e009883a 	mov	r4,fp
   851f4:	00879e40 	call	879e4 <_Bfree>
   851f8:	00800044 	movi	r2,1
   851fc:	003fbc06 	br	850f0 <__alt_data_end+0xfffa3670>
   85200:	a80b883a 	mov	r5,r21
   85204:	8009883a 	mov	r4,r16
   85208:	00882040 	call	88204 <__mcmp>
   8520c:	103edb0e 	bge	r2,zero,84d7c <__alt_data_end+0xfffa32fc>
   85210:	800b883a 	mov	r5,r16
   85214:	000f883a 	mov	r7,zero
   85218:	01800284 	movi	r6,10
   8521c:	e009883a 	mov	r4,fp
   85220:	0087a0c0 	call	87a0c <__multadd>
   85224:	1021883a 	mov	r16,r2
   85228:	d8800517 	ldw	r2,20(sp)
   8522c:	d8c00b17 	ldw	r3,44(sp)
   85230:	10bfffc4 	addi	r2,r2,-1
   85234:	d8800515 	stw	r2,20(sp)
   85238:	183f761e 	bne	r3,zero,85014 <__alt_data_end+0xfffa3594>
   8523c:	d9000c17 	ldw	r4,48(sp)
   85240:	0101730e 	bge	zero,r4,85810 <_dtoa_r+0x15cc>
   85244:	d9000615 	stw	r4,24(sp)
   85248:	003ed006 	br	84d8c <__alt_data_end+0xfffa330c>
   8524c:	00800084 	movi	r2,2
   85250:	3081861e 	bne	r6,r2,8586c <_dtoa_r+0x1628>
   85254:	d8000b15 	stw	zero,44(sp)
   85258:	003f3c06 	br	84f4c <__alt_data_end+0xfffa34cc>
   8525c:	dc000917 	ldw	r16,36(sp)
   85260:	003e9206 	br	84cac <__alt_data_end+0xfffa322c>
   85264:	d9c00317 	ldw	r7,12(sp)
   85268:	00800084 	movi	r2,2
   8526c:	11fec50e 	bge	r2,r7,84d84 <__alt_data_end+0xfffa3304>
   85270:	d9000617 	ldw	r4,24(sp)
   85274:	20013c1e 	bne	r4,zero,85768 <_dtoa_r+0x1524>
   85278:	a80b883a 	mov	r5,r21
   8527c:	000f883a 	mov	r7,zero
   85280:	01800144 	movi	r6,5
   85284:	e009883a 	mov	r4,fp
   85288:	0087a0c0 	call	87a0c <__multadd>
   8528c:	100b883a 	mov	r5,r2
   85290:	8009883a 	mov	r4,r16
   85294:	102b883a 	mov	r21,r2
   85298:	00882040 	call	88204 <__mcmp>
   8529c:	dc000915 	stw	r16,36(sp)
   852a0:	00bf410e 	bge	zero,r2,84fa8 <__alt_data_end+0xfffa3528>
   852a4:	d9c00717 	ldw	r7,28(sp)
   852a8:	00800c44 	movi	r2,49
   852ac:	38800005 	stb	r2,0(r7)
   852b0:	d8800517 	ldw	r2,20(sp)
   852b4:	3dc00044 	addi	r23,r7,1
   852b8:	10800044 	addi	r2,r2,1
   852bc:	d8800515 	stw	r2,20(sp)
   852c0:	003f3d06 	br	84fb8 <__alt_data_end+0xfffa3538>
   852c4:	d9800517 	ldw	r6,20(sp)
   852c8:	d9c00717 	ldw	r7,28(sp)
   852cc:	00800c44 	movi	r2,49
   852d0:	31800044 	addi	r6,r6,1
   852d4:	d9800515 	stw	r6,20(sp)
   852d8:	38800005 	stb	r2,0(r7)
   852dc:	003edf06 	br	84e5c <__alt_data_end+0xfffa33dc>
   852e0:	d8000b15 	stw	zero,44(sp)
   852e4:	003c9f06 	br	84564 <__alt_data_end+0xfffa2ae4>
   852e8:	903e7e1e 	bne	r18,zero,84ce4 <__alt_data_end+0xfffa3264>
   852ec:	00800434 	movhi	r2,16
   852f0:	10bfffc4 	addi	r2,r2,-1
   852f4:	9884703a 	and	r2,r19,r2
   852f8:	1000ea1e 	bne	r2,zero,856a4 <_dtoa_r+0x1460>
   852fc:	9cdffc2c 	andhi	r19,r19,32752
   85300:	9800e826 	beq	r19,zero,856a4 <_dtoa_r+0x1460>
   85304:	d9c00817 	ldw	r7,32(sp)
   85308:	b5800044 	addi	r22,r22,1
   8530c:	04c00044 	movi	r19,1
   85310:	39c00044 	addi	r7,r7,1
   85314:	d9c00815 	stw	r7,32(sp)
   85318:	d8800d17 	ldw	r2,52(sp)
   8531c:	103e721e 	bne	r2,zero,84ce8 <__alt_data_end+0xfffa3268>
   85320:	00800044 	movi	r2,1
   85324:	003e7906 	br	84d0c <__alt_data_end+0xfffa328c>
   85328:	8009883a 	mov	r4,r16
   8532c:	008e0880 	call	8e088 <__floatsidf>
   85330:	d9800f17 	ldw	r6,60(sp)
   85334:	d9c01017 	ldw	r7,64(sp)
   85338:	1009883a 	mov	r4,r2
   8533c:	180b883a 	mov	r5,r3
   85340:	008cff40 	call	8cff4 <__muldf3>
   85344:	000d883a 	mov	r6,zero
   85348:	01d00734 	movhi	r7,16412
   8534c:	1009883a 	mov	r4,r2
   85350:	180b883a 	mov	r5,r3
   85354:	008bc080 	call	8bc08 <__adddf3>
   85358:	047f3034 	movhi	r17,64704
   8535c:	1021883a 	mov	r16,r2
   85360:	1c63883a 	add	r17,r3,r17
   85364:	d9000f17 	ldw	r4,60(sp)
   85368:	d9401017 	ldw	r5,64(sp)
   8536c:	000d883a 	mov	r6,zero
   85370:	01d00534 	movhi	r7,16404
   85374:	008d70c0 	call	8d70c <__subdf3>
   85378:	800d883a 	mov	r6,r16
   8537c:	880f883a 	mov	r7,r17
   85380:	1009883a 	mov	r4,r2
   85384:	180b883a 	mov	r5,r3
   85388:	102b883a 	mov	r21,r2
   8538c:	1829883a 	mov	r20,r3
   85390:	008ce240 	call	8ce24 <__gedf2>
   85394:	00806c16 	blt	zero,r2,85548 <_dtoa_r+0x1304>
   85398:	89e0003c 	xorhi	r7,r17,32768
   8539c:	800d883a 	mov	r6,r16
   853a0:	a809883a 	mov	r4,r21
   853a4:	a00b883a 	mov	r5,r20
   853a8:	008cf000 	call	8cf00 <__ledf2>
   853ac:	103d7e0e 	bge	r2,zero,849a8 <__alt_data_end+0xfffa2f28>
   853b0:	002b883a 	mov	r21,zero
   853b4:	0023883a 	mov	r17,zero
   853b8:	003efb06 	br	84fa8 <__alt_data_end+0xfffa3528>
   853bc:	d8800717 	ldw	r2,28(sp)
   853c0:	003bd006 	br	84304 <__alt_data_end+0xfffa2884>
   853c4:	d9000a17 	ldw	r4,40(sp)
   853c8:	d9800d17 	ldw	r6,52(sp)
   853cc:	dd400a15 	stw	r21,40(sp)
   853d0:	a905c83a 	sub	r2,r21,r4
   853d4:	308d883a 	add	r6,r6,r2
   853d8:	d9800d15 	stw	r6,52(sp)
   853dc:	002b883a 	mov	r21,zero
   853e0:	003e0606 	br	84bfc <__alt_data_end+0xfffa317c>
   853e4:	9023883a 	mov	r17,r18
   853e8:	9829883a 	mov	r20,r19
   853ec:	04000084 	movi	r16,2
   853f0:	003c9206 	br	8463c <__alt_data_end+0xfffa2bbc>
   853f4:	04000044 	movi	r16,1
   853f8:	dc000c15 	stw	r16,48(sp)
   853fc:	dc000615 	stw	r16,24(sp)
   85400:	dc002215 	stw	r16,136(sp)
   85404:	e0001115 	stw	zero,68(fp)
   85408:	000b883a 	mov	r5,zero
   8540c:	003c6906 	br	845b4 <__alt_data_end+0xfffa2b34>
   85410:	3021883a 	mov	r16,r6
   85414:	003ffb06 	br	85404 <__alt_data_end+0xfffa3984>
   85418:	1000021e 	bne	r2,zero,85424 <_dtoa_r+0x11e0>
   8541c:	4200004c 	andi	r8,r8,1
   85420:	403e7d1e 	bne	r8,zero,84e18 <__alt_data_end+0xfffa3398>
   85424:	01000c04 	movi	r4,48
   85428:	00000106 	br	85430 <_dtoa_r+0x11ec>
   8542c:	102f883a 	mov	r23,r2
   85430:	b8bfffc4 	addi	r2,r23,-1
   85434:	10c00007 	ldb	r3,0(r2)
   85438:	193ffc26 	beq	r3,r4,8542c <__alt_data_end+0xfffa39ac>
   8543c:	003e8706 	br	84e5c <__alt_data_end+0xfffa33dc>
   85440:	d8800517 	ldw	r2,20(sp)
   85444:	00a3c83a 	sub	r17,zero,r2
   85448:	8800a426 	beq	r17,zero,856dc <_dtoa_r+0x1498>
   8544c:	888003cc 	andi	r2,r17,15
   85450:	100490fa 	slli	r2,r2,3
   85454:	00c00274 	movhi	r3,9
   85458:	18c3e304 	addi	r3,r3,3980
   8545c:	1885883a 	add	r2,r3,r2
   85460:	11800017 	ldw	r6,0(r2)
   85464:	11c00117 	ldw	r7,4(r2)
   85468:	9009883a 	mov	r4,r18
   8546c:	980b883a 	mov	r5,r19
   85470:	8823d13a 	srai	r17,r17,4
   85474:	008cff40 	call	8cff4 <__muldf3>
   85478:	d8800f15 	stw	r2,60(sp)
   8547c:	d8c01015 	stw	r3,64(sp)
   85480:	8800e826 	beq	r17,zero,85824 <_dtoa_r+0x15e0>
   85484:	05000274 	movhi	r20,9
   85488:	a503d904 	addi	r20,r20,3940
   8548c:	04000084 	movi	r16,2
   85490:	8980004c 	andi	r6,r17,1
   85494:	1009883a 	mov	r4,r2
   85498:	8823d07a 	srai	r17,r17,1
   8549c:	180b883a 	mov	r5,r3
   854a0:	30000426 	beq	r6,zero,854b4 <_dtoa_r+0x1270>
   854a4:	a1800017 	ldw	r6,0(r20)
   854a8:	a1c00117 	ldw	r7,4(r20)
   854ac:	84000044 	addi	r16,r16,1
   854b0:	008cff40 	call	8cff4 <__muldf3>
   854b4:	a5000204 	addi	r20,r20,8
   854b8:	883ff51e 	bne	r17,zero,85490 <__alt_data_end+0xfffa3a10>
   854bc:	d8800f15 	stw	r2,60(sp)
   854c0:	d8c01015 	stw	r3,64(sp)
   854c4:	003c7606 	br	846a0 <__alt_data_end+0xfffa2c20>
   854c8:	00c00c04 	movi	r3,48
   854cc:	10c00005 	stb	r3,0(r2)
   854d0:	d8c00517 	ldw	r3,20(sp)
   854d4:	bd3fffc3 	ldbu	r20,-1(r23)
   854d8:	18c00044 	addi	r3,r3,1
   854dc:	d8c00515 	stw	r3,20(sp)
   854e0:	003db906 	br	84bc8 <__alt_data_end+0xfffa3148>
   854e4:	89400117 	ldw	r5,4(r17)
   854e8:	e009883a 	mov	r4,fp
   854ec:	008793c0 	call	8793c <_Balloc>
   854f0:	89800417 	ldw	r6,16(r17)
   854f4:	89400304 	addi	r5,r17,12
   854f8:	11000304 	addi	r4,r2,12
   854fc:	31800084 	addi	r6,r6,2
   85500:	318d883a 	add	r6,r6,r6
   85504:	318d883a 	add	r6,r6,r6
   85508:	1027883a 	mov	r19,r2
   8550c:	00875700 	call	87570 <memcpy>
   85510:	01800044 	movi	r6,1
   85514:	980b883a 	mov	r5,r19
   85518:	e009883a 	mov	r4,fp
   8551c:	00880bc0 	call	880bc <__lshift>
   85520:	1029883a 	mov	r20,r2
   85524:	003ecc06 	br	85058 <__alt_data_end+0xfffa35d8>
   85528:	00800e44 	movi	r2,57
   8552c:	90809026 	beq	r18,r2,85770 <_dtoa_r+0x152c>
   85530:	92000044 	addi	r8,r18,1
   85534:	003f1f06 	br	851b4 <__alt_data_end+0xfffa3734>
   85538:	9011883a 	mov	r8,r18
   8553c:	8825883a 	mov	r18,r17
   85540:	a023883a 	mov	r17,r20
   85544:	003e2906 	br	84dec <__alt_data_end+0xfffa336c>
   85548:	002b883a 	mov	r21,zero
   8554c:	0023883a 	mov	r17,zero
   85550:	003f5406 	br	852a4 <__alt_data_end+0xfffa3824>
   85554:	61bfffc4 	addi	r6,r12,-1
   85558:	300490fa 	slli	r2,r6,3
   8555c:	00c00274 	movhi	r3,9
   85560:	18c3e304 	addi	r3,r3,3980
   85564:	1885883a 	add	r2,r3,r2
   85568:	11000017 	ldw	r4,0(r2)
   8556c:	11400117 	ldw	r5,4(r2)
   85570:	d8800717 	ldw	r2,28(sp)
   85574:	880f883a 	mov	r7,r17
   85578:	d9801215 	stw	r6,72(sp)
   8557c:	800d883a 	mov	r6,r16
   85580:	db001615 	stw	r12,88(sp)
   85584:	15c00044 	addi	r23,r2,1
   85588:	008cff40 	call	8cff4 <__muldf3>
   8558c:	d9401017 	ldw	r5,64(sp)
   85590:	d9000f17 	ldw	r4,60(sp)
   85594:	d8c01515 	stw	r3,84(sp)
   85598:	d8801415 	stw	r2,80(sp)
   8559c:	008e0080 	call	8e008 <__fixdfsi>
   855a0:	1009883a 	mov	r4,r2
   855a4:	1021883a 	mov	r16,r2
   855a8:	008e0880 	call	8e088 <__floatsidf>
   855ac:	d9000f17 	ldw	r4,60(sp)
   855b0:	d9401017 	ldw	r5,64(sp)
   855b4:	100d883a 	mov	r6,r2
   855b8:	180f883a 	mov	r7,r3
   855bc:	008d70c0 	call	8d70c <__subdf3>
   855c0:	1829883a 	mov	r20,r3
   855c4:	d8c00717 	ldw	r3,28(sp)
   855c8:	84000c04 	addi	r16,r16,48
   855cc:	1023883a 	mov	r17,r2
   855d0:	1c000005 	stb	r16,0(r3)
   855d4:	db001617 	ldw	r12,88(sp)
   855d8:	00800044 	movi	r2,1
   855dc:	60802226 	beq	r12,r2,85668 <_dtoa_r+0x1424>
   855e0:	d9c00717 	ldw	r7,28(sp)
   855e4:	8805883a 	mov	r2,r17
   855e8:	b82b883a 	mov	r21,r23
   855ec:	3b19883a 	add	r12,r7,r12
   855f0:	6023883a 	mov	r17,r12
   855f4:	a007883a 	mov	r3,r20
   855f8:	dc800f15 	stw	r18,60(sp)
   855fc:	000d883a 	mov	r6,zero
   85600:	01d00934 	movhi	r7,16420
   85604:	1009883a 	mov	r4,r2
   85608:	180b883a 	mov	r5,r3
   8560c:	008cff40 	call	8cff4 <__muldf3>
   85610:	180b883a 	mov	r5,r3
   85614:	1009883a 	mov	r4,r2
   85618:	1829883a 	mov	r20,r3
   8561c:	1025883a 	mov	r18,r2
   85620:	008e0080 	call	8e008 <__fixdfsi>
   85624:	1009883a 	mov	r4,r2
   85628:	1021883a 	mov	r16,r2
   8562c:	008e0880 	call	8e088 <__floatsidf>
   85630:	100d883a 	mov	r6,r2
   85634:	180f883a 	mov	r7,r3
   85638:	9009883a 	mov	r4,r18
   8563c:	a00b883a 	mov	r5,r20
   85640:	84000c04 	addi	r16,r16,48
   85644:	008d70c0 	call	8d70c <__subdf3>
   85648:	ad400044 	addi	r21,r21,1
   8564c:	ac3fffc5 	stb	r16,-1(r21)
   85650:	ac7fea1e 	bne	r21,r17,855fc <__alt_data_end+0xfffa3b7c>
   85654:	1023883a 	mov	r17,r2
   85658:	d8801217 	ldw	r2,72(sp)
   8565c:	dc800f17 	ldw	r18,60(sp)
   85660:	1829883a 	mov	r20,r3
   85664:	b8af883a 	add	r23,r23,r2
   85668:	d9001417 	ldw	r4,80(sp)
   8566c:	d9401517 	ldw	r5,84(sp)
   85670:	000d883a 	mov	r6,zero
   85674:	01cff834 	movhi	r7,16352
   85678:	008bc080 	call	8bc08 <__adddf3>
   8567c:	880d883a 	mov	r6,r17
   85680:	a00f883a 	mov	r7,r20
   85684:	1009883a 	mov	r4,r2
   85688:	180b883a 	mov	r5,r3
   8568c:	008cf000 	call	8cf00 <__ledf2>
   85690:	10003e0e 	bge	r2,zero,8578c <_dtoa_r+0x1548>
   85694:	d9001317 	ldw	r4,76(sp)
   85698:	bd3fffc3 	ldbu	r20,-1(r23)
   8569c:	d9000515 	stw	r4,20(sp)
   856a0:	003d3b06 	br	84b90 <__alt_data_end+0xfffa3110>
   856a4:	0027883a 	mov	r19,zero
   856a8:	003f1b06 	br	85318 <__alt_data_end+0xfffa3898>
   856ac:	d8800817 	ldw	r2,32(sp)
   856b0:	11e9c83a 	sub	r20,r2,r7
   856b4:	0005883a 	mov	r2,zero
   856b8:	003d5406 	br	84c0c <__alt_data_end+0xfffa318c>
   856bc:	00800044 	movi	r2,1
   856c0:	003dc706 	br	84de0 <__alt_data_end+0xfffa3360>
   856c4:	d8c00217 	ldw	r3,8(sp)
   856c8:	00800d84 	movi	r2,54
   856cc:	dd400a17 	ldw	r21,40(sp)
   856d0:	10c5c83a 	sub	r2,r2,r3
   856d4:	dd000817 	ldw	r20,32(sp)
   856d8:	003d4c06 	br	84c0c <__alt_data_end+0xfffa318c>
   856dc:	dc800f15 	stw	r18,60(sp)
   856e0:	dcc01015 	stw	r19,64(sp)
   856e4:	04000084 	movi	r16,2
   856e8:	003bed06 	br	846a0 <__alt_data_end+0xfffa2c20>
   856ec:	d9000617 	ldw	r4,24(sp)
   856f0:	203f0d26 	beq	r4,zero,85328 <__alt_data_end+0xfffa38a8>
   856f4:	d9800c17 	ldw	r6,48(sp)
   856f8:	01bcab0e 	bge	zero,r6,849a8 <__alt_data_end+0xfffa2f28>
   856fc:	d9401017 	ldw	r5,64(sp)
   85700:	d9000f17 	ldw	r4,60(sp)
   85704:	000d883a 	mov	r6,zero
   85708:	01d00934 	movhi	r7,16420
   8570c:	008cff40 	call	8cff4 <__muldf3>
   85710:	81000044 	addi	r4,r16,1
   85714:	d8800f15 	stw	r2,60(sp)
   85718:	d8c01015 	stw	r3,64(sp)
   8571c:	008e0880 	call	8e088 <__floatsidf>
   85720:	d9800f17 	ldw	r6,60(sp)
   85724:	d9c01017 	ldw	r7,64(sp)
   85728:	1009883a 	mov	r4,r2
   8572c:	180b883a 	mov	r5,r3
   85730:	008cff40 	call	8cff4 <__muldf3>
   85734:	01d00734 	movhi	r7,16412
   85738:	000d883a 	mov	r6,zero
   8573c:	1009883a 	mov	r4,r2
   85740:	180b883a 	mov	r5,r3
   85744:	008bc080 	call	8bc08 <__adddf3>
   85748:	d9c00517 	ldw	r7,20(sp)
   8574c:	047f3034 	movhi	r17,64704
   85750:	1021883a 	mov	r16,r2
   85754:	39ffffc4 	addi	r7,r7,-1
   85758:	d9c01315 	stw	r7,76(sp)
   8575c:	1c63883a 	add	r17,r3,r17
   85760:	db000c17 	ldw	r12,48(sp)
   85764:	003bea06 	br	84710 <__alt_data_end+0xfffa2c90>
   85768:	dc000915 	stw	r16,36(sp)
   8576c:	003e0e06 	br	84fa8 <__alt_data_end+0xfffa3528>
   85770:	01000e44 	movi	r4,57
   85774:	8825883a 	mov	r18,r17
   85778:	9dc00044 	addi	r23,r19,1
   8577c:	99000005 	stb	r4,0(r19)
   85780:	a023883a 	mov	r17,r20
   85784:	dc000915 	stw	r16,36(sp)
   85788:	003da406 	br	84e1c <__alt_data_end+0xfffa339c>
   8578c:	d9801417 	ldw	r6,80(sp)
   85790:	d9c01517 	ldw	r7,84(sp)
   85794:	0009883a 	mov	r4,zero
   85798:	014ff834 	movhi	r5,16352
   8579c:	008d70c0 	call	8d70c <__subdf3>
   857a0:	880d883a 	mov	r6,r17
   857a4:	a00f883a 	mov	r7,r20
   857a8:	1009883a 	mov	r4,r2
   857ac:	180b883a 	mov	r5,r3
   857b0:	008ce240 	call	8ce24 <__gedf2>
   857b4:	00bc7c0e 	bge	zero,r2,849a8 <__alt_data_end+0xfffa2f28>
   857b8:	01000c04 	movi	r4,48
   857bc:	00000106 	br	857c4 <_dtoa_r+0x1580>
   857c0:	102f883a 	mov	r23,r2
   857c4:	b8bfffc4 	addi	r2,r23,-1
   857c8:	10c00007 	ldb	r3,0(r2)
   857cc:	193ffc26 	beq	r3,r4,857c0 <__alt_data_end+0xfffa3d40>
   857d0:	d9801317 	ldw	r6,76(sp)
   857d4:	d9800515 	stw	r6,20(sp)
   857d8:	003c4406 	br	848ec <__alt_data_end+0xfffa2e6c>
   857dc:	d9801317 	ldw	r6,76(sp)
   857e0:	d9800515 	stw	r6,20(sp)
   857e4:	003cea06 	br	84b90 <__alt_data_end+0xfffa3110>
   857e8:	dd800f17 	ldw	r22,60(sp)
   857ec:	dcc01017 	ldw	r19,64(sp)
   857f0:	dc801217 	ldw	r18,72(sp)
   857f4:	003c6c06 	br	849a8 <__alt_data_end+0xfffa2f28>
   857f8:	903e031e 	bne	r18,zero,85008 <__alt_data_end+0xfffa3588>
   857fc:	003ebb06 	br	852ec <__alt_data_end+0xfffa386c>
   85800:	103e6c1e 	bne	r2,zero,851b4 <__alt_data_end+0xfffa3734>
   85804:	4080004c 	andi	r2,r8,1
   85808:	103e6a26 	beq	r2,zero,851b4 <__alt_data_end+0xfffa3734>
   8580c:	003e6606 	br	851a8 <__alt_data_end+0xfffa3728>
   85810:	d8c00317 	ldw	r3,12(sp)
   85814:	00800084 	movi	r2,2
   85818:	10c02916 	blt	r2,r3,858c0 <_dtoa_r+0x167c>
   8581c:	d9000c17 	ldw	r4,48(sp)
   85820:	003e8806 	br	85244 <__alt_data_end+0xfffa37c4>
   85824:	04000084 	movi	r16,2
   85828:	003b9d06 	br	846a0 <__alt_data_end+0xfffa2c20>
   8582c:	d9001317 	ldw	r4,76(sp)
   85830:	d9000515 	stw	r4,20(sp)
   85834:	003cd606 	br	84b90 <__alt_data_end+0xfffa3110>
   85838:	d8801317 	ldw	r2,76(sp)
   8583c:	d8800515 	stw	r2,20(sp)
   85840:	003c2a06 	br	848ec <__alt_data_end+0xfffa2e6c>
   85844:	d9800317 	ldw	r6,12(sp)
   85848:	00800084 	movi	r2,2
   8584c:	11801516 	blt	r2,r6,858a4 <_dtoa_r+0x1660>
   85850:	d9c00c17 	ldw	r7,48(sp)
   85854:	d9c00615 	stw	r7,24(sp)
   85858:	003df706 	br	85038 <__alt_data_end+0xfffa35b8>
   8585c:	193d3926 	beq	r3,r4,84d44 <__alt_data_end+0xfffa32c4>
   85860:	00c00f04 	movi	r3,60
   85864:	1885c83a 	sub	r2,r3,r2
   85868:	003ddf06 	br	84fe8 <__alt_data_end+0xfffa3568>
   8586c:	e009883a 	mov	r4,fp
   85870:	e0001115 	stw	zero,68(fp)
   85874:	000b883a 	mov	r5,zero
   85878:	008793c0 	call	8793c <_Balloc>
   8587c:	d8800715 	stw	r2,28(sp)
   85880:	d8c00717 	ldw	r3,28(sp)
   85884:	00bfffc4 	movi	r2,-1
   85888:	01000044 	movi	r4,1
   8588c:	d8800c15 	stw	r2,48(sp)
   85890:	e0c01015 	stw	r3,64(fp)
   85894:	d9000b15 	stw	r4,44(sp)
   85898:	d8800615 	stw	r2,24(sp)
   8589c:	d8002215 	stw	zero,136(sp)
   858a0:	003c4106 	br	849a8 <__alt_data_end+0xfffa2f28>
   858a4:	d8c00c17 	ldw	r3,48(sp)
   858a8:	d8c00615 	stw	r3,24(sp)
   858ac:	003e7006 	br	85270 <__alt_data_end+0xfffa37f0>
   858b0:	04400044 	movi	r17,1
   858b4:	003b2006 	br	84538 <__alt_data_end+0xfffa2ab8>
   858b8:	000b883a 	mov	r5,zero
   858bc:	003b3d06 	br	845b4 <__alt_data_end+0xfffa2b34>
   858c0:	d8800c17 	ldw	r2,48(sp)
   858c4:	d8800615 	stw	r2,24(sp)
   858c8:	003e6906 	br	85270 <__alt_data_end+0xfffa37f0>

000858cc <__sflush_r>:
   858cc:	2880030b 	ldhu	r2,12(r5)
   858d0:	defffb04 	addi	sp,sp,-20
   858d4:	dcc00315 	stw	r19,12(sp)
   858d8:	dc400115 	stw	r17,4(sp)
   858dc:	dfc00415 	stw	ra,16(sp)
   858e0:	dc800215 	stw	r18,8(sp)
   858e4:	dc000015 	stw	r16,0(sp)
   858e8:	10c0020c 	andi	r3,r2,8
   858ec:	2823883a 	mov	r17,r5
   858f0:	2027883a 	mov	r19,r4
   858f4:	1800311e 	bne	r3,zero,859bc <__sflush_r+0xf0>
   858f8:	28c00117 	ldw	r3,4(r5)
   858fc:	10820014 	ori	r2,r2,2048
   85900:	2880030d 	sth	r2,12(r5)
   85904:	00c04b0e 	bge	zero,r3,85a34 <__sflush_r+0x168>
   85908:	8a000a17 	ldw	r8,40(r17)
   8590c:	40002326 	beq	r8,zero,8599c <__sflush_r+0xd0>
   85910:	9c000017 	ldw	r16,0(r19)
   85914:	10c4000c 	andi	r3,r2,4096
   85918:	98000015 	stw	zero,0(r19)
   8591c:	18004826 	beq	r3,zero,85a40 <__sflush_r+0x174>
   85920:	89801417 	ldw	r6,80(r17)
   85924:	10c0010c 	andi	r3,r2,4
   85928:	18000626 	beq	r3,zero,85944 <__sflush_r+0x78>
   8592c:	88c00117 	ldw	r3,4(r17)
   85930:	88800c17 	ldw	r2,48(r17)
   85934:	30cdc83a 	sub	r6,r6,r3
   85938:	10000226 	beq	r2,zero,85944 <__sflush_r+0x78>
   8593c:	88800f17 	ldw	r2,60(r17)
   85940:	308dc83a 	sub	r6,r6,r2
   85944:	89400717 	ldw	r5,28(r17)
   85948:	000f883a 	mov	r7,zero
   8594c:	9809883a 	mov	r4,r19
   85950:	403ee83a 	callr	r8
   85954:	00ffffc4 	movi	r3,-1
   85958:	10c04426 	beq	r2,r3,85a6c <__sflush_r+0x1a0>
   8595c:	88c0030b 	ldhu	r3,12(r17)
   85960:	89000417 	ldw	r4,16(r17)
   85964:	88000115 	stw	zero,4(r17)
   85968:	197dffcc 	andi	r5,r3,63487
   8596c:	8940030d 	sth	r5,12(r17)
   85970:	89000015 	stw	r4,0(r17)
   85974:	18c4000c 	andi	r3,r3,4096
   85978:	18002c1e 	bne	r3,zero,85a2c <__sflush_r+0x160>
   8597c:	89400c17 	ldw	r5,48(r17)
   85980:	9c000015 	stw	r16,0(r19)
   85984:	28000526 	beq	r5,zero,8599c <__sflush_r+0xd0>
   85988:	88801004 	addi	r2,r17,64
   8598c:	28800226 	beq	r5,r2,85998 <__sflush_r+0xcc>
   85990:	9809883a 	mov	r4,r19
   85994:	00860380 	call	86038 <_free_r>
   85998:	88000c15 	stw	zero,48(r17)
   8599c:	0005883a 	mov	r2,zero
   859a0:	dfc00417 	ldw	ra,16(sp)
   859a4:	dcc00317 	ldw	r19,12(sp)
   859a8:	dc800217 	ldw	r18,8(sp)
   859ac:	dc400117 	ldw	r17,4(sp)
   859b0:	dc000017 	ldw	r16,0(sp)
   859b4:	dec00504 	addi	sp,sp,20
   859b8:	f800283a 	ret
   859bc:	2c800417 	ldw	r18,16(r5)
   859c0:	903ff626 	beq	r18,zero,8599c <__alt_data_end+0xfffa3f1c>
   859c4:	2c000017 	ldw	r16,0(r5)
   859c8:	108000cc 	andi	r2,r2,3
   859cc:	2c800015 	stw	r18,0(r5)
   859d0:	84a1c83a 	sub	r16,r16,r18
   859d4:	1000131e 	bne	r2,zero,85a24 <__sflush_r+0x158>
   859d8:	28800517 	ldw	r2,20(r5)
   859dc:	88800215 	stw	r2,8(r17)
   859e0:	04000316 	blt	zero,r16,859f0 <__sflush_r+0x124>
   859e4:	003fed06 	br	8599c <__alt_data_end+0xfffa3f1c>
   859e8:	90a5883a 	add	r18,r18,r2
   859ec:	043feb0e 	bge	zero,r16,8599c <__alt_data_end+0xfffa3f1c>
   859f0:	88800917 	ldw	r2,36(r17)
   859f4:	89400717 	ldw	r5,28(r17)
   859f8:	800f883a 	mov	r7,r16
   859fc:	900d883a 	mov	r6,r18
   85a00:	9809883a 	mov	r4,r19
   85a04:	103ee83a 	callr	r2
   85a08:	80a1c83a 	sub	r16,r16,r2
   85a0c:	00bff616 	blt	zero,r2,859e8 <__alt_data_end+0xfffa3f68>
   85a10:	88c0030b 	ldhu	r3,12(r17)
   85a14:	00bfffc4 	movi	r2,-1
   85a18:	18c01014 	ori	r3,r3,64
   85a1c:	88c0030d 	sth	r3,12(r17)
   85a20:	003fdf06 	br	859a0 <__alt_data_end+0xfffa3f20>
   85a24:	0005883a 	mov	r2,zero
   85a28:	003fec06 	br	859dc <__alt_data_end+0xfffa3f5c>
   85a2c:	88801415 	stw	r2,80(r17)
   85a30:	003fd206 	br	8597c <__alt_data_end+0xfffa3efc>
   85a34:	28c00f17 	ldw	r3,60(r5)
   85a38:	00ffb316 	blt	zero,r3,85908 <__alt_data_end+0xfffa3e88>
   85a3c:	003fd706 	br	8599c <__alt_data_end+0xfffa3f1c>
   85a40:	89400717 	ldw	r5,28(r17)
   85a44:	000d883a 	mov	r6,zero
   85a48:	01c00044 	movi	r7,1
   85a4c:	9809883a 	mov	r4,r19
   85a50:	403ee83a 	callr	r8
   85a54:	100d883a 	mov	r6,r2
   85a58:	00bfffc4 	movi	r2,-1
   85a5c:	30801426 	beq	r6,r2,85ab0 <__sflush_r+0x1e4>
   85a60:	8880030b 	ldhu	r2,12(r17)
   85a64:	8a000a17 	ldw	r8,40(r17)
   85a68:	003fae06 	br	85924 <__alt_data_end+0xfffa3ea4>
   85a6c:	98c00017 	ldw	r3,0(r19)
   85a70:	183fba26 	beq	r3,zero,8595c <__alt_data_end+0xfffa3edc>
   85a74:	01000744 	movi	r4,29
   85a78:	19000626 	beq	r3,r4,85a94 <__sflush_r+0x1c8>
   85a7c:	01000584 	movi	r4,22
   85a80:	19000426 	beq	r3,r4,85a94 <__sflush_r+0x1c8>
   85a84:	88c0030b 	ldhu	r3,12(r17)
   85a88:	18c01014 	ori	r3,r3,64
   85a8c:	88c0030d 	sth	r3,12(r17)
   85a90:	003fc306 	br	859a0 <__alt_data_end+0xfffa3f20>
   85a94:	8880030b 	ldhu	r2,12(r17)
   85a98:	88c00417 	ldw	r3,16(r17)
   85a9c:	88000115 	stw	zero,4(r17)
   85aa0:	10bdffcc 	andi	r2,r2,63487
   85aa4:	8880030d 	sth	r2,12(r17)
   85aa8:	88c00015 	stw	r3,0(r17)
   85aac:	003fb306 	br	8597c <__alt_data_end+0xfffa3efc>
   85ab0:	98800017 	ldw	r2,0(r19)
   85ab4:	103fea26 	beq	r2,zero,85a60 <__alt_data_end+0xfffa3fe0>
   85ab8:	00c00744 	movi	r3,29
   85abc:	10c00226 	beq	r2,r3,85ac8 <__sflush_r+0x1fc>
   85ac0:	00c00584 	movi	r3,22
   85ac4:	10c0031e 	bne	r2,r3,85ad4 <__sflush_r+0x208>
   85ac8:	9c000015 	stw	r16,0(r19)
   85acc:	0005883a 	mov	r2,zero
   85ad0:	003fb306 	br	859a0 <__alt_data_end+0xfffa3f20>
   85ad4:	88c0030b 	ldhu	r3,12(r17)
   85ad8:	3005883a 	mov	r2,r6
   85adc:	18c01014 	ori	r3,r3,64
   85ae0:	88c0030d 	sth	r3,12(r17)
   85ae4:	003fae06 	br	859a0 <__alt_data_end+0xfffa3f20>

00085ae8 <_fflush_r>:
   85ae8:	defffd04 	addi	sp,sp,-12
   85aec:	dc000115 	stw	r16,4(sp)
   85af0:	dfc00215 	stw	ra,8(sp)
   85af4:	2021883a 	mov	r16,r4
   85af8:	20000226 	beq	r4,zero,85b04 <_fflush_r+0x1c>
   85afc:	20800e17 	ldw	r2,56(r4)
   85b00:	10000c26 	beq	r2,zero,85b34 <_fflush_r+0x4c>
   85b04:	2880030f 	ldh	r2,12(r5)
   85b08:	1000051e 	bne	r2,zero,85b20 <_fflush_r+0x38>
   85b0c:	0005883a 	mov	r2,zero
   85b10:	dfc00217 	ldw	ra,8(sp)
   85b14:	dc000117 	ldw	r16,4(sp)
   85b18:	dec00304 	addi	sp,sp,12
   85b1c:	f800283a 	ret
   85b20:	8009883a 	mov	r4,r16
   85b24:	dfc00217 	ldw	ra,8(sp)
   85b28:	dc000117 	ldw	r16,4(sp)
   85b2c:	dec00304 	addi	sp,sp,12
   85b30:	00858cc1 	jmpi	858cc <__sflush_r>
   85b34:	d9400015 	stw	r5,0(sp)
   85b38:	0085ec40 	call	85ec4 <__sinit>
   85b3c:	d9400017 	ldw	r5,0(sp)
   85b40:	003ff006 	br	85b04 <__alt_data_end+0xfffa4084>

00085b44 <fflush>:
   85b44:	20000526 	beq	r4,zero,85b5c <fflush+0x18>
   85b48:	00800274 	movhi	r2,9
   85b4c:	108b9b04 	addi	r2,r2,11884
   85b50:	200b883a 	mov	r5,r4
   85b54:	11000017 	ldw	r4,0(r2)
   85b58:	0085ae81 	jmpi	85ae8 <_fflush_r>
   85b5c:	00800274 	movhi	r2,9
   85b60:	108b9a04 	addi	r2,r2,11880
   85b64:	11000017 	ldw	r4,0(r2)
   85b68:	01400234 	movhi	r5,8
   85b6c:	2956ba04 	addi	r5,r5,23272
   85b70:	00868c81 	jmpi	868c8 <_fwalk_reent>

00085b74 <__fp_unlock>:
   85b74:	0005883a 	mov	r2,zero
   85b78:	f800283a 	ret

00085b7c <_cleanup_r>:
   85b7c:	01400274 	movhi	r5,9
   85b80:	296a4f04 	addi	r5,r5,-22212
   85b84:	00868c81 	jmpi	868c8 <_fwalk_reent>

00085b88 <__sinit.part.1>:
   85b88:	defff704 	addi	sp,sp,-36
   85b8c:	00c00234 	movhi	r3,8
   85b90:	dfc00815 	stw	ra,32(sp)
   85b94:	ddc00715 	stw	r23,28(sp)
   85b98:	dd800615 	stw	r22,24(sp)
   85b9c:	dd400515 	stw	r21,20(sp)
   85ba0:	dd000415 	stw	r20,16(sp)
   85ba4:	dcc00315 	stw	r19,12(sp)
   85ba8:	dc800215 	stw	r18,8(sp)
   85bac:	dc400115 	stw	r17,4(sp)
   85bb0:	dc000015 	stw	r16,0(sp)
   85bb4:	18d6df04 	addi	r3,r3,23420
   85bb8:	24000117 	ldw	r16,4(r4)
   85bbc:	20c00f15 	stw	r3,60(r4)
   85bc0:	2080bb04 	addi	r2,r4,748
   85bc4:	00c000c4 	movi	r3,3
   85bc8:	20c0b915 	stw	r3,740(r4)
   85bcc:	2080ba15 	stw	r2,744(r4)
   85bd0:	2000b815 	stw	zero,736(r4)
   85bd4:	05c00204 	movi	r23,8
   85bd8:	00800104 	movi	r2,4
   85bdc:	2025883a 	mov	r18,r4
   85be0:	b80d883a 	mov	r6,r23
   85be4:	81001704 	addi	r4,r16,92
   85be8:	000b883a 	mov	r5,zero
   85bec:	80000015 	stw	zero,0(r16)
   85bf0:	80000115 	stw	zero,4(r16)
   85bf4:	80000215 	stw	zero,8(r16)
   85bf8:	8080030d 	sth	r2,12(r16)
   85bfc:	80001915 	stw	zero,100(r16)
   85c00:	8000038d 	sth	zero,14(r16)
   85c04:	80000415 	stw	zero,16(r16)
   85c08:	80000515 	stw	zero,20(r16)
   85c0c:	80000615 	stw	zero,24(r16)
   85c10:	00878140 	call	87814 <memset>
   85c14:	05800274 	movhi	r22,9
   85c18:	94400217 	ldw	r17,8(r18)
   85c1c:	05400274 	movhi	r21,9
   85c20:	05000274 	movhi	r20,9
   85c24:	04c00274 	movhi	r19,9
   85c28:	b5a3d904 	addi	r22,r22,-28828
   85c2c:	ad63f004 	addi	r21,r21,-28736
   85c30:	a5240f04 	addi	r20,r20,-28612
   85c34:	9ce42604 	addi	r19,r19,-28520
   85c38:	85800815 	stw	r22,32(r16)
   85c3c:	85400915 	stw	r21,36(r16)
   85c40:	85000a15 	stw	r20,40(r16)
   85c44:	84c00b15 	stw	r19,44(r16)
   85c48:	84000715 	stw	r16,28(r16)
   85c4c:	00800284 	movi	r2,10
   85c50:	8880030d 	sth	r2,12(r17)
   85c54:	00800044 	movi	r2,1
   85c58:	b80d883a 	mov	r6,r23
   85c5c:	89001704 	addi	r4,r17,92
   85c60:	000b883a 	mov	r5,zero
   85c64:	88000015 	stw	zero,0(r17)
   85c68:	88000115 	stw	zero,4(r17)
   85c6c:	88000215 	stw	zero,8(r17)
   85c70:	88001915 	stw	zero,100(r17)
   85c74:	8880038d 	sth	r2,14(r17)
   85c78:	88000415 	stw	zero,16(r17)
   85c7c:	88000515 	stw	zero,20(r17)
   85c80:	88000615 	stw	zero,24(r17)
   85c84:	00878140 	call	87814 <memset>
   85c88:	94000317 	ldw	r16,12(r18)
   85c8c:	00800484 	movi	r2,18
   85c90:	8c400715 	stw	r17,28(r17)
   85c94:	8d800815 	stw	r22,32(r17)
   85c98:	8d400915 	stw	r21,36(r17)
   85c9c:	8d000a15 	stw	r20,40(r17)
   85ca0:	8cc00b15 	stw	r19,44(r17)
   85ca4:	8080030d 	sth	r2,12(r16)
   85ca8:	00800084 	movi	r2,2
   85cac:	80000015 	stw	zero,0(r16)
   85cb0:	80000115 	stw	zero,4(r16)
   85cb4:	80000215 	stw	zero,8(r16)
   85cb8:	80001915 	stw	zero,100(r16)
   85cbc:	8080038d 	sth	r2,14(r16)
   85cc0:	80000415 	stw	zero,16(r16)
   85cc4:	80000515 	stw	zero,20(r16)
   85cc8:	80000615 	stw	zero,24(r16)
   85ccc:	b80d883a 	mov	r6,r23
   85cd0:	000b883a 	mov	r5,zero
   85cd4:	81001704 	addi	r4,r16,92
   85cd8:	00878140 	call	87814 <memset>
   85cdc:	00800044 	movi	r2,1
   85ce0:	84000715 	stw	r16,28(r16)
   85ce4:	85800815 	stw	r22,32(r16)
   85ce8:	85400915 	stw	r21,36(r16)
   85cec:	85000a15 	stw	r20,40(r16)
   85cf0:	84c00b15 	stw	r19,44(r16)
   85cf4:	90800e15 	stw	r2,56(r18)
   85cf8:	dfc00817 	ldw	ra,32(sp)
   85cfc:	ddc00717 	ldw	r23,28(sp)
   85d00:	dd800617 	ldw	r22,24(sp)
   85d04:	dd400517 	ldw	r21,20(sp)
   85d08:	dd000417 	ldw	r20,16(sp)
   85d0c:	dcc00317 	ldw	r19,12(sp)
   85d10:	dc800217 	ldw	r18,8(sp)
   85d14:	dc400117 	ldw	r17,4(sp)
   85d18:	dc000017 	ldw	r16,0(sp)
   85d1c:	dec00904 	addi	sp,sp,36
   85d20:	f800283a 	ret

00085d24 <__fp_lock>:
   85d24:	0005883a 	mov	r2,zero
   85d28:	f800283a 	ret

00085d2c <__sfmoreglue>:
   85d2c:	defffc04 	addi	sp,sp,-16
   85d30:	dc400115 	stw	r17,4(sp)
   85d34:	2c7fffc4 	addi	r17,r5,-1
   85d38:	8c401a24 	muli	r17,r17,104
   85d3c:	dc800215 	stw	r18,8(sp)
   85d40:	2825883a 	mov	r18,r5
   85d44:	89401d04 	addi	r5,r17,116
   85d48:	dc000015 	stw	r16,0(sp)
   85d4c:	dfc00315 	stw	ra,12(sp)
   85d50:	0086c800 	call	86c80 <_malloc_r>
   85d54:	1021883a 	mov	r16,r2
   85d58:	10000726 	beq	r2,zero,85d78 <__sfmoreglue+0x4c>
   85d5c:	11000304 	addi	r4,r2,12
   85d60:	10000015 	stw	zero,0(r2)
   85d64:	14800115 	stw	r18,4(r2)
   85d68:	11000215 	stw	r4,8(r2)
   85d6c:	89801a04 	addi	r6,r17,104
   85d70:	000b883a 	mov	r5,zero
   85d74:	00878140 	call	87814 <memset>
   85d78:	8005883a 	mov	r2,r16
   85d7c:	dfc00317 	ldw	ra,12(sp)
   85d80:	dc800217 	ldw	r18,8(sp)
   85d84:	dc400117 	ldw	r17,4(sp)
   85d88:	dc000017 	ldw	r16,0(sp)
   85d8c:	dec00404 	addi	sp,sp,16
   85d90:	f800283a 	ret

00085d94 <__sfp>:
   85d94:	defffb04 	addi	sp,sp,-20
   85d98:	dc000015 	stw	r16,0(sp)
   85d9c:	04000274 	movhi	r16,9
   85da0:	840b9a04 	addi	r16,r16,11880
   85da4:	dcc00315 	stw	r19,12(sp)
   85da8:	2027883a 	mov	r19,r4
   85dac:	81000017 	ldw	r4,0(r16)
   85db0:	dfc00415 	stw	ra,16(sp)
   85db4:	dc800215 	stw	r18,8(sp)
   85db8:	20800e17 	ldw	r2,56(r4)
   85dbc:	dc400115 	stw	r17,4(sp)
   85dc0:	1000021e 	bne	r2,zero,85dcc <__sfp+0x38>
   85dc4:	0085b880 	call	85b88 <__sinit.part.1>
   85dc8:	81000017 	ldw	r4,0(r16)
   85dcc:	2480b804 	addi	r18,r4,736
   85dd0:	047fffc4 	movi	r17,-1
   85dd4:	91000117 	ldw	r4,4(r18)
   85dd8:	94000217 	ldw	r16,8(r18)
   85ddc:	213fffc4 	addi	r4,r4,-1
   85de0:	20000a16 	blt	r4,zero,85e0c <__sfp+0x78>
   85de4:	8080030f 	ldh	r2,12(r16)
   85de8:	10000c26 	beq	r2,zero,85e1c <__sfp+0x88>
   85dec:	80c01d04 	addi	r3,r16,116
   85df0:	00000206 	br	85dfc <__sfp+0x68>
   85df4:	18bfe60f 	ldh	r2,-104(r3)
   85df8:	10000826 	beq	r2,zero,85e1c <__sfp+0x88>
   85dfc:	213fffc4 	addi	r4,r4,-1
   85e00:	1c3ffd04 	addi	r16,r3,-12
   85e04:	18c01a04 	addi	r3,r3,104
   85e08:	247ffa1e 	bne	r4,r17,85df4 <__alt_data_end+0xfffa4374>
   85e0c:	90800017 	ldw	r2,0(r18)
   85e10:	10001d26 	beq	r2,zero,85e88 <__sfp+0xf4>
   85e14:	1025883a 	mov	r18,r2
   85e18:	003fee06 	br	85dd4 <__alt_data_end+0xfffa4354>
   85e1c:	00bfffc4 	movi	r2,-1
   85e20:	8080038d 	sth	r2,14(r16)
   85e24:	00800044 	movi	r2,1
   85e28:	8080030d 	sth	r2,12(r16)
   85e2c:	80001915 	stw	zero,100(r16)
   85e30:	80000015 	stw	zero,0(r16)
   85e34:	80000215 	stw	zero,8(r16)
   85e38:	80000115 	stw	zero,4(r16)
   85e3c:	80000415 	stw	zero,16(r16)
   85e40:	80000515 	stw	zero,20(r16)
   85e44:	80000615 	stw	zero,24(r16)
   85e48:	01800204 	movi	r6,8
   85e4c:	000b883a 	mov	r5,zero
   85e50:	81001704 	addi	r4,r16,92
   85e54:	00878140 	call	87814 <memset>
   85e58:	8005883a 	mov	r2,r16
   85e5c:	80000c15 	stw	zero,48(r16)
   85e60:	80000d15 	stw	zero,52(r16)
   85e64:	80001115 	stw	zero,68(r16)
   85e68:	80001215 	stw	zero,72(r16)
   85e6c:	dfc00417 	ldw	ra,16(sp)
   85e70:	dcc00317 	ldw	r19,12(sp)
   85e74:	dc800217 	ldw	r18,8(sp)
   85e78:	dc400117 	ldw	r17,4(sp)
   85e7c:	dc000017 	ldw	r16,0(sp)
   85e80:	dec00504 	addi	sp,sp,20
   85e84:	f800283a 	ret
   85e88:	01400104 	movi	r5,4
   85e8c:	9809883a 	mov	r4,r19
   85e90:	0085d2c0 	call	85d2c <__sfmoreglue>
   85e94:	90800015 	stw	r2,0(r18)
   85e98:	103fde1e 	bne	r2,zero,85e14 <__alt_data_end+0xfffa4394>
   85e9c:	00800304 	movi	r2,12
   85ea0:	98800015 	stw	r2,0(r19)
   85ea4:	0005883a 	mov	r2,zero
   85ea8:	003ff006 	br	85e6c <__alt_data_end+0xfffa43ec>

00085eac <_cleanup>:
   85eac:	00800274 	movhi	r2,9
   85eb0:	108b9a04 	addi	r2,r2,11880
   85eb4:	11000017 	ldw	r4,0(r2)
   85eb8:	01400274 	movhi	r5,9
   85ebc:	296a4f04 	addi	r5,r5,-22212
   85ec0:	00868c81 	jmpi	868c8 <_fwalk_reent>

00085ec4 <__sinit>:
   85ec4:	20800e17 	ldw	r2,56(r4)
   85ec8:	10000126 	beq	r2,zero,85ed0 <__sinit+0xc>
   85ecc:	f800283a 	ret
   85ed0:	0085b881 	jmpi	85b88 <__sinit.part.1>

00085ed4 <__sfp_lock_acquire>:
   85ed4:	f800283a 	ret

00085ed8 <__sfp_lock_release>:
   85ed8:	f800283a 	ret

00085edc <__sinit_lock_acquire>:
   85edc:	f800283a 	ret

00085ee0 <__sinit_lock_release>:
   85ee0:	f800283a 	ret

00085ee4 <__fp_lock_all>:
   85ee4:	00800274 	movhi	r2,9
   85ee8:	108b9b04 	addi	r2,r2,11884
   85eec:	11000017 	ldw	r4,0(r2)
   85ef0:	01400234 	movhi	r5,8
   85ef4:	29574904 	addi	r5,r5,23844
   85ef8:	00868041 	jmpi	86804 <_fwalk>

00085efc <__fp_unlock_all>:
   85efc:	00800274 	movhi	r2,9
   85f00:	108b9b04 	addi	r2,r2,11884
   85f04:	11000017 	ldw	r4,0(r2)
   85f08:	01400234 	movhi	r5,8
   85f0c:	2956dd04 	addi	r5,r5,23412
   85f10:	00868041 	jmpi	86804 <_fwalk>

00085f14 <_malloc_trim_r>:
   85f14:	defffb04 	addi	sp,sp,-20
   85f18:	dcc00315 	stw	r19,12(sp)
   85f1c:	04c00274 	movhi	r19,9
   85f20:	dc800215 	stw	r18,8(sp)
   85f24:	dc400115 	stw	r17,4(sp)
   85f28:	dc000015 	stw	r16,0(sp)
   85f2c:	dfc00415 	stw	ra,16(sp)
   85f30:	2821883a 	mov	r16,r5
   85f34:	9cc61604 	addi	r19,r19,6232
   85f38:	2025883a 	mov	r18,r4
   85f3c:	008ee000 	call	8ee00 <__malloc_lock>
   85f40:	98800217 	ldw	r2,8(r19)
   85f44:	14400117 	ldw	r17,4(r2)
   85f48:	00bfff04 	movi	r2,-4
   85f4c:	88a2703a 	and	r17,r17,r2
   85f50:	8c21c83a 	sub	r16,r17,r16
   85f54:	8403fbc4 	addi	r16,r16,4079
   85f58:	8020d33a 	srli	r16,r16,12
   85f5c:	0083ffc4 	movi	r2,4095
   85f60:	843fffc4 	addi	r16,r16,-1
   85f64:	8020933a 	slli	r16,r16,12
   85f68:	1400060e 	bge	r2,r16,85f84 <_malloc_trim_r+0x70>
   85f6c:	000b883a 	mov	r5,zero
   85f70:	9009883a 	mov	r4,r18
   85f74:	0088f100 	call	88f10 <_sbrk_r>
   85f78:	98c00217 	ldw	r3,8(r19)
   85f7c:	1c47883a 	add	r3,r3,r17
   85f80:	10c00a26 	beq	r2,r3,85fac <_malloc_trim_r+0x98>
   85f84:	9009883a 	mov	r4,r18
   85f88:	008ee240 	call	8ee24 <__malloc_unlock>
   85f8c:	0005883a 	mov	r2,zero
   85f90:	dfc00417 	ldw	ra,16(sp)
   85f94:	dcc00317 	ldw	r19,12(sp)
   85f98:	dc800217 	ldw	r18,8(sp)
   85f9c:	dc400117 	ldw	r17,4(sp)
   85fa0:	dc000017 	ldw	r16,0(sp)
   85fa4:	dec00504 	addi	sp,sp,20
   85fa8:	f800283a 	ret
   85fac:	040bc83a 	sub	r5,zero,r16
   85fb0:	9009883a 	mov	r4,r18
   85fb4:	0088f100 	call	88f10 <_sbrk_r>
   85fb8:	00ffffc4 	movi	r3,-1
   85fbc:	10c00d26 	beq	r2,r3,85ff4 <_malloc_trim_r+0xe0>
   85fc0:	00c00274 	movhi	r3,9
   85fc4:	18d33b04 	addi	r3,r3,19692
   85fc8:	18800017 	ldw	r2,0(r3)
   85fcc:	99000217 	ldw	r4,8(r19)
   85fd0:	8c23c83a 	sub	r17,r17,r16
   85fd4:	8c400054 	ori	r17,r17,1
   85fd8:	1421c83a 	sub	r16,r2,r16
   85fdc:	24400115 	stw	r17,4(r4)
   85fe0:	9009883a 	mov	r4,r18
   85fe4:	1c000015 	stw	r16,0(r3)
   85fe8:	008ee240 	call	8ee24 <__malloc_unlock>
   85fec:	00800044 	movi	r2,1
   85ff0:	003fe706 	br	85f90 <__alt_data_end+0xfffa4510>
   85ff4:	000b883a 	mov	r5,zero
   85ff8:	9009883a 	mov	r4,r18
   85ffc:	0088f100 	call	88f10 <_sbrk_r>
   86000:	99000217 	ldw	r4,8(r19)
   86004:	014003c4 	movi	r5,15
   86008:	1107c83a 	sub	r3,r2,r4
   8600c:	28ffdd0e 	bge	r5,r3,85f84 <__alt_data_end+0xfffa4504>
   86010:	01400274 	movhi	r5,9
   86014:	294b9d04 	addi	r5,r5,11892
   86018:	29400017 	ldw	r5,0(r5)
   8601c:	18c00054 	ori	r3,r3,1
   86020:	20c00115 	stw	r3,4(r4)
   86024:	00c00274 	movhi	r3,9
   86028:	1145c83a 	sub	r2,r2,r5
   8602c:	18d33b04 	addi	r3,r3,19692
   86030:	18800015 	stw	r2,0(r3)
   86034:	003fd306 	br	85f84 <__alt_data_end+0xfffa4504>

00086038 <_free_r>:
   86038:	28004126 	beq	r5,zero,86140 <_free_r+0x108>
   8603c:	defffd04 	addi	sp,sp,-12
   86040:	dc400115 	stw	r17,4(sp)
   86044:	dc000015 	stw	r16,0(sp)
   86048:	2023883a 	mov	r17,r4
   8604c:	2821883a 	mov	r16,r5
   86050:	dfc00215 	stw	ra,8(sp)
   86054:	008ee000 	call	8ee00 <__malloc_lock>
   86058:	81ffff17 	ldw	r7,-4(r16)
   8605c:	00bfff84 	movi	r2,-2
   86060:	01000274 	movhi	r4,9
   86064:	81bffe04 	addi	r6,r16,-8
   86068:	3884703a 	and	r2,r7,r2
   8606c:	21061604 	addi	r4,r4,6232
   86070:	308b883a 	add	r5,r6,r2
   86074:	2a400117 	ldw	r9,4(r5)
   86078:	22000217 	ldw	r8,8(r4)
   8607c:	00ffff04 	movi	r3,-4
   86080:	48c6703a 	and	r3,r9,r3
   86084:	2a005726 	beq	r5,r8,861e4 <_free_r+0x1ac>
   86088:	28c00115 	stw	r3,4(r5)
   8608c:	39c0004c 	andi	r7,r7,1
   86090:	3800091e 	bne	r7,zero,860b8 <_free_r+0x80>
   86094:	823ffe17 	ldw	r8,-8(r16)
   86098:	22400204 	addi	r9,r4,8
   8609c:	320dc83a 	sub	r6,r6,r8
   860a0:	31c00217 	ldw	r7,8(r6)
   860a4:	1205883a 	add	r2,r2,r8
   860a8:	3a406526 	beq	r7,r9,86240 <_free_r+0x208>
   860ac:	32000317 	ldw	r8,12(r6)
   860b0:	3a000315 	stw	r8,12(r7)
   860b4:	41c00215 	stw	r7,8(r8)
   860b8:	28cf883a 	add	r7,r5,r3
   860bc:	39c00117 	ldw	r7,4(r7)
   860c0:	39c0004c 	andi	r7,r7,1
   860c4:	38003a26 	beq	r7,zero,861b0 <_free_r+0x178>
   860c8:	10c00054 	ori	r3,r2,1
   860cc:	30c00115 	stw	r3,4(r6)
   860d0:	3087883a 	add	r3,r6,r2
   860d4:	18800015 	stw	r2,0(r3)
   860d8:	00c07fc4 	movi	r3,511
   860dc:	18801936 	bltu	r3,r2,86144 <_free_r+0x10c>
   860e0:	1004d0fa 	srli	r2,r2,3
   860e4:	01c00044 	movi	r7,1
   860e8:	21400117 	ldw	r5,4(r4)
   860ec:	10c00044 	addi	r3,r2,1
   860f0:	18c7883a 	add	r3,r3,r3
   860f4:	1005d0ba 	srai	r2,r2,2
   860f8:	18c7883a 	add	r3,r3,r3
   860fc:	18c7883a 	add	r3,r3,r3
   86100:	1907883a 	add	r3,r3,r4
   86104:	3884983a 	sll	r2,r7,r2
   86108:	19c00017 	ldw	r7,0(r3)
   8610c:	1a3ffe04 	addi	r8,r3,-8
   86110:	1144b03a 	or	r2,r2,r5
   86114:	32000315 	stw	r8,12(r6)
   86118:	31c00215 	stw	r7,8(r6)
   8611c:	20800115 	stw	r2,4(r4)
   86120:	19800015 	stw	r6,0(r3)
   86124:	39800315 	stw	r6,12(r7)
   86128:	8809883a 	mov	r4,r17
   8612c:	dfc00217 	ldw	ra,8(sp)
   86130:	dc400117 	ldw	r17,4(sp)
   86134:	dc000017 	ldw	r16,0(sp)
   86138:	dec00304 	addi	sp,sp,12
   8613c:	008ee241 	jmpi	8ee24 <__malloc_unlock>
   86140:	f800283a 	ret
   86144:	100ad27a 	srli	r5,r2,9
   86148:	00c00104 	movi	r3,4
   8614c:	19404a36 	bltu	r3,r5,86278 <_free_r+0x240>
   86150:	100ad1ba 	srli	r5,r2,6
   86154:	28c00e44 	addi	r3,r5,57
   86158:	18c7883a 	add	r3,r3,r3
   8615c:	29400e04 	addi	r5,r5,56
   86160:	18c7883a 	add	r3,r3,r3
   86164:	18c7883a 	add	r3,r3,r3
   86168:	1909883a 	add	r4,r3,r4
   8616c:	20c00017 	ldw	r3,0(r4)
   86170:	01c00274 	movhi	r7,9
   86174:	213ffe04 	addi	r4,r4,-8
   86178:	39c61604 	addi	r7,r7,6232
   8617c:	20c04426 	beq	r4,r3,86290 <_free_r+0x258>
   86180:	01ffff04 	movi	r7,-4
   86184:	19400117 	ldw	r5,4(r3)
   86188:	29ca703a 	and	r5,r5,r7
   8618c:	1140022e 	bgeu	r2,r5,86198 <_free_r+0x160>
   86190:	18c00217 	ldw	r3,8(r3)
   86194:	20fffb1e 	bne	r4,r3,86184 <__alt_data_end+0xfffa4704>
   86198:	19000317 	ldw	r4,12(r3)
   8619c:	31000315 	stw	r4,12(r6)
   861a0:	30c00215 	stw	r3,8(r6)
   861a4:	21800215 	stw	r6,8(r4)
   861a8:	19800315 	stw	r6,12(r3)
   861ac:	003fde06 	br	86128 <__alt_data_end+0xfffa46a8>
   861b0:	29c00217 	ldw	r7,8(r5)
   861b4:	10c5883a 	add	r2,r2,r3
   861b8:	00c00274 	movhi	r3,9
   861bc:	18c61804 	addi	r3,r3,6240
   861c0:	38c03b26 	beq	r7,r3,862b0 <_free_r+0x278>
   861c4:	2a000317 	ldw	r8,12(r5)
   861c8:	11400054 	ori	r5,r2,1
   861cc:	3087883a 	add	r3,r6,r2
   861d0:	3a000315 	stw	r8,12(r7)
   861d4:	41c00215 	stw	r7,8(r8)
   861d8:	31400115 	stw	r5,4(r6)
   861dc:	18800015 	stw	r2,0(r3)
   861e0:	003fbd06 	br	860d8 <__alt_data_end+0xfffa4658>
   861e4:	39c0004c 	andi	r7,r7,1
   861e8:	10c5883a 	add	r2,r2,r3
   861ec:	3800071e 	bne	r7,zero,8620c <_free_r+0x1d4>
   861f0:	81fffe17 	ldw	r7,-8(r16)
   861f4:	31cdc83a 	sub	r6,r6,r7
   861f8:	30c00317 	ldw	r3,12(r6)
   861fc:	31400217 	ldw	r5,8(r6)
   86200:	11c5883a 	add	r2,r2,r7
   86204:	28c00315 	stw	r3,12(r5)
   86208:	19400215 	stw	r5,8(r3)
   8620c:	10c00054 	ori	r3,r2,1
   86210:	30c00115 	stw	r3,4(r6)
   86214:	00c00274 	movhi	r3,9
   86218:	18cb9e04 	addi	r3,r3,11896
   8621c:	18c00017 	ldw	r3,0(r3)
   86220:	21800215 	stw	r6,8(r4)
   86224:	10ffc036 	bltu	r2,r3,86128 <__alt_data_end+0xfffa46a8>
   86228:	00800274 	movhi	r2,9
   8622c:	1092f304 	addi	r2,r2,19404
   86230:	11400017 	ldw	r5,0(r2)
   86234:	8809883a 	mov	r4,r17
   86238:	0085f140 	call	85f14 <_malloc_trim_r>
   8623c:	003fba06 	br	86128 <__alt_data_end+0xfffa46a8>
   86240:	28c9883a 	add	r4,r5,r3
   86244:	21000117 	ldw	r4,4(r4)
   86248:	2100004c 	andi	r4,r4,1
   8624c:	2000391e 	bne	r4,zero,86334 <_free_r+0x2fc>
   86250:	29c00217 	ldw	r7,8(r5)
   86254:	29000317 	ldw	r4,12(r5)
   86258:	1885883a 	add	r2,r3,r2
   8625c:	10c00054 	ori	r3,r2,1
   86260:	39000315 	stw	r4,12(r7)
   86264:	21c00215 	stw	r7,8(r4)
   86268:	30c00115 	stw	r3,4(r6)
   8626c:	308d883a 	add	r6,r6,r2
   86270:	30800015 	stw	r2,0(r6)
   86274:	003fac06 	br	86128 <__alt_data_end+0xfffa46a8>
   86278:	00c00504 	movi	r3,20
   8627c:	19401536 	bltu	r3,r5,862d4 <_free_r+0x29c>
   86280:	28c01704 	addi	r3,r5,92
   86284:	18c7883a 	add	r3,r3,r3
   86288:	294016c4 	addi	r5,r5,91
   8628c:	003fb406 	br	86160 <__alt_data_end+0xfffa46e0>
   86290:	280bd0ba 	srai	r5,r5,2
   86294:	00c00044 	movi	r3,1
   86298:	38800117 	ldw	r2,4(r7)
   8629c:	194a983a 	sll	r5,r3,r5
   862a0:	2007883a 	mov	r3,r4
   862a4:	2884b03a 	or	r2,r5,r2
   862a8:	38800115 	stw	r2,4(r7)
   862ac:	003fbb06 	br	8619c <__alt_data_end+0xfffa471c>
   862b0:	21800515 	stw	r6,20(r4)
   862b4:	21800415 	stw	r6,16(r4)
   862b8:	10c00054 	ori	r3,r2,1
   862bc:	31c00315 	stw	r7,12(r6)
   862c0:	31c00215 	stw	r7,8(r6)
   862c4:	30c00115 	stw	r3,4(r6)
   862c8:	308d883a 	add	r6,r6,r2
   862cc:	30800015 	stw	r2,0(r6)
   862d0:	003f9506 	br	86128 <__alt_data_end+0xfffa46a8>
   862d4:	00c01504 	movi	r3,84
   862d8:	19400536 	bltu	r3,r5,862f0 <_free_r+0x2b8>
   862dc:	100ad33a 	srli	r5,r2,12
   862e0:	28c01bc4 	addi	r3,r5,111
   862e4:	18c7883a 	add	r3,r3,r3
   862e8:	29401b84 	addi	r5,r5,110
   862ec:	003f9c06 	br	86160 <__alt_data_end+0xfffa46e0>
   862f0:	00c05504 	movi	r3,340
   862f4:	19400536 	bltu	r3,r5,8630c <_free_r+0x2d4>
   862f8:	100ad3fa 	srli	r5,r2,15
   862fc:	28c01e04 	addi	r3,r5,120
   86300:	18c7883a 	add	r3,r3,r3
   86304:	29401dc4 	addi	r5,r5,119
   86308:	003f9506 	br	86160 <__alt_data_end+0xfffa46e0>
   8630c:	00c15504 	movi	r3,1364
   86310:	19400536 	bltu	r3,r5,86328 <_free_r+0x2f0>
   86314:	100ad4ba 	srli	r5,r2,18
   86318:	28c01f44 	addi	r3,r5,125
   8631c:	18c7883a 	add	r3,r3,r3
   86320:	29401f04 	addi	r5,r5,124
   86324:	003f8e06 	br	86160 <__alt_data_end+0xfffa46e0>
   86328:	00c03f84 	movi	r3,254
   8632c:	01401f84 	movi	r5,126
   86330:	003f8b06 	br	86160 <__alt_data_end+0xfffa46e0>
   86334:	10c00054 	ori	r3,r2,1
   86338:	30c00115 	stw	r3,4(r6)
   8633c:	308d883a 	add	r6,r6,r2
   86340:	30800015 	stw	r2,0(r6)
   86344:	003f7806 	br	86128 <__alt_data_end+0xfffa46a8>

00086348 <__sfvwrite_r>:
   86348:	30800217 	ldw	r2,8(r6)
   8634c:	10006726 	beq	r2,zero,864ec <__sfvwrite_r+0x1a4>
   86350:	28c0030b 	ldhu	r3,12(r5)
   86354:	defff404 	addi	sp,sp,-48
   86358:	dd400715 	stw	r21,28(sp)
   8635c:	dd000615 	stw	r20,24(sp)
   86360:	dc000215 	stw	r16,8(sp)
   86364:	dfc00b15 	stw	ra,44(sp)
   86368:	df000a15 	stw	fp,40(sp)
   8636c:	ddc00915 	stw	r23,36(sp)
   86370:	dd800815 	stw	r22,32(sp)
   86374:	dcc00515 	stw	r19,20(sp)
   86378:	dc800415 	stw	r18,16(sp)
   8637c:	dc400315 	stw	r17,12(sp)
   86380:	1880020c 	andi	r2,r3,8
   86384:	2821883a 	mov	r16,r5
   86388:	202b883a 	mov	r21,r4
   8638c:	3029883a 	mov	r20,r6
   86390:	10002726 	beq	r2,zero,86430 <__sfvwrite_r+0xe8>
   86394:	28800417 	ldw	r2,16(r5)
   86398:	10002526 	beq	r2,zero,86430 <__sfvwrite_r+0xe8>
   8639c:	1880008c 	andi	r2,r3,2
   863a0:	a4400017 	ldw	r17,0(r20)
   863a4:	10002a26 	beq	r2,zero,86450 <__sfvwrite_r+0x108>
   863a8:	05a00034 	movhi	r22,32768
   863ac:	0027883a 	mov	r19,zero
   863b0:	0025883a 	mov	r18,zero
   863b4:	b5bf0004 	addi	r22,r22,-1024
   863b8:	980d883a 	mov	r6,r19
   863bc:	a809883a 	mov	r4,r21
   863c0:	90004626 	beq	r18,zero,864dc <__sfvwrite_r+0x194>
   863c4:	900f883a 	mov	r7,r18
   863c8:	b480022e 	bgeu	r22,r18,863d4 <__sfvwrite_r+0x8c>
   863cc:	01e00034 	movhi	r7,32768
   863d0:	39ff0004 	addi	r7,r7,-1024
   863d4:	80800917 	ldw	r2,36(r16)
   863d8:	81400717 	ldw	r5,28(r16)
   863dc:	103ee83a 	callr	r2
   863e0:	0080570e 	bge	zero,r2,86540 <__sfvwrite_r+0x1f8>
   863e4:	a0c00217 	ldw	r3,8(r20)
   863e8:	98a7883a 	add	r19,r19,r2
   863ec:	90a5c83a 	sub	r18,r18,r2
   863f0:	1885c83a 	sub	r2,r3,r2
   863f4:	a0800215 	stw	r2,8(r20)
   863f8:	103fef1e 	bne	r2,zero,863b8 <__alt_data_end+0xfffa4938>
   863fc:	0005883a 	mov	r2,zero
   86400:	dfc00b17 	ldw	ra,44(sp)
   86404:	df000a17 	ldw	fp,40(sp)
   86408:	ddc00917 	ldw	r23,36(sp)
   8640c:	dd800817 	ldw	r22,32(sp)
   86410:	dd400717 	ldw	r21,28(sp)
   86414:	dd000617 	ldw	r20,24(sp)
   86418:	dcc00517 	ldw	r19,20(sp)
   8641c:	dc800417 	ldw	r18,16(sp)
   86420:	dc400317 	ldw	r17,12(sp)
   86424:	dc000217 	ldw	r16,8(sp)
   86428:	dec00c04 	addi	sp,sp,48
   8642c:	f800283a 	ret
   86430:	800b883a 	mov	r5,r16
   86434:	a809883a 	mov	r4,r21
   86438:	0083ef00 	call	83ef0 <__swsetup_r>
   8643c:	1000eb1e 	bne	r2,zero,867ec <__sfvwrite_r+0x4a4>
   86440:	80c0030b 	ldhu	r3,12(r16)
   86444:	a4400017 	ldw	r17,0(r20)
   86448:	1880008c 	andi	r2,r3,2
   8644c:	103fd61e 	bne	r2,zero,863a8 <__alt_data_end+0xfffa4928>
   86450:	1880004c 	andi	r2,r3,1
   86454:	10003f1e 	bne	r2,zero,86554 <__sfvwrite_r+0x20c>
   86458:	0039883a 	mov	fp,zero
   8645c:	0025883a 	mov	r18,zero
   86460:	90001a26 	beq	r18,zero,864cc <__sfvwrite_r+0x184>
   86464:	1880800c 	andi	r2,r3,512
   86468:	84c00217 	ldw	r19,8(r16)
   8646c:	10002126 	beq	r2,zero,864f4 <__sfvwrite_r+0x1ac>
   86470:	982f883a 	mov	r23,r19
   86474:	94c09336 	bltu	r18,r19,866c4 <__sfvwrite_r+0x37c>
   86478:	1881200c 	andi	r2,r3,1152
   8647c:	10009e1e 	bne	r2,zero,866f8 <__sfvwrite_r+0x3b0>
   86480:	81000017 	ldw	r4,0(r16)
   86484:	b80d883a 	mov	r6,r23
   86488:	e00b883a 	mov	r5,fp
   8648c:	00876b80 	call	876b8 <memmove>
   86490:	80c00217 	ldw	r3,8(r16)
   86494:	81000017 	ldw	r4,0(r16)
   86498:	9005883a 	mov	r2,r18
   8649c:	1ce7c83a 	sub	r19,r3,r19
   864a0:	25cf883a 	add	r7,r4,r23
   864a4:	84c00215 	stw	r19,8(r16)
   864a8:	81c00015 	stw	r7,0(r16)
   864ac:	a0c00217 	ldw	r3,8(r20)
   864b0:	e0b9883a 	add	fp,fp,r2
   864b4:	90a5c83a 	sub	r18,r18,r2
   864b8:	18a7c83a 	sub	r19,r3,r2
   864bc:	a4c00215 	stw	r19,8(r20)
   864c0:	983fce26 	beq	r19,zero,863fc <__alt_data_end+0xfffa497c>
   864c4:	80c0030b 	ldhu	r3,12(r16)
   864c8:	903fe61e 	bne	r18,zero,86464 <__alt_data_end+0xfffa49e4>
   864cc:	8f000017 	ldw	fp,0(r17)
   864d0:	8c800117 	ldw	r18,4(r17)
   864d4:	8c400204 	addi	r17,r17,8
   864d8:	003fe106 	br	86460 <__alt_data_end+0xfffa49e0>
   864dc:	8cc00017 	ldw	r19,0(r17)
   864e0:	8c800117 	ldw	r18,4(r17)
   864e4:	8c400204 	addi	r17,r17,8
   864e8:	003fb306 	br	863b8 <__alt_data_end+0xfffa4938>
   864ec:	0005883a 	mov	r2,zero
   864f0:	f800283a 	ret
   864f4:	81000017 	ldw	r4,0(r16)
   864f8:	80800417 	ldw	r2,16(r16)
   864fc:	11005736 	bltu	r2,r4,8665c <__sfvwrite_r+0x314>
   86500:	85c00517 	ldw	r23,20(r16)
   86504:	95c05536 	bltu	r18,r23,8665c <__sfvwrite_r+0x314>
   86508:	00a00034 	movhi	r2,32768
   8650c:	10bfffc4 	addi	r2,r2,-1
   86510:	9009883a 	mov	r4,r18
   86514:	1480012e 	bgeu	r2,r18,8651c <__sfvwrite_r+0x1d4>
   86518:	1009883a 	mov	r4,r2
   8651c:	b80b883a 	mov	r5,r23
   86520:	00817c80 	call	817c8 <__divsi3>
   86524:	15cf383a 	mul	r7,r2,r23
   86528:	81400717 	ldw	r5,28(r16)
   8652c:	80800917 	ldw	r2,36(r16)
   86530:	e00d883a 	mov	r6,fp
   86534:	a809883a 	mov	r4,r21
   86538:	103ee83a 	callr	r2
   8653c:	00bfdb16 	blt	zero,r2,864ac <__alt_data_end+0xfffa4a2c>
   86540:	8080030b 	ldhu	r2,12(r16)
   86544:	10801014 	ori	r2,r2,64
   86548:	8080030d 	sth	r2,12(r16)
   8654c:	00bfffc4 	movi	r2,-1
   86550:	003fab06 	br	86400 <__alt_data_end+0xfffa4980>
   86554:	0027883a 	mov	r19,zero
   86558:	0011883a 	mov	r8,zero
   8655c:	0039883a 	mov	fp,zero
   86560:	0025883a 	mov	r18,zero
   86564:	90001f26 	beq	r18,zero,865e4 <__sfvwrite_r+0x29c>
   86568:	40005a26 	beq	r8,zero,866d4 <__sfvwrite_r+0x38c>
   8656c:	982d883a 	mov	r22,r19
   86570:	94c0012e 	bgeu	r18,r19,86578 <__sfvwrite_r+0x230>
   86574:	902d883a 	mov	r22,r18
   86578:	81000017 	ldw	r4,0(r16)
   8657c:	80800417 	ldw	r2,16(r16)
   86580:	b02f883a 	mov	r23,r22
   86584:	81c00517 	ldw	r7,20(r16)
   86588:	1100032e 	bgeu	r2,r4,86598 <__sfvwrite_r+0x250>
   8658c:	80c00217 	ldw	r3,8(r16)
   86590:	38c7883a 	add	r3,r7,r3
   86594:	1d801816 	blt	r3,r22,865f8 <__sfvwrite_r+0x2b0>
   86598:	b1c03e16 	blt	r22,r7,86694 <__sfvwrite_r+0x34c>
   8659c:	80800917 	ldw	r2,36(r16)
   865a0:	81400717 	ldw	r5,28(r16)
   865a4:	e00d883a 	mov	r6,fp
   865a8:	da000115 	stw	r8,4(sp)
   865ac:	a809883a 	mov	r4,r21
   865b0:	103ee83a 	callr	r2
   865b4:	102f883a 	mov	r23,r2
   865b8:	da000117 	ldw	r8,4(sp)
   865bc:	00bfe00e 	bge	zero,r2,86540 <__alt_data_end+0xfffa4ac0>
   865c0:	9de7c83a 	sub	r19,r19,r23
   865c4:	98001f26 	beq	r19,zero,86644 <__sfvwrite_r+0x2fc>
   865c8:	a0800217 	ldw	r2,8(r20)
   865cc:	e5f9883a 	add	fp,fp,r23
   865d0:	95e5c83a 	sub	r18,r18,r23
   865d4:	15efc83a 	sub	r23,r2,r23
   865d8:	a5c00215 	stw	r23,8(r20)
   865dc:	b83f8726 	beq	r23,zero,863fc <__alt_data_end+0xfffa497c>
   865e0:	903fe11e 	bne	r18,zero,86568 <__alt_data_end+0xfffa4ae8>
   865e4:	8f000017 	ldw	fp,0(r17)
   865e8:	8c800117 	ldw	r18,4(r17)
   865ec:	0011883a 	mov	r8,zero
   865f0:	8c400204 	addi	r17,r17,8
   865f4:	003fdb06 	br	86564 <__alt_data_end+0xfffa4ae4>
   865f8:	180d883a 	mov	r6,r3
   865fc:	e00b883a 	mov	r5,fp
   86600:	da000115 	stw	r8,4(sp)
   86604:	d8c00015 	stw	r3,0(sp)
   86608:	00876b80 	call	876b8 <memmove>
   8660c:	d8c00017 	ldw	r3,0(sp)
   86610:	80800017 	ldw	r2,0(r16)
   86614:	800b883a 	mov	r5,r16
   86618:	a809883a 	mov	r4,r21
   8661c:	10c5883a 	add	r2,r2,r3
   86620:	80800015 	stw	r2,0(r16)
   86624:	d8c00015 	stw	r3,0(sp)
   86628:	0085ae80 	call	85ae8 <_fflush_r>
   8662c:	d8c00017 	ldw	r3,0(sp)
   86630:	da000117 	ldw	r8,4(sp)
   86634:	103fc21e 	bne	r2,zero,86540 <__alt_data_end+0xfffa4ac0>
   86638:	182f883a 	mov	r23,r3
   8663c:	9de7c83a 	sub	r19,r19,r23
   86640:	983fe11e 	bne	r19,zero,865c8 <__alt_data_end+0xfffa4b48>
   86644:	800b883a 	mov	r5,r16
   86648:	a809883a 	mov	r4,r21
   8664c:	0085ae80 	call	85ae8 <_fflush_r>
   86650:	103fbb1e 	bne	r2,zero,86540 <__alt_data_end+0xfffa4ac0>
   86654:	0011883a 	mov	r8,zero
   86658:	003fdb06 	br	865c8 <__alt_data_end+0xfffa4b48>
   8665c:	94c0012e 	bgeu	r18,r19,86664 <__sfvwrite_r+0x31c>
   86660:	9027883a 	mov	r19,r18
   86664:	980d883a 	mov	r6,r19
   86668:	e00b883a 	mov	r5,fp
   8666c:	00876b80 	call	876b8 <memmove>
   86670:	80800217 	ldw	r2,8(r16)
   86674:	80c00017 	ldw	r3,0(r16)
   86678:	14c5c83a 	sub	r2,r2,r19
   8667c:	1cc7883a 	add	r3,r3,r19
   86680:	80800215 	stw	r2,8(r16)
   86684:	80c00015 	stw	r3,0(r16)
   86688:	10004326 	beq	r2,zero,86798 <__sfvwrite_r+0x450>
   8668c:	9805883a 	mov	r2,r19
   86690:	003f8606 	br	864ac <__alt_data_end+0xfffa4a2c>
   86694:	b00d883a 	mov	r6,r22
   86698:	e00b883a 	mov	r5,fp
   8669c:	da000115 	stw	r8,4(sp)
   866a0:	00876b80 	call	876b8 <memmove>
   866a4:	80800217 	ldw	r2,8(r16)
   866a8:	80c00017 	ldw	r3,0(r16)
   866ac:	da000117 	ldw	r8,4(sp)
   866b0:	1585c83a 	sub	r2,r2,r22
   866b4:	1dad883a 	add	r22,r3,r22
   866b8:	80800215 	stw	r2,8(r16)
   866bc:	85800015 	stw	r22,0(r16)
   866c0:	003fbf06 	br	865c0 <__alt_data_end+0xfffa4b40>
   866c4:	81000017 	ldw	r4,0(r16)
   866c8:	9027883a 	mov	r19,r18
   866cc:	902f883a 	mov	r23,r18
   866d0:	003f6c06 	br	86484 <__alt_data_end+0xfffa4a04>
   866d4:	900d883a 	mov	r6,r18
   866d8:	01400284 	movi	r5,10
   866dc:	e009883a 	mov	r4,fp
   866e0:	008748c0 	call	8748c <memchr>
   866e4:	10003e26 	beq	r2,zero,867e0 <__sfvwrite_r+0x498>
   866e8:	10800044 	addi	r2,r2,1
   866ec:	1727c83a 	sub	r19,r2,fp
   866f0:	02000044 	movi	r8,1
   866f4:	003f9d06 	br	8656c <__alt_data_end+0xfffa4aec>
   866f8:	80800517 	ldw	r2,20(r16)
   866fc:	81400417 	ldw	r5,16(r16)
   86700:	81c00017 	ldw	r7,0(r16)
   86704:	10a7883a 	add	r19,r2,r2
   86708:	9885883a 	add	r2,r19,r2
   8670c:	1026d7fa 	srli	r19,r2,31
   86710:	396dc83a 	sub	r22,r7,r5
   86714:	b1000044 	addi	r4,r22,1
   86718:	9885883a 	add	r2,r19,r2
   8671c:	1027d07a 	srai	r19,r2,1
   86720:	2485883a 	add	r2,r4,r18
   86724:	980d883a 	mov	r6,r19
   86728:	9880022e 	bgeu	r19,r2,86734 <__sfvwrite_r+0x3ec>
   8672c:	1027883a 	mov	r19,r2
   86730:	100d883a 	mov	r6,r2
   86734:	18c1000c 	andi	r3,r3,1024
   86738:	18001c26 	beq	r3,zero,867ac <__sfvwrite_r+0x464>
   8673c:	300b883a 	mov	r5,r6
   86740:	a809883a 	mov	r4,r21
   86744:	0086c800 	call	86c80 <_malloc_r>
   86748:	102f883a 	mov	r23,r2
   8674c:	10002926 	beq	r2,zero,867f4 <__sfvwrite_r+0x4ac>
   86750:	81400417 	ldw	r5,16(r16)
   86754:	b00d883a 	mov	r6,r22
   86758:	1009883a 	mov	r4,r2
   8675c:	00875700 	call	87570 <memcpy>
   86760:	8080030b 	ldhu	r2,12(r16)
   86764:	00fedfc4 	movi	r3,-1153
   86768:	10c4703a 	and	r2,r2,r3
   8676c:	10802014 	ori	r2,r2,128
   86770:	8080030d 	sth	r2,12(r16)
   86774:	bd89883a 	add	r4,r23,r22
   86778:	9d8fc83a 	sub	r7,r19,r22
   8677c:	85c00415 	stw	r23,16(r16)
   86780:	84c00515 	stw	r19,20(r16)
   86784:	81000015 	stw	r4,0(r16)
   86788:	9027883a 	mov	r19,r18
   8678c:	81c00215 	stw	r7,8(r16)
   86790:	902f883a 	mov	r23,r18
   86794:	003f3b06 	br	86484 <__alt_data_end+0xfffa4a04>
   86798:	800b883a 	mov	r5,r16
   8679c:	a809883a 	mov	r4,r21
   867a0:	0085ae80 	call	85ae8 <_fflush_r>
   867a4:	103fb926 	beq	r2,zero,8668c <__alt_data_end+0xfffa4c0c>
   867a8:	003f6506 	br	86540 <__alt_data_end+0xfffa4ac0>
   867ac:	a809883a 	mov	r4,r21
   867b0:	00889380 	call	88938 <_realloc_r>
   867b4:	102f883a 	mov	r23,r2
   867b8:	103fee1e 	bne	r2,zero,86774 <__alt_data_end+0xfffa4cf4>
   867bc:	81400417 	ldw	r5,16(r16)
   867c0:	a809883a 	mov	r4,r21
   867c4:	00860380 	call	86038 <_free_r>
   867c8:	8080030b 	ldhu	r2,12(r16)
   867cc:	00ffdfc4 	movi	r3,-129
   867d0:	1884703a 	and	r2,r3,r2
   867d4:	00c00304 	movi	r3,12
   867d8:	a8c00015 	stw	r3,0(r21)
   867dc:	003f5906 	br	86544 <__alt_data_end+0xfffa4ac4>
   867e0:	94c00044 	addi	r19,r18,1
   867e4:	02000044 	movi	r8,1
   867e8:	003f6006 	br	8656c <__alt_data_end+0xfffa4aec>
   867ec:	00bfffc4 	movi	r2,-1
   867f0:	003f0306 	br	86400 <__alt_data_end+0xfffa4980>
   867f4:	00800304 	movi	r2,12
   867f8:	a8800015 	stw	r2,0(r21)
   867fc:	8080030b 	ldhu	r2,12(r16)
   86800:	003f5006 	br	86544 <__alt_data_end+0xfffa4ac4>

00086804 <_fwalk>:
   86804:	defff704 	addi	sp,sp,-36
   86808:	dd000415 	stw	r20,16(sp)
   8680c:	dfc00815 	stw	ra,32(sp)
   86810:	ddc00715 	stw	r23,28(sp)
   86814:	dd800615 	stw	r22,24(sp)
   86818:	dd400515 	stw	r21,20(sp)
   8681c:	dcc00315 	stw	r19,12(sp)
   86820:	dc800215 	stw	r18,8(sp)
   86824:	dc400115 	stw	r17,4(sp)
   86828:	dc000015 	stw	r16,0(sp)
   8682c:	2500b804 	addi	r20,r4,736
   86830:	a0002326 	beq	r20,zero,868c0 <_fwalk+0xbc>
   86834:	282b883a 	mov	r21,r5
   86838:	002f883a 	mov	r23,zero
   8683c:	05800044 	movi	r22,1
   86840:	04ffffc4 	movi	r19,-1
   86844:	a4400117 	ldw	r17,4(r20)
   86848:	a4800217 	ldw	r18,8(r20)
   8684c:	8c7fffc4 	addi	r17,r17,-1
   86850:	88000d16 	blt	r17,zero,86888 <_fwalk+0x84>
   86854:	94000304 	addi	r16,r18,12
   86858:	94800384 	addi	r18,r18,14
   8685c:	8080000b 	ldhu	r2,0(r16)
   86860:	8c7fffc4 	addi	r17,r17,-1
   86864:	813ffd04 	addi	r4,r16,-12
   86868:	b080042e 	bgeu	r22,r2,8687c <_fwalk+0x78>
   8686c:	9080000f 	ldh	r2,0(r18)
   86870:	14c00226 	beq	r2,r19,8687c <_fwalk+0x78>
   86874:	a83ee83a 	callr	r21
   86878:	b8aeb03a 	or	r23,r23,r2
   8687c:	84001a04 	addi	r16,r16,104
   86880:	94801a04 	addi	r18,r18,104
   86884:	8cfff51e 	bne	r17,r19,8685c <__alt_data_end+0xfffa4ddc>
   86888:	a5000017 	ldw	r20,0(r20)
   8688c:	a03fed1e 	bne	r20,zero,86844 <__alt_data_end+0xfffa4dc4>
   86890:	b805883a 	mov	r2,r23
   86894:	dfc00817 	ldw	ra,32(sp)
   86898:	ddc00717 	ldw	r23,28(sp)
   8689c:	dd800617 	ldw	r22,24(sp)
   868a0:	dd400517 	ldw	r21,20(sp)
   868a4:	dd000417 	ldw	r20,16(sp)
   868a8:	dcc00317 	ldw	r19,12(sp)
   868ac:	dc800217 	ldw	r18,8(sp)
   868b0:	dc400117 	ldw	r17,4(sp)
   868b4:	dc000017 	ldw	r16,0(sp)
   868b8:	dec00904 	addi	sp,sp,36
   868bc:	f800283a 	ret
   868c0:	002f883a 	mov	r23,zero
   868c4:	003ff206 	br	86890 <__alt_data_end+0xfffa4e10>

000868c8 <_fwalk_reent>:
   868c8:	defff704 	addi	sp,sp,-36
   868cc:	dd000415 	stw	r20,16(sp)
   868d0:	dfc00815 	stw	ra,32(sp)
   868d4:	ddc00715 	stw	r23,28(sp)
   868d8:	dd800615 	stw	r22,24(sp)
   868dc:	dd400515 	stw	r21,20(sp)
   868e0:	dcc00315 	stw	r19,12(sp)
   868e4:	dc800215 	stw	r18,8(sp)
   868e8:	dc400115 	stw	r17,4(sp)
   868ec:	dc000015 	stw	r16,0(sp)
   868f0:	2500b804 	addi	r20,r4,736
   868f4:	a0002326 	beq	r20,zero,86984 <_fwalk_reent+0xbc>
   868f8:	282b883a 	mov	r21,r5
   868fc:	2027883a 	mov	r19,r4
   86900:	002f883a 	mov	r23,zero
   86904:	05800044 	movi	r22,1
   86908:	04bfffc4 	movi	r18,-1
   8690c:	a4400117 	ldw	r17,4(r20)
   86910:	a4000217 	ldw	r16,8(r20)
   86914:	8c7fffc4 	addi	r17,r17,-1
   86918:	88000c16 	blt	r17,zero,8694c <_fwalk_reent+0x84>
   8691c:	84000304 	addi	r16,r16,12
   86920:	8080000b 	ldhu	r2,0(r16)
   86924:	8c7fffc4 	addi	r17,r17,-1
   86928:	817ffd04 	addi	r5,r16,-12
   8692c:	b080052e 	bgeu	r22,r2,86944 <_fwalk_reent+0x7c>
   86930:	8080008f 	ldh	r2,2(r16)
   86934:	9809883a 	mov	r4,r19
   86938:	14800226 	beq	r2,r18,86944 <_fwalk_reent+0x7c>
   8693c:	a83ee83a 	callr	r21
   86940:	b8aeb03a 	or	r23,r23,r2
   86944:	84001a04 	addi	r16,r16,104
   86948:	8cbff51e 	bne	r17,r18,86920 <__alt_data_end+0xfffa4ea0>
   8694c:	a5000017 	ldw	r20,0(r20)
   86950:	a03fee1e 	bne	r20,zero,8690c <__alt_data_end+0xfffa4e8c>
   86954:	b805883a 	mov	r2,r23
   86958:	dfc00817 	ldw	ra,32(sp)
   8695c:	ddc00717 	ldw	r23,28(sp)
   86960:	dd800617 	ldw	r22,24(sp)
   86964:	dd400517 	ldw	r21,20(sp)
   86968:	dd000417 	ldw	r20,16(sp)
   8696c:	dcc00317 	ldw	r19,12(sp)
   86970:	dc800217 	ldw	r18,8(sp)
   86974:	dc400117 	ldw	r17,4(sp)
   86978:	dc000017 	ldw	r16,0(sp)
   8697c:	dec00904 	addi	sp,sp,36
   86980:	f800283a 	ret
   86984:	002f883a 	mov	r23,zero
   86988:	003ff206 	br	86954 <__alt_data_end+0xfffa4ed4>

0008698c <_gettimeofday_r>:
   8698c:	defffd04 	addi	sp,sp,-12
   86990:	2805883a 	mov	r2,r5
   86994:	dc000015 	stw	r16,0(sp)
   86998:	04000274 	movhi	r16,9
   8699c:	dc400115 	stw	r17,4(sp)
   869a0:	8412ed04 	addi	r16,r16,19380
   869a4:	2023883a 	mov	r17,r4
   869a8:	300b883a 	mov	r5,r6
   869ac:	1009883a 	mov	r4,r2
   869b0:	dfc00215 	stw	ra,8(sp)
   869b4:	80000015 	stw	zero,0(r16)
   869b8:	008e4940 	call	8e494 <gettimeofday>
   869bc:	00ffffc4 	movi	r3,-1
   869c0:	10c00526 	beq	r2,r3,869d8 <_gettimeofday_r+0x4c>
   869c4:	dfc00217 	ldw	ra,8(sp)
   869c8:	dc400117 	ldw	r17,4(sp)
   869cc:	dc000017 	ldw	r16,0(sp)
   869d0:	dec00304 	addi	sp,sp,12
   869d4:	f800283a 	ret
   869d8:	80c00017 	ldw	r3,0(r16)
   869dc:	183ff926 	beq	r3,zero,869c4 <__alt_data_end+0xfffa4f44>
   869e0:	88c00015 	stw	r3,0(r17)
   869e4:	003ff706 	br	869c4 <__alt_data_end+0xfffa4f44>

000869e8 <_setlocale_r>:
   869e8:	30001b26 	beq	r6,zero,86a58 <_setlocale_r+0x70>
   869ec:	01400274 	movhi	r5,9
   869f0:	defffe04 	addi	sp,sp,-8
   869f4:	2943c904 	addi	r5,r5,3876
   869f8:	3009883a 	mov	r4,r6
   869fc:	dc000015 	stw	r16,0(sp)
   86a00:	dfc00115 	stw	ra,4(sp)
   86a04:	3021883a 	mov	r16,r6
   86a08:	00890a00 	call	890a0 <strcmp>
   86a0c:	1000061e 	bne	r2,zero,86a28 <_setlocale_r+0x40>
   86a10:	00800274 	movhi	r2,9
   86a14:	1083c804 	addi	r2,r2,3872
   86a18:	dfc00117 	ldw	ra,4(sp)
   86a1c:	dc000017 	ldw	r16,0(sp)
   86a20:	dec00204 	addi	sp,sp,8
   86a24:	f800283a 	ret
   86a28:	01400274 	movhi	r5,9
   86a2c:	2943c804 	addi	r5,r5,3872
   86a30:	8009883a 	mov	r4,r16
   86a34:	00890a00 	call	890a0 <strcmp>
   86a38:	103ff526 	beq	r2,zero,86a10 <__alt_data_end+0xfffa4f90>
   86a3c:	01400274 	movhi	r5,9
   86a40:	2943b304 	addi	r5,r5,3788
   86a44:	8009883a 	mov	r4,r16
   86a48:	00890a00 	call	890a0 <strcmp>
   86a4c:	103ff026 	beq	r2,zero,86a10 <__alt_data_end+0xfffa4f90>
   86a50:	0005883a 	mov	r2,zero
   86a54:	003ff006 	br	86a18 <__alt_data_end+0xfffa4f98>
   86a58:	00800274 	movhi	r2,9
   86a5c:	1083c804 	addi	r2,r2,3872
   86a60:	f800283a 	ret

00086a64 <__locale_charset>:
   86a64:	00800274 	movhi	r2,9
   86a68:	10860004 	addi	r2,r2,6144
   86a6c:	f800283a 	ret

00086a70 <__locale_mb_cur_max>:
   86a70:	00800274 	movhi	r2,9
   86a74:	108b9c04 	addi	r2,r2,11888
   86a78:	10800017 	ldw	r2,0(r2)
   86a7c:	f800283a 	ret

00086a80 <__locale_msgcharset>:
   86a80:	00800274 	movhi	r2,9
   86a84:	1085f804 	addi	r2,r2,6112
   86a88:	f800283a 	ret

00086a8c <__locale_cjk_lang>:
   86a8c:	0005883a 	mov	r2,zero
   86a90:	f800283a 	ret

00086a94 <_localeconv_r>:
   86a94:	00800274 	movhi	r2,9
   86a98:	10860804 	addi	r2,r2,6176
   86a9c:	f800283a 	ret

00086aa0 <setlocale>:
   86aa0:	00800274 	movhi	r2,9
   86aa4:	108b9b04 	addi	r2,r2,11884
   86aa8:	280d883a 	mov	r6,r5
   86aac:	200b883a 	mov	r5,r4
   86ab0:	11000017 	ldw	r4,0(r2)
   86ab4:	00869e81 	jmpi	869e8 <_setlocale_r>

00086ab8 <localeconv>:
   86ab8:	00800274 	movhi	r2,9
   86abc:	10860804 	addi	r2,r2,6176
   86ac0:	f800283a 	ret

00086ac4 <__smakebuf_r>:
   86ac4:	2880030b 	ldhu	r2,12(r5)
   86ac8:	10c0008c 	andi	r3,r2,2
   86acc:	1800411e 	bne	r3,zero,86bd4 <__smakebuf_r+0x110>
   86ad0:	deffec04 	addi	sp,sp,-80
   86ad4:	dc000f15 	stw	r16,60(sp)
   86ad8:	2821883a 	mov	r16,r5
   86adc:	2940038f 	ldh	r5,14(r5)
   86ae0:	dc401015 	stw	r17,64(sp)
   86ae4:	dfc01315 	stw	ra,76(sp)
   86ae8:	dcc01215 	stw	r19,72(sp)
   86aec:	dc801115 	stw	r18,68(sp)
   86af0:	2023883a 	mov	r17,r4
   86af4:	28001c16 	blt	r5,zero,86b68 <__smakebuf_r+0xa4>
   86af8:	d80d883a 	mov	r6,sp
   86afc:	008ac480 	call	8ac48 <_fstat_r>
   86b00:	10001816 	blt	r2,zero,86b64 <__smakebuf_r+0xa0>
   86b04:	d8800117 	ldw	r2,4(sp)
   86b08:	00e00014 	movui	r3,32768
   86b0c:	10bc000c 	andi	r2,r2,61440
   86b10:	14c80020 	cmpeqi	r19,r2,8192
   86b14:	10c03726 	beq	r2,r3,86bf4 <__smakebuf_r+0x130>
   86b18:	80c0030b 	ldhu	r3,12(r16)
   86b1c:	18c20014 	ori	r3,r3,2048
   86b20:	80c0030d 	sth	r3,12(r16)
   86b24:	00c80004 	movi	r3,8192
   86b28:	10c0521e 	bne	r2,r3,86c74 <__smakebuf_r+0x1b0>
   86b2c:	8140038f 	ldh	r5,14(r16)
   86b30:	8809883a 	mov	r4,r17
   86b34:	008aca40 	call	8aca4 <_isatty_r>
   86b38:	10004c26 	beq	r2,zero,86c6c <__smakebuf_r+0x1a8>
   86b3c:	8080030b 	ldhu	r2,12(r16)
   86b40:	80c010c4 	addi	r3,r16,67
   86b44:	80c00015 	stw	r3,0(r16)
   86b48:	10800054 	ori	r2,r2,1
   86b4c:	8080030d 	sth	r2,12(r16)
   86b50:	00800044 	movi	r2,1
   86b54:	80c00415 	stw	r3,16(r16)
   86b58:	80800515 	stw	r2,20(r16)
   86b5c:	04810004 	movi	r18,1024
   86b60:	00000706 	br	86b80 <__smakebuf_r+0xbc>
   86b64:	8080030b 	ldhu	r2,12(r16)
   86b68:	10c0200c 	andi	r3,r2,128
   86b6c:	18001f1e 	bne	r3,zero,86bec <__smakebuf_r+0x128>
   86b70:	04810004 	movi	r18,1024
   86b74:	10820014 	ori	r2,r2,2048
   86b78:	8080030d 	sth	r2,12(r16)
   86b7c:	0027883a 	mov	r19,zero
   86b80:	900b883a 	mov	r5,r18
   86b84:	8809883a 	mov	r4,r17
   86b88:	0086c800 	call	86c80 <_malloc_r>
   86b8c:	10002c26 	beq	r2,zero,86c40 <__smakebuf_r+0x17c>
   86b90:	80c0030b 	ldhu	r3,12(r16)
   86b94:	01000234 	movhi	r4,8
   86b98:	2116df04 	addi	r4,r4,23420
   86b9c:	89000f15 	stw	r4,60(r17)
   86ba0:	18c02014 	ori	r3,r3,128
   86ba4:	80c0030d 	sth	r3,12(r16)
   86ba8:	80800015 	stw	r2,0(r16)
   86bac:	80800415 	stw	r2,16(r16)
   86bb0:	84800515 	stw	r18,20(r16)
   86bb4:	98001a1e 	bne	r19,zero,86c20 <__smakebuf_r+0x15c>
   86bb8:	dfc01317 	ldw	ra,76(sp)
   86bbc:	dcc01217 	ldw	r19,72(sp)
   86bc0:	dc801117 	ldw	r18,68(sp)
   86bc4:	dc401017 	ldw	r17,64(sp)
   86bc8:	dc000f17 	ldw	r16,60(sp)
   86bcc:	dec01404 	addi	sp,sp,80
   86bd0:	f800283a 	ret
   86bd4:	288010c4 	addi	r2,r5,67
   86bd8:	28800015 	stw	r2,0(r5)
   86bdc:	28800415 	stw	r2,16(r5)
   86be0:	00800044 	movi	r2,1
   86be4:	28800515 	stw	r2,20(r5)
   86be8:	f800283a 	ret
   86bec:	04801004 	movi	r18,64
   86bf0:	003fe006 	br	86b74 <__alt_data_end+0xfffa50f4>
   86bf4:	81000a17 	ldw	r4,40(r16)
   86bf8:	00c00274 	movhi	r3,9
   86bfc:	18e40f04 	addi	r3,r3,-28612
   86c00:	20ffc51e 	bne	r4,r3,86b18 <__alt_data_end+0xfffa5098>
   86c04:	8080030b 	ldhu	r2,12(r16)
   86c08:	04810004 	movi	r18,1024
   86c0c:	84801315 	stw	r18,76(r16)
   86c10:	1484b03a 	or	r2,r2,r18
   86c14:	8080030d 	sth	r2,12(r16)
   86c18:	0027883a 	mov	r19,zero
   86c1c:	003fd806 	br	86b80 <__alt_data_end+0xfffa5100>
   86c20:	8140038f 	ldh	r5,14(r16)
   86c24:	8809883a 	mov	r4,r17
   86c28:	008aca40 	call	8aca4 <_isatty_r>
   86c2c:	103fe226 	beq	r2,zero,86bb8 <__alt_data_end+0xfffa5138>
   86c30:	8080030b 	ldhu	r2,12(r16)
   86c34:	10800054 	ori	r2,r2,1
   86c38:	8080030d 	sth	r2,12(r16)
   86c3c:	003fde06 	br	86bb8 <__alt_data_end+0xfffa5138>
   86c40:	8080030b 	ldhu	r2,12(r16)
   86c44:	10c0800c 	andi	r3,r2,512
   86c48:	183fdb1e 	bne	r3,zero,86bb8 <__alt_data_end+0xfffa5138>
   86c4c:	10800094 	ori	r2,r2,2
   86c50:	80c010c4 	addi	r3,r16,67
   86c54:	8080030d 	sth	r2,12(r16)
   86c58:	00800044 	movi	r2,1
   86c5c:	80c00015 	stw	r3,0(r16)
   86c60:	80c00415 	stw	r3,16(r16)
   86c64:	80800515 	stw	r2,20(r16)
   86c68:	003fd306 	br	86bb8 <__alt_data_end+0xfffa5138>
   86c6c:	04810004 	movi	r18,1024
   86c70:	003fc306 	br	86b80 <__alt_data_end+0xfffa5100>
   86c74:	0027883a 	mov	r19,zero
   86c78:	04810004 	movi	r18,1024
   86c7c:	003fc006 	br	86b80 <__alt_data_end+0xfffa5100>

00086c80 <_malloc_r>:
   86c80:	defff504 	addi	sp,sp,-44
   86c84:	dc800315 	stw	r18,12(sp)
   86c88:	dfc00a15 	stw	ra,40(sp)
   86c8c:	df000915 	stw	fp,36(sp)
   86c90:	ddc00815 	stw	r23,32(sp)
   86c94:	dd800715 	stw	r22,28(sp)
   86c98:	dd400615 	stw	r21,24(sp)
   86c9c:	dd000515 	stw	r20,20(sp)
   86ca0:	dcc00415 	stw	r19,16(sp)
   86ca4:	dc400215 	stw	r17,8(sp)
   86ca8:	dc000115 	stw	r16,4(sp)
   86cac:	288002c4 	addi	r2,r5,11
   86cb0:	00c00584 	movi	r3,22
   86cb4:	2025883a 	mov	r18,r4
   86cb8:	18807f2e 	bgeu	r3,r2,86eb8 <_malloc_r+0x238>
   86cbc:	047ffe04 	movi	r17,-8
   86cc0:	1462703a 	and	r17,r2,r17
   86cc4:	8800a316 	blt	r17,zero,86f54 <_malloc_r+0x2d4>
   86cc8:	8940a236 	bltu	r17,r5,86f54 <_malloc_r+0x2d4>
   86ccc:	008ee000 	call	8ee00 <__malloc_lock>
   86cd0:	00807dc4 	movi	r2,503
   86cd4:	1441e92e 	bgeu	r2,r17,8747c <_malloc_r+0x7fc>
   86cd8:	8804d27a 	srli	r2,r17,9
   86cdc:	1000a126 	beq	r2,zero,86f64 <_malloc_r+0x2e4>
   86ce0:	00c00104 	movi	r3,4
   86ce4:	18811e36 	bltu	r3,r2,87160 <_malloc_r+0x4e0>
   86ce8:	8804d1ba 	srli	r2,r17,6
   86cec:	12000e44 	addi	r8,r2,57
   86cf0:	11c00e04 	addi	r7,r2,56
   86cf4:	4209883a 	add	r4,r8,r8
   86cf8:	04c00274 	movhi	r19,9
   86cfc:	2109883a 	add	r4,r4,r4
   86d00:	9cc61604 	addi	r19,r19,6232
   86d04:	2109883a 	add	r4,r4,r4
   86d08:	9909883a 	add	r4,r19,r4
   86d0c:	24000117 	ldw	r16,4(r4)
   86d10:	213ffe04 	addi	r4,r4,-8
   86d14:	24009726 	beq	r4,r16,86f74 <_malloc_r+0x2f4>
   86d18:	80800117 	ldw	r2,4(r16)
   86d1c:	01bfff04 	movi	r6,-4
   86d20:	014003c4 	movi	r5,15
   86d24:	1184703a 	and	r2,r2,r6
   86d28:	1447c83a 	sub	r3,r2,r17
   86d2c:	28c00716 	blt	r5,r3,86d4c <_malloc_r+0xcc>
   86d30:	1800920e 	bge	r3,zero,86f7c <_malloc_r+0x2fc>
   86d34:	84000317 	ldw	r16,12(r16)
   86d38:	24008e26 	beq	r4,r16,86f74 <_malloc_r+0x2f4>
   86d3c:	80800117 	ldw	r2,4(r16)
   86d40:	1184703a 	and	r2,r2,r6
   86d44:	1447c83a 	sub	r3,r2,r17
   86d48:	28fff90e 	bge	r5,r3,86d30 <__alt_data_end+0xfffa52b0>
   86d4c:	3809883a 	mov	r4,r7
   86d50:	01800274 	movhi	r6,9
   86d54:	9c000417 	ldw	r16,16(r19)
   86d58:	31861604 	addi	r6,r6,6232
   86d5c:	32000204 	addi	r8,r6,8
   86d60:	82013426 	beq	r16,r8,87234 <_malloc_r+0x5b4>
   86d64:	80c00117 	ldw	r3,4(r16)
   86d68:	00bfff04 	movi	r2,-4
   86d6c:	188e703a 	and	r7,r3,r2
   86d70:	3c45c83a 	sub	r2,r7,r17
   86d74:	00c003c4 	movi	r3,15
   86d78:	18811f16 	blt	r3,r2,871f8 <_malloc_r+0x578>
   86d7c:	32000515 	stw	r8,20(r6)
   86d80:	32000415 	stw	r8,16(r6)
   86d84:	10007f0e 	bge	r2,zero,86f84 <_malloc_r+0x304>
   86d88:	00807fc4 	movi	r2,511
   86d8c:	11c0fd36 	bltu	r2,r7,87184 <_malloc_r+0x504>
   86d90:	3806d0fa 	srli	r3,r7,3
   86d94:	01c00044 	movi	r7,1
   86d98:	30800117 	ldw	r2,4(r6)
   86d9c:	19400044 	addi	r5,r3,1
   86da0:	294b883a 	add	r5,r5,r5
   86da4:	1807d0ba 	srai	r3,r3,2
   86da8:	294b883a 	add	r5,r5,r5
   86dac:	294b883a 	add	r5,r5,r5
   86db0:	298b883a 	add	r5,r5,r6
   86db4:	38c6983a 	sll	r3,r7,r3
   86db8:	29c00017 	ldw	r7,0(r5)
   86dbc:	2a7ffe04 	addi	r9,r5,-8
   86dc0:	1886b03a 	or	r3,r3,r2
   86dc4:	82400315 	stw	r9,12(r16)
   86dc8:	81c00215 	stw	r7,8(r16)
   86dcc:	30c00115 	stw	r3,4(r6)
   86dd0:	2c000015 	stw	r16,0(r5)
   86dd4:	3c000315 	stw	r16,12(r7)
   86dd8:	2005d0ba 	srai	r2,r4,2
   86ddc:	01400044 	movi	r5,1
   86de0:	288a983a 	sll	r5,r5,r2
   86de4:	19406f36 	bltu	r3,r5,86fa4 <_malloc_r+0x324>
   86de8:	28c4703a 	and	r2,r5,r3
   86dec:	10000a1e 	bne	r2,zero,86e18 <_malloc_r+0x198>
   86df0:	00bfff04 	movi	r2,-4
   86df4:	294b883a 	add	r5,r5,r5
   86df8:	2088703a 	and	r4,r4,r2
   86dfc:	28c4703a 	and	r2,r5,r3
   86e00:	21000104 	addi	r4,r4,4
   86e04:	1000041e 	bne	r2,zero,86e18 <_malloc_r+0x198>
   86e08:	294b883a 	add	r5,r5,r5
   86e0c:	28c4703a 	and	r2,r5,r3
   86e10:	21000104 	addi	r4,r4,4
   86e14:	103ffc26 	beq	r2,zero,86e08 <__alt_data_end+0xfffa5388>
   86e18:	02bfff04 	movi	r10,-4
   86e1c:	024003c4 	movi	r9,15
   86e20:	21800044 	addi	r6,r4,1
   86e24:	318d883a 	add	r6,r6,r6
   86e28:	318d883a 	add	r6,r6,r6
   86e2c:	318d883a 	add	r6,r6,r6
   86e30:	998d883a 	add	r6,r19,r6
   86e34:	333ffe04 	addi	r12,r6,-8
   86e38:	2017883a 	mov	r11,r4
   86e3c:	31800104 	addi	r6,r6,4
   86e40:	34000017 	ldw	r16,0(r6)
   86e44:	31fffd04 	addi	r7,r6,-12
   86e48:	81c0041e 	bne	r16,r7,86e5c <_malloc_r+0x1dc>
   86e4c:	0000fb06 	br	8723c <_malloc_r+0x5bc>
   86e50:	1801030e 	bge	r3,zero,87260 <_malloc_r+0x5e0>
   86e54:	84000317 	ldw	r16,12(r16)
   86e58:	81c0f826 	beq	r16,r7,8723c <_malloc_r+0x5bc>
   86e5c:	80800117 	ldw	r2,4(r16)
   86e60:	1284703a 	and	r2,r2,r10
   86e64:	1447c83a 	sub	r3,r2,r17
   86e68:	48fff90e 	bge	r9,r3,86e50 <__alt_data_end+0xfffa53d0>
   86e6c:	80800317 	ldw	r2,12(r16)
   86e70:	81000217 	ldw	r4,8(r16)
   86e74:	89400054 	ori	r5,r17,1
   86e78:	81400115 	stw	r5,4(r16)
   86e7c:	20800315 	stw	r2,12(r4)
   86e80:	11000215 	stw	r4,8(r2)
   86e84:	8463883a 	add	r17,r16,r17
   86e88:	9c400515 	stw	r17,20(r19)
   86e8c:	9c400415 	stw	r17,16(r19)
   86e90:	18800054 	ori	r2,r3,1
   86e94:	88800115 	stw	r2,4(r17)
   86e98:	8a000315 	stw	r8,12(r17)
   86e9c:	8a000215 	stw	r8,8(r17)
   86ea0:	88e3883a 	add	r17,r17,r3
   86ea4:	88c00015 	stw	r3,0(r17)
   86ea8:	9009883a 	mov	r4,r18
   86eac:	008ee240 	call	8ee24 <__malloc_unlock>
   86eb0:	80800204 	addi	r2,r16,8
   86eb4:	00001b06 	br	86f24 <_malloc_r+0x2a4>
   86eb8:	04400404 	movi	r17,16
   86ebc:	89402536 	bltu	r17,r5,86f54 <_malloc_r+0x2d4>
   86ec0:	008ee000 	call	8ee00 <__malloc_lock>
   86ec4:	00800184 	movi	r2,6
   86ec8:	01000084 	movi	r4,2
   86ecc:	04c00274 	movhi	r19,9
   86ed0:	1085883a 	add	r2,r2,r2
   86ed4:	9cc61604 	addi	r19,r19,6232
   86ed8:	1085883a 	add	r2,r2,r2
   86edc:	9885883a 	add	r2,r19,r2
   86ee0:	14000117 	ldw	r16,4(r2)
   86ee4:	10fffe04 	addi	r3,r2,-8
   86ee8:	80c0d926 	beq	r16,r3,87250 <_malloc_r+0x5d0>
   86eec:	80c00117 	ldw	r3,4(r16)
   86ef0:	81000317 	ldw	r4,12(r16)
   86ef4:	00bfff04 	movi	r2,-4
   86ef8:	1884703a 	and	r2,r3,r2
   86efc:	81400217 	ldw	r5,8(r16)
   86f00:	8085883a 	add	r2,r16,r2
   86f04:	10c00117 	ldw	r3,4(r2)
   86f08:	29000315 	stw	r4,12(r5)
   86f0c:	21400215 	stw	r5,8(r4)
   86f10:	18c00054 	ori	r3,r3,1
   86f14:	10c00115 	stw	r3,4(r2)
   86f18:	9009883a 	mov	r4,r18
   86f1c:	008ee240 	call	8ee24 <__malloc_unlock>
   86f20:	80800204 	addi	r2,r16,8
   86f24:	dfc00a17 	ldw	ra,40(sp)
   86f28:	df000917 	ldw	fp,36(sp)
   86f2c:	ddc00817 	ldw	r23,32(sp)
   86f30:	dd800717 	ldw	r22,28(sp)
   86f34:	dd400617 	ldw	r21,24(sp)
   86f38:	dd000517 	ldw	r20,20(sp)
   86f3c:	dcc00417 	ldw	r19,16(sp)
   86f40:	dc800317 	ldw	r18,12(sp)
   86f44:	dc400217 	ldw	r17,8(sp)
   86f48:	dc000117 	ldw	r16,4(sp)
   86f4c:	dec00b04 	addi	sp,sp,44
   86f50:	f800283a 	ret
   86f54:	00800304 	movi	r2,12
   86f58:	90800015 	stw	r2,0(r18)
   86f5c:	0005883a 	mov	r2,zero
   86f60:	003ff006 	br	86f24 <__alt_data_end+0xfffa54a4>
   86f64:	01002004 	movi	r4,128
   86f68:	02001004 	movi	r8,64
   86f6c:	01c00fc4 	movi	r7,63
   86f70:	003f6106 	br	86cf8 <__alt_data_end+0xfffa5278>
   86f74:	4009883a 	mov	r4,r8
   86f78:	003f7506 	br	86d50 <__alt_data_end+0xfffa52d0>
   86f7c:	81000317 	ldw	r4,12(r16)
   86f80:	003fde06 	br	86efc <__alt_data_end+0xfffa547c>
   86f84:	81c5883a 	add	r2,r16,r7
   86f88:	11400117 	ldw	r5,4(r2)
   86f8c:	9009883a 	mov	r4,r18
   86f90:	29400054 	ori	r5,r5,1
   86f94:	11400115 	stw	r5,4(r2)
   86f98:	008ee240 	call	8ee24 <__malloc_unlock>
   86f9c:	80800204 	addi	r2,r16,8
   86fa0:	003fe006 	br	86f24 <__alt_data_end+0xfffa54a4>
   86fa4:	9c000217 	ldw	r16,8(r19)
   86fa8:	00bfff04 	movi	r2,-4
   86fac:	85800117 	ldw	r22,4(r16)
   86fb0:	b0ac703a 	and	r22,r22,r2
   86fb4:	b4400336 	bltu	r22,r17,86fc4 <_malloc_r+0x344>
   86fb8:	b445c83a 	sub	r2,r22,r17
   86fbc:	00c003c4 	movi	r3,15
   86fc0:	18805d16 	blt	r3,r2,87138 <_malloc_r+0x4b8>
   86fc4:	05c00274 	movhi	r23,9
   86fc8:	00800274 	movhi	r2,9
   86fcc:	1092f304 	addi	r2,r2,19404
   86fd0:	bdcb9d04 	addi	r23,r23,11892
   86fd4:	15400017 	ldw	r21,0(r2)
   86fd8:	b8c00017 	ldw	r3,0(r23)
   86fdc:	00bfffc4 	movi	r2,-1
   86fe0:	858d883a 	add	r6,r16,r22
   86fe4:	8d6b883a 	add	r21,r17,r21
   86fe8:	1880ea26 	beq	r3,r2,87394 <_malloc_r+0x714>
   86fec:	ad4403c4 	addi	r21,r21,4111
   86ff0:	00bc0004 	movi	r2,-4096
   86ff4:	a8aa703a 	and	r21,r21,r2
   86ff8:	a80b883a 	mov	r5,r21
   86ffc:	9009883a 	mov	r4,r18
   87000:	d9800015 	stw	r6,0(sp)
   87004:	0088f100 	call	88f10 <_sbrk_r>
   87008:	1029883a 	mov	r20,r2
   8700c:	00bfffc4 	movi	r2,-1
   87010:	d9800017 	ldw	r6,0(sp)
   87014:	a080e826 	beq	r20,r2,873b8 <_malloc_r+0x738>
   87018:	a180a636 	bltu	r20,r6,872b4 <_malloc_r+0x634>
   8701c:	07000274 	movhi	fp,9
   87020:	e7133b04 	addi	fp,fp,19692
   87024:	e0800017 	ldw	r2,0(fp)
   87028:	a887883a 	add	r3,r21,r2
   8702c:	e0c00015 	stw	r3,0(fp)
   87030:	3500e626 	beq	r6,r20,873cc <_malloc_r+0x74c>
   87034:	b9000017 	ldw	r4,0(r23)
   87038:	00bfffc4 	movi	r2,-1
   8703c:	2080ee26 	beq	r4,r2,873f8 <_malloc_r+0x778>
   87040:	a185c83a 	sub	r2,r20,r6
   87044:	10c5883a 	add	r2,r2,r3
   87048:	e0800015 	stw	r2,0(fp)
   8704c:	a0c001cc 	andi	r3,r20,7
   87050:	1800bc26 	beq	r3,zero,87344 <_malloc_r+0x6c4>
   87054:	a0e9c83a 	sub	r20,r20,r3
   87058:	00840204 	movi	r2,4104
   8705c:	a5000204 	addi	r20,r20,8
   87060:	10c7c83a 	sub	r3,r2,r3
   87064:	a545883a 	add	r2,r20,r21
   87068:	1083ffcc 	andi	r2,r2,4095
   8706c:	18abc83a 	sub	r21,r3,r2
   87070:	a80b883a 	mov	r5,r21
   87074:	9009883a 	mov	r4,r18
   87078:	0088f100 	call	88f10 <_sbrk_r>
   8707c:	00ffffc4 	movi	r3,-1
   87080:	10c0e126 	beq	r2,r3,87408 <_malloc_r+0x788>
   87084:	1505c83a 	sub	r2,r2,r20
   87088:	1545883a 	add	r2,r2,r21
   8708c:	10800054 	ori	r2,r2,1
   87090:	e0c00017 	ldw	r3,0(fp)
   87094:	9d000215 	stw	r20,8(r19)
   87098:	a0800115 	stw	r2,4(r20)
   8709c:	a8c7883a 	add	r3,r21,r3
   870a0:	e0c00015 	stw	r3,0(fp)
   870a4:	84c00e26 	beq	r16,r19,870e0 <_malloc_r+0x460>
   870a8:	018003c4 	movi	r6,15
   870ac:	3580a72e 	bgeu	r6,r22,8734c <_malloc_r+0x6cc>
   870b0:	81400117 	ldw	r5,4(r16)
   870b4:	013ffe04 	movi	r4,-8
   870b8:	b0bffd04 	addi	r2,r22,-12
   870bc:	1104703a 	and	r2,r2,r4
   870c0:	2900004c 	andi	r4,r5,1
   870c4:	2088b03a 	or	r4,r4,r2
   870c8:	81000115 	stw	r4,4(r16)
   870cc:	01400144 	movi	r5,5
   870d0:	8089883a 	add	r4,r16,r2
   870d4:	21400115 	stw	r5,4(r4)
   870d8:	21400215 	stw	r5,8(r4)
   870dc:	3080cd36 	bltu	r6,r2,87414 <_malloc_r+0x794>
   870e0:	00800274 	movhi	r2,9
   870e4:	1092f204 	addi	r2,r2,19400
   870e8:	11000017 	ldw	r4,0(r2)
   870ec:	20c0012e 	bgeu	r4,r3,870f4 <_malloc_r+0x474>
   870f0:	10c00015 	stw	r3,0(r2)
   870f4:	00800274 	movhi	r2,9
   870f8:	1092f104 	addi	r2,r2,19396
   870fc:	11000017 	ldw	r4,0(r2)
   87100:	9c000217 	ldw	r16,8(r19)
   87104:	20c0012e 	bgeu	r4,r3,8710c <_malloc_r+0x48c>
   87108:	10c00015 	stw	r3,0(r2)
   8710c:	80c00117 	ldw	r3,4(r16)
   87110:	00bfff04 	movi	r2,-4
   87114:	1886703a 	and	r3,r3,r2
   87118:	1c45c83a 	sub	r2,r3,r17
   8711c:	1c400236 	bltu	r3,r17,87128 <_malloc_r+0x4a8>
   87120:	00c003c4 	movi	r3,15
   87124:	18800416 	blt	r3,r2,87138 <_malloc_r+0x4b8>
   87128:	9009883a 	mov	r4,r18
   8712c:	008ee240 	call	8ee24 <__malloc_unlock>
   87130:	0005883a 	mov	r2,zero
   87134:	003f7b06 	br	86f24 <__alt_data_end+0xfffa54a4>
   87138:	88c00054 	ori	r3,r17,1
   8713c:	80c00115 	stw	r3,4(r16)
   87140:	8463883a 	add	r17,r16,r17
   87144:	10800054 	ori	r2,r2,1
   87148:	9c400215 	stw	r17,8(r19)
   8714c:	88800115 	stw	r2,4(r17)
   87150:	9009883a 	mov	r4,r18
   87154:	008ee240 	call	8ee24 <__malloc_unlock>
   87158:	80800204 	addi	r2,r16,8
   8715c:	003f7106 	br	86f24 <__alt_data_end+0xfffa54a4>
   87160:	00c00504 	movi	r3,20
   87164:	18804a2e 	bgeu	r3,r2,87290 <_malloc_r+0x610>
   87168:	00c01504 	movi	r3,84
   8716c:	18806e36 	bltu	r3,r2,87328 <_malloc_r+0x6a8>
   87170:	8804d33a 	srli	r2,r17,12
   87174:	12001bc4 	addi	r8,r2,111
   87178:	11c01b84 	addi	r7,r2,110
   8717c:	4209883a 	add	r4,r8,r8
   87180:	003edd06 	br	86cf8 <__alt_data_end+0xfffa5278>
   87184:	3804d27a 	srli	r2,r7,9
   87188:	00c00104 	movi	r3,4
   8718c:	1880442e 	bgeu	r3,r2,872a0 <_malloc_r+0x620>
   87190:	00c00504 	movi	r3,20
   87194:	18808136 	bltu	r3,r2,8739c <_malloc_r+0x71c>
   87198:	11401704 	addi	r5,r2,92
   8719c:	10c016c4 	addi	r3,r2,91
   871a0:	294b883a 	add	r5,r5,r5
   871a4:	294b883a 	add	r5,r5,r5
   871a8:	294b883a 	add	r5,r5,r5
   871ac:	994b883a 	add	r5,r19,r5
   871b0:	28800017 	ldw	r2,0(r5)
   871b4:	01800274 	movhi	r6,9
   871b8:	297ffe04 	addi	r5,r5,-8
   871bc:	31861604 	addi	r6,r6,6232
   871c0:	28806526 	beq	r5,r2,87358 <_malloc_r+0x6d8>
   871c4:	01bfff04 	movi	r6,-4
   871c8:	10c00117 	ldw	r3,4(r2)
   871cc:	1986703a 	and	r3,r3,r6
   871d0:	38c0022e 	bgeu	r7,r3,871dc <_malloc_r+0x55c>
   871d4:	10800217 	ldw	r2,8(r2)
   871d8:	28bffb1e 	bne	r5,r2,871c8 <__alt_data_end+0xfffa5748>
   871dc:	11400317 	ldw	r5,12(r2)
   871e0:	98c00117 	ldw	r3,4(r19)
   871e4:	81400315 	stw	r5,12(r16)
   871e8:	80800215 	stw	r2,8(r16)
   871ec:	2c000215 	stw	r16,8(r5)
   871f0:	14000315 	stw	r16,12(r2)
   871f4:	003ef806 	br	86dd8 <__alt_data_end+0xfffa5358>
   871f8:	88c00054 	ori	r3,r17,1
   871fc:	80c00115 	stw	r3,4(r16)
   87200:	8463883a 	add	r17,r16,r17
   87204:	34400515 	stw	r17,20(r6)
   87208:	34400415 	stw	r17,16(r6)
   8720c:	10c00054 	ori	r3,r2,1
   87210:	8a000315 	stw	r8,12(r17)
   87214:	8a000215 	stw	r8,8(r17)
   87218:	88c00115 	stw	r3,4(r17)
   8721c:	88a3883a 	add	r17,r17,r2
   87220:	88800015 	stw	r2,0(r17)
   87224:	9009883a 	mov	r4,r18
   87228:	008ee240 	call	8ee24 <__malloc_unlock>
   8722c:	80800204 	addi	r2,r16,8
   87230:	003f3c06 	br	86f24 <__alt_data_end+0xfffa54a4>
   87234:	30c00117 	ldw	r3,4(r6)
   87238:	003ee706 	br	86dd8 <__alt_data_end+0xfffa5358>
   8723c:	5ac00044 	addi	r11,r11,1
   87240:	588000cc 	andi	r2,r11,3
   87244:	31800204 	addi	r6,r6,8
   87248:	103efd1e 	bne	r2,zero,86e40 <__alt_data_end+0xfffa53c0>
   8724c:	00002406 	br	872e0 <_malloc_r+0x660>
   87250:	14000317 	ldw	r16,12(r2)
   87254:	143f251e 	bne	r2,r16,86eec <__alt_data_end+0xfffa546c>
   87258:	21000084 	addi	r4,r4,2
   8725c:	003ebc06 	br	86d50 <__alt_data_end+0xfffa52d0>
   87260:	8085883a 	add	r2,r16,r2
   87264:	10c00117 	ldw	r3,4(r2)
   87268:	81000317 	ldw	r4,12(r16)
   8726c:	81400217 	ldw	r5,8(r16)
   87270:	18c00054 	ori	r3,r3,1
   87274:	10c00115 	stw	r3,4(r2)
   87278:	29000315 	stw	r4,12(r5)
   8727c:	21400215 	stw	r5,8(r4)
   87280:	9009883a 	mov	r4,r18
   87284:	008ee240 	call	8ee24 <__malloc_unlock>
   87288:	80800204 	addi	r2,r16,8
   8728c:	003f2506 	br	86f24 <__alt_data_end+0xfffa54a4>
   87290:	12001704 	addi	r8,r2,92
   87294:	11c016c4 	addi	r7,r2,91
   87298:	4209883a 	add	r4,r8,r8
   8729c:	003e9606 	br	86cf8 <__alt_data_end+0xfffa5278>
   872a0:	3804d1ba 	srli	r2,r7,6
   872a4:	11400e44 	addi	r5,r2,57
   872a8:	10c00e04 	addi	r3,r2,56
   872ac:	294b883a 	add	r5,r5,r5
   872b0:	003fbc06 	br	871a4 <__alt_data_end+0xfffa5724>
   872b4:	84ff5926 	beq	r16,r19,8701c <__alt_data_end+0xfffa559c>
   872b8:	00800274 	movhi	r2,9
   872bc:	10861604 	addi	r2,r2,6232
   872c0:	14000217 	ldw	r16,8(r2)
   872c4:	00bfff04 	movi	r2,-4
   872c8:	80c00117 	ldw	r3,4(r16)
   872cc:	1886703a 	and	r3,r3,r2
   872d0:	003f9106 	br	87118 <__alt_data_end+0xfffa5698>
   872d4:	60800217 	ldw	r2,8(r12)
   872d8:	213fffc4 	addi	r4,r4,-1
   872dc:	1300651e 	bne	r2,r12,87474 <_malloc_r+0x7f4>
   872e0:	208000cc 	andi	r2,r4,3
   872e4:	633ffe04 	addi	r12,r12,-8
   872e8:	103ffa1e 	bne	r2,zero,872d4 <__alt_data_end+0xfffa5854>
   872ec:	98800117 	ldw	r2,4(r19)
   872f0:	0146303a 	nor	r3,zero,r5
   872f4:	1884703a 	and	r2,r3,r2
   872f8:	98800115 	stw	r2,4(r19)
   872fc:	294b883a 	add	r5,r5,r5
   87300:	117f2836 	bltu	r2,r5,86fa4 <__alt_data_end+0xfffa5524>
   87304:	283f2726 	beq	r5,zero,86fa4 <__alt_data_end+0xfffa5524>
   87308:	2886703a 	and	r3,r5,r2
   8730c:	5809883a 	mov	r4,r11
   87310:	183ec31e 	bne	r3,zero,86e20 <__alt_data_end+0xfffa53a0>
   87314:	294b883a 	add	r5,r5,r5
   87318:	2886703a 	and	r3,r5,r2
   8731c:	21000104 	addi	r4,r4,4
   87320:	183ffc26 	beq	r3,zero,87314 <__alt_data_end+0xfffa5894>
   87324:	003ebe06 	br	86e20 <__alt_data_end+0xfffa53a0>
   87328:	00c05504 	movi	r3,340
   8732c:	18801236 	bltu	r3,r2,87378 <_malloc_r+0x6f8>
   87330:	8804d3fa 	srli	r2,r17,15
   87334:	12001e04 	addi	r8,r2,120
   87338:	11c01dc4 	addi	r7,r2,119
   8733c:	4209883a 	add	r4,r8,r8
   87340:	003e6d06 	br	86cf8 <__alt_data_end+0xfffa5278>
   87344:	00c40004 	movi	r3,4096
   87348:	003f4606 	br	87064 <__alt_data_end+0xfffa55e4>
   8734c:	00800044 	movi	r2,1
   87350:	a0800115 	stw	r2,4(r20)
   87354:	003f7406 	br	87128 <__alt_data_end+0xfffa56a8>
   87358:	1805d0ba 	srai	r2,r3,2
   8735c:	01c00044 	movi	r7,1
   87360:	30c00117 	ldw	r3,4(r6)
   87364:	388e983a 	sll	r7,r7,r2
   87368:	2805883a 	mov	r2,r5
   8736c:	38c6b03a 	or	r3,r7,r3
   87370:	30c00115 	stw	r3,4(r6)
   87374:	003f9b06 	br	871e4 <__alt_data_end+0xfffa5764>
   87378:	00c15504 	movi	r3,1364
   8737c:	18801a36 	bltu	r3,r2,873e8 <_malloc_r+0x768>
   87380:	8804d4ba 	srli	r2,r17,18
   87384:	12001f44 	addi	r8,r2,125
   87388:	11c01f04 	addi	r7,r2,124
   8738c:	4209883a 	add	r4,r8,r8
   87390:	003e5906 	br	86cf8 <__alt_data_end+0xfffa5278>
   87394:	ad400404 	addi	r21,r21,16
   87398:	003f1706 	br	86ff8 <__alt_data_end+0xfffa5578>
   8739c:	00c01504 	movi	r3,84
   873a0:	18802336 	bltu	r3,r2,87430 <_malloc_r+0x7b0>
   873a4:	3804d33a 	srli	r2,r7,12
   873a8:	11401bc4 	addi	r5,r2,111
   873ac:	10c01b84 	addi	r3,r2,110
   873b0:	294b883a 	add	r5,r5,r5
   873b4:	003f7b06 	br	871a4 <__alt_data_end+0xfffa5724>
   873b8:	9c000217 	ldw	r16,8(r19)
   873bc:	00bfff04 	movi	r2,-4
   873c0:	80c00117 	ldw	r3,4(r16)
   873c4:	1886703a 	and	r3,r3,r2
   873c8:	003f5306 	br	87118 <__alt_data_end+0xfffa5698>
   873cc:	3083ffcc 	andi	r2,r6,4095
   873d0:	103f181e 	bne	r2,zero,87034 <__alt_data_end+0xfffa55b4>
   873d4:	99000217 	ldw	r4,8(r19)
   873d8:	b545883a 	add	r2,r22,r21
   873dc:	10800054 	ori	r2,r2,1
   873e0:	20800115 	stw	r2,4(r4)
   873e4:	003f3e06 	br	870e0 <__alt_data_end+0xfffa5660>
   873e8:	01003f84 	movi	r4,254
   873ec:	02001fc4 	movi	r8,127
   873f0:	01c01f84 	movi	r7,126
   873f4:	003e4006 	br	86cf8 <__alt_data_end+0xfffa5278>
   873f8:	00800274 	movhi	r2,9
   873fc:	108b9d04 	addi	r2,r2,11892
   87400:	15000015 	stw	r20,0(r2)
   87404:	003f1106 	br	8704c <__alt_data_end+0xfffa55cc>
   87408:	00800044 	movi	r2,1
   8740c:	002b883a 	mov	r21,zero
   87410:	003f1f06 	br	87090 <__alt_data_end+0xfffa5610>
   87414:	81400204 	addi	r5,r16,8
   87418:	9009883a 	mov	r4,r18
   8741c:	00860380 	call	86038 <_free_r>
   87420:	00800274 	movhi	r2,9
   87424:	10933b04 	addi	r2,r2,19692
   87428:	10c00017 	ldw	r3,0(r2)
   8742c:	003f2c06 	br	870e0 <__alt_data_end+0xfffa5660>
   87430:	00c05504 	movi	r3,340
   87434:	18800536 	bltu	r3,r2,8744c <_malloc_r+0x7cc>
   87438:	3804d3fa 	srli	r2,r7,15
   8743c:	11401e04 	addi	r5,r2,120
   87440:	10c01dc4 	addi	r3,r2,119
   87444:	294b883a 	add	r5,r5,r5
   87448:	003f5606 	br	871a4 <__alt_data_end+0xfffa5724>
   8744c:	00c15504 	movi	r3,1364
   87450:	18800536 	bltu	r3,r2,87468 <_malloc_r+0x7e8>
   87454:	3804d4ba 	srli	r2,r7,18
   87458:	11401f44 	addi	r5,r2,125
   8745c:	10c01f04 	addi	r3,r2,124
   87460:	294b883a 	add	r5,r5,r5
   87464:	003f4f06 	br	871a4 <__alt_data_end+0xfffa5724>
   87468:	01403f84 	movi	r5,254
   8746c:	00c01f84 	movi	r3,126
   87470:	003f4c06 	br	871a4 <__alt_data_end+0xfffa5724>
   87474:	98800117 	ldw	r2,4(r19)
   87478:	003fa006 	br	872fc <__alt_data_end+0xfffa587c>
   8747c:	8808d0fa 	srli	r4,r17,3
   87480:	20800044 	addi	r2,r4,1
   87484:	1085883a 	add	r2,r2,r2
   87488:	003e9006 	br	86ecc <__alt_data_end+0xfffa544c>

0008748c <memchr>:
   8748c:	208000cc 	andi	r2,r4,3
   87490:	280f883a 	mov	r7,r5
   87494:	10003426 	beq	r2,zero,87568 <memchr+0xdc>
   87498:	30bfffc4 	addi	r2,r6,-1
   8749c:	30001a26 	beq	r6,zero,87508 <memchr+0x7c>
   874a0:	20c00003 	ldbu	r3,0(r4)
   874a4:	29803fcc 	andi	r6,r5,255
   874a8:	30c0051e 	bne	r6,r3,874c0 <memchr+0x34>
   874ac:	00001806 	br	87510 <memchr+0x84>
   874b0:	10001526 	beq	r2,zero,87508 <memchr+0x7c>
   874b4:	20c00003 	ldbu	r3,0(r4)
   874b8:	10bfffc4 	addi	r2,r2,-1
   874bc:	30c01426 	beq	r6,r3,87510 <memchr+0x84>
   874c0:	21000044 	addi	r4,r4,1
   874c4:	20c000cc 	andi	r3,r4,3
   874c8:	183ff91e 	bne	r3,zero,874b0 <__alt_data_end+0xfffa5a30>
   874cc:	020000c4 	movi	r8,3
   874d0:	40801136 	bltu	r8,r2,87518 <memchr+0x8c>
   874d4:	10000c26 	beq	r2,zero,87508 <memchr+0x7c>
   874d8:	20c00003 	ldbu	r3,0(r4)
   874dc:	29403fcc 	andi	r5,r5,255
   874e0:	28c00b26 	beq	r5,r3,87510 <memchr+0x84>
   874e4:	20c00044 	addi	r3,r4,1
   874e8:	39803fcc 	andi	r6,r7,255
   874ec:	2089883a 	add	r4,r4,r2
   874f0:	00000306 	br	87500 <memchr+0x74>
   874f4:	18c00044 	addi	r3,r3,1
   874f8:	197fffc3 	ldbu	r5,-1(r3)
   874fc:	31400526 	beq	r6,r5,87514 <memchr+0x88>
   87500:	1805883a 	mov	r2,r3
   87504:	20fffb1e 	bne	r4,r3,874f4 <__alt_data_end+0xfffa5a74>
   87508:	0005883a 	mov	r2,zero
   8750c:	f800283a 	ret
   87510:	2005883a 	mov	r2,r4
   87514:	f800283a 	ret
   87518:	28c03fcc 	andi	r3,r5,255
   8751c:	1812923a 	slli	r9,r3,8
   87520:	02ffbff4 	movhi	r11,65279
   87524:	02a02074 	movhi	r10,32897
   87528:	48d2b03a 	or	r9,r9,r3
   8752c:	4806943a 	slli	r3,r9,16
   87530:	5affbfc4 	addi	r11,r11,-257
   87534:	52a02004 	addi	r10,r10,-32640
   87538:	48d2b03a 	or	r9,r9,r3
   8753c:	20c00017 	ldw	r3,0(r4)
   87540:	48c6f03a 	xor	r3,r9,r3
   87544:	1acd883a 	add	r6,r3,r11
   87548:	00c6303a 	nor	r3,zero,r3
   8754c:	30c6703a 	and	r3,r6,r3
   87550:	1a86703a 	and	r3,r3,r10
   87554:	183fe01e 	bne	r3,zero,874d8 <__alt_data_end+0xfffa5a58>
   87558:	10bfff04 	addi	r2,r2,-4
   8755c:	21000104 	addi	r4,r4,4
   87560:	40bff636 	bltu	r8,r2,8753c <__alt_data_end+0xfffa5abc>
   87564:	003fdb06 	br	874d4 <__alt_data_end+0xfffa5a54>
   87568:	3005883a 	mov	r2,r6
   8756c:	003fd706 	br	874cc <__alt_data_end+0xfffa5a4c>

00087570 <memcpy>:
   87570:	defffd04 	addi	sp,sp,-12
   87574:	dfc00215 	stw	ra,8(sp)
   87578:	dc400115 	stw	r17,4(sp)
   8757c:	dc000015 	stw	r16,0(sp)
   87580:	00c003c4 	movi	r3,15
   87584:	2005883a 	mov	r2,r4
   87588:	1980452e 	bgeu	r3,r6,876a0 <memcpy+0x130>
   8758c:	2906b03a 	or	r3,r5,r4
   87590:	18c000cc 	andi	r3,r3,3
   87594:	1800441e 	bne	r3,zero,876a8 <memcpy+0x138>
   87598:	347ffc04 	addi	r17,r6,-16
   8759c:	8822d13a 	srli	r17,r17,4
   875a0:	28c00104 	addi	r3,r5,4
   875a4:	23400104 	addi	r13,r4,4
   875a8:	8820913a 	slli	r16,r17,4
   875ac:	2b000204 	addi	r12,r5,8
   875b0:	22c00204 	addi	r11,r4,8
   875b4:	84000504 	addi	r16,r16,20
   875b8:	2a800304 	addi	r10,r5,12
   875bc:	22400304 	addi	r9,r4,12
   875c0:	2c21883a 	add	r16,r5,r16
   875c4:	2811883a 	mov	r8,r5
   875c8:	200f883a 	mov	r7,r4
   875cc:	41000017 	ldw	r4,0(r8)
   875d0:	1fc00017 	ldw	ra,0(r3)
   875d4:	63c00017 	ldw	r15,0(r12)
   875d8:	39000015 	stw	r4,0(r7)
   875dc:	53800017 	ldw	r14,0(r10)
   875e0:	6fc00015 	stw	ra,0(r13)
   875e4:	5bc00015 	stw	r15,0(r11)
   875e8:	4b800015 	stw	r14,0(r9)
   875ec:	18c00404 	addi	r3,r3,16
   875f0:	39c00404 	addi	r7,r7,16
   875f4:	42000404 	addi	r8,r8,16
   875f8:	6b400404 	addi	r13,r13,16
   875fc:	63000404 	addi	r12,r12,16
   87600:	5ac00404 	addi	r11,r11,16
   87604:	52800404 	addi	r10,r10,16
   87608:	4a400404 	addi	r9,r9,16
   8760c:	1c3fef1e 	bne	r3,r16,875cc <__alt_data_end+0xfffa5b4c>
   87610:	89c00044 	addi	r7,r17,1
   87614:	380e913a 	slli	r7,r7,4
   87618:	310003cc 	andi	r4,r6,15
   8761c:	02c000c4 	movi	r11,3
   87620:	11c7883a 	add	r3,r2,r7
   87624:	29cb883a 	add	r5,r5,r7
   87628:	5900212e 	bgeu	r11,r4,876b0 <memcpy+0x140>
   8762c:	1813883a 	mov	r9,r3
   87630:	2811883a 	mov	r8,r5
   87634:	200f883a 	mov	r7,r4
   87638:	42800017 	ldw	r10,0(r8)
   8763c:	4a400104 	addi	r9,r9,4
   87640:	39ffff04 	addi	r7,r7,-4
   87644:	4abfff15 	stw	r10,-4(r9)
   87648:	42000104 	addi	r8,r8,4
   8764c:	59fffa36 	bltu	r11,r7,87638 <__alt_data_end+0xfffa5bb8>
   87650:	213fff04 	addi	r4,r4,-4
   87654:	2008d0ba 	srli	r4,r4,2
   87658:	318000cc 	andi	r6,r6,3
   8765c:	21000044 	addi	r4,r4,1
   87660:	2109883a 	add	r4,r4,r4
   87664:	2109883a 	add	r4,r4,r4
   87668:	1907883a 	add	r3,r3,r4
   8766c:	290b883a 	add	r5,r5,r4
   87670:	30000626 	beq	r6,zero,8768c <memcpy+0x11c>
   87674:	198d883a 	add	r6,r3,r6
   87678:	29c00003 	ldbu	r7,0(r5)
   8767c:	18c00044 	addi	r3,r3,1
   87680:	29400044 	addi	r5,r5,1
   87684:	19ffffc5 	stb	r7,-1(r3)
   87688:	19bffb1e 	bne	r3,r6,87678 <__alt_data_end+0xfffa5bf8>
   8768c:	dfc00217 	ldw	ra,8(sp)
   87690:	dc400117 	ldw	r17,4(sp)
   87694:	dc000017 	ldw	r16,0(sp)
   87698:	dec00304 	addi	sp,sp,12
   8769c:	f800283a 	ret
   876a0:	2007883a 	mov	r3,r4
   876a4:	003ff206 	br	87670 <__alt_data_end+0xfffa5bf0>
   876a8:	2007883a 	mov	r3,r4
   876ac:	003ff106 	br	87674 <__alt_data_end+0xfffa5bf4>
   876b0:	200d883a 	mov	r6,r4
   876b4:	003fee06 	br	87670 <__alt_data_end+0xfffa5bf0>

000876b8 <memmove>:
   876b8:	2005883a 	mov	r2,r4
   876bc:	29000b2e 	bgeu	r5,r4,876ec <memmove+0x34>
   876c0:	298f883a 	add	r7,r5,r6
   876c4:	21c0092e 	bgeu	r4,r7,876ec <memmove+0x34>
   876c8:	2187883a 	add	r3,r4,r6
   876cc:	198bc83a 	sub	r5,r3,r6
   876d0:	30004826 	beq	r6,zero,877f4 <memmove+0x13c>
   876d4:	39ffffc4 	addi	r7,r7,-1
   876d8:	39000003 	ldbu	r4,0(r7)
   876dc:	18ffffc4 	addi	r3,r3,-1
   876e0:	19000005 	stb	r4,0(r3)
   876e4:	28fffb1e 	bne	r5,r3,876d4 <__alt_data_end+0xfffa5c54>
   876e8:	f800283a 	ret
   876ec:	00c003c4 	movi	r3,15
   876f0:	1980412e 	bgeu	r3,r6,877f8 <memmove+0x140>
   876f4:	2886b03a 	or	r3,r5,r2
   876f8:	18c000cc 	andi	r3,r3,3
   876fc:	1800401e 	bne	r3,zero,87800 <memmove+0x148>
   87700:	33fffc04 	addi	r15,r6,-16
   87704:	781ed13a 	srli	r15,r15,4
   87708:	28c00104 	addi	r3,r5,4
   8770c:	13400104 	addi	r13,r2,4
   87710:	781c913a 	slli	r14,r15,4
   87714:	2b000204 	addi	r12,r5,8
   87718:	12c00204 	addi	r11,r2,8
   8771c:	73800504 	addi	r14,r14,20
   87720:	2a800304 	addi	r10,r5,12
   87724:	12400304 	addi	r9,r2,12
   87728:	2b9d883a 	add	r14,r5,r14
   8772c:	2811883a 	mov	r8,r5
   87730:	100f883a 	mov	r7,r2
   87734:	41000017 	ldw	r4,0(r8)
   87738:	39c00404 	addi	r7,r7,16
   8773c:	18c00404 	addi	r3,r3,16
   87740:	393ffc15 	stw	r4,-16(r7)
   87744:	193ffc17 	ldw	r4,-16(r3)
   87748:	6b400404 	addi	r13,r13,16
   8774c:	5ac00404 	addi	r11,r11,16
   87750:	693ffc15 	stw	r4,-16(r13)
   87754:	61000017 	ldw	r4,0(r12)
   87758:	4a400404 	addi	r9,r9,16
   8775c:	42000404 	addi	r8,r8,16
   87760:	593ffc15 	stw	r4,-16(r11)
   87764:	51000017 	ldw	r4,0(r10)
   87768:	63000404 	addi	r12,r12,16
   8776c:	52800404 	addi	r10,r10,16
   87770:	493ffc15 	stw	r4,-16(r9)
   87774:	1bbfef1e 	bne	r3,r14,87734 <__alt_data_end+0xfffa5cb4>
   87778:	79000044 	addi	r4,r15,1
   8777c:	2008913a 	slli	r4,r4,4
   87780:	328003cc 	andi	r10,r6,15
   87784:	02c000c4 	movi	r11,3
   87788:	1107883a 	add	r3,r2,r4
   8778c:	290b883a 	add	r5,r5,r4
   87790:	5a801e2e 	bgeu	r11,r10,8780c <memmove+0x154>
   87794:	1813883a 	mov	r9,r3
   87798:	2811883a 	mov	r8,r5
   8779c:	500f883a 	mov	r7,r10
   877a0:	41000017 	ldw	r4,0(r8)
   877a4:	4a400104 	addi	r9,r9,4
   877a8:	39ffff04 	addi	r7,r7,-4
   877ac:	493fff15 	stw	r4,-4(r9)
   877b0:	42000104 	addi	r8,r8,4
   877b4:	59fffa36 	bltu	r11,r7,877a0 <__alt_data_end+0xfffa5d20>
   877b8:	513fff04 	addi	r4,r10,-4
   877bc:	2008d0ba 	srli	r4,r4,2
   877c0:	318000cc 	andi	r6,r6,3
   877c4:	21000044 	addi	r4,r4,1
   877c8:	2109883a 	add	r4,r4,r4
   877cc:	2109883a 	add	r4,r4,r4
   877d0:	1907883a 	add	r3,r3,r4
   877d4:	290b883a 	add	r5,r5,r4
   877d8:	30000b26 	beq	r6,zero,87808 <memmove+0x150>
   877dc:	198d883a 	add	r6,r3,r6
   877e0:	29c00003 	ldbu	r7,0(r5)
   877e4:	18c00044 	addi	r3,r3,1
   877e8:	29400044 	addi	r5,r5,1
   877ec:	19ffffc5 	stb	r7,-1(r3)
   877f0:	19bffb1e 	bne	r3,r6,877e0 <__alt_data_end+0xfffa5d60>
   877f4:	f800283a 	ret
   877f8:	1007883a 	mov	r3,r2
   877fc:	003ff606 	br	877d8 <__alt_data_end+0xfffa5d58>
   87800:	1007883a 	mov	r3,r2
   87804:	003ff506 	br	877dc <__alt_data_end+0xfffa5d5c>
   87808:	f800283a 	ret
   8780c:	500d883a 	mov	r6,r10
   87810:	003ff106 	br	877d8 <__alt_data_end+0xfffa5d58>

00087814 <memset>:
   87814:	20c000cc 	andi	r3,r4,3
   87818:	2005883a 	mov	r2,r4
   8781c:	18004426 	beq	r3,zero,87930 <memset+0x11c>
   87820:	31ffffc4 	addi	r7,r6,-1
   87824:	30004026 	beq	r6,zero,87928 <memset+0x114>
   87828:	2813883a 	mov	r9,r5
   8782c:	200d883a 	mov	r6,r4
   87830:	2007883a 	mov	r3,r4
   87834:	00000406 	br	87848 <memset+0x34>
   87838:	3a3fffc4 	addi	r8,r7,-1
   8783c:	31800044 	addi	r6,r6,1
   87840:	38003926 	beq	r7,zero,87928 <memset+0x114>
   87844:	400f883a 	mov	r7,r8
   87848:	18c00044 	addi	r3,r3,1
   8784c:	32400005 	stb	r9,0(r6)
   87850:	1a0000cc 	andi	r8,r3,3
   87854:	403ff81e 	bne	r8,zero,87838 <__alt_data_end+0xfffa5db8>
   87858:	010000c4 	movi	r4,3
   8785c:	21c02d2e 	bgeu	r4,r7,87914 <memset+0x100>
   87860:	29003fcc 	andi	r4,r5,255
   87864:	200c923a 	slli	r6,r4,8
   87868:	3108b03a 	or	r4,r6,r4
   8786c:	200c943a 	slli	r6,r4,16
   87870:	218cb03a 	or	r6,r4,r6
   87874:	010003c4 	movi	r4,15
   87878:	21c0182e 	bgeu	r4,r7,878dc <memset+0xc8>
   8787c:	3b3ffc04 	addi	r12,r7,-16
   87880:	6018d13a 	srli	r12,r12,4
   87884:	1a000104 	addi	r8,r3,4
   87888:	1ac00204 	addi	r11,r3,8
   8788c:	6008913a 	slli	r4,r12,4
   87890:	1a800304 	addi	r10,r3,12
   87894:	1813883a 	mov	r9,r3
   87898:	21000504 	addi	r4,r4,20
   8789c:	1909883a 	add	r4,r3,r4
   878a0:	49800015 	stw	r6,0(r9)
   878a4:	41800015 	stw	r6,0(r8)
   878a8:	59800015 	stw	r6,0(r11)
   878ac:	51800015 	stw	r6,0(r10)
   878b0:	42000404 	addi	r8,r8,16
   878b4:	4a400404 	addi	r9,r9,16
   878b8:	5ac00404 	addi	r11,r11,16
   878bc:	52800404 	addi	r10,r10,16
   878c0:	413ff71e 	bne	r8,r4,878a0 <__alt_data_end+0xfffa5e20>
   878c4:	63000044 	addi	r12,r12,1
   878c8:	6018913a 	slli	r12,r12,4
   878cc:	39c003cc 	andi	r7,r7,15
   878d0:	010000c4 	movi	r4,3
   878d4:	1b07883a 	add	r3,r3,r12
   878d8:	21c00e2e 	bgeu	r4,r7,87914 <memset+0x100>
   878dc:	1813883a 	mov	r9,r3
   878e0:	3811883a 	mov	r8,r7
   878e4:	010000c4 	movi	r4,3
   878e8:	49800015 	stw	r6,0(r9)
   878ec:	423fff04 	addi	r8,r8,-4
   878f0:	4a400104 	addi	r9,r9,4
   878f4:	223ffc36 	bltu	r4,r8,878e8 <__alt_data_end+0xfffa5e68>
   878f8:	393fff04 	addi	r4,r7,-4
   878fc:	2008d0ba 	srli	r4,r4,2
   87900:	39c000cc 	andi	r7,r7,3
   87904:	21000044 	addi	r4,r4,1
   87908:	2109883a 	add	r4,r4,r4
   8790c:	2109883a 	add	r4,r4,r4
   87910:	1907883a 	add	r3,r3,r4
   87914:	38000526 	beq	r7,zero,8792c <memset+0x118>
   87918:	19cf883a 	add	r7,r3,r7
   8791c:	19400005 	stb	r5,0(r3)
   87920:	18c00044 	addi	r3,r3,1
   87924:	38fffd1e 	bne	r7,r3,8791c <__alt_data_end+0xfffa5e9c>
   87928:	f800283a 	ret
   8792c:	f800283a 	ret
   87930:	2007883a 	mov	r3,r4
   87934:	300f883a 	mov	r7,r6
   87938:	003fc706 	br	87858 <__alt_data_end+0xfffa5dd8>

0008793c <_Balloc>:
   8793c:	20801317 	ldw	r2,76(r4)
   87940:	defffc04 	addi	sp,sp,-16
   87944:	dc400115 	stw	r17,4(sp)
   87948:	dc000015 	stw	r16,0(sp)
   8794c:	dfc00315 	stw	ra,12(sp)
   87950:	dc800215 	stw	r18,8(sp)
   87954:	2023883a 	mov	r17,r4
   87958:	2821883a 	mov	r16,r5
   8795c:	10000f26 	beq	r2,zero,8799c <_Balloc+0x60>
   87960:	8407883a 	add	r3,r16,r16
   87964:	18c7883a 	add	r3,r3,r3
   87968:	10c7883a 	add	r3,r2,r3
   8796c:	18800017 	ldw	r2,0(r3)
   87970:	10001126 	beq	r2,zero,879b8 <_Balloc+0x7c>
   87974:	11000017 	ldw	r4,0(r2)
   87978:	19000015 	stw	r4,0(r3)
   8797c:	10000415 	stw	zero,16(r2)
   87980:	10000315 	stw	zero,12(r2)
   87984:	dfc00317 	ldw	ra,12(sp)
   87988:	dc800217 	ldw	r18,8(sp)
   8798c:	dc400117 	ldw	r17,4(sp)
   87990:	dc000017 	ldw	r16,0(sp)
   87994:	dec00404 	addi	sp,sp,16
   87998:	f800283a 	ret
   8799c:	01800844 	movi	r6,33
   879a0:	01400104 	movi	r5,4
   879a4:	008a8780 	call	8a878 <_calloc_r>
   879a8:	88801315 	stw	r2,76(r17)
   879ac:	103fec1e 	bne	r2,zero,87960 <__alt_data_end+0xfffa5ee0>
   879b0:	0005883a 	mov	r2,zero
   879b4:	003ff306 	br	87984 <__alt_data_end+0xfffa5f04>
   879b8:	01400044 	movi	r5,1
   879bc:	2c24983a 	sll	r18,r5,r16
   879c0:	8809883a 	mov	r4,r17
   879c4:	91800144 	addi	r6,r18,5
   879c8:	318d883a 	add	r6,r6,r6
   879cc:	318d883a 	add	r6,r6,r6
   879d0:	008a8780 	call	8a878 <_calloc_r>
   879d4:	103ff626 	beq	r2,zero,879b0 <__alt_data_end+0xfffa5f30>
   879d8:	14000115 	stw	r16,4(r2)
   879dc:	14800215 	stw	r18,8(r2)
   879e0:	003fe606 	br	8797c <__alt_data_end+0xfffa5efc>

000879e4 <_Bfree>:
   879e4:	28000826 	beq	r5,zero,87a08 <_Bfree+0x24>
   879e8:	28c00117 	ldw	r3,4(r5)
   879ec:	20801317 	ldw	r2,76(r4)
   879f0:	18c7883a 	add	r3,r3,r3
   879f4:	18c7883a 	add	r3,r3,r3
   879f8:	10c5883a 	add	r2,r2,r3
   879fc:	10c00017 	ldw	r3,0(r2)
   87a00:	28c00015 	stw	r3,0(r5)
   87a04:	11400015 	stw	r5,0(r2)
   87a08:	f800283a 	ret

00087a0c <__multadd>:
   87a0c:	defffa04 	addi	sp,sp,-24
   87a10:	dc800315 	stw	r18,12(sp)
   87a14:	dc400215 	stw	r17,8(sp)
   87a18:	dc000115 	stw	r16,4(sp)
   87a1c:	2823883a 	mov	r17,r5
   87a20:	2c000417 	ldw	r16,16(r5)
   87a24:	dfc00515 	stw	ra,20(sp)
   87a28:	dcc00415 	stw	r19,16(sp)
   87a2c:	2025883a 	mov	r18,r4
   87a30:	29400504 	addi	r5,r5,20
   87a34:	0011883a 	mov	r8,zero
   87a38:	28c00017 	ldw	r3,0(r5)
   87a3c:	29400104 	addi	r5,r5,4
   87a40:	42000044 	addi	r8,r8,1
   87a44:	18bfffcc 	andi	r2,r3,65535
   87a48:	1185383a 	mul	r2,r2,r6
   87a4c:	1806d43a 	srli	r3,r3,16
   87a50:	11cf883a 	add	r7,r2,r7
   87a54:	3808d43a 	srli	r4,r7,16
   87a58:	1987383a 	mul	r3,r3,r6
   87a5c:	38bfffcc 	andi	r2,r7,65535
   87a60:	1907883a 	add	r3,r3,r4
   87a64:	1808943a 	slli	r4,r3,16
   87a68:	180ed43a 	srli	r7,r3,16
   87a6c:	2085883a 	add	r2,r4,r2
   87a70:	28bfff15 	stw	r2,-4(r5)
   87a74:	443ff016 	blt	r8,r16,87a38 <__alt_data_end+0xfffa5fb8>
   87a78:	38000926 	beq	r7,zero,87aa0 <__multadd+0x94>
   87a7c:	88800217 	ldw	r2,8(r17)
   87a80:	80800f0e 	bge	r16,r2,87ac0 <__multadd+0xb4>
   87a84:	80800144 	addi	r2,r16,5
   87a88:	1085883a 	add	r2,r2,r2
   87a8c:	1085883a 	add	r2,r2,r2
   87a90:	8885883a 	add	r2,r17,r2
   87a94:	11c00015 	stw	r7,0(r2)
   87a98:	84000044 	addi	r16,r16,1
   87a9c:	8c000415 	stw	r16,16(r17)
   87aa0:	8805883a 	mov	r2,r17
   87aa4:	dfc00517 	ldw	ra,20(sp)
   87aa8:	dcc00417 	ldw	r19,16(sp)
   87aac:	dc800317 	ldw	r18,12(sp)
   87ab0:	dc400217 	ldw	r17,8(sp)
   87ab4:	dc000117 	ldw	r16,4(sp)
   87ab8:	dec00604 	addi	sp,sp,24
   87abc:	f800283a 	ret
   87ac0:	89400117 	ldw	r5,4(r17)
   87ac4:	9009883a 	mov	r4,r18
   87ac8:	d9c00015 	stw	r7,0(sp)
   87acc:	29400044 	addi	r5,r5,1
   87ad0:	008793c0 	call	8793c <_Balloc>
   87ad4:	89800417 	ldw	r6,16(r17)
   87ad8:	89400304 	addi	r5,r17,12
   87adc:	11000304 	addi	r4,r2,12
   87ae0:	31800084 	addi	r6,r6,2
   87ae4:	318d883a 	add	r6,r6,r6
   87ae8:	318d883a 	add	r6,r6,r6
   87aec:	1027883a 	mov	r19,r2
   87af0:	00875700 	call	87570 <memcpy>
   87af4:	d9c00017 	ldw	r7,0(sp)
   87af8:	88000a26 	beq	r17,zero,87b24 <__multadd+0x118>
   87afc:	88c00117 	ldw	r3,4(r17)
   87b00:	90801317 	ldw	r2,76(r18)
   87b04:	18c7883a 	add	r3,r3,r3
   87b08:	18c7883a 	add	r3,r3,r3
   87b0c:	10c5883a 	add	r2,r2,r3
   87b10:	10c00017 	ldw	r3,0(r2)
   87b14:	88c00015 	stw	r3,0(r17)
   87b18:	14400015 	stw	r17,0(r2)
   87b1c:	9823883a 	mov	r17,r19
   87b20:	003fd806 	br	87a84 <__alt_data_end+0xfffa6004>
   87b24:	9823883a 	mov	r17,r19
   87b28:	003fd606 	br	87a84 <__alt_data_end+0xfffa6004>

00087b2c <__s2b>:
   87b2c:	defff904 	addi	sp,sp,-28
   87b30:	dc400115 	stw	r17,4(sp)
   87b34:	dc000015 	stw	r16,0(sp)
   87b38:	2023883a 	mov	r17,r4
   87b3c:	2821883a 	mov	r16,r5
   87b40:	39000204 	addi	r4,r7,8
   87b44:	01400244 	movi	r5,9
   87b48:	dcc00315 	stw	r19,12(sp)
   87b4c:	dc800215 	stw	r18,8(sp)
   87b50:	dfc00615 	stw	ra,24(sp)
   87b54:	dd400515 	stw	r21,20(sp)
   87b58:	dd000415 	stw	r20,16(sp)
   87b5c:	3825883a 	mov	r18,r7
   87b60:	3027883a 	mov	r19,r6
   87b64:	00817c80 	call	817c8 <__divsi3>
   87b68:	00c00044 	movi	r3,1
   87b6c:	000b883a 	mov	r5,zero
   87b70:	1880030e 	bge	r3,r2,87b80 <__s2b+0x54>
   87b74:	18c7883a 	add	r3,r3,r3
   87b78:	29400044 	addi	r5,r5,1
   87b7c:	18bffd16 	blt	r3,r2,87b74 <__alt_data_end+0xfffa60f4>
   87b80:	8809883a 	mov	r4,r17
   87b84:	008793c0 	call	8793c <_Balloc>
   87b88:	d8c00717 	ldw	r3,28(sp)
   87b8c:	10c00515 	stw	r3,20(r2)
   87b90:	00c00044 	movi	r3,1
   87b94:	10c00415 	stw	r3,16(r2)
   87b98:	00c00244 	movi	r3,9
   87b9c:	1cc0210e 	bge	r3,r19,87c24 <__s2b+0xf8>
   87ba0:	80eb883a 	add	r21,r16,r3
   87ba4:	a829883a 	mov	r20,r21
   87ba8:	84e1883a 	add	r16,r16,r19
   87bac:	a1c00007 	ldb	r7,0(r20)
   87bb0:	01800284 	movi	r6,10
   87bb4:	a5000044 	addi	r20,r20,1
   87bb8:	100b883a 	mov	r5,r2
   87bbc:	39fff404 	addi	r7,r7,-48
   87bc0:	8809883a 	mov	r4,r17
   87bc4:	0087a0c0 	call	87a0c <__multadd>
   87bc8:	a43ff81e 	bne	r20,r16,87bac <__alt_data_end+0xfffa612c>
   87bcc:	ace1883a 	add	r16,r21,r19
   87bd0:	843ffe04 	addi	r16,r16,-8
   87bd4:	9c800a0e 	bge	r19,r18,87c00 <__s2b+0xd4>
   87bd8:	94e5c83a 	sub	r18,r18,r19
   87bdc:	84a5883a 	add	r18,r16,r18
   87be0:	81c00007 	ldb	r7,0(r16)
   87be4:	01800284 	movi	r6,10
   87be8:	84000044 	addi	r16,r16,1
   87bec:	100b883a 	mov	r5,r2
   87bf0:	39fff404 	addi	r7,r7,-48
   87bf4:	8809883a 	mov	r4,r17
   87bf8:	0087a0c0 	call	87a0c <__multadd>
   87bfc:	84bff81e 	bne	r16,r18,87be0 <__alt_data_end+0xfffa6160>
   87c00:	dfc00617 	ldw	ra,24(sp)
   87c04:	dd400517 	ldw	r21,20(sp)
   87c08:	dd000417 	ldw	r20,16(sp)
   87c0c:	dcc00317 	ldw	r19,12(sp)
   87c10:	dc800217 	ldw	r18,8(sp)
   87c14:	dc400117 	ldw	r17,4(sp)
   87c18:	dc000017 	ldw	r16,0(sp)
   87c1c:	dec00704 	addi	sp,sp,28
   87c20:	f800283a 	ret
   87c24:	84000284 	addi	r16,r16,10
   87c28:	1827883a 	mov	r19,r3
   87c2c:	003fe906 	br	87bd4 <__alt_data_end+0xfffa6154>

00087c30 <__hi0bits>:
   87c30:	20bfffec 	andhi	r2,r4,65535
   87c34:	1000141e 	bne	r2,zero,87c88 <__hi0bits+0x58>
   87c38:	2008943a 	slli	r4,r4,16
   87c3c:	00800404 	movi	r2,16
   87c40:	20ffc02c 	andhi	r3,r4,65280
   87c44:	1800021e 	bne	r3,zero,87c50 <__hi0bits+0x20>
   87c48:	2008923a 	slli	r4,r4,8
   87c4c:	10800204 	addi	r2,r2,8
   87c50:	20fc002c 	andhi	r3,r4,61440
   87c54:	1800021e 	bne	r3,zero,87c60 <__hi0bits+0x30>
   87c58:	2008913a 	slli	r4,r4,4
   87c5c:	10800104 	addi	r2,r2,4
   87c60:	20f0002c 	andhi	r3,r4,49152
   87c64:	1800031e 	bne	r3,zero,87c74 <__hi0bits+0x44>
   87c68:	2109883a 	add	r4,r4,r4
   87c6c:	10800084 	addi	r2,r2,2
   87c70:	2109883a 	add	r4,r4,r4
   87c74:	20000316 	blt	r4,zero,87c84 <__hi0bits+0x54>
   87c78:	2110002c 	andhi	r4,r4,16384
   87c7c:	2000041e 	bne	r4,zero,87c90 <__hi0bits+0x60>
   87c80:	00800804 	movi	r2,32
   87c84:	f800283a 	ret
   87c88:	0005883a 	mov	r2,zero
   87c8c:	003fec06 	br	87c40 <__alt_data_end+0xfffa61c0>
   87c90:	10800044 	addi	r2,r2,1
   87c94:	f800283a 	ret

00087c98 <__lo0bits>:
   87c98:	20c00017 	ldw	r3,0(r4)
   87c9c:	188001cc 	andi	r2,r3,7
   87ca0:	10000826 	beq	r2,zero,87cc4 <__lo0bits+0x2c>
   87ca4:	1880004c 	andi	r2,r3,1
   87ca8:	1000211e 	bne	r2,zero,87d30 <__lo0bits+0x98>
   87cac:	1880008c 	andi	r2,r3,2
   87cb0:	1000211e 	bne	r2,zero,87d38 <__lo0bits+0xa0>
   87cb4:	1806d0ba 	srli	r3,r3,2
   87cb8:	00800084 	movi	r2,2
   87cbc:	20c00015 	stw	r3,0(r4)
   87cc0:	f800283a 	ret
   87cc4:	18bfffcc 	andi	r2,r3,65535
   87cc8:	10001326 	beq	r2,zero,87d18 <__lo0bits+0x80>
   87ccc:	0005883a 	mov	r2,zero
   87cd0:	19403fcc 	andi	r5,r3,255
   87cd4:	2800021e 	bne	r5,zero,87ce0 <__lo0bits+0x48>
   87cd8:	1806d23a 	srli	r3,r3,8
   87cdc:	10800204 	addi	r2,r2,8
   87ce0:	194003cc 	andi	r5,r3,15
   87ce4:	2800021e 	bne	r5,zero,87cf0 <__lo0bits+0x58>
   87ce8:	1806d13a 	srli	r3,r3,4
   87cec:	10800104 	addi	r2,r2,4
   87cf0:	194000cc 	andi	r5,r3,3
   87cf4:	2800021e 	bne	r5,zero,87d00 <__lo0bits+0x68>
   87cf8:	1806d0ba 	srli	r3,r3,2
   87cfc:	10800084 	addi	r2,r2,2
   87d00:	1940004c 	andi	r5,r3,1
   87d04:	2800081e 	bne	r5,zero,87d28 <__lo0bits+0x90>
   87d08:	1806d07a 	srli	r3,r3,1
   87d0c:	1800051e 	bne	r3,zero,87d24 <__lo0bits+0x8c>
   87d10:	00800804 	movi	r2,32
   87d14:	f800283a 	ret
   87d18:	1806d43a 	srli	r3,r3,16
   87d1c:	00800404 	movi	r2,16
   87d20:	003feb06 	br	87cd0 <__alt_data_end+0xfffa6250>
   87d24:	10800044 	addi	r2,r2,1
   87d28:	20c00015 	stw	r3,0(r4)
   87d2c:	f800283a 	ret
   87d30:	0005883a 	mov	r2,zero
   87d34:	f800283a 	ret
   87d38:	1806d07a 	srli	r3,r3,1
   87d3c:	00800044 	movi	r2,1
   87d40:	20c00015 	stw	r3,0(r4)
   87d44:	f800283a 	ret

00087d48 <__i2b>:
   87d48:	defffd04 	addi	sp,sp,-12
   87d4c:	dc000015 	stw	r16,0(sp)
   87d50:	04000044 	movi	r16,1
   87d54:	dc400115 	stw	r17,4(sp)
   87d58:	2823883a 	mov	r17,r5
   87d5c:	800b883a 	mov	r5,r16
   87d60:	dfc00215 	stw	ra,8(sp)
   87d64:	008793c0 	call	8793c <_Balloc>
   87d68:	14400515 	stw	r17,20(r2)
   87d6c:	14000415 	stw	r16,16(r2)
   87d70:	dfc00217 	ldw	ra,8(sp)
   87d74:	dc400117 	ldw	r17,4(sp)
   87d78:	dc000017 	ldw	r16,0(sp)
   87d7c:	dec00304 	addi	sp,sp,12
   87d80:	f800283a 	ret

00087d84 <__multiply>:
   87d84:	defffa04 	addi	sp,sp,-24
   87d88:	dcc00315 	stw	r19,12(sp)
   87d8c:	dc800215 	stw	r18,8(sp)
   87d90:	34c00417 	ldw	r19,16(r6)
   87d94:	2c800417 	ldw	r18,16(r5)
   87d98:	dd000415 	stw	r20,16(sp)
   87d9c:	dc400115 	stw	r17,4(sp)
   87da0:	dfc00515 	stw	ra,20(sp)
   87da4:	dc000015 	stw	r16,0(sp)
   87da8:	2829883a 	mov	r20,r5
   87dac:	3023883a 	mov	r17,r6
   87db0:	94c0050e 	bge	r18,r19,87dc8 <__multiply+0x44>
   87db4:	9007883a 	mov	r3,r18
   87db8:	3029883a 	mov	r20,r6
   87dbc:	9825883a 	mov	r18,r19
   87dc0:	2823883a 	mov	r17,r5
   87dc4:	1827883a 	mov	r19,r3
   87dc8:	a0800217 	ldw	r2,8(r20)
   87dcc:	94e1883a 	add	r16,r18,r19
   87dd0:	a1400117 	ldw	r5,4(r20)
   87dd4:	1400010e 	bge	r2,r16,87ddc <__multiply+0x58>
   87dd8:	29400044 	addi	r5,r5,1
   87ddc:	008793c0 	call	8793c <_Balloc>
   87de0:	8415883a 	add	r10,r16,r16
   87de4:	12c00504 	addi	r11,r2,20
   87de8:	5295883a 	add	r10,r10,r10
   87dec:	5a95883a 	add	r10,r11,r10
   87df0:	5807883a 	mov	r3,r11
   87df4:	5a80032e 	bgeu	r11,r10,87e04 <__multiply+0x80>
   87df8:	18000015 	stw	zero,0(r3)
   87dfc:	18c00104 	addi	r3,r3,4
   87e00:	1abffd36 	bltu	r3,r10,87df8 <__alt_data_end+0xfffa6378>
   87e04:	9ce7883a 	add	r19,r19,r19
   87e08:	94a5883a 	add	r18,r18,r18
   87e0c:	89800504 	addi	r6,r17,20
   87e10:	9ce7883a 	add	r19,r19,r19
   87e14:	a3400504 	addi	r13,r20,20
   87e18:	94a5883a 	add	r18,r18,r18
   87e1c:	34d9883a 	add	r12,r6,r19
   87e20:	6c93883a 	add	r9,r13,r18
   87e24:	3300422e 	bgeu	r6,r12,87f30 <__multiply+0x1ac>
   87e28:	37c00017 	ldw	ra,0(r6)
   87e2c:	fbffffcc 	andi	r15,ra,65535
   87e30:	78001b26 	beq	r15,zero,87ea0 <__multiply+0x11c>
   87e34:	5811883a 	mov	r8,r11
   87e38:	681d883a 	mov	r14,r13
   87e3c:	000f883a 	mov	r7,zero
   87e40:	71000017 	ldw	r4,0(r14)
   87e44:	40c00017 	ldw	r3,0(r8)
   87e48:	73800104 	addi	r14,r14,4
   87e4c:	217fffcc 	andi	r5,r4,65535
   87e50:	2bcb383a 	mul	r5,r5,r15
   87e54:	2008d43a 	srli	r4,r4,16
   87e58:	1c7fffcc 	andi	r17,r3,65535
   87e5c:	2c4b883a 	add	r5,r5,r17
   87e60:	29cb883a 	add	r5,r5,r7
   87e64:	23c9383a 	mul	r4,r4,r15
   87e68:	1806d43a 	srli	r3,r3,16
   87e6c:	280ed43a 	srli	r7,r5,16
   87e70:	297fffcc 	andi	r5,r5,65535
   87e74:	20c7883a 	add	r3,r4,r3
   87e78:	19c7883a 	add	r3,r3,r7
   87e7c:	1808943a 	slli	r4,r3,16
   87e80:	4023883a 	mov	r17,r8
   87e84:	180ed43a 	srli	r7,r3,16
   87e88:	214ab03a 	or	r5,r4,r5
   87e8c:	41400015 	stw	r5,0(r8)
   87e90:	42000104 	addi	r8,r8,4
   87e94:	727fea36 	bltu	r14,r9,87e40 <__alt_data_end+0xfffa63c0>
   87e98:	89c00115 	stw	r7,4(r17)
   87e9c:	37c00017 	ldw	ra,0(r6)
   87ea0:	f83ed43a 	srli	ra,ra,16
   87ea4:	f8001f26 	beq	ra,zero,87f24 <__multiply+0x1a0>
   87ea8:	58c00017 	ldw	r3,0(r11)
   87eac:	681d883a 	mov	r14,r13
   87eb0:	581f883a 	mov	r15,r11
   87eb4:	1811883a 	mov	r8,r3
   87eb8:	5825883a 	mov	r18,r11
   87ebc:	000f883a 	mov	r7,zero
   87ec0:	00000106 	br	87ec8 <__multiply+0x144>
   87ec4:	8825883a 	mov	r18,r17
   87ec8:	7140000b 	ldhu	r5,0(r14)
   87ecc:	4010d43a 	srli	r8,r8,16
   87ed0:	193fffcc 	andi	r4,r3,65535
   87ed4:	2fcb383a 	mul	r5,r5,ra
   87ed8:	7bc00104 	addi	r15,r15,4
   87edc:	73800104 	addi	r14,r14,4
   87ee0:	2a0b883a 	add	r5,r5,r8
   87ee4:	29cb883a 	add	r5,r5,r7
   87ee8:	2806943a 	slli	r3,r5,16
   87eec:	94400104 	addi	r17,r18,4
   87ef0:	280ad43a 	srli	r5,r5,16
   87ef4:	1908b03a 	or	r4,r3,r4
   87ef8:	793fff15 	stw	r4,-4(r15)
   87efc:	70ffff17 	ldw	r3,-4(r14)
   87f00:	8a000017 	ldw	r8,0(r17)
   87f04:	1806d43a 	srli	r3,r3,16
   87f08:	413fffcc 	andi	r4,r8,65535
   87f0c:	1fc7383a 	mul	r3,r3,ra
   87f10:	1907883a 	add	r3,r3,r4
   87f14:	1947883a 	add	r3,r3,r5
   87f18:	180ed43a 	srli	r7,r3,16
   87f1c:	727fe936 	bltu	r14,r9,87ec4 <__alt_data_end+0xfffa6444>
   87f20:	90c00115 	stw	r3,4(r18)
   87f24:	31800104 	addi	r6,r6,4
   87f28:	5ac00104 	addi	r11,r11,4
   87f2c:	333fbe36 	bltu	r6,r12,87e28 <__alt_data_end+0xfffa63a8>
   87f30:	0400090e 	bge	zero,r16,87f58 <__multiply+0x1d4>
   87f34:	50ffff17 	ldw	r3,-4(r10)
   87f38:	52bfff04 	addi	r10,r10,-4
   87f3c:	18000326 	beq	r3,zero,87f4c <__multiply+0x1c8>
   87f40:	00000506 	br	87f58 <__multiply+0x1d4>
   87f44:	50c00017 	ldw	r3,0(r10)
   87f48:	1800031e 	bne	r3,zero,87f58 <__multiply+0x1d4>
   87f4c:	843fffc4 	addi	r16,r16,-1
   87f50:	52bfff04 	addi	r10,r10,-4
   87f54:	803ffb1e 	bne	r16,zero,87f44 <__alt_data_end+0xfffa64c4>
   87f58:	14000415 	stw	r16,16(r2)
   87f5c:	dfc00517 	ldw	ra,20(sp)
   87f60:	dd000417 	ldw	r20,16(sp)
   87f64:	dcc00317 	ldw	r19,12(sp)
   87f68:	dc800217 	ldw	r18,8(sp)
   87f6c:	dc400117 	ldw	r17,4(sp)
   87f70:	dc000017 	ldw	r16,0(sp)
   87f74:	dec00604 	addi	sp,sp,24
   87f78:	f800283a 	ret

00087f7c <__pow5mult>:
   87f7c:	defffa04 	addi	sp,sp,-24
   87f80:	dcc00315 	stw	r19,12(sp)
   87f84:	dc000015 	stw	r16,0(sp)
   87f88:	dfc00515 	stw	ra,20(sp)
   87f8c:	dd000415 	stw	r20,16(sp)
   87f90:	dc800215 	stw	r18,8(sp)
   87f94:	dc400115 	stw	r17,4(sp)
   87f98:	308000cc 	andi	r2,r6,3
   87f9c:	3021883a 	mov	r16,r6
   87fa0:	2027883a 	mov	r19,r4
   87fa4:	10002f1e 	bne	r2,zero,88064 <__pow5mult+0xe8>
   87fa8:	2825883a 	mov	r18,r5
   87fac:	8021d0ba 	srai	r16,r16,2
   87fb0:	80001a26 	beq	r16,zero,8801c <__pow5mult+0xa0>
   87fb4:	9c401217 	ldw	r17,72(r19)
   87fb8:	8800061e 	bne	r17,zero,87fd4 <__pow5mult+0x58>
   87fbc:	00003406 	br	88090 <__pow5mult+0x114>
   87fc0:	8021d07a 	srai	r16,r16,1
   87fc4:	80001526 	beq	r16,zero,8801c <__pow5mult+0xa0>
   87fc8:	88800017 	ldw	r2,0(r17)
   87fcc:	10001c26 	beq	r2,zero,88040 <__pow5mult+0xc4>
   87fd0:	1023883a 	mov	r17,r2
   87fd4:	8080004c 	andi	r2,r16,1
   87fd8:	103ff926 	beq	r2,zero,87fc0 <__alt_data_end+0xfffa6540>
   87fdc:	880d883a 	mov	r6,r17
   87fe0:	900b883a 	mov	r5,r18
   87fe4:	9809883a 	mov	r4,r19
   87fe8:	0087d840 	call	87d84 <__multiply>
   87fec:	90001b26 	beq	r18,zero,8805c <__pow5mult+0xe0>
   87ff0:	91000117 	ldw	r4,4(r18)
   87ff4:	98c01317 	ldw	r3,76(r19)
   87ff8:	8021d07a 	srai	r16,r16,1
   87ffc:	2109883a 	add	r4,r4,r4
   88000:	2109883a 	add	r4,r4,r4
   88004:	1907883a 	add	r3,r3,r4
   88008:	19000017 	ldw	r4,0(r3)
   8800c:	91000015 	stw	r4,0(r18)
   88010:	1c800015 	stw	r18,0(r3)
   88014:	1025883a 	mov	r18,r2
   88018:	803feb1e 	bne	r16,zero,87fc8 <__alt_data_end+0xfffa6548>
   8801c:	9005883a 	mov	r2,r18
   88020:	dfc00517 	ldw	ra,20(sp)
   88024:	dd000417 	ldw	r20,16(sp)
   88028:	dcc00317 	ldw	r19,12(sp)
   8802c:	dc800217 	ldw	r18,8(sp)
   88030:	dc400117 	ldw	r17,4(sp)
   88034:	dc000017 	ldw	r16,0(sp)
   88038:	dec00604 	addi	sp,sp,24
   8803c:	f800283a 	ret
   88040:	880d883a 	mov	r6,r17
   88044:	880b883a 	mov	r5,r17
   88048:	9809883a 	mov	r4,r19
   8804c:	0087d840 	call	87d84 <__multiply>
   88050:	88800015 	stw	r2,0(r17)
   88054:	10000015 	stw	zero,0(r2)
   88058:	003fdd06 	br	87fd0 <__alt_data_end+0xfffa6550>
   8805c:	1025883a 	mov	r18,r2
   88060:	003fd706 	br	87fc0 <__alt_data_end+0xfffa6540>
   88064:	10bfffc4 	addi	r2,r2,-1
   88068:	1085883a 	add	r2,r2,r2
   8806c:	00c00274 	movhi	r3,9
   88070:	18c3cc04 	addi	r3,r3,3888
   88074:	1085883a 	add	r2,r2,r2
   88078:	1885883a 	add	r2,r3,r2
   8807c:	11800017 	ldw	r6,0(r2)
   88080:	000f883a 	mov	r7,zero
   88084:	0087a0c0 	call	87a0c <__multadd>
   88088:	1025883a 	mov	r18,r2
   8808c:	003fc706 	br	87fac <__alt_data_end+0xfffa652c>
   88090:	05000044 	movi	r20,1
   88094:	a00b883a 	mov	r5,r20
   88098:	9809883a 	mov	r4,r19
   8809c:	008793c0 	call	8793c <_Balloc>
   880a0:	1023883a 	mov	r17,r2
   880a4:	00809c44 	movi	r2,625
   880a8:	88800515 	stw	r2,20(r17)
   880ac:	8d000415 	stw	r20,16(r17)
   880b0:	9c401215 	stw	r17,72(r19)
   880b4:	88000015 	stw	zero,0(r17)
   880b8:	003fc606 	br	87fd4 <__alt_data_end+0xfffa6554>

000880bc <__lshift>:
   880bc:	defff904 	addi	sp,sp,-28
   880c0:	dd400515 	stw	r21,20(sp)
   880c4:	dcc00315 	stw	r19,12(sp)
   880c8:	302bd17a 	srai	r21,r6,5
   880cc:	2cc00417 	ldw	r19,16(r5)
   880d0:	28800217 	ldw	r2,8(r5)
   880d4:	dd000415 	stw	r20,16(sp)
   880d8:	ace7883a 	add	r19,r21,r19
   880dc:	dc800215 	stw	r18,8(sp)
   880e0:	dc400115 	stw	r17,4(sp)
   880e4:	dc000015 	stw	r16,0(sp)
   880e8:	dfc00615 	stw	ra,24(sp)
   880ec:	9c000044 	addi	r16,r19,1
   880f0:	2823883a 	mov	r17,r5
   880f4:	3029883a 	mov	r20,r6
   880f8:	2025883a 	mov	r18,r4
   880fc:	29400117 	ldw	r5,4(r5)
   88100:	1400030e 	bge	r2,r16,88110 <__lshift+0x54>
   88104:	1085883a 	add	r2,r2,r2
   88108:	29400044 	addi	r5,r5,1
   8810c:	143ffd16 	blt	r2,r16,88104 <__alt_data_end+0xfffa6684>
   88110:	9009883a 	mov	r4,r18
   88114:	008793c0 	call	8793c <_Balloc>
   88118:	10c00504 	addi	r3,r2,20
   8811c:	0540070e 	bge	zero,r21,8813c <__lshift+0x80>
   88120:	ad6b883a 	add	r21,r21,r21
   88124:	ad6b883a 	add	r21,r21,r21
   88128:	1809883a 	mov	r4,r3
   8812c:	1d47883a 	add	r3,r3,r21
   88130:	20000015 	stw	zero,0(r4)
   88134:	21000104 	addi	r4,r4,4
   88138:	193ffd1e 	bne	r3,r4,88130 <__alt_data_end+0xfffa66b0>
   8813c:	8a000417 	ldw	r8,16(r17)
   88140:	89000504 	addi	r4,r17,20
   88144:	a18007cc 	andi	r6,r20,31
   88148:	4211883a 	add	r8,r8,r8
   8814c:	4211883a 	add	r8,r8,r8
   88150:	2211883a 	add	r8,r4,r8
   88154:	30002326 	beq	r6,zero,881e4 <__lshift+0x128>
   88158:	02400804 	movi	r9,32
   8815c:	4993c83a 	sub	r9,r9,r6
   88160:	000b883a 	mov	r5,zero
   88164:	21c00017 	ldw	r7,0(r4)
   88168:	1815883a 	mov	r10,r3
   8816c:	18c00104 	addi	r3,r3,4
   88170:	398e983a 	sll	r7,r7,r6
   88174:	21000104 	addi	r4,r4,4
   88178:	394ab03a 	or	r5,r7,r5
   8817c:	197fff15 	stw	r5,-4(r3)
   88180:	217fff17 	ldw	r5,-4(r4)
   88184:	2a4ad83a 	srl	r5,r5,r9
   88188:	223ff636 	bltu	r4,r8,88164 <__alt_data_end+0xfffa66e4>
   8818c:	51400115 	stw	r5,4(r10)
   88190:	28001a1e 	bne	r5,zero,881fc <__lshift+0x140>
   88194:	843fffc4 	addi	r16,r16,-1
   88198:	14000415 	stw	r16,16(r2)
   8819c:	88000826 	beq	r17,zero,881c0 <__lshift+0x104>
   881a0:	89000117 	ldw	r4,4(r17)
   881a4:	90c01317 	ldw	r3,76(r18)
   881a8:	2109883a 	add	r4,r4,r4
   881ac:	2109883a 	add	r4,r4,r4
   881b0:	1907883a 	add	r3,r3,r4
   881b4:	19000017 	ldw	r4,0(r3)
   881b8:	89000015 	stw	r4,0(r17)
   881bc:	1c400015 	stw	r17,0(r3)
   881c0:	dfc00617 	ldw	ra,24(sp)
   881c4:	dd400517 	ldw	r21,20(sp)
   881c8:	dd000417 	ldw	r20,16(sp)
   881cc:	dcc00317 	ldw	r19,12(sp)
   881d0:	dc800217 	ldw	r18,8(sp)
   881d4:	dc400117 	ldw	r17,4(sp)
   881d8:	dc000017 	ldw	r16,0(sp)
   881dc:	dec00704 	addi	sp,sp,28
   881e0:	f800283a 	ret
   881e4:	21400017 	ldw	r5,0(r4)
   881e8:	18c00104 	addi	r3,r3,4
   881ec:	21000104 	addi	r4,r4,4
   881f0:	197fff15 	stw	r5,-4(r3)
   881f4:	223ffb36 	bltu	r4,r8,881e4 <__alt_data_end+0xfffa6764>
   881f8:	003fe606 	br	88194 <__alt_data_end+0xfffa6714>
   881fc:	9c000084 	addi	r16,r19,2
   88200:	003fe406 	br	88194 <__alt_data_end+0xfffa6714>

00088204 <__mcmp>:
   88204:	20800417 	ldw	r2,16(r4)
   88208:	28c00417 	ldw	r3,16(r5)
   8820c:	10c5c83a 	sub	r2,r2,r3
   88210:	1000111e 	bne	r2,zero,88258 <__mcmp+0x54>
   88214:	18c7883a 	add	r3,r3,r3
   88218:	18c7883a 	add	r3,r3,r3
   8821c:	21000504 	addi	r4,r4,20
   88220:	29400504 	addi	r5,r5,20
   88224:	20c5883a 	add	r2,r4,r3
   88228:	28cb883a 	add	r5,r5,r3
   8822c:	00000106 	br	88234 <__mcmp+0x30>
   88230:	20800a2e 	bgeu	r4,r2,8825c <__mcmp+0x58>
   88234:	10bfff04 	addi	r2,r2,-4
   88238:	297fff04 	addi	r5,r5,-4
   8823c:	11800017 	ldw	r6,0(r2)
   88240:	28c00017 	ldw	r3,0(r5)
   88244:	30fffa26 	beq	r6,r3,88230 <__alt_data_end+0xfffa67b0>
   88248:	30c00236 	bltu	r6,r3,88254 <__mcmp+0x50>
   8824c:	00800044 	movi	r2,1
   88250:	f800283a 	ret
   88254:	00bfffc4 	movi	r2,-1
   88258:	f800283a 	ret
   8825c:	0005883a 	mov	r2,zero
   88260:	f800283a 	ret

00088264 <__mdiff>:
   88264:	28c00417 	ldw	r3,16(r5)
   88268:	30800417 	ldw	r2,16(r6)
   8826c:	defffa04 	addi	sp,sp,-24
   88270:	dcc00315 	stw	r19,12(sp)
   88274:	dc800215 	stw	r18,8(sp)
   88278:	dfc00515 	stw	ra,20(sp)
   8827c:	dd000415 	stw	r20,16(sp)
   88280:	dc400115 	stw	r17,4(sp)
   88284:	dc000015 	stw	r16,0(sp)
   88288:	1887c83a 	sub	r3,r3,r2
   8828c:	2825883a 	mov	r18,r5
   88290:	3027883a 	mov	r19,r6
   88294:	1800141e 	bne	r3,zero,882e8 <__mdiff+0x84>
   88298:	1085883a 	add	r2,r2,r2
   8829c:	1085883a 	add	r2,r2,r2
   882a0:	2a000504 	addi	r8,r5,20
   882a4:	34000504 	addi	r16,r6,20
   882a8:	4087883a 	add	r3,r8,r2
   882ac:	8085883a 	add	r2,r16,r2
   882b0:	00000106 	br	882b8 <__mdiff+0x54>
   882b4:	40c0592e 	bgeu	r8,r3,8841c <__mdiff+0x1b8>
   882b8:	18ffff04 	addi	r3,r3,-4
   882bc:	10bfff04 	addi	r2,r2,-4
   882c0:	19c00017 	ldw	r7,0(r3)
   882c4:	11400017 	ldw	r5,0(r2)
   882c8:	397ffa26 	beq	r7,r5,882b4 <__alt_data_end+0xfffa6834>
   882cc:	3940592e 	bgeu	r7,r5,88434 <__mdiff+0x1d0>
   882d0:	9005883a 	mov	r2,r18
   882d4:	4023883a 	mov	r17,r8
   882d8:	9825883a 	mov	r18,r19
   882dc:	05000044 	movi	r20,1
   882e0:	1027883a 	mov	r19,r2
   882e4:	00000406 	br	882f8 <__mdiff+0x94>
   882e8:	18005616 	blt	r3,zero,88444 <__mdiff+0x1e0>
   882ec:	34400504 	addi	r17,r6,20
   882f0:	2c000504 	addi	r16,r5,20
   882f4:	0029883a 	mov	r20,zero
   882f8:	91400117 	ldw	r5,4(r18)
   882fc:	008793c0 	call	8793c <_Balloc>
   88300:	92400417 	ldw	r9,16(r18)
   88304:	9b000417 	ldw	r12,16(r19)
   88308:	12c00504 	addi	r11,r2,20
   8830c:	4a51883a 	add	r8,r9,r9
   88310:	6319883a 	add	r12,r12,r12
   88314:	4211883a 	add	r8,r8,r8
   88318:	6319883a 	add	r12,r12,r12
   8831c:	15000315 	stw	r20,12(r2)
   88320:	8211883a 	add	r8,r16,r8
   88324:	8b19883a 	add	r12,r17,r12
   88328:	0007883a 	mov	r3,zero
   8832c:	81400017 	ldw	r5,0(r16)
   88330:	89c00017 	ldw	r7,0(r17)
   88334:	59800104 	addi	r6,r11,4
   88338:	293fffcc 	andi	r4,r5,65535
   8833c:	20c7883a 	add	r3,r4,r3
   88340:	393fffcc 	andi	r4,r7,65535
   88344:	1909c83a 	sub	r4,r3,r4
   88348:	280ad43a 	srli	r5,r5,16
   8834c:	380ed43a 	srli	r7,r7,16
   88350:	2007d43a 	srai	r3,r4,16
   88354:	213fffcc 	andi	r4,r4,65535
   88358:	29cbc83a 	sub	r5,r5,r7
   8835c:	28c7883a 	add	r3,r5,r3
   88360:	180a943a 	slli	r5,r3,16
   88364:	8c400104 	addi	r17,r17,4
   88368:	84000104 	addi	r16,r16,4
   8836c:	2908b03a 	or	r4,r5,r4
   88370:	59000015 	stw	r4,0(r11)
   88374:	1807d43a 	srai	r3,r3,16
   88378:	3015883a 	mov	r10,r6
   8837c:	3017883a 	mov	r11,r6
   88380:	8b3fea36 	bltu	r17,r12,8832c <__alt_data_end+0xfffa68ac>
   88384:	8200162e 	bgeu	r16,r8,883e0 <__mdiff+0x17c>
   88388:	8017883a 	mov	r11,r16
   8838c:	59400017 	ldw	r5,0(r11)
   88390:	31800104 	addi	r6,r6,4
   88394:	5ac00104 	addi	r11,r11,4
   88398:	293fffcc 	andi	r4,r5,65535
   8839c:	20c7883a 	add	r3,r4,r3
   883a0:	280ed43a 	srli	r7,r5,16
   883a4:	180bd43a 	srai	r5,r3,16
   883a8:	193fffcc 	andi	r4,r3,65535
   883ac:	3947883a 	add	r3,r7,r5
   883b0:	180a943a 	slli	r5,r3,16
   883b4:	1807d43a 	srai	r3,r3,16
   883b8:	2908b03a 	or	r4,r5,r4
   883bc:	313fff15 	stw	r4,-4(r6)
   883c0:	5a3ff236 	bltu	r11,r8,8838c <__alt_data_end+0xfffa690c>
   883c4:	0406303a 	nor	r3,zero,r16
   883c8:	1a07883a 	add	r3,r3,r8
   883cc:	1806d0ba 	srli	r3,r3,2
   883d0:	18c00044 	addi	r3,r3,1
   883d4:	18c7883a 	add	r3,r3,r3
   883d8:	18c7883a 	add	r3,r3,r3
   883dc:	50d5883a 	add	r10,r10,r3
   883e0:	50ffff04 	addi	r3,r10,-4
   883e4:	2000041e 	bne	r4,zero,883f8 <__mdiff+0x194>
   883e8:	18ffff04 	addi	r3,r3,-4
   883ec:	19000017 	ldw	r4,0(r3)
   883f0:	4a7fffc4 	addi	r9,r9,-1
   883f4:	203ffc26 	beq	r4,zero,883e8 <__alt_data_end+0xfffa6968>
   883f8:	12400415 	stw	r9,16(r2)
   883fc:	dfc00517 	ldw	ra,20(sp)
   88400:	dd000417 	ldw	r20,16(sp)
   88404:	dcc00317 	ldw	r19,12(sp)
   88408:	dc800217 	ldw	r18,8(sp)
   8840c:	dc400117 	ldw	r17,4(sp)
   88410:	dc000017 	ldw	r16,0(sp)
   88414:	dec00604 	addi	sp,sp,24
   88418:	f800283a 	ret
   8841c:	000b883a 	mov	r5,zero
   88420:	008793c0 	call	8793c <_Balloc>
   88424:	00c00044 	movi	r3,1
   88428:	10c00415 	stw	r3,16(r2)
   8842c:	10000515 	stw	zero,20(r2)
   88430:	003ff206 	br	883fc <__alt_data_end+0xfffa697c>
   88434:	8023883a 	mov	r17,r16
   88438:	0029883a 	mov	r20,zero
   8843c:	4021883a 	mov	r16,r8
   88440:	003fad06 	br	882f8 <__alt_data_end+0xfffa6878>
   88444:	9005883a 	mov	r2,r18
   88448:	94400504 	addi	r17,r18,20
   8844c:	9c000504 	addi	r16,r19,20
   88450:	9825883a 	mov	r18,r19
   88454:	05000044 	movi	r20,1
   88458:	1027883a 	mov	r19,r2
   8845c:	003fa606 	br	882f8 <__alt_data_end+0xfffa6878>

00088460 <__ulp>:
   88460:	295ffc2c 	andhi	r5,r5,32752
   88464:	00bf3034 	movhi	r2,64704
   88468:	2887883a 	add	r3,r5,r2
   8846c:	00c0020e 	bge	zero,r3,88478 <__ulp+0x18>
   88470:	0005883a 	mov	r2,zero
   88474:	f800283a 	ret
   88478:	00c7c83a 	sub	r3,zero,r3
   8847c:	1807d53a 	srai	r3,r3,20
   88480:	008004c4 	movi	r2,19
   88484:	10c00b0e 	bge	r2,r3,884b4 <__ulp+0x54>
   88488:	18bffb04 	addi	r2,r3,-20
   8848c:	01000784 	movi	r4,30
   88490:	0007883a 	mov	r3,zero
   88494:	20800516 	blt	r4,r2,884ac <__ulp+0x4c>
   88498:	010007c4 	movi	r4,31
   8849c:	2089c83a 	sub	r4,r4,r2
   884a0:	00800044 	movi	r2,1
   884a4:	1104983a 	sll	r2,r2,r4
   884a8:	f800283a 	ret
   884ac:	00800044 	movi	r2,1
   884b0:	f800283a 	ret
   884b4:	01400234 	movhi	r5,8
   884b8:	28c7d83a 	sra	r3,r5,r3
   884bc:	0005883a 	mov	r2,zero
   884c0:	f800283a 	ret

000884c4 <__b2d>:
   884c4:	defffa04 	addi	sp,sp,-24
   884c8:	dc000015 	stw	r16,0(sp)
   884cc:	24000417 	ldw	r16,16(r4)
   884d0:	dc400115 	stw	r17,4(sp)
   884d4:	24400504 	addi	r17,r4,20
   884d8:	8421883a 	add	r16,r16,r16
   884dc:	8421883a 	add	r16,r16,r16
   884e0:	8c21883a 	add	r16,r17,r16
   884e4:	dc800215 	stw	r18,8(sp)
   884e8:	84bfff17 	ldw	r18,-4(r16)
   884ec:	dd000415 	stw	r20,16(sp)
   884f0:	dcc00315 	stw	r19,12(sp)
   884f4:	9009883a 	mov	r4,r18
   884f8:	2829883a 	mov	r20,r5
   884fc:	dfc00515 	stw	ra,20(sp)
   88500:	0087c300 	call	87c30 <__hi0bits>
   88504:	00c00804 	movi	r3,32
   88508:	1889c83a 	sub	r4,r3,r2
   8850c:	a1000015 	stw	r4,0(r20)
   88510:	01000284 	movi	r4,10
   88514:	84ffff04 	addi	r19,r16,-4
   88518:	20801216 	blt	r4,r2,88564 <__b2d+0xa0>
   8851c:	018002c4 	movi	r6,11
   88520:	308dc83a 	sub	r6,r6,r2
   88524:	9186d83a 	srl	r3,r18,r6
   88528:	18cffc34 	orhi	r3,r3,16368
   8852c:	8cc0212e 	bgeu	r17,r19,885b4 <__b2d+0xf0>
   88530:	813ffe17 	ldw	r4,-8(r16)
   88534:	218cd83a 	srl	r6,r4,r6
   88538:	10800544 	addi	r2,r2,21
   8853c:	9084983a 	sll	r2,r18,r2
   88540:	1184b03a 	or	r2,r2,r6
   88544:	dfc00517 	ldw	ra,20(sp)
   88548:	dd000417 	ldw	r20,16(sp)
   8854c:	dcc00317 	ldw	r19,12(sp)
   88550:	dc800217 	ldw	r18,8(sp)
   88554:	dc400117 	ldw	r17,4(sp)
   88558:	dc000017 	ldw	r16,0(sp)
   8855c:	dec00604 	addi	sp,sp,24
   88560:	f800283a 	ret
   88564:	8cc00f2e 	bgeu	r17,r19,885a4 <__b2d+0xe0>
   88568:	117ffd44 	addi	r5,r2,-11
   8856c:	80bffe17 	ldw	r2,-8(r16)
   88570:	28000e26 	beq	r5,zero,885ac <__b2d+0xe8>
   88574:	1949c83a 	sub	r4,r3,r5
   88578:	9164983a 	sll	r18,r18,r5
   8857c:	1106d83a 	srl	r3,r2,r4
   88580:	81bffe04 	addi	r6,r16,-8
   88584:	948ffc34 	orhi	r18,r18,16368
   88588:	90c6b03a 	or	r3,r18,r3
   8858c:	89800e2e 	bgeu	r17,r6,885c8 <__b2d+0x104>
   88590:	81bffd17 	ldw	r6,-12(r16)
   88594:	1144983a 	sll	r2,r2,r5
   88598:	310ad83a 	srl	r5,r6,r4
   8859c:	2884b03a 	or	r2,r5,r2
   885a0:	003fe806 	br	88544 <__alt_data_end+0xfffa6ac4>
   885a4:	10bffd44 	addi	r2,r2,-11
   885a8:	1000041e 	bne	r2,zero,885bc <__b2d+0xf8>
   885ac:	90cffc34 	orhi	r3,r18,16368
   885b0:	003fe406 	br	88544 <__alt_data_end+0xfffa6ac4>
   885b4:	000d883a 	mov	r6,zero
   885b8:	003fdf06 	br	88538 <__alt_data_end+0xfffa6ab8>
   885bc:	90a4983a 	sll	r18,r18,r2
   885c0:	0005883a 	mov	r2,zero
   885c4:	003ff906 	br	885ac <__alt_data_end+0xfffa6b2c>
   885c8:	1144983a 	sll	r2,r2,r5
   885cc:	003fdd06 	br	88544 <__alt_data_end+0xfffa6ac4>

000885d0 <__d2b>:
   885d0:	defff804 	addi	sp,sp,-32
   885d4:	dc000215 	stw	r16,8(sp)
   885d8:	3021883a 	mov	r16,r6
   885dc:	dc400315 	stw	r17,12(sp)
   885e0:	8022907a 	slli	r17,r16,1
   885e4:	dd000615 	stw	r20,24(sp)
   885e8:	2829883a 	mov	r20,r5
   885ec:	01400044 	movi	r5,1
   885f0:	dcc00515 	stw	r19,20(sp)
   885f4:	dc800415 	stw	r18,16(sp)
   885f8:	dfc00715 	stw	ra,28(sp)
   885fc:	3825883a 	mov	r18,r7
   88600:	8822d57a 	srli	r17,r17,21
   88604:	008793c0 	call	8793c <_Balloc>
   88608:	1027883a 	mov	r19,r2
   8860c:	00800434 	movhi	r2,16
   88610:	10bfffc4 	addi	r2,r2,-1
   88614:	808c703a 	and	r6,r16,r2
   88618:	88000126 	beq	r17,zero,88620 <__d2b+0x50>
   8861c:	31800434 	orhi	r6,r6,16
   88620:	d9800015 	stw	r6,0(sp)
   88624:	a0002426 	beq	r20,zero,886b8 <__d2b+0xe8>
   88628:	d9000104 	addi	r4,sp,4
   8862c:	dd000115 	stw	r20,4(sp)
   88630:	0087c980 	call	87c98 <__lo0bits>
   88634:	d8c00017 	ldw	r3,0(sp)
   88638:	10002f1e 	bne	r2,zero,886f8 <__d2b+0x128>
   8863c:	d9000117 	ldw	r4,4(sp)
   88640:	99000515 	stw	r4,20(r19)
   88644:	1821003a 	cmpeq	r16,r3,zero
   88648:	01000084 	movi	r4,2
   8864c:	2421c83a 	sub	r16,r4,r16
   88650:	98c00615 	stw	r3,24(r19)
   88654:	9c000415 	stw	r16,16(r19)
   88658:	88001f1e 	bne	r17,zero,886d8 <__d2b+0x108>
   8865c:	10bef384 	addi	r2,r2,-1074
   88660:	90800015 	stw	r2,0(r18)
   88664:	00900034 	movhi	r2,16384
   88668:	10bfffc4 	addi	r2,r2,-1
   8866c:	8085883a 	add	r2,r16,r2
   88670:	1085883a 	add	r2,r2,r2
   88674:	1085883a 	add	r2,r2,r2
   88678:	9885883a 	add	r2,r19,r2
   8867c:	11000517 	ldw	r4,20(r2)
   88680:	8020917a 	slli	r16,r16,5
   88684:	0087c300 	call	87c30 <__hi0bits>
   88688:	d8c00817 	ldw	r3,32(sp)
   8868c:	8085c83a 	sub	r2,r16,r2
   88690:	18800015 	stw	r2,0(r3)
   88694:	9805883a 	mov	r2,r19
   88698:	dfc00717 	ldw	ra,28(sp)
   8869c:	dd000617 	ldw	r20,24(sp)
   886a0:	dcc00517 	ldw	r19,20(sp)
   886a4:	dc800417 	ldw	r18,16(sp)
   886a8:	dc400317 	ldw	r17,12(sp)
   886ac:	dc000217 	ldw	r16,8(sp)
   886b0:	dec00804 	addi	sp,sp,32
   886b4:	f800283a 	ret
   886b8:	d809883a 	mov	r4,sp
   886bc:	0087c980 	call	87c98 <__lo0bits>
   886c0:	d8c00017 	ldw	r3,0(sp)
   886c4:	04000044 	movi	r16,1
   886c8:	9c000415 	stw	r16,16(r19)
   886cc:	98c00515 	stw	r3,20(r19)
   886d0:	10800804 	addi	r2,r2,32
   886d4:	883fe126 	beq	r17,zero,8865c <__alt_data_end+0xfffa6bdc>
   886d8:	00c00d44 	movi	r3,53
   886dc:	8c7ef344 	addi	r17,r17,-1075
   886e0:	88a3883a 	add	r17,r17,r2
   886e4:	1885c83a 	sub	r2,r3,r2
   886e8:	d8c00817 	ldw	r3,32(sp)
   886ec:	94400015 	stw	r17,0(r18)
   886f0:	18800015 	stw	r2,0(r3)
   886f4:	003fe706 	br	88694 <__alt_data_end+0xfffa6c14>
   886f8:	01000804 	movi	r4,32
   886fc:	2089c83a 	sub	r4,r4,r2
   88700:	1908983a 	sll	r4,r3,r4
   88704:	d9400117 	ldw	r5,4(sp)
   88708:	1886d83a 	srl	r3,r3,r2
   8870c:	2148b03a 	or	r4,r4,r5
   88710:	99000515 	stw	r4,20(r19)
   88714:	d8c00015 	stw	r3,0(sp)
   88718:	003fca06 	br	88644 <__alt_data_end+0xfffa6bc4>

0008871c <__ratio>:
   8871c:	defff904 	addi	sp,sp,-28
   88720:	dc400315 	stw	r17,12(sp)
   88724:	2823883a 	mov	r17,r5
   88728:	d9400104 	addi	r5,sp,4
   8872c:	dfc00615 	stw	ra,24(sp)
   88730:	dcc00515 	stw	r19,20(sp)
   88734:	dc800415 	stw	r18,16(sp)
   88738:	2027883a 	mov	r19,r4
   8873c:	dc000215 	stw	r16,8(sp)
   88740:	00884c40 	call	884c4 <__b2d>
   88744:	d80b883a 	mov	r5,sp
   88748:	8809883a 	mov	r4,r17
   8874c:	1025883a 	mov	r18,r2
   88750:	1821883a 	mov	r16,r3
   88754:	00884c40 	call	884c4 <__b2d>
   88758:	8a000417 	ldw	r8,16(r17)
   8875c:	99000417 	ldw	r4,16(r19)
   88760:	d9400117 	ldw	r5,4(sp)
   88764:	2209c83a 	sub	r4,r4,r8
   88768:	2010917a 	slli	r8,r4,5
   8876c:	d9000017 	ldw	r4,0(sp)
   88770:	2909c83a 	sub	r4,r5,r4
   88774:	4109883a 	add	r4,r8,r4
   88778:	01000e0e 	bge	zero,r4,887b4 <__ratio+0x98>
   8877c:	2008953a 	slli	r4,r4,20
   88780:	2421883a 	add	r16,r4,r16
   88784:	100d883a 	mov	r6,r2
   88788:	180f883a 	mov	r7,r3
   8878c:	9009883a 	mov	r4,r18
   88790:	800b883a 	mov	r5,r16
   88794:	008c4b40 	call	8c4b4 <__divdf3>
   88798:	dfc00617 	ldw	ra,24(sp)
   8879c:	dcc00517 	ldw	r19,20(sp)
   887a0:	dc800417 	ldw	r18,16(sp)
   887a4:	dc400317 	ldw	r17,12(sp)
   887a8:	dc000217 	ldw	r16,8(sp)
   887ac:	dec00704 	addi	sp,sp,28
   887b0:	f800283a 	ret
   887b4:	2008953a 	slli	r4,r4,20
   887b8:	1907c83a 	sub	r3,r3,r4
   887bc:	003ff106 	br	88784 <__alt_data_end+0xfffa6d04>

000887c0 <_mprec_log10>:
   887c0:	defffe04 	addi	sp,sp,-8
   887c4:	dc000015 	stw	r16,0(sp)
   887c8:	dfc00115 	stw	ra,4(sp)
   887cc:	008005c4 	movi	r2,23
   887d0:	2021883a 	mov	r16,r4
   887d4:	11000d0e 	bge	r2,r4,8880c <_mprec_log10+0x4c>
   887d8:	0005883a 	mov	r2,zero
   887dc:	00cffc34 	movhi	r3,16368
   887e0:	843fffc4 	addi	r16,r16,-1
   887e4:	000d883a 	mov	r6,zero
   887e8:	01d00934 	movhi	r7,16420
   887ec:	1009883a 	mov	r4,r2
   887f0:	180b883a 	mov	r5,r3
   887f4:	008cff40 	call	8cff4 <__muldf3>
   887f8:	803ff91e 	bne	r16,zero,887e0 <__alt_data_end+0xfffa6d60>
   887fc:	dfc00117 	ldw	ra,4(sp)
   88800:	dc000017 	ldw	r16,0(sp)
   88804:	dec00204 	addi	sp,sp,8
   88808:	f800283a 	ret
   8880c:	202090fa 	slli	r16,r4,3
   88810:	00800274 	movhi	r2,9
   88814:	1083e304 	addi	r2,r2,3980
   88818:	1421883a 	add	r16,r2,r16
   8881c:	80800017 	ldw	r2,0(r16)
   88820:	80c00117 	ldw	r3,4(r16)
   88824:	dfc00117 	ldw	ra,4(sp)
   88828:	dc000017 	ldw	r16,0(sp)
   8882c:	dec00204 	addi	sp,sp,8
   88830:	f800283a 	ret

00088834 <__copybits>:
   88834:	297fffc4 	addi	r5,r5,-1
   88838:	280fd17a 	srai	r7,r5,5
   8883c:	30c00417 	ldw	r3,16(r6)
   88840:	30800504 	addi	r2,r6,20
   88844:	39c00044 	addi	r7,r7,1
   88848:	18c7883a 	add	r3,r3,r3
   8884c:	39cf883a 	add	r7,r7,r7
   88850:	18c7883a 	add	r3,r3,r3
   88854:	39cf883a 	add	r7,r7,r7
   88858:	10c7883a 	add	r3,r2,r3
   8885c:	21cf883a 	add	r7,r4,r7
   88860:	10c00d2e 	bgeu	r2,r3,88898 <__copybits+0x64>
   88864:	200b883a 	mov	r5,r4
   88868:	12000017 	ldw	r8,0(r2)
   8886c:	29400104 	addi	r5,r5,4
   88870:	10800104 	addi	r2,r2,4
   88874:	2a3fff15 	stw	r8,-4(r5)
   88878:	10fffb36 	bltu	r2,r3,88868 <__alt_data_end+0xfffa6de8>
   8887c:	1985c83a 	sub	r2,r3,r6
   88880:	10bffac4 	addi	r2,r2,-21
   88884:	1004d0ba 	srli	r2,r2,2
   88888:	10800044 	addi	r2,r2,1
   8888c:	1085883a 	add	r2,r2,r2
   88890:	1085883a 	add	r2,r2,r2
   88894:	2089883a 	add	r4,r4,r2
   88898:	21c0032e 	bgeu	r4,r7,888a8 <__copybits+0x74>
   8889c:	20000015 	stw	zero,0(r4)
   888a0:	21000104 	addi	r4,r4,4
   888a4:	21fffd36 	bltu	r4,r7,8889c <__alt_data_end+0xfffa6e1c>
   888a8:	f800283a 	ret

000888ac <__any_on>:
   888ac:	20c00417 	ldw	r3,16(r4)
   888b0:	2805d17a 	srai	r2,r5,5
   888b4:	21000504 	addi	r4,r4,20
   888b8:	18800d0e 	bge	r3,r2,888f0 <__any_on+0x44>
   888bc:	18c7883a 	add	r3,r3,r3
   888c0:	18c7883a 	add	r3,r3,r3
   888c4:	20c7883a 	add	r3,r4,r3
   888c8:	20c0192e 	bgeu	r4,r3,88930 <__any_on+0x84>
   888cc:	18bfff17 	ldw	r2,-4(r3)
   888d0:	18ffff04 	addi	r3,r3,-4
   888d4:	1000041e 	bne	r2,zero,888e8 <__any_on+0x3c>
   888d8:	20c0142e 	bgeu	r4,r3,8892c <__any_on+0x80>
   888dc:	18ffff04 	addi	r3,r3,-4
   888e0:	19400017 	ldw	r5,0(r3)
   888e4:	283ffc26 	beq	r5,zero,888d8 <__alt_data_end+0xfffa6e58>
   888e8:	00800044 	movi	r2,1
   888ec:	f800283a 	ret
   888f0:	10c00a0e 	bge	r2,r3,8891c <__any_on+0x70>
   888f4:	1085883a 	add	r2,r2,r2
   888f8:	1085883a 	add	r2,r2,r2
   888fc:	294007cc 	andi	r5,r5,31
   88900:	2087883a 	add	r3,r4,r2
   88904:	283ff026 	beq	r5,zero,888c8 <__alt_data_end+0xfffa6e48>
   88908:	19800017 	ldw	r6,0(r3)
   8890c:	3144d83a 	srl	r2,r6,r5
   88910:	114a983a 	sll	r5,r2,r5
   88914:	317ff41e 	bne	r6,r5,888e8 <__alt_data_end+0xfffa6e68>
   88918:	003feb06 	br	888c8 <__alt_data_end+0xfffa6e48>
   8891c:	1085883a 	add	r2,r2,r2
   88920:	1085883a 	add	r2,r2,r2
   88924:	2087883a 	add	r3,r4,r2
   88928:	003fe706 	br	888c8 <__alt_data_end+0xfffa6e48>
   8892c:	f800283a 	ret
   88930:	0005883a 	mov	r2,zero
   88934:	f800283a 	ret

00088938 <_realloc_r>:
   88938:	defff604 	addi	sp,sp,-40
   8893c:	dc800215 	stw	r18,8(sp)
   88940:	dfc00915 	stw	ra,36(sp)
   88944:	df000815 	stw	fp,32(sp)
   88948:	ddc00715 	stw	r23,28(sp)
   8894c:	dd800615 	stw	r22,24(sp)
   88950:	dd400515 	stw	r21,20(sp)
   88954:	dd000415 	stw	r20,16(sp)
   88958:	dcc00315 	stw	r19,12(sp)
   8895c:	dc400115 	stw	r17,4(sp)
   88960:	dc000015 	stw	r16,0(sp)
   88964:	3025883a 	mov	r18,r6
   88968:	2800b726 	beq	r5,zero,88c48 <_realloc_r+0x310>
   8896c:	282b883a 	mov	r21,r5
   88970:	2029883a 	mov	r20,r4
   88974:	008ee000 	call	8ee00 <__malloc_lock>
   88978:	a8bfff17 	ldw	r2,-4(r21)
   8897c:	043fff04 	movi	r16,-4
   88980:	90c002c4 	addi	r3,r18,11
   88984:	01000584 	movi	r4,22
   88988:	acfffe04 	addi	r19,r21,-8
   8898c:	1420703a 	and	r16,r2,r16
   88990:	20c0332e 	bgeu	r4,r3,88a60 <_realloc_r+0x128>
   88994:	047ffe04 	movi	r17,-8
   88998:	1c62703a 	and	r17,r3,r17
   8899c:	8807883a 	mov	r3,r17
   889a0:	88005816 	blt	r17,zero,88b04 <_realloc_r+0x1cc>
   889a4:	8c805736 	bltu	r17,r18,88b04 <_realloc_r+0x1cc>
   889a8:	80c0300e 	bge	r16,r3,88a6c <_realloc_r+0x134>
   889ac:	07000274 	movhi	fp,9
   889b0:	e7061604 	addi	fp,fp,6232
   889b4:	e1c00217 	ldw	r7,8(fp)
   889b8:	9c09883a 	add	r4,r19,r16
   889bc:	22000117 	ldw	r8,4(r4)
   889c0:	21c06326 	beq	r4,r7,88b50 <_realloc_r+0x218>
   889c4:	017fff84 	movi	r5,-2
   889c8:	414a703a 	and	r5,r8,r5
   889cc:	214b883a 	add	r5,r4,r5
   889d0:	29800117 	ldw	r6,4(r5)
   889d4:	3180004c 	andi	r6,r6,1
   889d8:	30003f26 	beq	r6,zero,88ad8 <_realloc_r+0x1a0>
   889dc:	1080004c 	andi	r2,r2,1
   889e0:	10008326 	beq	r2,zero,88bf0 <_realloc_r+0x2b8>
   889e4:	900b883a 	mov	r5,r18
   889e8:	a009883a 	mov	r4,r20
   889ec:	0086c800 	call	86c80 <_malloc_r>
   889f0:	1025883a 	mov	r18,r2
   889f4:	10011e26 	beq	r2,zero,88e70 <_realloc_r+0x538>
   889f8:	a93fff17 	ldw	r4,-4(r21)
   889fc:	10fffe04 	addi	r3,r2,-8
   88a00:	00bfff84 	movi	r2,-2
   88a04:	2084703a 	and	r2,r4,r2
   88a08:	9885883a 	add	r2,r19,r2
   88a0c:	1880ee26 	beq	r3,r2,88dc8 <_realloc_r+0x490>
   88a10:	81bfff04 	addi	r6,r16,-4
   88a14:	00800904 	movi	r2,36
   88a18:	1180b836 	bltu	r2,r6,88cfc <_realloc_r+0x3c4>
   88a1c:	00c004c4 	movi	r3,19
   88a20:	19809636 	bltu	r3,r6,88c7c <_realloc_r+0x344>
   88a24:	9005883a 	mov	r2,r18
   88a28:	a807883a 	mov	r3,r21
   88a2c:	19000017 	ldw	r4,0(r3)
   88a30:	11000015 	stw	r4,0(r2)
   88a34:	19000117 	ldw	r4,4(r3)
   88a38:	11000115 	stw	r4,4(r2)
   88a3c:	18c00217 	ldw	r3,8(r3)
   88a40:	10c00215 	stw	r3,8(r2)
   88a44:	a80b883a 	mov	r5,r21
   88a48:	a009883a 	mov	r4,r20
   88a4c:	00860380 	call	86038 <_free_r>
   88a50:	a009883a 	mov	r4,r20
   88a54:	008ee240 	call	8ee24 <__malloc_unlock>
   88a58:	9005883a 	mov	r2,r18
   88a5c:	00001206 	br	88aa8 <_realloc_r+0x170>
   88a60:	00c00404 	movi	r3,16
   88a64:	1823883a 	mov	r17,r3
   88a68:	003fce06 	br	889a4 <__alt_data_end+0xfffa6f24>
   88a6c:	a825883a 	mov	r18,r21
   88a70:	8445c83a 	sub	r2,r16,r17
   88a74:	00c003c4 	movi	r3,15
   88a78:	18802636 	bltu	r3,r2,88b14 <_realloc_r+0x1dc>
   88a7c:	99800117 	ldw	r6,4(r19)
   88a80:	9c07883a 	add	r3,r19,r16
   88a84:	3180004c 	andi	r6,r6,1
   88a88:	3420b03a 	or	r16,r6,r16
   88a8c:	9c000115 	stw	r16,4(r19)
   88a90:	18800117 	ldw	r2,4(r3)
   88a94:	10800054 	ori	r2,r2,1
   88a98:	18800115 	stw	r2,4(r3)
   88a9c:	a009883a 	mov	r4,r20
   88aa0:	008ee240 	call	8ee24 <__malloc_unlock>
   88aa4:	9005883a 	mov	r2,r18
   88aa8:	dfc00917 	ldw	ra,36(sp)
   88aac:	df000817 	ldw	fp,32(sp)
   88ab0:	ddc00717 	ldw	r23,28(sp)
   88ab4:	dd800617 	ldw	r22,24(sp)
   88ab8:	dd400517 	ldw	r21,20(sp)
   88abc:	dd000417 	ldw	r20,16(sp)
   88ac0:	dcc00317 	ldw	r19,12(sp)
   88ac4:	dc800217 	ldw	r18,8(sp)
   88ac8:	dc400117 	ldw	r17,4(sp)
   88acc:	dc000017 	ldw	r16,0(sp)
   88ad0:	dec00a04 	addi	sp,sp,40
   88ad4:	f800283a 	ret
   88ad8:	017fff04 	movi	r5,-4
   88adc:	414a703a 	and	r5,r8,r5
   88ae0:	814d883a 	add	r6,r16,r5
   88ae4:	30c01f16 	blt	r6,r3,88b64 <_realloc_r+0x22c>
   88ae8:	20800317 	ldw	r2,12(r4)
   88aec:	20c00217 	ldw	r3,8(r4)
   88af0:	a825883a 	mov	r18,r21
   88af4:	3021883a 	mov	r16,r6
   88af8:	18800315 	stw	r2,12(r3)
   88afc:	10c00215 	stw	r3,8(r2)
   88b00:	003fdb06 	br	88a70 <__alt_data_end+0xfffa6ff0>
   88b04:	00800304 	movi	r2,12
   88b08:	a0800015 	stw	r2,0(r20)
   88b0c:	0005883a 	mov	r2,zero
   88b10:	003fe506 	br	88aa8 <__alt_data_end+0xfffa7028>
   88b14:	98c00117 	ldw	r3,4(r19)
   88b18:	9c4b883a 	add	r5,r19,r17
   88b1c:	11000054 	ori	r4,r2,1
   88b20:	18c0004c 	andi	r3,r3,1
   88b24:	1c62b03a 	or	r17,r3,r17
   88b28:	9c400115 	stw	r17,4(r19)
   88b2c:	29000115 	stw	r4,4(r5)
   88b30:	2885883a 	add	r2,r5,r2
   88b34:	10c00117 	ldw	r3,4(r2)
   88b38:	29400204 	addi	r5,r5,8
   88b3c:	a009883a 	mov	r4,r20
   88b40:	18c00054 	ori	r3,r3,1
   88b44:	10c00115 	stw	r3,4(r2)
   88b48:	00860380 	call	86038 <_free_r>
   88b4c:	003fd306 	br	88a9c <__alt_data_end+0xfffa701c>
   88b50:	017fff04 	movi	r5,-4
   88b54:	414a703a 	and	r5,r8,r5
   88b58:	89800404 	addi	r6,r17,16
   88b5c:	8151883a 	add	r8,r16,r5
   88b60:	4180590e 	bge	r8,r6,88cc8 <_realloc_r+0x390>
   88b64:	1080004c 	andi	r2,r2,1
   88b68:	103f9e1e 	bne	r2,zero,889e4 <__alt_data_end+0xfffa6f64>
   88b6c:	adbffe17 	ldw	r22,-8(r21)
   88b70:	00bfff04 	movi	r2,-4
   88b74:	9dadc83a 	sub	r22,r19,r22
   88b78:	b1800117 	ldw	r6,4(r22)
   88b7c:	3084703a 	and	r2,r6,r2
   88b80:	20002026 	beq	r4,zero,88c04 <_realloc_r+0x2cc>
   88b84:	80af883a 	add	r23,r16,r2
   88b88:	b96f883a 	add	r23,r23,r5
   88b8c:	21c05f26 	beq	r4,r7,88d0c <_realloc_r+0x3d4>
   88b90:	b8c01c16 	blt	r23,r3,88c04 <_realloc_r+0x2cc>
   88b94:	20800317 	ldw	r2,12(r4)
   88b98:	20c00217 	ldw	r3,8(r4)
   88b9c:	81bfff04 	addi	r6,r16,-4
   88ba0:	01000904 	movi	r4,36
   88ba4:	18800315 	stw	r2,12(r3)
   88ba8:	10c00215 	stw	r3,8(r2)
   88bac:	b0c00217 	ldw	r3,8(r22)
   88bb0:	b0800317 	ldw	r2,12(r22)
   88bb4:	b4800204 	addi	r18,r22,8
   88bb8:	18800315 	stw	r2,12(r3)
   88bbc:	10c00215 	stw	r3,8(r2)
   88bc0:	21801b36 	bltu	r4,r6,88c30 <_realloc_r+0x2f8>
   88bc4:	008004c4 	movi	r2,19
   88bc8:	1180352e 	bgeu	r2,r6,88ca0 <_realloc_r+0x368>
   88bcc:	a8800017 	ldw	r2,0(r21)
   88bd0:	b0800215 	stw	r2,8(r22)
   88bd4:	a8800117 	ldw	r2,4(r21)
   88bd8:	b0800315 	stw	r2,12(r22)
   88bdc:	008006c4 	movi	r2,27
   88be0:	11807f36 	bltu	r2,r6,88de0 <_realloc_r+0x4a8>
   88be4:	b0800404 	addi	r2,r22,16
   88be8:	ad400204 	addi	r21,r21,8
   88bec:	00002d06 	br	88ca4 <_realloc_r+0x36c>
   88bf0:	adbffe17 	ldw	r22,-8(r21)
   88bf4:	00bfff04 	movi	r2,-4
   88bf8:	9dadc83a 	sub	r22,r19,r22
   88bfc:	b1000117 	ldw	r4,4(r22)
   88c00:	2084703a 	and	r2,r4,r2
   88c04:	b03f7726 	beq	r22,zero,889e4 <__alt_data_end+0xfffa6f64>
   88c08:	80af883a 	add	r23,r16,r2
   88c0c:	b8ff7516 	blt	r23,r3,889e4 <__alt_data_end+0xfffa6f64>
   88c10:	b0800317 	ldw	r2,12(r22)
   88c14:	b0c00217 	ldw	r3,8(r22)
   88c18:	81bfff04 	addi	r6,r16,-4
   88c1c:	01000904 	movi	r4,36
   88c20:	18800315 	stw	r2,12(r3)
   88c24:	10c00215 	stw	r3,8(r2)
   88c28:	b4800204 	addi	r18,r22,8
   88c2c:	21bfe52e 	bgeu	r4,r6,88bc4 <__alt_data_end+0xfffa7144>
   88c30:	a80b883a 	mov	r5,r21
   88c34:	9009883a 	mov	r4,r18
   88c38:	00876b80 	call	876b8 <memmove>
   88c3c:	b821883a 	mov	r16,r23
   88c40:	b027883a 	mov	r19,r22
   88c44:	003f8a06 	br	88a70 <__alt_data_end+0xfffa6ff0>
   88c48:	300b883a 	mov	r5,r6
   88c4c:	dfc00917 	ldw	ra,36(sp)
   88c50:	df000817 	ldw	fp,32(sp)
   88c54:	ddc00717 	ldw	r23,28(sp)
   88c58:	dd800617 	ldw	r22,24(sp)
   88c5c:	dd400517 	ldw	r21,20(sp)
   88c60:	dd000417 	ldw	r20,16(sp)
   88c64:	dcc00317 	ldw	r19,12(sp)
   88c68:	dc800217 	ldw	r18,8(sp)
   88c6c:	dc400117 	ldw	r17,4(sp)
   88c70:	dc000017 	ldw	r16,0(sp)
   88c74:	dec00a04 	addi	sp,sp,40
   88c78:	0086c801 	jmpi	86c80 <_malloc_r>
   88c7c:	a8c00017 	ldw	r3,0(r21)
   88c80:	90c00015 	stw	r3,0(r18)
   88c84:	a8c00117 	ldw	r3,4(r21)
   88c88:	90c00115 	stw	r3,4(r18)
   88c8c:	00c006c4 	movi	r3,27
   88c90:	19804536 	bltu	r3,r6,88da8 <_realloc_r+0x470>
   88c94:	90800204 	addi	r2,r18,8
   88c98:	a8c00204 	addi	r3,r21,8
   88c9c:	003f6306 	br	88a2c <__alt_data_end+0xfffa6fac>
   88ca0:	9005883a 	mov	r2,r18
   88ca4:	a8c00017 	ldw	r3,0(r21)
   88ca8:	b821883a 	mov	r16,r23
   88cac:	b027883a 	mov	r19,r22
   88cb0:	10c00015 	stw	r3,0(r2)
   88cb4:	a8c00117 	ldw	r3,4(r21)
   88cb8:	10c00115 	stw	r3,4(r2)
   88cbc:	a8c00217 	ldw	r3,8(r21)
   88cc0:	10c00215 	stw	r3,8(r2)
   88cc4:	003f6a06 	br	88a70 <__alt_data_end+0xfffa6ff0>
   88cc8:	9c67883a 	add	r19,r19,r17
   88ccc:	4445c83a 	sub	r2,r8,r17
   88cd0:	e4c00215 	stw	r19,8(fp)
   88cd4:	10800054 	ori	r2,r2,1
   88cd8:	98800115 	stw	r2,4(r19)
   88cdc:	a8bfff17 	ldw	r2,-4(r21)
   88ce0:	a009883a 	mov	r4,r20
   88ce4:	1080004c 	andi	r2,r2,1
   88ce8:	1462b03a 	or	r17,r2,r17
   88cec:	ac7fff15 	stw	r17,-4(r21)
   88cf0:	008ee240 	call	8ee24 <__malloc_unlock>
   88cf4:	a805883a 	mov	r2,r21
   88cf8:	003f6b06 	br	88aa8 <__alt_data_end+0xfffa7028>
   88cfc:	a80b883a 	mov	r5,r21
   88d00:	9009883a 	mov	r4,r18
   88d04:	00876b80 	call	876b8 <memmove>
   88d08:	003f4e06 	br	88a44 <__alt_data_end+0xfffa6fc4>
   88d0c:	89000404 	addi	r4,r17,16
   88d10:	b93fbc16 	blt	r23,r4,88c04 <__alt_data_end+0xfffa7184>
   88d14:	b0800317 	ldw	r2,12(r22)
   88d18:	b0c00217 	ldw	r3,8(r22)
   88d1c:	81bfff04 	addi	r6,r16,-4
   88d20:	01000904 	movi	r4,36
   88d24:	18800315 	stw	r2,12(r3)
   88d28:	10c00215 	stw	r3,8(r2)
   88d2c:	b4800204 	addi	r18,r22,8
   88d30:	21804336 	bltu	r4,r6,88e40 <_realloc_r+0x508>
   88d34:	008004c4 	movi	r2,19
   88d38:	11803f2e 	bgeu	r2,r6,88e38 <_realloc_r+0x500>
   88d3c:	a8800017 	ldw	r2,0(r21)
   88d40:	b0800215 	stw	r2,8(r22)
   88d44:	a8800117 	ldw	r2,4(r21)
   88d48:	b0800315 	stw	r2,12(r22)
   88d4c:	008006c4 	movi	r2,27
   88d50:	11803f36 	bltu	r2,r6,88e50 <_realloc_r+0x518>
   88d54:	b0800404 	addi	r2,r22,16
   88d58:	ad400204 	addi	r21,r21,8
   88d5c:	a8c00017 	ldw	r3,0(r21)
   88d60:	10c00015 	stw	r3,0(r2)
   88d64:	a8c00117 	ldw	r3,4(r21)
   88d68:	10c00115 	stw	r3,4(r2)
   88d6c:	a8c00217 	ldw	r3,8(r21)
   88d70:	10c00215 	stw	r3,8(r2)
   88d74:	b447883a 	add	r3,r22,r17
   88d78:	bc45c83a 	sub	r2,r23,r17
   88d7c:	e0c00215 	stw	r3,8(fp)
   88d80:	10800054 	ori	r2,r2,1
   88d84:	18800115 	stw	r2,4(r3)
   88d88:	b0800117 	ldw	r2,4(r22)
   88d8c:	a009883a 	mov	r4,r20
   88d90:	1080004c 	andi	r2,r2,1
   88d94:	1462b03a 	or	r17,r2,r17
   88d98:	b4400115 	stw	r17,4(r22)
   88d9c:	008ee240 	call	8ee24 <__malloc_unlock>
   88da0:	9005883a 	mov	r2,r18
   88da4:	003f4006 	br	88aa8 <__alt_data_end+0xfffa7028>
   88da8:	a8c00217 	ldw	r3,8(r21)
   88dac:	90c00215 	stw	r3,8(r18)
   88db0:	a8c00317 	ldw	r3,12(r21)
   88db4:	90c00315 	stw	r3,12(r18)
   88db8:	30801126 	beq	r6,r2,88e00 <_realloc_r+0x4c8>
   88dbc:	90800404 	addi	r2,r18,16
   88dc0:	a8c00404 	addi	r3,r21,16
   88dc4:	003f1906 	br	88a2c <__alt_data_end+0xfffa6fac>
   88dc8:	90ffff17 	ldw	r3,-4(r18)
   88dcc:	00bfff04 	movi	r2,-4
   88dd0:	a825883a 	mov	r18,r21
   88dd4:	1884703a 	and	r2,r3,r2
   88dd8:	80a1883a 	add	r16,r16,r2
   88ddc:	003f2406 	br	88a70 <__alt_data_end+0xfffa6ff0>
   88de0:	a8800217 	ldw	r2,8(r21)
   88de4:	b0800415 	stw	r2,16(r22)
   88de8:	a8800317 	ldw	r2,12(r21)
   88dec:	b0800515 	stw	r2,20(r22)
   88df0:	31000a26 	beq	r6,r4,88e1c <_realloc_r+0x4e4>
   88df4:	b0800604 	addi	r2,r22,24
   88df8:	ad400404 	addi	r21,r21,16
   88dfc:	003fa906 	br	88ca4 <__alt_data_end+0xfffa7224>
   88e00:	a9000417 	ldw	r4,16(r21)
   88e04:	90800604 	addi	r2,r18,24
   88e08:	a8c00604 	addi	r3,r21,24
   88e0c:	91000415 	stw	r4,16(r18)
   88e10:	a9000517 	ldw	r4,20(r21)
   88e14:	91000515 	stw	r4,20(r18)
   88e18:	003f0406 	br	88a2c <__alt_data_end+0xfffa6fac>
   88e1c:	a8c00417 	ldw	r3,16(r21)
   88e20:	ad400604 	addi	r21,r21,24
   88e24:	b0800804 	addi	r2,r22,32
   88e28:	b0c00615 	stw	r3,24(r22)
   88e2c:	a8ffff17 	ldw	r3,-4(r21)
   88e30:	b0c00715 	stw	r3,28(r22)
   88e34:	003f9b06 	br	88ca4 <__alt_data_end+0xfffa7224>
   88e38:	9005883a 	mov	r2,r18
   88e3c:	003fc706 	br	88d5c <__alt_data_end+0xfffa72dc>
   88e40:	a80b883a 	mov	r5,r21
   88e44:	9009883a 	mov	r4,r18
   88e48:	00876b80 	call	876b8 <memmove>
   88e4c:	003fc906 	br	88d74 <__alt_data_end+0xfffa72f4>
   88e50:	a8800217 	ldw	r2,8(r21)
   88e54:	b0800415 	stw	r2,16(r22)
   88e58:	a8800317 	ldw	r2,12(r21)
   88e5c:	b0800515 	stw	r2,20(r22)
   88e60:	31000726 	beq	r6,r4,88e80 <_realloc_r+0x548>
   88e64:	b0800604 	addi	r2,r22,24
   88e68:	ad400404 	addi	r21,r21,16
   88e6c:	003fbb06 	br	88d5c <__alt_data_end+0xfffa72dc>
   88e70:	a009883a 	mov	r4,r20
   88e74:	008ee240 	call	8ee24 <__malloc_unlock>
   88e78:	0005883a 	mov	r2,zero
   88e7c:	003f0a06 	br	88aa8 <__alt_data_end+0xfffa7028>
   88e80:	a8c00417 	ldw	r3,16(r21)
   88e84:	ad400604 	addi	r21,r21,24
   88e88:	b0800804 	addi	r2,r22,32
   88e8c:	b0c00615 	stw	r3,24(r22)
   88e90:	a8ffff17 	ldw	r3,-4(r21)
   88e94:	b0c00715 	stw	r3,28(r22)
   88e98:	003fb006 	br	88d5c <__alt_data_end+0xfffa72dc>

00088e9c <__fpclassifyd>:
   88e9c:	00a00034 	movhi	r2,32768
   88ea0:	10bfffc4 	addi	r2,r2,-1
   88ea4:	2884703a 	and	r2,r5,r2
   88ea8:	10000726 	beq	r2,zero,88ec8 <__fpclassifyd+0x2c>
   88eac:	00fffc34 	movhi	r3,65520
   88eb0:	019ff834 	movhi	r6,32736
   88eb4:	28c7883a 	add	r3,r5,r3
   88eb8:	31bfffc4 	addi	r6,r6,-1
   88ebc:	30c00536 	bltu	r6,r3,88ed4 <__fpclassifyd+0x38>
   88ec0:	00800104 	movi	r2,4
   88ec4:	f800283a 	ret
   88ec8:	2000021e 	bne	r4,zero,88ed4 <__fpclassifyd+0x38>
   88ecc:	00800084 	movi	r2,2
   88ed0:	f800283a 	ret
   88ed4:	00dffc34 	movhi	r3,32752
   88ed8:	019ff834 	movhi	r6,32736
   88edc:	28cb883a 	add	r5,r5,r3
   88ee0:	31bfffc4 	addi	r6,r6,-1
   88ee4:	317ff62e 	bgeu	r6,r5,88ec0 <__alt_data_end+0xfffa7440>
   88ee8:	01400434 	movhi	r5,16
   88eec:	297fffc4 	addi	r5,r5,-1
   88ef0:	28800236 	bltu	r5,r2,88efc <__fpclassifyd+0x60>
   88ef4:	008000c4 	movi	r2,3
   88ef8:	f800283a 	ret
   88efc:	10c00226 	beq	r2,r3,88f08 <__fpclassifyd+0x6c>
   88f00:	0005883a 	mov	r2,zero
   88f04:	f800283a 	ret
   88f08:	2005003a 	cmpeq	r2,r4,zero
   88f0c:	f800283a 	ret

00088f10 <_sbrk_r>:
   88f10:	defffd04 	addi	sp,sp,-12
   88f14:	dc000015 	stw	r16,0(sp)
   88f18:	04000274 	movhi	r16,9
   88f1c:	dc400115 	stw	r17,4(sp)
   88f20:	8412ed04 	addi	r16,r16,19380
   88f24:	2023883a 	mov	r17,r4
   88f28:	2809883a 	mov	r4,r5
   88f2c:	dfc00215 	stw	ra,8(sp)
   88f30:	80000015 	stw	zero,0(r16)
   88f34:	008efe40 	call	8efe4 <sbrk>
   88f38:	00ffffc4 	movi	r3,-1
   88f3c:	10c00526 	beq	r2,r3,88f54 <_sbrk_r+0x44>
   88f40:	dfc00217 	ldw	ra,8(sp)
   88f44:	dc400117 	ldw	r17,4(sp)
   88f48:	dc000017 	ldw	r16,0(sp)
   88f4c:	dec00304 	addi	sp,sp,12
   88f50:	f800283a 	ret
   88f54:	80c00017 	ldw	r3,0(r16)
   88f58:	183ff926 	beq	r3,zero,88f40 <__alt_data_end+0xfffa74c0>
   88f5c:	88c00015 	stw	r3,0(r17)
   88f60:	003ff706 	br	88f40 <__alt_data_end+0xfffa74c0>

00088f64 <__sread>:
   88f64:	defffe04 	addi	sp,sp,-8
   88f68:	dc000015 	stw	r16,0(sp)
   88f6c:	2821883a 	mov	r16,r5
   88f70:	2940038f 	ldh	r5,14(r5)
   88f74:	dfc00115 	stw	ra,4(sp)
   88f78:	008ad580 	call	8ad58 <_read_r>
   88f7c:	10000716 	blt	r2,zero,88f9c <__sread+0x38>
   88f80:	80c01417 	ldw	r3,80(r16)
   88f84:	1887883a 	add	r3,r3,r2
   88f88:	80c01415 	stw	r3,80(r16)
   88f8c:	dfc00117 	ldw	ra,4(sp)
   88f90:	dc000017 	ldw	r16,0(sp)
   88f94:	dec00204 	addi	sp,sp,8
   88f98:	f800283a 	ret
   88f9c:	80c0030b 	ldhu	r3,12(r16)
   88fa0:	18fbffcc 	andi	r3,r3,61439
   88fa4:	80c0030d 	sth	r3,12(r16)
   88fa8:	dfc00117 	ldw	ra,4(sp)
   88fac:	dc000017 	ldw	r16,0(sp)
   88fb0:	dec00204 	addi	sp,sp,8
   88fb4:	f800283a 	ret

00088fb8 <__seofread>:
   88fb8:	0005883a 	mov	r2,zero
   88fbc:	f800283a 	ret

00088fc0 <__swrite>:
   88fc0:	2880030b 	ldhu	r2,12(r5)
   88fc4:	defffb04 	addi	sp,sp,-20
   88fc8:	dcc00315 	stw	r19,12(sp)
   88fcc:	dc800215 	stw	r18,8(sp)
   88fd0:	dc400115 	stw	r17,4(sp)
   88fd4:	dc000015 	stw	r16,0(sp)
   88fd8:	dfc00415 	stw	ra,16(sp)
   88fdc:	10c0400c 	andi	r3,r2,256
   88fe0:	2821883a 	mov	r16,r5
   88fe4:	2023883a 	mov	r17,r4
   88fe8:	3025883a 	mov	r18,r6
   88fec:	3827883a 	mov	r19,r7
   88ff0:	18000526 	beq	r3,zero,89008 <__swrite+0x48>
   88ff4:	2940038f 	ldh	r5,14(r5)
   88ff8:	01c00084 	movi	r7,2
   88ffc:	000d883a 	mov	r6,zero
   89000:	008acf80 	call	8acf8 <_lseek_r>
   89004:	8080030b 	ldhu	r2,12(r16)
   89008:	8140038f 	ldh	r5,14(r16)
   8900c:	10bbffcc 	andi	r2,r2,61439
   89010:	980f883a 	mov	r7,r19
   89014:	900d883a 	mov	r6,r18
   89018:	8809883a 	mov	r4,r17
   8901c:	8080030d 	sth	r2,12(r16)
   89020:	dfc00417 	ldw	ra,16(sp)
   89024:	dcc00317 	ldw	r19,12(sp)
   89028:	dc800217 	ldw	r18,8(sp)
   8902c:	dc400117 	ldw	r17,4(sp)
   89030:	dc000017 	ldw	r16,0(sp)
   89034:	dec00504 	addi	sp,sp,20
   89038:	008a7c41 	jmpi	8a7c4 <_write_r>

0008903c <__sseek>:
   8903c:	defffe04 	addi	sp,sp,-8
   89040:	dc000015 	stw	r16,0(sp)
   89044:	2821883a 	mov	r16,r5
   89048:	2940038f 	ldh	r5,14(r5)
   8904c:	dfc00115 	stw	ra,4(sp)
   89050:	008acf80 	call	8acf8 <_lseek_r>
   89054:	00ffffc4 	movi	r3,-1
   89058:	10c00826 	beq	r2,r3,8907c <__sseek+0x40>
   8905c:	80c0030b 	ldhu	r3,12(r16)
   89060:	80801415 	stw	r2,80(r16)
   89064:	18c40014 	ori	r3,r3,4096
   89068:	80c0030d 	sth	r3,12(r16)
   8906c:	dfc00117 	ldw	ra,4(sp)
   89070:	dc000017 	ldw	r16,0(sp)
   89074:	dec00204 	addi	sp,sp,8
   89078:	f800283a 	ret
   8907c:	80c0030b 	ldhu	r3,12(r16)
   89080:	18fbffcc 	andi	r3,r3,61439
   89084:	80c0030d 	sth	r3,12(r16)
   89088:	dfc00117 	ldw	ra,4(sp)
   8908c:	dc000017 	ldw	r16,0(sp)
   89090:	dec00204 	addi	sp,sp,8
   89094:	f800283a 	ret

00089098 <__sclose>:
   89098:	2940038f 	ldh	r5,14(r5)
   8909c:	008a8241 	jmpi	8a824 <_close_r>

000890a0 <strcmp>:
   890a0:	2144b03a 	or	r2,r4,r5
   890a4:	108000cc 	andi	r2,r2,3
   890a8:	1000171e 	bne	r2,zero,89108 <strcmp+0x68>
   890ac:	20800017 	ldw	r2,0(r4)
   890b0:	28c00017 	ldw	r3,0(r5)
   890b4:	10c0141e 	bne	r2,r3,89108 <strcmp+0x68>
   890b8:	027fbff4 	movhi	r9,65279
   890bc:	4a7fbfc4 	addi	r9,r9,-257
   890c0:	0086303a 	nor	r3,zero,r2
   890c4:	02202074 	movhi	r8,32897
   890c8:	1245883a 	add	r2,r2,r9
   890cc:	42202004 	addi	r8,r8,-32640
   890d0:	10c4703a 	and	r2,r2,r3
   890d4:	1204703a 	and	r2,r2,r8
   890d8:	10000226 	beq	r2,zero,890e4 <strcmp+0x44>
   890dc:	00002306 	br	8916c <strcmp+0xcc>
   890e0:	1000221e 	bne	r2,zero,8916c <strcmp+0xcc>
   890e4:	21000104 	addi	r4,r4,4
   890e8:	20c00017 	ldw	r3,0(r4)
   890ec:	29400104 	addi	r5,r5,4
   890f0:	29800017 	ldw	r6,0(r5)
   890f4:	1a4f883a 	add	r7,r3,r9
   890f8:	00c4303a 	nor	r2,zero,r3
   890fc:	3884703a 	and	r2,r7,r2
   89100:	1204703a 	and	r2,r2,r8
   89104:	19bff626 	beq	r3,r6,890e0 <__alt_data_end+0xfffa7660>
   89108:	20800003 	ldbu	r2,0(r4)
   8910c:	10c03fcc 	andi	r3,r2,255
   89110:	18c0201c 	xori	r3,r3,128
   89114:	18ffe004 	addi	r3,r3,-128
   89118:	18000c26 	beq	r3,zero,8914c <strcmp+0xac>
   8911c:	29800007 	ldb	r6,0(r5)
   89120:	19800326 	beq	r3,r6,89130 <strcmp+0x90>
   89124:	00001306 	br	89174 <strcmp+0xd4>
   89128:	29800007 	ldb	r6,0(r5)
   8912c:	11800b1e 	bne	r2,r6,8915c <strcmp+0xbc>
   89130:	21000044 	addi	r4,r4,1
   89134:	20c00003 	ldbu	r3,0(r4)
   89138:	29400044 	addi	r5,r5,1
   8913c:	18803fcc 	andi	r2,r3,255
   89140:	1080201c 	xori	r2,r2,128
   89144:	10bfe004 	addi	r2,r2,-128
   89148:	103ff71e 	bne	r2,zero,89128 <__alt_data_end+0xfffa76a8>
   8914c:	0007883a 	mov	r3,zero
   89150:	28800003 	ldbu	r2,0(r5)
   89154:	1885c83a 	sub	r2,r3,r2
   89158:	f800283a 	ret
   8915c:	28800003 	ldbu	r2,0(r5)
   89160:	18c03fcc 	andi	r3,r3,255
   89164:	1885c83a 	sub	r2,r3,r2
   89168:	f800283a 	ret
   8916c:	0005883a 	mov	r2,zero
   89170:	f800283a 	ret
   89174:	10c03fcc 	andi	r3,r2,255
   89178:	003ff506 	br	89150 <__alt_data_end+0xfffa76d0>

0008917c <__sprint_r.part.0>:
   8917c:	28801917 	ldw	r2,100(r5)
   89180:	defff604 	addi	sp,sp,-40
   89184:	dd400515 	stw	r21,20(sp)
   89188:	dfc00915 	stw	ra,36(sp)
   8918c:	df000815 	stw	fp,32(sp)
   89190:	ddc00715 	stw	r23,28(sp)
   89194:	dd800615 	stw	r22,24(sp)
   89198:	dd000415 	stw	r20,16(sp)
   8919c:	dcc00315 	stw	r19,12(sp)
   891a0:	dc800215 	stw	r18,8(sp)
   891a4:	dc400115 	stw	r17,4(sp)
   891a8:	dc000015 	stw	r16,0(sp)
   891ac:	1088000c 	andi	r2,r2,8192
   891b0:	302b883a 	mov	r21,r6
   891b4:	10002e26 	beq	r2,zero,89270 <__sprint_r.part.0+0xf4>
   891b8:	30800217 	ldw	r2,8(r6)
   891bc:	35800017 	ldw	r22,0(r6)
   891c0:	10002926 	beq	r2,zero,89268 <__sprint_r.part.0+0xec>
   891c4:	2827883a 	mov	r19,r5
   891c8:	2029883a 	mov	r20,r4
   891cc:	b5c00104 	addi	r23,r22,4
   891d0:	04bfffc4 	movi	r18,-1
   891d4:	bc400017 	ldw	r17,0(r23)
   891d8:	b4000017 	ldw	r16,0(r22)
   891dc:	0039883a 	mov	fp,zero
   891e0:	8822d0ba 	srli	r17,r17,2
   891e4:	8800031e 	bne	r17,zero,891f4 <__sprint_r.part.0+0x78>
   891e8:	00001806 	br	8924c <__sprint_r.part.0+0xd0>
   891ec:	84000104 	addi	r16,r16,4
   891f0:	8f001526 	beq	r17,fp,89248 <__sprint_r.part.0+0xcc>
   891f4:	81400017 	ldw	r5,0(r16)
   891f8:	980d883a 	mov	r6,r19
   891fc:	a009883a 	mov	r4,r20
   89200:	008aba40 	call	8aba4 <_fputwc_r>
   89204:	e7000044 	addi	fp,fp,1
   89208:	14bff81e 	bne	r2,r18,891ec <__alt_data_end+0xfffa776c>
   8920c:	9005883a 	mov	r2,r18
   89210:	a8000215 	stw	zero,8(r21)
   89214:	a8000115 	stw	zero,4(r21)
   89218:	dfc00917 	ldw	ra,36(sp)
   8921c:	df000817 	ldw	fp,32(sp)
   89220:	ddc00717 	ldw	r23,28(sp)
   89224:	dd800617 	ldw	r22,24(sp)
   89228:	dd400517 	ldw	r21,20(sp)
   8922c:	dd000417 	ldw	r20,16(sp)
   89230:	dcc00317 	ldw	r19,12(sp)
   89234:	dc800217 	ldw	r18,8(sp)
   89238:	dc400117 	ldw	r17,4(sp)
   8923c:	dc000017 	ldw	r16,0(sp)
   89240:	dec00a04 	addi	sp,sp,40
   89244:	f800283a 	ret
   89248:	a8800217 	ldw	r2,8(r21)
   8924c:	8c63883a 	add	r17,r17,r17
   89250:	8c63883a 	add	r17,r17,r17
   89254:	1445c83a 	sub	r2,r2,r17
   89258:	a8800215 	stw	r2,8(r21)
   8925c:	b5800204 	addi	r22,r22,8
   89260:	bdc00204 	addi	r23,r23,8
   89264:	103fdb1e 	bne	r2,zero,891d4 <__alt_data_end+0xfffa7754>
   89268:	0005883a 	mov	r2,zero
   8926c:	003fe806 	br	89210 <__alt_data_end+0xfffa7790>
   89270:	00863480 	call	86348 <__sfvwrite_r>
   89274:	003fe606 	br	89210 <__alt_data_end+0xfffa7790>

00089278 <__sprint_r>:
   89278:	30c00217 	ldw	r3,8(r6)
   8927c:	18000126 	beq	r3,zero,89284 <__sprint_r+0xc>
   89280:	008917c1 	jmpi	8917c <__sprint_r.part.0>
   89284:	30000115 	stw	zero,4(r6)
   89288:	0005883a 	mov	r2,zero
   8928c:	f800283a 	ret

00089290 <___vfiprintf_internal_r>:
   89290:	deffc904 	addi	sp,sp,-220
   89294:	df003515 	stw	fp,212(sp)
   89298:	dd003115 	stw	r20,196(sp)
   8929c:	dfc03615 	stw	ra,216(sp)
   892a0:	ddc03415 	stw	r23,208(sp)
   892a4:	dd803315 	stw	r22,204(sp)
   892a8:	dd403215 	stw	r21,200(sp)
   892ac:	dcc03015 	stw	r19,192(sp)
   892b0:	dc802f15 	stw	r18,188(sp)
   892b4:	dc402e15 	stw	r17,184(sp)
   892b8:	dc002d15 	stw	r16,180(sp)
   892bc:	d9002015 	stw	r4,128(sp)
   892c0:	d9c02215 	stw	r7,136(sp)
   892c4:	2829883a 	mov	r20,r5
   892c8:	3039883a 	mov	fp,r6
   892cc:	20000226 	beq	r4,zero,892d8 <___vfiprintf_internal_r+0x48>
   892d0:	20800e17 	ldw	r2,56(r4)
   892d4:	1000cf26 	beq	r2,zero,89614 <___vfiprintf_internal_r+0x384>
   892d8:	a080030b 	ldhu	r2,12(r20)
   892dc:	10c8000c 	andi	r3,r2,8192
   892e0:	1800061e 	bne	r3,zero,892fc <___vfiprintf_internal_r+0x6c>
   892e4:	a1001917 	ldw	r4,100(r20)
   892e8:	00f7ffc4 	movi	r3,-8193
   892ec:	10880014 	ori	r2,r2,8192
   892f0:	20c6703a 	and	r3,r4,r3
   892f4:	a080030d 	sth	r2,12(r20)
   892f8:	a0c01915 	stw	r3,100(r20)
   892fc:	10c0020c 	andi	r3,r2,8
   89300:	1800a926 	beq	r3,zero,895a8 <___vfiprintf_internal_r+0x318>
   89304:	a0c00417 	ldw	r3,16(r20)
   89308:	1800a726 	beq	r3,zero,895a8 <___vfiprintf_internal_r+0x318>
   8930c:	1080068c 	andi	r2,r2,26
   89310:	00c00284 	movi	r3,10
   89314:	10c0ac26 	beq	r2,r3,895c8 <___vfiprintf_internal_r+0x338>
   89318:	da801a04 	addi	r10,sp,104
   8931c:	da801e15 	stw	r10,120(sp)
   89320:	d8801e17 	ldw	r2,120(sp)
   89324:	da8019c4 	addi	r10,sp,103
   89328:	05800274 	movhi	r22,9
   8932c:	05c00274 	movhi	r23,9
   89330:	da801f15 	stw	r10,124(sp)
   89334:	1295c83a 	sub	r10,r2,r10
   89338:	b5841904 	addi	r22,r22,4196
   8933c:	bdc41504 	addi	r23,r23,4180
   89340:	dec01a15 	stw	sp,104(sp)
   89344:	d8001c15 	stw	zero,112(sp)
   89348:	d8001b15 	stw	zero,108(sp)
   8934c:	d8002615 	stw	zero,152(sp)
   89350:	d8002315 	stw	zero,140(sp)
   89354:	da802715 	stw	r10,156(sp)
   89358:	d811883a 	mov	r8,sp
   8935c:	dd002115 	stw	r20,132(sp)
   89360:	e021883a 	mov	r16,fp
   89364:	80800007 	ldb	r2,0(r16)
   89368:	1003ea26 	beq	r2,zero,8a314 <___vfiprintf_internal_r+0x1084>
   8936c:	00c00944 	movi	r3,37
   89370:	8025883a 	mov	r18,r16
   89374:	10c0021e 	bne	r2,r3,89380 <___vfiprintf_internal_r+0xf0>
   89378:	00001606 	br	893d4 <___vfiprintf_internal_r+0x144>
   8937c:	10c00326 	beq	r2,r3,8938c <___vfiprintf_internal_r+0xfc>
   89380:	94800044 	addi	r18,r18,1
   89384:	90800007 	ldb	r2,0(r18)
   89388:	103ffc1e 	bne	r2,zero,8937c <__alt_data_end+0xfffa78fc>
   8938c:	9423c83a 	sub	r17,r18,r16
   89390:	88001026 	beq	r17,zero,893d4 <___vfiprintf_internal_r+0x144>
   89394:	d8c01c17 	ldw	r3,112(sp)
   89398:	d8801b17 	ldw	r2,108(sp)
   8939c:	44000015 	stw	r16,0(r8)
   893a0:	88c7883a 	add	r3,r17,r3
   893a4:	10800044 	addi	r2,r2,1
   893a8:	44400115 	stw	r17,4(r8)
   893ac:	d8c01c15 	stw	r3,112(sp)
   893b0:	d8801b15 	stw	r2,108(sp)
   893b4:	010001c4 	movi	r4,7
   893b8:	2080760e 	bge	r4,r2,89594 <___vfiprintf_internal_r+0x304>
   893bc:	1803821e 	bne	r3,zero,8a1c8 <___vfiprintf_internal_r+0xf38>
   893c0:	da802317 	ldw	r10,140(sp)
   893c4:	d8001b15 	stw	zero,108(sp)
   893c8:	d811883a 	mov	r8,sp
   893cc:	5455883a 	add	r10,r10,r17
   893d0:	da802315 	stw	r10,140(sp)
   893d4:	90800007 	ldb	r2,0(r18)
   893d8:	10044626 	beq	r2,zero,8a4f4 <___vfiprintf_internal_r+0x1264>
   893dc:	90c00047 	ldb	r3,1(r18)
   893e0:	94000044 	addi	r16,r18,1
   893e4:	d8001d85 	stb	zero,118(sp)
   893e8:	0009883a 	mov	r4,zero
   893ec:	000f883a 	mov	r7,zero
   893f0:	027fffc4 	movi	r9,-1
   893f4:	0023883a 	mov	r17,zero
   893f8:	0029883a 	mov	r20,zero
   893fc:	01401604 	movi	r5,88
   89400:	01800244 	movi	r6,9
   89404:	03400a84 	movi	r13,42
   89408:	03001b04 	movi	r12,108
   8940c:	84000044 	addi	r16,r16,1
   89410:	18bff804 	addi	r2,r3,-32
   89414:	28827336 	bltu	r5,r2,89de4 <___vfiprintf_internal_r+0xb54>
   89418:	100490ba 	slli	r2,r2,2
   8941c:	02800274 	movhi	r10,9
   89420:	52a50c04 	addi	r10,r10,-27600
   89424:	1285883a 	add	r2,r2,r10
   89428:	10800017 	ldw	r2,0(r2)
   8942c:	1000683a 	jmp	r2
   89430:	00089b18 	cmpnei	zero,zero,8812
   89434:	00089de4 	muli	zero,zero,8823
   89438:	00089de4 	muli	zero,zero,8823
   8943c:	00089b38 	rdprs	zero,zero,8812
   89440:	00089de4 	muli	zero,zero,8823
   89444:	00089de4 	muli	zero,zero,8823
   89448:	00089de4 	muli	zero,zero,8823
   8944c:	00089de4 	muli	zero,zero,8823
   89450:	00089de4 	muli	zero,zero,8823
   89454:	00089de4 	muli	zero,zero,8823
   89458:	00089d20 	cmpeqi	zero,zero,8820
   8945c:	00089d3c 	xorhi	zero,zero,8820
   89460:	00089de4 	muli	zero,zero,8823
   89464:	00089624 	muli	zero,zero,8792
   89468:	00089d4c 	andi	zero,zero,8821
   8946c:	00089de4 	muli	zero,zero,8823
   89470:	00089b44 	movi	zero,8813
   89474:	00089b50 	cmplti	zero,zero,8813
   89478:	00089b50 	cmplti	zero,zero,8813
   8947c:	00089b50 	cmplti	zero,zero,8813
   89480:	00089b50 	cmplti	zero,zero,8813
   89484:	00089b50 	cmplti	zero,zero,8813
   89488:	00089b50 	cmplti	zero,zero,8813
   8948c:	00089b50 	cmplti	zero,zero,8813
   89490:	00089b50 	cmplti	zero,zero,8813
   89494:	00089b50 	cmplti	zero,zero,8813
   89498:	00089de4 	muli	zero,zero,8823
   8949c:	00089de4 	muli	zero,zero,8823
   894a0:	00089de4 	muli	zero,zero,8823
   894a4:	00089de4 	muli	zero,zero,8823
   894a8:	00089de4 	muli	zero,zero,8823
   894ac:	00089de4 	muli	zero,zero,8823
   894b0:	00089de4 	muli	zero,zero,8823
   894b4:	00089de4 	muli	zero,zero,8823
   894b8:	00089de4 	muli	zero,zero,8823
   894bc:	00089de4 	muli	zero,zero,8823
   894c0:	00089b7c 	xorhi	zero,zero,8813
   894c4:	00089de4 	muli	zero,zero,8823
   894c8:	00089de4 	muli	zero,zero,8823
   894cc:	00089de4 	muli	zero,zero,8823
   894d0:	00089de4 	muli	zero,zero,8823
   894d4:	00089de4 	muli	zero,zero,8823
   894d8:	00089de4 	muli	zero,zero,8823
   894dc:	00089de4 	muli	zero,zero,8823
   894e0:	00089de4 	muli	zero,zero,8823
   894e4:	00089de4 	muli	zero,zero,8823
   894e8:	00089de4 	muli	zero,zero,8823
   894ec:	00089bb4 	movhi	zero,8814
   894f0:	00089de4 	muli	zero,zero,8823
   894f4:	00089de4 	muli	zero,zero,8823
   894f8:	00089de4 	muli	zero,zero,8823
   894fc:	00089de4 	muli	zero,zero,8823
   89500:	00089de4 	muli	zero,zero,8823
   89504:	00089c0c 	andi	zero,zero,8816
   89508:	00089de4 	muli	zero,zero,8823
   8950c:	00089de4 	muli	zero,zero,8823
   89510:	00089c7c 	xorhi	zero,zero,8817
   89514:	00089de4 	muli	zero,zero,8823
   89518:	00089de4 	muli	zero,zero,8823
   8951c:	00089de4 	muli	zero,zero,8823
   89520:	00089de4 	muli	zero,zero,8823
   89524:	00089de4 	muli	zero,zero,8823
   89528:	00089de4 	muli	zero,zero,8823
   8952c:	00089de4 	muli	zero,zero,8823
   89530:	00089de4 	muli	zero,zero,8823
   89534:	00089de4 	muli	zero,zero,8823
   89538:	00089de4 	muli	zero,zero,8823
   8953c:	00089a28 	cmpgeui	zero,zero,8808
   89540:	00089a54 	movui	zero,8809
   89544:	00089de4 	muli	zero,zero,8823
   89548:	00089de4 	muli	zero,zero,8823
   8954c:	00089de4 	muli	zero,zero,8823
   89550:	00089d8c 	andi	zero,zero,8822
   89554:	00089a54 	movui	zero,8809
   89558:	00089de4 	muli	zero,zero,8823
   8955c:	00089de4 	muli	zero,zero,8823
   89560:	000898e8 	cmpgeui	zero,zero,8803
   89564:	00089de4 	muli	zero,zero,8823
   89568:	000898f8 	rdprs	zero,zero,8803
   8956c:	00089934 	movhi	zero,8804
   89570:	00089630 	cmpltui	zero,zero,8792
   89574:	000898dc 	xori	zero,zero,8803
   89578:	00089de4 	muli	zero,zero,8823
   8957c:	00089cb8 	rdprs	zero,zero,8818
   89580:	00089de4 	muli	zero,zero,8823
   89584:	00089d10 	cmplti	zero,zero,8820
   89588:	00089de4 	muli	zero,zero,8823
   8958c:	00089de4 	muli	zero,zero,8823
   89590:	000899d4 	movui	zero,8807
   89594:	42000204 	addi	r8,r8,8
   89598:	da802317 	ldw	r10,140(sp)
   8959c:	5455883a 	add	r10,r10,r17
   895a0:	da802315 	stw	r10,140(sp)
   895a4:	003f8b06 	br	893d4 <__alt_data_end+0xfffa7954>
   895a8:	d9002017 	ldw	r4,128(sp)
   895ac:	a00b883a 	mov	r5,r20
   895b0:	0083ef00 	call	83ef0 <__swsetup_r>
   895b4:	1003b11e 	bne	r2,zero,8a47c <___vfiprintf_internal_r+0x11ec>
   895b8:	a080030b 	ldhu	r2,12(r20)
   895bc:	00c00284 	movi	r3,10
   895c0:	1080068c 	andi	r2,r2,26
   895c4:	10ff541e 	bne	r2,r3,89318 <__alt_data_end+0xfffa7898>
   895c8:	a080038f 	ldh	r2,14(r20)
   895cc:	103f5216 	blt	r2,zero,89318 <__alt_data_end+0xfffa7898>
   895d0:	d9c02217 	ldw	r7,136(sp)
   895d4:	d9002017 	ldw	r4,128(sp)
   895d8:	e00d883a 	mov	r6,fp
   895dc:	a00b883a 	mov	r5,r20
   895e0:	008a7080 	call	8a708 <__sbprintf>
   895e4:	dfc03617 	ldw	ra,216(sp)
   895e8:	df003517 	ldw	fp,212(sp)
   895ec:	ddc03417 	ldw	r23,208(sp)
   895f0:	dd803317 	ldw	r22,204(sp)
   895f4:	dd403217 	ldw	r21,200(sp)
   895f8:	dd003117 	ldw	r20,196(sp)
   895fc:	dcc03017 	ldw	r19,192(sp)
   89600:	dc802f17 	ldw	r18,188(sp)
   89604:	dc402e17 	ldw	r17,184(sp)
   89608:	dc002d17 	ldw	r16,180(sp)
   8960c:	dec03704 	addi	sp,sp,220
   89610:	f800283a 	ret
   89614:	0085ec40 	call	85ec4 <__sinit>
   89618:	003f2f06 	br	892d8 <__alt_data_end+0xfffa7858>
   8961c:	0463c83a 	sub	r17,zero,r17
   89620:	d8802215 	stw	r2,136(sp)
   89624:	a5000114 	ori	r20,r20,4
   89628:	80c00007 	ldb	r3,0(r16)
   8962c:	003f7706 	br	8940c <__alt_data_end+0xfffa798c>
   89630:	00800c04 	movi	r2,48
   89634:	da802217 	ldw	r10,136(sp)
   89638:	d8801d05 	stb	r2,116(sp)
   8963c:	00801e04 	movi	r2,120
   89640:	d8801d45 	stb	r2,117(sp)
   89644:	d8001d85 	stb	zero,118(sp)
   89648:	50c00104 	addi	r3,r10,4
   8964c:	54800017 	ldw	r18,0(r10)
   89650:	0027883a 	mov	r19,zero
   89654:	a0800094 	ori	r2,r20,2
   89658:	48030b16 	blt	r9,zero,8a288 <___vfiprintf_internal_r+0xff8>
   8965c:	00bfdfc4 	movi	r2,-129
   89660:	a096703a 	and	r11,r20,r2
   89664:	d8c02215 	stw	r3,136(sp)
   89668:	5d000094 	ori	r20,r11,2
   8966c:	90032b1e 	bne	r18,zero,8a31c <___vfiprintf_internal_r+0x108c>
   89670:	00800274 	movhi	r2,9
   89674:	1083b404 	addi	r2,r2,3792
   89678:	d8802615 	stw	r2,152(sp)
   8967c:	0039883a 	mov	fp,zero
   89680:	48017b1e 	bne	r9,zero,89c70 <___vfiprintf_internal_r+0x9e0>
   89684:	0013883a 	mov	r9,zero
   89688:	0027883a 	mov	r19,zero
   8968c:	dd401a04 	addi	r21,sp,104
   89690:	4825883a 	mov	r18,r9
   89694:	4cc0010e 	bge	r9,r19,8969c <___vfiprintf_internal_r+0x40c>
   89698:	9825883a 	mov	r18,r19
   8969c:	e7003fcc 	andi	fp,fp,255
   896a0:	e700201c 	xori	fp,fp,128
   896a4:	e73fe004 	addi	fp,fp,-128
   896a8:	e0000126 	beq	fp,zero,896b0 <___vfiprintf_internal_r+0x420>
   896ac:	94800044 	addi	r18,r18,1
   896b0:	a380008c 	andi	r14,r20,2
   896b4:	70000126 	beq	r14,zero,896bc <___vfiprintf_internal_r+0x42c>
   896b8:	94800084 	addi	r18,r18,2
   896bc:	a700210c 	andi	fp,r20,132
   896c0:	e001df1e 	bne	fp,zero,89e40 <___vfiprintf_internal_r+0xbb0>
   896c4:	8c87c83a 	sub	r3,r17,r18
   896c8:	00c1dd0e 	bge	zero,r3,89e40 <___vfiprintf_internal_r+0xbb0>
   896cc:	01c00404 	movi	r7,16
   896d0:	d8801c17 	ldw	r2,112(sp)
   896d4:	38c3ad0e 	bge	r7,r3,8a58c <___vfiprintf_internal_r+0x12fc>
   896d8:	02800274 	movhi	r10,9
   896dc:	52841904 	addi	r10,r10,4196
   896e0:	dc002915 	stw	r16,164(sp)
   896e4:	d9801b17 	ldw	r6,108(sp)
   896e8:	da802415 	stw	r10,144(sp)
   896ec:	03c001c4 	movi	r15,7
   896f0:	da402515 	stw	r9,148(sp)
   896f4:	db802815 	stw	r14,160(sp)
   896f8:	1821883a 	mov	r16,r3
   896fc:	00000506 	br	89714 <___vfiprintf_internal_r+0x484>
   89700:	31400084 	addi	r5,r6,2
   89704:	42000204 	addi	r8,r8,8
   89708:	200d883a 	mov	r6,r4
   8970c:	843ffc04 	addi	r16,r16,-16
   89710:	3c000d0e 	bge	r7,r16,89748 <___vfiprintf_internal_r+0x4b8>
   89714:	10800404 	addi	r2,r2,16
   89718:	31000044 	addi	r4,r6,1
   8971c:	45800015 	stw	r22,0(r8)
   89720:	41c00115 	stw	r7,4(r8)
   89724:	d8801c15 	stw	r2,112(sp)
   89728:	d9001b15 	stw	r4,108(sp)
   8972c:	793ff40e 	bge	r15,r4,89700 <__alt_data_end+0xfffa7c80>
   89730:	1001b51e 	bne	r2,zero,89e08 <___vfiprintf_internal_r+0xb78>
   89734:	843ffc04 	addi	r16,r16,-16
   89738:	000d883a 	mov	r6,zero
   8973c:	01400044 	movi	r5,1
   89740:	d811883a 	mov	r8,sp
   89744:	3c3ff316 	blt	r7,r16,89714 <__alt_data_end+0xfffa7c94>
   89748:	8007883a 	mov	r3,r16
   8974c:	da402517 	ldw	r9,148(sp)
   89750:	db802817 	ldw	r14,160(sp)
   89754:	dc002917 	ldw	r16,164(sp)
   89758:	da802417 	ldw	r10,144(sp)
   8975c:	1885883a 	add	r2,r3,r2
   89760:	40c00115 	stw	r3,4(r8)
   89764:	42800015 	stw	r10,0(r8)
   89768:	d8801c15 	stw	r2,112(sp)
   8976c:	d9401b15 	stw	r5,108(sp)
   89770:	00c001c4 	movi	r3,7
   89774:	19426016 	blt	r3,r5,8a0f8 <___vfiprintf_internal_r+0xe68>
   89778:	d8c01d87 	ldb	r3,118(sp)
   8977c:	42000204 	addi	r8,r8,8
   89780:	29000044 	addi	r4,r5,1
   89784:	1801b31e 	bne	r3,zero,89e54 <___vfiprintf_internal_r+0xbc4>
   89788:	7001c026 	beq	r14,zero,89e8c <___vfiprintf_internal_r+0xbfc>
   8978c:	d8c01d04 	addi	r3,sp,116
   89790:	10800084 	addi	r2,r2,2
   89794:	40c00015 	stw	r3,0(r8)
   89798:	00c00084 	movi	r3,2
   8979c:	40c00115 	stw	r3,4(r8)
   897a0:	d8801c15 	stw	r2,112(sp)
   897a4:	d9001b15 	stw	r4,108(sp)
   897a8:	00c001c4 	movi	r3,7
   897ac:	1902650e 	bge	r3,r4,8a144 <___vfiprintf_internal_r+0xeb4>
   897b0:	10029a1e 	bne	r2,zero,8a21c <___vfiprintf_internal_r+0xf8c>
   897b4:	00c02004 	movi	r3,128
   897b8:	01000044 	movi	r4,1
   897bc:	000b883a 	mov	r5,zero
   897c0:	d811883a 	mov	r8,sp
   897c4:	e0c1b31e 	bne	fp,r3,89e94 <___vfiprintf_internal_r+0xc04>
   897c8:	8cb9c83a 	sub	fp,r17,r18
   897cc:	0701b10e 	bge	zero,fp,89e94 <___vfiprintf_internal_r+0xc04>
   897d0:	01c00404 	movi	r7,16
   897d4:	3f03890e 	bge	r7,fp,8a5fc <___vfiprintf_internal_r+0x136c>
   897d8:	00c00274 	movhi	r3,9
   897dc:	18c41504 	addi	r3,r3,4180
   897e0:	d8c02415 	stw	r3,144(sp)
   897e4:	8007883a 	mov	r3,r16
   897e8:	034001c4 	movi	r13,7
   897ec:	e021883a 	mov	r16,fp
   897f0:	da402515 	stw	r9,148(sp)
   897f4:	1839883a 	mov	fp,r3
   897f8:	00000506 	br	89810 <___vfiprintf_internal_r+0x580>
   897fc:	29800084 	addi	r6,r5,2
   89800:	42000204 	addi	r8,r8,8
   89804:	180b883a 	mov	r5,r3
   89808:	843ffc04 	addi	r16,r16,-16
   8980c:	3c000d0e 	bge	r7,r16,89844 <___vfiprintf_internal_r+0x5b4>
   89810:	10800404 	addi	r2,r2,16
   89814:	28c00044 	addi	r3,r5,1
   89818:	45c00015 	stw	r23,0(r8)
   8981c:	41c00115 	stw	r7,4(r8)
   89820:	d8801c15 	stw	r2,112(sp)
   89824:	d8c01b15 	stw	r3,108(sp)
   89828:	68fff40e 	bge	r13,r3,897fc <__alt_data_end+0xfffa7d7c>
   8982c:	1002241e 	bne	r2,zero,8a0c0 <___vfiprintf_internal_r+0xe30>
   89830:	843ffc04 	addi	r16,r16,-16
   89834:	01800044 	movi	r6,1
   89838:	000b883a 	mov	r5,zero
   8983c:	d811883a 	mov	r8,sp
   89840:	3c3ff316 	blt	r7,r16,89810 <__alt_data_end+0xfffa7d90>
   89844:	da402517 	ldw	r9,148(sp)
   89848:	e007883a 	mov	r3,fp
   8984c:	8039883a 	mov	fp,r16
   89850:	1821883a 	mov	r16,r3
   89854:	d8c02417 	ldw	r3,144(sp)
   89858:	1705883a 	add	r2,r2,fp
   8985c:	47000115 	stw	fp,4(r8)
   89860:	40c00015 	stw	r3,0(r8)
   89864:	d8801c15 	stw	r2,112(sp)
   89868:	d9801b15 	stw	r6,108(sp)
   8986c:	00c001c4 	movi	r3,7
   89870:	19827616 	blt	r3,r6,8a24c <___vfiprintf_internal_r+0xfbc>
   89874:	4cf9c83a 	sub	fp,r9,r19
   89878:	42000204 	addi	r8,r8,8
   8987c:	31000044 	addi	r4,r6,1
   89880:	300b883a 	mov	r5,r6
   89884:	07018516 	blt	zero,fp,89e9c <___vfiprintf_internal_r+0xc0c>
   89888:	9885883a 	add	r2,r19,r2
   8988c:	45400015 	stw	r21,0(r8)
   89890:	44c00115 	stw	r19,4(r8)
   89894:	d8801c15 	stw	r2,112(sp)
   89898:	d9001b15 	stw	r4,108(sp)
   8989c:	00c001c4 	movi	r3,7
   898a0:	1901dd0e 	bge	r3,r4,8a018 <___vfiprintf_internal_r+0xd88>
   898a4:	1002401e 	bne	r2,zero,8a1a8 <___vfiprintf_internal_r+0xf18>
   898a8:	d8001b15 	stw	zero,108(sp)
   898ac:	a2c0010c 	andi	r11,r20,4
   898b0:	58000226 	beq	r11,zero,898bc <___vfiprintf_internal_r+0x62c>
   898b4:	8ca7c83a 	sub	r19,r17,r18
   898b8:	04c2f216 	blt	zero,r19,8a484 <___vfiprintf_internal_r+0x11f4>
   898bc:	8c80010e 	bge	r17,r18,898c4 <___vfiprintf_internal_r+0x634>
   898c0:	9023883a 	mov	r17,r18
   898c4:	da802317 	ldw	r10,140(sp)
   898c8:	5455883a 	add	r10,r10,r17
   898cc:	da802315 	stw	r10,140(sp)
   898d0:	d8001b15 	stw	zero,108(sp)
   898d4:	d811883a 	mov	r8,sp
   898d8:	003ea206 	br	89364 <__alt_data_end+0xfffa78e4>
   898dc:	a5000814 	ori	r20,r20,32
   898e0:	80c00007 	ldb	r3,0(r16)
   898e4:	003ec906 	br	8940c <__alt_data_end+0xfffa798c>
   898e8:	80c00007 	ldb	r3,0(r16)
   898ec:	1b030926 	beq	r3,r12,8a514 <___vfiprintf_internal_r+0x1284>
   898f0:	a5000414 	ori	r20,r20,16
   898f4:	003ec506 	br	8940c <__alt_data_end+0xfffa798c>
   898f8:	21003fcc 	andi	r4,r4,255
   898fc:	20035e1e 	bne	r4,zero,8a678 <___vfiprintf_internal_r+0x13e8>
   89900:	a080080c 	andi	r2,r20,32
   89904:	1002a526 	beq	r2,zero,8a39c <___vfiprintf_internal_r+0x110c>
   89908:	da802217 	ldw	r10,136(sp)
   8990c:	50800017 	ldw	r2,0(r10)
   89910:	da802317 	ldw	r10,140(sp)
   89914:	5007d7fa 	srai	r3,r10,31
   89918:	da802217 	ldw	r10,136(sp)
   8991c:	10c00115 	stw	r3,4(r2)
   89920:	52800104 	addi	r10,r10,4
   89924:	da802215 	stw	r10,136(sp)
   89928:	da802317 	ldw	r10,140(sp)
   8992c:	12800015 	stw	r10,0(r2)
   89930:	003e8c06 	br	89364 <__alt_data_end+0xfffa78e4>
   89934:	21003fcc 	andi	r4,r4,255
   89938:	2003511e 	bne	r4,zero,8a680 <___vfiprintf_internal_r+0x13f0>
   8993c:	a080080c 	andi	r2,r20,32
   89940:	1000a126 	beq	r2,zero,89bc8 <___vfiprintf_internal_r+0x938>
   89944:	da802217 	ldw	r10,136(sp)
   89948:	d8001d85 	stb	zero,118(sp)
   8994c:	50800204 	addi	r2,r10,8
   89950:	54800017 	ldw	r18,0(r10)
   89954:	54c00117 	ldw	r19,4(r10)
   89958:	4802b416 	blt	r9,zero,8a42c <___vfiprintf_internal_r+0x119c>
   8995c:	013fdfc4 	movi	r4,-129
   89960:	94c6b03a 	or	r3,r18,r19
   89964:	d8802215 	stw	r2,136(sp)
   89968:	a128703a 	and	r20,r20,r4
   8996c:	1800a226 	beq	r3,zero,89bf8 <___vfiprintf_internal_r+0x968>
   89970:	0039883a 	mov	fp,zero
   89974:	dd401a04 	addi	r21,sp,104
   89978:	9006d0fa 	srli	r3,r18,3
   8997c:	9808977a 	slli	r4,r19,29
   89980:	9826d0fa 	srli	r19,r19,3
   89984:	948001cc 	andi	r18,r18,7
   89988:	90800c04 	addi	r2,r18,48
   8998c:	ad7fffc4 	addi	r21,r21,-1
   89990:	20e4b03a 	or	r18,r4,r3
   89994:	a8800005 	stb	r2,0(r21)
   89998:	94c6b03a 	or	r3,r18,r19
   8999c:	183ff61e 	bne	r3,zero,89978 <__alt_data_end+0xfffa7ef8>
   899a0:	a0c0004c 	andi	r3,r20,1
   899a4:	18005926 	beq	r3,zero,89b0c <___vfiprintf_internal_r+0x87c>
   899a8:	10803fcc 	andi	r2,r2,255
   899ac:	1080201c 	xori	r2,r2,128
   899b0:	10bfe004 	addi	r2,r2,-128
   899b4:	00c00c04 	movi	r3,48
   899b8:	10c05426 	beq	r2,r3,89b0c <___vfiprintf_internal_r+0x87c>
   899bc:	da801e17 	ldw	r10,120(sp)
   899c0:	a8bfffc4 	addi	r2,r21,-1
   899c4:	a8ffffc5 	stb	r3,-1(r21)
   899c8:	50a7c83a 	sub	r19,r10,r2
   899cc:	102b883a 	mov	r21,r2
   899d0:	003f2f06 	br	89690 <__alt_data_end+0xfffa7c10>
   899d4:	21003fcc 	andi	r4,r4,255
   899d8:	2003421e 	bne	r4,zero,8a6e4 <___vfiprintf_internal_r+0x1454>
   899dc:	00800274 	movhi	r2,9
   899e0:	1083b404 	addi	r2,r2,3792
   899e4:	d8802615 	stw	r2,152(sp)
   899e8:	a080080c 	andi	r2,r20,32
   899ec:	1000aa26 	beq	r2,zero,89c98 <___vfiprintf_internal_r+0xa08>
   899f0:	da802217 	ldw	r10,136(sp)
   899f4:	54800017 	ldw	r18,0(r10)
   899f8:	54c00117 	ldw	r19,4(r10)
   899fc:	52800204 	addi	r10,r10,8
   89a00:	da802215 	stw	r10,136(sp)
   89a04:	a080004c 	andi	r2,r20,1
   89a08:	1001d226 	beq	r2,zero,8a154 <___vfiprintf_internal_r+0xec4>
   89a0c:	94c4b03a 	or	r2,r18,r19
   89a10:	1002351e 	bne	r2,zero,8a2e8 <___vfiprintf_internal_r+0x1058>
   89a14:	d8001d85 	stb	zero,118(sp)
   89a18:	48022216 	blt	r9,zero,8a2a4 <___vfiprintf_internal_r+0x1014>
   89a1c:	00bfdfc4 	movi	r2,-129
   89a20:	a0a8703a 	and	r20,r20,r2
   89a24:	003f1506 	br	8967c <__alt_data_end+0xfffa7bfc>
   89a28:	da802217 	ldw	r10,136(sp)
   89a2c:	04800044 	movi	r18,1
   89a30:	d8001d85 	stb	zero,118(sp)
   89a34:	50800017 	ldw	r2,0(r10)
   89a38:	52800104 	addi	r10,r10,4
   89a3c:	da802215 	stw	r10,136(sp)
   89a40:	d8801005 	stb	r2,64(sp)
   89a44:	9027883a 	mov	r19,r18
   89a48:	dd401004 	addi	r21,sp,64
   89a4c:	0013883a 	mov	r9,zero
   89a50:	003f1706 	br	896b0 <__alt_data_end+0xfffa7c30>
   89a54:	21003fcc 	andi	r4,r4,255
   89a58:	2003201e 	bne	r4,zero,8a6dc <___vfiprintf_internal_r+0x144c>
   89a5c:	a080080c 	andi	r2,r20,32
   89a60:	10004b26 	beq	r2,zero,89b90 <___vfiprintf_internal_r+0x900>
   89a64:	da802217 	ldw	r10,136(sp)
   89a68:	50800117 	ldw	r2,4(r10)
   89a6c:	54800017 	ldw	r18,0(r10)
   89a70:	52800204 	addi	r10,r10,8
   89a74:	da802215 	stw	r10,136(sp)
   89a78:	1027883a 	mov	r19,r2
   89a7c:	10022c16 	blt	r2,zero,8a330 <___vfiprintf_internal_r+0x10a0>
   89a80:	df001d83 	ldbu	fp,118(sp)
   89a84:	48007216 	blt	r9,zero,89c50 <___vfiprintf_internal_r+0x9c0>
   89a88:	00ffdfc4 	movi	r3,-129
   89a8c:	94c4b03a 	or	r2,r18,r19
   89a90:	a0e8703a 	and	r20,r20,r3
   89a94:	1000cc26 	beq	r2,zero,89dc8 <___vfiprintf_internal_r+0xb38>
   89a98:	98021026 	beq	r19,zero,8a2dc <___vfiprintf_internal_r+0x104c>
   89a9c:	dc402415 	stw	r17,144(sp)
   89aa0:	dc002515 	stw	r16,148(sp)
   89aa4:	9823883a 	mov	r17,r19
   89aa8:	9021883a 	mov	r16,r18
   89aac:	dd401a04 	addi	r21,sp,104
   89ab0:	4825883a 	mov	r18,r9
   89ab4:	4027883a 	mov	r19,r8
   89ab8:	8009883a 	mov	r4,r16
   89abc:	880b883a 	mov	r5,r17
   89ac0:	01800284 	movi	r6,10
   89ac4:	000f883a 	mov	r7,zero
   89ac8:	008b6d00 	call	8b6d0 <__umoddi3>
   89acc:	10800c04 	addi	r2,r2,48
   89ad0:	ad7fffc4 	addi	r21,r21,-1
   89ad4:	8009883a 	mov	r4,r16
   89ad8:	880b883a 	mov	r5,r17
   89adc:	a8800005 	stb	r2,0(r21)
   89ae0:	01800284 	movi	r6,10
   89ae4:	000f883a 	mov	r7,zero
   89ae8:	008b1580 	call	8b158 <__udivdi3>
   89aec:	1021883a 	mov	r16,r2
   89af0:	10c4b03a 	or	r2,r2,r3
   89af4:	1823883a 	mov	r17,r3
   89af8:	103fef1e 	bne	r2,zero,89ab8 <__alt_data_end+0xfffa8038>
   89afc:	dc402417 	ldw	r17,144(sp)
   89b00:	dc002517 	ldw	r16,148(sp)
   89b04:	9013883a 	mov	r9,r18
   89b08:	9811883a 	mov	r8,r19
   89b0c:	da801e17 	ldw	r10,120(sp)
   89b10:	5567c83a 	sub	r19,r10,r21
   89b14:	003ede06 	br	89690 <__alt_data_end+0xfffa7c10>
   89b18:	38803fcc 	andi	r2,r7,255
   89b1c:	1080201c 	xori	r2,r2,128
   89b20:	10bfe004 	addi	r2,r2,-128
   89b24:	1002371e 	bne	r2,zero,8a404 <___vfiprintf_internal_r+0x1174>
   89b28:	01000044 	movi	r4,1
   89b2c:	01c00804 	movi	r7,32
   89b30:	80c00007 	ldb	r3,0(r16)
   89b34:	003e3506 	br	8940c <__alt_data_end+0xfffa798c>
   89b38:	a5000054 	ori	r20,r20,1
   89b3c:	80c00007 	ldb	r3,0(r16)
   89b40:	003e3206 	br	8940c <__alt_data_end+0xfffa798c>
   89b44:	a5002014 	ori	r20,r20,128
   89b48:	80c00007 	ldb	r3,0(r16)
   89b4c:	003e2f06 	br	8940c <__alt_data_end+0xfffa798c>
   89b50:	8015883a 	mov	r10,r16
   89b54:	0023883a 	mov	r17,zero
   89b58:	18bff404 	addi	r2,r3,-48
   89b5c:	50c00007 	ldb	r3,0(r10)
   89b60:	8c4002a4 	muli	r17,r17,10
   89b64:	84000044 	addi	r16,r16,1
   89b68:	8015883a 	mov	r10,r16
   89b6c:	1463883a 	add	r17,r2,r17
   89b70:	18bff404 	addi	r2,r3,-48
   89b74:	30bff92e 	bgeu	r6,r2,89b5c <__alt_data_end+0xfffa80dc>
   89b78:	003e2506 	br	89410 <__alt_data_end+0xfffa7990>
   89b7c:	21003fcc 	andi	r4,r4,255
   89b80:	2002d41e 	bne	r4,zero,8a6d4 <___vfiprintf_internal_r+0x1444>
   89b84:	a5000414 	ori	r20,r20,16
   89b88:	a080080c 	andi	r2,r20,32
   89b8c:	103fb51e 	bne	r2,zero,89a64 <__alt_data_end+0xfffa7fe4>
   89b90:	a080040c 	andi	r2,r20,16
   89b94:	1001f826 	beq	r2,zero,8a378 <___vfiprintf_internal_r+0x10e8>
   89b98:	da802217 	ldw	r10,136(sp)
   89b9c:	54800017 	ldw	r18,0(r10)
   89ba0:	52800104 	addi	r10,r10,4
   89ba4:	da802215 	stw	r10,136(sp)
   89ba8:	9027d7fa 	srai	r19,r18,31
   89bac:	9805883a 	mov	r2,r19
   89bb0:	003fb206 	br	89a7c <__alt_data_end+0xfffa7ffc>
   89bb4:	21003fcc 	andi	r4,r4,255
   89bb8:	2002c41e 	bne	r4,zero,8a6cc <___vfiprintf_internal_r+0x143c>
   89bbc:	a5000414 	ori	r20,r20,16
   89bc0:	a080080c 	andi	r2,r20,32
   89bc4:	103f5f1e 	bne	r2,zero,89944 <__alt_data_end+0xfffa7ec4>
   89bc8:	a080040c 	andi	r2,r20,16
   89bcc:	10020f26 	beq	r2,zero,8a40c <___vfiprintf_internal_r+0x117c>
   89bd0:	da802217 	ldw	r10,136(sp)
   89bd4:	d8001d85 	stb	zero,118(sp)
   89bd8:	0027883a 	mov	r19,zero
   89bdc:	50800104 	addi	r2,r10,4
   89be0:	54800017 	ldw	r18,0(r10)
   89be4:	48021116 	blt	r9,zero,8a42c <___vfiprintf_internal_r+0x119c>
   89be8:	00ffdfc4 	movi	r3,-129
   89bec:	d8802215 	stw	r2,136(sp)
   89bf0:	a0e8703a 	and	r20,r20,r3
   89bf4:	903f5e1e 	bne	r18,zero,89970 <__alt_data_end+0xfffa7ef0>
   89bf8:	0039883a 	mov	fp,zero
   89bfc:	4802a626 	beq	r9,zero,8a698 <___vfiprintf_internal_r+0x1408>
   89c00:	0025883a 	mov	r18,zero
   89c04:	0027883a 	mov	r19,zero
   89c08:	003f5a06 	br	89974 <__alt_data_end+0xfffa7ef4>
   89c0c:	21003fcc 	andi	r4,r4,255
   89c10:	20029f1e 	bne	r4,zero,8a690 <___vfiprintf_internal_r+0x1400>
   89c14:	a5000414 	ori	r20,r20,16
   89c18:	a080080c 	andi	r2,r20,32
   89c1c:	10005e1e 	bne	r2,zero,89d98 <___vfiprintf_internal_r+0xb08>
   89c20:	a080040c 	andi	r2,r20,16
   89c24:	1001a21e 	bne	r2,zero,8a2b0 <___vfiprintf_internal_r+0x1020>
   89c28:	a080100c 	andi	r2,r20,64
   89c2c:	d8001d85 	stb	zero,118(sp)
   89c30:	da802217 	ldw	r10,136(sp)
   89c34:	1002231e 	bne	r2,zero,8a4c4 <___vfiprintf_internal_r+0x1234>
   89c38:	50800104 	addi	r2,r10,4
   89c3c:	54800017 	ldw	r18,0(r10)
   89c40:	0027883a 	mov	r19,zero
   89c44:	4801a00e 	bge	r9,zero,8a2c8 <___vfiprintf_internal_r+0x1038>
   89c48:	d8802215 	stw	r2,136(sp)
   89c4c:	0039883a 	mov	fp,zero
   89c50:	94c4b03a 	or	r2,r18,r19
   89c54:	103f901e 	bne	r2,zero,89a98 <__alt_data_end+0xfffa8018>
   89c58:	00800044 	movi	r2,1
   89c5c:	10803fcc 	andi	r2,r2,255
   89c60:	00c00044 	movi	r3,1
   89c64:	10c05926 	beq	r2,r3,89dcc <___vfiprintf_internal_r+0xb3c>
   89c68:	00c00084 	movi	r3,2
   89c6c:	10ffe41e 	bne	r2,r3,89c00 <__alt_data_end+0xfffa8180>
   89c70:	0025883a 	mov	r18,zero
   89c74:	0027883a 	mov	r19,zero
   89c78:	00013d06 	br	8a170 <___vfiprintf_internal_r+0xee0>
   89c7c:	21003fcc 	andi	r4,r4,255
   89c80:	2002811e 	bne	r4,zero,8a688 <___vfiprintf_internal_r+0x13f8>
   89c84:	00800274 	movhi	r2,9
   89c88:	1083af04 	addi	r2,r2,3772
   89c8c:	d8802615 	stw	r2,152(sp)
   89c90:	a080080c 	andi	r2,r20,32
   89c94:	103f561e 	bne	r2,zero,899f0 <__alt_data_end+0xfffa7f70>
   89c98:	a080040c 	andi	r2,r20,16
   89c9c:	1001d126 	beq	r2,zero,8a3e4 <___vfiprintf_internal_r+0x1154>
   89ca0:	da802217 	ldw	r10,136(sp)
   89ca4:	0027883a 	mov	r19,zero
   89ca8:	54800017 	ldw	r18,0(r10)
   89cac:	52800104 	addi	r10,r10,4
   89cb0:	da802215 	stw	r10,136(sp)
   89cb4:	003f5306 	br	89a04 <__alt_data_end+0xfffa7f84>
   89cb8:	da802217 	ldw	r10,136(sp)
   89cbc:	d8001d85 	stb	zero,118(sp)
   89cc0:	55400017 	ldw	r21,0(r10)
   89cc4:	50c00104 	addi	r3,r10,4
   89cc8:	a8024226 	beq	r21,zero,8a5d4 <___vfiprintf_internal_r+0x1344>
   89ccc:	48021816 	blt	r9,zero,8a530 <___vfiprintf_internal_r+0x12a0>
   89cd0:	480d883a 	mov	r6,r9
   89cd4:	000b883a 	mov	r5,zero
   89cd8:	a809883a 	mov	r4,r21
   89cdc:	d8c02a15 	stw	r3,168(sp)
   89ce0:	da002b15 	stw	r8,172(sp)
   89ce4:	da402c15 	stw	r9,176(sp)
   89ce8:	008748c0 	call	8748c <memchr>
   89cec:	d8c02a17 	ldw	r3,168(sp)
   89cf0:	da002b17 	ldw	r8,172(sp)
   89cf4:	da402c17 	ldw	r9,176(sp)
   89cf8:	10024826 	beq	r2,zero,8a61c <___vfiprintf_internal_r+0x138c>
   89cfc:	1567c83a 	sub	r19,r2,r21
   89d00:	df001d83 	ldbu	fp,118(sp)
   89d04:	d8c02215 	stw	r3,136(sp)
   89d08:	0013883a 	mov	r9,zero
   89d0c:	003e6006 	br	89690 <__alt_data_end+0xfffa7c10>
   89d10:	21003fcc 	andi	r4,r4,255
   89d14:	203fc026 	beq	r4,zero,89c18 <__alt_data_end+0xfffa8198>
   89d18:	d9c01d85 	stb	r7,118(sp)
   89d1c:	003fbe06 	br	89c18 <__alt_data_end+0xfffa8198>
   89d20:	da802217 	ldw	r10,136(sp)
   89d24:	54400017 	ldw	r17,0(r10)
   89d28:	50800104 	addi	r2,r10,4
   89d2c:	883e3b16 	blt	r17,zero,8961c <__alt_data_end+0xfffa7b9c>
   89d30:	d8802215 	stw	r2,136(sp)
   89d34:	80c00007 	ldb	r3,0(r16)
   89d38:	003db406 	br	8940c <__alt_data_end+0xfffa798c>
   89d3c:	01000044 	movi	r4,1
   89d40:	01c00ac4 	movi	r7,43
   89d44:	80c00007 	ldb	r3,0(r16)
   89d48:	003db006 	br	8940c <__alt_data_end+0xfffa798c>
   89d4c:	80c00007 	ldb	r3,0(r16)
   89d50:	82800044 	addi	r10,r16,1
   89d54:	1b423c26 	beq	r3,r13,8a648 <___vfiprintf_internal_r+0x13b8>
   89d58:	18bff404 	addi	r2,r3,-48
   89d5c:	0013883a 	mov	r9,zero
   89d60:	30822b36 	bltu	r6,r2,8a610 <___vfiprintf_internal_r+0x1380>
   89d64:	50c00007 	ldb	r3,0(r10)
   89d68:	4a4002a4 	muli	r9,r9,10
   89d6c:	54000044 	addi	r16,r10,1
   89d70:	8015883a 	mov	r10,r16
   89d74:	4893883a 	add	r9,r9,r2
   89d78:	18bff404 	addi	r2,r3,-48
   89d7c:	30bff92e 	bgeu	r6,r2,89d64 <__alt_data_end+0xfffa82e4>
   89d80:	483da30e 	bge	r9,zero,89410 <__alt_data_end+0xfffa7990>
   89d84:	027fffc4 	movi	r9,-1
   89d88:	003da106 	br	89410 <__alt_data_end+0xfffa7990>
   89d8c:	a5001014 	ori	r20,r20,64
   89d90:	80c00007 	ldb	r3,0(r16)
   89d94:	003d9d06 	br	8940c <__alt_data_end+0xfffa798c>
   89d98:	da802217 	ldw	r10,136(sp)
   89d9c:	d8001d85 	stb	zero,118(sp)
   89da0:	50c00204 	addi	r3,r10,8
   89da4:	54800017 	ldw	r18,0(r10)
   89da8:	54c00117 	ldw	r19,4(r10)
   89dac:	4801ca16 	blt	r9,zero,8a4d8 <___vfiprintf_internal_r+0x1248>
   89db0:	013fdfc4 	movi	r4,-129
   89db4:	94c4b03a 	or	r2,r18,r19
   89db8:	d8c02215 	stw	r3,136(sp)
   89dbc:	a128703a 	and	r20,r20,r4
   89dc0:	0039883a 	mov	fp,zero
   89dc4:	103f341e 	bne	r2,zero,89a98 <__alt_data_end+0xfffa8018>
   89dc8:	483e2e26 	beq	r9,zero,89684 <__alt_data_end+0xfffa7c04>
   89dcc:	0025883a 	mov	r18,zero
   89dd0:	94800c04 	addi	r18,r18,48
   89dd4:	dc8019c5 	stb	r18,103(sp)
   89dd8:	dcc02717 	ldw	r19,156(sp)
   89ddc:	dd4019c4 	addi	r21,sp,103
   89de0:	003e2b06 	br	89690 <__alt_data_end+0xfffa7c10>
   89de4:	21003fcc 	andi	r4,r4,255
   89de8:	2002361e 	bne	r4,zero,8a6c4 <___vfiprintf_internal_r+0x1434>
   89dec:	1801c126 	beq	r3,zero,8a4f4 <___vfiprintf_internal_r+0x1264>
   89df0:	04800044 	movi	r18,1
   89df4:	d8c01005 	stb	r3,64(sp)
   89df8:	d8001d85 	stb	zero,118(sp)
   89dfc:	9027883a 	mov	r19,r18
   89e00:	dd401004 	addi	r21,sp,64
   89e04:	003f1106 	br	89a4c <__alt_data_end+0xfffa7fcc>
   89e08:	d9402117 	ldw	r5,132(sp)
   89e0c:	d9002017 	ldw	r4,128(sp)
   89e10:	d9801a04 	addi	r6,sp,104
   89e14:	d9c02b15 	stw	r7,172(sp)
   89e18:	dbc02a15 	stw	r15,168(sp)
   89e1c:	008917c0 	call	8917c <__sprint_r.part.0>
   89e20:	d9c02b17 	ldw	r7,172(sp)
   89e24:	dbc02a17 	ldw	r15,168(sp)
   89e28:	10006d1e 	bne	r2,zero,89fe0 <___vfiprintf_internal_r+0xd50>
   89e2c:	d9801b17 	ldw	r6,108(sp)
   89e30:	d8801c17 	ldw	r2,112(sp)
   89e34:	d811883a 	mov	r8,sp
   89e38:	31400044 	addi	r5,r6,1
   89e3c:	003e3306 	br	8970c <__alt_data_end+0xfffa7c8c>
   89e40:	d9401b17 	ldw	r5,108(sp)
   89e44:	d8801c17 	ldw	r2,112(sp)
   89e48:	29000044 	addi	r4,r5,1
   89e4c:	d8c01d87 	ldb	r3,118(sp)
   89e50:	183e4d26 	beq	r3,zero,89788 <__alt_data_end+0xfffa7d08>
   89e54:	00c00044 	movi	r3,1
   89e58:	d9401d84 	addi	r5,sp,118
   89e5c:	10c5883a 	add	r2,r2,r3
   89e60:	41400015 	stw	r5,0(r8)
   89e64:	40c00115 	stw	r3,4(r8)
   89e68:	d8801c15 	stw	r2,112(sp)
   89e6c:	d9001b15 	stw	r4,108(sp)
   89e70:	014001c4 	movi	r5,7
   89e74:	2900a90e 	bge	r5,r4,8a11c <___vfiprintf_internal_r+0xe8c>
   89e78:	1000da1e 	bne	r2,zero,8a1e4 <___vfiprintf_internal_r+0xf54>
   89e7c:	7000ab1e 	bne	r14,zero,8a12c <___vfiprintf_internal_r+0xe9c>
   89e80:	000b883a 	mov	r5,zero
   89e84:	1809883a 	mov	r4,r3
   89e88:	d811883a 	mov	r8,sp
   89e8c:	00c02004 	movi	r3,128
   89e90:	e0fe4d26 	beq	fp,r3,897c8 <__alt_data_end+0xfffa7d48>
   89e94:	4cf9c83a 	sub	fp,r9,r19
   89e98:	073e7b0e 	bge	zero,fp,89888 <__alt_data_end+0xfffa7e08>
   89e9c:	01c00404 	movi	r7,16
   89ea0:	3f01900e 	bge	r7,fp,8a4e4 <___vfiprintf_internal_r+0x1254>
   89ea4:	00c00274 	movhi	r3,9
   89ea8:	18c41504 	addi	r3,r3,4180
   89eac:	d8c02415 	stw	r3,144(sp)
   89eb0:	034001c4 	movi	r13,7
   89eb4:	00000506 	br	89ecc <___vfiprintf_internal_r+0xc3c>
   89eb8:	29000084 	addi	r4,r5,2
   89ebc:	42000204 	addi	r8,r8,8
   89ec0:	180b883a 	mov	r5,r3
   89ec4:	e73ffc04 	addi	fp,fp,-16
   89ec8:	3f000d0e 	bge	r7,fp,89f00 <___vfiprintf_internal_r+0xc70>
   89ecc:	10800404 	addi	r2,r2,16
   89ed0:	28c00044 	addi	r3,r5,1
   89ed4:	45c00015 	stw	r23,0(r8)
   89ed8:	41c00115 	stw	r7,4(r8)
   89edc:	d8801c15 	stw	r2,112(sp)
   89ee0:	d8c01b15 	stw	r3,108(sp)
   89ee4:	68fff40e 	bge	r13,r3,89eb8 <__alt_data_end+0xfffa8438>
   89ee8:	1000101e 	bne	r2,zero,89f2c <___vfiprintf_internal_r+0xc9c>
   89eec:	e73ffc04 	addi	fp,fp,-16
   89ef0:	01000044 	movi	r4,1
   89ef4:	000b883a 	mov	r5,zero
   89ef8:	d811883a 	mov	r8,sp
   89efc:	3f3ff316 	blt	r7,fp,89ecc <__alt_data_end+0xfffa844c>
   89f00:	da802417 	ldw	r10,144(sp)
   89f04:	1705883a 	add	r2,r2,fp
   89f08:	47000115 	stw	fp,4(r8)
   89f0c:	42800015 	stw	r10,0(r8)
   89f10:	d8801c15 	stw	r2,112(sp)
   89f14:	d9001b15 	stw	r4,108(sp)
   89f18:	00c001c4 	movi	r3,7
   89f1c:	19003616 	blt	r3,r4,89ff8 <___vfiprintf_internal_r+0xd68>
   89f20:	42000204 	addi	r8,r8,8
   89f24:	21000044 	addi	r4,r4,1
   89f28:	003e5706 	br	89888 <__alt_data_end+0xfffa7e08>
   89f2c:	d9402117 	ldw	r5,132(sp)
   89f30:	d9002017 	ldw	r4,128(sp)
   89f34:	d9801a04 	addi	r6,sp,104
   89f38:	d9c02b15 	stw	r7,172(sp)
   89f3c:	db402a15 	stw	r13,168(sp)
   89f40:	008917c0 	call	8917c <__sprint_r.part.0>
   89f44:	d9c02b17 	ldw	r7,172(sp)
   89f48:	db402a17 	ldw	r13,168(sp)
   89f4c:	1000241e 	bne	r2,zero,89fe0 <___vfiprintf_internal_r+0xd50>
   89f50:	d9401b17 	ldw	r5,108(sp)
   89f54:	d8801c17 	ldw	r2,112(sp)
   89f58:	d811883a 	mov	r8,sp
   89f5c:	29000044 	addi	r4,r5,1
   89f60:	003fd806 	br	89ec4 <__alt_data_end+0xfffa8444>
   89f64:	d9401b17 	ldw	r5,108(sp)
   89f68:	00c00274 	movhi	r3,9
   89f6c:	18c41904 	addi	r3,r3,4196
   89f70:	d8c02415 	stw	r3,144(sp)
   89f74:	29400044 	addi	r5,r5,1
   89f78:	d8c02417 	ldw	r3,144(sp)
   89f7c:	14c5883a 	add	r2,r2,r19
   89f80:	44c00115 	stw	r19,4(r8)
   89f84:	40c00015 	stw	r3,0(r8)
   89f88:	d8801c15 	stw	r2,112(sp)
   89f8c:	d9401b15 	stw	r5,108(sp)
   89f90:	00c001c4 	movi	r3,7
   89f94:	1940070e 	bge	r3,r5,89fb4 <___vfiprintf_internal_r+0xd24>
   89f98:	103e4826 	beq	r2,zero,898bc <__alt_data_end+0xfffa7e3c>
   89f9c:	d9402117 	ldw	r5,132(sp)
   89fa0:	d9002017 	ldw	r4,128(sp)
   89fa4:	d9801a04 	addi	r6,sp,104
   89fa8:	008917c0 	call	8917c <__sprint_r.part.0>
   89fac:	10000c1e 	bne	r2,zero,89fe0 <___vfiprintf_internal_r+0xd50>
   89fb0:	d8801c17 	ldw	r2,112(sp)
   89fb4:	8c80010e 	bge	r17,r18,89fbc <___vfiprintf_internal_r+0xd2c>
   89fb8:	9023883a 	mov	r17,r18
   89fbc:	da802317 	ldw	r10,140(sp)
   89fc0:	5455883a 	add	r10,r10,r17
   89fc4:	da802315 	stw	r10,140(sp)
   89fc8:	103e4126 	beq	r2,zero,898d0 <__alt_data_end+0xfffa7e50>
   89fcc:	d9402117 	ldw	r5,132(sp)
   89fd0:	d9002017 	ldw	r4,128(sp)
   89fd4:	d9801a04 	addi	r6,sp,104
   89fd8:	008917c0 	call	8917c <__sprint_r.part.0>
   89fdc:	103e3c26 	beq	r2,zero,898d0 <__alt_data_end+0xfffa7e50>
   89fe0:	dd002117 	ldw	r20,132(sp)
   89fe4:	a080030b 	ldhu	r2,12(r20)
   89fe8:	1080100c 	andi	r2,r2,64
   89fec:	1001231e 	bne	r2,zero,8a47c <___vfiprintf_internal_r+0x11ec>
   89ff0:	d8802317 	ldw	r2,140(sp)
   89ff4:	003d7b06 	br	895e4 <__alt_data_end+0xfffa7b64>
   89ff8:	1000991e 	bne	r2,zero,8a260 <___vfiprintf_internal_r+0xfd0>
   89ffc:	00c00044 	movi	r3,1
   8a000:	9805883a 	mov	r2,r19
   8a004:	dd400015 	stw	r21,0(sp)
   8a008:	dcc00115 	stw	r19,4(sp)
   8a00c:	dcc01c15 	stw	r19,112(sp)
   8a010:	d8c01b15 	stw	r3,108(sp)
   8a014:	d811883a 	mov	r8,sp
   8a018:	42000204 	addi	r8,r8,8
   8a01c:	a2c0010c 	andi	r11,r20,4
   8a020:	583fe426 	beq	r11,zero,89fb4 <__alt_data_end+0xfffa8534>
   8a024:	8ca7c83a 	sub	r19,r17,r18
   8a028:	04ffe20e 	bge	zero,r19,89fb4 <__alt_data_end+0xfffa8534>
   8a02c:	01c00404 	movi	r7,16
   8a030:	3cffcc0e 	bge	r7,r19,89f64 <__alt_data_end+0xfffa84e4>
   8a034:	02800274 	movhi	r10,9
   8a038:	52841904 	addi	r10,r10,4196
   8a03c:	d9001b17 	ldw	r4,108(sp)
   8a040:	da802415 	stw	r10,144(sp)
   8a044:	382b883a 	mov	r21,r7
   8a048:	050001c4 	movi	r20,7
   8a04c:	df002017 	ldw	fp,128(sp)
   8a050:	00000506 	br	8a068 <___vfiprintf_internal_r+0xdd8>
   8a054:	21400084 	addi	r5,r4,2
   8a058:	42000204 	addi	r8,r8,8
   8a05c:	1809883a 	mov	r4,r3
   8a060:	9cfffc04 	addi	r19,r19,-16
   8a064:	acffc40e 	bge	r21,r19,89f78 <__alt_data_end+0xfffa84f8>
   8a068:	10800404 	addi	r2,r2,16
   8a06c:	20c00044 	addi	r3,r4,1
   8a070:	45800015 	stw	r22,0(r8)
   8a074:	45400115 	stw	r21,4(r8)
   8a078:	d8801c15 	stw	r2,112(sp)
   8a07c:	d8c01b15 	stw	r3,108(sp)
   8a080:	a0fff40e 	bge	r20,r3,8a054 <__alt_data_end+0xfffa85d4>
   8a084:	1000041e 	bne	r2,zero,8a098 <___vfiprintf_internal_r+0xe08>
   8a088:	01400044 	movi	r5,1
   8a08c:	0009883a 	mov	r4,zero
   8a090:	d811883a 	mov	r8,sp
   8a094:	003ff206 	br	8a060 <__alt_data_end+0xfffa85e0>
   8a098:	d9402117 	ldw	r5,132(sp)
   8a09c:	d9801a04 	addi	r6,sp,104
   8a0a0:	e009883a 	mov	r4,fp
   8a0a4:	008917c0 	call	8917c <__sprint_r.part.0>
   8a0a8:	103fcd1e 	bne	r2,zero,89fe0 <__alt_data_end+0xfffa8560>
   8a0ac:	d9001b17 	ldw	r4,108(sp)
   8a0b0:	d8801c17 	ldw	r2,112(sp)
   8a0b4:	d811883a 	mov	r8,sp
   8a0b8:	21400044 	addi	r5,r4,1
   8a0bc:	003fe806 	br	8a060 <__alt_data_end+0xfffa85e0>
   8a0c0:	d9402117 	ldw	r5,132(sp)
   8a0c4:	d9002017 	ldw	r4,128(sp)
   8a0c8:	d9801a04 	addi	r6,sp,104
   8a0cc:	d9c02b15 	stw	r7,172(sp)
   8a0d0:	db402a15 	stw	r13,168(sp)
   8a0d4:	008917c0 	call	8917c <__sprint_r.part.0>
   8a0d8:	d9c02b17 	ldw	r7,172(sp)
   8a0dc:	db402a17 	ldw	r13,168(sp)
   8a0e0:	103fbf1e 	bne	r2,zero,89fe0 <__alt_data_end+0xfffa8560>
   8a0e4:	d9401b17 	ldw	r5,108(sp)
   8a0e8:	d8801c17 	ldw	r2,112(sp)
   8a0ec:	d811883a 	mov	r8,sp
   8a0f0:	29800044 	addi	r6,r5,1
   8a0f4:	003dc406 	br	89808 <__alt_data_end+0xfffa7d88>
   8a0f8:	1000d21e 	bne	r2,zero,8a444 <___vfiprintf_internal_r+0x11b4>
   8a0fc:	d8c01d87 	ldb	r3,118(sp)
   8a100:	18009526 	beq	r3,zero,8a358 <___vfiprintf_internal_r+0x10c8>
   8a104:	00800044 	movi	r2,1
   8a108:	d8c01d84 	addi	r3,sp,118
   8a10c:	1009883a 	mov	r4,r2
   8a110:	d8c00015 	stw	r3,0(sp)
   8a114:	d8800115 	stw	r2,4(sp)
   8a118:	d811883a 	mov	r8,sp
   8a11c:	200b883a 	mov	r5,r4
   8a120:	42000204 	addi	r8,r8,8
   8a124:	21000044 	addi	r4,r4,1
   8a128:	003d9706 	br	89788 <__alt_data_end+0xfffa7d08>
   8a12c:	d9001d04 	addi	r4,sp,116
   8a130:	00800084 	movi	r2,2
   8a134:	d9000015 	stw	r4,0(sp)
   8a138:	d8800115 	stw	r2,4(sp)
   8a13c:	1809883a 	mov	r4,r3
   8a140:	d811883a 	mov	r8,sp
   8a144:	200b883a 	mov	r5,r4
   8a148:	42000204 	addi	r8,r8,8
   8a14c:	21000044 	addi	r4,r4,1
   8a150:	003f4e06 	br	89e8c <__alt_data_end+0xfffa840c>
   8a154:	d8001d85 	stb	zero,118(sp)
   8a158:	48005016 	blt	r9,zero,8a29c <___vfiprintf_internal_r+0x100c>
   8a15c:	00ffdfc4 	movi	r3,-129
   8a160:	94c4b03a 	or	r2,r18,r19
   8a164:	a0e8703a 	and	r20,r20,r3
   8a168:	103d4426 	beq	r2,zero,8967c <__alt_data_end+0xfffa7bfc>
   8a16c:	0039883a 	mov	fp,zero
   8a170:	d9002617 	ldw	r4,152(sp)
   8a174:	dd401a04 	addi	r21,sp,104
   8a178:	908003cc 	andi	r2,r18,15
   8a17c:	9806973a 	slli	r3,r19,28
   8a180:	2085883a 	add	r2,r4,r2
   8a184:	9024d13a 	srli	r18,r18,4
   8a188:	10800003 	ldbu	r2,0(r2)
   8a18c:	9826d13a 	srli	r19,r19,4
   8a190:	ad7fffc4 	addi	r21,r21,-1
   8a194:	1ca4b03a 	or	r18,r3,r18
   8a198:	a8800005 	stb	r2,0(r21)
   8a19c:	94c4b03a 	or	r2,r18,r19
   8a1a0:	103ff51e 	bne	r2,zero,8a178 <__alt_data_end+0xfffa86f8>
   8a1a4:	003e5906 	br	89b0c <__alt_data_end+0xfffa808c>
   8a1a8:	d9402117 	ldw	r5,132(sp)
   8a1ac:	d9002017 	ldw	r4,128(sp)
   8a1b0:	d9801a04 	addi	r6,sp,104
   8a1b4:	008917c0 	call	8917c <__sprint_r.part.0>
   8a1b8:	103f891e 	bne	r2,zero,89fe0 <__alt_data_end+0xfffa8560>
   8a1bc:	d8801c17 	ldw	r2,112(sp)
   8a1c0:	d811883a 	mov	r8,sp
   8a1c4:	003f9506 	br	8a01c <__alt_data_end+0xfffa859c>
   8a1c8:	d9402117 	ldw	r5,132(sp)
   8a1cc:	d9002017 	ldw	r4,128(sp)
   8a1d0:	d9801a04 	addi	r6,sp,104
   8a1d4:	008917c0 	call	8917c <__sprint_r.part.0>
   8a1d8:	103f811e 	bne	r2,zero,89fe0 <__alt_data_end+0xfffa8560>
   8a1dc:	d811883a 	mov	r8,sp
   8a1e0:	003ced06 	br	89598 <__alt_data_end+0xfffa7b18>
   8a1e4:	d9402117 	ldw	r5,132(sp)
   8a1e8:	d9002017 	ldw	r4,128(sp)
   8a1ec:	d9801a04 	addi	r6,sp,104
   8a1f0:	da402c15 	stw	r9,176(sp)
   8a1f4:	db802a15 	stw	r14,168(sp)
   8a1f8:	008917c0 	call	8917c <__sprint_r.part.0>
   8a1fc:	da402c17 	ldw	r9,176(sp)
   8a200:	db802a17 	ldw	r14,168(sp)
   8a204:	103f761e 	bne	r2,zero,89fe0 <__alt_data_end+0xfffa8560>
   8a208:	d9401b17 	ldw	r5,108(sp)
   8a20c:	d8801c17 	ldw	r2,112(sp)
   8a210:	d811883a 	mov	r8,sp
   8a214:	29000044 	addi	r4,r5,1
   8a218:	003d5b06 	br	89788 <__alt_data_end+0xfffa7d08>
   8a21c:	d9402117 	ldw	r5,132(sp)
   8a220:	d9002017 	ldw	r4,128(sp)
   8a224:	d9801a04 	addi	r6,sp,104
   8a228:	da402c15 	stw	r9,176(sp)
   8a22c:	008917c0 	call	8917c <__sprint_r.part.0>
   8a230:	da402c17 	ldw	r9,176(sp)
   8a234:	103f6a1e 	bne	r2,zero,89fe0 <__alt_data_end+0xfffa8560>
   8a238:	d9401b17 	ldw	r5,108(sp)
   8a23c:	d8801c17 	ldw	r2,112(sp)
   8a240:	d811883a 	mov	r8,sp
   8a244:	29000044 	addi	r4,r5,1
   8a248:	003f1006 	br	89e8c <__alt_data_end+0xfffa840c>
   8a24c:	1000c31e 	bne	r2,zero,8a55c <___vfiprintf_internal_r+0x12cc>
   8a250:	01000044 	movi	r4,1
   8a254:	000b883a 	mov	r5,zero
   8a258:	d811883a 	mov	r8,sp
   8a25c:	003f0d06 	br	89e94 <__alt_data_end+0xfffa8414>
   8a260:	d9402117 	ldw	r5,132(sp)
   8a264:	d9002017 	ldw	r4,128(sp)
   8a268:	d9801a04 	addi	r6,sp,104
   8a26c:	008917c0 	call	8917c <__sprint_r.part.0>
   8a270:	103f5b1e 	bne	r2,zero,89fe0 <__alt_data_end+0xfffa8560>
   8a274:	d9001b17 	ldw	r4,108(sp)
   8a278:	d8801c17 	ldw	r2,112(sp)
   8a27c:	d811883a 	mov	r8,sp
   8a280:	21000044 	addi	r4,r4,1
   8a284:	003d8006 	br	89888 <__alt_data_end+0xfffa7e08>
   8a288:	01000274 	movhi	r4,9
   8a28c:	2103b404 	addi	r4,r4,3792
   8a290:	d9002615 	stw	r4,152(sp)
   8a294:	d8c02215 	stw	r3,136(sp)
   8a298:	1029883a 	mov	r20,r2
   8a29c:	94c4b03a 	or	r2,r18,r19
   8a2a0:	103fb21e 	bne	r2,zero,8a16c <__alt_data_end+0xfffa86ec>
   8a2a4:	0039883a 	mov	fp,zero
   8a2a8:	00800084 	movi	r2,2
   8a2ac:	003e6b06 	br	89c5c <__alt_data_end+0xfffa81dc>
   8a2b0:	da802217 	ldw	r10,136(sp)
   8a2b4:	d8001d85 	stb	zero,118(sp)
   8a2b8:	0027883a 	mov	r19,zero
   8a2bc:	50800104 	addi	r2,r10,4
   8a2c0:	54800017 	ldw	r18,0(r10)
   8a2c4:	483e6016 	blt	r9,zero,89c48 <__alt_data_end+0xfffa81c8>
   8a2c8:	00ffdfc4 	movi	r3,-129
   8a2cc:	d8802215 	stw	r2,136(sp)
   8a2d0:	a0e8703a 	and	r20,r20,r3
   8a2d4:	0039883a 	mov	fp,zero
   8a2d8:	903ebb26 	beq	r18,zero,89dc8 <__alt_data_end+0xfffa8348>
   8a2dc:	00800244 	movi	r2,9
   8a2e0:	14bdee36 	bltu	r2,r18,89a9c <__alt_data_end+0xfffa801c>
   8a2e4:	003eba06 	br	89dd0 <__alt_data_end+0xfffa8350>
   8a2e8:	00800c04 	movi	r2,48
   8a2ec:	d8c01d45 	stb	r3,117(sp)
   8a2f0:	d8801d05 	stb	r2,116(sp)
   8a2f4:	d8001d85 	stb	zero,118(sp)
   8a2f8:	a0c00094 	ori	r3,r20,2
   8a2fc:	4800a916 	blt	r9,zero,8a5a4 <___vfiprintf_internal_r+0x1314>
   8a300:	00bfdfc4 	movi	r2,-129
   8a304:	a096703a 	and	r11,r20,r2
   8a308:	5d000094 	ori	r20,r11,2
   8a30c:	0039883a 	mov	fp,zero
   8a310:	003f9706 	br	8a170 <__alt_data_end+0xfffa86f0>
   8a314:	8025883a 	mov	r18,r16
   8a318:	003c2e06 	br	893d4 <__alt_data_end+0xfffa7954>
   8a31c:	00800274 	movhi	r2,9
   8a320:	1083b404 	addi	r2,r2,3792
   8a324:	0039883a 	mov	fp,zero
   8a328:	d8802615 	stw	r2,152(sp)
   8a32c:	003f9006 	br	8a170 <__alt_data_end+0xfffa86f0>
   8a330:	04a5c83a 	sub	r18,zero,r18
   8a334:	07000b44 	movi	fp,45
   8a338:	9004c03a 	cmpne	r2,r18,zero
   8a33c:	04e7c83a 	sub	r19,zero,r19
   8a340:	df001d85 	stb	fp,118(sp)
   8a344:	98a7c83a 	sub	r19,r19,r2
   8a348:	48009f16 	blt	r9,zero,8a5c8 <___vfiprintf_internal_r+0x1338>
   8a34c:	00bfdfc4 	movi	r2,-129
   8a350:	a0a8703a 	and	r20,r20,r2
   8a354:	003dd006 	br	89a98 <__alt_data_end+0xfffa8018>
   8a358:	70004c26 	beq	r14,zero,8a48c <___vfiprintf_internal_r+0x11fc>
   8a35c:	00800084 	movi	r2,2
   8a360:	d8c01d04 	addi	r3,sp,116
   8a364:	d8c00015 	stw	r3,0(sp)
   8a368:	d8800115 	stw	r2,4(sp)
   8a36c:	01000044 	movi	r4,1
   8a370:	d811883a 	mov	r8,sp
   8a374:	003f7306 	br	8a144 <__alt_data_end+0xfffa86c4>
   8a378:	a080100c 	andi	r2,r20,64
   8a37c:	da802217 	ldw	r10,136(sp)
   8a380:	103e0626 	beq	r2,zero,89b9c <__alt_data_end+0xfffa811c>
   8a384:	5480000f 	ldh	r18,0(r10)
   8a388:	52800104 	addi	r10,r10,4
   8a38c:	da802215 	stw	r10,136(sp)
   8a390:	9027d7fa 	srai	r19,r18,31
   8a394:	9805883a 	mov	r2,r19
   8a398:	003db806 	br	89a7c <__alt_data_end+0xfffa7ffc>
   8a39c:	a080040c 	andi	r2,r20,16
   8a3a0:	1000091e 	bne	r2,zero,8a3c8 <___vfiprintf_internal_r+0x1138>
   8a3a4:	a2c0100c 	andi	r11,r20,64
   8a3a8:	58000726 	beq	r11,zero,8a3c8 <___vfiprintf_internal_r+0x1138>
   8a3ac:	da802217 	ldw	r10,136(sp)
   8a3b0:	50800017 	ldw	r2,0(r10)
   8a3b4:	52800104 	addi	r10,r10,4
   8a3b8:	da802215 	stw	r10,136(sp)
   8a3bc:	da802317 	ldw	r10,140(sp)
   8a3c0:	1280000d 	sth	r10,0(r2)
   8a3c4:	003be706 	br	89364 <__alt_data_end+0xfffa78e4>
   8a3c8:	da802217 	ldw	r10,136(sp)
   8a3cc:	50800017 	ldw	r2,0(r10)
   8a3d0:	52800104 	addi	r10,r10,4
   8a3d4:	da802215 	stw	r10,136(sp)
   8a3d8:	da802317 	ldw	r10,140(sp)
   8a3dc:	12800015 	stw	r10,0(r2)
   8a3e0:	003be006 	br	89364 <__alt_data_end+0xfffa78e4>
   8a3e4:	a080100c 	andi	r2,r20,64
   8a3e8:	da802217 	ldw	r10,136(sp)
   8a3ec:	10003026 	beq	r2,zero,8a4b0 <___vfiprintf_internal_r+0x1220>
   8a3f0:	5480000b 	ldhu	r18,0(r10)
   8a3f4:	52800104 	addi	r10,r10,4
   8a3f8:	0027883a 	mov	r19,zero
   8a3fc:	da802215 	stw	r10,136(sp)
   8a400:	003d8006 	br	89a04 <__alt_data_end+0xfffa7f84>
   8a404:	80c00007 	ldb	r3,0(r16)
   8a408:	003c0006 	br	8940c <__alt_data_end+0xfffa798c>
   8a40c:	a080100c 	andi	r2,r20,64
   8a410:	d8001d85 	stb	zero,118(sp)
   8a414:	da802217 	ldw	r10,136(sp)
   8a418:	1000201e 	bne	r2,zero,8a49c <___vfiprintf_internal_r+0x120c>
   8a41c:	50800104 	addi	r2,r10,4
   8a420:	54800017 	ldw	r18,0(r10)
   8a424:	0027883a 	mov	r19,zero
   8a428:	483def0e 	bge	r9,zero,89be8 <__alt_data_end+0xfffa8168>
   8a42c:	94c6b03a 	or	r3,r18,r19
   8a430:	d8802215 	stw	r2,136(sp)
   8a434:	183d4e1e 	bne	r3,zero,89970 <__alt_data_end+0xfffa7ef0>
   8a438:	0039883a 	mov	fp,zero
   8a43c:	0005883a 	mov	r2,zero
   8a440:	003e0606 	br	89c5c <__alt_data_end+0xfffa81dc>
   8a444:	d9402117 	ldw	r5,132(sp)
   8a448:	d9002017 	ldw	r4,128(sp)
   8a44c:	d9801a04 	addi	r6,sp,104
   8a450:	da402c15 	stw	r9,176(sp)
   8a454:	db802a15 	stw	r14,168(sp)
   8a458:	008917c0 	call	8917c <__sprint_r.part.0>
   8a45c:	da402c17 	ldw	r9,176(sp)
   8a460:	db802a17 	ldw	r14,168(sp)
   8a464:	103ede1e 	bne	r2,zero,89fe0 <__alt_data_end+0xfffa8560>
   8a468:	d9401b17 	ldw	r5,108(sp)
   8a46c:	d8801c17 	ldw	r2,112(sp)
   8a470:	d811883a 	mov	r8,sp
   8a474:	29000044 	addi	r4,r5,1
   8a478:	003e7406 	br	89e4c <__alt_data_end+0xfffa83cc>
   8a47c:	00bfffc4 	movi	r2,-1
   8a480:	003c5806 	br	895e4 <__alt_data_end+0xfffa7b64>
   8a484:	d811883a 	mov	r8,sp
   8a488:	003ee806 	br	8a02c <__alt_data_end+0xfffa85ac>
   8a48c:	000b883a 	mov	r5,zero
   8a490:	01000044 	movi	r4,1
   8a494:	d811883a 	mov	r8,sp
   8a498:	003e7c06 	br	89e8c <__alt_data_end+0xfffa840c>
   8a49c:	50800104 	addi	r2,r10,4
   8a4a0:	5480000b 	ldhu	r18,0(r10)
   8a4a4:	0027883a 	mov	r19,zero
   8a4a8:	483dcf0e 	bge	r9,zero,89be8 <__alt_data_end+0xfffa8168>
   8a4ac:	003fdf06 	br	8a42c <__alt_data_end+0xfffa89ac>
   8a4b0:	54800017 	ldw	r18,0(r10)
   8a4b4:	52800104 	addi	r10,r10,4
   8a4b8:	0027883a 	mov	r19,zero
   8a4bc:	da802215 	stw	r10,136(sp)
   8a4c0:	003d5006 	br	89a04 <__alt_data_end+0xfffa7f84>
   8a4c4:	50800104 	addi	r2,r10,4
   8a4c8:	5480000b 	ldhu	r18,0(r10)
   8a4cc:	0027883a 	mov	r19,zero
   8a4d0:	483f7d0e 	bge	r9,zero,8a2c8 <__alt_data_end+0xfffa8848>
   8a4d4:	003ddc06 	br	89c48 <__alt_data_end+0xfffa81c8>
   8a4d8:	d8c02215 	stw	r3,136(sp)
   8a4dc:	0039883a 	mov	fp,zero
   8a4e0:	003ddb06 	br	89c50 <__alt_data_end+0xfffa81d0>
   8a4e4:	02800274 	movhi	r10,9
   8a4e8:	52841504 	addi	r10,r10,4180
   8a4ec:	da802415 	stw	r10,144(sp)
   8a4f0:	003e8306 	br	89f00 <__alt_data_end+0xfffa8480>
   8a4f4:	d8801c17 	ldw	r2,112(sp)
   8a4f8:	dd002117 	ldw	r20,132(sp)
   8a4fc:	103eb926 	beq	r2,zero,89fe4 <__alt_data_end+0xfffa8564>
   8a500:	d9002017 	ldw	r4,128(sp)
   8a504:	d9801a04 	addi	r6,sp,104
   8a508:	a00b883a 	mov	r5,r20
   8a50c:	008917c0 	call	8917c <__sprint_r.part.0>
   8a510:	003eb406 	br	89fe4 <__alt_data_end+0xfffa8564>
   8a514:	80c00043 	ldbu	r3,1(r16)
   8a518:	a5000814 	ori	r20,r20,32
   8a51c:	84000044 	addi	r16,r16,1
   8a520:	18c03fcc 	andi	r3,r3,255
   8a524:	18c0201c 	xori	r3,r3,128
   8a528:	18ffe004 	addi	r3,r3,-128
   8a52c:	003bb706 	br	8940c <__alt_data_end+0xfffa798c>
   8a530:	a809883a 	mov	r4,r21
   8a534:	d8c02a15 	stw	r3,168(sp)
   8a538:	da002b15 	stw	r8,172(sp)
   8a53c:	0081b380 	call	81b38 <strlen>
   8a540:	d8c02a17 	ldw	r3,168(sp)
   8a544:	1027883a 	mov	r19,r2
   8a548:	df001d83 	ldbu	fp,118(sp)
   8a54c:	d8c02215 	stw	r3,136(sp)
   8a550:	0013883a 	mov	r9,zero
   8a554:	da002b17 	ldw	r8,172(sp)
   8a558:	003c4d06 	br	89690 <__alt_data_end+0xfffa7c10>
   8a55c:	d9402117 	ldw	r5,132(sp)
   8a560:	d9002017 	ldw	r4,128(sp)
   8a564:	d9801a04 	addi	r6,sp,104
   8a568:	da402c15 	stw	r9,176(sp)
   8a56c:	008917c0 	call	8917c <__sprint_r.part.0>
   8a570:	da402c17 	ldw	r9,176(sp)
   8a574:	103e9a1e 	bne	r2,zero,89fe0 <__alt_data_end+0xfffa8560>
   8a578:	d9401b17 	ldw	r5,108(sp)
   8a57c:	d8801c17 	ldw	r2,112(sp)
   8a580:	d811883a 	mov	r8,sp
   8a584:	29000044 	addi	r4,r5,1
   8a588:	003e4206 	br	89e94 <__alt_data_end+0xfffa8414>
   8a58c:	d9401b17 	ldw	r5,108(sp)
   8a590:	01000274 	movhi	r4,9
   8a594:	21041904 	addi	r4,r4,4196
   8a598:	d9002415 	stw	r4,144(sp)
   8a59c:	29400044 	addi	r5,r5,1
   8a5a0:	003c6d06 	br	89758 <__alt_data_end+0xfffa7cd8>
   8a5a4:	0039883a 	mov	fp,zero
   8a5a8:	00800084 	movi	r2,2
   8a5ac:	10803fcc 	andi	r2,r2,255
   8a5b0:	01000044 	movi	r4,1
   8a5b4:	11001e26 	beq	r2,r4,8a630 <___vfiprintf_internal_r+0x13a0>
   8a5b8:	01000084 	movi	r4,2
   8a5bc:	11001e1e 	bne	r2,r4,8a638 <___vfiprintf_internal_r+0x13a8>
   8a5c0:	1829883a 	mov	r20,r3
   8a5c4:	003eea06 	br	8a170 <__alt_data_end+0xfffa86f0>
   8a5c8:	a007883a 	mov	r3,r20
   8a5cc:	00800044 	movi	r2,1
   8a5d0:	003ff606 	br	8a5ac <__alt_data_end+0xfffa8b2c>
   8a5d4:	00800184 	movi	r2,6
   8a5d8:	1240012e 	bgeu	r2,r9,8a5e0 <___vfiprintf_internal_r+0x1350>
   8a5dc:	1013883a 	mov	r9,r2
   8a5e0:	4827883a 	mov	r19,r9
   8a5e4:	4825883a 	mov	r18,r9
   8a5e8:	48001516 	blt	r9,zero,8a640 <___vfiprintf_internal_r+0x13b0>
   8a5ec:	05400274 	movhi	r21,9
   8a5f0:	d8c02215 	stw	r3,136(sp)
   8a5f4:	ad43b904 	addi	r21,r21,3812
   8a5f8:	003d1406 	br	89a4c <__alt_data_end+0xfffa7fcc>
   8a5fc:	02800274 	movhi	r10,9
   8a600:	52841504 	addi	r10,r10,4180
   8a604:	da802415 	stw	r10,144(sp)
   8a608:	200d883a 	mov	r6,r4
   8a60c:	003c9106 	br	89854 <__alt_data_end+0xfffa7dd4>
   8a610:	5021883a 	mov	r16,r10
   8a614:	0013883a 	mov	r9,zero
   8a618:	003b7d06 	br	89410 <__alt_data_end+0xfffa7990>
   8a61c:	4827883a 	mov	r19,r9
   8a620:	df001d83 	ldbu	fp,118(sp)
   8a624:	d8c02215 	stw	r3,136(sp)
   8a628:	0013883a 	mov	r9,zero
   8a62c:	003c1806 	br	89690 <__alt_data_end+0xfffa7c10>
   8a630:	1829883a 	mov	r20,r3
   8a634:	003d1806 	br	89a98 <__alt_data_end+0xfffa8018>
   8a638:	1829883a 	mov	r20,r3
   8a63c:	003ccd06 	br	89974 <__alt_data_end+0xfffa7ef4>
   8a640:	0025883a 	mov	r18,zero
   8a644:	003fe906 	br	8a5ec <__alt_data_end+0xfffa8b6c>
   8a648:	d8802217 	ldw	r2,136(sp)
   8a64c:	80c00043 	ldbu	r3,1(r16)
   8a650:	5021883a 	mov	r16,r10
   8a654:	12400017 	ldw	r9,0(r2)
   8a658:	10800104 	addi	r2,r2,4
   8a65c:	d8802215 	stw	r2,136(sp)
   8a660:	483faf0e 	bge	r9,zero,8a520 <__alt_data_end+0xfffa8aa0>
   8a664:	18c03fcc 	andi	r3,r3,255
   8a668:	18c0201c 	xori	r3,r3,128
   8a66c:	027fffc4 	movi	r9,-1
   8a670:	18ffe004 	addi	r3,r3,-128
   8a674:	003b6506 	br	8940c <__alt_data_end+0xfffa798c>
   8a678:	d9c01d85 	stb	r7,118(sp)
   8a67c:	003ca006 	br	89900 <__alt_data_end+0xfffa7e80>
   8a680:	d9c01d85 	stb	r7,118(sp)
   8a684:	003cad06 	br	8993c <__alt_data_end+0xfffa7ebc>
   8a688:	d9c01d85 	stb	r7,118(sp)
   8a68c:	003d7d06 	br	89c84 <__alt_data_end+0xfffa8204>
   8a690:	d9c01d85 	stb	r7,118(sp)
   8a694:	003d5f06 	br	89c14 <__alt_data_end+0xfffa8194>
   8a698:	a080004c 	andi	r2,r20,1
   8a69c:	0039883a 	mov	fp,zero
   8a6a0:	10000526 	beq	r2,zero,8a6b8 <___vfiprintf_internal_r+0x1428>
   8a6a4:	00800c04 	movi	r2,48
   8a6a8:	d88019c5 	stb	r2,103(sp)
   8a6ac:	dcc02717 	ldw	r19,156(sp)
   8a6b0:	dd4019c4 	addi	r21,sp,103
   8a6b4:	003bf606 	br	89690 <__alt_data_end+0xfffa7c10>
   8a6b8:	0027883a 	mov	r19,zero
   8a6bc:	dd401a04 	addi	r21,sp,104
   8a6c0:	003bf306 	br	89690 <__alt_data_end+0xfffa7c10>
   8a6c4:	d9c01d85 	stb	r7,118(sp)
   8a6c8:	003dc806 	br	89dec <__alt_data_end+0xfffa836c>
   8a6cc:	d9c01d85 	stb	r7,118(sp)
   8a6d0:	003d3a06 	br	89bbc <__alt_data_end+0xfffa813c>
   8a6d4:	d9c01d85 	stb	r7,118(sp)
   8a6d8:	003d2a06 	br	89b84 <__alt_data_end+0xfffa8104>
   8a6dc:	d9c01d85 	stb	r7,118(sp)
   8a6e0:	003cde06 	br	89a5c <__alt_data_end+0xfffa7fdc>
   8a6e4:	d9c01d85 	stb	r7,118(sp)
   8a6e8:	003cbc06 	br	899dc <__alt_data_end+0xfffa7f5c>

0008a6ec <__vfiprintf_internal>:
   8a6ec:	00800274 	movhi	r2,9
   8a6f0:	108b9b04 	addi	r2,r2,11884
   8a6f4:	300f883a 	mov	r7,r6
   8a6f8:	280d883a 	mov	r6,r5
   8a6fc:	200b883a 	mov	r5,r4
   8a700:	11000017 	ldw	r4,0(r2)
   8a704:	00892901 	jmpi	89290 <___vfiprintf_internal_r>

0008a708 <__sbprintf>:
   8a708:	2880030b 	ldhu	r2,12(r5)
   8a70c:	2ac01917 	ldw	r11,100(r5)
   8a710:	2a80038b 	ldhu	r10,14(r5)
   8a714:	2a400717 	ldw	r9,28(r5)
   8a718:	2a000917 	ldw	r8,36(r5)
   8a71c:	defee204 	addi	sp,sp,-1144
   8a720:	00c10004 	movi	r3,1024
   8a724:	dc011a15 	stw	r16,1128(sp)
   8a728:	10bfff4c 	andi	r2,r2,65533
   8a72c:	2821883a 	mov	r16,r5
   8a730:	d8cb883a 	add	r5,sp,r3
   8a734:	dc811c15 	stw	r18,1136(sp)
   8a738:	dc411b15 	stw	r17,1132(sp)
   8a73c:	dfc11d15 	stw	ra,1140(sp)
   8a740:	2025883a 	mov	r18,r4
   8a744:	d881030d 	sth	r2,1036(sp)
   8a748:	dac11915 	stw	r11,1124(sp)
   8a74c:	da81038d 	sth	r10,1038(sp)
   8a750:	da410715 	stw	r9,1052(sp)
   8a754:	da010915 	stw	r8,1060(sp)
   8a758:	dec10015 	stw	sp,1024(sp)
   8a75c:	dec10415 	stw	sp,1040(sp)
   8a760:	d8c10215 	stw	r3,1032(sp)
   8a764:	d8c10515 	stw	r3,1044(sp)
   8a768:	d8010615 	stw	zero,1048(sp)
   8a76c:	00892900 	call	89290 <___vfiprintf_internal_r>
   8a770:	1023883a 	mov	r17,r2
   8a774:	10000416 	blt	r2,zero,8a788 <__sbprintf+0x80>
   8a778:	d9410004 	addi	r5,sp,1024
   8a77c:	9009883a 	mov	r4,r18
   8a780:	0085ae80 	call	85ae8 <_fflush_r>
   8a784:	10000d1e 	bne	r2,zero,8a7bc <__sbprintf+0xb4>
   8a788:	d881030b 	ldhu	r2,1036(sp)
   8a78c:	1080100c 	andi	r2,r2,64
   8a790:	10000326 	beq	r2,zero,8a7a0 <__sbprintf+0x98>
   8a794:	8080030b 	ldhu	r2,12(r16)
   8a798:	10801014 	ori	r2,r2,64
   8a79c:	8080030d 	sth	r2,12(r16)
   8a7a0:	8805883a 	mov	r2,r17
   8a7a4:	dfc11d17 	ldw	ra,1140(sp)
   8a7a8:	dc811c17 	ldw	r18,1136(sp)
   8a7ac:	dc411b17 	ldw	r17,1132(sp)
   8a7b0:	dc011a17 	ldw	r16,1128(sp)
   8a7b4:	dec11e04 	addi	sp,sp,1144
   8a7b8:	f800283a 	ret
   8a7bc:	047fffc4 	movi	r17,-1
   8a7c0:	003ff106 	br	8a788 <__alt_data_end+0xfffa8d08>

0008a7c4 <_write_r>:
   8a7c4:	defffd04 	addi	sp,sp,-12
   8a7c8:	2805883a 	mov	r2,r5
   8a7cc:	dc000015 	stw	r16,0(sp)
   8a7d0:	04000274 	movhi	r16,9
   8a7d4:	dc400115 	stw	r17,4(sp)
   8a7d8:	300b883a 	mov	r5,r6
   8a7dc:	8412ed04 	addi	r16,r16,19380
   8a7e0:	2023883a 	mov	r17,r4
   8a7e4:	380d883a 	mov	r6,r7
   8a7e8:	1009883a 	mov	r4,r2
   8a7ec:	dfc00215 	stw	ra,8(sp)
   8a7f0:	80000015 	stw	zero,0(r16)
   8a7f4:	008f2740 	call	8f274 <write>
   8a7f8:	00ffffc4 	movi	r3,-1
   8a7fc:	10c00526 	beq	r2,r3,8a814 <_write_r+0x50>
   8a800:	dfc00217 	ldw	ra,8(sp)
   8a804:	dc400117 	ldw	r17,4(sp)
   8a808:	dc000017 	ldw	r16,0(sp)
   8a80c:	dec00304 	addi	sp,sp,12
   8a810:	f800283a 	ret
   8a814:	80c00017 	ldw	r3,0(r16)
   8a818:	183ff926 	beq	r3,zero,8a800 <__alt_data_end+0xfffa8d80>
   8a81c:	88c00015 	stw	r3,0(r17)
   8a820:	003ff706 	br	8a800 <__alt_data_end+0xfffa8d80>

0008a824 <_close_r>:
   8a824:	defffd04 	addi	sp,sp,-12
   8a828:	dc000015 	stw	r16,0(sp)
   8a82c:	04000274 	movhi	r16,9
   8a830:	dc400115 	stw	r17,4(sp)
   8a834:	8412ed04 	addi	r16,r16,19380
   8a838:	2023883a 	mov	r17,r4
   8a83c:	2809883a 	mov	r4,r5
   8a840:	dfc00215 	stw	ra,8(sp)
   8a844:	80000015 	stw	zero,0(r16)
   8a848:	008e2ac0 	call	8e2ac <close>
   8a84c:	00ffffc4 	movi	r3,-1
   8a850:	10c00526 	beq	r2,r3,8a868 <_close_r+0x44>
   8a854:	dfc00217 	ldw	ra,8(sp)
   8a858:	dc400117 	ldw	r17,4(sp)
   8a85c:	dc000017 	ldw	r16,0(sp)
   8a860:	dec00304 	addi	sp,sp,12
   8a864:	f800283a 	ret
   8a868:	80c00017 	ldw	r3,0(r16)
   8a86c:	183ff926 	beq	r3,zero,8a854 <__alt_data_end+0xfffa8dd4>
   8a870:	88c00015 	stw	r3,0(r17)
   8a874:	003ff706 	br	8a854 <__alt_data_end+0xfffa8dd4>

0008a878 <_calloc_r>:
   8a878:	298b383a 	mul	r5,r5,r6
   8a87c:	defffe04 	addi	sp,sp,-8
   8a880:	dfc00115 	stw	ra,4(sp)
   8a884:	dc000015 	stw	r16,0(sp)
   8a888:	0086c800 	call	86c80 <_malloc_r>
   8a88c:	10002926 	beq	r2,zero,8a934 <_calloc_r+0xbc>
   8a890:	11bfff17 	ldw	r6,-4(r2)
   8a894:	1021883a 	mov	r16,r2
   8a898:	00bfff04 	movi	r2,-4
   8a89c:	308c703a 	and	r6,r6,r2
   8a8a0:	00c00904 	movi	r3,36
   8a8a4:	308d883a 	add	r6,r6,r2
   8a8a8:	19801636 	bltu	r3,r6,8a904 <_calloc_r+0x8c>
   8a8ac:	008004c4 	movi	r2,19
   8a8b0:	11800b2e 	bgeu	r2,r6,8a8e0 <_calloc_r+0x68>
   8a8b4:	80000015 	stw	zero,0(r16)
   8a8b8:	80000115 	stw	zero,4(r16)
   8a8bc:	008006c4 	movi	r2,27
   8a8c0:	11801a2e 	bgeu	r2,r6,8a92c <_calloc_r+0xb4>
   8a8c4:	80000215 	stw	zero,8(r16)
   8a8c8:	80000315 	stw	zero,12(r16)
   8a8cc:	30c0151e 	bne	r6,r3,8a924 <_calloc_r+0xac>
   8a8d0:	80000415 	stw	zero,16(r16)
   8a8d4:	80800604 	addi	r2,r16,24
   8a8d8:	80000515 	stw	zero,20(r16)
   8a8dc:	00000106 	br	8a8e4 <_calloc_r+0x6c>
   8a8e0:	8005883a 	mov	r2,r16
   8a8e4:	10000015 	stw	zero,0(r2)
   8a8e8:	10000115 	stw	zero,4(r2)
   8a8ec:	10000215 	stw	zero,8(r2)
   8a8f0:	8005883a 	mov	r2,r16
   8a8f4:	dfc00117 	ldw	ra,4(sp)
   8a8f8:	dc000017 	ldw	r16,0(sp)
   8a8fc:	dec00204 	addi	sp,sp,8
   8a900:	f800283a 	ret
   8a904:	000b883a 	mov	r5,zero
   8a908:	8009883a 	mov	r4,r16
   8a90c:	00878140 	call	87814 <memset>
   8a910:	8005883a 	mov	r2,r16
   8a914:	dfc00117 	ldw	ra,4(sp)
   8a918:	dc000017 	ldw	r16,0(sp)
   8a91c:	dec00204 	addi	sp,sp,8
   8a920:	f800283a 	ret
   8a924:	80800404 	addi	r2,r16,16
   8a928:	003fee06 	br	8a8e4 <__alt_data_end+0xfffa8e64>
   8a92c:	80800204 	addi	r2,r16,8
   8a930:	003fec06 	br	8a8e4 <__alt_data_end+0xfffa8e64>
   8a934:	0005883a 	mov	r2,zero
   8a938:	003fee06 	br	8a8f4 <__alt_data_end+0xfffa8e74>

0008a93c <_fclose_r>:
   8a93c:	28003926 	beq	r5,zero,8aa24 <_fclose_r+0xe8>
   8a940:	defffc04 	addi	sp,sp,-16
   8a944:	dc400115 	stw	r17,4(sp)
   8a948:	dc000015 	stw	r16,0(sp)
   8a94c:	dfc00315 	stw	ra,12(sp)
   8a950:	dc800215 	stw	r18,8(sp)
   8a954:	2023883a 	mov	r17,r4
   8a958:	2821883a 	mov	r16,r5
   8a95c:	20000226 	beq	r4,zero,8a968 <_fclose_r+0x2c>
   8a960:	20800e17 	ldw	r2,56(r4)
   8a964:	10002726 	beq	r2,zero,8aa04 <_fclose_r+0xc8>
   8a968:	8080030f 	ldh	r2,12(r16)
   8a96c:	1000071e 	bne	r2,zero,8a98c <_fclose_r+0x50>
   8a970:	0005883a 	mov	r2,zero
   8a974:	dfc00317 	ldw	ra,12(sp)
   8a978:	dc800217 	ldw	r18,8(sp)
   8a97c:	dc400117 	ldw	r17,4(sp)
   8a980:	dc000017 	ldw	r16,0(sp)
   8a984:	dec00404 	addi	sp,sp,16
   8a988:	f800283a 	ret
   8a98c:	800b883a 	mov	r5,r16
   8a990:	8809883a 	mov	r4,r17
   8a994:	00858cc0 	call	858cc <__sflush_r>
   8a998:	1025883a 	mov	r18,r2
   8a99c:	80800b17 	ldw	r2,44(r16)
   8a9a0:	10000426 	beq	r2,zero,8a9b4 <_fclose_r+0x78>
   8a9a4:	81400717 	ldw	r5,28(r16)
   8a9a8:	8809883a 	mov	r4,r17
   8a9ac:	103ee83a 	callr	r2
   8a9b0:	10001616 	blt	r2,zero,8aa0c <_fclose_r+0xd0>
   8a9b4:	8080030b 	ldhu	r2,12(r16)
   8a9b8:	1080200c 	andi	r2,r2,128
   8a9bc:	1000151e 	bne	r2,zero,8aa14 <_fclose_r+0xd8>
   8a9c0:	81400c17 	ldw	r5,48(r16)
   8a9c4:	28000526 	beq	r5,zero,8a9dc <_fclose_r+0xa0>
   8a9c8:	80801004 	addi	r2,r16,64
   8a9cc:	28800226 	beq	r5,r2,8a9d8 <_fclose_r+0x9c>
   8a9d0:	8809883a 	mov	r4,r17
   8a9d4:	00860380 	call	86038 <_free_r>
   8a9d8:	80000c15 	stw	zero,48(r16)
   8a9dc:	81401117 	ldw	r5,68(r16)
   8a9e0:	28000326 	beq	r5,zero,8a9f0 <_fclose_r+0xb4>
   8a9e4:	8809883a 	mov	r4,r17
   8a9e8:	00860380 	call	86038 <_free_r>
   8a9ec:	80001115 	stw	zero,68(r16)
   8a9f0:	0085ed40 	call	85ed4 <__sfp_lock_acquire>
   8a9f4:	8000030d 	sth	zero,12(r16)
   8a9f8:	0085ed80 	call	85ed8 <__sfp_lock_release>
   8a9fc:	9005883a 	mov	r2,r18
   8aa00:	003fdc06 	br	8a974 <__alt_data_end+0xfffa8ef4>
   8aa04:	0085ec40 	call	85ec4 <__sinit>
   8aa08:	003fd706 	br	8a968 <__alt_data_end+0xfffa8ee8>
   8aa0c:	04bfffc4 	movi	r18,-1
   8aa10:	003fe806 	br	8a9b4 <__alt_data_end+0xfffa8f34>
   8aa14:	81400417 	ldw	r5,16(r16)
   8aa18:	8809883a 	mov	r4,r17
   8aa1c:	00860380 	call	86038 <_free_r>
   8aa20:	003fe706 	br	8a9c0 <__alt_data_end+0xfffa8f40>
   8aa24:	0005883a 	mov	r2,zero
   8aa28:	f800283a 	ret

0008aa2c <fclose>:
   8aa2c:	00800274 	movhi	r2,9
   8aa30:	108b9b04 	addi	r2,r2,11884
   8aa34:	200b883a 	mov	r5,r4
   8aa38:	11000017 	ldw	r4,0(r2)
   8aa3c:	008a93c1 	jmpi	8a93c <_fclose_r>

0008aa40 <__fputwc>:
   8aa40:	defff804 	addi	sp,sp,-32
   8aa44:	dcc00415 	stw	r19,16(sp)
   8aa48:	dc800315 	stw	r18,12(sp)
   8aa4c:	dc000115 	stw	r16,4(sp)
   8aa50:	dfc00715 	stw	ra,28(sp)
   8aa54:	dd400615 	stw	r21,24(sp)
   8aa58:	dd000515 	stw	r20,20(sp)
   8aa5c:	dc400215 	stw	r17,8(sp)
   8aa60:	2027883a 	mov	r19,r4
   8aa64:	2825883a 	mov	r18,r5
   8aa68:	3021883a 	mov	r16,r6
   8aa6c:	0086a700 	call	86a70 <__locale_mb_cur_max>
   8aa70:	00c00044 	movi	r3,1
   8aa74:	10c03e26 	beq	r2,r3,8ab70 <__fputwc+0x130>
   8aa78:	81c01704 	addi	r7,r16,92
   8aa7c:	900d883a 	mov	r6,r18
   8aa80:	d80b883a 	mov	r5,sp
   8aa84:	9809883a 	mov	r4,r19
   8aa88:	008af100 	call	8af10 <_wcrtomb_r>
   8aa8c:	1029883a 	mov	r20,r2
   8aa90:	00bfffc4 	movi	r2,-1
   8aa94:	a0802026 	beq	r20,r2,8ab18 <__fputwc+0xd8>
   8aa98:	d9400003 	ldbu	r5,0(sp)
   8aa9c:	a0001c26 	beq	r20,zero,8ab10 <__fputwc+0xd0>
   8aaa0:	0023883a 	mov	r17,zero
   8aaa4:	05400284 	movi	r21,10
   8aaa8:	00000906 	br	8aad0 <__fputwc+0x90>
   8aaac:	80800017 	ldw	r2,0(r16)
   8aab0:	11400005 	stb	r5,0(r2)
   8aab4:	80c00017 	ldw	r3,0(r16)
   8aab8:	18c00044 	addi	r3,r3,1
   8aabc:	80c00015 	stw	r3,0(r16)
   8aac0:	8c400044 	addi	r17,r17,1
   8aac4:	dc45883a 	add	r2,sp,r17
   8aac8:	8d00112e 	bgeu	r17,r20,8ab10 <__fputwc+0xd0>
   8aacc:	11400003 	ldbu	r5,0(r2)
   8aad0:	80c00217 	ldw	r3,8(r16)
   8aad4:	18ffffc4 	addi	r3,r3,-1
   8aad8:	80c00215 	stw	r3,8(r16)
   8aadc:	183ff30e 	bge	r3,zero,8aaac <__alt_data_end+0xfffa902c>
   8aae0:	80800617 	ldw	r2,24(r16)
   8aae4:	18801916 	blt	r3,r2,8ab4c <__fputwc+0x10c>
   8aae8:	80800017 	ldw	r2,0(r16)
   8aaec:	11400005 	stb	r5,0(r2)
   8aaf0:	80800017 	ldw	r2,0(r16)
   8aaf4:	10c00003 	ldbu	r3,0(r2)
   8aaf8:	10800044 	addi	r2,r2,1
   8aafc:	1d402326 	beq	r3,r21,8ab8c <__fputwc+0x14c>
   8ab00:	80800015 	stw	r2,0(r16)
   8ab04:	8c400044 	addi	r17,r17,1
   8ab08:	dc45883a 	add	r2,sp,r17
   8ab0c:	8d3fef36 	bltu	r17,r20,8aacc <__alt_data_end+0xfffa904c>
   8ab10:	9005883a 	mov	r2,r18
   8ab14:	00000406 	br	8ab28 <__fputwc+0xe8>
   8ab18:	80c0030b 	ldhu	r3,12(r16)
   8ab1c:	a005883a 	mov	r2,r20
   8ab20:	18c01014 	ori	r3,r3,64
   8ab24:	80c0030d 	sth	r3,12(r16)
   8ab28:	dfc00717 	ldw	ra,28(sp)
   8ab2c:	dd400617 	ldw	r21,24(sp)
   8ab30:	dd000517 	ldw	r20,20(sp)
   8ab34:	dcc00417 	ldw	r19,16(sp)
   8ab38:	dc800317 	ldw	r18,12(sp)
   8ab3c:	dc400217 	ldw	r17,8(sp)
   8ab40:	dc000117 	ldw	r16,4(sp)
   8ab44:	dec00804 	addi	sp,sp,32
   8ab48:	f800283a 	ret
   8ab4c:	800d883a 	mov	r6,r16
   8ab50:	29403fcc 	andi	r5,r5,255
   8ab54:	9809883a 	mov	r4,r19
   8ab58:	008adb80 	call	8adb8 <__swbuf_r>
   8ab5c:	10bfffe0 	cmpeqi	r2,r2,-1
   8ab60:	10803fcc 	andi	r2,r2,255
   8ab64:	103fd626 	beq	r2,zero,8aac0 <__alt_data_end+0xfffa9040>
   8ab68:	00bfffc4 	movi	r2,-1
   8ab6c:	003fee06 	br	8ab28 <__alt_data_end+0xfffa90a8>
   8ab70:	90ffffc4 	addi	r3,r18,-1
   8ab74:	01003f84 	movi	r4,254
   8ab78:	20ffbf36 	bltu	r4,r3,8aa78 <__alt_data_end+0xfffa8ff8>
   8ab7c:	900b883a 	mov	r5,r18
   8ab80:	dc800005 	stb	r18,0(sp)
   8ab84:	1029883a 	mov	r20,r2
   8ab88:	003fc506 	br	8aaa0 <__alt_data_end+0xfffa9020>
   8ab8c:	800d883a 	mov	r6,r16
   8ab90:	a80b883a 	mov	r5,r21
   8ab94:	9809883a 	mov	r4,r19
   8ab98:	008adb80 	call	8adb8 <__swbuf_r>
   8ab9c:	10bfffe0 	cmpeqi	r2,r2,-1
   8aba0:	003fef06 	br	8ab60 <__alt_data_end+0xfffa90e0>

0008aba4 <_fputwc_r>:
   8aba4:	3080030b 	ldhu	r2,12(r6)
   8aba8:	10c8000c 	andi	r3,r2,8192
   8abac:	1800051e 	bne	r3,zero,8abc4 <_fputwc_r+0x20>
   8abb0:	30c01917 	ldw	r3,100(r6)
   8abb4:	10880014 	ori	r2,r2,8192
   8abb8:	3080030d 	sth	r2,12(r6)
   8abbc:	18880014 	ori	r2,r3,8192
   8abc0:	30801915 	stw	r2,100(r6)
   8abc4:	008aa401 	jmpi	8aa40 <__fputwc>

0008abc8 <fputwc>:
   8abc8:	00800274 	movhi	r2,9
   8abcc:	defffc04 	addi	sp,sp,-16
   8abd0:	108b9b04 	addi	r2,r2,11884
   8abd4:	dc000115 	stw	r16,4(sp)
   8abd8:	14000017 	ldw	r16,0(r2)
   8abdc:	dc400215 	stw	r17,8(sp)
   8abe0:	dfc00315 	stw	ra,12(sp)
   8abe4:	2023883a 	mov	r17,r4
   8abe8:	80000226 	beq	r16,zero,8abf4 <fputwc+0x2c>
   8abec:	80800e17 	ldw	r2,56(r16)
   8abf0:	10001026 	beq	r2,zero,8ac34 <fputwc+0x6c>
   8abf4:	2880030b 	ldhu	r2,12(r5)
   8abf8:	10c8000c 	andi	r3,r2,8192
   8abfc:	1800051e 	bne	r3,zero,8ac14 <fputwc+0x4c>
   8ac00:	28c01917 	ldw	r3,100(r5)
   8ac04:	10880014 	ori	r2,r2,8192
   8ac08:	2880030d 	sth	r2,12(r5)
   8ac0c:	18880014 	ori	r2,r3,8192
   8ac10:	28801915 	stw	r2,100(r5)
   8ac14:	280d883a 	mov	r6,r5
   8ac18:	8009883a 	mov	r4,r16
   8ac1c:	880b883a 	mov	r5,r17
   8ac20:	dfc00317 	ldw	ra,12(sp)
   8ac24:	dc400217 	ldw	r17,8(sp)
   8ac28:	dc000117 	ldw	r16,4(sp)
   8ac2c:	dec00404 	addi	sp,sp,16
   8ac30:	008aa401 	jmpi	8aa40 <__fputwc>
   8ac34:	8009883a 	mov	r4,r16
   8ac38:	d9400015 	stw	r5,0(sp)
   8ac3c:	0085ec40 	call	85ec4 <__sinit>
   8ac40:	d9400017 	ldw	r5,0(sp)
   8ac44:	003feb06 	br	8abf4 <__alt_data_end+0xfffa9174>

0008ac48 <_fstat_r>:
   8ac48:	defffd04 	addi	sp,sp,-12
   8ac4c:	2805883a 	mov	r2,r5
   8ac50:	dc000015 	stw	r16,0(sp)
   8ac54:	04000274 	movhi	r16,9
   8ac58:	dc400115 	stw	r17,4(sp)
   8ac5c:	8412ed04 	addi	r16,r16,19380
   8ac60:	2023883a 	mov	r17,r4
   8ac64:	300b883a 	mov	r5,r6
   8ac68:	1009883a 	mov	r4,r2
   8ac6c:	dfc00215 	stw	ra,8(sp)
   8ac70:	80000015 	stw	zero,0(r16)
   8ac74:	008e3e40 	call	8e3e4 <fstat>
   8ac78:	00ffffc4 	movi	r3,-1
   8ac7c:	10c00526 	beq	r2,r3,8ac94 <_fstat_r+0x4c>
   8ac80:	dfc00217 	ldw	ra,8(sp)
   8ac84:	dc400117 	ldw	r17,4(sp)
   8ac88:	dc000017 	ldw	r16,0(sp)
   8ac8c:	dec00304 	addi	sp,sp,12
   8ac90:	f800283a 	ret
   8ac94:	80c00017 	ldw	r3,0(r16)
   8ac98:	183ff926 	beq	r3,zero,8ac80 <__alt_data_end+0xfffa9200>
   8ac9c:	88c00015 	stw	r3,0(r17)
   8aca0:	003ff706 	br	8ac80 <__alt_data_end+0xfffa9200>

0008aca4 <_isatty_r>:
   8aca4:	defffd04 	addi	sp,sp,-12
   8aca8:	dc000015 	stw	r16,0(sp)
   8acac:	04000274 	movhi	r16,9
   8acb0:	dc400115 	stw	r17,4(sp)
   8acb4:	8412ed04 	addi	r16,r16,19380
   8acb8:	2023883a 	mov	r17,r4
   8acbc:	2809883a 	mov	r4,r5
   8acc0:	dfc00215 	stw	ra,8(sp)
   8acc4:	80000015 	stw	zero,0(r16)
   8acc8:	008eae40 	call	8eae4 <isatty>
   8accc:	00ffffc4 	movi	r3,-1
   8acd0:	10c00526 	beq	r2,r3,8ace8 <_isatty_r+0x44>
   8acd4:	dfc00217 	ldw	ra,8(sp)
   8acd8:	dc400117 	ldw	r17,4(sp)
   8acdc:	dc000017 	ldw	r16,0(sp)
   8ace0:	dec00304 	addi	sp,sp,12
   8ace4:	f800283a 	ret
   8ace8:	80c00017 	ldw	r3,0(r16)
   8acec:	183ff926 	beq	r3,zero,8acd4 <__alt_data_end+0xfffa9254>
   8acf0:	88c00015 	stw	r3,0(r17)
   8acf4:	003ff706 	br	8acd4 <__alt_data_end+0xfffa9254>

0008acf8 <_lseek_r>:
   8acf8:	defffd04 	addi	sp,sp,-12
   8acfc:	2805883a 	mov	r2,r5
   8ad00:	dc000015 	stw	r16,0(sp)
   8ad04:	04000274 	movhi	r16,9
   8ad08:	dc400115 	stw	r17,4(sp)
   8ad0c:	300b883a 	mov	r5,r6
   8ad10:	8412ed04 	addi	r16,r16,19380
   8ad14:	2023883a 	mov	r17,r4
   8ad18:	380d883a 	mov	r6,r7
   8ad1c:	1009883a 	mov	r4,r2
   8ad20:	dfc00215 	stw	ra,8(sp)
   8ad24:	80000015 	stw	zero,0(r16)
   8ad28:	008ecb00 	call	8ecb0 <lseek>
   8ad2c:	00ffffc4 	movi	r3,-1
   8ad30:	10c00526 	beq	r2,r3,8ad48 <_lseek_r+0x50>
   8ad34:	dfc00217 	ldw	ra,8(sp)
   8ad38:	dc400117 	ldw	r17,4(sp)
   8ad3c:	dc000017 	ldw	r16,0(sp)
   8ad40:	dec00304 	addi	sp,sp,12
   8ad44:	f800283a 	ret
   8ad48:	80c00017 	ldw	r3,0(r16)
   8ad4c:	183ff926 	beq	r3,zero,8ad34 <__alt_data_end+0xfffa92b4>
   8ad50:	88c00015 	stw	r3,0(r17)
   8ad54:	003ff706 	br	8ad34 <__alt_data_end+0xfffa92b4>

0008ad58 <_read_r>:
   8ad58:	defffd04 	addi	sp,sp,-12
   8ad5c:	2805883a 	mov	r2,r5
   8ad60:	dc000015 	stw	r16,0(sp)
   8ad64:	04000274 	movhi	r16,9
   8ad68:	dc400115 	stw	r17,4(sp)
   8ad6c:	300b883a 	mov	r5,r6
   8ad70:	8412ed04 	addi	r16,r16,19380
   8ad74:	2023883a 	mov	r17,r4
   8ad78:	380d883a 	mov	r6,r7
   8ad7c:	1009883a 	mov	r4,r2
   8ad80:	dfc00215 	stw	ra,8(sp)
   8ad84:	80000015 	stw	zero,0(r16)
   8ad88:	008ee840 	call	8ee84 <read>
   8ad8c:	00ffffc4 	movi	r3,-1
   8ad90:	10c00526 	beq	r2,r3,8ada8 <_read_r+0x50>
   8ad94:	dfc00217 	ldw	ra,8(sp)
   8ad98:	dc400117 	ldw	r17,4(sp)
   8ad9c:	dc000017 	ldw	r16,0(sp)
   8ada0:	dec00304 	addi	sp,sp,12
   8ada4:	f800283a 	ret
   8ada8:	80c00017 	ldw	r3,0(r16)
   8adac:	183ff926 	beq	r3,zero,8ad94 <__alt_data_end+0xfffa9314>
   8adb0:	88c00015 	stw	r3,0(r17)
   8adb4:	003ff706 	br	8ad94 <__alt_data_end+0xfffa9314>

0008adb8 <__swbuf_r>:
   8adb8:	defffb04 	addi	sp,sp,-20
   8adbc:	dcc00315 	stw	r19,12(sp)
   8adc0:	dc800215 	stw	r18,8(sp)
   8adc4:	dc000015 	stw	r16,0(sp)
   8adc8:	dfc00415 	stw	ra,16(sp)
   8adcc:	dc400115 	stw	r17,4(sp)
   8add0:	2025883a 	mov	r18,r4
   8add4:	2827883a 	mov	r19,r5
   8add8:	3021883a 	mov	r16,r6
   8addc:	20000226 	beq	r4,zero,8ade8 <__swbuf_r+0x30>
   8ade0:	20800e17 	ldw	r2,56(r4)
   8ade4:	10004226 	beq	r2,zero,8aef0 <__swbuf_r+0x138>
   8ade8:	80800617 	ldw	r2,24(r16)
   8adec:	8100030b 	ldhu	r4,12(r16)
   8adf0:	80800215 	stw	r2,8(r16)
   8adf4:	2080020c 	andi	r2,r4,8
   8adf8:	10003626 	beq	r2,zero,8aed4 <__swbuf_r+0x11c>
   8adfc:	80c00417 	ldw	r3,16(r16)
   8ae00:	18003426 	beq	r3,zero,8aed4 <__swbuf_r+0x11c>
   8ae04:	2088000c 	andi	r2,r4,8192
   8ae08:	9c403fcc 	andi	r17,r19,255
   8ae0c:	10001a26 	beq	r2,zero,8ae78 <__swbuf_r+0xc0>
   8ae10:	80800017 	ldw	r2,0(r16)
   8ae14:	81000517 	ldw	r4,20(r16)
   8ae18:	10c7c83a 	sub	r3,r2,r3
   8ae1c:	1900200e 	bge	r3,r4,8aea0 <__swbuf_r+0xe8>
   8ae20:	18c00044 	addi	r3,r3,1
   8ae24:	81000217 	ldw	r4,8(r16)
   8ae28:	11400044 	addi	r5,r2,1
   8ae2c:	81400015 	stw	r5,0(r16)
   8ae30:	213fffc4 	addi	r4,r4,-1
   8ae34:	81000215 	stw	r4,8(r16)
   8ae38:	14c00005 	stb	r19,0(r2)
   8ae3c:	80800517 	ldw	r2,20(r16)
   8ae40:	10c01e26 	beq	r2,r3,8aebc <__swbuf_r+0x104>
   8ae44:	8080030b 	ldhu	r2,12(r16)
   8ae48:	1080004c 	andi	r2,r2,1
   8ae4c:	10000226 	beq	r2,zero,8ae58 <__swbuf_r+0xa0>
   8ae50:	00800284 	movi	r2,10
   8ae54:	88801926 	beq	r17,r2,8aebc <__swbuf_r+0x104>
   8ae58:	8805883a 	mov	r2,r17
   8ae5c:	dfc00417 	ldw	ra,16(sp)
   8ae60:	dcc00317 	ldw	r19,12(sp)
   8ae64:	dc800217 	ldw	r18,8(sp)
   8ae68:	dc400117 	ldw	r17,4(sp)
   8ae6c:	dc000017 	ldw	r16,0(sp)
   8ae70:	dec00504 	addi	sp,sp,20
   8ae74:	f800283a 	ret
   8ae78:	81401917 	ldw	r5,100(r16)
   8ae7c:	00b7ffc4 	movi	r2,-8193
   8ae80:	21080014 	ori	r4,r4,8192
   8ae84:	2884703a 	and	r2,r5,r2
   8ae88:	80801915 	stw	r2,100(r16)
   8ae8c:	80800017 	ldw	r2,0(r16)
   8ae90:	8100030d 	sth	r4,12(r16)
   8ae94:	81000517 	ldw	r4,20(r16)
   8ae98:	10c7c83a 	sub	r3,r2,r3
   8ae9c:	193fe016 	blt	r3,r4,8ae20 <__alt_data_end+0xfffa93a0>
   8aea0:	800b883a 	mov	r5,r16
   8aea4:	9009883a 	mov	r4,r18
   8aea8:	0085ae80 	call	85ae8 <_fflush_r>
   8aeac:	1000071e 	bne	r2,zero,8aecc <__swbuf_r+0x114>
   8aeb0:	80800017 	ldw	r2,0(r16)
   8aeb4:	00c00044 	movi	r3,1
   8aeb8:	003fda06 	br	8ae24 <__alt_data_end+0xfffa93a4>
   8aebc:	800b883a 	mov	r5,r16
   8aec0:	9009883a 	mov	r4,r18
   8aec4:	0085ae80 	call	85ae8 <_fflush_r>
   8aec8:	103fe326 	beq	r2,zero,8ae58 <__alt_data_end+0xfffa93d8>
   8aecc:	00bfffc4 	movi	r2,-1
   8aed0:	003fe206 	br	8ae5c <__alt_data_end+0xfffa93dc>
   8aed4:	800b883a 	mov	r5,r16
   8aed8:	9009883a 	mov	r4,r18
   8aedc:	0083ef00 	call	83ef0 <__swsetup_r>
   8aee0:	103ffa1e 	bne	r2,zero,8aecc <__alt_data_end+0xfffa944c>
   8aee4:	8100030b 	ldhu	r4,12(r16)
   8aee8:	80c00417 	ldw	r3,16(r16)
   8aeec:	003fc506 	br	8ae04 <__alt_data_end+0xfffa9384>
   8aef0:	0085ec40 	call	85ec4 <__sinit>
   8aef4:	003fbc06 	br	8ade8 <__alt_data_end+0xfffa9368>

0008aef8 <__swbuf>:
   8aef8:	00800274 	movhi	r2,9
   8aefc:	108b9b04 	addi	r2,r2,11884
   8af00:	280d883a 	mov	r6,r5
   8af04:	200b883a 	mov	r5,r4
   8af08:	11000017 	ldw	r4,0(r2)
   8af0c:	008adb81 	jmpi	8adb8 <__swbuf_r>

0008af10 <_wcrtomb_r>:
   8af10:	defff604 	addi	sp,sp,-40
   8af14:	00800274 	movhi	r2,9
   8af18:	dc800815 	stw	r18,32(sp)
   8af1c:	dc400715 	stw	r17,28(sp)
   8af20:	dc000615 	stw	r16,24(sp)
   8af24:	108b9f04 	addi	r2,r2,11900
   8af28:	dfc00915 	stw	ra,36(sp)
   8af2c:	2021883a 	mov	r16,r4
   8af30:	3823883a 	mov	r17,r7
   8af34:	14800017 	ldw	r18,0(r2)
   8af38:	28001426 	beq	r5,zero,8af8c <_wcrtomb_r+0x7c>
   8af3c:	d9400415 	stw	r5,16(sp)
   8af40:	d9800515 	stw	r6,20(sp)
   8af44:	0086a640 	call	86a64 <__locale_charset>
   8af48:	d9800517 	ldw	r6,20(sp)
   8af4c:	d9400417 	ldw	r5,16(sp)
   8af50:	100f883a 	mov	r7,r2
   8af54:	dc400015 	stw	r17,0(sp)
   8af58:	8009883a 	mov	r4,r16
   8af5c:	903ee83a 	callr	r18
   8af60:	00ffffc4 	movi	r3,-1
   8af64:	10c0031e 	bne	r2,r3,8af74 <_wcrtomb_r+0x64>
   8af68:	88000015 	stw	zero,0(r17)
   8af6c:	00c02284 	movi	r3,138
   8af70:	80c00015 	stw	r3,0(r16)
   8af74:	dfc00917 	ldw	ra,36(sp)
   8af78:	dc800817 	ldw	r18,32(sp)
   8af7c:	dc400717 	ldw	r17,28(sp)
   8af80:	dc000617 	ldw	r16,24(sp)
   8af84:	dec00a04 	addi	sp,sp,40
   8af88:	f800283a 	ret
   8af8c:	0086a640 	call	86a64 <__locale_charset>
   8af90:	100f883a 	mov	r7,r2
   8af94:	dc400015 	stw	r17,0(sp)
   8af98:	000d883a 	mov	r6,zero
   8af9c:	d9400104 	addi	r5,sp,4
   8afa0:	8009883a 	mov	r4,r16
   8afa4:	903ee83a 	callr	r18
   8afa8:	003fed06 	br	8af60 <__alt_data_end+0xfffa94e0>

0008afac <wcrtomb>:
   8afac:	defff604 	addi	sp,sp,-40
   8afb0:	00800274 	movhi	r2,9
   8afb4:	dc800615 	stw	r18,24(sp)
   8afb8:	dc400515 	stw	r17,20(sp)
   8afbc:	108b9b04 	addi	r2,r2,11884
   8afc0:	dfc00915 	stw	ra,36(sp)
   8afc4:	dd000815 	stw	r20,32(sp)
   8afc8:	dcc00715 	stw	r19,28(sp)
   8afcc:	dc000415 	stw	r16,16(sp)
   8afd0:	3025883a 	mov	r18,r6
   8afd4:	14400017 	ldw	r17,0(r2)
   8afd8:	20001926 	beq	r4,zero,8b040 <wcrtomb+0x94>
   8afdc:	00800274 	movhi	r2,9
   8afe0:	108b9f04 	addi	r2,r2,11900
   8afe4:	15000017 	ldw	r20,0(r2)
   8afe8:	2021883a 	mov	r16,r4
   8afec:	2827883a 	mov	r19,r5
   8aff0:	0086a640 	call	86a64 <__locale_charset>
   8aff4:	100f883a 	mov	r7,r2
   8aff8:	dc800015 	stw	r18,0(sp)
   8affc:	980d883a 	mov	r6,r19
   8b000:	800b883a 	mov	r5,r16
   8b004:	8809883a 	mov	r4,r17
   8b008:	a03ee83a 	callr	r20
   8b00c:	00ffffc4 	movi	r3,-1
   8b010:	10c0031e 	bne	r2,r3,8b020 <wcrtomb+0x74>
   8b014:	90000015 	stw	zero,0(r18)
   8b018:	00c02284 	movi	r3,138
   8b01c:	88c00015 	stw	r3,0(r17)
   8b020:	dfc00917 	ldw	ra,36(sp)
   8b024:	dd000817 	ldw	r20,32(sp)
   8b028:	dcc00717 	ldw	r19,28(sp)
   8b02c:	dc800617 	ldw	r18,24(sp)
   8b030:	dc400517 	ldw	r17,20(sp)
   8b034:	dc000417 	ldw	r16,16(sp)
   8b038:	dec00a04 	addi	sp,sp,40
   8b03c:	f800283a 	ret
   8b040:	00800274 	movhi	r2,9
   8b044:	108b9f04 	addi	r2,r2,11900
   8b048:	14000017 	ldw	r16,0(r2)
   8b04c:	0086a640 	call	86a64 <__locale_charset>
   8b050:	100f883a 	mov	r7,r2
   8b054:	dc800015 	stw	r18,0(sp)
   8b058:	000d883a 	mov	r6,zero
   8b05c:	d9400104 	addi	r5,sp,4
   8b060:	8809883a 	mov	r4,r17
   8b064:	803ee83a 	callr	r16
   8b068:	003fe806 	br	8b00c <__alt_data_end+0xfffa958c>

0008b06c <__ascii_wctomb>:
   8b06c:	28000526 	beq	r5,zero,8b084 <__ascii_wctomb+0x18>
   8b070:	00803fc4 	movi	r2,255
   8b074:	11800536 	bltu	r2,r6,8b08c <__ascii_wctomb+0x20>
   8b078:	29800005 	stb	r6,0(r5)
   8b07c:	00800044 	movi	r2,1
   8b080:	f800283a 	ret
   8b084:	0005883a 	mov	r2,zero
   8b088:	f800283a 	ret
   8b08c:	00802284 	movi	r2,138
   8b090:	20800015 	stw	r2,0(r4)
   8b094:	00bfffc4 	movi	r2,-1
   8b098:	f800283a 	ret

0008b09c <_wctomb_r>:
   8b09c:	00800274 	movhi	r2,9
   8b0a0:	defff904 	addi	sp,sp,-28
   8b0a4:	108b9f04 	addi	r2,r2,11900
   8b0a8:	dfc00615 	stw	ra,24(sp)
   8b0ac:	dc400515 	stw	r17,20(sp)
   8b0b0:	dc000415 	stw	r16,16(sp)
   8b0b4:	3823883a 	mov	r17,r7
   8b0b8:	14000017 	ldw	r16,0(r2)
   8b0bc:	d9000115 	stw	r4,4(sp)
   8b0c0:	d9400215 	stw	r5,8(sp)
   8b0c4:	d9800315 	stw	r6,12(sp)
   8b0c8:	0086a640 	call	86a64 <__locale_charset>
   8b0cc:	d9800317 	ldw	r6,12(sp)
   8b0d0:	d9400217 	ldw	r5,8(sp)
   8b0d4:	d9000117 	ldw	r4,4(sp)
   8b0d8:	100f883a 	mov	r7,r2
   8b0dc:	dc400015 	stw	r17,0(sp)
   8b0e0:	803ee83a 	callr	r16
   8b0e4:	dfc00617 	ldw	ra,24(sp)
   8b0e8:	dc400517 	ldw	r17,20(sp)
   8b0ec:	dc000417 	ldw	r16,16(sp)
   8b0f0:	dec00704 	addi	sp,sp,28
   8b0f4:	f800283a 	ret

0008b0f8 <__muldi3>:
   8b0f8:	223fffcc 	andi	r8,r4,65535
   8b0fc:	2006d43a 	srli	r3,r4,16
   8b100:	32bfffcc 	andi	r10,r6,65535
   8b104:	3012d43a 	srli	r9,r6,16
   8b108:	4297383a 	mul	r11,r8,r10
   8b10c:	1a95383a 	mul	r10,r3,r10
   8b110:	4251383a 	mul	r8,r8,r9
   8b114:	5804d43a 	srli	r2,r11,16
   8b118:	4291883a 	add	r8,r8,r10
   8b11c:	1205883a 	add	r2,r2,r8
   8b120:	1a51383a 	mul	r8,r3,r9
   8b124:	1280022e 	bgeu	r2,r10,8b130 <__muldi3+0x38>
   8b128:	00c00074 	movhi	r3,1
   8b12c:	40d1883a 	add	r8,r8,r3
   8b130:	1006d43a 	srli	r3,r2,16
   8b134:	21cf383a 	mul	r7,r4,r7
   8b138:	314b383a 	mul	r5,r6,r5
   8b13c:	1004943a 	slli	r2,r2,16
   8b140:	1a11883a 	add	r8,r3,r8
   8b144:	5affffcc 	andi	r11,r11,65535
   8b148:	3947883a 	add	r3,r7,r5
   8b14c:	12c5883a 	add	r2,r2,r11
   8b150:	1a07883a 	add	r3,r3,r8
   8b154:	f800283a 	ret

0008b158 <__udivdi3>:
   8b158:	defff504 	addi	sp,sp,-44
   8b15c:	dcc00415 	stw	r19,16(sp)
   8b160:	dc000115 	stw	r16,4(sp)
   8b164:	dfc00a15 	stw	ra,40(sp)
   8b168:	df000915 	stw	fp,36(sp)
   8b16c:	ddc00815 	stw	r23,32(sp)
   8b170:	dd800715 	stw	r22,28(sp)
   8b174:	dd400615 	stw	r21,24(sp)
   8b178:	dd000515 	stw	r20,20(sp)
   8b17c:	dc800315 	stw	r18,12(sp)
   8b180:	dc400215 	stw	r17,8(sp)
   8b184:	2027883a 	mov	r19,r4
   8b188:	2821883a 	mov	r16,r5
   8b18c:	3800411e 	bne	r7,zero,8b294 <__udivdi3+0x13c>
   8b190:	3023883a 	mov	r17,r6
   8b194:	2025883a 	mov	r18,r4
   8b198:	2980522e 	bgeu	r5,r6,8b2e4 <__udivdi3+0x18c>
   8b19c:	00bfffd4 	movui	r2,65535
   8b1a0:	282d883a 	mov	r22,r5
   8b1a4:	1180a836 	bltu	r2,r6,8b448 <__udivdi3+0x2f0>
   8b1a8:	00803fc4 	movi	r2,255
   8b1ac:	1185803a 	cmpltu	r2,r2,r6
   8b1b0:	100490fa 	slli	r2,r2,3
   8b1b4:	3086d83a 	srl	r3,r6,r2
   8b1b8:	01000274 	movhi	r4,9
   8b1bc:	21041d04 	addi	r4,r4,4212
   8b1c0:	20c7883a 	add	r3,r4,r3
   8b1c4:	18c00003 	ldbu	r3,0(r3)
   8b1c8:	1885883a 	add	r2,r3,r2
   8b1cc:	00c00804 	movi	r3,32
   8b1d0:	1887c83a 	sub	r3,r3,r2
   8b1d4:	18000526 	beq	r3,zero,8b1ec <__udivdi3+0x94>
   8b1d8:	80e0983a 	sll	r16,r16,r3
   8b1dc:	9884d83a 	srl	r2,r19,r2
   8b1e0:	30e2983a 	sll	r17,r6,r3
   8b1e4:	98e4983a 	sll	r18,r19,r3
   8b1e8:	142cb03a 	or	r22,r2,r16
   8b1ec:	882ad43a 	srli	r21,r17,16
   8b1f0:	b009883a 	mov	r4,r22
   8b1f4:	8d3fffcc 	andi	r20,r17,65535
   8b1f8:	a80b883a 	mov	r5,r21
   8b1fc:	00819240 	call	81924 <__umodsi3>
   8b200:	b009883a 	mov	r4,r22
   8b204:	a80b883a 	mov	r5,r21
   8b208:	1027883a 	mov	r19,r2
   8b20c:	00818c00 	call	818c0 <__udivsi3>
   8b210:	102d883a 	mov	r22,r2
   8b214:	9826943a 	slli	r19,r19,16
   8b218:	9004d43a 	srli	r2,r18,16
   8b21c:	a5a1383a 	mul	r16,r20,r22
   8b220:	14c4b03a 	or	r2,r2,r19
   8b224:	1400052e 	bgeu	r2,r16,8b23c <__udivdi3+0xe4>
   8b228:	1445883a 	add	r2,r2,r17
   8b22c:	b0ffffc4 	addi	r3,r22,-1
   8b230:	14400136 	bltu	r2,r17,8b238 <__udivdi3+0xe0>
   8b234:	14012336 	bltu	r2,r16,8b6c4 <__udivdi3+0x56c>
   8b238:	182d883a 	mov	r22,r3
   8b23c:	1421c83a 	sub	r16,r2,r16
   8b240:	a80b883a 	mov	r5,r21
   8b244:	8009883a 	mov	r4,r16
   8b248:	00819240 	call	81924 <__umodsi3>
   8b24c:	1027883a 	mov	r19,r2
   8b250:	a80b883a 	mov	r5,r21
   8b254:	8009883a 	mov	r4,r16
   8b258:	00818c00 	call	818c0 <__udivsi3>
   8b25c:	9826943a 	slli	r19,r19,16
   8b260:	a0a9383a 	mul	r20,r20,r2
   8b264:	94bfffcc 	andi	r18,r18,65535
   8b268:	94e4b03a 	or	r18,r18,r19
   8b26c:	9500052e 	bgeu	r18,r20,8b284 <__udivdi3+0x12c>
   8b270:	8ca5883a 	add	r18,r17,r18
   8b274:	10ffffc4 	addi	r3,r2,-1
   8b278:	9440f136 	bltu	r18,r17,8b640 <__udivdi3+0x4e8>
   8b27c:	9500f02e 	bgeu	r18,r20,8b640 <__udivdi3+0x4e8>
   8b280:	10bfff84 	addi	r2,r2,-2
   8b284:	b00c943a 	slli	r6,r22,16
   8b288:	0007883a 	mov	r3,zero
   8b28c:	3084b03a 	or	r2,r6,r2
   8b290:	00005906 	br	8b3f8 <__udivdi3+0x2a0>
   8b294:	29c05636 	bltu	r5,r7,8b3f0 <__udivdi3+0x298>
   8b298:	00bfffd4 	movui	r2,65535
   8b29c:	11c0622e 	bgeu	r2,r7,8b428 <__udivdi3+0x2d0>
   8b2a0:	00804034 	movhi	r2,256
   8b2a4:	10bfffc4 	addi	r2,r2,-1
   8b2a8:	11c0ee36 	bltu	r2,r7,8b664 <__udivdi3+0x50c>
   8b2ac:	00800404 	movi	r2,16
   8b2b0:	3886d83a 	srl	r3,r7,r2
   8b2b4:	01000274 	movhi	r4,9
   8b2b8:	21041d04 	addi	r4,r4,4212
   8b2bc:	20c7883a 	add	r3,r4,r3
   8b2c0:	18c00003 	ldbu	r3,0(r3)
   8b2c4:	05400804 	movi	r21,32
   8b2c8:	1885883a 	add	r2,r3,r2
   8b2cc:	a8abc83a 	sub	r21,r21,r2
   8b2d0:	a800621e 	bne	r21,zero,8b45c <__udivdi3+0x304>
   8b2d4:	3c00e936 	bltu	r7,r16,8b67c <__udivdi3+0x524>
   8b2d8:	9985403a 	cmpgeu	r2,r19,r6
   8b2dc:	0007883a 	mov	r3,zero
   8b2e0:	00004506 	br	8b3f8 <__udivdi3+0x2a0>
   8b2e4:	3000041e 	bne	r6,zero,8b2f8 <__udivdi3+0x1a0>
   8b2e8:	000b883a 	mov	r5,zero
   8b2ec:	01000044 	movi	r4,1
   8b2f0:	00818c00 	call	818c0 <__udivsi3>
   8b2f4:	1023883a 	mov	r17,r2
   8b2f8:	00bfffd4 	movui	r2,65535
   8b2fc:	14404e2e 	bgeu	r2,r17,8b438 <__udivdi3+0x2e0>
   8b300:	00804034 	movhi	r2,256
   8b304:	10bfffc4 	addi	r2,r2,-1
   8b308:	1440d836 	bltu	r2,r17,8b66c <__udivdi3+0x514>
   8b30c:	00800404 	movi	r2,16
   8b310:	8886d83a 	srl	r3,r17,r2
   8b314:	01000274 	movhi	r4,9
   8b318:	21041d04 	addi	r4,r4,4212
   8b31c:	20c7883a 	add	r3,r4,r3
   8b320:	18c00003 	ldbu	r3,0(r3)
   8b324:	1885883a 	add	r2,r3,r2
   8b328:	00c00804 	movi	r3,32
   8b32c:	1887c83a 	sub	r3,r3,r2
   8b330:	18008f1e 	bne	r3,zero,8b570 <__udivdi3+0x418>
   8b334:	882ad43a 	srli	r21,r17,16
   8b338:	8461c83a 	sub	r16,r16,r17
   8b33c:	8d3fffcc 	andi	r20,r17,65535
   8b340:	00c00044 	movi	r3,1
   8b344:	8009883a 	mov	r4,r16
   8b348:	a80b883a 	mov	r5,r21
   8b34c:	d8c00015 	stw	r3,0(sp)
   8b350:	00819240 	call	81924 <__umodsi3>
   8b354:	8009883a 	mov	r4,r16
   8b358:	a80b883a 	mov	r5,r21
   8b35c:	1027883a 	mov	r19,r2
   8b360:	00818c00 	call	818c0 <__udivsi3>
   8b364:	9826943a 	slli	r19,r19,16
   8b368:	9008d43a 	srli	r4,r18,16
   8b36c:	1521383a 	mul	r16,r2,r20
   8b370:	102d883a 	mov	r22,r2
   8b374:	24c8b03a 	or	r4,r4,r19
   8b378:	d8c00017 	ldw	r3,0(sp)
   8b37c:	2400052e 	bgeu	r4,r16,8b394 <__udivdi3+0x23c>
   8b380:	2449883a 	add	r4,r4,r17
   8b384:	b0bfffc4 	addi	r2,r22,-1
   8b388:	24400136 	bltu	r4,r17,8b390 <__udivdi3+0x238>
   8b38c:	2400ca36 	bltu	r4,r16,8b6b8 <__udivdi3+0x560>
   8b390:	102d883a 	mov	r22,r2
   8b394:	2421c83a 	sub	r16,r4,r16
   8b398:	a80b883a 	mov	r5,r21
   8b39c:	8009883a 	mov	r4,r16
   8b3a0:	d8c00015 	stw	r3,0(sp)
   8b3a4:	00819240 	call	81924 <__umodsi3>
   8b3a8:	1027883a 	mov	r19,r2
   8b3ac:	a80b883a 	mov	r5,r21
   8b3b0:	8009883a 	mov	r4,r16
   8b3b4:	00818c00 	call	818c0 <__udivsi3>
   8b3b8:	9826943a 	slli	r19,r19,16
   8b3bc:	1529383a 	mul	r20,r2,r20
   8b3c0:	94bfffcc 	andi	r18,r18,65535
   8b3c4:	94e4b03a 	or	r18,r18,r19
   8b3c8:	d8c00017 	ldw	r3,0(sp)
   8b3cc:	9500052e 	bgeu	r18,r20,8b3e4 <__udivdi3+0x28c>
   8b3d0:	8ca5883a 	add	r18,r17,r18
   8b3d4:	113fffc4 	addi	r4,r2,-1
   8b3d8:	94409736 	bltu	r18,r17,8b638 <__udivdi3+0x4e0>
   8b3dc:	9500962e 	bgeu	r18,r20,8b638 <__udivdi3+0x4e0>
   8b3e0:	10bfff84 	addi	r2,r2,-2
   8b3e4:	b00c943a 	slli	r6,r22,16
   8b3e8:	3084b03a 	or	r2,r6,r2
   8b3ec:	00000206 	br	8b3f8 <__udivdi3+0x2a0>
   8b3f0:	0007883a 	mov	r3,zero
   8b3f4:	0005883a 	mov	r2,zero
   8b3f8:	dfc00a17 	ldw	ra,40(sp)
   8b3fc:	df000917 	ldw	fp,36(sp)
   8b400:	ddc00817 	ldw	r23,32(sp)
   8b404:	dd800717 	ldw	r22,28(sp)
   8b408:	dd400617 	ldw	r21,24(sp)
   8b40c:	dd000517 	ldw	r20,20(sp)
   8b410:	dcc00417 	ldw	r19,16(sp)
   8b414:	dc800317 	ldw	r18,12(sp)
   8b418:	dc400217 	ldw	r17,8(sp)
   8b41c:	dc000117 	ldw	r16,4(sp)
   8b420:	dec00b04 	addi	sp,sp,44
   8b424:	f800283a 	ret
   8b428:	00803fc4 	movi	r2,255
   8b42c:	11c5803a 	cmpltu	r2,r2,r7
   8b430:	100490fa 	slli	r2,r2,3
   8b434:	003f9e06 	br	8b2b0 <__alt_data_end+0xfffa9830>
   8b438:	00803fc4 	movi	r2,255
   8b43c:	1445803a 	cmpltu	r2,r2,r17
   8b440:	100490fa 	slli	r2,r2,3
   8b444:	003fb206 	br	8b310 <__alt_data_end+0xfffa9890>
   8b448:	00804034 	movhi	r2,256
   8b44c:	10bfffc4 	addi	r2,r2,-1
   8b450:	11808836 	bltu	r2,r6,8b674 <__udivdi3+0x51c>
   8b454:	00800404 	movi	r2,16
   8b458:	003f5606 	br	8b1b4 <__alt_data_end+0xfffa9734>
   8b45c:	30aed83a 	srl	r23,r6,r2
   8b460:	3d4e983a 	sll	r7,r7,r21
   8b464:	80acd83a 	srl	r22,r16,r2
   8b468:	9884d83a 	srl	r2,r19,r2
   8b46c:	3deeb03a 	or	r23,r7,r23
   8b470:	b824d43a 	srli	r18,r23,16
   8b474:	8560983a 	sll	r16,r16,r21
   8b478:	b009883a 	mov	r4,r22
   8b47c:	900b883a 	mov	r5,r18
   8b480:	3568983a 	sll	r20,r6,r21
   8b484:	1420b03a 	or	r16,r2,r16
   8b488:	00819240 	call	81924 <__umodsi3>
   8b48c:	b009883a 	mov	r4,r22
   8b490:	900b883a 	mov	r5,r18
   8b494:	1023883a 	mov	r17,r2
   8b498:	00818c00 	call	818c0 <__udivsi3>
   8b49c:	8808943a 	slli	r4,r17,16
   8b4a0:	bf3fffcc 	andi	fp,r23,65535
   8b4a4:	8006d43a 	srli	r3,r16,16
   8b4a8:	e0a3383a 	mul	r17,fp,r2
   8b4ac:	100d883a 	mov	r6,r2
   8b4b0:	1906b03a 	or	r3,r3,r4
   8b4b4:	1c40042e 	bgeu	r3,r17,8b4c8 <__udivdi3+0x370>
   8b4b8:	1dc7883a 	add	r3,r3,r23
   8b4bc:	10bfffc4 	addi	r2,r2,-1
   8b4c0:	1dc0752e 	bgeu	r3,r23,8b698 <__udivdi3+0x540>
   8b4c4:	100d883a 	mov	r6,r2
   8b4c8:	1c63c83a 	sub	r17,r3,r17
   8b4cc:	900b883a 	mov	r5,r18
   8b4d0:	8809883a 	mov	r4,r17
   8b4d4:	d9800015 	stw	r6,0(sp)
   8b4d8:	00819240 	call	81924 <__umodsi3>
   8b4dc:	102d883a 	mov	r22,r2
   8b4e0:	8809883a 	mov	r4,r17
   8b4e4:	900b883a 	mov	r5,r18
   8b4e8:	00818c00 	call	818c0 <__udivsi3>
   8b4ec:	b02c943a 	slli	r22,r22,16
   8b4f0:	e089383a 	mul	r4,fp,r2
   8b4f4:	843fffcc 	andi	r16,r16,65535
   8b4f8:	85a0b03a 	or	r16,r16,r22
   8b4fc:	d9800017 	ldw	r6,0(sp)
   8b500:	8100042e 	bgeu	r16,r4,8b514 <__udivdi3+0x3bc>
   8b504:	85e1883a 	add	r16,r16,r23
   8b508:	10ffffc4 	addi	r3,r2,-1
   8b50c:	85c05e2e 	bgeu	r16,r23,8b688 <__udivdi3+0x530>
   8b510:	1805883a 	mov	r2,r3
   8b514:	300c943a 	slli	r6,r6,16
   8b518:	a17fffcc 	andi	r5,r20,65535
   8b51c:	a028d43a 	srli	r20,r20,16
   8b520:	3084b03a 	or	r2,r6,r2
   8b524:	10ffffcc 	andi	r3,r2,65535
   8b528:	100cd43a 	srli	r6,r2,16
   8b52c:	194f383a 	mul	r7,r3,r5
   8b530:	1d07383a 	mul	r3,r3,r20
   8b534:	314b383a 	mul	r5,r6,r5
   8b538:	3810d43a 	srli	r8,r7,16
   8b53c:	8121c83a 	sub	r16,r16,r4
   8b540:	1947883a 	add	r3,r3,r5
   8b544:	40c7883a 	add	r3,r8,r3
   8b548:	350d383a 	mul	r6,r6,r20
   8b54c:	1940022e 	bgeu	r3,r5,8b558 <__udivdi3+0x400>
   8b550:	01000074 	movhi	r4,1
   8b554:	310d883a 	add	r6,r6,r4
   8b558:	1828d43a 	srli	r20,r3,16
   8b55c:	a18d883a 	add	r6,r20,r6
   8b560:	81803e36 	bltu	r16,r6,8b65c <__udivdi3+0x504>
   8b564:	81803826 	beq	r16,r6,8b648 <__udivdi3+0x4f0>
   8b568:	0007883a 	mov	r3,zero
   8b56c:	003fa206 	br	8b3f8 <__alt_data_end+0xfffa9978>
   8b570:	88e2983a 	sll	r17,r17,r3
   8b574:	80a8d83a 	srl	r20,r16,r2
   8b578:	80e0983a 	sll	r16,r16,r3
   8b57c:	882ad43a 	srli	r21,r17,16
   8b580:	9884d83a 	srl	r2,r19,r2
   8b584:	a009883a 	mov	r4,r20
   8b588:	a80b883a 	mov	r5,r21
   8b58c:	142eb03a 	or	r23,r2,r16
   8b590:	98e4983a 	sll	r18,r19,r3
   8b594:	00819240 	call	81924 <__umodsi3>
   8b598:	a009883a 	mov	r4,r20
   8b59c:	a80b883a 	mov	r5,r21
   8b5a0:	1021883a 	mov	r16,r2
   8b5a4:	00818c00 	call	818c0 <__udivsi3>
   8b5a8:	1039883a 	mov	fp,r2
   8b5ac:	8d3fffcc 	andi	r20,r17,65535
   8b5b0:	8020943a 	slli	r16,r16,16
   8b5b4:	b804d43a 	srli	r2,r23,16
   8b5b8:	a72d383a 	mul	r22,r20,fp
   8b5bc:	1404b03a 	or	r2,r2,r16
   8b5c0:	1580062e 	bgeu	r2,r22,8b5dc <__udivdi3+0x484>
   8b5c4:	1445883a 	add	r2,r2,r17
   8b5c8:	e0ffffc4 	addi	r3,fp,-1
   8b5cc:	14403836 	bltu	r2,r17,8b6b0 <__udivdi3+0x558>
   8b5d0:	1580372e 	bgeu	r2,r22,8b6b0 <__udivdi3+0x558>
   8b5d4:	e73fff84 	addi	fp,fp,-2
   8b5d8:	1445883a 	add	r2,r2,r17
   8b5dc:	15adc83a 	sub	r22,r2,r22
   8b5e0:	a80b883a 	mov	r5,r21
   8b5e4:	b009883a 	mov	r4,r22
   8b5e8:	00819240 	call	81924 <__umodsi3>
   8b5ec:	1027883a 	mov	r19,r2
   8b5f0:	b009883a 	mov	r4,r22
   8b5f4:	a80b883a 	mov	r5,r21
   8b5f8:	00818c00 	call	818c0 <__udivsi3>
   8b5fc:	9826943a 	slli	r19,r19,16
   8b600:	a0a1383a 	mul	r16,r20,r2
   8b604:	b93fffcc 	andi	r4,r23,65535
   8b608:	24c8b03a 	or	r4,r4,r19
   8b60c:	2400062e 	bgeu	r4,r16,8b628 <__udivdi3+0x4d0>
   8b610:	2449883a 	add	r4,r4,r17
   8b614:	10ffffc4 	addi	r3,r2,-1
   8b618:	24402336 	bltu	r4,r17,8b6a8 <__udivdi3+0x550>
   8b61c:	2400222e 	bgeu	r4,r16,8b6a8 <__udivdi3+0x550>
   8b620:	10bfff84 	addi	r2,r2,-2
   8b624:	2449883a 	add	r4,r4,r17
   8b628:	e038943a 	slli	fp,fp,16
   8b62c:	2421c83a 	sub	r16,r4,r16
   8b630:	e086b03a 	or	r3,fp,r2
   8b634:	003f4306 	br	8b344 <__alt_data_end+0xfffa98c4>
   8b638:	2005883a 	mov	r2,r4
   8b63c:	003f6906 	br	8b3e4 <__alt_data_end+0xfffa9964>
   8b640:	1805883a 	mov	r2,r3
   8b644:	003f0f06 	br	8b284 <__alt_data_end+0xfffa9804>
   8b648:	1806943a 	slli	r3,r3,16
   8b64c:	9d66983a 	sll	r19,r19,r21
   8b650:	39ffffcc 	andi	r7,r7,65535
   8b654:	19c7883a 	add	r3,r3,r7
   8b658:	98ffc32e 	bgeu	r19,r3,8b568 <__alt_data_end+0xfffa9ae8>
   8b65c:	10bfffc4 	addi	r2,r2,-1
   8b660:	003fc106 	br	8b568 <__alt_data_end+0xfffa9ae8>
   8b664:	00800604 	movi	r2,24
   8b668:	003f1106 	br	8b2b0 <__alt_data_end+0xfffa9830>
   8b66c:	00800604 	movi	r2,24
   8b670:	003f2706 	br	8b310 <__alt_data_end+0xfffa9890>
   8b674:	00800604 	movi	r2,24
   8b678:	003ece06 	br	8b1b4 <__alt_data_end+0xfffa9734>
   8b67c:	0007883a 	mov	r3,zero
   8b680:	00800044 	movi	r2,1
   8b684:	003f5c06 	br	8b3f8 <__alt_data_end+0xfffa9978>
   8b688:	813fa12e 	bgeu	r16,r4,8b510 <__alt_data_end+0xfffa9a90>
   8b68c:	10bfff84 	addi	r2,r2,-2
   8b690:	85e1883a 	add	r16,r16,r23
   8b694:	003f9f06 	br	8b514 <__alt_data_end+0xfffa9a94>
   8b698:	1c7f8a2e 	bgeu	r3,r17,8b4c4 <__alt_data_end+0xfffa9a44>
   8b69c:	31bfff84 	addi	r6,r6,-2
   8b6a0:	1dc7883a 	add	r3,r3,r23
   8b6a4:	003f8806 	br	8b4c8 <__alt_data_end+0xfffa9a48>
   8b6a8:	1805883a 	mov	r2,r3
   8b6ac:	003fde06 	br	8b628 <__alt_data_end+0xfffa9ba8>
   8b6b0:	1839883a 	mov	fp,r3
   8b6b4:	003fc906 	br	8b5dc <__alt_data_end+0xfffa9b5c>
   8b6b8:	b5bfff84 	addi	r22,r22,-2
   8b6bc:	2449883a 	add	r4,r4,r17
   8b6c0:	003f3406 	br	8b394 <__alt_data_end+0xfffa9914>
   8b6c4:	b5bfff84 	addi	r22,r22,-2
   8b6c8:	1445883a 	add	r2,r2,r17
   8b6cc:	003edb06 	br	8b23c <__alt_data_end+0xfffa97bc>

0008b6d0 <__umoddi3>:
   8b6d0:	defff404 	addi	sp,sp,-48
   8b6d4:	df000a15 	stw	fp,40(sp)
   8b6d8:	dc400315 	stw	r17,12(sp)
   8b6dc:	dc000215 	stw	r16,8(sp)
   8b6e0:	dfc00b15 	stw	ra,44(sp)
   8b6e4:	ddc00915 	stw	r23,36(sp)
   8b6e8:	dd800815 	stw	r22,32(sp)
   8b6ec:	dd400715 	stw	r21,28(sp)
   8b6f0:	dd000615 	stw	r20,24(sp)
   8b6f4:	dcc00515 	stw	r19,20(sp)
   8b6f8:	dc800415 	stw	r18,16(sp)
   8b6fc:	2021883a 	mov	r16,r4
   8b700:	2823883a 	mov	r17,r5
   8b704:	2839883a 	mov	fp,r5
   8b708:	38003c1e 	bne	r7,zero,8b7fc <__umoddi3+0x12c>
   8b70c:	3027883a 	mov	r19,r6
   8b710:	2029883a 	mov	r20,r4
   8b714:	2980512e 	bgeu	r5,r6,8b85c <__umoddi3+0x18c>
   8b718:	00bfffd4 	movui	r2,65535
   8b71c:	11809a36 	bltu	r2,r6,8b988 <__umoddi3+0x2b8>
   8b720:	01003fc4 	movi	r4,255
   8b724:	2189803a 	cmpltu	r4,r4,r6
   8b728:	200890fa 	slli	r4,r4,3
   8b72c:	3104d83a 	srl	r2,r6,r4
   8b730:	00c00274 	movhi	r3,9
   8b734:	18c41d04 	addi	r3,r3,4212
   8b738:	1885883a 	add	r2,r3,r2
   8b73c:	10c00003 	ldbu	r3,0(r2)
   8b740:	00800804 	movi	r2,32
   8b744:	1909883a 	add	r4,r3,r4
   8b748:	1125c83a 	sub	r18,r2,r4
   8b74c:	90000526 	beq	r18,zero,8b764 <__umoddi3+0x94>
   8b750:	8ca2983a 	sll	r17,r17,r18
   8b754:	8108d83a 	srl	r4,r16,r4
   8b758:	34a6983a 	sll	r19,r6,r18
   8b75c:	84a8983a 	sll	r20,r16,r18
   8b760:	2478b03a 	or	fp,r4,r17
   8b764:	982ed43a 	srli	r23,r19,16
   8b768:	e009883a 	mov	r4,fp
   8b76c:	9dbfffcc 	andi	r22,r19,65535
   8b770:	b80b883a 	mov	r5,r23
   8b774:	00819240 	call	81924 <__umodsi3>
   8b778:	e009883a 	mov	r4,fp
   8b77c:	b80b883a 	mov	r5,r23
   8b780:	102b883a 	mov	r21,r2
   8b784:	00818c00 	call	818c0 <__udivsi3>
   8b788:	a806943a 	slli	r3,r21,16
   8b78c:	a008d43a 	srli	r4,r20,16
   8b790:	b085383a 	mul	r2,r22,r2
   8b794:	20c8b03a 	or	r4,r4,r3
   8b798:	2080032e 	bgeu	r4,r2,8b7a8 <__umoddi3+0xd8>
   8b79c:	24c9883a 	add	r4,r4,r19
   8b7a0:	24c00136 	bltu	r4,r19,8b7a8 <__umoddi3+0xd8>
   8b7a4:	20811036 	bltu	r4,r2,8bbe8 <__umoddi3+0x518>
   8b7a8:	20abc83a 	sub	r21,r4,r2
   8b7ac:	b80b883a 	mov	r5,r23
   8b7b0:	a809883a 	mov	r4,r21
   8b7b4:	00819240 	call	81924 <__umodsi3>
   8b7b8:	1023883a 	mov	r17,r2
   8b7bc:	b80b883a 	mov	r5,r23
   8b7c0:	a809883a 	mov	r4,r21
   8b7c4:	00818c00 	call	818c0 <__udivsi3>
   8b7c8:	8822943a 	slli	r17,r17,16
   8b7cc:	b085383a 	mul	r2,r22,r2
   8b7d0:	a0ffffcc 	andi	r3,r20,65535
   8b7d4:	1c46b03a 	or	r3,r3,r17
   8b7d8:	1880042e 	bgeu	r3,r2,8b7ec <__umoddi3+0x11c>
   8b7dc:	1cc7883a 	add	r3,r3,r19
   8b7e0:	1cc00236 	bltu	r3,r19,8b7ec <__umoddi3+0x11c>
   8b7e4:	1880012e 	bgeu	r3,r2,8b7ec <__umoddi3+0x11c>
   8b7e8:	1cc7883a 	add	r3,r3,r19
   8b7ec:	1885c83a 	sub	r2,r3,r2
   8b7f0:	1484d83a 	srl	r2,r2,r18
   8b7f4:	0007883a 	mov	r3,zero
   8b7f8:	00004f06 	br	8b938 <__umoddi3+0x268>
   8b7fc:	29c04c36 	bltu	r5,r7,8b930 <__umoddi3+0x260>
   8b800:	00bfffd4 	movui	r2,65535
   8b804:	11c0582e 	bgeu	r2,r7,8b968 <__umoddi3+0x298>
   8b808:	00804034 	movhi	r2,256
   8b80c:	10bfffc4 	addi	r2,r2,-1
   8b810:	11c0e736 	bltu	r2,r7,8bbb0 <__umoddi3+0x4e0>
   8b814:	01000404 	movi	r4,16
   8b818:	3904d83a 	srl	r2,r7,r4
   8b81c:	00c00274 	movhi	r3,9
   8b820:	18c41d04 	addi	r3,r3,4212
   8b824:	1885883a 	add	r2,r3,r2
   8b828:	14c00003 	ldbu	r19,0(r2)
   8b82c:	00c00804 	movi	r3,32
   8b830:	9927883a 	add	r19,r19,r4
   8b834:	1ce9c83a 	sub	r20,r3,r19
   8b838:	a000581e 	bne	r20,zero,8b99c <__umoddi3+0x2cc>
   8b83c:	3c400136 	bltu	r7,r17,8b844 <__umoddi3+0x174>
   8b840:	8180eb36 	bltu	r16,r6,8bbf0 <__umoddi3+0x520>
   8b844:	8185c83a 	sub	r2,r16,r6
   8b848:	89e3c83a 	sub	r17,r17,r7
   8b84c:	8089803a 	cmpltu	r4,r16,r2
   8b850:	8939c83a 	sub	fp,r17,r4
   8b854:	e007883a 	mov	r3,fp
   8b858:	00003706 	br	8b938 <__umoddi3+0x268>
   8b85c:	3000041e 	bne	r6,zero,8b870 <__umoddi3+0x1a0>
   8b860:	000b883a 	mov	r5,zero
   8b864:	01000044 	movi	r4,1
   8b868:	00818c00 	call	818c0 <__udivsi3>
   8b86c:	1027883a 	mov	r19,r2
   8b870:	00bfffd4 	movui	r2,65535
   8b874:	14c0402e 	bgeu	r2,r19,8b978 <__umoddi3+0x2a8>
   8b878:	00804034 	movhi	r2,256
   8b87c:	10bfffc4 	addi	r2,r2,-1
   8b880:	14c0cd36 	bltu	r2,r19,8bbb8 <__umoddi3+0x4e8>
   8b884:	00800404 	movi	r2,16
   8b888:	9886d83a 	srl	r3,r19,r2
   8b88c:	01000274 	movhi	r4,9
   8b890:	21041d04 	addi	r4,r4,4212
   8b894:	20c7883a 	add	r3,r4,r3
   8b898:	18c00003 	ldbu	r3,0(r3)
   8b89c:	1887883a 	add	r3,r3,r2
   8b8a0:	00800804 	movi	r2,32
   8b8a4:	10e5c83a 	sub	r18,r2,r3
   8b8a8:	9000901e 	bne	r18,zero,8baec <__umoddi3+0x41c>
   8b8ac:	982cd43a 	srli	r22,r19,16
   8b8b0:	8ce3c83a 	sub	r17,r17,r19
   8b8b4:	9d7fffcc 	andi	r21,r19,65535
   8b8b8:	b00b883a 	mov	r5,r22
   8b8bc:	8809883a 	mov	r4,r17
   8b8c0:	00819240 	call	81924 <__umodsi3>
   8b8c4:	8809883a 	mov	r4,r17
   8b8c8:	b00b883a 	mov	r5,r22
   8b8cc:	1021883a 	mov	r16,r2
   8b8d0:	00818c00 	call	818c0 <__udivsi3>
   8b8d4:	8006943a 	slli	r3,r16,16
   8b8d8:	a008d43a 	srli	r4,r20,16
   8b8dc:	1545383a 	mul	r2,r2,r21
   8b8e0:	20c8b03a 	or	r4,r4,r3
   8b8e4:	2080042e 	bgeu	r4,r2,8b8f8 <__umoddi3+0x228>
   8b8e8:	24c9883a 	add	r4,r4,r19
   8b8ec:	24c00236 	bltu	r4,r19,8b8f8 <__umoddi3+0x228>
   8b8f0:	2080012e 	bgeu	r4,r2,8b8f8 <__umoddi3+0x228>
   8b8f4:	24c9883a 	add	r4,r4,r19
   8b8f8:	20a1c83a 	sub	r16,r4,r2
   8b8fc:	b00b883a 	mov	r5,r22
   8b900:	8009883a 	mov	r4,r16
   8b904:	00819240 	call	81924 <__umodsi3>
   8b908:	1023883a 	mov	r17,r2
   8b90c:	b00b883a 	mov	r5,r22
   8b910:	8009883a 	mov	r4,r16
   8b914:	00818c00 	call	818c0 <__udivsi3>
   8b918:	8822943a 	slli	r17,r17,16
   8b91c:	1545383a 	mul	r2,r2,r21
   8b920:	a53fffcc 	andi	r20,r20,65535
   8b924:	a446b03a 	or	r3,r20,r17
   8b928:	18bfb02e 	bgeu	r3,r2,8b7ec <__alt_data_end+0xfffa9d6c>
   8b92c:	003fab06 	br	8b7dc <__alt_data_end+0xfffa9d5c>
   8b930:	2005883a 	mov	r2,r4
   8b934:	2807883a 	mov	r3,r5
   8b938:	dfc00b17 	ldw	ra,44(sp)
   8b93c:	df000a17 	ldw	fp,40(sp)
   8b940:	ddc00917 	ldw	r23,36(sp)
   8b944:	dd800817 	ldw	r22,32(sp)
   8b948:	dd400717 	ldw	r21,28(sp)
   8b94c:	dd000617 	ldw	r20,24(sp)
   8b950:	dcc00517 	ldw	r19,20(sp)
   8b954:	dc800417 	ldw	r18,16(sp)
   8b958:	dc400317 	ldw	r17,12(sp)
   8b95c:	dc000217 	ldw	r16,8(sp)
   8b960:	dec00c04 	addi	sp,sp,48
   8b964:	f800283a 	ret
   8b968:	04c03fc4 	movi	r19,255
   8b96c:	99c9803a 	cmpltu	r4,r19,r7
   8b970:	200890fa 	slli	r4,r4,3
   8b974:	003fa806 	br	8b818 <__alt_data_end+0xfffa9d98>
   8b978:	00803fc4 	movi	r2,255
   8b97c:	14c5803a 	cmpltu	r2,r2,r19
   8b980:	100490fa 	slli	r2,r2,3
   8b984:	003fc006 	br	8b888 <__alt_data_end+0xfffa9e08>
   8b988:	00804034 	movhi	r2,256
   8b98c:	10bfffc4 	addi	r2,r2,-1
   8b990:	11808b36 	bltu	r2,r6,8bbc0 <__umoddi3+0x4f0>
   8b994:	01000404 	movi	r4,16
   8b998:	003f6406 	br	8b72c <__alt_data_end+0xfffa9cac>
   8b99c:	34c4d83a 	srl	r2,r6,r19
   8b9a0:	3d0e983a 	sll	r7,r7,r20
   8b9a4:	8cf8d83a 	srl	fp,r17,r19
   8b9a8:	8d10983a 	sll	r8,r17,r20
   8b9ac:	38aab03a 	or	r21,r7,r2
   8b9b0:	a82cd43a 	srli	r22,r21,16
   8b9b4:	84e2d83a 	srl	r17,r16,r19
   8b9b8:	e009883a 	mov	r4,fp
   8b9bc:	b00b883a 	mov	r5,r22
   8b9c0:	8a22b03a 	or	r17,r17,r8
   8b9c4:	3524983a 	sll	r18,r6,r20
   8b9c8:	00819240 	call	81924 <__umodsi3>
   8b9cc:	e009883a 	mov	r4,fp
   8b9d0:	b00b883a 	mov	r5,r22
   8b9d4:	102f883a 	mov	r23,r2
   8b9d8:	00818c00 	call	818c0 <__udivsi3>
   8b9dc:	100d883a 	mov	r6,r2
   8b9e0:	b808943a 	slli	r4,r23,16
   8b9e4:	aa3fffcc 	andi	r8,r21,65535
   8b9e8:	8804d43a 	srli	r2,r17,16
   8b9ec:	41af383a 	mul	r23,r8,r6
   8b9f0:	8520983a 	sll	r16,r16,r20
   8b9f4:	1104b03a 	or	r2,r2,r4
   8b9f8:	15c0042e 	bgeu	r2,r23,8ba0c <__umoddi3+0x33c>
   8b9fc:	1545883a 	add	r2,r2,r21
   8ba00:	30ffffc4 	addi	r3,r6,-1
   8ba04:	1540742e 	bgeu	r2,r21,8bbd8 <__umoddi3+0x508>
   8ba08:	180d883a 	mov	r6,r3
   8ba0c:	15efc83a 	sub	r23,r2,r23
   8ba10:	b00b883a 	mov	r5,r22
   8ba14:	b809883a 	mov	r4,r23
   8ba18:	d9800115 	stw	r6,4(sp)
   8ba1c:	da000015 	stw	r8,0(sp)
   8ba20:	00819240 	call	81924 <__umodsi3>
   8ba24:	b00b883a 	mov	r5,r22
   8ba28:	b809883a 	mov	r4,r23
   8ba2c:	1039883a 	mov	fp,r2
   8ba30:	00818c00 	call	818c0 <__udivsi3>
   8ba34:	da000017 	ldw	r8,0(sp)
   8ba38:	e038943a 	slli	fp,fp,16
   8ba3c:	100b883a 	mov	r5,r2
   8ba40:	4089383a 	mul	r4,r8,r2
   8ba44:	8a3fffcc 	andi	r8,r17,65535
   8ba48:	4710b03a 	or	r8,r8,fp
   8ba4c:	d9800117 	ldw	r6,4(sp)
   8ba50:	4100042e 	bgeu	r8,r4,8ba64 <__umoddi3+0x394>
   8ba54:	4551883a 	add	r8,r8,r21
   8ba58:	10bfffc4 	addi	r2,r2,-1
   8ba5c:	45405a2e 	bgeu	r8,r21,8bbc8 <__umoddi3+0x4f8>
   8ba60:	100b883a 	mov	r5,r2
   8ba64:	300c943a 	slli	r6,r6,16
   8ba68:	91ffffcc 	andi	r7,r18,65535
   8ba6c:	9004d43a 	srli	r2,r18,16
   8ba70:	314cb03a 	or	r6,r6,r5
   8ba74:	317fffcc 	andi	r5,r6,65535
   8ba78:	300cd43a 	srli	r6,r6,16
   8ba7c:	29d3383a 	mul	r9,r5,r7
   8ba80:	288b383a 	mul	r5,r5,r2
   8ba84:	31cf383a 	mul	r7,r6,r7
   8ba88:	4806d43a 	srli	r3,r9,16
   8ba8c:	4111c83a 	sub	r8,r8,r4
   8ba90:	29cb883a 	add	r5,r5,r7
   8ba94:	194b883a 	add	r5,r3,r5
   8ba98:	3085383a 	mul	r2,r6,r2
   8ba9c:	29c0022e 	bgeu	r5,r7,8baa8 <__umoddi3+0x3d8>
   8baa0:	00c00074 	movhi	r3,1
   8baa4:	10c5883a 	add	r2,r2,r3
   8baa8:	2808d43a 	srli	r4,r5,16
   8baac:	280a943a 	slli	r5,r5,16
   8bab0:	4a7fffcc 	andi	r9,r9,65535
   8bab4:	2085883a 	add	r2,r4,r2
   8bab8:	2a4b883a 	add	r5,r5,r9
   8babc:	40803636 	bltu	r8,r2,8bb98 <__umoddi3+0x4c8>
   8bac0:	40804d26 	beq	r8,r2,8bbf8 <__umoddi3+0x528>
   8bac4:	4089c83a 	sub	r4,r8,r2
   8bac8:	280f883a 	mov	r7,r5
   8bacc:	81cfc83a 	sub	r7,r16,r7
   8bad0:	81c7803a 	cmpltu	r3,r16,r7
   8bad4:	20c7c83a 	sub	r3,r4,r3
   8bad8:	1cc4983a 	sll	r2,r3,r19
   8badc:	3d0ed83a 	srl	r7,r7,r20
   8bae0:	1d06d83a 	srl	r3,r3,r20
   8bae4:	11c4b03a 	or	r2,r2,r7
   8bae8:	003f9306 	br	8b938 <__alt_data_end+0xfffa9eb8>
   8baec:	9ca6983a 	sll	r19,r19,r18
   8baf0:	88e8d83a 	srl	r20,r17,r3
   8baf4:	80c4d83a 	srl	r2,r16,r3
   8baf8:	982cd43a 	srli	r22,r19,16
   8bafc:	8ca2983a 	sll	r17,r17,r18
   8bb00:	a009883a 	mov	r4,r20
   8bb04:	b00b883a 	mov	r5,r22
   8bb08:	1478b03a 	or	fp,r2,r17
   8bb0c:	00819240 	call	81924 <__umodsi3>
   8bb10:	a009883a 	mov	r4,r20
   8bb14:	b00b883a 	mov	r5,r22
   8bb18:	1023883a 	mov	r17,r2
   8bb1c:	00818c00 	call	818c0 <__udivsi3>
   8bb20:	9d7fffcc 	andi	r21,r19,65535
   8bb24:	880a943a 	slli	r5,r17,16
   8bb28:	e008d43a 	srli	r4,fp,16
   8bb2c:	a885383a 	mul	r2,r21,r2
   8bb30:	84a8983a 	sll	r20,r16,r18
   8bb34:	2148b03a 	or	r4,r4,r5
   8bb38:	2080042e 	bgeu	r4,r2,8bb4c <__umoddi3+0x47c>
   8bb3c:	24c9883a 	add	r4,r4,r19
   8bb40:	24c00236 	bltu	r4,r19,8bb4c <__umoddi3+0x47c>
   8bb44:	2080012e 	bgeu	r4,r2,8bb4c <__umoddi3+0x47c>
   8bb48:	24c9883a 	add	r4,r4,r19
   8bb4c:	20a3c83a 	sub	r17,r4,r2
   8bb50:	b00b883a 	mov	r5,r22
   8bb54:	8809883a 	mov	r4,r17
   8bb58:	00819240 	call	81924 <__umodsi3>
   8bb5c:	102f883a 	mov	r23,r2
   8bb60:	8809883a 	mov	r4,r17
   8bb64:	b00b883a 	mov	r5,r22
   8bb68:	00818c00 	call	818c0 <__udivsi3>
   8bb6c:	b82e943a 	slli	r23,r23,16
   8bb70:	a885383a 	mul	r2,r21,r2
   8bb74:	e13fffcc 	andi	r4,fp,65535
   8bb78:	25c8b03a 	or	r4,r4,r23
   8bb7c:	2080042e 	bgeu	r4,r2,8bb90 <__umoddi3+0x4c0>
   8bb80:	24c9883a 	add	r4,r4,r19
   8bb84:	24c00236 	bltu	r4,r19,8bb90 <__umoddi3+0x4c0>
   8bb88:	2080012e 	bgeu	r4,r2,8bb90 <__umoddi3+0x4c0>
   8bb8c:	24c9883a 	add	r4,r4,r19
   8bb90:	20a3c83a 	sub	r17,r4,r2
   8bb94:	003f4806 	br	8b8b8 <__alt_data_end+0xfffa9e38>
   8bb98:	2c8fc83a 	sub	r7,r5,r18
   8bb9c:	1545c83a 	sub	r2,r2,r21
   8bba0:	29cb803a 	cmpltu	r5,r5,r7
   8bba4:	1145c83a 	sub	r2,r2,r5
   8bba8:	4089c83a 	sub	r4,r8,r2
   8bbac:	003fc706 	br	8bacc <__alt_data_end+0xfffaa04c>
   8bbb0:	01000604 	movi	r4,24
   8bbb4:	003f1806 	br	8b818 <__alt_data_end+0xfffa9d98>
   8bbb8:	00800604 	movi	r2,24
   8bbbc:	003f3206 	br	8b888 <__alt_data_end+0xfffa9e08>
   8bbc0:	01000604 	movi	r4,24
   8bbc4:	003ed906 	br	8b72c <__alt_data_end+0xfffa9cac>
   8bbc8:	413fa52e 	bgeu	r8,r4,8ba60 <__alt_data_end+0xfffa9fe0>
   8bbcc:	297fff84 	addi	r5,r5,-2
   8bbd0:	4551883a 	add	r8,r8,r21
   8bbd4:	003fa306 	br	8ba64 <__alt_data_end+0xfffa9fe4>
   8bbd8:	15ff8b2e 	bgeu	r2,r23,8ba08 <__alt_data_end+0xfffa9f88>
   8bbdc:	31bfff84 	addi	r6,r6,-2
   8bbe0:	1545883a 	add	r2,r2,r21
   8bbe4:	003f8906 	br	8ba0c <__alt_data_end+0xfffa9f8c>
   8bbe8:	24c9883a 	add	r4,r4,r19
   8bbec:	003eee06 	br	8b7a8 <__alt_data_end+0xfffa9d28>
   8bbf0:	8005883a 	mov	r2,r16
   8bbf4:	003f1706 	br	8b854 <__alt_data_end+0xfffa9dd4>
   8bbf8:	817fe736 	bltu	r16,r5,8bb98 <__alt_data_end+0xfffaa118>
   8bbfc:	280f883a 	mov	r7,r5
   8bc00:	0009883a 	mov	r4,zero
   8bc04:	003fb106 	br	8bacc <__alt_data_end+0xfffaa04c>

0008bc08 <__adddf3>:
   8bc08:	02c00434 	movhi	r11,16
   8bc0c:	5affffc4 	addi	r11,r11,-1
   8bc10:	2806d7fa 	srli	r3,r5,31
   8bc14:	2ad4703a 	and	r10,r5,r11
   8bc18:	3ad2703a 	and	r9,r7,r11
   8bc1c:	3804d53a 	srli	r2,r7,20
   8bc20:	3018d77a 	srli	r12,r6,29
   8bc24:	280ad53a 	srli	r5,r5,20
   8bc28:	501490fa 	slli	r10,r10,3
   8bc2c:	2010d77a 	srli	r8,r4,29
   8bc30:	481290fa 	slli	r9,r9,3
   8bc34:	380ed7fa 	srli	r7,r7,31
   8bc38:	defffb04 	addi	sp,sp,-20
   8bc3c:	dc800215 	stw	r18,8(sp)
   8bc40:	dc400115 	stw	r17,4(sp)
   8bc44:	dc000015 	stw	r16,0(sp)
   8bc48:	dfc00415 	stw	ra,16(sp)
   8bc4c:	dcc00315 	stw	r19,12(sp)
   8bc50:	1c803fcc 	andi	r18,r3,255
   8bc54:	2c01ffcc 	andi	r16,r5,2047
   8bc58:	5210b03a 	or	r8,r10,r8
   8bc5c:	202290fa 	slli	r17,r4,3
   8bc60:	1081ffcc 	andi	r2,r2,2047
   8bc64:	4b12b03a 	or	r9,r9,r12
   8bc68:	300c90fa 	slli	r6,r6,3
   8bc6c:	91c07526 	beq	r18,r7,8be44 <__adddf3+0x23c>
   8bc70:	8087c83a 	sub	r3,r16,r2
   8bc74:	00c0ab0e 	bge	zero,r3,8bf24 <__adddf3+0x31c>
   8bc78:	10002a1e 	bne	r2,zero,8bd24 <__adddf3+0x11c>
   8bc7c:	4984b03a 	or	r2,r9,r6
   8bc80:	1000961e 	bne	r2,zero,8bedc <__adddf3+0x2d4>
   8bc84:	888001cc 	andi	r2,r17,7
   8bc88:	10000726 	beq	r2,zero,8bca8 <__adddf3+0xa0>
   8bc8c:	888003cc 	andi	r2,r17,15
   8bc90:	00c00104 	movi	r3,4
   8bc94:	10c00426 	beq	r2,r3,8bca8 <__adddf3+0xa0>
   8bc98:	88c7883a 	add	r3,r17,r3
   8bc9c:	1c63803a 	cmpltu	r17,r3,r17
   8bca0:	4451883a 	add	r8,r8,r17
   8bca4:	1823883a 	mov	r17,r3
   8bca8:	4080202c 	andhi	r2,r8,128
   8bcac:	10005926 	beq	r2,zero,8be14 <__adddf3+0x20c>
   8bcb0:	84000044 	addi	r16,r16,1
   8bcb4:	0081ffc4 	movi	r2,2047
   8bcb8:	8080ba26 	beq	r16,r2,8bfa4 <__adddf3+0x39c>
   8bcbc:	00bfe034 	movhi	r2,65408
   8bcc0:	10bfffc4 	addi	r2,r2,-1
   8bcc4:	4090703a 	and	r8,r8,r2
   8bcc8:	4004977a 	slli	r2,r8,29
   8bccc:	4010927a 	slli	r8,r8,9
   8bcd0:	8822d0fa 	srli	r17,r17,3
   8bcd4:	8401ffcc 	andi	r16,r16,2047
   8bcd8:	4010d33a 	srli	r8,r8,12
   8bcdc:	9007883a 	mov	r3,r18
   8bce0:	1444b03a 	or	r2,r2,r17
   8bce4:	8401ffcc 	andi	r16,r16,2047
   8bce8:	8020953a 	slli	r16,r16,20
   8bcec:	18c03fcc 	andi	r3,r3,255
   8bcf0:	01000434 	movhi	r4,16
   8bcf4:	213fffc4 	addi	r4,r4,-1
   8bcf8:	180697fa 	slli	r3,r3,31
   8bcfc:	4110703a 	and	r8,r8,r4
   8bd00:	4410b03a 	or	r8,r8,r16
   8bd04:	40c6b03a 	or	r3,r8,r3
   8bd08:	dfc00417 	ldw	ra,16(sp)
   8bd0c:	dcc00317 	ldw	r19,12(sp)
   8bd10:	dc800217 	ldw	r18,8(sp)
   8bd14:	dc400117 	ldw	r17,4(sp)
   8bd18:	dc000017 	ldw	r16,0(sp)
   8bd1c:	dec00504 	addi	sp,sp,20
   8bd20:	f800283a 	ret
   8bd24:	0081ffc4 	movi	r2,2047
   8bd28:	80bfd626 	beq	r16,r2,8bc84 <__alt_data_end+0xfffaa204>
   8bd2c:	4a402034 	orhi	r9,r9,128
   8bd30:	00800e04 	movi	r2,56
   8bd34:	10c09f16 	blt	r2,r3,8bfb4 <__adddf3+0x3ac>
   8bd38:	008007c4 	movi	r2,31
   8bd3c:	10c0c216 	blt	r2,r3,8c048 <__adddf3+0x440>
   8bd40:	00800804 	movi	r2,32
   8bd44:	10c5c83a 	sub	r2,r2,r3
   8bd48:	488a983a 	sll	r5,r9,r2
   8bd4c:	30c8d83a 	srl	r4,r6,r3
   8bd50:	3084983a 	sll	r2,r6,r2
   8bd54:	48c6d83a 	srl	r3,r9,r3
   8bd58:	290cb03a 	or	r6,r5,r4
   8bd5c:	1004c03a 	cmpne	r2,r2,zero
   8bd60:	308cb03a 	or	r6,r6,r2
   8bd64:	898dc83a 	sub	r6,r17,r6
   8bd68:	89a3803a 	cmpltu	r17,r17,r6
   8bd6c:	40d1c83a 	sub	r8,r8,r3
   8bd70:	4451c83a 	sub	r8,r8,r17
   8bd74:	3023883a 	mov	r17,r6
   8bd78:	4080202c 	andhi	r2,r8,128
   8bd7c:	10002326 	beq	r2,zero,8be0c <__adddf3+0x204>
   8bd80:	04c02034 	movhi	r19,128
   8bd84:	9cffffc4 	addi	r19,r19,-1
   8bd88:	44e6703a 	and	r19,r8,r19
   8bd8c:	98007626 	beq	r19,zero,8bf68 <__adddf3+0x360>
   8bd90:	9809883a 	mov	r4,r19
   8bd94:	008e20c0 	call	8e20c <__clzsi2>
   8bd98:	10fffe04 	addi	r3,r2,-8
   8bd9c:	010007c4 	movi	r4,31
   8bda0:	20c07716 	blt	r4,r3,8bf80 <__adddf3+0x378>
   8bda4:	00800804 	movi	r2,32
   8bda8:	10c5c83a 	sub	r2,r2,r3
   8bdac:	8884d83a 	srl	r2,r17,r2
   8bdb0:	98d0983a 	sll	r8,r19,r3
   8bdb4:	88e2983a 	sll	r17,r17,r3
   8bdb8:	1204b03a 	or	r2,r2,r8
   8bdbc:	1c007416 	blt	r3,r16,8bf90 <__adddf3+0x388>
   8bdc0:	1c21c83a 	sub	r16,r3,r16
   8bdc4:	82000044 	addi	r8,r16,1
   8bdc8:	00c007c4 	movi	r3,31
   8bdcc:	1a009116 	blt	r3,r8,8c014 <__adddf3+0x40c>
   8bdd0:	00c00804 	movi	r3,32
   8bdd4:	1a07c83a 	sub	r3,r3,r8
   8bdd8:	8a08d83a 	srl	r4,r17,r8
   8bddc:	88e2983a 	sll	r17,r17,r3
   8bde0:	10c6983a 	sll	r3,r2,r3
   8bde4:	1210d83a 	srl	r8,r2,r8
   8bde8:	8804c03a 	cmpne	r2,r17,zero
   8bdec:	1906b03a 	or	r3,r3,r4
   8bdf0:	18a2b03a 	or	r17,r3,r2
   8bdf4:	0021883a 	mov	r16,zero
   8bdf8:	003fa206 	br	8bc84 <__alt_data_end+0xfffaa204>
   8bdfc:	1890b03a 	or	r8,r3,r2
   8be00:	40017d26 	beq	r8,zero,8c3f8 <__adddf3+0x7f0>
   8be04:	1011883a 	mov	r8,r2
   8be08:	1823883a 	mov	r17,r3
   8be0c:	888001cc 	andi	r2,r17,7
   8be10:	103f9e1e 	bne	r2,zero,8bc8c <__alt_data_end+0xfffaa20c>
   8be14:	4004977a 	slli	r2,r8,29
   8be18:	8822d0fa 	srli	r17,r17,3
   8be1c:	4010d0fa 	srli	r8,r8,3
   8be20:	9007883a 	mov	r3,r18
   8be24:	1444b03a 	or	r2,r2,r17
   8be28:	0101ffc4 	movi	r4,2047
   8be2c:	81002426 	beq	r16,r4,8bec0 <__adddf3+0x2b8>
   8be30:	8120703a 	and	r16,r16,r4
   8be34:	01000434 	movhi	r4,16
   8be38:	213fffc4 	addi	r4,r4,-1
   8be3c:	4110703a 	and	r8,r8,r4
   8be40:	003fa806 	br	8bce4 <__alt_data_end+0xfffaa264>
   8be44:	8089c83a 	sub	r4,r16,r2
   8be48:	01005e0e 	bge	zero,r4,8bfc4 <__adddf3+0x3bc>
   8be4c:	10002b26 	beq	r2,zero,8befc <__adddf3+0x2f4>
   8be50:	0081ffc4 	movi	r2,2047
   8be54:	80bf8b26 	beq	r16,r2,8bc84 <__alt_data_end+0xfffaa204>
   8be58:	4a402034 	orhi	r9,r9,128
   8be5c:	00800e04 	movi	r2,56
   8be60:	1100a40e 	bge	r2,r4,8c0f4 <__adddf3+0x4ec>
   8be64:	498cb03a 	or	r6,r9,r6
   8be68:	300ac03a 	cmpne	r5,r6,zero
   8be6c:	0013883a 	mov	r9,zero
   8be70:	2c4b883a 	add	r5,r5,r17
   8be74:	2c63803a 	cmpltu	r17,r5,r17
   8be78:	4a11883a 	add	r8,r9,r8
   8be7c:	8a11883a 	add	r8,r17,r8
   8be80:	2823883a 	mov	r17,r5
   8be84:	4080202c 	andhi	r2,r8,128
   8be88:	103fe026 	beq	r2,zero,8be0c <__alt_data_end+0xfffaa38c>
   8be8c:	84000044 	addi	r16,r16,1
   8be90:	0081ffc4 	movi	r2,2047
   8be94:	8080d226 	beq	r16,r2,8c1e0 <__adddf3+0x5d8>
   8be98:	00bfe034 	movhi	r2,65408
   8be9c:	10bfffc4 	addi	r2,r2,-1
   8bea0:	4090703a 	and	r8,r8,r2
   8bea4:	880ad07a 	srli	r5,r17,1
   8bea8:	400897fa 	slli	r4,r8,31
   8beac:	88c0004c 	andi	r3,r17,1
   8beb0:	28e2b03a 	or	r17,r5,r3
   8beb4:	4010d07a 	srli	r8,r8,1
   8beb8:	2462b03a 	or	r17,r4,r17
   8bebc:	003f7106 	br	8bc84 <__alt_data_end+0xfffaa204>
   8bec0:	4088b03a 	or	r4,r8,r2
   8bec4:	20014526 	beq	r4,zero,8c3dc <__adddf3+0x7d4>
   8bec8:	01000434 	movhi	r4,16
   8becc:	42000234 	orhi	r8,r8,8
   8bed0:	213fffc4 	addi	r4,r4,-1
   8bed4:	4110703a 	and	r8,r8,r4
   8bed8:	003f8206 	br	8bce4 <__alt_data_end+0xfffaa264>
   8bedc:	18ffffc4 	addi	r3,r3,-1
   8bee0:	1800491e 	bne	r3,zero,8c008 <__adddf3+0x400>
   8bee4:	898bc83a 	sub	r5,r17,r6
   8bee8:	8963803a 	cmpltu	r17,r17,r5
   8beec:	4251c83a 	sub	r8,r8,r9
   8bef0:	4451c83a 	sub	r8,r8,r17
   8bef4:	2823883a 	mov	r17,r5
   8bef8:	003f9f06 	br	8bd78 <__alt_data_end+0xfffaa2f8>
   8befc:	4984b03a 	or	r2,r9,r6
   8bf00:	103f6026 	beq	r2,zero,8bc84 <__alt_data_end+0xfffaa204>
   8bf04:	213fffc4 	addi	r4,r4,-1
   8bf08:	2000931e 	bne	r4,zero,8c158 <__adddf3+0x550>
   8bf0c:	898d883a 	add	r6,r17,r6
   8bf10:	3463803a 	cmpltu	r17,r6,r17
   8bf14:	4251883a 	add	r8,r8,r9
   8bf18:	8a11883a 	add	r8,r17,r8
   8bf1c:	3023883a 	mov	r17,r6
   8bf20:	003fd806 	br	8be84 <__alt_data_end+0xfffaa404>
   8bf24:	1800541e 	bne	r3,zero,8c078 <__adddf3+0x470>
   8bf28:	80800044 	addi	r2,r16,1
   8bf2c:	1081ffcc 	andi	r2,r2,2047
   8bf30:	00c00044 	movi	r3,1
   8bf34:	1880a00e 	bge	r3,r2,8c1b8 <__adddf3+0x5b0>
   8bf38:	8989c83a 	sub	r4,r17,r6
   8bf3c:	8905803a 	cmpltu	r2,r17,r4
   8bf40:	4267c83a 	sub	r19,r8,r9
   8bf44:	98a7c83a 	sub	r19,r19,r2
   8bf48:	9880202c 	andhi	r2,r19,128
   8bf4c:	10006326 	beq	r2,zero,8c0dc <__adddf3+0x4d4>
   8bf50:	3463c83a 	sub	r17,r6,r17
   8bf54:	4a07c83a 	sub	r3,r9,r8
   8bf58:	344d803a 	cmpltu	r6,r6,r17
   8bf5c:	19a7c83a 	sub	r19,r3,r6
   8bf60:	3825883a 	mov	r18,r7
   8bf64:	983f8a1e 	bne	r19,zero,8bd90 <__alt_data_end+0xfffaa310>
   8bf68:	8809883a 	mov	r4,r17
   8bf6c:	008e20c0 	call	8e20c <__clzsi2>
   8bf70:	10800804 	addi	r2,r2,32
   8bf74:	10fffe04 	addi	r3,r2,-8
   8bf78:	010007c4 	movi	r4,31
   8bf7c:	20ff890e 	bge	r4,r3,8bda4 <__alt_data_end+0xfffaa324>
   8bf80:	10bff604 	addi	r2,r2,-40
   8bf84:	8884983a 	sll	r2,r17,r2
   8bf88:	0023883a 	mov	r17,zero
   8bf8c:	1c3f8c0e 	bge	r3,r16,8bdc0 <__alt_data_end+0xfffaa340>
   8bf90:	023fe034 	movhi	r8,65408
   8bf94:	423fffc4 	addi	r8,r8,-1
   8bf98:	80e1c83a 	sub	r16,r16,r3
   8bf9c:	1210703a 	and	r8,r2,r8
   8bfa0:	003f3806 	br	8bc84 <__alt_data_end+0xfffaa204>
   8bfa4:	9007883a 	mov	r3,r18
   8bfa8:	0011883a 	mov	r8,zero
   8bfac:	0005883a 	mov	r2,zero
   8bfb0:	003f4c06 	br	8bce4 <__alt_data_end+0xfffaa264>
   8bfb4:	498cb03a 	or	r6,r9,r6
   8bfb8:	300cc03a 	cmpne	r6,r6,zero
   8bfbc:	0007883a 	mov	r3,zero
   8bfc0:	003f6806 	br	8bd64 <__alt_data_end+0xfffaa2e4>
   8bfc4:	20009c1e 	bne	r4,zero,8c238 <__adddf3+0x630>
   8bfc8:	80800044 	addi	r2,r16,1
   8bfcc:	1141ffcc 	andi	r5,r2,2047
   8bfd0:	01000044 	movi	r4,1
   8bfd4:	2140670e 	bge	r4,r5,8c174 <__adddf3+0x56c>
   8bfd8:	0101ffc4 	movi	r4,2047
   8bfdc:	11007f26 	beq	r2,r4,8c1dc <__adddf3+0x5d4>
   8bfe0:	898d883a 	add	r6,r17,r6
   8bfe4:	4247883a 	add	r3,r8,r9
   8bfe8:	3451803a 	cmpltu	r8,r6,r17
   8bfec:	40d1883a 	add	r8,r8,r3
   8bff0:	402297fa 	slli	r17,r8,31
   8bff4:	300cd07a 	srli	r6,r6,1
   8bff8:	4010d07a 	srli	r8,r8,1
   8bffc:	1021883a 	mov	r16,r2
   8c000:	89a2b03a 	or	r17,r17,r6
   8c004:	003f1f06 	br	8bc84 <__alt_data_end+0xfffaa204>
   8c008:	0081ffc4 	movi	r2,2047
   8c00c:	80bf481e 	bne	r16,r2,8bd30 <__alt_data_end+0xfffaa2b0>
   8c010:	003f1c06 	br	8bc84 <__alt_data_end+0xfffaa204>
   8c014:	843ff844 	addi	r16,r16,-31
   8c018:	01000804 	movi	r4,32
   8c01c:	1406d83a 	srl	r3,r2,r16
   8c020:	41005026 	beq	r8,r4,8c164 <__adddf3+0x55c>
   8c024:	01001004 	movi	r4,64
   8c028:	2211c83a 	sub	r8,r4,r8
   8c02c:	1204983a 	sll	r2,r2,r8
   8c030:	88a2b03a 	or	r17,r17,r2
   8c034:	8822c03a 	cmpne	r17,r17,zero
   8c038:	1c62b03a 	or	r17,r3,r17
   8c03c:	0011883a 	mov	r8,zero
   8c040:	0021883a 	mov	r16,zero
   8c044:	003f7106 	br	8be0c <__alt_data_end+0xfffaa38c>
   8c048:	193ff804 	addi	r4,r3,-32
   8c04c:	00800804 	movi	r2,32
   8c050:	4908d83a 	srl	r4,r9,r4
   8c054:	18804526 	beq	r3,r2,8c16c <__adddf3+0x564>
   8c058:	00801004 	movi	r2,64
   8c05c:	10c5c83a 	sub	r2,r2,r3
   8c060:	4886983a 	sll	r3,r9,r2
   8c064:	198cb03a 	or	r6,r3,r6
   8c068:	300cc03a 	cmpne	r6,r6,zero
   8c06c:	218cb03a 	or	r6,r4,r6
   8c070:	0007883a 	mov	r3,zero
   8c074:	003f3b06 	br	8bd64 <__alt_data_end+0xfffaa2e4>
   8c078:	80002a26 	beq	r16,zero,8c124 <__adddf3+0x51c>
   8c07c:	0101ffc4 	movi	r4,2047
   8c080:	11006826 	beq	r2,r4,8c224 <__adddf3+0x61c>
   8c084:	00c7c83a 	sub	r3,zero,r3
   8c088:	42002034 	orhi	r8,r8,128
   8c08c:	01000e04 	movi	r4,56
   8c090:	20c07c16 	blt	r4,r3,8c284 <__adddf3+0x67c>
   8c094:	010007c4 	movi	r4,31
   8c098:	20c0da16 	blt	r4,r3,8c404 <__adddf3+0x7fc>
   8c09c:	01000804 	movi	r4,32
   8c0a0:	20c9c83a 	sub	r4,r4,r3
   8c0a4:	4114983a 	sll	r10,r8,r4
   8c0a8:	88cad83a 	srl	r5,r17,r3
   8c0ac:	8908983a 	sll	r4,r17,r4
   8c0b0:	40c6d83a 	srl	r3,r8,r3
   8c0b4:	5162b03a 	or	r17,r10,r5
   8c0b8:	2008c03a 	cmpne	r4,r4,zero
   8c0bc:	8922b03a 	or	r17,r17,r4
   8c0c0:	3463c83a 	sub	r17,r6,r17
   8c0c4:	48c7c83a 	sub	r3,r9,r3
   8c0c8:	344d803a 	cmpltu	r6,r6,r17
   8c0cc:	1991c83a 	sub	r8,r3,r6
   8c0d0:	1021883a 	mov	r16,r2
   8c0d4:	3825883a 	mov	r18,r7
   8c0d8:	003f2706 	br	8bd78 <__alt_data_end+0xfffaa2f8>
   8c0dc:	24d0b03a 	or	r8,r4,r19
   8c0e0:	40001b1e 	bne	r8,zero,8c150 <__adddf3+0x548>
   8c0e4:	0005883a 	mov	r2,zero
   8c0e8:	0007883a 	mov	r3,zero
   8c0ec:	0021883a 	mov	r16,zero
   8c0f0:	003f4d06 	br	8be28 <__alt_data_end+0xfffaa3a8>
   8c0f4:	008007c4 	movi	r2,31
   8c0f8:	11003c16 	blt	r2,r4,8c1ec <__adddf3+0x5e4>
   8c0fc:	00800804 	movi	r2,32
   8c100:	1105c83a 	sub	r2,r2,r4
   8c104:	488e983a 	sll	r7,r9,r2
   8c108:	310ad83a 	srl	r5,r6,r4
   8c10c:	3084983a 	sll	r2,r6,r2
   8c110:	4912d83a 	srl	r9,r9,r4
   8c114:	394ab03a 	or	r5,r7,r5
   8c118:	1004c03a 	cmpne	r2,r2,zero
   8c11c:	288ab03a 	or	r5,r5,r2
   8c120:	003f5306 	br	8be70 <__alt_data_end+0xfffaa3f0>
   8c124:	4448b03a 	or	r4,r8,r17
   8c128:	20003e26 	beq	r4,zero,8c224 <__adddf3+0x61c>
   8c12c:	00c6303a 	nor	r3,zero,r3
   8c130:	18003a1e 	bne	r3,zero,8c21c <__adddf3+0x614>
   8c134:	3463c83a 	sub	r17,r6,r17
   8c138:	4a07c83a 	sub	r3,r9,r8
   8c13c:	344d803a 	cmpltu	r6,r6,r17
   8c140:	1991c83a 	sub	r8,r3,r6
   8c144:	1021883a 	mov	r16,r2
   8c148:	3825883a 	mov	r18,r7
   8c14c:	003f0a06 	br	8bd78 <__alt_data_end+0xfffaa2f8>
   8c150:	2023883a 	mov	r17,r4
   8c154:	003f0d06 	br	8bd8c <__alt_data_end+0xfffaa30c>
   8c158:	0081ffc4 	movi	r2,2047
   8c15c:	80bf3f1e 	bne	r16,r2,8be5c <__alt_data_end+0xfffaa3dc>
   8c160:	003ec806 	br	8bc84 <__alt_data_end+0xfffaa204>
   8c164:	0005883a 	mov	r2,zero
   8c168:	003fb106 	br	8c030 <__alt_data_end+0xfffaa5b0>
   8c16c:	0007883a 	mov	r3,zero
   8c170:	003fbc06 	br	8c064 <__alt_data_end+0xfffaa5e4>
   8c174:	4444b03a 	or	r2,r8,r17
   8c178:	8000871e 	bne	r16,zero,8c398 <__adddf3+0x790>
   8c17c:	1000ba26 	beq	r2,zero,8c468 <__adddf3+0x860>
   8c180:	4984b03a 	or	r2,r9,r6
   8c184:	103ebf26 	beq	r2,zero,8bc84 <__alt_data_end+0xfffaa204>
   8c188:	8985883a 	add	r2,r17,r6
   8c18c:	4247883a 	add	r3,r8,r9
   8c190:	1451803a 	cmpltu	r8,r2,r17
   8c194:	40d1883a 	add	r8,r8,r3
   8c198:	40c0202c 	andhi	r3,r8,128
   8c19c:	1023883a 	mov	r17,r2
   8c1a0:	183f1a26 	beq	r3,zero,8be0c <__alt_data_end+0xfffaa38c>
   8c1a4:	00bfe034 	movhi	r2,65408
   8c1a8:	10bfffc4 	addi	r2,r2,-1
   8c1ac:	2021883a 	mov	r16,r4
   8c1b0:	4090703a 	and	r8,r8,r2
   8c1b4:	003eb306 	br	8bc84 <__alt_data_end+0xfffaa204>
   8c1b8:	4444b03a 	or	r2,r8,r17
   8c1bc:	8000291e 	bne	r16,zero,8c264 <__adddf3+0x65c>
   8c1c0:	10004b1e 	bne	r2,zero,8c2f0 <__adddf3+0x6e8>
   8c1c4:	4990b03a 	or	r8,r9,r6
   8c1c8:	40008b26 	beq	r8,zero,8c3f8 <__adddf3+0x7f0>
   8c1cc:	4811883a 	mov	r8,r9
   8c1d0:	3023883a 	mov	r17,r6
   8c1d4:	3825883a 	mov	r18,r7
   8c1d8:	003eaa06 	br	8bc84 <__alt_data_end+0xfffaa204>
   8c1dc:	1021883a 	mov	r16,r2
   8c1e0:	0011883a 	mov	r8,zero
   8c1e4:	0005883a 	mov	r2,zero
   8c1e8:	003f0f06 	br	8be28 <__alt_data_end+0xfffaa3a8>
   8c1ec:	217ff804 	addi	r5,r4,-32
   8c1f0:	00800804 	movi	r2,32
   8c1f4:	494ad83a 	srl	r5,r9,r5
   8c1f8:	20807d26 	beq	r4,r2,8c3f0 <__adddf3+0x7e8>
   8c1fc:	00801004 	movi	r2,64
   8c200:	1109c83a 	sub	r4,r2,r4
   8c204:	4912983a 	sll	r9,r9,r4
   8c208:	498cb03a 	or	r6,r9,r6
   8c20c:	300cc03a 	cmpne	r6,r6,zero
   8c210:	298ab03a 	or	r5,r5,r6
   8c214:	0013883a 	mov	r9,zero
   8c218:	003f1506 	br	8be70 <__alt_data_end+0xfffaa3f0>
   8c21c:	0101ffc4 	movi	r4,2047
   8c220:	113f9a1e 	bne	r2,r4,8c08c <__alt_data_end+0xfffaa60c>
   8c224:	4811883a 	mov	r8,r9
   8c228:	3023883a 	mov	r17,r6
   8c22c:	1021883a 	mov	r16,r2
   8c230:	3825883a 	mov	r18,r7
   8c234:	003e9306 	br	8bc84 <__alt_data_end+0xfffaa204>
   8c238:	8000161e 	bne	r16,zero,8c294 <__adddf3+0x68c>
   8c23c:	444ab03a 	or	r5,r8,r17
   8c240:	28005126 	beq	r5,zero,8c388 <__adddf3+0x780>
   8c244:	0108303a 	nor	r4,zero,r4
   8c248:	20004d1e 	bne	r4,zero,8c380 <__adddf3+0x778>
   8c24c:	89a3883a 	add	r17,r17,r6
   8c250:	4253883a 	add	r9,r8,r9
   8c254:	898d803a 	cmpltu	r6,r17,r6
   8c258:	3251883a 	add	r8,r6,r9
   8c25c:	1021883a 	mov	r16,r2
   8c260:	003f0806 	br	8be84 <__alt_data_end+0xfffaa404>
   8c264:	1000301e 	bne	r2,zero,8c328 <__adddf3+0x720>
   8c268:	4984b03a 	or	r2,r9,r6
   8c26c:	10007126 	beq	r2,zero,8c434 <__adddf3+0x82c>
   8c270:	4811883a 	mov	r8,r9
   8c274:	3023883a 	mov	r17,r6
   8c278:	3825883a 	mov	r18,r7
   8c27c:	0401ffc4 	movi	r16,2047
   8c280:	003e8006 	br	8bc84 <__alt_data_end+0xfffaa204>
   8c284:	4462b03a 	or	r17,r8,r17
   8c288:	8822c03a 	cmpne	r17,r17,zero
   8c28c:	0007883a 	mov	r3,zero
   8c290:	003f8b06 	br	8c0c0 <__alt_data_end+0xfffaa640>
   8c294:	0141ffc4 	movi	r5,2047
   8c298:	11403b26 	beq	r2,r5,8c388 <__adddf3+0x780>
   8c29c:	0109c83a 	sub	r4,zero,r4
   8c2a0:	42002034 	orhi	r8,r8,128
   8c2a4:	01400e04 	movi	r5,56
   8c2a8:	29006716 	blt	r5,r4,8c448 <__adddf3+0x840>
   8c2ac:	014007c4 	movi	r5,31
   8c2b0:	29007016 	blt	r5,r4,8c474 <__adddf3+0x86c>
   8c2b4:	01400804 	movi	r5,32
   8c2b8:	290bc83a 	sub	r5,r5,r4
   8c2bc:	4154983a 	sll	r10,r8,r5
   8c2c0:	890ed83a 	srl	r7,r17,r4
   8c2c4:	894a983a 	sll	r5,r17,r5
   8c2c8:	4108d83a 	srl	r4,r8,r4
   8c2cc:	51e2b03a 	or	r17,r10,r7
   8c2d0:	280ac03a 	cmpne	r5,r5,zero
   8c2d4:	8962b03a 	or	r17,r17,r5
   8c2d8:	89a3883a 	add	r17,r17,r6
   8c2dc:	2253883a 	add	r9,r4,r9
   8c2e0:	898d803a 	cmpltu	r6,r17,r6
   8c2e4:	3251883a 	add	r8,r6,r9
   8c2e8:	1021883a 	mov	r16,r2
   8c2ec:	003ee506 	br	8be84 <__alt_data_end+0xfffaa404>
   8c2f0:	4984b03a 	or	r2,r9,r6
   8c2f4:	103e6326 	beq	r2,zero,8bc84 <__alt_data_end+0xfffaa204>
   8c2f8:	8987c83a 	sub	r3,r17,r6
   8c2fc:	88c9803a 	cmpltu	r4,r17,r3
   8c300:	4245c83a 	sub	r2,r8,r9
   8c304:	1105c83a 	sub	r2,r2,r4
   8c308:	1100202c 	andhi	r4,r2,128
   8c30c:	203ebb26 	beq	r4,zero,8bdfc <__alt_data_end+0xfffaa37c>
   8c310:	3463c83a 	sub	r17,r6,r17
   8c314:	4a07c83a 	sub	r3,r9,r8
   8c318:	344d803a 	cmpltu	r6,r6,r17
   8c31c:	1991c83a 	sub	r8,r3,r6
   8c320:	3825883a 	mov	r18,r7
   8c324:	003e5706 	br	8bc84 <__alt_data_end+0xfffaa204>
   8c328:	4984b03a 	or	r2,r9,r6
   8c32c:	10002e26 	beq	r2,zero,8c3e8 <__adddf3+0x7e0>
   8c330:	4004d0fa 	srli	r2,r8,3
   8c334:	8822d0fa 	srli	r17,r17,3
   8c338:	4010977a 	slli	r8,r8,29
   8c33c:	10c0022c 	andhi	r3,r2,8
   8c340:	4462b03a 	or	r17,r8,r17
   8c344:	18000826 	beq	r3,zero,8c368 <__adddf3+0x760>
   8c348:	4808d0fa 	srli	r4,r9,3
   8c34c:	20c0022c 	andhi	r3,r4,8
   8c350:	1800051e 	bne	r3,zero,8c368 <__adddf3+0x760>
   8c354:	300cd0fa 	srli	r6,r6,3
   8c358:	4806977a 	slli	r3,r9,29
   8c35c:	2005883a 	mov	r2,r4
   8c360:	3825883a 	mov	r18,r7
   8c364:	19a2b03a 	or	r17,r3,r6
   8c368:	8810d77a 	srli	r8,r17,29
   8c36c:	100490fa 	slli	r2,r2,3
   8c370:	882290fa 	slli	r17,r17,3
   8c374:	0401ffc4 	movi	r16,2047
   8c378:	4090b03a 	or	r8,r8,r2
   8c37c:	003e4106 	br	8bc84 <__alt_data_end+0xfffaa204>
   8c380:	0141ffc4 	movi	r5,2047
   8c384:	117fc71e 	bne	r2,r5,8c2a4 <__alt_data_end+0xfffaa824>
   8c388:	4811883a 	mov	r8,r9
   8c38c:	3023883a 	mov	r17,r6
   8c390:	1021883a 	mov	r16,r2
   8c394:	003e3b06 	br	8bc84 <__alt_data_end+0xfffaa204>
   8c398:	10002f26 	beq	r2,zero,8c458 <__adddf3+0x850>
   8c39c:	4984b03a 	or	r2,r9,r6
   8c3a0:	10001126 	beq	r2,zero,8c3e8 <__adddf3+0x7e0>
   8c3a4:	4004d0fa 	srli	r2,r8,3
   8c3a8:	8822d0fa 	srli	r17,r17,3
   8c3ac:	4010977a 	slli	r8,r8,29
   8c3b0:	10c0022c 	andhi	r3,r2,8
   8c3b4:	4462b03a 	or	r17,r8,r17
   8c3b8:	183feb26 	beq	r3,zero,8c368 <__alt_data_end+0xfffaa8e8>
   8c3bc:	4808d0fa 	srli	r4,r9,3
   8c3c0:	20c0022c 	andhi	r3,r4,8
   8c3c4:	183fe81e 	bne	r3,zero,8c368 <__alt_data_end+0xfffaa8e8>
   8c3c8:	300cd0fa 	srli	r6,r6,3
   8c3cc:	4806977a 	slli	r3,r9,29
   8c3d0:	2005883a 	mov	r2,r4
   8c3d4:	19a2b03a 	or	r17,r3,r6
   8c3d8:	003fe306 	br	8c368 <__alt_data_end+0xfffaa8e8>
   8c3dc:	0011883a 	mov	r8,zero
   8c3e0:	0005883a 	mov	r2,zero
   8c3e4:	003e3f06 	br	8bce4 <__alt_data_end+0xfffaa264>
   8c3e8:	0401ffc4 	movi	r16,2047
   8c3ec:	003e2506 	br	8bc84 <__alt_data_end+0xfffaa204>
   8c3f0:	0013883a 	mov	r9,zero
   8c3f4:	003f8406 	br	8c208 <__alt_data_end+0xfffaa788>
   8c3f8:	0005883a 	mov	r2,zero
   8c3fc:	0007883a 	mov	r3,zero
   8c400:	003e8906 	br	8be28 <__alt_data_end+0xfffaa3a8>
   8c404:	197ff804 	addi	r5,r3,-32
   8c408:	01000804 	movi	r4,32
   8c40c:	414ad83a 	srl	r5,r8,r5
   8c410:	19002426 	beq	r3,r4,8c4a4 <__adddf3+0x89c>
   8c414:	01001004 	movi	r4,64
   8c418:	20c7c83a 	sub	r3,r4,r3
   8c41c:	40c6983a 	sll	r3,r8,r3
   8c420:	1c46b03a 	or	r3,r3,r17
   8c424:	1806c03a 	cmpne	r3,r3,zero
   8c428:	28e2b03a 	or	r17,r5,r3
   8c42c:	0007883a 	mov	r3,zero
   8c430:	003f2306 	br	8c0c0 <__alt_data_end+0xfffaa640>
   8c434:	0007883a 	mov	r3,zero
   8c438:	5811883a 	mov	r8,r11
   8c43c:	00bfffc4 	movi	r2,-1
   8c440:	0401ffc4 	movi	r16,2047
   8c444:	003e7806 	br	8be28 <__alt_data_end+0xfffaa3a8>
   8c448:	4462b03a 	or	r17,r8,r17
   8c44c:	8822c03a 	cmpne	r17,r17,zero
   8c450:	0009883a 	mov	r4,zero
   8c454:	003fa006 	br	8c2d8 <__alt_data_end+0xfffaa858>
   8c458:	4811883a 	mov	r8,r9
   8c45c:	3023883a 	mov	r17,r6
   8c460:	0401ffc4 	movi	r16,2047
   8c464:	003e0706 	br	8bc84 <__alt_data_end+0xfffaa204>
   8c468:	4811883a 	mov	r8,r9
   8c46c:	3023883a 	mov	r17,r6
   8c470:	003e0406 	br	8bc84 <__alt_data_end+0xfffaa204>
   8c474:	21fff804 	addi	r7,r4,-32
   8c478:	01400804 	movi	r5,32
   8c47c:	41ced83a 	srl	r7,r8,r7
   8c480:	21400a26 	beq	r4,r5,8c4ac <__adddf3+0x8a4>
   8c484:	01401004 	movi	r5,64
   8c488:	2909c83a 	sub	r4,r5,r4
   8c48c:	4108983a 	sll	r4,r8,r4
   8c490:	2448b03a 	or	r4,r4,r17
   8c494:	2008c03a 	cmpne	r4,r4,zero
   8c498:	3922b03a 	or	r17,r7,r4
   8c49c:	0009883a 	mov	r4,zero
   8c4a0:	003f8d06 	br	8c2d8 <__alt_data_end+0xfffaa858>
   8c4a4:	0007883a 	mov	r3,zero
   8c4a8:	003fdd06 	br	8c420 <__alt_data_end+0xfffaa9a0>
   8c4ac:	0009883a 	mov	r4,zero
   8c4b0:	003ff706 	br	8c490 <__alt_data_end+0xfffaaa10>

0008c4b4 <__divdf3>:
   8c4b4:	defff204 	addi	sp,sp,-56
   8c4b8:	dd400915 	stw	r21,36(sp)
   8c4bc:	282ad53a 	srli	r21,r5,20
   8c4c0:	dd000815 	stw	r20,32(sp)
   8c4c4:	2828d7fa 	srli	r20,r5,31
   8c4c8:	dc000415 	stw	r16,16(sp)
   8c4cc:	04000434 	movhi	r16,16
   8c4d0:	df000c15 	stw	fp,48(sp)
   8c4d4:	843fffc4 	addi	r16,r16,-1
   8c4d8:	dfc00d15 	stw	ra,52(sp)
   8c4dc:	ddc00b15 	stw	r23,44(sp)
   8c4e0:	dd800a15 	stw	r22,40(sp)
   8c4e4:	dcc00715 	stw	r19,28(sp)
   8c4e8:	dc800615 	stw	r18,24(sp)
   8c4ec:	dc400515 	stw	r17,20(sp)
   8c4f0:	ad41ffcc 	andi	r21,r21,2047
   8c4f4:	2c20703a 	and	r16,r5,r16
   8c4f8:	a7003fcc 	andi	fp,r20,255
   8c4fc:	a8006126 	beq	r21,zero,8c684 <__divdf3+0x1d0>
   8c500:	0081ffc4 	movi	r2,2047
   8c504:	2025883a 	mov	r18,r4
   8c508:	a8803726 	beq	r21,r2,8c5e8 <__divdf3+0x134>
   8c50c:	80800434 	orhi	r2,r16,16
   8c510:	100490fa 	slli	r2,r2,3
   8c514:	2020d77a 	srli	r16,r4,29
   8c518:	202490fa 	slli	r18,r4,3
   8c51c:	ad7f0044 	addi	r21,r21,-1023
   8c520:	80a0b03a 	or	r16,r16,r2
   8c524:	0027883a 	mov	r19,zero
   8c528:	0013883a 	mov	r9,zero
   8c52c:	3804d53a 	srli	r2,r7,20
   8c530:	382cd7fa 	srli	r22,r7,31
   8c534:	04400434 	movhi	r17,16
   8c538:	8c7fffc4 	addi	r17,r17,-1
   8c53c:	1081ffcc 	andi	r2,r2,2047
   8c540:	3011883a 	mov	r8,r6
   8c544:	3c62703a 	and	r17,r7,r17
   8c548:	b5c03fcc 	andi	r23,r22,255
   8c54c:	10006c26 	beq	r2,zero,8c700 <__divdf3+0x24c>
   8c550:	00c1ffc4 	movi	r3,2047
   8c554:	10c06426 	beq	r2,r3,8c6e8 <__divdf3+0x234>
   8c558:	88c00434 	orhi	r3,r17,16
   8c55c:	180690fa 	slli	r3,r3,3
   8c560:	3022d77a 	srli	r17,r6,29
   8c564:	301090fa 	slli	r8,r6,3
   8c568:	10bf0044 	addi	r2,r2,-1023
   8c56c:	88e2b03a 	or	r17,r17,r3
   8c570:	000f883a 	mov	r7,zero
   8c574:	a58cf03a 	xor	r6,r20,r22
   8c578:	3cc8b03a 	or	r4,r7,r19
   8c57c:	a8abc83a 	sub	r21,r21,r2
   8c580:	008003c4 	movi	r2,15
   8c584:	3007883a 	mov	r3,r6
   8c588:	34c03fcc 	andi	r19,r6,255
   8c58c:	11009036 	bltu	r2,r4,8c7d0 <__divdf3+0x31c>
   8c590:	200890ba 	slli	r4,r4,2
   8c594:	00800274 	movhi	r2,9
   8c598:	10b16a04 	addi	r2,r2,-14936
   8c59c:	2089883a 	add	r4,r4,r2
   8c5a0:	20800017 	ldw	r2,0(r4)
   8c5a4:	1000683a 	jmp	r2
   8c5a8:	0008c7d0 	cmplti	zero,zero,8991
   8c5ac:	0008c620 	cmpeqi	zero,zero,8984
   8c5b0:	0008c7c0 	call	8c7c <__alt_mem_onchip_memory2-0x77384>
   8c5b4:	0008c614 	movui	zero,8984
   8c5b8:	0008c7c0 	call	8c7c <__alt_mem_onchip_memory2-0x77384>
   8c5bc:	0008c794 	movui	zero,8990
   8c5c0:	0008c7c0 	call	8c7c <__alt_mem_onchip_memory2-0x77384>
   8c5c4:	0008c614 	movui	zero,8984
   8c5c8:	0008c620 	cmpeqi	zero,zero,8984
   8c5cc:	0008c620 	cmpeqi	zero,zero,8984
   8c5d0:	0008c794 	movui	zero,8990
   8c5d4:	0008c614 	movui	zero,8984
   8c5d8:	0008c604 	movi	zero,8984
   8c5dc:	0008c604 	movi	zero,8984
   8c5e0:	0008c604 	movi	zero,8984
   8c5e4:	0008cab4 	movhi	zero,9002
   8c5e8:	2404b03a 	or	r2,r4,r16
   8c5ec:	1000661e 	bne	r2,zero,8c788 <__divdf3+0x2d4>
   8c5f0:	04c00204 	movi	r19,8
   8c5f4:	0021883a 	mov	r16,zero
   8c5f8:	0025883a 	mov	r18,zero
   8c5fc:	02400084 	movi	r9,2
   8c600:	003fca06 	br	8c52c <__alt_data_end+0xfffaaaac>
   8c604:	8023883a 	mov	r17,r16
   8c608:	9011883a 	mov	r8,r18
   8c60c:	e02f883a 	mov	r23,fp
   8c610:	480f883a 	mov	r7,r9
   8c614:	00800084 	movi	r2,2
   8c618:	3881311e 	bne	r7,r2,8cae0 <__divdf3+0x62c>
   8c61c:	b827883a 	mov	r19,r23
   8c620:	98c0004c 	andi	r3,r19,1
   8c624:	0081ffc4 	movi	r2,2047
   8c628:	000b883a 	mov	r5,zero
   8c62c:	0025883a 	mov	r18,zero
   8c630:	1004953a 	slli	r2,r2,20
   8c634:	18c03fcc 	andi	r3,r3,255
   8c638:	04400434 	movhi	r17,16
   8c63c:	8c7fffc4 	addi	r17,r17,-1
   8c640:	180697fa 	slli	r3,r3,31
   8c644:	2c4a703a 	and	r5,r5,r17
   8c648:	288ab03a 	or	r5,r5,r2
   8c64c:	28c6b03a 	or	r3,r5,r3
   8c650:	9005883a 	mov	r2,r18
   8c654:	dfc00d17 	ldw	ra,52(sp)
   8c658:	df000c17 	ldw	fp,48(sp)
   8c65c:	ddc00b17 	ldw	r23,44(sp)
   8c660:	dd800a17 	ldw	r22,40(sp)
   8c664:	dd400917 	ldw	r21,36(sp)
   8c668:	dd000817 	ldw	r20,32(sp)
   8c66c:	dcc00717 	ldw	r19,28(sp)
   8c670:	dc800617 	ldw	r18,24(sp)
   8c674:	dc400517 	ldw	r17,20(sp)
   8c678:	dc000417 	ldw	r16,16(sp)
   8c67c:	dec00e04 	addi	sp,sp,56
   8c680:	f800283a 	ret
   8c684:	2404b03a 	or	r2,r4,r16
   8c688:	2027883a 	mov	r19,r4
   8c68c:	10003926 	beq	r2,zero,8c774 <__divdf3+0x2c0>
   8c690:	80012e26 	beq	r16,zero,8cb4c <__divdf3+0x698>
   8c694:	8009883a 	mov	r4,r16
   8c698:	d9800315 	stw	r6,12(sp)
   8c69c:	d9c00215 	stw	r7,8(sp)
   8c6a0:	008e20c0 	call	8e20c <__clzsi2>
   8c6a4:	d9800317 	ldw	r6,12(sp)
   8c6a8:	d9c00217 	ldw	r7,8(sp)
   8c6ac:	113ffd44 	addi	r4,r2,-11
   8c6b0:	00c00704 	movi	r3,28
   8c6b4:	19012116 	blt	r3,r4,8cb3c <__divdf3+0x688>
   8c6b8:	00c00744 	movi	r3,29
   8c6bc:	147ffe04 	addi	r17,r2,-8
   8c6c0:	1907c83a 	sub	r3,r3,r4
   8c6c4:	8460983a 	sll	r16,r16,r17
   8c6c8:	98c6d83a 	srl	r3,r19,r3
   8c6cc:	9c64983a 	sll	r18,r19,r17
   8c6d0:	1c20b03a 	or	r16,r3,r16
   8c6d4:	1080fcc4 	addi	r2,r2,1011
   8c6d8:	00abc83a 	sub	r21,zero,r2
   8c6dc:	0027883a 	mov	r19,zero
   8c6e0:	0013883a 	mov	r9,zero
   8c6e4:	003f9106 	br	8c52c <__alt_data_end+0xfffaaaac>
   8c6e8:	3446b03a 	or	r3,r6,r17
   8c6ec:	18001f1e 	bne	r3,zero,8c76c <__divdf3+0x2b8>
   8c6f0:	0023883a 	mov	r17,zero
   8c6f4:	0011883a 	mov	r8,zero
   8c6f8:	01c00084 	movi	r7,2
   8c6fc:	003f9d06 	br	8c574 <__alt_data_end+0xfffaaaf4>
   8c700:	3446b03a 	or	r3,r6,r17
   8c704:	18001526 	beq	r3,zero,8c75c <__divdf3+0x2a8>
   8c708:	88011b26 	beq	r17,zero,8cb78 <__divdf3+0x6c4>
   8c70c:	8809883a 	mov	r4,r17
   8c710:	d9800315 	stw	r6,12(sp)
   8c714:	da400115 	stw	r9,4(sp)
   8c718:	008e20c0 	call	8e20c <__clzsi2>
   8c71c:	d9800317 	ldw	r6,12(sp)
   8c720:	da400117 	ldw	r9,4(sp)
   8c724:	113ffd44 	addi	r4,r2,-11
   8c728:	00c00704 	movi	r3,28
   8c72c:	19010e16 	blt	r3,r4,8cb68 <__divdf3+0x6b4>
   8c730:	00c00744 	movi	r3,29
   8c734:	123ffe04 	addi	r8,r2,-8
   8c738:	1907c83a 	sub	r3,r3,r4
   8c73c:	8a22983a 	sll	r17,r17,r8
   8c740:	30c6d83a 	srl	r3,r6,r3
   8c744:	3210983a 	sll	r8,r6,r8
   8c748:	1c62b03a 	or	r17,r3,r17
   8c74c:	1080fcc4 	addi	r2,r2,1011
   8c750:	0085c83a 	sub	r2,zero,r2
   8c754:	000f883a 	mov	r7,zero
   8c758:	003f8606 	br	8c574 <__alt_data_end+0xfffaaaf4>
   8c75c:	0023883a 	mov	r17,zero
   8c760:	0011883a 	mov	r8,zero
   8c764:	01c00044 	movi	r7,1
   8c768:	003f8206 	br	8c574 <__alt_data_end+0xfffaaaf4>
   8c76c:	01c000c4 	movi	r7,3
   8c770:	003f8006 	br	8c574 <__alt_data_end+0xfffaaaf4>
   8c774:	04c00104 	movi	r19,4
   8c778:	0021883a 	mov	r16,zero
   8c77c:	0025883a 	mov	r18,zero
   8c780:	02400044 	movi	r9,1
   8c784:	003f6906 	br	8c52c <__alt_data_end+0xfffaaaac>
   8c788:	04c00304 	movi	r19,12
   8c78c:	024000c4 	movi	r9,3
   8c790:	003f6606 	br	8c52c <__alt_data_end+0xfffaaaac>
   8c794:	01400434 	movhi	r5,16
   8c798:	0007883a 	mov	r3,zero
   8c79c:	297fffc4 	addi	r5,r5,-1
   8c7a0:	04bfffc4 	movi	r18,-1
   8c7a4:	0081ffc4 	movi	r2,2047
   8c7a8:	003fa106 	br	8c630 <__alt_data_end+0xfffaabb0>
   8c7ac:	00c00044 	movi	r3,1
   8c7b0:	1887c83a 	sub	r3,r3,r2
   8c7b4:	01000e04 	movi	r4,56
   8c7b8:	20c1210e 	bge	r4,r3,8cc40 <__divdf3+0x78c>
   8c7bc:	98c0004c 	andi	r3,r19,1
   8c7c0:	0005883a 	mov	r2,zero
   8c7c4:	000b883a 	mov	r5,zero
   8c7c8:	0025883a 	mov	r18,zero
   8c7cc:	003f9806 	br	8c630 <__alt_data_end+0xfffaabb0>
   8c7d0:	8c00fd36 	bltu	r17,r16,8cbc8 <__divdf3+0x714>
   8c7d4:	8440fb26 	beq	r16,r17,8cbc4 <__divdf3+0x710>
   8c7d8:	8007883a 	mov	r3,r16
   8c7dc:	ad7fffc4 	addi	r21,r21,-1
   8c7e0:	0021883a 	mov	r16,zero
   8c7e4:	4004d63a 	srli	r2,r8,24
   8c7e8:	8822923a 	slli	r17,r17,8
   8c7ec:	1809883a 	mov	r4,r3
   8c7f0:	402c923a 	slli	r22,r8,8
   8c7f4:	88b8b03a 	or	fp,r17,r2
   8c7f8:	e028d43a 	srli	r20,fp,16
   8c7fc:	d8c00015 	stw	r3,0(sp)
   8c800:	e5ffffcc 	andi	r23,fp,65535
   8c804:	a00b883a 	mov	r5,r20
   8c808:	00818c00 	call	818c0 <__udivsi3>
   8c80c:	d8c00017 	ldw	r3,0(sp)
   8c810:	a00b883a 	mov	r5,r20
   8c814:	d8800315 	stw	r2,12(sp)
   8c818:	1809883a 	mov	r4,r3
   8c81c:	00819240 	call	81924 <__umodsi3>
   8c820:	d9800317 	ldw	r6,12(sp)
   8c824:	1006943a 	slli	r3,r2,16
   8c828:	9004d43a 	srli	r2,r18,16
   8c82c:	b9a3383a 	mul	r17,r23,r6
   8c830:	10c4b03a 	or	r2,r2,r3
   8c834:	1440062e 	bgeu	r2,r17,8c850 <__divdf3+0x39c>
   8c838:	1705883a 	add	r2,r2,fp
   8c83c:	30ffffc4 	addi	r3,r6,-1
   8c840:	1700ee36 	bltu	r2,fp,8cbfc <__divdf3+0x748>
   8c844:	1440ed2e 	bgeu	r2,r17,8cbfc <__divdf3+0x748>
   8c848:	31bfff84 	addi	r6,r6,-2
   8c84c:	1705883a 	add	r2,r2,fp
   8c850:	1463c83a 	sub	r17,r2,r17
   8c854:	a00b883a 	mov	r5,r20
   8c858:	8809883a 	mov	r4,r17
   8c85c:	d9800315 	stw	r6,12(sp)
   8c860:	00818c00 	call	818c0 <__udivsi3>
   8c864:	a00b883a 	mov	r5,r20
   8c868:	8809883a 	mov	r4,r17
   8c86c:	d8800215 	stw	r2,8(sp)
   8c870:	00819240 	call	81924 <__umodsi3>
   8c874:	d9c00217 	ldw	r7,8(sp)
   8c878:	1004943a 	slli	r2,r2,16
   8c87c:	94bfffcc 	andi	r18,r18,65535
   8c880:	b9d1383a 	mul	r8,r23,r7
   8c884:	90a4b03a 	or	r18,r18,r2
   8c888:	d9800317 	ldw	r6,12(sp)
   8c88c:	9200062e 	bgeu	r18,r8,8c8a8 <__divdf3+0x3f4>
   8c890:	9725883a 	add	r18,r18,fp
   8c894:	38bfffc4 	addi	r2,r7,-1
   8c898:	9700d636 	bltu	r18,fp,8cbf4 <__divdf3+0x740>
   8c89c:	9200d52e 	bgeu	r18,r8,8cbf4 <__divdf3+0x740>
   8c8a0:	39ffff84 	addi	r7,r7,-2
   8c8a4:	9725883a 	add	r18,r18,fp
   8c8a8:	3004943a 	slli	r2,r6,16
   8c8ac:	b012d43a 	srli	r9,r22,16
   8c8b0:	b1bfffcc 	andi	r6,r22,65535
   8c8b4:	11e2b03a 	or	r17,r2,r7
   8c8b8:	8806d43a 	srli	r3,r17,16
   8c8bc:	893fffcc 	andi	r4,r17,65535
   8c8c0:	218b383a 	mul	r5,r4,r6
   8c8c4:	30c5383a 	mul	r2,r6,r3
   8c8c8:	2249383a 	mul	r4,r4,r9
   8c8cc:	280ed43a 	srli	r7,r5,16
   8c8d0:	9225c83a 	sub	r18,r18,r8
   8c8d4:	2089883a 	add	r4,r4,r2
   8c8d8:	3909883a 	add	r4,r7,r4
   8c8dc:	1a47383a 	mul	r3,r3,r9
   8c8e0:	2080022e 	bgeu	r4,r2,8c8ec <__divdf3+0x438>
   8c8e4:	00800074 	movhi	r2,1
   8c8e8:	1887883a 	add	r3,r3,r2
   8c8ec:	2004d43a 	srli	r2,r4,16
   8c8f0:	2008943a 	slli	r4,r4,16
   8c8f4:	297fffcc 	andi	r5,r5,65535
   8c8f8:	10c7883a 	add	r3,r2,r3
   8c8fc:	2149883a 	add	r4,r4,r5
   8c900:	90c0a536 	bltu	r18,r3,8cb98 <__divdf3+0x6e4>
   8c904:	90c0bf26 	beq	r18,r3,8cc04 <__divdf3+0x750>
   8c908:	90c7c83a 	sub	r3,r18,r3
   8c90c:	810fc83a 	sub	r7,r16,r4
   8c910:	81e5803a 	cmpltu	r18,r16,r7
   8c914:	1ca5c83a 	sub	r18,r3,r18
   8c918:	e480c126 	beq	fp,r18,8cc20 <__divdf3+0x76c>
   8c91c:	a00b883a 	mov	r5,r20
   8c920:	9009883a 	mov	r4,r18
   8c924:	d9800315 	stw	r6,12(sp)
   8c928:	d9c00215 	stw	r7,8(sp)
   8c92c:	da400115 	stw	r9,4(sp)
   8c930:	00818c00 	call	818c0 <__udivsi3>
   8c934:	a00b883a 	mov	r5,r20
   8c938:	9009883a 	mov	r4,r18
   8c93c:	d8800015 	stw	r2,0(sp)
   8c940:	00819240 	call	81924 <__umodsi3>
   8c944:	d9c00217 	ldw	r7,8(sp)
   8c948:	da000017 	ldw	r8,0(sp)
   8c94c:	1006943a 	slli	r3,r2,16
   8c950:	3804d43a 	srli	r2,r7,16
   8c954:	ba21383a 	mul	r16,r23,r8
   8c958:	d9800317 	ldw	r6,12(sp)
   8c95c:	10c4b03a 	or	r2,r2,r3
   8c960:	da400117 	ldw	r9,4(sp)
   8c964:	1400062e 	bgeu	r2,r16,8c980 <__divdf3+0x4cc>
   8c968:	1705883a 	add	r2,r2,fp
   8c96c:	40ffffc4 	addi	r3,r8,-1
   8c970:	1700ad36 	bltu	r2,fp,8cc28 <__divdf3+0x774>
   8c974:	1400ac2e 	bgeu	r2,r16,8cc28 <__divdf3+0x774>
   8c978:	423fff84 	addi	r8,r8,-2
   8c97c:	1705883a 	add	r2,r2,fp
   8c980:	1421c83a 	sub	r16,r2,r16
   8c984:	a00b883a 	mov	r5,r20
   8c988:	8009883a 	mov	r4,r16
   8c98c:	d9800315 	stw	r6,12(sp)
   8c990:	d9c00215 	stw	r7,8(sp)
   8c994:	da000015 	stw	r8,0(sp)
   8c998:	da400115 	stw	r9,4(sp)
   8c99c:	00818c00 	call	818c0 <__udivsi3>
   8c9a0:	8009883a 	mov	r4,r16
   8c9a4:	a00b883a 	mov	r5,r20
   8c9a8:	1025883a 	mov	r18,r2
   8c9ac:	00819240 	call	81924 <__umodsi3>
   8c9b0:	d9c00217 	ldw	r7,8(sp)
   8c9b4:	1004943a 	slli	r2,r2,16
   8c9b8:	bcaf383a 	mul	r23,r23,r18
   8c9bc:	393fffcc 	andi	r4,r7,65535
   8c9c0:	2088b03a 	or	r4,r4,r2
   8c9c4:	d9800317 	ldw	r6,12(sp)
   8c9c8:	da000017 	ldw	r8,0(sp)
   8c9cc:	da400117 	ldw	r9,4(sp)
   8c9d0:	25c0062e 	bgeu	r4,r23,8c9ec <__divdf3+0x538>
   8c9d4:	2709883a 	add	r4,r4,fp
   8c9d8:	90bfffc4 	addi	r2,r18,-1
   8c9dc:	27009436 	bltu	r4,fp,8cc30 <__divdf3+0x77c>
   8c9e0:	25c0932e 	bgeu	r4,r23,8cc30 <__divdf3+0x77c>
   8c9e4:	94bfff84 	addi	r18,r18,-2
   8c9e8:	2709883a 	add	r4,r4,fp
   8c9ec:	4004943a 	slli	r2,r8,16
   8c9f0:	25efc83a 	sub	r23,r4,r23
   8c9f4:	1490b03a 	or	r8,r2,r18
   8c9f8:	4008d43a 	srli	r4,r8,16
   8c9fc:	40ffffcc 	andi	r3,r8,65535
   8ca00:	30c5383a 	mul	r2,r6,r3
   8ca04:	1a47383a 	mul	r3,r3,r9
   8ca08:	310d383a 	mul	r6,r6,r4
   8ca0c:	100ad43a 	srli	r5,r2,16
   8ca10:	4913383a 	mul	r9,r9,r4
   8ca14:	1987883a 	add	r3,r3,r6
   8ca18:	28c7883a 	add	r3,r5,r3
   8ca1c:	1980022e 	bgeu	r3,r6,8ca28 <__divdf3+0x574>
   8ca20:	01000074 	movhi	r4,1
   8ca24:	4913883a 	add	r9,r9,r4
   8ca28:	1808d43a 	srli	r4,r3,16
   8ca2c:	1806943a 	slli	r3,r3,16
   8ca30:	10bfffcc 	andi	r2,r2,65535
   8ca34:	2253883a 	add	r9,r4,r9
   8ca38:	1887883a 	add	r3,r3,r2
   8ca3c:	ba403836 	bltu	r23,r9,8cb20 <__divdf3+0x66c>
   8ca40:	ba403626 	beq	r23,r9,8cb1c <__divdf3+0x668>
   8ca44:	42000054 	ori	r8,r8,1
   8ca48:	a880ffc4 	addi	r2,r21,1023
   8ca4c:	00bf570e 	bge	zero,r2,8c7ac <__alt_data_end+0xfffaad2c>
   8ca50:	40c001cc 	andi	r3,r8,7
   8ca54:	18000726 	beq	r3,zero,8ca74 <__divdf3+0x5c0>
   8ca58:	40c003cc 	andi	r3,r8,15
   8ca5c:	01000104 	movi	r4,4
   8ca60:	19000426 	beq	r3,r4,8ca74 <__divdf3+0x5c0>
   8ca64:	4107883a 	add	r3,r8,r4
   8ca68:	1a11803a 	cmpltu	r8,r3,r8
   8ca6c:	8a23883a 	add	r17,r17,r8
   8ca70:	1811883a 	mov	r8,r3
   8ca74:	88c0402c 	andhi	r3,r17,256
   8ca78:	18000426 	beq	r3,zero,8ca8c <__divdf3+0x5d8>
   8ca7c:	00ffc034 	movhi	r3,65280
   8ca80:	18ffffc4 	addi	r3,r3,-1
   8ca84:	a8810004 	addi	r2,r21,1024
   8ca88:	88e2703a 	and	r17,r17,r3
   8ca8c:	00c1ff84 	movi	r3,2046
   8ca90:	18bee316 	blt	r3,r2,8c620 <__alt_data_end+0xfffaaba0>
   8ca94:	8824977a 	slli	r18,r17,29
   8ca98:	4010d0fa 	srli	r8,r8,3
   8ca9c:	8822927a 	slli	r17,r17,9
   8caa0:	1081ffcc 	andi	r2,r2,2047
   8caa4:	9224b03a 	or	r18,r18,r8
   8caa8:	880ad33a 	srli	r5,r17,12
   8caac:	98c0004c 	andi	r3,r19,1
   8cab0:	003edf06 	br	8c630 <__alt_data_end+0xfffaabb0>
   8cab4:	8080022c 	andhi	r2,r16,8
   8cab8:	10001226 	beq	r2,zero,8cb04 <__divdf3+0x650>
   8cabc:	8880022c 	andhi	r2,r17,8
   8cac0:	1000101e 	bne	r2,zero,8cb04 <__divdf3+0x650>
   8cac4:	00800434 	movhi	r2,16
   8cac8:	89400234 	orhi	r5,r17,8
   8cacc:	10bfffc4 	addi	r2,r2,-1
   8cad0:	b007883a 	mov	r3,r22
   8cad4:	288a703a 	and	r5,r5,r2
   8cad8:	4025883a 	mov	r18,r8
   8cadc:	003f3106 	br	8c7a4 <__alt_data_end+0xfffaad24>
   8cae0:	008000c4 	movi	r2,3
   8cae4:	3880a626 	beq	r7,r2,8cd80 <__divdf3+0x8cc>
   8cae8:	00800044 	movi	r2,1
   8caec:	3880521e 	bne	r7,r2,8cc38 <__divdf3+0x784>
   8caf0:	b807883a 	mov	r3,r23
   8caf4:	0005883a 	mov	r2,zero
   8caf8:	000b883a 	mov	r5,zero
   8cafc:	0025883a 	mov	r18,zero
   8cb00:	003ecb06 	br	8c630 <__alt_data_end+0xfffaabb0>
   8cb04:	00800434 	movhi	r2,16
   8cb08:	81400234 	orhi	r5,r16,8
   8cb0c:	10bfffc4 	addi	r2,r2,-1
   8cb10:	a007883a 	mov	r3,r20
   8cb14:	288a703a 	and	r5,r5,r2
   8cb18:	003f2206 	br	8c7a4 <__alt_data_end+0xfffaad24>
   8cb1c:	183fca26 	beq	r3,zero,8ca48 <__alt_data_end+0xfffaafc8>
   8cb20:	e5ef883a 	add	r23,fp,r23
   8cb24:	40bfffc4 	addi	r2,r8,-1
   8cb28:	bf00392e 	bgeu	r23,fp,8cc10 <__divdf3+0x75c>
   8cb2c:	1011883a 	mov	r8,r2
   8cb30:	ba7fc41e 	bne	r23,r9,8ca44 <__alt_data_end+0xfffaafc4>
   8cb34:	b0ffc31e 	bne	r22,r3,8ca44 <__alt_data_end+0xfffaafc4>
   8cb38:	003fc306 	br	8ca48 <__alt_data_end+0xfffaafc8>
   8cb3c:	143ff604 	addi	r16,r2,-40
   8cb40:	9c20983a 	sll	r16,r19,r16
   8cb44:	0025883a 	mov	r18,zero
   8cb48:	003ee206 	br	8c6d4 <__alt_data_end+0xfffaac54>
   8cb4c:	d9800315 	stw	r6,12(sp)
   8cb50:	d9c00215 	stw	r7,8(sp)
   8cb54:	008e20c0 	call	8e20c <__clzsi2>
   8cb58:	10800804 	addi	r2,r2,32
   8cb5c:	d9c00217 	ldw	r7,8(sp)
   8cb60:	d9800317 	ldw	r6,12(sp)
   8cb64:	003ed106 	br	8c6ac <__alt_data_end+0xfffaac2c>
   8cb68:	147ff604 	addi	r17,r2,-40
   8cb6c:	3462983a 	sll	r17,r6,r17
   8cb70:	0011883a 	mov	r8,zero
   8cb74:	003ef506 	br	8c74c <__alt_data_end+0xfffaaccc>
   8cb78:	3009883a 	mov	r4,r6
   8cb7c:	d9800315 	stw	r6,12(sp)
   8cb80:	da400115 	stw	r9,4(sp)
   8cb84:	008e20c0 	call	8e20c <__clzsi2>
   8cb88:	10800804 	addi	r2,r2,32
   8cb8c:	da400117 	ldw	r9,4(sp)
   8cb90:	d9800317 	ldw	r6,12(sp)
   8cb94:	003ee306 	br	8c724 <__alt_data_end+0xfffaaca4>
   8cb98:	85a1883a 	add	r16,r16,r22
   8cb9c:	8585803a 	cmpltu	r2,r16,r22
   8cba0:	1705883a 	add	r2,r2,fp
   8cba4:	14a5883a 	add	r18,r2,r18
   8cba8:	88bfffc4 	addi	r2,r17,-1
   8cbac:	e4800c2e 	bgeu	fp,r18,8cbe0 <__divdf3+0x72c>
   8cbb0:	90c03e36 	bltu	r18,r3,8ccac <__divdf3+0x7f8>
   8cbb4:	1c806926 	beq	r3,r18,8cd5c <__divdf3+0x8a8>
   8cbb8:	90c7c83a 	sub	r3,r18,r3
   8cbbc:	1023883a 	mov	r17,r2
   8cbc0:	003f5206 	br	8c90c <__alt_data_end+0xfffaae8c>
   8cbc4:	923f0436 	bltu	r18,r8,8c7d8 <__alt_data_end+0xfffaad58>
   8cbc8:	800897fa 	slli	r4,r16,31
   8cbcc:	9004d07a 	srli	r2,r18,1
   8cbd0:	8006d07a 	srli	r3,r16,1
   8cbd4:	902097fa 	slli	r16,r18,31
   8cbd8:	20a4b03a 	or	r18,r4,r2
   8cbdc:	003f0106 	br	8c7e4 <__alt_data_end+0xfffaad64>
   8cbe0:	e4bff51e 	bne	fp,r18,8cbb8 <__alt_data_end+0xfffab138>
   8cbe4:	85bff22e 	bgeu	r16,r22,8cbb0 <__alt_data_end+0xfffab130>
   8cbe8:	e0c7c83a 	sub	r3,fp,r3
   8cbec:	1023883a 	mov	r17,r2
   8cbf0:	003f4606 	br	8c90c <__alt_data_end+0xfffaae8c>
   8cbf4:	100f883a 	mov	r7,r2
   8cbf8:	003f2b06 	br	8c8a8 <__alt_data_end+0xfffaae28>
   8cbfc:	180d883a 	mov	r6,r3
   8cc00:	003f1306 	br	8c850 <__alt_data_end+0xfffaadd0>
   8cc04:	813fe436 	bltu	r16,r4,8cb98 <__alt_data_end+0xfffab118>
   8cc08:	0007883a 	mov	r3,zero
   8cc0c:	003f3f06 	br	8c90c <__alt_data_end+0xfffaae8c>
   8cc10:	ba402c36 	bltu	r23,r9,8ccc4 <__divdf3+0x810>
   8cc14:	4dc05426 	beq	r9,r23,8cd68 <__divdf3+0x8b4>
   8cc18:	1011883a 	mov	r8,r2
   8cc1c:	003f8906 	br	8ca44 <__alt_data_end+0xfffaafc4>
   8cc20:	023fffc4 	movi	r8,-1
   8cc24:	003f8806 	br	8ca48 <__alt_data_end+0xfffaafc8>
   8cc28:	1811883a 	mov	r8,r3
   8cc2c:	003f5406 	br	8c980 <__alt_data_end+0xfffaaf00>
   8cc30:	1025883a 	mov	r18,r2
   8cc34:	003f6d06 	br	8c9ec <__alt_data_end+0xfffaaf6c>
   8cc38:	b827883a 	mov	r19,r23
   8cc3c:	003f8206 	br	8ca48 <__alt_data_end+0xfffaafc8>
   8cc40:	010007c4 	movi	r4,31
   8cc44:	20c02616 	blt	r4,r3,8cce0 <__divdf3+0x82c>
   8cc48:	00800804 	movi	r2,32
   8cc4c:	10c5c83a 	sub	r2,r2,r3
   8cc50:	888a983a 	sll	r5,r17,r2
   8cc54:	40c8d83a 	srl	r4,r8,r3
   8cc58:	4084983a 	sll	r2,r8,r2
   8cc5c:	88e2d83a 	srl	r17,r17,r3
   8cc60:	2906b03a 	or	r3,r5,r4
   8cc64:	1004c03a 	cmpne	r2,r2,zero
   8cc68:	1886b03a 	or	r3,r3,r2
   8cc6c:	188001cc 	andi	r2,r3,7
   8cc70:	10000726 	beq	r2,zero,8cc90 <__divdf3+0x7dc>
   8cc74:	188003cc 	andi	r2,r3,15
   8cc78:	01000104 	movi	r4,4
   8cc7c:	11000426 	beq	r2,r4,8cc90 <__divdf3+0x7dc>
   8cc80:	1805883a 	mov	r2,r3
   8cc84:	10c00104 	addi	r3,r2,4
   8cc88:	1885803a 	cmpltu	r2,r3,r2
   8cc8c:	88a3883a 	add	r17,r17,r2
   8cc90:	8880202c 	andhi	r2,r17,128
   8cc94:	10002726 	beq	r2,zero,8cd34 <__divdf3+0x880>
   8cc98:	98c0004c 	andi	r3,r19,1
   8cc9c:	00800044 	movi	r2,1
   8cca0:	000b883a 	mov	r5,zero
   8cca4:	0025883a 	mov	r18,zero
   8cca8:	003e6106 	br	8c630 <__alt_data_end+0xfffaabb0>
   8ccac:	85a1883a 	add	r16,r16,r22
   8ccb0:	8585803a 	cmpltu	r2,r16,r22
   8ccb4:	1705883a 	add	r2,r2,fp
   8ccb8:	14a5883a 	add	r18,r2,r18
   8ccbc:	8c7fff84 	addi	r17,r17,-2
   8ccc0:	003f1106 	br	8c908 <__alt_data_end+0xfffaae88>
   8ccc4:	b589883a 	add	r4,r22,r22
   8ccc8:	25ad803a 	cmpltu	r22,r4,r22
   8cccc:	b739883a 	add	fp,r22,fp
   8ccd0:	40bfff84 	addi	r2,r8,-2
   8ccd4:	bf2f883a 	add	r23,r23,fp
   8ccd8:	202d883a 	mov	r22,r4
   8ccdc:	003f9306 	br	8cb2c <__alt_data_end+0xfffab0ac>
   8cce0:	013ff844 	movi	r4,-31
   8cce4:	2085c83a 	sub	r2,r4,r2
   8cce8:	8888d83a 	srl	r4,r17,r2
   8ccec:	00800804 	movi	r2,32
   8ccf0:	18802126 	beq	r3,r2,8cd78 <__divdf3+0x8c4>
   8ccf4:	00801004 	movi	r2,64
   8ccf8:	10c5c83a 	sub	r2,r2,r3
   8ccfc:	8884983a 	sll	r2,r17,r2
   8cd00:	1204b03a 	or	r2,r2,r8
   8cd04:	1004c03a 	cmpne	r2,r2,zero
   8cd08:	2084b03a 	or	r2,r4,r2
   8cd0c:	144001cc 	andi	r17,r2,7
   8cd10:	88000d1e 	bne	r17,zero,8cd48 <__divdf3+0x894>
   8cd14:	000b883a 	mov	r5,zero
   8cd18:	1024d0fa 	srli	r18,r2,3
   8cd1c:	98c0004c 	andi	r3,r19,1
   8cd20:	0005883a 	mov	r2,zero
   8cd24:	9464b03a 	or	r18,r18,r17
   8cd28:	003e4106 	br	8c630 <__alt_data_end+0xfffaabb0>
   8cd2c:	1007883a 	mov	r3,r2
   8cd30:	0023883a 	mov	r17,zero
   8cd34:	880a927a 	slli	r5,r17,9
   8cd38:	1805883a 	mov	r2,r3
   8cd3c:	8822977a 	slli	r17,r17,29
   8cd40:	280ad33a 	srli	r5,r5,12
   8cd44:	003ff406 	br	8cd18 <__alt_data_end+0xfffab298>
   8cd48:	10c003cc 	andi	r3,r2,15
   8cd4c:	01000104 	movi	r4,4
   8cd50:	193ff626 	beq	r3,r4,8cd2c <__alt_data_end+0xfffab2ac>
   8cd54:	0023883a 	mov	r17,zero
   8cd58:	003fca06 	br	8cc84 <__alt_data_end+0xfffab204>
   8cd5c:	813fd336 	bltu	r16,r4,8ccac <__alt_data_end+0xfffab22c>
   8cd60:	1023883a 	mov	r17,r2
   8cd64:	003fa806 	br	8cc08 <__alt_data_end+0xfffab188>
   8cd68:	b0ffd636 	bltu	r22,r3,8ccc4 <__alt_data_end+0xfffab244>
   8cd6c:	1011883a 	mov	r8,r2
   8cd70:	b0ff341e 	bne	r22,r3,8ca44 <__alt_data_end+0xfffaafc4>
   8cd74:	003f3406 	br	8ca48 <__alt_data_end+0xfffaafc8>
   8cd78:	0005883a 	mov	r2,zero
   8cd7c:	003fe006 	br	8cd00 <__alt_data_end+0xfffab280>
   8cd80:	00800434 	movhi	r2,16
   8cd84:	89400234 	orhi	r5,r17,8
   8cd88:	10bfffc4 	addi	r2,r2,-1
   8cd8c:	b807883a 	mov	r3,r23
   8cd90:	288a703a 	and	r5,r5,r2
   8cd94:	4025883a 	mov	r18,r8
   8cd98:	003e8206 	br	8c7a4 <__alt_data_end+0xfffaad24>

0008cd9c <__eqdf2>:
   8cd9c:	2804d53a 	srli	r2,r5,20
   8cda0:	3806d53a 	srli	r3,r7,20
   8cda4:	02000434 	movhi	r8,16
   8cda8:	423fffc4 	addi	r8,r8,-1
   8cdac:	1081ffcc 	andi	r2,r2,2047
   8cdb0:	0281ffc4 	movi	r10,2047
   8cdb4:	2a12703a 	and	r9,r5,r8
   8cdb8:	18c1ffcc 	andi	r3,r3,2047
   8cdbc:	3a10703a 	and	r8,r7,r8
   8cdc0:	280ad7fa 	srli	r5,r5,31
   8cdc4:	380ed7fa 	srli	r7,r7,31
   8cdc8:	12801026 	beq	r2,r10,8ce0c <__eqdf2+0x70>
   8cdcc:	0281ffc4 	movi	r10,2047
   8cdd0:	1a800a26 	beq	r3,r10,8cdfc <__eqdf2+0x60>
   8cdd4:	10c00226 	beq	r2,r3,8cde0 <__eqdf2+0x44>
   8cdd8:	00800044 	movi	r2,1
   8cddc:	f800283a 	ret
   8cde0:	4a3ffd1e 	bne	r9,r8,8cdd8 <__alt_data_end+0xfffab358>
   8cde4:	21bffc1e 	bne	r4,r6,8cdd8 <__alt_data_end+0xfffab358>
   8cde8:	29c00c26 	beq	r5,r7,8ce1c <__eqdf2+0x80>
   8cdec:	103ffa1e 	bne	r2,zero,8cdd8 <__alt_data_end+0xfffab358>
   8cdf0:	2244b03a 	or	r2,r4,r9
   8cdf4:	1004c03a 	cmpne	r2,r2,zero
   8cdf8:	f800283a 	ret
   8cdfc:	3214b03a 	or	r10,r6,r8
   8ce00:	503ff426 	beq	r10,zero,8cdd4 <__alt_data_end+0xfffab354>
   8ce04:	00800044 	movi	r2,1
   8ce08:	f800283a 	ret
   8ce0c:	2254b03a 	or	r10,r4,r9
   8ce10:	503fee26 	beq	r10,zero,8cdcc <__alt_data_end+0xfffab34c>
   8ce14:	00800044 	movi	r2,1
   8ce18:	f800283a 	ret
   8ce1c:	0005883a 	mov	r2,zero
   8ce20:	f800283a 	ret

0008ce24 <__gedf2>:
   8ce24:	2804d53a 	srli	r2,r5,20
   8ce28:	3806d53a 	srli	r3,r7,20
   8ce2c:	02000434 	movhi	r8,16
   8ce30:	423fffc4 	addi	r8,r8,-1
   8ce34:	1081ffcc 	andi	r2,r2,2047
   8ce38:	0241ffc4 	movi	r9,2047
   8ce3c:	2a14703a 	and	r10,r5,r8
   8ce40:	18c1ffcc 	andi	r3,r3,2047
   8ce44:	3a10703a 	and	r8,r7,r8
   8ce48:	280ad7fa 	srli	r5,r5,31
   8ce4c:	380ed7fa 	srli	r7,r7,31
   8ce50:	12401d26 	beq	r2,r9,8cec8 <__gedf2+0xa4>
   8ce54:	0241ffc4 	movi	r9,2047
   8ce58:	1a401226 	beq	r3,r9,8cea4 <__gedf2+0x80>
   8ce5c:	1000081e 	bne	r2,zero,8ce80 <__gedf2+0x5c>
   8ce60:	2296b03a 	or	r11,r4,r10
   8ce64:	5813003a 	cmpeq	r9,r11,zero
   8ce68:	1800091e 	bne	r3,zero,8ce90 <__gedf2+0x6c>
   8ce6c:	3218b03a 	or	r12,r6,r8
   8ce70:	6000071e 	bne	r12,zero,8ce90 <__gedf2+0x6c>
   8ce74:	0005883a 	mov	r2,zero
   8ce78:	5800101e 	bne	r11,zero,8cebc <__gedf2+0x98>
   8ce7c:	f800283a 	ret
   8ce80:	18000c1e 	bne	r3,zero,8ceb4 <__gedf2+0x90>
   8ce84:	3212b03a 	or	r9,r6,r8
   8ce88:	48000c26 	beq	r9,zero,8cebc <__gedf2+0x98>
   8ce8c:	0013883a 	mov	r9,zero
   8ce90:	39c03fcc 	andi	r7,r7,255
   8ce94:	48000826 	beq	r9,zero,8ceb8 <__gedf2+0x94>
   8ce98:	38000926 	beq	r7,zero,8cec0 <__gedf2+0x9c>
   8ce9c:	00800044 	movi	r2,1
   8cea0:	f800283a 	ret
   8cea4:	3212b03a 	or	r9,r6,r8
   8cea8:	483fec26 	beq	r9,zero,8ce5c <__alt_data_end+0xfffab3dc>
   8ceac:	00bfff84 	movi	r2,-2
   8ceb0:	f800283a 	ret
   8ceb4:	39c03fcc 	andi	r7,r7,255
   8ceb8:	29c00626 	beq	r5,r7,8ced4 <__gedf2+0xb0>
   8cebc:	283ff726 	beq	r5,zero,8ce9c <__alt_data_end+0xfffab41c>
   8cec0:	00bfffc4 	movi	r2,-1
   8cec4:	f800283a 	ret
   8cec8:	2292b03a 	or	r9,r4,r10
   8cecc:	483fe126 	beq	r9,zero,8ce54 <__alt_data_end+0xfffab3d4>
   8ced0:	003ff606 	br	8ceac <__alt_data_end+0xfffab42c>
   8ced4:	18bff916 	blt	r3,r2,8cebc <__alt_data_end+0xfffab43c>
   8ced8:	10c00316 	blt	r2,r3,8cee8 <__gedf2+0xc4>
   8cedc:	42bff736 	bltu	r8,r10,8cebc <__alt_data_end+0xfffab43c>
   8cee0:	52000326 	beq	r10,r8,8cef0 <__gedf2+0xcc>
   8cee4:	5200042e 	bgeu	r10,r8,8cef8 <__gedf2+0xd4>
   8cee8:	283fec1e 	bne	r5,zero,8ce9c <__alt_data_end+0xfffab41c>
   8ceec:	003ff406 	br	8cec0 <__alt_data_end+0xfffab440>
   8cef0:	313ff236 	bltu	r6,r4,8cebc <__alt_data_end+0xfffab43c>
   8cef4:	21bffc36 	bltu	r4,r6,8cee8 <__alt_data_end+0xfffab468>
   8cef8:	0005883a 	mov	r2,zero
   8cefc:	f800283a 	ret

0008cf00 <__ledf2>:
   8cf00:	2804d53a 	srli	r2,r5,20
   8cf04:	3810d53a 	srli	r8,r7,20
   8cf08:	00c00434 	movhi	r3,16
   8cf0c:	18ffffc4 	addi	r3,r3,-1
   8cf10:	1081ffcc 	andi	r2,r2,2047
   8cf14:	0241ffc4 	movi	r9,2047
   8cf18:	28d4703a 	and	r10,r5,r3
   8cf1c:	4201ffcc 	andi	r8,r8,2047
   8cf20:	38c6703a 	and	r3,r7,r3
   8cf24:	280ad7fa 	srli	r5,r5,31
   8cf28:	380ed7fa 	srli	r7,r7,31
   8cf2c:	12401f26 	beq	r2,r9,8cfac <__ledf2+0xac>
   8cf30:	0241ffc4 	movi	r9,2047
   8cf34:	42401426 	beq	r8,r9,8cf88 <__ledf2+0x88>
   8cf38:	1000091e 	bne	r2,zero,8cf60 <__ledf2+0x60>
   8cf3c:	2296b03a 	or	r11,r4,r10
   8cf40:	5813003a 	cmpeq	r9,r11,zero
   8cf44:	29403fcc 	andi	r5,r5,255
   8cf48:	40000a1e 	bne	r8,zero,8cf74 <__ledf2+0x74>
   8cf4c:	30d8b03a 	or	r12,r6,r3
   8cf50:	6000081e 	bne	r12,zero,8cf74 <__ledf2+0x74>
   8cf54:	0005883a 	mov	r2,zero
   8cf58:	5800111e 	bne	r11,zero,8cfa0 <__ledf2+0xa0>
   8cf5c:	f800283a 	ret
   8cf60:	29403fcc 	andi	r5,r5,255
   8cf64:	40000c1e 	bne	r8,zero,8cf98 <__ledf2+0x98>
   8cf68:	30d2b03a 	or	r9,r6,r3
   8cf6c:	48000c26 	beq	r9,zero,8cfa0 <__ledf2+0xa0>
   8cf70:	0013883a 	mov	r9,zero
   8cf74:	39c03fcc 	andi	r7,r7,255
   8cf78:	48000826 	beq	r9,zero,8cf9c <__ledf2+0x9c>
   8cf7c:	38001126 	beq	r7,zero,8cfc4 <__ledf2+0xc4>
   8cf80:	00800044 	movi	r2,1
   8cf84:	f800283a 	ret
   8cf88:	30d2b03a 	or	r9,r6,r3
   8cf8c:	483fea26 	beq	r9,zero,8cf38 <__alt_data_end+0xfffab4b8>
   8cf90:	00800084 	movi	r2,2
   8cf94:	f800283a 	ret
   8cf98:	39c03fcc 	andi	r7,r7,255
   8cf9c:	39400726 	beq	r7,r5,8cfbc <__ledf2+0xbc>
   8cfa0:	2800081e 	bne	r5,zero,8cfc4 <__ledf2+0xc4>
   8cfa4:	00800044 	movi	r2,1
   8cfa8:	f800283a 	ret
   8cfac:	2292b03a 	or	r9,r4,r10
   8cfb0:	483fdf26 	beq	r9,zero,8cf30 <__alt_data_end+0xfffab4b0>
   8cfb4:	00800084 	movi	r2,2
   8cfb8:	f800283a 	ret
   8cfbc:	4080030e 	bge	r8,r2,8cfcc <__ledf2+0xcc>
   8cfc0:	383fef26 	beq	r7,zero,8cf80 <__alt_data_end+0xfffab500>
   8cfc4:	00bfffc4 	movi	r2,-1
   8cfc8:	f800283a 	ret
   8cfcc:	123feb16 	blt	r2,r8,8cf7c <__alt_data_end+0xfffab4fc>
   8cfd0:	1abff336 	bltu	r3,r10,8cfa0 <__alt_data_end+0xfffab520>
   8cfd4:	50c00326 	beq	r10,r3,8cfe4 <__ledf2+0xe4>
   8cfd8:	50c0042e 	bgeu	r10,r3,8cfec <__ledf2+0xec>
   8cfdc:	283fe81e 	bne	r5,zero,8cf80 <__alt_data_end+0xfffab500>
   8cfe0:	003ff806 	br	8cfc4 <__alt_data_end+0xfffab544>
   8cfe4:	313fee36 	bltu	r6,r4,8cfa0 <__alt_data_end+0xfffab520>
   8cfe8:	21bffc36 	bltu	r4,r6,8cfdc <__alt_data_end+0xfffab55c>
   8cfec:	0005883a 	mov	r2,zero
   8cff0:	f800283a 	ret

0008cff4 <__muldf3>:
   8cff4:	defff304 	addi	sp,sp,-52
   8cff8:	2804d53a 	srli	r2,r5,20
   8cffc:	dd800915 	stw	r22,36(sp)
   8d000:	282cd7fa 	srli	r22,r5,31
   8d004:	dc000315 	stw	r16,12(sp)
   8d008:	04000434 	movhi	r16,16
   8d00c:	dd400815 	stw	r21,32(sp)
   8d010:	dc800515 	stw	r18,20(sp)
   8d014:	843fffc4 	addi	r16,r16,-1
   8d018:	dfc00c15 	stw	ra,48(sp)
   8d01c:	df000b15 	stw	fp,44(sp)
   8d020:	ddc00a15 	stw	r23,40(sp)
   8d024:	dd000715 	stw	r20,28(sp)
   8d028:	dcc00615 	stw	r19,24(sp)
   8d02c:	dc400415 	stw	r17,16(sp)
   8d030:	1481ffcc 	andi	r18,r2,2047
   8d034:	2c20703a 	and	r16,r5,r16
   8d038:	b02b883a 	mov	r21,r22
   8d03c:	b2403fcc 	andi	r9,r22,255
   8d040:	90006026 	beq	r18,zero,8d1c4 <__muldf3+0x1d0>
   8d044:	0081ffc4 	movi	r2,2047
   8d048:	2029883a 	mov	r20,r4
   8d04c:	90803626 	beq	r18,r2,8d128 <__muldf3+0x134>
   8d050:	80800434 	orhi	r2,r16,16
   8d054:	100490fa 	slli	r2,r2,3
   8d058:	2020d77a 	srli	r16,r4,29
   8d05c:	202890fa 	slli	r20,r4,3
   8d060:	94bf0044 	addi	r18,r18,-1023
   8d064:	80a0b03a 	or	r16,r16,r2
   8d068:	0027883a 	mov	r19,zero
   8d06c:	0039883a 	mov	fp,zero
   8d070:	3804d53a 	srli	r2,r7,20
   8d074:	382ed7fa 	srli	r23,r7,31
   8d078:	04400434 	movhi	r17,16
   8d07c:	8c7fffc4 	addi	r17,r17,-1
   8d080:	1081ffcc 	andi	r2,r2,2047
   8d084:	3011883a 	mov	r8,r6
   8d088:	3c62703a 	and	r17,r7,r17
   8d08c:	ba803fcc 	andi	r10,r23,255
   8d090:	10006d26 	beq	r2,zero,8d248 <__muldf3+0x254>
   8d094:	00c1ffc4 	movi	r3,2047
   8d098:	10c06526 	beq	r2,r3,8d230 <__muldf3+0x23c>
   8d09c:	88c00434 	orhi	r3,r17,16
   8d0a0:	180690fa 	slli	r3,r3,3
   8d0a4:	3022d77a 	srli	r17,r6,29
   8d0a8:	301090fa 	slli	r8,r6,3
   8d0ac:	10bf0044 	addi	r2,r2,-1023
   8d0b0:	88e2b03a 	or	r17,r17,r3
   8d0b4:	000b883a 	mov	r5,zero
   8d0b8:	9085883a 	add	r2,r18,r2
   8d0bc:	2cc8b03a 	or	r4,r5,r19
   8d0c0:	00c003c4 	movi	r3,15
   8d0c4:	bdacf03a 	xor	r22,r23,r22
   8d0c8:	12c00044 	addi	r11,r2,1
   8d0cc:	19009936 	bltu	r3,r4,8d334 <__muldf3+0x340>
   8d0d0:	200890ba 	slli	r4,r4,2
   8d0d4:	00c00274 	movhi	r3,9
   8d0d8:	18f43a04 	addi	r3,r3,-12056
   8d0dc:	20c9883a 	add	r4,r4,r3
   8d0e0:	20c00017 	ldw	r3,0(r4)
   8d0e4:	1800683a 	jmp	r3
   8d0e8:	0008d334 	movhi	zero,9036
   8d0ec:	0008d148 	cmpgei	zero,zero,9029
   8d0f0:	0008d148 	cmpgei	zero,zero,9029
   8d0f4:	0008d144 	movi	zero,9029
   8d0f8:	0008d310 	cmplti	zero,zero,9036
   8d0fc:	0008d310 	cmplti	zero,zero,9036
   8d100:	0008d2f8 	rdprs	zero,zero,9035
   8d104:	0008d144 	movi	zero,9029
   8d108:	0008d310 	cmplti	zero,zero,9036
   8d10c:	0008d2f8 	rdprs	zero,zero,9035
   8d110:	0008d310 	cmplti	zero,zero,9036
   8d114:	0008d144 	movi	zero,9029
   8d118:	0008d320 	cmpeqi	zero,zero,9036
   8d11c:	0008d320 	cmpeqi	zero,zero,9036
   8d120:	0008d320 	cmpeqi	zero,zero,9036
   8d124:	0008d53c 	xorhi	zero,zero,9044
   8d128:	2404b03a 	or	r2,r4,r16
   8d12c:	10006f1e 	bne	r2,zero,8d2ec <__muldf3+0x2f8>
   8d130:	04c00204 	movi	r19,8
   8d134:	0021883a 	mov	r16,zero
   8d138:	0029883a 	mov	r20,zero
   8d13c:	07000084 	movi	fp,2
   8d140:	003fcb06 	br	8d070 <__alt_data_end+0xfffab5f0>
   8d144:	502d883a 	mov	r22,r10
   8d148:	00800084 	movi	r2,2
   8d14c:	28805726 	beq	r5,r2,8d2ac <__muldf3+0x2b8>
   8d150:	008000c4 	movi	r2,3
   8d154:	28816626 	beq	r5,r2,8d6f0 <__muldf3+0x6fc>
   8d158:	00800044 	movi	r2,1
   8d15c:	2881411e 	bne	r5,r2,8d664 <__muldf3+0x670>
   8d160:	b02b883a 	mov	r21,r22
   8d164:	0005883a 	mov	r2,zero
   8d168:	000b883a 	mov	r5,zero
   8d16c:	0029883a 	mov	r20,zero
   8d170:	1004953a 	slli	r2,r2,20
   8d174:	a8c03fcc 	andi	r3,r21,255
   8d178:	04400434 	movhi	r17,16
   8d17c:	8c7fffc4 	addi	r17,r17,-1
   8d180:	180697fa 	slli	r3,r3,31
   8d184:	2c4a703a 	and	r5,r5,r17
   8d188:	288ab03a 	or	r5,r5,r2
   8d18c:	28c6b03a 	or	r3,r5,r3
   8d190:	a005883a 	mov	r2,r20
   8d194:	dfc00c17 	ldw	ra,48(sp)
   8d198:	df000b17 	ldw	fp,44(sp)
   8d19c:	ddc00a17 	ldw	r23,40(sp)
   8d1a0:	dd800917 	ldw	r22,36(sp)
   8d1a4:	dd400817 	ldw	r21,32(sp)
   8d1a8:	dd000717 	ldw	r20,28(sp)
   8d1ac:	dcc00617 	ldw	r19,24(sp)
   8d1b0:	dc800517 	ldw	r18,20(sp)
   8d1b4:	dc400417 	ldw	r17,16(sp)
   8d1b8:	dc000317 	ldw	r16,12(sp)
   8d1bc:	dec00d04 	addi	sp,sp,52
   8d1c0:	f800283a 	ret
   8d1c4:	2404b03a 	or	r2,r4,r16
   8d1c8:	2027883a 	mov	r19,r4
   8d1cc:	10004226 	beq	r2,zero,8d2d8 <__muldf3+0x2e4>
   8d1d0:	8000fc26 	beq	r16,zero,8d5c4 <__muldf3+0x5d0>
   8d1d4:	8009883a 	mov	r4,r16
   8d1d8:	d9800215 	stw	r6,8(sp)
   8d1dc:	d9c00015 	stw	r7,0(sp)
   8d1e0:	da400115 	stw	r9,4(sp)
   8d1e4:	008e20c0 	call	8e20c <__clzsi2>
   8d1e8:	d9800217 	ldw	r6,8(sp)
   8d1ec:	d9c00017 	ldw	r7,0(sp)
   8d1f0:	da400117 	ldw	r9,4(sp)
   8d1f4:	113ffd44 	addi	r4,r2,-11
   8d1f8:	00c00704 	movi	r3,28
   8d1fc:	1900ed16 	blt	r3,r4,8d5b4 <__muldf3+0x5c0>
   8d200:	00c00744 	movi	r3,29
   8d204:	147ffe04 	addi	r17,r2,-8
   8d208:	1907c83a 	sub	r3,r3,r4
   8d20c:	8460983a 	sll	r16,r16,r17
   8d210:	98c6d83a 	srl	r3,r19,r3
   8d214:	9c68983a 	sll	r20,r19,r17
   8d218:	1c20b03a 	or	r16,r3,r16
   8d21c:	1080fcc4 	addi	r2,r2,1011
   8d220:	00a5c83a 	sub	r18,zero,r2
   8d224:	0027883a 	mov	r19,zero
   8d228:	0039883a 	mov	fp,zero
   8d22c:	003f9006 	br	8d070 <__alt_data_end+0xfffab5f0>
   8d230:	3446b03a 	or	r3,r6,r17
   8d234:	1800261e 	bne	r3,zero,8d2d0 <__muldf3+0x2dc>
   8d238:	0023883a 	mov	r17,zero
   8d23c:	0011883a 	mov	r8,zero
   8d240:	01400084 	movi	r5,2
   8d244:	003f9c06 	br	8d0b8 <__alt_data_end+0xfffab638>
   8d248:	3446b03a 	or	r3,r6,r17
   8d24c:	18001c26 	beq	r3,zero,8d2c0 <__muldf3+0x2cc>
   8d250:	8800ce26 	beq	r17,zero,8d58c <__muldf3+0x598>
   8d254:	8809883a 	mov	r4,r17
   8d258:	d9800215 	stw	r6,8(sp)
   8d25c:	da400115 	stw	r9,4(sp)
   8d260:	da800015 	stw	r10,0(sp)
   8d264:	008e20c0 	call	8e20c <__clzsi2>
   8d268:	d9800217 	ldw	r6,8(sp)
   8d26c:	da400117 	ldw	r9,4(sp)
   8d270:	da800017 	ldw	r10,0(sp)
   8d274:	113ffd44 	addi	r4,r2,-11
   8d278:	00c00704 	movi	r3,28
   8d27c:	1900bf16 	blt	r3,r4,8d57c <__muldf3+0x588>
   8d280:	00c00744 	movi	r3,29
   8d284:	123ffe04 	addi	r8,r2,-8
   8d288:	1907c83a 	sub	r3,r3,r4
   8d28c:	8a22983a 	sll	r17,r17,r8
   8d290:	30c6d83a 	srl	r3,r6,r3
   8d294:	3210983a 	sll	r8,r6,r8
   8d298:	1c62b03a 	or	r17,r3,r17
   8d29c:	1080fcc4 	addi	r2,r2,1011
   8d2a0:	0085c83a 	sub	r2,zero,r2
   8d2a4:	000b883a 	mov	r5,zero
   8d2a8:	003f8306 	br	8d0b8 <__alt_data_end+0xfffab638>
   8d2ac:	b02b883a 	mov	r21,r22
   8d2b0:	0081ffc4 	movi	r2,2047
   8d2b4:	000b883a 	mov	r5,zero
   8d2b8:	0029883a 	mov	r20,zero
   8d2bc:	003fac06 	br	8d170 <__alt_data_end+0xfffab6f0>
   8d2c0:	0023883a 	mov	r17,zero
   8d2c4:	0011883a 	mov	r8,zero
   8d2c8:	01400044 	movi	r5,1
   8d2cc:	003f7a06 	br	8d0b8 <__alt_data_end+0xfffab638>
   8d2d0:	014000c4 	movi	r5,3
   8d2d4:	003f7806 	br	8d0b8 <__alt_data_end+0xfffab638>
   8d2d8:	04c00104 	movi	r19,4
   8d2dc:	0021883a 	mov	r16,zero
   8d2e0:	0029883a 	mov	r20,zero
   8d2e4:	07000044 	movi	fp,1
   8d2e8:	003f6106 	br	8d070 <__alt_data_end+0xfffab5f0>
   8d2ec:	04c00304 	movi	r19,12
   8d2f0:	070000c4 	movi	fp,3
   8d2f4:	003f5e06 	br	8d070 <__alt_data_end+0xfffab5f0>
   8d2f8:	01400434 	movhi	r5,16
   8d2fc:	002b883a 	mov	r21,zero
   8d300:	297fffc4 	addi	r5,r5,-1
   8d304:	053fffc4 	movi	r20,-1
   8d308:	0081ffc4 	movi	r2,2047
   8d30c:	003f9806 	br	8d170 <__alt_data_end+0xfffab6f0>
   8d310:	8023883a 	mov	r17,r16
   8d314:	a011883a 	mov	r8,r20
   8d318:	e00b883a 	mov	r5,fp
   8d31c:	003f8a06 	br	8d148 <__alt_data_end+0xfffab6c8>
   8d320:	8023883a 	mov	r17,r16
   8d324:	a011883a 	mov	r8,r20
   8d328:	482d883a 	mov	r22,r9
   8d32c:	e00b883a 	mov	r5,fp
   8d330:	003f8506 	br	8d148 <__alt_data_end+0xfffab6c8>
   8d334:	a00ad43a 	srli	r5,r20,16
   8d338:	401ad43a 	srli	r13,r8,16
   8d33c:	a53fffcc 	andi	r20,r20,65535
   8d340:	423fffcc 	andi	r8,r8,65535
   8d344:	4519383a 	mul	r12,r8,r20
   8d348:	4147383a 	mul	r3,r8,r5
   8d34c:	6d09383a 	mul	r4,r13,r20
   8d350:	600cd43a 	srli	r6,r12,16
   8d354:	2b5d383a 	mul	r14,r5,r13
   8d358:	20c9883a 	add	r4,r4,r3
   8d35c:	310d883a 	add	r6,r6,r4
   8d360:	30c0022e 	bgeu	r6,r3,8d36c <__muldf3+0x378>
   8d364:	00c00074 	movhi	r3,1
   8d368:	70dd883a 	add	r14,r14,r3
   8d36c:	8826d43a 	srli	r19,r17,16
   8d370:	8bffffcc 	andi	r15,r17,65535
   8d374:	7d23383a 	mul	r17,r15,r20
   8d378:	7949383a 	mul	r4,r15,r5
   8d37c:	9d29383a 	mul	r20,r19,r20
   8d380:	8814d43a 	srli	r10,r17,16
   8d384:	3012943a 	slli	r9,r6,16
   8d388:	a129883a 	add	r20,r20,r4
   8d38c:	633fffcc 	andi	r12,r12,65535
   8d390:	5515883a 	add	r10,r10,r20
   8d394:	3006d43a 	srli	r3,r6,16
   8d398:	4b13883a 	add	r9,r9,r12
   8d39c:	2ccb383a 	mul	r5,r5,r19
   8d3a0:	5100022e 	bgeu	r10,r4,8d3ac <__muldf3+0x3b8>
   8d3a4:	01000074 	movhi	r4,1
   8d3a8:	290b883a 	add	r5,r5,r4
   8d3ac:	802ad43a 	srli	r21,r16,16
   8d3b0:	843fffcc 	andi	r16,r16,65535
   8d3b4:	440d383a 	mul	r6,r8,r16
   8d3b8:	4565383a 	mul	r18,r8,r21
   8d3bc:	8349383a 	mul	r4,r16,r13
   8d3c0:	500e943a 	slli	r7,r10,16
   8d3c4:	3010d43a 	srli	r8,r6,16
   8d3c8:	5028d43a 	srli	r20,r10,16
   8d3cc:	2489883a 	add	r4,r4,r18
   8d3d0:	8abfffcc 	andi	r10,r17,65535
   8d3d4:	3a95883a 	add	r10,r7,r10
   8d3d8:	4119883a 	add	r12,r8,r4
   8d3dc:	a169883a 	add	r20,r20,r5
   8d3e0:	1a87883a 	add	r3,r3,r10
   8d3e4:	6d5b383a 	mul	r13,r13,r21
   8d3e8:	6480022e 	bgeu	r12,r18,8d3f4 <__muldf3+0x400>
   8d3ec:	01000074 	movhi	r4,1
   8d3f0:	691b883a 	add	r13,r13,r4
   8d3f4:	7c25383a 	mul	r18,r15,r16
   8d3f8:	7d4b383a 	mul	r5,r15,r21
   8d3fc:	84cf383a 	mul	r7,r16,r19
   8d400:	901ed43a 	srli	r15,r18,16
   8d404:	6008d43a 	srli	r4,r12,16
   8d408:	6010943a 	slli	r8,r12,16
   8d40c:	394f883a 	add	r7,r7,r5
   8d410:	333fffcc 	andi	r12,r6,65535
   8d414:	79df883a 	add	r15,r15,r7
   8d418:	235b883a 	add	r13,r4,r13
   8d41c:	9d63383a 	mul	r17,r19,r21
   8d420:	4309883a 	add	r4,r8,r12
   8d424:	7940022e 	bgeu	r15,r5,8d430 <__muldf3+0x43c>
   8d428:	01400074 	movhi	r5,1
   8d42c:	8963883a 	add	r17,r17,r5
   8d430:	780a943a 	slli	r5,r15,16
   8d434:	91bfffcc 	andi	r6,r18,65535
   8d438:	70c7883a 	add	r3,r14,r3
   8d43c:	298d883a 	add	r6,r5,r6
   8d440:	1a8f803a 	cmpltu	r7,r3,r10
   8d444:	350b883a 	add	r5,r6,r20
   8d448:	20c7883a 	add	r3,r4,r3
   8d44c:	3955883a 	add	r10,r7,r5
   8d450:	1909803a 	cmpltu	r4,r3,r4
   8d454:	6a91883a 	add	r8,r13,r10
   8d458:	780cd43a 	srli	r6,r15,16
   8d45c:	2219883a 	add	r12,r4,r8
   8d460:	2d0b803a 	cmpltu	r5,r5,r20
   8d464:	51cf803a 	cmpltu	r7,r10,r7
   8d468:	29ceb03a 	or	r7,r5,r7
   8d46c:	4351803a 	cmpltu	r8,r8,r13
   8d470:	610b803a 	cmpltu	r5,r12,r4
   8d474:	4148b03a 	or	r4,r8,r5
   8d478:	398f883a 	add	r7,r7,r6
   8d47c:	3909883a 	add	r4,r7,r4
   8d480:	1810927a 	slli	r8,r3,9
   8d484:	2449883a 	add	r4,r4,r17
   8d488:	2008927a 	slli	r4,r4,9
   8d48c:	6022d5fa 	srli	r17,r12,23
   8d490:	1806d5fa 	srli	r3,r3,23
   8d494:	4252b03a 	or	r9,r8,r9
   8d498:	600a927a 	slli	r5,r12,9
   8d49c:	4810c03a 	cmpne	r8,r9,zero
   8d4a0:	2462b03a 	or	r17,r4,r17
   8d4a4:	40c6b03a 	or	r3,r8,r3
   8d4a8:	8900402c 	andhi	r4,r17,256
   8d4ac:	1950b03a 	or	r8,r3,r5
   8d4b0:	20000726 	beq	r4,zero,8d4d0 <__muldf3+0x4dc>
   8d4b4:	4006d07a 	srli	r3,r8,1
   8d4b8:	880497fa 	slli	r2,r17,31
   8d4bc:	4200004c 	andi	r8,r8,1
   8d4c0:	8822d07a 	srli	r17,r17,1
   8d4c4:	1a10b03a 	or	r8,r3,r8
   8d4c8:	1210b03a 	or	r8,r2,r8
   8d4cc:	5805883a 	mov	r2,r11
   8d4d0:	1140ffc4 	addi	r5,r2,1023
   8d4d4:	0140440e 	bge	zero,r5,8d5e8 <__muldf3+0x5f4>
   8d4d8:	40c001cc 	andi	r3,r8,7
   8d4dc:	18000726 	beq	r3,zero,8d4fc <__muldf3+0x508>
   8d4e0:	40c003cc 	andi	r3,r8,15
   8d4e4:	01000104 	movi	r4,4
   8d4e8:	19000426 	beq	r3,r4,8d4fc <__muldf3+0x508>
   8d4ec:	4107883a 	add	r3,r8,r4
   8d4f0:	1a11803a 	cmpltu	r8,r3,r8
   8d4f4:	8a23883a 	add	r17,r17,r8
   8d4f8:	1811883a 	mov	r8,r3
   8d4fc:	88c0402c 	andhi	r3,r17,256
   8d500:	18000426 	beq	r3,zero,8d514 <__muldf3+0x520>
   8d504:	11410004 	addi	r5,r2,1024
   8d508:	00bfc034 	movhi	r2,65280
   8d50c:	10bfffc4 	addi	r2,r2,-1
   8d510:	88a2703a 	and	r17,r17,r2
   8d514:	0081ff84 	movi	r2,2046
   8d518:	117f6416 	blt	r2,r5,8d2ac <__alt_data_end+0xfffab82c>
   8d51c:	8828977a 	slli	r20,r17,29
   8d520:	4010d0fa 	srli	r8,r8,3
   8d524:	8822927a 	slli	r17,r17,9
   8d528:	2881ffcc 	andi	r2,r5,2047
   8d52c:	a228b03a 	or	r20,r20,r8
   8d530:	880ad33a 	srli	r5,r17,12
   8d534:	b02b883a 	mov	r21,r22
   8d538:	003f0d06 	br	8d170 <__alt_data_end+0xfffab6f0>
   8d53c:	8080022c 	andhi	r2,r16,8
   8d540:	10000926 	beq	r2,zero,8d568 <__muldf3+0x574>
   8d544:	8880022c 	andhi	r2,r17,8
   8d548:	1000071e 	bne	r2,zero,8d568 <__muldf3+0x574>
   8d54c:	00800434 	movhi	r2,16
   8d550:	89400234 	orhi	r5,r17,8
   8d554:	10bfffc4 	addi	r2,r2,-1
   8d558:	b82b883a 	mov	r21,r23
   8d55c:	288a703a 	and	r5,r5,r2
   8d560:	4029883a 	mov	r20,r8
   8d564:	003f6806 	br	8d308 <__alt_data_end+0xfffab888>
   8d568:	00800434 	movhi	r2,16
   8d56c:	81400234 	orhi	r5,r16,8
   8d570:	10bfffc4 	addi	r2,r2,-1
   8d574:	288a703a 	and	r5,r5,r2
   8d578:	003f6306 	br	8d308 <__alt_data_end+0xfffab888>
   8d57c:	147ff604 	addi	r17,r2,-40
   8d580:	3462983a 	sll	r17,r6,r17
   8d584:	0011883a 	mov	r8,zero
   8d588:	003f4406 	br	8d29c <__alt_data_end+0xfffab81c>
   8d58c:	3009883a 	mov	r4,r6
   8d590:	d9800215 	stw	r6,8(sp)
   8d594:	da400115 	stw	r9,4(sp)
   8d598:	da800015 	stw	r10,0(sp)
   8d59c:	008e20c0 	call	8e20c <__clzsi2>
   8d5a0:	10800804 	addi	r2,r2,32
   8d5a4:	da800017 	ldw	r10,0(sp)
   8d5a8:	da400117 	ldw	r9,4(sp)
   8d5ac:	d9800217 	ldw	r6,8(sp)
   8d5b0:	003f3006 	br	8d274 <__alt_data_end+0xfffab7f4>
   8d5b4:	143ff604 	addi	r16,r2,-40
   8d5b8:	9c20983a 	sll	r16,r19,r16
   8d5bc:	0029883a 	mov	r20,zero
   8d5c0:	003f1606 	br	8d21c <__alt_data_end+0xfffab79c>
   8d5c4:	d9800215 	stw	r6,8(sp)
   8d5c8:	d9c00015 	stw	r7,0(sp)
   8d5cc:	da400115 	stw	r9,4(sp)
   8d5d0:	008e20c0 	call	8e20c <__clzsi2>
   8d5d4:	10800804 	addi	r2,r2,32
   8d5d8:	da400117 	ldw	r9,4(sp)
   8d5dc:	d9c00017 	ldw	r7,0(sp)
   8d5e0:	d9800217 	ldw	r6,8(sp)
   8d5e4:	003f0306 	br	8d1f4 <__alt_data_end+0xfffab774>
   8d5e8:	00c00044 	movi	r3,1
   8d5ec:	1947c83a 	sub	r3,r3,r5
   8d5f0:	00800e04 	movi	r2,56
   8d5f4:	10feda16 	blt	r2,r3,8d160 <__alt_data_end+0xfffab6e0>
   8d5f8:	008007c4 	movi	r2,31
   8d5fc:	10c01b16 	blt	r2,r3,8d66c <__muldf3+0x678>
   8d600:	00800804 	movi	r2,32
   8d604:	10c5c83a 	sub	r2,r2,r3
   8d608:	888a983a 	sll	r5,r17,r2
   8d60c:	40c8d83a 	srl	r4,r8,r3
   8d610:	4084983a 	sll	r2,r8,r2
   8d614:	88e2d83a 	srl	r17,r17,r3
   8d618:	2906b03a 	or	r3,r5,r4
   8d61c:	1004c03a 	cmpne	r2,r2,zero
   8d620:	1886b03a 	or	r3,r3,r2
   8d624:	188001cc 	andi	r2,r3,7
   8d628:	10000726 	beq	r2,zero,8d648 <__muldf3+0x654>
   8d62c:	188003cc 	andi	r2,r3,15
   8d630:	01000104 	movi	r4,4
   8d634:	11000426 	beq	r2,r4,8d648 <__muldf3+0x654>
   8d638:	1805883a 	mov	r2,r3
   8d63c:	10c00104 	addi	r3,r2,4
   8d640:	1885803a 	cmpltu	r2,r3,r2
   8d644:	88a3883a 	add	r17,r17,r2
   8d648:	8880202c 	andhi	r2,r17,128
   8d64c:	10001c26 	beq	r2,zero,8d6c0 <__muldf3+0x6cc>
   8d650:	b02b883a 	mov	r21,r22
   8d654:	00800044 	movi	r2,1
   8d658:	000b883a 	mov	r5,zero
   8d65c:	0029883a 	mov	r20,zero
   8d660:	003ec306 	br	8d170 <__alt_data_end+0xfffab6f0>
   8d664:	5805883a 	mov	r2,r11
   8d668:	003f9906 	br	8d4d0 <__alt_data_end+0xfffaba50>
   8d66c:	00bff844 	movi	r2,-31
   8d670:	1145c83a 	sub	r2,r2,r5
   8d674:	8888d83a 	srl	r4,r17,r2
   8d678:	00800804 	movi	r2,32
   8d67c:	18801a26 	beq	r3,r2,8d6e8 <__muldf3+0x6f4>
   8d680:	00801004 	movi	r2,64
   8d684:	10c5c83a 	sub	r2,r2,r3
   8d688:	8884983a 	sll	r2,r17,r2
   8d68c:	1204b03a 	or	r2,r2,r8
   8d690:	1004c03a 	cmpne	r2,r2,zero
   8d694:	2084b03a 	or	r2,r4,r2
   8d698:	144001cc 	andi	r17,r2,7
   8d69c:	88000d1e 	bne	r17,zero,8d6d4 <__muldf3+0x6e0>
   8d6a0:	000b883a 	mov	r5,zero
   8d6a4:	1028d0fa 	srli	r20,r2,3
   8d6a8:	b02b883a 	mov	r21,r22
   8d6ac:	0005883a 	mov	r2,zero
   8d6b0:	a468b03a 	or	r20,r20,r17
   8d6b4:	003eae06 	br	8d170 <__alt_data_end+0xfffab6f0>
   8d6b8:	1007883a 	mov	r3,r2
   8d6bc:	0023883a 	mov	r17,zero
   8d6c0:	880a927a 	slli	r5,r17,9
   8d6c4:	1805883a 	mov	r2,r3
   8d6c8:	8822977a 	slli	r17,r17,29
   8d6cc:	280ad33a 	srli	r5,r5,12
   8d6d0:	003ff406 	br	8d6a4 <__alt_data_end+0xfffabc24>
   8d6d4:	10c003cc 	andi	r3,r2,15
   8d6d8:	01000104 	movi	r4,4
   8d6dc:	193ff626 	beq	r3,r4,8d6b8 <__alt_data_end+0xfffabc38>
   8d6e0:	0023883a 	mov	r17,zero
   8d6e4:	003fd506 	br	8d63c <__alt_data_end+0xfffabbbc>
   8d6e8:	0005883a 	mov	r2,zero
   8d6ec:	003fe706 	br	8d68c <__alt_data_end+0xfffabc0c>
   8d6f0:	00800434 	movhi	r2,16
   8d6f4:	89400234 	orhi	r5,r17,8
   8d6f8:	10bfffc4 	addi	r2,r2,-1
   8d6fc:	b02b883a 	mov	r21,r22
   8d700:	288a703a 	and	r5,r5,r2
   8d704:	4029883a 	mov	r20,r8
   8d708:	003eff06 	br	8d308 <__alt_data_end+0xfffab888>

0008d70c <__subdf3>:
   8d70c:	02000434 	movhi	r8,16
   8d710:	423fffc4 	addi	r8,r8,-1
   8d714:	defffb04 	addi	sp,sp,-20
   8d718:	2a14703a 	and	r10,r5,r8
   8d71c:	3812d53a 	srli	r9,r7,20
   8d720:	3a10703a 	and	r8,r7,r8
   8d724:	2006d77a 	srli	r3,r4,29
   8d728:	3004d77a 	srli	r2,r6,29
   8d72c:	dc000015 	stw	r16,0(sp)
   8d730:	501490fa 	slli	r10,r10,3
   8d734:	2820d53a 	srli	r16,r5,20
   8d738:	401090fa 	slli	r8,r8,3
   8d73c:	dc800215 	stw	r18,8(sp)
   8d740:	dc400115 	stw	r17,4(sp)
   8d744:	dfc00415 	stw	ra,16(sp)
   8d748:	202290fa 	slli	r17,r4,3
   8d74c:	dcc00315 	stw	r19,12(sp)
   8d750:	4a41ffcc 	andi	r9,r9,2047
   8d754:	0101ffc4 	movi	r4,2047
   8d758:	2824d7fa 	srli	r18,r5,31
   8d75c:	8401ffcc 	andi	r16,r16,2047
   8d760:	50c6b03a 	or	r3,r10,r3
   8d764:	380ed7fa 	srli	r7,r7,31
   8d768:	408ab03a 	or	r5,r8,r2
   8d76c:	300c90fa 	slli	r6,r6,3
   8d770:	49009626 	beq	r9,r4,8d9cc <__subdf3+0x2c0>
   8d774:	39c0005c 	xori	r7,r7,1
   8d778:	8245c83a 	sub	r2,r16,r9
   8d77c:	3c807426 	beq	r7,r18,8d950 <__subdf3+0x244>
   8d780:	0080af0e 	bge	zero,r2,8da40 <__subdf3+0x334>
   8d784:	48002a1e 	bne	r9,zero,8d830 <__subdf3+0x124>
   8d788:	2988b03a 	or	r4,r5,r6
   8d78c:	20009a1e 	bne	r4,zero,8d9f8 <__subdf3+0x2ec>
   8d790:	888001cc 	andi	r2,r17,7
   8d794:	10000726 	beq	r2,zero,8d7b4 <__subdf3+0xa8>
   8d798:	888003cc 	andi	r2,r17,15
   8d79c:	01000104 	movi	r4,4
   8d7a0:	11000426 	beq	r2,r4,8d7b4 <__subdf3+0xa8>
   8d7a4:	890b883a 	add	r5,r17,r4
   8d7a8:	2c63803a 	cmpltu	r17,r5,r17
   8d7ac:	1c47883a 	add	r3,r3,r17
   8d7b0:	2823883a 	mov	r17,r5
   8d7b4:	1880202c 	andhi	r2,r3,128
   8d7b8:	10005926 	beq	r2,zero,8d920 <__subdf3+0x214>
   8d7bc:	84000044 	addi	r16,r16,1
   8d7c0:	0081ffc4 	movi	r2,2047
   8d7c4:	8080be26 	beq	r16,r2,8dac0 <__subdf3+0x3b4>
   8d7c8:	017fe034 	movhi	r5,65408
   8d7cc:	297fffc4 	addi	r5,r5,-1
   8d7d0:	1946703a 	and	r3,r3,r5
   8d7d4:	1804977a 	slli	r2,r3,29
   8d7d8:	1806927a 	slli	r3,r3,9
   8d7dc:	8822d0fa 	srli	r17,r17,3
   8d7e0:	8401ffcc 	andi	r16,r16,2047
   8d7e4:	180ad33a 	srli	r5,r3,12
   8d7e8:	9100004c 	andi	r4,r18,1
   8d7ec:	1444b03a 	or	r2,r2,r17
   8d7f0:	80c1ffcc 	andi	r3,r16,2047
   8d7f4:	1820953a 	slli	r16,r3,20
   8d7f8:	20c03fcc 	andi	r3,r4,255
   8d7fc:	180897fa 	slli	r4,r3,31
   8d800:	00c00434 	movhi	r3,16
   8d804:	18ffffc4 	addi	r3,r3,-1
   8d808:	28c6703a 	and	r3,r5,r3
   8d80c:	1c06b03a 	or	r3,r3,r16
   8d810:	1906b03a 	or	r3,r3,r4
   8d814:	dfc00417 	ldw	ra,16(sp)
   8d818:	dcc00317 	ldw	r19,12(sp)
   8d81c:	dc800217 	ldw	r18,8(sp)
   8d820:	dc400117 	ldw	r17,4(sp)
   8d824:	dc000017 	ldw	r16,0(sp)
   8d828:	dec00504 	addi	sp,sp,20
   8d82c:	f800283a 	ret
   8d830:	0101ffc4 	movi	r4,2047
   8d834:	813fd626 	beq	r16,r4,8d790 <__alt_data_end+0xfffabd10>
   8d838:	29402034 	orhi	r5,r5,128
   8d83c:	01000e04 	movi	r4,56
   8d840:	2080a316 	blt	r4,r2,8dad0 <__subdf3+0x3c4>
   8d844:	010007c4 	movi	r4,31
   8d848:	2080c616 	blt	r4,r2,8db64 <__subdf3+0x458>
   8d84c:	01000804 	movi	r4,32
   8d850:	2089c83a 	sub	r4,r4,r2
   8d854:	2910983a 	sll	r8,r5,r4
   8d858:	308ed83a 	srl	r7,r6,r2
   8d85c:	3108983a 	sll	r4,r6,r4
   8d860:	2884d83a 	srl	r2,r5,r2
   8d864:	41ccb03a 	or	r6,r8,r7
   8d868:	2008c03a 	cmpne	r4,r4,zero
   8d86c:	310cb03a 	or	r6,r6,r4
   8d870:	898dc83a 	sub	r6,r17,r6
   8d874:	89a3803a 	cmpltu	r17,r17,r6
   8d878:	1887c83a 	sub	r3,r3,r2
   8d87c:	1c47c83a 	sub	r3,r3,r17
   8d880:	3023883a 	mov	r17,r6
   8d884:	1880202c 	andhi	r2,r3,128
   8d888:	10002326 	beq	r2,zero,8d918 <__subdf3+0x20c>
   8d88c:	04c02034 	movhi	r19,128
   8d890:	9cffffc4 	addi	r19,r19,-1
   8d894:	1ce6703a 	and	r19,r3,r19
   8d898:	98007a26 	beq	r19,zero,8da84 <__subdf3+0x378>
   8d89c:	9809883a 	mov	r4,r19
   8d8a0:	008e20c0 	call	8e20c <__clzsi2>
   8d8a4:	113ffe04 	addi	r4,r2,-8
   8d8a8:	00c007c4 	movi	r3,31
   8d8ac:	19007b16 	blt	r3,r4,8da9c <__subdf3+0x390>
   8d8b0:	00800804 	movi	r2,32
   8d8b4:	1105c83a 	sub	r2,r2,r4
   8d8b8:	8884d83a 	srl	r2,r17,r2
   8d8bc:	9906983a 	sll	r3,r19,r4
   8d8c0:	8922983a 	sll	r17,r17,r4
   8d8c4:	10c4b03a 	or	r2,r2,r3
   8d8c8:	24007816 	blt	r4,r16,8daac <__subdf3+0x3a0>
   8d8cc:	2421c83a 	sub	r16,r4,r16
   8d8d0:	80c00044 	addi	r3,r16,1
   8d8d4:	010007c4 	movi	r4,31
   8d8d8:	20c09516 	blt	r4,r3,8db30 <__subdf3+0x424>
   8d8dc:	01400804 	movi	r5,32
   8d8e0:	28cbc83a 	sub	r5,r5,r3
   8d8e4:	88c8d83a 	srl	r4,r17,r3
   8d8e8:	8962983a 	sll	r17,r17,r5
   8d8ec:	114a983a 	sll	r5,r2,r5
   8d8f0:	10c6d83a 	srl	r3,r2,r3
   8d8f4:	8804c03a 	cmpne	r2,r17,zero
   8d8f8:	290ab03a 	or	r5,r5,r4
   8d8fc:	28a2b03a 	or	r17,r5,r2
   8d900:	0021883a 	mov	r16,zero
   8d904:	003fa206 	br	8d790 <__alt_data_end+0xfffabd10>
   8d908:	2090b03a 	or	r8,r4,r2
   8d90c:	40018e26 	beq	r8,zero,8df48 <__subdf3+0x83c>
   8d910:	1007883a 	mov	r3,r2
   8d914:	2023883a 	mov	r17,r4
   8d918:	888001cc 	andi	r2,r17,7
   8d91c:	103f9e1e 	bne	r2,zero,8d798 <__alt_data_end+0xfffabd18>
   8d920:	1804977a 	slli	r2,r3,29
   8d924:	8822d0fa 	srli	r17,r17,3
   8d928:	1810d0fa 	srli	r8,r3,3
   8d92c:	9100004c 	andi	r4,r18,1
   8d930:	1444b03a 	or	r2,r2,r17
   8d934:	00c1ffc4 	movi	r3,2047
   8d938:	80c02826 	beq	r16,r3,8d9dc <__subdf3+0x2d0>
   8d93c:	01400434 	movhi	r5,16
   8d940:	297fffc4 	addi	r5,r5,-1
   8d944:	80e0703a 	and	r16,r16,r3
   8d948:	414a703a 	and	r5,r8,r5
   8d94c:	003fa806 	br	8d7f0 <__alt_data_end+0xfffabd70>
   8d950:	0080630e 	bge	zero,r2,8dae0 <__subdf3+0x3d4>
   8d954:	48003026 	beq	r9,zero,8da18 <__subdf3+0x30c>
   8d958:	0101ffc4 	movi	r4,2047
   8d95c:	813f8c26 	beq	r16,r4,8d790 <__alt_data_end+0xfffabd10>
   8d960:	29402034 	orhi	r5,r5,128
   8d964:	01000e04 	movi	r4,56
   8d968:	2080a90e 	bge	r4,r2,8dc10 <__subdf3+0x504>
   8d96c:	298cb03a 	or	r6,r5,r6
   8d970:	3012c03a 	cmpne	r9,r6,zero
   8d974:	0005883a 	mov	r2,zero
   8d978:	4c53883a 	add	r9,r9,r17
   8d97c:	4c63803a 	cmpltu	r17,r9,r17
   8d980:	10c7883a 	add	r3,r2,r3
   8d984:	88c7883a 	add	r3,r17,r3
   8d988:	4823883a 	mov	r17,r9
   8d98c:	1880202c 	andhi	r2,r3,128
   8d990:	1000d026 	beq	r2,zero,8dcd4 <__subdf3+0x5c8>
   8d994:	84000044 	addi	r16,r16,1
   8d998:	0081ffc4 	movi	r2,2047
   8d99c:	8080fe26 	beq	r16,r2,8dd98 <__subdf3+0x68c>
   8d9a0:	00bfe034 	movhi	r2,65408
   8d9a4:	10bfffc4 	addi	r2,r2,-1
   8d9a8:	1886703a 	and	r3,r3,r2
   8d9ac:	880ad07a 	srli	r5,r17,1
   8d9b0:	180497fa 	slli	r2,r3,31
   8d9b4:	8900004c 	andi	r4,r17,1
   8d9b8:	2922b03a 	or	r17,r5,r4
   8d9bc:	1806d07a 	srli	r3,r3,1
   8d9c0:	1462b03a 	or	r17,r2,r17
   8d9c4:	3825883a 	mov	r18,r7
   8d9c8:	003f7106 	br	8d790 <__alt_data_end+0xfffabd10>
   8d9cc:	2984b03a 	or	r2,r5,r6
   8d9d0:	103f6826 	beq	r2,zero,8d774 <__alt_data_end+0xfffabcf4>
   8d9d4:	39c03fcc 	andi	r7,r7,255
   8d9d8:	003f6706 	br	8d778 <__alt_data_end+0xfffabcf8>
   8d9dc:	4086b03a 	or	r3,r8,r2
   8d9e0:	18015226 	beq	r3,zero,8df2c <__subdf3+0x820>
   8d9e4:	00c00434 	movhi	r3,16
   8d9e8:	41400234 	orhi	r5,r8,8
   8d9ec:	18ffffc4 	addi	r3,r3,-1
   8d9f0:	28ca703a 	and	r5,r5,r3
   8d9f4:	003f7e06 	br	8d7f0 <__alt_data_end+0xfffabd70>
   8d9f8:	10bfffc4 	addi	r2,r2,-1
   8d9fc:	1000491e 	bne	r2,zero,8db24 <__subdf3+0x418>
   8da00:	898fc83a 	sub	r7,r17,r6
   8da04:	89e3803a 	cmpltu	r17,r17,r7
   8da08:	1947c83a 	sub	r3,r3,r5
   8da0c:	1c47c83a 	sub	r3,r3,r17
   8da10:	3823883a 	mov	r17,r7
   8da14:	003f9b06 	br	8d884 <__alt_data_end+0xfffabe04>
   8da18:	2988b03a 	or	r4,r5,r6
   8da1c:	203f5c26 	beq	r4,zero,8d790 <__alt_data_end+0xfffabd10>
   8da20:	10bfffc4 	addi	r2,r2,-1
   8da24:	1000931e 	bne	r2,zero,8dc74 <__subdf3+0x568>
   8da28:	898d883a 	add	r6,r17,r6
   8da2c:	3463803a 	cmpltu	r17,r6,r17
   8da30:	1947883a 	add	r3,r3,r5
   8da34:	88c7883a 	add	r3,r17,r3
   8da38:	3023883a 	mov	r17,r6
   8da3c:	003fd306 	br	8d98c <__alt_data_end+0xfffabf0c>
   8da40:	1000541e 	bne	r2,zero,8db94 <__subdf3+0x488>
   8da44:	80800044 	addi	r2,r16,1
   8da48:	1081ffcc 	andi	r2,r2,2047
   8da4c:	01000044 	movi	r4,1
   8da50:	2080a20e 	bge	r4,r2,8dcdc <__subdf3+0x5d0>
   8da54:	8989c83a 	sub	r4,r17,r6
   8da58:	8905803a 	cmpltu	r2,r17,r4
   8da5c:	1967c83a 	sub	r19,r3,r5
   8da60:	98a7c83a 	sub	r19,r19,r2
   8da64:	9880202c 	andhi	r2,r19,128
   8da68:	10006326 	beq	r2,zero,8dbf8 <__subdf3+0x4ec>
   8da6c:	3463c83a 	sub	r17,r6,r17
   8da70:	28c7c83a 	sub	r3,r5,r3
   8da74:	344d803a 	cmpltu	r6,r6,r17
   8da78:	19a7c83a 	sub	r19,r3,r6
   8da7c:	3825883a 	mov	r18,r7
   8da80:	983f861e 	bne	r19,zero,8d89c <__alt_data_end+0xfffabe1c>
   8da84:	8809883a 	mov	r4,r17
   8da88:	008e20c0 	call	8e20c <__clzsi2>
   8da8c:	10800804 	addi	r2,r2,32
   8da90:	113ffe04 	addi	r4,r2,-8
   8da94:	00c007c4 	movi	r3,31
   8da98:	193f850e 	bge	r3,r4,8d8b0 <__alt_data_end+0xfffabe30>
   8da9c:	10bff604 	addi	r2,r2,-40
   8daa0:	8884983a 	sll	r2,r17,r2
   8daa4:	0023883a 	mov	r17,zero
   8daa8:	243f880e 	bge	r4,r16,8d8cc <__alt_data_end+0xfffabe4c>
   8daac:	00ffe034 	movhi	r3,65408
   8dab0:	18ffffc4 	addi	r3,r3,-1
   8dab4:	8121c83a 	sub	r16,r16,r4
   8dab8:	10c6703a 	and	r3,r2,r3
   8dabc:	003f3406 	br	8d790 <__alt_data_end+0xfffabd10>
   8dac0:	9100004c 	andi	r4,r18,1
   8dac4:	000b883a 	mov	r5,zero
   8dac8:	0005883a 	mov	r2,zero
   8dacc:	003f4806 	br	8d7f0 <__alt_data_end+0xfffabd70>
   8dad0:	298cb03a 	or	r6,r5,r6
   8dad4:	300cc03a 	cmpne	r6,r6,zero
   8dad8:	0005883a 	mov	r2,zero
   8dadc:	003f6406 	br	8d870 <__alt_data_end+0xfffabdf0>
   8dae0:	10009a1e 	bne	r2,zero,8dd4c <__subdf3+0x640>
   8dae4:	82400044 	addi	r9,r16,1
   8dae8:	4881ffcc 	andi	r2,r9,2047
   8daec:	02800044 	movi	r10,1
   8daf0:	5080670e 	bge	r10,r2,8dc90 <__subdf3+0x584>
   8daf4:	0081ffc4 	movi	r2,2047
   8daf8:	4880af26 	beq	r9,r2,8ddb8 <__subdf3+0x6ac>
   8dafc:	898d883a 	add	r6,r17,r6
   8db00:	1945883a 	add	r2,r3,r5
   8db04:	3447803a 	cmpltu	r3,r6,r17
   8db08:	1887883a 	add	r3,r3,r2
   8db0c:	182297fa 	slli	r17,r3,31
   8db10:	300cd07a 	srli	r6,r6,1
   8db14:	1806d07a 	srli	r3,r3,1
   8db18:	4821883a 	mov	r16,r9
   8db1c:	89a2b03a 	or	r17,r17,r6
   8db20:	003f1b06 	br	8d790 <__alt_data_end+0xfffabd10>
   8db24:	0101ffc4 	movi	r4,2047
   8db28:	813f441e 	bne	r16,r4,8d83c <__alt_data_end+0xfffabdbc>
   8db2c:	003f1806 	br	8d790 <__alt_data_end+0xfffabd10>
   8db30:	843ff844 	addi	r16,r16,-31
   8db34:	01400804 	movi	r5,32
   8db38:	1408d83a 	srl	r4,r2,r16
   8db3c:	19405026 	beq	r3,r5,8dc80 <__subdf3+0x574>
   8db40:	01401004 	movi	r5,64
   8db44:	28c7c83a 	sub	r3,r5,r3
   8db48:	10c4983a 	sll	r2,r2,r3
   8db4c:	88a2b03a 	or	r17,r17,r2
   8db50:	8822c03a 	cmpne	r17,r17,zero
   8db54:	2462b03a 	or	r17,r4,r17
   8db58:	0007883a 	mov	r3,zero
   8db5c:	0021883a 	mov	r16,zero
   8db60:	003f6d06 	br	8d918 <__alt_data_end+0xfffabe98>
   8db64:	11fff804 	addi	r7,r2,-32
   8db68:	01000804 	movi	r4,32
   8db6c:	29ced83a 	srl	r7,r5,r7
   8db70:	11004526 	beq	r2,r4,8dc88 <__subdf3+0x57c>
   8db74:	01001004 	movi	r4,64
   8db78:	2089c83a 	sub	r4,r4,r2
   8db7c:	2904983a 	sll	r2,r5,r4
   8db80:	118cb03a 	or	r6,r2,r6
   8db84:	300cc03a 	cmpne	r6,r6,zero
   8db88:	398cb03a 	or	r6,r7,r6
   8db8c:	0005883a 	mov	r2,zero
   8db90:	003f3706 	br	8d870 <__alt_data_end+0xfffabdf0>
   8db94:	80002a26 	beq	r16,zero,8dc40 <__subdf3+0x534>
   8db98:	0101ffc4 	movi	r4,2047
   8db9c:	49006626 	beq	r9,r4,8dd38 <__subdf3+0x62c>
   8dba0:	0085c83a 	sub	r2,zero,r2
   8dba4:	18c02034 	orhi	r3,r3,128
   8dba8:	01000e04 	movi	r4,56
   8dbac:	20807e16 	blt	r4,r2,8dda8 <__subdf3+0x69c>
   8dbb0:	010007c4 	movi	r4,31
   8dbb4:	2080e716 	blt	r4,r2,8df54 <__subdf3+0x848>
   8dbb8:	01000804 	movi	r4,32
   8dbbc:	2089c83a 	sub	r4,r4,r2
   8dbc0:	1914983a 	sll	r10,r3,r4
   8dbc4:	8890d83a 	srl	r8,r17,r2
   8dbc8:	8908983a 	sll	r4,r17,r4
   8dbcc:	1884d83a 	srl	r2,r3,r2
   8dbd0:	5222b03a 	or	r17,r10,r8
   8dbd4:	2006c03a 	cmpne	r3,r4,zero
   8dbd8:	88e2b03a 	or	r17,r17,r3
   8dbdc:	3463c83a 	sub	r17,r6,r17
   8dbe0:	2885c83a 	sub	r2,r5,r2
   8dbe4:	344d803a 	cmpltu	r6,r6,r17
   8dbe8:	1187c83a 	sub	r3,r2,r6
   8dbec:	4821883a 	mov	r16,r9
   8dbf0:	3825883a 	mov	r18,r7
   8dbf4:	003f2306 	br	8d884 <__alt_data_end+0xfffabe04>
   8dbf8:	24d0b03a 	or	r8,r4,r19
   8dbfc:	40001b1e 	bne	r8,zero,8dc6c <__subdf3+0x560>
   8dc00:	0005883a 	mov	r2,zero
   8dc04:	0009883a 	mov	r4,zero
   8dc08:	0021883a 	mov	r16,zero
   8dc0c:	003f4906 	br	8d934 <__alt_data_end+0xfffabeb4>
   8dc10:	010007c4 	movi	r4,31
   8dc14:	20803a16 	blt	r4,r2,8dd00 <__subdf3+0x5f4>
   8dc18:	01000804 	movi	r4,32
   8dc1c:	2089c83a 	sub	r4,r4,r2
   8dc20:	2912983a 	sll	r9,r5,r4
   8dc24:	3090d83a 	srl	r8,r6,r2
   8dc28:	3108983a 	sll	r4,r6,r4
   8dc2c:	2884d83a 	srl	r2,r5,r2
   8dc30:	4a12b03a 	or	r9,r9,r8
   8dc34:	2008c03a 	cmpne	r4,r4,zero
   8dc38:	4912b03a 	or	r9,r9,r4
   8dc3c:	003f4e06 	br	8d978 <__alt_data_end+0xfffabef8>
   8dc40:	1c48b03a 	or	r4,r3,r17
   8dc44:	20003c26 	beq	r4,zero,8dd38 <__subdf3+0x62c>
   8dc48:	0084303a 	nor	r2,zero,r2
   8dc4c:	1000381e 	bne	r2,zero,8dd30 <__subdf3+0x624>
   8dc50:	3463c83a 	sub	r17,r6,r17
   8dc54:	28c5c83a 	sub	r2,r5,r3
   8dc58:	344d803a 	cmpltu	r6,r6,r17
   8dc5c:	1187c83a 	sub	r3,r2,r6
   8dc60:	4821883a 	mov	r16,r9
   8dc64:	3825883a 	mov	r18,r7
   8dc68:	003f0606 	br	8d884 <__alt_data_end+0xfffabe04>
   8dc6c:	2023883a 	mov	r17,r4
   8dc70:	003f0906 	br	8d898 <__alt_data_end+0xfffabe18>
   8dc74:	0101ffc4 	movi	r4,2047
   8dc78:	813f3a1e 	bne	r16,r4,8d964 <__alt_data_end+0xfffabee4>
   8dc7c:	003ec406 	br	8d790 <__alt_data_end+0xfffabd10>
   8dc80:	0005883a 	mov	r2,zero
   8dc84:	003fb106 	br	8db4c <__alt_data_end+0xfffac0cc>
   8dc88:	0005883a 	mov	r2,zero
   8dc8c:	003fbc06 	br	8db80 <__alt_data_end+0xfffac100>
   8dc90:	1c44b03a 	or	r2,r3,r17
   8dc94:	80008e1e 	bne	r16,zero,8ded0 <__subdf3+0x7c4>
   8dc98:	1000c826 	beq	r2,zero,8dfbc <__subdf3+0x8b0>
   8dc9c:	2984b03a 	or	r2,r5,r6
   8dca0:	103ebb26 	beq	r2,zero,8d790 <__alt_data_end+0xfffabd10>
   8dca4:	8989883a 	add	r4,r17,r6
   8dca8:	1945883a 	add	r2,r3,r5
   8dcac:	2447803a 	cmpltu	r3,r4,r17
   8dcb0:	1887883a 	add	r3,r3,r2
   8dcb4:	1880202c 	andhi	r2,r3,128
   8dcb8:	2023883a 	mov	r17,r4
   8dcbc:	103f1626 	beq	r2,zero,8d918 <__alt_data_end+0xfffabe98>
   8dcc0:	00bfe034 	movhi	r2,65408
   8dcc4:	10bfffc4 	addi	r2,r2,-1
   8dcc8:	5021883a 	mov	r16,r10
   8dccc:	1886703a 	and	r3,r3,r2
   8dcd0:	003eaf06 	br	8d790 <__alt_data_end+0xfffabd10>
   8dcd4:	3825883a 	mov	r18,r7
   8dcd8:	003f0f06 	br	8d918 <__alt_data_end+0xfffabe98>
   8dcdc:	1c44b03a 	or	r2,r3,r17
   8dce0:	8000251e 	bne	r16,zero,8dd78 <__subdf3+0x66c>
   8dce4:	1000661e 	bne	r2,zero,8de80 <__subdf3+0x774>
   8dce8:	2990b03a 	or	r8,r5,r6
   8dcec:	40009626 	beq	r8,zero,8df48 <__subdf3+0x83c>
   8dcf0:	2807883a 	mov	r3,r5
   8dcf4:	3023883a 	mov	r17,r6
   8dcf8:	3825883a 	mov	r18,r7
   8dcfc:	003ea406 	br	8d790 <__alt_data_end+0xfffabd10>
   8dd00:	127ff804 	addi	r9,r2,-32
   8dd04:	01000804 	movi	r4,32
   8dd08:	2a52d83a 	srl	r9,r5,r9
   8dd0c:	11008c26 	beq	r2,r4,8df40 <__subdf3+0x834>
   8dd10:	01001004 	movi	r4,64
   8dd14:	2085c83a 	sub	r2,r4,r2
   8dd18:	2884983a 	sll	r2,r5,r2
   8dd1c:	118cb03a 	or	r6,r2,r6
   8dd20:	300cc03a 	cmpne	r6,r6,zero
   8dd24:	4992b03a 	or	r9,r9,r6
   8dd28:	0005883a 	mov	r2,zero
   8dd2c:	003f1206 	br	8d978 <__alt_data_end+0xfffabef8>
   8dd30:	0101ffc4 	movi	r4,2047
   8dd34:	493f9c1e 	bne	r9,r4,8dba8 <__alt_data_end+0xfffac128>
   8dd38:	2807883a 	mov	r3,r5
   8dd3c:	3023883a 	mov	r17,r6
   8dd40:	4821883a 	mov	r16,r9
   8dd44:	3825883a 	mov	r18,r7
   8dd48:	003e9106 	br	8d790 <__alt_data_end+0xfffabd10>
   8dd4c:	80001f1e 	bne	r16,zero,8ddcc <__subdf3+0x6c0>
   8dd50:	1c48b03a 	or	r4,r3,r17
   8dd54:	20005a26 	beq	r4,zero,8dec0 <__subdf3+0x7b4>
   8dd58:	0084303a 	nor	r2,zero,r2
   8dd5c:	1000561e 	bne	r2,zero,8deb8 <__subdf3+0x7ac>
   8dd60:	89a3883a 	add	r17,r17,r6
   8dd64:	1945883a 	add	r2,r3,r5
   8dd68:	898d803a 	cmpltu	r6,r17,r6
   8dd6c:	3087883a 	add	r3,r6,r2
   8dd70:	4821883a 	mov	r16,r9
   8dd74:	003f0506 	br	8d98c <__alt_data_end+0xfffabf0c>
   8dd78:	10002b1e 	bne	r2,zero,8de28 <__subdf3+0x71c>
   8dd7c:	2984b03a 	or	r2,r5,r6
   8dd80:	10008026 	beq	r2,zero,8df84 <__subdf3+0x878>
   8dd84:	2807883a 	mov	r3,r5
   8dd88:	3023883a 	mov	r17,r6
   8dd8c:	3825883a 	mov	r18,r7
   8dd90:	0401ffc4 	movi	r16,2047
   8dd94:	003e7e06 	br	8d790 <__alt_data_end+0xfffabd10>
   8dd98:	3809883a 	mov	r4,r7
   8dd9c:	0011883a 	mov	r8,zero
   8dda0:	0005883a 	mov	r2,zero
   8dda4:	003ee306 	br	8d934 <__alt_data_end+0xfffabeb4>
   8dda8:	1c62b03a 	or	r17,r3,r17
   8ddac:	8822c03a 	cmpne	r17,r17,zero
   8ddb0:	0005883a 	mov	r2,zero
   8ddb4:	003f8906 	br	8dbdc <__alt_data_end+0xfffac15c>
   8ddb8:	3809883a 	mov	r4,r7
   8ddbc:	4821883a 	mov	r16,r9
   8ddc0:	0011883a 	mov	r8,zero
   8ddc4:	0005883a 	mov	r2,zero
   8ddc8:	003eda06 	br	8d934 <__alt_data_end+0xfffabeb4>
   8ddcc:	0101ffc4 	movi	r4,2047
   8ddd0:	49003b26 	beq	r9,r4,8dec0 <__subdf3+0x7b4>
   8ddd4:	0085c83a 	sub	r2,zero,r2
   8ddd8:	18c02034 	orhi	r3,r3,128
   8dddc:	01000e04 	movi	r4,56
   8dde0:	20806e16 	blt	r4,r2,8df9c <__subdf3+0x890>
   8dde4:	010007c4 	movi	r4,31
   8dde8:	20807716 	blt	r4,r2,8dfc8 <__subdf3+0x8bc>
   8ddec:	01000804 	movi	r4,32
   8ddf0:	2089c83a 	sub	r4,r4,r2
   8ddf4:	1914983a 	sll	r10,r3,r4
   8ddf8:	8890d83a 	srl	r8,r17,r2
   8ddfc:	8908983a 	sll	r4,r17,r4
   8de00:	1884d83a 	srl	r2,r3,r2
   8de04:	5222b03a 	or	r17,r10,r8
   8de08:	2006c03a 	cmpne	r3,r4,zero
   8de0c:	88e2b03a 	or	r17,r17,r3
   8de10:	89a3883a 	add	r17,r17,r6
   8de14:	1145883a 	add	r2,r2,r5
   8de18:	898d803a 	cmpltu	r6,r17,r6
   8de1c:	3087883a 	add	r3,r6,r2
   8de20:	4821883a 	mov	r16,r9
   8de24:	003ed906 	br	8d98c <__alt_data_end+0xfffabf0c>
   8de28:	2984b03a 	or	r2,r5,r6
   8de2c:	10004226 	beq	r2,zero,8df38 <__subdf3+0x82c>
   8de30:	1808d0fa 	srli	r4,r3,3
   8de34:	8822d0fa 	srli	r17,r17,3
   8de38:	1806977a 	slli	r3,r3,29
   8de3c:	2080022c 	andhi	r2,r4,8
   8de40:	1c62b03a 	or	r17,r3,r17
   8de44:	10000826 	beq	r2,zero,8de68 <__subdf3+0x75c>
   8de48:	2812d0fa 	srli	r9,r5,3
   8de4c:	4880022c 	andhi	r2,r9,8
   8de50:	1000051e 	bne	r2,zero,8de68 <__subdf3+0x75c>
   8de54:	300cd0fa 	srli	r6,r6,3
   8de58:	2804977a 	slli	r2,r5,29
   8de5c:	4809883a 	mov	r4,r9
   8de60:	3825883a 	mov	r18,r7
   8de64:	11a2b03a 	or	r17,r2,r6
   8de68:	8806d77a 	srli	r3,r17,29
   8de6c:	200890fa 	slli	r4,r4,3
   8de70:	882290fa 	slli	r17,r17,3
   8de74:	0401ffc4 	movi	r16,2047
   8de78:	1906b03a 	or	r3,r3,r4
   8de7c:	003e4406 	br	8d790 <__alt_data_end+0xfffabd10>
   8de80:	2984b03a 	or	r2,r5,r6
   8de84:	103e4226 	beq	r2,zero,8d790 <__alt_data_end+0xfffabd10>
   8de88:	8989c83a 	sub	r4,r17,r6
   8de8c:	8911803a 	cmpltu	r8,r17,r4
   8de90:	1945c83a 	sub	r2,r3,r5
   8de94:	1205c83a 	sub	r2,r2,r8
   8de98:	1200202c 	andhi	r8,r2,128
   8de9c:	403e9a26 	beq	r8,zero,8d908 <__alt_data_end+0xfffabe88>
   8dea0:	3463c83a 	sub	r17,r6,r17
   8dea4:	28c5c83a 	sub	r2,r5,r3
   8dea8:	344d803a 	cmpltu	r6,r6,r17
   8deac:	1187c83a 	sub	r3,r2,r6
   8deb0:	3825883a 	mov	r18,r7
   8deb4:	003e3606 	br	8d790 <__alt_data_end+0xfffabd10>
   8deb8:	0101ffc4 	movi	r4,2047
   8debc:	493fc71e 	bne	r9,r4,8dddc <__alt_data_end+0xfffac35c>
   8dec0:	2807883a 	mov	r3,r5
   8dec4:	3023883a 	mov	r17,r6
   8dec8:	4821883a 	mov	r16,r9
   8decc:	003e3006 	br	8d790 <__alt_data_end+0xfffabd10>
   8ded0:	10003626 	beq	r2,zero,8dfac <__subdf3+0x8a0>
   8ded4:	2984b03a 	or	r2,r5,r6
   8ded8:	10001726 	beq	r2,zero,8df38 <__subdf3+0x82c>
   8dedc:	1808d0fa 	srli	r4,r3,3
   8dee0:	8822d0fa 	srli	r17,r17,3
   8dee4:	1806977a 	slli	r3,r3,29
   8dee8:	2080022c 	andhi	r2,r4,8
   8deec:	1c62b03a 	or	r17,r3,r17
   8def0:	10000726 	beq	r2,zero,8df10 <__subdf3+0x804>
   8def4:	2812d0fa 	srli	r9,r5,3
   8def8:	4880022c 	andhi	r2,r9,8
   8defc:	1000041e 	bne	r2,zero,8df10 <__subdf3+0x804>
   8df00:	300cd0fa 	srli	r6,r6,3
   8df04:	2804977a 	slli	r2,r5,29
   8df08:	4809883a 	mov	r4,r9
   8df0c:	11a2b03a 	or	r17,r2,r6
   8df10:	8806d77a 	srli	r3,r17,29
   8df14:	200890fa 	slli	r4,r4,3
   8df18:	882290fa 	slli	r17,r17,3
   8df1c:	3825883a 	mov	r18,r7
   8df20:	1906b03a 	or	r3,r3,r4
   8df24:	0401ffc4 	movi	r16,2047
   8df28:	003e1906 	br	8d790 <__alt_data_end+0xfffabd10>
   8df2c:	000b883a 	mov	r5,zero
   8df30:	0005883a 	mov	r2,zero
   8df34:	003e2e06 	br	8d7f0 <__alt_data_end+0xfffabd70>
   8df38:	0401ffc4 	movi	r16,2047
   8df3c:	003e1406 	br	8d790 <__alt_data_end+0xfffabd10>
   8df40:	0005883a 	mov	r2,zero
   8df44:	003f7506 	br	8dd1c <__alt_data_end+0xfffac29c>
   8df48:	0005883a 	mov	r2,zero
   8df4c:	0009883a 	mov	r4,zero
   8df50:	003e7806 	br	8d934 <__alt_data_end+0xfffabeb4>
   8df54:	123ff804 	addi	r8,r2,-32
   8df58:	01000804 	movi	r4,32
   8df5c:	1a10d83a 	srl	r8,r3,r8
   8df60:	11002526 	beq	r2,r4,8dff8 <__subdf3+0x8ec>
   8df64:	01001004 	movi	r4,64
   8df68:	2085c83a 	sub	r2,r4,r2
   8df6c:	1884983a 	sll	r2,r3,r2
   8df70:	1444b03a 	or	r2,r2,r17
   8df74:	1004c03a 	cmpne	r2,r2,zero
   8df78:	40a2b03a 	or	r17,r8,r2
   8df7c:	0005883a 	mov	r2,zero
   8df80:	003f1606 	br	8dbdc <__alt_data_end+0xfffac15c>
   8df84:	02000434 	movhi	r8,16
   8df88:	0009883a 	mov	r4,zero
   8df8c:	423fffc4 	addi	r8,r8,-1
   8df90:	00bfffc4 	movi	r2,-1
   8df94:	0401ffc4 	movi	r16,2047
   8df98:	003e6606 	br	8d934 <__alt_data_end+0xfffabeb4>
   8df9c:	1c62b03a 	or	r17,r3,r17
   8dfa0:	8822c03a 	cmpne	r17,r17,zero
   8dfa4:	0005883a 	mov	r2,zero
   8dfa8:	003f9906 	br	8de10 <__alt_data_end+0xfffac390>
   8dfac:	2807883a 	mov	r3,r5
   8dfb0:	3023883a 	mov	r17,r6
   8dfb4:	0401ffc4 	movi	r16,2047
   8dfb8:	003df506 	br	8d790 <__alt_data_end+0xfffabd10>
   8dfbc:	2807883a 	mov	r3,r5
   8dfc0:	3023883a 	mov	r17,r6
   8dfc4:	003df206 	br	8d790 <__alt_data_end+0xfffabd10>
   8dfc8:	123ff804 	addi	r8,r2,-32
   8dfcc:	01000804 	movi	r4,32
   8dfd0:	1a10d83a 	srl	r8,r3,r8
   8dfd4:	11000a26 	beq	r2,r4,8e000 <__subdf3+0x8f4>
   8dfd8:	01001004 	movi	r4,64
   8dfdc:	2085c83a 	sub	r2,r4,r2
   8dfe0:	1884983a 	sll	r2,r3,r2
   8dfe4:	1444b03a 	or	r2,r2,r17
   8dfe8:	1004c03a 	cmpne	r2,r2,zero
   8dfec:	40a2b03a 	or	r17,r8,r2
   8dff0:	0005883a 	mov	r2,zero
   8dff4:	003f8606 	br	8de10 <__alt_data_end+0xfffac390>
   8dff8:	0005883a 	mov	r2,zero
   8dffc:	003fdc06 	br	8df70 <__alt_data_end+0xfffac4f0>
   8e000:	0005883a 	mov	r2,zero
   8e004:	003ff706 	br	8dfe4 <__alt_data_end+0xfffac564>

0008e008 <__fixdfsi>:
   8e008:	280cd53a 	srli	r6,r5,20
   8e00c:	00c00434 	movhi	r3,16
   8e010:	18ffffc4 	addi	r3,r3,-1
   8e014:	3181ffcc 	andi	r6,r6,2047
   8e018:	01c0ff84 	movi	r7,1022
   8e01c:	28c6703a 	and	r3,r5,r3
   8e020:	280ad7fa 	srli	r5,r5,31
   8e024:	3980120e 	bge	r7,r6,8e070 <__fixdfsi+0x68>
   8e028:	00810744 	movi	r2,1053
   8e02c:	11800c16 	blt	r2,r6,8e060 <__fixdfsi+0x58>
   8e030:	00810cc4 	movi	r2,1075
   8e034:	1185c83a 	sub	r2,r2,r6
   8e038:	01c007c4 	movi	r7,31
   8e03c:	18c00434 	orhi	r3,r3,16
   8e040:	38800d16 	blt	r7,r2,8e078 <__fixdfsi+0x70>
   8e044:	31befb44 	addi	r6,r6,-1043
   8e048:	2084d83a 	srl	r2,r4,r2
   8e04c:	1986983a 	sll	r3,r3,r6
   8e050:	1884b03a 	or	r2,r3,r2
   8e054:	28000726 	beq	r5,zero,8e074 <__fixdfsi+0x6c>
   8e058:	0085c83a 	sub	r2,zero,r2
   8e05c:	f800283a 	ret
   8e060:	00a00034 	movhi	r2,32768
   8e064:	10bfffc4 	addi	r2,r2,-1
   8e068:	2885883a 	add	r2,r5,r2
   8e06c:	f800283a 	ret
   8e070:	0005883a 	mov	r2,zero
   8e074:	f800283a 	ret
   8e078:	008104c4 	movi	r2,1043
   8e07c:	1185c83a 	sub	r2,r2,r6
   8e080:	1884d83a 	srl	r2,r3,r2
   8e084:	003ff306 	br	8e054 <__alt_data_end+0xfffac5d4>

0008e088 <__floatsidf>:
   8e088:	defffd04 	addi	sp,sp,-12
   8e08c:	dfc00215 	stw	ra,8(sp)
   8e090:	dc400115 	stw	r17,4(sp)
   8e094:	dc000015 	stw	r16,0(sp)
   8e098:	20002b26 	beq	r4,zero,8e148 <__floatsidf+0xc0>
   8e09c:	2023883a 	mov	r17,r4
   8e0a0:	2020d7fa 	srli	r16,r4,31
   8e0a4:	20002d16 	blt	r4,zero,8e15c <__floatsidf+0xd4>
   8e0a8:	8809883a 	mov	r4,r17
   8e0ac:	008e20c0 	call	8e20c <__clzsi2>
   8e0b0:	01410784 	movi	r5,1054
   8e0b4:	288bc83a 	sub	r5,r5,r2
   8e0b8:	01010cc4 	movi	r4,1075
   8e0bc:	2149c83a 	sub	r4,r4,r5
   8e0c0:	00c007c4 	movi	r3,31
   8e0c4:	1900160e 	bge	r3,r4,8e120 <__floatsidf+0x98>
   8e0c8:	00c104c4 	movi	r3,1043
   8e0cc:	1947c83a 	sub	r3,r3,r5
   8e0d0:	88c6983a 	sll	r3,r17,r3
   8e0d4:	00800434 	movhi	r2,16
   8e0d8:	10bfffc4 	addi	r2,r2,-1
   8e0dc:	1886703a 	and	r3,r3,r2
   8e0e0:	2941ffcc 	andi	r5,r5,2047
   8e0e4:	800d883a 	mov	r6,r16
   8e0e8:	0005883a 	mov	r2,zero
   8e0ec:	280a953a 	slli	r5,r5,20
   8e0f0:	31803fcc 	andi	r6,r6,255
   8e0f4:	01000434 	movhi	r4,16
   8e0f8:	300c97fa 	slli	r6,r6,31
   8e0fc:	213fffc4 	addi	r4,r4,-1
   8e100:	1906703a 	and	r3,r3,r4
   8e104:	1946b03a 	or	r3,r3,r5
   8e108:	1986b03a 	or	r3,r3,r6
   8e10c:	dfc00217 	ldw	ra,8(sp)
   8e110:	dc400117 	ldw	r17,4(sp)
   8e114:	dc000017 	ldw	r16,0(sp)
   8e118:	dec00304 	addi	sp,sp,12
   8e11c:	f800283a 	ret
   8e120:	00c002c4 	movi	r3,11
   8e124:	1887c83a 	sub	r3,r3,r2
   8e128:	88c6d83a 	srl	r3,r17,r3
   8e12c:	8904983a 	sll	r2,r17,r4
   8e130:	01000434 	movhi	r4,16
   8e134:	213fffc4 	addi	r4,r4,-1
   8e138:	2941ffcc 	andi	r5,r5,2047
   8e13c:	1906703a 	and	r3,r3,r4
   8e140:	800d883a 	mov	r6,r16
   8e144:	003fe906 	br	8e0ec <__alt_data_end+0xfffac66c>
   8e148:	000d883a 	mov	r6,zero
   8e14c:	000b883a 	mov	r5,zero
   8e150:	0007883a 	mov	r3,zero
   8e154:	0005883a 	mov	r2,zero
   8e158:	003fe406 	br	8e0ec <__alt_data_end+0xfffac66c>
   8e15c:	0123c83a 	sub	r17,zero,r4
   8e160:	003fd106 	br	8e0a8 <__alt_data_end+0xfffac628>

0008e164 <__floatunsidf>:
   8e164:	defffe04 	addi	sp,sp,-8
   8e168:	dc000015 	stw	r16,0(sp)
   8e16c:	dfc00115 	stw	ra,4(sp)
   8e170:	2021883a 	mov	r16,r4
   8e174:	20002226 	beq	r4,zero,8e200 <__floatunsidf+0x9c>
   8e178:	008e20c0 	call	8e20c <__clzsi2>
   8e17c:	01010784 	movi	r4,1054
   8e180:	2089c83a 	sub	r4,r4,r2
   8e184:	01810cc4 	movi	r6,1075
   8e188:	310dc83a 	sub	r6,r6,r4
   8e18c:	00c007c4 	movi	r3,31
   8e190:	1980120e 	bge	r3,r6,8e1dc <__floatunsidf+0x78>
   8e194:	00c104c4 	movi	r3,1043
   8e198:	1907c83a 	sub	r3,r3,r4
   8e19c:	80ca983a 	sll	r5,r16,r3
   8e1a0:	00800434 	movhi	r2,16
   8e1a4:	10bfffc4 	addi	r2,r2,-1
   8e1a8:	2101ffcc 	andi	r4,r4,2047
   8e1ac:	0021883a 	mov	r16,zero
   8e1b0:	288a703a 	and	r5,r5,r2
   8e1b4:	2008953a 	slli	r4,r4,20
   8e1b8:	00c00434 	movhi	r3,16
   8e1bc:	18ffffc4 	addi	r3,r3,-1
   8e1c0:	28c6703a 	and	r3,r5,r3
   8e1c4:	8005883a 	mov	r2,r16
   8e1c8:	1906b03a 	or	r3,r3,r4
   8e1cc:	dfc00117 	ldw	ra,4(sp)
   8e1d0:	dc000017 	ldw	r16,0(sp)
   8e1d4:	dec00204 	addi	sp,sp,8
   8e1d8:	f800283a 	ret
   8e1dc:	00c002c4 	movi	r3,11
   8e1e0:	188bc83a 	sub	r5,r3,r2
   8e1e4:	814ad83a 	srl	r5,r16,r5
   8e1e8:	00c00434 	movhi	r3,16
   8e1ec:	18ffffc4 	addi	r3,r3,-1
   8e1f0:	81a0983a 	sll	r16,r16,r6
   8e1f4:	2101ffcc 	andi	r4,r4,2047
   8e1f8:	28ca703a 	and	r5,r5,r3
   8e1fc:	003fed06 	br	8e1b4 <__alt_data_end+0xfffac734>
   8e200:	0009883a 	mov	r4,zero
   8e204:	000b883a 	mov	r5,zero
   8e208:	003fea06 	br	8e1b4 <__alt_data_end+0xfffac734>

0008e20c <__clzsi2>:
   8e20c:	00bfffd4 	movui	r2,65535
   8e210:	11000536 	bltu	r2,r4,8e228 <__clzsi2+0x1c>
   8e214:	00803fc4 	movi	r2,255
   8e218:	11000f36 	bltu	r2,r4,8e258 <__clzsi2+0x4c>
   8e21c:	00800804 	movi	r2,32
   8e220:	0007883a 	mov	r3,zero
   8e224:	00000506 	br	8e23c <__clzsi2+0x30>
   8e228:	00804034 	movhi	r2,256
   8e22c:	10bfffc4 	addi	r2,r2,-1
   8e230:	11000c2e 	bgeu	r2,r4,8e264 <__clzsi2+0x58>
   8e234:	00800204 	movi	r2,8
   8e238:	00c00604 	movi	r3,24
   8e23c:	20c8d83a 	srl	r4,r4,r3
   8e240:	00c00274 	movhi	r3,9
   8e244:	18c41d04 	addi	r3,r3,4212
   8e248:	1909883a 	add	r4,r3,r4
   8e24c:	20c00003 	ldbu	r3,0(r4)
   8e250:	10c5c83a 	sub	r2,r2,r3
   8e254:	f800283a 	ret
   8e258:	00800604 	movi	r2,24
   8e25c:	00c00204 	movi	r3,8
   8e260:	003ff606 	br	8e23c <__alt_data_end+0xfffac7bc>
   8e264:	00800404 	movi	r2,16
   8e268:	1007883a 	mov	r3,r2
   8e26c:	003ff306 	br	8e23c <__alt_data_end+0xfffac7bc>

0008e270 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e270:	defffe04 	addi	sp,sp,-8
   8e274:	dfc00115 	stw	ra,4(sp)
   8e278:	df000015 	stw	fp,0(sp)
   8e27c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e280:	d0a00b17 	ldw	r2,-32724(gp)
   8e284:	10000326 	beq	r2,zero,8e294 <alt_get_errno+0x24>
   8e288:	d0a00b17 	ldw	r2,-32724(gp)
   8e28c:	103ee83a 	callr	r2
   8e290:	00000106 	br	8e298 <alt_get_errno+0x28>
   8e294:	d0a75304 	addi	r2,gp,-25268
}
   8e298:	e037883a 	mov	sp,fp
   8e29c:	dfc00117 	ldw	ra,4(sp)
   8e2a0:	df000017 	ldw	fp,0(sp)
   8e2a4:	dec00204 	addi	sp,sp,8
   8e2a8:	f800283a 	ret

0008e2ac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8e2ac:	defffb04 	addi	sp,sp,-20
   8e2b0:	dfc00415 	stw	ra,16(sp)
   8e2b4:	df000315 	stw	fp,12(sp)
   8e2b8:	df000304 	addi	fp,sp,12
   8e2bc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8e2c0:	e0bfff17 	ldw	r2,-4(fp)
   8e2c4:	10000616 	blt	r2,zero,8e2e0 <close+0x34>
   8e2c8:	e0bfff17 	ldw	r2,-4(fp)
   8e2cc:	10c00324 	muli	r3,r2,12
   8e2d0:	00800274 	movhi	r2,9
   8e2d4:	10872204 	addi	r2,r2,7304
   8e2d8:	1885883a 	add	r2,r3,r2
   8e2dc:	00000106 	br	8e2e4 <close+0x38>
   8e2e0:	0005883a 	mov	r2,zero
   8e2e4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   8e2e8:	e0bffd17 	ldw	r2,-12(fp)
   8e2ec:	10001926 	beq	r2,zero,8e354 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8e2f0:	e0bffd17 	ldw	r2,-12(fp)
   8e2f4:	10800017 	ldw	r2,0(r2)
   8e2f8:	10800417 	ldw	r2,16(r2)
   8e2fc:	10000626 	beq	r2,zero,8e318 <close+0x6c>
   8e300:	e0bffd17 	ldw	r2,-12(fp)
   8e304:	10800017 	ldw	r2,0(r2)
   8e308:	10800417 	ldw	r2,16(r2)
   8e30c:	e13ffd17 	ldw	r4,-12(fp)
   8e310:	103ee83a 	callr	r2
   8e314:	00000106 	br	8e31c <close+0x70>
   8e318:	0005883a 	mov	r2,zero
   8e31c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8e320:	e13fff17 	ldw	r4,-4(fp)
   8e324:	008ef800 	call	8ef80 <alt_release_fd>
    if (rval < 0)
   8e328:	e0bffe17 	ldw	r2,-8(fp)
   8e32c:	1000070e 	bge	r2,zero,8e34c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   8e330:	008e2700 	call	8e270 <alt_get_errno>
   8e334:	1007883a 	mov	r3,r2
   8e338:	e0bffe17 	ldw	r2,-8(fp)
   8e33c:	0085c83a 	sub	r2,zero,r2
   8e340:	18800015 	stw	r2,0(r3)
      return -1;
   8e344:	00bfffc4 	movi	r2,-1
   8e348:	00000706 	br	8e368 <close+0xbc>
    }
    return 0;
   8e34c:	0005883a 	mov	r2,zero
   8e350:	00000506 	br	8e368 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e354:	008e2700 	call	8e270 <alt_get_errno>
   8e358:	1007883a 	mov	r3,r2
   8e35c:	00801444 	movi	r2,81
   8e360:	18800015 	stw	r2,0(r3)
    return -1;
   8e364:	00bfffc4 	movi	r2,-1
  }
}
   8e368:	e037883a 	mov	sp,fp
   8e36c:	dfc00117 	ldw	ra,4(sp)
   8e370:	df000017 	ldw	fp,0(sp)
   8e374:	dec00204 	addi	sp,sp,8
   8e378:	f800283a 	ret

0008e37c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8e37c:	defffc04 	addi	sp,sp,-16
   8e380:	df000315 	stw	fp,12(sp)
   8e384:	df000304 	addi	fp,sp,12
   8e388:	e13ffd15 	stw	r4,-12(fp)
   8e38c:	e17ffe15 	stw	r5,-8(fp)
   8e390:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8e394:	e0bfff17 	ldw	r2,-4(fp)
}
   8e398:	e037883a 	mov	sp,fp
   8e39c:	df000017 	ldw	fp,0(sp)
   8e3a0:	dec00104 	addi	sp,sp,4
   8e3a4:	f800283a 	ret

0008e3a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e3a8:	defffe04 	addi	sp,sp,-8
   8e3ac:	dfc00115 	stw	ra,4(sp)
   8e3b0:	df000015 	stw	fp,0(sp)
   8e3b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e3b8:	d0a00b17 	ldw	r2,-32724(gp)
   8e3bc:	10000326 	beq	r2,zero,8e3cc <alt_get_errno+0x24>
   8e3c0:	d0a00b17 	ldw	r2,-32724(gp)
   8e3c4:	103ee83a 	callr	r2
   8e3c8:	00000106 	br	8e3d0 <alt_get_errno+0x28>
   8e3cc:	d0a75304 	addi	r2,gp,-25268
}
   8e3d0:	e037883a 	mov	sp,fp
   8e3d4:	dfc00117 	ldw	ra,4(sp)
   8e3d8:	df000017 	ldw	fp,0(sp)
   8e3dc:	dec00204 	addi	sp,sp,8
   8e3e0:	f800283a 	ret

0008e3e4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8e3e4:	defffb04 	addi	sp,sp,-20
   8e3e8:	dfc00415 	stw	ra,16(sp)
   8e3ec:	df000315 	stw	fp,12(sp)
   8e3f0:	df000304 	addi	fp,sp,12
   8e3f4:	e13ffe15 	stw	r4,-8(fp)
   8e3f8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e3fc:	e0bffe17 	ldw	r2,-8(fp)
   8e400:	10000616 	blt	r2,zero,8e41c <fstat+0x38>
   8e404:	e0bffe17 	ldw	r2,-8(fp)
   8e408:	10c00324 	muli	r3,r2,12
   8e40c:	00800274 	movhi	r2,9
   8e410:	10872204 	addi	r2,r2,7304
   8e414:	1885883a 	add	r2,r3,r2
   8e418:	00000106 	br	8e420 <fstat+0x3c>
   8e41c:	0005883a 	mov	r2,zero
   8e420:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   8e424:	e0bffd17 	ldw	r2,-12(fp)
   8e428:	10001026 	beq	r2,zero,8e46c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8e42c:	e0bffd17 	ldw	r2,-12(fp)
   8e430:	10800017 	ldw	r2,0(r2)
   8e434:	10800817 	ldw	r2,32(r2)
   8e438:	10000726 	beq	r2,zero,8e458 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   8e43c:	e0bffd17 	ldw	r2,-12(fp)
   8e440:	10800017 	ldw	r2,0(r2)
   8e444:	10800817 	ldw	r2,32(r2)
   8e448:	e17fff17 	ldw	r5,-4(fp)
   8e44c:	e13ffd17 	ldw	r4,-12(fp)
   8e450:	103ee83a 	callr	r2
   8e454:	00000a06 	br	8e480 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8e458:	e0bfff17 	ldw	r2,-4(fp)
   8e45c:	00c80004 	movi	r3,8192
   8e460:	10c00115 	stw	r3,4(r2)
      return 0;
   8e464:	0005883a 	mov	r2,zero
   8e468:	00000506 	br	8e480 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e46c:	008e3a80 	call	8e3a8 <alt_get_errno>
   8e470:	1007883a 	mov	r3,r2
   8e474:	00801444 	movi	r2,81
   8e478:	18800015 	stw	r2,0(r3)
    return -1;
   8e47c:	00bfffc4 	movi	r2,-1
  }
}
   8e480:	e037883a 	mov	sp,fp
   8e484:	dfc00117 	ldw	ra,4(sp)
   8e488:	df000017 	ldw	fp,0(sp)
   8e48c:	dec00204 	addi	sp,sp,8
   8e490:	f800283a 	ret

0008e494 <gettimeofday>:
   8e494:	defff404 	addi	sp,sp,-48
   8e498:	dfc00b15 	stw	ra,44(sp)
   8e49c:	df000a15 	stw	fp,40(sp)
   8e4a0:	dd000915 	stw	r20,36(sp)
   8e4a4:	dcc00815 	stw	r19,32(sp)
   8e4a8:	dc800715 	stw	r18,28(sp)
   8e4ac:	dc400615 	stw	r17,24(sp)
   8e4b0:	dc000515 	stw	r16,20(sp)
   8e4b4:	df000a04 	addi	fp,sp,40
   8e4b8:	e13ff915 	stw	r4,-28(fp)
   8e4bc:	e17ffa15 	stw	r5,-24(fp)
   8e4c0:	e0bffa17 	ldw	r2,-24(fp)
   8e4c4:	e0bff615 	stw	r2,-40(fp)
   8e4c8:	d0a76317 	ldw	r2,-25204(gp)
   8e4cc:	e0bff715 	stw	r2,-36(fp)
   8e4d0:	d0a76217 	ldw	r2,-25208(gp)
   8e4d4:	e0bff815 	stw	r2,-32(fp)
   8e4d8:	e0bff817 	ldw	r2,-32(fp)
   8e4dc:	10005f26 	beq	r2,zero,8e65c <gettimeofday+0x1c8>
   8e4e0:	d0a75c17 	ldw	r2,-25232(gp)
   8e4e4:	1029883a 	mov	r20,r2
   8e4e8:	e17ff817 	ldw	r5,-32(fp)
   8e4ec:	e13ff717 	ldw	r4,-36(fp)
   8e4f0:	00818c00 	call	818c0 <__udivsi3>
   8e4f4:	a085883a 	add	r2,r20,r2
   8e4f8:	1007883a 	mov	r3,r2
   8e4fc:	e0bff917 	ldw	r2,-28(fp)
   8e500:	10c00015 	stw	r3,0(r2)
   8e504:	d0a75d17 	ldw	r2,-25228(gp)
   8e508:	1029883a 	mov	r20,r2
   8e50c:	e0bff717 	ldw	r2,-36(fp)
   8e510:	1021883a 	mov	r16,r2
   8e514:	0023883a 	mov	r17,zero
   8e518:	e17ff817 	ldw	r5,-32(fp)
   8e51c:	010003f4 	movhi	r4,15
   8e520:	21109004 	addi	r4,r4,16960
   8e524:	00818c00 	call	818c0 <__udivsi3>
   8e528:	1025883a 	mov	r18,r2
   8e52c:	0027883a 	mov	r19,zero
   8e530:	900d883a 	mov	r6,r18
   8e534:	980f883a 	mov	r7,r19
   8e538:	8009883a 	mov	r4,r16
   8e53c:	880b883a 	mov	r5,r17
   8e540:	008b0f80 	call	8b0f8 <__muldi3>
   8e544:	1009883a 	mov	r4,r2
   8e548:	180b883a 	mov	r5,r3
   8e54c:	2005883a 	mov	r2,r4
   8e550:	2807883a 	mov	r3,r5
   8e554:	018003f4 	movhi	r6,15
   8e558:	31909004 	addi	r6,r6,16960
   8e55c:	000f883a 	mov	r7,zero
   8e560:	1009883a 	mov	r4,r2
   8e564:	180b883a 	mov	r5,r3
   8e568:	008b6d00 	call	8b6d0 <__umoddi3>
   8e56c:	1009883a 	mov	r4,r2
   8e570:	180b883a 	mov	r5,r3
   8e574:	2005883a 	mov	r2,r4
   8e578:	2807883a 	mov	r3,r5
   8e57c:	a085883a 	add	r2,r20,r2
   8e580:	1007883a 	mov	r3,r2
   8e584:	e0bff917 	ldw	r2,-28(fp)
   8e588:	10c00115 	stw	r3,4(r2)
   8e58c:	00001406 	br	8e5e0 <gettimeofday+0x14c>
   8e590:	e0bff917 	ldw	r2,-28(fp)
   8e594:	10800017 	ldw	r2,0(r2)
   8e598:	00800516 	blt	zero,r2,8e5b0 <gettimeofday+0x11c>
   8e59c:	e0bff917 	ldw	r2,-28(fp)
   8e5a0:	10000015 	stw	zero,0(r2)
   8e5a4:	e0bff917 	ldw	r2,-28(fp)
   8e5a8:	10000115 	stw	zero,4(r2)
   8e5ac:	00000f06 	br	8e5ec <gettimeofday+0x158>
   8e5b0:	e0bff917 	ldw	r2,-28(fp)
   8e5b4:	10800017 	ldw	r2,0(r2)
   8e5b8:	10ffffc4 	addi	r3,r2,-1
   8e5bc:	e0bff917 	ldw	r2,-28(fp)
   8e5c0:	10c00015 	stw	r3,0(r2)
   8e5c4:	e0bff917 	ldw	r2,-28(fp)
   8e5c8:	10c00117 	ldw	r3,4(r2)
   8e5cc:	008003f4 	movhi	r2,15
   8e5d0:	10909004 	addi	r2,r2,16960
   8e5d4:	1887883a 	add	r3,r3,r2
   8e5d8:	e0bff917 	ldw	r2,-28(fp)
   8e5dc:	10c00115 	stw	r3,4(r2)
   8e5e0:	e0bff917 	ldw	r2,-28(fp)
   8e5e4:	10800117 	ldw	r2,4(r2)
   8e5e8:	103fe916 	blt	r2,zero,8e590 <__alt_data_end+0xfffacb10>
   8e5ec:	00000c06 	br	8e620 <gettimeofday+0x18c>
   8e5f0:	e0bff917 	ldw	r2,-28(fp)
   8e5f4:	10800017 	ldw	r2,0(r2)
   8e5f8:	10c00044 	addi	r3,r2,1
   8e5fc:	e0bff917 	ldw	r2,-28(fp)
   8e600:	10c00015 	stw	r3,0(r2)
   8e604:	e0bff917 	ldw	r2,-28(fp)
   8e608:	10c00117 	ldw	r3,4(r2)
   8e60c:	00bffc74 	movhi	r2,65521
   8e610:	10af7004 	addi	r2,r2,-16960
   8e614:	1887883a 	add	r3,r3,r2
   8e618:	e0bff917 	ldw	r2,-28(fp)
   8e61c:	10c00115 	stw	r3,4(r2)
   8e620:	e0bff917 	ldw	r2,-28(fp)
   8e624:	10c00117 	ldw	r3,4(r2)
   8e628:	008003f4 	movhi	r2,15
   8e62c:	10908fc4 	addi	r2,r2,16959
   8e630:	10ffef16 	blt	r2,r3,8e5f0 <__alt_data_end+0xfffacb70>
   8e634:	e0bff617 	ldw	r2,-40(fp)
   8e638:	10000626 	beq	r2,zero,8e654 <gettimeofday+0x1c0>
   8e63c:	d0e75a17 	ldw	r3,-25240(gp)
   8e640:	e0bff617 	ldw	r2,-40(fp)
   8e644:	10c00015 	stw	r3,0(r2)
   8e648:	d0e75b17 	ldw	r3,-25236(gp)
   8e64c:	e0bff617 	ldw	r2,-40(fp)
   8e650:	10c00115 	stw	r3,4(r2)
   8e654:	0005883a 	mov	r2,zero
   8e658:	00000106 	br	8e660 <gettimeofday+0x1cc>
   8e65c:	00bfde84 	movi	r2,-134
   8e660:	e6fffb04 	addi	sp,fp,-20
   8e664:	dfc00617 	ldw	ra,24(sp)
   8e668:	df000517 	ldw	fp,20(sp)
   8e66c:	dd000417 	ldw	r20,16(sp)
   8e670:	dcc00317 	ldw	r19,12(sp)
   8e674:	dc800217 	ldw	r18,8(sp)
   8e678:	dc400117 	ldw	r17,4(sp)
   8e67c:	dc000017 	ldw	r16,0(sp)
   8e680:	dec00704 	addi	sp,sp,28
   8e684:	f800283a 	ret

0008e688 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8e688:	defff904 	addi	sp,sp,-28
   8e68c:	dfc00615 	stw	ra,24(sp)
   8e690:	df000515 	stw	fp,20(sp)
   8e694:	df000504 	addi	fp,sp,20
   8e698:	e13ffc15 	stw	r4,-16(fp)
   8e69c:	e17ffd15 	stw	r5,-12(fp)
   8e6a0:	e1bffe15 	stw	r6,-8(fp)
   8e6a4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8e6a8:	e0800217 	ldw	r2,8(fp)
   8e6ac:	d8800015 	stw	r2,0(sp)
   8e6b0:	e1ffff17 	ldw	r7,-4(fp)
   8e6b4:	e1bffe17 	ldw	r6,-8(fp)
   8e6b8:	e17ffd17 	ldw	r5,-12(fp)
   8e6bc:	e13ffc17 	ldw	r4,-16(fp)
   8e6c0:	008e8380 	call	8e838 <alt_iic_isr_register>
}  
   8e6c4:	e037883a 	mov	sp,fp
   8e6c8:	dfc00117 	ldw	ra,4(sp)
   8e6cc:	df000017 	ldw	fp,0(sp)
   8e6d0:	dec00204 	addi	sp,sp,8
   8e6d4:	f800283a 	ret

0008e6d8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8e6d8:	defff904 	addi	sp,sp,-28
   8e6dc:	df000615 	stw	fp,24(sp)
   8e6e0:	df000604 	addi	fp,sp,24
   8e6e4:	e13ffe15 	stw	r4,-8(fp)
   8e6e8:	e17fff15 	stw	r5,-4(fp)
   8e6ec:	e0bfff17 	ldw	r2,-4(fp)
   8e6f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e6f4:	0005303a 	rdctl	r2,status
   8e6f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e6fc:	e0fffb17 	ldw	r3,-20(fp)
   8e700:	00bfff84 	movi	r2,-2
   8e704:	1884703a 	and	r2,r3,r2
   8e708:	1001703a 	wrctl	status,r2
  
  return context;
   8e70c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8e710:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   8e714:	00c00044 	movi	r3,1
   8e718:	e0bffa17 	ldw	r2,-24(fp)
   8e71c:	1884983a 	sll	r2,r3,r2
   8e720:	1007883a 	mov	r3,r2
   8e724:	d0a75e17 	ldw	r2,-25224(gp)
   8e728:	1884b03a 	or	r2,r3,r2
   8e72c:	d0a75e15 	stw	r2,-25224(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8e730:	d0a75e17 	ldw	r2,-25224(gp)
   8e734:	100170fa 	wrctl	ienable,r2
   8e738:	e0bffc17 	ldw	r2,-16(fp)
   8e73c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e740:	e0bffd17 	ldw	r2,-12(fp)
   8e744:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8e748:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   8e74c:	0001883a 	nop
}
   8e750:	e037883a 	mov	sp,fp
   8e754:	df000017 	ldw	fp,0(sp)
   8e758:	dec00104 	addi	sp,sp,4
   8e75c:	f800283a 	ret

0008e760 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8e760:	defff904 	addi	sp,sp,-28
   8e764:	df000615 	stw	fp,24(sp)
   8e768:	df000604 	addi	fp,sp,24
   8e76c:	e13ffe15 	stw	r4,-8(fp)
   8e770:	e17fff15 	stw	r5,-4(fp)
   8e774:	e0bfff17 	ldw	r2,-4(fp)
   8e778:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e77c:	0005303a 	rdctl	r2,status
   8e780:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e784:	e0fffb17 	ldw	r3,-20(fp)
   8e788:	00bfff84 	movi	r2,-2
   8e78c:	1884703a 	and	r2,r3,r2
   8e790:	1001703a 	wrctl	status,r2
  
  return context;
   8e794:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8e798:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   8e79c:	00c00044 	movi	r3,1
   8e7a0:	e0bffa17 	ldw	r2,-24(fp)
   8e7a4:	1884983a 	sll	r2,r3,r2
   8e7a8:	0084303a 	nor	r2,zero,r2
   8e7ac:	1007883a 	mov	r3,r2
   8e7b0:	d0a75e17 	ldw	r2,-25224(gp)
   8e7b4:	1884703a 	and	r2,r3,r2
   8e7b8:	d0a75e15 	stw	r2,-25224(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8e7bc:	d0a75e17 	ldw	r2,-25224(gp)
   8e7c0:	100170fa 	wrctl	ienable,r2
   8e7c4:	e0bffc17 	ldw	r2,-16(fp)
   8e7c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e7cc:	e0bffd17 	ldw	r2,-12(fp)
   8e7d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8e7d4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   8e7d8:	0001883a 	nop
}
   8e7dc:	e037883a 	mov	sp,fp
   8e7e0:	df000017 	ldw	fp,0(sp)
   8e7e4:	dec00104 	addi	sp,sp,4
   8e7e8:	f800283a 	ret

0008e7ec <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8e7ec:	defffc04 	addi	sp,sp,-16
   8e7f0:	df000315 	stw	fp,12(sp)
   8e7f4:	df000304 	addi	fp,sp,12
   8e7f8:	e13ffe15 	stw	r4,-8(fp)
   8e7fc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8e800:	000530fa 	rdctl	r2,ienable
   8e804:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8e808:	00c00044 	movi	r3,1
   8e80c:	e0bfff17 	ldw	r2,-4(fp)
   8e810:	1884983a 	sll	r2,r3,r2
   8e814:	1007883a 	mov	r3,r2
   8e818:	e0bffd17 	ldw	r2,-12(fp)
   8e81c:	1884703a 	and	r2,r3,r2
   8e820:	1004c03a 	cmpne	r2,r2,zero
   8e824:	10803fcc 	andi	r2,r2,255
}
   8e828:	e037883a 	mov	sp,fp
   8e82c:	df000017 	ldw	fp,0(sp)
   8e830:	dec00104 	addi	sp,sp,4
   8e834:	f800283a 	ret

0008e838 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8e838:	defff504 	addi	sp,sp,-44
   8e83c:	dfc00a15 	stw	ra,40(sp)
   8e840:	df000915 	stw	fp,36(sp)
   8e844:	df000904 	addi	fp,sp,36
   8e848:	e13ffc15 	stw	r4,-16(fp)
   8e84c:	e17ffd15 	stw	r5,-12(fp)
   8e850:	e1bffe15 	stw	r6,-8(fp)
   8e854:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   8e858:	00bffa84 	movi	r2,-22
   8e85c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8e860:	e0bffd17 	ldw	r2,-12(fp)
   8e864:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8e868:	e0bff817 	ldw	r2,-32(fp)
   8e86c:	10800808 	cmpgei	r2,r2,32
   8e870:	1000271e 	bne	r2,zero,8e910 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e874:	0005303a 	rdctl	r2,status
   8e878:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e87c:	e0fffb17 	ldw	r3,-20(fp)
   8e880:	00bfff84 	movi	r2,-2
   8e884:	1884703a 	and	r2,r3,r2
   8e888:	1001703a 	wrctl	status,r2
  
  return context;
   8e88c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8e890:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   8e894:	00800274 	movhi	r2,9
   8e898:	10934504 	addi	r2,r2,19732
   8e89c:	e0fff817 	ldw	r3,-32(fp)
   8e8a0:	180690fa 	slli	r3,r3,3
   8e8a4:	10c5883a 	add	r2,r2,r3
   8e8a8:	e0fffe17 	ldw	r3,-8(fp)
   8e8ac:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   8e8b0:	00800274 	movhi	r2,9
   8e8b4:	10934504 	addi	r2,r2,19732
   8e8b8:	e0fff817 	ldw	r3,-32(fp)
   8e8bc:	180690fa 	slli	r3,r3,3
   8e8c0:	10c5883a 	add	r2,r2,r3
   8e8c4:	10800104 	addi	r2,r2,4
   8e8c8:	e0ffff17 	ldw	r3,-4(fp)
   8e8cc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8e8d0:	e0bffe17 	ldw	r2,-8(fp)
   8e8d4:	10000526 	beq	r2,zero,8e8ec <alt_iic_isr_register+0xb4>
   8e8d8:	e0bff817 	ldw	r2,-32(fp)
   8e8dc:	100b883a 	mov	r5,r2
   8e8e0:	e13ffc17 	ldw	r4,-16(fp)
   8e8e4:	008e6d80 	call	8e6d8 <alt_ic_irq_enable>
   8e8e8:	00000406 	br	8e8fc <alt_iic_isr_register+0xc4>
   8e8ec:	e0bff817 	ldw	r2,-32(fp)
   8e8f0:	100b883a 	mov	r5,r2
   8e8f4:	e13ffc17 	ldw	r4,-16(fp)
   8e8f8:	008e7600 	call	8e760 <alt_ic_irq_disable>
   8e8fc:	e0bff715 	stw	r2,-36(fp)
   8e900:	e0bffa17 	ldw	r2,-24(fp)
   8e904:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e908:	e0bff917 	ldw	r2,-28(fp)
   8e90c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8e910:	e0bff717 	ldw	r2,-36(fp)
}
   8e914:	e037883a 	mov	sp,fp
   8e918:	dfc00117 	ldw	ra,4(sp)
   8e91c:	df000017 	ldw	fp,0(sp)
   8e920:	dec00204 	addi	sp,sp,8
   8e924:	f800283a 	ret

0008e928 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   8e928:	defff004 	addi	sp,sp,-64
   8e92c:	df000f15 	stw	fp,60(sp)
   8e930:	df000f04 	addi	fp,sp,60
   8e934:	e13ffd15 	stw	r4,-12(fp)
   8e938:	e17ffe15 	stw	r5,-8(fp)
   8e93c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   8e940:	00bffa84 	movi	r2,-22
   8e944:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8e948:	e0bffd17 	ldw	r2,-12(fp)
   8e94c:	10800828 	cmpgeui	r2,r2,32
   8e950:	1000501e 	bne	r2,zero,8ea94 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e954:	0005303a 	rdctl	r2,status
   8e958:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e95c:	e0fff617 	ldw	r3,-40(fp)
   8e960:	00bfff84 	movi	r2,-2
   8e964:	1884703a 	and	r2,r3,r2
   8e968:	1001703a 	wrctl	status,r2
  
  return context;
   8e96c:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   8e970:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   8e974:	00800274 	movhi	r2,9
   8e978:	10934504 	addi	r2,r2,19732
   8e97c:	e0fffd17 	ldw	r3,-12(fp)
   8e980:	180690fa 	slli	r3,r3,3
   8e984:	10c5883a 	add	r2,r2,r3
   8e988:	e0ffff17 	ldw	r3,-4(fp)
   8e98c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   8e990:	00800274 	movhi	r2,9
   8e994:	10934504 	addi	r2,r2,19732
   8e998:	e0fffd17 	ldw	r3,-12(fp)
   8e99c:	180690fa 	slli	r3,r3,3
   8e9a0:	10c5883a 	add	r2,r2,r3
   8e9a4:	10800104 	addi	r2,r2,4
   8e9a8:	e0fffe17 	ldw	r3,-8(fp)
   8e9ac:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   8e9b0:	e0bfff17 	ldw	r2,-4(fp)
   8e9b4:	10001926 	beq	r2,zero,8ea1c <alt_irq_register+0xf4>
   8e9b8:	e0bffd17 	ldw	r2,-12(fp)
   8e9bc:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e9c0:	0005303a 	rdctl	r2,status
   8e9c4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e9c8:	e0fff717 	ldw	r3,-36(fp)
   8e9cc:	00bfff84 	movi	r2,-2
   8e9d0:	1884703a 	and	r2,r3,r2
   8e9d4:	1001703a 	wrctl	status,r2
  
  return context;
   8e9d8:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8e9dc:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   8e9e0:	00c00044 	movi	r3,1
   8e9e4:	e0bff217 	ldw	r2,-56(fp)
   8e9e8:	1884983a 	sll	r2,r3,r2
   8e9ec:	1007883a 	mov	r3,r2
   8e9f0:	d0a75e17 	ldw	r2,-25224(gp)
   8e9f4:	1884b03a 	or	r2,r3,r2
   8e9f8:	d0a75e15 	stw	r2,-25224(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8e9fc:	d0a75e17 	ldw	r2,-25224(gp)
   8ea00:	100170fa 	wrctl	ienable,r2
   8ea04:	e0bff817 	ldw	r2,-32(fp)
   8ea08:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ea0c:	e0bff917 	ldw	r2,-28(fp)
   8ea10:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8ea14:	0005883a 	mov	r2,zero
   8ea18:	00001906 	br	8ea80 <alt_irq_register+0x158>
   8ea1c:	e0bffd17 	ldw	r2,-12(fp)
   8ea20:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ea24:	0005303a 	rdctl	r2,status
   8ea28:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ea2c:	e0fffa17 	ldw	r3,-24(fp)
   8ea30:	00bfff84 	movi	r2,-2
   8ea34:	1884703a 	and	r2,r3,r2
   8ea38:	1001703a 	wrctl	status,r2
  
  return context;
   8ea3c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8ea40:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   8ea44:	00c00044 	movi	r3,1
   8ea48:	e0bff417 	ldw	r2,-48(fp)
   8ea4c:	1884983a 	sll	r2,r3,r2
   8ea50:	0084303a 	nor	r2,zero,r2
   8ea54:	1007883a 	mov	r3,r2
   8ea58:	d0a75e17 	ldw	r2,-25224(gp)
   8ea5c:	1884703a 	and	r2,r3,r2
   8ea60:	d0a75e15 	stw	r2,-25224(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8ea64:	d0a75e17 	ldw	r2,-25224(gp)
   8ea68:	100170fa 	wrctl	ienable,r2
   8ea6c:	e0bffb17 	ldw	r2,-20(fp)
   8ea70:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ea74:	e0bffc17 	ldw	r2,-16(fp)
   8ea78:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8ea7c:	0005883a 	mov	r2,zero
   8ea80:	e0bff115 	stw	r2,-60(fp)
   8ea84:	e0bff317 	ldw	r2,-52(fp)
   8ea88:	e0bff515 	stw	r2,-44(fp)
   8ea8c:	e0bff517 	ldw	r2,-44(fp)
   8ea90:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   8ea94:	e0bff117 	ldw	r2,-60(fp)
}
   8ea98:	e037883a 	mov	sp,fp
   8ea9c:	df000017 	ldw	fp,0(sp)
   8eaa0:	dec00104 	addi	sp,sp,4
   8eaa4:	f800283a 	ret

0008eaa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8eaa8:	defffe04 	addi	sp,sp,-8
   8eaac:	dfc00115 	stw	ra,4(sp)
   8eab0:	df000015 	stw	fp,0(sp)
   8eab4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8eab8:	d0a00b17 	ldw	r2,-32724(gp)
   8eabc:	10000326 	beq	r2,zero,8eacc <alt_get_errno+0x24>
   8eac0:	d0a00b17 	ldw	r2,-32724(gp)
   8eac4:	103ee83a 	callr	r2
   8eac8:	00000106 	br	8ead0 <alt_get_errno+0x28>
   8eacc:	d0a75304 	addi	r2,gp,-25268
}
   8ead0:	e037883a 	mov	sp,fp
   8ead4:	dfc00117 	ldw	ra,4(sp)
   8ead8:	df000017 	ldw	fp,0(sp)
   8eadc:	dec00204 	addi	sp,sp,8
   8eae0:	f800283a 	ret

0008eae4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8eae4:	deffed04 	addi	sp,sp,-76
   8eae8:	dfc01215 	stw	ra,72(sp)
   8eaec:	df001115 	stw	fp,68(sp)
   8eaf0:	df001104 	addi	fp,sp,68
   8eaf4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8eaf8:	e0bfff17 	ldw	r2,-4(fp)
   8eafc:	10000616 	blt	r2,zero,8eb18 <isatty+0x34>
   8eb00:	e0bfff17 	ldw	r2,-4(fp)
   8eb04:	10c00324 	muli	r3,r2,12
   8eb08:	00800274 	movhi	r2,9
   8eb0c:	10872204 	addi	r2,r2,7304
   8eb10:	1885883a 	add	r2,r3,r2
   8eb14:	00000106 	br	8eb1c <isatty+0x38>
   8eb18:	0005883a 	mov	r2,zero
   8eb1c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   8eb20:	e0bfef17 	ldw	r2,-68(fp)
   8eb24:	10000e26 	beq	r2,zero,8eb60 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8eb28:	e0bfef17 	ldw	r2,-68(fp)
   8eb2c:	10800017 	ldw	r2,0(r2)
   8eb30:	10800817 	ldw	r2,32(r2)
   8eb34:	1000021e 	bne	r2,zero,8eb40 <isatty+0x5c>
    {
      return 1;
   8eb38:	00800044 	movi	r2,1
   8eb3c:	00000d06 	br	8eb74 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8eb40:	e0bff004 	addi	r2,fp,-64
   8eb44:	100b883a 	mov	r5,r2
   8eb48:	e13fff17 	ldw	r4,-4(fp)
   8eb4c:	008e3e40 	call	8e3e4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8eb50:	e0bff117 	ldw	r2,-60(fp)
   8eb54:	10880020 	cmpeqi	r2,r2,8192
   8eb58:	10803fcc 	andi	r2,r2,255
   8eb5c:	00000506 	br	8eb74 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8eb60:	008eaa80 	call	8eaa8 <alt_get_errno>
   8eb64:	1007883a 	mov	r3,r2
   8eb68:	00801444 	movi	r2,81
   8eb6c:	18800015 	stw	r2,0(r3)
    return 0;
   8eb70:	0005883a 	mov	r2,zero
  }
}
   8eb74:	e037883a 	mov	sp,fp
   8eb78:	dfc00117 	ldw	ra,4(sp)
   8eb7c:	df000017 	ldw	fp,0(sp)
   8eb80:	dec00204 	addi	sp,sp,8
   8eb84:	f800283a 	ret

0008eb88 <alt_load_section>:
   8eb88:	defffc04 	addi	sp,sp,-16
   8eb8c:	df000315 	stw	fp,12(sp)
   8eb90:	df000304 	addi	fp,sp,12
   8eb94:	e13ffd15 	stw	r4,-12(fp)
   8eb98:	e17ffe15 	stw	r5,-8(fp)
   8eb9c:	e1bfff15 	stw	r6,-4(fp)
   8eba0:	e0fffe17 	ldw	r3,-8(fp)
   8eba4:	e0bffd17 	ldw	r2,-12(fp)
   8eba8:	18800c26 	beq	r3,r2,8ebdc <alt_load_section+0x54>
   8ebac:	00000806 	br	8ebd0 <alt_load_section+0x48>
   8ebb0:	e0bffe17 	ldw	r2,-8(fp)
   8ebb4:	10c00104 	addi	r3,r2,4
   8ebb8:	e0fffe15 	stw	r3,-8(fp)
   8ebbc:	e0fffd17 	ldw	r3,-12(fp)
   8ebc0:	19000104 	addi	r4,r3,4
   8ebc4:	e13ffd15 	stw	r4,-12(fp)
   8ebc8:	18c00017 	ldw	r3,0(r3)
   8ebcc:	10c00015 	stw	r3,0(r2)
   8ebd0:	e0fffe17 	ldw	r3,-8(fp)
   8ebd4:	e0bfff17 	ldw	r2,-4(fp)
   8ebd8:	18bff51e 	bne	r3,r2,8ebb0 <__alt_data_end+0xfffad130>
   8ebdc:	0001883a 	nop
   8ebe0:	e037883a 	mov	sp,fp
   8ebe4:	df000017 	ldw	fp,0(sp)
   8ebe8:	dec00104 	addi	sp,sp,4
   8ebec:	f800283a 	ret

0008ebf0 <alt_load>:
   8ebf0:	defffe04 	addi	sp,sp,-8
   8ebf4:	dfc00115 	stw	ra,4(sp)
   8ebf8:	df000015 	stw	fp,0(sp)
   8ebfc:	d839883a 	mov	fp,sp
   8ec00:	01800274 	movhi	r6,9
   8ec04:	318baa04 	addi	r6,r6,11944
   8ec08:	01400274 	movhi	r5,9
   8ec0c:	29446804 	addi	r5,r5,4512
   8ec10:	01000274 	movhi	r4,9
   8ec14:	210baa04 	addi	r4,r4,11944
   8ec18:	008eb880 	call	8eb88 <alt_load_section>
   8ec1c:	01800234 	movhi	r6,8
   8ec20:	31809104 	addi	r6,r6,580
   8ec24:	01400234 	movhi	r5,8
   8ec28:	29400804 	addi	r5,r5,32
   8ec2c:	01000234 	movhi	r4,8
   8ec30:	21000804 	addi	r4,r4,32
   8ec34:	008eb880 	call	8eb88 <alt_load_section>
   8ec38:	01800274 	movhi	r6,9
   8ec3c:	31846804 	addi	r6,r6,4512
   8ec40:	01400274 	movhi	r5,9
   8ec44:	29436504 	addi	r5,r5,3476
   8ec48:	01000274 	movhi	r4,9
   8ec4c:	21036504 	addi	r4,r4,3476
   8ec50:	008eb880 	call	8eb88 <alt_load_section>
   8ec54:	00900c40 	call	900c4 <alt_dcache_flush_all>
   8ec58:	00902ac0 	call	902ac <alt_icache_flush_all>
   8ec5c:	0001883a 	nop
   8ec60:	e037883a 	mov	sp,fp
   8ec64:	dfc00117 	ldw	ra,4(sp)
   8ec68:	df000017 	ldw	fp,0(sp)
   8ec6c:	dec00204 	addi	sp,sp,8
   8ec70:	f800283a 	ret

0008ec74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ec74:	defffe04 	addi	sp,sp,-8
   8ec78:	dfc00115 	stw	ra,4(sp)
   8ec7c:	df000015 	stw	fp,0(sp)
   8ec80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8ec84:	d0a00b17 	ldw	r2,-32724(gp)
   8ec88:	10000326 	beq	r2,zero,8ec98 <alt_get_errno+0x24>
   8ec8c:	d0a00b17 	ldw	r2,-32724(gp)
   8ec90:	103ee83a 	callr	r2
   8ec94:	00000106 	br	8ec9c <alt_get_errno+0x28>
   8ec98:	d0a75304 	addi	r2,gp,-25268
}
   8ec9c:	e037883a 	mov	sp,fp
   8eca0:	dfc00117 	ldw	ra,4(sp)
   8eca4:	df000017 	ldw	fp,0(sp)
   8eca8:	dec00204 	addi	sp,sp,8
   8ecac:	f800283a 	ret

0008ecb0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8ecb0:	defff904 	addi	sp,sp,-28
   8ecb4:	dfc00615 	stw	ra,24(sp)
   8ecb8:	df000515 	stw	fp,20(sp)
   8ecbc:	df000504 	addi	fp,sp,20
   8ecc0:	e13ffd15 	stw	r4,-12(fp)
   8ecc4:	e17ffe15 	stw	r5,-8(fp)
   8ecc8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8eccc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ecd0:	e0bffd17 	ldw	r2,-12(fp)
   8ecd4:	10000616 	blt	r2,zero,8ecf0 <lseek+0x40>
   8ecd8:	e0bffd17 	ldw	r2,-12(fp)
   8ecdc:	10c00324 	muli	r3,r2,12
   8ece0:	00800274 	movhi	r2,9
   8ece4:	10872204 	addi	r2,r2,7304
   8ece8:	1885883a 	add	r2,r3,r2
   8ecec:	00000106 	br	8ecf4 <lseek+0x44>
   8ecf0:	0005883a 	mov	r2,zero
   8ecf4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   8ecf8:	e0bffc17 	ldw	r2,-16(fp)
   8ecfc:	10001026 	beq	r2,zero,8ed40 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8ed00:	e0bffc17 	ldw	r2,-16(fp)
   8ed04:	10800017 	ldw	r2,0(r2)
   8ed08:	10800717 	ldw	r2,28(r2)
   8ed0c:	10000926 	beq	r2,zero,8ed34 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8ed10:	e0bffc17 	ldw	r2,-16(fp)
   8ed14:	10800017 	ldw	r2,0(r2)
   8ed18:	10800717 	ldw	r2,28(r2)
   8ed1c:	e1bfff17 	ldw	r6,-4(fp)
   8ed20:	e17ffe17 	ldw	r5,-8(fp)
   8ed24:	e13ffc17 	ldw	r4,-16(fp)
   8ed28:	103ee83a 	callr	r2
   8ed2c:	e0bffb15 	stw	r2,-20(fp)
   8ed30:	00000506 	br	8ed48 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8ed34:	00bfde84 	movi	r2,-134
   8ed38:	e0bffb15 	stw	r2,-20(fp)
   8ed3c:	00000206 	br	8ed48 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   8ed40:	00bfebc4 	movi	r2,-81
   8ed44:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   8ed48:	e0bffb17 	ldw	r2,-20(fp)
   8ed4c:	1000070e 	bge	r2,zero,8ed6c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   8ed50:	008ec740 	call	8ec74 <alt_get_errno>
   8ed54:	1007883a 	mov	r3,r2
   8ed58:	e0bffb17 	ldw	r2,-20(fp)
   8ed5c:	0085c83a 	sub	r2,zero,r2
   8ed60:	18800015 	stw	r2,0(r3)
    rc = -1;
   8ed64:	00bfffc4 	movi	r2,-1
   8ed68:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   8ed6c:	e0bffb17 	ldw	r2,-20(fp)
}
   8ed70:	e037883a 	mov	sp,fp
   8ed74:	dfc00117 	ldw	ra,4(sp)
   8ed78:	df000017 	ldw	fp,0(sp)
   8ed7c:	dec00204 	addi	sp,sp,8
   8ed80:	f800283a 	ret

0008ed84 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8ed84:	defffd04 	addi	sp,sp,-12
   8ed88:	dfc00215 	stw	ra,8(sp)
   8ed8c:	df000115 	stw	fp,4(sp)
   8ed90:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8ed94:	0009883a 	mov	r4,zero
   8ed98:	008f3a00 	call	8f3a0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8ed9c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8eda0:	008f3d80 	call	8f3d8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8eda4:	01800274 	movhi	r6,9
   8eda8:	31846004 	addi	r6,r6,4480
   8edac:	01400274 	movhi	r5,9
   8edb0:	29446004 	addi	r5,r5,4480
   8edb4:	01000274 	movhi	r4,9
   8edb8:	21046004 	addi	r4,r4,4480
   8edbc:	00904400 	call	90440 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8edc0:	00901ec0 	call	901ec <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8edc4:	01000274 	movhi	r4,9
   8edc8:	21009304 	addi	r4,r4,588
   8edcc:	0090a000 	call	90a00 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8edd0:	d0a75f17 	ldw	r2,-25220(gp)
   8edd4:	d0e76017 	ldw	r3,-25216(gp)
   8edd8:	d1276117 	ldw	r4,-25212(gp)
   8eddc:	200d883a 	mov	r6,r4
   8ede0:	180b883a 	mov	r5,r3
   8ede4:	1009883a 	mov	r4,r2
   8ede8:	0080a380 	call	80a38 <main>
   8edec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8edf0:	01000044 	movi	r4,1
   8edf4:	008e2ac0 	call	8e2ac <close>
  exit (result);
   8edf8:	e13fff17 	ldw	r4,-4(fp)
   8edfc:	0090a140 	call	90a14 <exit>

0008ee00 <__malloc_lock>:
   8ee00:	defffe04 	addi	sp,sp,-8
   8ee04:	df000115 	stw	fp,4(sp)
   8ee08:	df000104 	addi	fp,sp,4
   8ee0c:	e13fff15 	stw	r4,-4(fp)
   8ee10:	0001883a 	nop
   8ee14:	e037883a 	mov	sp,fp
   8ee18:	df000017 	ldw	fp,0(sp)
   8ee1c:	dec00104 	addi	sp,sp,4
   8ee20:	f800283a 	ret

0008ee24 <__malloc_unlock>:
   8ee24:	defffe04 	addi	sp,sp,-8
   8ee28:	df000115 	stw	fp,4(sp)
   8ee2c:	df000104 	addi	fp,sp,4
   8ee30:	e13fff15 	stw	r4,-4(fp)
   8ee34:	0001883a 	nop
   8ee38:	e037883a 	mov	sp,fp
   8ee3c:	df000017 	ldw	fp,0(sp)
   8ee40:	dec00104 	addi	sp,sp,4
   8ee44:	f800283a 	ret

0008ee48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ee48:	defffe04 	addi	sp,sp,-8
   8ee4c:	dfc00115 	stw	ra,4(sp)
   8ee50:	df000015 	stw	fp,0(sp)
   8ee54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8ee58:	d0a00b17 	ldw	r2,-32724(gp)
   8ee5c:	10000326 	beq	r2,zero,8ee6c <alt_get_errno+0x24>
   8ee60:	d0a00b17 	ldw	r2,-32724(gp)
   8ee64:	103ee83a 	callr	r2
   8ee68:	00000106 	br	8ee70 <alt_get_errno+0x28>
   8ee6c:	d0a75304 	addi	r2,gp,-25268
}
   8ee70:	e037883a 	mov	sp,fp
   8ee74:	dfc00117 	ldw	ra,4(sp)
   8ee78:	df000017 	ldw	fp,0(sp)
   8ee7c:	dec00204 	addi	sp,sp,8
   8ee80:	f800283a 	ret

0008ee84 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8ee84:	defff904 	addi	sp,sp,-28
   8ee88:	dfc00615 	stw	ra,24(sp)
   8ee8c:	df000515 	stw	fp,20(sp)
   8ee90:	df000504 	addi	fp,sp,20
   8ee94:	e13ffd15 	stw	r4,-12(fp)
   8ee98:	e17ffe15 	stw	r5,-8(fp)
   8ee9c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8eea0:	e0bffd17 	ldw	r2,-12(fp)
   8eea4:	10000616 	blt	r2,zero,8eec0 <read+0x3c>
   8eea8:	e0bffd17 	ldw	r2,-12(fp)
   8eeac:	10c00324 	muli	r3,r2,12
   8eeb0:	00800274 	movhi	r2,9
   8eeb4:	10872204 	addi	r2,r2,7304
   8eeb8:	1885883a 	add	r2,r3,r2
   8eebc:	00000106 	br	8eec4 <read+0x40>
   8eec0:	0005883a 	mov	r2,zero
   8eec4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8eec8:	e0bffb17 	ldw	r2,-20(fp)
   8eecc:	10002226 	beq	r2,zero,8ef58 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8eed0:	e0bffb17 	ldw	r2,-20(fp)
   8eed4:	10800217 	ldw	r2,8(r2)
   8eed8:	108000cc 	andi	r2,r2,3
   8eedc:	10800060 	cmpeqi	r2,r2,1
   8eee0:	1000181e 	bne	r2,zero,8ef44 <read+0xc0>
        (fd->dev->read))
   8eee4:	e0bffb17 	ldw	r2,-20(fp)
   8eee8:	10800017 	ldw	r2,0(r2)
   8eeec:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8eef0:	10001426 	beq	r2,zero,8ef44 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8eef4:	e0bffb17 	ldw	r2,-20(fp)
   8eef8:	10800017 	ldw	r2,0(r2)
   8eefc:	10800517 	ldw	r2,20(r2)
   8ef00:	e0ffff17 	ldw	r3,-4(fp)
   8ef04:	180d883a 	mov	r6,r3
   8ef08:	e17ffe17 	ldw	r5,-8(fp)
   8ef0c:	e13ffb17 	ldw	r4,-20(fp)
   8ef10:	103ee83a 	callr	r2
   8ef14:	e0bffc15 	stw	r2,-16(fp)
   8ef18:	e0bffc17 	ldw	r2,-16(fp)
   8ef1c:	1000070e 	bge	r2,zero,8ef3c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   8ef20:	008ee480 	call	8ee48 <alt_get_errno>
   8ef24:	1007883a 	mov	r3,r2
   8ef28:	e0bffc17 	ldw	r2,-16(fp)
   8ef2c:	0085c83a 	sub	r2,zero,r2
   8ef30:	18800015 	stw	r2,0(r3)
          return -1;
   8ef34:	00bfffc4 	movi	r2,-1
   8ef38:	00000c06 	br	8ef6c <read+0xe8>
        }
        return rval;
   8ef3c:	e0bffc17 	ldw	r2,-16(fp)
   8ef40:	00000a06 	br	8ef6c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8ef44:	008ee480 	call	8ee48 <alt_get_errno>
   8ef48:	1007883a 	mov	r3,r2
   8ef4c:	00800344 	movi	r2,13
   8ef50:	18800015 	stw	r2,0(r3)
   8ef54:	00000406 	br	8ef68 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8ef58:	008ee480 	call	8ee48 <alt_get_errno>
   8ef5c:	1007883a 	mov	r3,r2
   8ef60:	00801444 	movi	r2,81
   8ef64:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8ef68:	00bfffc4 	movi	r2,-1
}
   8ef6c:	e037883a 	mov	sp,fp
   8ef70:	dfc00117 	ldw	ra,4(sp)
   8ef74:	df000017 	ldw	fp,0(sp)
   8ef78:	dec00204 	addi	sp,sp,8
   8ef7c:	f800283a 	ret

0008ef80 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8ef80:	defffe04 	addi	sp,sp,-8
   8ef84:	df000115 	stw	fp,4(sp)
   8ef88:	df000104 	addi	fp,sp,4
   8ef8c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8ef90:	e0bfff17 	ldw	r2,-4(fp)
   8ef94:	108000d0 	cmplti	r2,r2,3
   8ef98:	10000d1e 	bne	r2,zero,8efd0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   8ef9c:	00800274 	movhi	r2,9
   8efa0:	10872204 	addi	r2,r2,7304
   8efa4:	e0ffff17 	ldw	r3,-4(fp)
   8efa8:	18c00324 	muli	r3,r3,12
   8efac:	10c5883a 	add	r2,r2,r3
   8efb0:	10800204 	addi	r2,r2,8
   8efb4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8efb8:	00800274 	movhi	r2,9
   8efbc:	10872204 	addi	r2,r2,7304
   8efc0:	e0ffff17 	ldw	r3,-4(fp)
   8efc4:	18c00324 	muli	r3,r3,12
   8efc8:	10c5883a 	add	r2,r2,r3
   8efcc:	10000015 	stw	zero,0(r2)
  }
}
   8efd0:	0001883a 	nop
   8efd4:	e037883a 	mov	sp,fp
   8efd8:	df000017 	ldw	fp,0(sp)
   8efdc:	dec00104 	addi	sp,sp,4
   8efe0:	f800283a 	ret

0008efe4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8efe4:	defff904 	addi	sp,sp,-28
   8efe8:	df000615 	stw	fp,24(sp)
   8efec:	df000604 	addi	fp,sp,24
   8eff0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8eff4:	0005303a 	rdctl	r2,status
   8eff8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8effc:	e0fffe17 	ldw	r3,-8(fp)
   8f000:	00bfff84 	movi	r2,-2
   8f004:	1884703a 	and	r2,r3,r2
   8f008:	1001703a 	wrctl	status,r2
  
  return context;
   8f00c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8f010:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8f014:	d0a00d17 	ldw	r2,-32716(gp)
   8f018:	10c000c4 	addi	r3,r2,3
   8f01c:	00bfff04 	movi	r2,-4
   8f020:	1884703a 	and	r2,r3,r2
   8f024:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8f028:	d0e00d17 	ldw	r3,-32716(gp)
   8f02c:	e0bfff17 	ldw	r2,-4(fp)
   8f030:	1887883a 	add	r3,r3,r2
   8f034:	008003b4 	movhi	r2,14
   8f038:	1086a004 	addi	r2,r2,6784
   8f03c:	10c0062e 	bgeu	r2,r3,8f058 <sbrk+0x74>
   8f040:	e0bffb17 	ldw	r2,-20(fp)
   8f044:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f048:	e0bffa17 	ldw	r2,-24(fp)
   8f04c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8f050:	00bfffc4 	movi	r2,-1
   8f054:	00000b06 	br	8f084 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   8f058:	d0a00d17 	ldw	r2,-32716(gp)
   8f05c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   8f060:	d0e00d17 	ldw	r3,-32716(gp)
   8f064:	e0bfff17 	ldw	r2,-4(fp)
   8f068:	1885883a 	add	r2,r3,r2
   8f06c:	d0a00d15 	stw	r2,-32716(gp)
   8f070:	e0bffb17 	ldw	r2,-20(fp)
   8f074:	e0bffc15 	stw	r2,-16(fp)
   8f078:	e0bffc17 	ldw	r2,-16(fp)
   8f07c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8f080:	e0bffd17 	ldw	r2,-12(fp)
} 
   8f084:	e037883a 	mov	sp,fp
   8f088:	df000017 	ldw	fp,0(sp)
   8f08c:	dec00104 	addi	sp,sp,4
   8f090:	f800283a 	ret

0008f094 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8f094:	defffa04 	addi	sp,sp,-24
   8f098:	df000515 	stw	fp,20(sp)
   8f09c:	df000504 	addi	fp,sp,20
   8f0a0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f0a4:	0005303a 	rdctl	r2,status
   8f0a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f0ac:	e0fffc17 	ldw	r3,-16(fp)
   8f0b0:	00bfff84 	movi	r2,-2
   8f0b4:	1884703a 	and	r2,r3,r2
   8f0b8:	1001703a 	wrctl	status,r2
  
  return context;
   8f0bc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8f0c0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   8f0c4:	e0bfff17 	ldw	r2,-4(fp)
   8f0c8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8f0cc:	e0bffd17 	ldw	r2,-12(fp)
   8f0d0:	10800017 	ldw	r2,0(r2)
   8f0d4:	e0fffd17 	ldw	r3,-12(fp)
   8f0d8:	18c00117 	ldw	r3,4(r3)
   8f0dc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   8f0e0:	e0bffd17 	ldw	r2,-12(fp)
   8f0e4:	10800117 	ldw	r2,4(r2)
   8f0e8:	e0fffd17 	ldw	r3,-12(fp)
   8f0ec:	18c00017 	ldw	r3,0(r3)
   8f0f0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8f0f4:	e0bffd17 	ldw	r2,-12(fp)
   8f0f8:	e0fffd17 	ldw	r3,-12(fp)
   8f0fc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   8f100:	e0bffd17 	ldw	r2,-12(fp)
   8f104:	e0fffd17 	ldw	r3,-12(fp)
   8f108:	10c00015 	stw	r3,0(r2)
   8f10c:	e0bffb17 	ldw	r2,-20(fp)
   8f110:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f114:	e0bffe17 	ldw	r2,-8(fp)
   8f118:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8f11c:	0001883a 	nop
   8f120:	e037883a 	mov	sp,fp
   8f124:	df000017 	ldw	fp,0(sp)
   8f128:	dec00104 	addi	sp,sp,4
   8f12c:	f800283a 	ret

0008f130 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8f130:	defffb04 	addi	sp,sp,-20
   8f134:	dfc00415 	stw	ra,16(sp)
   8f138:	df000315 	stw	fp,12(sp)
   8f13c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8f140:	d0a00e17 	ldw	r2,-32712(gp)
   8f144:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8f148:	d0a76317 	ldw	r2,-25204(gp)
   8f14c:	10800044 	addi	r2,r2,1
   8f150:	d0a76315 	stw	r2,-25204(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8f154:	00002e06 	br	8f210 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   8f158:	e0bffd17 	ldw	r2,-12(fp)
   8f15c:	10800017 	ldw	r2,0(r2)
   8f160:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8f164:	e0bffd17 	ldw	r2,-12(fp)
   8f168:	10800403 	ldbu	r2,16(r2)
   8f16c:	10803fcc 	andi	r2,r2,255
   8f170:	10000426 	beq	r2,zero,8f184 <alt_tick+0x54>
   8f174:	d0a76317 	ldw	r2,-25204(gp)
   8f178:	1000021e 	bne	r2,zero,8f184 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   8f17c:	e0bffd17 	ldw	r2,-12(fp)
   8f180:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8f184:	e0bffd17 	ldw	r2,-12(fp)
   8f188:	10800217 	ldw	r2,8(r2)
   8f18c:	d0e76317 	ldw	r3,-25204(gp)
   8f190:	18801d36 	bltu	r3,r2,8f208 <alt_tick+0xd8>
   8f194:	e0bffd17 	ldw	r2,-12(fp)
   8f198:	10800403 	ldbu	r2,16(r2)
   8f19c:	10803fcc 	andi	r2,r2,255
   8f1a0:	1000191e 	bne	r2,zero,8f208 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   8f1a4:	e0bffd17 	ldw	r2,-12(fp)
   8f1a8:	10800317 	ldw	r2,12(r2)
   8f1ac:	e0fffd17 	ldw	r3,-12(fp)
   8f1b0:	18c00517 	ldw	r3,20(r3)
   8f1b4:	1809883a 	mov	r4,r3
   8f1b8:	103ee83a 	callr	r2
   8f1bc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8f1c0:	e0bfff17 	ldw	r2,-4(fp)
   8f1c4:	1000031e 	bne	r2,zero,8f1d4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   8f1c8:	e13ffd17 	ldw	r4,-12(fp)
   8f1cc:	008f0940 	call	8f094 <alt_alarm_stop>
   8f1d0:	00000d06 	br	8f208 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   8f1d4:	e0bffd17 	ldw	r2,-12(fp)
   8f1d8:	10c00217 	ldw	r3,8(r2)
   8f1dc:	e0bfff17 	ldw	r2,-4(fp)
   8f1e0:	1887883a 	add	r3,r3,r2
   8f1e4:	e0bffd17 	ldw	r2,-12(fp)
   8f1e8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8f1ec:	e0bffd17 	ldw	r2,-12(fp)
   8f1f0:	10c00217 	ldw	r3,8(r2)
   8f1f4:	d0a76317 	ldw	r2,-25204(gp)
   8f1f8:	1880032e 	bgeu	r3,r2,8f208 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   8f1fc:	e0bffd17 	ldw	r2,-12(fp)
   8f200:	00c00044 	movi	r3,1
   8f204:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   8f208:	e0bffe17 	ldw	r2,-8(fp)
   8f20c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8f210:	e0fffd17 	ldw	r3,-12(fp)
   8f214:	d0a00e04 	addi	r2,gp,-32712
   8f218:	18bfcf1e 	bne	r3,r2,8f158 <__alt_data_end+0xfffad6d8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   8f21c:	0001883a 	nop
}
   8f220:	0001883a 	nop
   8f224:	e037883a 	mov	sp,fp
   8f228:	dfc00117 	ldw	ra,4(sp)
   8f22c:	df000017 	ldw	fp,0(sp)
   8f230:	dec00204 	addi	sp,sp,8
   8f234:	f800283a 	ret

0008f238 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8f238:	defffe04 	addi	sp,sp,-8
   8f23c:	dfc00115 	stw	ra,4(sp)
   8f240:	df000015 	stw	fp,0(sp)
   8f244:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8f248:	d0a00b17 	ldw	r2,-32724(gp)
   8f24c:	10000326 	beq	r2,zero,8f25c <alt_get_errno+0x24>
   8f250:	d0a00b17 	ldw	r2,-32724(gp)
   8f254:	103ee83a 	callr	r2
   8f258:	00000106 	br	8f260 <alt_get_errno+0x28>
   8f25c:	d0a75304 	addi	r2,gp,-25268
}
   8f260:	e037883a 	mov	sp,fp
   8f264:	dfc00117 	ldw	ra,4(sp)
   8f268:	df000017 	ldw	fp,0(sp)
   8f26c:	dec00204 	addi	sp,sp,8
   8f270:	f800283a 	ret

0008f274 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8f274:	defff904 	addi	sp,sp,-28
   8f278:	dfc00615 	stw	ra,24(sp)
   8f27c:	df000515 	stw	fp,20(sp)
   8f280:	df000504 	addi	fp,sp,20
   8f284:	e13ffd15 	stw	r4,-12(fp)
   8f288:	e17ffe15 	stw	r5,-8(fp)
   8f28c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8f290:	e0bffd17 	ldw	r2,-12(fp)
   8f294:	10000616 	blt	r2,zero,8f2b0 <write+0x3c>
   8f298:	e0bffd17 	ldw	r2,-12(fp)
   8f29c:	10c00324 	muli	r3,r2,12
   8f2a0:	00800274 	movhi	r2,9
   8f2a4:	10872204 	addi	r2,r2,7304
   8f2a8:	1885883a 	add	r2,r3,r2
   8f2ac:	00000106 	br	8f2b4 <write+0x40>
   8f2b0:	0005883a 	mov	r2,zero
   8f2b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8f2b8:	e0bffb17 	ldw	r2,-20(fp)
   8f2bc:	10002126 	beq	r2,zero,8f344 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8f2c0:	e0bffb17 	ldw	r2,-20(fp)
   8f2c4:	10800217 	ldw	r2,8(r2)
   8f2c8:	108000cc 	andi	r2,r2,3
   8f2cc:	10001826 	beq	r2,zero,8f330 <write+0xbc>
   8f2d0:	e0bffb17 	ldw	r2,-20(fp)
   8f2d4:	10800017 	ldw	r2,0(r2)
   8f2d8:	10800617 	ldw	r2,24(r2)
   8f2dc:	10001426 	beq	r2,zero,8f330 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8f2e0:	e0bffb17 	ldw	r2,-20(fp)
   8f2e4:	10800017 	ldw	r2,0(r2)
   8f2e8:	10800617 	ldw	r2,24(r2)
   8f2ec:	e0ffff17 	ldw	r3,-4(fp)
   8f2f0:	180d883a 	mov	r6,r3
   8f2f4:	e17ffe17 	ldw	r5,-8(fp)
   8f2f8:	e13ffb17 	ldw	r4,-20(fp)
   8f2fc:	103ee83a 	callr	r2
   8f300:	e0bffc15 	stw	r2,-16(fp)
   8f304:	e0bffc17 	ldw	r2,-16(fp)
   8f308:	1000070e 	bge	r2,zero,8f328 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   8f30c:	008f2380 	call	8f238 <alt_get_errno>
   8f310:	1007883a 	mov	r3,r2
   8f314:	e0bffc17 	ldw	r2,-16(fp)
   8f318:	0085c83a 	sub	r2,zero,r2
   8f31c:	18800015 	stw	r2,0(r3)
        return -1;
   8f320:	00bfffc4 	movi	r2,-1
   8f324:	00000c06 	br	8f358 <write+0xe4>
      }
      return rval;
   8f328:	e0bffc17 	ldw	r2,-16(fp)
   8f32c:	00000a06 	br	8f358 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8f330:	008f2380 	call	8f238 <alt_get_errno>
   8f334:	1007883a 	mov	r3,r2
   8f338:	00800344 	movi	r2,13
   8f33c:	18800015 	stw	r2,0(r3)
   8f340:	00000406 	br	8f354 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8f344:	008f2380 	call	8f238 <alt_get_errno>
   8f348:	1007883a 	mov	r3,r2
   8f34c:	00801444 	movi	r2,81
   8f350:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8f354:	00bfffc4 	movi	r2,-1
}
   8f358:	e037883a 	mov	sp,fp
   8f35c:	dfc00117 	ldw	ra,4(sp)
   8f360:	df000017 	ldw	fp,0(sp)
   8f364:	dec00204 	addi	sp,sp,8
   8f368:	f800283a 	ret

0008f36c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8f36c:	defffd04 	addi	sp,sp,-12
   8f370:	dfc00215 	stw	ra,8(sp)
   8f374:	df000115 	stw	fp,4(sp)
   8f378:	df000104 	addi	fp,sp,4
   8f37c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8f380:	d1600804 	addi	r5,gp,-32736
   8f384:	e13fff17 	ldw	r4,-4(fp)
   8f388:	00901480 	call	90148 <alt_dev_llist_insert>
}
   8f38c:	e037883a 	mov	sp,fp
   8f390:	dfc00117 	ldw	ra,4(sp)
   8f394:	df000017 	ldw	fp,0(sp)
   8f398:	dec00204 	addi	sp,sp,8
   8f39c:	f800283a 	ret

0008f3a0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8f3a0:	defffd04 	addi	sp,sp,-12
   8f3a4:	dfc00215 	stw	ra,8(sp)
   8f3a8:	df000115 	stw	fp,4(sp)
   8f3ac:	df000104 	addi	fp,sp,4
   8f3b0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   8f3b4:	00907100 	call	90710 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8f3b8:	00800044 	movi	r2,1
   8f3bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8f3c0:	0001883a 	nop
   8f3c4:	e037883a 	mov	sp,fp
   8f3c8:	dfc00117 	ldw	ra,4(sp)
   8f3cc:	df000017 	ldw	fp,0(sp)
   8f3d0:	dec00204 	addi	sp,sp,8
   8f3d4:	f800283a 	ret

0008f3d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8f3d8:	defffe04 	addi	sp,sp,-8
   8f3dc:	dfc00115 	stw	ra,4(sp)
   8f3e0:	df000015 	stw	fp,0(sp)
   8f3e4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   8f3e8:	01c0fa04 	movi	r7,1000
   8f3ec:	000d883a 	mov	r6,zero
   8f3f0:	000b883a 	mov	r5,zero
   8f3f4:	01000434 	movhi	r4,16
   8f3f8:	21040004 	addi	r4,r4,4096
   8f3fc:	008ff1c0 	call	8ff1c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   8f400:	01800044 	movi	r6,1
   8f404:	000b883a 	mov	r5,zero
   8f408:	01000274 	movhi	r4,9
   8f40c:	21078c04 	addi	r4,r4,7728
   8f410:	008f5a00 	call	8f5a0 <altera_avalon_jtag_uart_init>
   8f414:	01000274 	movhi	r4,9
   8f418:	21078204 	addi	r4,r4,7688
   8f41c:	008f36c0 	call	8f36c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   8f420:	0001883a 	nop
}
   8f424:	0001883a 	nop
   8f428:	e037883a 	mov	sp,fp
   8f42c:	dfc00117 	ldw	ra,4(sp)
   8f430:	df000017 	ldw	fp,0(sp)
   8f434:	dec00204 	addi	sp,sp,8
   8f438:	f800283a 	ret

0008f43c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8f43c:	defffa04 	addi	sp,sp,-24
   8f440:	dfc00515 	stw	ra,20(sp)
   8f444:	df000415 	stw	fp,16(sp)
   8f448:	df000404 	addi	fp,sp,16
   8f44c:	e13ffd15 	stw	r4,-12(fp)
   8f450:	e17ffe15 	stw	r5,-8(fp)
   8f454:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8f458:	e0bffd17 	ldw	r2,-12(fp)
   8f45c:	10800017 	ldw	r2,0(r2)
   8f460:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8f464:	e0bffc17 	ldw	r2,-16(fp)
   8f468:	10c00a04 	addi	r3,r2,40
   8f46c:	e0bffd17 	ldw	r2,-12(fp)
   8f470:	10800217 	ldw	r2,8(r2)
   8f474:	100f883a 	mov	r7,r2
   8f478:	e1bfff17 	ldw	r6,-4(fp)
   8f47c:	e17ffe17 	ldw	r5,-8(fp)
   8f480:	1809883a 	mov	r4,r3
   8f484:	008fa640 	call	8fa64 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8f488:	e037883a 	mov	sp,fp
   8f48c:	dfc00117 	ldw	ra,4(sp)
   8f490:	df000017 	ldw	fp,0(sp)
   8f494:	dec00204 	addi	sp,sp,8
   8f498:	f800283a 	ret

0008f49c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8f49c:	defffa04 	addi	sp,sp,-24
   8f4a0:	dfc00515 	stw	ra,20(sp)
   8f4a4:	df000415 	stw	fp,16(sp)
   8f4a8:	df000404 	addi	fp,sp,16
   8f4ac:	e13ffd15 	stw	r4,-12(fp)
   8f4b0:	e17ffe15 	stw	r5,-8(fp)
   8f4b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8f4b8:	e0bffd17 	ldw	r2,-12(fp)
   8f4bc:	10800017 	ldw	r2,0(r2)
   8f4c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8f4c4:	e0bffc17 	ldw	r2,-16(fp)
   8f4c8:	10c00a04 	addi	r3,r2,40
   8f4cc:	e0bffd17 	ldw	r2,-12(fp)
   8f4d0:	10800217 	ldw	r2,8(r2)
   8f4d4:	100f883a 	mov	r7,r2
   8f4d8:	e1bfff17 	ldw	r6,-4(fp)
   8f4dc:	e17ffe17 	ldw	r5,-8(fp)
   8f4e0:	1809883a 	mov	r4,r3
   8f4e4:	008fc800 	call	8fc80 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8f4e8:	e037883a 	mov	sp,fp
   8f4ec:	dfc00117 	ldw	ra,4(sp)
   8f4f0:	df000017 	ldw	fp,0(sp)
   8f4f4:	dec00204 	addi	sp,sp,8
   8f4f8:	f800283a 	ret

0008f4fc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8f4fc:	defffc04 	addi	sp,sp,-16
   8f500:	dfc00315 	stw	ra,12(sp)
   8f504:	df000215 	stw	fp,8(sp)
   8f508:	df000204 	addi	fp,sp,8
   8f50c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8f510:	e0bfff17 	ldw	r2,-4(fp)
   8f514:	10800017 	ldw	r2,0(r2)
   8f518:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8f51c:	e0bffe17 	ldw	r2,-8(fp)
   8f520:	10c00a04 	addi	r3,r2,40
   8f524:	e0bfff17 	ldw	r2,-4(fp)
   8f528:	10800217 	ldw	r2,8(r2)
   8f52c:	100b883a 	mov	r5,r2
   8f530:	1809883a 	mov	r4,r3
   8f534:	008f90c0 	call	8f90c <altera_avalon_jtag_uart_close>
}
   8f538:	e037883a 	mov	sp,fp
   8f53c:	dfc00117 	ldw	ra,4(sp)
   8f540:	df000017 	ldw	fp,0(sp)
   8f544:	dec00204 	addi	sp,sp,8
   8f548:	f800283a 	ret

0008f54c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8f54c:	defffa04 	addi	sp,sp,-24
   8f550:	dfc00515 	stw	ra,20(sp)
   8f554:	df000415 	stw	fp,16(sp)
   8f558:	df000404 	addi	fp,sp,16
   8f55c:	e13ffd15 	stw	r4,-12(fp)
   8f560:	e17ffe15 	stw	r5,-8(fp)
   8f564:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8f568:	e0bffd17 	ldw	r2,-12(fp)
   8f56c:	10800017 	ldw	r2,0(r2)
   8f570:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8f574:	e0bffc17 	ldw	r2,-16(fp)
   8f578:	10800a04 	addi	r2,r2,40
   8f57c:	e1bfff17 	ldw	r6,-4(fp)
   8f580:	e17ffe17 	ldw	r5,-8(fp)
   8f584:	1009883a 	mov	r4,r2
   8f588:	008f9740 	call	8f974 <altera_avalon_jtag_uart_ioctl>
}
   8f58c:	e037883a 	mov	sp,fp
   8f590:	dfc00117 	ldw	ra,4(sp)
   8f594:	df000017 	ldw	fp,0(sp)
   8f598:	dec00204 	addi	sp,sp,8
   8f59c:	f800283a 	ret

0008f5a0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8f5a0:	defffa04 	addi	sp,sp,-24
   8f5a4:	dfc00515 	stw	ra,20(sp)
   8f5a8:	df000415 	stw	fp,16(sp)
   8f5ac:	df000404 	addi	fp,sp,16
   8f5b0:	e13ffd15 	stw	r4,-12(fp)
   8f5b4:	e17ffe15 	stw	r5,-8(fp)
   8f5b8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f5bc:	e0bffd17 	ldw	r2,-12(fp)
   8f5c0:	00c00044 	movi	r3,1
   8f5c4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8f5c8:	e0bffd17 	ldw	r2,-12(fp)
   8f5cc:	10800017 	ldw	r2,0(r2)
   8f5d0:	10800104 	addi	r2,r2,4
   8f5d4:	1007883a 	mov	r3,r2
   8f5d8:	e0bffd17 	ldw	r2,-12(fp)
   8f5dc:	10800817 	ldw	r2,32(r2)
   8f5e0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8f5e4:	e0bffe17 	ldw	r2,-8(fp)
   8f5e8:	e0ffff17 	ldw	r3,-4(fp)
   8f5ec:	d8000015 	stw	zero,0(sp)
   8f5f0:	e1fffd17 	ldw	r7,-12(fp)
   8f5f4:	01800274 	movhi	r6,9
   8f5f8:	31bd9804 	addi	r6,r6,-2464
   8f5fc:	180b883a 	mov	r5,r3
   8f600:	1009883a 	mov	r4,r2
   8f604:	008e6880 	call	8e688 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8f608:	e0bffd17 	ldw	r2,-12(fp)
   8f60c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8f610:	e0bffd17 	ldw	r2,-12(fp)
   8f614:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8f618:	d0e76217 	ldw	r3,-25208(gp)
   8f61c:	e1fffd17 	ldw	r7,-12(fp)
   8f620:	01800274 	movhi	r6,9
   8f624:	31be1b04 	addi	r6,r6,-1940
   8f628:	180b883a 	mov	r5,r3
   8f62c:	1009883a 	mov	r4,r2
   8f630:	008ff980 	call	8ff98 <alt_alarm_start>
   8f634:	1000040e 	bge	r2,zero,8f648 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8f638:	e0fffd17 	ldw	r3,-12(fp)
   8f63c:	00a00034 	movhi	r2,32768
   8f640:	10bfffc4 	addi	r2,r2,-1
   8f644:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8f648:	0001883a 	nop
   8f64c:	e037883a 	mov	sp,fp
   8f650:	dfc00117 	ldw	ra,4(sp)
   8f654:	df000017 	ldw	fp,0(sp)
   8f658:	dec00204 	addi	sp,sp,8
   8f65c:	f800283a 	ret

0008f660 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8f660:	defff804 	addi	sp,sp,-32
   8f664:	df000715 	stw	fp,28(sp)
   8f668:	df000704 	addi	fp,sp,28
   8f66c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8f670:	e0bfff17 	ldw	r2,-4(fp)
   8f674:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   8f678:	e0bffb17 	ldw	r2,-20(fp)
   8f67c:	10800017 	ldw	r2,0(r2)
   8f680:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f684:	e0bffc17 	ldw	r2,-16(fp)
   8f688:	10800104 	addi	r2,r2,4
   8f68c:	10800037 	ldwio	r2,0(r2)
   8f690:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8f694:	e0bffd17 	ldw	r2,-12(fp)
   8f698:	1080c00c 	andi	r2,r2,768
   8f69c:	10006d26 	beq	r2,zero,8f854 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8f6a0:	e0bffd17 	ldw	r2,-12(fp)
   8f6a4:	1080400c 	andi	r2,r2,256
   8f6a8:	10003526 	beq	r2,zero,8f780 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8f6ac:	00800074 	movhi	r2,1
   8f6b0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f6b4:	e0bffb17 	ldw	r2,-20(fp)
   8f6b8:	10800a17 	ldw	r2,40(r2)
   8f6bc:	10800044 	addi	r2,r2,1
   8f6c0:	1081ffcc 	andi	r2,r2,2047
   8f6c4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   8f6c8:	e0bffb17 	ldw	r2,-20(fp)
   8f6cc:	10c00b17 	ldw	r3,44(r2)
   8f6d0:	e0bffe17 	ldw	r2,-8(fp)
   8f6d4:	18801526 	beq	r3,r2,8f72c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8f6d8:	e0bffc17 	ldw	r2,-16(fp)
   8f6dc:	10800037 	ldwio	r2,0(r2)
   8f6e0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8f6e4:	e0bff917 	ldw	r2,-28(fp)
   8f6e8:	10a0000c 	andi	r2,r2,32768
   8f6ec:	10001126 	beq	r2,zero,8f734 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8f6f0:	e0bffb17 	ldw	r2,-20(fp)
   8f6f4:	10800a17 	ldw	r2,40(r2)
   8f6f8:	e0fff917 	ldw	r3,-28(fp)
   8f6fc:	1809883a 	mov	r4,r3
   8f700:	e0fffb17 	ldw	r3,-20(fp)
   8f704:	1885883a 	add	r2,r3,r2
   8f708:	10800e04 	addi	r2,r2,56
   8f70c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f710:	e0bffb17 	ldw	r2,-20(fp)
   8f714:	10800a17 	ldw	r2,40(r2)
   8f718:	10800044 	addi	r2,r2,1
   8f71c:	10c1ffcc 	andi	r3,r2,2047
   8f720:	e0bffb17 	ldw	r2,-20(fp)
   8f724:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8f728:	003fe206 	br	8f6b4 <__alt_data_end+0xfffadc34>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   8f72c:	0001883a 	nop
   8f730:	00000106 	br	8f738 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   8f734:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8f738:	e0bff917 	ldw	r2,-28(fp)
   8f73c:	10bfffec 	andhi	r2,r2,65535
   8f740:	10000f26 	beq	r2,zero,8f780 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f744:	e0bffb17 	ldw	r2,-20(fp)
   8f748:	10c00817 	ldw	r3,32(r2)
   8f74c:	00bfff84 	movi	r2,-2
   8f750:	1886703a 	and	r3,r3,r2
   8f754:	e0bffb17 	ldw	r2,-20(fp)
   8f758:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8f75c:	e0bffc17 	ldw	r2,-16(fp)
   8f760:	10800104 	addi	r2,r2,4
   8f764:	1007883a 	mov	r3,r2
   8f768:	e0bffb17 	ldw	r2,-20(fp)
   8f76c:	10800817 	ldw	r2,32(r2)
   8f770:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f774:	e0bffc17 	ldw	r2,-16(fp)
   8f778:	10800104 	addi	r2,r2,4
   8f77c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8f780:	e0bffd17 	ldw	r2,-12(fp)
   8f784:	1080800c 	andi	r2,r2,512
   8f788:	103fbe26 	beq	r2,zero,8f684 <__alt_data_end+0xfffadc04>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8f78c:	e0bffd17 	ldw	r2,-12(fp)
   8f790:	1004d43a 	srli	r2,r2,16
   8f794:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8f798:	00001406 	br	8f7ec <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8f79c:	e0bffc17 	ldw	r2,-16(fp)
   8f7a0:	e0fffb17 	ldw	r3,-20(fp)
   8f7a4:	18c00d17 	ldw	r3,52(r3)
   8f7a8:	e13ffb17 	ldw	r4,-20(fp)
   8f7ac:	20c7883a 	add	r3,r4,r3
   8f7b0:	18c20e04 	addi	r3,r3,2104
   8f7b4:	18c00003 	ldbu	r3,0(r3)
   8f7b8:	18c03fcc 	andi	r3,r3,255
   8f7bc:	18c0201c 	xori	r3,r3,128
   8f7c0:	18ffe004 	addi	r3,r3,-128
   8f7c4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f7c8:	e0bffb17 	ldw	r2,-20(fp)
   8f7cc:	10800d17 	ldw	r2,52(r2)
   8f7d0:	10800044 	addi	r2,r2,1
   8f7d4:	10c1ffcc 	andi	r3,r2,2047
   8f7d8:	e0bffb17 	ldw	r2,-20(fp)
   8f7dc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8f7e0:	e0bffa17 	ldw	r2,-24(fp)
   8f7e4:	10bfffc4 	addi	r2,r2,-1
   8f7e8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8f7ec:	e0bffa17 	ldw	r2,-24(fp)
   8f7f0:	10000526 	beq	r2,zero,8f808 <altera_avalon_jtag_uart_irq+0x1a8>
   8f7f4:	e0bffb17 	ldw	r2,-20(fp)
   8f7f8:	10c00d17 	ldw	r3,52(r2)
   8f7fc:	e0bffb17 	ldw	r2,-20(fp)
   8f800:	10800c17 	ldw	r2,48(r2)
   8f804:	18bfe51e 	bne	r3,r2,8f79c <__alt_data_end+0xfffadd1c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8f808:	e0bffa17 	ldw	r2,-24(fp)
   8f80c:	103f9d26 	beq	r2,zero,8f684 <__alt_data_end+0xfffadc04>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8f810:	e0bffb17 	ldw	r2,-20(fp)
   8f814:	10c00817 	ldw	r3,32(r2)
   8f818:	00bfff44 	movi	r2,-3
   8f81c:	1886703a 	and	r3,r3,r2
   8f820:	e0bffb17 	ldw	r2,-20(fp)
   8f824:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8f828:	e0bffb17 	ldw	r2,-20(fp)
   8f82c:	10800017 	ldw	r2,0(r2)
   8f830:	10800104 	addi	r2,r2,4
   8f834:	1007883a 	mov	r3,r2
   8f838:	e0bffb17 	ldw	r2,-20(fp)
   8f83c:	10800817 	ldw	r2,32(r2)
   8f840:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f844:	e0bffc17 	ldw	r2,-16(fp)
   8f848:	10800104 	addi	r2,r2,4
   8f84c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8f850:	003f8c06 	br	8f684 <__alt_data_end+0xfffadc04>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   8f854:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   8f858:	0001883a 	nop
   8f85c:	e037883a 	mov	sp,fp
   8f860:	df000017 	ldw	fp,0(sp)
   8f864:	dec00104 	addi	sp,sp,4
   8f868:	f800283a 	ret

0008f86c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8f86c:	defff804 	addi	sp,sp,-32
   8f870:	df000715 	stw	fp,28(sp)
   8f874:	df000704 	addi	fp,sp,28
   8f878:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8f87c:	e0bffb17 	ldw	r2,-20(fp)
   8f880:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8f884:	e0bff917 	ldw	r2,-28(fp)
   8f888:	10800017 	ldw	r2,0(r2)
   8f88c:	10800104 	addi	r2,r2,4
   8f890:	10800037 	ldwio	r2,0(r2)
   8f894:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8f898:	e0bffa17 	ldw	r2,-24(fp)
   8f89c:	1081000c 	andi	r2,r2,1024
   8f8a0:	10000b26 	beq	r2,zero,8f8d0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8f8a4:	e0bff917 	ldw	r2,-28(fp)
   8f8a8:	10800017 	ldw	r2,0(r2)
   8f8ac:	10800104 	addi	r2,r2,4
   8f8b0:	1007883a 	mov	r3,r2
   8f8b4:	e0bff917 	ldw	r2,-28(fp)
   8f8b8:	10800817 	ldw	r2,32(r2)
   8f8bc:	10810014 	ori	r2,r2,1024
   8f8c0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   8f8c4:	e0bff917 	ldw	r2,-28(fp)
   8f8c8:	10000915 	stw	zero,36(r2)
   8f8cc:	00000a06 	br	8f8f8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8f8d0:	e0bff917 	ldw	r2,-28(fp)
   8f8d4:	10c00917 	ldw	r3,36(r2)
   8f8d8:	00a00034 	movhi	r2,32768
   8f8dc:	10bfff04 	addi	r2,r2,-4
   8f8e0:	10c00536 	bltu	r2,r3,8f8f8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   8f8e4:	e0bff917 	ldw	r2,-28(fp)
   8f8e8:	10800917 	ldw	r2,36(r2)
   8f8ec:	10c00044 	addi	r3,r2,1
   8f8f0:	e0bff917 	ldw	r2,-28(fp)
   8f8f4:	10c00915 	stw	r3,36(r2)
   8f8f8:	d0a76217 	ldw	r2,-25208(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8f8fc:	e037883a 	mov	sp,fp
   8f900:	df000017 	ldw	fp,0(sp)
   8f904:	dec00104 	addi	sp,sp,4
   8f908:	f800283a 	ret

0008f90c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8f90c:	defffd04 	addi	sp,sp,-12
   8f910:	df000215 	stw	fp,8(sp)
   8f914:	df000204 	addi	fp,sp,8
   8f918:	e13ffe15 	stw	r4,-8(fp)
   8f91c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8f920:	00000506 	br	8f938 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   8f924:	e0bfff17 	ldw	r2,-4(fp)
   8f928:	1090000c 	andi	r2,r2,16384
   8f92c:	10000226 	beq	r2,zero,8f938 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   8f930:	00bffd44 	movi	r2,-11
   8f934:	00000b06 	br	8f964 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8f938:	e0bffe17 	ldw	r2,-8(fp)
   8f93c:	10c00d17 	ldw	r3,52(r2)
   8f940:	e0bffe17 	ldw	r2,-8(fp)
   8f944:	10800c17 	ldw	r2,48(r2)
   8f948:	18800526 	beq	r3,r2,8f960 <altera_avalon_jtag_uart_close+0x54>
   8f94c:	e0bffe17 	ldw	r2,-8(fp)
   8f950:	10c00917 	ldw	r3,36(r2)
   8f954:	e0bffe17 	ldw	r2,-8(fp)
   8f958:	10800117 	ldw	r2,4(r2)
   8f95c:	18bff136 	bltu	r3,r2,8f924 <__alt_data_end+0xfffadea4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8f960:	0005883a 	mov	r2,zero
}
   8f964:	e037883a 	mov	sp,fp
   8f968:	df000017 	ldw	fp,0(sp)
   8f96c:	dec00104 	addi	sp,sp,4
   8f970:	f800283a 	ret

0008f974 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8f974:	defffa04 	addi	sp,sp,-24
   8f978:	df000515 	stw	fp,20(sp)
   8f97c:	df000504 	addi	fp,sp,20
   8f980:	e13ffd15 	stw	r4,-12(fp)
   8f984:	e17ffe15 	stw	r5,-8(fp)
   8f988:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   8f98c:	00bff9c4 	movi	r2,-25
   8f990:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   8f994:	e0bffe17 	ldw	r2,-8(fp)
   8f998:	10da8060 	cmpeqi	r3,r2,27137
   8f99c:	1800031e 	bne	r3,zero,8f9ac <altera_avalon_jtag_uart_ioctl+0x38>
   8f9a0:	109a80a0 	cmpeqi	r2,r2,27138
   8f9a4:	1000181e 	bne	r2,zero,8fa08 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   8f9a8:	00002906 	br	8fa50 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8f9ac:	e0bffd17 	ldw	r2,-12(fp)
   8f9b0:	10c00117 	ldw	r3,4(r2)
   8f9b4:	00a00034 	movhi	r2,32768
   8f9b8:	10bfffc4 	addi	r2,r2,-1
   8f9bc:	18802126 	beq	r3,r2,8fa44 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   8f9c0:	e0bfff17 	ldw	r2,-4(fp)
   8f9c4:	10800017 	ldw	r2,0(r2)
   8f9c8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8f9cc:	e0bffc17 	ldw	r2,-16(fp)
   8f9d0:	10800090 	cmplti	r2,r2,2
   8f9d4:	1000061e 	bne	r2,zero,8f9f0 <altera_avalon_jtag_uart_ioctl+0x7c>
   8f9d8:	e0fffc17 	ldw	r3,-16(fp)
   8f9dc:	00a00034 	movhi	r2,32768
   8f9e0:	10bfffc4 	addi	r2,r2,-1
   8f9e4:	18800226 	beq	r3,r2,8f9f0 <altera_avalon_jtag_uart_ioctl+0x7c>
   8f9e8:	e0bffc17 	ldw	r2,-16(fp)
   8f9ec:	00000206 	br	8f9f8 <altera_avalon_jtag_uart_ioctl+0x84>
   8f9f0:	00a00034 	movhi	r2,32768
   8f9f4:	10bfff84 	addi	r2,r2,-2
   8f9f8:	e0fffd17 	ldw	r3,-12(fp)
   8f9fc:	18800115 	stw	r2,4(r3)
      rc = 0;
   8fa00:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8fa04:	00000f06 	br	8fa44 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8fa08:	e0bffd17 	ldw	r2,-12(fp)
   8fa0c:	10c00117 	ldw	r3,4(r2)
   8fa10:	00a00034 	movhi	r2,32768
   8fa14:	10bfffc4 	addi	r2,r2,-1
   8fa18:	18800c26 	beq	r3,r2,8fa4c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8fa1c:	e0bffd17 	ldw	r2,-12(fp)
   8fa20:	10c00917 	ldw	r3,36(r2)
   8fa24:	e0bffd17 	ldw	r2,-12(fp)
   8fa28:	10800117 	ldw	r2,4(r2)
   8fa2c:	1885803a 	cmpltu	r2,r3,r2
   8fa30:	10c03fcc 	andi	r3,r2,255
   8fa34:	e0bfff17 	ldw	r2,-4(fp)
   8fa38:	10c00015 	stw	r3,0(r2)
      rc = 0;
   8fa3c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8fa40:	00000206 	br	8fa4c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   8fa44:	0001883a 	nop
   8fa48:	00000106 	br	8fa50 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   8fa4c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   8fa50:	e0bffb17 	ldw	r2,-20(fp)
}
   8fa54:	e037883a 	mov	sp,fp
   8fa58:	df000017 	ldw	fp,0(sp)
   8fa5c:	dec00104 	addi	sp,sp,4
   8fa60:	f800283a 	ret

0008fa64 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8fa64:	defff304 	addi	sp,sp,-52
   8fa68:	dfc00c15 	stw	ra,48(sp)
   8fa6c:	df000b15 	stw	fp,44(sp)
   8fa70:	df000b04 	addi	fp,sp,44
   8fa74:	e13ffc15 	stw	r4,-16(fp)
   8fa78:	e17ffd15 	stw	r5,-12(fp)
   8fa7c:	e1bffe15 	stw	r6,-8(fp)
   8fa80:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   8fa84:	e0bffd17 	ldw	r2,-12(fp)
   8fa88:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8fa8c:	00004706 	br	8fbac <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8fa90:	e0bffc17 	ldw	r2,-16(fp)
   8fa94:	10800a17 	ldw	r2,40(r2)
   8fa98:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8fa9c:	e0bffc17 	ldw	r2,-16(fp)
   8faa0:	10800b17 	ldw	r2,44(r2)
   8faa4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   8faa8:	e0fff717 	ldw	r3,-36(fp)
   8faac:	e0bff817 	ldw	r2,-32(fp)
   8fab0:	18800536 	bltu	r3,r2,8fac8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8fab4:	e0fff717 	ldw	r3,-36(fp)
   8fab8:	e0bff817 	ldw	r2,-32(fp)
   8fabc:	1885c83a 	sub	r2,r3,r2
   8fac0:	e0bff615 	stw	r2,-40(fp)
   8fac4:	00000406 	br	8fad8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8fac8:	00c20004 	movi	r3,2048
   8facc:	e0bff817 	ldw	r2,-32(fp)
   8fad0:	1885c83a 	sub	r2,r3,r2
   8fad4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8fad8:	e0bff617 	ldw	r2,-40(fp)
   8fadc:	10001e26 	beq	r2,zero,8fb58 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   8fae0:	e0fffe17 	ldw	r3,-8(fp)
   8fae4:	e0bff617 	ldw	r2,-40(fp)
   8fae8:	1880022e 	bgeu	r3,r2,8faf4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   8faec:	e0bffe17 	ldw	r2,-8(fp)
   8faf0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8faf4:	e0bffc17 	ldw	r2,-16(fp)
   8faf8:	10c00e04 	addi	r3,r2,56
   8fafc:	e0bff817 	ldw	r2,-32(fp)
   8fb00:	1885883a 	add	r2,r3,r2
   8fb04:	e1bff617 	ldw	r6,-40(fp)
   8fb08:	100b883a 	mov	r5,r2
   8fb0c:	e13ff517 	ldw	r4,-44(fp)
   8fb10:	00875700 	call	87570 <memcpy>
      ptr   += n;
   8fb14:	e0fff517 	ldw	r3,-44(fp)
   8fb18:	e0bff617 	ldw	r2,-40(fp)
   8fb1c:	1885883a 	add	r2,r3,r2
   8fb20:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   8fb24:	e0fffe17 	ldw	r3,-8(fp)
   8fb28:	e0bff617 	ldw	r2,-40(fp)
   8fb2c:	1885c83a 	sub	r2,r3,r2
   8fb30:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8fb34:	e0fff817 	ldw	r3,-32(fp)
   8fb38:	e0bff617 	ldw	r2,-40(fp)
   8fb3c:	1885883a 	add	r2,r3,r2
   8fb40:	10c1ffcc 	andi	r3,r2,2047
   8fb44:	e0bffc17 	ldw	r2,-16(fp)
   8fb48:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8fb4c:	e0bffe17 	ldw	r2,-8(fp)
   8fb50:	00bfcf16 	blt	zero,r2,8fa90 <__alt_data_end+0xfffae010>
   8fb54:	00000106 	br	8fb5c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   8fb58:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   8fb5c:	e0fff517 	ldw	r3,-44(fp)
   8fb60:	e0bffd17 	ldw	r2,-12(fp)
   8fb64:	1880141e 	bne	r3,r2,8fbb8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8fb68:	e0bfff17 	ldw	r2,-4(fp)
   8fb6c:	1090000c 	andi	r2,r2,16384
   8fb70:	1000131e 	bne	r2,zero,8fbc0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8fb74:	0001883a 	nop
   8fb78:	e0bffc17 	ldw	r2,-16(fp)
   8fb7c:	10c00a17 	ldw	r3,40(r2)
   8fb80:	e0bff717 	ldw	r2,-36(fp)
   8fb84:	1880051e 	bne	r3,r2,8fb9c <altera_avalon_jtag_uart_read+0x138>
   8fb88:	e0bffc17 	ldw	r2,-16(fp)
   8fb8c:	10c00917 	ldw	r3,36(r2)
   8fb90:	e0bffc17 	ldw	r2,-16(fp)
   8fb94:	10800117 	ldw	r2,4(r2)
   8fb98:	18bff736 	bltu	r3,r2,8fb78 <__alt_data_end+0xfffae0f8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8fb9c:	e0bffc17 	ldw	r2,-16(fp)
   8fba0:	10c00a17 	ldw	r3,40(r2)
   8fba4:	e0bff717 	ldw	r2,-36(fp)
   8fba8:	18800726 	beq	r3,r2,8fbc8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8fbac:	e0bffe17 	ldw	r2,-8(fp)
   8fbb0:	00bfb716 	blt	zero,r2,8fa90 <__alt_data_end+0xfffae010>
   8fbb4:	00000506 	br	8fbcc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   8fbb8:	0001883a 	nop
   8fbbc:	00000306 	br	8fbcc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   8fbc0:	0001883a 	nop
   8fbc4:	00000106 	br	8fbcc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   8fbc8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8fbcc:	e0fff517 	ldw	r3,-44(fp)
   8fbd0:	e0bffd17 	ldw	r2,-12(fp)
   8fbd4:	18801826 	beq	r3,r2,8fc38 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fbd8:	0005303a 	rdctl	r2,status
   8fbdc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8fbe0:	e0fffb17 	ldw	r3,-20(fp)
   8fbe4:	00bfff84 	movi	r2,-2
   8fbe8:	1884703a 	and	r2,r3,r2
   8fbec:	1001703a 	wrctl	status,r2
  
  return context;
   8fbf0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8fbf4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8fbf8:	e0bffc17 	ldw	r2,-16(fp)
   8fbfc:	10800817 	ldw	r2,32(r2)
   8fc00:	10c00054 	ori	r3,r2,1
   8fc04:	e0bffc17 	ldw	r2,-16(fp)
   8fc08:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8fc0c:	e0bffc17 	ldw	r2,-16(fp)
   8fc10:	10800017 	ldw	r2,0(r2)
   8fc14:	10800104 	addi	r2,r2,4
   8fc18:	1007883a 	mov	r3,r2
   8fc1c:	e0bffc17 	ldw	r2,-16(fp)
   8fc20:	10800817 	ldw	r2,32(r2)
   8fc24:	18800035 	stwio	r2,0(r3)
   8fc28:	e0bffa17 	ldw	r2,-24(fp)
   8fc2c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fc30:	e0bff917 	ldw	r2,-28(fp)
   8fc34:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8fc38:	e0fff517 	ldw	r3,-44(fp)
   8fc3c:	e0bffd17 	ldw	r2,-12(fp)
   8fc40:	18800426 	beq	r3,r2,8fc54 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   8fc44:	e0fff517 	ldw	r3,-44(fp)
   8fc48:	e0bffd17 	ldw	r2,-12(fp)
   8fc4c:	1885c83a 	sub	r2,r3,r2
   8fc50:	00000606 	br	8fc6c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   8fc54:	e0bfff17 	ldw	r2,-4(fp)
   8fc58:	1090000c 	andi	r2,r2,16384
   8fc5c:	10000226 	beq	r2,zero,8fc68 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8fc60:	00bffd44 	movi	r2,-11
   8fc64:	00000106 	br	8fc6c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   8fc68:	00bffec4 	movi	r2,-5
}
   8fc6c:	e037883a 	mov	sp,fp
   8fc70:	dfc00117 	ldw	ra,4(sp)
   8fc74:	df000017 	ldw	fp,0(sp)
   8fc78:	dec00204 	addi	sp,sp,8
   8fc7c:	f800283a 	ret

0008fc80 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8fc80:	defff304 	addi	sp,sp,-52
   8fc84:	dfc00c15 	stw	ra,48(sp)
   8fc88:	df000b15 	stw	fp,44(sp)
   8fc8c:	df000b04 	addi	fp,sp,44
   8fc90:	e13ffc15 	stw	r4,-16(fp)
   8fc94:	e17ffd15 	stw	r5,-12(fp)
   8fc98:	e1bffe15 	stw	r6,-8(fp)
   8fc9c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8fca0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8fca4:	e0bffd17 	ldw	r2,-12(fp)
   8fca8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8fcac:	00003706 	br	8fd8c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8fcb0:	e0bffc17 	ldw	r2,-16(fp)
   8fcb4:	10800c17 	ldw	r2,48(r2)
   8fcb8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   8fcbc:	e0bffc17 	ldw	r2,-16(fp)
   8fcc0:	10800d17 	ldw	r2,52(r2)
   8fcc4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   8fcc8:	e0fff917 	ldw	r3,-28(fp)
   8fccc:	e0bff517 	ldw	r2,-44(fp)
   8fcd0:	1880062e 	bgeu	r3,r2,8fcec <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8fcd4:	e0fff517 	ldw	r3,-44(fp)
   8fcd8:	e0bff917 	ldw	r2,-28(fp)
   8fcdc:	1885c83a 	sub	r2,r3,r2
   8fce0:	10bfffc4 	addi	r2,r2,-1
   8fce4:	e0bff615 	stw	r2,-40(fp)
   8fce8:	00000b06 	br	8fd18 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   8fcec:	e0bff517 	ldw	r2,-44(fp)
   8fcf0:	10000526 	beq	r2,zero,8fd08 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8fcf4:	00c20004 	movi	r3,2048
   8fcf8:	e0bff917 	ldw	r2,-28(fp)
   8fcfc:	1885c83a 	sub	r2,r3,r2
   8fd00:	e0bff615 	stw	r2,-40(fp)
   8fd04:	00000406 	br	8fd18 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8fd08:	00c1ffc4 	movi	r3,2047
   8fd0c:	e0bff917 	ldw	r2,-28(fp)
   8fd10:	1885c83a 	sub	r2,r3,r2
   8fd14:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8fd18:	e0bff617 	ldw	r2,-40(fp)
   8fd1c:	10001e26 	beq	r2,zero,8fd98 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   8fd20:	e0fffe17 	ldw	r3,-8(fp)
   8fd24:	e0bff617 	ldw	r2,-40(fp)
   8fd28:	1880022e 	bgeu	r3,r2,8fd34 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   8fd2c:	e0bffe17 	ldw	r2,-8(fp)
   8fd30:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8fd34:	e0bffc17 	ldw	r2,-16(fp)
   8fd38:	10c20e04 	addi	r3,r2,2104
   8fd3c:	e0bff917 	ldw	r2,-28(fp)
   8fd40:	1885883a 	add	r2,r3,r2
   8fd44:	e1bff617 	ldw	r6,-40(fp)
   8fd48:	e17ffd17 	ldw	r5,-12(fp)
   8fd4c:	1009883a 	mov	r4,r2
   8fd50:	00875700 	call	87570 <memcpy>
      ptr   += n;
   8fd54:	e0fffd17 	ldw	r3,-12(fp)
   8fd58:	e0bff617 	ldw	r2,-40(fp)
   8fd5c:	1885883a 	add	r2,r3,r2
   8fd60:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   8fd64:	e0fffe17 	ldw	r3,-8(fp)
   8fd68:	e0bff617 	ldw	r2,-40(fp)
   8fd6c:	1885c83a 	sub	r2,r3,r2
   8fd70:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8fd74:	e0fff917 	ldw	r3,-28(fp)
   8fd78:	e0bff617 	ldw	r2,-40(fp)
   8fd7c:	1885883a 	add	r2,r3,r2
   8fd80:	10c1ffcc 	andi	r3,r2,2047
   8fd84:	e0bffc17 	ldw	r2,-16(fp)
   8fd88:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8fd8c:	e0bffe17 	ldw	r2,-8(fp)
   8fd90:	00bfc716 	blt	zero,r2,8fcb0 <__alt_data_end+0xfffae230>
   8fd94:	00000106 	br	8fd9c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   8fd98:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fd9c:	0005303a 	rdctl	r2,status
   8fda0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8fda4:	e0fffb17 	ldw	r3,-20(fp)
   8fda8:	00bfff84 	movi	r2,-2
   8fdac:	1884703a 	and	r2,r3,r2
   8fdb0:	1001703a 	wrctl	status,r2
  
  return context;
   8fdb4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8fdb8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8fdbc:	e0bffc17 	ldw	r2,-16(fp)
   8fdc0:	10800817 	ldw	r2,32(r2)
   8fdc4:	10c00094 	ori	r3,r2,2
   8fdc8:	e0bffc17 	ldw	r2,-16(fp)
   8fdcc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8fdd0:	e0bffc17 	ldw	r2,-16(fp)
   8fdd4:	10800017 	ldw	r2,0(r2)
   8fdd8:	10800104 	addi	r2,r2,4
   8fddc:	1007883a 	mov	r3,r2
   8fde0:	e0bffc17 	ldw	r2,-16(fp)
   8fde4:	10800817 	ldw	r2,32(r2)
   8fde8:	18800035 	stwio	r2,0(r3)
   8fdec:	e0bffa17 	ldw	r2,-24(fp)
   8fdf0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fdf4:	e0bff817 	ldw	r2,-32(fp)
   8fdf8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8fdfc:	e0bffe17 	ldw	r2,-8(fp)
   8fe00:	0080100e 	bge	zero,r2,8fe44 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   8fe04:	e0bfff17 	ldw	r2,-4(fp)
   8fe08:	1090000c 	andi	r2,r2,16384
   8fe0c:	1000101e 	bne	r2,zero,8fe50 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8fe10:	0001883a 	nop
   8fe14:	e0bffc17 	ldw	r2,-16(fp)
   8fe18:	10c00d17 	ldw	r3,52(r2)
   8fe1c:	e0bff517 	ldw	r2,-44(fp)
   8fe20:	1880051e 	bne	r3,r2,8fe38 <altera_avalon_jtag_uart_write+0x1b8>
   8fe24:	e0bffc17 	ldw	r2,-16(fp)
   8fe28:	10c00917 	ldw	r3,36(r2)
   8fe2c:	e0bffc17 	ldw	r2,-16(fp)
   8fe30:	10800117 	ldw	r2,4(r2)
   8fe34:	18bff736 	bltu	r3,r2,8fe14 <__alt_data_end+0xfffae394>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   8fe38:	e0bffc17 	ldw	r2,-16(fp)
   8fe3c:	10800917 	ldw	r2,36(r2)
   8fe40:	1000051e 	bne	r2,zero,8fe58 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   8fe44:	e0bffe17 	ldw	r2,-8(fp)
   8fe48:	00bfd016 	blt	zero,r2,8fd8c <__alt_data_end+0xfffae30c>
   8fe4c:	00000306 	br	8fe5c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   8fe50:	0001883a 	nop
   8fe54:	00000106 	br	8fe5c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   8fe58:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8fe5c:	e0fffd17 	ldw	r3,-12(fp)
   8fe60:	e0bff717 	ldw	r2,-36(fp)
   8fe64:	18800426 	beq	r3,r2,8fe78 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   8fe68:	e0fffd17 	ldw	r3,-12(fp)
   8fe6c:	e0bff717 	ldw	r2,-36(fp)
   8fe70:	1885c83a 	sub	r2,r3,r2
   8fe74:	00000606 	br	8fe90 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   8fe78:	e0bfff17 	ldw	r2,-4(fp)
   8fe7c:	1090000c 	andi	r2,r2,16384
   8fe80:	10000226 	beq	r2,zero,8fe8c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   8fe84:	00bffd44 	movi	r2,-11
   8fe88:	00000106 	br	8fe90 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8fe8c:	00bffec4 	movi	r2,-5
}
   8fe90:	e037883a 	mov	sp,fp
   8fe94:	dfc00117 	ldw	ra,4(sp)
   8fe98:	df000017 	ldw	fp,0(sp)
   8fe9c:	dec00204 	addi	sp,sp,8
   8fea0:	f800283a 	ret

0008fea4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   8fea4:	defffa04 	addi	sp,sp,-24
   8fea8:	dfc00515 	stw	ra,20(sp)
   8feac:	df000415 	stw	fp,16(sp)
   8feb0:	df000404 	addi	fp,sp,16
   8feb4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   8feb8:	0007883a 	mov	r3,zero
   8febc:	e0bfff17 	ldw	r2,-4(fp)
   8fec0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   8fec4:	e0bfff17 	ldw	r2,-4(fp)
   8fec8:	10800104 	addi	r2,r2,4
   8fecc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fed0:	0005303a 	rdctl	r2,status
   8fed4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8fed8:	e0fffd17 	ldw	r3,-12(fp)
   8fedc:	00bfff84 	movi	r2,-2
   8fee0:	1884703a 	and	r2,r3,r2
   8fee4:	1001703a 	wrctl	status,r2
  
  return context;
   8fee8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   8feec:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   8fef0:	008f1300 	call	8f130 <alt_tick>
   8fef4:	e0bffc17 	ldw	r2,-16(fp)
   8fef8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fefc:	e0bffe17 	ldw	r2,-8(fp)
   8ff00:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   8ff04:	0001883a 	nop
   8ff08:	e037883a 	mov	sp,fp
   8ff0c:	dfc00117 	ldw	ra,4(sp)
   8ff10:	df000017 	ldw	fp,0(sp)
   8ff14:	dec00204 	addi	sp,sp,8
   8ff18:	f800283a 	ret

0008ff1c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   8ff1c:	defff804 	addi	sp,sp,-32
   8ff20:	dfc00715 	stw	ra,28(sp)
   8ff24:	df000615 	stw	fp,24(sp)
   8ff28:	df000604 	addi	fp,sp,24
   8ff2c:	e13ffc15 	stw	r4,-16(fp)
   8ff30:	e17ffd15 	stw	r5,-12(fp)
   8ff34:	e1bffe15 	stw	r6,-8(fp)
   8ff38:	e1ffff15 	stw	r7,-4(fp)
   8ff3c:	e0bfff17 	ldw	r2,-4(fp)
   8ff40:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   8ff44:	d0a76217 	ldw	r2,-25208(gp)
   8ff48:	1000021e 	bne	r2,zero,8ff54 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   8ff4c:	e0bffb17 	ldw	r2,-20(fp)
   8ff50:	d0a76215 	stw	r2,-25208(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   8ff54:	e0bffc17 	ldw	r2,-16(fp)
   8ff58:	10800104 	addi	r2,r2,4
   8ff5c:	00c001c4 	movi	r3,7
   8ff60:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   8ff64:	d8000015 	stw	zero,0(sp)
   8ff68:	e1fffc17 	ldw	r7,-16(fp)
   8ff6c:	01800274 	movhi	r6,9
   8ff70:	31bfa904 	addi	r6,r6,-348
   8ff74:	e17ffe17 	ldw	r5,-8(fp)
   8ff78:	e13ffd17 	ldw	r4,-12(fp)
   8ff7c:	008e6880 	call	8e688 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   8ff80:	0001883a 	nop
   8ff84:	e037883a 	mov	sp,fp
   8ff88:	dfc00117 	ldw	ra,4(sp)
   8ff8c:	df000017 	ldw	fp,0(sp)
   8ff90:	dec00204 	addi	sp,sp,8
   8ff94:	f800283a 	ret

0008ff98 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8ff98:	defff504 	addi	sp,sp,-44
   8ff9c:	df000a15 	stw	fp,40(sp)
   8ffa0:	df000a04 	addi	fp,sp,40
   8ffa4:	e13ffc15 	stw	r4,-16(fp)
   8ffa8:	e17ffd15 	stw	r5,-12(fp)
   8ffac:	e1bffe15 	stw	r6,-8(fp)
   8ffb0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8ffb4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8ffb8:	d0a76217 	ldw	r2,-25208(gp)
  
  if (alt_ticks_per_second ())
   8ffbc:	10003c26 	beq	r2,zero,900b0 <alt_alarm_start+0x118>
  {
    if (alarm)
   8ffc0:	e0bffc17 	ldw	r2,-16(fp)
   8ffc4:	10003826 	beq	r2,zero,900a8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   8ffc8:	e0bffc17 	ldw	r2,-16(fp)
   8ffcc:	e0fffe17 	ldw	r3,-8(fp)
   8ffd0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   8ffd4:	e0bffc17 	ldw	r2,-16(fp)
   8ffd8:	e0ffff17 	ldw	r3,-4(fp)
   8ffdc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ffe0:	0005303a 	rdctl	r2,status
   8ffe4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ffe8:	e0fff917 	ldw	r3,-28(fp)
   8ffec:	00bfff84 	movi	r2,-2
   8fff0:	1884703a 	and	r2,r3,r2
   8fff4:	1001703a 	wrctl	status,r2
  
  return context;
   8fff8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   8fffc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   90000:	d0a76317 	ldw	r2,-25204(gp)
      
      current_nticks = alt_nticks();
   90004:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   90008:	e0fffd17 	ldw	r3,-12(fp)
   9000c:	e0bff617 	ldw	r2,-40(fp)
   90010:	1885883a 	add	r2,r3,r2
   90014:	10c00044 	addi	r3,r2,1
   90018:	e0bffc17 	ldw	r2,-16(fp)
   9001c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   90020:	e0bffc17 	ldw	r2,-16(fp)
   90024:	10c00217 	ldw	r3,8(r2)
   90028:	e0bff617 	ldw	r2,-40(fp)
   9002c:	1880042e 	bgeu	r3,r2,90040 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   90030:	e0bffc17 	ldw	r2,-16(fp)
   90034:	00c00044 	movi	r3,1
   90038:	10c00405 	stb	r3,16(r2)
   9003c:	00000206 	br	90048 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   90040:	e0bffc17 	ldw	r2,-16(fp)
   90044:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   90048:	e0bffc17 	ldw	r2,-16(fp)
   9004c:	d0e00e04 	addi	r3,gp,-32712
   90050:	e0fffa15 	stw	r3,-24(fp)
   90054:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   90058:	e0bffb17 	ldw	r2,-20(fp)
   9005c:	e0fffa17 	ldw	r3,-24(fp)
   90060:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   90064:	e0bffa17 	ldw	r2,-24(fp)
   90068:	10c00017 	ldw	r3,0(r2)
   9006c:	e0bffb17 	ldw	r2,-20(fp)
   90070:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   90074:	e0bffa17 	ldw	r2,-24(fp)
   90078:	10800017 	ldw	r2,0(r2)
   9007c:	e0fffb17 	ldw	r3,-20(fp)
   90080:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   90084:	e0bffa17 	ldw	r2,-24(fp)
   90088:	e0fffb17 	ldw	r3,-20(fp)
   9008c:	10c00015 	stw	r3,0(r2)
   90090:	e0bff817 	ldw	r2,-32(fp)
   90094:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90098:	e0bff717 	ldw	r2,-36(fp)
   9009c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   900a0:	0005883a 	mov	r2,zero
   900a4:	00000306 	br	900b4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   900a8:	00bffa84 	movi	r2,-22
   900ac:	00000106 	br	900b4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   900b0:	00bfde84 	movi	r2,-134
  }
}
   900b4:	e037883a 	mov	sp,fp
   900b8:	df000017 	ldw	fp,0(sp)
   900bc:	dec00104 	addi	sp,sp,4
   900c0:	f800283a 	ret

000900c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   900c4:	defffe04 	addi	sp,sp,-8
   900c8:	df000115 	stw	fp,4(sp)
   900cc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   900d0:	e03fff15 	stw	zero,-4(fp)
   900d4:	00000506 	br	900ec <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   900d8:	e0bfff17 	ldw	r2,-4(fp)
   900dc:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   900e0:	e0bfff17 	ldw	r2,-4(fp)
   900e4:	10800804 	addi	r2,r2,32
   900e8:	e0bfff15 	stw	r2,-4(fp)
   900ec:	e0bfff17 	ldw	r2,-4(fp)
   900f0:	10820030 	cmpltui	r2,r2,2048
   900f4:	103ff81e 	bne	r2,zero,900d8 <__alt_data_end+0xfffae658>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   900f8:	0001883a 	nop
   900fc:	e037883a 	mov	sp,fp
   90100:	df000017 	ldw	fp,0(sp)
   90104:	dec00104 	addi	sp,sp,4
   90108:	f800283a 	ret

0009010c <alt_get_errno>:
   9010c:	defffe04 	addi	sp,sp,-8
   90110:	dfc00115 	stw	ra,4(sp)
   90114:	df000015 	stw	fp,0(sp)
   90118:	d839883a 	mov	fp,sp
   9011c:	d0a00b17 	ldw	r2,-32724(gp)
   90120:	10000326 	beq	r2,zero,90130 <alt_get_errno+0x24>
   90124:	d0a00b17 	ldw	r2,-32724(gp)
   90128:	103ee83a 	callr	r2
   9012c:	00000106 	br	90134 <alt_get_errno+0x28>
   90130:	d0a75304 	addi	r2,gp,-25268
   90134:	e037883a 	mov	sp,fp
   90138:	dfc00117 	ldw	ra,4(sp)
   9013c:	df000017 	ldw	fp,0(sp)
   90140:	dec00204 	addi	sp,sp,8
   90144:	f800283a 	ret

00090148 <alt_dev_llist_insert>:
   90148:	defffa04 	addi	sp,sp,-24
   9014c:	dfc00515 	stw	ra,20(sp)
   90150:	df000415 	stw	fp,16(sp)
   90154:	df000404 	addi	fp,sp,16
   90158:	e13ffe15 	stw	r4,-8(fp)
   9015c:	e17fff15 	stw	r5,-4(fp)
   90160:	e0bffe17 	ldw	r2,-8(fp)
   90164:	10000326 	beq	r2,zero,90174 <alt_dev_llist_insert+0x2c>
   90168:	e0bffe17 	ldw	r2,-8(fp)
   9016c:	10800217 	ldw	r2,8(r2)
   90170:	1000061e 	bne	r2,zero,9018c <alt_dev_llist_insert+0x44>
   90174:	009010c0 	call	9010c <alt_get_errno>
   90178:	1007883a 	mov	r3,r2
   9017c:	00800584 	movi	r2,22
   90180:	18800015 	stw	r2,0(r3)
   90184:	00bffa84 	movi	r2,-22
   90188:	00001306 	br	901d8 <alt_dev_llist_insert+0x90>
   9018c:	e0bffe17 	ldw	r2,-8(fp)
   90190:	e0ffff17 	ldw	r3,-4(fp)
   90194:	e0fffc15 	stw	r3,-16(fp)
   90198:	e0bffd15 	stw	r2,-12(fp)
   9019c:	e0bffd17 	ldw	r2,-12(fp)
   901a0:	e0fffc17 	ldw	r3,-16(fp)
   901a4:	10c00115 	stw	r3,4(r2)
   901a8:	e0bffc17 	ldw	r2,-16(fp)
   901ac:	10c00017 	ldw	r3,0(r2)
   901b0:	e0bffd17 	ldw	r2,-12(fp)
   901b4:	10c00015 	stw	r3,0(r2)
   901b8:	e0bffc17 	ldw	r2,-16(fp)
   901bc:	10800017 	ldw	r2,0(r2)
   901c0:	e0fffd17 	ldw	r3,-12(fp)
   901c4:	10c00115 	stw	r3,4(r2)
   901c8:	e0bffc17 	ldw	r2,-16(fp)
   901cc:	e0fffd17 	ldw	r3,-12(fp)
   901d0:	10c00015 	stw	r3,0(r2)
   901d4:	0005883a 	mov	r2,zero
   901d8:	e037883a 	mov	sp,fp
   901dc:	dfc00117 	ldw	ra,4(sp)
   901e0:	df000017 	ldw	fp,0(sp)
   901e4:	dec00204 	addi	sp,sp,8
   901e8:	f800283a 	ret

000901ec <_do_ctors>:
   901ec:	defffd04 	addi	sp,sp,-12
   901f0:	dfc00215 	stw	ra,8(sp)
   901f4:	df000115 	stw	fp,4(sp)
   901f8:	df000104 	addi	fp,sp,4
   901fc:	00800274 	movhi	r2,9
   90200:	10836404 	addi	r2,r2,3472
   90204:	e0bfff15 	stw	r2,-4(fp)
   90208:	00000606 	br	90224 <_do_ctors+0x38>
   9020c:	e0bfff17 	ldw	r2,-4(fp)
   90210:	10800017 	ldw	r2,0(r2)
   90214:	103ee83a 	callr	r2
   90218:	e0bfff17 	ldw	r2,-4(fp)
   9021c:	10bfff04 	addi	r2,r2,-4
   90220:	e0bfff15 	stw	r2,-4(fp)
   90224:	e0ffff17 	ldw	r3,-4(fp)
   90228:	00800274 	movhi	r2,9
   9022c:	10836504 	addi	r2,r2,3476
   90230:	18bff62e 	bgeu	r3,r2,9020c <__alt_data_end+0xfffae78c>
   90234:	0001883a 	nop
   90238:	e037883a 	mov	sp,fp
   9023c:	dfc00117 	ldw	ra,4(sp)
   90240:	df000017 	ldw	fp,0(sp)
   90244:	dec00204 	addi	sp,sp,8
   90248:	f800283a 	ret

0009024c <_do_dtors>:
   9024c:	defffd04 	addi	sp,sp,-12
   90250:	dfc00215 	stw	ra,8(sp)
   90254:	df000115 	stw	fp,4(sp)
   90258:	df000104 	addi	fp,sp,4
   9025c:	00800274 	movhi	r2,9
   90260:	10836404 	addi	r2,r2,3472
   90264:	e0bfff15 	stw	r2,-4(fp)
   90268:	00000606 	br	90284 <_do_dtors+0x38>
   9026c:	e0bfff17 	ldw	r2,-4(fp)
   90270:	10800017 	ldw	r2,0(r2)
   90274:	103ee83a 	callr	r2
   90278:	e0bfff17 	ldw	r2,-4(fp)
   9027c:	10bfff04 	addi	r2,r2,-4
   90280:	e0bfff15 	stw	r2,-4(fp)
   90284:	e0ffff17 	ldw	r3,-4(fp)
   90288:	00800274 	movhi	r2,9
   9028c:	10836504 	addi	r2,r2,3476
   90290:	18bff62e 	bgeu	r3,r2,9026c <__alt_data_end+0xfffae7ec>
   90294:	0001883a 	nop
   90298:	e037883a 	mov	sp,fp
   9029c:	dfc00117 	ldw	ra,4(sp)
   902a0:	df000017 	ldw	fp,0(sp)
   902a4:	dec00204 	addi	sp,sp,8
   902a8:	f800283a 	ret

000902ac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   902ac:	defffe04 	addi	sp,sp,-8
   902b0:	dfc00115 	stw	ra,4(sp)
   902b4:	df000015 	stw	fp,0(sp)
   902b8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   902bc:	01440004 	movi	r5,4096
   902c0:	0009883a 	mov	r4,zero
   902c4:	00909700 	call	90970 <alt_icache_flush>
#endif
}
   902c8:	0001883a 	nop
   902cc:	e037883a 	mov	sp,fp
   902d0:	dfc00117 	ldw	ra,4(sp)
   902d4:	df000017 	ldw	fp,0(sp)
   902d8:	dec00204 	addi	sp,sp,8
   902dc:	f800283a 	ret

000902e0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   902e0:	defffe04 	addi	sp,sp,-8
   902e4:	df000115 	stw	fp,4(sp)
   902e8:	df000104 	addi	fp,sp,4
   902ec:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   902f0:	e0bfff17 	ldw	r2,-4(fp)
   902f4:	10bffe84 	addi	r2,r2,-6
   902f8:	10c00428 	cmpgeui	r3,r2,16
   902fc:	18001a1e 	bne	r3,zero,90368 <alt_exception_cause_generated_bad_addr+0x88>
   90300:	100690ba 	slli	r3,r2,2
   90304:	00800274 	movhi	r2,9
   90308:	1080c604 	addi	r2,r2,792
   9030c:	1885883a 	add	r2,r3,r2
   90310:	10800017 	ldw	r2,0(r2)
   90314:	1000683a 	jmp	r2
   90318:	00090358 	cmpnei	zero,zero,9229
   9031c:	00090358 	cmpnei	zero,zero,9229
   90320:	00090368 	cmpgeui	zero,zero,9229
   90324:	00090368 	cmpgeui	zero,zero,9229
   90328:	00090368 	cmpgeui	zero,zero,9229
   9032c:	00090358 	cmpnei	zero,zero,9229
   90330:	00090360 	cmpeqi	zero,zero,9229
   90334:	00090368 	cmpgeui	zero,zero,9229
   90338:	00090358 	cmpnei	zero,zero,9229
   9033c:	00090358 	cmpnei	zero,zero,9229
   90340:	00090368 	cmpgeui	zero,zero,9229
   90344:	00090358 	cmpnei	zero,zero,9229
   90348:	00090360 	cmpeqi	zero,zero,9229
   9034c:	00090368 	cmpgeui	zero,zero,9229
   90350:	00090368 	cmpgeui	zero,zero,9229
   90354:	00090358 	cmpnei	zero,zero,9229
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   90358:	00800044 	movi	r2,1
   9035c:	00000306 	br	9036c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   90360:	0005883a 	mov	r2,zero
   90364:	00000106 	br	9036c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   90368:	0005883a 	mov	r2,zero
  }
}
   9036c:	e037883a 	mov	sp,fp
   90370:	df000017 	ldw	fp,0(sp)
   90374:	dec00104 	addi	sp,sp,4
   90378:	f800283a 	ret

0009037c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   9037c:	defff904 	addi	sp,sp,-28
   90380:	dfc00615 	stw	ra,24(sp)
   90384:	df000515 	stw	fp,20(sp)
   90388:	df000504 	addi	fp,sp,20
   9038c:	e13ffc15 	stw	r4,-16(fp)
   90390:	e17ffd15 	stw	r5,-12(fp)
   90394:	e1bffe15 	stw	r6,-8(fp)
   90398:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   9039c:	e1bfff17 	ldw	r6,-4(fp)
   903a0:	e17ffe17 	ldw	r5,-8(fp)
   903a4:	e13ffd17 	ldw	r4,-12(fp)
   903a8:	00905bc0 	call	905bc <open>
   903ac:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   903b0:	e0bffb17 	ldw	r2,-20(fp)
   903b4:	10001c16 	blt	r2,zero,90428 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   903b8:	00800274 	movhi	r2,9
   903bc:	10872204 	addi	r2,r2,7304
   903c0:	e0fffb17 	ldw	r3,-20(fp)
   903c4:	18c00324 	muli	r3,r3,12
   903c8:	10c5883a 	add	r2,r2,r3
   903cc:	10c00017 	ldw	r3,0(r2)
   903d0:	e0bffc17 	ldw	r2,-16(fp)
   903d4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   903d8:	00800274 	movhi	r2,9
   903dc:	10872204 	addi	r2,r2,7304
   903e0:	e0fffb17 	ldw	r3,-20(fp)
   903e4:	18c00324 	muli	r3,r3,12
   903e8:	10c5883a 	add	r2,r2,r3
   903ec:	10800104 	addi	r2,r2,4
   903f0:	10c00017 	ldw	r3,0(r2)
   903f4:	e0bffc17 	ldw	r2,-16(fp)
   903f8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   903fc:	00800274 	movhi	r2,9
   90400:	10872204 	addi	r2,r2,7304
   90404:	e0fffb17 	ldw	r3,-20(fp)
   90408:	18c00324 	muli	r3,r3,12
   9040c:	10c5883a 	add	r2,r2,r3
   90410:	10800204 	addi	r2,r2,8
   90414:	10c00017 	ldw	r3,0(r2)
   90418:	e0bffc17 	ldw	r2,-16(fp)
   9041c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   90420:	e13ffb17 	ldw	r4,-20(fp)
   90424:	008ef800 	call	8ef80 <alt_release_fd>
  }
} 
   90428:	0001883a 	nop
   9042c:	e037883a 	mov	sp,fp
   90430:	dfc00117 	ldw	ra,4(sp)
   90434:	df000017 	ldw	fp,0(sp)
   90438:	dec00204 	addi	sp,sp,8
   9043c:	f800283a 	ret

00090440 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   90440:	defffb04 	addi	sp,sp,-20
   90444:	dfc00415 	stw	ra,16(sp)
   90448:	df000315 	stw	fp,12(sp)
   9044c:	df000304 	addi	fp,sp,12
   90450:	e13ffd15 	stw	r4,-12(fp)
   90454:	e17ffe15 	stw	r5,-8(fp)
   90458:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   9045c:	01c07fc4 	movi	r7,511
   90460:	01800044 	movi	r6,1
   90464:	e17ffd17 	ldw	r5,-12(fp)
   90468:	01000274 	movhi	r4,9
   9046c:	21072504 	addi	r4,r4,7316
   90470:	009037c0 	call	9037c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   90474:	01c07fc4 	movi	r7,511
   90478:	000d883a 	mov	r6,zero
   9047c:	e17ffe17 	ldw	r5,-8(fp)
   90480:	01000274 	movhi	r4,9
   90484:	21072204 	addi	r4,r4,7304
   90488:	009037c0 	call	9037c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   9048c:	01c07fc4 	movi	r7,511
   90490:	01800044 	movi	r6,1
   90494:	e17fff17 	ldw	r5,-4(fp)
   90498:	01000274 	movhi	r4,9
   9049c:	21072804 	addi	r4,r4,7328
   904a0:	009037c0 	call	9037c <alt_open_fd>
}  
   904a4:	0001883a 	nop
   904a8:	e037883a 	mov	sp,fp
   904ac:	dfc00117 	ldw	ra,4(sp)
   904b0:	df000017 	ldw	fp,0(sp)
   904b4:	dec00204 	addi	sp,sp,8
   904b8:	f800283a 	ret

000904bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   904bc:	defffe04 	addi	sp,sp,-8
   904c0:	dfc00115 	stw	ra,4(sp)
   904c4:	df000015 	stw	fp,0(sp)
   904c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   904cc:	d0a00b17 	ldw	r2,-32724(gp)
   904d0:	10000326 	beq	r2,zero,904e0 <alt_get_errno+0x24>
   904d4:	d0a00b17 	ldw	r2,-32724(gp)
   904d8:	103ee83a 	callr	r2
   904dc:	00000106 	br	904e4 <alt_get_errno+0x28>
   904e0:	d0a75304 	addi	r2,gp,-25268
}
   904e4:	e037883a 	mov	sp,fp
   904e8:	dfc00117 	ldw	ra,4(sp)
   904ec:	df000017 	ldw	fp,0(sp)
   904f0:	dec00204 	addi	sp,sp,8
   904f4:	f800283a 	ret

000904f8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   904f8:	defffd04 	addi	sp,sp,-12
   904fc:	df000215 	stw	fp,8(sp)
   90500:	df000204 	addi	fp,sp,8
   90504:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   90508:	e0bfff17 	ldw	r2,-4(fp)
   9050c:	10800217 	ldw	r2,8(r2)
   90510:	10d00034 	orhi	r3,r2,16384
   90514:	e0bfff17 	ldw	r2,-4(fp)
   90518:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9051c:	e03ffe15 	stw	zero,-8(fp)
   90520:	00001d06 	br	90598 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   90524:	00800274 	movhi	r2,9
   90528:	10872204 	addi	r2,r2,7304
   9052c:	e0fffe17 	ldw	r3,-8(fp)
   90530:	18c00324 	muli	r3,r3,12
   90534:	10c5883a 	add	r2,r2,r3
   90538:	10c00017 	ldw	r3,0(r2)
   9053c:	e0bfff17 	ldw	r2,-4(fp)
   90540:	10800017 	ldw	r2,0(r2)
   90544:	1880111e 	bne	r3,r2,9058c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   90548:	00800274 	movhi	r2,9
   9054c:	10872204 	addi	r2,r2,7304
   90550:	e0fffe17 	ldw	r3,-8(fp)
   90554:	18c00324 	muli	r3,r3,12
   90558:	10c5883a 	add	r2,r2,r3
   9055c:	10800204 	addi	r2,r2,8
   90560:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   90564:	1000090e 	bge	r2,zero,9058c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   90568:	e0bffe17 	ldw	r2,-8(fp)
   9056c:	10c00324 	muli	r3,r2,12
   90570:	00800274 	movhi	r2,9
   90574:	10872204 	addi	r2,r2,7304
   90578:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   9057c:	e0bfff17 	ldw	r2,-4(fp)
   90580:	18800226 	beq	r3,r2,9058c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   90584:	00bffcc4 	movi	r2,-13
   90588:	00000806 	br	905ac <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9058c:	e0bffe17 	ldw	r2,-8(fp)
   90590:	10800044 	addi	r2,r2,1
   90594:	e0bffe15 	stw	r2,-8(fp)
   90598:	d0a00a17 	ldw	r2,-32728(gp)
   9059c:	1007883a 	mov	r3,r2
   905a0:	e0bffe17 	ldw	r2,-8(fp)
   905a4:	18bfdf2e 	bgeu	r3,r2,90524 <__alt_data_end+0xfffaeaa4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   905a8:	0005883a 	mov	r2,zero
}
   905ac:	e037883a 	mov	sp,fp
   905b0:	df000017 	ldw	fp,0(sp)
   905b4:	dec00104 	addi	sp,sp,4
   905b8:	f800283a 	ret

000905bc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   905bc:	defff604 	addi	sp,sp,-40
   905c0:	dfc00915 	stw	ra,36(sp)
   905c4:	df000815 	stw	fp,32(sp)
   905c8:	df000804 	addi	fp,sp,32
   905cc:	e13ffd15 	stw	r4,-12(fp)
   905d0:	e17ffe15 	stw	r5,-8(fp)
   905d4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   905d8:	00bfffc4 	movi	r2,-1
   905dc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   905e0:	00bffb44 	movi	r2,-19
   905e4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   905e8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   905ec:	d1600804 	addi	r5,gp,-32736
   905f0:	e13ffd17 	ldw	r4,-12(fp)
   905f4:	00907340 	call	90734 <alt_find_dev>
   905f8:	e0bff815 	stw	r2,-32(fp)
   905fc:	e0bff817 	ldw	r2,-32(fp)
   90600:	1000051e 	bne	r2,zero,90618 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   90604:	e13ffd17 	ldw	r4,-12(fp)
   90608:	00907c40 	call	907c4 <alt_find_file>
   9060c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   90610:	00800044 	movi	r2,1
   90614:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   90618:	e0bff817 	ldw	r2,-32(fp)
   9061c:	10002926 	beq	r2,zero,906c4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   90620:	e13ff817 	ldw	r4,-32(fp)
   90624:	00908cc0 	call	908cc <alt_get_fd>
   90628:	e0bff915 	stw	r2,-28(fp)
   9062c:	e0bff917 	ldw	r2,-28(fp)
   90630:	1000030e 	bge	r2,zero,90640 <open+0x84>
    {
      status = index;
   90634:	e0bff917 	ldw	r2,-28(fp)
   90638:	e0bffa15 	stw	r2,-24(fp)
   9063c:	00002306 	br	906cc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   90640:	e0bff917 	ldw	r2,-28(fp)
   90644:	10c00324 	muli	r3,r2,12
   90648:	00800274 	movhi	r2,9
   9064c:	10872204 	addi	r2,r2,7304
   90650:	1885883a 	add	r2,r3,r2
   90654:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   90658:	e0fffe17 	ldw	r3,-8(fp)
   9065c:	00900034 	movhi	r2,16384
   90660:	10bfffc4 	addi	r2,r2,-1
   90664:	1886703a 	and	r3,r3,r2
   90668:	e0bffc17 	ldw	r2,-16(fp)
   9066c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   90670:	e0bffb17 	ldw	r2,-20(fp)
   90674:	1000051e 	bne	r2,zero,9068c <open+0xd0>
   90678:	e13ffc17 	ldw	r4,-16(fp)
   9067c:	00904f80 	call	904f8 <alt_file_locked>
   90680:	e0bffa15 	stw	r2,-24(fp)
   90684:	e0bffa17 	ldw	r2,-24(fp)
   90688:	10001016 	blt	r2,zero,906cc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   9068c:	e0bff817 	ldw	r2,-32(fp)
   90690:	10800317 	ldw	r2,12(r2)
   90694:	10000826 	beq	r2,zero,906b8 <open+0xfc>
   90698:	e0bff817 	ldw	r2,-32(fp)
   9069c:	10800317 	ldw	r2,12(r2)
   906a0:	e1ffff17 	ldw	r7,-4(fp)
   906a4:	e1bffe17 	ldw	r6,-8(fp)
   906a8:	e17ffd17 	ldw	r5,-12(fp)
   906ac:	e13ffc17 	ldw	r4,-16(fp)
   906b0:	103ee83a 	callr	r2
   906b4:	00000106 	br	906bc <open+0x100>
   906b8:	0005883a 	mov	r2,zero
   906bc:	e0bffa15 	stw	r2,-24(fp)
   906c0:	00000206 	br	906cc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   906c4:	00bffb44 	movi	r2,-19
   906c8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   906cc:	e0bffa17 	ldw	r2,-24(fp)
   906d0:	1000090e 	bge	r2,zero,906f8 <open+0x13c>
  {
    alt_release_fd (index);  
   906d4:	e13ff917 	ldw	r4,-28(fp)
   906d8:	008ef800 	call	8ef80 <alt_release_fd>
    ALT_ERRNO = -status;
   906dc:	00904bc0 	call	904bc <alt_get_errno>
   906e0:	1007883a 	mov	r3,r2
   906e4:	e0bffa17 	ldw	r2,-24(fp)
   906e8:	0085c83a 	sub	r2,zero,r2
   906ec:	18800015 	stw	r2,0(r3)
    return -1;
   906f0:	00bfffc4 	movi	r2,-1
   906f4:	00000106 	br	906fc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   906f8:	e0bff917 	ldw	r2,-28(fp)
}
   906fc:	e037883a 	mov	sp,fp
   90700:	dfc00117 	ldw	ra,4(sp)
   90704:	df000017 	ldw	fp,0(sp)
   90708:	dec00204 	addi	sp,sp,8
   9070c:	f800283a 	ret

00090710 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   90710:	deffff04 	addi	sp,sp,-4
   90714:	df000015 	stw	fp,0(sp)
   90718:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   9071c:	000170fa 	wrctl	ienable,zero
}
   90720:	0001883a 	nop
   90724:	e037883a 	mov	sp,fp
   90728:	df000017 	ldw	fp,0(sp)
   9072c:	dec00104 	addi	sp,sp,4
   90730:	f800283a 	ret

00090734 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   90734:	defffa04 	addi	sp,sp,-24
   90738:	dfc00515 	stw	ra,20(sp)
   9073c:	df000415 	stw	fp,16(sp)
   90740:	df000404 	addi	fp,sp,16
   90744:	e13ffe15 	stw	r4,-8(fp)
   90748:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   9074c:	e0bfff17 	ldw	r2,-4(fp)
   90750:	10800017 	ldw	r2,0(r2)
   90754:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   90758:	e13ffe17 	ldw	r4,-8(fp)
   9075c:	0081b380 	call	81b38 <strlen>
   90760:	10800044 	addi	r2,r2,1
   90764:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   90768:	00000d06 	br	907a0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   9076c:	e0bffc17 	ldw	r2,-16(fp)
   90770:	10800217 	ldw	r2,8(r2)
   90774:	e0fffd17 	ldw	r3,-12(fp)
   90778:	180d883a 	mov	r6,r3
   9077c:	e17ffe17 	ldw	r5,-8(fp)
   90780:	1009883a 	mov	r4,r2
   90784:	0090a4c0 	call	90a4c <memcmp>
   90788:	1000021e 	bne	r2,zero,90794 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   9078c:	e0bffc17 	ldw	r2,-16(fp)
   90790:	00000706 	br	907b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   90794:	e0bffc17 	ldw	r2,-16(fp)
   90798:	10800017 	ldw	r2,0(r2)
   9079c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   907a0:	e0fffc17 	ldw	r3,-16(fp)
   907a4:	e0bfff17 	ldw	r2,-4(fp)
   907a8:	18bff01e 	bne	r3,r2,9076c <__alt_data_end+0xfffaecec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   907ac:	0005883a 	mov	r2,zero
}
   907b0:	e037883a 	mov	sp,fp
   907b4:	dfc00117 	ldw	ra,4(sp)
   907b8:	df000017 	ldw	fp,0(sp)
   907bc:	dec00204 	addi	sp,sp,8
   907c0:	f800283a 	ret

000907c4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   907c4:	defffb04 	addi	sp,sp,-20
   907c8:	dfc00415 	stw	ra,16(sp)
   907cc:	df000315 	stw	fp,12(sp)
   907d0:	df000304 	addi	fp,sp,12
   907d4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   907d8:	d0a00617 	ldw	r2,-32744(gp)
   907dc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   907e0:	00003106 	br	908a8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   907e4:	e0bffd17 	ldw	r2,-12(fp)
   907e8:	10800217 	ldw	r2,8(r2)
   907ec:	1009883a 	mov	r4,r2
   907f0:	0081b380 	call	81b38 <strlen>
   907f4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   907f8:	e0bffd17 	ldw	r2,-12(fp)
   907fc:	10c00217 	ldw	r3,8(r2)
   90800:	e0bffe17 	ldw	r2,-8(fp)
   90804:	10bfffc4 	addi	r2,r2,-1
   90808:	1885883a 	add	r2,r3,r2
   9080c:	10800003 	ldbu	r2,0(r2)
   90810:	10803fcc 	andi	r2,r2,255
   90814:	1080201c 	xori	r2,r2,128
   90818:	10bfe004 	addi	r2,r2,-128
   9081c:	10800bd8 	cmpnei	r2,r2,47
   90820:	1000031e 	bne	r2,zero,90830 <alt_find_file+0x6c>
    {
      len -= 1;
   90824:	e0bffe17 	ldw	r2,-8(fp)
   90828:	10bfffc4 	addi	r2,r2,-1
   9082c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   90830:	e0bffe17 	ldw	r2,-8(fp)
   90834:	e0ffff17 	ldw	r3,-4(fp)
   90838:	1885883a 	add	r2,r3,r2
   9083c:	10800003 	ldbu	r2,0(r2)
   90840:	10803fcc 	andi	r2,r2,255
   90844:	1080201c 	xori	r2,r2,128
   90848:	10bfe004 	addi	r2,r2,-128
   9084c:	10800be0 	cmpeqi	r2,r2,47
   90850:	1000081e 	bne	r2,zero,90874 <alt_find_file+0xb0>
   90854:	e0bffe17 	ldw	r2,-8(fp)
   90858:	e0ffff17 	ldw	r3,-4(fp)
   9085c:	1885883a 	add	r2,r3,r2
   90860:	10800003 	ldbu	r2,0(r2)
   90864:	10803fcc 	andi	r2,r2,255
   90868:	1080201c 	xori	r2,r2,128
   9086c:	10bfe004 	addi	r2,r2,-128
   90870:	10000a1e 	bne	r2,zero,9089c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   90874:	e0bffd17 	ldw	r2,-12(fp)
   90878:	10800217 	ldw	r2,8(r2)
   9087c:	e0fffe17 	ldw	r3,-8(fp)
   90880:	180d883a 	mov	r6,r3
   90884:	e17fff17 	ldw	r5,-4(fp)
   90888:	1009883a 	mov	r4,r2
   9088c:	0090a4c0 	call	90a4c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   90890:	1000021e 	bne	r2,zero,9089c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   90894:	e0bffd17 	ldw	r2,-12(fp)
   90898:	00000706 	br	908b8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   9089c:	e0bffd17 	ldw	r2,-12(fp)
   908a0:	10800017 	ldw	r2,0(r2)
   908a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   908a8:	e0fffd17 	ldw	r3,-12(fp)
   908ac:	d0a00604 	addi	r2,gp,-32744
   908b0:	18bfcc1e 	bne	r3,r2,907e4 <__alt_data_end+0xfffaed64>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   908b4:	0005883a 	mov	r2,zero
}
   908b8:	e037883a 	mov	sp,fp
   908bc:	dfc00117 	ldw	ra,4(sp)
   908c0:	df000017 	ldw	fp,0(sp)
   908c4:	dec00204 	addi	sp,sp,8
   908c8:	f800283a 	ret

000908cc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   908cc:	defffc04 	addi	sp,sp,-16
   908d0:	df000315 	stw	fp,12(sp)
   908d4:	df000304 	addi	fp,sp,12
   908d8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   908dc:	00bffa04 	movi	r2,-24
   908e0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   908e4:	e03ffd15 	stw	zero,-12(fp)
   908e8:	00001906 	br	90950 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   908ec:	00800274 	movhi	r2,9
   908f0:	10872204 	addi	r2,r2,7304
   908f4:	e0fffd17 	ldw	r3,-12(fp)
   908f8:	18c00324 	muli	r3,r3,12
   908fc:	10c5883a 	add	r2,r2,r3
   90900:	10800017 	ldw	r2,0(r2)
   90904:	10000f1e 	bne	r2,zero,90944 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   90908:	00800274 	movhi	r2,9
   9090c:	10872204 	addi	r2,r2,7304
   90910:	e0fffd17 	ldw	r3,-12(fp)
   90914:	18c00324 	muli	r3,r3,12
   90918:	10c5883a 	add	r2,r2,r3
   9091c:	e0ffff17 	ldw	r3,-4(fp)
   90920:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   90924:	d0e00a17 	ldw	r3,-32728(gp)
   90928:	e0bffd17 	ldw	r2,-12(fp)
   9092c:	1880020e 	bge	r3,r2,90938 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   90930:	e0bffd17 	ldw	r2,-12(fp)
   90934:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   90938:	e0bffd17 	ldw	r2,-12(fp)
   9093c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   90940:	00000606 	br	9095c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   90944:	e0bffd17 	ldw	r2,-12(fp)
   90948:	10800044 	addi	r2,r2,1
   9094c:	e0bffd15 	stw	r2,-12(fp)
   90950:	e0bffd17 	ldw	r2,-12(fp)
   90954:	10800810 	cmplti	r2,r2,32
   90958:	103fe41e 	bne	r2,zero,908ec <__alt_data_end+0xfffaee6c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   9095c:	e0bffe17 	ldw	r2,-8(fp)
}
   90960:	e037883a 	mov	sp,fp
   90964:	df000017 	ldw	fp,0(sp)
   90968:	dec00104 	addi	sp,sp,4
   9096c:	f800283a 	ret

00090970 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   90970:	defffb04 	addi	sp,sp,-20
   90974:	df000415 	stw	fp,16(sp)
   90978:	df000404 	addi	fp,sp,16
   9097c:	e13ffe15 	stw	r4,-8(fp)
   90980:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   90984:	e0bfff17 	ldw	r2,-4(fp)
   90988:	10840070 	cmpltui	r2,r2,4097
   9098c:	1000021e 	bne	r2,zero,90998 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   90990:	00840004 	movi	r2,4096
   90994:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   90998:	e0fffe17 	ldw	r3,-8(fp)
   9099c:	e0bfff17 	ldw	r2,-4(fp)
   909a0:	1885883a 	add	r2,r3,r2
   909a4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   909a8:	e0bffe17 	ldw	r2,-8(fp)
   909ac:	e0bffc15 	stw	r2,-16(fp)
   909b0:	00000506 	br	909c8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   909b4:	e0bffc17 	ldw	r2,-16(fp)
   909b8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   909bc:	e0bffc17 	ldw	r2,-16(fp)
   909c0:	10800804 	addi	r2,r2,32
   909c4:	e0bffc15 	stw	r2,-16(fp)
   909c8:	e0fffc17 	ldw	r3,-16(fp)
   909cc:	e0bffd17 	ldw	r2,-12(fp)
   909d0:	18bff836 	bltu	r3,r2,909b4 <__alt_data_end+0xfffaef34>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   909d4:	e0bffe17 	ldw	r2,-8(fp)
   909d8:	108007cc 	andi	r2,r2,31
   909dc:	10000226 	beq	r2,zero,909e8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   909e0:	e0bffc17 	ldw	r2,-16(fp)
   909e4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   909e8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   909ec:	0001883a 	nop
   909f0:	e037883a 	mov	sp,fp
   909f4:	df000017 	ldw	fp,0(sp)
   909f8:	dec00104 	addi	sp,sp,4
   909fc:	f800283a 	ret

00090a00 <atexit>:
   90a00:	200b883a 	mov	r5,r4
   90a04:	000f883a 	mov	r7,zero
   90a08:	000d883a 	mov	r6,zero
   90a0c:	0009883a 	mov	r4,zero
   90a10:	0090ac81 	jmpi	90ac8 <__register_exitproc>

00090a14 <exit>:
   90a14:	defffe04 	addi	sp,sp,-8
   90a18:	000b883a 	mov	r5,zero
   90a1c:	dc000015 	stw	r16,0(sp)
   90a20:	dfc00115 	stw	ra,4(sp)
   90a24:	2021883a 	mov	r16,r4
   90a28:	0090be00 	call	90be0 <__call_exitprocs>
   90a2c:	00800274 	movhi	r2,9
   90a30:	108b9a04 	addi	r2,r2,11880
   90a34:	11000017 	ldw	r4,0(r2)
   90a38:	20800f17 	ldw	r2,60(r4)
   90a3c:	10000126 	beq	r2,zero,90a44 <exit+0x30>
   90a40:	103ee83a 	callr	r2
   90a44:	8009883a 	mov	r4,r16
   90a48:	0090d600 	call	90d60 <_exit>

00090a4c <memcmp>:
   90a4c:	01c000c4 	movi	r7,3
   90a50:	3980192e 	bgeu	r7,r6,90ab8 <memcmp+0x6c>
   90a54:	2144b03a 	or	r2,r4,r5
   90a58:	11c4703a 	and	r2,r2,r7
   90a5c:	10000f26 	beq	r2,zero,90a9c <memcmp+0x50>
   90a60:	20800003 	ldbu	r2,0(r4)
   90a64:	28c00003 	ldbu	r3,0(r5)
   90a68:	10c0151e 	bne	r2,r3,90ac0 <memcmp+0x74>
   90a6c:	31bfff84 	addi	r6,r6,-2
   90a70:	01ffffc4 	movi	r7,-1
   90a74:	00000406 	br	90a88 <memcmp+0x3c>
   90a78:	20800003 	ldbu	r2,0(r4)
   90a7c:	28c00003 	ldbu	r3,0(r5)
   90a80:	31bfffc4 	addi	r6,r6,-1
   90a84:	10c00e1e 	bne	r2,r3,90ac0 <memcmp+0x74>
   90a88:	21000044 	addi	r4,r4,1
   90a8c:	29400044 	addi	r5,r5,1
   90a90:	31fff91e 	bne	r6,r7,90a78 <__alt_data_end+0xfffaeff8>
   90a94:	0005883a 	mov	r2,zero
   90a98:	f800283a 	ret
   90a9c:	20c00017 	ldw	r3,0(r4)
   90aa0:	28800017 	ldw	r2,0(r5)
   90aa4:	18bfee1e 	bne	r3,r2,90a60 <__alt_data_end+0xfffaefe0>
   90aa8:	31bfff04 	addi	r6,r6,-4
   90aac:	21000104 	addi	r4,r4,4
   90ab0:	29400104 	addi	r5,r5,4
   90ab4:	39bff936 	bltu	r7,r6,90a9c <__alt_data_end+0xfffaf01c>
   90ab8:	303fe91e 	bne	r6,zero,90a60 <__alt_data_end+0xfffaefe0>
   90abc:	003ff506 	br	90a94 <__alt_data_end+0xfffaf014>
   90ac0:	10c5c83a 	sub	r2,r2,r3
   90ac4:	f800283a 	ret

00090ac8 <__register_exitproc>:
   90ac8:	defffa04 	addi	sp,sp,-24
   90acc:	dc000315 	stw	r16,12(sp)
   90ad0:	04000274 	movhi	r16,9
   90ad4:	840b9a04 	addi	r16,r16,11880
   90ad8:	80c00017 	ldw	r3,0(r16)
   90adc:	dc400415 	stw	r17,16(sp)
   90ae0:	dfc00515 	stw	ra,20(sp)
   90ae4:	18805217 	ldw	r2,328(r3)
   90ae8:	2023883a 	mov	r17,r4
   90aec:	10003726 	beq	r2,zero,90bcc <__register_exitproc+0x104>
   90af0:	10c00117 	ldw	r3,4(r2)
   90af4:	010007c4 	movi	r4,31
   90af8:	20c00e16 	blt	r4,r3,90b34 <__register_exitproc+0x6c>
   90afc:	1a000044 	addi	r8,r3,1
   90b00:	8800221e 	bne	r17,zero,90b8c <__register_exitproc+0xc4>
   90b04:	18c00084 	addi	r3,r3,2
   90b08:	18c7883a 	add	r3,r3,r3
   90b0c:	18c7883a 	add	r3,r3,r3
   90b10:	12000115 	stw	r8,4(r2)
   90b14:	10c7883a 	add	r3,r2,r3
   90b18:	19400015 	stw	r5,0(r3)
   90b1c:	0005883a 	mov	r2,zero
   90b20:	dfc00517 	ldw	ra,20(sp)
   90b24:	dc400417 	ldw	r17,16(sp)
   90b28:	dc000317 	ldw	r16,12(sp)
   90b2c:	dec00604 	addi	sp,sp,24
   90b30:	f800283a 	ret
   90b34:	00800034 	movhi	r2,0
   90b38:	10800004 	addi	r2,r2,0
   90b3c:	10002626 	beq	r2,zero,90bd8 <__register_exitproc+0x110>
   90b40:	01006404 	movi	r4,400
   90b44:	d9400015 	stw	r5,0(sp)
   90b48:	d9800115 	stw	r6,4(sp)
   90b4c:	d9c00215 	stw	r7,8(sp)
   90b50:	00000000 	call	0 <__alt_mem_onchip_memory2-0x80000>
   90b54:	d9400017 	ldw	r5,0(sp)
   90b58:	d9800117 	ldw	r6,4(sp)
   90b5c:	d9c00217 	ldw	r7,8(sp)
   90b60:	10001d26 	beq	r2,zero,90bd8 <__register_exitproc+0x110>
   90b64:	81000017 	ldw	r4,0(r16)
   90b68:	10000115 	stw	zero,4(r2)
   90b6c:	02000044 	movi	r8,1
   90b70:	22405217 	ldw	r9,328(r4)
   90b74:	0007883a 	mov	r3,zero
   90b78:	12400015 	stw	r9,0(r2)
   90b7c:	20805215 	stw	r2,328(r4)
   90b80:	10006215 	stw	zero,392(r2)
   90b84:	10006315 	stw	zero,396(r2)
   90b88:	883fde26 	beq	r17,zero,90b04 <__alt_data_end+0xfffaf084>
   90b8c:	18c9883a 	add	r4,r3,r3
   90b90:	2109883a 	add	r4,r4,r4
   90b94:	1109883a 	add	r4,r2,r4
   90b98:	21802215 	stw	r6,136(r4)
   90b9c:	01800044 	movi	r6,1
   90ba0:	12406217 	ldw	r9,392(r2)
   90ba4:	30cc983a 	sll	r6,r6,r3
   90ba8:	4992b03a 	or	r9,r9,r6
   90bac:	12406215 	stw	r9,392(r2)
   90bb0:	21c04215 	stw	r7,264(r4)
   90bb4:	01000084 	movi	r4,2
   90bb8:	893fd21e 	bne	r17,r4,90b04 <__alt_data_end+0xfffaf084>
   90bbc:	11006317 	ldw	r4,396(r2)
   90bc0:	218cb03a 	or	r6,r4,r6
   90bc4:	11806315 	stw	r6,396(r2)
   90bc8:	003fce06 	br	90b04 <__alt_data_end+0xfffaf084>
   90bcc:	18805304 	addi	r2,r3,332
   90bd0:	18805215 	stw	r2,328(r3)
   90bd4:	003fc606 	br	90af0 <__alt_data_end+0xfffaf070>
   90bd8:	00bfffc4 	movi	r2,-1
   90bdc:	003fd006 	br	90b20 <__alt_data_end+0xfffaf0a0>

00090be0 <__call_exitprocs>:
   90be0:	defff504 	addi	sp,sp,-44
   90be4:	df000915 	stw	fp,36(sp)
   90be8:	dd400615 	stw	r21,24(sp)
   90bec:	dc800315 	stw	r18,12(sp)
   90bf0:	dfc00a15 	stw	ra,40(sp)
   90bf4:	ddc00815 	stw	r23,32(sp)
   90bf8:	dd800715 	stw	r22,28(sp)
   90bfc:	dd000515 	stw	r20,20(sp)
   90c00:	dcc00415 	stw	r19,16(sp)
   90c04:	dc400215 	stw	r17,8(sp)
   90c08:	dc000115 	stw	r16,4(sp)
   90c0c:	d9000015 	stw	r4,0(sp)
   90c10:	2839883a 	mov	fp,r5
   90c14:	04800044 	movi	r18,1
   90c18:	057fffc4 	movi	r21,-1
   90c1c:	00800274 	movhi	r2,9
   90c20:	108b9a04 	addi	r2,r2,11880
   90c24:	12000017 	ldw	r8,0(r2)
   90c28:	45005217 	ldw	r20,328(r8)
   90c2c:	44c05204 	addi	r19,r8,328
   90c30:	a0001c26 	beq	r20,zero,90ca4 <__call_exitprocs+0xc4>
   90c34:	a0800117 	ldw	r2,4(r20)
   90c38:	15ffffc4 	addi	r23,r2,-1
   90c3c:	b8000d16 	blt	r23,zero,90c74 <__call_exitprocs+0x94>
   90c40:	14000044 	addi	r16,r2,1
   90c44:	8421883a 	add	r16,r16,r16
   90c48:	8421883a 	add	r16,r16,r16
   90c4c:	84402004 	addi	r17,r16,128
   90c50:	a463883a 	add	r17,r20,r17
   90c54:	a421883a 	add	r16,r20,r16
   90c58:	e0001e26 	beq	fp,zero,90cd4 <__call_exitprocs+0xf4>
   90c5c:	80804017 	ldw	r2,256(r16)
   90c60:	e0801c26 	beq	fp,r2,90cd4 <__call_exitprocs+0xf4>
   90c64:	bdffffc4 	addi	r23,r23,-1
   90c68:	843fff04 	addi	r16,r16,-4
   90c6c:	8c7fff04 	addi	r17,r17,-4
   90c70:	bd7ff91e 	bne	r23,r21,90c58 <__alt_data_end+0xfffaf1d8>
   90c74:	00800034 	movhi	r2,0
   90c78:	10800004 	addi	r2,r2,0
   90c7c:	10000926 	beq	r2,zero,90ca4 <__call_exitprocs+0xc4>
   90c80:	a0800117 	ldw	r2,4(r20)
   90c84:	1000301e 	bne	r2,zero,90d48 <__call_exitprocs+0x168>
   90c88:	a0800017 	ldw	r2,0(r20)
   90c8c:	10003226 	beq	r2,zero,90d58 <__call_exitprocs+0x178>
   90c90:	a009883a 	mov	r4,r20
   90c94:	98800015 	stw	r2,0(r19)
   90c98:	00000000 	call	0 <__alt_mem_onchip_memory2-0x80000>
   90c9c:	9d000017 	ldw	r20,0(r19)
   90ca0:	a03fe41e 	bne	r20,zero,90c34 <__alt_data_end+0xfffaf1b4>
   90ca4:	dfc00a17 	ldw	ra,40(sp)
   90ca8:	df000917 	ldw	fp,36(sp)
   90cac:	ddc00817 	ldw	r23,32(sp)
   90cb0:	dd800717 	ldw	r22,28(sp)
   90cb4:	dd400617 	ldw	r21,24(sp)
   90cb8:	dd000517 	ldw	r20,20(sp)
   90cbc:	dcc00417 	ldw	r19,16(sp)
   90cc0:	dc800317 	ldw	r18,12(sp)
   90cc4:	dc400217 	ldw	r17,8(sp)
   90cc8:	dc000117 	ldw	r16,4(sp)
   90ccc:	dec00b04 	addi	sp,sp,44
   90cd0:	f800283a 	ret
   90cd4:	a0800117 	ldw	r2,4(r20)
   90cd8:	80c00017 	ldw	r3,0(r16)
   90cdc:	10bfffc4 	addi	r2,r2,-1
   90ce0:	15c01426 	beq	r2,r23,90d34 <__call_exitprocs+0x154>
   90ce4:	80000015 	stw	zero,0(r16)
   90ce8:	183fde26 	beq	r3,zero,90c64 <__alt_data_end+0xfffaf1e4>
   90cec:	95c8983a 	sll	r4,r18,r23
   90cf0:	a0806217 	ldw	r2,392(r20)
   90cf4:	a5800117 	ldw	r22,4(r20)
   90cf8:	2084703a 	and	r2,r4,r2
   90cfc:	10000b26 	beq	r2,zero,90d2c <__call_exitprocs+0x14c>
   90d00:	a0806317 	ldw	r2,396(r20)
   90d04:	2088703a 	and	r4,r4,r2
   90d08:	20000c1e 	bne	r4,zero,90d3c <__call_exitprocs+0x15c>
   90d0c:	89400017 	ldw	r5,0(r17)
   90d10:	d9000017 	ldw	r4,0(sp)
   90d14:	183ee83a 	callr	r3
   90d18:	a0800117 	ldw	r2,4(r20)
   90d1c:	15bfbf1e 	bne	r2,r22,90c1c <__alt_data_end+0xfffaf19c>
   90d20:	98800017 	ldw	r2,0(r19)
   90d24:	153fcf26 	beq	r2,r20,90c64 <__alt_data_end+0xfffaf1e4>
   90d28:	003fbc06 	br	90c1c <__alt_data_end+0xfffaf19c>
   90d2c:	183ee83a 	callr	r3
   90d30:	003ff906 	br	90d18 <__alt_data_end+0xfffaf298>
   90d34:	a5c00115 	stw	r23,4(r20)
   90d38:	003feb06 	br	90ce8 <__alt_data_end+0xfffaf268>
   90d3c:	89000017 	ldw	r4,0(r17)
   90d40:	183ee83a 	callr	r3
   90d44:	003ff406 	br	90d18 <__alt_data_end+0xfffaf298>
   90d48:	a0800017 	ldw	r2,0(r20)
   90d4c:	a027883a 	mov	r19,r20
   90d50:	1029883a 	mov	r20,r2
   90d54:	003fb606 	br	90c30 <__alt_data_end+0xfffaf1b0>
   90d58:	0005883a 	mov	r2,zero
   90d5c:	003ffb06 	br	90d4c <__alt_data_end+0xfffaf2cc>

00090d60 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   90d60:	defffd04 	addi	sp,sp,-12
   90d64:	df000215 	stw	fp,8(sp)
   90d68:	df000204 	addi	fp,sp,8
   90d6c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   90d70:	0001883a 	nop
   90d74:	e0bfff17 	ldw	r2,-4(fp)
   90d78:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   90d7c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   90d80:	10000226 	beq	r2,zero,90d8c <_exit+0x2c>
    ALT_SIM_FAIL();
   90d84:	002af070 	cmpltui	zero,zero,43969
   90d88:	00000106 	br	90d90 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   90d8c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   90d90:	003fff06 	br	90d90 <__alt_data_end+0xfffaf310>
