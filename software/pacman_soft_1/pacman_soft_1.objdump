
pacman_soft_1.elf:     file format elf32-littlenios2
pacman_soft_1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080244

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00010a28 memsz 0x00010a28 flags r-x
    LOAD off    0x00011a48 vaddr 0x00090a48 paddr 0x000925e8 align 2**12
         filesz 0x00001ba0 memsz 0x00001ba0 flags rw-
    LOAD off    0x00014188 vaddr 0x00094188 paddr 0x00094188 align 2**12
         filesz 0x00000000 memsz 0x00000170 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000103c4  00080244  00080244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000440  00090608  00090608  00011608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ba0  00090a48  000925e8  00011a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000170  00094188  00094188  00014188  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  000942f8  000942f8  000135e8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000135e8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fc0  00000000  00000000  00013610  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00025d8d  00000000  00000000  000145d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009b37  00000000  00000000  0003a35d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bf54  00000000  00000000  00043e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000023ec  00000000  00000000  0004fde8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003c00  00000000  00000000  000521d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017a63  00000000  00000000  00055dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006d838  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001910  00000000  00000000  0006d868  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00072676  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00072679  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00072683  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00072684  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00072685  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00072689  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0007268d  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00072691  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007269a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000726a3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  000726ac  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001e  00000000  00000000  000726b5  2**0
                  CONTENTS, READONLY
 29 .jdi          0000677d  00000000  00000000  000726d3  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0009ebd3  00000000  00000000  00078e50  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080244 l    d  .text	00000000 .text
00090608 l    d  .rodata	00000000 .rodata
00090a48 l    d  .rwdata	00000000 .rwdata
00094188 l    d  .bss	00000000 .bss
000942f8 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pacman_soft_1_bsp//obj/HAL/src/crt0.o
0008028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 background.c
00090a48 l     O .rwdata	0000003c background
00000000 l    df *ABS*	00000000 main.c
00090a84 l     O .rwdata	0000003c background
00080334 l     F .text	00000068 refresh_position_interrupt_handler
0008039c l     F .text	00000048 left_button_interrupt_handler
000803e4 l     F .text	00000048 up_button_interrupt_handler
0008042c l     F .text	00000048 down_button_interrupt_handler
00080474 l     F .text	00000048 right_button_interrupt_handler
00000000 l    df *ABS*	00000000 refresh_position.c
00090ac0 l     O .rwdata	0000003c background
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
00090796 l     O .rodata	00000010 zeroes.4404
000836a8 l     F .text	000000bc __sbprintf
000907a6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000838b8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000853e8 l     F .text	00000008 __fp_unlock
000853fc l     F .text	0000019c __sinit.part.1
00085598 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
00090afc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00090f40 l     O .rwdata	00000020 lc_ctype_charset
00090f20 l     O .rwdata	00000020 lc_message_charset
00090f60 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000907d8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000889f0 l     F .text	000000fc __sprint_r.part.0
0009090c l     O .rodata	00000010 blanks.4348
000908fc l     O .rodata	00000010 zeroes.4349
00089f7c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0008dae4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008dbf0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008dc1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0008e31c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008e3fc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008e4e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0008e6bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000925dc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0008eaac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008ebe0 l     F .text	00000034 alt_dev_reg
00091548 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008eed4 l     F .text	0000020c altera_avalon_jtag_uart_irq
0008f0e0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0008f718 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008f980 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008fbf0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0008fd30 l     F .text	0000003c alt_get_errno
0008fd6c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00080290 g     F .text	000000a4 set_background_in_memory
000941cc g     O .bss	00000004 alt_instruction_exception_handler
00088034 g     F .text	00000074 _mprec_log10
00088120 g     F .text	0000008c __any_on
0008a518 g     F .text	00000054 _isatty_r
000907e4 g     O .rodata	00000028 __mprec_tinytens
0008e5f8 g     F .text	0000007c alt_main
0008125c g     F .text	000000c0 _puts_r
000941f8 g     O .bss	00000100 alt_irq
0008a56c g     F .text	00000060 _lseek_r
000925e8 g       *ABS*	00000000 __flash_rwdata_start
0008c610 g     F .text	00000088 .hidden __eqdf2
00086200 g     F .text	0000005c _gettimeofday_r
0008081c g     F .text	00000090 init_position
000942f8 g       *ABS*	00000000 __alt_heap_start
00081220 g     F .text	0000003c printf
0008a784 g     F .text	0000009c _wcrtomb_r
000888b0 g     F .text	0000005c __sseek
00085738 g     F .text	00000010 __sinit
0008a62c g     F .text	00000140 __swbuf_r
0008625c g     F .text	0000007c _setlocale_r
000855a0 g     F .text	00000068 __sfmoreglue
0008e698 g     F .text	00000024 __malloc_unlock
00086f2c g     F .text	0000015c memmove
00085720 g     F .text	00000018 _cleanup
000871b0 g     F .text	000000a8 _Balloc
0008c698 g     F .text	000000dc .hidden __gtdf2
0008ff84 g     F .text	00000024 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000001c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
0008a4bc g     F .text	0000005c _fstat_r
00094188 g     O .bss	00000004 errno
0008882c g     F .text	00000008 __seofread
000941bc g     O .bss	00000004 alt_argv
0009a5a8 g       *ABS*	00000000 _gp
000913c8 g     O .rwdata	00000180 alt_fd_list
0008ffa8 g     F .text	00000090 alt_find_dev
00086de4 g     F .text	00000148 memcpy
000853f0 g     F .text	0000000c _cleanup_r
0008d8fc g     F .text	000000dc .hidden __floatsidf
0008fcb4 g     F .text	0000007c alt_io_redirect
0008c774 g     F .text	000000f4 .hidden __ltdf2
00090608 g       *ABS*	00000000 __DTOR_END__
00080f38 g     F .text	00000104 randomDirection
0008131c g     F .text	00000014 puts
0008fb54 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00088710 g     F .text	00000074 __fpclassifyd
00087f90 g     F .text	000000a4 __ratio
00089f60 g     F .text	0000001c __vfiprintf_internal
0008f2d8 g     F .text	0000021c altera_avalon_jtag_uart_read
000811f0 g     F .text	00000030 _printf_r
00081134 g     F .text	00000064 .hidden __udivsi3
0008e358 g     F .text	000000a4 isatty
00090834 g     O .rodata	000000c8 __mprec_tens
000862d8 g     F .text	0000000c __locale_charset
000941a4 g     O .bss	00000008 alt_timezone
000901e4 g     F .text	00000090 alt_icache_flush
000941a0 g     O .bss	00000004 __malloc_top_pad
000925b0 g     O .rwdata	00000004 __mb_cur_max
00086308 g     F .text	0000000c _localeconv_r
000875bc g     F .text	0000003c __i2b
00085bbc g     F .text	000004bc __sfvwrite_r
00088784 g     F .text	00000054 _sbrk_r
0008a5cc g     F .text	00000060 _read_r
000925d0 g     O .rwdata	00000004 alt_max_fd
0008a1b0 g     F .text	000000f0 _fclose_r
000853b8 g     F .text	00000030 fflush
0009419c g     O .bss	00000004 __malloc_max_sbrked_mem
0008e19c g     F .text	00000180 alt_irq_register
0008b47c g     F .text	000008ac .hidden __adddf3
00087d38 g     F .text	0000010c __b2d
0008af44 g     F .text	00000538 .hidden __umoddi3
0008e524 g     F .text	000000d4 lseek
000925a8 g     O .rwdata	00000004 _global_impure_ptr
000881ac g     F .text	00000564 _realloc_r
000942f8 g       *ABS*	00000000 __bss_end
0008e0ac g     F .text	000000f0 alt_iic_isr_register
0008e9a4 g     F .text	00000108 alt_tick
0008a9cc g     F .text	00000578 .hidden __udivdi3
0008a418 g     F .text	00000024 _fputwc_r
0009080c g     O .rodata	00000028 __mprec_bigtens
000873a0 g     F .text	00000104 __s2b
0008d9d8 g     F .text	000000a8 .hidden __floatunsidf
00087a78 g     F .text	00000060 __mcmp
00085758 g     F .text	00000018 __fp_lock_all
0008e060 g     F .text	0000004c alt_ic_irq_enabled
0008e908 g     F .text	0000009c alt_alarm_stop
000941b4 g     O .bss	00000004 alt_irq_active
00080754 g     F .text	00000084 compute_byte_packet
000800fc g     F .exceptions	000000d4 alt_irq_handler
000913a0 g     O .rwdata	00000028 alt_dev_null
0008f938 g     F .text	00000048 alt_dcache_flush_all
000874a4 g     F .text	00000068 __hi0bits
0008d87c g     F .text	00000080 .hidden __fixdfsi
00080ab8 g     F .text	00000090 get_block_with_coordinates
000925e8 g       *ABS*	00000000 __ram_rwdata_end
000925c8 g     O .rwdata	00000008 alt_dev_list
0008eae8 g     F .text	000000f8 write
00090a48 g       *ABS*	00000000 __ram_rodata_end
0008dc58 g     F .text	000000b0 fstat
0008c774 g     F .text	000000f4 .hidden __ledf2
000877f0 g     F .text	00000140 __pow5mult
00088b04 g     F .text	0000145c ___vfiprintf_internal_r
00094194 g     O .bss	00000004 __nlocale_changed
00081198 g     F .text	00000058 .hidden __umodsi3
000942f8 g       *ABS*	00000000 end
0008ee14 g     F .text	000000c0 altera_avalon_jtag_uart_init
000801d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00090608 g       *ABS*	00000000 __CTOR_LIST__
000cbaf0 g       *ABS*	00000000 __alt_stack_pointer
0008f790 g     F .text	0000007c alt_avalon_timer_sc_init
0008da80 g     F .text	00000064 .hidden __clzsi2
0008f4f4 g     F .text	00000224 altera_avalon_jtag_uart_write
00085748 g     F .text	00000004 __sfp_lock_acquire
00086d00 g     F .text	000000e4 memchr
00081494 g     F .text	000021f8 ___vfprintf_internal_r
000858ac g     F .text	00000310 _free_r
000862e4 g     F .text	00000010 __locale_mb_cur_max
00090454 g     F .text	00000180 __call_exitprocs
00094190 g     O .bss	00000004 __mlocale_changed
000925b4 g     O .rwdata	00000004 __malloc_sbrk_base
00080244 g     F .text	0000004c _start
000941c4 g     O .bss	00000004 _alt_tick_rate
00081348 g     F .text	00000064 rand
00087930 g     F .text	00000148 __lshift
000941c8 g     O .bss	00000004 _alt_nticks
0008e6f8 g     F .text	000000fc read
0008ec4c g     F .text	00000064 alt_sys_init
0009033c g     F .text	00000118 __register_exitproc
000875f8 g     F .text	000001f8 __multiply
0008f180 g     F .text	00000068 altera_avalon_jtag_uart_close
00090a48 g       *ABS*	00000000 __ram_rwdata_start
00090608 g       *ABS*	00000000 __ram_rodata_start
000941d0 g     O .bss	00000028 __malloc_current_mallinfo
00087e44 g     F .text	0000014c __d2b
0008ecb0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00090140 g     F .text	000000a4 alt_get_fd
0008a098 g     F .text	00000054 _close_r
000902c0 g     F .text	0000007c memcmp
0008ed70 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000942f8 g       *ABS*	00000000 __alt_stack_base
0008edc0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00083764 g     F .text	00000154 __swsetup_r
0008bd28 g     F .text	000008e8 .hidden __divdf3
00085608 g     F .text	00000118 __sfp
000880a8 g     F .text	00000078 __copybits
00090f98 g     O .rwdata	00000408 __malloc_av_
00085754 g     F .text	00000004 __sinit_lock_release
0008c868 g     F .text	00000718 .hidden __muldf3
000887d8 g     F .text	00000054 __sread
00090038 g     F .text	00000108 alt_find_file
0008f9bc g     F .text	000000a4 alt_dev_llist_insert
0008e674 g     F .text	00000024 __malloc_lock
0008e858 g     F .text	000000b0 sbrk
0008535c g     F .text	0000005c _fflush_r
0008a0ec g     F .text	000000c4 _calloc_r
0008dd08 g     F .text	000001f4 gettimeofday
000808ac g     F .text	0000020c compute_collision
00094188 g       *ABS*	00000000 __bss_start
00087088 g     F .text	00000128 memset
000804bc g     F .text	00000298 main
000941c0 g     O .bss	00000004 alt_envp
00094198 g     O .bss	00000004 __malloc_max_total_mem
0008ed10 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008a76c g     F .text	00000018 __swbuf
00081330 g     F .text	00000018 srand
0008890c g     F .text	00000008 __sclose
000cbaf0 g       *ABS*	00000000 __alt_heap_limit
0008a2a0 g     F .text	00000014 fclose
00083ab8 g     F .text	00001688 _dtoa_r
000864f4 g     F .text	0000080c _malloc_r
0008a8e0 g     F .text	00000030 __ascii_wctomb
00081444 g     F .text	00000050 time
000925d4 g     O .rwdata	00000004 alt_errno
00086078 g     F .text	000000c4 _fwalk
0008103c g     F .text	00000084 .hidden __divsi3
00085788 g     F .text	00000124 _malloc_trim_r
00090608 g       *ABS*	00000000 __CTOR_END__
000807d8 g     F .text	00000044 initCollision
00088914 g     F .text	000000dc strcmp
00090608 g       *ABS*	00000000 __flash_rodata_start
00090608 g       *ABS*	00000000 __DTOR_LIST__
0008c610 g     F .text	00000088 .hidden __nedf2
0008ec14 g     F .text	00000038 alt_irq_init
0008e7f4 g     F .text	00000064 alt_release_fd
0009091c g     O .rodata	00000100 .hidden __clz_tab
0009418c g     O .bss	00000004 _PathLocale
00090274 g     F .text	00000014 atexit
0008a038 g     F .text	00000060 _write_r
00086314 g     F .text	00000018 setlocale
000925ac g     O .rwdata	00000004 _impure_ptr
000941b8 g     O .bss	00000004 alt_argc
00085140 g     F .text	0000021c __sflush_r
0008fac0 g     F .text	00000060 _do_dtors
00086300 g     F .text	00000008 __locale_cjk_lang
00080020 g       .exceptions	00000000 alt_irq_entry
00087cd4 g     F .text	00000064 __ulp
00085770 g     F .text	00000018 __fp_unlock_all
000925c0 g     O .rwdata	00000008 alt_fs_list
000941ac g     O .bss	00000008 alt_resettime
00080020 g       *ABS*	00000000 __ram_exceptions_start
0008632c g     F .text	0000000c localeconv
00080b48 g     F .text	00000240 refresh_position
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0008defc g     F .text	00000050 alt_ic_isr_register
000925e8 g       *ABS*	00000000 _edata
000942f8 g       *ABS*	00000000 _end
0008a2b4 g     F .text	00000164 __fputwc
00080244 g       *ABS*	00000000 __ram_exceptions_end
0008f1e8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0008dfd4 g     F .text	0000008c alt_ic_irq_disable
00088834 g     F .text	0000007c __swrite
000925b8 g     O .rwdata	00000004 __malloc_trim_threshold
000862f4 g     F .text	0000000c __locale_msgcharset
00090288 g     F .text	00000038 exit
0008613c g     F .text	000000c4 _fwalk_reent
00087ad8 g     F .text	000001fc __mdiff
000810c0 g     F .text	00000074 .hidden __modsi3
000cbaf0 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
0008574c g     F .text	00000004 __sfp_lock_release
000905d4 g     F .text	00000034 _exit
0008f80c g     F .text	0000012c alt_alarm_start
0008a96c g     F .text	00000060 .hidden __muldi3
00086338 g     F .text	000001bc __smakebuf_r
000813ac g     F .text	00000098 strlen
0008fe30 g     F .text	00000154 open
0008c698 g     F .text	000000dc .hidden __gedf2
000925bc g     O .rwdata	00000004 __wctomb
00088aec g     F .text	00000018 __sprint_r
0008fb20 g     F .text	00000034 alt_icache_flush_all
000925d8 g     O .rwdata	00000004 alt_priority_mask
0008df4c g     F .text	00000088 alt_ic_irq_enable
0008368c g     F .text	0000001c __vfprintf_internal
0008a910 g     F .text	0000005c _wctomb_r
0008cf80 g     F .text	000008fc .hidden __subdf3
0008750c g     F .text	000000b0 __lo0bits
000925e0 g     O .rwdata	00000008 alt_alarm_list
0008fa60 g     F .text	00000060 _do_ctors
0008a820 g     F .text	000000c0 wcrtomb
0008db20 g     F .text	000000d0 close
00080d88 g     F .text	000001b0 refresh_position_keepGoing
0008e464 g     F .text	00000084 alt_load
0008a43c g     F .text	00000080 fputwc
00085750 g     F .text	00000004 __sinit_lock_acquire
00087280 g     F .text	00000120 __multadd
00087258 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__alt_data_end+0xfffb4514>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08409114 	ori	at,at,580
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800274 	movhi	r2,9
   80140:	10907e04 	addi	r2,r2,16888
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800274 	movhi	r2,9
   80158:	10907e04 	addi	r2,r2,16888
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <__alt_data_end+0xfffb463c>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <__alt_data_end+0xfffb4630>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	0001883a 	nop
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   801e4:	000531fa 	rdctl	r2,exception
   801e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   801ec:	e0bffd17 	ldw	r2,-12(fp)
   801f0:	10801f0c 	andi	r2,r2,124
   801f4:	1004d0ba 	srli	r2,r2,2
   801f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   801fc:	0005333a 	rdctl	r2,badaddr
   80200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   80204:	d0a70917 	ldw	r2,-25564(gp)
   80208:	10000726 	beq	r2,zero,80228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   8020c:	d0a70917 	ldw	r2,-25564(gp)
   80210:	e0fffd17 	ldw	r3,-12(fp)
   80214:	e1bffe17 	ldw	r6,-8(fp)
   80218:	e17fff17 	ldw	r5,-4(fp)
   8021c:	1809883a 	mov	r4,r3
   80220:	103ee83a 	callr	r2
   80224:	00000206 	br	80230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   8022c:	0005883a 	mov	r2,zero
}
   80230:	e037883a 	mov	sp,fp
   80234:	dfc00117 	ldw	ra,4(sp)
   80238:	df000017 	ldw	fp,0(sp)
   8023c:	dec00204 	addi	sp,sp,8
   80240:	f800283a 	ret

Disassembly of section .text:

00080244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   80244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   80248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   8024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   80250:	00bffd16 	blt	zero,r2,80248 <__alt_data_end+0xfffb4758>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80254:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   80258:	deeebc14 	ori	sp,sp,47856
    movhi gp, %hi(_gp)
   8025c:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   80260:	d6a96a14 	ori	gp,gp,42408
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80264:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   80268:	10906214 	ori	r2,r2,16776

    movhi r3, %hi(__bss_end)
   8026c:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   80270:	18d0be14 	ori	r3,r3,17144

    beq r2, r3, 1f
   80274:	10c00326 	beq	r2,r3,80284 <_start+0x40>

0:
    stw zero, (r2)
   80278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   8027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80280:	10fffd36 	bltu	r2,r3,80278 <__alt_data_end+0xfffb4788>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80284:	008e4640 	call	8e464 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80288:	008e5f80 	call	8e5f8 <alt_main>

0008028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   8028c:	003fff06 	br	8028c <__alt_data_end+0xfffb479c>

00080290 <set_background_in_memory>:


#include "background.h"

void set_background_in_memory(alt_u32 background[15])
{
   80290:	defffd04 	addi	sp,sp,-12
   80294:	df000215 	stw	fp,8(sp)
   80298:	df000204 	addi	fp,sp,8
   8029c:	e13fff15 	stw	r4,-4(fp)
	for(int i=0; i<16; i++){
   802a0:	e03ffe15 	stw	zero,-8(fp)
   802a4:	00001b06 	br	80314 <set_background_in_memory+0x84>
		IOWR_32DIRECT(BACKGROUND_DATA_BASE, 0, background[i]);
   802a8:	e0bffe17 	ldw	r2,-8(fp)
   802ac:	1085883a 	add	r2,r2,r2
   802b0:	1085883a 	add	r2,r2,r2
   802b4:	1007883a 	mov	r3,r2
   802b8:	e0bfff17 	ldw	r2,-4(fp)
   802bc:	10c5883a 	add	r2,r2,r3
   802c0:	10800017 	ldw	r2,0(r2)
   802c4:	1007883a 	mov	r3,r2
   802c8:	00800434 	movhi	r2,16
   802cc:	10842c04 	addi	r2,r2,4272
   802d0:	10c00035 	stwio	r3,0(r2)
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b00000 + i);
   802d4:	00800434 	movhi	r2,16
   802d8:	10842804 	addi	r2,r2,4256
   802dc:	e0fffe03 	ldbu	r3,-8(fp)
   802e0:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b10000 + i);
   802e4:	e0bffe17 	ldw	r2,-8(fp)
   802e8:	10c00404 	addi	r3,r2,16
   802ec:	00800434 	movhi	r2,16
   802f0:	10842804 	addi	r2,r2,4256
   802f4:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b00000 + i);
   802f8:	00800434 	movhi	r2,16
   802fc:	10842804 	addi	r2,r2,4256
   80300:	e0fffe03 	ldbu	r3,-8(fp)
   80304:	10c00025 	stbio	r3,0(r2)

#include "background.h"

void set_background_in_memory(alt_u32 background[15])
{
	for(int i=0; i<16; i++){
   80308:	e0bffe17 	ldw	r2,-8(fp)
   8030c:	10800044 	addi	r2,r2,1
   80310:	e0bffe15 	stw	r2,-8(fp)
   80314:	e0bffe17 	ldw	r2,-8(fp)
   80318:	10800410 	cmplti	r2,r2,16
   8031c:	103fe21e 	bne	r2,zero,802a8 <__alt_data_end+0xfffb47b8>
		IOWR_32DIRECT(BACKGROUND_DATA_BASE, 0, background[i]);
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b00000 + i);
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b10000 + i);
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b00000 + i);
	}
}
   80320:	0001883a 	nop
   80324:	e037883a 	mov	sp,fp
   80328:	df000017 	ldw	fp,0(sp)
   8032c:	dec00104 	addi	sp,sp,4
   80330:	f800283a 	ret

00080334 <refresh_position_interrupt_handler>:

static void refresh_position_interrupt_handler(void* context)
/* interrupt handler : this function is called each time a new frame is build (60Hz)
 * it calls *refresh_position()* function and ensures the char doesn't go out of the frame.
*/
{
   80334:	defffc04 	addi	sp,sp,-16
   80338:	dfc00315 	stw	ra,12(sp)
   8033c:	df000215 	stw	fp,8(sp)
   80340:	df000204 	addi	fp,sp,8
   80344:	e13fff15 	stw	r4,-4(fp)
	position* p_pacmanPosition = (position*) context;
   80348:	e0bfff17 	ldw	r2,-4(fp)
   8034c:	e0bffe15 	stw	r2,-8(fp)
	refresh_position(p_pacmanPosition, 0);
   80350:	000b883a 	mov	r5,zero
   80354:	e13ffe17 	ldw	r4,-8(fp)
   80358:	0080b480 	call	80b48 <refresh_position>
	IOWR_32DIRECT(POSITION_BASE, 0, p_pacmanPosition->bytePacket);
   8035c:	e0bffe17 	ldw	r2,-8(fp)
   80360:	10800517 	ldw	r2,20(r2)
   80364:	1007883a 	mov	r3,r2
   80368:	00800434 	movhi	r2,16
   8036c:	10843404 	addi	r2,r2,4304
   80370:	10c00035 	stwio	r3,0(r2)
	IOWR(REFRESH_BASE,3,0xf);
   80374:	00c003c4 	movi	r3,15
   80378:	00800434 	movhi	r2,16
   8037c:	10843304 	addi	r2,r2,4300
   80380:	10c00035 	stwio	r3,0(r2)
}
   80384:	0001883a 	nop
   80388:	e037883a 	mov	sp,fp
   8038c:	dfc00117 	ldw	ra,4(sp)
   80390:	df000017 	ldw	fp,0(sp)
   80394:	dec00204 	addi	sp,sp,8
   80398:	f800283a 	ret

0008039c <left_button_interrupt_handler>:

static void left_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the left button direction is pressed */
{
   8039c:	defffd04 	addi	sp,sp,-12
   803a0:	df000215 	stw	fp,8(sp)
   803a4:	df000204 	addi	fp,sp,8
   803a8:	e13fff15 	stw	r4,-4(fp)
	position* p_pacmanPosition = (position*) context;
   803ac:	e0bfff17 	ldw	r2,-4(fp)
   803b0:	e0bffe15 	stw	r2,-8(fp)
	p_pacmanPosition->directionControl = LEFT;
   803b4:	e0bffe17 	ldw	r2,-8(fp)
   803b8:	00c00104 	movi	r3,4
   803bc:	10c00715 	stw	r3,28(r2)
	IOWR(LEFT_BUTTON_BASE,3,0xf);
   803c0:	00c003c4 	movi	r3,15
   803c4:	00800434 	movhi	r2,16
   803c8:	10842704 	addi	r2,r2,4252
   803cc:	10c00035 	stwio	r3,0(r2)
}
   803d0:	0001883a 	nop
   803d4:	e037883a 	mov	sp,fp
   803d8:	df000017 	ldw	fp,0(sp)
   803dc:	dec00104 	addi	sp,sp,4
   803e0:	f800283a 	ret

000803e4 <up_button_interrupt_handler>:

static void up_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the up button direction is pressed */
{
   803e4:	defffd04 	addi	sp,sp,-12
   803e8:	df000215 	stw	fp,8(sp)
   803ec:	df000204 	addi	fp,sp,8
   803f0:	e13fff15 	stw	r4,-4(fp)
	position* p_pacmanPosition = (position*) context;
   803f4:	e0bfff17 	ldw	r2,-4(fp)
   803f8:	e0bffe15 	stw	r2,-8(fp)
	p_pacmanPosition->directionControl = DOWN;
   803fc:	e0bffe17 	ldw	r2,-8(fp)
   80400:	00c000c4 	movi	r3,3
   80404:	10c00715 	stw	r3,28(r2)
	IOWR(UP_BUTTON_BASE,3,0xf);
   80408:	00c003c4 	movi	r3,15
   8040c:	00800434 	movhi	r2,16
   80410:	10842304 	addi	r2,r2,4236
   80414:	10c00035 	stwio	r3,0(r2)
}
   80418:	0001883a 	nop
   8041c:	e037883a 	mov	sp,fp
   80420:	df000017 	ldw	fp,0(sp)
   80424:	dec00104 	addi	sp,sp,4
   80428:	f800283a 	ret

0008042c <down_button_interrupt_handler>:

static void down_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the down button direction is pressed */
{
   8042c:	defffd04 	addi	sp,sp,-12
   80430:	df000215 	stw	fp,8(sp)
   80434:	df000204 	addi	fp,sp,8
   80438:	e13fff15 	stw	r4,-4(fp)
	position* p_pacmanPosition = (position*) context;
   8043c:	e0bfff17 	ldw	r2,-4(fp)
   80440:	e0bffe15 	stw	r2,-8(fp)
	p_pacmanPosition->directionControl = UP;
   80444:	e0bffe17 	ldw	r2,-8(fp)
   80448:	00c00044 	movi	r3,1
   8044c:	10c00715 	stw	r3,28(r2)
	IOWR(DOWN_BUTTON_BASE,3,0xf);
   80450:	00c003c4 	movi	r3,15
   80454:	00800434 	movhi	r2,16
   80458:	10841f04 	addi	r2,r2,4220
   8045c:	10c00035 	stwio	r3,0(r2)
}
   80460:	0001883a 	nop
   80464:	e037883a 	mov	sp,fp
   80468:	df000017 	ldw	fp,0(sp)
   8046c:	dec00104 	addi	sp,sp,4
   80470:	f800283a 	ret

00080474 <right_button_interrupt_handler>:

static void right_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the right button direction is pressed */
{
   80474:	defffd04 	addi	sp,sp,-12
   80478:	df000215 	stw	fp,8(sp)
   8047c:	df000204 	addi	fp,sp,8
   80480:	e13fff15 	stw	r4,-4(fp)
	position* p_pacmanPosition = (position*) context;
   80484:	e0bfff17 	ldw	r2,-4(fp)
   80488:	e0bffe15 	stw	r2,-8(fp)
	p_pacmanPosition->directionControl = RIGHT;
   8048c:	e0bffe17 	ldw	r2,-8(fp)
   80490:	00c00084 	movi	r3,2
   80494:	10c00715 	stw	r3,28(r2)
	IOWR(RIGHT_BUTTON_BASE,3,0xf);
   80498:	00c003c4 	movi	r3,15
   8049c:	00800434 	movhi	r2,16
   804a0:	10841b04 	addi	r2,r2,4204
   804a4:	10c00035 	stwio	r3,0(r2)
}
   804a8:	0001883a 	nop
   804ac:	e037883a 	mov	sp,fp
   804b0:	df000017 	ldw	fp,0(sp)
   804b4:	dec00104 	addi	sp,sp,4
   804b8:	f800283a 	ret

000804bc <main>:

int main()
{
   804bc:	defff304 	addi	sp,sp,-52
   804c0:	dfc00c15 	stw	ra,48(sp)
   804c4:	df000b15 	stw	fp,44(sp)
   804c8:	df000b04 	addi	fp,sp,44
	set_background_in_memory(background);
   804cc:	01000274 	movhi	r4,9
   804d0:	2102a104 	addi	r4,r4,2692
   804d4:	00802900 	call	80290 <set_background_in_memory>

	position pacmanPosition;
	init_position(&pacmanPosition, 0, 60, 60, ACTIVE, SOUTH);
   804d8:	e0fff804 	addi	r3,fp,-32
   804dc:	008000c4 	movi	r2,3
   804e0:	d8800115 	stw	r2,4(sp)
   804e4:	00800044 	movi	r2,1
   804e8:	d8800015 	stw	r2,0(sp)
   804ec:	01c00f04 	movi	r7,60
   804f0:	01800f04 	movi	r6,60
   804f4:	000b883a 	mov	r5,zero
   804f8:	1809883a 	mov	r4,r3
   804fc:	008081c0 	call	8081c <init_position>
	compute_collision(&pacmanPosition);
   80500:	e0bff804 	addi	r2,fp,-32
   80504:	1009883a 	mov	r4,r2
   80508:	00808ac0 	call	808ac <compute_collision>

	printf("Hello from Nios II!\n");
   8050c:	01000274 	movhi	r4,9
   80510:	21018204 	addi	r4,r4,1544
   80514:	008131c0 	call	8131c <puts>

	//IRQ initialization
	IOWR(REFRESH_BASE,2,0xf); //enable interrupt
   80518:	00c003c4 	movi	r3,15
   8051c:	00800434 	movhi	r2,16
   80520:	10843204 	addi	r2,r2,4296
   80524:	10c00035 	stwio	r3,0(r2)
	IOWR(REFRESH_BASE,3,0xf); //clear edge register
   80528:	00c003c4 	movi	r3,15
   8052c:	00800434 	movhi	r2,16
   80530:	10843304 	addi	r2,r2,4300
   80534:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(REFRESH_IRQ,(void*)&pacmanPosition,refresh_position_interrupt_handler);
   80538:	e0bff804 	addi	r2,fp,-32
   8053c:	01800234 	movhi	r6,8
   80540:	3180cd04 	addi	r6,r6,820
   80544:	100b883a 	mov	r5,r2
   80548:	010000c4 	movi	r4,3
   8054c:	008e19c0 	call	8e19c <alt_irq_register>
	printf("Refresh IRQ : ");
   80550:	01000274 	movhi	r4,9
   80554:	21018704 	addi	r4,r4,1564
   80558:	00812200 	call	81220 <printf>
	printf("alt_ic_irq_enabled : %lu \n", alt_ic_irq_enabled(REFRESH_IRQ_INTERRUPT_CONTROLLER_ID, REFRESH_IRQ));
   8055c:	014000c4 	movi	r5,3
   80560:	0009883a 	mov	r4,zero
   80564:	008e0600 	call	8e060 <alt_ic_irq_enabled>
   80568:	100b883a 	mov	r5,r2
   8056c:	01000274 	movhi	r4,9
   80570:	21018b04 	addi	r4,r4,1580
   80574:	00812200 	call	81220 <printf>

	//Left button IRQ initialization
	IOWR(LEFT_BUTTON_BASE,2,0xf); //enable interrupt
   80578:	00c003c4 	movi	r3,15
   8057c:	00800434 	movhi	r2,16
   80580:	10842604 	addi	r2,r2,4248
   80584:	10c00035 	stwio	r3,0(r2)
	IOWR(LEFT_BUTTON_BASE,3,0xf); //clear edge register
   80588:	00c003c4 	movi	r3,15
   8058c:	00800434 	movhi	r2,16
   80590:	10842704 	addi	r2,r2,4252
   80594:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(LEFT_BUTTON_IRQ,(void*)&pacmanPosition,left_button_interrupt_handler);
   80598:	e0bff804 	addi	r2,fp,-32
   8059c:	01800234 	movhi	r6,8
   805a0:	3180e704 	addi	r6,r6,924
   805a4:	100b883a 	mov	r5,r2
   805a8:	01000104 	movi	r4,4
   805ac:	008e19c0 	call	8e19c <alt_irq_register>
	printf("Left button IRQ : ");
   805b0:	01000274 	movhi	r4,9
   805b4:	21019204 	addi	r4,r4,1608
   805b8:	00812200 	call	81220 <printf>
	printf("left_button_irq_enabled : %lu \n", alt_ic_irq_enabled(LEFT_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID, LEFT_BUTTON_IRQ));
   805bc:	01400104 	movi	r5,4
   805c0:	0009883a 	mov	r4,zero
   805c4:	008e0600 	call	8e060 <alt_ic_irq_enabled>
   805c8:	100b883a 	mov	r5,r2
   805cc:	01000274 	movhi	r4,9
   805d0:	21019704 	addi	r4,r4,1628
   805d4:	00812200 	call	81220 <printf>

	//Up button IRQ initialization
	IOWR(UP_BUTTON_BASE,2,0xf); //enable interrupt
   805d8:	00c003c4 	movi	r3,15
   805dc:	00800434 	movhi	r2,16
   805e0:	10842204 	addi	r2,r2,4232
   805e4:	10c00035 	stwio	r3,0(r2)
	IOWR(UP_BUTTON_BASE,3,0xf); //clear edge register
   805e8:	00c003c4 	movi	r3,15
   805ec:	00800434 	movhi	r2,16
   805f0:	10842304 	addi	r2,r2,4236
   805f4:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(UP_BUTTON_IRQ,(void*)&pacmanPosition,up_button_interrupt_handler);
   805f8:	e0bff804 	addi	r2,fp,-32
   805fc:	01800234 	movhi	r6,8
   80600:	3180f904 	addi	r6,r6,996
   80604:	100b883a 	mov	r5,r2
   80608:	01000144 	movi	r4,5
   8060c:	008e19c0 	call	8e19c <alt_irq_register>
	printf("Up button IRQ : ");
   80610:	01000274 	movhi	r4,9
   80614:	21019f04 	addi	r4,r4,1660
   80618:	00812200 	call	81220 <printf>
	printf("up_button_irq_enabled : %lu \n", alt_ic_irq_enabled(UP_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID, UP_BUTTON_IRQ));
   8061c:	01400144 	movi	r5,5
   80620:	0009883a 	mov	r4,zero
   80624:	008e0600 	call	8e060 <alt_ic_irq_enabled>
   80628:	100b883a 	mov	r5,r2
   8062c:	01000274 	movhi	r4,9
   80630:	2101a404 	addi	r4,r4,1680
   80634:	00812200 	call	81220 <printf>

	//Down button IRQ initialization
	IOWR(DOWN_BUTTON_BASE,2,0xf); //enable interrupt
   80638:	00c003c4 	movi	r3,15
   8063c:	00800434 	movhi	r2,16
   80640:	10841e04 	addi	r2,r2,4216
   80644:	10c00035 	stwio	r3,0(r2)
	IOWR(DOWN_BUTTON_BASE,3,0xf); //clear edge register
   80648:	00c003c4 	movi	r3,15
   8064c:	00800434 	movhi	r2,16
   80650:	10841f04 	addi	r2,r2,4220
   80654:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(DOWN_BUTTON_IRQ,(void*)&pacmanPosition,down_button_interrupt_handler);
   80658:	e0bff804 	addi	r2,fp,-32
   8065c:	01800234 	movhi	r6,8
   80660:	31810b04 	addi	r6,r6,1068
   80664:	100b883a 	mov	r5,r2
   80668:	01000184 	movi	r4,6
   8066c:	008e19c0 	call	8e19c <alt_irq_register>
	printf("Down button IRQ : ");
   80670:	01000274 	movhi	r4,9
   80674:	2101ac04 	addi	r4,r4,1712
   80678:	00812200 	call	81220 <printf>
	printf("down_button_irq_enabled : %lu \n", alt_ic_irq_enabled(DOWN_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID, DOWN_BUTTON_IRQ));
   8067c:	01400184 	movi	r5,6
   80680:	0009883a 	mov	r4,zero
   80684:	008e0600 	call	8e060 <alt_ic_irq_enabled>
   80688:	100b883a 	mov	r5,r2
   8068c:	01000274 	movhi	r4,9
   80690:	2101b104 	addi	r4,r4,1732
   80694:	00812200 	call	81220 <printf>

	//Right button IRQ initialization
	IOWR(RIGHT_BUTTON_BASE,2,0xf); //enable interrupt
   80698:	00c003c4 	movi	r3,15
   8069c:	00800434 	movhi	r2,16
   806a0:	10841a04 	addi	r2,r2,4200
   806a4:	10c00035 	stwio	r3,0(r2)
	IOWR(RIGHT_BUTTON_BASE,3,0xf); //clear edge register
   806a8:	00c003c4 	movi	r3,15
   806ac:	00800434 	movhi	r2,16
   806b0:	10841b04 	addi	r2,r2,4204
   806b4:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(RIGHT_BUTTON_IRQ,(void*)&pacmanPosition,right_button_interrupt_handler);
   806b8:	e0bff804 	addi	r2,fp,-32
   806bc:	01800234 	movhi	r6,8
   806c0:	31811d04 	addi	r6,r6,1140
   806c4:	100b883a 	mov	r5,r2
   806c8:	010001c4 	movi	r4,7
   806cc:	008e19c0 	call	8e19c <alt_irq_register>
	printf("Right button IRQ : ");
   806d0:	01000274 	movhi	r4,9
   806d4:	2101b904 	addi	r4,r4,1764
   806d8:	00812200 	call	81220 <printf>
	printf("right_button_irq_enabled : %lu \n", alt_ic_irq_enabled(RIGHT_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID, RIGHT_BUTTON_IRQ));
   806dc:	014001c4 	movi	r5,7
   806e0:	0009883a 	mov	r4,zero
   806e4:	008e0600 	call	8e060 <alt_ic_irq_enabled>
   806e8:	100b883a 	mov	r5,r2
   806ec:	01000274 	movhi	r4,9
   806f0:	2101be04 	addi	r4,r4,1784
   806f4:	00812200 	call	81220 <printf>

	printf("%lu\n", background[1]);
   806f8:	00800274 	movhi	r2,9
   806fc:	1082a104 	addi	r2,r2,2692
   80700:	10800117 	ldw	r2,4(r2)
   80704:	100b883a 	mov	r5,r2
   80708:	01000274 	movhi	r4,9
   8070c:	2101c704 	addi	r4,r4,1820
   80710:	00812200 	call	81220 <printf>

	long whileCounter = 0;
   80714:	e03ff715 	stw	zero,-36(fp)
	while(1)
	{
		whileCounter++;
   80718:	e0bff717 	ldw	r2,-36(fp)
   8071c:	10800044 	addi	r2,r2,1
   80720:	e0bff715 	stw	r2,-36(fp)
		if (whileCounter > 30000){
   80724:	e0bff717 	ldw	r2,-36(fp)
   80728:	109d4c50 	cmplti	r2,r2,30001
   8072c:	103ffa1e 	bne	r2,zero,80718 <__alt_data_end+0xfffb4c28>
//				irq_counter[2],
//				irq_counter[1],
//				irq_counter[0]
//			);
			printf("directionControl : %u, orientation : %u \n",
					pacmanPosition.directionControl,
   80730:	e0bfff17 	ldw	r2,-4(fp)
					pacmanPosition.orientation
   80734:	e0fffc17 	ldw	r3,-16(fp)
//				irq_counter[3],
//				irq_counter[2],
//				irq_counter[1],
//				irq_counter[0]
//			);
			printf("directionControl : %u, orientation : %u \n",
   80738:	180d883a 	mov	r6,r3
   8073c:	100b883a 	mov	r5,r2
   80740:	01000274 	movhi	r4,9
   80744:	2101c904 	addi	r4,r4,1828
   80748:	00812200 	call	81220 <printf>
					pacmanPosition.directionControl,
					pacmanPosition.orientation
			);
			whileCounter = 0;
   8074c:	e03ff715 	stw	zero,-36(fp)
			//pacmanPosition.directionControl = ((pacmanPosition.orientation + 2*(rand()%2))%4) + 1 ;
		}
	}
   80750:	003ff106 	br	80718 <__alt_data_end+0xfffb4c28>

00080754 <compute_byte_packet>:
#define MOVEMENT_STEP 5

void compute_byte_packet(position* charPosition)
//computes the binary data sent to the logic given the other arguments (position, orientation,...)
//contained in the structure position
{
   80754:	defffe04 	addi	sp,sp,-8
   80758:	df000115 	stw	fp,4(sp)
   8075c:	df000104 	addi	fp,sp,4
   80760:	e13fff15 	stw	r4,-4(fp)
	charPosition->bytePacket = (charPosition->charId << 29) + (charPosition->positionX << 17 ) + (charPosition->positionY << 5) + (charPosition->state << 2) + (charPosition->orientation );
   80764:	e0bfff17 	ldw	r2,-4(fp)
   80768:	10800003 	ldbu	r2,0(r2)
   8076c:	10803fcc 	andi	r2,r2,255
   80770:	1004977a 	slli	r2,r2,29
   80774:	1007883a 	mov	r3,r2
   80778:	e0bfff17 	ldw	r2,-4(fp)
   8077c:	10800117 	ldw	r2,4(r2)
   80780:	1004947a 	slli	r2,r2,17
   80784:	1887883a 	add	r3,r3,r2
   80788:	e0bfff17 	ldw	r2,-4(fp)
   8078c:	10800217 	ldw	r2,8(r2)
   80790:	1004917a 	slli	r2,r2,5
   80794:	1887883a 	add	r3,r3,r2
   80798:	e0bfff17 	ldw	r2,-4(fp)
   8079c:	10800303 	ldbu	r2,12(r2)
   807a0:	10803fcc 	andi	r2,r2,255
   807a4:	1085883a 	add	r2,r2,r2
   807a8:	1085883a 	add	r2,r2,r2
   807ac:	1887883a 	add	r3,r3,r2
   807b0:	e0bfff17 	ldw	r2,-4(fp)
   807b4:	10800417 	ldw	r2,16(r2)
   807b8:	1887883a 	add	r3,r3,r2
   807bc:	e0bfff17 	ldw	r2,-4(fp)
   807c0:	10c00515 	stw	r3,20(r2)
}
   807c4:	0001883a 	nop
   807c8:	e037883a 	mov	sp,fp
   807cc:	df000017 	ldw	fp,0(sp)
   807d0:	dec00104 	addi	sp,sp,4
   807d4:	f800283a 	ret

000807d8 <initCollision>:

void initCollision(position* charPosition){
   807d8:	defffe04 	addi	sp,sp,-8
   807dc:	df000115 	stw	fp,4(sp)
   807e0:	df000104 	addi	fp,sp,4
   807e4:	e13fff15 	stw	r4,-4(fp)
	charPosition->collision.north = 0;
   807e8:	e0bfff17 	ldw	r2,-4(fp)
   807ec:	10000605 	stb	zero,24(r2)
	charPosition->collision.east = 0;
   807f0:	e0bfff17 	ldw	r2,-4(fp)
   807f4:	10000645 	stb	zero,25(r2)
	charPosition->collision.south = 0;
   807f8:	e0bfff17 	ldw	r2,-4(fp)
   807fc:	10000685 	stb	zero,26(r2)
	charPosition->collision.west = 0;
   80800:	e0bfff17 	ldw	r2,-4(fp)
   80804:	100006c5 	stb	zero,27(r2)
}
   80808:	0001883a 	nop
   8080c:	e037883a 	mov	sp,fp
   80810:	df000017 	ldw	fp,0(sp)
   80814:	dec00104 	addi	sp,sp,4
   80818:	f800283a 	ret

0008081c <init_position>:

void init_position(position* charPosition, alt_u8 charId, alt_u32 positionX, alt_u32 positionY, alt_u8 state, orientation orientation)
//initialize the charPosition with the given arguments
{
   8081c:	defff904 	addi	sp,sp,-28
   80820:	dfc00615 	stw	ra,24(sp)
   80824:	df000515 	stw	fp,20(sp)
   80828:	df000504 	addi	fp,sp,20
   8082c:	e13ffb15 	stw	r4,-20(fp)
   80830:	2807883a 	mov	r3,r5
   80834:	e1bffd15 	stw	r6,-12(fp)
   80838:	e1fffe15 	stw	r7,-8(fp)
   8083c:	e0800217 	ldw	r2,8(fp)
   80840:	e0fffc05 	stb	r3,-16(fp)
   80844:	e0bfff05 	stb	r2,-4(fp)
	charPosition->charId = charId ;
   80848:	e0bffb17 	ldw	r2,-20(fp)
   8084c:	e0fffc03 	ldbu	r3,-16(fp)
   80850:	10c00005 	stb	r3,0(r2)
	charPosition->positionX = positionX ;
   80854:	e0bffb17 	ldw	r2,-20(fp)
   80858:	e0fffd17 	ldw	r3,-12(fp)
   8085c:	10c00115 	stw	r3,4(r2)
	charPosition->positionY = positionY ;
   80860:	e0bffb17 	ldw	r2,-20(fp)
   80864:	e0fffe17 	ldw	r3,-8(fp)
   80868:	10c00215 	stw	r3,8(r2)
	charPosition->state = state ;
   8086c:	e0bffb17 	ldw	r2,-20(fp)
   80870:	e0ffff03 	ldbu	r3,-4(fp)
   80874:	10c00305 	stb	r3,12(r2)
	charPosition->orientation = orientation ;
   80878:	e0bffb17 	ldw	r2,-20(fp)
   8087c:	e0c00317 	ldw	r3,12(fp)
   80880:	10c00415 	stw	r3,16(r2)
	initCollision(charPosition);
   80884:	e13ffb17 	ldw	r4,-20(fp)
   80888:	00807d80 	call	807d8 <initCollision>
	compute_byte_packet(charPosition);
   8088c:	e13ffb17 	ldw	r4,-20(fp)
   80890:	00807540 	call	80754 <compute_byte_packet>
}
   80894:	0001883a 	nop
   80898:	e037883a 	mov	sp,fp
   8089c:	dfc00117 	ldw	ra,4(sp)
   808a0:	df000017 	ldw	fp,0(sp)
   808a4:	dec00204 	addi	sp,sp,8
   808a8:	f800283a 	ret

000808ac <compute_collision>:

void compute_collision(position* charPosition){
   808ac:	defffd04 	addi	sp,sp,-12
   808b0:	dfc00215 	stw	ra,8(sp)
   808b4:	df000115 	stw	fp,4(sp)
   808b8:	df000104 	addi	fp,sp,4
   808bc:	e13fff15 	stw	r4,-4(fp)
	charPosition->collision.north = 1 -
		(int)
		(
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY - 1) 	== 0)
   808c0:	e0bfff17 	ldw	r2,-4(fp)
   808c4:	10c00117 	ldw	r3,4(r2)
   808c8:	e0bfff17 	ldw	r2,-4(fp)
   808cc:	10800217 	ldw	r2,8(r2)
   808d0:	10bfffc4 	addi	r2,r2,-1
   808d4:	100b883a 	mov	r5,r2
   808d8:	1809883a 	mov	r4,r3
   808dc:	0080ab80 	call	80ab8 <get_block_with_coordinates>
	compute_byte_packet(charPosition);
}

void compute_collision(position* charPosition){
	charPosition->collision.north = 1 -
		(int)
   808e0:	10803fcc 	andi	r2,r2,255
   808e4:	10000d1e 	bne	r2,zero,8091c <compute_collision+0x70>
		(
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY - 1) 	== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY - 1) 	== 0)
   808e8:	e0bfff17 	ldw	r2,-4(fp)
   808ec:	10800117 	ldw	r2,4(r2)
   808f0:	10c00ec4 	addi	r3,r2,59
   808f4:	e0bfff17 	ldw	r2,-4(fp)
   808f8:	10800217 	ldw	r2,8(r2)
   808fc:	10bfffc4 	addi	r2,r2,-1
   80900:	100b883a 	mov	r5,r2
   80904:	1809883a 	mov	r4,r3
   80908:	0080ab80 	call	80ab8 <get_block_with_coordinates>
	compute_byte_packet(charPosition);
}

void compute_collision(position* charPosition){
	charPosition->collision.north = 1 -
		(int)
   8090c:	10803fcc 	andi	r2,r2,255
   80910:	1000021e 	bne	r2,zero,8091c <compute_collision+0x70>
   80914:	00800044 	movi	r2,1
   80918:	00000106 	br	80920 <compute_collision+0x74>
   8091c:	0005883a 	mov	r2,zero
	initCollision(charPosition);
	compute_byte_packet(charPosition);
}

void compute_collision(position* charPosition){
	charPosition->collision.north = 1 -
   80920:	1007883a 	mov	r3,r2
   80924:	00800044 	movi	r2,1
   80928:	10c5c83a 	sub	r2,r2,r3
   8092c:	1007883a 	mov	r3,r2
   80930:	e0bfff17 	ldw	r2,-4(fp)
   80934:	10c00605 	stb	r3,24(r2)
		);

	charPosition->collision.east = 1 -
		(int)
		(
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY) 		== 0)
   80938:	e0bfff17 	ldw	r2,-4(fp)
   8093c:	10800117 	ldw	r2,4(r2)
   80940:	10c00f04 	addi	r3,r2,60
   80944:	e0bfff17 	ldw	r2,-4(fp)
   80948:	10800217 	ldw	r2,8(r2)
   8094c:	100b883a 	mov	r5,r2
   80950:	1809883a 	mov	r4,r3
   80954:	0080ab80 	call	80ab8 <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY - 1) 	== 0)
		);

	charPosition->collision.east = 1 -
		(int)
   80958:	10803fcc 	andi	r2,r2,255
   8095c:	10000d1e 	bne	r2,zero,80994 <compute_collision+0xe8>
		(
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY) 		== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY + 59) 	== 0)
   80960:	e0bfff17 	ldw	r2,-4(fp)
   80964:	10800117 	ldw	r2,4(r2)
   80968:	10c00f04 	addi	r3,r2,60
   8096c:	e0bfff17 	ldw	r2,-4(fp)
   80970:	10800217 	ldw	r2,8(r2)
   80974:	10800ec4 	addi	r2,r2,59
   80978:	100b883a 	mov	r5,r2
   8097c:	1809883a 	mov	r4,r3
   80980:	0080ab80 	call	80ab8 <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY - 1) 	== 0)
		);

	charPosition->collision.east = 1 -
		(int)
   80984:	10803fcc 	andi	r2,r2,255
   80988:	1000021e 	bne	r2,zero,80994 <compute_collision+0xe8>
   8098c:	00800044 	movi	r2,1
   80990:	00000106 	br	80998 <compute_collision+0xec>
   80994:	0005883a 	mov	r2,zero
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY - 1) 	== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY - 1) 	== 0)
		);

	charPosition->collision.east = 1 -
   80998:	1007883a 	mov	r3,r2
   8099c:	00800044 	movi	r2,1
   809a0:	10c5c83a 	sub	r2,r2,r3
   809a4:	1007883a 	mov	r3,r2
   809a8:	e0bfff17 	ldw	r2,-4(fp)
   809ac:	10c00645 	stb	r3,25(r2)
		);

	charPosition->collision.south = 1 -
		(int)
		(
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY + 60) 	== 0)
   809b0:	e0bfff17 	ldw	r2,-4(fp)
   809b4:	10c00117 	ldw	r3,4(r2)
   809b8:	e0bfff17 	ldw	r2,-4(fp)
   809bc:	10800217 	ldw	r2,8(r2)
   809c0:	10800f04 	addi	r2,r2,60
   809c4:	100b883a 	mov	r5,r2
   809c8:	1809883a 	mov	r4,r3
   809cc:	0080ab80 	call	80ab8 <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY + 59) 	== 0)
		);

	charPosition->collision.south = 1 -
		(int)
   809d0:	10803fcc 	andi	r2,r2,255
   809d4:	10000d1e 	bne	r2,zero,80a0c <compute_collision+0x160>
		(
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY + 60) 	== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY + 60) 	== 0)
   809d8:	e0bfff17 	ldw	r2,-4(fp)
   809dc:	10800117 	ldw	r2,4(r2)
   809e0:	10c00ec4 	addi	r3,r2,59
   809e4:	e0bfff17 	ldw	r2,-4(fp)
   809e8:	10800217 	ldw	r2,8(r2)
   809ec:	10800f04 	addi	r2,r2,60
   809f0:	100b883a 	mov	r5,r2
   809f4:	1809883a 	mov	r4,r3
   809f8:	0080ab80 	call	80ab8 <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY + 59) 	== 0)
		);

	charPosition->collision.south = 1 -
		(int)
   809fc:	10803fcc 	andi	r2,r2,255
   80a00:	1000021e 	bne	r2,zero,80a0c <compute_collision+0x160>
   80a04:	00800044 	movi	r2,1
   80a08:	00000106 	br	80a10 <compute_collision+0x164>
   80a0c:	0005883a 	mov	r2,zero
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY) 		== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY + 59) 	== 0)
		);

	charPosition->collision.south = 1 -
   80a10:	1007883a 	mov	r3,r2
   80a14:	00800044 	movi	r2,1
   80a18:	10c5c83a 	sub	r2,r2,r3
   80a1c:	1007883a 	mov	r3,r2
   80a20:	e0bfff17 	ldw	r2,-4(fp)
   80a24:	10c00685 	stb	r3,26(r2)
		);

	charPosition->collision.west = 1 -
		(int)
		(
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY) 		== 0)
   80a28:	e0bfff17 	ldw	r2,-4(fp)
   80a2c:	10800117 	ldw	r2,4(r2)
   80a30:	10ffffc4 	addi	r3,r2,-1
   80a34:	e0bfff17 	ldw	r2,-4(fp)
   80a38:	10800217 	ldw	r2,8(r2)
   80a3c:	100b883a 	mov	r5,r2
   80a40:	1809883a 	mov	r4,r3
   80a44:	0080ab80 	call	80ab8 <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY + 60) 	== 0)
		);

	charPosition->collision.west = 1 -
		(int)
   80a48:	10803fcc 	andi	r2,r2,255
   80a4c:	10000d1e 	bne	r2,zero,80a84 <compute_collision+0x1d8>
		(
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY) 		== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY + 59) 	== 0)
   80a50:	e0bfff17 	ldw	r2,-4(fp)
   80a54:	10800117 	ldw	r2,4(r2)
   80a58:	10ffffc4 	addi	r3,r2,-1
   80a5c:	e0bfff17 	ldw	r2,-4(fp)
   80a60:	10800217 	ldw	r2,8(r2)
   80a64:	10800ec4 	addi	r2,r2,59
   80a68:	100b883a 	mov	r5,r2
   80a6c:	1809883a 	mov	r4,r3
   80a70:	0080ab80 	call	80ab8 <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY + 60) 	== 0)
		);

	charPosition->collision.west = 1 -
		(int)
   80a74:	10803fcc 	andi	r2,r2,255
   80a78:	1000021e 	bne	r2,zero,80a84 <compute_collision+0x1d8>
   80a7c:	00800044 	movi	r2,1
   80a80:	00000106 	br	80a88 <compute_collision+0x1dc>
   80a84:	0005883a 	mov	r2,zero
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY + 60) 	== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY + 60) 	== 0)
		);

	charPosition->collision.west = 1 -
   80a88:	1007883a 	mov	r3,r2
   80a8c:	00800044 	movi	r2,1
   80a90:	10c5c83a 	sub	r2,r2,r3
   80a94:	1007883a 	mov	r3,r2
   80a98:	e0bfff17 	ldw	r2,-4(fp)
   80a9c:	10c006c5 	stb	r3,27(r2)
		(
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY) 		== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY + 59) 	== 0)
		);
}
   80aa0:	0001883a 	nop
   80aa4:	e037883a 	mov	sp,fp
   80aa8:	dfc00117 	ldw	ra,4(sp)
   80aac:	df000017 	ldw	fp,0(sp)
   80ab0:	dec00204 	addi	sp,sp,8
   80ab4:	f800283a 	ret

00080ab8 <get_block_with_coordinates>:
// 	charPosition->collision.east = 2;
// 	charPosition->collision.south = 2;
// 	charPosition->collision.west = 2;
// }

alt_u8 get_block_with_coordinates(alt_u32 positionX, alt_u32 positionY){
   80ab8:	defffb04 	addi	sp,sp,-20
   80abc:	dfc00415 	stw	ra,16(sp)
   80ac0:	df000315 	stw	fp,12(sp)
   80ac4:	df000304 	addi	fp,sp,12
   80ac8:	e13ffe15 	stw	r4,-8(fp)
   80acc:	e17fff15 	stw	r5,-4(fp)
	alt_u16 blockX = positionX / 60;
   80ad0:	e0bffe17 	ldw	r2,-8(fp)
   80ad4:	01400f04 	movi	r5,60
   80ad8:	1009883a 	mov	r4,r2
   80adc:	00811340 	call	81134 <__udivsi3>
   80ae0:	e0bffd0d 	sth	r2,-12(fp)
	alt_u16 blockY = positionY / 60;
   80ae4:	e0bfff17 	ldw	r2,-4(fp)
   80ae8:	01400f04 	movi	r5,60
   80aec:	1009883a 	mov	r4,r2
   80af0:	00811340 	call	81134 <__udivsi3>
   80af4:	e0bffd8d 	sth	r2,-10(fp)
	return ((background[blockY] & 1<<(8+blockX))>>(8+blockX));
   80af8:	e0fffd8b 	ldhu	r3,-10(fp)
   80afc:	00800274 	movhi	r2,9
   80b00:	1082b004 	addi	r2,r2,2752
   80b04:	18c7883a 	add	r3,r3,r3
   80b08:	18c7883a 	add	r3,r3,r3
   80b0c:	10c5883a 	add	r2,r2,r3
   80b10:	10800017 	ldw	r2,0(r2)
   80b14:	e0fffd0b 	ldhu	r3,-12(fp)
   80b18:	18c00204 	addi	r3,r3,8
   80b1c:	01000044 	movi	r4,1
   80b20:	20c6983a 	sll	r3,r4,r3
   80b24:	10c6703a 	and	r3,r2,r3
   80b28:	e0bffd0b 	ldhu	r2,-12(fp)
   80b2c:	10800204 	addi	r2,r2,8
   80b30:	1884d83a 	srl	r2,r3,r2
}
   80b34:	e037883a 	mov	sp,fp
   80b38:	dfc00117 	ldw	ra,4(sp)
   80b3c:	df000017 	ldw	fp,0(sp)
   80b40:	dec00204 	addi	sp,sp,8
   80b44:	f800283a 	ret

00080b48 <refresh_position>:
void refresh_position(position* charPosition, alt_u8 autoMode)
/*this function computes the new position of the pacman given :
 * - the orientation
 * - the collisions around the character
 */
{
   80b48:	defffa04 	addi	sp,sp,-24
   80b4c:	dfc00515 	stw	ra,20(sp)
   80b50:	df000415 	stw	fp,16(sp)
   80b54:	df000404 	addi	fp,sp,16
   80b58:	e13ffe15 	stw	r4,-8(fp)
   80b5c:	2805883a 	mov	r2,r5
   80b60:	e0bfff05 	stb	r2,-4(fp)
	compute_collision(charPosition);
   80b64:	e13ffe17 	ldw	r4,-8(fp)
   80b68:	00808ac0 	call	808ac <compute_collision>
	alt_u16 step = MOVEMENT_STEP;
   80b6c:	00800144 	movi	r2,5
   80b70:	e0bffc0d 	sth	r2,-16(fp)
	
	srand((unsigned int)time(NULL) + charPosition->positionX);
   80b74:	0009883a 	mov	r4,zero
   80b78:	00814440 	call	81444 <time>
   80b7c:	1007883a 	mov	r3,r2
   80b80:	e0bffe17 	ldw	r2,-8(fp)
   80b84:	10800117 	ldw	r2,4(r2)
   80b88:	1885883a 	add	r2,r3,r2
   80b8c:	1009883a 	mov	r4,r2
   80b90:	00813300 	call	81330 <srand>
	int randomOrientation = rand() % 5;
   80b94:	00813480 	call	81348 <rand>
   80b98:	01400144 	movi	r5,5
   80b9c:	1009883a 	mov	r4,r2
   80ba0:	00810c00 	call	810c0 <__modsi3>
   80ba4:	e0bffd15 	stw	r2,-12(fp)

	switch(charPosition->directionControl)
   80ba8:	e0bffe17 	ldw	r2,-8(fp)
   80bac:	10800717 	ldw	r2,28(r2)
   80bb0:	10c000a0 	cmpeqi	r3,r2,2
   80bb4:	1800211e 	bne	r3,zero,80c3c <refresh_position+0xf4>
   80bb8:	10c000e8 	cmpgeui	r3,r2,3
   80bbc:	1800031e 	bne	r3,zero,80bcc <refresh_position+0x84>
   80bc0:	10800060 	cmpeqi	r2,r2,1
   80bc4:	1000061e 	bne	r2,zero,80be0 <refresh_position+0x98>
   80bc8:	00006006 	br	80d4c <refresh_position+0x204>
   80bcc:	10c000e0 	cmpeqi	r3,r2,3
   80bd0:	1800311e 	bne	r3,zero,80c98 <refresh_position+0x150>
   80bd4:	10800120 	cmpeqi	r2,r2,4
   80bd8:	1000461e 	bne	r2,zero,80cf4 <refresh_position+0x1ac>
   80bdc:	00005b06 	br	80d4c <refresh_position+0x204>
	{
		case UP:
			if(charPosition->collision.north == 0){
   80be0:	e0bffe17 	ldw	r2,-8(fp)
   80be4:	10800603 	ldbu	r2,24(r2)
   80be8:	10803fcc 	andi	r2,r2,255
   80bec:	10000c1e 	bne	r2,zero,80c20 <refresh_position+0xd8>
				charPosition->orientation = NORTH;
   80bf0:	e0bffe17 	ldw	r2,-8(fp)
   80bf4:	00c00044 	movi	r3,1
   80bf8:	10c00415 	stw	r3,16(r2)
				charPosition->positionY = charPosition->positionY - step;
   80bfc:	e0bffe17 	ldw	r2,-8(fp)
   80c00:	10c00217 	ldw	r3,8(r2)
   80c04:	e0bffc0b 	ldhu	r2,-16(fp)
   80c08:	1887c83a 	sub	r3,r3,r2
   80c0c:	e0bffe17 	ldw	r2,-8(fp)
   80c10:	10c00215 	stw	r3,8(r2)
				charPosition->directionControl = NONE;
   80c14:	e0bffe17 	ldw	r2,-8(fp)
   80c18:	10000715 	stw	zero,28(r2)
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
			}
		break;
   80c1c:	00005206 	br	80d68 <refresh_position+0x220>
			if(charPosition->collision.north == 0){
				charPosition->orientation = NORTH;
				charPosition->positionY = charPosition->positionY - step;
				charPosition->directionControl = NONE;
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
   80c20:	e0bffc0b 	ldhu	r2,-16(fp)
   80c24:	e0ffff03 	ldbu	r3,-4(fp)
   80c28:	180d883a 	mov	r6,r3
   80c2c:	100b883a 	mov	r5,r2
   80c30:	e13ffe17 	ldw	r4,-8(fp)
   80c34:	0080d880 	call	80d88 <refresh_position_keepGoing>
			}
		break;
   80c38:	00004b06 	br	80d68 <refresh_position+0x220>
		case RIGHT:
			if(charPosition->collision.east == 0){
   80c3c:	e0bffe17 	ldw	r2,-8(fp)
   80c40:	10800643 	ldbu	r2,25(r2)
   80c44:	10803fcc 	andi	r2,r2,255
   80c48:	10000c1e 	bne	r2,zero,80c7c <refresh_position+0x134>
				charPosition->orientation = EAST;
   80c4c:	e0bffe17 	ldw	r2,-8(fp)
   80c50:	00c00084 	movi	r3,2
   80c54:	10c00415 	stw	r3,16(r2)
				charPosition->positionX = charPosition->positionX + step;
   80c58:	e0bffe17 	ldw	r2,-8(fp)
   80c5c:	10c00117 	ldw	r3,4(r2)
   80c60:	e0bffc0b 	ldhu	r2,-16(fp)
   80c64:	1887883a 	add	r3,r3,r2
   80c68:	e0bffe17 	ldw	r2,-8(fp)
   80c6c:	10c00115 	stw	r3,4(r2)
				charPosition->directionControl = NONE;
   80c70:	e0bffe17 	ldw	r2,-8(fp)
   80c74:	10000715 	stw	zero,28(r2)
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
			}
		break;
   80c78:	00003b06 	br	80d68 <refresh_position+0x220>
			if(charPosition->collision.east == 0){
				charPosition->orientation = EAST;
				charPosition->positionX = charPosition->positionX + step;
				charPosition->directionControl = NONE;
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
   80c7c:	e0bffc0b 	ldhu	r2,-16(fp)
   80c80:	e0ffff03 	ldbu	r3,-4(fp)
   80c84:	180d883a 	mov	r6,r3
   80c88:	100b883a 	mov	r5,r2
   80c8c:	e13ffe17 	ldw	r4,-8(fp)
   80c90:	0080d880 	call	80d88 <refresh_position_keepGoing>
			}
		break;
   80c94:	00003406 	br	80d68 <refresh_position+0x220>
		case DOWN:
			if(charPosition->collision.south == 0){
   80c98:	e0bffe17 	ldw	r2,-8(fp)
   80c9c:	10800683 	ldbu	r2,26(r2)
   80ca0:	10803fcc 	andi	r2,r2,255
   80ca4:	10000c1e 	bne	r2,zero,80cd8 <refresh_position+0x190>
				charPosition->orientation = SOUTH;
   80ca8:	e0bffe17 	ldw	r2,-8(fp)
   80cac:	00c000c4 	movi	r3,3
   80cb0:	10c00415 	stw	r3,16(r2)
				charPosition->positionY = charPosition->positionY + step;
   80cb4:	e0bffe17 	ldw	r2,-8(fp)
   80cb8:	10c00217 	ldw	r3,8(r2)
   80cbc:	e0bffc0b 	ldhu	r2,-16(fp)
   80cc0:	1887883a 	add	r3,r3,r2
   80cc4:	e0bffe17 	ldw	r2,-8(fp)
   80cc8:	10c00215 	stw	r3,8(r2)
				charPosition->directionControl = NONE;
   80ccc:	e0bffe17 	ldw	r2,-8(fp)
   80cd0:	10000715 	stw	zero,28(r2)
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
			}
		break;
   80cd4:	00002406 	br	80d68 <refresh_position+0x220>
			if(charPosition->collision.south == 0){
				charPosition->orientation = SOUTH;
				charPosition->positionY = charPosition->positionY + step;
				charPosition->directionControl = NONE;
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
   80cd8:	e0bffc0b 	ldhu	r2,-16(fp)
   80cdc:	e0ffff03 	ldbu	r3,-4(fp)
   80ce0:	180d883a 	mov	r6,r3
   80ce4:	100b883a 	mov	r5,r2
   80ce8:	e13ffe17 	ldw	r4,-8(fp)
   80cec:	0080d880 	call	80d88 <refresh_position_keepGoing>
			}
		break;
   80cf0:	00001d06 	br	80d68 <refresh_position+0x220>
		case LEFT:
			if(charPosition->collision.west == 0){
   80cf4:	e0bffe17 	ldw	r2,-8(fp)
   80cf8:	108006c3 	ldbu	r2,27(r2)
   80cfc:	10803fcc 	andi	r2,r2,255
   80d00:	10000b1e 	bne	r2,zero,80d30 <refresh_position+0x1e8>
				charPosition->orientation = WEST;
   80d04:	e0bffe17 	ldw	r2,-8(fp)
   80d08:	10000415 	stw	zero,16(r2)
				charPosition->positionX = charPosition->positionX - step;
   80d0c:	e0bffe17 	ldw	r2,-8(fp)
   80d10:	10c00117 	ldw	r3,4(r2)
   80d14:	e0bffc0b 	ldhu	r2,-16(fp)
   80d18:	1887c83a 	sub	r3,r3,r2
   80d1c:	e0bffe17 	ldw	r2,-8(fp)
   80d20:	10c00115 	stw	r3,4(r2)
				charPosition->directionControl = NONE;
   80d24:	e0bffe17 	ldw	r2,-8(fp)
   80d28:	10000715 	stw	zero,28(r2)
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
			}
		break;
   80d2c:	00000e06 	br	80d68 <refresh_position+0x220>
			if(charPosition->collision.west == 0){
				charPosition->orientation = WEST;
				charPosition->positionX = charPosition->positionX - step;
				charPosition->directionControl = NONE;
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
   80d30:	e0bffc0b 	ldhu	r2,-16(fp)
   80d34:	e0ffff03 	ldbu	r3,-4(fp)
   80d38:	180d883a 	mov	r6,r3
   80d3c:	100b883a 	mov	r5,r2
   80d40:	e13ffe17 	ldw	r4,-8(fp)
   80d44:	0080d880 	call	80d88 <refresh_position_keepGoing>
			}
		break;
   80d48:	00000706 	br	80d68 <refresh_position+0x220>
		default :
			refresh_position_keepGoing(charPosition, step, autoMode);
   80d4c:	e0bffc0b 	ldhu	r2,-16(fp)
   80d50:	e0ffff03 	ldbu	r3,-4(fp)
   80d54:	180d883a 	mov	r6,r3
   80d58:	100b883a 	mov	r5,r2
   80d5c:	e13ffe17 	ldw	r4,-8(fp)
   80d60:	0080d880 	call	80d88 <refresh_position_keepGoing>
		break;
   80d64:	0001883a 	nop
	}
	compute_byte_packet(charPosition);
   80d68:	e13ffe17 	ldw	r4,-8(fp)
   80d6c:	00807540 	call	80754 <compute_byte_packet>
}
   80d70:	0001883a 	nop
   80d74:	e037883a 	mov	sp,fp
   80d78:	dfc00117 	ldw	ra,4(sp)
   80d7c:	df000017 	ldw	fp,0(sp)
   80d80:	dec00204 	addi	sp,sp,8
   80d84:	f800283a 	ret

00080d88 <refresh_position_keepGoing>:

void refresh_position_keepGoing(position* charPosition, alt_u16 step, alt_u8 autoMode){
   80d88:	defffb04 	addi	sp,sp,-20
   80d8c:	dfc00415 	stw	ra,16(sp)
   80d90:	df000315 	stw	fp,12(sp)
   80d94:	df000304 	addi	fp,sp,12
   80d98:	e13ffd15 	stw	r4,-12(fp)
   80d9c:	2807883a 	mov	r3,r5
   80da0:	3005883a 	mov	r2,r6
   80da4:	e0fffe0d 	sth	r3,-8(fp)
   80da8:	e0bfff05 	stb	r2,-4(fp)
	switch(charPosition->orientation)
   80dac:	e0bffd17 	ldw	r2,-12(fp)
   80db0:	10800417 	ldw	r2,16(r2)
   80db4:	10c00060 	cmpeqi	r3,r2,1
   80db8:	1800061e 	bne	r3,zero,80dd4 <refresh_position_keepGoing+0x4c>
   80dbc:	00803e2e 	bgeu	zero,r2,80eb8 <refresh_position_keepGoing+0x130>
   80dc0:	10c000a0 	cmpeqi	r3,r2,2
   80dc4:	1800161e 	bne	r3,zero,80e20 <refresh_position_keepGoing+0x98>
   80dc8:	108000e0 	cmpeqi	r2,r2,3
   80dcc:	1000271e 	bne	r2,zero,80e6c <refresh_position_keepGoing+0xe4>
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
	}
}
   80dd0:	00005306 	br	80f20 <refresh_position_keepGoing+0x198>

void refresh_position_keepGoing(position* charPosition, alt_u16 step, alt_u8 autoMode){
	switch(charPosition->orientation)
	{
		case NORTH :
			if (charPosition->collision.north == 0){
   80dd4:	e0bffd17 	ldw	r2,-12(fp)
   80dd8:	10800603 	ldbu	r2,24(r2)
   80ddc:	10803fcc 	andi	r2,r2,255
   80de0:	1000071e 	bne	r2,zero,80e00 <refresh_position_keepGoing+0x78>
				charPosition->positionY = charPosition->positionY - step;	
   80de4:	e0bffd17 	ldw	r2,-12(fp)
   80de8:	10c00217 	ldw	r3,8(r2)
   80dec:	e0bffe0b 	ldhu	r2,-8(fp)
   80df0:	1887c83a 	sub	r3,r3,r2
   80df4:	e0bffd17 	ldw	r2,-12(fp)
   80df8:	10c00215 	stw	r3,8(r2)
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   80dfc:	00004106 	br	80f04 <refresh_position_keepGoing+0x17c>
	switch(charPosition->orientation)
	{
		case NORTH :
			if (charPosition->collision.north == 0){
				charPosition->positionY = charPosition->positionY - step;	
			} else if (autoMode == 1) {
   80e00:	e0bfff03 	ldbu	r2,-4(fp)
   80e04:	10800058 	cmpnei	r2,r2,1
   80e08:	10003e1e 	bne	r2,zero,80f04 <refresh_position_keepGoing+0x17c>
				randomDirection(charPosition, step);
   80e0c:	e0bffe0b 	ldhu	r2,-8(fp)
   80e10:	100b883a 	mov	r5,r2
   80e14:	e13ffd17 	ldw	r4,-12(fp)
   80e18:	0080f380 	call	80f38 <randomDirection>
			} 
		break;
   80e1c:	00003906 	br	80f04 <refresh_position_keepGoing+0x17c>
		case EAST :
			if (charPosition->collision.east == 0){
   80e20:	e0bffd17 	ldw	r2,-12(fp)
   80e24:	10800643 	ldbu	r2,25(r2)
   80e28:	10803fcc 	andi	r2,r2,255
   80e2c:	1000071e 	bne	r2,zero,80e4c <refresh_position_keepGoing+0xc4>
				charPosition->positionX = charPosition->positionX + step;
   80e30:	e0bffd17 	ldw	r2,-12(fp)
   80e34:	10c00117 	ldw	r3,4(r2)
   80e38:	e0bffe0b 	ldhu	r2,-8(fp)
   80e3c:	1887883a 	add	r3,r3,r2
   80e40:	e0bffd17 	ldw	r2,-12(fp)
   80e44:	10c00115 	stw	r3,4(r2)
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   80e48:	00003006 	br	80f0c <refresh_position_keepGoing+0x184>
			} 
		break;
		case EAST :
			if (charPosition->collision.east == 0){
				charPosition->positionX = charPosition->positionX + step;
			} else if (autoMode == 1) {
   80e4c:	e0bfff03 	ldbu	r2,-4(fp)
   80e50:	10800058 	cmpnei	r2,r2,1
   80e54:	10002d1e 	bne	r2,zero,80f0c <refresh_position_keepGoing+0x184>
				randomDirection(charPosition, step);
   80e58:	e0bffe0b 	ldhu	r2,-8(fp)
   80e5c:	100b883a 	mov	r5,r2
   80e60:	e13ffd17 	ldw	r4,-12(fp)
   80e64:	0080f380 	call	80f38 <randomDirection>
			} 
		break;
   80e68:	00002806 	br	80f0c <refresh_position_keepGoing+0x184>
		case SOUTH :
			if (charPosition->collision.south == 0){
   80e6c:	e0bffd17 	ldw	r2,-12(fp)
   80e70:	10800683 	ldbu	r2,26(r2)
   80e74:	10803fcc 	andi	r2,r2,255
   80e78:	1000071e 	bne	r2,zero,80e98 <refresh_position_keepGoing+0x110>
				charPosition->positionY = charPosition->positionY + step;
   80e7c:	e0bffd17 	ldw	r2,-12(fp)
   80e80:	10c00217 	ldw	r3,8(r2)
   80e84:	e0bffe0b 	ldhu	r2,-8(fp)
   80e88:	1887883a 	add	r3,r3,r2
   80e8c:	e0bffd17 	ldw	r2,-12(fp)
   80e90:	10c00215 	stw	r3,8(r2)
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   80e94:	00001f06 	br	80f14 <refresh_position_keepGoing+0x18c>
			} 
		break;
		case SOUTH :
			if (charPosition->collision.south == 0){
				charPosition->positionY = charPosition->positionY + step;
			} else if (autoMode == 1) {
   80e98:	e0bfff03 	ldbu	r2,-4(fp)
   80e9c:	10800058 	cmpnei	r2,r2,1
   80ea0:	10001c1e 	bne	r2,zero,80f14 <refresh_position_keepGoing+0x18c>
				randomDirection(charPosition, step);
   80ea4:	e0bffe0b 	ldhu	r2,-8(fp)
   80ea8:	100b883a 	mov	r5,r2
   80eac:	e13ffd17 	ldw	r4,-12(fp)
   80eb0:	0080f380 	call	80f38 <randomDirection>
			} 
		break;
   80eb4:	00001706 	br	80f14 <refresh_position_keepGoing+0x18c>
		case WEST :
			if (charPosition->collision.west == 0){
   80eb8:	e0bffd17 	ldw	r2,-12(fp)
   80ebc:	108006c3 	ldbu	r2,27(r2)
   80ec0:	10803fcc 	andi	r2,r2,255
   80ec4:	1000071e 	bne	r2,zero,80ee4 <refresh_position_keepGoing+0x15c>
				charPosition->positionX = charPosition->positionX - step;
   80ec8:	e0bffd17 	ldw	r2,-12(fp)
   80ecc:	10c00117 	ldw	r3,4(r2)
   80ed0:	e0bffe0b 	ldhu	r2,-8(fp)
   80ed4:	1887c83a 	sub	r3,r3,r2
   80ed8:	e0bffd17 	ldw	r2,-12(fp)
   80edc:	10c00115 	stw	r3,4(r2)
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   80ee0:	00000e06 	br	80f1c <refresh_position_keepGoing+0x194>
			} 
		break;
		case WEST :
			if (charPosition->collision.west == 0){
				charPosition->positionX = charPosition->positionX - step;
			} else if (autoMode == 1) {
   80ee4:	e0bfff03 	ldbu	r2,-4(fp)
   80ee8:	10800058 	cmpnei	r2,r2,1
   80eec:	10000b1e 	bne	r2,zero,80f1c <refresh_position_keepGoing+0x194>
				randomDirection(charPosition, step);
   80ef0:	e0bffe0b 	ldhu	r2,-8(fp)
   80ef4:	100b883a 	mov	r5,r2
   80ef8:	e13ffd17 	ldw	r4,-12(fp)
   80efc:	0080f380 	call	80f38 <randomDirection>
			} 
		break;
   80f00:	00000606 	br	80f1c <refresh_position_keepGoing+0x194>
			if (charPosition->collision.north == 0){
				charPosition->positionY = charPosition->positionY - step;	
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   80f04:	0001883a 	nop
   80f08:	00000506 	br	80f20 <refresh_position_keepGoing+0x198>
			if (charPosition->collision.east == 0){
				charPosition->positionX = charPosition->positionX + step;
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   80f0c:	0001883a 	nop
   80f10:	00000306 	br	80f20 <refresh_position_keepGoing+0x198>
			if (charPosition->collision.south == 0){
				charPosition->positionY = charPosition->positionY + step;
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   80f14:	0001883a 	nop
   80f18:	00000106 	br	80f20 <refresh_position_keepGoing+0x198>
			if (charPosition->collision.west == 0){
				charPosition->positionX = charPosition->positionX - step;
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   80f1c:	0001883a 	nop
	}
}
   80f20:	0001883a 	nop
   80f24:	e037883a 	mov	sp,fp
   80f28:	dfc00117 	ldw	ra,4(sp)
   80f2c:	df000017 	ldw	fp,0(sp)
   80f30:	dec00204 	addi	sp,sp,8
   80f34:	f800283a 	ret

00080f38 <randomDirection>:

//this function should be removed once the button controls are working
void randomDirection(position* charPosition, alt_u16 step){
   80f38:	defffd04 	addi	sp,sp,-12
   80f3c:	df000215 	stw	fp,8(sp)
   80f40:	df000204 	addi	fp,sp,8
   80f44:	e13ffe15 	stw	r4,-8(fp)
   80f48:	2805883a 	mov	r2,r5
   80f4c:	e0bfff0d 	sth	r2,-4(fp)
	if (charPosition->collision.north == 0){
   80f50:	e0bffe17 	ldw	r2,-8(fp)
   80f54:	10800603 	ldbu	r2,24(r2)
   80f58:	10803fcc 	andi	r2,r2,255
   80f5c:	10000a1e 	bne	r2,zero,80f88 <randomDirection+0x50>
		charPosition->orientation = NORTH;
   80f60:	e0bffe17 	ldw	r2,-8(fp)
   80f64:	00c00044 	movi	r3,1
   80f68:	10c00415 	stw	r3,16(r2)
		charPosition->positionY = charPosition->positionY - step;				
   80f6c:	e0bffe17 	ldw	r2,-8(fp)
   80f70:	10c00217 	ldw	r3,8(r2)
   80f74:	e0bfff0b 	ldhu	r2,-4(fp)
   80f78:	1887c83a 	sub	r3,r3,r2
   80f7c:	e0bffe17 	ldw	r2,-8(fp)
   80f80:	10c00215 	stw	r3,8(r2)
	}	
	else if (charPosition->collision.west == 0){
		charPosition->orientation = WEST;
		charPosition->positionX = charPosition->positionX - step;		
	}
}
   80f84:	00002806 	br	81028 <randomDirection+0xf0>
void randomDirection(position* charPosition, alt_u16 step){
	if (charPosition->collision.north == 0){
		charPosition->orientation = NORTH;
		charPosition->positionY = charPosition->positionY - step;				
	}	
	else if (charPosition->collision.east == 0){	
   80f88:	e0bffe17 	ldw	r2,-8(fp)
   80f8c:	10800643 	ldbu	r2,25(r2)
   80f90:	10803fcc 	andi	r2,r2,255
   80f94:	10000a1e 	bne	r2,zero,80fc0 <randomDirection+0x88>
		charPosition->orientation = EAST;
   80f98:	e0bffe17 	ldw	r2,-8(fp)
   80f9c:	00c00084 	movi	r3,2
   80fa0:	10c00415 	stw	r3,16(r2)
		charPosition->positionX = charPosition->positionX + step;		
   80fa4:	e0bffe17 	ldw	r2,-8(fp)
   80fa8:	10c00117 	ldw	r3,4(r2)
   80fac:	e0bfff0b 	ldhu	r2,-4(fp)
   80fb0:	1887883a 	add	r3,r3,r2
   80fb4:	e0bffe17 	ldw	r2,-8(fp)
   80fb8:	10c00115 	stw	r3,4(r2)
	}	
	else if (charPosition->collision.west == 0){
		charPosition->orientation = WEST;
		charPosition->positionX = charPosition->positionX - step;		
	}
}
   80fbc:	00001a06 	br	81028 <randomDirection+0xf0>
	}	
	else if (charPosition->collision.east == 0){	
		charPosition->orientation = EAST;
		charPosition->positionX = charPosition->positionX + step;		
	}	
	else if (charPosition->collision.south == 0){
   80fc0:	e0bffe17 	ldw	r2,-8(fp)
   80fc4:	10800683 	ldbu	r2,26(r2)
   80fc8:	10803fcc 	andi	r2,r2,255
   80fcc:	10000a1e 	bne	r2,zero,80ff8 <randomDirection+0xc0>
		charPosition->orientation = SOUTH;
   80fd0:	e0bffe17 	ldw	r2,-8(fp)
   80fd4:	00c000c4 	movi	r3,3
   80fd8:	10c00415 	stw	r3,16(r2)
		charPosition->positionY = charPosition->positionY + step;				
   80fdc:	e0bffe17 	ldw	r2,-8(fp)
   80fe0:	10c00217 	ldw	r3,8(r2)
   80fe4:	e0bfff0b 	ldhu	r2,-4(fp)
   80fe8:	1887883a 	add	r3,r3,r2
   80fec:	e0bffe17 	ldw	r2,-8(fp)
   80ff0:	10c00215 	stw	r3,8(r2)
	}	
	else if (charPosition->collision.west == 0){
		charPosition->orientation = WEST;
		charPosition->positionX = charPosition->positionX - step;		
	}
}
   80ff4:	00000c06 	br	81028 <randomDirection+0xf0>
	}	
	else if (charPosition->collision.south == 0){
		charPosition->orientation = SOUTH;
		charPosition->positionY = charPosition->positionY + step;				
	}	
	else if (charPosition->collision.west == 0){
   80ff8:	e0bffe17 	ldw	r2,-8(fp)
   80ffc:	108006c3 	ldbu	r2,27(r2)
   81000:	10803fcc 	andi	r2,r2,255
   81004:	1000081e 	bne	r2,zero,81028 <randomDirection+0xf0>
		charPosition->orientation = WEST;
   81008:	e0bffe17 	ldw	r2,-8(fp)
   8100c:	10000415 	stw	zero,16(r2)
		charPosition->positionX = charPosition->positionX - step;		
   81010:	e0bffe17 	ldw	r2,-8(fp)
   81014:	10c00117 	ldw	r3,4(r2)
   81018:	e0bfff0b 	ldhu	r2,-4(fp)
   8101c:	1887c83a 	sub	r3,r3,r2
   81020:	e0bffe17 	ldw	r2,-8(fp)
   81024:	10c00115 	stw	r3,4(r2)
	}
}
   81028:	0001883a 	nop
   8102c:	e037883a 	mov	sp,fp
   81030:	df000017 	ldw	fp,0(sp)
   81034:	dec00104 	addi	sp,sp,4
   81038:	f800283a 	ret

0008103c <__divsi3>:
   8103c:	20001b16 	blt	r4,zero,810ac <__divsi3+0x70>
   81040:	000f883a 	mov	r7,zero
   81044:	28001616 	blt	r5,zero,810a0 <__divsi3+0x64>
   81048:	200d883a 	mov	r6,r4
   8104c:	29001a2e 	bgeu	r5,r4,810b8 <__divsi3+0x7c>
   81050:	00800804 	movi	r2,32
   81054:	00c00044 	movi	r3,1
   81058:	00000106 	br	81060 <__divsi3+0x24>
   8105c:	10000d26 	beq	r2,zero,81094 <__divsi3+0x58>
   81060:	294b883a 	add	r5,r5,r5
   81064:	10bfffc4 	addi	r2,r2,-1
   81068:	18c7883a 	add	r3,r3,r3
   8106c:	293ffb36 	bltu	r5,r4,8105c <__alt_data_end+0xfffb556c>
   81070:	0005883a 	mov	r2,zero
   81074:	18000726 	beq	r3,zero,81094 <__divsi3+0x58>
   81078:	0005883a 	mov	r2,zero
   8107c:	31400236 	bltu	r6,r5,81088 <__divsi3+0x4c>
   81080:	314dc83a 	sub	r6,r6,r5
   81084:	10c4b03a 	or	r2,r2,r3
   81088:	1806d07a 	srli	r3,r3,1
   8108c:	280ad07a 	srli	r5,r5,1
   81090:	183ffa1e 	bne	r3,zero,8107c <__alt_data_end+0xfffb558c>
   81094:	38000126 	beq	r7,zero,8109c <__divsi3+0x60>
   81098:	0085c83a 	sub	r2,zero,r2
   8109c:	f800283a 	ret
   810a0:	014bc83a 	sub	r5,zero,r5
   810a4:	39c0005c 	xori	r7,r7,1
   810a8:	003fe706 	br	81048 <__alt_data_end+0xfffb5558>
   810ac:	0109c83a 	sub	r4,zero,r4
   810b0:	01c00044 	movi	r7,1
   810b4:	003fe306 	br	81044 <__alt_data_end+0xfffb5554>
   810b8:	00c00044 	movi	r3,1
   810bc:	003fee06 	br	81078 <__alt_data_end+0xfffb5588>

000810c0 <__modsi3>:
   810c0:	20001716 	blt	r4,zero,81120 <__modsi3+0x60>
   810c4:	000f883a 	mov	r7,zero
   810c8:	2005883a 	mov	r2,r4
   810cc:	28001216 	blt	r5,zero,81118 <__modsi3+0x58>
   810d0:	2900162e 	bgeu	r5,r4,8112c <__modsi3+0x6c>
   810d4:	01800804 	movi	r6,32
   810d8:	00c00044 	movi	r3,1
   810dc:	00000106 	br	810e4 <__modsi3+0x24>
   810e0:	30000a26 	beq	r6,zero,8110c <__modsi3+0x4c>
   810e4:	294b883a 	add	r5,r5,r5
   810e8:	31bfffc4 	addi	r6,r6,-1
   810ec:	18c7883a 	add	r3,r3,r3
   810f0:	293ffb36 	bltu	r5,r4,810e0 <__alt_data_end+0xfffb55f0>
   810f4:	18000526 	beq	r3,zero,8110c <__modsi3+0x4c>
   810f8:	1806d07a 	srli	r3,r3,1
   810fc:	11400136 	bltu	r2,r5,81104 <__modsi3+0x44>
   81100:	1145c83a 	sub	r2,r2,r5
   81104:	280ad07a 	srli	r5,r5,1
   81108:	183ffb1e 	bne	r3,zero,810f8 <__alt_data_end+0xfffb5608>
   8110c:	38000126 	beq	r7,zero,81114 <__modsi3+0x54>
   81110:	0085c83a 	sub	r2,zero,r2
   81114:	f800283a 	ret
   81118:	014bc83a 	sub	r5,zero,r5
   8111c:	003fec06 	br	810d0 <__alt_data_end+0xfffb55e0>
   81120:	0109c83a 	sub	r4,zero,r4
   81124:	01c00044 	movi	r7,1
   81128:	003fe706 	br	810c8 <__alt_data_end+0xfffb55d8>
   8112c:	00c00044 	movi	r3,1
   81130:	003ff106 	br	810f8 <__alt_data_end+0xfffb5608>

00081134 <__udivsi3>:
   81134:	200d883a 	mov	r6,r4
   81138:	2900152e 	bgeu	r5,r4,81190 <__udivsi3+0x5c>
   8113c:	28001416 	blt	r5,zero,81190 <__udivsi3+0x5c>
   81140:	00800804 	movi	r2,32
   81144:	00c00044 	movi	r3,1
   81148:	00000206 	br	81154 <__udivsi3+0x20>
   8114c:	10000e26 	beq	r2,zero,81188 <__udivsi3+0x54>
   81150:	28000516 	blt	r5,zero,81168 <__udivsi3+0x34>
   81154:	294b883a 	add	r5,r5,r5
   81158:	10bfffc4 	addi	r2,r2,-1
   8115c:	18c7883a 	add	r3,r3,r3
   81160:	293ffa36 	bltu	r5,r4,8114c <__alt_data_end+0xfffb565c>
   81164:	18000826 	beq	r3,zero,81188 <__udivsi3+0x54>
   81168:	0005883a 	mov	r2,zero
   8116c:	31400236 	bltu	r6,r5,81178 <__udivsi3+0x44>
   81170:	314dc83a 	sub	r6,r6,r5
   81174:	10c4b03a 	or	r2,r2,r3
   81178:	1806d07a 	srli	r3,r3,1
   8117c:	280ad07a 	srli	r5,r5,1
   81180:	183ffa1e 	bne	r3,zero,8116c <__alt_data_end+0xfffb567c>
   81184:	f800283a 	ret
   81188:	0005883a 	mov	r2,zero
   8118c:	f800283a 	ret
   81190:	00c00044 	movi	r3,1
   81194:	003ff406 	br	81168 <__alt_data_end+0xfffb5678>

00081198 <__umodsi3>:
   81198:	2005883a 	mov	r2,r4
   8119c:	2900122e 	bgeu	r5,r4,811e8 <__umodsi3+0x50>
   811a0:	28001116 	blt	r5,zero,811e8 <__umodsi3+0x50>
   811a4:	01800804 	movi	r6,32
   811a8:	00c00044 	movi	r3,1
   811ac:	00000206 	br	811b8 <__umodsi3+0x20>
   811b0:	30000c26 	beq	r6,zero,811e4 <__umodsi3+0x4c>
   811b4:	28000516 	blt	r5,zero,811cc <__umodsi3+0x34>
   811b8:	294b883a 	add	r5,r5,r5
   811bc:	31bfffc4 	addi	r6,r6,-1
   811c0:	18c7883a 	add	r3,r3,r3
   811c4:	293ffa36 	bltu	r5,r4,811b0 <__alt_data_end+0xfffb56c0>
   811c8:	18000626 	beq	r3,zero,811e4 <__umodsi3+0x4c>
   811cc:	1806d07a 	srli	r3,r3,1
   811d0:	11400136 	bltu	r2,r5,811d8 <__umodsi3+0x40>
   811d4:	1145c83a 	sub	r2,r2,r5
   811d8:	280ad07a 	srli	r5,r5,1
   811dc:	183ffb1e 	bne	r3,zero,811cc <__alt_data_end+0xfffb56dc>
   811e0:	f800283a 	ret
   811e4:	f800283a 	ret
   811e8:	00c00044 	movi	r3,1
   811ec:	003ff706 	br	811cc <__alt_data_end+0xfffb56dc>

000811f0 <_printf_r>:
   811f0:	defffd04 	addi	sp,sp,-12
   811f4:	2805883a 	mov	r2,r5
   811f8:	dfc00015 	stw	ra,0(sp)
   811fc:	d9800115 	stw	r6,4(sp)
   81200:	d9c00215 	stw	r7,8(sp)
   81204:	21400217 	ldw	r5,8(r4)
   81208:	d9c00104 	addi	r7,sp,4
   8120c:	100d883a 	mov	r6,r2
   81210:	00814940 	call	81494 <___vfprintf_internal_r>
   81214:	dfc00017 	ldw	ra,0(sp)
   81218:	dec00304 	addi	sp,sp,12
   8121c:	f800283a 	ret

00081220 <printf>:
   81220:	defffc04 	addi	sp,sp,-16
   81224:	dfc00015 	stw	ra,0(sp)
   81228:	d9400115 	stw	r5,4(sp)
   8122c:	d9800215 	stw	r6,8(sp)
   81230:	d9c00315 	stw	r7,12(sp)
   81234:	00800274 	movhi	r2,9
   81238:	10896b04 	addi	r2,r2,9644
   8123c:	10800017 	ldw	r2,0(r2)
   81240:	200b883a 	mov	r5,r4
   81244:	d9800104 	addi	r6,sp,4
   81248:	11000217 	ldw	r4,8(r2)
   8124c:	008368c0 	call	8368c <__vfprintf_internal>
   81250:	dfc00017 	ldw	ra,0(sp)
   81254:	dec00404 	addi	sp,sp,16
   81258:	f800283a 	ret

0008125c <_puts_r>:
   8125c:	defff604 	addi	sp,sp,-40
   81260:	dc000715 	stw	r16,28(sp)
   81264:	2021883a 	mov	r16,r4
   81268:	2809883a 	mov	r4,r5
   8126c:	dc400815 	stw	r17,32(sp)
   81270:	dfc00915 	stw	ra,36(sp)
   81274:	2823883a 	mov	r17,r5
   81278:	00813ac0 	call	813ac <strlen>
   8127c:	10c00044 	addi	r3,r2,1
   81280:	d8800115 	stw	r2,4(sp)
   81284:	00800274 	movhi	r2,9
   81288:	1081d404 	addi	r2,r2,1872
   8128c:	d8800215 	stw	r2,8(sp)
   81290:	00800044 	movi	r2,1
   81294:	d8800315 	stw	r2,12(sp)
   81298:	00800084 	movi	r2,2
   8129c:	dc400015 	stw	r17,0(sp)
   812a0:	d8c00615 	stw	r3,24(sp)
   812a4:	dec00415 	stw	sp,16(sp)
   812a8:	d8800515 	stw	r2,20(sp)
   812ac:	80000226 	beq	r16,zero,812b8 <_puts_r+0x5c>
   812b0:	80800e17 	ldw	r2,56(r16)
   812b4:	10001426 	beq	r2,zero,81308 <_puts_r+0xac>
   812b8:	81400217 	ldw	r5,8(r16)
   812bc:	2880030b 	ldhu	r2,12(r5)
   812c0:	10c8000c 	andi	r3,r2,8192
   812c4:	1800061e 	bne	r3,zero,812e0 <_puts_r+0x84>
   812c8:	29001917 	ldw	r4,100(r5)
   812cc:	00f7ffc4 	movi	r3,-8193
   812d0:	10880014 	ori	r2,r2,8192
   812d4:	20c6703a 	and	r3,r4,r3
   812d8:	2880030d 	sth	r2,12(r5)
   812dc:	28c01915 	stw	r3,100(r5)
   812e0:	d9800404 	addi	r6,sp,16
   812e4:	8009883a 	mov	r4,r16
   812e8:	0085bbc0 	call	85bbc <__sfvwrite_r>
   812ec:	1000091e 	bne	r2,zero,81314 <_puts_r+0xb8>
   812f0:	00800284 	movi	r2,10
   812f4:	dfc00917 	ldw	ra,36(sp)
   812f8:	dc400817 	ldw	r17,32(sp)
   812fc:	dc000717 	ldw	r16,28(sp)
   81300:	dec00a04 	addi	sp,sp,40
   81304:	f800283a 	ret
   81308:	8009883a 	mov	r4,r16
   8130c:	00857380 	call	85738 <__sinit>
   81310:	003fe906 	br	812b8 <__alt_data_end+0xfffb57c8>
   81314:	00bfffc4 	movi	r2,-1
   81318:	003ff606 	br	812f4 <__alt_data_end+0xfffb5804>

0008131c <puts>:
   8131c:	00800274 	movhi	r2,9
   81320:	10896b04 	addi	r2,r2,9644
   81324:	200b883a 	mov	r5,r4
   81328:	11000017 	ldw	r4,0(r2)
   8132c:	008125c1 	jmpi	8125c <_puts_r>

00081330 <srand>:
   81330:	00800274 	movhi	r2,9
   81334:	10896b04 	addi	r2,r2,9644
   81338:	10800017 	ldw	r2,0(r2)
   8133c:	11002915 	stw	r4,164(r2)
   81340:	10002a15 	stw	zero,168(r2)
   81344:	f800283a 	ret

00081348 <rand>:
   81348:	00800274 	movhi	r2,9
   8134c:	defffe04 	addi	sp,sp,-8
   81350:	10896b04 	addi	r2,r2,9644
   81354:	dc000015 	stw	r16,0(sp)
   81358:	14000017 	ldw	r16,0(r2)
   8135c:	dfc00115 	stw	ra,4(sp)
   81360:	01932574 	movhi	r6,19605
   81364:	81002917 	ldw	r4,164(r16)
   81368:	81402a17 	ldw	r5,168(r16)
   8136c:	01d614b4 	movhi	r7,22610
   81370:	319fcb44 	addi	r6,r6,32557
   81374:	39fd0b44 	addi	r7,r7,-3027
   81378:	008a96c0 	call	8a96c <__muldi3>
   8137c:	11000044 	addi	r4,r2,1
   81380:	2085803a 	cmpltu	r2,r4,r2
   81384:	10c7883a 	add	r3,r2,r3
   81388:	00a00034 	movhi	r2,32768
   8138c:	10bfffc4 	addi	r2,r2,-1
   81390:	1884703a 	and	r2,r3,r2
   81394:	81002915 	stw	r4,164(r16)
   81398:	80c02a15 	stw	r3,168(r16)
   8139c:	dfc00117 	ldw	ra,4(sp)
   813a0:	dc000017 	ldw	r16,0(sp)
   813a4:	dec00204 	addi	sp,sp,8
   813a8:	f800283a 	ret

000813ac <strlen>:
   813ac:	208000cc 	andi	r2,r4,3
   813b0:	10002026 	beq	r2,zero,81434 <strlen+0x88>
   813b4:	20800007 	ldb	r2,0(r4)
   813b8:	10002026 	beq	r2,zero,8143c <strlen+0x90>
   813bc:	2005883a 	mov	r2,r4
   813c0:	00000206 	br	813cc <strlen+0x20>
   813c4:	10c00007 	ldb	r3,0(r2)
   813c8:	18001826 	beq	r3,zero,8142c <strlen+0x80>
   813cc:	10800044 	addi	r2,r2,1
   813d0:	10c000cc 	andi	r3,r2,3
   813d4:	183ffb1e 	bne	r3,zero,813c4 <__alt_data_end+0xfffb58d4>
   813d8:	10c00017 	ldw	r3,0(r2)
   813dc:	01ffbff4 	movhi	r7,65279
   813e0:	39ffbfc4 	addi	r7,r7,-257
   813e4:	00ca303a 	nor	r5,zero,r3
   813e8:	01a02074 	movhi	r6,32897
   813ec:	19c7883a 	add	r3,r3,r7
   813f0:	31a02004 	addi	r6,r6,-32640
   813f4:	1946703a 	and	r3,r3,r5
   813f8:	1986703a 	and	r3,r3,r6
   813fc:	1800091e 	bne	r3,zero,81424 <strlen+0x78>
   81400:	10800104 	addi	r2,r2,4
   81404:	10c00017 	ldw	r3,0(r2)
   81408:	19cb883a 	add	r5,r3,r7
   8140c:	00c6303a 	nor	r3,zero,r3
   81410:	28c6703a 	and	r3,r5,r3
   81414:	1986703a 	and	r3,r3,r6
   81418:	183ff926 	beq	r3,zero,81400 <__alt_data_end+0xfffb5910>
   8141c:	00000106 	br	81424 <strlen+0x78>
   81420:	10800044 	addi	r2,r2,1
   81424:	10c00007 	ldb	r3,0(r2)
   81428:	183ffd1e 	bne	r3,zero,81420 <__alt_data_end+0xfffb5930>
   8142c:	1105c83a 	sub	r2,r2,r4
   81430:	f800283a 	ret
   81434:	2005883a 	mov	r2,r4
   81438:	003fe706 	br	813d8 <__alt_data_end+0xfffb58e8>
   8143c:	0005883a 	mov	r2,zero
   81440:	f800283a 	ret

00081444 <time>:
   81444:	00800274 	movhi	r2,9
   81448:	defffc04 	addi	sp,sp,-16
   8144c:	10896b04 	addi	r2,r2,9644
   81450:	dc000215 	stw	r16,8(sp)
   81454:	2021883a 	mov	r16,r4
   81458:	11000017 	ldw	r4,0(r2)
   8145c:	000d883a 	mov	r6,zero
   81460:	d80b883a 	mov	r5,sp
   81464:	dfc00315 	stw	ra,12(sp)
   81468:	00862000 	call	86200 <_gettimeofday_r>
   8146c:	10000716 	blt	r2,zero,8148c <time+0x48>
   81470:	d8800017 	ldw	r2,0(sp)
   81474:	80000126 	beq	r16,zero,8147c <time+0x38>
   81478:	80800015 	stw	r2,0(r16)
   8147c:	dfc00317 	ldw	ra,12(sp)
   81480:	dc000217 	ldw	r16,8(sp)
   81484:	dec00404 	addi	sp,sp,16
   81488:	f800283a 	ret
   8148c:	00bfffc4 	movi	r2,-1
   81490:	003ffa06 	br	8147c <__alt_data_end+0xfffb598c>

00081494 <___vfprintf_internal_r>:
   81494:	deffb804 	addi	sp,sp,-288
   81498:	dfc04715 	stw	ra,284(sp)
   8149c:	ddc04515 	stw	r23,276(sp)
   814a0:	dd404315 	stw	r21,268(sp)
   814a4:	d9002c15 	stw	r4,176(sp)
   814a8:	282f883a 	mov	r23,r5
   814ac:	302b883a 	mov	r21,r6
   814b0:	d9c02d15 	stw	r7,180(sp)
   814b4:	df004615 	stw	fp,280(sp)
   814b8:	dd804415 	stw	r22,272(sp)
   814bc:	dd004215 	stw	r20,264(sp)
   814c0:	dcc04115 	stw	r19,260(sp)
   814c4:	dc804015 	stw	r18,256(sp)
   814c8:	dc403f15 	stw	r17,252(sp)
   814cc:	dc003e15 	stw	r16,248(sp)
   814d0:	00863080 	call	86308 <_localeconv_r>
   814d4:	10800017 	ldw	r2,0(r2)
   814d8:	1009883a 	mov	r4,r2
   814dc:	d8803415 	stw	r2,208(sp)
   814e0:	00813ac0 	call	813ac <strlen>
   814e4:	d8803715 	stw	r2,220(sp)
   814e8:	d8802c17 	ldw	r2,176(sp)
   814ec:	10000226 	beq	r2,zero,814f8 <___vfprintf_internal_r+0x64>
   814f0:	10800e17 	ldw	r2,56(r2)
   814f4:	1000f926 	beq	r2,zero,818dc <___vfprintf_internal_r+0x448>
   814f8:	b880030b 	ldhu	r2,12(r23)
   814fc:	10c8000c 	andi	r3,r2,8192
   81500:	1800061e 	bne	r3,zero,8151c <___vfprintf_internal_r+0x88>
   81504:	b9001917 	ldw	r4,100(r23)
   81508:	00f7ffc4 	movi	r3,-8193
   8150c:	10880014 	ori	r2,r2,8192
   81510:	20c6703a 	and	r3,r4,r3
   81514:	b880030d 	sth	r2,12(r23)
   81518:	b8c01915 	stw	r3,100(r23)
   8151c:	10c0020c 	andi	r3,r2,8
   81520:	1800c126 	beq	r3,zero,81828 <___vfprintf_internal_r+0x394>
   81524:	b8c00417 	ldw	r3,16(r23)
   81528:	1800bf26 	beq	r3,zero,81828 <___vfprintf_internal_r+0x394>
   8152c:	1080068c 	andi	r2,r2,26
   81530:	00c00284 	movi	r3,10
   81534:	10c0c426 	beq	r2,r3,81848 <___vfprintf_internal_r+0x3b4>
   81538:	d8c00404 	addi	r3,sp,16
   8153c:	05000274 	movhi	r20,9
   81540:	d9001e04 	addi	r4,sp,120
   81544:	a501e584 	addi	r20,r20,1942
   81548:	d8c01e15 	stw	r3,120(sp)
   8154c:	d8002015 	stw	zero,128(sp)
   81550:	d8001f15 	stw	zero,124(sp)
   81554:	d8003315 	stw	zero,204(sp)
   81558:	d8003615 	stw	zero,216(sp)
   8155c:	d8003815 	stw	zero,224(sp)
   81560:	1811883a 	mov	r8,r3
   81564:	d8003915 	stw	zero,228(sp)
   81568:	d8003a15 	stw	zero,232(sp)
   8156c:	d8002f15 	stw	zero,188(sp)
   81570:	d9002815 	stw	r4,160(sp)
   81574:	a8800007 	ldb	r2,0(r21)
   81578:	10027b26 	beq	r2,zero,81f68 <___vfprintf_internal_r+0xad4>
   8157c:	00c00944 	movi	r3,37
   81580:	a821883a 	mov	r16,r21
   81584:	10c0021e 	bne	r2,r3,81590 <___vfprintf_internal_r+0xfc>
   81588:	00001406 	br	815dc <___vfprintf_internal_r+0x148>
   8158c:	10c00326 	beq	r2,r3,8159c <___vfprintf_internal_r+0x108>
   81590:	84000044 	addi	r16,r16,1
   81594:	80800007 	ldb	r2,0(r16)
   81598:	103ffc1e 	bne	r2,zero,8158c <__alt_data_end+0xfffb5a9c>
   8159c:	8563c83a 	sub	r17,r16,r21
   815a0:	88000e26 	beq	r17,zero,815dc <___vfprintf_internal_r+0x148>
   815a4:	d8c02017 	ldw	r3,128(sp)
   815a8:	d8801f17 	ldw	r2,124(sp)
   815ac:	45400015 	stw	r21,0(r8)
   815b0:	1c47883a 	add	r3,r3,r17
   815b4:	10800044 	addi	r2,r2,1
   815b8:	d8c02015 	stw	r3,128(sp)
   815bc:	44400115 	stw	r17,4(r8)
   815c0:	d8801f15 	stw	r2,124(sp)
   815c4:	00c001c4 	movi	r3,7
   815c8:	1880a716 	blt	r3,r2,81868 <___vfprintf_internal_r+0x3d4>
   815cc:	42000204 	addi	r8,r8,8
   815d0:	d9402f17 	ldw	r5,188(sp)
   815d4:	2c4b883a 	add	r5,r5,r17
   815d8:	d9402f15 	stw	r5,188(sp)
   815dc:	80800007 	ldb	r2,0(r16)
   815e0:	1000a826 	beq	r2,zero,81884 <___vfprintf_internal_r+0x3f0>
   815e4:	84400047 	ldb	r17,1(r16)
   815e8:	00bfffc4 	movi	r2,-1
   815ec:	85400044 	addi	r21,r16,1
   815f0:	d8002785 	stb	zero,158(sp)
   815f4:	0007883a 	mov	r3,zero
   815f8:	000f883a 	mov	r7,zero
   815fc:	d8802915 	stw	r2,164(sp)
   81600:	d8003115 	stw	zero,196(sp)
   81604:	0025883a 	mov	r18,zero
   81608:	01401604 	movi	r5,88
   8160c:	01800244 	movi	r6,9
   81610:	02800a84 	movi	r10,42
   81614:	02401b04 	movi	r9,108
   81618:	ad400044 	addi	r21,r21,1
   8161c:	88bff804 	addi	r2,r17,-32
   81620:	28830436 	bltu	r5,r2,82234 <___vfprintf_internal_r+0xda0>
   81624:	100490ba 	slli	r2,r2,2
   81628:	01000234 	movhi	r4,8
   8162c:	21058f04 	addi	r4,r4,5692
   81630:	1105883a 	add	r2,r2,r4
   81634:	10800017 	ldw	r2,0(r2)
   81638:	1000683a 	jmp	r2
   8163c:	00082154 	movui	zero,8325
   81640:	00082234 	movhi	zero,8328
   81644:	00082234 	movhi	zero,8328
   81648:	00082174 	movhi	zero,8325
   8164c:	00082234 	movhi	zero,8328
   81650:	00082234 	movhi	zero,8328
   81654:	00082234 	movhi	zero,8328
   81658:	00082234 	movhi	zero,8328
   8165c:	00082234 	movhi	zero,8328
   81660:	00082234 	movhi	zero,8328
   81664:	000818e8 	cmpgeui	zero,zero,8291
   81668:	00082090 	cmplti	zero,zero,8322
   8166c:	00082234 	movhi	zero,8328
   81670:	000817b0 	cmpltui	zero,zero,8286
   81674:	00081910 	cmplti	zero,zero,8292
   81678:	00082234 	movhi	zero,8328
   8167c:	00081950 	cmplti	zero,zero,8293
   81680:	0008195c 	xori	zero,zero,8293
   81684:	0008195c 	xori	zero,zero,8293
   81688:	0008195c 	xori	zero,zero,8293
   8168c:	0008195c 	xori	zero,zero,8293
   81690:	0008195c 	xori	zero,zero,8293
   81694:	0008195c 	xori	zero,zero,8293
   81698:	0008195c 	xori	zero,zero,8293
   8169c:	0008195c 	xori	zero,zero,8293
   816a0:	0008195c 	xori	zero,zero,8293
   816a4:	00082234 	movhi	zero,8328
   816a8:	00082234 	movhi	zero,8328
   816ac:	00082234 	movhi	zero,8328
   816b0:	00082234 	movhi	zero,8328
   816b4:	00082234 	movhi	zero,8328
   816b8:	00082234 	movhi	zero,8328
   816bc:	00082234 	movhi	zero,8328
   816c0:	00082234 	movhi	zero,8328
   816c4:	00082234 	movhi	zero,8328
   816c8:	00082234 	movhi	zero,8328
   816cc:	00081990 	cmplti	zero,zero,8294
   816d0:	00081a4c 	andi	zero,zero,8297
   816d4:	00082234 	movhi	zero,8328
   816d8:	00081a4c 	andi	zero,zero,8297
   816dc:	00082234 	movhi	zero,8328
   816e0:	00082234 	movhi	zero,8328
   816e4:	00082234 	movhi	zero,8328
   816e8:	00082234 	movhi	zero,8328
   816ec:	00081aec 	andhi	zero,zero,8299
   816f0:	00082234 	movhi	zero,8328
   816f4:	00082234 	movhi	zero,8328
   816f8:	00081af8 	rdprs	zero,zero,8299
   816fc:	00082234 	movhi	zero,8328
   81700:	00082234 	movhi	zero,8328
   81704:	00082234 	movhi	zero,8328
   81708:	00082234 	movhi	zero,8328
   8170c:	00082234 	movhi	zero,8328
   81710:	00081f70 	cmpltui	zero,zero,8317
   81714:	00082234 	movhi	zero,8328
   81718:	00082234 	movhi	zero,8328
   8171c:	00081fd0 	cmplti	zero,zero,8319
   81720:	00082234 	movhi	zero,8328
   81724:	00082234 	movhi	zero,8328
   81728:	00082234 	movhi	zero,8328
   8172c:	00082234 	movhi	zero,8328
   81730:	00082234 	movhi	zero,8328
   81734:	00082234 	movhi	zero,8328
   81738:	00082234 	movhi	zero,8328
   8173c:	00082234 	movhi	zero,8328
   81740:	00082234 	movhi	zero,8328
   81744:	00082234 	movhi	zero,8328
   81748:	000821e0 	cmpeqi	zero,zero,8327
   8174c:	00082180 	call	8218 <__alt_mem_onchip_memory2-0x77de8>
   81750:	00081a4c 	andi	zero,zero,8297
   81754:	00081a4c 	andi	zero,zero,8297
   81758:	00081a4c 	andi	zero,zero,8297
   8175c:	00082190 	cmplti	zero,zero,8326
   81760:	00082180 	call	8218 <__alt_mem_onchip_memory2-0x77de8>
   81764:	00082234 	movhi	zero,8328
   81768:	00082234 	movhi	zero,8328
   8176c:	0008219c 	xori	zero,zero,8326
   81770:	00082234 	movhi	zero,8328
   81774:	000821ac 	andhi	zero,zero,8326
   81778:	00082080 	call	8208 <__alt_mem_onchip_memory2-0x77df8>
   8177c:	000817bc 	xorhi	zero,zero,8286
   81780:	000820a0 	cmpeqi	zero,zero,8322
   81784:	00082234 	movhi	zero,8328
   81788:	000820ac 	andhi	zero,zero,8322
   8178c:	00082234 	movhi	zero,8328
   81790:	00082108 	cmpgei	zero,zero,8324
   81794:	00082234 	movhi	zero,8328
   81798:	00082234 	movhi	zero,8328
   8179c:	00082118 	cmpnei	zero,zero,8324
   817a0:	d9003117 	ldw	r4,196(sp)
   817a4:	d8802d15 	stw	r2,180(sp)
   817a8:	0109c83a 	sub	r4,zero,r4
   817ac:	d9003115 	stw	r4,196(sp)
   817b0:	94800114 	ori	r18,r18,4
   817b4:	ac400007 	ldb	r17,0(r21)
   817b8:	003f9706 	br	81618 <__alt_data_end+0xfffb5b28>
   817bc:	00800c04 	movi	r2,48
   817c0:	d9002d17 	ldw	r4,180(sp)
   817c4:	d9402917 	ldw	r5,164(sp)
   817c8:	d8802705 	stb	r2,156(sp)
   817cc:	00801e04 	movi	r2,120
   817d0:	d8802745 	stb	r2,157(sp)
   817d4:	d8002785 	stb	zero,158(sp)
   817d8:	20c00104 	addi	r3,r4,4
   817dc:	24c00017 	ldw	r19,0(r4)
   817e0:	002d883a 	mov	r22,zero
   817e4:	90800094 	ori	r2,r18,2
   817e8:	28029a16 	blt	r5,zero,82254 <___vfprintf_internal_r+0xdc0>
   817ec:	00bfdfc4 	movi	r2,-129
   817f0:	90a4703a 	and	r18,r18,r2
   817f4:	d8c02d15 	stw	r3,180(sp)
   817f8:	94800094 	ori	r18,r18,2
   817fc:	9802871e 	bne	r19,zero,8221c <___vfprintf_internal_r+0xd88>
   81800:	00800274 	movhi	r2,9
   81804:	1081de04 	addi	r2,r2,1912
   81808:	d8803915 	stw	r2,228(sp)
   8180c:	04401e04 	movi	r17,120
   81810:	d8802917 	ldw	r2,164(sp)
   81814:	0039883a 	mov	fp,zero
   81818:	1001e926 	beq	r2,zero,81fc0 <___vfprintf_internal_r+0xb2c>
   8181c:	0027883a 	mov	r19,zero
   81820:	002d883a 	mov	r22,zero
   81824:	00020506 	br	8203c <___vfprintf_internal_r+0xba8>
   81828:	d9002c17 	ldw	r4,176(sp)
   8182c:	b80b883a 	mov	r5,r23
   81830:	00837640 	call	83764 <__swsetup_r>
   81834:	1005ac1e 	bne	r2,zero,82ee8 <___vfprintf_internal_r+0x1a54>
   81838:	b880030b 	ldhu	r2,12(r23)
   8183c:	00c00284 	movi	r3,10
   81840:	1080068c 	andi	r2,r2,26
   81844:	10ff3c1e 	bne	r2,r3,81538 <__alt_data_end+0xfffb5a48>
   81848:	b880038f 	ldh	r2,14(r23)
   8184c:	103f3a16 	blt	r2,zero,81538 <__alt_data_end+0xfffb5a48>
   81850:	d9c02d17 	ldw	r7,180(sp)
   81854:	d9002c17 	ldw	r4,176(sp)
   81858:	a80d883a 	mov	r6,r21
   8185c:	b80b883a 	mov	r5,r23
   81860:	00836a80 	call	836a8 <__sbprintf>
   81864:	00001106 	br	818ac <___vfprintf_internal_r+0x418>
   81868:	d9002c17 	ldw	r4,176(sp)
   8186c:	d9801e04 	addi	r6,sp,120
   81870:	b80b883a 	mov	r5,r23
   81874:	0088aec0 	call	88aec <__sprint_r>
   81878:	1000081e 	bne	r2,zero,8189c <___vfprintf_internal_r+0x408>
   8187c:	da000404 	addi	r8,sp,16
   81880:	003f5306 	br	815d0 <__alt_data_end+0xfffb5ae0>
   81884:	d8802017 	ldw	r2,128(sp)
   81888:	10000426 	beq	r2,zero,8189c <___vfprintf_internal_r+0x408>
   8188c:	d9002c17 	ldw	r4,176(sp)
   81890:	d9801e04 	addi	r6,sp,120
   81894:	b80b883a 	mov	r5,r23
   81898:	0088aec0 	call	88aec <__sprint_r>
   8189c:	b880030b 	ldhu	r2,12(r23)
   818a0:	1080100c 	andi	r2,r2,64
   818a4:	1005901e 	bne	r2,zero,82ee8 <___vfprintf_internal_r+0x1a54>
   818a8:	d8802f17 	ldw	r2,188(sp)
   818ac:	dfc04717 	ldw	ra,284(sp)
   818b0:	df004617 	ldw	fp,280(sp)
   818b4:	ddc04517 	ldw	r23,276(sp)
   818b8:	dd804417 	ldw	r22,272(sp)
   818bc:	dd404317 	ldw	r21,268(sp)
   818c0:	dd004217 	ldw	r20,264(sp)
   818c4:	dcc04117 	ldw	r19,260(sp)
   818c8:	dc804017 	ldw	r18,256(sp)
   818cc:	dc403f17 	ldw	r17,252(sp)
   818d0:	dc003e17 	ldw	r16,248(sp)
   818d4:	dec04804 	addi	sp,sp,288
   818d8:	f800283a 	ret
   818dc:	d9002c17 	ldw	r4,176(sp)
   818e0:	00857380 	call	85738 <__sinit>
   818e4:	003f0406 	br	814f8 <__alt_data_end+0xfffb5a08>
   818e8:	d8802d17 	ldw	r2,180(sp)
   818ec:	d9002d17 	ldw	r4,180(sp)
   818f0:	10800017 	ldw	r2,0(r2)
   818f4:	d8803115 	stw	r2,196(sp)
   818f8:	20800104 	addi	r2,r4,4
   818fc:	d9003117 	ldw	r4,196(sp)
   81900:	203fa716 	blt	r4,zero,817a0 <__alt_data_end+0xfffb5cb0>
   81904:	d8802d15 	stw	r2,180(sp)
   81908:	ac400007 	ldb	r17,0(r21)
   8190c:	003f4206 	br	81618 <__alt_data_end+0xfffb5b28>
   81910:	ac400007 	ldb	r17,0(r21)
   81914:	aac00044 	addi	r11,r21,1
   81918:	8a872826 	beq	r17,r10,835bc <___vfprintf_internal_r+0x2128>
   8191c:	88bff404 	addi	r2,r17,-48
   81920:	0009883a 	mov	r4,zero
   81924:	30867d36 	bltu	r6,r2,8331c <___vfprintf_internal_r+0x1e88>
   81928:	5c400007 	ldb	r17,0(r11)
   8192c:	210002a4 	muli	r4,r4,10
   81930:	5d400044 	addi	r21,r11,1
   81934:	a817883a 	mov	r11,r21
   81938:	2089883a 	add	r4,r4,r2
   8193c:	88bff404 	addi	r2,r17,-48
   81940:	30bff92e 	bgeu	r6,r2,81928 <__alt_data_end+0xfffb5e38>
   81944:	2005c916 	blt	r4,zero,8306c <___vfprintf_internal_r+0x1bd8>
   81948:	d9002915 	stw	r4,164(sp)
   8194c:	003f3306 	br	8161c <__alt_data_end+0xfffb5b2c>
   81950:	94802014 	ori	r18,r18,128
   81954:	ac400007 	ldb	r17,0(r21)
   81958:	003f2f06 	br	81618 <__alt_data_end+0xfffb5b28>
   8195c:	a809883a 	mov	r4,r21
   81960:	d8003115 	stw	zero,196(sp)
   81964:	88bff404 	addi	r2,r17,-48
   81968:	0017883a 	mov	r11,zero
   8196c:	24400007 	ldb	r17,0(r4)
   81970:	5ac002a4 	muli	r11,r11,10
   81974:	ad400044 	addi	r21,r21,1
   81978:	a809883a 	mov	r4,r21
   8197c:	12d7883a 	add	r11,r2,r11
   81980:	88bff404 	addi	r2,r17,-48
   81984:	30bff92e 	bgeu	r6,r2,8196c <__alt_data_end+0xfffb5e7c>
   81988:	dac03115 	stw	r11,196(sp)
   8198c:	003f2306 	br	8161c <__alt_data_end+0xfffb5b2c>
   81990:	18c03fcc 	andi	r3,r3,255
   81994:	18072b1e 	bne	r3,zero,83644 <___vfprintf_internal_r+0x21b0>
   81998:	94800414 	ori	r18,r18,16
   8199c:	9080080c 	andi	r2,r18,32
   819a0:	10037b26 	beq	r2,zero,82790 <___vfprintf_internal_r+0x12fc>
   819a4:	d9402d17 	ldw	r5,180(sp)
   819a8:	28800117 	ldw	r2,4(r5)
   819ac:	2cc00017 	ldw	r19,0(r5)
   819b0:	29400204 	addi	r5,r5,8
   819b4:	d9402d15 	stw	r5,180(sp)
   819b8:	102d883a 	mov	r22,r2
   819bc:	10044b16 	blt	r2,zero,82aec <___vfprintf_internal_r+0x1658>
   819c0:	d9402917 	ldw	r5,164(sp)
   819c4:	df002783 	ldbu	fp,158(sp)
   819c8:	2803bc16 	blt	r5,zero,828bc <___vfprintf_internal_r+0x1428>
   819cc:	00ffdfc4 	movi	r3,-129
   819d0:	9d84b03a 	or	r2,r19,r22
   819d4:	90e4703a 	and	r18,r18,r3
   819d8:	10017726 	beq	r2,zero,81fb8 <___vfprintf_internal_r+0xb24>
   819dc:	b0038326 	beq	r22,zero,827ec <___vfprintf_internal_r+0x1358>
   819e0:	dc402a15 	stw	r17,168(sp)
   819e4:	dc001e04 	addi	r16,sp,120
   819e8:	b023883a 	mov	r17,r22
   819ec:	402d883a 	mov	r22,r8
   819f0:	9809883a 	mov	r4,r19
   819f4:	880b883a 	mov	r5,r17
   819f8:	01800284 	movi	r6,10
   819fc:	000f883a 	mov	r7,zero
   81a00:	008af440 	call	8af44 <__umoddi3>
   81a04:	10800c04 	addi	r2,r2,48
   81a08:	843fffc4 	addi	r16,r16,-1
   81a0c:	9809883a 	mov	r4,r19
   81a10:	880b883a 	mov	r5,r17
   81a14:	80800005 	stb	r2,0(r16)
   81a18:	01800284 	movi	r6,10
   81a1c:	000f883a 	mov	r7,zero
   81a20:	008a9cc0 	call	8a9cc <__udivdi3>
   81a24:	1027883a 	mov	r19,r2
   81a28:	10c4b03a 	or	r2,r2,r3
   81a2c:	1823883a 	mov	r17,r3
   81a30:	103fef1e 	bne	r2,zero,819f0 <__alt_data_end+0xfffb5f00>
   81a34:	d8c02817 	ldw	r3,160(sp)
   81a38:	dc402a17 	ldw	r17,168(sp)
   81a3c:	b011883a 	mov	r8,r22
   81a40:	1c07c83a 	sub	r3,r3,r16
   81a44:	d8c02e15 	stw	r3,184(sp)
   81a48:	00005906 	br	81bb0 <___vfprintf_internal_r+0x71c>
   81a4c:	18c03fcc 	andi	r3,r3,255
   81a50:	1806fa1e 	bne	r3,zero,8363c <___vfprintf_internal_r+0x21a8>
   81a54:	9080020c 	andi	r2,r18,8
   81a58:	10048a26 	beq	r2,zero,82c84 <___vfprintf_internal_r+0x17f0>
   81a5c:	d8c02d17 	ldw	r3,180(sp)
   81a60:	d9002d17 	ldw	r4,180(sp)
   81a64:	d9402d17 	ldw	r5,180(sp)
   81a68:	18c00017 	ldw	r3,0(r3)
   81a6c:	21000117 	ldw	r4,4(r4)
   81a70:	29400204 	addi	r5,r5,8
   81a74:	d8c03615 	stw	r3,216(sp)
   81a78:	d9003815 	stw	r4,224(sp)
   81a7c:	d9402d15 	stw	r5,180(sp)
   81a80:	d9003617 	ldw	r4,216(sp)
   81a84:	d9403817 	ldw	r5,224(sp)
   81a88:	da003d15 	stw	r8,244(sp)
   81a8c:	04000044 	movi	r16,1
   81a90:	00887100 	call	88710 <__fpclassifyd>
   81a94:	da003d17 	ldw	r8,244(sp)
   81a98:	14041f1e 	bne	r2,r16,82b18 <___vfprintf_internal_r+0x1684>
   81a9c:	d9003617 	ldw	r4,216(sp)
   81aa0:	d9403817 	ldw	r5,224(sp)
   81aa4:	000d883a 	mov	r6,zero
   81aa8:	000f883a 	mov	r7,zero
   81aac:	008c7740 	call	8c774 <__ledf2>
   81ab0:	da003d17 	ldw	r8,244(sp)
   81ab4:	1005be16 	blt	r2,zero,831b0 <___vfprintf_internal_r+0x1d1c>
   81ab8:	df002783 	ldbu	fp,158(sp)
   81abc:	008011c4 	movi	r2,71
   81ac0:	1445330e 	bge	r2,r17,82f90 <___vfprintf_internal_r+0x1afc>
   81ac4:	04000274 	movhi	r16,9
   81ac8:	8401d604 	addi	r16,r16,1880
   81acc:	00c000c4 	movi	r3,3
   81ad0:	00bfdfc4 	movi	r2,-129
   81ad4:	d8c02a15 	stw	r3,168(sp)
   81ad8:	90a4703a 	and	r18,r18,r2
   81adc:	d8c02e15 	stw	r3,184(sp)
   81ae0:	d8002915 	stw	zero,164(sp)
   81ae4:	d8003215 	stw	zero,200(sp)
   81ae8:	00003706 	br	81bc8 <___vfprintf_internal_r+0x734>
   81aec:	94800214 	ori	r18,r18,8
   81af0:	ac400007 	ldb	r17,0(r21)
   81af4:	003ec806 	br	81618 <__alt_data_end+0xfffb5b28>
   81af8:	18c03fcc 	andi	r3,r3,255
   81afc:	1806db1e 	bne	r3,zero,8366c <___vfprintf_internal_r+0x21d8>
   81b00:	94800414 	ori	r18,r18,16
   81b04:	9080080c 	andi	r2,r18,32
   81b08:	1002d826 	beq	r2,zero,8266c <___vfprintf_internal_r+0x11d8>
   81b0c:	d9402d17 	ldw	r5,180(sp)
   81b10:	d8c02917 	ldw	r3,164(sp)
   81b14:	d8002785 	stb	zero,158(sp)
   81b18:	28800204 	addi	r2,r5,8
   81b1c:	2cc00017 	ldw	r19,0(r5)
   81b20:	2d800117 	ldw	r22,4(r5)
   81b24:	18048f16 	blt	r3,zero,82d64 <___vfprintf_internal_r+0x18d0>
   81b28:	013fdfc4 	movi	r4,-129
   81b2c:	9d86b03a 	or	r3,r19,r22
   81b30:	d8802d15 	stw	r2,180(sp)
   81b34:	9124703a 	and	r18,r18,r4
   81b38:	1802d91e 	bne	r3,zero,826a0 <___vfprintf_internal_r+0x120c>
   81b3c:	d8c02917 	ldw	r3,164(sp)
   81b40:	0039883a 	mov	fp,zero
   81b44:	1805c326 	beq	r3,zero,83254 <___vfprintf_internal_r+0x1dc0>
   81b48:	0027883a 	mov	r19,zero
   81b4c:	002d883a 	mov	r22,zero
   81b50:	dc001e04 	addi	r16,sp,120
   81b54:	9806d0fa 	srli	r3,r19,3
   81b58:	b008977a 	slli	r4,r22,29
   81b5c:	b02cd0fa 	srli	r22,r22,3
   81b60:	9cc001cc 	andi	r19,r19,7
   81b64:	98800c04 	addi	r2,r19,48
   81b68:	843fffc4 	addi	r16,r16,-1
   81b6c:	20e6b03a 	or	r19,r4,r3
   81b70:	80800005 	stb	r2,0(r16)
   81b74:	9d86b03a 	or	r3,r19,r22
   81b78:	183ff61e 	bne	r3,zero,81b54 <__alt_data_end+0xfffb6064>
   81b7c:	90c0004c 	andi	r3,r18,1
   81b80:	18013b26 	beq	r3,zero,82070 <___vfprintf_internal_r+0xbdc>
   81b84:	10803fcc 	andi	r2,r2,255
   81b88:	1080201c 	xori	r2,r2,128
   81b8c:	10bfe004 	addi	r2,r2,-128
   81b90:	00c00c04 	movi	r3,48
   81b94:	10c13626 	beq	r2,r3,82070 <___vfprintf_internal_r+0xbdc>
   81b98:	80ffffc5 	stb	r3,-1(r16)
   81b9c:	d8c02817 	ldw	r3,160(sp)
   81ba0:	80bfffc4 	addi	r2,r16,-1
   81ba4:	1021883a 	mov	r16,r2
   81ba8:	1887c83a 	sub	r3,r3,r2
   81bac:	d8c02e15 	stw	r3,184(sp)
   81bb0:	d8802e17 	ldw	r2,184(sp)
   81bb4:	d9002917 	ldw	r4,164(sp)
   81bb8:	1100010e 	bge	r2,r4,81bc0 <___vfprintf_internal_r+0x72c>
   81bbc:	2005883a 	mov	r2,r4
   81bc0:	d8802a15 	stw	r2,168(sp)
   81bc4:	d8003215 	stw	zero,200(sp)
   81bc8:	e7003fcc 	andi	fp,fp,255
   81bcc:	e700201c 	xori	fp,fp,128
   81bd0:	e73fe004 	addi	fp,fp,-128
   81bd4:	e0000326 	beq	fp,zero,81be4 <___vfprintf_internal_r+0x750>
   81bd8:	d8c02a17 	ldw	r3,168(sp)
   81bdc:	18c00044 	addi	r3,r3,1
   81be0:	d8c02a15 	stw	r3,168(sp)
   81be4:	90c0008c 	andi	r3,r18,2
   81be8:	d8c02b15 	stw	r3,172(sp)
   81bec:	18000326 	beq	r3,zero,81bfc <___vfprintf_internal_r+0x768>
   81bf0:	d8c02a17 	ldw	r3,168(sp)
   81bf4:	18c00084 	addi	r3,r3,2
   81bf8:	d8c02a15 	stw	r3,168(sp)
   81bfc:	90c0210c 	andi	r3,r18,132
   81c00:	d8c03015 	stw	r3,192(sp)
   81c04:	1801a31e 	bne	r3,zero,82294 <___vfprintf_internal_r+0xe00>
   81c08:	d9003117 	ldw	r4,196(sp)
   81c0c:	d8c02a17 	ldw	r3,168(sp)
   81c10:	20e7c83a 	sub	r19,r4,r3
   81c14:	04c19f0e 	bge	zero,r19,82294 <___vfprintf_internal_r+0xe00>
   81c18:	02400404 	movi	r9,16
   81c1c:	d8c02017 	ldw	r3,128(sp)
   81c20:	d8801f17 	ldw	r2,124(sp)
   81c24:	4cc50d0e 	bge	r9,r19,8305c <___vfprintf_internal_r+0x1bc8>
   81c28:	01400274 	movhi	r5,9
   81c2c:	2941e984 	addi	r5,r5,1958
   81c30:	dc403b15 	stw	r17,236(sp)
   81c34:	d9403515 	stw	r5,212(sp)
   81c38:	9823883a 	mov	r17,r19
   81c3c:	482d883a 	mov	r22,r9
   81c40:	9027883a 	mov	r19,r18
   81c44:	070001c4 	movi	fp,7
   81c48:	8025883a 	mov	r18,r16
   81c4c:	dc002c17 	ldw	r16,176(sp)
   81c50:	00000306 	br	81c60 <___vfprintf_internal_r+0x7cc>
   81c54:	8c7ffc04 	addi	r17,r17,-16
   81c58:	42000204 	addi	r8,r8,8
   81c5c:	b440130e 	bge	r22,r17,81cac <___vfprintf_internal_r+0x818>
   81c60:	01000274 	movhi	r4,9
   81c64:	18c00404 	addi	r3,r3,16
   81c68:	10800044 	addi	r2,r2,1
   81c6c:	2101e984 	addi	r4,r4,1958
   81c70:	41000015 	stw	r4,0(r8)
   81c74:	45800115 	stw	r22,4(r8)
   81c78:	d8c02015 	stw	r3,128(sp)
   81c7c:	d8801f15 	stw	r2,124(sp)
   81c80:	e0bff40e 	bge	fp,r2,81c54 <__alt_data_end+0xfffb6164>
   81c84:	d9801e04 	addi	r6,sp,120
   81c88:	b80b883a 	mov	r5,r23
   81c8c:	8009883a 	mov	r4,r16
   81c90:	0088aec0 	call	88aec <__sprint_r>
   81c94:	103f011e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   81c98:	8c7ffc04 	addi	r17,r17,-16
   81c9c:	d8c02017 	ldw	r3,128(sp)
   81ca0:	d8801f17 	ldw	r2,124(sp)
   81ca4:	da000404 	addi	r8,sp,16
   81ca8:	b47fed16 	blt	r22,r17,81c60 <__alt_data_end+0xfffb6170>
   81cac:	9021883a 	mov	r16,r18
   81cb0:	9825883a 	mov	r18,r19
   81cb4:	8827883a 	mov	r19,r17
   81cb8:	dc403b17 	ldw	r17,236(sp)
   81cbc:	d9403517 	ldw	r5,212(sp)
   81cc0:	98c7883a 	add	r3,r19,r3
   81cc4:	10800044 	addi	r2,r2,1
   81cc8:	41400015 	stw	r5,0(r8)
   81ccc:	44c00115 	stw	r19,4(r8)
   81cd0:	d8c02015 	stw	r3,128(sp)
   81cd4:	d8801f15 	stw	r2,124(sp)
   81cd8:	010001c4 	movi	r4,7
   81cdc:	2082a316 	blt	r4,r2,8276c <___vfprintf_internal_r+0x12d8>
   81ce0:	df002787 	ldb	fp,158(sp)
   81ce4:	42000204 	addi	r8,r8,8
   81ce8:	e0000c26 	beq	fp,zero,81d1c <___vfprintf_internal_r+0x888>
   81cec:	d8801f17 	ldw	r2,124(sp)
   81cf0:	d9002784 	addi	r4,sp,158
   81cf4:	18c00044 	addi	r3,r3,1
   81cf8:	10800044 	addi	r2,r2,1
   81cfc:	41000015 	stw	r4,0(r8)
   81d00:	01000044 	movi	r4,1
   81d04:	41000115 	stw	r4,4(r8)
   81d08:	d8c02015 	stw	r3,128(sp)
   81d0c:	d8801f15 	stw	r2,124(sp)
   81d10:	010001c4 	movi	r4,7
   81d14:	20823c16 	blt	r4,r2,82608 <___vfprintf_internal_r+0x1174>
   81d18:	42000204 	addi	r8,r8,8
   81d1c:	d8802b17 	ldw	r2,172(sp)
   81d20:	10000c26 	beq	r2,zero,81d54 <___vfprintf_internal_r+0x8c0>
   81d24:	d8801f17 	ldw	r2,124(sp)
   81d28:	d9002704 	addi	r4,sp,156
   81d2c:	18c00084 	addi	r3,r3,2
   81d30:	10800044 	addi	r2,r2,1
   81d34:	41000015 	stw	r4,0(r8)
   81d38:	01000084 	movi	r4,2
   81d3c:	41000115 	stw	r4,4(r8)
   81d40:	d8c02015 	stw	r3,128(sp)
   81d44:	d8801f15 	stw	r2,124(sp)
   81d48:	010001c4 	movi	r4,7
   81d4c:	20823616 	blt	r4,r2,82628 <___vfprintf_internal_r+0x1194>
   81d50:	42000204 	addi	r8,r8,8
   81d54:	d9003017 	ldw	r4,192(sp)
   81d58:	00802004 	movi	r2,128
   81d5c:	20819926 	beq	r4,r2,823c4 <___vfprintf_internal_r+0xf30>
   81d60:	d9402917 	ldw	r5,164(sp)
   81d64:	d8802e17 	ldw	r2,184(sp)
   81d68:	28adc83a 	sub	r22,r5,r2
   81d6c:	0580310e 	bge	zero,r22,81e34 <___vfprintf_internal_r+0x9a0>
   81d70:	07000404 	movi	fp,16
   81d74:	d8801f17 	ldw	r2,124(sp)
   81d78:	e584140e 	bge	fp,r22,82dcc <___vfprintf_internal_r+0x1938>
   81d7c:	01400274 	movhi	r5,9
   81d80:	2941e584 	addi	r5,r5,1942
   81d84:	dc402915 	stw	r17,164(sp)
   81d88:	d9402b15 	stw	r5,172(sp)
   81d8c:	b023883a 	mov	r17,r22
   81d90:	04c001c4 	movi	r19,7
   81d94:	a82d883a 	mov	r22,r21
   81d98:	902b883a 	mov	r21,r18
   81d9c:	8025883a 	mov	r18,r16
   81da0:	dc002c17 	ldw	r16,176(sp)
   81da4:	00000306 	br	81db4 <___vfprintf_internal_r+0x920>
   81da8:	8c7ffc04 	addi	r17,r17,-16
   81dac:	42000204 	addi	r8,r8,8
   81db0:	e440110e 	bge	fp,r17,81df8 <___vfprintf_internal_r+0x964>
   81db4:	18c00404 	addi	r3,r3,16
   81db8:	10800044 	addi	r2,r2,1
   81dbc:	45000015 	stw	r20,0(r8)
   81dc0:	47000115 	stw	fp,4(r8)
   81dc4:	d8c02015 	stw	r3,128(sp)
   81dc8:	d8801f15 	stw	r2,124(sp)
   81dcc:	98bff60e 	bge	r19,r2,81da8 <__alt_data_end+0xfffb62b8>
   81dd0:	d9801e04 	addi	r6,sp,120
   81dd4:	b80b883a 	mov	r5,r23
   81dd8:	8009883a 	mov	r4,r16
   81ddc:	0088aec0 	call	88aec <__sprint_r>
   81de0:	103eae1e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   81de4:	8c7ffc04 	addi	r17,r17,-16
   81de8:	d8c02017 	ldw	r3,128(sp)
   81dec:	d8801f17 	ldw	r2,124(sp)
   81df0:	da000404 	addi	r8,sp,16
   81df4:	e47fef16 	blt	fp,r17,81db4 <__alt_data_end+0xfffb62c4>
   81df8:	9021883a 	mov	r16,r18
   81dfc:	a825883a 	mov	r18,r21
   81e00:	b02b883a 	mov	r21,r22
   81e04:	882d883a 	mov	r22,r17
   81e08:	dc402917 	ldw	r17,164(sp)
   81e0c:	d9002b17 	ldw	r4,172(sp)
   81e10:	1d87883a 	add	r3,r3,r22
   81e14:	10800044 	addi	r2,r2,1
   81e18:	41000015 	stw	r4,0(r8)
   81e1c:	45800115 	stw	r22,4(r8)
   81e20:	d8c02015 	stw	r3,128(sp)
   81e24:	d8801f15 	stw	r2,124(sp)
   81e28:	010001c4 	movi	r4,7
   81e2c:	2081ee16 	blt	r4,r2,825e8 <___vfprintf_internal_r+0x1154>
   81e30:	42000204 	addi	r8,r8,8
   81e34:	9080400c 	andi	r2,r18,256
   81e38:	1001181e 	bne	r2,zero,8229c <___vfprintf_internal_r+0xe08>
   81e3c:	d9402e17 	ldw	r5,184(sp)
   81e40:	d8801f17 	ldw	r2,124(sp)
   81e44:	44000015 	stw	r16,0(r8)
   81e48:	1947883a 	add	r3,r3,r5
   81e4c:	10800044 	addi	r2,r2,1
   81e50:	41400115 	stw	r5,4(r8)
   81e54:	d8c02015 	stw	r3,128(sp)
   81e58:	d8801f15 	stw	r2,124(sp)
   81e5c:	010001c4 	movi	r4,7
   81e60:	2081d316 	blt	r4,r2,825b0 <___vfprintf_internal_r+0x111c>
   81e64:	42000204 	addi	r8,r8,8
   81e68:	9480010c 	andi	r18,r18,4
   81e6c:	90003226 	beq	r18,zero,81f38 <___vfprintf_internal_r+0xaa4>
   81e70:	d9403117 	ldw	r5,196(sp)
   81e74:	d8802a17 	ldw	r2,168(sp)
   81e78:	28a1c83a 	sub	r16,r5,r2
   81e7c:	04002e0e 	bge	zero,r16,81f38 <___vfprintf_internal_r+0xaa4>
   81e80:	04400404 	movi	r17,16
   81e84:	d8801f17 	ldw	r2,124(sp)
   81e88:	8c04a20e 	bge	r17,r16,83114 <___vfprintf_internal_r+0x1c80>
   81e8c:	01400274 	movhi	r5,9
   81e90:	2941e984 	addi	r5,r5,1958
   81e94:	d9403515 	stw	r5,212(sp)
   81e98:	048001c4 	movi	r18,7
   81e9c:	dcc02c17 	ldw	r19,176(sp)
   81ea0:	00000306 	br	81eb0 <___vfprintf_internal_r+0xa1c>
   81ea4:	843ffc04 	addi	r16,r16,-16
   81ea8:	42000204 	addi	r8,r8,8
   81eac:	8c00130e 	bge	r17,r16,81efc <___vfprintf_internal_r+0xa68>
   81eb0:	01000274 	movhi	r4,9
   81eb4:	18c00404 	addi	r3,r3,16
   81eb8:	10800044 	addi	r2,r2,1
   81ebc:	2101e984 	addi	r4,r4,1958
   81ec0:	41000015 	stw	r4,0(r8)
   81ec4:	44400115 	stw	r17,4(r8)
   81ec8:	d8c02015 	stw	r3,128(sp)
   81ecc:	d8801f15 	stw	r2,124(sp)
   81ed0:	90bff40e 	bge	r18,r2,81ea4 <__alt_data_end+0xfffb63b4>
   81ed4:	d9801e04 	addi	r6,sp,120
   81ed8:	b80b883a 	mov	r5,r23
   81edc:	9809883a 	mov	r4,r19
   81ee0:	0088aec0 	call	88aec <__sprint_r>
   81ee4:	103e6d1e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   81ee8:	843ffc04 	addi	r16,r16,-16
   81eec:	d8c02017 	ldw	r3,128(sp)
   81ef0:	d8801f17 	ldw	r2,124(sp)
   81ef4:	da000404 	addi	r8,sp,16
   81ef8:	8c3fed16 	blt	r17,r16,81eb0 <__alt_data_end+0xfffb63c0>
   81efc:	d9403517 	ldw	r5,212(sp)
   81f00:	1c07883a 	add	r3,r3,r16
   81f04:	10800044 	addi	r2,r2,1
   81f08:	41400015 	stw	r5,0(r8)
   81f0c:	44000115 	stw	r16,4(r8)
   81f10:	d8c02015 	stw	r3,128(sp)
   81f14:	d8801f15 	stw	r2,124(sp)
   81f18:	010001c4 	movi	r4,7
   81f1c:	2080060e 	bge	r4,r2,81f38 <___vfprintf_internal_r+0xaa4>
   81f20:	d9002c17 	ldw	r4,176(sp)
   81f24:	d9801e04 	addi	r6,sp,120
   81f28:	b80b883a 	mov	r5,r23
   81f2c:	0088aec0 	call	88aec <__sprint_r>
   81f30:	103e5a1e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   81f34:	d8c02017 	ldw	r3,128(sp)
   81f38:	d8803117 	ldw	r2,196(sp)
   81f3c:	d9002a17 	ldw	r4,168(sp)
   81f40:	1100010e 	bge	r2,r4,81f48 <___vfprintf_internal_r+0xab4>
   81f44:	2005883a 	mov	r2,r4
   81f48:	d9402f17 	ldw	r5,188(sp)
   81f4c:	288b883a 	add	r5,r5,r2
   81f50:	d9402f15 	stw	r5,188(sp)
   81f54:	18019e1e 	bne	r3,zero,825d0 <___vfprintf_internal_r+0x113c>
   81f58:	a8800007 	ldb	r2,0(r21)
   81f5c:	d8001f15 	stw	zero,124(sp)
   81f60:	da000404 	addi	r8,sp,16
   81f64:	103d851e 	bne	r2,zero,8157c <__alt_data_end+0xfffb5a8c>
   81f68:	a821883a 	mov	r16,r21
   81f6c:	003d9b06 	br	815dc <__alt_data_end+0xfffb5aec>
   81f70:	18c03fcc 	andi	r3,r3,255
   81f74:	1805c11e 	bne	r3,zero,8367c <___vfprintf_internal_r+0x21e8>
   81f78:	94800414 	ori	r18,r18,16
   81f7c:	9080080c 	andi	r2,r18,32
   81f80:	10020c26 	beq	r2,zero,827b4 <___vfprintf_internal_r+0x1320>
   81f84:	d8802d17 	ldw	r2,180(sp)
   81f88:	d9002917 	ldw	r4,164(sp)
   81f8c:	d8002785 	stb	zero,158(sp)
   81f90:	10c00204 	addi	r3,r2,8
   81f94:	14c00017 	ldw	r19,0(r2)
   81f98:	15800117 	ldw	r22,4(r2)
   81f9c:	20040f16 	blt	r4,zero,82fdc <___vfprintf_internal_r+0x1b48>
   81fa0:	013fdfc4 	movi	r4,-129
   81fa4:	9d84b03a 	or	r2,r19,r22
   81fa8:	d8c02d15 	stw	r3,180(sp)
   81fac:	9124703a 	and	r18,r18,r4
   81fb0:	0039883a 	mov	fp,zero
   81fb4:	103e891e 	bne	r2,zero,819dc <__alt_data_end+0xfffb5eec>
   81fb8:	d9002917 	ldw	r4,164(sp)
   81fbc:	2002c11e 	bne	r4,zero,82ac4 <___vfprintf_internal_r+0x1630>
   81fc0:	d8002915 	stw	zero,164(sp)
   81fc4:	d8002e15 	stw	zero,184(sp)
   81fc8:	dc001e04 	addi	r16,sp,120
   81fcc:	003ef806 	br	81bb0 <__alt_data_end+0xfffb60c0>
   81fd0:	18c03fcc 	andi	r3,r3,255
   81fd4:	18059d1e 	bne	r3,zero,8364c <___vfprintf_internal_r+0x21b8>
   81fd8:	01400274 	movhi	r5,9
   81fdc:	2941d904 	addi	r5,r5,1892
   81fe0:	d9403915 	stw	r5,228(sp)
   81fe4:	9080080c 	andi	r2,r18,32
   81fe8:	10005226 	beq	r2,zero,82134 <___vfprintf_internal_r+0xca0>
   81fec:	d8802d17 	ldw	r2,180(sp)
   81ff0:	14c00017 	ldw	r19,0(r2)
   81ff4:	15800117 	ldw	r22,4(r2)
   81ff8:	10800204 	addi	r2,r2,8
   81ffc:	d8802d15 	stw	r2,180(sp)
   82000:	9080004c 	andi	r2,r18,1
   82004:	10019026 	beq	r2,zero,82648 <___vfprintf_internal_r+0x11b4>
   82008:	9d84b03a 	or	r2,r19,r22
   8200c:	10036926 	beq	r2,zero,82db4 <___vfprintf_internal_r+0x1920>
   82010:	d8c02917 	ldw	r3,164(sp)
   82014:	00800c04 	movi	r2,48
   82018:	d8802705 	stb	r2,156(sp)
   8201c:	dc402745 	stb	r17,157(sp)
   82020:	d8002785 	stb	zero,158(sp)
   82024:	90800094 	ori	r2,r18,2
   82028:	18045d16 	blt	r3,zero,831a0 <___vfprintf_internal_r+0x1d0c>
   8202c:	00bfdfc4 	movi	r2,-129
   82030:	90a4703a 	and	r18,r18,r2
   82034:	94800094 	ori	r18,r18,2
   82038:	0039883a 	mov	fp,zero
   8203c:	d9003917 	ldw	r4,228(sp)
   82040:	dc001e04 	addi	r16,sp,120
   82044:	988003cc 	andi	r2,r19,15
   82048:	b006973a 	slli	r3,r22,28
   8204c:	2085883a 	add	r2,r4,r2
   82050:	9826d13a 	srli	r19,r19,4
   82054:	10800003 	ldbu	r2,0(r2)
   82058:	b02cd13a 	srli	r22,r22,4
   8205c:	843fffc4 	addi	r16,r16,-1
   82060:	1ce6b03a 	or	r19,r3,r19
   82064:	80800005 	stb	r2,0(r16)
   82068:	9d84b03a 	or	r2,r19,r22
   8206c:	103ff51e 	bne	r2,zero,82044 <__alt_data_end+0xfffb6554>
   82070:	d8c02817 	ldw	r3,160(sp)
   82074:	1c07c83a 	sub	r3,r3,r16
   82078:	d8c02e15 	stw	r3,184(sp)
   8207c:	003ecc06 	br	81bb0 <__alt_data_end+0xfffb60c0>
   82080:	18c03fcc 	andi	r3,r3,255
   82084:	183e9f26 	beq	r3,zero,81b04 <__alt_data_end+0xfffb6014>
   82088:	d9c02785 	stb	r7,158(sp)
   8208c:	003e9d06 	br	81b04 <__alt_data_end+0xfffb6014>
   82090:	00c00044 	movi	r3,1
   82094:	01c00ac4 	movi	r7,43
   82098:	ac400007 	ldb	r17,0(r21)
   8209c:	003d5e06 	br	81618 <__alt_data_end+0xfffb5b28>
   820a0:	94800814 	ori	r18,r18,32
   820a4:	ac400007 	ldb	r17,0(r21)
   820a8:	003d5b06 	br	81618 <__alt_data_end+0xfffb5b28>
   820ac:	d8c02d17 	ldw	r3,180(sp)
   820b0:	d8002785 	stb	zero,158(sp)
   820b4:	1c000017 	ldw	r16,0(r3)
   820b8:	1cc00104 	addi	r19,r3,4
   820bc:	80041926 	beq	r16,zero,83124 <___vfprintf_internal_r+0x1c90>
   820c0:	d9002917 	ldw	r4,164(sp)
   820c4:	2003d016 	blt	r4,zero,83008 <___vfprintf_internal_r+0x1b74>
   820c8:	200d883a 	mov	r6,r4
   820cc:	000b883a 	mov	r5,zero
   820d0:	8009883a 	mov	r4,r16
   820d4:	da003d15 	stw	r8,244(sp)
   820d8:	0086d000 	call	86d00 <memchr>
   820dc:	da003d17 	ldw	r8,244(sp)
   820e0:	10045426 	beq	r2,zero,83234 <___vfprintf_internal_r+0x1da0>
   820e4:	1405c83a 	sub	r2,r2,r16
   820e8:	d8802e15 	stw	r2,184(sp)
   820ec:	1003cc16 	blt	r2,zero,83020 <___vfprintf_internal_r+0x1b8c>
   820f0:	df002783 	ldbu	fp,158(sp)
   820f4:	d8802a15 	stw	r2,168(sp)
   820f8:	dcc02d15 	stw	r19,180(sp)
   820fc:	d8002915 	stw	zero,164(sp)
   82100:	d8003215 	stw	zero,200(sp)
   82104:	003eb006 	br	81bc8 <__alt_data_end+0xfffb60d8>
   82108:	18c03fcc 	andi	r3,r3,255
   8210c:	183f9b26 	beq	r3,zero,81f7c <__alt_data_end+0xfffb648c>
   82110:	d9c02785 	stb	r7,158(sp)
   82114:	003f9906 	br	81f7c <__alt_data_end+0xfffb648c>
   82118:	18c03fcc 	andi	r3,r3,255
   8211c:	1805551e 	bne	r3,zero,83674 <___vfprintf_internal_r+0x21e0>
   82120:	01400274 	movhi	r5,9
   82124:	2941de04 	addi	r5,r5,1912
   82128:	d9403915 	stw	r5,228(sp)
   8212c:	9080080c 	andi	r2,r18,32
   82130:	103fae1e 	bne	r2,zero,81fec <__alt_data_end+0xfffb64fc>
   82134:	9080040c 	andi	r2,r18,16
   82138:	1002de26 	beq	r2,zero,82cb4 <___vfprintf_internal_r+0x1820>
   8213c:	d8c02d17 	ldw	r3,180(sp)
   82140:	002d883a 	mov	r22,zero
   82144:	1cc00017 	ldw	r19,0(r3)
   82148:	18c00104 	addi	r3,r3,4
   8214c:	d8c02d15 	stw	r3,180(sp)
   82150:	003fab06 	br	82000 <__alt_data_end+0xfffb6510>
   82154:	38803fcc 	andi	r2,r7,255
   82158:	1080201c 	xori	r2,r2,128
   8215c:	10bfe004 	addi	r2,r2,-128
   82160:	1002d21e 	bne	r2,zero,82cac <___vfprintf_internal_r+0x1818>
   82164:	00c00044 	movi	r3,1
   82168:	01c00804 	movi	r7,32
   8216c:	ac400007 	ldb	r17,0(r21)
   82170:	003d2906 	br	81618 <__alt_data_end+0xfffb5b28>
   82174:	94800054 	ori	r18,r18,1
   82178:	ac400007 	ldb	r17,0(r21)
   8217c:	003d2606 	br	81618 <__alt_data_end+0xfffb5b28>
   82180:	18c03fcc 	andi	r3,r3,255
   82184:	183e0526 	beq	r3,zero,8199c <__alt_data_end+0xfffb5eac>
   82188:	d9c02785 	stb	r7,158(sp)
   8218c:	003e0306 	br	8199c <__alt_data_end+0xfffb5eac>
   82190:	94801014 	ori	r18,r18,64
   82194:	ac400007 	ldb	r17,0(r21)
   82198:	003d1f06 	br	81618 <__alt_data_end+0xfffb5b28>
   8219c:	ac400007 	ldb	r17,0(r21)
   821a0:	8a438726 	beq	r17,r9,82fc0 <___vfprintf_internal_r+0x1b2c>
   821a4:	94800414 	ori	r18,r18,16
   821a8:	003d1b06 	br	81618 <__alt_data_end+0xfffb5b28>
   821ac:	18c03fcc 	andi	r3,r3,255
   821b0:	1805341e 	bne	r3,zero,83684 <___vfprintf_internal_r+0x21f0>
   821b4:	9080080c 	andi	r2,r18,32
   821b8:	1002cd26 	beq	r2,zero,82cf0 <___vfprintf_internal_r+0x185c>
   821bc:	d9402d17 	ldw	r5,180(sp)
   821c0:	d9002f17 	ldw	r4,188(sp)
   821c4:	28800017 	ldw	r2,0(r5)
   821c8:	2007d7fa 	srai	r3,r4,31
   821cc:	29400104 	addi	r5,r5,4
   821d0:	d9402d15 	stw	r5,180(sp)
   821d4:	11000015 	stw	r4,0(r2)
   821d8:	10c00115 	stw	r3,4(r2)
   821dc:	003ce506 	br	81574 <__alt_data_end+0xfffb5a84>
   821e0:	d8c02d17 	ldw	r3,180(sp)
   821e4:	d9002d17 	ldw	r4,180(sp)
   821e8:	d8002785 	stb	zero,158(sp)
   821ec:	18800017 	ldw	r2,0(r3)
   821f0:	21000104 	addi	r4,r4,4
   821f4:	00c00044 	movi	r3,1
   821f8:	d8c02a15 	stw	r3,168(sp)
   821fc:	d8801405 	stb	r2,80(sp)
   82200:	d9002d15 	stw	r4,180(sp)
   82204:	d8c02e15 	stw	r3,184(sp)
   82208:	d8002915 	stw	zero,164(sp)
   8220c:	d8003215 	stw	zero,200(sp)
   82210:	dc001404 	addi	r16,sp,80
   82214:	0039883a 	mov	fp,zero
   82218:	003e7206 	br	81be4 <__alt_data_end+0xfffb60f4>
   8221c:	01000274 	movhi	r4,9
   82220:	2101de04 	addi	r4,r4,1912
   82224:	0039883a 	mov	fp,zero
   82228:	d9003915 	stw	r4,228(sp)
   8222c:	04401e04 	movi	r17,120
   82230:	003f8206 	br	8203c <__alt_data_end+0xfffb654c>
   82234:	18c03fcc 	andi	r3,r3,255
   82238:	1805061e 	bne	r3,zero,83654 <___vfprintf_internal_r+0x21c0>
   8223c:	883d9126 	beq	r17,zero,81884 <__alt_data_end+0xfffb5d94>
   82240:	00c00044 	movi	r3,1
   82244:	d8c02a15 	stw	r3,168(sp)
   82248:	dc401405 	stb	r17,80(sp)
   8224c:	d8002785 	stb	zero,158(sp)
   82250:	003fec06 	br	82204 <__alt_data_end+0xfffb6714>
   82254:	01400274 	movhi	r5,9
   82258:	2941de04 	addi	r5,r5,1912
   8225c:	d9403915 	stw	r5,228(sp)
   82260:	d8c02d15 	stw	r3,180(sp)
   82264:	1025883a 	mov	r18,r2
   82268:	04401e04 	movi	r17,120
   8226c:	9d84b03a 	or	r2,r19,r22
   82270:	1000fc1e 	bne	r2,zero,82664 <___vfprintf_internal_r+0x11d0>
   82274:	0039883a 	mov	fp,zero
   82278:	00800084 	movi	r2,2
   8227c:	10803fcc 	andi	r2,r2,255
   82280:	00c00044 	movi	r3,1
   82284:	10c20f26 	beq	r2,r3,82ac4 <___vfprintf_internal_r+0x1630>
   82288:	00c00084 	movi	r3,2
   8228c:	10fd6326 	beq	r2,r3,8181c <__alt_data_end+0xfffb5d2c>
   82290:	003e2d06 	br	81b48 <__alt_data_end+0xfffb6058>
   82294:	d8c02017 	ldw	r3,128(sp)
   82298:	003e9306 	br	81ce8 <__alt_data_end+0xfffb61f8>
   8229c:	00801944 	movi	r2,101
   822a0:	14407e0e 	bge	r2,r17,8249c <___vfprintf_internal_r+0x1008>
   822a4:	d9003617 	ldw	r4,216(sp)
   822a8:	d9403817 	ldw	r5,224(sp)
   822ac:	000d883a 	mov	r6,zero
   822b0:	000f883a 	mov	r7,zero
   822b4:	d8c03c15 	stw	r3,240(sp)
   822b8:	da003d15 	stw	r8,244(sp)
   822bc:	008c6100 	call	8c610 <__eqdf2>
   822c0:	d8c03c17 	ldw	r3,240(sp)
   822c4:	da003d17 	ldw	r8,244(sp)
   822c8:	1000f71e 	bne	r2,zero,826a8 <___vfprintf_internal_r+0x1214>
   822cc:	d8801f17 	ldw	r2,124(sp)
   822d0:	01000274 	movhi	r4,9
   822d4:	2101e504 	addi	r4,r4,1940
   822d8:	18c00044 	addi	r3,r3,1
   822dc:	10800044 	addi	r2,r2,1
   822e0:	41000015 	stw	r4,0(r8)
   822e4:	01000044 	movi	r4,1
   822e8:	41000115 	stw	r4,4(r8)
   822ec:	d8c02015 	stw	r3,128(sp)
   822f0:	d8801f15 	stw	r2,124(sp)
   822f4:	010001c4 	movi	r4,7
   822f8:	2082b816 	blt	r4,r2,82ddc <___vfprintf_internal_r+0x1948>
   822fc:	42000204 	addi	r8,r8,8
   82300:	d8802617 	ldw	r2,152(sp)
   82304:	d9403317 	ldw	r5,204(sp)
   82308:	11400216 	blt	r2,r5,82314 <___vfprintf_internal_r+0xe80>
   8230c:	9080004c 	andi	r2,r18,1
   82310:	103ed526 	beq	r2,zero,81e68 <__alt_data_end+0xfffb6378>
   82314:	d8803717 	ldw	r2,220(sp)
   82318:	d9003417 	ldw	r4,208(sp)
   8231c:	d9403717 	ldw	r5,220(sp)
   82320:	1887883a 	add	r3,r3,r2
   82324:	d8801f17 	ldw	r2,124(sp)
   82328:	41000015 	stw	r4,0(r8)
   8232c:	41400115 	stw	r5,4(r8)
   82330:	10800044 	addi	r2,r2,1
   82334:	d8c02015 	stw	r3,128(sp)
   82338:	d8801f15 	stw	r2,124(sp)
   8233c:	010001c4 	movi	r4,7
   82340:	20832916 	blt	r4,r2,82fe8 <___vfprintf_internal_r+0x1b54>
   82344:	42000204 	addi	r8,r8,8
   82348:	d8803317 	ldw	r2,204(sp)
   8234c:	143fffc4 	addi	r16,r2,-1
   82350:	043ec50e 	bge	zero,r16,81e68 <__alt_data_end+0xfffb6378>
   82354:	04400404 	movi	r17,16
   82358:	d8801f17 	ldw	r2,124(sp)
   8235c:	8c00880e 	bge	r17,r16,82580 <___vfprintf_internal_r+0x10ec>
   82360:	01400274 	movhi	r5,9
   82364:	2941e584 	addi	r5,r5,1942
   82368:	d9402b15 	stw	r5,172(sp)
   8236c:	058001c4 	movi	r22,7
   82370:	dcc02c17 	ldw	r19,176(sp)
   82374:	00000306 	br	82384 <___vfprintf_internal_r+0xef0>
   82378:	42000204 	addi	r8,r8,8
   8237c:	843ffc04 	addi	r16,r16,-16
   82380:	8c00820e 	bge	r17,r16,8258c <___vfprintf_internal_r+0x10f8>
   82384:	18c00404 	addi	r3,r3,16
   82388:	10800044 	addi	r2,r2,1
   8238c:	45000015 	stw	r20,0(r8)
   82390:	44400115 	stw	r17,4(r8)
   82394:	d8c02015 	stw	r3,128(sp)
   82398:	d8801f15 	stw	r2,124(sp)
   8239c:	b0bff60e 	bge	r22,r2,82378 <__alt_data_end+0xfffb6888>
   823a0:	d9801e04 	addi	r6,sp,120
   823a4:	b80b883a 	mov	r5,r23
   823a8:	9809883a 	mov	r4,r19
   823ac:	0088aec0 	call	88aec <__sprint_r>
   823b0:	103d3a1e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   823b4:	d8c02017 	ldw	r3,128(sp)
   823b8:	d8801f17 	ldw	r2,124(sp)
   823bc:	da000404 	addi	r8,sp,16
   823c0:	003fee06 	br	8237c <__alt_data_end+0xfffb688c>
   823c4:	d9403117 	ldw	r5,196(sp)
   823c8:	d8802a17 	ldw	r2,168(sp)
   823cc:	28adc83a 	sub	r22,r5,r2
   823d0:	05be630e 	bge	zero,r22,81d60 <__alt_data_end+0xfffb6270>
   823d4:	07000404 	movi	fp,16
   823d8:	d8801f17 	ldw	r2,124(sp)
   823dc:	e5838f0e 	bge	fp,r22,8321c <___vfprintf_internal_r+0x1d88>
   823e0:	01400274 	movhi	r5,9
   823e4:	2941e584 	addi	r5,r5,1942
   823e8:	dc403015 	stw	r17,192(sp)
   823ec:	d9402b15 	stw	r5,172(sp)
   823f0:	b023883a 	mov	r17,r22
   823f4:	04c001c4 	movi	r19,7
   823f8:	a82d883a 	mov	r22,r21
   823fc:	902b883a 	mov	r21,r18
   82400:	8025883a 	mov	r18,r16
   82404:	dc002c17 	ldw	r16,176(sp)
   82408:	00000306 	br	82418 <___vfprintf_internal_r+0xf84>
   8240c:	8c7ffc04 	addi	r17,r17,-16
   82410:	42000204 	addi	r8,r8,8
   82414:	e440110e 	bge	fp,r17,8245c <___vfprintf_internal_r+0xfc8>
   82418:	18c00404 	addi	r3,r3,16
   8241c:	10800044 	addi	r2,r2,1
   82420:	45000015 	stw	r20,0(r8)
   82424:	47000115 	stw	fp,4(r8)
   82428:	d8c02015 	stw	r3,128(sp)
   8242c:	d8801f15 	stw	r2,124(sp)
   82430:	98bff60e 	bge	r19,r2,8240c <__alt_data_end+0xfffb691c>
   82434:	d9801e04 	addi	r6,sp,120
   82438:	b80b883a 	mov	r5,r23
   8243c:	8009883a 	mov	r4,r16
   82440:	0088aec0 	call	88aec <__sprint_r>
   82444:	103d151e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   82448:	8c7ffc04 	addi	r17,r17,-16
   8244c:	d8c02017 	ldw	r3,128(sp)
   82450:	d8801f17 	ldw	r2,124(sp)
   82454:	da000404 	addi	r8,sp,16
   82458:	e47fef16 	blt	fp,r17,82418 <__alt_data_end+0xfffb6928>
   8245c:	9021883a 	mov	r16,r18
   82460:	a825883a 	mov	r18,r21
   82464:	b02b883a 	mov	r21,r22
   82468:	882d883a 	mov	r22,r17
   8246c:	dc403017 	ldw	r17,192(sp)
   82470:	d9002b17 	ldw	r4,172(sp)
   82474:	1d87883a 	add	r3,r3,r22
   82478:	10800044 	addi	r2,r2,1
   8247c:	41000015 	stw	r4,0(r8)
   82480:	45800115 	stw	r22,4(r8)
   82484:	d8c02015 	stw	r3,128(sp)
   82488:	d8801f15 	stw	r2,124(sp)
   8248c:	010001c4 	movi	r4,7
   82490:	20818e16 	blt	r4,r2,82acc <___vfprintf_internal_r+0x1638>
   82494:	42000204 	addi	r8,r8,8
   82498:	003e3106 	br	81d60 <__alt_data_end+0xfffb6270>
   8249c:	d9403317 	ldw	r5,204(sp)
   824a0:	00800044 	movi	r2,1
   824a4:	18c00044 	addi	r3,r3,1
   824a8:	1141530e 	bge	r2,r5,829f8 <___vfprintf_internal_r+0x1564>
   824ac:	dc401f17 	ldw	r17,124(sp)
   824b0:	00800044 	movi	r2,1
   824b4:	40800115 	stw	r2,4(r8)
   824b8:	8c400044 	addi	r17,r17,1
   824bc:	44000015 	stw	r16,0(r8)
   824c0:	d8c02015 	stw	r3,128(sp)
   824c4:	dc401f15 	stw	r17,124(sp)
   824c8:	008001c4 	movi	r2,7
   824cc:	14416b16 	blt	r2,r17,82a7c <___vfprintf_internal_r+0x15e8>
   824d0:	42000204 	addi	r8,r8,8
   824d4:	d8803717 	ldw	r2,220(sp)
   824d8:	d9003417 	ldw	r4,208(sp)
   824dc:	8c400044 	addi	r17,r17,1
   824e0:	10c7883a 	add	r3,r2,r3
   824e4:	40800115 	stw	r2,4(r8)
   824e8:	41000015 	stw	r4,0(r8)
   824ec:	d8c02015 	stw	r3,128(sp)
   824f0:	dc401f15 	stw	r17,124(sp)
   824f4:	008001c4 	movi	r2,7
   824f8:	14416916 	blt	r2,r17,82aa0 <___vfprintf_internal_r+0x160c>
   824fc:	45800204 	addi	r22,r8,8
   82500:	d9003617 	ldw	r4,216(sp)
   82504:	d9403817 	ldw	r5,224(sp)
   82508:	000d883a 	mov	r6,zero
   8250c:	000f883a 	mov	r7,zero
   82510:	d8c03c15 	stw	r3,240(sp)
   82514:	008c6100 	call	8c610 <__eqdf2>
   82518:	d8c03c17 	ldw	r3,240(sp)
   8251c:	1000bc26 	beq	r2,zero,82810 <___vfprintf_internal_r+0x137c>
   82520:	d9403317 	ldw	r5,204(sp)
   82524:	84000044 	addi	r16,r16,1
   82528:	8c400044 	addi	r17,r17,1
   8252c:	28bfffc4 	addi	r2,r5,-1
   82530:	1887883a 	add	r3,r3,r2
   82534:	b0800115 	stw	r2,4(r22)
   82538:	b4000015 	stw	r16,0(r22)
   8253c:	d8c02015 	stw	r3,128(sp)
   82540:	dc401f15 	stw	r17,124(sp)
   82544:	008001c4 	movi	r2,7
   82548:	14414316 	blt	r2,r17,82a58 <___vfprintf_internal_r+0x15c4>
   8254c:	b5800204 	addi	r22,r22,8
   82550:	d9003a17 	ldw	r4,232(sp)
   82554:	df0022c4 	addi	fp,sp,139
   82558:	8c400044 	addi	r17,r17,1
   8255c:	20c7883a 	add	r3,r4,r3
   82560:	b7000015 	stw	fp,0(r22)
   82564:	b1000115 	stw	r4,4(r22)
   82568:	d8c02015 	stw	r3,128(sp)
   8256c:	dc401f15 	stw	r17,124(sp)
   82570:	008001c4 	movi	r2,7
   82574:	14400e16 	blt	r2,r17,825b0 <___vfprintf_internal_r+0x111c>
   82578:	b2000204 	addi	r8,r22,8
   8257c:	003e3a06 	br	81e68 <__alt_data_end+0xfffb6378>
   82580:	01000274 	movhi	r4,9
   82584:	2101e584 	addi	r4,r4,1942
   82588:	d9002b15 	stw	r4,172(sp)
   8258c:	d9002b17 	ldw	r4,172(sp)
   82590:	1c07883a 	add	r3,r3,r16
   82594:	44000115 	stw	r16,4(r8)
   82598:	41000015 	stw	r4,0(r8)
   8259c:	10800044 	addi	r2,r2,1
   825a0:	d8c02015 	stw	r3,128(sp)
   825a4:	d8801f15 	stw	r2,124(sp)
   825a8:	010001c4 	movi	r4,7
   825ac:	20be2d0e 	bge	r4,r2,81e64 <__alt_data_end+0xfffb6374>
   825b0:	d9002c17 	ldw	r4,176(sp)
   825b4:	d9801e04 	addi	r6,sp,120
   825b8:	b80b883a 	mov	r5,r23
   825bc:	0088aec0 	call	88aec <__sprint_r>
   825c0:	103cb61e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   825c4:	d8c02017 	ldw	r3,128(sp)
   825c8:	da000404 	addi	r8,sp,16
   825cc:	003e2606 	br	81e68 <__alt_data_end+0xfffb6378>
   825d0:	d9002c17 	ldw	r4,176(sp)
   825d4:	d9801e04 	addi	r6,sp,120
   825d8:	b80b883a 	mov	r5,r23
   825dc:	0088aec0 	call	88aec <__sprint_r>
   825e0:	103e5d26 	beq	r2,zero,81f58 <__alt_data_end+0xfffb6468>
   825e4:	003cad06 	br	8189c <__alt_data_end+0xfffb5dac>
   825e8:	d9002c17 	ldw	r4,176(sp)
   825ec:	d9801e04 	addi	r6,sp,120
   825f0:	b80b883a 	mov	r5,r23
   825f4:	0088aec0 	call	88aec <__sprint_r>
   825f8:	103ca81e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   825fc:	d8c02017 	ldw	r3,128(sp)
   82600:	da000404 	addi	r8,sp,16
   82604:	003e0b06 	br	81e34 <__alt_data_end+0xfffb6344>
   82608:	d9002c17 	ldw	r4,176(sp)
   8260c:	d9801e04 	addi	r6,sp,120
   82610:	b80b883a 	mov	r5,r23
   82614:	0088aec0 	call	88aec <__sprint_r>
   82618:	103ca01e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   8261c:	d8c02017 	ldw	r3,128(sp)
   82620:	da000404 	addi	r8,sp,16
   82624:	003dbd06 	br	81d1c <__alt_data_end+0xfffb622c>
   82628:	d9002c17 	ldw	r4,176(sp)
   8262c:	d9801e04 	addi	r6,sp,120
   82630:	b80b883a 	mov	r5,r23
   82634:	0088aec0 	call	88aec <__sprint_r>
   82638:	103c981e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   8263c:	d8c02017 	ldw	r3,128(sp)
   82640:	da000404 	addi	r8,sp,16
   82644:	003dc306 	br	81d54 <__alt_data_end+0xfffb6264>
   82648:	d8802917 	ldw	r2,164(sp)
   8264c:	d8002785 	stb	zero,158(sp)
   82650:	103f0616 	blt	r2,zero,8226c <__alt_data_end+0xfffb677c>
   82654:	00ffdfc4 	movi	r3,-129
   82658:	9d84b03a 	or	r2,r19,r22
   8265c:	90e4703a 	and	r18,r18,r3
   82660:	103c6b26 	beq	r2,zero,81810 <__alt_data_end+0xfffb5d20>
   82664:	0039883a 	mov	fp,zero
   82668:	003e7406 	br	8203c <__alt_data_end+0xfffb654c>
   8266c:	9080040c 	andi	r2,r18,16
   82670:	1001b326 	beq	r2,zero,82d40 <___vfprintf_internal_r+0x18ac>
   82674:	d9002d17 	ldw	r4,180(sp)
   82678:	d9402917 	ldw	r5,164(sp)
   8267c:	d8002785 	stb	zero,158(sp)
   82680:	20800104 	addi	r2,r4,4
   82684:	24c00017 	ldw	r19,0(r4)
   82688:	002d883a 	mov	r22,zero
   8268c:	2801b516 	blt	r5,zero,82d64 <___vfprintf_internal_r+0x18d0>
   82690:	00ffdfc4 	movi	r3,-129
   82694:	d8802d15 	stw	r2,180(sp)
   82698:	90e4703a 	and	r18,r18,r3
   8269c:	983d2726 	beq	r19,zero,81b3c <__alt_data_end+0xfffb604c>
   826a0:	0039883a 	mov	fp,zero
   826a4:	003d2a06 	br	81b50 <__alt_data_end+0xfffb6060>
   826a8:	dc402617 	ldw	r17,152(sp)
   826ac:	0441d30e 	bge	zero,r17,82dfc <___vfprintf_internal_r+0x1968>
   826b0:	dc403217 	ldw	r17,200(sp)
   826b4:	d8803317 	ldw	r2,204(sp)
   826b8:	1440010e 	bge	r2,r17,826c0 <___vfprintf_internal_r+0x122c>
   826bc:	1023883a 	mov	r17,r2
   826c0:	04400a0e 	bge	zero,r17,826ec <___vfprintf_internal_r+0x1258>
   826c4:	d8801f17 	ldw	r2,124(sp)
   826c8:	1c47883a 	add	r3,r3,r17
   826cc:	44000015 	stw	r16,0(r8)
   826d0:	10800044 	addi	r2,r2,1
   826d4:	44400115 	stw	r17,4(r8)
   826d8:	d8c02015 	stw	r3,128(sp)
   826dc:	d8801f15 	stw	r2,124(sp)
   826e0:	010001c4 	movi	r4,7
   826e4:	20826516 	blt	r4,r2,8307c <___vfprintf_internal_r+0x1be8>
   826e8:	42000204 	addi	r8,r8,8
   826ec:	88026116 	blt	r17,zero,83074 <___vfprintf_internal_r+0x1be0>
   826f0:	d9003217 	ldw	r4,200(sp)
   826f4:	2463c83a 	sub	r17,r4,r17
   826f8:	04407b0e 	bge	zero,r17,828e8 <___vfprintf_internal_r+0x1454>
   826fc:	05800404 	movi	r22,16
   82700:	d8801f17 	ldw	r2,124(sp)
   82704:	b4419d0e 	bge	r22,r17,82d7c <___vfprintf_internal_r+0x18e8>
   82708:	01000274 	movhi	r4,9
   8270c:	2101e584 	addi	r4,r4,1942
   82710:	d9002b15 	stw	r4,172(sp)
   82714:	070001c4 	movi	fp,7
   82718:	dcc02c17 	ldw	r19,176(sp)
   8271c:	00000306 	br	8272c <___vfprintf_internal_r+0x1298>
   82720:	42000204 	addi	r8,r8,8
   82724:	8c7ffc04 	addi	r17,r17,-16
   82728:	b441970e 	bge	r22,r17,82d88 <___vfprintf_internal_r+0x18f4>
   8272c:	18c00404 	addi	r3,r3,16
   82730:	10800044 	addi	r2,r2,1
   82734:	45000015 	stw	r20,0(r8)
   82738:	45800115 	stw	r22,4(r8)
   8273c:	d8c02015 	stw	r3,128(sp)
   82740:	d8801f15 	stw	r2,124(sp)
   82744:	e0bff60e 	bge	fp,r2,82720 <__alt_data_end+0xfffb6c30>
   82748:	d9801e04 	addi	r6,sp,120
   8274c:	b80b883a 	mov	r5,r23
   82750:	9809883a 	mov	r4,r19
   82754:	0088aec0 	call	88aec <__sprint_r>
   82758:	103c501e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   8275c:	d8c02017 	ldw	r3,128(sp)
   82760:	d8801f17 	ldw	r2,124(sp)
   82764:	da000404 	addi	r8,sp,16
   82768:	003fee06 	br	82724 <__alt_data_end+0xfffb6c34>
   8276c:	d9002c17 	ldw	r4,176(sp)
   82770:	d9801e04 	addi	r6,sp,120
   82774:	b80b883a 	mov	r5,r23
   82778:	0088aec0 	call	88aec <__sprint_r>
   8277c:	103c471e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   82780:	d8c02017 	ldw	r3,128(sp)
   82784:	df002787 	ldb	fp,158(sp)
   82788:	da000404 	addi	r8,sp,16
   8278c:	003d5606 	br	81ce8 <__alt_data_end+0xfffb61f8>
   82790:	9080040c 	andi	r2,r18,16
   82794:	10016126 	beq	r2,zero,82d1c <___vfprintf_internal_r+0x1888>
   82798:	d8802d17 	ldw	r2,180(sp)
   8279c:	14c00017 	ldw	r19,0(r2)
   827a0:	10800104 	addi	r2,r2,4
   827a4:	d8802d15 	stw	r2,180(sp)
   827a8:	982dd7fa 	srai	r22,r19,31
   827ac:	b005883a 	mov	r2,r22
   827b0:	003c8206 	br	819bc <__alt_data_end+0xfffb5ecc>
   827b4:	9080040c 	andi	r2,r18,16
   827b8:	10003526 	beq	r2,zero,82890 <___vfprintf_internal_r+0x13fc>
   827bc:	d9402d17 	ldw	r5,180(sp)
   827c0:	d8c02917 	ldw	r3,164(sp)
   827c4:	d8002785 	stb	zero,158(sp)
   827c8:	28800104 	addi	r2,r5,4
   827cc:	2cc00017 	ldw	r19,0(r5)
   827d0:	002d883a 	mov	r22,zero
   827d4:	18003716 	blt	r3,zero,828b4 <___vfprintf_internal_r+0x1420>
   827d8:	00ffdfc4 	movi	r3,-129
   827dc:	d8802d15 	stw	r2,180(sp)
   827e0:	90e4703a 	and	r18,r18,r3
   827e4:	0039883a 	mov	fp,zero
   827e8:	983df326 	beq	r19,zero,81fb8 <__alt_data_end+0xfffb64c8>
   827ec:	00800244 	movi	r2,9
   827f0:	14fc7b36 	bltu	r2,r19,819e0 <__alt_data_end+0xfffb5ef0>
   827f4:	d8c02817 	ldw	r3,160(sp)
   827f8:	dc001dc4 	addi	r16,sp,119
   827fc:	9cc00c04 	addi	r19,r19,48
   82800:	1c07c83a 	sub	r3,r3,r16
   82804:	dcc01dc5 	stb	r19,119(sp)
   82808:	d8c02e15 	stw	r3,184(sp)
   8280c:	003ce806 	br	81bb0 <__alt_data_end+0xfffb60c0>
   82810:	d8803317 	ldw	r2,204(sp)
   82814:	143fffc4 	addi	r16,r2,-1
   82818:	043f4d0e 	bge	zero,r16,82550 <__alt_data_end+0xfffb6a60>
   8281c:	07000404 	movi	fp,16
   82820:	e400810e 	bge	fp,r16,82a28 <___vfprintf_internal_r+0x1594>
   82824:	01400274 	movhi	r5,9
   82828:	2941e584 	addi	r5,r5,1942
   8282c:	d9402b15 	stw	r5,172(sp)
   82830:	01c001c4 	movi	r7,7
   82834:	dcc02c17 	ldw	r19,176(sp)
   82838:	00000306 	br	82848 <___vfprintf_internal_r+0x13b4>
   8283c:	b5800204 	addi	r22,r22,8
   82840:	843ffc04 	addi	r16,r16,-16
   82844:	e4007b0e 	bge	fp,r16,82a34 <___vfprintf_internal_r+0x15a0>
   82848:	18c00404 	addi	r3,r3,16
   8284c:	8c400044 	addi	r17,r17,1
   82850:	b5000015 	stw	r20,0(r22)
   82854:	b7000115 	stw	fp,4(r22)
   82858:	d8c02015 	stw	r3,128(sp)
   8285c:	dc401f15 	stw	r17,124(sp)
   82860:	3c7ff60e 	bge	r7,r17,8283c <__alt_data_end+0xfffb6d4c>
   82864:	d9801e04 	addi	r6,sp,120
   82868:	b80b883a 	mov	r5,r23
   8286c:	9809883a 	mov	r4,r19
   82870:	d9c03c15 	stw	r7,240(sp)
   82874:	0088aec0 	call	88aec <__sprint_r>
   82878:	d9c03c17 	ldw	r7,240(sp)
   8287c:	103c071e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   82880:	d8c02017 	ldw	r3,128(sp)
   82884:	dc401f17 	ldw	r17,124(sp)
   82888:	dd800404 	addi	r22,sp,16
   8288c:	003fec06 	br	82840 <__alt_data_end+0xfffb6d50>
   82890:	9080100c 	andi	r2,r18,64
   82894:	d8002785 	stb	zero,158(sp)
   82898:	10010e26 	beq	r2,zero,82cd4 <___vfprintf_internal_r+0x1840>
   8289c:	d9002d17 	ldw	r4,180(sp)
   828a0:	d9402917 	ldw	r5,164(sp)
   828a4:	002d883a 	mov	r22,zero
   828a8:	20800104 	addi	r2,r4,4
   828ac:	24c0000b 	ldhu	r19,0(r4)
   828b0:	283fc90e 	bge	r5,zero,827d8 <__alt_data_end+0xfffb6ce8>
   828b4:	d8802d15 	stw	r2,180(sp)
   828b8:	0039883a 	mov	fp,zero
   828bc:	9d84b03a 	or	r2,r19,r22
   828c0:	103c461e 	bne	r2,zero,819dc <__alt_data_end+0xfffb5eec>
   828c4:	00800044 	movi	r2,1
   828c8:	003e6c06 	br	8227c <__alt_data_end+0xfffb678c>
   828cc:	d9002c17 	ldw	r4,176(sp)
   828d0:	d9801e04 	addi	r6,sp,120
   828d4:	b80b883a 	mov	r5,r23
   828d8:	0088aec0 	call	88aec <__sprint_r>
   828dc:	103bef1e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   828e0:	d8c02017 	ldw	r3,128(sp)
   828e4:	da000404 	addi	r8,sp,16
   828e8:	d9003217 	ldw	r4,200(sp)
   828ec:	d8802617 	ldw	r2,152(sp)
   828f0:	d9403317 	ldw	r5,204(sp)
   828f4:	8123883a 	add	r17,r16,r4
   828f8:	11400216 	blt	r2,r5,82904 <___vfprintf_internal_r+0x1470>
   828fc:	9100004c 	andi	r4,r18,1
   82900:	20000d26 	beq	r4,zero,82938 <___vfprintf_internal_r+0x14a4>
   82904:	d9003717 	ldw	r4,220(sp)
   82908:	d9403417 	ldw	r5,208(sp)
   8290c:	1907883a 	add	r3,r3,r4
   82910:	d9001f17 	ldw	r4,124(sp)
   82914:	41400015 	stw	r5,0(r8)
   82918:	d9403717 	ldw	r5,220(sp)
   8291c:	21000044 	addi	r4,r4,1
   82920:	d8c02015 	stw	r3,128(sp)
   82924:	41400115 	stw	r5,4(r8)
   82928:	d9001f15 	stw	r4,124(sp)
   8292c:	014001c4 	movi	r5,7
   82930:	2901e816 	blt	r5,r4,830d4 <___vfprintf_internal_r+0x1c40>
   82934:	42000204 	addi	r8,r8,8
   82938:	d9003317 	ldw	r4,204(sp)
   8293c:	8121883a 	add	r16,r16,r4
   82940:	2085c83a 	sub	r2,r4,r2
   82944:	8461c83a 	sub	r16,r16,r17
   82948:	1400010e 	bge	r2,r16,82950 <___vfprintf_internal_r+0x14bc>
   8294c:	1021883a 	mov	r16,r2
   82950:	04000a0e 	bge	zero,r16,8297c <___vfprintf_internal_r+0x14e8>
   82954:	d9001f17 	ldw	r4,124(sp)
   82958:	1c07883a 	add	r3,r3,r16
   8295c:	44400015 	stw	r17,0(r8)
   82960:	21000044 	addi	r4,r4,1
   82964:	44000115 	stw	r16,4(r8)
   82968:	d8c02015 	stw	r3,128(sp)
   8296c:	d9001f15 	stw	r4,124(sp)
   82970:	014001c4 	movi	r5,7
   82974:	2901fb16 	blt	r5,r4,83164 <___vfprintf_internal_r+0x1cd0>
   82978:	42000204 	addi	r8,r8,8
   8297c:	8001f716 	blt	r16,zero,8315c <___vfprintf_internal_r+0x1cc8>
   82980:	1421c83a 	sub	r16,r2,r16
   82984:	043d380e 	bge	zero,r16,81e68 <__alt_data_end+0xfffb6378>
   82988:	04400404 	movi	r17,16
   8298c:	d8801f17 	ldw	r2,124(sp)
   82990:	8c3efb0e 	bge	r17,r16,82580 <__alt_data_end+0xfffb6a90>
   82994:	01400274 	movhi	r5,9
   82998:	2941e584 	addi	r5,r5,1942
   8299c:	d9402b15 	stw	r5,172(sp)
   829a0:	058001c4 	movi	r22,7
   829a4:	dcc02c17 	ldw	r19,176(sp)
   829a8:	00000306 	br	829b8 <___vfprintf_internal_r+0x1524>
   829ac:	42000204 	addi	r8,r8,8
   829b0:	843ffc04 	addi	r16,r16,-16
   829b4:	8c3ef50e 	bge	r17,r16,8258c <__alt_data_end+0xfffb6a9c>
   829b8:	18c00404 	addi	r3,r3,16
   829bc:	10800044 	addi	r2,r2,1
   829c0:	45000015 	stw	r20,0(r8)
   829c4:	44400115 	stw	r17,4(r8)
   829c8:	d8c02015 	stw	r3,128(sp)
   829cc:	d8801f15 	stw	r2,124(sp)
   829d0:	b0bff60e 	bge	r22,r2,829ac <__alt_data_end+0xfffb6ebc>
   829d4:	d9801e04 	addi	r6,sp,120
   829d8:	b80b883a 	mov	r5,r23
   829dc:	9809883a 	mov	r4,r19
   829e0:	0088aec0 	call	88aec <__sprint_r>
   829e4:	103bad1e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   829e8:	d8c02017 	ldw	r3,128(sp)
   829ec:	d8801f17 	ldw	r2,124(sp)
   829f0:	da000404 	addi	r8,sp,16
   829f4:	003fee06 	br	829b0 <__alt_data_end+0xfffb6ec0>
   829f8:	9088703a 	and	r4,r18,r2
   829fc:	203eab1e 	bne	r4,zero,824ac <__alt_data_end+0xfffb69bc>
   82a00:	dc401f17 	ldw	r17,124(sp)
   82a04:	40800115 	stw	r2,4(r8)
   82a08:	44000015 	stw	r16,0(r8)
   82a0c:	8c400044 	addi	r17,r17,1
   82a10:	d8c02015 	stw	r3,128(sp)
   82a14:	dc401f15 	stw	r17,124(sp)
   82a18:	008001c4 	movi	r2,7
   82a1c:	14400e16 	blt	r2,r17,82a58 <___vfprintf_internal_r+0x15c4>
   82a20:	45800204 	addi	r22,r8,8
   82a24:	003eca06 	br	82550 <__alt_data_end+0xfffb6a60>
   82a28:	01000274 	movhi	r4,9
   82a2c:	2101e584 	addi	r4,r4,1942
   82a30:	d9002b15 	stw	r4,172(sp)
   82a34:	d8802b17 	ldw	r2,172(sp)
   82a38:	1c07883a 	add	r3,r3,r16
   82a3c:	8c400044 	addi	r17,r17,1
   82a40:	b0800015 	stw	r2,0(r22)
   82a44:	b4000115 	stw	r16,4(r22)
   82a48:	d8c02015 	stw	r3,128(sp)
   82a4c:	dc401f15 	stw	r17,124(sp)
   82a50:	008001c4 	movi	r2,7
   82a54:	147ebd0e 	bge	r2,r17,8254c <__alt_data_end+0xfffb6a5c>
   82a58:	d9002c17 	ldw	r4,176(sp)
   82a5c:	d9801e04 	addi	r6,sp,120
   82a60:	b80b883a 	mov	r5,r23
   82a64:	0088aec0 	call	88aec <__sprint_r>
   82a68:	103b8c1e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   82a6c:	d8c02017 	ldw	r3,128(sp)
   82a70:	dc401f17 	ldw	r17,124(sp)
   82a74:	dd800404 	addi	r22,sp,16
   82a78:	003eb506 	br	82550 <__alt_data_end+0xfffb6a60>
   82a7c:	d9002c17 	ldw	r4,176(sp)
   82a80:	d9801e04 	addi	r6,sp,120
   82a84:	b80b883a 	mov	r5,r23
   82a88:	0088aec0 	call	88aec <__sprint_r>
   82a8c:	103b831e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   82a90:	d8c02017 	ldw	r3,128(sp)
   82a94:	dc401f17 	ldw	r17,124(sp)
   82a98:	da000404 	addi	r8,sp,16
   82a9c:	003e8d06 	br	824d4 <__alt_data_end+0xfffb69e4>
   82aa0:	d9002c17 	ldw	r4,176(sp)
   82aa4:	d9801e04 	addi	r6,sp,120
   82aa8:	b80b883a 	mov	r5,r23
   82aac:	0088aec0 	call	88aec <__sprint_r>
   82ab0:	103b7a1e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   82ab4:	d8c02017 	ldw	r3,128(sp)
   82ab8:	dc401f17 	ldw	r17,124(sp)
   82abc:	dd800404 	addi	r22,sp,16
   82ac0:	003e8f06 	br	82500 <__alt_data_end+0xfffb6a10>
   82ac4:	0027883a 	mov	r19,zero
   82ac8:	003f4a06 	br	827f4 <__alt_data_end+0xfffb6d04>
   82acc:	d9002c17 	ldw	r4,176(sp)
   82ad0:	d9801e04 	addi	r6,sp,120
   82ad4:	b80b883a 	mov	r5,r23
   82ad8:	0088aec0 	call	88aec <__sprint_r>
   82adc:	103b6f1e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   82ae0:	d8c02017 	ldw	r3,128(sp)
   82ae4:	da000404 	addi	r8,sp,16
   82ae8:	003c9d06 	br	81d60 <__alt_data_end+0xfffb6270>
   82aec:	04e7c83a 	sub	r19,zero,r19
   82af0:	9804c03a 	cmpne	r2,r19,zero
   82af4:	05adc83a 	sub	r22,zero,r22
   82af8:	b0adc83a 	sub	r22,r22,r2
   82afc:	d8802917 	ldw	r2,164(sp)
   82b00:	07000b44 	movi	fp,45
   82b04:	df002785 	stb	fp,158(sp)
   82b08:	10017b16 	blt	r2,zero,830f8 <___vfprintf_internal_r+0x1c64>
   82b0c:	00bfdfc4 	movi	r2,-129
   82b10:	90a4703a 	and	r18,r18,r2
   82b14:	003bb106 	br	819dc <__alt_data_end+0xfffb5eec>
   82b18:	d9003617 	ldw	r4,216(sp)
   82b1c:	d9403817 	ldw	r5,224(sp)
   82b20:	da003d15 	stw	r8,244(sp)
   82b24:	00887100 	call	88710 <__fpclassifyd>
   82b28:	da003d17 	ldw	r8,244(sp)
   82b2c:	1000f026 	beq	r2,zero,82ef0 <___vfprintf_internal_r+0x1a5c>
   82b30:	d9002917 	ldw	r4,164(sp)
   82b34:	05bff7c4 	movi	r22,-33
   82b38:	00bfffc4 	movi	r2,-1
   82b3c:	8dac703a 	and	r22,r17,r22
   82b40:	20820026 	beq	r4,r2,83344 <___vfprintf_internal_r+0x1eb0>
   82b44:	008011c4 	movi	r2,71
   82b48:	b081f726 	beq	r22,r2,83328 <___vfprintf_internal_r+0x1e94>
   82b4c:	d9003817 	ldw	r4,224(sp)
   82b50:	90c04014 	ori	r3,r18,256
   82b54:	d8c02b15 	stw	r3,172(sp)
   82b58:	20021516 	blt	r4,zero,833b0 <___vfprintf_internal_r+0x1f1c>
   82b5c:	dcc03817 	ldw	r19,224(sp)
   82b60:	d8002a05 	stb	zero,168(sp)
   82b64:	00801984 	movi	r2,102
   82b68:	8881f926 	beq	r17,r2,83350 <___vfprintf_internal_r+0x1ebc>
   82b6c:	00801184 	movi	r2,70
   82b70:	88821c26 	beq	r17,r2,833e4 <___vfprintf_internal_r+0x1f50>
   82b74:	00801144 	movi	r2,69
   82b78:	b081ef26 	beq	r22,r2,83338 <___vfprintf_internal_r+0x1ea4>
   82b7c:	d8c02917 	ldw	r3,164(sp)
   82b80:	d8802104 	addi	r2,sp,132
   82b84:	d8800315 	stw	r2,12(sp)
   82b88:	d9403617 	ldw	r5,216(sp)
   82b8c:	d8802504 	addi	r2,sp,148
   82b90:	d9002c17 	ldw	r4,176(sp)
   82b94:	d8800215 	stw	r2,8(sp)
   82b98:	d8802604 	addi	r2,sp,152
   82b9c:	d8c00015 	stw	r3,0(sp)
   82ba0:	d8800115 	stw	r2,4(sp)
   82ba4:	01c00084 	movi	r7,2
   82ba8:	980d883a 	mov	r6,r19
   82bac:	d8c03c15 	stw	r3,240(sp)
   82bb0:	da003d15 	stw	r8,244(sp)
   82bb4:	0083ab80 	call	83ab8 <_dtoa_r>
   82bb8:	1021883a 	mov	r16,r2
   82bbc:	008019c4 	movi	r2,103
   82bc0:	d8c03c17 	ldw	r3,240(sp)
   82bc4:	da003d17 	ldw	r8,244(sp)
   82bc8:	88817126 	beq	r17,r2,83190 <___vfprintf_internal_r+0x1cfc>
   82bcc:	008011c4 	movi	r2,71
   82bd0:	88829226 	beq	r17,r2,8361c <___vfprintf_internal_r+0x2188>
   82bd4:	80f9883a 	add	fp,r16,r3
   82bd8:	d9003617 	ldw	r4,216(sp)
   82bdc:	000d883a 	mov	r6,zero
   82be0:	000f883a 	mov	r7,zero
   82be4:	980b883a 	mov	r5,r19
   82be8:	da003d15 	stw	r8,244(sp)
   82bec:	008c6100 	call	8c610 <__eqdf2>
   82bf0:	da003d17 	ldw	r8,244(sp)
   82bf4:	10018d26 	beq	r2,zero,8322c <___vfprintf_internal_r+0x1d98>
   82bf8:	d8802117 	ldw	r2,132(sp)
   82bfc:	1700062e 	bgeu	r2,fp,82c18 <___vfprintf_internal_r+0x1784>
   82c00:	01000c04 	movi	r4,48
   82c04:	10c00044 	addi	r3,r2,1
   82c08:	d8c02115 	stw	r3,132(sp)
   82c0c:	11000005 	stb	r4,0(r2)
   82c10:	d8802117 	ldw	r2,132(sp)
   82c14:	173ffb36 	bltu	r2,fp,82c04 <__alt_data_end+0xfffb7114>
   82c18:	1405c83a 	sub	r2,r2,r16
   82c1c:	d8803315 	stw	r2,204(sp)
   82c20:	008011c4 	movi	r2,71
   82c24:	b0817626 	beq	r22,r2,83200 <___vfprintf_internal_r+0x1d6c>
   82c28:	00801944 	movi	r2,101
   82c2c:	1442810e 	bge	r2,r17,83634 <___vfprintf_internal_r+0x21a0>
   82c30:	d8c02617 	ldw	r3,152(sp)
   82c34:	00801984 	movi	r2,102
   82c38:	d8c03215 	stw	r3,200(sp)
   82c3c:	8881fe26 	beq	r17,r2,83438 <___vfprintf_internal_r+0x1fa4>
   82c40:	d8c03217 	ldw	r3,200(sp)
   82c44:	d9003317 	ldw	r4,204(sp)
   82c48:	1901dd16 	blt	r3,r4,833c0 <___vfprintf_internal_r+0x1f2c>
   82c4c:	9480004c 	andi	r18,r18,1
   82c50:	90022b1e 	bne	r18,zero,83500 <___vfprintf_internal_r+0x206c>
   82c54:	1805883a 	mov	r2,r3
   82c58:	18028016 	blt	r3,zero,8365c <___vfprintf_internal_r+0x21c8>
   82c5c:	d8c03217 	ldw	r3,200(sp)
   82c60:	044019c4 	movi	r17,103
   82c64:	d8c02e15 	stw	r3,184(sp)
   82c68:	df002a07 	ldb	fp,168(sp)
   82c6c:	e001531e 	bne	fp,zero,831bc <___vfprintf_internal_r+0x1d28>
   82c70:	df002783 	ldbu	fp,158(sp)
   82c74:	d8802a15 	stw	r2,168(sp)
   82c78:	dc802b17 	ldw	r18,172(sp)
   82c7c:	d8002915 	stw	zero,164(sp)
   82c80:	003bd106 	br	81bc8 <__alt_data_end+0xfffb60d8>
   82c84:	d8802d17 	ldw	r2,180(sp)
   82c88:	d8c02d17 	ldw	r3,180(sp)
   82c8c:	d9002d17 	ldw	r4,180(sp)
   82c90:	10800017 	ldw	r2,0(r2)
   82c94:	18c00117 	ldw	r3,4(r3)
   82c98:	21000204 	addi	r4,r4,8
   82c9c:	d8803615 	stw	r2,216(sp)
   82ca0:	d8c03815 	stw	r3,224(sp)
   82ca4:	d9002d15 	stw	r4,180(sp)
   82ca8:	003b7506 	br	81a80 <__alt_data_end+0xfffb5f90>
   82cac:	ac400007 	ldb	r17,0(r21)
   82cb0:	003a5906 	br	81618 <__alt_data_end+0xfffb5b28>
   82cb4:	9080100c 	andi	r2,r18,64
   82cb8:	1000a826 	beq	r2,zero,82f5c <___vfprintf_internal_r+0x1ac8>
   82cbc:	d9002d17 	ldw	r4,180(sp)
   82cc0:	002d883a 	mov	r22,zero
   82cc4:	24c0000b 	ldhu	r19,0(r4)
   82cc8:	21000104 	addi	r4,r4,4
   82ccc:	d9002d15 	stw	r4,180(sp)
   82cd0:	003ccb06 	br	82000 <__alt_data_end+0xfffb6510>
   82cd4:	d8c02d17 	ldw	r3,180(sp)
   82cd8:	d9002917 	ldw	r4,164(sp)
   82cdc:	002d883a 	mov	r22,zero
   82ce0:	18800104 	addi	r2,r3,4
   82ce4:	1cc00017 	ldw	r19,0(r3)
   82ce8:	203ebb0e 	bge	r4,zero,827d8 <__alt_data_end+0xfffb6ce8>
   82cec:	003ef106 	br	828b4 <__alt_data_end+0xfffb6dc4>
   82cf0:	9080040c 	andi	r2,r18,16
   82cf4:	1000921e 	bne	r2,zero,82f40 <___vfprintf_internal_r+0x1aac>
   82cf8:	9480100c 	andi	r18,r18,64
   82cfc:	90013926 	beq	r18,zero,831e4 <___vfprintf_internal_r+0x1d50>
   82d00:	d9002d17 	ldw	r4,180(sp)
   82d04:	d9402f17 	ldw	r5,188(sp)
   82d08:	20800017 	ldw	r2,0(r4)
   82d0c:	21000104 	addi	r4,r4,4
   82d10:	d9002d15 	stw	r4,180(sp)
   82d14:	1140000d 	sth	r5,0(r2)
   82d18:	003a1606 	br	81574 <__alt_data_end+0xfffb5a84>
   82d1c:	9080100c 	andi	r2,r18,64
   82d20:	10008026 	beq	r2,zero,82f24 <___vfprintf_internal_r+0x1a90>
   82d24:	d8c02d17 	ldw	r3,180(sp)
   82d28:	1cc0000f 	ldh	r19,0(r3)
   82d2c:	18c00104 	addi	r3,r3,4
   82d30:	d8c02d15 	stw	r3,180(sp)
   82d34:	982dd7fa 	srai	r22,r19,31
   82d38:	b005883a 	mov	r2,r22
   82d3c:	003b1f06 	br	819bc <__alt_data_end+0xfffb5ecc>
   82d40:	9080100c 	andi	r2,r18,64
   82d44:	d8002785 	stb	zero,158(sp)
   82d48:	10008a1e 	bne	r2,zero,82f74 <___vfprintf_internal_r+0x1ae0>
   82d4c:	d9402d17 	ldw	r5,180(sp)
   82d50:	d8c02917 	ldw	r3,164(sp)
   82d54:	002d883a 	mov	r22,zero
   82d58:	28800104 	addi	r2,r5,4
   82d5c:	2cc00017 	ldw	r19,0(r5)
   82d60:	183e4b0e 	bge	r3,zero,82690 <__alt_data_end+0xfffb6ba0>
   82d64:	9d86b03a 	or	r3,r19,r22
   82d68:	d8802d15 	stw	r2,180(sp)
   82d6c:	183e4c1e 	bne	r3,zero,826a0 <__alt_data_end+0xfffb6bb0>
   82d70:	0039883a 	mov	fp,zero
   82d74:	0005883a 	mov	r2,zero
   82d78:	003d4006 	br	8227c <__alt_data_end+0xfffb678c>
   82d7c:	01400274 	movhi	r5,9
   82d80:	2941e584 	addi	r5,r5,1942
   82d84:	d9402b15 	stw	r5,172(sp)
   82d88:	d9402b17 	ldw	r5,172(sp)
   82d8c:	1c47883a 	add	r3,r3,r17
   82d90:	10800044 	addi	r2,r2,1
   82d94:	41400015 	stw	r5,0(r8)
   82d98:	44400115 	stw	r17,4(r8)
   82d9c:	d8c02015 	stw	r3,128(sp)
   82da0:	d8801f15 	stw	r2,124(sp)
   82da4:	010001c4 	movi	r4,7
   82da8:	20bec816 	blt	r4,r2,828cc <__alt_data_end+0xfffb6ddc>
   82dac:	42000204 	addi	r8,r8,8
   82db0:	003ecd06 	br	828e8 <__alt_data_end+0xfffb6df8>
   82db4:	d9002917 	ldw	r4,164(sp)
   82db8:	d8002785 	stb	zero,158(sp)
   82dbc:	203d2d16 	blt	r4,zero,82274 <__alt_data_end+0xfffb6784>
   82dc0:	00bfdfc4 	movi	r2,-129
   82dc4:	90a4703a 	and	r18,r18,r2
   82dc8:	003a9106 	br	81810 <__alt_data_end+0xfffb5d20>
   82dcc:	01000274 	movhi	r4,9
   82dd0:	2101e584 	addi	r4,r4,1942
   82dd4:	d9002b15 	stw	r4,172(sp)
   82dd8:	003c0c06 	br	81e0c <__alt_data_end+0xfffb631c>
   82ddc:	d9002c17 	ldw	r4,176(sp)
   82de0:	d9801e04 	addi	r6,sp,120
   82de4:	b80b883a 	mov	r5,r23
   82de8:	0088aec0 	call	88aec <__sprint_r>
   82dec:	103aab1e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   82df0:	d8c02017 	ldw	r3,128(sp)
   82df4:	da000404 	addi	r8,sp,16
   82df8:	003d4106 	br	82300 <__alt_data_end+0xfffb6810>
   82dfc:	d8801f17 	ldw	r2,124(sp)
   82e00:	01400274 	movhi	r5,9
   82e04:	01000044 	movi	r4,1
   82e08:	18c00044 	addi	r3,r3,1
   82e0c:	10800044 	addi	r2,r2,1
   82e10:	2941e504 	addi	r5,r5,1940
   82e14:	41000115 	stw	r4,4(r8)
   82e18:	41400015 	stw	r5,0(r8)
   82e1c:	d8c02015 	stw	r3,128(sp)
   82e20:	d8801f15 	stw	r2,124(sp)
   82e24:	010001c4 	movi	r4,7
   82e28:	20805c16 	blt	r4,r2,82f9c <___vfprintf_internal_r+0x1b08>
   82e2c:	42000204 	addi	r8,r8,8
   82e30:	8800041e 	bne	r17,zero,82e44 <___vfprintf_internal_r+0x19b0>
   82e34:	d8803317 	ldw	r2,204(sp)
   82e38:	1000021e 	bne	r2,zero,82e44 <___vfprintf_internal_r+0x19b0>
   82e3c:	9080004c 	andi	r2,r18,1
   82e40:	103c0926 	beq	r2,zero,81e68 <__alt_data_end+0xfffb6378>
   82e44:	d9003717 	ldw	r4,220(sp)
   82e48:	d8801f17 	ldw	r2,124(sp)
   82e4c:	d9403417 	ldw	r5,208(sp)
   82e50:	20c7883a 	add	r3,r4,r3
   82e54:	10800044 	addi	r2,r2,1
   82e58:	41000115 	stw	r4,4(r8)
   82e5c:	41400015 	stw	r5,0(r8)
   82e60:	d8c02015 	stw	r3,128(sp)
   82e64:	d8801f15 	stw	r2,124(sp)
   82e68:	010001c4 	movi	r4,7
   82e6c:	20812116 	blt	r4,r2,832f4 <___vfprintf_internal_r+0x1e60>
   82e70:	42000204 	addi	r8,r8,8
   82e74:	0463c83a 	sub	r17,zero,r17
   82e78:	0440730e 	bge	zero,r17,83048 <___vfprintf_internal_r+0x1bb4>
   82e7c:	05800404 	movi	r22,16
   82e80:	b440860e 	bge	r22,r17,8309c <___vfprintf_internal_r+0x1c08>
   82e84:	01400274 	movhi	r5,9
   82e88:	2941e584 	addi	r5,r5,1942
   82e8c:	d9402b15 	stw	r5,172(sp)
   82e90:	070001c4 	movi	fp,7
   82e94:	dcc02c17 	ldw	r19,176(sp)
   82e98:	00000306 	br	82ea8 <___vfprintf_internal_r+0x1a14>
   82e9c:	42000204 	addi	r8,r8,8
   82ea0:	8c7ffc04 	addi	r17,r17,-16
   82ea4:	b440800e 	bge	r22,r17,830a8 <___vfprintf_internal_r+0x1c14>
   82ea8:	18c00404 	addi	r3,r3,16
   82eac:	10800044 	addi	r2,r2,1
   82eb0:	45000015 	stw	r20,0(r8)
   82eb4:	45800115 	stw	r22,4(r8)
   82eb8:	d8c02015 	stw	r3,128(sp)
   82ebc:	d8801f15 	stw	r2,124(sp)
   82ec0:	e0bff60e 	bge	fp,r2,82e9c <__alt_data_end+0xfffb73ac>
   82ec4:	d9801e04 	addi	r6,sp,120
   82ec8:	b80b883a 	mov	r5,r23
   82ecc:	9809883a 	mov	r4,r19
   82ed0:	0088aec0 	call	88aec <__sprint_r>
   82ed4:	103a711e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   82ed8:	d8c02017 	ldw	r3,128(sp)
   82edc:	d8801f17 	ldw	r2,124(sp)
   82ee0:	da000404 	addi	r8,sp,16
   82ee4:	003fee06 	br	82ea0 <__alt_data_end+0xfffb73b0>
   82ee8:	00bfffc4 	movi	r2,-1
   82eec:	003a6f06 	br	818ac <__alt_data_end+0xfffb5dbc>
   82ef0:	008011c4 	movi	r2,71
   82ef4:	1440b816 	blt	r2,r17,831d8 <___vfprintf_internal_r+0x1d44>
   82ef8:	04000274 	movhi	r16,9
   82efc:	8401d704 	addi	r16,r16,1884
   82f00:	00c000c4 	movi	r3,3
   82f04:	00bfdfc4 	movi	r2,-129
   82f08:	d8c02a15 	stw	r3,168(sp)
   82f0c:	90a4703a 	and	r18,r18,r2
   82f10:	df002783 	ldbu	fp,158(sp)
   82f14:	d8c02e15 	stw	r3,184(sp)
   82f18:	d8002915 	stw	zero,164(sp)
   82f1c:	d8003215 	stw	zero,200(sp)
   82f20:	003b2906 	br	81bc8 <__alt_data_end+0xfffb60d8>
   82f24:	d9002d17 	ldw	r4,180(sp)
   82f28:	24c00017 	ldw	r19,0(r4)
   82f2c:	21000104 	addi	r4,r4,4
   82f30:	d9002d15 	stw	r4,180(sp)
   82f34:	982dd7fa 	srai	r22,r19,31
   82f38:	b005883a 	mov	r2,r22
   82f3c:	003a9f06 	br	819bc <__alt_data_end+0xfffb5ecc>
   82f40:	d9402d17 	ldw	r5,180(sp)
   82f44:	d8c02f17 	ldw	r3,188(sp)
   82f48:	28800017 	ldw	r2,0(r5)
   82f4c:	29400104 	addi	r5,r5,4
   82f50:	d9402d15 	stw	r5,180(sp)
   82f54:	10c00015 	stw	r3,0(r2)
   82f58:	00398606 	br	81574 <__alt_data_end+0xfffb5a84>
   82f5c:	d9402d17 	ldw	r5,180(sp)
   82f60:	002d883a 	mov	r22,zero
   82f64:	2cc00017 	ldw	r19,0(r5)
   82f68:	29400104 	addi	r5,r5,4
   82f6c:	d9402d15 	stw	r5,180(sp)
   82f70:	003c2306 	br	82000 <__alt_data_end+0xfffb6510>
   82f74:	d8c02d17 	ldw	r3,180(sp)
   82f78:	d9002917 	ldw	r4,164(sp)
   82f7c:	002d883a 	mov	r22,zero
   82f80:	18800104 	addi	r2,r3,4
   82f84:	1cc0000b 	ldhu	r19,0(r3)
   82f88:	203dc10e 	bge	r4,zero,82690 <__alt_data_end+0xfffb6ba0>
   82f8c:	003f7506 	br	82d64 <__alt_data_end+0xfffb7274>
   82f90:	04000274 	movhi	r16,9
   82f94:	8401d504 	addi	r16,r16,1876
   82f98:	003acc06 	br	81acc <__alt_data_end+0xfffb5fdc>
   82f9c:	d9002c17 	ldw	r4,176(sp)
   82fa0:	d9801e04 	addi	r6,sp,120
   82fa4:	b80b883a 	mov	r5,r23
   82fa8:	0088aec0 	call	88aec <__sprint_r>
   82fac:	103a3b1e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   82fb0:	dc402617 	ldw	r17,152(sp)
   82fb4:	d8c02017 	ldw	r3,128(sp)
   82fb8:	da000404 	addi	r8,sp,16
   82fbc:	003f9c06 	br	82e30 <__alt_data_end+0xfffb7340>
   82fc0:	ac400043 	ldbu	r17,1(r21)
   82fc4:	94800814 	ori	r18,r18,32
   82fc8:	ad400044 	addi	r21,r21,1
   82fcc:	8c403fcc 	andi	r17,r17,255
   82fd0:	8c40201c 	xori	r17,r17,128
   82fd4:	8c7fe004 	addi	r17,r17,-128
   82fd8:	00398f06 	br	81618 <__alt_data_end+0xfffb5b28>
   82fdc:	d8c02d15 	stw	r3,180(sp)
   82fe0:	0039883a 	mov	fp,zero
   82fe4:	003e3506 	br	828bc <__alt_data_end+0xfffb6dcc>
   82fe8:	d9002c17 	ldw	r4,176(sp)
   82fec:	d9801e04 	addi	r6,sp,120
   82ff0:	b80b883a 	mov	r5,r23
   82ff4:	0088aec0 	call	88aec <__sprint_r>
   82ff8:	103a281e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   82ffc:	d8c02017 	ldw	r3,128(sp)
   83000:	da000404 	addi	r8,sp,16
   83004:	003cd006 	br	82348 <__alt_data_end+0xfffb6858>
   83008:	8009883a 	mov	r4,r16
   8300c:	da003d15 	stw	r8,244(sp)
   83010:	00813ac0 	call	813ac <strlen>
   83014:	d8802e15 	stw	r2,184(sp)
   83018:	da003d17 	ldw	r8,244(sp)
   8301c:	103c340e 	bge	r2,zero,820f0 <__alt_data_end+0xfffb6600>
   83020:	0005883a 	mov	r2,zero
   83024:	003c3206 	br	820f0 <__alt_data_end+0xfffb6600>
   83028:	d9002c17 	ldw	r4,176(sp)
   8302c:	d9801e04 	addi	r6,sp,120
   83030:	b80b883a 	mov	r5,r23
   83034:	0088aec0 	call	88aec <__sprint_r>
   83038:	103a181e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   8303c:	d8c02017 	ldw	r3,128(sp)
   83040:	d8801f17 	ldw	r2,124(sp)
   83044:	da000404 	addi	r8,sp,16
   83048:	d9403317 	ldw	r5,204(sp)
   8304c:	10800044 	addi	r2,r2,1
   83050:	44000015 	stw	r16,0(r8)
   83054:	28c7883a 	add	r3,r5,r3
   83058:	003b7d06 	br	81e50 <__alt_data_end+0xfffb6360>
   8305c:	01000274 	movhi	r4,9
   83060:	2101e984 	addi	r4,r4,1958
   83064:	d9003515 	stw	r4,212(sp)
   83068:	003b1406 	br	81cbc <__alt_data_end+0xfffb61cc>
   8306c:	013fffc4 	movi	r4,-1
   83070:	003a3506 	br	81948 <__alt_data_end+0xfffb5e58>
   83074:	0023883a 	mov	r17,zero
   83078:	003d9d06 	br	826f0 <__alt_data_end+0xfffb6c00>
   8307c:	d9002c17 	ldw	r4,176(sp)
   83080:	d9801e04 	addi	r6,sp,120
   83084:	b80b883a 	mov	r5,r23
   83088:	0088aec0 	call	88aec <__sprint_r>
   8308c:	103a031e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   83090:	d8c02017 	ldw	r3,128(sp)
   83094:	da000404 	addi	r8,sp,16
   83098:	003d9406 	br	826ec <__alt_data_end+0xfffb6bfc>
   8309c:	01000274 	movhi	r4,9
   830a0:	2101e584 	addi	r4,r4,1942
   830a4:	d9002b15 	stw	r4,172(sp)
   830a8:	d9002b17 	ldw	r4,172(sp)
   830ac:	1c47883a 	add	r3,r3,r17
   830b0:	10800044 	addi	r2,r2,1
   830b4:	41000015 	stw	r4,0(r8)
   830b8:	44400115 	stw	r17,4(r8)
   830bc:	d8c02015 	stw	r3,128(sp)
   830c0:	d8801f15 	stw	r2,124(sp)
   830c4:	010001c4 	movi	r4,7
   830c8:	20bfd716 	blt	r4,r2,83028 <__alt_data_end+0xfffb7538>
   830cc:	42000204 	addi	r8,r8,8
   830d0:	003fdd06 	br	83048 <__alt_data_end+0xfffb7558>
   830d4:	d9002c17 	ldw	r4,176(sp)
   830d8:	d9801e04 	addi	r6,sp,120
   830dc:	b80b883a 	mov	r5,r23
   830e0:	0088aec0 	call	88aec <__sprint_r>
   830e4:	1039ed1e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   830e8:	d8802617 	ldw	r2,152(sp)
   830ec:	d8c02017 	ldw	r3,128(sp)
   830f0:	da000404 	addi	r8,sp,16
   830f4:	003e1006 	br	82938 <__alt_data_end+0xfffb6e48>
   830f8:	00800044 	movi	r2,1
   830fc:	10803fcc 	andi	r2,r2,255
   83100:	00c00044 	movi	r3,1
   83104:	10fa3526 	beq	r2,r3,819dc <__alt_data_end+0xfffb5eec>
   83108:	00c00084 	movi	r3,2
   8310c:	10fbcb26 	beq	r2,r3,8203c <__alt_data_end+0xfffb654c>
   83110:	003a8f06 	br	81b50 <__alt_data_end+0xfffb6060>
   83114:	01000274 	movhi	r4,9
   83118:	2101e984 	addi	r4,r4,1958
   8311c:	d9003515 	stw	r4,212(sp)
   83120:	003b7606 	br	81efc <__alt_data_end+0xfffb640c>
   83124:	d8802917 	ldw	r2,164(sp)
   83128:	00c00184 	movi	r3,6
   8312c:	1880012e 	bgeu	r3,r2,83134 <___vfprintf_internal_r+0x1ca0>
   83130:	1805883a 	mov	r2,r3
   83134:	d8802e15 	stw	r2,184(sp)
   83138:	1000ef16 	blt	r2,zero,834f8 <___vfprintf_internal_r+0x2064>
   8313c:	04000274 	movhi	r16,9
   83140:	d8802a15 	stw	r2,168(sp)
   83144:	dcc02d15 	stw	r19,180(sp)
   83148:	d8002915 	stw	zero,164(sp)
   8314c:	d8003215 	stw	zero,200(sp)
   83150:	8401e304 	addi	r16,r16,1932
   83154:	0039883a 	mov	fp,zero
   83158:	003aa206 	br	81be4 <__alt_data_end+0xfffb60f4>
   8315c:	0021883a 	mov	r16,zero
   83160:	003e0706 	br	82980 <__alt_data_end+0xfffb6e90>
   83164:	d9002c17 	ldw	r4,176(sp)
   83168:	d9801e04 	addi	r6,sp,120
   8316c:	b80b883a 	mov	r5,r23
   83170:	0088aec0 	call	88aec <__sprint_r>
   83174:	1039c91e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   83178:	d8802617 	ldw	r2,152(sp)
   8317c:	d9403317 	ldw	r5,204(sp)
   83180:	d8c02017 	ldw	r3,128(sp)
   83184:	da000404 	addi	r8,sp,16
   83188:	2885c83a 	sub	r2,r5,r2
   8318c:	003dfb06 	br	8297c <__alt_data_end+0xfffb6e8c>
   83190:	9080004c 	andi	r2,r18,1
   83194:	103e8f1e 	bne	r2,zero,82bd4 <__alt_data_end+0xfffb70e4>
   83198:	d8802117 	ldw	r2,132(sp)
   8319c:	003e9e06 	br	82c18 <__alt_data_end+0xfffb7128>
   831a0:	1025883a 	mov	r18,r2
   831a4:	0039883a 	mov	fp,zero
   831a8:	00800084 	movi	r2,2
   831ac:	003fd306 	br	830fc <__alt_data_end+0xfffb760c>
   831b0:	07000b44 	movi	fp,45
   831b4:	df002785 	stb	fp,158(sp)
   831b8:	003a4006 	br	81abc <__alt_data_end+0xfffb5fcc>
   831bc:	00c00b44 	movi	r3,45
   831c0:	d8c02785 	stb	r3,158(sp)
   831c4:	d8802a15 	stw	r2,168(sp)
   831c8:	dc802b17 	ldw	r18,172(sp)
   831cc:	d8002915 	stw	zero,164(sp)
   831d0:	07000b44 	movi	fp,45
   831d4:	003a8006 	br	81bd8 <__alt_data_end+0xfffb60e8>
   831d8:	04000274 	movhi	r16,9
   831dc:	8401d804 	addi	r16,r16,1888
   831e0:	003f4706 	br	82f00 <__alt_data_end+0xfffb7410>
   831e4:	d8c02d17 	ldw	r3,180(sp)
   831e8:	d9002f17 	ldw	r4,188(sp)
   831ec:	18800017 	ldw	r2,0(r3)
   831f0:	18c00104 	addi	r3,r3,4
   831f4:	d8c02d15 	stw	r3,180(sp)
   831f8:	11000015 	stw	r4,0(r2)
   831fc:	0038dd06 	br	81574 <__alt_data_end+0xfffb5a84>
   83200:	dd802617 	ldw	r22,152(sp)
   83204:	00bfff44 	movi	r2,-3
   83208:	b0801c16 	blt	r22,r2,8327c <___vfprintf_internal_r+0x1de8>
   8320c:	d9402917 	ldw	r5,164(sp)
   83210:	2d801a16 	blt	r5,r22,8327c <___vfprintf_internal_r+0x1de8>
   83214:	dd803215 	stw	r22,200(sp)
   83218:	003e8906 	br	82c40 <__alt_data_end+0xfffb7150>
   8321c:	01000274 	movhi	r4,9
   83220:	2101e584 	addi	r4,r4,1942
   83224:	d9002b15 	stw	r4,172(sp)
   83228:	003c9106 	br	82470 <__alt_data_end+0xfffb6980>
   8322c:	e005883a 	mov	r2,fp
   83230:	003e7906 	br	82c18 <__alt_data_end+0xfffb7128>
   83234:	d9402917 	ldw	r5,164(sp)
   83238:	df002783 	ldbu	fp,158(sp)
   8323c:	dcc02d15 	stw	r19,180(sp)
   83240:	d9402a15 	stw	r5,168(sp)
   83244:	d9402e15 	stw	r5,184(sp)
   83248:	d8002915 	stw	zero,164(sp)
   8324c:	d8003215 	stw	zero,200(sp)
   83250:	003a5d06 	br	81bc8 <__alt_data_end+0xfffb60d8>
   83254:	9080004c 	andi	r2,r18,1
   83258:	0039883a 	mov	fp,zero
   8325c:	10000426 	beq	r2,zero,83270 <___vfprintf_internal_r+0x1ddc>
   83260:	00800c04 	movi	r2,48
   83264:	dc001dc4 	addi	r16,sp,119
   83268:	d8801dc5 	stb	r2,119(sp)
   8326c:	003b8006 	br	82070 <__alt_data_end+0xfffb6580>
   83270:	d8002e15 	stw	zero,184(sp)
   83274:	dc001e04 	addi	r16,sp,120
   83278:	003a4d06 	br	81bb0 <__alt_data_end+0xfffb60c0>
   8327c:	8c7fff84 	addi	r17,r17,-2
   83280:	b5bfffc4 	addi	r22,r22,-1
   83284:	dd802615 	stw	r22,152(sp)
   83288:	dc4022c5 	stb	r17,139(sp)
   8328c:	b000bf16 	blt	r22,zero,8358c <___vfprintf_internal_r+0x20f8>
   83290:	00800ac4 	movi	r2,43
   83294:	d8802305 	stb	r2,140(sp)
   83298:	00800244 	movi	r2,9
   8329c:	15807016 	blt	r2,r22,83460 <___vfprintf_internal_r+0x1fcc>
   832a0:	00800c04 	movi	r2,48
   832a4:	b5800c04 	addi	r22,r22,48
   832a8:	d8802345 	stb	r2,141(sp)
   832ac:	dd802385 	stb	r22,142(sp)
   832b0:	d88023c4 	addi	r2,sp,143
   832b4:	df0022c4 	addi	fp,sp,139
   832b8:	d8c03317 	ldw	r3,204(sp)
   832bc:	1739c83a 	sub	fp,r2,fp
   832c0:	d9003317 	ldw	r4,204(sp)
   832c4:	e0c7883a 	add	r3,fp,r3
   832c8:	df003a15 	stw	fp,232(sp)
   832cc:	d8c02e15 	stw	r3,184(sp)
   832d0:	00800044 	movi	r2,1
   832d4:	1100b30e 	bge	r2,r4,835a4 <___vfprintf_internal_r+0x2110>
   832d8:	d8c02e17 	ldw	r3,184(sp)
   832dc:	18c00044 	addi	r3,r3,1
   832e0:	d8c02e15 	stw	r3,184(sp)
   832e4:	1805883a 	mov	r2,r3
   832e8:	1800ac16 	blt	r3,zero,8359c <___vfprintf_internal_r+0x2108>
   832ec:	d8003215 	stw	zero,200(sp)
   832f0:	003e5d06 	br	82c68 <__alt_data_end+0xfffb7178>
   832f4:	d9002c17 	ldw	r4,176(sp)
   832f8:	d9801e04 	addi	r6,sp,120
   832fc:	b80b883a 	mov	r5,r23
   83300:	0088aec0 	call	88aec <__sprint_r>
   83304:	1039651e 	bne	r2,zero,8189c <__alt_data_end+0xfffb5dac>
   83308:	dc402617 	ldw	r17,152(sp)
   8330c:	d8c02017 	ldw	r3,128(sp)
   83310:	d8801f17 	ldw	r2,124(sp)
   83314:	da000404 	addi	r8,sp,16
   83318:	003ed606 	br	82e74 <__alt_data_end+0xfffb7384>
   8331c:	582b883a 	mov	r21,r11
   83320:	d8002915 	stw	zero,164(sp)
   83324:	0038bd06 	br	8161c <__alt_data_end+0xfffb5b2c>
   83328:	d8802917 	ldw	r2,164(sp)
   8332c:	103e071e 	bne	r2,zero,82b4c <__alt_data_end+0xfffb705c>
   83330:	dc002915 	stw	r16,164(sp)
   83334:	003e0506 	br	82b4c <__alt_data_end+0xfffb705c>
   83338:	d9002917 	ldw	r4,164(sp)
   8333c:	20c00044 	addi	r3,r4,1
   83340:	003e0f06 	br	82b80 <__alt_data_end+0xfffb7090>
   83344:	01400184 	movi	r5,6
   83348:	d9402915 	stw	r5,164(sp)
   8334c:	003dff06 	br	82b4c <__alt_data_end+0xfffb705c>
   83350:	d8802104 	addi	r2,sp,132
   83354:	d8800315 	stw	r2,12(sp)
   83358:	d8802504 	addi	r2,sp,148
   8335c:	d8800215 	stw	r2,8(sp)
   83360:	d8802604 	addi	r2,sp,152
   83364:	d8800115 	stw	r2,4(sp)
   83368:	d8802917 	ldw	r2,164(sp)
   8336c:	d9403617 	ldw	r5,216(sp)
   83370:	d9002c17 	ldw	r4,176(sp)
   83374:	d8800015 	stw	r2,0(sp)
   83378:	01c000c4 	movi	r7,3
   8337c:	980d883a 	mov	r6,r19
   83380:	da003d15 	stw	r8,244(sp)
   83384:	0083ab80 	call	83ab8 <_dtoa_r>
   83388:	d8c02917 	ldw	r3,164(sp)
   8338c:	da003d17 	ldw	r8,244(sp)
   83390:	1021883a 	mov	r16,r2
   83394:	10f9883a 	add	fp,r2,r3
   83398:	81000007 	ldb	r4,0(r16)
   8339c:	00800c04 	movi	r2,48
   833a0:	20805e26 	beq	r4,r2,8351c <___vfprintf_internal_r+0x2088>
   833a4:	d8c02617 	ldw	r3,152(sp)
   833a8:	e0f9883a 	add	fp,fp,r3
   833ac:	003e0a06 	br	82bd8 <__alt_data_end+0xfffb70e8>
   833b0:	00c00b44 	movi	r3,45
   833b4:	24e0003c 	xorhi	r19,r4,32768
   833b8:	d8c02a05 	stb	r3,168(sp)
   833bc:	003de906 	br	82b64 <__alt_data_end+0xfffb7074>
   833c0:	d8c03217 	ldw	r3,200(sp)
   833c4:	00c07a0e 	bge	zero,r3,835b0 <___vfprintf_internal_r+0x211c>
   833c8:	00800044 	movi	r2,1
   833cc:	d9003317 	ldw	r4,204(sp)
   833d0:	1105883a 	add	r2,r2,r4
   833d4:	d8802e15 	stw	r2,184(sp)
   833d8:	10004e16 	blt	r2,zero,83514 <___vfprintf_internal_r+0x2080>
   833dc:	044019c4 	movi	r17,103
   833e0:	003e2106 	br	82c68 <__alt_data_end+0xfffb7178>
   833e4:	d9002917 	ldw	r4,164(sp)
   833e8:	d8802104 	addi	r2,sp,132
   833ec:	d8800315 	stw	r2,12(sp)
   833f0:	d9000015 	stw	r4,0(sp)
   833f4:	d8802504 	addi	r2,sp,148
   833f8:	d9403617 	ldw	r5,216(sp)
   833fc:	d9002c17 	ldw	r4,176(sp)
   83400:	d8800215 	stw	r2,8(sp)
   83404:	d8802604 	addi	r2,sp,152
   83408:	d8800115 	stw	r2,4(sp)
   8340c:	01c000c4 	movi	r7,3
   83410:	980d883a 	mov	r6,r19
   83414:	da003d15 	stw	r8,244(sp)
   83418:	0083ab80 	call	83ab8 <_dtoa_r>
   8341c:	d8c02917 	ldw	r3,164(sp)
   83420:	da003d17 	ldw	r8,244(sp)
   83424:	1021883a 	mov	r16,r2
   83428:	00801184 	movi	r2,70
   8342c:	80f9883a 	add	fp,r16,r3
   83430:	88bfd926 	beq	r17,r2,83398 <__alt_data_end+0xfffb78a8>
   83434:	003de806 	br	82bd8 <__alt_data_end+0xfffb70e8>
   83438:	d9002917 	ldw	r4,164(sp)
   8343c:	00c04d0e 	bge	zero,r3,83574 <___vfprintf_internal_r+0x20e0>
   83440:	2000441e 	bne	r4,zero,83554 <___vfprintf_internal_r+0x20c0>
   83444:	9480004c 	andi	r18,r18,1
   83448:	9000421e 	bne	r18,zero,83554 <___vfprintf_internal_r+0x20c0>
   8344c:	1805883a 	mov	r2,r3
   83450:	18007016 	blt	r3,zero,83614 <___vfprintf_internal_r+0x2180>
   83454:	d8c03217 	ldw	r3,200(sp)
   83458:	d8c02e15 	stw	r3,184(sp)
   8345c:	003e0206 	br	82c68 <__alt_data_end+0xfffb7178>
   83460:	df0022c4 	addi	fp,sp,139
   83464:	dc002915 	stw	r16,164(sp)
   83468:	4027883a 	mov	r19,r8
   8346c:	e021883a 	mov	r16,fp
   83470:	b009883a 	mov	r4,r22
   83474:	01400284 	movi	r5,10
   83478:	00810c00 	call	810c0 <__modsi3>
   8347c:	10800c04 	addi	r2,r2,48
   83480:	843fffc4 	addi	r16,r16,-1
   83484:	b009883a 	mov	r4,r22
   83488:	01400284 	movi	r5,10
   8348c:	80800005 	stb	r2,0(r16)
   83490:	008103c0 	call	8103c <__divsi3>
   83494:	102d883a 	mov	r22,r2
   83498:	00800244 	movi	r2,9
   8349c:	15bff416 	blt	r2,r22,83470 <__alt_data_end+0xfffb7980>
   834a0:	9811883a 	mov	r8,r19
   834a4:	b0800c04 	addi	r2,r22,48
   834a8:	8027883a 	mov	r19,r16
   834ac:	997fffc4 	addi	r5,r19,-1
   834b0:	98bfffc5 	stb	r2,-1(r19)
   834b4:	dc002917 	ldw	r16,164(sp)
   834b8:	2f006a2e 	bgeu	r5,fp,83664 <___vfprintf_internal_r+0x21d0>
   834bc:	d9c02384 	addi	r7,sp,142
   834c0:	3ccfc83a 	sub	r7,r7,r19
   834c4:	d9002344 	addi	r4,sp,141
   834c8:	e1cf883a 	add	r7,fp,r7
   834cc:	00000106 	br	834d4 <___vfprintf_internal_r+0x2040>
   834d0:	28800003 	ldbu	r2,0(r5)
   834d4:	20800005 	stb	r2,0(r4)
   834d8:	21000044 	addi	r4,r4,1
   834dc:	29400044 	addi	r5,r5,1
   834e0:	393ffb1e 	bne	r7,r4,834d0 <__alt_data_end+0xfffb79e0>
   834e4:	d8802304 	addi	r2,sp,140
   834e8:	14c5c83a 	sub	r2,r2,r19
   834ec:	d8c02344 	addi	r3,sp,141
   834f0:	1885883a 	add	r2,r3,r2
   834f4:	003f7006 	br	832b8 <__alt_data_end+0xfffb77c8>
   834f8:	0005883a 	mov	r2,zero
   834fc:	003f0f06 	br	8313c <__alt_data_end+0xfffb764c>
   83500:	d8c03217 	ldw	r3,200(sp)
   83504:	18c00044 	addi	r3,r3,1
   83508:	d8c02e15 	stw	r3,184(sp)
   8350c:	1805883a 	mov	r2,r3
   83510:	183fb20e 	bge	r3,zero,833dc <__alt_data_end+0xfffb78ec>
   83514:	0005883a 	mov	r2,zero
   83518:	003fb006 	br	833dc <__alt_data_end+0xfffb78ec>
   8351c:	d9003617 	ldw	r4,216(sp)
   83520:	000d883a 	mov	r6,zero
   83524:	000f883a 	mov	r7,zero
   83528:	980b883a 	mov	r5,r19
   8352c:	d8c03c15 	stw	r3,240(sp)
   83530:	da003d15 	stw	r8,244(sp)
   83534:	008c6100 	call	8c610 <__eqdf2>
   83538:	d8c03c17 	ldw	r3,240(sp)
   8353c:	da003d17 	ldw	r8,244(sp)
   83540:	103f9826 	beq	r2,zero,833a4 <__alt_data_end+0xfffb78b4>
   83544:	00800044 	movi	r2,1
   83548:	10c7c83a 	sub	r3,r2,r3
   8354c:	d8c02615 	stw	r3,152(sp)
   83550:	003f9506 	br	833a8 <__alt_data_end+0xfffb78b8>
   83554:	d9002917 	ldw	r4,164(sp)
   83558:	d8c03217 	ldw	r3,200(sp)
   8355c:	20800044 	addi	r2,r4,1
   83560:	1885883a 	add	r2,r3,r2
   83564:	d8802e15 	stw	r2,184(sp)
   83568:	103dbf0e 	bge	r2,zero,82c68 <__alt_data_end+0xfffb7178>
   8356c:	0005883a 	mov	r2,zero
   83570:	003dbd06 	br	82c68 <__alt_data_end+0xfffb7178>
   83574:	2000211e 	bne	r4,zero,835fc <___vfprintf_internal_r+0x2168>
   83578:	9480004c 	andi	r18,r18,1
   8357c:	90001f1e 	bne	r18,zero,835fc <___vfprintf_internal_r+0x2168>
   83580:	00800044 	movi	r2,1
   83584:	d8802e15 	stw	r2,184(sp)
   83588:	003db706 	br	82c68 <__alt_data_end+0xfffb7178>
   8358c:	00800b44 	movi	r2,45
   83590:	05adc83a 	sub	r22,zero,r22
   83594:	d8802305 	stb	r2,140(sp)
   83598:	003f3f06 	br	83298 <__alt_data_end+0xfffb77a8>
   8359c:	0005883a 	mov	r2,zero
   835a0:	003f5206 	br	832ec <__alt_data_end+0xfffb77fc>
   835a4:	90a4703a 	and	r18,r18,r2
   835a8:	903f4e26 	beq	r18,zero,832e4 <__alt_data_end+0xfffb77f4>
   835ac:	003f4a06 	br	832d8 <__alt_data_end+0xfffb77e8>
   835b0:	00800084 	movi	r2,2
   835b4:	10c5c83a 	sub	r2,r2,r3
   835b8:	003f8406 	br	833cc <__alt_data_end+0xfffb78dc>
   835bc:	d8802d17 	ldw	r2,180(sp)
   835c0:	d9002d17 	ldw	r4,180(sp)
   835c4:	ac400043 	ldbu	r17,1(r21)
   835c8:	10800017 	ldw	r2,0(r2)
   835cc:	582b883a 	mov	r21,r11
   835d0:	d8802915 	stw	r2,164(sp)
   835d4:	20800104 	addi	r2,r4,4
   835d8:	d9002917 	ldw	r4,164(sp)
   835dc:	d8802d15 	stw	r2,180(sp)
   835e0:	203e7a0e 	bge	r4,zero,82fcc <__alt_data_end+0xfffb74dc>
   835e4:	8c403fcc 	andi	r17,r17,255
   835e8:	00bfffc4 	movi	r2,-1
   835ec:	8c40201c 	xori	r17,r17,128
   835f0:	d8802915 	stw	r2,164(sp)
   835f4:	8c7fe004 	addi	r17,r17,-128
   835f8:	00380706 	br	81618 <__alt_data_end+0xfffb5b28>
   835fc:	d8c02917 	ldw	r3,164(sp)
   83600:	18c00084 	addi	r3,r3,2
   83604:	d8c02e15 	stw	r3,184(sp)
   83608:	1805883a 	mov	r2,r3
   8360c:	183d960e 	bge	r3,zero,82c68 <__alt_data_end+0xfffb7178>
   83610:	003fd606 	br	8356c <__alt_data_end+0xfffb7a7c>
   83614:	0005883a 	mov	r2,zero
   83618:	003f8e06 	br	83454 <__alt_data_end+0xfffb7964>
   8361c:	9080004c 	andi	r2,r18,1
   83620:	103f811e 	bne	r2,zero,83428 <__alt_data_end+0xfffb7938>
   83624:	d8802117 	ldw	r2,132(sp)
   83628:	1405c83a 	sub	r2,r2,r16
   8362c:	d8803315 	stw	r2,204(sp)
   83630:	b47ef326 	beq	r22,r17,83200 <__alt_data_end+0xfffb7710>
   83634:	dd802617 	ldw	r22,152(sp)
   83638:	003f1106 	br	83280 <__alt_data_end+0xfffb7790>
   8363c:	d9c02785 	stb	r7,158(sp)
   83640:	00390406 	br	81a54 <__alt_data_end+0xfffb5f64>
   83644:	d9c02785 	stb	r7,158(sp)
   83648:	0038d306 	br	81998 <__alt_data_end+0xfffb5ea8>
   8364c:	d9c02785 	stb	r7,158(sp)
   83650:	003a6106 	br	81fd8 <__alt_data_end+0xfffb64e8>
   83654:	d9c02785 	stb	r7,158(sp)
   83658:	003af806 	br	8223c <__alt_data_end+0xfffb674c>
   8365c:	0005883a 	mov	r2,zero
   83660:	003d7e06 	br	82c5c <__alt_data_end+0xfffb716c>
   83664:	d8802344 	addi	r2,sp,141
   83668:	003f1306 	br	832b8 <__alt_data_end+0xfffb77c8>
   8366c:	d9c02785 	stb	r7,158(sp)
   83670:	00392306 	br	81b00 <__alt_data_end+0xfffb6010>
   83674:	d9c02785 	stb	r7,158(sp)
   83678:	003aa906 	br	82120 <__alt_data_end+0xfffb6630>
   8367c:	d9c02785 	stb	r7,158(sp)
   83680:	003a3d06 	br	81f78 <__alt_data_end+0xfffb6488>
   83684:	d9c02785 	stb	r7,158(sp)
   83688:	003aca06 	br	821b4 <__alt_data_end+0xfffb66c4>

0008368c <__vfprintf_internal>:
   8368c:	00800274 	movhi	r2,9
   83690:	10896b04 	addi	r2,r2,9644
   83694:	300f883a 	mov	r7,r6
   83698:	280d883a 	mov	r6,r5
   8369c:	200b883a 	mov	r5,r4
   836a0:	11000017 	ldw	r4,0(r2)
   836a4:	00814941 	jmpi	81494 <___vfprintf_internal_r>

000836a8 <__sbprintf>:
   836a8:	2880030b 	ldhu	r2,12(r5)
   836ac:	2ac01917 	ldw	r11,100(r5)
   836b0:	2a80038b 	ldhu	r10,14(r5)
   836b4:	2a400717 	ldw	r9,28(r5)
   836b8:	2a000917 	ldw	r8,36(r5)
   836bc:	defee204 	addi	sp,sp,-1144
   836c0:	00c10004 	movi	r3,1024
   836c4:	dc011a15 	stw	r16,1128(sp)
   836c8:	10bfff4c 	andi	r2,r2,65533
   836cc:	2821883a 	mov	r16,r5
   836d0:	d8cb883a 	add	r5,sp,r3
   836d4:	dc811c15 	stw	r18,1136(sp)
   836d8:	dc411b15 	stw	r17,1132(sp)
   836dc:	dfc11d15 	stw	ra,1140(sp)
   836e0:	2025883a 	mov	r18,r4
   836e4:	d881030d 	sth	r2,1036(sp)
   836e8:	dac11915 	stw	r11,1124(sp)
   836ec:	da81038d 	sth	r10,1038(sp)
   836f0:	da410715 	stw	r9,1052(sp)
   836f4:	da010915 	stw	r8,1060(sp)
   836f8:	dec10015 	stw	sp,1024(sp)
   836fc:	dec10415 	stw	sp,1040(sp)
   83700:	d8c10215 	stw	r3,1032(sp)
   83704:	d8c10515 	stw	r3,1044(sp)
   83708:	d8010615 	stw	zero,1048(sp)
   8370c:	00814940 	call	81494 <___vfprintf_internal_r>
   83710:	1023883a 	mov	r17,r2
   83714:	10000416 	blt	r2,zero,83728 <__sbprintf+0x80>
   83718:	d9410004 	addi	r5,sp,1024
   8371c:	9009883a 	mov	r4,r18
   83720:	008535c0 	call	8535c <_fflush_r>
   83724:	10000d1e 	bne	r2,zero,8375c <__sbprintf+0xb4>
   83728:	d881030b 	ldhu	r2,1036(sp)
   8372c:	1080100c 	andi	r2,r2,64
   83730:	10000326 	beq	r2,zero,83740 <__sbprintf+0x98>
   83734:	8080030b 	ldhu	r2,12(r16)
   83738:	10801014 	ori	r2,r2,64
   8373c:	8080030d 	sth	r2,12(r16)
   83740:	8805883a 	mov	r2,r17
   83744:	dfc11d17 	ldw	ra,1140(sp)
   83748:	dc811c17 	ldw	r18,1136(sp)
   8374c:	dc411b17 	ldw	r17,1132(sp)
   83750:	dc011a17 	ldw	r16,1128(sp)
   83754:	dec11e04 	addi	sp,sp,1144
   83758:	f800283a 	ret
   8375c:	047fffc4 	movi	r17,-1
   83760:	003ff106 	br	83728 <__alt_data_end+0xfffb7c38>

00083764 <__swsetup_r>:
   83764:	00800274 	movhi	r2,9
   83768:	defffd04 	addi	sp,sp,-12
   8376c:	10896b04 	addi	r2,r2,9644
   83770:	dc400115 	stw	r17,4(sp)
   83774:	2023883a 	mov	r17,r4
   83778:	11000017 	ldw	r4,0(r2)
   8377c:	dc000015 	stw	r16,0(sp)
   83780:	dfc00215 	stw	ra,8(sp)
   83784:	2821883a 	mov	r16,r5
   83788:	20000226 	beq	r4,zero,83794 <__swsetup_r+0x30>
   8378c:	20800e17 	ldw	r2,56(r4)
   83790:	10003126 	beq	r2,zero,83858 <__swsetup_r+0xf4>
   83794:	8080030b 	ldhu	r2,12(r16)
   83798:	10c0020c 	andi	r3,r2,8
   8379c:	1009883a 	mov	r4,r2
   837a0:	18000f26 	beq	r3,zero,837e0 <__swsetup_r+0x7c>
   837a4:	80c00417 	ldw	r3,16(r16)
   837a8:	18001526 	beq	r3,zero,83800 <__swsetup_r+0x9c>
   837ac:	1100004c 	andi	r4,r2,1
   837b0:	20001c1e 	bne	r4,zero,83824 <__swsetup_r+0xc0>
   837b4:	1080008c 	andi	r2,r2,2
   837b8:	1000291e 	bne	r2,zero,83860 <__swsetup_r+0xfc>
   837bc:	80800517 	ldw	r2,20(r16)
   837c0:	80800215 	stw	r2,8(r16)
   837c4:	18001c26 	beq	r3,zero,83838 <__swsetup_r+0xd4>
   837c8:	0005883a 	mov	r2,zero
   837cc:	dfc00217 	ldw	ra,8(sp)
   837d0:	dc400117 	ldw	r17,4(sp)
   837d4:	dc000017 	ldw	r16,0(sp)
   837d8:	dec00304 	addi	sp,sp,12
   837dc:	f800283a 	ret
   837e0:	2080040c 	andi	r2,r4,16
   837e4:	10002e26 	beq	r2,zero,838a0 <__swsetup_r+0x13c>
   837e8:	2080010c 	andi	r2,r4,4
   837ec:	10001e1e 	bne	r2,zero,83868 <__swsetup_r+0x104>
   837f0:	80c00417 	ldw	r3,16(r16)
   837f4:	20800214 	ori	r2,r4,8
   837f8:	8080030d 	sth	r2,12(r16)
   837fc:	183feb1e 	bne	r3,zero,837ac <__alt_data_end+0xfffb7cbc>
   83800:	1100a00c 	andi	r4,r2,640
   83804:	01408004 	movi	r5,512
   83808:	217fe826 	beq	r4,r5,837ac <__alt_data_end+0xfffb7cbc>
   8380c:	800b883a 	mov	r5,r16
   83810:	8809883a 	mov	r4,r17
   83814:	00863380 	call	86338 <__smakebuf_r>
   83818:	8080030b 	ldhu	r2,12(r16)
   8381c:	80c00417 	ldw	r3,16(r16)
   83820:	003fe206 	br	837ac <__alt_data_end+0xfffb7cbc>
   83824:	80800517 	ldw	r2,20(r16)
   83828:	80000215 	stw	zero,8(r16)
   8382c:	0085c83a 	sub	r2,zero,r2
   83830:	80800615 	stw	r2,24(r16)
   83834:	183fe41e 	bne	r3,zero,837c8 <__alt_data_end+0xfffb7cd8>
   83838:	80c0030b 	ldhu	r3,12(r16)
   8383c:	0005883a 	mov	r2,zero
   83840:	1900200c 	andi	r4,r3,128
   83844:	203fe126 	beq	r4,zero,837cc <__alt_data_end+0xfffb7cdc>
   83848:	18c01014 	ori	r3,r3,64
   8384c:	80c0030d 	sth	r3,12(r16)
   83850:	00bfffc4 	movi	r2,-1
   83854:	003fdd06 	br	837cc <__alt_data_end+0xfffb7cdc>
   83858:	00857380 	call	85738 <__sinit>
   8385c:	003fcd06 	br	83794 <__alt_data_end+0xfffb7ca4>
   83860:	0005883a 	mov	r2,zero
   83864:	003fd606 	br	837c0 <__alt_data_end+0xfffb7cd0>
   83868:	81400c17 	ldw	r5,48(r16)
   8386c:	28000626 	beq	r5,zero,83888 <__swsetup_r+0x124>
   83870:	80801004 	addi	r2,r16,64
   83874:	28800326 	beq	r5,r2,83884 <__swsetup_r+0x120>
   83878:	8809883a 	mov	r4,r17
   8387c:	00858ac0 	call	858ac <_free_r>
   83880:	8100030b 	ldhu	r4,12(r16)
   83884:	80000c15 	stw	zero,48(r16)
   83888:	80c00417 	ldw	r3,16(r16)
   8388c:	00bff6c4 	movi	r2,-37
   83890:	1108703a 	and	r4,r2,r4
   83894:	80000115 	stw	zero,4(r16)
   83898:	80c00015 	stw	r3,0(r16)
   8389c:	003fd506 	br	837f4 <__alt_data_end+0xfffb7d04>
   838a0:	00800244 	movi	r2,9
   838a4:	88800015 	stw	r2,0(r17)
   838a8:	20801014 	ori	r2,r4,64
   838ac:	8080030d 	sth	r2,12(r16)
   838b0:	00bfffc4 	movi	r2,-1
   838b4:	003fc506 	br	837cc <__alt_data_end+0xfffb7cdc>

000838b8 <quorem>:
   838b8:	defff704 	addi	sp,sp,-36
   838bc:	dc800215 	stw	r18,8(sp)
   838c0:	20800417 	ldw	r2,16(r4)
   838c4:	2c800417 	ldw	r18,16(r5)
   838c8:	dfc00815 	stw	ra,32(sp)
   838cc:	ddc00715 	stw	r23,28(sp)
   838d0:	dd800615 	stw	r22,24(sp)
   838d4:	dd400515 	stw	r21,20(sp)
   838d8:	dd000415 	stw	r20,16(sp)
   838dc:	dcc00315 	stw	r19,12(sp)
   838e0:	dc400115 	stw	r17,4(sp)
   838e4:	dc000015 	stw	r16,0(sp)
   838e8:	14807116 	blt	r2,r18,83ab0 <quorem+0x1f8>
   838ec:	94bfffc4 	addi	r18,r18,-1
   838f0:	94ad883a 	add	r22,r18,r18
   838f4:	b5ad883a 	add	r22,r22,r22
   838f8:	2c400504 	addi	r17,r5,20
   838fc:	8da9883a 	add	r20,r17,r22
   83900:	25400504 	addi	r21,r4,20
   83904:	282f883a 	mov	r23,r5
   83908:	adad883a 	add	r22,r21,r22
   8390c:	a1400017 	ldw	r5,0(r20)
   83910:	2021883a 	mov	r16,r4
   83914:	b1000017 	ldw	r4,0(r22)
   83918:	29400044 	addi	r5,r5,1
   8391c:	00811340 	call	81134 <__udivsi3>
   83920:	1027883a 	mov	r19,r2
   83924:	10002c26 	beq	r2,zero,839d8 <quorem+0x120>
   83928:	a813883a 	mov	r9,r21
   8392c:	880b883a 	mov	r5,r17
   83930:	0009883a 	mov	r4,zero
   83934:	000d883a 	mov	r6,zero
   83938:	2a000017 	ldw	r8,0(r5)
   8393c:	49c00017 	ldw	r7,0(r9)
   83940:	29400104 	addi	r5,r5,4
   83944:	40bfffcc 	andi	r2,r8,65535
   83948:	14c5383a 	mul	r2,r2,r19
   8394c:	4010d43a 	srli	r8,r8,16
   83950:	38ffffcc 	andi	r3,r7,65535
   83954:	1105883a 	add	r2,r2,r4
   83958:	1008d43a 	srli	r4,r2,16
   8395c:	44d1383a 	mul	r8,r8,r19
   83960:	198d883a 	add	r6,r3,r6
   83964:	10ffffcc 	andi	r3,r2,65535
   83968:	30c7c83a 	sub	r3,r6,r3
   8396c:	380ed43a 	srli	r7,r7,16
   83970:	4105883a 	add	r2,r8,r4
   83974:	180dd43a 	srai	r6,r3,16
   83978:	113fffcc 	andi	r4,r2,65535
   8397c:	390fc83a 	sub	r7,r7,r4
   83980:	398d883a 	add	r6,r7,r6
   83984:	300e943a 	slli	r7,r6,16
   83988:	18ffffcc 	andi	r3,r3,65535
   8398c:	1008d43a 	srli	r4,r2,16
   83990:	38ceb03a 	or	r7,r7,r3
   83994:	49c00015 	stw	r7,0(r9)
   83998:	300dd43a 	srai	r6,r6,16
   8399c:	4a400104 	addi	r9,r9,4
   839a0:	a17fe52e 	bgeu	r20,r5,83938 <__alt_data_end+0xfffb7e48>
   839a4:	b0800017 	ldw	r2,0(r22)
   839a8:	10000b1e 	bne	r2,zero,839d8 <quorem+0x120>
   839ac:	b0bfff04 	addi	r2,r22,-4
   839b0:	a880082e 	bgeu	r21,r2,839d4 <quorem+0x11c>
   839b4:	b0ffff17 	ldw	r3,-4(r22)
   839b8:	18000326 	beq	r3,zero,839c8 <quorem+0x110>
   839bc:	00000506 	br	839d4 <quorem+0x11c>
   839c0:	10c00017 	ldw	r3,0(r2)
   839c4:	1800031e 	bne	r3,zero,839d4 <quorem+0x11c>
   839c8:	10bfff04 	addi	r2,r2,-4
   839cc:	94bfffc4 	addi	r18,r18,-1
   839d0:	a8bffb36 	bltu	r21,r2,839c0 <__alt_data_end+0xfffb7ed0>
   839d4:	84800415 	stw	r18,16(r16)
   839d8:	b80b883a 	mov	r5,r23
   839dc:	8009883a 	mov	r4,r16
   839e0:	0087a780 	call	87a78 <__mcmp>
   839e4:	10002616 	blt	r2,zero,83a80 <quorem+0x1c8>
   839e8:	9cc00044 	addi	r19,r19,1
   839ec:	a805883a 	mov	r2,r21
   839f0:	000b883a 	mov	r5,zero
   839f4:	11000017 	ldw	r4,0(r2)
   839f8:	89800017 	ldw	r6,0(r17)
   839fc:	10800104 	addi	r2,r2,4
   83a00:	20ffffcc 	andi	r3,r4,65535
   83a04:	194b883a 	add	r5,r3,r5
   83a08:	30ffffcc 	andi	r3,r6,65535
   83a0c:	28c7c83a 	sub	r3,r5,r3
   83a10:	300cd43a 	srli	r6,r6,16
   83a14:	2008d43a 	srli	r4,r4,16
   83a18:	180bd43a 	srai	r5,r3,16
   83a1c:	18ffffcc 	andi	r3,r3,65535
   83a20:	2189c83a 	sub	r4,r4,r6
   83a24:	2149883a 	add	r4,r4,r5
   83a28:	200c943a 	slli	r6,r4,16
   83a2c:	8c400104 	addi	r17,r17,4
   83a30:	200bd43a 	srai	r5,r4,16
   83a34:	30c6b03a 	or	r3,r6,r3
   83a38:	10ffff15 	stw	r3,-4(r2)
   83a3c:	a47fed2e 	bgeu	r20,r17,839f4 <__alt_data_end+0xfffb7f04>
   83a40:	9485883a 	add	r2,r18,r18
   83a44:	1085883a 	add	r2,r2,r2
   83a48:	a887883a 	add	r3,r21,r2
   83a4c:	18800017 	ldw	r2,0(r3)
   83a50:	10000b1e 	bne	r2,zero,83a80 <quorem+0x1c8>
   83a54:	18bfff04 	addi	r2,r3,-4
   83a58:	a880082e 	bgeu	r21,r2,83a7c <quorem+0x1c4>
   83a5c:	18ffff17 	ldw	r3,-4(r3)
   83a60:	18000326 	beq	r3,zero,83a70 <quorem+0x1b8>
   83a64:	00000506 	br	83a7c <quorem+0x1c4>
   83a68:	10c00017 	ldw	r3,0(r2)
   83a6c:	1800031e 	bne	r3,zero,83a7c <quorem+0x1c4>
   83a70:	10bfff04 	addi	r2,r2,-4
   83a74:	94bfffc4 	addi	r18,r18,-1
   83a78:	a8bffb36 	bltu	r21,r2,83a68 <__alt_data_end+0xfffb7f78>
   83a7c:	84800415 	stw	r18,16(r16)
   83a80:	9805883a 	mov	r2,r19
   83a84:	dfc00817 	ldw	ra,32(sp)
   83a88:	ddc00717 	ldw	r23,28(sp)
   83a8c:	dd800617 	ldw	r22,24(sp)
   83a90:	dd400517 	ldw	r21,20(sp)
   83a94:	dd000417 	ldw	r20,16(sp)
   83a98:	dcc00317 	ldw	r19,12(sp)
   83a9c:	dc800217 	ldw	r18,8(sp)
   83aa0:	dc400117 	ldw	r17,4(sp)
   83aa4:	dc000017 	ldw	r16,0(sp)
   83aa8:	dec00904 	addi	sp,sp,36
   83aac:	f800283a 	ret
   83ab0:	0005883a 	mov	r2,zero
   83ab4:	003ff306 	br	83a84 <__alt_data_end+0xfffb7f94>

00083ab8 <_dtoa_r>:
   83ab8:	20801017 	ldw	r2,64(r4)
   83abc:	deffde04 	addi	sp,sp,-136
   83ac0:	df002015 	stw	fp,128(sp)
   83ac4:	dcc01b15 	stw	r19,108(sp)
   83ac8:	dc801a15 	stw	r18,104(sp)
   83acc:	dc401915 	stw	r17,100(sp)
   83ad0:	dc001815 	stw	r16,96(sp)
   83ad4:	dfc02115 	stw	ra,132(sp)
   83ad8:	ddc01f15 	stw	r23,124(sp)
   83adc:	dd801e15 	stw	r22,120(sp)
   83ae0:	dd401d15 	stw	r21,116(sp)
   83ae4:	dd001c15 	stw	r20,112(sp)
   83ae8:	d9c00315 	stw	r7,12(sp)
   83aec:	2039883a 	mov	fp,r4
   83af0:	3023883a 	mov	r17,r6
   83af4:	2825883a 	mov	r18,r5
   83af8:	dc002417 	ldw	r16,144(sp)
   83afc:	3027883a 	mov	r19,r6
   83b00:	10000826 	beq	r2,zero,83b24 <_dtoa_r+0x6c>
   83b04:	21801117 	ldw	r6,68(r4)
   83b08:	00c00044 	movi	r3,1
   83b0c:	100b883a 	mov	r5,r2
   83b10:	1986983a 	sll	r3,r3,r6
   83b14:	11800115 	stw	r6,4(r2)
   83b18:	10c00215 	stw	r3,8(r2)
   83b1c:	00872580 	call	87258 <_Bfree>
   83b20:	e0001015 	stw	zero,64(fp)
   83b24:	88002e16 	blt	r17,zero,83be0 <_dtoa_r+0x128>
   83b28:	80000015 	stw	zero,0(r16)
   83b2c:	889ffc2c 	andhi	r2,r17,32752
   83b30:	00dffc34 	movhi	r3,32752
   83b34:	10c01c26 	beq	r2,r3,83ba8 <_dtoa_r+0xf0>
   83b38:	000d883a 	mov	r6,zero
   83b3c:	000f883a 	mov	r7,zero
   83b40:	9009883a 	mov	r4,r18
   83b44:	980b883a 	mov	r5,r19
   83b48:	008c6100 	call	8c610 <__eqdf2>
   83b4c:	10002b1e 	bne	r2,zero,83bfc <_dtoa_r+0x144>
   83b50:	d9c02317 	ldw	r7,140(sp)
   83b54:	00800044 	movi	r2,1
   83b58:	38800015 	stw	r2,0(r7)
   83b5c:	d8802517 	ldw	r2,148(sp)
   83b60:	10019e26 	beq	r2,zero,841dc <_dtoa_r+0x724>
   83b64:	d8c02517 	ldw	r3,148(sp)
   83b68:	00800274 	movhi	r2,9
   83b6c:	1081e544 	addi	r2,r2,1941
   83b70:	18800015 	stw	r2,0(r3)
   83b74:	10bfffc4 	addi	r2,r2,-1
   83b78:	dfc02117 	ldw	ra,132(sp)
   83b7c:	df002017 	ldw	fp,128(sp)
   83b80:	ddc01f17 	ldw	r23,124(sp)
   83b84:	dd801e17 	ldw	r22,120(sp)
   83b88:	dd401d17 	ldw	r21,116(sp)
   83b8c:	dd001c17 	ldw	r20,112(sp)
   83b90:	dcc01b17 	ldw	r19,108(sp)
   83b94:	dc801a17 	ldw	r18,104(sp)
   83b98:	dc401917 	ldw	r17,100(sp)
   83b9c:	dc001817 	ldw	r16,96(sp)
   83ba0:	dec02204 	addi	sp,sp,136
   83ba4:	f800283a 	ret
   83ba8:	d8c02317 	ldw	r3,140(sp)
   83bac:	0089c3c4 	movi	r2,9999
   83bb0:	18800015 	stw	r2,0(r3)
   83bb4:	90017726 	beq	r18,zero,84194 <_dtoa_r+0x6dc>
   83bb8:	00800274 	movhi	r2,9
   83bbc:	1081f104 	addi	r2,r2,1988
   83bc0:	d9002517 	ldw	r4,148(sp)
   83bc4:	203fec26 	beq	r4,zero,83b78 <__alt_data_end+0xfffb8088>
   83bc8:	10c000c7 	ldb	r3,3(r2)
   83bcc:	1801781e 	bne	r3,zero,841b0 <_dtoa_r+0x6f8>
   83bd0:	10c000c4 	addi	r3,r2,3
   83bd4:	d9802517 	ldw	r6,148(sp)
   83bd8:	30c00015 	stw	r3,0(r6)
   83bdc:	003fe606 	br	83b78 <__alt_data_end+0xfffb8088>
   83be0:	04e00034 	movhi	r19,32768
   83be4:	9cffffc4 	addi	r19,r19,-1
   83be8:	00800044 	movi	r2,1
   83bec:	8ce6703a 	and	r19,r17,r19
   83bf0:	80800015 	stw	r2,0(r16)
   83bf4:	9823883a 	mov	r17,r19
   83bf8:	003fcc06 	br	83b2c <__alt_data_end+0xfffb803c>
   83bfc:	d8800204 	addi	r2,sp,8
   83c00:	d8800015 	stw	r2,0(sp)
   83c04:	d9c00104 	addi	r7,sp,4
   83c08:	900b883a 	mov	r5,r18
   83c0c:	980d883a 	mov	r6,r19
   83c10:	e009883a 	mov	r4,fp
   83c14:	8820d53a 	srli	r16,r17,20
   83c18:	0087e440 	call	87e44 <__d2b>
   83c1c:	d8800915 	stw	r2,36(sp)
   83c20:	8001651e 	bne	r16,zero,841b8 <_dtoa_r+0x700>
   83c24:	dd800217 	ldw	r22,8(sp)
   83c28:	dc000117 	ldw	r16,4(sp)
   83c2c:	00800804 	movi	r2,32
   83c30:	b421883a 	add	r16,r22,r16
   83c34:	80c10c84 	addi	r3,r16,1074
   83c38:	10c2d10e 	bge	r2,r3,84780 <_dtoa_r+0xcc8>
   83c3c:	00801004 	movi	r2,64
   83c40:	81010484 	addi	r4,r16,1042
   83c44:	10c7c83a 	sub	r3,r2,r3
   83c48:	9108d83a 	srl	r4,r18,r4
   83c4c:	88e2983a 	sll	r17,r17,r3
   83c50:	2448b03a 	or	r4,r4,r17
   83c54:	008d9d80 	call	8d9d8 <__floatunsidf>
   83c58:	017f8434 	movhi	r5,65040
   83c5c:	01800044 	movi	r6,1
   83c60:	1009883a 	mov	r4,r2
   83c64:	194b883a 	add	r5,r3,r5
   83c68:	843fffc4 	addi	r16,r16,-1
   83c6c:	d9801115 	stw	r6,68(sp)
   83c70:	000d883a 	mov	r6,zero
   83c74:	01cffe34 	movhi	r7,16376
   83c78:	008cf800 	call	8cf80 <__subdf3>
   83c7c:	0198dbf4 	movhi	r6,25455
   83c80:	01cff4f4 	movhi	r7,16339
   83c84:	3190d844 	addi	r6,r6,17249
   83c88:	39e1e9c4 	addi	r7,r7,-30809
   83c8c:	1009883a 	mov	r4,r2
   83c90:	180b883a 	mov	r5,r3
   83c94:	008c8680 	call	8c868 <__muldf3>
   83c98:	01a2d874 	movhi	r6,35681
   83c9c:	01cff1f4 	movhi	r7,16327
   83ca0:	31b22cc4 	addi	r6,r6,-14157
   83ca4:	39e28a04 	addi	r7,r7,-30168
   83ca8:	180b883a 	mov	r5,r3
   83cac:	1009883a 	mov	r4,r2
   83cb0:	008b47c0 	call	8b47c <__adddf3>
   83cb4:	8009883a 	mov	r4,r16
   83cb8:	1029883a 	mov	r20,r2
   83cbc:	1823883a 	mov	r17,r3
   83cc0:	008d8fc0 	call	8d8fc <__floatsidf>
   83cc4:	019427f4 	movhi	r6,20639
   83cc8:	01cff4f4 	movhi	r7,16339
   83ccc:	319e7ec4 	addi	r6,r6,31227
   83cd0:	39d104c4 	addi	r7,r7,17427
   83cd4:	1009883a 	mov	r4,r2
   83cd8:	180b883a 	mov	r5,r3
   83cdc:	008c8680 	call	8c868 <__muldf3>
   83ce0:	100d883a 	mov	r6,r2
   83ce4:	180f883a 	mov	r7,r3
   83ce8:	a009883a 	mov	r4,r20
   83cec:	880b883a 	mov	r5,r17
   83cf0:	008b47c0 	call	8b47c <__adddf3>
   83cf4:	1009883a 	mov	r4,r2
   83cf8:	180b883a 	mov	r5,r3
   83cfc:	1029883a 	mov	r20,r2
   83d00:	1823883a 	mov	r17,r3
   83d04:	008d87c0 	call	8d87c <__fixdfsi>
   83d08:	000d883a 	mov	r6,zero
   83d0c:	000f883a 	mov	r7,zero
   83d10:	a009883a 	mov	r4,r20
   83d14:	880b883a 	mov	r5,r17
   83d18:	d8800515 	stw	r2,20(sp)
   83d1c:	008c7740 	call	8c774 <__ledf2>
   83d20:	10028716 	blt	r2,zero,84740 <_dtoa_r+0xc88>
   83d24:	d8c00517 	ldw	r3,20(sp)
   83d28:	00800584 	movi	r2,22
   83d2c:	10c27536 	bltu	r2,r3,84704 <_dtoa_r+0xc4c>
   83d30:	180490fa 	slli	r2,r3,3
   83d34:	00c00274 	movhi	r3,9
   83d38:	18c20d04 	addi	r3,r3,2100
   83d3c:	1885883a 	add	r2,r3,r2
   83d40:	11000017 	ldw	r4,0(r2)
   83d44:	11400117 	ldw	r5,4(r2)
   83d48:	900d883a 	mov	r6,r18
   83d4c:	980f883a 	mov	r7,r19
   83d50:	008c6980 	call	8c698 <__gedf2>
   83d54:	00828d0e 	bge	zero,r2,8478c <_dtoa_r+0xcd4>
   83d58:	d9000517 	ldw	r4,20(sp)
   83d5c:	d8000e15 	stw	zero,56(sp)
   83d60:	213fffc4 	addi	r4,r4,-1
   83d64:	d9000515 	stw	r4,20(sp)
   83d68:	b42dc83a 	sub	r22,r22,r16
   83d6c:	b5bfffc4 	addi	r22,r22,-1
   83d70:	b0026f16 	blt	r22,zero,84730 <_dtoa_r+0xc78>
   83d74:	d8000815 	stw	zero,32(sp)
   83d78:	d9c00517 	ldw	r7,20(sp)
   83d7c:	38026416 	blt	r7,zero,84710 <_dtoa_r+0xc58>
   83d80:	b1ed883a 	add	r22,r22,r7
   83d84:	d9c00d15 	stw	r7,52(sp)
   83d88:	d8000a15 	stw	zero,40(sp)
   83d8c:	d9800317 	ldw	r6,12(sp)
   83d90:	00800244 	movi	r2,9
   83d94:	11811436 	bltu	r2,r6,841e8 <_dtoa_r+0x730>
   83d98:	00800144 	movi	r2,5
   83d9c:	1184e10e 	bge	r2,r6,85124 <_dtoa_r+0x166c>
   83da0:	31bfff04 	addi	r6,r6,-4
   83da4:	d9800315 	stw	r6,12(sp)
   83da8:	0023883a 	mov	r17,zero
   83dac:	d9800317 	ldw	r6,12(sp)
   83db0:	008000c4 	movi	r2,3
   83db4:	30836726 	beq	r6,r2,84b54 <_dtoa_r+0x109c>
   83db8:	1183410e 	bge	r2,r6,84ac0 <_dtoa_r+0x1008>
   83dbc:	d9c00317 	ldw	r7,12(sp)
   83dc0:	00800104 	movi	r2,4
   83dc4:	38827c26 	beq	r7,r2,847b8 <_dtoa_r+0xd00>
   83dc8:	00800144 	movi	r2,5
   83dcc:	3884c41e 	bne	r7,r2,850e0 <_dtoa_r+0x1628>
   83dd0:	00800044 	movi	r2,1
   83dd4:	d8800b15 	stw	r2,44(sp)
   83dd8:	d8c00517 	ldw	r3,20(sp)
   83ddc:	d9002217 	ldw	r4,136(sp)
   83de0:	1907883a 	add	r3,r3,r4
   83de4:	19800044 	addi	r6,r3,1
   83de8:	d8c00c15 	stw	r3,48(sp)
   83dec:	d9800615 	stw	r6,24(sp)
   83df0:	0183a40e 	bge	zero,r6,84c84 <_dtoa_r+0x11cc>
   83df4:	d9800617 	ldw	r6,24(sp)
   83df8:	3021883a 	mov	r16,r6
   83dfc:	e0001115 	stw	zero,68(fp)
   83e00:	008005c4 	movi	r2,23
   83e04:	1184c92e 	bgeu	r2,r6,8512c <_dtoa_r+0x1674>
   83e08:	00c00044 	movi	r3,1
   83e0c:	00800104 	movi	r2,4
   83e10:	1085883a 	add	r2,r2,r2
   83e14:	11000504 	addi	r4,r2,20
   83e18:	180b883a 	mov	r5,r3
   83e1c:	18c00044 	addi	r3,r3,1
   83e20:	313ffb2e 	bgeu	r6,r4,83e10 <__alt_data_end+0xfffb8320>
   83e24:	e1401115 	stw	r5,68(fp)
   83e28:	e009883a 	mov	r4,fp
   83e2c:	00871b00 	call	871b0 <_Balloc>
   83e30:	d8800715 	stw	r2,28(sp)
   83e34:	e0801015 	stw	r2,64(fp)
   83e38:	00800384 	movi	r2,14
   83e3c:	1400f736 	bltu	r2,r16,8421c <_dtoa_r+0x764>
   83e40:	8800f626 	beq	r17,zero,8421c <_dtoa_r+0x764>
   83e44:	d9c00517 	ldw	r7,20(sp)
   83e48:	01c39a0e 	bge	zero,r7,84cb4 <_dtoa_r+0x11fc>
   83e4c:	388003cc 	andi	r2,r7,15
   83e50:	100490fa 	slli	r2,r2,3
   83e54:	382bd13a 	srai	r21,r7,4
   83e58:	00c00274 	movhi	r3,9
   83e5c:	18c20d04 	addi	r3,r3,2100
   83e60:	1885883a 	add	r2,r3,r2
   83e64:	a8c0040c 	andi	r3,r21,16
   83e68:	12400017 	ldw	r9,0(r2)
   83e6c:	12000117 	ldw	r8,4(r2)
   83e70:	18037926 	beq	r3,zero,84c58 <_dtoa_r+0x11a0>
   83e74:	00800274 	movhi	r2,9
   83e78:	10820304 	addi	r2,r2,2060
   83e7c:	11800817 	ldw	r6,32(r2)
   83e80:	11c00917 	ldw	r7,36(r2)
   83e84:	9009883a 	mov	r4,r18
   83e88:	980b883a 	mov	r5,r19
   83e8c:	da001715 	stw	r8,92(sp)
   83e90:	da401615 	stw	r9,88(sp)
   83e94:	008bd280 	call	8bd28 <__divdf3>
   83e98:	da001717 	ldw	r8,92(sp)
   83e9c:	da401617 	ldw	r9,88(sp)
   83ea0:	ad4003cc 	andi	r21,r21,15
   83ea4:	040000c4 	movi	r16,3
   83ea8:	1023883a 	mov	r17,r2
   83eac:	1829883a 	mov	r20,r3
   83eb0:	a8001126 	beq	r21,zero,83ef8 <_dtoa_r+0x440>
   83eb4:	05c00274 	movhi	r23,9
   83eb8:	bdc20304 	addi	r23,r23,2060
   83ebc:	4805883a 	mov	r2,r9
   83ec0:	4007883a 	mov	r3,r8
   83ec4:	a980004c 	andi	r6,r21,1
   83ec8:	1009883a 	mov	r4,r2
   83ecc:	a82bd07a 	srai	r21,r21,1
   83ed0:	180b883a 	mov	r5,r3
   83ed4:	30000426 	beq	r6,zero,83ee8 <_dtoa_r+0x430>
   83ed8:	b9800017 	ldw	r6,0(r23)
   83edc:	b9c00117 	ldw	r7,4(r23)
   83ee0:	84000044 	addi	r16,r16,1
   83ee4:	008c8680 	call	8c868 <__muldf3>
   83ee8:	bdc00204 	addi	r23,r23,8
   83eec:	a83ff51e 	bne	r21,zero,83ec4 <__alt_data_end+0xfffb83d4>
   83ef0:	1013883a 	mov	r9,r2
   83ef4:	1811883a 	mov	r8,r3
   83ef8:	480d883a 	mov	r6,r9
   83efc:	400f883a 	mov	r7,r8
   83f00:	8809883a 	mov	r4,r17
   83f04:	a00b883a 	mov	r5,r20
   83f08:	008bd280 	call	8bd28 <__divdf3>
   83f0c:	d8800f15 	stw	r2,60(sp)
   83f10:	d8c01015 	stw	r3,64(sp)
   83f14:	d8c00e17 	ldw	r3,56(sp)
   83f18:	18000626 	beq	r3,zero,83f34 <_dtoa_r+0x47c>
   83f1c:	d9000f17 	ldw	r4,60(sp)
   83f20:	d9401017 	ldw	r5,64(sp)
   83f24:	000d883a 	mov	r6,zero
   83f28:	01cffc34 	movhi	r7,16368
   83f2c:	008c7740 	call	8c774 <__ledf2>
   83f30:	10040b16 	blt	r2,zero,84f60 <_dtoa_r+0x14a8>
   83f34:	8009883a 	mov	r4,r16
   83f38:	008d8fc0 	call	8d8fc <__floatsidf>
   83f3c:	d9800f17 	ldw	r6,60(sp)
   83f40:	d9c01017 	ldw	r7,64(sp)
   83f44:	1009883a 	mov	r4,r2
   83f48:	180b883a 	mov	r5,r3
   83f4c:	008c8680 	call	8c868 <__muldf3>
   83f50:	000d883a 	mov	r6,zero
   83f54:	01d00734 	movhi	r7,16412
   83f58:	1009883a 	mov	r4,r2
   83f5c:	180b883a 	mov	r5,r3
   83f60:	008b47c0 	call	8b47c <__adddf3>
   83f64:	1021883a 	mov	r16,r2
   83f68:	d8800617 	ldw	r2,24(sp)
   83f6c:	047f3034 	movhi	r17,64704
   83f70:	1c63883a 	add	r17,r3,r17
   83f74:	10031826 	beq	r2,zero,84bd8 <_dtoa_r+0x1120>
   83f78:	d8c00517 	ldw	r3,20(sp)
   83f7c:	db000617 	ldw	r12,24(sp)
   83f80:	d8c01315 	stw	r3,76(sp)
   83f84:	d9000b17 	ldw	r4,44(sp)
   83f88:	20038f26 	beq	r4,zero,84dc8 <_dtoa_r+0x1310>
   83f8c:	60bfffc4 	addi	r2,r12,-1
   83f90:	100490fa 	slli	r2,r2,3
   83f94:	00c00274 	movhi	r3,9
   83f98:	18c20d04 	addi	r3,r3,2100
   83f9c:	1885883a 	add	r2,r3,r2
   83fa0:	11800017 	ldw	r6,0(r2)
   83fa4:	11c00117 	ldw	r7,4(r2)
   83fa8:	d8800717 	ldw	r2,28(sp)
   83fac:	0009883a 	mov	r4,zero
   83fb0:	014ff834 	movhi	r5,16352
   83fb4:	db001615 	stw	r12,88(sp)
   83fb8:	15c00044 	addi	r23,r2,1
   83fbc:	008bd280 	call	8bd28 <__divdf3>
   83fc0:	800d883a 	mov	r6,r16
   83fc4:	880f883a 	mov	r7,r17
   83fc8:	1009883a 	mov	r4,r2
   83fcc:	180b883a 	mov	r5,r3
   83fd0:	008cf800 	call	8cf80 <__subdf3>
   83fd4:	d9401017 	ldw	r5,64(sp)
   83fd8:	d9000f17 	ldw	r4,60(sp)
   83fdc:	102b883a 	mov	r21,r2
   83fe0:	d8c01215 	stw	r3,72(sp)
   83fe4:	008d87c0 	call	8d87c <__fixdfsi>
   83fe8:	1009883a 	mov	r4,r2
   83fec:	1029883a 	mov	r20,r2
   83ff0:	008d8fc0 	call	8d8fc <__floatsidf>
   83ff4:	d9000f17 	ldw	r4,60(sp)
   83ff8:	d9401017 	ldw	r5,64(sp)
   83ffc:	100d883a 	mov	r6,r2
   84000:	180f883a 	mov	r7,r3
   84004:	008cf800 	call	8cf80 <__subdf3>
   84008:	1823883a 	mov	r17,r3
   8400c:	d8c00717 	ldw	r3,28(sp)
   84010:	d9401217 	ldw	r5,72(sp)
   84014:	a2000c04 	addi	r8,r20,48
   84018:	1021883a 	mov	r16,r2
   8401c:	1a000005 	stb	r8,0(r3)
   84020:	800d883a 	mov	r6,r16
   84024:	880f883a 	mov	r7,r17
   84028:	a809883a 	mov	r4,r21
   8402c:	4029883a 	mov	r20,r8
   84030:	008c6980 	call	8c698 <__gedf2>
   84034:	00841d16 	blt	zero,r2,850ac <_dtoa_r+0x15f4>
   84038:	800d883a 	mov	r6,r16
   8403c:	880f883a 	mov	r7,r17
   84040:	0009883a 	mov	r4,zero
   84044:	014ffc34 	movhi	r5,16368
   84048:	008cf800 	call	8cf80 <__subdf3>
   8404c:	d9401217 	ldw	r5,72(sp)
   84050:	100d883a 	mov	r6,r2
   84054:	180f883a 	mov	r7,r3
   84058:	a809883a 	mov	r4,r21
   8405c:	008c6980 	call	8c698 <__gedf2>
   84060:	db001617 	ldw	r12,88(sp)
   84064:	00840e16 	blt	zero,r2,850a0 <_dtoa_r+0x15e8>
   84068:	00800044 	movi	r2,1
   8406c:	13006b0e 	bge	r2,r12,8421c <_dtoa_r+0x764>
   84070:	d9000717 	ldw	r4,28(sp)
   84074:	dd800f15 	stw	r22,60(sp)
   84078:	dcc01015 	stw	r19,64(sp)
   8407c:	2319883a 	add	r12,r4,r12
   84080:	dcc01217 	ldw	r19,72(sp)
   84084:	602d883a 	mov	r22,r12
   84088:	dc801215 	stw	r18,72(sp)
   8408c:	b825883a 	mov	r18,r23
   84090:	00000906 	br	840b8 <_dtoa_r+0x600>
   84094:	008cf800 	call	8cf80 <__subdf3>
   84098:	a80d883a 	mov	r6,r21
   8409c:	980f883a 	mov	r7,r19
   840a0:	1009883a 	mov	r4,r2
   840a4:	180b883a 	mov	r5,r3
   840a8:	008c7740 	call	8c774 <__ledf2>
   840ac:	1003e816 	blt	r2,zero,85050 <_dtoa_r+0x1598>
   840b0:	b825883a 	mov	r18,r23
   840b4:	bd83e926 	beq	r23,r22,8505c <_dtoa_r+0x15a4>
   840b8:	a809883a 	mov	r4,r21
   840bc:	980b883a 	mov	r5,r19
   840c0:	000d883a 	mov	r6,zero
   840c4:	01d00934 	movhi	r7,16420
   840c8:	008c8680 	call	8c868 <__muldf3>
   840cc:	000d883a 	mov	r6,zero
   840d0:	01d00934 	movhi	r7,16420
   840d4:	8009883a 	mov	r4,r16
   840d8:	880b883a 	mov	r5,r17
   840dc:	102b883a 	mov	r21,r2
   840e0:	1827883a 	mov	r19,r3
   840e4:	008c8680 	call	8c868 <__muldf3>
   840e8:	180b883a 	mov	r5,r3
   840ec:	1009883a 	mov	r4,r2
   840f0:	1821883a 	mov	r16,r3
   840f4:	1023883a 	mov	r17,r2
   840f8:	008d87c0 	call	8d87c <__fixdfsi>
   840fc:	1009883a 	mov	r4,r2
   84100:	1029883a 	mov	r20,r2
   84104:	008d8fc0 	call	8d8fc <__floatsidf>
   84108:	8809883a 	mov	r4,r17
   8410c:	800b883a 	mov	r5,r16
   84110:	100d883a 	mov	r6,r2
   84114:	180f883a 	mov	r7,r3
   84118:	008cf800 	call	8cf80 <__subdf3>
   8411c:	a5000c04 	addi	r20,r20,48
   84120:	a80d883a 	mov	r6,r21
   84124:	980f883a 	mov	r7,r19
   84128:	1009883a 	mov	r4,r2
   8412c:	180b883a 	mov	r5,r3
   84130:	95000005 	stb	r20,0(r18)
   84134:	1021883a 	mov	r16,r2
   84138:	1823883a 	mov	r17,r3
   8413c:	008c7740 	call	8c774 <__ledf2>
   84140:	bdc00044 	addi	r23,r23,1
   84144:	800d883a 	mov	r6,r16
   84148:	880f883a 	mov	r7,r17
   8414c:	0009883a 	mov	r4,zero
   84150:	014ffc34 	movhi	r5,16368
   84154:	103fcf0e 	bge	r2,zero,84094 <__alt_data_end+0xfffb85a4>
   84158:	d8c01317 	ldw	r3,76(sp)
   8415c:	d8c00515 	stw	r3,20(sp)
   84160:	d9400917 	ldw	r5,36(sp)
   84164:	e009883a 	mov	r4,fp
   84168:	00872580 	call	87258 <_Bfree>
   8416c:	d9000517 	ldw	r4,20(sp)
   84170:	d9802317 	ldw	r6,140(sp)
   84174:	d9c02517 	ldw	r7,148(sp)
   84178:	b8000005 	stb	zero,0(r23)
   8417c:	20800044 	addi	r2,r4,1
   84180:	30800015 	stw	r2,0(r6)
   84184:	3802aa26 	beq	r7,zero,84c30 <_dtoa_r+0x1178>
   84188:	3dc00015 	stw	r23,0(r7)
   8418c:	d8800717 	ldw	r2,28(sp)
   84190:	003e7906 	br	83b78 <__alt_data_end+0xfffb8088>
   84194:	00800434 	movhi	r2,16
   84198:	10bfffc4 	addi	r2,r2,-1
   8419c:	88a2703a 	and	r17,r17,r2
   841a0:	883e851e 	bne	r17,zero,83bb8 <__alt_data_end+0xfffb80c8>
   841a4:	00800274 	movhi	r2,9
   841a8:	1081ee04 	addi	r2,r2,1976
   841ac:	003e8406 	br	83bc0 <__alt_data_end+0xfffb80d0>
   841b0:	10c00204 	addi	r3,r2,8
   841b4:	003e8706 	br	83bd4 <__alt_data_end+0xfffb80e4>
   841b8:	01400434 	movhi	r5,16
   841bc:	297fffc4 	addi	r5,r5,-1
   841c0:	994a703a 	and	r5,r19,r5
   841c4:	9009883a 	mov	r4,r18
   841c8:	843f0044 	addi	r16,r16,-1023
   841cc:	294ffc34 	orhi	r5,r5,16368
   841d0:	dd800217 	ldw	r22,8(sp)
   841d4:	d8001115 	stw	zero,68(sp)
   841d8:	003ea506 	br	83c70 <__alt_data_end+0xfffb8180>
   841dc:	00800274 	movhi	r2,9
   841e0:	1081e504 	addi	r2,r2,1940
   841e4:	003e6406 	br	83b78 <__alt_data_end+0xfffb8088>
   841e8:	e0001115 	stw	zero,68(fp)
   841ec:	000b883a 	mov	r5,zero
   841f0:	e009883a 	mov	r4,fp
   841f4:	00871b00 	call	871b0 <_Balloc>
   841f8:	01bfffc4 	movi	r6,-1
   841fc:	01c00044 	movi	r7,1
   84200:	d8800715 	stw	r2,28(sp)
   84204:	d9800c15 	stw	r6,48(sp)
   84208:	e0801015 	stw	r2,64(fp)
   8420c:	d8000315 	stw	zero,12(sp)
   84210:	d9c00b15 	stw	r7,44(sp)
   84214:	d9800615 	stw	r6,24(sp)
   84218:	d8002215 	stw	zero,136(sp)
   8421c:	d8800117 	ldw	r2,4(sp)
   84220:	10008916 	blt	r2,zero,84448 <_dtoa_r+0x990>
   84224:	d9000517 	ldw	r4,20(sp)
   84228:	00c00384 	movi	r3,14
   8422c:	19008616 	blt	r3,r4,84448 <_dtoa_r+0x990>
   84230:	200490fa 	slli	r2,r4,3
   84234:	00c00274 	movhi	r3,9
   84238:	d9802217 	ldw	r6,136(sp)
   8423c:	18c20d04 	addi	r3,r3,2100
   84240:	1885883a 	add	r2,r3,r2
   84244:	14000017 	ldw	r16,0(r2)
   84248:	14400117 	ldw	r17,4(r2)
   8424c:	30016316 	blt	r6,zero,847dc <_dtoa_r+0xd24>
   84250:	800d883a 	mov	r6,r16
   84254:	880f883a 	mov	r7,r17
   84258:	9009883a 	mov	r4,r18
   8425c:	980b883a 	mov	r5,r19
   84260:	008bd280 	call	8bd28 <__divdf3>
   84264:	180b883a 	mov	r5,r3
   84268:	1009883a 	mov	r4,r2
   8426c:	008d87c0 	call	8d87c <__fixdfsi>
   84270:	1009883a 	mov	r4,r2
   84274:	102b883a 	mov	r21,r2
   84278:	008d8fc0 	call	8d8fc <__floatsidf>
   8427c:	800d883a 	mov	r6,r16
   84280:	880f883a 	mov	r7,r17
   84284:	1009883a 	mov	r4,r2
   84288:	180b883a 	mov	r5,r3
   8428c:	008c8680 	call	8c868 <__muldf3>
   84290:	100d883a 	mov	r6,r2
   84294:	180f883a 	mov	r7,r3
   84298:	9009883a 	mov	r4,r18
   8429c:	980b883a 	mov	r5,r19
   842a0:	008cf800 	call	8cf80 <__subdf3>
   842a4:	d9c00717 	ldw	r7,28(sp)
   842a8:	1009883a 	mov	r4,r2
   842ac:	a8800c04 	addi	r2,r21,48
   842b0:	38800005 	stb	r2,0(r7)
   842b4:	3dc00044 	addi	r23,r7,1
   842b8:	d9c00617 	ldw	r7,24(sp)
   842bc:	01800044 	movi	r6,1
   842c0:	180b883a 	mov	r5,r3
   842c4:	2005883a 	mov	r2,r4
   842c8:	39803826 	beq	r7,r6,843ac <_dtoa_r+0x8f4>
   842cc:	000d883a 	mov	r6,zero
   842d0:	01d00934 	movhi	r7,16420
   842d4:	008c8680 	call	8c868 <__muldf3>
   842d8:	000d883a 	mov	r6,zero
   842dc:	000f883a 	mov	r7,zero
   842e0:	1009883a 	mov	r4,r2
   842e4:	180b883a 	mov	r5,r3
   842e8:	1025883a 	mov	r18,r2
   842ec:	1827883a 	mov	r19,r3
   842f0:	008c6100 	call	8c610 <__eqdf2>
   842f4:	103f9a26 	beq	r2,zero,84160 <__alt_data_end+0xfffb8670>
   842f8:	d9c00617 	ldw	r7,24(sp)
   842fc:	d8c00717 	ldw	r3,28(sp)
   84300:	b829883a 	mov	r20,r23
   84304:	38bfffc4 	addi	r2,r7,-1
   84308:	18ad883a 	add	r22,r3,r2
   8430c:	00000a06 	br	84338 <_dtoa_r+0x880>
   84310:	008c8680 	call	8c868 <__muldf3>
   84314:	000d883a 	mov	r6,zero
   84318:	000f883a 	mov	r7,zero
   8431c:	1009883a 	mov	r4,r2
   84320:	180b883a 	mov	r5,r3
   84324:	1025883a 	mov	r18,r2
   84328:	1827883a 	mov	r19,r3
   8432c:	b829883a 	mov	r20,r23
   84330:	008c6100 	call	8c610 <__eqdf2>
   84334:	103f8a26 	beq	r2,zero,84160 <__alt_data_end+0xfffb8670>
   84338:	800d883a 	mov	r6,r16
   8433c:	880f883a 	mov	r7,r17
   84340:	9009883a 	mov	r4,r18
   84344:	980b883a 	mov	r5,r19
   84348:	008bd280 	call	8bd28 <__divdf3>
   8434c:	180b883a 	mov	r5,r3
   84350:	1009883a 	mov	r4,r2
   84354:	008d87c0 	call	8d87c <__fixdfsi>
   84358:	1009883a 	mov	r4,r2
   8435c:	102b883a 	mov	r21,r2
   84360:	008d8fc0 	call	8d8fc <__floatsidf>
   84364:	800d883a 	mov	r6,r16
   84368:	880f883a 	mov	r7,r17
   8436c:	1009883a 	mov	r4,r2
   84370:	180b883a 	mov	r5,r3
   84374:	008c8680 	call	8c868 <__muldf3>
   84378:	100d883a 	mov	r6,r2
   8437c:	180f883a 	mov	r7,r3
   84380:	9009883a 	mov	r4,r18
   84384:	980b883a 	mov	r5,r19
   84388:	008cf800 	call	8cf80 <__subdf3>
   8438c:	aa000c04 	addi	r8,r21,48
   84390:	a2000005 	stb	r8,0(r20)
   84394:	000d883a 	mov	r6,zero
   84398:	01d00934 	movhi	r7,16420
   8439c:	1009883a 	mov	r4,r2
   843a0:	180b883a 	mov	r5,r3
   843a4:	a5c00044 	addi	r23,r20,1
   843a8:	b53fd91e 	bne	r22,r20,84310 <__alt_data_end+0xfffb8820>
   843ac:	100d883a 	mov	r6,r2
   843b0:	180f883a 	mov	r7,r3
   843b4:	1009883a 	mov	r4,r2
   843b8:	180b883a 	mov	r5,r3
   843bc:	008b47c0 	call	8b47c <__adddf3>
   843c0:	100d883a 	mov	r6,r2
   843c4:	180f883a 	mov	r7,r3
   843c8:	8009883a 	mov	r4,r16
   843cc:	880b883a 	mov	r5,r17
   843d0:	1027883a 	mov	r19,r2
   843d4:	1825883a 	mov	r18,r3
   843d8:	008c7740 	call	8c774 <__ledf2>
   843dc:	10000816 	blt	r2,zero,84400 <_dtoa_r+0x948>
   843e0:	980d883a 	mov	r6,r19
   843e4:	900f883a 	mov	r7,r18
   843e8:	8009883a 	mov	r4,r16
   843ec:	880b883a 	mov	r5,r17
   843f0:	008c6100 	call	8c610 <__eqdf2>
   843f4:	103f5a1e 	bne	r2,zero,84160 <__alt_data_end+0xfffb8670>
   843f8:	ad40004c 	andi	r21,r21,1
   843fc:	a83f5826 	beq	r21,zero,84160 <__alt_data_end+0xfffb8670>
   84400:	bd3fffc3 	ldbu	r20,-1(r23)
   84404:	b8bfffc4 	addi	r2,r23,-1
   84408:	1007883a 	mov	r3,r2
   8440c:	01400e44 	movi	r5,57
   84410:	d9800717 	ldw	r6,28(sp)
   84414:	00000506 	br	8442c <_dtoa_r+0x974>
   84418:	18ffffc4 	addi	r3,r3,-1
   8441c:	11824726 	beq	r2,r6,84d3c <_dtoa_r+0x1284>
   84420:	1d000003 	ldbu	r20,0(r3)
   84424:	102f883a 	mov	r23,r2
   84428:	10bfffc4 	addi	r2,r2,-1
   8442c:	a1003fcc 	andi	r4,r20,255
   84430:	2100201c 	xori	r4,r4,128
   84434:	213fe004 	addi	r4,r4,-128
   84438:	217ff726 	beq	r4,r5,84418 <__alt_data_end+0xfffb8928>
   8443c:	a2000044 	addi	r8,r20,1
   84440:	12000005 	stb	r8,0(r2)
   84444:	003f4606 	br	84160 <__alt_data_end+0xfffb8670>
   84448:	d9000b17 	ldw	r4,44(sp)
   8444c:	2000c826 	beq	r4,zero,84770 <_dtoa_r+0xcb8>
   84450:	d9800317 	ldw	r6,12(sp)
   84454:	00c00044 	movi	r3,1
   84458:	1980f90e 	bge	r3,r6,84840 <_dtoa_r+0xd88>
   8445c:	d8800617 	ldw	r2,24(sp)
   84460:	d8c00a17 	ldw	r3,40(sp)
   84464:	157fffc4 	addi	r21,r2,-1
   84468:	1d41f316 	blt	r3,r21,84c38 <_dtoa_r+0x1180>
   8446c:	1d6bc83a 	sub	r21,r3,r21
   84470:	d9c00617 	ldw	r7,24(sp)
   84474:	3802aa16 	blt	r7,zero,84f20 <_dtoa_r+0x1468>
   84478:	dd000817 	ldw	r20,32(sp)
   8447c:	d8800617 	ldw	r2,24(sp)
   84480:	d8c00817 	ldw	r3,32(sp)
   84484:	01400044 	movi	r5,1
   84488:	e009883a 	mov	r4,fp
   8448c:	1887883a 	add	r3,r3,r2
   84490:	d8c00815 	stw	r3,32(sp)
   84494:	b0ad883a 	add	r22,r22,r2
   84498:	00875bc0 	call	875bc <__i2b>
   8449c:	1023883a 	mov	r17,r2
   844a0:	a0000826 	beq	r20,zero,844c4 <_dtoa_r+0xa0c>
   844a4:	0580070e 	bge	zero,r22,844c4 <_dtoa_r+0xa0c>
   844a8:	a005883a 	mov	r2,r20
   844ac:	b500b916 	blt	r22,r20,84794 <_dtoa_r+0xcdc>
   844b0:	d9000817 	ldw	r4,32(sp)
   844b4:	a0a9c83a 	sub	r20,r20,r2
   844b8:	b0adc83a 	sub	r22,r22,r2
   844bc:	2089c83a 	sub	r4,r4,r2
   844c0:	d9000815 	stw	r4,32(sp)
   844c4:	d9800a17 	ldw	r6,40(sp)
   844c8:	0181810e 	bge	zero,r6,84ad0 <_dtoa_r+0x1018>
   844cc:	d9c00b17 	ldw	r7,44(sp)
   844d0:	3800b326 	beq	r7,zero,847a0 <_dtoa_r+0xce8>
   844d4:	a800b226 	beq	r21,zero,847a0 <_dtoa_r+0xce8>
   844d8:	880b883a 	mov	r5,r17
   844dc:	a80d883a 	mov	r6,r21
   844e0:	e009883a 	mov	r4,fp
   844e4:	00877f00 	call	877f0 <__pow5mult>
   844e8:	d9800917 	ldw	r6,36(sp)
   844ec:	100b883a 	mov	r5,r2
   844f0:	e009883a 	mov	r4,fp
   844f4:	1023883a 	mov	r17,r2
   844f8:	00875f80 	call	875f8 <__multiply>
   844fc:	1021883a 	mov	r16,r2
   84500:	d8800a17 	ldw	r2,40(sp)
   84504:	d9400917 	ldw	r5,36(sp)
   84508:	e009883a 	mov	r4,fp
   8450c:	1545c83a 	sub	r2,r2,r21
   84510:	d8800a15 	stw	r2,40(sp)
   84514:	00872580 	call	87258 <_Bfree>
   84518:	d8c00a17 	ldw	r3,40(sp)
   8451c:	18009f1e 	bne	r3,zero,8479c <_dtoa_r+0xce4>
   84520:	05c00044 	movi	r23,1
   84524:	e009883a 	mov	r4,fp
   84528:	b80b883a 	mov	r5,r23
   8452c:	00875bc0 	call	875bc <__i2b>
   84530:	d9000d17 	ldw	r4,52(sp)
   84534:	102b883a 	mov	r21,r2
   84538:	2000ce26 	beq	r4,zero,84874 <_dtoa_r+0xdbc>
   8453c:	200d883a 	mov	r6,r4
   84540:	100b883a 	mov	r5,r2
   84544:	e009883a 	mov	r4,fp
   84548:	00877f00 	call	877f0 <__pow5mult>
   8454c:	d9800317 	ldw	r6,12(sp)
   84550:	102b883a 	mov	r21,r2
   84554:	b981810e 	bge	r23,r6,84b5c <_dtoa_r+0x10a4>
   84558:	0027883a 	mov	r19,zero
   8455c:	a8800417 	ldw	r2,16(r21)
   84560:	05c00804 	movi	r23,32
   84564:	10800104 	addi	r2,r2,4
   84568:	1085883a 	add	r2,r2,r2
   8456c:	1085883a 	add	r2,r2,r2
   84570:	a885883a 	add	r2,r21,r2
   84574:	11000017 	ldw	r4,0(r2)
   84578:	00874a40 	call	874a4 <__hi0bits>
   8457c:	b885c83a 	sub	r2,r23,r2
   84580:	1585883a 	add	r2,r2,r22
   84584:	108007cc 	andi	r2,r2,31
   84588:	1000b326 	beq	r2,zero,84858 <_dtoa_r+0xda0>
   8458c:	00c00804 	movi	r3,32
   84590:	1887c83a 	sub	r3,r3,r2
   84594:	01000104 	movi	r4,4
   84598:	20c2cd0e 	bge	r4,r3,850d0 <_dtoa_r+0x1618>
   8459c:	00c00704 	movi	r3,28
   845a0:	1885c83a 	sub	r2,r3,r2
   845a4:	d8c00817 	ldw	r3,32(sp)
   845a8:	a0a9883a 	add	r20,r20,r2
   845ac:	b0ad883a 	add	r22,r22,r2
   845b0:	1887883a 	add	r3,r3,r2
   845b4:	d8c00815 	stw	r3,32(sp)
   845b8:	d9800817 	ldw	r6,32(sp)
   845bc:	0180040e 	bge	zero,r6,845d0 <_dtoa_r+0xb18>
   845c0:	800b883a 	mov	r5,r16
   845c4:	e009883a 	mov	r4,fp
   845c8:	00879300 	call	87930 <__lshift>
   845cc:	1021883a 	mov	r16,r2
   845d0:	0580050e 	bge	zero,r22,845e8 <_dtoa_r+0xb30>
   845d4:	a80b883a 	mov	r5,r21
   845d8:	b00d883a 	mov	r6,r22
   845dc:	e009883a 	mov	r4,fp
   845e0:	00879300 	call	87930 <__lshift>
   845e4:	102b883a 	mov	r21,r2
   845e8:	d9c00e17 	ldw	r7,56(sp)
   845ec:	3801211e 	bne	r7,zero,84a74 <_dtoa_r+0xfbc>
   845f0:	d9800617 	ldw	r6,24(sp)
   845f4:	0181380e 	bge	zero,r6,84ad8 <_dtoa_r+0x1020>
   845f8:	d8c00b17 	ldw	r3,44(sp)
   845fc:	1800ab1e 	bne	r3,zero,848ac <_dtoa_r+0xdf4>
   84600:	dc800717 	ldw	r18,28(sp)
   84604:	dcc00617 	ldw	r19,24(sp)
   84608:	9029883a 	mov	r20,r18
   8460c:	00000206 	br	84618 <_dtoa_r+0xb60>
   84610:	00872800 	call	87280 <__multadd>
   84614:	1021883a 	mov	r16,r2
   84618:	a80b883a 	mov	r5,r21
   8461c:	8009883a 	mov	r4,r16
   84620:	00838b80 	call	838b8 <quorem>
   84624:	10800c04 	addi	r2,r2,48
   84628:	90800005 	stb	r2,0(r18)
   8462c:	94800044 	addi	r18,r18,1
   84630:	9507c83a 	sub	r3,r18,r20
   84634:	000f883a 	mov	r7,zero
   84638:	01800284 	movi	r6,10
   8463c:	800b883a 	mov	r5,r16
   84640:	e009883a 	mov	r4,fp
   84644:	1cfff216 	blt	r3,r19,84610 <__alt_data_end+0xfffb8b20>
   84648:	1011883a 	mov	r8,r2
   8464c:	d8800617 	ldw	r2,24(sp)
   84650:	0082370e 	bge	zero,r2,84f30 <_dtoa_r+0x1478>
   84654:	d9000717 	ldw	r4,28(sp)
   84658:	0025883a 	mov	r18,zero
   8465c:	20af883a 	add	r23,r4,r2
   84660:	01800044 	movi	r6,1
   84664:	800b883a 	mov	r5,r16
   84668:	e009883a 	mov	r4,fp
   8466c:	da001715 	stw	r8,92(sp)
   84670:	00879300 	call	87930 <__lshift>
   84674:	a80b883a 	mov	r5,r21
   84678:	1009883a 	mov	r4,r2
   8467c:	d8800915 	stw	r2,36(sp)
   84680:	0087a780 	call	87a78 <__mcmp>
   84684:	da001717 	ldw	r8,92(sp)
   84688:	0081800e 	bge	zero,r2,84c8c <_dtoa_r+0x11d4>
   8468c:	b93fffc3 	ldbu	r4,-1(r23)
   84690:	b8bfffc4 	addi	r2,r23,-1
   84694:	1007883a 	mov	r3,r2
   84698:	01800e44 	movi	r6,57
   8469c:	d9c00717 	ldw	r7,28(sp)
   846a0:	00000506 	br	846b8 <_dtoa_r+0xc00>
   846a4:	18ffffc4 	addi	r3,r3,-1
   846a8:	11c12326 	beq	r2,r7,84b38 <_dtoa_r+0x1080>
   846ac:	19000003 	ldbu	r4,0(r3)
   846b0:	102f883a 	mov	r23,r2
   846b4:	10bfffc4 	addi	r2,r2,-1
   846b8:	21403fcc 	andi	r5,r4,255
   846bc:	2940201c 	xori	r5,r5,128
   846c0:	297fe004 	addi	r5,r5,-128
   846c4:	29bff726 	beq	r5,r6,846a4 <__alt_data_end+0xfffb8bb4>
   846c8:	21000044 	addi	r4,r4,1
   846cc:	11000005 	stb	r4,0(r2)
   846d0:	a80b883a 	mov	r5,r21
   846d4:	e009883a 	mov	r4,fp
   846d8:	00872580 	call	87258 <_Bfree>
   846dc:	883ea026 	beq	r17,zero,84160 <__alt_data_end+0xfffb8670>
   846e0:	90000426 	beq	r18,zero,846f4 <_dtoa_r+0xc3c>
   846e4:	94400326 	beq	r18,r17,846f4 <_dtoa_r+0xc3c>
   846e8:	900b883a 	mov	r5,r18
   846ec:	e009883a 	mov	r4,fp
   846f0:	00872580 	call	87258 <_Bfree>
   846f4:	880b883a 	mov	r5,r17
   846f8:	e009883a 	mov	r4,fp
   846fc:	00872580 	call	87258 <_Bfree>
   84700:	003e9706 	br	84160 <__alt_data_end+0xfffb8670>
   84704:	01800044 	movi	r6,1
   84708:	d9800e15 	stw	r6,56(sp)
   8470c:	003d9606 	br	83d68 <__alt_data_end+0xfffb8278>
   84710:	d8800817 	ldw	r2,32(sp)
   84714:	d8c00517 	ldw	r3,20(sp)
   84718:	d8000d15 	stw	zero,52(sp)
   8471c:	10c5c83a 	sub	r2,r2,r3
   84720:	00c9c83a 	sub	r4,zero,r3
   84724:	d8800815 	stw	r2,32(sp)
   84728:	d9000a15 	stw	r4,40(sp)
   8472c:	003d9706 	br	83d8c <__alt_data_end+0xfffb829c>
   84730:	05adc83a 	sub	r22,zero,r22
   84734:	dd800815 	stw	r22,32(sp)
   84738:	002d883a 	mov	r22,zero
   8473c:	003d8e06 	br	83d78 <__alt_data_end+0xfffb8288>
   84740:	d9000517 	ldw	r4,20(sp)
   84744:	008d8fc0 	call	8d8fc <__floatsidf>
   84748:	100d883a 	mov	r6,r2
   8474c:	180f883a 	mov	r7,r3
   84750:	a009883a 	mov	r4,r20
   84754:	880b883a 	mov	r5,r17
   84758:	008c6100 	call	8c610 <__eqdf2>
   8475c:	103d7126 	beq	r2,zero,83d24 <__alt_data_end+0xfffb8234>
   84760:	d9c00517 	ldw	r7,20(sp)
   84764:	39ffffc4 	addi	r7,r7,-1
   84768:	d9c00515 	stw	r7,20(sp)
   8476c:	003d6d06 	br	83d24 <__alt_data_end+0xfffb8234>
   84770:	dd400a17 	ldw	r21,40(sp)
   84774:	dd000817 	ldw	r20,32(sp)
   84778:	0023883a 	mov	r17,zero
   8477c:	003f4806 	br	844a0 <__alt_data_end+0xfffb89b0>
   84780:	10e3c83a 	sub	r17,r2,r3
   84784:	9448983a 	sll	r4,r18,r17
   84788:	003d3206 	br	83c54 <__alt_data_end+0xfffb8164>
   8478c:	d8000e15 	stw	zero,56(sp)
   84790:	003d7506 	br	83d68 <__alt_data_end+0xfffb8278>
   84794:	b005883a 	mov	r2,r22
   84798:	003f4506 	br	844b0 <__alt_data_end+0xfffb89c0>
   8479c:	dc000915 	stw	r16,36(sp)
   847a0:	d9800a17 	ldw	r6,40(sp)
   847a4:	d9400917 	ldw	r5,36(sp)
   847a8:	e009883a 	mov	r4,fp
   847ac:	00877f00 	call	877f0 <__pow5mult>
   847b0:	1021883a 	mov	r16,r2
   847b4:	003f5a06 	br	84520 <__alt_data_end+0xfffb8a30>
   847b8:	01c00044 	movi	r7,1
   847bc:	d9c00b15 	stw	r7,44(sp)
   847c0:	d8802217 	ldw	r2,136(sp)
   847c4:	0081280e 	bge	zero,r2,84c68 <_dtoa_r+0x11b0>
   847c8:	100d883a 	mov	r6,r2
   847cc:	1021883a 	mov	r16,r2
   847d0:	d8800c15 	stw	r2,48(sp)
   847d4:	d8800615 	stw	r2,24(sp)
   847d8:	003d8806 	br	83dfc <__alt_data_end+0xfffb830c>
   847dc:	d8800617 	ldw	r2,24(sp)
   847e0:	00be9b16 	blt	zero,r2,84250 <__alt_data_end+0xfffb8760>
   847e4:	10010f1e 	bne	r2,zero,84c24 <_dtoa_r+0x116c>
   847e8:	880b883a 	mov	r5,r17
   847ec:	000d883a 	mov	r6,zero
   847f0:	01d00534 	movhi	r7,16404
   847f4:	8009883a 	mov	r4,r16
   847f8:	008c8680 	call	8c868 <__muldf3>
   847fc:	900d883a 	mov	r6,r18
   84800:	980f883a 	mov	r7,r19
   84804:	1009883a 	mov	r4,r2
   84808:	180b883a 	mov	r5,r3
   8480c:	008c6980 	call	8c698 <__gedf2>
   84810:	002b883a 	mov	r21,zero
   84814:	0023883a 	mov	r17,zero
   84818:	1000bf16 	blt	r2,zero,84b18 <_dtoa_r+0x1060>
   8481c:	d9802217 	ldw	r6,136(sp)
   84820:	ddc00717 	ldw	r23,28(sp)
   84824:	018c303a 	nor	r6,zero,r6
   84828:	d9800515 	stw	r6,20(sp)
   8482c:	a80b883a 	mov	r5,r21
   84830:	e009883a 	mov	r4,fp
   84834:	00872580 	call	87258 <_Bfree>
   84838:	883e4926 	beq	r17,zero,84160 <__alt_data_end+0xfffb8670>
   8483c:	003fad06 	br	846f4 <__alt_data_end+0xfffb8c04>
   84840:	d9c01117 	ldw	r7,68(sp)
   84844:	3801bc26 	beq	r7,zero,84f38 <_dtoa_r+0x1480>
   84848:	10810cc4 	addi	r2,r2,1075
   8484c:	dd400a17 	ldw	r21,40(sp)
   84850:	dd000817 	ldw	r20,32(sp)
   84854:	003f0a06 	br	84480 <__alt_data_end+0xfffb8990>
   84858:	00800704 	movi	r2,28
   8485c:	d9000817 	ldw	r4,32(sp)
   84860:	a0a9883a 	add	r20,r20,r2
   84864:	b0ad883a 	add	r22,r22,r2
   84868:	2089883a 	add	r4,r4,r2
   8486c:	d9000815 	stw	r4,32(sp)
   84870:	003f5106 	br	845b8 <__alt_data_end+0xfffb8ac8>
   84874:	d8c00317 	ldw	r3,12(sp)
   84878:	b8c1fc0e 	bge	r23,r3,8506c <_dtoa_r+0x15b4>
   8487c:	0027883a 	mov	r19,zero
   84880:	b805883a 	mov	r2,r23
   84884:	003f3e06 	br	84580 <__alt_data_end+0xfffb8a90>
   84888:	880b883a 	mov	r5,r17
   8488c:	e009883a 	mov	r4,fp
   84890:	000f883a 	mov	r7,zero
   84894:	01800284 	movi	r6,10
   84898:	00872800 	call	87280 <__multadd>
   8489c:	d9000c17 	ldw	r4,48(sp)
   848a0:	1023883a 	mov	r17,r2
   848a4:	0102040e 	bge	zero,r4,850b8 <_dtoa_r+0x1600>
   848a8:	d9000615 	stw	r4,24(sp)
   848ac:	0500050e 	bge	zero,r20,848c4 <_dtoa_r+0xe0c>
   848b0:	880b883a 	mov	r5,r17
   848b4:	a00d883a 	mov	r6,r20
   848b8:	e009883a 	mov	r4,fp
   848bc:	00879300 	call	87930 <__lshift>
   848c0:	1023883a 	mov	r17,r2
   848c4:	9801241e 	bne	r19,zero,84d58 <_dtoa_r+0x12a0>
   848c8:	8829883a 	mov	r20,r17
   848cc:	d9000617 	ldw	r4,24(sp)
   848d0:	dcc00717 	ldw	r19,28(sp)
   848d4:	9480004c 	andi	r18,r18,1
   848d8:	20bfffc4 	addi	r2,r4,-1
   848dc:	9885883a 	add	r2,r19,r2
   848e0:	d8800415 	stw	r2,16(sp)
   848e4:	dc800615 	stw	r18,24(sp)
   848e8:	a80b883a 	mov	r5,r21
   848ec:	8009883a 	mov	r4,r16
   848f0:	00838b80 	call	838b8 <quorem>
   848f4:	880b883a 	mov	r5,r17
   848f8:	8009883a 	mov	r4,r16
   848fc:	102f883a 	mov	r23,r2
   84900:	0087a780 	call	87a78 <__mcmp>
   84904:	a80b883a 	mov	r5,r21
   84908:	a00d883a 	mov	r6,r20
   8490c:	e009883a 	mov	r4,fp
   84910:	102d883a 	mov	r22,r2
   84914:	0087ad80 	call	87ad8 <__mdiff>
   84918:	1007883a 	mov	r3,r2
   8491c:	10800317 	ldw	r2,12(r2)
   84920:	bc800c04 	addi	r18,r23,48
   84924:	180b883a 	mov	r5,r3
   84928:	10004e1e 	bne	r2,zero,84a64 <_dtoa_r+0xfac>
   8492c:	8009883a 	mov	r4,r16
   84930:	d8c01615 	stw	r3,88(sp)
   84934:	0087a780 	call	87a78 <__mcmp>
   84938:	d8c01617 	ldw	r3,88(sp)
   8493c:	e009883a 	mov	r4,fp
   84940:	d8801615 	stw	r2,88(sp)
   84944:	180b883a 	mov	r5,r3
   84948:	00872580 	call	87258 <_Bfree>
   8494c:	d8801617 	ldw	r2,88(sp)
   84950:	1000041e 	bne	r2,zero,84964 <_dtoa_r+0xeac>
   84954:	d9800317 	ldw	r6,12(sp)
   84958:	3000021e 	bne	r6,zero,84964 <_dtoa_r+0xeac>
   8495c:	d8c00617 	ldw	r3,24(sp)
   84960:	18003726 	beq	r3,zero,84a40 <_dtoa_r+0xf88>
   84964:	b0002016 	blt	r22,zero,849e8 <_dtoa_r+0xf30>
   84968:	b000041e 	bne	r22,zero,8497c <_dtoa_r+0xec4>
   8496c:	d9000317 	ldw	r4,12(sp)
   84970:	2000021e 	bne	r4,zero,8497c <_dtoa_r+0xec4>
   84974:	d8c00617 	ldw	r3,24(sp)
   84978:	18001b26 	beq	r3,zero,849e8 <_dtoa_r+0xf30>
   8497c:	00810716 	blt	zero,r2,84d9c <_dtoa_r+0x12e4>
   84980:	d8c00417 	ldw	r3,16(sp)
   84984:	9d800044 	addi	r22,r19,1
   84988:	9c800005 	stb	r18,0(r19)
   8498c:	b02f883a 	mov	r23,r22
   84990:	98c10626 	beq	r19,r3,84dac <_dtoa_r+0x12f4>
   84994:	800b883a 	mov	r5,r16
   84998:	000f883a 	mov	r7,zero
   8499c:	01800284 	movi	r6,10
   849a0:	e009883a 	mov	r4,fp
   849a4:	00872800 	call	87280 <__multadd>
   849a8:	1021883a 	mov	r16,r2
   849ac:	000f883a 	mov	r7,zero
   849b0:	01800284 	movi	r6,10
   849b4:	880b883a 	mov	r5,r17
   849b8:	e009883a 	mov	r4,fp
   849bc:	8d002526 	beq	r17,r20,84a54 <_dtoa_r+0xf9c>
   849c0:	00872800 	call	87280 <__multadd>
   849c4:	a00b883a 	mov	r5,r20
   849c8:	000f883a 	mov	r7,zero
   849cc:	01800284 	movi	r6,10
   849d0:	e009883a 	mov	r4,fp
   849d4:	1023883a 	mov	r17,r2
   849d8:	00872800 	call	87280 <__multadd>
   849dc:	1029883a 	mov	r20,r2
   849e0:	b027883a 	mov	r19,r22
   849e4:	003fc006 	br	848e8 <__alt_data_end+0xfffb8df8>
   849e8:	9011883a 	mov	r8,r18
   849ec:	00800e0e 	bge	zero,r2,84a28 <_dtoa_r+0xf70>
   849f0:	800b883a 	mov	r5,r16
   849f4:	01800044 	movi	r6,1
   849f8:	e009883a 	mov	r4,fp
   849fc:	da001715 	stw	r8,92(sp)
   84a00:	00879300 	call	87930 <__lshift>
   84a04:	a80b883a 	mov	r5,r21
   84a08:	1009883a 	mov	r4,r2
   84a0c:	1021883a 	mov	r16,r2
   84a10:	0087a780 	call	87a78 <__mcmp>
   84a14:	da001717 	ldw	r8,92(sp)
   84a18:	0081960e 	bge	zero,r2,85074 <_dtoa_r+0x15bc>
   84a1c:	00800e44 	movi	r2,57
   84a20:	40817026 	beq	r8,r2,84fe4 <_dtoa_r+0x152c>
   84a24:	ba000c44 	addi	r8,r23,49
   84a28:	8825883a 	mov	r18,r17
   84a2c:	9dc00044 	addi	r23,r19,1
   84a30:	9a000005 	stb	r8,0(r19)
   84a34:	a023883a 	mov	r17,r20
   84a38:	dc000915 	stw	r16,36(sp)
   84a3c:	003f2406 	br	846d0 <__alt_data_end+0xfffb8be0>
   84a40:	00800e44 	movi	r2,57
   84a44:	9011883a 	mov	r8,r18
   84a48:	90816626 	beq	r18,r2,84fe4 <_dtoa_r+0x152c>
   84a4c:	05bff516 	blt	zero,r22,84a24 <__alt_data_end+0xfffb8f34>
   84a50:	003ff506 	br	84a28 <__alt_data_end+0xfffb8f38>
   84a54:	00872800 	call	87280 <__multadd>
   84a58:	1023883a 	mov	r17,r2
   84a5c:	1029883a 	mov	r20,r2
   84a60:	003fdf06 	br	849e0 <__alt_data_end+0xfffb8ef0>
   84a64:	e009883a 	mov	r4,fp
   84a68:	00872580 	call	87258 <_Bfree>
   84a6c:	00800044 	movi	r2,1
   84a70:	003fbc06 	br	84964 <__alt_data_end+0xfffb8e74>
   84a74:	a80b883a 	mov	r5,r21
   84a78:	8009883a 	mov	r4,r16
   84a7c:	0087a780 	call	87a78 <__mcmp>
   84a80:	103edb0e 	bge	r2,zero,845f0 <__alt_data_end+0xfffb8b00>
   84a84:	800b883a 	mov	r5,r16
   84a88:	000f883a 	mov	r7,zero
   84a8c:	01800284 	movi	r6,10
   84a90:	e009883a 	mov	r4,fp
   84a94:	00872800 	call	87280 <__multadd>
   84a98:	1021883a 	mov	r16,r2
   84a9c:	d8800517 	ldw	r2,20(sp)
   84aa0:	d8c00b17 	ldw	r3,44(sp)
   84aa4:	10bfffc4 	addi	r2,r2,-1
   84aa8:	d8800515 	stw	r2,20(sp)
   84aac:	183f761e 	bne	r3,zero,84888 <__alt_data_end+0xfffb8d98>
   84ab0:	d9000c17 	ldw	r4,48(sp)
   84ab4:	0101730e 	bge	zero,r4,85084 <_dtoa_r+0x15cc>
   84ab8:	d9000615 	stw	r4,24(sp)
   84abc:	003ed006 	br	84600 <__alt_data_end+0xfffb8b10>
   84ac0:	00800084 	movi	r2,2
   84ac4:	3081861e 	bne	r6,r2,850e0 <_dtoa_r+0x1628>
   84ac8:	d8000b15 	stw	zero,44(sp)
   84acc:	003f3c06 	br	847c0 <__alt_data_end+0xfffb8cd0>
   84ad0:	dc000917 	ldw	r16,36(sp)
   84ad4:	003e9206 	br	84520 <__alt_data_end+0xfffb8a30>
   84ad8:	d9c00317 	ldw	r7,12(sp)
   84adc:	00800084 	movi	r2,2
   84ae0:	11fec50e 	bge	r2,r7,845f8 <__alt_data_end+0xfffb8b08>
   84ae4:	d9000617 	ldw	r4,24(sp)
   84ae8:	20013c1e 	bne	r4,zero,84fdc <_dtoa_r+0x1524>
   84aec:	a80b883a 	mov	r5,r21
   84af0:	000f883a 	mov	r7,zero
   84af4:	01800144 	movi	r6,5
   84af8:	e009883a 	mov	r4,fp
   84afc:	00872800 	call	87280 <__multadd>
   84b00:	100b883a 	mov	r5,r2
   84b04:	8009883a 	mov	r4,r16
   84b08:	102b883a 	mov	r21,r2
   84b0c:	0087a780 	call	87a78 <__mcmp>
   84b10:	dc000915 	stw	r16,36(sp)
   84b14:	00bf410e 	bge	zero,r2,8481c <__alt_data_end+0xfffb8d2c>
   84b18:	d9c00717 	ldw	r7,28(sp)
   84b1c:	00800c44 	movi	r2,49
   84b20:	38800005 	stb	r2,0(r7)
   84b24:	d8800517 	ldw	r2,20(sp)
   84b28:	3dc00044 	addi	r23,r7,1
   84b2c:	10800044 	addi	r2,r2,1
   84b30:	d8800515 	stw	r2,20(sp)
   84b34:	003f3d06 	br	8482c <__alt_data_end+0xfffb8d3c>
   84b38:	d9800517 	ldw	r6,20(sp)
   84b3c:	d9c00717 	ldw	r7,28(sp)
   84b40:	00800c44 	movi	r2,49
   84b44:	31800044 	addi	r6,r6,1
   84b48:	d9800515 	stw	r6,20(sp)
   84b4c:	38800005 	stb	r2,0(r7)
   84b50:	003edf06 	br	846d0 <__alt_data_end+0xfffb8be0>
   84b54:	d8000b15 	stw	zero,44(sp)
   84b58:	003c9f06 	br	83dd8 <__alt_data_end+0xfffb82e8>
   84b5c:	903e7e1e 	bne	r18,zero,84558 <__alt_data_end+0xfffb8a68>
   84b60:	00800434 	movhi	r2,16
   84b64:	10bfffc4 	addi	r2,r2,-1
   84b68:	9884703a 	and	r2,r19,r2
   84b6c:	1000ea1e 	bne	r2,zero,84f18 <_dtoa_r+0x1460>
   84b70:	9cdffc2c 	andhi	r19,r19,32752
   84b74:	9800e826 	beq	r19,zero,84f18 <_dtoa_r+0x1460>
   84b78:	d9c00817 	ldw	r7,32(sp)
   84b7c:	b5800044 	addi	r22,r22,1
   84b80:	04c00044 	movi	r19,1
   84b84:	39c00044 	addi	r7,r7,1
   84b88:	d9c00815 	stw	r7,32(sp)
   84b8c:	d8800d17 	ldw	r2,52(sp)
   84b90:	103e721e 	bne	r2,zero,8455c <__alt_data_end+0xfffb8a6c>
   84b94:	00800044 	movi	r2,1
   84b98:	003e7906 	br	84580 <__alt_data_end+0xfffb8a90>
   84b9c:	8009883a 	mov	r4,r16
   84ba0:	008d8fc0 	call	8d8fc <__floatsidf>
   84ba4:	d9800f17 	ldw	r6,60(sp)
   84ba8:	d9c01017 	ldw	r7,64(sp)
   84bac:	1009883a 	mov	r4,r2
   84bb0:	180b883a 	mov	r5,r3
   84bb4:	008c8680 	call	8c868 <__muldf3>
   84bb8:	000d883a 	mov	r6,zero
   84bbc:	01d00734 	movhi	r7,16412
   84bc0:	1009883a 	mov	r4,r2
   84bc4:	180b883a 	mov	r5,r3
   84bc8:	008b47c0 	call	8b47c <__adddf3>
   84bcc:	047f3034 	movhi	r17,64704
   84bd0:	1021883a 	mov	r16,r2
   84bd4:	1c63883a 	add	r17,r3,r17
   84bd8:	d9000f17 	ldw	r4,60(sp)
   84bdc:	d9401017 	ldw	r5,64(sp)
   84be0:	000d883a 	mov	r6,zero
   84be4:	01d00534 	movhi	r7,16404
   84be8:	008cf800 	call	8cf80 <__subdf3>
   84bec:	800d883a 	mov	r6,r16
   84bf0:	880f883a 	mov	r7,r17
   84bf4:	1009883a 	mov	r4,r2
   84bf8:	180b883a 	mov	r5,r3
   84bfc:	102b883a 	mov	r21,r2
   84c00:	1829883a 	mov	r20,r3
   84c04:	008c6980 	call	8c698 <__gedf2>
   84c08:	00806c16 	blt	zero,r2,84dbc <_dtoa_r+0x1304>
   84c0c:	89e0003c 	xorhi	r7,r17,32768
   84c10:	800d883a 	mov	r6,r16
   84c14:	a809883a 	mov	r4,r21
   84c18:	a00b883a 	mov	r5,r20
   84c1c:	008c7740 	call	8c774 <__ledf2>
   84c20:	103d7e0e 	bge	r2,zero,8421c <__alt_data_end+0xfffb872c>
   84c24:	002b883a 	mov	r21,zero
   84c28:	0023883a 	mov	r17,zero
   84c2c:	003efb06 	br	8481c <__alt_data_end+0xfffb8d2c>
   84c30:	d8800717 	ldw	r2,28(sp)
   84c34:	003bd006 	br	83b78 <__alt_data_end+0xfffb8088>
   84c38:	d9000a17 	ldw	r4,40(sp)
   84c3c:	d9800d17 	ldw	r6,52(sp)
   84c40:	dd400a15 	stw	r21,40(sp)
   84c44:	a905c83a 	sub	r2,r21,r4
   84c48:	308d883a 	add	r6,r6,r2
   84c4c:	d9800d15 	stw	r6,52(sp)
   84c50:	002b883a 	mov	r21,zero
   84c54:	003e0606 	br	84470 <__alt_data_end+0xfffb8980>
   84c58:	9023883a 	mov	r17,r18
   84c5c:	9829883a 	mov	r20,r19
   84c60:	04000084 	movi	r16,2
   84c64:	003c9206 	br	83eb0 <__alt_data_end+0xfffb83c0>
   84c68:	04000044 	movi	r16,1
   84c6c:	dc000c15 	stw	r16,48(sp)
   84c70:	dc000615 	stw	r16,24(sp)
   84c74:	dc002215 	stw	r16,136(sp)
   84c78:	e0001115 	stw	zero,68(fp)
   84c7c:	000b883a 	mov	r5,zero
   84c80:	003c6906 	br	83e28 <__alt_data_end+0xfffb8338>
   84c84:	3021883a 	mov	r16,r6
   84c88:	003ffb06 	br	84c78 <__alt_data_end+0xfffb9188>
   84c8c:	1000021e 	bne	r2,zero,84c98 <_dtoa_r+0x11e0>
   84c90:	4200004c 	andi	r8,r8,1
   84c94:	403e7d1e 	bne	r8,zero,8468c <__alt_data_end+0xfffb8b9c>
   84c98:	01000c04 	movi	r4,48
   84c9c:	00000106 	br	84ca4 <_dtoa_r+0x11ec>
   84ca0:	102f883a 	mov	r23,r2
   84ca4:	b8bfffc4 	addi	r2,r23,-1
   84ca8:	10c00007 	ldb	r3,0(r2)
   84cac:	193ffc26 	beq	r3,r4,84ca0 <__alt_data_end+0xfffb91b0>
   84cb0:	003e8706 	br	846d0 <__alt_data_end+0xfffb8be0>
   84cb4:	d8800517 	ldw	r2,20(sp)
   84cb8:	00a3c83a 	sub	r17,zero,r2
   84cbc:	8800a426 	beq	r17,zero,84f50 <_dtoa_r+0x1498>
   84cc0:	888003cc 	andi	r2,r17,15
   84cc4:	100490fa 	slli	r2,r2,3
   84cc8:	00c00274 	movhi	r3,9
   84ccc:	18c20d04 	addi	r3,r3,2100
   84cd0:	1885883a 	add	r2,r3,r2
   84cd4:	11800017 	ldw	r6,0(r2)
   84cd8:	11c00117 	ldw	r7,4(r2)
   84cdc:	9009883a 	mov	r4,r18
   84ce0:	980b883a 	mov	r5,r19
   84ce4:	8823d13a 	srai	r17,r17,4
   84ce8:	008c8680 	call	8c868 <__muldf3>
   84cec:	d8800f15 	stw	r2,60(sp)
   84cf0:	d8c01015 	stw	r3,64(sp)
   84cf4:	8800e826 	beq	r17,zero,85098 <_dtoa_r+0x15e0>
   84cf8:	05000274 	movhi	r20,9
   84cfc:	a5020304 	addi	r20,r20,2060
   84d00:	04000084 	movi	r16,2
   84d04:	8980004c 	andi	r6,r17,1
   84d08:	1009883a 	mov	r4,r2
   84d0c:	8823d07a 	srai	r17,r17,1
   84d10:	180b883a 	mov	r5,r3
   84d14:	30000426 	beq	r6,zero,84d28 <_dtoa_r+0x1270>
   84d18:	a1800017 	ldw	r6,0(r20)
   84d1c:	a1c00117 	ldw	r7,4(r20)
   84d20:	84000044 	addi	r16,r16,1
   84d24:	008c8680 	call	8c868 <__muldf3>
   84d28:	a5000204 	addi	r20,r20,8
   84d2c:	883ff51e 	bne	r17,zero,84d04 <__alt_data_end+0xfffb9214>
   84d30:	d8800f15 	stw	r2,60(sp)
   84d34:	d8c01015 	stw	r3,64(sp)
   84d38:	003c7606 	br	83f14 <__alt_data_end+0xfffb8424>
   84d3c:	00c00c04 	movi	r3,48
   84d40:	10c00005 	stb	r3,0(r2)
   84d44:	d8c00517 	ldw	r3,20(sp)
   84d48:	bd3fffc3 	ldbu	r20,-1(r23)
   84d4c:	18c00044 	addi	r3,r3,1
   84d50:	d8c00515 	stw	r3,20(sp)
   84d54:	003db906 	br	8443c <__alt_data_end+0xfffb894c>
   84d58:	89400117 	ldw	r5,4(r17)
   84d5c:	e009883a 	mov	r4,fp
   84d60:	00871b00 	call	871b0 <_Balloc>
   84d64:	89800417 	ldw	r6,16(r17)
   84d68:	89400304 	addi	r5,r17,12
   84d6c:	11000304 	addi	r4,r2,12
   84d70:	31800084 	addi	r6,r6,2
   84d74:	318d883a 	add	r6,r6,r6
   84d78:	318d883a 	add	r6,r6,r6
   84d7c:	1027883a 	mov	r19,r2
   84d80:	0086de40 	call	86de4 <memcpy>
   84d84:	01800044 	movi	r6,1
   84d88:	980b883a 	mov	r5,r19
   84d8c:	e009883a 	mov	r4,fp
   84d90:	00879300 	call	87930 <__lshift>
   84d94:	1029883a 	mov	r20,r2
   84d98:	003ecc06 	br	848cc <__alt_data_end+0xfffb8ddc>
   84d9c:	00800e44 	movi	r2,57
   84da0:	90809026 	beq	r18,r2,84fe4 <_dtoa_r+0x152c>
   84da4:	92000044 	addi	r8,r18,1
   84da8:	003f1f06 	br	84a28 <__alt_data_end+0xfffb8f38>
   84dac:	9011883a 	mov	r8,r18
   84db0:	8825883a 	mov	r18,r17
   84db4:	a023883a 	mov	r17,r20
   84db8:	003e2906 	br	84660 <__alt_data_end+0xfffb8b70>
   84dbc:	002b883a 	mov	r21,zero
   84dc0:	0023883a 	mov	r17,zero
   84dc4:	003f5406 	br	84b18 <__alt_data_end+0xfffb9028>
   84dc8:	61bfffc4 	addi	r6,r12,-1
   84dcc:	300490fa 	slli	r2,r6,3
   84dd0:	00c00274 	movhi	r3,9
   84dd4:	18c20d04 	addi	r3,r3,2100
   84dd8:	1885883a 	add	r2,r3,r2
   84ddc:	11000017 	ldw	r4,0(r2)
   84de0:	11400117 	ldw	r5,4(r2)
   84de4:	d8800717 	ldw	r2,28(sp)
   84de8:	880f883a 	mov	r7,r17
   84dec:	d9801215 	stw	r6,72(sp)
   84df0:	800d883a 	mov	r6,r16
   84df4:	db001615 	stw	r12,88(sp)
   84df8:	15c00044 	addi	r23,r2,1
   84dfc:	008c8680 	call	8c868 <__muldf3>
   84e00:	d9401017 	ldw	r5,64(sp)
   84e04:	d9000f17 	ldw	r4,60(sp)
   84e08:	d8c01515 	stw	r3,84(sp)
   84e0c:	d8801415 	stw	r2,80(sp)
   84e10:	008d87c0 	call	8d87c <__fixdfsi>
   84e14:	1009883a 	mov	r4,r2
   84e18:	1021883a 	mov	r16,r2
   84e1c:	008d8fc0 	call	8d8fc <__floatsidf>
   84e20:	d9000f17 	ldw	r4,60(sp)
   84e24:	d9401017 	ldw	r5,64(sp)
   84e28:	100d883a 	mov	r6,r2
   84e2c:	180f883a 	mov	r7,r3
   84e30:	008cf800 	call	8cf80 <__subdf3>
   84e34:	1829883a 	mov	r20,r3
   84e38:	d8c00717 	ldw	r3,28(sp)
   84e3c:	84000c04 	addi	r16,r16,48
   84e40:	1023883a 	mov	r17,r2
   84e44:	1c000005 	stb	r16,0(r3)
   84e48:	db001617 	ldw	r12,88(sp)
   84e4c:	00800044 	movi	r2,1
   84e50:	60802226 	beq	r12,r2,84edc <_dtoa_r+0x1424>
   84e54:	d9c00717 	ldw	r7,28(sp)
   84e58:	8805883a 	mov	r2,r17
   84e5c:	b82b883a 	mov	r21,r23
   84e60:	3b19883a 	add	r12,r7,r12
   84e64:	6023883a 	mov	r17,r12
   84e68:	a007883a 	mov	r3,r20
   84e6c:	dc800f15 	stw	r18,60(sp)
   84e70:	000d883a 	mov	r6,zero
   84e74:	01d00934 	movhi	r7,16420
   84e78:	1009883a 	mov	r4,r2
   84e7c:	180b883a 	mov	r5,r3
   84e80:	008c8680 	call	8c868 <__muldf3>
   84e84:	180b883a 	mov	r5,r3
   84e88:	1009883a 	mov	r4,r2
   84e8c:	1829883a 	mov	r20,r3
   84e90:	1025883a 	mov	r18,r2
   84e94:	008d87c0 	call	8d87c <__fixdfsi>
   84e98:	1009883a 	mov	r4,r2
   84e9c:	1021883a 	mov	r16,r2
   84ea0:	008d8fc0 	call	8d8fc <__floatsidf>
   84ea4:	100d883a 	mov	r6,r2
   84ea8:	180f883a 	mov	r7,r3
   84eac:	9009883a 	mov	r4,r18
   84eb0:	a00b883a 	mov	r5,r20
   84eb4:	84000c04 	addi	r16,r16,48
   84eb8:	008cf800 	call	8cf80 <__subdf3>
   84ebc:	ad400044 	addi	r21,r21,1
   84ec0:	ac3fffc5 	stb	r16,-1(r21)
   84ec4:	ac7fea1e 	bne	r21,r17,84e70 <__alt_data_end+0xfffb9380>
   84ec8:	1023883a 	mov	r17,r2
   84ecc:	d8801217 	ldw	r2,72(sp)
   84ed0:	dc800f17 	ldw	r18,60(sp)
   84ed4:	1829883a 	mov	r20,r3
   84ed8:	b8af883a 	add	r23,r23,r2
   84edc:	d9001417 	ldw	r4,80(sp)
   84ee0:	d9401517 	ldw	r5,84(sp)
   84ee4:	000d883a 	mov	r6,zero
   84ee8:	01cff834 	movhi	r7,16352
   84eec:	008b47c0 	call	8b47c <__adddf3>
   84ef0:	880d883a 	mov	r6,r17
   84ef4:	a00f883a 	mov	r7,r20
   84ef8:	1009883a 	mov	r4,r2
   84efc:	180b883a 	mov	r5,r3
   84f00:	008c7740 	call	8c774 <__ledf2>
   84f04:	10003e0e 	bge	r2,zero,85000 <_dtoa_r+0x1548>
   84f08:	d9001317 	ldw	r4,76(sp)
   84f0c:	bd3fffc3 	ldbu	r20,-1(r23)
   84f10:	d9000515 	stw	r4,20(sp)
   84f14:	003d3b06 	br	84404 <__alt_data_end+0xfffb8914>
   84f18:	0027883a 	mov	r19,zero
   84f1c:	003f1b06 	br	84b8c <__alt_data_end+0xfffb909c>
   84f20:	d8800817 	ldw	r2,32(sp)
   84f24:	11e9c83a 	sub	r20,r2,r7
   84f28:	0005883a 	mov	r2,zero
   84f2c:	003d5406 	br	84480 <__alt_data_end+0xfffb8990>
   84f30:	00800044 	movi	r2,1
   84f34:	003dc706 	br	84654 <__alt_data_end+0xfffb8b64>
   84f38:	d8c00217 	ldw	r3,8(sp)
   84f3c:	00800d84 	movi	r2,54
   84f40:	dd400a17 	ldw	r21,40(sp)
   84f44:	10c5c83a 	sub	r2,r2,r3
   84f48:	dd000817 	ldw	r20,32(sp)
   84f4c:	003d4c06 	br	84480 <__alt_data_end+0xfffb8990>
   84f50:	dc800f15 	stw	r18,60(sp)
   84f54:	dcc01015 	stw	r19,64(sp)
   84f58:	04000084 	movi	r16,2
   84f5c:	003bed06 	br	83f14 <__alt_data_end+0xfffb8424>
   84f60:	d9000617 	ldw	r4,24(sp)
   84f64:	203f0d26 	beq	r4,zero,84b9c <__alt_data_end+0xfffb90ac>
   84f68:	d9800c17 	ldw	r6,48(sp)
   84f6c:	01bcab0e 	bge	zero,r6,8421c <__alt_data_end+0xfffb872c>
   84f70:	d9401017 	ldw	r5,64(sp)
   84f74:	d9000f17 	ldw	r4,60(sp)
   84f78:	000d883a 	mov	r6,zero
   84f7c:	01d00934 	movhi	r7,16420
   84f80:	008c8680 	call	8c868 <__muldf3>
   84f84:	81000044 	addi	r4,r16,1
   84f88:	d8800f15 	stw	r2,60(sp)
   84f8c:	d8c01015 	stw	r3,64(sp)
   84f90:	008d8fc0 	call	8d8fc <__floatsidf>
   84f94:	d9800f17 	ldw	r6,60(sp)
   84f98:	d9c01017 	ldw	r7,64(sp)
   84f9c:	1009883a 	mov	r4,r2
   84fa0:	180b883a 	mov	r5,r3
   84fa4:	008c8680 	call	8c868 <__muldf3>
   84fa8:	01d00734 	movhi	r7,16412
   84fac:	000d883a 	mov	r6,zero
   84fb0:	1009883a 	mov	r4,r2
   84fb4:	180b883a 	mov	r5,r3
   84fb8:	008b47c0 	call	8b47c <__adddf3>
   84fbc:	d9c00517 	ldw	r7,20(sp)
   84fc0:	047f3034 	movhi	r17,64704
   84fc4:	1021883a 	mov	r16,r2
   84fc8:	39ffffc4 	addi	r7,r7,-1
   84fcc:	d9c01315 	stw	r7,76(sp)
   84fd0:	1c63883a 	add	r17,r3,r17
   84fd4:	db000c17 	ldw	r12,48(sp)
   84fd8:	003bea06 	br	83f84 <__alt_data_end+0xfffb8494>
   84fdc:	dc000915 	stw	r16,36(sp)
   84fe0:	003e0e06 	br	8481c <__alt_data_end+0xfffb8d2c>
   84fe4:	01000e44 	movi	r4,57
   84fe8:	8825883a 	mov	r18,r17
   84fec:	9dc00044 	addi	r23,r19,1
   84ff0:	99000005 	stb	r4,0(r19)
   84ff4:	a023883a 	mov	r17,r20
   84ff8:	dc000915 	stw	r16,36(sp)
   84ffc:	003da406 	br	84690 <__alt_data_end+0xfffb8ba0>
   85000:	d9801417 	ldw	r6,80(sp)
   85004:	d9c01517 	ldw	r7,84(sp)
   85008:	0009883a 	mov	r4,zero
   8500c:	014ff834 	movhi	r5,16352
   85010:	008cf800 	call	8cf80 <__subdf3>
   85014:	880d883a 	mov	r6,r17
   85018:	a00f883a 	mov	r7,r20
   8501c:	1009883a 	mov	r4,r2
   85020:	180b883a 	mov	r5,r3
   85024:	008c6980 	call	8c698 <__gedf2>
   85028:	00bc7c0e 	bge	zero,r2,8421c <__alt_data_end+0xfffb872c>
   8502c:	01000c04 	movi	r4,48
   85030:	00000106 	br	85038 <_dtoa_r+0x1580>
   85034:	102f883a 	mov	r23,r2
   85038:	b8bfffc4 	addi	r2,r23,-1
   8503c:	10c00007 	ldb	r3,0(r2)
   85040:	193ffc26 	beq	r3,r4,85034 <__alt_data_end+0xfffb9544>
   85044:	d9801317 	ldw	r6,76(sp)
   85048:	d9800515 	stw	r6,20(sp)
   8504c:	003c4406 	br	84160 <__alt_data_end+0xfffb8670>
   85050:	d9801317 	ldw	r6,76(sp)
   85054:	d9800515 	stw	r6,20(sp)
   85058:	003cea06 	br	84404 <__alt_data_end+0xfffb8914>
   8505c:	dd800f17 	ldw	r22,60(sp)
   85060:	dcc01017 	ldw	r19,64(sp)
   85064:	dc801217 	ldw	r18,72(sp)
   85068:	003c6c06 	br	8421c <__alt_data_end+0xfffb872c>
   8506c:	903e031e 	bne	r18,zero,8487c <__alt_data_end+0xfffb8d8c>
   85070:	003ebb06 	br	84b60 <__alt_data_end+0xfffb9070>
   85074:	103e6c1e 	bne	r2,zero,84a28 <__alt_data_end+0xfffb8f38>
   85078:	4080004c 	andi	r2,r8,1
   8507c:	103e6a26 	beq	r2,zero,84a28 <__alt_data_end+0xfffb8f38>
   85080:	003e6606 	br	84a1c <__alt_data_end+0xfffb8f2c>
   85084:	d8c00317 	ldw	r3,12(sp)
   85088:	00800084 	movi	r2,2
   8508c:	10c02916 	blt	r2,r3,85134 <_dtoa_r+0x167c>
   85090:	d9000c17 	ldw	r4,48(sp)
   85094:	003e8806 	br	84ab8 <__alt_data_end+0xfffb8fc8>
   85098:	04000084 	movi	r16,2
   8509c:	003b9d06 	br	83f14 <__alt_data_end+0xfffb8424>
   850a0:	d9001317 	ldw	r4,76(sp)
   850a4:	d9000515 	stw	r4,20(sp)
   850a8:	003cd606 	br	84404 <__alt_data_end+0xfffb8914>
   850ac:	d8801317 	ldw	r2,76(sp)
   850b0:	d8800515 	stw	r2,20(sp)
   850b4:	003c2a06 	br	84160 <__alt_data_end+0xfffb8670>
   850b8:	d9800317 	ldw	r6,12(sp)
   850bc:	00800084 	movi	r2,2
   850c0:	11801516 	blt	r2,r6,85118 <_dtoa_r+0x1660>
   850c4:	d9c00c17 	ldw	r7,48(sp)
   850c8:	d9c00615 	stw	r7,24(sp)
   850cc:	003df706 	br	848ac <__alt_data_end+0xfffb8dbc>
   850d0:	193d3926 	beq	r3,r4,845b8 <__alt_data_end+0xfffb8ac8>
   850d4:	00c00f04 	movi	r3,60
   850d8:	1885c83a 	sub	r2,r3,r2
   850dc:	003ddf06 	br	8485c <__alt_data_end+0xfffb8d6c>
   850e0:	e009883a 	mov	r4,fp
   850e4:	e0001115 	stw	zero,68(fp)
   850e8:	000b883a 	mov	r5,zero
   850ec:	00871b00 	call	871b0 <_Balloc>
   850f0:	d8800715 	stw	r2,28(sp)
   850f4:	d8c00717 	ldw	r3,28(sp)
   850f8:	00bfffc4 	movi	r2,-1
   850fc:	01000044 	movi	r4,1
   85100:	d8800c15 	stw	r2,48(sp)
   85104:	e0c01015 	stw	r3,64(fp)
   85108:	d9000b15 	stw	r4,44(sp)
   8510c:	d8800615 	stw	r2,24(sp)
   85110:	d8002215 	stw	zero,136(sp)
   85114:	003c4106 	br	8421c <__alt_data_end+0xfffb872c>
   85118:	d8c00c17 	ldw	r3,48(sp)
   8511c:	d8c00615 	stw	r3,24(sp)
   85120:	003e7006 	br	84ae4 <__alt_data_end+0xfffb8ff4>
   85124:	04400044 	movi	r17,1
   85128:	003b2006 	br	83dac <__alt_data_end+0xfffb82bc>
   8512c:	000b883a 	mov	r5,zero
   85130:	003b3d06 	br	83e28 <__alt_data_end+0xfffb8338>
   85134:	d8800c17 	ldw	r2,48(sp)
   85138:	d8800615 	stw	r2,24(sp)
   8513c:	003e6906 	br	84ae4 <__alt_data_end+0xfffb8ff4>

00085140 <__sflush_r>:
   85140:	2880030b 	ldhu	r2,12(r5)
   85144:	defffb04 	addi	sp,sp,-20
   85148:	dcc00315 	stw	r19,12(sp)
   8514c:	dc400115 	stw	r17,4(sp)
   85150:	dfc00415 	stw	ra,16(sp)
   85154:	dc800215 	stw	r18,8(sp)
   85158:	dc000015 	stw	r16,0(sp)
   8515c:	10c0020c 	andi	r3,r2,8
   85160:	2823883a 	mov	r17,r5
   85164:	2027883a 	mov	r19,r4
   85168:	1800311e 	bne	r3,zero,85230 <__sflush_r+0xf0>
   8516c:	28c00117 	ldw	r3,4(r5)
   85170:	10820014 	ori	r2,r2,2048
   85174:	2880030d 	sth	r2,12(r5)
   85178:	00c04b0e 	bge	zero,r3,852a8 <__sflush_r+0x168>
   8517c:	8a000a17 	ldw	r8,40(r17)
   85180:	40002326 	beq	r8,zero,85210 <__sflush_r+0xd0>
   85184:	9c000017 	ldw	r16,0(r19)
   85188:	10c4000c 	andi	r3,r2,4096
   8518c:	98000015 	stw	zero,0(r19)
   85190:	18004826 	beq	r3,zero,852b4 <__sflush_r+0x174>
   85194:	89801417 	ldw	r6,80(r17)
   85198:	10c0010c 	andi	r3,r2,4
   8519c:	18000626 	beq	r3,zero,851b8 <__sflush_r+0x78>
   851a0:	88c00117 	ldw	r3,4(r17)
   851a4:	88800c17 	ldw	r2,48(r17)
   851a8:	30cdc83a 	sub	r6,r6,r3
   851ac:	10000226 	beq	r2,zero,851b8 <__sflush_r+0x78>
   851b0:	88800f17 	ldw	r2,60(r17)
   851b4:	308dc83a 	sub	r6,r6,r2
   851b8:	89400717 	ldw	r5,28(r17)
   851bc:	000f883a 	mov	r7,zero
   851c0:	9809883a 	mov	r4,r19
   851c4:	403ee83a 	callr	r8
   851c8:	00ffffc4 	movi	r3,-1
   851cc:	10c04426 	beq	r2,r3,852e0 <__sflush_r+0x1a0>
   851d0:	88c0030b 	ldhu	r3,12(r17)
   851d4:	89000417 	ldw	r4,16(r17)
   851d8:	88000115 	stw	zero,4(r17)
   851dc:	197dffcc 	andi	r5,r3,63487
   851e0:	8940030d 	sth	r5,12(r17)
   851e4:	89000015 	stw	r4,0(r17)
   851e8:	18c4000c 	andi	r3,r3,4096
   851ec:	18002c1e 	bne	r3,zero,852a0 <__sflush_r+0x160>
   851f0:	89400c17 	ldw	r5,48(r17)
   851f4:	9c000015 	stw	r16,0(r19)
   851f8:	28000526 	beq	r5,zero,85210 <__sflush_r+0xd0>
   851fc:	88801004 	addi	r2,r17,64
   85200:	28800226 	beq	r5,r2,8520c <__sflush_r+0xcc>
   85204:	9809883a 	mov	r4,r19
   85208:	00858ac0 	call	858ac <_free_r>
   8520c:	88000c15 	stw	zero,48(r17)
   85210:	0005883a 	mov	r2,zero
   85214:	dfc00417 	ldw	ra,16(sp)
   85218:	dcc00317 	ldw	r19,12(sp)
   8521c:	dc800217 	ldw	r18,8(sp)
   85220:	dc400117 	ldw	r17,4(sp)
   85224:	dc000017 	ldw	r16,0(sp)
   85228:	dec00504 	addi	sp,sp,20
   8522c:	f800283a 	ret
   85230:	2c800417 	ldw	r18,16(r5)
   85234:	903ff626 	beq	r18,zero,85210 <__alt_data_end+0xfffb9720>
   85238:	2c000017 	ldw	r16,0(r5)
   8523c:	108000cc 	andi	r2,r2,3
   85240:	2c800015 	stw	r18,0(r5)
   85244:	84a1c83a 	sub	r16,r16,r18
   85248:	1000131e 	bne	r2,zero,85298 <__sflush_r+0x158>
   8524c:	28800517 	ldw	r2,20(r5)
   85250:	88800215 	stw	r2,8(r17)
   85254:	04000316 	blt	zero,r16,85264 <__sflush_r+0x124>
   85258:	003fed06 	br	85210 <__alt_data_end+0xfffb9720>
   8525c:	90a5883a 	add	r18,r18,r2
   85260:	043feb0e 	bge	zero,r16,85210 <__alt_data_end+0xfffb9720>
   85264:	88800917 	ldw	r2,36(r17)
   85268:	89400717 	ldw	r5,28(r17)
   8526c:	800f883a 	mov	r7,r16
   85270:	900d883a 	mov	r6,r18
   85274:	9809883a 	mov	r4,r19
   85278:	103ee83a 	callr	r2
   8527c:	80a1c83a 	sub	r16,r16,r2
   85280:	00bff616 	blt	zero,r2,8525c <__alt_data_end+0xfffb976c>
   85284:	88c0030b 	ldhu	r3,12(r17)
   85288:	00bfffc4 	movi	r2,-1
   8528c:	18c01014 	ori	r3,r3,64
   85290:	88c0030d 	sth	r3,12(r17)
   85294:	003fdf06 	br	85214 <__alt_data_end+0xfffb9724>
   85298:	0005883a 	mov	r2,zero
   8529c:	003fec06 	br	85250 <__alt_data_end+0xfffb9760>
   852a0:	88801415 	stw	r2,80(r17)
   852a4:	003fd206 	br	851f0 <__alt_data_end+0xfffb9700>
   852a8:	28c00f17 	ldw	r3,60(r5)
   852ac:	00ffb316 	blt	zero,r3,8517c <__alt_data_end+0xfffb968c>
   852b0:	003fd706 	br	85210 <__alt_data_end+0xfffb9720>
   852b4:	89400717 	ldw	r5,28(r17)
   852b8:	000d883a 	mov	r6,zero
   852bc:	01c00044 	movi	r7,1
   852c0:	9809883a 	mov	r4,r19
   852c4:	403ee83a 	callr	r8
   852c8:	100d883a 	mov	r6,r2
   852cc:	00bfffc4 	movi	r2,-1
   852d0:	30801426 	beq	r6,r2,85324 <__sflush_r+0x1e4>
   852d4:	8880030b 	ldhu	r2,12(r17)
   852d8:	8a000a17 	ldw	r8,40(r17)
   852dc:	003fae06 	br	85198 <__alt_data_end+0xfffb96a8>
   852e0:	98c00017 	ldw	r3,0(r19)
   852e4:	183fba26 	beq	r3,zero,851d0 <__alt_data_end+0xfffb96e0>
   852e8:	01000744 	movi	r4,29
   852ec:	19000626 	beq	r3,r4,85308 <__sflush_r+0x1c8>
   852f0:	01000584 	movi	r4,22
   852f4:	19000426 	beq	r3,r4,85308 <__sflush_r+0x1c8>
   852f8:	88c0030b 	ldhu	r3,12(r17)
   852fc:	18c01014 	ori	r3,r3,64
   85300:	88c0030d 	sth	r3,12(r17)
   85304:	003fc306 	br	85214 <__alt_data_end+0xfffb9724>
   85308:	8880030b 	ldhu	r2,12(r17)
   8530c:	88c00417 	ldw	r3,16(r17)
   85310:	88000115 	stw	zero,4(r17)
   85314:	10bdffcc 	andi	r2,r2,63487
   85318:	8880030d 	sth	r2,12(r17)
   8531c:	88c00015 	stw	r3,0(r17)
   85320:	003fb306 	br	851f0 <__alt_data_end+0xfffb9700>
   85324:	98800017 	ldw	r2,0(r19)
   85328:	103fea26 	beq	r2,zero,852d4 <__alt_data_end+0xfffb97e4>
   8532c:	00c00744 	movi	r3,29
   85330:	10c00226 	beq	r2,r3,8533c <__sflush_r+0x1fc>
   85334:	00c00584 	movi	r3,22
   85338:	10c0031e 	bne	r2,r3,85348 <__sflush_r+0x208>
   8533c:	9c000015 	stw	r16,0(r19)
   85340:	0005883a 	mov	r2,zero
   85344:	003fb306 	br	85214 <__alt_data_end+0xfffb9724>
   85348:	88c0030b 	ldhu	r3,12(r17)
   8534c:	3005883a 	mov	r2,r6
   85350:	18c01014 	ori	r3,r3,64
   85354:	88c0030d 	sth	r3,12(r17)
   85358:	003fae06 	br	85214 <__alt_data_end+0xfffb9724>

0008535c <_fflush_r>:
   8535c:	defffd04 	addi	sp,sp,-12
   85360:	dc000115 	stw	r16,4(sp)
   85364:	dfc00215 	stw	ra,8(sp)
   85368:	2021883a 	mov	r16,r4
   8536c:	20000226 	beq	r4,zero,85378 <_fflush_r+0x1c>
   85370:	20800e17 	ldw	r2,56(r4)
   85374:	10000c26 	beq	r2,zero,853a8 <_fflush_r+0x4c>
   85378:	2880030f 	ldh	r2,12(r5)
   8537c:	1000051e 	bne	r2,zero,85394 <_fflush_r+0x38>
   85380:	0005883a 	mov	r2,zero
   85384:	dfc00217 	ldw	ra,8(sp)
   85388:	dc000117 	ldw	r16,4(sp)
   8538c:	dec00304 	addi	sp,sp,12
   85390:	f800283a 	ret
   85394:	8009883a 	mov	r4,r16
   85398:	dfc00217 	ldw	ra,8(sp)
   8539c:	dc000117 	ldw	r16,4(sp)
   853a0:	dec00304 	addi	sp,sp,12
   853a4:	00851401 	jmpi	85140 <__sflush_r>
   853a8:	d9400015 	stw	r5,0(sp)
   853ac:	00857380 	call	85738 <__sinit>
   853b0:	d9400017 	ldw	r5,0(sp)
   853b4:	003ff006 	br	85378 <__alt_data_end+0xfffb9888>

000853b8 <fflush>:
   853b8:	20000526 	beq	r4,zero,853d0 <fflush+0x18>
   853bc:	00800274 	movhi	r2,9
   853c0:	10896b04 	addi	r2,r2,9644
   853c4:	200b883a 	mov	r5,r4
   853c8:	11000017 	ldw	r4,0(r2)
   853cc:	008535c1 	jmpi	8535c <_fflush_r>
   853d0:	00800274 	movhi	r2,9
   853d4:	10896a04 	addi	r2,r2,9640
   853d8:	11000017 	ldw	r4,0(r2)
   853dc:	01400234 	movhi	r5,8
   853e0:	2954d704 	addi	r5,r5,21340
   853e4:	008613c1 	jmpi	8613c <_fwalk_reent>

000853e8 <__fp_unlock>:
   853e8:	0005883a 	mov	r2,zero
   853ec:	f800283a 	ret

000853f0 <_cleanup_r>:
   853f0:	01400274 	movhi	r5,9
   853f4:	29686c04 	addi	r5,r5,-24144
   853f8:	008613c1 	jmpi	8613c <_fwalk_reent>

000853fc <__sinit.part.1>:
   853fc:	defff704 	addi	sp,sp,-36
   85400:	00c00234 	movhi	r3,8
   85404:	dfc00815 	stw	ra,32(sp)
   85408:	ddc00715 	stw	r23,28(sp)
   8540c:	dd800615 	stw	r22,24(sp)
   85410:	dd400515 	stw	r21,20(sp)
   85414:	dd000415 	stw	r20,16(sp)
   85418:	dcc00315 	stw	r19,12(sp)
   8541c:	dc800215 	stw	r18,8(sp)
   85420:	dc400115 	stw	r17,4(sp)
   85424:	dc000015 	stw	r16,0(sp)
   85428:	18d4fc04 	addi	r3,r3,21488
   8542c:	24000117 	ldw	r16,4(r4)
   85430:	20c00f15 	stw	r3,60(r4)
   85434:	2080bb04 	addi	r2,r4,748
   85438:	00c000c4 	movi	r3,3
   8543c:	20c0b915 	stw	r3,740(r4)
   85440:	2080ba15 	stw	r2,744(r4)
   85444:	2000b815 	stw	zero,736(r4)
   85448:	05c00204 	movi	r23,8
   8544c:	00800104 	movi	r2,4
   85450:	2025883a 	mov	r18,r4
   85454:	b80d883a 	mov	r6,r23
   85458:	81001704 	addi	r4,r16,92
   8545c:	000b883a 	mov	r5,zero
   85460:	80000015 	stw	zero,0(r16)
   85464:	80000115 	stw	zero,4(r16)
   85468:	80000215 	stw	zero,8(r16)
   8546c:	8080030d 	sth	r2,12(r16)
   85470:	80001915 	stw	zero,100(r16)
   85474:	8000038d 	sth	zero,14(r16)
   85478:	80000415 	stw	zero,16(r16)
   8547c:	80000515 	stw	zero,20(r16)
   85480:	80000615 	stw	zero,24(r16)
   85484:	00870880 	call	87088 <memset>
   85488:	05800274 	movhi	r22,9
   8548c:	94400217 	ldw	r17,8(r18)
   85490:	05400274 	movhi	r21,9
   85494:	05000274 	movhi	r20,9
   85498:	04c00274 	movhi	r19,9
   8549c:	b5a1f604 	addi	r22,r22,-30760
   854a0:	ad620d04 	addi	r21,r21,-30668
   854a4:	a5222c04 	addi	r20,r20,-30544
   854a8:	9ce24304 	addi	r19,r19,-30452
   854ac:	85800815 	stw	r22,32(r16)
   854b0:	85400915 	stw	r21,36(r16)
   854b4:	85000a15 	stw	r20,40(r16)
   854b8:	84c00b15 	stw	r19,44(r16)
   854bc:	84000715 	stw	r16,28(r16)
   854c0:	00800284 	movi	r2,10
   854c4:	8880030d 	sth	r2,12(r17)
   854c8:	00800044 	movi	r2,1
   854cc:	b80d883a 	mov	r6,r23
   854d0:	89001704 	addi	r4,r17,92
   854d4:	000b883a 	mov	r5,zero
   854d8:	88000015 	stw	zero,0(r17)
   854dc:	88000115 	stw	zero,4(r17)
   854e0:	88000215 	stw	zero,8(r17)
   854e4:	88001915 	stw	zero,100(r17)
   854e8:	8880038d 	sth	r2,14(r17)
   854ec:	88000415 	stw	zero,16(r17)
   854f0:	88000515 	stw	zero,20(r17)
   854f4:	88000615 	stw	zero,24(r17)
   854f8:	00870880 	call	87088 <memset>
   854fc:	94000317 	ldw	r16,12(r18)
   85500:	00800484 	movi	r2,18
   85504:	8c400715 	stw	r17,28(r17)
   85508:	8d800815 	stw	r22,32(r17)
   8550c:	8d400915 	stw	r21,36(r17)
   85510:	8d000a15 	stw	r20,40(r17)
   85514:	8cc00b15 	stw	r19,44(r17)
   85518:	8080030d 	sth	r2,12(r16)
   8551c:	00800084 	movi	r2,2
   85520:	80000015 	stw	zero,0(r16)
   85524:	80000115 	stw	zero,4(r16)
   85528:	80000215 	stw	zero,8(r16)
   8552c:	80001915 	stw	zero,100(r16)
   85530:	8080038d 	sth	r2,14(r16)
   85534:	80000415 	stw	zero,16(r16)
   85538:	80000515 	stw	zero,20(r16)
   8553c:	80000615 	stw	zero,24(r16)
   85540:	b80d883a 	mov	r6,r23
   85544:	000b883a 	mov	r5,zero
   85548:	81001704 	addi	r4,r16,92
   8554c:	00870880 	call	87088 <memset>
   85550:	00800044 	movi	r2,1
   85554:	84000715 	stw	r16,28(r16)
   85558:	85800815 	stw	r22,32(r16)
   8555c:	85400915 	stw	r21,36(r16)
   85560:	85000a15 	stw	r20,40(r16)
   85564:	84c00b15 	stw	r19,44(r16)
   85568:	90800e15 	stw	r2,56(r18)
   8556c:	dfc00817 	ldw	ra,32(sp)
   85570:	ddc00717 	ldw	r23,28(sp)
   85574:	dd800617 	ldw	r22,24(sp)
   85578:	dd400517 	ldw	r21,20(sp)
   8557c:	dd000417 	ldw	r20,16(sp)
   85580:	dcc00317 	ldw	r19,12(sp)
   85584:	dc800217 	ldw	r18,8(sp)
   85588:	dc400117 	ldw	r17,4(sp)
   8558c:	dc000017 	ldw	r16,0(sp)
   85590:	dec00904 	addi	sp,sp,36
   85594:	f800283a 	ret

00085598 <__fp_lock>:
   85598:	0005883a 	mov	r2,zero
   8559c:	f800283a 	ret

000855a0 <__sfmoreglue>:
   855a0:	defffc04 	addi	sp,sp,-16
   855a4:	dc400115 	stw	r17,4(sp)
   855a8:	2c7fffc4 	addi	r17,r5,-1
   855ac:	8c401a24 	muli	r17,r17,104
   855b0:	dc800215 	stw	r18,8(sp)
   855b4:	2825883a 	mov	r18,r5
   855b8:	89401d04 	addi	r5,r17,116
   855bc:	dc000015 	stw	r16,0(sp)
   855c0:	dfc00315 	stw	ra,12(sp)
   855c4:	00864f40 	call	864f4 <_malloc_r>
   855c8:	1021883a 	mov	r16,r2
   855cc:	10000726 	beq	r2,zero,855ec <__sfmoreglue+0x4c>
   855d0:	11000304 	addi	r4,r2,12
   855d4:	10000015 	stw	zero,0(r2)
   855d8:	14800115 	stw	r18,4(r2)
   855dc:	11000215 	stw	r4,8(r2)
   855e0:	89801a04 	addi	r6,r17,104
   855e4:	000b883a 	mov	r5,zero
   855e8:	00870880 	call	87088 <memset>
   855ec:	8005883a 	mov	r2,r16
   855f0:	dfc00317 	ldw	ra,12(sp)
   855f4:	dc800217 	ldw	r18,8(sp)
   855f8:	dc400117 	ldw	r17,4(sp)
   855fc:	dc000017 	ldw	r16,0(sp)
   85600:	dec00404 	addi	sp,sp,16
   85604:	f800283a 	ret

00085608 <__sfp>:
   85608:	defffb04 	addi	sp,sp,-20
   8560c:	dc000015 	stw	r16,0(sp)
   85610:	04000274 	movhi	r16,9
   85614:	84096a04 	addi	r16,r16,9640
   85618:	dcc00315 	stw	r19,12(sp)
   8561c:	2027883a 	mov	r19,r4
   85620:	81000017 	ldw	r4,0(r16)
   85624:	dfc00415 	stw	ra,16(sp)
   85628:	dc800215 	stw	r18,8(sp)
   8562c:	20800e17 	ldw	r2,56(r4)
   85630:	dc400115 	stw	r17,4(sp)
   85634:	1000021e 	bne	r2,zero,85640 <__sfp+0x38>
   85638:	00853fc0 	call	853fc <__sinit.part.1>
   8563c:	81000017 	ldw	r4,0(r16)
   85640:	2480b804 	addi	r18,r4,736
   85644:	047fffc4 	movi	r17,-1
   85648:	91000117 	ldw	r4,4(r18)
   8564c:	94000217 	ldw	r16,8(r18)
   85650:	213fffc4 	addi	r4,r4,-1
   85654:	20000a16 	blt	r4,zero,85680 <__sfp+0x78>
   85658:	8080030f 	ldh	r2,12(r16)
   8565c:	10000c26 	beq	r2,zero,85690 <__sfp+0x88>
   85660:	80c01d04 	addi	r3,r16,116
   85664:	00000206 	br	85670 <__sfp+0x68>
   85668:	18bfe60f 	ldh	r2,-104(r3)
   8566c:	10000826 	beq	r2,zero,85690 <__sfp+0x88>
   85670:	213fffc4 	addi	r4,r4,-1
   85674:	1c3ffd04 	addi	r16,r3,-12
   85678:	18c01a04 	addi	r3,r3,104
   8567c:	247ffa1e 	bne	r4,r17,85668 <__alt_data_end+0xfffb9b78>
   85680:	90800017 	ldw	r2,0(r18)
   85684:	10001d26 	beq	r2,zero,856fc <__sfp+0xf4>
   85688:	1025883a 	mov	r18,r2
   8568c:	003fee06 	br	85648 <__alt_data_end+0xfffb9b58>
   85690:	00bfffc4 	movi	r2,-1
   85694:	8080038d 	sth	r2,14(r16)
   85698:	00800044 	movi	r2,1
   8569c:	8080030d 	sth	r2,12(r16)
   856a0:	80001915 	stw	zero,100(r16)
   856a4:	80000015 	stw	zero,0(r16)
   856a8:	80000215 	stw	zero,8(r16)
   856ac:	80000115 	stw	zero,4(r16)
   856b0:	80000415 	stw	zero,16(r16)
   856b4:	80000515 	stw	zero,20(r16)
   856b8:	80000615 	stw	zero,24(r16)
   856bc:	01800204 	movi	r6,8
   856c0:	000b883a 	mov	r5,zero
   856c4:	81001704 	addi	r4,r16,92
   856c8:	00870880 	call	87088 <memset>
   856cc:	8005883a 	mov	r2,r16
   856d0:	80000c15 	stw	zero,48(r16)
   856d4:	80000d15 	stw	zero,52(r16)
   856d8:	80001115 	stw	zero,68(r16)
   856dc:	80001215 	stw	zero,72(r16)
   856e0:	dfc00417 	ldw	ra,16(sp)
   856e4:	dcc00317 	ldw	r19,12(sp)
   856e8:	dc800217 	ldw	r18,8(sp)
   856ec:	dc400117 	ldw	r17,4(sp)
   856f0:	dc000017 	ldw	r16,0(sp)
   856f4:	dec00504 	addi	sp,sp,20
   856f8:	f800283a 	ret
   856fc:	01400104 	movi	r5,4
   85700:	9809883a 	mov	r4,r19
   85704:	00855a00 	call	855a0 <__sfmoreglue>
   85708:	90800015 	stw	r2,0(r18)
   8570c:	103fde1e 	bne	r2,zero,85688 <__alt_data_end+0xfffb9b98>
   85710:	00800304 	movi	r2,12
   85714:	98800015 	stw	r2,0(r19)
   85718:	0005883a 	mov	r2,zero
   8571c:	003ff006 	br	856e0 <__alt_data_end+0xfffb9bf0>

00085720 <_cleanup>:
   85720:	00800274 	movhi	r2,9
   85724:	10896a04 	addi	r2,r2,9640
   85728:	11000017 	ldw	r4,0(r2)
   8572c:	01400274 	movhi	r5,9
   85730:	29686c04 	addi	r5,r5,-24144
   85734:	008613c1 	jmpi	8613c <_fwalk_reent>

00085738 <__sinit>:
   85738:	20800e17 	ldw	r2,56(r4)
   8573c:	10000126 	beq	r2,zero,85744 <__sinit+0xc>
   85740:	f800283a 	ret
   85744:	00853fc1 	jmpi	853fc <__sinit.part.1>

00085748 <__sfp_lock_acquire>:
   85748:	f800283a 	ret

0008574c <__sfp_lock_release>:
   8574c:	f800283a 	ret

00085750 <__sinit_lock_acquire>:
   85750:	f800283a 	ret

00085754 <__sinit_lock_release>:
   85754:	f800283a 	ret

00085758 <__fp_lock_all>:
   85758:	00800274 	movhi	r2,9
   8575c:	10896b04 	addi	r2,r2,9644
   85760:	11000017 	ldw	r4,0(r2)
   85764:	01400234 	movhi	r5,8
   85768:	29556604 	addi	r5,r5,21912
   8576c:	00860781 	jmpi	86078 <_fwalk>

00085770 <__fp_unlock_all>:
   85770:	00800274 	movhi	r2,9
   85774:	10896b04 	addi	r2,r2,9644
   85778:	11000017 	ldw	r4,0(r2)
   8577c:	01400234 	movhi	r5,8
   85780:	2954fa04 	addi	r5,r5,21480
   85784:	00860781 	jmpi	86078 <_fwalk>

00085788 <_malloc_trim_r>:
   85788:	defffb04 	addi	sp,sp,-20
   8578c:	dcc00315 	stw	r19,12(sp)
   85790:	04c00274 	movhi	r19,9
   85794:	dc800215 	stw	r18,8(sp)
   85798:	dc400115 	stw	r17,4(sp)
   8579c:	dc000015 	stw	r16,0(sp)
   857a0:	dfc00415 	stw	ra,16(sp)
   857a4:	2821883a 	mov	r16,r5
   857a8:	9cc3e604 	addi	r19,r19,3992
   857ac:	2025883a 	mov	r18,r4
   857b0:	008e6740 	call	8e674 <__malloc_lock>
   857b4:	98800217 	ldw	r2,8(r19)
   857b8:	14400117 	ldw	r17,4(r2)
   857bc:	00bfff04 	movi	r2,-4
   857c0:	88a2703a 	and	r17,r17,r2
   857c4:	8c21c83a 	sub	r16,r17,r16
   857c8:	8403fbc4 	addi	r16,r16,4079
   857cc:	8020d33a 	srli	r16,r16,12
   857d0:	0083ffc4 	movi	r2,4095
   857d4:	843fffc4 	addi	r16,r16,-1
   857d8:	8020933a 	slli	r16,r16,12
   857dc:	1400060e 	bge	r2,r16,857f8 <_malloc_trim_r+0x70>
   857e0:	000b883a 	mov	r5,zero
   857e4:	9009883a 	mov	r4,r18
   857e8:	00887840 	call	88784 <_sbrk_r>
   857ec:	98c00217 	ldw	r3,8(r19)
   857f0:	1c47883a 	add	r3,r3,r17
   857f4:	10c00a26 	beq	r2,r3,85820 <_malloc_trim_r+0x98>
   857f8:	9009883a 	mov	r4,r18
   857fc:	008e6980 	call	8e698 <__malloc_unlock>
   85800:	0005883a 	mov	r2,zero
   85804:	dfc00417 	ldw	ra,16(sp)
   85808:	dcc00317 	ldw	r19,12(sp)
   8580c:	dc800217 	ldw	r18,8(sp)
   85810:	dc400117 	ldw	r17,4(sp)
   85814:	dc000017 	ldw	r16,0(sp)
   85818:	dec00504 	addi	sp,sp,20
   8581c:	f800283a 	ret
   85820:	040bc83a 	sub	r5,zero,r16
   85824:	9009883a 	mov	r4,r18
   85828:	00887840 	call	88784 <_sbrk_r>
   8582c:	00ffffc4 	movi	r3,-1
   85830:	10c00d26 	beq	r2,r3,85868 <_malloc_trim_r+0xe0>
   85834:	00c00274 	movhi	r3,9
   85838:	18d07404 	addi	r3,r3,16848
   8583c:	18800017 	ldw	r2,0(r3)
   85840:	99000217 	ldw	r4,8(r19)
   85844:	8c23c83a 	sub	r17,r17,r16
   85848:	8c400054 	ori	r17,r17,1
   8584c:	1421c83a 	sub	r16,r2,r16
   85850:	24400115 	stw	r17,4(r4)
   85854:	9009883a 	mov	r4,r18
   85858:	1c000015 	stw	r16,0(r3)
   8585c:	008e6980 	call	8e698 <__malloc_unlock>
   85860:	00800044 	movi	r2,1
   85864:	003fe706 	br	85804 <__alt_data_end+0xfffb9d14>
   85868:	000b883a 	mov	r5,zero
   8586c:	9009883a 	mov	r4,r18
   85870:	00887840 	call	88784 <_sbrk_r>
   85874:	99000217 	ldw	r4,8(r19)
   85878:	014003c4 	movi	r5,15
   8587c:	1107c83a 	sub	r3,r2,r4
   85880:	28ffdd0e 	bge	r5,r3,857f8 <__alt_data_end+0xfffb9d08>
   85884:	01400274 	movhi	r5,9
   85888:	29496d04 	addi	r5,r5,9652
   8588c:	29400017 	ldw	r5,0(r5)
   85890:	18c00054 	ori	r3,r3,1
   85894:	20c00115 	stw	r3,4(r4)
   85898:	00c00274 	movhi	r3,9
   8589c:	1145c83a 	sub	r2,r2,r5
   858a0:	18d07404 	addi	r3,r3,16848
   858a4:	18800015 	stw	r2,0(r3)
   858a8:	003fd306 	br	857f8 <__alt_data_end+0xfffb9d08>

000858ac <_free_r>:
   858ac:	28004126 	beq	r5,zero,859b4 <_free_r+0x108>
   858b0:	defffd04 	addi	sp,sp,-12
   858b4:	dc400115 	stw	r17,4(sp)
   858b8:	dc000015 	stw	r16,0(sp)
   858bc:	2023883a 	mov	r17,r4
   858c0:	2821883a 	mov	r16,r5
   858c4:	dfc00215 	stw	ra,8(sp)
   858c8:	008e6740 	call	8e674 <__malloc_lock>
   858cc:	81ffff17 	ldw	r7,-4(r16)
   858d0:	00bfff84 	movi	r2,-2
   858d4:	01000274 	movhi	r4,9
   858d8:	81bffe04 	addi	r6,r16,-8
   858dc:	3884703a 	and	r2,r7,r2
   858e0:	2103e604 	addi	r4,r4,3992
   858e4:	308b883a 	add	r5,r6,r2
   858e8:	2a400117 	ldw	r9,4(r5)
   858ec:	22000217 	ldw	r8,8(r4)
   858f0:	00ffff04 	movi	r3,-4
   858f4:	48c6703a 	and	r3,r9,r3
   858f8:	2a005726 	beq	r5,r8,85a58 <_free_r+0x1ac>
   858fc:	28c00115 	stw	r3,4(r5)
   85900:	39c0004c 	andi	r7,r7,1
   85904:	3800091e 	bne	r7,zero,8592c <_free_r+0x80>
   85908:	823ffe17 	ldw	r8,-8(r16)
   8590c:	22400204 	addi	r9,r4,8
   85910:	320dc83a 	sub	r6,r6,r8
   85914:	31c00217 	ldw	r7,8(r6)
   85918:	1205883a 	add	r2,r2,r8
   8591c:	3a406526 	beq	r7,r9,85ab4 <_free_r+0x208>
   85920:	32000317 	ldw	r8,12(r6)
   85924:	3a000315 	stw	r8,12(r7)
   85928:	41c00215 	stw	r7,8(r8)
   8592c:	28cf883a 	add	r7,r5,r3
   85930:	39c00117 	ldw	r7,4(r7)
   85934:	39c0004c 	andi	r7,r7,1
   85938:	38003a26 	beq	r7,zero,85a24 <_free_r+0x178>
   8593c:	10c00054 	ori	r3,r2,1
   85940:	30c00115 	stw	r3,4(r6)
   85944:	3087883a 	add	r3,r6,r2
   85948:	18800015 	stw	r2,0(r3)
   8594c:	00c07fc4 	movi	r3,511
   85950:	18801936 	bltu	r3,r2,859b8 <_free_r+0x10c>
   85954:	1004d0fa 	srli	r2,r2,3
   85958:	01c00044 	movi	r7,1
   8595c:	21400117 	ldw	r5,4(r4)
   85960:	10c00044 	addi	r3,r2,1
   85964:	18c7883a 	add	r3,r3,r3
   85968:	1005d0ba 	srai	r2,r2,2
   8596c:	18c7883a 	add	r3,r3,r3
   85970:	18c7883a 	add	r3,r3,r3
   85974:	1907883a 	add	r3,r3,r4
   85978:	3884983a 	sll	r2,r7,r2
   8597c:	19c00017 	ldw	r7,0(r3)
   85980:	1a3ffe04 	addi	r8,r3,-8
   85984:	1144b03a 	or	r2,r2,r5
   85988:	32000315 	stw	r8,12(r6)
   8598c:	31c00215 	stw	r7,8(r6)
   85990:	20800115 	stw	r2,4(r4)
   85994:	19800015 	stw	r6,0(r3)
   85998:	39800315 	stw	r6,12(r7)
   8599c:	8809883a 	mov	r4,r17
   859a0:	dfc00217 	ldw	ra,8(sp)
   859a4:	dc400117 	ldw	r17,4(sp)
   859a8:	dc000017 	ldw	r16,0(sp)
   859ac:	dec00304 	addi	sp,sp,12
   859b0:	008e6981 	jmpi	8e698 <__malloc_unlock>
   859b4:	f800283a 	ret
   859b8:	100ad27a 	srli	r5,r2,9
   859bc:	00c00104 	movi	r3,4
   859c0:	19404a36 	bltu	r3,r5,85aec <_free_r+0x240>
   859c4:	100ad1ba 	srli	r5,r2,6
   859c8:	28c00e44 	addi	r3,r5,57
   859cc:	18c7883a 	add	r3,r3,r3
   859d0:	29400e04 	addi	r5,r5,56
   859d4:	18c7883a 	add	r3,r3,r3
   859d8:	18c7883a 	add	r3,r3,r3
   859dc:	1909883a 	add	r4,r3,r4
   859e0:	20c00017 	ldw	r3,0(r4)
   859e4:	01c00274 	movhi	r7,9
   859e8:	213ffe04 	addi	r4,r4,-8
   859ec:	39c3e604 	addi	r7,r7,3992
   859f0:	20c04426 	beq	r4,r3,85b04 <_free_r+0x258>
   859f4:	01ffff04 	movi	r7,-4
   859f8:	19400117 	ldw	r5,4(r3)
   859fc:	29ca703a 	and	r5,r5,r7
   85a00:	1140022e 	bgeu	r2,r5,85a0c <_free_r+0x160>
   85a04:	18c00217 	ldw	r3,8(r3)
   85a08:	20fffb1e 	bne	r4,r3,859f8 <__alt_data_end+0xfffb9f08>
   85a0c:	19000317 	ldw	r4,12(r3)
   85a10:	31000315 	stw	r4,12(r6)
   85a14:	30c00215 	stw	r3,8(r6)
   85a18:	21800215 	stw	r6,8(r4)
   85a1c:	19800315 	stw	r6,12(r3)
   85a20:	003fde06 	br	8599c <__alt_data_end+0xfffb9eac>
   85a24:	29c00217 	ldw	r7,8(r5)
   85a28:	10c5883a 	add	r2,r2,r3
   85a2c:	00c00274 	movhi	r3,9
   85a30:	18c3e804 	addi	r3,r3,4000
   85a34:	38c03b26 	beq	r7,r3,85b24 <_free_r+0x278>
   85a38:	2a000317 	ldw	r8,12(r5)
   85a3c:	11400054 	ori	r5,r2,1
   85a40:	3087883a 	add	r3,r6,r2
   85a44:	3a000315 	stw	r8,12(r7)
   85a48:	41c00215 	stw	r7,8(r8)
   85a4c:	31400115 	stw	r5,4(r6)
   85a50:	18800015 	stw	r2,0(r3)
   85a54:	003fbd06 	br	8594c <__alt_data_end+0xfffb9e5c>
   85a58:	39c0004c 	andi	r7,r7,1
   85a5c:	10c5883a 	add	r2,r2,r3
   85a60:	3800071e 	bne	r7,zero,85a80 <_free_r+0x1d4>
   85a64:	81fffe17 	ldw	r7,-8(r16)
   85a68:	31cdc83a 	sub	r6,r6,r7
   85a6c:	30c00317 	ldw	r3,12(r6)
   85a70:	31400217 	ldw	r5,8(r6)
   85a74:	11c5883a 	add	r2,r2,r7
   85a78:	28c00315 	stw	r3,12(r5)
   85a7c:	19400215 	stw	r5,8(r3)
   85a80:	10c00054 	ori	r3,r2,1
   85a84:	30c00115 	stw	r3,4(r6)
   85a88:	00c00274 	movhi	r3,9
   85a8c:	18c96e04 	addi	r3,r3,9656
   85a90:	18c00017 	ldw	r3,0(r3)
   85a94:	21800215 	stw	r6,8(r4)
   85a98:	10ffc036 	bltu	r2,r3,8599c <__alt_data_end+0xfffb9eac>
   85a9c:	00800274 	movhi	r2,9
   85aa0:	10906804 	addi	r2,r2,16800
   85aa4:	11400017 	ldw	r5,0(r2)
   85aa8:	8809883a 	mov	r4,r17
   85aac:	00857880 	call	85788 <_malloc_trim_r>
   85ab0:	003fba06 	br	8599c <__alt_data_end+0xfffb9eac>
   85ab4:	28c9883a 	add	r4,r5,r3
   85ab8:	21000117 	ldw	r4,4(r4)
   85abc:	2100004c 	andi	r4,r4,1
   85ac0:	2000391e 	bne	r4,zero,85ba8 <_free_r+0x2fc>
   85ac4:	29c00217 	ldw	r7,8(r5)
   85ac8:	29000317 	ldw	r4,12(r5)
   85acc:	1885883a 	add	r2,r3,r2
   85ad0:	10c00054 	ori	r3,r2,1
   85ad4:	39000315 	stw	r4,12(r7)
   85ad8:	21c00215 	stw	r7,8(r4)
   85adc:	30c00115 	stw	r3,4(r6)
   85ae0:	308d883a 	add	r6,r6,r2
   85ae4:	30800015 	stw	r2,0(r6)
   85ae8:	003fac06 	br	8599c <__alt_data_end+0xfffb9eac>
   85aec:	00c00504 	movi	r3,20
   85af0:	19401536 	bltu	r3,r5,85b48 <_free_r+0x29c>
   85af4:	28c01704 	addi	r3,r5,92
   85af8:	18c7883a 	add	r3,r3,r3
   85afc:	294016c4 	addi	r5,r5,91
   85b00:	003fb406 	br	859d4 <__alt_data_end+0xfffb9ee4>
   85b04:	280bd0ba 	srai	r5,r5,2
   85b08:	00c00044 	movi	r3,1
   85b0c:	38800117 	ldw	r2,4(r7)
   85b10:	194a983a 	sll	r5,r3,r5
   85b14:	2007883a 	mov	r3,r4
   85b18:	2884b03a 	or	r2,r5,r2
   85b1c:	38800115 	stw	r2,4(r7)
   85b20:	003fbb06 	br	85a10 <__alt_data_end+0xfffb9f20>
   85b24:	21800515 	stw	r6,20(r4)
   85b28:	21800415 	stw	r6,16(r4)
   85b2c:	10c00054 	ori	r3,r2,1
   85b30:	31c00315 	stw	r7,12(r6)
   85b34:	31c00215 	stw	r7,8(r6)
   85b38:	30c00115 	stw	r3,4(r6)
   85b3c:	308d883a 	add	r6,r6,r2
   85b40:	30800015 	stw	r2,0(r6)
   85b44:	003f9506 	br	8599c <__alt_data_end+0xfffb9eac>
   85b48:	00c01504 	movi	r3,84
   85b4c:	19400536 	bltu	r3,r5,85b64 <_free_r+0x2b8>
   85b50:	100ad33a 	srli	r5,r2,12
   85b54:	28c01bc4 	addi	r3,r5,111
   85b58:	18c7883a 	add	r3,r3,r3
   85b5c:	29401b84 	addi	r5,r5,110
   85b60:	003f9c06 	br	859d4 <__alt_data_end+0xfffb9ee4>
   85b64:	00c05504 	movi	r3,340
   85b68:	19400536 	bltu	r3,r5,85b80 <_free_r+0x2d4>
   85b6c:	100ad3fa 	srli	r5,r2,15
   85b70:	28c01e04 	addi	r3,r5,120
   85b74:	18c7883a 	add	r3,r3,r3
   85b78:	29401dc4 	addi	r5,r5,119
   85b7c:	003f9506 	br	859d4 <__alt_data_end+0xfffb9ee4>
   85b80:	00c15504 	movi	r3,1364
   85b84:	19400536 	bltu	r3,r5,85b9c <_free_r+0x2f0>
   85b88:	100ad4ba 	srli	r5,r2,18
   85b8c:	28c01f44 	addi	r3,r5,125
   85b90:	18c7883a 	add	r3,r3,r3
   85b94:	29401f04 	addi	r5,r5,124
   85b98:	003f8e06 	br	859d4 <__alt_data_end+0xfffb9ee4>
   85b9c:	00c03f84 	movi	r3,254
   85ba0:	01401f84 	movi	r5,126
   85ba4:	003f8b06 	br	859d4 <__alt_data_end+0xfffb9ee4>
   85ba8:	10c00054 	ori	r3,r2,1
   85bac:	30c00115 	stw	r3,4(r6)
   85bb0:	308d883a 	add	r6,r6,r2
   85bb4:	30800015 	stw	r2,0(r6)
   85bb8:	003f7806 	br	8599c <__alt_data_end+0xfffb9eac>

00085bbc <__sfvwrite_r>:
   85bbc:	30800217 	ldw	r2,8(r6)
   85bc0:	10006726 	beq	r2,zero,85d60 <__sfvwrite_r+0x1a4>
   85bc4:	28c0030b 	ldhu	r3,12(r5)
   85bc8:	defff404 	addi	sp,sp,-48
   85bcc:	dd400715 	stw	r21,28(sp)
   85bd0:	dd000615 	stw	r20,24(sp)
   85bd4:	dc000215 	stw	r16,8(sp)
   85bd8:	dfc00b15 	stw	ra,44(sp)
   85bdc:	df000a15 	stw	fp,40(sp)
   85be0:	ddc00915 	stw	r23,36(sp)
   85be4:	dd800815 	stw	r22,32(sp)
   85be8:	dcc00515 	stw	r19,20(sp)
   85bec:	dc800415 	stw	r18,16(sp)
   85bf0:	dc400315 	stw	r17,12(sp)
   85bf4:	1880020c 	andi	r2,r3,8
   85bf8:	2821883a 	mov	r16,r5
   85bfc:	202b883a 	mov	r21,r4
   85c00:	3029883a 	mov	r20,r6
   85c04:	10002726 	beq	r2,zero,85ca4 <__sfvwrite_r+0xe8>
   85c08:	28800417 	ldw	r2,16(r5)
   85c0c:	10002526 	beq	r2,zero,85ca4 <__sfvwrite_r+0xe8>
   85c10:	1880008c 	andi	r2,r3,2
   85c14:	a4400017 	ldw	r17,0(r20)
   85c18:	10002a26 	beq	r2,zero,85cc4 <__sfvwrite_r+0x108>
   85c1c:	05a00034 	movhi	r22,32768
   85c20:	0027883a 	mov	r19,zero
   85c24:	0025883a 	mov	r18,zero
   85c28:	b5bf0004 	addi	r22,r22,-1024
   85c2c:	980d883a 	mov	r6,r19
   85c30:	a809883a 	mov	r4,r21
   85c34:	90004626 	beq	r18,zero,85d50 <__sfvwrite_r+0x194>
   85c38:	900f883a 	mov	r7,r18
   85c3c:	b480022e 	bgeu	r22,r18,85c48 <__sfvwrite_r+0x8c>
   85c40:	01e00034 	movhi	r7,32768
   85c44:	39ff0004 	addi	r7,r7,-1024
   85c48:	80800917 	ldw	r2,36(r16)
   85c4c:	81400717 	ldw	r5,28(r16)
   85c50:	103ee83a 	callr	r2
   85c54:	0080570e 	bge	zero,r2,85db4 <__sfvwrite_r+0x1f8>
   85c58:	a0c00217 	ldw	r3,8(r20)
   85c5c:	98a7883a 	add	r19,r19,r2
   85c60:	90a5c83a 	sub	r18,r18,r2
   85c64:	1885c83a 	sub	r2,r3,r2
   85c68:	a0800215 	stw	r2,8(r20)
   85c6c:	103fef1e 	bne	r2,zero,85c2c <__alt_data_end+0xfffba13c>
   85c70:	0005883a 	mov	r2,zero
   85c74:	dfc00b17 	ldw	ra,44(sp)
   85c78:	df000a17 	ldw	fp,40(sp)
   85c7c:	ddc00917 	ldw	r23,36(sp)
   85c80:	dd800817 	ldw	r22,32(sp)
   85c84:	dd400717 	ldw	r21,28(sp)
   85c88:	dd000617 	ldw	r20,24(sp)
   85c8c:	dcc00517 	ldw	r19,20(sp)
   85c90:	dc800417 	ldw	r18,16(sp)
   85c94:	dc400317 	ldw	r17,12(sp)
   85c98:	dc000217 	ldw	r16,8(sp)
   85c9c:	dec00c04 	addi	sp,sp,48
   85ca0:	f800283a 	ret
   85ca4:	800b883a 	mov	r5,r16
   85ca8:	a809883a 	mov	r4,r21
   85cac:	00837640 	call	83764 <__swsetup_r>
   85cb0:	1000eb1e 	bne	r2,zero,86060 <__sfvwrite_r+0x4a4>
   85cb4:	80c0030b 	ldhu	r3,12(r16)
   85cb8:	a4400017 	ldw	r17,0(r20)
   85cbc:	1880008c 	andi	r2,r3,2
   85cc0:	103fd61e 	bne	r2,zero,85c1c <__alt_data_end+0xfffba12c>
   85cc4:	1880004c 	andi	r2,r3,1
   85cc8:	10003f1e 	bne	r2,zero,85dc8 <__sfvwrite_r+0x20c>
   85ccc:	0039883a 	mov	fp,zero
   85cd0:	0025883a 	mov	r18,zero
   85cd4:	90001a26 	beq	r18,zero,85d40 <__sfvwrite_r+0x184>
   85cd8:	1880800c 	andi	r2,r3,512
   85cdc:	84c00217 	ldw	r19,8(r16)
   85ce0:	10002126 	beq	r2,zero,85d68 <__sfvwrite_r+0x1ac>
   85ce4:	982f883a 	mov	r23,r19
   85ce8:	94c09336 	bltu	r18,r19,85f38 <__sfvwrite_r+0x37c>
   85cec:	1881200c 	andi	r2,r3,1152
   85cf0:	10009e1e 	bne	r2,zero,85f6c <__sfvwrite_r+0x3b0>
   85cf4:	81000017 	ldw	r4,0(r16)
   85cf8:	b80d883a 	mov	r6,r23
   85cfc:	e00b883a 	mov	r5,fp
   85d00:	0086f2c0 	call	86f2c <memmove>
   85d04:	80c00217 	ldw	r3,8(r16)
   85d08:	81000017 	ldw	r4,0(r16)
   85d0c:	9005883a 	mov	r2,r18
   85d10:	1ce7c83a 	sub	r19,r3,r19
   85d14:	25cf883a 	add	r7,r4,r23
   85d18:	84c00215 	stw	r19,8(r16)
   85d1c:	81c00015 	stw	r7,0(r16)
   85d20:	a0c00217 	ldw	r3,8(r20)
   85d24:	e0b9883a 	add	fp,fp,r2
   85d28:	90a5c83a 	sub	r18,r18,r2
   85d2c:	18a7c83a 	sub	r19,r3,r2
   85d30:	a4c00215 	stw	r19,8(r20)
   85d34:	983fce26 	beq	r19,zero,85c70 <__alt_data_end+0xfffba180>
   85d38:	80c0030b 	ldhu	r3,12(r16)
   85d3c:	903fe61e 	bne	r18,zero,85cd8 <__alt_data_end+0xfffba1e8>
   85d40:	8f000017 	ldw	fp,0(r17)
   85d44:	8c800117 	ldw	r18,4(r17)
   85d48:	8c400204 	addi	r17,r17,8
   85d4c:	003fe106 	br	85cd4 <__alt_data_end+0xfffba1e4>
   85d50:	8cc00017 	ldw	r19,0(r17)
   85d54:	8c800117 	ldw	r18,4(r17)
   85d58:	8c400204 	addi	r17,r17,8
   85d5c:	003fb306 	br	85c2c <__alt_data_end+0xfffba13c>
   85d60:	0005883a 	mov	r2,zero
   85d64:	f800283a 	ret
   85d68:	81000017 	ldw	r4,0(r16)
   85d6c:	80800417 	ldw	r2,16(r16)
   85d70:	11005736 	bltu	r2,r4,85ed0 <__sfvwrite_r+0x314>
   85d74:	85c00517 	ldw	r23,20(r16)
   85d78:	95c05536 	bltu	r18,r23,85ed0 <__sfvwrite_r+0x314>
   85d7c:	00a00034 	movhi	r2,32768
   85d80:	10bfffc4 	addi	r2,r2,-1
   85d84:	9009883a 	mov	r4,r18
   85d88:	1480012e 	bgeu	r2,r18,85d90 <__sfvwrite_r+0x1d4>
   85d8c:	1009883a 	mov	r4,r2
   85d90:	b80b883a 	mov	r5,r23
   85d94:	008103c0 	call	8103c <__divsi3>
   85d98:	15cf383a 	mul	r7,r2,r23
   85d9c:	81400717 	ldw	r5,28(r16)
   85da0:	80800917 	ldw	r2,36(r16)
   85da4:	e00d883a 	mov	r6,fp
   85da8:	a809883a 	mov	r4,r21
   85dac:	103ee83a 	callr	r2
   85db0:	00bfdb16 	blt	zero,r2,85d20 <__alt_data_end+0xfffba230>
   85db4:	8080030b 	ldhu	r2,12(r16)
   85db8:	10801014 	ori	r2,r2,64
   85dbc:	8080030d 	sth	r2,12(r16)
   85dc0:	00bfffc4 	movi	r2,-1
   85dc4:	003fab06 	br	85c74 <__alt_data_end+0xfffba184>
   85dc8:	0027883a 	mov	r19,zero
   85dcc:	0011883a 	mov	r8,zero
   85dd0:	0039883a 	mov	fp,zero
   85dd4:	0025883a 	mov	r18,zero
   85dd8:	90001f26 	beq	r18,zero,85e58 <__sfvwrite_r+0x29c>
   85ddc:	40005a26 	beq	r8,zero,85f48 <__sfvwrite_r+0x38c>
   85de0:	982d883a 	mov	r22,r19
   85de4:	94c0012e 	bgeu	r18,r19,85dec <__sfvwrite_r+0x230>
   85de8:	902d883a 	mov	r22,r18
   85dec:	81000017 	ldw	r4,0(r16)
   85df0:	80800417 	ldw	r2,16(r16)
   85df4:	b02f883a 	mov	r23,r22
   85df8:	81c00517 	ldw	r7,20(r16)
   85dfc:	1100032e 	bgeu	r2,r4,85e0c <__sfvwrite_r+0x250>
   85e00:	80c00217 	ldw	r3,8(r16)
   85e04:	38c7883a 	add	r3,r7,r3
   85e08:	1d801816 	blt	r3,r22,85e6c <__sfvwrite_r+0x2b0>
   85e0c:	b1c03e16 	blt	r22,r7,85f08 <__sfvwrite_r+0x34c>
   85e10:	80800917 	ldw	r2,36(r16)
   85e14:	81400717 	ldw	r5,28(r16)
   85e18:	e00d883a 	mov	r6,fp
   85e1c:	da000115 	stw	r8,4(sp)
   85e20:	a809883a 	mov	r4,r21
   85e24:	103ee83a 	callr	r2
   85e28:	102f883a 	mov	r23,r2
   85e2c:	da000117 	ldw	r8,4(sp)
   85e30:	00bfe00e 	bge	zero,r2,85db4 <__alt_data_end+0xfffba2c4>
   85e34:	9de7c83a 	sub	r19,r19,r23
   85e38:	98001f26 	beq	r19,zero,85eb8 <__sfvwrite_r+0x2fc>
   85e3c:	a0800217 	ldw	r2,8(r20)
   85e40:	e5f9883a 	add	fp,fp,r23
   85e44:	95e5c83a 	sub	r18,r18,r23
   85e48:	15efc83a 	sub	r23,r2,r23
   85e4c:	a5c00215 	stw	r23,8(r20)
   85e50:	b83f8726 	beq	r23,zero,85c70 <__alt_data_end+0xfffba180>
   85e54:	903fe11e 	bne	r18,zero,85ddc <__alt_data_end+0xfffba2ec>
   85e58:	8f000017 	ldw	fp,0(r17)
   85e5c:	8c800117 	ldw	r18,4(r17)
   85e60:	0011883a 	mov	r8,zero
   85e64:	8c400204 	addi	r17,r17,8
   85e68:	003fdb06 	br	85dd8 <__alt_data_end+0xfffba2e8>
   85e6c:	180d883a 	mov	r6,r3
   85e70:	e00b883a 	mov	r5,fp
   85e74:	da000115 	stw	r8,4(sp)
   85e78:	d8c00015 	stw	r3,0(sp)
   85e7c:	0086f2c0 	call	86f2c <memmove>
   85e80:	d8c00017 	ldw	r3,0(sp)
   85e84:	80800017 	ldw	r2,0(r16)
   85e88:	800b883a 	mov	r5,r16
   85e8c:	a809883a 	mov	r4,r21
   85e90:	10c5883a 	add	r2,r2,r3
   85e94:	80800015 	stw	r2,0(r16)
   85e98:	d8c00015 	stw	r3,0(sp)
   85e9c:	008535c0 	call	8535c <_fflush_r>
   85ea0:	d8c00017 	ldw	r3,0(sp)
   85ea4:	da000117 	ldw	r8,4(sp)
   85ea8:	103fc21e 	bne	r2,zero,85db4 <__alt_data_end+0xfffba2c4>
   85eac:	182f883a 	mov	r23,r3
   85eb0:	9de7c83a 	sub	r19,r19,r23
   85eb4:	983fe11e 	bne	r19,zero,85e3c <__alt_data_end+0xfffba34c>
   85eb8:	800b883a 	mov	r5,r16
   85ebc:	a809883a 	mov	r4,r21
   85ec0:	008535c0 	call	8535c <_fflush_r>
   85ec4:	103fbb1e 	bne	r2,zero,85db4 <__alt_data_end+0xfffba2c4>
   85ec8:	0011883a 	mov	r8,zero
   85ecc:	003fdb06 	br	85e3c <__alt_data_end+0xfffba34c>
   85ed0:	94c0012e 	bgeu	r18,r19,85ed8 <__sfvwrite_r+0x31c>
   85ed4:	9027883a 	mov	r19,r18
   85ed8:	980d883a 	mov	r6,r19
   85edc:	e00b883a 	mov	r5,fp
   85ee0:	0086f2c0 	call	86f2c <memmove>
   85ee4:	80800217 	ldw	r2,8(r16)
   85ee8:	80c00017 	ldw	r3,0(r16)
   85eec:	14c5c83a 	sub	r2,r2,r19
   85ef0:	1cc7883a 	add	r3,r3,r19
   85ef4:	80800215 	stw	r2,8(r16)
   85ef8:	80c00015 	stw	r3,0(r16)
   85efc:	10004326 	beq	r2,zero,8600c <__sfvwrite_r+0x450>
   85f00:	9805883a 	mov	r2,r19
   85f04:	003f8606 	br	85d20 <__alt_data_end+0xfffba230>
   85f08:	b00d883a 	mov	r6,r22
   85f0c:	e00b883a 	mov	r5,fp
   85f10:	da000115 	stw	r8,4(sp)
   85f14:	0086f2c0 	call	86f2c <memmove>
   85f18:	80800217 	ldw	r2,8(r16)
   85f1c:	80c00017 	ldw	r3,0(r16)
   85f20:	da000117 	ldw	r8,4(sp)
   85f24:	1585c83a 	sub	r2,r2,r22
   85f28:	1dad883a 	add	r22,r3,r22
   85f2c:	80800215 	stw	r2,8(r16)
   85f30:	85800015 	stw	r22,0(r16)
   85f34:	003fbf06 	br	85e34 <__alt_data_end+0xfffba344>
   85f38:	81000017 	ldw	r4,0(r16)
   85f3c:	9027883a 	mov	r19,r18
   85f40:	902f883a 	mov	r23,r18
   85f44:	003f6c06 	br	85cf8 <__alt_data_end+0xfffba208>
   85f48:	900d883a 	mov	r6,r18
   85f4c:	01400284 	movi	r5,10
   85f50:	e009883a 	mov	r4,fp
   85f54:	0086d000 	call	86d00 <memchr>
   85f58:	10003e26 	beq	r2,zero,86054 <__sfvwrite_r+0x498>
   85f5c:	10800044 	addi	r2,r2,1
   85f60:	1727c83a 	sub	r19,r2,fp
   85f64:	02000044 	movi	r8,1
   85f68:	003f9d06 	br	85de0 <__alt_data_end+0xfffba2f0>
   85f6c:	80800517 	ldw	r2,20(r16)
   85f70:	81400417 	ldw	r5,16(r16)
   85f74:	81c00017 	ldw	r7,0(r16)
   85f78:	10a7883a 	add	r19,r2,r2
   85f7c:	9885883a 	add	r2,r19,r2
   85f80:	1026d7fa 	srli	r19,r2,31
   85f84:	396dc83a 	sub	r22,r7,r5
   85f88:	b1000044 	addi	r4,r22,1
   85f8c:	9885883a 	add	r2,r19,r2
   85f90:	1027d07a 	srai	r19,r2,1
   85f94:	2485883a 	add	r2,r4,r18
   85f98:	980d883a 	mov	r6,r19
   85f9c:	9880022e 	bgeu	r19,r2,85fa8 <__sfvwrite_r+0x3ec>
   85fa0:	1027883a 	mov	r19,r2
   85fa4:	100d883a 	mov	r6,r2
   85fa8:	18c1000c 	andi	r3,r3,1024
   85fac:	18001c26 	beq	r3,zero,86020 <__sfvwrite_r+0x464>
   85fb0:	300b883a 	mov	r5,r6
   85fb4:	a809883a 	mov	r4,r21
   85fb8:	00864f40 	call	864f4 <_malloc_r>
   85fbc:	102f883a 	mov	r23,r2
   85fc0:	10002926 	beq	r2,zero,86068 <__sfvwrite_r+0x4ac>
   85fc4:	81400417 	ldw	r5,16(r16)
   85fc8:	b00d883a 	mov	r6,r22
   85fcc:	1009883a 	mov	r4,r2
   85fd0:	0086de40 	call	86de4 <memcpy>
   85fd4:	8080030b 	ldhu	r2,12(r16)
   85fd8:	00fedfc4 	movi	r3,-1153
   85fdc:	10c4703a 	and	r2,r2,r3
   85fe0:	10802014 	ori	r2,r2,128
   85fe4:	8080030d 	sth	r2,12(r16)
   85fe8:	bd89883a 	add	r4,r23,r22
   85fec:	9d8fc83a 	sub	r7,r19,r22
   85ff0:	85c00415 	stw	r23,16(r16)
   85ff4:	84c00515 	stw	r19,20(r16)
   85ff8:	81000015 	stw	r4,0(r16)
   85ffc:	9027883a 	mov	r19,r18
   86000:	81c00215 	stw	r7,8(r16)
   86004:	902f883a 	mov	r23,r18
   86008:	003f3b06 	br	85cf8 <__alt_data_end+0xfffba208>
   8600c:	800b883a 	mov	r5,r16
   86010:	a809883a 	mov	r4,r21
   86014:	008535c0 	call	8535c <_fflush_r>
   86018:	103fb926 	beq	r2,zero,85f00 <__alt_data_end+0xfffba410>
   8601c:	003f6506 	br	85db4 <__alt_data_end+0xfffba2c4>
   86020:	a809883a 	mov	r4,r21
   86024:	00881ac0 	call	881ac <_realloc_r>
   86028:	102f883a 	mov	r23,r2
   8602c:	103fee1e 	bne	r2,zero,85fe8 <__alt_data_end+0xfffba4f8>
   86030:	81400417 	ldw	r5,16(r16)
   86034:	a809883a 	mov	r4,r21
   86038:	00858ac0 	call	858ac <_free_r>
   8603c:	8080030b 	ldhu	r2,12(r16)
   86040:	00ffdfc4 	movi	r3,-129
   86044:	1884703a 	and	r2,r3,r2
   86048:	00c00304 	movi	r3,12
   8604c:	a8c00015 	stw	r3,0(r21)
   86050:	003f5906 	br	85db8 <__alt_data_end+0xfffba2c8>
   86054:	94c00044 	addi	r19,r18,1
   86058:	02000044 	movi	r8,1
   8605c:	003f6006 	br	85de0 <__alt_data_end+0xfffba2f0>
   86060:	00bfffc4 	movi	r2,-1
   86064:	003f0306 	br	85c74 <__alt_data_end+0xfffba184>
   86068:	00800304 	movi	r2,12
   8606c:	a8800015 	stw	r2,0(r21)
   86070:	8080030b 	ldhu	r2,12(r16)
   86074:	003f5006 	br	85db8 <__alt_data_end+0xfffba2c8>

00086078 <_fwalk>:
   86078:	defff704 	addi	sp,sp,-36
   8607c:	dd000415 	stw	r20,16(sp)
   86080:	dfc00815 	stw	ra,32(sp)
   86084:	ddc00715 	stw	r23,28(sp)
   86088:	dd800615 	stw	r22,24(sp)
   8608c:	dd400515 	stw	r21,20(sp)
   86090:	dcc00315 	stw	r19,12(sp)
   86094:	dc800215 	stw	r18,8(sp)
   86098:	dc400115 	stw	r17,4(sp)
   8609c:	dc000015 	stw	r16,0(sp)
   860a0:	2500b804 	addi	r20,r4,736
   860a4:	a0002326 	beq	r20,zero,86134 <_fwalk+0xbc>
   860a8:	282b883a 	mov	r21,r5
   860ac:	002f883a 	mov	r23,zero
   860b0:	05800044 	movi	r22,1
   860b4:	04ffffc4 	movi	r19,-1
   860b8:	a4400117 	ldw	r17,4(r20)
   860bc:	a4800217 	ldw	r18,8(r20)
   860c0:	8c7fffc4 	addi	r17,r17,-1
   860c4:	88000d16 	blt	r17,zero,860fc <_fwalk+0x84>
   860c8:	94000304 	addi	r16,r18,12
   860cc:	94800384 	addi	r18,r18,14
   860d0:	8080000b 	ldhu	r2,0(r16)
   860d4:	8c7fffc4 	addi	r17,r17,-1
   860d8:	813ffd04 	addi	r4,r16,-12
   860dc:	b080042e 	bgeu	r22,r2,860f0 <_fwalk+0x78>
   860e0:	9080000f 	ldh	r2,0(r18)
   860e4:	14c00226 	beq	r2,r19,860f0 <_fwalk+0x78>
   860e8:	a83ee83a 	callr	r21
   860ec:	b8aeb03a 	or	r23,r23,r2
   860f0:	84001a04 	addi	r16,r16,104
   860f4:	94801a04 	addi	r18,r18,104
   860f8:	8cfff51e 	bne	r17,r19,860d0 <__alt_data_end+0xfffba5e0>
   860fc:	a5000017 	ldw	r20,0(r20)
   86100:	a03fed1e 	bne	r20,zero,860b8 <__alt_data_end+0xfffba5c8>
   86104:	b805883a 	mov	r2,r23
   86108:	dfc00817 	ldw	ra,32(sp)
   8610c:	ddc00717 	ldw	r23,28(sp)
   86110:	dd800617 	ldw	r22,24(sp)
   86114:	dd400517 	ldw	r21,20(sp)
   86118:	dd000417 	ldw	r20,16(sp)
   8611c:	dcc00317 	ldw	r19,12(sp)
   86120:	dc800217 	ldw	r18,8(sp)
   86124:	dc400117 	ldw	r17,4(sp)
   86128:	dc000017 	ldw	r16,0(sp)
   8612c:	dec00904 	addi	sp,sp,36
   86130:	f800283a 	ret
   86134:	002f883a 	mov	r23,zero
   86138:	003ff206 	br	86104 <__alt_data_end+0xfffba614>

0008613c <_fwalk_reent>:
   8613c:	defff704 	addi	sp,sp,-36
   86140:	dd000415 	stw	r20,16(sp)
   86144:	dfc00815 	stw	ra,32(sp)
   86148:	ddc00715 	stw	r23,28(sp)
   8614c:	dd800615 	stw	r22,24(sp)
   86150:	dd400515 	stw	r21,20(sp)
   86154:	dcc00315 	stw	r19,12(sp)
   86158:	dc800215 	stw	r18,8(sp)
   8615c:	dc400115 	stw	r17,4(sp)
   86160:	dc000015 	stw	r16,0(sp)
   86164:	2500b804 	addi	r20,r4,736
   86168:	a0002326 	beq	r20,zero,861f8 <_fwalk_reent+0xbc>
   8616c:	282b883a 	mov	r21,r5
   86170:	2027883a 	mov	r19,r4
   86174:	002f883a 	mov	r23,zero
   86178:	05800044 	movi	r22,1
   8617c:	04bfffc4 	movi	r18,-1
   86180:	a4400117 	ldw	r17,4(r20)
   86184:	a4000217 	ldw	r16,8(r20)
   86188:	8c7fffc4 	addi	r17,r17,-1
   8618c:	88000c16 	blt	r17,zero,861c0 <_fwalk_reent+0x84>
   86190:	84000304 	addi	r16,r16,12
   86194:	8080000b 	ldhu	r2,0(r16)
   86198:	8c7fffc4 	addi	r17,r17,-1
   8619c:	817ffd04 	addi	r5,r16,-12
   861a0:	b080052e 	bgeu	r22,r2,861b8 <_fwalk_reent+0x7c>
   861a4:	8080008f 	ldh	r2,2(r16)
   861a8:	9809883a 	mov	r4,r19
   861ac:	14800226 	beq	r2,r18,861b8 <_fwalk_reent+0x7c>
   861b0:	a83ee83a 	callr	r21
   861b4:	b8aeb03a 	or	r23,r23,r2
   861b8:	84001a04 	addi	r16,r16,104
   861bc:	8cbff51e 	bne	r17,r18,86194 <__alt_data_end+0xfffba6a4>
   861c0:	a5000017 	ldw	r20,0(r20)
   861c4:	a03fee1e 	bne	r20,zero,86180 <__alt_data_end+0xfffba690>
   861c8:	b805883a 	mov	r2,r23
   861cc:	dfc00817 	ldw	ra,32(sp)
   861d0:	ddc00717 	ldw	r23,28(sp)
   861d4:	dd800617 	ldw	r22,24(sp)
   861d8:	dd400517 	ldw	r21,20(sp)
   861dc:	dd000417 	ldw	r20,16(sp)
   861e0:	dcc00317 	ldw	r19,12(sp)
   861e4:	dc800217 	ldw	r18,8(sp)
   861e8:	dc400117 	ldw	r17,4(sp)
   861ec:	dc000017 	ldw	r16,0(sp)
   861f0:	dec00904 	addi	sp,sp,36
   861f4:	f800283a 	ret
   861f8:	002f883a 	mov	r23,zero
   861fc:	003ff206 	br	861c8 <__alt_data_end+0xfffba6d8>

00086200 <_gettimeofday_r>:
   86200:	defffd04 	addi	sp,sp,-12
   86204:	2805883a 	mov	r2,r5
   86208:	dc000015 	stw	r16,0(sp)
   8620c:	04000274 	movhi	r16,9
   86210:	dc400115 	stw	r17,4(sp)
   86214:	84106204 	addi	r16,r16,16776
   86218:	2023883a 	mov	r17,r4
   8621c:	300b883a 	mov	r5,r6
   86220:	1009883a 	mov	r4,r2
   86224:	dfc00215 	stw	ra,8(sp)
   86228:	80000015 	stw	zero,0(r16)
   8622c:	008dd080 	call	8dd08 <gettimeofday>
   86230:	00ffffc4 	movi	r3,-1
   86234:	10c00526 	beq	r2,r3,8624c <_gettimeofday_r+0x4c>
   86238:	dfc00217 	ldw	ra,8(sp)
   8623c:	dc400117 	ldw	r17,4(sp)
   86240:	dc000017 	ldw	r16,0(sp)
   86244:	dec00304 	addi	sp,sp,12
   86248:	f800283a 	ret
   8624c:	80c00017 	ldw	r3,0(r16)
   86250:	183ff926 	beq	r3,zero,86238 <__alt_data_end+0xfffba748>
   86254:	88c00015 	stw	r3,0(r17)
   86258:	003ff706 	br	86238 <__alt_data_end+0xfffba748>

0008625c <_setlocale_r>:
   8625c:	30001b26 	beq	r6,zero,862cc <_setlocale_r+0x70>
   86260:	01400274 	movhi	r5,9
   86264:	defffe04 	addi	sp,sp,-8
   86268:	2941f304 	addi	r5,r5,1996
   8626c:	3009883a 	mov	r4,r6
   86270:	dc000015 	stw	r16,0(sp)
   86274:	dfc00115 	stw	ra,4(sp)
   86278:	3021883a 	mov	r16,r6
   8627c:	00889140 	call	88914 <strcmp>
   86280:	1000061e 	bne	r2,zero,8629c <_setlocale_r+0x40>
   86284:	00800274 	movhi	r2,9
   86288:	1081f204 	addi	r2,r2,1992
   8628c:	dfc00117 	ldw	ra,4(sp)
   86290:	dc000017 	ldw	r16,0(sp)
   86294:	dec00204 	addi	sp,sp,8
   86298:	f800283a 	ret
   8629c:	01400274 	movhi	r5,9
   862a0:	2941f204 	addi	r5,r5,1992
   862a4:	8009883a 	mov	r4,r16
   862a8:	00889140 	call	88914 <strcmp>
   862ac:	103ff526 	beq	r2,zero,86284 <__alt_data_end+0xfffba794>
   862b0:	01400274 	movhi	r5,9
   862b4:	2941dd04 	addi	r5,r5,1908
   862b8:	8009883a 	mov	r4,r16
   862bc:	00889140 	call	88914 <strcmp>
   862c0:	103ff026 	beq	r2,zero,86284 <__alt_data_end+0xfffba794>
   862c4:	0005883a 	mov	r2,zero
   862c8:	003ff006 	br	8628c <__alt_data_end+0xfffba79c>
   862cc:	00800274 	movhi	r2,9
   862d0:	1081f204 	addi	r2,r2,1992
   862d4:	f800283a 	ret

000862d8 <__locale_charset>:
   862d8:	00800274 	movhi	r2,9
   862dc:	1083d004 	addi	r2,r2,3904
   862e0:	f800283a 	ret

000862e4 <__locale_mb_cur_max>:
   862e4:	00800274 	movhi	r2,9
   862e8:	10896c04 	addi	r2,r2,9648
   862ec:	10800017 	ldw	r2,0(r2)
   862f0:	f800283a 	ret

000862f4 <__locale_msgcharset>:
   862f4:	00800274 	movhi	r2,9
   862f8:	1083c804 	addi	r2,r2,3872
   862fc:	f800283a 	ret

00086300 <__locale_cjk_lang>:
   86300:	0005883a 	mov	r2,zero
   86304:	f800283a 	ret

00086308 <_localeconv_r>:
   86308:	00800274 	movhi	r2,9
   8630c:	1083d804 	addi	r2,r2,3936
   86310:	f800283a 	ret

00086314 <setlocale>:
   86314:	00800274 	movhi	r2,9
   86318:	10896b04 	addi	r2,r2,9644
   8631c:	280d883a 	mov	r6,r5
   86320:	200b883a 	mov	r5,r4
   86324:	11000017 	ldw	r4,0(r2)
   86328:	008625c1 	jmpi	8625c <_setlocale_r>

0008632c <localeconv>:
   8632c:	00800274 	movhi	r2,9
   86330:	1083d804 	addi	r2,r2,3936
   86334:	f800283a 	ret

00086338 <__smakebuf_r>:
   86338:	2880030b 	ldhu	r2,12(r5)
   8633c:	10c0008c 	andi	r3,r2,2
   86340:	1800411e 	bne	r3,zero,86448 <__smakebuf_r+0x110>
   86344:	deffec04 	addi	sp,sp,-80
   86348:	dc000f15 	stw	r16,60(sp)
   8634c:	2821883a 	mov	r16,r5
   86350:	2940038f 	ldh	r5,14(r5)
   86354:	dc401015 	stw	r17,64(sp)
   86358:	dfc01315 	stw	ra,76(sp)
   8635c:	dcc01215 	stw	r19,72(sp)
   86360:	dc801115 	stw	r18,68(sp)
   86364:	2023883a 	mov	r17,r4
   86368:	28001c16 	blt	r5,zero,863dc <__smakebuf_r+0xa4>
   8636c:	d80d883a 	mov	r6,sp
   86370:	008a4bc0 	call	8a4bc <_fstat_r>
   86374:	10001816 	blt	r2,zero,863d8 <__smakebuf_r+0xa0>
   86378:	d8800117 	ldw	r2,4(sp)
   8637c:	00e00014 	movui	r3,32768
   86380:	10bc000c 	andi	r2,r2,61440
   86384:	14c80020 	cmpeqi	r19,r2,8192
   86388:	10c03726 	beq	r2,r3,86468 <__smakebuf_r+0x130>
   8638c:	80c0030b 	ldhu	r3,12(r16)
   86390:	18c20014 	ori	r3,r3,2048
   86394:	80c0030d 	sth	r3,12(r16)
   86398:	00c80004 	movi	r3,8192
   8639c:	10c0521e 	bne	r2,r3,864e8 <__smakebuf_r+0x1b0>
   863a0:	8140038f 	ldh	r5,14(r16)
   863a4:	8809883a 	mov	r4,r17
   863a8:	008a5180 	call	8a518 <_isatty_r>
   863ac:	10004c26 	beq	r2,zero,864e0 <__smakebuf_r+0x1a8>
   863b0:	8080030b 	ldhu	r2,12(r16)
   863b4:	80c010c4 	addi	r3,r16,67
   863b8:	80c00015 	stw	r3,0(r16)
   863bc:	10800054 	ori	r2,r2,1
   863c0:	8080030d 	sth	r2,12(r16)
   863c4:	00800044 	movi	r2,1
   863c8:	80c00415 	stw	r3,16(r16)
   863cc:	80800515 	stw	r2,20(r16)
   863d0:	04810004 	movi	r18,1024
   863d4:	00000706 	br	863f4 <__smakebuf_r+0xbc>
   863d8:	8080030b 	ldhu	r2,12(r16)
   863dc:	10c0200c 	andi	r3,r2,128
   863e0:	18001f1e 	bne	r3,zero,86460 <__smakebuf_r+0x128>
   863e4:	04810004 	movi	r18,1024
   863e8:	10820014 	ori	r2,r2,2048
   863ec:	8080030d 	sth	r2,12(r16)
   863f0:	0027883a 	mov	r19,zero
   863f4:	900b883a 	mov	r5,r18
   863f8:	8809883a 	mov	r4,r17
   863fc:	00864f40 	call	864f4 <_malloc_r>
   86400:	10002c26 	beq	r2,zero,864b4 <__smakebuf_r+0x17c>
   86404:	80c0030b 	ldhu	r3,12(r16)
   86408:	01000234 	movhi	r4,8
   8640c:	2114fc04 	addi	r4,r4,21488
   86410:	89000f15 	stw	r4,60(r17)
   86414:	18c02014 	ori	r3,r3,128
   86418:	80c0030d 	sth	r3,12(r16)
   8641c:	80800015 	stw	r2,0(r16)
   86420:	80800415 	stw	r2,16(r16)
   86424:	84800515 	stw	r18,20(r16)
   86428:	98001a1e 	bne	r19,zero,86494 <__smakebuf_r+0x15c>
   8642c:	dfc01317 	ldw	ra,76(sp)
   86430:	dcc01217 	ldw	r19,72(sp)
   86434:	dc801117 	ldw	r18,68(sp)
   86438:	dc401017 	ldw	r17,64(sp)
   8643c:	dc000f17 	ldw	r16,60(sp)
   86440:	dec01404 	addi	sp,sp,80
   86444:	f800283a 	ret
   86448:	288010c4 	addi	r2,r5,67
   8644c:	28800015 	stw	r2,0(r5)
   86450:	28800415 	stw	r2,16(r5)
   86454:	00800044 	movi	r2,1
   86458:	28800515 	stw	r2,20(r5)
   8645c:	f800283a 	ret
   86460:	04801004 	movi	r18,64
   86464:	003fe006 	br	863e8 <__alt_data_end+0xfffba8f8>
   86468:	81000a17 	ldw	r4,40(r16)
   8646c:	00c00274 	movhi	r3,9
   86470:	18e22c04 	addi	r3,r3,-30544
   86474:	20ffc51e 	bne	r4,r3,8638c <__alt_data_end+0xfffba89c>
   86478:	8080030b 	ldhu	r2,12(r16)
   8647c:	04810004 	movi	r18,1024
   86480:	84801315 	stw	r18,76(r16)
   86484:	1484b03a 	or	r2,r2,r18
   86488:	8080030d 	sth	r2,12(r16)
   8648c:	0027883a 	mov	r19,zero
   86490:	003fd806 	br	863f4 <__alt_data_end+0xfffba904>
   86494:	8140038f 	ldh	r5,14(r16)
   86498:	8809883a 	mov	r4,r17
   8649c:	008a5180 	call	8a518 <_isatty_r>
   864a0:	103fe226 	beq	r2,zero,8642c <__alt_data_end+0xfffba93c>
   864a4:	8080030b 	ldhu	r2,12(r16)
   864a8:	10800054 	ori	r2,r2,1
   864ac:	8080030d 	sth	r2,12(r16)
   864b0:	003fde06 	br	8642c <__alt_data_end+0xfffba93c>
   864b4:	8080030b 	ldhu	r2,12(r16)
   864b8:	10c0800c 	andi	r3,r2,512
   864bc:	183fdb1e 	bne	r3,zero,8642c <__alt_data_end+0xfffba93c>
   864c0:	10800094 	ori	r2,r2,2
   864c4:	80c010c4 	addi	r3,r16,67
   864c8:	8080030d 	sth	r2,12(r16)
   864cc:	00800044 	movi	r2,1
   864d0:	80c00015 	stw	r3,0(r16)
   864d4:	80c00415 	stw	r3,16(r16)
   864d8:	80800515 	stw	r2,20(r16)
   864dc:	003fd306 	br	8642c <__alt_data_end+0xfffba93c>
   864e0:	04810004 	movi	r18,1024
   864e4:	003fc306 	br	863f4 <__alt_data_end+0xfffba904>
   864e8:	0027883a 	mov	r19,zero
   864ec:	04810004 	movi	r18,1024
   864f0:	003fc006 	br	863f4 <__alt_data_end+0xfffba904>

000864f4 <_malloc_r>:
   864f4:	defff504 	addi	sp,sp,-44
   864f8:	dc800315 	stw	r18,12(sp)
   864fc:	dfc00a15 	stw	ra,40(sp)
   86500:	df000915 	stw	fp,36(sp)
   86504:	ddc00815 	stw	r23,32(sp)
   86508:	dd800715 	stw	r22,28(sp)
   8650c:	dd400615 	stw	r21,24(sp)
   86510:	dd000515 	stw	r20,20(sp)
   86514:	dcc00415 	stw	r19,16(sp)
   86518:	dc400215 	stw	r17,8(sp)
   8651c:	dc000115 	stw	r16,4(sp)
   86520:	288002c4 	addi	r2,r5,11
   86524:	00c00584 	movi	r3,22
   86528:	2025883a 	mov	r18,r4
   8652c:	18807f2e 	bgeu	r3,r2,8672c <_malloc_r+0x238>
   86530:	047ffe04 	movi	r17,-8
   86534:	1462703a 	and	r17,r2,r17
   86538:	8800a316 	blt	r17,zero,867c8 <_malloc_r+0x2d4>
   8653c:	8940a236 	bltu	r17,r5,867c8 <_malloc_r+0x2d4>
   86540:	008e6740 	call	8e674 <__malloc_lock>
   86544:	00807dc4 	movi	r2,503
   86548:	1441e92e 	bgeu	r2,r17,86cf0 <_malloc_r+0x7fc>
   8654c:	8804d27a 	srli	r2,r17,9
   86550:	1000a126 	beq	r2,zero,867d8 <_malloc_r+0x2e4>
   86554:	00c00104 	movi	r3,4
   86558:	18811e36 	bltu	r3,r2,869d4 <_malloc_r+0x4e0>
   8655c:	8804d1ba 	srli	r2,r17,6
   86560:	12000e44 	addi	r8,r2,57
   86564:	11c00e04 	addi	r7,r2,56
   86568:	4209883a 	add	r4,r8,r8
   8656c:	04c00274 	movhi	r19,9
   86570:	2109883a 	add	r4,r4,r4
   86574:	9cc3e604 	addi	r19,r19,3992
   86578:	2109883a 	add	r4,r4,r4
   8657c:	9909883a 	add	r4,r19,r4
   86580:	24000117 	ldw	r16,4(r4)
   86584:	213ffe04 	addi	r4,r4,-8
   86588:	24009726 	beq	r4,r16,867e8 <_malloc_r+0x2f4>
   8658c:	80800117 	ldw	r2,4(r16)
   86590:	01bfff04 	movi	r6,-4
   86594:	014003c4 	movi	r5,15
   86598:	1184703a 	and	r2,r2,r6
   8659c:	1447c83a 	sub	r3,r2,r17
   865a0:	28c00716 	blt	r5,r3,865c0 <_malloc_r+0xcc>
   865a4:	1800920e 	bge	r3,zero,867f0 <_malloc_r+0x2fc>
   865a8:	84000317 	ldw	r16,12(r16)
   865ac:	24008e26 	beq	r4,r16,867e8 <_malloc_r+0x2f4>
   865b0:	80800117 	ldw	r2,4(r16)
   865b4:	1184703a 	and	r2,r2,r6
   865b8:	1447c83a 	sub	r3,r2,r17
   865bc:	28fff90e 	bge	r5,r3,865a4 <__alt_data_end+0xfffbaab4>
   865c0:	3809883a 	mov	r4,r7
   865c4:	01800274 	movhi	r6,9
   865c8:	9c000417 	ldw	r16,16(r19)
   865cc:	3183e604 	addi	r6,r6,3992
   865d0:	32000204 	addi	r8,r6,8
   865d4:	82013426 	beq	r16,r8,86aa8 <_malloc_r+0x5b4>
   865d8:	80c00117 	ldw	r3,4(r16)
   865dc:	00bfff04 	movi	r2,-4
   865e0:	188e703a 	and	r7,r3,r2
   865e4:	3c45c83a 	sub	r2,r7,r17
   865e8:	00c003c4 	movi	r3,15
   865ec:	18811f16 	blt	r3,r2,86a6c <_malloc_r+0x578>
   865f0:	32000515 	stw	r8,20(r6)
   865f4:	32000415 	stw	r8,16(r6)
   865f8:	10007f0e 	bge	r2,zero,867f8 <_malloc_r+0x304>
   865fc:	00807fc4 	movi	r2,511
   86600:	11c0fd36 	bltu	r2,r7,869f8 <_malloc_r+0x504>
   86604:	3806d0fa 	srli	r3,r7,3
   86608:	01c00044 	movi	r7,1
   8660c:	30800117 	ldw	r2,4(r6)
   86610:	19400044 	addi	r5,r3,1
   86614:	294b883a 	add	r5,r5,r5
   86618:	1807d0ba 	srai	r3,r3,2
   8661c:	294b883a 	add	r5,r5,r5
   86620:	294b883a 	add	r5,r5,r5
   86624:	298b883a 	add	r5,r5,r6
   86628:	38c6983a 	sll	r3,r7,r3
   8662c:	29c00017 	ldw	r7,0(r5)
   86630:	2a7ffe04 	addi	r9,r5,-8
   86634:	1886b03a 	or	r3,r3,r2
   86638:	82400315 	stw	r9,12(r16)
   8663c:	81c00215 	stw	r7,8(r16)
   86640:	30c00115 	stw	r3,4(r6)
   86644:	2c000015 	stw	r16,0(r5)
   86648:	3c000315 	stw	r16,12(r7)
   8664c:	2005d0ba 	srai	r2,r4,2
   86650:	01400044 	movi	r5,1
   86654:	288a983a 	sll	r5,r5,r2
   86658:	19406f36 	bltu	r3,r5,86818 <_malloc_r+0x324>
   8665c:	28c4703a 	and	r2,r5,r3
   86660:	10000a1e 	bne	r2,zero,8668c <_malloc_r+0x198>
   86664:	00bfff04 	movi	r2,-4
   86668:	294b883a 	add	r5,r5,r5
   8666c:	2088703a 	and	r4,r4,r2
   86670:	28c4703a 	and	r2,r5,r3
   86674:	21000104 	addi	r4,r4,4
   86678:	1000041e 	bne	r2,zero,8668c <_malloc_r+0x198>
   8667c:	294b883a 	add	r5,r5,r5
   86680:	28c4703a 	and	r2,r5,r3
   86684:	21000104 	addi	r4,r4,4
   86688:	103ffc26 	beq	r2,zero,8667c <__alt_data_end+0xfffbab8c>
   8668c:	02bfff04 	movi	r10,-4
   86690:	024003c4 	movi	r9,15
   86694:	21800044 	addi	r6,r4,1
   86698:	318d883a 	add	r6,r6,r6
   8669c:	318d883a 	add	r6,r6,r6
   866a0:	318d883a 	add	r6,r6,r6
   866a4:	998d883a 	add	r6,r19,r6
   866a8:	333ffe04 	addi	r12,r6,-8
   866ac:	2017883a 	mov	r11,r4
   866b0:	31800104 	addi	r6,r6,4
   866b4:	34000017 	ldw	r16,0(r6)
   866b8:	31fffd04 	addi	r7,r6,-12
   866bc:	81c0041e 	bne	r16,r7,866d0 <_malloc_r+0x1dc>
   866c0:	0000fb06 	br	86ab0 <_malloc_r+0x5bc>
   866c4:	1801030e 	bge	r3,zero,86ad4 <_malloc_r+0x5e0>
   866c8:	84000317 	ldw	r16,12(r16)
   866cc:	81c0f826 	beq	r16,r7,86ab0 <_malloc_r+0x5bc>
   866d0:	80800117 	ldw	r2,4(r16)
   866d4:	1284703a 	and	r2,r2,r10
   866d8:	1447c83a 	sub	r3,r2,r17
   866dc:	48fff90e 	bge	r9,r3,866c4 <__alt_data_end+0xfffbabd4>
   866e0:	80800317 	ldw	r2,12(r16)
   866e4:	81000217 	ldw	r4,8(r16)
   866e8:	89400054 	ori	r5,r17,1
   866ec:	81400115 	stw	r5,4(r16)
   866f0:	20800315 	stw	r2,12(r4)
   866f4:	11000215 	stw	r4,8(r2)
   866f8:	8463883a 	add	r17,r16,r17
   866fc:	9c400515 	stw	r17,20(r19)
   86700:	9c400415 	stw	r17,16(r19)
   86704:	18800054 	ori	r2,r3,1
   86708:	88800115 	stw	r2,4(r17)
   8670c:	8a000315 	stw	r8,12(r17)
   86710:	8a000215 	stw	r8,8(r17)
   86714:	88e3883a 	add	r17,r17,r3
   86718:	88c00015 	stw	r3,0(r17)
   8671c:	9009883a 	mov	r4,r18
   86720:	008e6980 	call	8e698 <__malloc_unlock>
   86724:	80800204 	addi	r2,r16,8
   86728:	00001b06 	br	86798 <_malloc_r+0x2a4>
   8672c:	04400404 	movi	r17,16
   86730:	89402536 	bltu	r17,r5,867c8 <_malloc_r+0x2d4>
   86734:	008e6740 	call	8e674 <__malloc_lock>
   86738:	00800184 	movi	r2,6
   8673c:	01000084 	movi	r4,2
   86740:	04c00274 	movhi	r19,9
   86744:	1085883a 	add	r2,r2,r2
   86748:	9cc3e604 	addi	r19,r19,3992
   8674c:	1085883a 	add	r2,r2,r2
   86750:	9885883a 	add	r2,r19,r2
   86754:	14000117 	ldw	r16,4(r2)
   86758:	10fffe04 	addi	r3,r2,-8
   8675c:	80c0d926 	beq	r16,r3,86ac4 <_malloc_r+0x5d0>
   86760:	80c00117 	ldw	r3,4(r16)
   86764:	81000317 	ldw	r4,12(r16)
   86768:	00bfff04 	movi	r2,-4
   8676c:	1884703a 	and	r2,r3,r2
   86770:	81400217 	ldw	r5,8(r16)
   86774:	8085883a 	add	r2,r16,r2
   86778:	10c00117 	ldw	r3,4(r2)
   8677c:	29000315 	stw	r4,12(r5)
   86780:	21400215 	stw	r5,8(r4)
   86784:	18c00054 	ori	r3,r3,1
   86788:	10c00115 	stw	r3,4(r2)
   8678c:	9009883a 	mov	r4,r18
   86790:	008e6980 	call	8e698 <__malloc_unlock>
   86794:	80800204 	addi	r2,r16,8
   86798:	dfc00a17 	ldw	ra,40(sp)
   8679c:	df000917 	ldw	fp,36(sp)
   867a0:	ddc00817 	ldw	r23,32(sp)
   867a4:	dd800717 	ldw	r22,28(sp)
   867a8:	dd400617 	ldw	r21,24(sp)
   867ac:	dd000517 	ldw	r20,20(sp)
   867b0:	dcc00417 	ldw	r19,16(sp)
   867b4:	dc800317 	ldw	r18,12(sp)
   867b8:	dc400217 	ldw	r17,8(sp)
   867bc:	dc000117 	ldw	r16,4(sp)
   867c0:	dec00b04 	addi	sp,sp,44
   867c4:	f800283a 	ret
   867c8:	00800304 	movi	r2,12
   867cc:	90800015 	stw	r2,0(r18)
   867d0:	0005883a 	mov	r2,zero
   867d4:	003ff006 	br	86798 <__alt_data_end+0xfffbaca8>
   867d8:	01002004 	movi	r4,128
   867dc:	02001004 	movi	r8,64
   867e0:	01c00fc4 	movi	r7,63
   867e4:	003f6106 	br	8656c <__alt_data_end+0xfffbaa7c>
   867e8:	4009883a 	mov	r4,r8
   867ec:	003f7506 	br	865c4 <__alt_data_end+0xfffbaad4>
   867f0:	81000317 	ldw	r4,12(r16)
   867f4:	003fde06 	br	86770 <__alt_data_end+0xfffbac80>
   867f8:	81c5883a 	add	r2,r16,r7
   867fc:	11400117 	ldw	r5,4(r2)
   86800:	9009883a 	mov	r4,r18
   86804:	29400054 	ori	r5,r5,1
   86808:	11400115 	stw	r5,4(r2)
   8680c:	008e6980 	call	8e698 <__malloc_unlock>
   86810:	80800204 	addi	r2,r16,8
   86814:	003fe006 	br	86798 <__alt_data_end+0xfffbaca8>
   86818:	9c000217 	ldw	r16,8(r19)
   8681c:	00bfff04 	movi	r2,-4
   86820:	85800117 	ldw	r22,4(r16)
   86824:	b0ac703a 	and	r22,r22,r2
   86828:	b4400336 	bltu	r22,r17,86838 <_malloc_r+0x344>
   8682c:	b445c83a 	sub	r2,r22,r17
   86830:	00c003c4 	movi	r3,15
   86834:	18805d16 	blt	r3,r2,869ac <_malloc_r+0x4b8>
   86838:	05c00274 	movhi	r23,9
   8683c:	00800274 	movhi	r2,9
   86840:	10906804 	addi	r2,r2,16800
   86844:	bdc96d04 	addi	r23,r23,9652
   86848:	15400017 	ldw	r21,0(r2)
   8684c:	b8c00017 	ldw	r3,0(r23)
   86850:	00bfffc4 	movi	r2,-1
   86854:	858d883a 	add	r6,r16,r22
   86858:	8d6b883a 	add	r21,r17,r21
   8685c:	1880ea26 	beq	r3,r2,86c08 <_malloc_r+0x714>
   86860:	ad4403c4 	addi	r21,r21,4111
   86864:	00bc0004 	movi	r2,-4096
   86868:	a8aa703a 	and	r21,r21,r2
   8686c:	a80b883a 	mov	r5,r21
   86870:	9009883a 	mov	r4,r18
   86874:	d9800015 	stw	r6,0(sp)
   86878:	00887840 	call	88784 <_sbrk_r>
   8687c:	1029883a 	mov	r20,r2
   86880:	00bfffc4 	movi	r2,-1
   86884:	d9800017 	ldw	r6,0(sp)
   86888:	a080e826 	beq	r20,r2,86c2c <_malloc_r+0x738>
   8688c:	a180a636 	bltu	r20,r6,86b28 <_malloc_r+0x634>
   86890:	07000274 	movhi	fp,9
   86894:	e7107404 	addi	fp,fp,16848
   86898:	e0800017 	ldw	r2,0(fp)
   8689c:	a887883a 	add	r3,r21,r2
   868a0:	e0c00015 	stw	r3,0(fp)
   868a4:	3500e626 	beq	r6,r20,86c40 <_malloc_r+0x74c>
   868a8:	b9000017 	ldw	r4,0(r23)
   868ac:	00bfffc4 	movi	r2,-1
   868b0:	2080ee26 	beq	r4,r2,86c6c <_malloc_r+0x778>
   868b4:	a185c83a 	sub	r2,r20,r6
   868b8:	10c5883a 	add	r2,r2,r3
   868bc:	e0800015 	stw	r2,0(fp)
   868c0:	a0c001cc 	andi	r3,r20,7
   868c4:	1800bc26 	beq	r3,zero,86bb8 <_malloc_r+0x6c4>
   868c8:	a0e9c83a 	sub	r20,r20,r3
   868cc:	00840204 	movi	r2,4104
   868d0:	a5000204 	addi	r20,r20,8
   868d4:	10c7c83a 	sub	r3,r2,r3
   868d8:	a545883a 	add	r2,r20,r21
   868dc:	1083ffcc 	andi	r2,r2,4095
   868e0:	18abc83a 	sub	r21,r3,r2
   868e4:	a80b883a 	mov	r5,r21
   868e8:	9009883a 	mov	r4,r18
   868ec:	00887840 	call	88784 <_sbrk_r>
   868f0:	00ffffc4 	movi	r3,-1
   868f4:	10c0e126 	beq	r2,r3,86c7c <_malloc_r+0x788>
   868f8:	1505c83a 	sub	r2,r2,r20
   868fc:	1545883a 	add	r2,r2,r21
   86900:	10800054 	ori	r2,r2,1
   86904:	e0c00017 	ldw	r3,0(fp)
   86908:	9d000215 	stw	r20,8(r19)
   8690c:	a0800115 	stw	r2,4(r20)
   86910:	a8c7883a 	add	r3,r21,r3
   86914:	e0c00015 	stw	r3,0(fp)
   86918:	84c00e26 	beq	r16,r19,86954 <_malloc_r+0x460>
   8691c:	018003c4 	movi	r6,15
   86920:	3580a72e 	bgeu	r6,r22,86bc0 <_malloc_r+0x6cc>
   86924:	81400117 	ldw	r5,4(r16)
   86928:	013ffe04 	movi	r4,-8
   8692c:	b0bffd04 	addi	r2,r22,-12
   86930:	1104703a 	and	r2,r2,r4
   86934:	2900004c 	andi	r4,r5,1
   86938:	2088b03a 	or	r4,r4,r2
   8693c:	81000115 	stw	r4,4(r16)
   86940:	01400144 	movi	r5,5
   86944:	8089883a 	add	r4,r16,r2
   86948:	21400115 	stw	r5,4(r4)
   8694c:	21400215 	stw	r5,8(r4)
   86950:	3080cd36 	bltu	r6,r2,86c88 <_malloc_r+0x794>
   86954:	00800274 	movhi	r2,9
   86958:	10906704 	addi	r2,r2,16796
   8695c:	11000017 	ldw	r4,0(r2)
   86960:	20c0012e 	bgeu	r4,r3,86968 <_malloc_r+0x474>
   86964:	10c00015 	stw	r3,0(r2)
   86968:	00800274 	movhi	r2,9
   8696c:	10906604 	addi	r2,r2,16792
   86970:	11000017 	ldw	r4,0(r2)
   86974:	9c000217 	ldw	r16,8(r19)
   86978:	20c0012e 	bgeu	r4,r3,86980 <_malloc_r+0x48c>
   8697c:	10c00015 	stw	r3,0(r2)
   86980:	80c00117 	ldw	r3,4(r16)
   86984:	00bfff04 	movi	r2,-4
   86988:	1886703a 	and	r3,r3,r2
   8698c:	1c45c83a 	sub	r2,r3,r17
   86990:	1c400236 	bltu	r3,r17,8699c <_malloc_r+0x4a8>
   86994:	00c003c4 	movi	r3,15
   86998:	18800416 	blt	r3,r2,869ac <_malloc_r+0x4b8>
   8699c:	9009883a 	mov	r4,r18
   869a0:	008e6980 	call	8e698 <__malloc_unlock>
   869a4:	0005883a 	mov	r2,zero
   869a8:	003f7b06 	br	86798 <__alt_data_end+0xfffbaca8>
   869ac:	88c00054 	ori	r3,r17,1
   869b0:	80c00115 	stw	r3,4(r16)
   869b4:	8463883a 	add	r17,r16,r17
   869b8:	10800054 	ori	r2,r2,1
   869bc:	9c400215 	stw	r17,8(r19)
   869c0:	88800115 	stw	r2,4(r17)
   869c4:	9009883a 	mov	r4,r18
   869c8:	008e6980 	call	8e698 <__malloc_unlock>
   869cc:	80800204 	addi	r2,r16,8
   869d0:	003f7106 	br	86798 <__alt_data_end+0xfffbaca8>
   869d4:	00c00504 	movi	r3,20
   869d8:	18804a2e 	bgeu	r3,r2,86b04 <_malloc_r+0x610>
   869dc:	00c01504 	movi	r3,84
   869e0:	18806e36 	bltu	r3,r2,86b9c <_malloc_r+0x6a8>
   869e4:	8804d33a 	srli	r2,r17,12
   869e8:	12001bc4 	addi	r8,r2,111
   869ec:	11c01b84 	addi	r7,r2,110
   869f0:	4209883a 	add	r4,r8,r8
   869f4:	003edd06 	br	8656c <__alt_data_end+0xfffbaa7c>
   869f8:	3804d27a 	srli	r2,r7,9
   869fc:	00c00104 	movi	r3,4
   86a00:	1880442e 	bgeu	r3,r2,86b14 <_malloc_r+0x620>
   86a04:	00c00504 	movi	r3,20
   86a08:	18808136 	bltu	r3,r2,86c10 <_malloc_r+0x71c>
   86a0c:	11401704 	addi	r5,r2,92
   86a10:	10c016c4 	addi	r3,r2,91
   86a14:	294b883a 	add	r5,r5,r5
   86a18:	294b883a 	add	r5,r5,r5
   86a1c:	294b883a 	add	r5,r5,r5
   86a20:	994b883a 	add	r5,r19,r5
   86a24:	28800017 	ldw	r2,0(r5)
   86a28:	01800274 	movhi	r6,9
   86a2c:	297ffe04 	addi	r5,r5,-8
   86a30:	3183e604 	addi	r6,r6,3992
   86a34:	28806526 	beq	r5,r2,86bcc <_malloc_r+0x6d8>
   86a38:	01bfff04 	movi	r6,-4
   86a3c:	10c00117 	ldw	r3,4(r2)
   86a40:	1986703a 	and	r3,r3,r6
   86a44:	38c0022e 	bgeu	r7,r3,86a50 <_malloc_r+0x55c>
   86a48:	10800217 	ldw	r2,8(r2)
   86a4c:	28bffb1e 	bne	r5,r2,86a3c <__alt_data_end+0xfffbaf4c>
   86a50:	11400317 	ldw	r5,12(r2)
   86a54:	98c00117 	ldw	r3,4(r19)
   86a58:	81400315 	stw	r5,12(r16)
   86a5c:	80800215 	stw	r2,8(r16)
   86a60:	2c000215 	stw	r16,8(r5)
   86a64:	14000315 	stw	r16,12(r2)
   86a68:	003ef806 	br	8664c <__alt_data_end+0xfffbab5c>
   86a6c:	88c00054 	ori	r3,r17,1
   86a70:	80c00115 	stw	r3,4(r16)
   86a74:	8463883a 	add	r17,r16,r17
   86a78:	34400515 	stw	r17,20(r6)
   86a7c:	34400415 	stw	r17,16(r6)
   86a80:	10c00054 	ori	r3,r2,1
   86a84:	8a000315 	stw	r8,12(r17)
   86a88:	8a000215 	stw	r8,8(r17)
   86a8c:	88c00115 	stw	r3,4(r17)
   86a90:	88a3883a 	add	r17,r17,r2
   86a94:	88800015 	stw	r2,0(r17)
   86a98:	9009883a 	mov	r4,r18
   86a9c:	008e6980 	call	8e698 <__malloc_unlock>
   86aa0:	80800204 	addi	r2,r16,8
   86aa4:	003f3c06 	br	86798 <__alt_data_end+0xfffbaca8>
   86aa8:	30c00117 	ldw	r3,4(r6)
   86aac:	003ee706 	br	8664c <__alt_data_end+0xfffbab5c>
   86ab0:	5ac00044 	addi	r11,r11,1
   86ab4:	588000cc 	andi	r2,r11,3
   86ab8:	31800204 	addi	r6,r6,8
   86abc:	103efd1e 	bne	r2,zero,866b4 <__alt_data_end+0xfffbabc4>
   86ac0:	00002406 	br	86b54 <_malloc_r+0x660>
   86ac4:	14000317 	ldw	r16,12(r2)
   86ac8:	143f251e 	bne	r2,r16,86760 <__alt_data_end+0xfffbac70>
   86acc:	21000084 	addi	r4,r4,2
   86ad0:	003ebc06 	br	865c4 <__alt_data_end+0xfffbaad4>
   86ad4:	8085883a 	add	r2,r16,r2
   86ad8:	10c00117 	ldw	r3,4(r2)
   86adc:	81000317 	ldw	r4,12(r16)
   86ae0:	81400217 	ldw	r5,8(r16)
   86ae4:	18c00054 	ori	r3,r3,1
   86ae8:	10c00115 	stw	r3,4(r2)
   86aec:	29000315 	stw	r4,12(r5)
   86af0:	21400215 	stw	r5,8(r4)
   86af4:	9009883a 	mov	r4,r18
   86af8:	008e6980 	call	8e698 <__malloc_unlock>
   86afc:	80800204 	addi	r2,r16,8
   86b00:	003f2506 	br	86798 <__alt_data_end+0xfffbaca8>
   86b04:	12001704 	addi	r8,r2,92
   86b08:	11c016c4 	addi	r7,r2,91
   86b0c:	4209883a 	add	r4,r8,r8
   86b10:	003e9606 	br	8656c <__alt_data_end+0xfffbaa7c>
   86b14:	3804d1ba 	srli	r2,r7,6
   86b18:	11400e44 	addi	r5,r2,57
   86b1c:	10c00e04 	addi	r3,r2,56
   86b20:	294b883a 	add	r5,r5,r5
   86b24:	003fbc06 	br	86a18 <__alt_data_end+0xfffbaf28>
   86b28:	84ff5926 	beq	r16,r19,86890 <__alt_data_end+0xfffbada0>
   86b2c:	00800274 	movhi	r2,9
   86b30:	1083e604 	addi	r2,r2,3992
   86b34:	14000217 	ldw	r16,8(r2)
   86b38:	00bfff04 	movi	r2,-4
   86b3c:	80c00117 	ldw	r3,4(r16)
   86b40:	1886703a 	and	r3,r3,r2
   86b44:	003f9106 	br	8698c <__alt_data_end+0xfffbae9c>
   86b48:	60800217 	ldw	r2,8(r12)
   86b4c:	213fffc4 	addi	r4,r4,-1
   86b50:	1300651e 	bne	r2,r12,86ce8 <_malloc_r+0x7f4>
   86b54:	208000cc 	andi	r2,r4,3
   86b58:	633ffe04 	addi	r12,r12,-8
   86b5c:	103ffa1e 	bne	r2,zero,86b48 <__alt_data_end+0xfffbb058>
   86b60:	98800117 	ldw	r2,4(r19)
   86b64:	0146303a 	nor	r3,zero,r5
   86b68:	1884703a 	and	r2,r3,r2
   86b6c:	98800115 	stw	r2,4(r19)
   86b70:	294b883a 	add	r5,r5,r5
   86b74:	117f2836 	bltu	r2,r5,86818 <__alt_data_end+0xfffbad28>
   86b78:	283f2726 	beq	r5,zero,86818 <__alt_data_end+0xfffbad28>
   86b7c:	2886703a 	and	r3,r5,r2
   86b80:	5809883a 	mov	r4,r11
   86b84:	183ec31e 	bne	r3,zero,86694 <__alt_data_end+0xfffbaba4>
   86b88:	294b883a 	add	r5,r5,r5
   86b8c:	2886703a 	and	r3,r5,r2
   86b90:	21000104 	addi	r4,r4,4
   86b94:	183ffc26 	beq	r3,zero,86b88 <__alt_data_end+0xfffbb098>
   86b98:	003ebe06 	br	86694 <__alt_data_end+0xfffbaba4>
   86b9c:	00c05504 	movi	r3,340
   86ba0:	18801236 	bltu	r3,r2,86bec <_malloc_r+0x6f8>
   86ba4:	8804d3fa 	srli	r2,r17,15
   86ba8:	12001e04 	addi	r8,r2,120
   86bac:	11c01dc4 	addi	r7,r2,119
   86bb0:	4209883a 	add	r4,r8,r8
   86bb4:	003e6d06 	br	8656c <__alt_data_end+0xfffbaa7c>
   86bb8:	00c40004 	movi	r3,4096
   86bbc:	003f4606 	br	868d8 <__alt_data_end+0xfffbade8>
   86bc0:	00800044 	movi	r2,1
   86bc4:	a0800115 	stw	r2,4(r20)
   86bc8:	003f7406 	br	8699c <__alt_data_end+0xfffbaeac>
   86bcc:	1805d0ba 	srai	r2,r3,2
   86bd0:	01c00044 	movi	r7,1
   86bd4:	30c00117 	ldw	r3,4(r6)
   86bd8:	388e983a 	sll	r7,r7,r2
   86bdc:	2805883a 	mov	r2,r5
   86be0:	38c6b03a 	or	r3,r7,r3
   86be4:	30c00115 	stw	r3,4(r6)
   86be8:	003f9b06 	br	86a58 <__alt_data_end+0xfffbaf68>
   86bec:	00c15504 	movi	r3,1364
   86bf0:	18801a36 	bltu	r3,r2,86c5c <_malloc_r+0x768>
   86bf4:	8804d4ba 	srli	r2,r17,18
   86bf8:	12001f44 	addi	r8,r2,125
   86bfc:	11c01f04 	addi	r7,r2,124
   86c00:	4209883a 	add	r4,r8,r8
   86c04:	003e5906 	br	8656c <__alt_data_end+0xfffbaa7c>
   86c08:	ad400404 	addi	r21,r21,16
   86c0c:	003f1706 	br	8686c <__alt_data_end+0xfffbad7c>
   86c10:	00c01504 	movi	r3,84
   86c14:	18802336 	bltu	r3,r2,86ca4 <_malloc_r+0x7b0>
   86c18:	3804d33a 	srli	r2,r7,12
   86c1c:	11401bc4 	addi	r5,r2,111
   86c20:	10c01b84 	addi	r3,r2,110
   86c24:	294b883a 	add	r5,r5,r5
   86c28:	003f7b06 	br	86a18 <__alt_data_end+0xfffbaf28>
   86c2c:	9c000217 	ldw	r16,8(r19)
   86c30:	00bfff04 	movi	r2,-4
   86c34:	80c00117 	ldw	r3,4(r16)
   86c38:	1886703a 	and	r3,r3,r2
   86c3c:	003f5306 	br	8698c <__alt_data_end+0xfffbae9c>
   86c40:	3083ffcc 	andi	r2,r6,4095
   86c44:	103f181e 	bne	r2,zero,868a8 <__alt_data_end+0xfffbadb8>
   86c48:	99000217 	ldw	r4,8(r19)
   86c4c:	b545883a 	add	r2,r22,r21
   86c50:	10800054 	ori	r2,r2,1
   86c54:	20800115 	stw	r2,4(r4)
   86c58:	003f3e06 	br	86954 <__alt_data_end+0xfffbae64>
   86c5c:	01003f84 	movi	r4,254
   86c60:	02001fc4 	movi	r8,127
   86c64:	01c01f84 	movi	r7,126
   86c68:	003e4006 	br	8656c <__alt_data_end+0xfffbaa7c>
   86c6c:	00800274 	movhi	r2,9
   86c70:	10896d04 	addi	r2,r2,9652
   86c74:	15000015 	stw	r20,0(r2)
   86c78:	003f1106 	br	868c0 <__alt_data_end+0xfffbadd0>
   86c7c:	00800044 	movi	r2,1
   86c80:	002b883a 	mov	r21,zero
   86c84:	003f1f06 	br	86904 <__alt_data_end+0xfffbae14>
   86c88:	81400204 	addi	r5,r16,8
   86c8c:	9009883a 	mov	r4,r18
   86c90:	00858ac0 	call	858ac <_free_r>
   86c94:	00800274 	movhi	r2,9
   86c98:	10907404 	addi	r2,r2,16848
   86c9c:	10c00017 	ldw	r3,0(r2)
   86ca0:	003f2c06 	br	86954 <__alt_data_end+0xfffbae64>
   86ca4:	00c05504 	movi	r3,340
   86ca8:	18800536 	bltu	r3,r2,86cc0 <_malloc_r+0x7cc>
   86cac:	3804d3fa 	srli	r2,r7,15
   86cb0:	11401e04 	addi	r5,r2,120
   86cb4:	10c01dc4 	addi	r3,r2,119
   86cb8:	294b883a 	add	r5,r5,r5
   86cbc:	003f5606 	br	86a18 <__alt_data_end+0xfffbaf28>
   86cc0:	00c15504 	movi	r3,1364
   86cc4:	18800536 	bltu	r3,r2,86cdc <_malloc_r+0x7e8>
   86cc8:	3804d4ba 	srli	r2,r7,18
   86ccc:	11401f44 	addi	r5,r2,125
   86cd0:	10c01f04 	addi	r3,r2,124
   86cd4:	294b883a 	add	r5,r5,r5
   86cd8:	003f4f06 	br	86a18 <__alt_data_end+0xfffbaf28>
   86cdc:	01403f84 	movi	r5,254
   86ce0:	00c01f84 	movi	r3,126
   86ce4:	003f4c06 	br	86a18 <__alt_data_end+0xfffbaf28>
   86ce8:	98800117 	ldw	r2,4(r19)
   86cec:	003fa006 	br	86b70 <__alt_data_end+0xfffbb080>
   86cf0:	8808d0fa 	srli	r4,r17,3
   86cf4:	20800044 	addi	r2,r4,1
   86cf8:	1085883a 	add	r2,r2,r2
   86cfc:	003e9006 	br	86740 <__alt_data_end+0xfffbac50>

00086d00 <memchr>:
   86d00:	208000cc 	andi	r2,r4,3
   86d04:	280f883a 	mov	r7,r5
   86d08:	10003426 	beq	r2,zero,86ddc <memchr+0xdc>
   86d0c:	30bfffc4 	addi	r2,r6,-1
   86d10:	30001a26 	beq	r6,zero,86d7c <memchr+0x7c>
   86d14:	20c00003 	ldbu	r3,0(r4)
   86d18:	29803fcc 	andi	r6,r5,255
   86d1c:	30c0051e 	bne	r6,r3,86d34 <memchr+0x34>
   86d20:	00001806 	br	86d84 <memchr+0x84>
   86d24:	10001526 	beq	r2,zero,86d7c <memchr+0x7c>
   86d28:	20c00003 	ldbu	r3,0(r4)
   86d2c:	10bfffc4 	addi	r2,r2,-1
   86d30:	30c01426 	beq	r6,r3,86d84 <memchr+0x84>
   86d34:	21000044 	addi	r4,r4,1
   86d38:	20c000cc 	andi	r3,r4,3
   86d3c:	183ff91e 	bne	r3,zero,86d24 <__alt_data_end+0xfffbb234>
   86d40:	020000c4 	movi	r8,3
   86d44:	40801136 	bltu	r8,r2,86d8c <memchr+0x8c>
   86d48:	10000c26 	beq	r2,zero,86d7c <memchr+0x7c>
   86d4c:	20c00003 	ldbu	r3,0(r4)
   86d50:	29403fcc 	andi	r5,r5,255
   86d54:	28c00b26 	beq	r5,r3,86d84 <memchr+0x84>
   86d58:	20c00044 	addi	r3,r4,1
   86d5c:	39803fcc 	andi	r6,r7,255
   86d60:	2089883a 	add	r4,r4,r2
   86d64:	00000306 	br	86d74 <memchr+0x74>
   86d68:	18c00044 	addi	r3,r3,1
   86d6c:	197fffc3 	ldbu	r5,-1(r3)
   86d70:	31400526 	beq	r6,r5,86d88 <memchr+0x88>
   86d74:	1805883a 	mov	r2,r3
   86d78:	20fffb1e 	bne	r4,r3,86d68 <__alt_data_end+0xfffbb278>
   86d7c:	0005883a 	mov	r2,zero
   86d80:	f800283a 	ret
   86d84:	2005883a 	mov	r2,r4
   86d88:	f800283a 	ret
   86d8c:	28c03fcc 	andi	r3,r5,255
   86d90:	1812923a 	slli	r9,r3,8
   86d94:	02ffbff4 	movhi	r11,65279
   86d98:	02a02074 	movhi	r10,32897
   86d9c:	48d2b03a 	or	r9,r9,r3
   86da0:	4806943a 	slli	r3,r9,16
   86da4:	5affbfc4 	addi	r11,r11,-257
   86da8:	52a02004 	addi	r10,r10,-32640
   86dac:	48d2b03a 	or	r9,r9,r3
   86db0:	20c00017 	ldw	r3,0(r4)
   86db4:	48c6f03a 	xor	r3,r9,r3
   86db8:	1acd883a 	add	r6,r3,r11
   86dbc:	00c6303a 	nor	r3,zero,r3
   86dc0:	30c6703a 	and	r3,r6,r3
   86dc4:	1a86703a 	and	r3,r3,r10
   86dc8:	183fe01e 	bne	r3,zero,86d4c <__alt_data_end+0xfffbb25c>
   86dcc:	10bfff04 	addi	r2,r2,-4
   86dd0:	21000104 	addi	r4,r4,4
   86dd4:	40bff636 	bltu	r8,r2,86db0 <__alt_data_end+0xfffbb2c0>
   86dd8:	003fdb06 	br	86d48 <__alt_data_end+0xfffbb258>
   86ddc:	3005883a 	mov	r2,r6
   86de0:	003fd706 	br	86d40 <__alt_data_end+0xfffbb250>

00086de4 <memcpy>:
   86de4:	defffd04 	addi	sp,sp,-12
   86de8:	dfc00215 	stw	ra,8(sp)
   86dec:	dc400115 	stw	r17,4(sp)
   86df0:	dc000015 	stw	r16,0(sp)
   86df4:	00c003c4 	movi	r3,15
   86df8:	2005883a 	mov	r2,r4
   86dfc:	1980452e 	bgeu	r3,r6,86f14 <memcpy+0x130>
   86e00:	2906b03a 	or	r3,r5,r4
   86e04:	18c000cc 	andi	r3,r3,3
   86e08:	1800441e 	bne	r3,zero,86f1c <memcpy+0x138>
   86e0c:	347ffc04 	addi	r17,r6,-16
   86e10:	8822d13a 	srli	r17,r17,4
   86e14:	28c00104 	addi	r3,r5,4
   86e18:	23400104 	addi	r13,r4,4
   86e1c:	8820913a 	slli	r16,r17,4
   86e20:	2b000204 	addi	r12,r5,8
   86e24:	22c00204 	addi	r11,r4,8
   86e28:	84000504 	addi	r16,r16,20
   86e2c:	2a800304 	addi	r10,r5,12
   86e30:	22400304 	addi	r9,r4,12
   86e34:	2c21883a 	add	r16,r5,r16
   86e38:	2811883a 	mov	r8,r5
   86e3c:	200f883a 	mov	r7,r4
   86e40:	41000017 	ldw	r4,0(r8)
   86e44:	1fc00017 	ldw	ra,0(r3)
   86e48:	63c00017 	ldw	r15,0(r12)
   86e4c:	39000015 	stw	r4,0(r7)
   86e50:	53800017 	ldw	r14,0(r10)
   86e54:	6fc00015 	stw	ra,0(r13)
   86e58:	5bc00015 	stw	r15,0(r11)
   86e5c:	4b800015 	stw	r14,0(r9)
   86e60:	18c00404 	addi	r3,r3,16
   86e64:	39c00404 	addi	r7,r7,16
   86e68:	42000404 	addi	r8,r8,16
   86e6c:	6b400404 	addi	r13,r13,16
   86e70:	63000404 	addi	r12,r12,16
   86e74:	5ac00404 	addi	r11,r11,16
   86e78:	52800404 	addi	r10,r10,16
   86e7c:	4a400404 	addi	r9,r9,16
   86e80:	1c3fef1e 	bne	r3,r16,86e40 <__alt_data_end+0xfffbb350>
   86e84:	89c00044 	addi	r7,r17,1
   86e88:	380e913a 	slli	r7,r7,4
   86e8c:	310003cc 	andi	r4,r6,15
   86e90:	02c000c4 	movi	r11,3
   86e94:	11c7883a 	add	r3,r2,r7
   86e98:	29cb883a 	add	r5,r5,r7
   86e9c:	5900212e 	bgeu	r11,r4,86f24 <memcpy+0x140>
   86ea0:	1813883a 	mov	r9,r3
   86ea4:	2811883a 	mov	r8,r5
   86ea8:	200f883a 	mov	r7,r4
   86eac:	42800017 	ldw	r10,0(r8)
   86eb0:	4a400104 	addi	r9,r9,4
   86eb4:	39ffff04 	addi	r7,r7,-4
   86eb8:	4abfff15 	stw	r10,-4(r9)
   86ebc:	42000104 	addi	r8,r8,4
   86ec0:	59fffa36 	bltu	r11,r7,86eac <__alt_data_end+0xfffbb3bc>
   86ec4:	213fff04 	addi	r4,r4,-4
   86ec8:	2008d0ba 	srli	r4,r4,2
   86ecc:	318000cc 	andi	r6,r6,3
   86ed0:	21000044 	addi	r4,r4,1
   86ed4:	2109883a 	add	r4,r4,r4
   86ed8:	2109883a 	add	r4,r4,r4
   86edc:	1907883a 	add	r3,r3,r4
   86ee0:	290b883a 	add	r5,r5,r4
   86ee4:	30000626 	beq	r6,zero,86f00 <memcpy+0x11c>
   86ee8:	198d883a 	add	r6,r3,r6
   86eec:	29c00003 	ldbu	r7,0(r5)
   86ef0:	18c00044 	addi	r3,r3,1
   86ef4:	29400044 	addi	r5,r5,1
   86ef8:	19ffffc5 	stb	r7,-1(r3)
   86efc:	19bffb1e 	bne	r3,r6,86eec <__alt_data_end+0xfffbb3fc>
   86f00:	dfc00217 	ldw	ra,8(sp)
   86f04:	dc400117 	ldw	r17,4(sp)
   86f08:	dc000017 	ldw	r16,0(sp)
   86f0c:	dec00304 	addi	sp,sp,12
   86f10:	f800283a 	ret
   86f14:	2007883a 	mov	r3,r4
   86f18:	003ff206 	br	86ee4 <__alt_data_end+0xfffbb3f4>
   86f1c:	2007883a 	mov	r3,r4
   86f20:	003ff106 	br	86ee8 <__alt_data_end+0xfffbb3f8>
   86f24:	200d883a 	mov	r6,r4
   86f28:	003fee06 	br	86ee4 <__alt_data_end+0xfffbb3f4>

00086f2c <memmove>:
   86f2c:	2005883a 	mov	r2,r4
   86f30:	29000b2e 	bgeu	r5,r4,86f60 <memmove+0x34>
   86f34:	298f883a 	add	r7,r5,r6
   86f38:	21c0092e 	bgeu	r4,r7,86f60 <memmove+0x34>
   86f3c:	2187883a 	add	r3,r4,r6
   86f40:	198bc83a 	sub	r5,r3,r6
   86f44:	30004826 	beq	r6,zero,87068 <memmove+0x13c>
   86f48:	39ffffc4 	addi	r7,r7,-1
   86f4c:	39000003 	ldbu	r4,0(r7)
   86f50:	18ffffc4 	addi	r3,r3,-1
   86f54:	19000005 	stb	r4,0(r3)
   86f58:	28fffb1e 	bne	r5,r3,86f48 <__alt_data_end+0xfffbb458>
   86f5c:	f800283a 	ret
   86f60:	00c003c4 	movi	r3,15
   86f64:	1980412e 	bgeu	r3,r6,8706c <memmove+0x140>
   86f68:	2886b03a 	or	r3,r5,r2
   86f6c:	18c000cc 	andi	r3,r3,3
   86f70:	1800401e 	bne	r3,zero,87074 <memmove+0x148>
   86f74:	33fffc04 	addi	r15,r6,-16
   86f78:	781ed13a 	srli	r15,r15,4
   86f7c:	28c00104 	addi	r3,r5,4
   86f80:	13400104 	addi	r13,r2,4
   86f84:	781c913a 	slli	r14,r15,4
   86f88:	2b000204 	addi	r12,r5,8
   86f8c:	12c00204 	addi	r11,r2,8
   86f90:	73800504 	addi	r14,r14,20
   86f94:	2a800304 	addi	r10,r5,12
   86f98:	12400304 	addi	r9,r2,12
   86f9c:	2b9d883a 	add	r14,r5,r14
   86fa0:	2811883a 	mov	r8,r5
   86fa4:	100f883a 	mov	r7,r2
   86fa8:	41000017 	ldw	r4,0(r8)
   86fac:	39c00404 	addi	r7,r7,16
   86fb0:	18c00404 	addi	r3,r3,16
   86fb4:	393ffc15 	stw	r4,-16(r7)
   86fb8:	193ffc17 	ldw	r4,-16(r3)
   86fbc:	6b400404 	addi	r13,r13,16
   86fc0:	5ac00404 	addi	r11,r11,16
   86fc4:	693ffc15 	stw	r4,-16(r13)
   86fc8:	61000017 	ldw	r4,0(r12)
   86fcc:	4a400404 	addi	r9,r9,16
   86fd0:	42000404 	addi	r8,r8,16
   86fd4:	593ffc15 	stw	r4,-16(r11)
   86fd8:	51000017 	ldw	r4,0(r10)
   86fdc:	63000404 	addi	r12,r12,16
   86fe0:	52800404 	addi	r10,r10,16
   86fe4:	493ffc15 	stw	r4,-16(r9)
   86fe8:	1bbfef1e 	bne	r3,r14,86fa8 <__alt_data_end+0xfffbb4b8>
   86fec:	79000044 	addi	r4,r15,1
   86ff0:	2008913a 	slli	r4,r4,4
   86ff4:	328003cc 	andi	r10,r6,15
   86ff8:	02c000c4 	movi	r11,3
   86ffc:	1107883a 	add	r3,r2,r4
   87000:	290b883a 	add	r5,r5,r4
   87004:	5a801e2e 	bgeu	r11,r10,87080 <memmove+0x154>
   87008:	1813883a 	mov	r9,r3
   8700c:	2811883a 	mov	r8,r5
   87010:	500f883a 	mov	r7,r10
   87014:	41000017 	ldw	r4,0(r8)
   87018:	4a400104 	addi	r9,r9,4
   8701c:	39ffff04 	addi	r7,r7,-4
   87020:	493fff15 	stw	r4,-4(r9)
   87024:	42000104 	addi	r8,r8,4
   87028:	59fffa36 	bltu	r11,r7,87014 <__alt_data_end+0xfffbb524>
   8702c:	513fff04 	addi	r4,r10,-4
   87030:	2008d0ba 	srli	r4,r4,2
   87034:	318000cc 	andi	r6,r6,3
   87038:	21000044 	addi	r4,r4,1
   8703c:	2109883a 	add	r4,r4,r4
   87040:	2109883a 	add	r4,r4,r4
   87044:	1907883a 	add	r3,r3,r4
   87048:	290b883a 	add	r5,r5,r4
   8704c:	30000b26 	beq	r6,zero,8707c <memmove+0x150>
   87050:	198d883a 	add	r6,r3,r6
   87054:	29c00003 	ldbu	r7,0(r5)
   87058:	18c00044 	addi	r3,r3,1
   8705c:	29400044 	addi	r5,r5,1
   87060:	19ffffc5 	stb	r7,-1(r3)
   87064:	19bffb1e 	bne	r3,r6,87054 <__alt_data_end+0xfffbb564>
   87068:	f800283a 	ret
   8706c:	1007883a 	mov	r3,r2
   87070:	003ff606 	br	8704c <__alt_data_end+0xfffbb55c>
   87074:	1007883a 	mov	r3,r2
   87078:	003ff506 	br	87050 <__alt_data_end+0xfffbb560>
   8707c:	f800283a 	ret
   87080:	500d883a 	mov	r6,r10
   87084:	003ff106 	br	8704c <__alt_data_end+0xfffbb55c>

00087088 <memset>:
   87088:	20c000cc 	andi	r3,r4,3
   8708c:	2005883a 	mov	r2,r4
   87090:	18004426 	beq	r3,zero,871a4 <memset+0x11c>
   87094:	31ffffc4 	addi	r7,r6,-1
   87098:	30004026 	beq	r6,zero,8719c <memset+0x114>
   8709c:	2813883a 	mov	r9,r5
   870a0:	200d883a 	mov	r6,r4
   870a4:	2007883a 	mov	r3,r4
   870a8:	00000406 	br	870bc <memset+0x34>
   870ac:	3a3fffc4 	addi	r8,r7,-1
   870b0:	31800044 	addi	r6,r6,1
   870b4:	38003926 	beq	r7,zero,8719c <memset+0x114>
   870b8:	400f883a 	mov	r7,r8
   870bc:	18c00044 	addi	r3,r3,1
   870c0:	32400005 	stb	r9,0(r6)
   870c4:	1a0000cc 	andi	r8,r3,3
   870c8:	403ff81e 	bne	r8,zero,870ac <__alt_data_end+0xfffbb5bc>
   870cc:	010000c4 	movi	r4,3
   870d0:	21c02d2e 	bgeu	r4,r7,87188 <memset+0x100>
   870d4:	29003fcc 	andi	r4,r5,255
   870d8:	200c923a 	slli	r6,r4,8
   870dc:	3108b03a 	or	r4,r6,r4
   870e0:	200c943a 	slli	r6,r4,16
   870e4:	218cb03a 	or	r6,r4,r6
   870e8:	010003c4 	movi	r4,15
   870ec:	21c0182e 	bgeu	r4,r7,87150 <memset+0xc8>
   870f0:	3b3ffc04 	addi	r12,r7,-16
   870f4:	6018d13a 	srli	r12,r12,4
   870f8:	1a000104 	addi	r8,r3,4
   870fc:	1ac00204 	addi	r11,r3,8
   87100:	6008913a 	slli	r4,r12,4
   87104:	1a800304 	addi	r10,r3,12
   87108:	1813883a 	mov	r9,r3
   8710c:	21000504 	addi	r4,r4,20
   87110:	1909883a 	add	r4,r3,r4
   87114:	49800015 	stw	r6,0(r9)
   87118:	41800015 	stw	r6,0(r8)
   8711c:	59800015 	stw	r6,0(r11)
   87120:	51800015 	stw	r6,0(r10)
   87124:	42000404 	addi	r8,r8,16
   87128:	4a400404 	addi	r9,r9,16
   8712c:	5ac00404 	addi	r11,r11,16
   87130:	52800404 	addi	r10,r10,16
   87134:	413ff71e 	bne	r8,r4,87114 <__alt_data_end+0xfffbb624>
   87138:	63000044 	addi	r12,r12,1
   8713c:	6018913a 	slli	r12,r12,4
   87140:	39c003cc 	andi	r7,r7,15
   87144:	010000c4 	movi	r4,3
   87148:	1b07883a 	add	r3,r3,r12
   8714c:	21c00e2e 	bgeu	r4,r7,87188 <memset+0x100>
   87150:	1813883a 	mov	r9,r3
   87154:	3811883a 	mov	r8,r7
   87158:	010000c4 	movi	r4,3
   8715c:	49800015 	stw	r6,0(r9)
   87160:	423fff04 	addi	r8,r8,-4
   87164:	4a400104 	addi	r9,r9,4
   87168:	223ffc36 	bltu	r4,r8,8715c <__alt_data_end+0xfffbb66c>
   8716c:	393fff04 	addi	r4,r7,-4
   87170:	2008d0ba 	srli	r4,r4,2
   87174:	39c000cc 	andi	r7,r7,3
   87178:	21000044 	addi	r4,r4,1
   8717c:	2109883a 	add	r4,r4,r4
   87180:	2109883a 	add	r4,r4,r4
   87184:	1907883a 	add	r3,r3,r4
   87188:	38000526 	beq	r7,zero,871a0 <memset+0x118>
   8718c:	19cf883a 	add	r7,r3,r7
   87190:	19400005 	stb	r5,0(r3)
   87194:	18c00044 	addi	r3,r3,1
   87198:	38fffd1e 	bne	r7,r3,87190 <__alt_data_end+0xfffbb6a0>
   8719c:	f800283a 	ret
   871a0:	f800283a 	ret
   871a4:	2007883a 	mov	r3,r4
   871a8:	300f883a 	mov	r7,r6
   871ac:	003fc706 	br	870cc <__alt_data_end+0xfffbb5dc>

000871b0 <_Balloc>:
   871b0:	20801317 	ldw	r2,76(r4)
   871b4:	defffc04 	addi	sp,sp,-16
   871b8:	dc400115 	stw	r17,4(sp)
   871bc:	dc000015 	stw	r16,0(sp)
   871c0:	dfc00315 	stw	ra,12(sp)
   871c4:	dc800215 	stw	r18,8(sp)
   871c8:	2023883a 	mov	r17,r4
   871cc:	2821883a 	mov	r16,r5
   871d0:	10000f26 	beq	r2,zero,87210 <_Balloc+0x60>
   871d4:	8407883a 	add	r3,r16,r16
   871d8:	18c7883a 	add	r3,r3,r3
   871dc:	10c7883a 	add	r3,r2,r3
   871e0:	18800017 	ldw	r2,0(r3)
   871e4:	10001126 	beq	r2,zero,8722c <_Balloc+0x7c>
   871e8:	11000017 	ldw	r4,0(r2)
   871ec:	19000015 	stw	r4,0(r3)
   871f0:	10000415 	stw	zero,16(r2)
   871f4:	10000315 	stw	zero,12(r2)
   871f8:	dfc00317 	ldw	ra,12(sp)
   871fc:	dc800217 	ldw	r18,8(sp)
   87200:	dc400117 	ldw	r17,4(sp)
   87204:	dc000017 	ldw	r16,0(sp)
   87208:	dec00404 	addi	sp,sp,16
   8720c:	f800283a 	ret
   87210:	01800844 	movi	r6,33
   87214:	01400104 	movi	r5,4
   87218:	008a0ec0 	call	8a0ec <_calloc_r>
   8721c:	88801315 	stw	r2,76(r17)
   87220:	103fec1e 	bne	r2,zero,871d4 <__alt_data_end+0xfffbb6e4>
   87224:	0005883a 	mov	r2,zero
   87228:	003ff306 	br	871f8 <__alt_data_end+0xfffbb708>
   8722c:	01400044 	movi	r5,1
   87230:	2c24983a 	sll	r18,r5,r16
   87234:	8809883a 	mov	r4,r17
   87238:	91800144 	addi	r6,r18,5
   8723c:	318d883a 	add	r6,r6,r6
   87240:	318d883a 	add	r6,r6,r6
   87244:	008a0ec0 	call	8a0ec <_calloc_r>
   87248:	103ff626 	beq	r2,zero,87224 <__alt_data_end+0xfffbb734>
   8724c:	14000115 	stw	r16,4(r2)
   87250:	14800215 	stw	r18,8(r2)
   87254:	003fe606 	br	871f0 <__alt_data_end+0xfffbb700>

00087258 <_Bfree>:
   87258:	28000826 	beq	r5,zero,8727c <_Bfree+0x24>
   8725c:	28c00117 	ldw	r3,4(r5)
   87260:	20801317 	ldw	r2,76(r4)
   87264:	18c7883a 	add	r3,r3,r3
   87268:	18c7883a 	add	r3,r3,r3
   8726c:	10c5883a 	add	r2,r2,r3
   87270:	10c00017 	ldw	r3,0(r2)
   87274:	28c00015 	stw	r3,0(r5)
   87278:	11400015 	stw	r5,0(r2)
   8727c:	f800283a 	ret

00087280 <__multadd>:
   87280:	defffa04 	addi	sp,sp,-24
   87284:	dc800315 	stw	r18,12(sp)
   87288:	dc400215 	stw	r17,8(sp)
   8728c:	dc000115 	stw	r16,4(sp)
   87290:	2823883a 	mov	r17,r5
   87294:	2c000417 	ldw	r16,16(r5)
   87298:	dfc00515 	stw	ra,20(sp)
   8729c:	dcc00415 	stw	r19,16(sp)
   872a0:	2025883a 	mov	r18,r4
   872a4:	29400504 	addi	r5,r5,20
   872a8:	0011883a 	mov	r8,zero
   872ac:	28c00017 	ldw	r3,0(r5)
   872b0:	29400104 	addi	r5,r5,4
   872b4:	42000044 	addi	r8,r8,1
   872b8:	18bfffcc 	andi	r2,r3,65535
   872bc:	1185383a 	mul	r2,r2,r6
   872c0:	1806d43a 	srli	r3,r3,16
   872c4:	11cf883a 	add	r7,r2,r7
   872c8:	3808d43a 	srli	r4,r7,16
   872cc:	1987383a 	mul	r3,r3,r6
   872d0:	38bfffcc 	andi	r2,r7,65535
   872d4:	1907883a 	add	r3,r3,r4
   872d8:	1808943a 	slli	r4,r3,16
   872dc:	180ed43a 	srli	r7,r3,16
   872e0:	2085883a 	add	r2,r4,r2
   872e4:	28bfff15 	stw	r2,-4(r5)
   872e8:	443ff016 	blt	r8,r16,872ac <__alt_data_end+0xfffbb7bc>
   872ec:	38000926 	beq	r7,zero,87314 <__multadd+0x94>
   872f0:	88800217 	ldw	r2,8(r17)
   872f4:	80800f0e 	bge	r16,r2,87334 <__multadd+0xb4>
   872f8:	80800144 	addi	r2,r16,5
   872fc:	1085883a 	add	r2,r2,r2
   87300:	1085883a 	add	r2,r2,r2
   87304:	8885883a 	add	r2,r17,r2
   87308:	11c00015 	stw	r7,0(r2)
   8730c:	84000044 	addi	r16,r16,1
   87310:	8c000415 	stw	r16,16(r17)
   87314:	8805883a 	mov	r2,r17
   87318:	dfc00517 	ldw	ra,20(sp)
   8731c:	dcc00417 	ldw	r19,16(sp)
   87320:	dc800317 	ldw	r18,12(sp)
   87324:	dc400217 	ldw	r17,8(sp)
   87328:	dc000117 	ldw	r16,4(sp)
   8732c:	dec00604 	addi	sp,sp,24
   87330:	f800283a 	ret
   87334:	89400117 	ldw	r5,4(r17)
   87338:	9009883a 	mov	r4,r18
   8733c:	d9c00015 	stw	r7,0(sp)
   87340:	29400044 	addi	r5,r5,1
   87344:	00871b00 	call	871b0 <_Balloc>
   87348:	89800417 	ldw	r6,16(r17)
   8734c:	89400304 	addi	r5,r17,12
   87350:	11000304 	addi	r4,r2,12
   87354:	31800084 	addi	r6,r6,2
   87358:	318d883a 	add	r6,r6,r6
   8735c:	318d883a 	add	r6,r6,r6
   87360:	1027883a 	mov	r19,r2
   87364:	0086de40 	call	86de4 <memcpy>
   87368:	d9c00017 	ldw	r7,0(sp)
   8736c:	88000a26 	beq	r17,zero,87398 <__multadd+0x118>
   87370:	88c00117 	ldw	r3,4(r17)
   87374:	90801317 	ldw	r2,76(r18)
   87378:	18c7883a 	add	r3,r3,r3
   8737c:	18c7883a 	add	r3,r3,r3
   87380:	10c5883a 	add	r2,r2,r3
   87384:	10c00017 	ldw	r3,0(r2)
   87388:	88c00015 	stw	r3,0(r17)
   8738c:	14400015 	stw	r17,0(r2)
   87390:	9823883a 	mov	r17,r19
   87394:	003fd806 	br	872f8 <__alt_data_end+0xfffbb808>
   87398:	9823883a 	mov	r17,r19
   8739c:	003fd606 	br	872f8 <__alt_data_end+0xfffbb808>

000873a0 <__s2b>:
   873a0:	defff904 	addi	sp,sp,-28
   873a4:	dc400115 	stw	r17,4(sp)
   873a8:	dc000015 	stw	r16,0(sp)
   873ac:	2023883a 	mov	r17,r4
   873b0:	2821883a 	mov	r16,r5
   873b4:	39000204 	addi	r4,r7,8
   873b8:	01400244 	movi	r5,9
   873bc:	dcc00315 	stw	r19,12(sp)
   873c0:	dc800215 	stw	r18,8(sp)
   873c4:	dfc00615 	stw	ra,24(sp)
   873c8:	dd400515 	stw	r21,20(sp)
   873cc:	dd000415 	stw	r20,16(sp)
   873d0:	3825883a 	mov	r18,r7
   873d4:	3027883a 	mov	r19,r6
   873d8:	008103c0 	call	8103c <__divsi3>
   873dc:	00c00044 	movi	r3,1
   873e0:	000b883a 	mov	r5,zero
   873e4:	1880030e 	bge	r3,r2,873f4 <__s2b+0x54>
   873e8:	18c7883a 	add	r3,r3,r3
   873ec:	29400044 	addi	r5,r5,1
   873f0:	18bffd16 	blt	r3,r2,873e8 <__alt_data_end+0xfffbb8f8>
   873f4:	8809883a 	mov	r4,r17
   873f8:	00871b00 	call	871b0 <_Balloc>
   873fc:	d8c00717 	ldw	r3,28(sp)
   87400:	10c00515 	stw	r3,20(r2)
   87404:	00c00044 	movi	r3,1
   87408:	10c00415 	stw	r3,16(r2)
   8740c:	00c00244 	movi	r3,9
   87410:	1cc0210e 	bge	r3,r19,87498 <__s2b+0xf8>
   87414:	80eb883a 	add	r21,r16,r3
   87418:	a829883a 	mov	r20,r21
   8741c:	84e1883a 	add	r16,r16,r19
   87420:	a1c00007 	ldb	r7,0(r20)
   87424:	01800284 	movi	r6,10
   87428:	a5000044 	addi	r20,r20,1
   8742c:	100b883a 	mov	r5,r2
   87430:	39fff404 	addi	r7,r7,-48
   87434:	8809883a 	mov	r4,r17
   87438:	00872800 	call	87280 <__multadd>
   8743c:	a43ff81e 	bne	r20,r16,87420 <__alt_data_end+0xfffbb930>
   87440:	ace1883a 	add	r16,r21,r19
   87444:	843ffe04 	addi	r16,r16,-8
   87448:	9c800a0e 	bge	r19,r18,87474 <__s2b+0xd4>
   8744c:	94e5c83a 	sub	r18,r18,r19
   87450:	84a5883a 	add	r18,r16,r18
   87454:	81c00007 	ldb	r7,0(r16)
   87458:	01800284 	movi	r6,10
   8745c:	84000044 	addi	r16,r16,1
   87460:	100b883a 	mov	r5,r2
   87464:	39fff404 	addi	r7,r7,-48
   87468:	8809883a 	mov	r4,r17
   8746c:	00872800 	call	87280 <__multadd>
   87470:	84bff81e 	bne	r16,r18,87454 <__alt_data_end+0xfffbb964>
   87474:	dfc00617 	ldw	ra,24(sp)
   87478:	dd400517 	ldw	r21,20(sp)
   8747c:	dd000417 	ldw	r20,16(sp)
   87480:	dcc00317 	ldw	r19,12(sp)
   87484:	dc800217 	ldw	r18,8(sp)
   87488:	dc400117 	ldw	r17,4(sp)
   8748c:	dc000017 	ldw	r16,0(sp)
   87490:	dec00704 	addi	sp,sp,28
   87494:	f800283a 	ret
   87498:	84000284 	addi	r16,r16,10
   8749c:	1827883a 	mov	r19,r3
   874a0:	003fe906 	br	87448 <__alt_data_end+0xfffbb958>

000874a4 <__hi0bits>:
   874a4:	20bfffec 	andhi	r2,r4,65535
   874a8:	1000141e 	bne	r2,zero,874fc <__hi0bits+0x58>
   874ac:	2008943a 	slli	r4,r4,16
   874b0:	00800404 	movi	r2,16
   874b4:	20ffc02c 	andhi	r3,r4,65280
   874b8:	1800021e 	bne	r3,zero,874c4 <__hi0bits+0x20>
   874bc:	2008923a 	slli	r4,r4,8
   874c0:	10800204 	addi	r2,r2,8
   874c4:	20fc002c 	andhi	r3,r4,61440
   874c8:	1800021e 	bne	r3,zero,874d4 <__hi0bits+0x30>
   874cc:	2008913a 	slli	r4,r4,4
   874d0:	10800104 	addi	r2,r2,4
   874d4:	20f0002c 	andhi	r3,r4,49152
   874d8:	1800031e 	bne	r3,zero,874e8 <__hi0bits+0x44>
   874dc:	2109883a 	add	r4,r4,r4
   874e0:	10800084 	addi	r2,r2,2
   874e4:	2109883a 	add	r4,r4,r4
   874e8:	20000316 	blt	r4,zero,874f8 <__hi0bits+0x54>
   874ec:	2110002c 	andhi	r4,r4,16384
   874f0:	2000041e 	bne	r4,zero,87504 <__hi0bits+0x60>
   874f4:	00800804 	movi	r2,32
   874f8:	f800283a 	ret
   874fc:	0005883a 	mov	r2,zero
   87500:	003fec06 	br	874b4 <__alt_data_end+0xfffbb9c4>
   87504:	10800044 	addi	r2,r2,1
   87508:	f800283a 	ret

0008750c <__lo0bits>:
   8750c:	20c00017 	ldw	r3,0(r4)
   87510:	188001cc 	andi	r2,r3,7
   87514:	10000826 	beq	r2,zero,87538 <__lo0bits+0x2c>
   87518:	1880004c 	andi	r2,r3,1
   8751c:	1000211e 	bne	r2,zero,875a4 <__lo0bits+0x98>
   87520:	1880008c 	andi	r2,r3,2
   87524:	1000211e 	bne	r2,zero,875ac <__lo0bits+0xa0>
   87528:	1806d0ba 	srli	r3,r3,2
   8752c:	00800084 	movi	r2,2
   87530:	20c00015 	stw	r3,0(r4)
   87534:	f800283a 	ret
   87538:	18bfffcc 	andi	r2,r3,65535
   8753c:	10001326 	beq	r2,zero,8758c <__lo0bits+0x80>
   87540:	0005883a 	mov	r2,zero
   87544:	19403fcc 	andi	r5,r3,255
   87548:	2800021e 	bne	r5,zero,87554 <__lo0bits+0x48>
   8754c:	1806d23a 	srli	r3,r3,8
   87550:	10800204 	addi	r2,r2,8
   87554:	194003cc 	andi	r5,r3,15
   87558:	2800021e 	bne	r5,zero,87564 <__lo0bits+0x58>
   8755c:	1806d13a 	srli	r3,r3,4
   87560:	10800104 	addi	r2,r2,4
   87564:	194000cc 	andi	r5,r3,3
   87568:	2800021e 	bne	r5,zero,87574 <__lo0bits+0x68>
   8756c:	1806d0ba 	srli	r3,r3,2
   87570:	10800084 	addi	r2,r2,2
   87574:	1940004c 	andi	r5,r3,1
   87578:	2800081e 	bne	r5,zero,8759c <__lo0bits+0x90>
   8757c:	1806d07a 	srli	r3,r3,1
   87580:	1800051e 	bne	r3,zero,87598 <__lo0bits+0x8c>
   87584:	00800804 	movi	r2,32
   87588:	f800283a 	ret
   8758c:	1806d43a 	srli	r3,r3,16
   87590:	00800404 	movi	r2,16
   87594:	003feb06 	br	87544 <__alt_data_end+0xfffbba54>
   87598:	10800044 	addi	r2,r2,1
   8759c:	20c00015 	stw	r3,0(r4)
   875a0:	f800283a 	ret
   875a4:	0005883a 	mov	r2,zero
   875a8:	f800283a 	ret
   875ac:	1806d07a 	srli	r3,r3,1
   875b0:	00800044 	movi	r2,1
   875b4:	20c00015 	stw	r3,0(r4)
   875b8:	f800283a 	ret

000875bc <__i2b>:
   875bc:	defffd04 	addi	sp,sp,-12
   875c0:	dc000015 	stw	r16,0(sp)
   875c4:	04000044 	movi	r16,1
   875c8:	dc400115 	stw	r17,4(sp)
   875cc:	2823883a 	mov	r17,r5
   875d0:	800b883a 	mov	r5,r16
   875d4:	dfc00215 	stw	ra,8(sp)
   875d8:	00871b00 	call	871b0 <_Balloc>
   875dc:	14400515 	stw	r17,20(r2)
   875e0:	14000415 	stw	r16,16(r2)
   875e4:	dfc00217 	ldw	ra,8(sp)
   875e8:	dc400117 	ldw	r17,4(sp)
   875ec:	dc000017 	ldw	r16,0(sp)
   875f0:	dec00304 	addi	sp,sp,12
   875f4:	f800283a 	ret

000875f8 <__multiply>:
   875f8:	defffa04 	addi	sp,sp,-24
   875fc:	dcc00315 	stw	r19,12(sp)
   87600:	dc800215 	stw	r18,8(sp)
   87604:	34c00417 	ldw	r19,16(r6)
   87608:	2c800417 	ldw	r18,16(r5)
   8760c:	dd000415 	stw	r20,16(sp)
   87610:	dc400115 	stw	r17,4(sp)
   87614:	dfc00515 	stw	ra,20(sp)
   87618:	dc000015 	stw	r16,0(sp)
   8761c:	2829883a 	mov	r20,r5
   87620:	3023883a 	mov	r17,r6
   87624:	94c0050e 	bge	r18,r19,8763c <__multiply+0x44>
   87628:	9007883a 	mov	r3,r18
   8762c:	3029883a 	mov	r20,r6
   87630:	9825883a 	mov	r18,r19
   87634:	2823883a 	mov	r17,r5
   87638:	1827883a 	mov	r19,r3
   8763c:	a0800217 	ldw	r2,8(r20)
   87640:	94e1883a 	add	r16,r18,r19
   87644:	a1400117 	ldw	r5,4(r20)
   87648:	1400010e 	bge	r2,r16,87650 <__multiply+0x58>
   8764c:	29400044 	addi	r5,r5,1
   87650:	00871b00 	call	871b0 <_Balloc>
   87654:	8415883a 	add	r10,r16,r16
   87658:	12c00504 	addi	r11,r2,20
   8765c:	5295883a 	add	r10,r10,r10
   87660:	5a95883a 	add	r10,r11,r10
   87664:	5807883a 	mov	r3,r11
   87668:	5a80032e 	bgeu	r11,r10,87678 <__multiply+0x80>
   8766c:	18000015 	stw	zero,0(r3)
   87670:	18c00104 	addi	r3,r3,4
   87674:	1abffd36 	bltu	r3,r10,8766c <__alt_data_end+0xfffbbb7c>
   87678:	9ce7883a 	add	r19,r19,r19
   8767c:	94a5883a 	add	r18,r18,r18
   87680:	89800504 	addi	r6,r17,20
   87684:	9ce7883a 	add	r19,r19,r19
   87688:	a3400504 	addi	r13,r20,20
   8768c:	94a5883a 	add	r18,r18,r18
   87690:	34d9883a 	add	r12,r6,r19
   87694:	6c93883a 	add	r9,r13,r18
   87698:	3300422e 	bgeu	r6,r12,877a4 <__multiply+0x1ac>
   8769c:	37c00017 	ldw	ra,0(r6)
   876a0:	fbffffcc 	andi	r15,ra,65535
   876a4:	78001b26 	beq	r15,zero,87714 <__multiply+0x11c>
   876a8:	5811883a 	mov	r8,r11
   876ac:	681d883a 	mov	r14,r13
   876b0:	000f883a 	mov	r7,zero
   876b4:	71000017 	ldw	r4,0(r14)
   876b8:	40c00017 	ldw	r3,0(r8)
   876bc:	73800104 	addi	r14,r14,4
   876c0:	217fffcc 	andi	r5,r4,65535
   876c4:	2bcb383a 	mul	r5,r5,r15
   876c8:	2008d43a 	srli	r4,r4,16
   876cc:	1c7fffcc 	andi	r17,r3,65535
   876d0:	2c4b883a 	add	r5,r5,r17
   876d4:	29cb883a 	add	r5,r5,r7
   876d8:	23c9383a 	mul	r4,r4,r15
   876dc:	1806d43a 	srli	r3,r3,16
   876e0:	280ed43a 	srli	r7,r5,16
   876e4:	297fffcc 	andi	r5,r5,65535
   876e8:	20c7883a 	add	r3,r4,r3
   876ec:	19c7883a 	add	r3,r3,r7
   876f0:	1808943a 	slli	r4,r3,16
   876f4:	4023883a 	mov	r17,r8
   876f8:	180ed43a 	srli	r7,r3,16
   876fc:	214ab03a 	or	r5,r4,r5
   87700:	41400015 	stw	r5,0(r8)
   87704:	42000104 	addi	r8,r8,4
   87708:	727fea36 	bltu	r14,r9,876b4 <__alt_data_end+0xfffbbbc4>
   8770c:	89c00115 	stw	r7,4(r17)
   87710:	37c00017 	ldw	ra,0(r6)
   87714:	f83ed43a 	srli	ra,ra,16
   87718:	f8001f26 	beq	ra,zero,87798 <__multiply+0x1a0>
   8771c:	58c00017 	ldw	r3,0(r11)
   87720:	681d883a 	mov	r14,r13
   87724:	581f883a 	mov	r15,r11
   87728:	1811883a 	mov	r8,r3
   8772c:	5825883a 	mov	r18,r11
   87730:	000f883a 	mov	r7,zero
   87734:	00000106 	br	8773c <__multiply+0x144>
   87738:	8825883a 	mov	r18,r17
   8773c:	7140000b 	ldhu	r5,0(r14)
   87740:	4010d43a 	srli	r8,r8,16
   87744:	193fffcc 	andi	r4,r3,65535
   87748:	2fcb383a 	mul	r5,r5,ra
   8774c:	7bc00104 	addi	r15,r15,4
   87750:	73800104 	addi	r14,r14,4
   87754:	2a0b883a 	add	r5,r5,r8
   87758:	29cb883a 	add	r5,r5,r7
   8775c:	2806943a 	slli	r3,r5,16
   87760:	94400104 	addi	r17,r18,4
   87764:	280ad43a 	srli	r5,r5,16
   87768:	1908b03a 	or	r4,r3,r4
   8776c:	793fff15 	stw	r4,-4(r15)
   87770:	70ffff17 	ldw	r3,-4(r14)
   87774:	8a000017 	ldw	r8,0(r17)
   87778:	1806d43a 	srli	r3,r3,16
   8777c:	413fffcc 	andi	r4,r8,65535
   87780:	1fc7383a 	mul	r3,r3,ra
   87784:	1907883a 	add	r3,r3,r4
   87788:	1947883a 	add	r3,r3,r5
   8778c:	180ed43a 	srli	r7,r3,16
   87790:	727fe936 	bltu	r14,r9,87738 <__alt_data_end+0xfffbbc48>
   87794:	90c00115 	stw	r3,4(r18)
   87798:	31800104 	addi	r6,r6,4
   8779c:	5ac00104 	addi	r11,r11,4
   877a0:	333fbe36 	bltu	r6,r12,8769c <__alt_data_end+0xfffbbbac>
   877a4:	0400090e 	bge	zero,r16,877cc <__multiply+0x1d4>
   877a8:	50ffff17 	ldw	r3,-4(r10)
   877ac:	52bfff04 	addi	r10,r10,-4
   877b0:	18000326 	beq	r3,zero,877c0 <__multiply+0x1c8>
   877b4:	00000506 	br	877cc <__multiply+0x1d4>
   877b8:	50c00017 	ldw	r3,0(r10)
   877bc:	1800031e 	bne	r3,zero,877cc <__multiply+0x1d4>
   877c0:	843fffc4 	addi	r16,r16,-1
   877c4:	52bfff04 	addi	r10,r10,-4
   877c8:	803ffb1e 	bne	r16,zero,877b8 <__alt_data_end+0xfffbbcc8>
   877cc:	14000415 	stw	r16,16(r2)
   877d0:	dfc00517 	ldw	ra,20(sp)
   877d4:	dd000417 	ldw	r20,16(sp)
   877d8:	dcc00317 	ldw	r19,12(sp)
   877dc:	dc800217 	ldw	r18,8(sp)
   877e0:	dc400117 	ldw	r17,4(sp)
   877e4:	dc000017 	ldw	r16,0(sp)
   877e8:	dec00604 	addi	sp,sp,24
   877ec:	f800283a 	ret

000877f0 <__pow5mult>:
   877f0:	defffa04 	addi	sp,sp,-24
   877f4:	dcc00315 	stw	r19,12(sp)
   877f8:	dc000015 	stw	r16,0(sp)
   877fc:	dfc00515 	stw	ra,20(sp)
   87800:	dd000415 	stw	r20,16(sp)
   87804:	dc800215 	stw	r18,8(sp)
   87808:	dc400115 	stw	r17,4(sp)
   8780c:	308000cc 	andi	r2,r6,3
   87810:	3021883a 	mov	r16,r6
   87814:	2027883a 	mov	r19,r4
   87818:	10002f1e 	bne	r2,zero,878d8 <__pow5mult+0xe8>
   8781c:	2825883a 	mov	r18,r5
   87820:	8021d0ba 	srai	r16,r16,2
   87824:	80001a26 	beq	r16,zero,87890 <__pow5mult+0xa0>
   87828:	9c401217 	ldw	r17,72(r19)
   8782c:	8800061e 	bne	r17,zero,87848 <__pow5mult+0x58>
   87830:	00003406 	br	87904 <__pow5mult+0x114>
   87834:	8021d07a 	srai	r16,r16,1
   87838:	80001526 	beq	r16,zero,87890 <__pow5mult+0xa0>
   8783c:	88800017 	ldw	r2,0(r17)
   87840:	10001c26 	beq	r2,zero,878b4 <__pow5mult+0xc4>
   87844:	1023883a 	mov	r17,r2
   87848:	8080004c 	andi	r2,r16,1
   8784c:	103ff926 	beq	r2,zero,87834 <__alt_data_end+0xfffbbd44>
   87850:	880d883a 	mov	r6,r17
   87854:	900b883a 	mov	r5,r18
   87858:	9809883a 	mov	r4,r19
   8785c:	00875f80 	call	875f8 <__multiply>
   87860:	90001b26 	beq	r18,zero,878d0 <__pow5mult+0xe0>
   87864:	91000117 	ldw	r4,4(r18)
   87868:	98c01317 	ldw	r3,76(r19)
   8786c:	8021d07a 	srai	r16,r16,1
   87870:	2109883a 	add	r4,r4,r4
   87874:	2109883a 	add	r4,r4,r4
   87878:	1907883a 	add	r3,r3,r4
   8787c:	19000017 	ldw	r4,0(r3)
   87880:	91000015 	stw	r4,0(r18)
   87884:	1c800015 	stw	r18,0(r3)
   87888:	1025883a 	mov	r18,r2
   8788c:	803feb1e 	bne	r16,zero,8783c <__alt_data_end+0xfffbbd4c>
   87890:	9005883a 	mov	r2,r18
   87894:	dfc00517 	ldw	ra,20(sp)
   87898:	dd000417 	ldw	r20,16(sp)
   8789c:	dcc00317 	ldw	r19,12(sp)
   878a0:	dc800217 	ldw	r18,8(sp)
   878a4:	dc400117 	ldw	r17,4(sp)
   878a8:	dc000017 	ldw	r16,0(sp)
   878ac:	dec00604 	addi	sp,sp,24
   878b0:	f800283a 	ret
   878b4:	880d883a 	mov	r6,r17
   878b8:	880b883a 	mov	r5,r17
   878bc:	9809883a 	mov	r4,r19
   878c0:	00875f80 	call	875f8 <__multiply>
   878c4:	88800015 	stw	r2,0(r17)
   878c8:	10000015 	stw	zero,0(r2)
   878cc:	003fdd06 	br	87844 <__alt_data_end+0xfffbbd54>
   878d0:	1025883a 	mov	r18,r2
   878d4:	003fd706 	br	87834 <__alt_data_end+0xfffbbd44>
   878d8:	10bfffc4 	addi	r2,r2,-1
   878dc:	1085883a 	add	r2,r2,r2
   878e0:	00c00274 	movhi	r3,9
   878e4:	18c1f604 	addi	r3,r3,2008
   878e8:	1085883a 	add	r2,r2,r2
   878ec:	1885883a 	add	r2,r3,r2
   878f0:	11800017 	ldw	r6,0(r2)
   878f4:	000f883a 	mov	r7,zero
   878f8:	00872800 	call	87280 <__multadd>
   878fc:	1025883a 	mov	r18,r2
   87900:	003fc706 	br	87820 <__alt_data_end+0xfffbbd30>
   87904:	05000044 	movi	r20,1
   87908:	a00b883a 	mov	r5,r20
   8790c:	9809883a 	mov	r4,r19
   87910:	00871b00 	call	871b0 <_Balloc>
   87914:	1023883a 	mov	r17,r2
   87918:	00809c44 	movi	r2,625
   8791c:	88800515 	stw	r2,20(r17)
   87920:	8d000415 	stw	r20,16(r17)
   87924:	9c401215 	stw	r17,72(r19)
   87928:	88000015 	stw	zero,0(r17)
   8792c:	003fc606 	br	87848 <__alt_data_end+0xfffbbd58>

00087930 <__lshift>:
   87930:	defff904 	addi	sp,sp,-28
   87934:	dd400515 	stw	r21,20(sp)
   87938:	dcc00315 	stw	r19,12(sp)
   8793c:	302bd17a 	srai	r21,r6,5
   87940:	2cc00417 	ldw	r19,16(r5)
   87944:	28800217 	ldw	r2,8(r5)
   87948:	dd000415 	stw	r20,16(sp)
   8794c:	ace7883a 	add	r19,r21,r19
   87950:	dc800215 	stw	r18,8(sp)
   87954:	dc400115 	stw	r17,4(sp)
   87958:	dc000015 	stw	r16,0(sp)
   8795c:	dfc00615 	stw	ra,24(sp)
   87960:	9c000044 	addi	r16,r19,1
   87964:	2823883a 	mov	r17,r5
   87968:	3029883a 	mov	r20,r6
   8796c:	2025883a 	mov	r18,r4
   87970:	29400117 	ldw	r5,4(r5)
   87974:	1400030e 	bge	r2,r16,87984 <__lshift+0x54>
   87978:	1085883a 	add	r2,r2,r2
   8797c:	29400044 	addi	r5,r5,1
   87980:	143ffd16 	blt	r2,r16,87978 <__alt_data_end+0xfffbbe88>
   87984:	9009883a 	mov	r4,r18
   87988:	00871b00 	call	871b0 <_Balloc>
   8798c:	10c00504 	addi	r3,r2,20
   87990:	0540070e 	bge	zero,r21,879b0 <__lshift+0x80>
   87994:	ad6b883a 	add	r21,r21,r21
   87998:	ad6b883a 	add	r21,r21,r21
   8799c:	1809883a 	mov	r4,r3
   879a0:	1d47883a 	add	r3,r3,r21
   879a4:	20000015 	stw	zero,0(r4)
   879a8:	21000104 	addi	r4,r4,4
   879ac:	193ffd1e 	bne	r3,r4,879a4 <__alt_data_end+0xfffbbeb4>
   879b0:	8a000417 	ldw	r8,16(r17)
   879b4:	89000504 	addi	r4,r17,20
   879b8:	a18007cc 	andi	r6,r20,31
   879bc:	4211883a 	add	r8,r8,r8
   879c0:	4211883a 	add	r8,r8,r8
   879c4:	2211883a 	add	r8,r4,r8
   879c8:	30002326 	beq	r6,zero,87a58 <__lshift+0x128>
   879cc:	02400804 	movi	r9,32
   879d0:	4993c83a 	sub	r9,r9,r6
   879d4:	000b883a 	mov	r5,zero
   879d8:	21c00017 	ldw	r7,0(r4)
   879dc:	1815883a 	mov	r10,r3
   879e0:	18c00104 	addi	r3,r3,4
   879e4:	398e983a 	sll	r7,r7,r6
   879e8:	21000104 	addi	r4,r4,4
   879ec:	394ab03a 	or	r5,r7,r5
   879f0:	197fff15 	stw	r5,-4(r3)
   879f4:	217fff17 	ldw	r5,-4(r4)
   879f8:	2a4ad83a 	srl	r5,r5,r9
   879fc:	223ff636 	bltu	r4,r8,879d8 <__alt_data_end+0xfffbbee8>
   87a00:	51400115 	stw	r5,4(r10)
   87a04:	28001a1e 	bne	r5,zero,87a70 <__lshift+0x140>
   87a08:	843fffc4 	addi	r16,r16,-1
   87a0c:	14000415 	stw	r16,16(r2)
   87a10:	88000826 	beq	r17,zero,87a34 <__lshift+0x104>
   87a14:	89000117 	ldw	r4,4(r17)
   87a18:	90c01317 	ldw	r3,76(r18)
   87a1c:	2109883a 	add	r4,r4,r4
   87a20:	2109883a 	add	r4,r4,r4
   87a24:	1907883a 	add	r3,r3,r4
   87a28:	19000017 	ldw	r4,0(r3)
   87a2c:	89000015 	stw	r4,0(r17)
   87a30:	1c400015 	stw	r17,0(r3)
   87a34:	dfc00617 	ldw	ra,24(sp)
   87a38:	dd400517 	ldw	r21,20(sp)
   87a3c:	dd000417 	ldw	r20,16(sp)
   87a40:	dcc00317 	ldw	r19,12(sp)
   87a44:	dc800217 	ldw	r18,8(sp)
   87a48:	dc400117 	ldw	r17,4(sp)
   87a4c:	dc000017 	ldw	r16,0(sp)
   87a50:	dec00704 	addi	sp,sp,28
   87a54:	f800283a 	ret
   87a58:	21400017 	ldw	r5,0(r4)
   87a5c:	18c00104 	addi	r3,r3,4
   87a60:	21000104 	addi	r4,r4,4
   87a64:	197fff15 	stw	r5,-4(r3)
   87a68:	223ffb36 	bltu	r4,r8,87a58 <__alt_data_end+0xfffbbf68>
   87a6c:	003fe606 	br	87a08 <__alt_data_end+0xfffbbf18>
   87a70:	9c000084 	addi	r16,r19,2
   87a74:	003fe406 	br	87a08 <__alt_data_end+0xfffbbf18>

00087a78 <__mcmp>:
   87a78:	20800417 	ldw	r2,16(r4)
   87a7c:	28c00417 	ldw	r3,16(r5)
   87a80:	10c5c83a 	sub	r2,r2,r3
   87a84:	1000111e 	bne	r2,zero,87acc <__mcmp+0x54>
   87a88:	18c7883a 	add	r3,r3,r3
   87a8c:	18c7883a 	add	r3,r3,r3
   87a90:	21000504 	addi	r4,r4,20
   87a94:	29400504 	addi	r5,r5,20
   87a98:	20c5883a 	add	r2,r4,r3
   87a9c:	28cb883a 	add	r5,r5,r3
   87aa0:	00000106 	br	87aa8 <__mcmp+0x30>
   87aa4:	20800a2e 	bgeu	r4,r2,87ad0 <__mcmp+0x58>
   87aa8:	10bfff04 	addi	r2,r2,-4
   87aac:	297fff04 	addi	r5,r5,-4
   87ab0:	11800017 	ldw	r6,0(r2)
   87ab4:	28c00017 	ldw	r3,0(r5)
   87ab8:	30fffa26 	beq	r6,r3,87aa4 <__alt_data_end+0xfffbbfb4>
   87abc:	30c00236 	bltu	r6,r3,87ac8 <__mcmp+0x50>
   87ac0:	00800044 	movi	r2,1
   87ac4:	f800283a 	ret
   87ac8:	00bfffc4 	movi	r2,-1
   87acc:	f800283a 	ret
   87ad0:	0005883a 	mov	r2,zero
   87ad4:	f800283a 	ret

00087ad8 <__mdiff>:
   87ad8:	28c00417 	ldw	r3,16(r5)
   87adc:	30800417 	ldw	r2,16(r6)
   87ae0:	defffa04 	addi	sp,sp,-24
   87ae4:	dcc00315 	stw	r19,12(sp)
   87ae8:	dc800215 	stw	r18,8(sp)
   87aec:	dfc00515 	stw	ra,20(sp)
   87af0:	dd000415 	stw	r20,16(sp)
   87af4:	dc400115 	stw	r17,4(sp)
   87af8:	dc000015 	stw	r16,0(sp)
   87afc:	1887c83a 	sub	r3,r3,r2
   87b00:	2825883a 	mov	r18,r5
   87b04:	3027883a 	mov	r19,r6
   87b08:	1800141e 	bne	r3,zero,87b5c <__mdiff+0x84>
   87b0c:	1085883a 	add	r2,r2,r2
   87b10:	1085883a 	add	r2,r2,r2
   87b14:	2a000504 	addi	r8,r5,20
   87b18:	34000504 	addi	r16,r6,20
   87b1c:	4087883a 	add	r3,r8,r2
   87b20:	8085883a 	add	r2,r16,r2
   87b24:	00000106 	br	87b2c <__mdiff+0x54>
   87b28:	40c0592e 	bgeu	r8,r3,87c90 <__mdiff+0x1b8>
   87b2c:	18ffff04 	addi	r3,r3,-4
   87b30:	10bfff04 	addi	r2,r2,-4
   87b34:	19c00017 	ldw	r7,0(r3)
   87b38:	11400017 	ldw	r5,0(r2)
   87b3c:	397ffa26 	beq	r7,r5,87b28 <__alt_data_end+0xfffbc038>
   87b40:	3940592e 	bgeu	r7,r5,87ca8 <__mdiff+0x1d0>
   87b44:	9005883a 	mov	r2,r18
   87b48:	4023883a 	mov	r17,r8
   87b4c:	9825883a 	mov	r18,r19
   87b50:	05000044 	movi	r20,1
   87b54:	1027883a 	mov	r19,r2
   87b58:	00000406 	br	87b6c <__mdiff+0x94>
   87b5c:	18005616 	blt	r3,zero,87cb8 <__mdiff+0x1e0>
   87b60:	34400504 	addi	r17,r6,20
   87b64:	2c000504 	addi	r16,r5,20
   87b68:	0029883a 	mov	r20,zero
   87b6c:	91400117 	ldw	r5,4(r18)
   87b70:	00871b00 	call	871b0 <_Balloc>
   87b74:	92400417 	ldw	r9,16(r18)
   87b78:	9b000417 	ldw	r12,16(r19)
   87b7c:	12c00504 	addi	r11,r2,20
   87b80:	4a51883a 	add	r8,r9,r9
   87b84:	6319883a 	add	r12,r12,r12
   87b88:	4211883a 	add	r8,r8,r8
   87b8c:	6319883a 	add	r12,r12,r12
   87b90:	15000315 	stw	r20,12(r2)
   87b94:	8211883a 	add	r8,r16,r8
   87b98:	8b19883a 	add	r12,r17,r12
   87b9c:	0007883a 	mov	r3,zero
   87ba0:	81400017 	ldw	r5,0(r16)
   87ba4:	89c00017 	ldw	r7,0(r17)
   87ba8:	59800104 	addi	r6,r11,4
   87bac:	293fffcc 	andi	r4,r5,65535
   87bb0:	20c7883a 	add	r3,r4,r3
   87bb4:	393fffcc 	andi	r4,r7,65535
   87bb8:	1909c83a 	sub	r4,r3,r4
   87bbc:	280ad43a 	srli	r5,r5,16
   87bc0:	380ed43a 	srli	r7,r7,16
   87bc4:	2007d43a 	srai	r3,r4,16
   87bc8:	213fffcc 	andi	r4,r4,65535
   87bcc:	29cbc83a 	sub	r5,r5,r7
   87bd0:	28c7883a 	add	r3,r5,r3
   87bd4:	180a943a 	slli	r5,r3,16
   87bd8:	8c400104 	addi	r17,r17,4
   87bdc:	84000104 	addi	r16,r16,4
   87be0:	2908b03a 	or	r4,r5,r4
   87be4:	59000015 	stw	r4,0(r11)
   87be8:	1807d43a 	srai	r3,r3,16
   87bec:	3015883a 	mov	r10,r6
   87bf0:	3017883a 	mov	r11,r6
   87bf4:	8b3fea36 	bltu	r17,r12,87ba0 <__alt_data_end+0xfffbc0b0>
   87bf8:	8200162e 	bgeu	r16,r8,87c54 <__mdiff+0x17c>
   87bfc:	8017883a 	mov	r11,r16
   87c00:	59400017 	ldw	r5,0(r11)
   87c04:	31800104 	addi	r6,r6,4
   87c08:	5ac00104 	addi	r11,r11,4
   87c0c:	293fffcc 	andi	r4,r5,65535
   87c10:	20c7883a 	add	r3,r4,r3
   87c14:	280ed43a 	srli	r7,r5,16
   87c18:	180bd43a 	srai	r5,r3,16
   87c1c:	193fffcc 	andi	r4,r3,65535
   87c20:	3947883a 	add	r3,r7,r5
   87c24:	180a943a 	slli	r5,r3,16
   87c28:	1807d43a 	srai	r3,r3,16
   87c2c:	2908b03a 	or	r4,r5,r4
   87c30:	313fff15 	stw	r4,-4(r6)
   87c34:	5a3ff236 	bltu	r11,r8,87c00 <__alt_data_end+0xfffbc110>
   87c38:	0406303a 	nor	r3,zero,r16
   87c3c:	1a07883a 	add	r3,r3,r8
   87c40:	1806d0ba 	srli	r3,r3,2
   87c44:	18c00044 	addi	r3,r3,1
   87c48:	18c7883a 	add	r3,r3,r3
   87c4c:	18c7883a 	add	r3,r3,r3
   87c50:	50d5883a 	add	r10,r10,r3
   87c54:	50ffff04 	addi	r3,r10,-4
   87c58:	2000041e 	bne	r4,zero,87c6c <__mdiff+0x194>
   87c5c:	18ffff04 	addi	r3,r3,-4
   87c60:	19000017 	ldw	r4,0(r3)
   87c64:	4a7fffc4 	addi	r9,r9,-1
   87c68:	203ffc26 	beq	r4,zero,87c5c <__alt_data_end+0xfffbc16c>
   87c6c:	12400415 	stw	r9,16(r2)
   87c70:	dfc00517 	ldw	ra,20(sp)
   87c74:	dd000417 	ldw	r20,16(sp)
   87c78:	dcc00317 	ldw	r19,12(sp)
   87c7c:	dc800217 	ldw	r18,8(sp)
   87c80:	dc400117 	ldw	r17,4(sp)
   87c84:	dc000017 	ldw	r16,0(sp)
   87c88:	dec00604 	addi	sp,sp,24
   87c8c:	f800283a 	ret
   87c90:	000b883a 	mov	r5,zero
   87c94:	00871b00 	call	871b0 <_Balloc>
   87c98:	00c00044 	movi	r3,1
   87c9c:	10c00415 	stw	r3,16(r2)
   87ca0:	10000515 	stw	zero,20(r2)
   87ca4:	003ff206 	br	87c70 <__alt_data_end+0xfffbc180>
   87ca8:	8023883a 	mov	r17,r16
   87cac:	0029883a 	mov	r20,zero
   87cb0:	4021883a 	mov	r16,r8
   87cb4:	003fad06 	br	87b6c <__alt_data_end+0xfffbc07c>
   87cb8:	9005883a 	mov	r2,r18
   87cbc:	94400504 	addi	r17,r18,20
   87cc0:	9c000504 	addi	r16,r19,20
   87cc4:	9825883a 	mov	r18,r19
   87cc8:	05000044 	movi	r20,1
   87ccc:	1027883a 	mov	r19,r2
   87cd0:	003fa606 	br	87b6c <__alt_data_end+0xfffbc07c>

00087cd4 <__ulp>:
   87cd4:	295ffc2c 	andhi	r5,r5,32752
   87cd8:	00bf3034 	movhi	r2,64704
   87cdc:	2887883a 	add	r3,r5,r2
   87ce0:	00c0020e 	bge	zero,r3,87cec <__ulp+0x18>
   87ce4:	0005883a 	mov	r2,zero
   87ce8:	f800283a 	ret
   87cec:	00c7c83a 	sub	r3,zero,r3
   87cf0:	1807d53a 	srai	r3,r3,20
   87cf4:	008004c4 	movi	r2,19
   87cf8:	10c00b0e 	bge	r2,r3,87d28 <__ulp+0x54>
   87cfc:	18bffb04 	addi	r2,r3,-20
   87d00:	01000784 	movi	r4,30
   87d04:	0007883a 	mov	r3,zero
   87d08:	20800516 	blt	r4,r2,87d20 <__ulp+0x4c>
   87d0c:	010007c4 	movi	r4,31
   87d10:	2089c83a 	sub	r4,r4,r2
   87d14:	00800044 	movi	r2,1
   87d18:	1104983a 	sll	r2,r2,r4
   87d1c:	f800283a 	ret
   87d20:	00800044 	movi	r2,1
   87d24:	f800283a 	ret
   87d28:	01400234 	movhi	r5,8
   87d2c:	28c7d83a 	sra	r3,r5,r3
   87d30:	0005883a 	mov	r2,zero
   87d34:	f800283a 	ret

00087d38 <__b2d>:
   87d38:	defffa04 	addi	sp,sp,-24
   87d3c:	dc000015 	stw	r16,0(sp)
   87d40:	24000417 	ldw	r16,16(r4)
   87d44:	dc400115 	stw	r17,4(sp)
   87d48:	24400504 	addi	r17,r4,20
   87d4c:	8421883a 	add	r16,r16,r16
   87d50:	8421883a 	add	r16,r16,r16
   87d54:	8c21883a 	add	r16,r17,r16
   87d58:	dc800215 	stw	r18,8(sp)
   87d5c:	84bfff17 	ldw	r18,-4(r16)
   87d60:	dd000415 	stw	r20,16(sp)
   87d64:	dcc00315 	stw	r19,12(sp)
   87d68:	9009883a 	mov	r4,r18
   87d6c:	2829883a 	mov	r20,r5
   87d70:	dfc00515 	stw	ra,20(sp)
   87d74:	00874a40 	call	874a4 <__hi0bits>
   87d78:	00c00804 	movi	r3,32
   87d7c:	1889c83a 	sub	r4,r3,r2
   87d80:	a1000015 	stw	r4,0(r20)
   87d84:	01000284 	movi	r4,10
   87d88:	84ffff04 	addi	r19,r16,-4
   87d8c:	20801216 	blt	r4,r2,87dd8 <__b2d+0xa0>
   87d90:	018002c4 	movi	r6,11
   87d94:	308dc83a 	sub	r6,r6,r2
   87d98:	9186d83a 	srl	r3,r18,r6
   87d9c:	18cffc34 	orhi	r3,r3,16368
   87da0:	8cc0212e 	bgeu	r17,r19,87e28 <__b2d+0xf0>
   87da4:	813ffe17 	ldw	r4,-8(r16)
   87da8:	218cd83a 	srl	r6,r4,r6
   87dac:	10800544 	addi	r2,r2,21
   87db0:	9084983a 	sll	r2,r18,r2
   87db4:	1184b03a 	or	r2,r2,r6
   87db8:	dfc00517 	ldw	ra,20(sp)
   87dbc:	dd000417 	ldw	r20,16(sp)
   87dc0:	dcc00317 	ldw	r19,12(sp)
   87dc4:	dc800217 	ldw	r18,8(sp)
   87dc8:	dc400117 	ldw	r17,4(sp)
   87dcc:	dc000017 	ldw	r16,0(sp)
   87dd0:	dec00604 	addi	sp,sp,24
   87dd4:	f800283a 	ret
   87dd8:	8cc00f2e 	bgeu	r17,r19,87e18 <__b2d+0xe0>
   87ddc:	117ffd44 	addi	r5,r2,-11
   87de0:	80bffe17 	ldw	r2,-8(r16)
   87de4:	28000e26 	beq	r5,zero,87e20 <__b2d+0xe8>
   87de8:	1949c83a 	sub	r4,r3,r5
   87dec:	9164983a 	sll	r18,r18,r5
   87df0:	1106d83a 	srl	r3,r2,r4
   87df4:	81bffe04 	addi	r6,r16,-8
   87df8:	948ffc34 	orhi	r18,r18,16368
   87dfc:	90c6b03a 	or	r3,r18,r3
   87e00:	89800e2e 	bgeu	r17,r6,87e3c <__b2d+0x104>
   87e04:	81bffd17 	ldw	r6,-12(r16)
   87e08:	1144983a 	sll	r2,r2,r5
   87e0c:	310ad83a 	srl	r5,r6,r4
   87e10:	2884b03a 	or	r2,r5,r2
   87e14:	003fe806 	br	87db8 <__alt_data_end+0xfffbc2c8>
   87e18:	10bffd44 	addi	r2,r2,-11
   87e1c:	1000041e 	bne	r2,zero,87e30 <__b2d+0xf8>
   87e20:	90cffc34 	orhi	r3,r18,16368
   87e24:	003fe406 	br	87db8 <__alt_data_end+0xfffbc2c8>
   87e28:	000d883a 	mov	r6,zero
   87e2c:	003fdf06 	br	87dac <__alt_data_end+0xfffbc2bc>
   87e30:	90a4983a 	sll	r18,r18,r2
   87e34:	0005883a 	mov	r2,zero
   87e38:	003ff906 	br	87e20 <__alt_data_end+0xfffbc330>
   87e3c:	1144983a 	sll	r2,r2,r5
   87e40:	003fdd06 	br	87db8 <__alt_data_end+0xfffbc2c8>

00087e44 <__d2b>:
   87e44:	defff804 	addi	sp,sp,-32
   87e48:	dc000215 	stw	r16,8(sp)
   87e4c:	3021883a 	mov	r16,r6
   87e50:	dc400315 	stw	r17,12(sp)
   87e54:	8022907a 	slli	r17,r16,1
   87e58:	dd000615 	stw	r20,24(sp)
   87e5c:	2829883a 	mov	r20,r5
   87e60:	01400044 	movi	r5,1
   87e64:	dcc00515 	stw	r19,20(sp)
   87e68:	dc800415 	stw	r18,16(sp)
   87e6c:	dfc00715 	stw	ra,28(sp)
   87e70:	3825883a 	mov	r18,r7
   87e74:	8822d57a 	srli	r17,r17,21
   87e78:	00871b00 	call	871b0 <_Balloc>
   87e7c:	1027883a 	mov	r19,r2
   87e80:	00800434 	movhi	r2,16
   87e84:	10bfffc4 	addi	r2,r2,-1
   87e88:	808c703a 	and	r6,r16,r2
   87e8c:	88000126 	beq	r17,zero,87e94 <__d2b+0x50>
   87e90:	31800434 	orhi	r6,r6,16
   87e94:	d9800015 	stw	r6,0(sp)
   87e98:	a0002426 	beq	r20,zero,87f2c <__d2b+0xe8>
   87e9c:	d9000104 	addi	r4,sp,4
   87ea0:	dd000115 	stw	r20,4(sp)
   87ea4:	008750c0 	call	8750c <__lo0bits>
   87ea8:	d8c00017 	ldw	r3,0(sp)
   87eac:	10002f1e 	bne	r2,zero,87f6c <__d2b+0x128>
   87eb0:	d9000117 	ldw	r4,4(sp)
   87eb4:	99000515 	stw	r4,20(r19)
   87eb8:	1821003a 	cmpeq	r16,r3,zero
   87ebc:	01000084 	movi	r4,2
   87ec0:	2421c83a 	sub	r16,r4,r16
   87ec4:	98c00615 	stw	r3,24(r19)
   87ec8:	9c000415 	stw	r16,16(r19)
   87ecc:	88001f1e 	bne	r17,zero,87f4c <__d2b+0x108>
   87ed0:	10bef384 	addi	r2,r2,-1074
   87ed4:	90800015 	stw	r2,0(r18)
   87ed8:	00900034 	movhi	r2,16384
   87edc:	10bfffc4 	addi	r2,r2,-1
   87ee0:	8085883a 	add	r2,r16,r2
   87ee4:	1085883a 	add	r2,r2,r2
   87ee8:	1085883a 	add	r2,r2,r2
   87eec:	9885883a 	add	r2,r19,r2
   87ef0:	11000517 	ldw	r4,20(r2)
   87ef4:	8020917a 	slli	r16,r16,5
   87ef8:	00874a40 	call	874a4 <__hi0bits>
   87efc:	d8c00817 	ldw	r3,32(sp)
   87f00:	8085c83a 	sub	r2,r16,r2
   87f04:	18800015 	stw	r2,0(r3)
   87f08:	9805883a 	mov	r2,r19
   87f0c:	dfc00717 	ldw	ra,28(sp)
   87f10:	dd000617 	ldw	r20,24(sp)
   87f14:	dcc00517 	ldw	r19,20(sp)
   87f18:	dc800417 	ldw	r18,16(sp)
   87f1c:	dc400317 	ldw	r17,12(sp)
   87f20:	dc000217 	ldw	r16,8(sp)
   87f24:	dec00804 	addi	sp,sp,32
   87f28:	f800283a 	ret
   87f2c:	d809883a 	mov	r4,sp
   87f30:	008750c0 	call	8750c <__lo0bits>
   87f34:	d8c00017 	ldw	r3,0(sp)
   87f38:	04000044 	movi	r16,1
   87f3c:	9c000415 	stw	r16,16(r19)
   87f40:	98c00515 	stw	r3,20(r19)
   87f44:	10800804 	addi	r2,r2,32
   87f48:	883fe126 	beq	r17,zero,87ed0 <__alt_data_end+0xfffbc3e0>
   87f4c:	00c00d44 	movi	r3,53
   87f50:	8c7ef344 	addi	r17,r17,-1075
   87f54:	88a3883a 	add	r17,r17,r2
   87f58:	1885c83a 	sub	r2,r3,r2
   87f5c:	d8c00817 	ldw	r3,32(sp)
   87f60:	94400015 	stw	r17,0(r18)
   87f64:	18800015 	stw	r2,0(r3)
   87f68:	003fe706 	br	87f08 <__alt_data_end+0xfffbc418>
   87f6c:	01000804 	movi	r4,32
   87f70:	2089c83a 	sub	r4,r4,r2
   87f74:	1908983a 	sll	r4,r3,r4
   87f78:	d9400117 	ldw	r5,4(sp)
   87f7c:	1886d83a 	srl	r3,r3,r2
   87f80:	2148b03a 	or	r4,r4,r5
   87f84:	99000515 	stw	r4,20(r19)
   87f88:	d8c00015 	stw	r3,0(sp)
   87f8c:	003fca06 	br	87eb8 <__alt_data_end+0xfffbc3c8>

00087f90 <__ratio>:
   87f90:	defff904 	addi	sp,sp,-28
   87f94:	dc400315 	stw	r17,12(sp)
   87f98:	2823883a 	mov	r17,r5
   87f9c:	d9400104 	addi	r5,sp,4
   87fa0:	dfc00615 	stw	ra,24(sp)
   87fa4:	dcc00515 	stw	r19,20(sp)
   87fa8:	dc800415 	stw	r18,16(sp)
   87fac:	2027883a 	mov	r19,r4
   87fb0:	dc000215 	stw	r16,8(sp)
   87fb4:	0087d380 	call	87d38 <__b2d>
   87fb8:	d80b883a 	mov	r5,sp
   87fbc:	8809883a 	mov	r4,r17
   87fc0:	1025883a 	mov	r18,r2
   87fc4:	1821883a 	mov	r16,r3
   87fc8:	0087d380 	call	87d38 <__b2d>
   87fcc:	8a000417 	ldw	r8,16(r17)
   87fd0:	99000417 	ldw	r4,16(r19)
   87fd4:	d9400117 	ldw	r5,4(sp)
   87fd8:	2209c83a 	sub	r4,r4,r8
   87fdc:	2010917a 	slli	r8,r4,5
   87fe0:	d9000017 	ldw	r4,0(sp)
   87fe4:	2909c83a 	sub	r4,r5,r4
   87fe8:	4109883a 	add	r4,r8,r4
   87fec:	01000e0e 	bge	zero,r4,88028 <__ratio+0x98>
   87ff0:	2008953a 	slli	r4,r4,20
   87ff4:	2421883a 	add	r16,r4,r16
   87ff8:	100d883a 	mov	r6,r2
   87ffc:	180f883a 	mov	r7,r3
   88000:	9009883a 	mov	r4,r18
   88004:	800b883a 	mov	r5,r16
   88008:	008bd280 	call	8bd28 <__divdf3>
   8800c:	dfc00617 	ldw	ra,24(sp)
   88010:	dcc00517 	ldw	r19,20(sp)
   88014:	dc800417 	ldw	r18,16(sp)
   88018:	dc400317 	ldw	r17,12(sp)
   8801c:	dc000217 	ldw	r16,8(sp)
   88020:	dec00704 	addi	sp,sp,28
   88024:	f800283a 	ret
   88028:	2008953a 	slli	r4,r4,20
   8802c:	1907c83a 	sub	r3,r3,r4
   88030:	003ff106 	br	87ff8 <__alt_data_end+0xfffbc508>

00088034 <_mprec_log10>:
   88034:	defffe04 	addi	sp,sp,-8
   88038:	dc000015 	stw	r16,0(sp)
   8803c:	dfc00115 	stw	ra,4(sp)
   88040:	008005c4 	movi	r2,23
   88044:	2021883a 	mov	r16,r4
   88048:	11000d0e 	bge	r2,r4,88080 <_mprec_log10+0x4c>
   8804c:	0005883a 	mov	r2,zero
   88050:	00cffc34 	movhi	r3,16368
   88054:	843fffc4 	addi	r16,r16,-1
   88058:	000d883a 	mov	r6,zero
   8805c:	01d00934 	movhi	r7,16420
   88060:	1009883a 	mov	r4,r2
   88064:	180b883a 	mov	r5,r3
   88068:	008c8680 	call	8c868 <__muldf3>
   8806c:	803ff91e 	bne	r16,zero,88054 <__alt_data_end+0xfffbc564>
   88070:	dfc00117 	ldw	ra,4(sp)
   88074:	dc000017 	ldw	r16,0(sp)
   88078:	dec00204 	addi	sp,sp,8
   8807c:	f800283a 	ret
   88080:	202090fa 	slli	r16,r4,3
   88084:	00800274 	movhi	r2,9
   88088:	10820d04 	addi	r2,r2,2100
   8808c:	1421883a 	add	r16,r2,r16
   88090:	80800017 	ldw	r2,0(r16)
   88094:	80c00117 	ldw	r3,4(r16)
   88098:	dfc00117 	ldw	ra,4(sp)
   8809c:	dc000017 	ldw	r16,0(sp)
   880a0:	dec00204 	addi	sp,sp,8
   880a4:	f800283a 	ret

000880a8 <__copybits>:
   880a8:	297fffc4 	addi	r5,r5,-1
   880ac:	280fd17a 	srai	r7,r5,5
   880b0:	30c00417 	ldw	r3,16(r6)
   880b4:	30800504 	addi	r2,r6,20
   880b8:	39c00044 	addi	r7,r7,1
   880bc:	18c7883a 	add	r3,r3,r3
   880c0:	39cf883a 	add	r7,r7,r7
   880c4:	18c7883a 	add	r3,r3,r3
   880c8:	39cf883a 	add	r7,r7,r7
   880cc:	10c7883a 	add	r3,r2,r3
   880d0:	21cf883a 	add	r7,r4,r7
   880d4:	10c00d2e 	bgeu	r2,r3,8810c <__copybits+0x64>
   880d8:	200b883a 	mov	r5,r4
   880dc:	12000017 	ldw	r8,0(r2)
   880e0:	29400104 	addi	r5,r5,4
   880e4:	10800104 	addi	r2,r2,4
   880e8:	2a3fff15 	stw	r8,-4(r5)
   880ec:	10fffb36 	bltu	r2,r3,880dc <__alt_data_end+0xfffbc5ec>
   880f0:	1985c83a 	sub	r2,r3,r6
   880f4:	10bffac4 	addi	r2,r2,-21
   880f8:	1004d0ba 	srli	r2,r2,2
   880fc:	10800044 	addi	r2,r2,1
   88100:	1085883a 	add	r2,r2,r2
   88104:	1085883a 	add	r2,r2,r2
   88108:	2089883a 	add	r4,r4,r2
   8810c:	21c0032e 	bgeu	r4,r7,8811c <__copybits+0x74>
   88110:	20000015 	stw	zero,0(r4)
   88114:	21000104 	addi	r4,r4,4
   88118:	21fffd36 	bltu	r4,r7,88110 <__alt_data_end+0xfffbc620>
   8811c:	f800283a 	ret

00088120 <__any_on>:
   88120:	20c00417 	ldw	r3,16(r4)
   88124:	2805d17a 	srai	r2,r5,5
   88128:	21000504 	addi	r4,r4,20
   8812c:	18800d0e 	bge	r3,r2,88164 <__any_on+0x44>
   88130:	18c7883a 	add	r3,r3,r3
   88134:	18c7883a 	add	r3,r3,r3
   88138:	20c7883a 	add	r3,r4,r3
   8813c:	20c0192e 	bgeu	r4,r3,881a4 <__any_on+0x84>
   88140:	18bfff17 	ldw	r2,-4(r3)
   88144:	18ffff04 	addi	r3,r3,-4
   88148:	1000041e 	bne	r2,zero,8815c <__any_on+0x3c>
   8814c:	20c0142e 	bgeu	r4,r3,881a0 <__any_on+0x80>
   88150:	18ffff04 	addi	r3,r3,-4
   88154:	19400017 	ldw	r5,0(r3)
   88158:	283ffc26 	beq	r5,zero,8814c <__alt_data_end+0xfffbc65c>
   8815c:	00800044 	movi	r2,1
   88160:	f800283a 	ret
   88164:	10c00a0e 	bge	r2,r3,88190 <__any_on+0x70>
   88168:	1085883a 	add	r2,r2,r2
   8816c:	1085883a 	add	r2,r2,r2
   88170:	294007cc 	andi	r5,r5,31
   88174:	2087883a 	add	r3,r4,r2
   88178:	283ff026 	beq	r5,zero,8813c <__alt_data_end+0xfffbc64c>
   8817c:	19800017 	ldw	r6,0(r3)
   88180:	3144d83a 	srl	r2,r6,r5
   88184:	114a983a 	sll	r5,r2,r5
   88188:	317ff41e 	bne	r6,r5,8815c <__alt_data_end+0xfffbc66c>
   8818c:	003feb06 	br	8813c <__alt_data_end+0xfffbc64c>
   88190:	1085883a 	add	r2,r2,r2
   88194:	1085883a 	add	r2,r2,r2
   88198:	2087883a 	add	r3,r4,r2
   8819c:	003fe706 	br	8813c <__alt_data_end+0xfffbc64c>
   881a0:	f800283a 	ret
   881a4:	0005883a 	mov	r2,zero
   881a8:	f800283a 	ret

000881ac <_realloc_r>:
   881ac:	defff604 	addi	sp,sp,-40
   881b0:	dc800215 	stw	r18,8(sp)
   881b4:	dfc00915 	stw	ra,36(sp)
   881b8:	df000815 	stw	fp,32(sp)
   881bc:	ddc00715 	stw	r23,28(sp)
   881c0:	dd800615 	stw	r22,24(sp)
   881c4:	dd400515 	stw	r21,20(sp)
   881c8:	dd000415 	stw	r20,16(sp)
   881cc:	dcc00315 	stw	r19,12(sp)
   881d0:	dc400115 	stw	r17,4(sp)
   881d4:	dc000015 	stw	r16,0(sp)
   881d8:	3025883a 	mov	r18,r6
   881dc:	2800b726 	beq	r5,zero,884bc <_realloc_r+0x310>
   881e0:	282b883a 	mov	r21,r5
   881e4:	2029883a 	mov	r20,r4
   881e8:	008e6740 	call	8e674 <__malloc_lock>
   881ec:	a8bfff17 	ldw	r2,-4(r21)
   881f0:	043fff04 	movi	r16,-4
   881f4:	90c002c4 	addi	r3,r18,11
   881f8:	01000584 	movi	r4,22
   881fc:	acfffe04 	addi	r19,r21,-8
   88200:	1420703a 	and	r16,r2,r16
   88204:	20c0332e 	bgeu	r4,r3,882d4 <_realloc_r+0x128>
   88208:	047ffe04 	movi	r17,-8
   8820c:	1c62703a 	and	r17,r3,r17
   88210:	8807883a 	mov	r3,r17
   88214:	88005816 	blt	r17,zero,88378 <_realloc_r+0x1cc>
   88218:	8c805736 	bltu	r17,r18,88378 <_realloc_r+0x1cc>
   8821c:	80c0300e 	bge	r16,r3,882e0 <_realloc_r+0x134>
   88220:	07000274 	movhi	fp,9
   88224:	e703e604 	addi	fp,fp,3992
   88228:	e1c00217 	ldw	r7,8(fp)
   8822c:	9c09883a 	add	r4,r19,r16
   88230:	22000117 	ldw	r8,4(r4)
   88234:	21c06326 	beq	r4,r7,883c4 <_realloc_r+0x218>
   88238:	017fff84 	movi	r5,-2
   8823c:	414a703a 	and	r5,r8,r5
   88240:	214b883a 	add	r5,r4,r5
   88244:	29800117 	ldw	r6,4(r5)
   88248:	3180004c 	andi	r6,r6,1
   8824c:	30003f26 	beq	r6,zero,8834c <_realloc_r+0x1a0>
   88250:	1080004c 	andi	r2,r2,1
   88254:	10008326 	beq	r2,zero,88464 <_realloc_r+0x2b8>
   88258:	900b883a 	mov	r5,r18
   8825c:	a009883a 	mov	r4,r20
   88260:	00864f40 	call	864f4 <_malloc_r>
   88264:	1025883a 	mov	r18,r2
   88268:	10011e26 	beq	r2,zero,886e4 <_realloc_r+0x538>
   8826c:	a93fff17 	ldw	r4,-4(r21)
   88270:	10fffe04 	addi	r3,r2,-8
   88274:	00bfff84 	movi	r2,-2
   88278:	2084703a 	and	r2,r4,r2
   8827c:	9885883a 	add	r2,r19,r2
   88280:	1880ee26 	beq	r3,r2,8863c <_realloc_r+0x490>
   88284:	81bfff04 	addi	r6,r16,-4
   88288:	00800904 	movi	r2,36
   8828c:	1180b836 	bltu	r2,r6,88570 <_realloc_r+0x3c4>
   88290:	00c004c4 	movi	r3,19
   88294:	19809636 	bltu	r3,r6,884f0 <_realloc_r+0x344>
   88298:	9005883a 	mov	r2,r18
   8829c:	a807883a 	mov	r3,r21
   882a0:	19000017 	ldw	r4,0(r3)
   882a4:	11000015 	stw	r4,0(r2)
   882a8:	19000117 	ldw	r4,4(r3)
   882ac:	11000115 	stw	r4,4(r2)
   882b0:	18c00217 	ldw	r3,8(r3)
   882b4:	10c00215 	stw	r3,8(r2)
   882b8:	a80b883a 	mov	r5,r21
   882bc:	a009883a 	mov	r4,r20
   882c0:	00858ac0 	call	858ac <_free_r>
   882c4:	a009883a 	mov	r4,r20
   882c8:	008e6980 	call	8e698 <__malloc_unlock>
   882cc:	9005883a 	mov	r2,r18
   882d0:	00001206 	br	8831c <_realloc_r+0x170>
   882d4:	00c00404 	movi	r3,16
   882d8:	1823883a 	mov	r17,r3
   882dc:	003fce06 	br	88218 <__alt_data_end+0xfffbc728>
   882e0:	a825883a 	mov	r18,r21
   882e4:	8445c83a 	sub	r2,r16,r17
   882e8:	00c003c4 	movi	r3,15
   882ec:	18802636 	bltu	r3,r2,88388 <_realloc_r+0x1dc>
   882f0:	99800117 	ldw	r6,4(r19)
   882f4:	9c07883a 	add	r3,r19,r16
   882f8:	3180004c 	andi	r6,r6,1
   882fc:	3420b03a 	or	r16,r6,r16
   88300:	9c000115 	stw	r16,4(r19)
   88304:	18800117 	ldw	r2,4(r3)
   88308:	10800054 	ori	r2,r2,1
   8830c:	18800115 	stw	r2,4(r3)
   88310:	a009883a 	mov	r4,r20
   88314:	008e6980 	call	8e698 <__malloc_unlock>
   88318:	9005883a 	mov	r2,r18
   8831c:	dfc00917 	ldw	ra,36(sp)
   88320:	df000817 	ldw	fp,32(sp)
   88324:	ddc00717 	ldw	r23,28(sp)
   88328:	dd800617 	ldw	r22,24(sp)
   8832c:	dd400517 	ldw	r21,20(sp)
   88330:	dd000417 	ldw	r20,16(sp)
   88334:	dcc00317 	ldw	r19,12(sp)
   88338:	dc800217 	ldw	r18,8(sp)
   8833c:	dc400117 	ldw	r17,4(sp)
   88340:	dc000017 	ldw	r16,0(sp)
   88344:	dec00a04 	addi	sp,sp,40
   88348:	f800283a 	ret
   8834c:	017fff04 	movi	r5,-4
   88350:	414a703a 	and	r5,r8,r5
   88354:	814d883a 	add	r6,r16,r5
   88358:	30c01f16 	blt	r6,r3,883d8 <_realloc_r+0x22c>
   8835c:	20800317 	ldw	r2,12(r4)
   88360:	20c00217 	ldw	r3,8(r4)
   88364:	a825883a 	mov	r18,r21
   88368:	3021883a 	mov	r16,r6
   8836c:	18800315 	stw	r2,12(r3)
   88370:	10c00215 	stw	r3,8(r2)
   88374:	003fdb06 	br	882e4 <__alt_data_end+0xfffbc7f4>
   88378:	00800304 	movi	r2,12
   8837c:	a0800015 	stw	r2,0(r20)
   88380:	0005883a 	mov	r2,zero
   88384:	003fe506 	br	8831c <__alt_data_end+0xfffbc82c>
   88388:	98c00117 	ldw	r3,4(r19)
   8838c:	9c4b883a 	add	r5,r19,r17
   88390:	11000054 	ori	r4,r2,1
   88394:	18c0004c 	andi	r3,r3,1
   88398:	1c62b03a 	or	r17,r3,r17
   8839c:	9c400115 	stw	r17,4(r19)
   883a0:	29000115 	stw	r4,4(r5)
   883a4:	2885883a 	add	r2,r5,r2
   883a8:	10c00117 	ldw	r3,4(r2)
   883ac:	29400204 	addi	r5,r5,8
   883b0:	a009883a 	mov	r4,r20
   883b4:	18c00054 	ori	r3,r3,1
   883b8:	10c00115 	stw	r3,4(r2)
   883bc:	00858ac0 	call	858ac <_free_r>
   883c0:	003fd306 	br	88310 <__alt_data_end+0xfffbc820>
   883c4:	017fff04 	movi	r5,-4
   883c8:	414a703a 	and	r5,r8,r5
   883cc:	89800404 	addi	r6,r17,16
   883d0:	8151883a 	add	r8,r16,r5
   883d4:	4180590e 	bge	r8,r6,8853c <_realloc_r+0x390>
   883d8:	1080004c 	andi	r2,r2,1
   883dc:	103f9e1e 	bne	r2,zero,88258 <__alt_data_end+0xfffbc768>
   883e0:	adbffe17 	ldw	r22,-8(r21)
   883e4:	00bfff04 	movi	r2,-4
   883e8:	9dadc83a 	sub	r22,r19,r22
   883ec:	b1800117 	ldw	r6,4(r22)
   883f0:	3084703a 	and	r2,r6,r2
   883f4:	20002026 	beq	r4,zero,88478 <_realloc_r+0x2cc>
   883f8:	80af883a 	add	r23,r16,r2
   883fc:	b96f883a 	add	r23,r23,r5
   88400:	21c05f26 	beq	r4,r7,88580 <_realloc_r+0x3d4>
   88404:	b8c01c16 	blt	r23,r3,88478 <_realloc_r+0x2cc>
   88408:	20800317 	ldw	r2,12(r4)
   8840c:	20c00217 	ldw	r3,8(r4)
   88410:	81bfff04 	addi	r6,r16,-4
   88414:	01000904 	movi	r4,36
   88418:	18800315 	stw	r2,12(r3)
   8841c:	10c00215 	stw	r3,8(r2)
   88420:	b0c00217 	ldw	r3,8(r22)
   88424:	b0800317 	ldw	r2,12(r22)
   88428:	b4800204 	addi	r18,r22,8
   8842c:	18800315 	stw	r2,12(r3)
   88430:	10c00215 	stw	r3,8(r2)
   88434:	21801b36 	bltu	r4,r6,884a4 <_realloc_r+0x2f8>
   88438:	008004c4 	movi	r2,19
   8843c:	1180352e 	bgeu	r2,r6,88514 <_realloc_r+0x368>
   88440:	a8800017 	ldw	r2,0(r21)
   88444:	b0800215 	stw	r2,8(r22)
   88448:	a8800117 	ldw	r2,4(r21)
   8844c:	b0800315 	stw	r2,12(r22)
   88450:	008006c4 	movi	r2,27
   88454:	11807f36 	bltu	r2,r6,88654 <_realloc_r+0x4a8>
   88458:	b0800404 	addi	r2,r22,16
   8845c:	ad400204 	addi	r21,r21,8
   88460:	00002d06 	br	88518 <_realloc_r+0x36c>
   88464:	adbffe17 	ldw	r22,-8(r21)
   88468:	00bfff04 	movi	r2,-4
   8846c:	9dadc83a 	sub	r22,r19,r22
   88470:	b1000117 	ldw	r4,4(r22)
   88474:	2084703a 	and	r2,r4,r2
   88478:	b03f7726 	beq	r22,zero,88258 <__alt_data_end+0xfffbc768>
   8847c:	80af883a 	add	r23,r16,r2
   88480:	b8ff7516 	blt	r23,r3,88258 <__alt_data_end+0xfffbc768>
   88484:	b0800317 	ldw	r2,12(r22)
   88488:	b0c00217 	ldw	r3,8(r22)
   8848c:	81bfff04 	addi	r6,r16,-4
   88490:	01000904 	movi	r4,36
   88494:	18800315 	stw	r2,12(r3)
   88498:	10c00215 	stw	r3,8(r2)
   8849c:	b4800204 	addi	r18,r22,8
   884a0:	21bfe52e 	bgeu	r4,r6,88438 <__alt_data_end+0xfffbc948>
   884a4:	a80b883a 	mov	r5,r21
   884a8:	9009883a 	mov	r4,r18
   884ac:	0086f2c0 	call	86f2c <memmove>
   884b0:	b821883a 	mov	r16,r23
   884b4:	b027883a 	mov	r19,r22
   884b8:	003f8a06 	br	882e4 <__alt_data_end+0xfffbc7f4>
   884bc:	300b883a 	mov	r5,r6
   884c0:	dfc00917 	ldw	ra,36(sp)
   884c4:	df000817 	ldw	fp,32(sp)
   884c8:	ddc00717 	ldw	r23,28(sp)
   884cc:	dd800617 	ldw	r22,24(sp)
   884d0:	dd400517 	ldw	r21,20(sp)
   884d4:	dd000417 	ldw	r20,16(sp)
   884d8:	dcc00317 	ldw	r19,12(sp)
   884dc:	dc800217 	ldw	r18,8(sp)
   884e0:	dc400117 	ldw	r17,4(sp)
   884e4:	dc000017 	ldw	r16,0(sp)
   884e8:	dec00a04 	addi	sp,sp,40
   884ec:	00864f41 	jmpi	864f4 <_malloc_r>
   884f0:	a8c00017 	ldw	r3,0(r21)
   884f4:	90c00015 	stw	r3,0(r18)
   884f8:	a8c00117 	ldw	r3,4(r21)
   884fc:	90c00115 	stw	r3,4(r18)
   88500:	00c006c4 	movi	r3,27
   88504:	19804536 	bltu	r3,r6,8861c <_realloc_r+0x470>
   88508:	90800204 	addi	r2,r18,8
   8850c:	a8c00204 	addi	r3,r21,8
   88510:	003f6306 	br	882a0 <__alt_data_end+0xfffbc7b0>
   88514:	9005883a 	mov	r2,r18
   88518:	a8c00017 	ldw	r3,0(r21)
   8851c:	b821883a 	mov	r16,r23
   88520:	b027883a 	mov	r19,r22
   88524:	10c00015 	stw	r3,0(r2)
   88528:	a8c00117 	ldw	r3,4(r21)
   8852c:	10c00115 	stw	r3,4(r2)
   88530:	a8c00217 	ldw	r3,8(r21)
   88534:	10c00215 	stw	r3,8(r2)
   88538:	003f6a06 	br	882e4 <__alt_data_end+0xfffbc7f4>
   8853c:	9c67883a 	add	r19,r19,r17
   88540:	4445c83a 	sub	r2,r8,r17
   88544:	e4c00215 	stw	r19,8(fp)
   88548:	10800054 	ori	r2,r2,1
   8854c:	98800115 	stw	r2,4(r19)
   88550:	a8bfff17 	ldw	r2,-4(r21)
   88554:	a009883a 	mov	r4,r20
   88558:	1080004c 	andi	r2,r2,1
   8855c:	1462b03a 	or	r17,r2,r17
   88560:	ac7fff15 	stw	r17,-4(r21)
   88564:	008e6980 	call	8e698 <__malloc_unlock>
   88568:	a805883a 	mov	r2,r21
   8856c:	003f6b06 	br	8831c <__alt_data_end+0xfffbc82c>
   88570:	a80b883a 	mov	r5,r21
   88574:	9009883a 	mov	r4,r18
   88578:	0086f2c0 	call	86f2c <memmove>
   8857c:	003f4e06 	br	882b8 <__alt_data_end+0xfffbc7c8>
   88580:	89000404 	addi	r4,r17,16
   88584:	b93fbc16 	blt	r23,r4,88478 <__alt_data_end+0xfffbc988>
   88588:	b0800317 	ldw	r2,12(r22)
   8858c:	b0c00217 	ldw	r3,8(r22)
   88590:	81bfff04 	addi	r6,r16,-4
   88594:	01000904 	movi	r4,36
   88598:	18800315 	stw	r2,12(r3)
   8859c:	10c00215 	stw	r3,8(r2)
   885a0:	b4800204 	addi	r18,r22,8
   885a4:	21804336 	bltu	r4,r6,886b4 <_realloc_r+0x508>
   885a8:	008004c4 	movi	r2,19
   885ac:	11803f2e 	bgeu	r2,r6,886ac <_realloc_r+0x500>
   885b0:	a8800017 	ldw	r2,0(r21)
   885b4:	b0800215 	stw	r2,8(r22)
   885b8:	a8800117 	ldw	r2,4(r21)
   885bc:	b0800315 	stw	r2,12(r22)
   885c0:	008006c4 	movi	r2,27
   885c4:	11803f36 	bltu	r2,r6,886c4 <_realloc_r+0x518>
   885c8:	b0800404 	addi	r2,r22,16
   885cc:	ad400204 	addi	r21,r21,8
   885d0:	a8c00017 	ldw	r3,0(r21)
   885d4:	10c00015 	stw	r3,0(r2)
   885d8:	a8c00117 	ldw	r3,4(r21)
   885dc:	10c00115 	stw	r3,4(r2)
   885e0:	a8c00217 	ldw	r3,8(r21)
   885e4:	10c00215 	stw	r3,8(r2)
   885e8:	b447883a 	add	r3,r22,r17
   885ec:	bc45c83a 	sub	r2,r23,r17
   885f0:	e0c00215 	stw	r3,8(fp)
   885f4:	10800054 	ori	r2,r2,1
   885f8:	18800115 	stw	r2,4(r3)
   885fc:	b0800117 	ldw	r2,4(r22)
   88600:	a009883a 	mov	r4,r20
   88604:	1080004c 	andi	r2,r2,1
   88608:	1462b03a 	or	r17,r2,r17
   8860c:	b4400115 	stw	r17,4(r22)
   88610:	008e6980 	call	8e698 <__malloc_unlock>
   88614:	9005883a 	mov	r2,r18
   88618:	003f4006 	br	8831c <__alt_data_end+0xfffbc82c>
   8861c:	a8c00217 	ldw	r3,8(r21)
   88620:	90c00215 	stw	r3,8(r18)
   88624:	a8c00317 	ldw	r3,12(r21)
   88628:	90c00315 	stw	r3,12(r18)
   8862c:	30801126 	beq	r6,r2,88674 <_realloc_r+0x4c8>
   88630:	90800404 	addi	r2,r18,16
   88634:	a8c00404 	addi	r3,r21,16
   88638:	003f1906 	br	882a0 <__alt_data_end+0xfffbc7b0>
   8863c:	90ffff17 	ldw	r3,-4(r18)
   88640:	00bfff04 	movi	r2,-4
   88644:	a825883a 	mov	r18,r21
   88648:	1884703a 	and	r2,r3,r2
   8864c:	80a1883a 	add	r16,r16,r2
   88650:	003f2406 	br	882e4 <__alt_data_end+0xfffbc7f4>
   88654:	a8800217 	ldw	r2,8(r21)
   88658:	b0800415 	stw	r2,16(r22)
   8865c:	a8800317 	ldw	r2,12(r21)
   88660:	b0800515 	stw	r2,20(r22)
   88664:	31000a26 	beq	r6,r4,88690 <_realloc_r+0x4e4>
   88668:	b0800604 	addi	r2,r22,24
   8866c:	ad400404 	addi	r21,r21,16
   88670:	003fa906 	br	88518 <__alt_data_end+0xfffbca28>
   88674:	a9000417 	ldw	r4,16(r21)
   88678:	90800604 	addi	r2,r18,24
   8867c:	a8c00604 	addi	r3,r21,24
   88680:	91000415 	stw	r4,16(r18)
   88684:	a9000517 	ldw	r4,20(r21)
   88688:	91000515 	stw	r4,20(r18)
   8868c:	003f0406 	br	882a0 <__alt_data_end+0xfffbc7b0>
   88690:	a8c00417 	ldw	r3,16(r21)
   88694:	ad400604 	addi	r21,r21,24
   88698:	b0800804 	addi	r2,r22,32
   8869c:	b0c00615 	stw	r3,24(r22)
   886a0:	a8ffff17 	ldw	r3,-4(r21)
   886a4:	b0c00715 	stw	r3,28(r22)
   886a8:	003f9b06 	br	88518 <__alt_data_end+0xfffbca28>
   886ac:	9005883a 	mov	r2,r18
   886b0:	003fc706 	br	885d0 <__alt_data_end+0xfffbcae0>
   886b4:	a80b883a 	mov	r5,r21
   886b8:	9009883a 	mov	r4,r18
   886bc:	0086f2c0 	call	86f2c <memmove>
   886c0:	003fc906 	br	885e8 <__alt_data_end+0xfffbcaf8>
   886c4:	a8800217 	ldw	r2,8(r21)
   886c8:	b0800415 	stw	r2,16(r22)
   886cc:	a8800317 	ldw	r2,12(r21)
   886d0:	b0800515 	stw	r2,20(r22)
   886d4:	31000726 	beq	r6,r4,886f4 <_realloc_r+0x548>
   886d8:	b0800604 	addi	r2,r22,24
   886dc:	ad400404 	addi	r21,r21,16
   886e0:	003fbb06 	br	885d0 <__alt_data_end+0xfffbcae0>
   886e4:	a009883a 	mov	r4,r20
   886e8:	008e6980 	call	8e698 <__malloc_unlock>
   886ec:	0005883a 	mov	r2,zero
   886f0:	003f0a06 	br	8831c <__alt_data_end+0xfffbc82c>
   886f4:	a8c00417 	ldw	r3,16(r21)
   886f8:	ad400604 	addi	r21,r21,24
   886fc:	b0800804 	addi	r2,r22,32
   88700:	b0c00615 	stw	r3,24(r22)
   88704:	a8ffff17 	ldw	r3,-4(r21)
   88708:	b0c00715 	stw	r3,28(r22)
   8870c:	003fb006 	br	885d0 <__alt_data_end+0xfffbcae0>

00088710 <__fpclassifyd>:
   88710:	00a00034 	movhi	r2,32768
   88714:	10bfffc4 	addi	r2,r2,-1
   88718:	2884703a 	and	r2,r5,r2
   8871c:	10000726 	beq	r2,zero,8873c <__fpclassifyd+0x2c>
   88720:	00fffc34 	movhi	r3,65520
   88724:	019ff834 	movhi	r6,32736
   88728:	28c7883a 	add	r3,r5,r3
   8872c:	31bfffc4 	addi	r6,r6,-1
   88730:	30c00536 	bltu	r6,r3,88748 <__fpclassifyd+0x38>
   88734:	00800104 	movi	r2,4
   88738:	f800283a 	ret
   8873c:	2000021e 	bne	r4,zero,88748 <__fpclassifyd+0x38>
   88740:	00800084 	movi	r2,2
   88744:	f800283a 	ret
   88748:	00dffc34 	movhi	r3,32752
   8874c:	019ff834 	movhi	r6,32736
   88750:	28cb883a 	add	r5,r5,r3
   88754:	31bfffc4 	addi	r6,r6,-1
   88758:	317ff62e 	bgeu	r6,r5,88734 <__alt_data_end+0xfffbcc44>
   8875c:	01400434 	movhi	r5,16
   88760:	297fffc4 	addi	r5,r5,-1
   88764:	28800236 	bltu	r5,r2,88770 <__fpclassifyd+0x60>
   88768:	008000c4 	movi	r2,3
   8876c:	f800283a 	ret
   88770:	10c00226 	beq	r2,r3,8877c <__fpclassifyd+0x6c>
   88774:	0005883a 	mov	r2,zero
   88778:	f800283a 	ret
   8877c:	2005003a 	cmpeq	r2,r4,zero
   88780:	f800283a 	ret

00088784 <_sbrk_r>:
   88784:	defffd04 	addi	sp,sp,-12
   88788:	dc000015 	stw	r16,0(sp)
   8878c:	04000274 	movhi	r16,9
   88790:	dc400115 	stw	r17,4(sp)
   88794:	84106204 	addi	r16,r16,16776
   88798:	2023883a 	mov	r17,r4
   8879c:	2809883a 	mov	r4,r5
   887a0:	dfc00215 	stw	ra,8(sp)
   887a4:	80000015 	stw	zero,0(r16)
   887a8:	008e8580 	call	8e858 <sbrk>
   887ac:	00ffffc4 	movi	r3,-1
   887b0:	10c00526 	beq	r2,r3,887c8 <_sbrk_r+0x44>
   887b4:	dfc00217 	ldw	ra,8(sp)
   887b8:	dc400117 	ldw	r17,4(sp)
   887bc:	dc000017 	ldw	r16,0(sp)
   887c0:	dec00304 	addi	sp,sp,12
   887c4:	f800283a 	ret
   887c8:	80c00017 	ldw	r3,0(r16)
   887cc:	183ff926 	beq	r3,zero,887b4 <__alt_data_end+0xfffbccc4>
   887d0:	88c00015 	stw	r3,0(r17)
   887d4:	003ff706 	br	887b4 <__alt_data_end+0xfffbccc4>

000887d8 <__sread>:
   887d8:	defffe04 	addi	sp,sp,-8
   887dc:	dc000015 	stw	r16,0(sp)
   887e0:	2821883a 	mov	r16,r5
   887e4:	2940038f 	ldh	r5,14(r5)
   887e8:	dfc00115 	stw	ra,4(sp)
   887ec:	008a5cc0 	call	8a5cc <_read_r>
   887f0:	10000716 	blt	r2,zero,88810 <__sread+0x38>
   887f4:	80c01417 	ldw	r3,80(r16)
   887f8:	1887883a 	add	r3,r3,r2
   887fc:	80c01415 	stw	r3,80(r16)
   88800:	dfc00117 	ldw	ra,4(sp)
   88804:	dc000017 	ldw	r16,0(sp)
   88808:	dec00204 	addi	sp,sp,8
   8880c:	f800283a 	ret
   88810:	80c0030b 	ldhu	r3,12(r16)
   88814:	18fbffcc 	andi	r3,r3,61439
   88818:	80c0030d 	sth	r3,12(r16)
   8881c:	dfc00117 	ldw	ra,4(sp)
   88820:	dc000017 	ldw	r16,0(sp)
   88824:	dec00204 	addi	sp,sp,8
   88828:	f800283a 	ret

0008882c <__seofread>:
   8882c:	0005883a 	mov	r2,zero
   88830:	f800283a 	ret

00088834 <__swrite>:
   88834:	2880030b 	ldhu	r2,12(r5)
   88838:	defffb04 	addi	sp,sp,-20
   8883c:	dcc00315 	stw	r19,12(sp)
   88840:	dc800215 	stw	r18,8(sp)
   88844:	dc400115 	stw	r17,4(sp)
   88848:	dc000015 	stw	r16,0(sp)
   8884c:	dfc00415 	stw	ra,16(sp)
   88850:	10c0400c 	andi	r3,r2,256
   88854:	2821883a 	mov	r16,r5
   88858:	2023883a 	mov	r17,r4
   8885c:	3025883a 	mov	r18,r6
   88860:	3827883a 	mov	r19,r7
   88864:	18000526 	beq	r3,zero,8887c <__swrite+0x48>
   88868:	2940038f 	ldh	r5,14(r5)
   8886c:	01c00084 	movi	r7,2
   88870:	000d883a 	mov	r6,zero
   88874:	008a56c0 	call	8a56c <_lseek_r>
   88878:	8080030b 	ldhu	r2,12(r16)
   8887c:	8140038f 	ldh	r5,14(r16)
   88880:	10bbffcc 	andi	r2,r2,61439
   88884:	980f883a 	mov	r7,r19
   88888:	900d883a 	mov	r6,r18
   8888c:	8809883a 	mov	r4,r17
   88890:	8080030d 	sth	r2,12(r16)
   88894:	dfc00417 	ldw	ra,16(sp)
   88898:	dcc00317 	ldw	r19,12(sp)
   8889c:	dc800217 	ldw	r18,8(sp)
   888a0:	dc400117 	ldw	r17,4(sp)
   888a4:	dc000017 	ldw	r16,0(sp)
   888a8:	dec00504 	addi	sp,sp,20
   888ac:	008a0381 	jmpi	8a038 <_write_r>

000888b0 <__sseek>:
   888b0:	defffe04 	addi	sp,sp,-8
   888b4:	dc000015 	stw	r16,0(sp)
   888b8:	2821883a 	mov	r16,r5
   888bc:	2940038f 	ldh	r5,14(r5)
   888c0:	dfc00115 	stw	ra,4(sp)
   888c4:	008a56c0 	call	8a56c <_lseek_r>
   888c8:	00ffffc4 	movi	r3,-1
   888cc:	10c00826 	beq	r2,r3,888f0 <__sseek+0x40>
   888d0:	80c0030b 	ldhu	r3,12(r16)
   888d4:	80801415 	stw	r2,80(r16)
   888d8:	18c40014 	ori	r3,r3,4096
   888dc:	80c0030d 	sth	r3,12(r16)
   888e0:	dfc00117 	ldw	ra,4(sp)
   888e4:	dc000017 	ldw	r16,0(sp)
   888e8:	dec00204 	addi	sp,sp,8
   888ec:	f800283a 	ret
   888f0:	80c0030b 	ldhu	r3,12(r16)
   888f4:	18fbffcc 	andi	r3,r3,61439
   888f8:	80c0030d 	sth	r3,12(r16)
   888fc:	dfc00117 	ldw	ra,4(sp)
   88900:	dc000017 	ldw	r16,0(sp)
   88904:	dec00204 	addi	sp,sp,8
   88908:	f800283a 	ret

0008890c <__sclose>:
   8890c:	2940038f 	ldh	r5,14(r5)
   88910:	008a0981 	jmpi	8a098 <_close_r>

00088914 <strcmp>:
   88914:	2144b03a 	or	r2,r4,r5
   88918:	108000cc 	andi	r2,r2,3
   8891c:	1000171e 	bne	r2,zero,8897c <strcmp+0x68>
   88920:	20800017 	ldw	r2,0(r4)
   88924:	28c00017 	ldw	r3,0(r5)
   88928:	10c0141e 	bne	r2,r3,8897c <strcmp+0x68>
   8892c:	027fbff4 	movhi	r9,65279
   88930:	4a7fbfc4 	addi	r9,r9,-257
   88934:	0086303a 	nor	r3,zero,r2
   88938:	02202074 	movhi	r8,32897
   8893c:	1245883a 	add	r2,r2,r9
   88940:	42202004 	addi	r8,r8,-32640
   88944:	10c4703a 	and	r2,r2,r3
   88948:	1204703a 	and	r2,r2,r8
   8894c:	10000226 	beq	r2,zero,88958 <strcmp+0x44>
   88950:	00002306 	br	889e0 <strcmp+0xcc>
   88954:	1000221e 	bne	r2,zero,889e0 <strcmp+0xcc>
   88958:	21000104 	addi	r4,r4,4
   8895c:	20c00017 	ldw	r3,0(r4)
   88960:	29400104 	addi	r5,r5,4
   88964:	29800017 	ldw	r6,0(r5)
   88968:	1a4f883a 	add	r7,r3,r9
   8896c:	00c4303a 	nor	r2,zero,r3
   88970:	3884703a 	and	r2,r7,r2
   88974:	1204703a 	and	r2,r2,r8
   88978:	19bff626 	beq	r3,r6,88954 <__alt_data_end+0xfffbce64>
   8897c:	20800003 	ldbu	r2,0(r4)
   88980:	10c03fcc 	andi	r3,r2,255
   88984:	18c0201c 	xori	r3,r3,128
   88988:	18ffe004 	addi	r3,r3,-128
   8898c:	18000c26 	beq	r3,zero,889c0 <strcmp+0xac>
   88990:	29800007 	ldb	r6,0(r5)
   88994:	19800326 	beq	r3,r6,889a4 <strcmp+0x90>
   88998:	00001306 	br	889e8 <strcmp+0xd4>
   8899c:	29800007 	ldb	r6,0(r5)
   889a0:	11800b1e 	bne	r2,r6,889d0 <strcmp+0xbc>
   889a4:	21000044 	addi	r4,r4,1
   889a8:	20c00003 	ldbu	r3,0(r4)
   889ac:	29400044 	addi	r5,r5,1
   889b0:	18803fcc 	andi	r2,r3,255
   889b4:	1080201c 	xori	r2,r2,128
   889b8:	10bfe004 	addi	r2,r2,-128
   889bc:	103ff71e 	bne	r2,zero,8899c <__alt_data_end+0xfffbceac>
   889c0:	0007883a 	mov	r3,zero
   889c4:	28800003 	ldbu	r2,0(r5)
   889c8:	1885c83a 	sub	r2,r3,r2
   889cc:	f800283a 	ret
   889d0:	28800003 	ldbu	r2,0(r5)
   889d4:	18c03fcc 	andi	r3,r3,255
   889d8:	1885c83a 	sub	r2,r3,r2
   889dc:	f800283a 	ret
   889e0:	0005883a 	mov	r2,zero
   889e4:	f800283a 	ret
   889e8:	10c03fcc 	andi	r3,r2,255
   889ec:	003ff506 	br	889c4 <__alt_data_end+0xfffbced4>

000889f0 <__sprint_r.part.0>:
   889f0:	28801917 	ldw	r2,100(r5)
   889f4:	defff604 	addi	sp,sp,-40
   889f8:	dd400515 	stw	r21,20(sp)
   889fc:	dfc00915 	stw	ra,36(sp)
   88a00:	df000815 	stw	fp,32(sp)
   88a04:	ddc00715 	stw	r23,28(sp)
   88a08:	dd800615 	stw	r22,24(sp)
   88a0c:	dd000415 	stw	r20,16(sp)
   88a10:	dcc00315 	stw	r19,12(sp)
   88a14:	dc800215 	stw	r18,8(sp)
   88a18:	dc400115 	stw	r17,4(sp)
   88a1c:	dc000015 	stw	r16,0(sp)
   88a20:	1088000c 	andi	r2,r2,8192
   88a24:	302b883a 	mov	r21,r6
   88a28:	10002e26 	beq	r2,zero,88ae4 <__sprint_r.part.0+0xf4>
   88a2c:	30800217 	ldw	r2,8(r6)
   88a30:	35800017 	ldw	r22,0(r6)
   88a34:	10002926 	beq	r2,zero,88adc <__sprint_r.part.0+0xec>
   88a38:	2827883a 	mov	r19,r5
   88a3c:	2029883a 	mov	r20,r4
   88a40:	b5c00104 	addi	r23,r22,4
   88a44:	04bfffc4 	movi	r18,-1
   88a48:	bc400017 	ldw	r17,0(r23)
   88a4c:	b4000017 	ldw	r16,0(r22)
   88a50:	0039883a 	mov	fp,zero
   88a54:	8822d0ba 	srli	r17,r17,2
   88a58:	8800031e 	bne	r17,zero,88a68 <__sprint_r.part.0+0x78>
   88a5c:	00001806 	br	88ac0 <__sprint_r.part.0+0xd0>
   88a60:	84000104 	addi	r16,r16,4
   88a64:	8f001526 	beq	r17,fp,88abc <__sprint_r.part.0+0xcc>
   88a68:	81400017 	ldw	r5,0(r16)
   88a6c:	980d883a 	mov	r6,r19
   88a70:	a009883a 	mov	r4,r20
   88a74:	008a4180 	call	8a418 <_fputwc_r>
   88a78:	e7000044 	addi	fp,fp,1
   88a7c:	14bff81e 	bne	r2,r18,88a60 <__alt_data_end+0xfffbcf70>
   88a80:	9005883a 	mov	r2,r18
   88a84:	a8000215 	stw	zero,8(r21)
   88a88:	a8000115 	stw	zero,4(r21)
   88a8c:	dfc00917 	ldw	ra,36(sp)
   88a90:	df000817 	ldw	fp,32(sp)
   88a94:	ddc00717 	ldw	r23,28(sp)
   88a98:	dd800617 	ldw	r22,24(sp)
   88a9c:	dd400517 	ldw	r21,20(sp)
   88aa0:	dd000417 	ldw	r20,16(sp)
   88aa4:	dcc00317 	ldw	r19,12(sp)
   88aa8:	dc800217 	ldw	r18,8(sp)
   88aac:	dc400117 	ldw	r17,4(sp)
   88ab0:	dc000017 	ldw	r16,0(sp)
   88ab4:	dec00a04 	addi	sp,sp,40
   88ab8:	f800283a 	ret
   88abc:	a8800217 	ldw	r2,8(r21)
   88ac0:	8c63883a 	add	r17,r17,r17
   88ac4:	8c63883a 	add	r17,r17,r17
   88ac8:	1445c83a 	sub	r2,r2,r17
   88acc:	a8800215 	stw	r2,8(r21)
   88ad0:	b5800204 	addi	r22,r22,8
   88ad4:	bdc00204 	addi	r23,r23,8
   88ad8:	103fdb1e 	bne	r2,zero,88a48 <__alt_data_end+0xfffbcf58>
   88adc:	0005883a 	mov	r2,zero
   88ae0:	003fe806 	br	88a84 <__alt_data_end+0xfffbcf94>
   88ae4:	0085bbc0 	call	85bbc <__sfvwrite_r>
   88ae8:	003fe606 	br	88a84 <__alt_data_end+0xfffbcf94>

00088aec <__sprint_r>:
   88aec:	30c00217 	ldw	r3,8(r6)
   88af0:	18000126 	beq	r3,zero,88af8 <__sprint_r+0xc>
   88af4:	00889f01 	jmpi	889f0 <__sprint_r.part.0>
   88af8:	30000115 	stw	zero,4(r6)
   88afc:	0005883a 	mov	r2,zero
   88b00:	f800283a 	ret

00088b04 <___vfiprintf_internal_r>:
   88b04:	deffc904 	addi	sp,sp,-220
   88b08:	df003515 	stw	fp,212(sp)
   88b0c:	dd003115 	stw	r20,196(sp)
   88b10:	dfc03615 	stw	ra,216(sp)
   88b14:	ddc03415 	stw	r23,208(sp)
   88b18:	dd803315 	stw	r22,204(sp)
   88b1c:	dd403215 	stw	r21,200(sp)
   88b20:	dcc03015 	stw	r19,192(sp)
   88b24:	dc802f15 	stw	r18,188(sp)
   88b28:	dc402e15 	stw	r17,184(sp)
   88b2c:	dc002d15 	stw	r16,180(sp)
   88b30:	d9002015 	stw	r4,128(sp)
   88b34:	d9c02215 	stw	r7,136(sp)
   88b38:	2829883a 	mov	r20,r5
   88b3c:	3039883a 	mov	fp,r6
   88b40:	20000226 	beq	r4,zero,88b4c <___vfiprintf_internal_r+0x48>
   88b44:	20800e17 	ldw	r2,56(r4)
   88b48:	1000cf26 	beq	r2,zero,88e88 <___vfiprintf_internal_r+0x384>
   88b4c:	a080030b 	ldhu	r2,12(r20)
   88b50:	10c8000c 	andi	r3,r2,8192
   88b54:	1800061e 	bne	r3,zero,88b70 <___vfiprintf_internal_r+0x6c>
   88b58:	a1001917 	ldw	r4,100(r20)
   88b5c:	00f7ffc4 	movi	r3,-8193
   88b60:	10880014 	ori	r2,r2,8192
   88b64:	20c6703a 	and	r3,r4,r3
   88b68:	a080030d 	sth	r2,12(r20)
   88b6c:	a0c01915 	stw	r3,100(r20)
   88b70:	10c0020c 	andi	r3,r2,8
   88b74:	1800a926 	beq	r3,zero,88e1c <___vfiprintf_internal_r+0x318>
   88b78:	a0c00417 	ldw	r3,16(r20)
   88b7c:	1800a726 	beq	r3,zero,88e1c <___vfiprintf_internal_r+0x318>
   88b80:	1080068c 	andi	r2,r2,26
   88b84:	00c00284 	movi	r3,10
   88b88:	10c0ac26 	beq	r2,r3,88e3c <___vfiprintf_internal_r+0x338>
   88b8c:	da801a04 	addi	r10,sp,104
   88b90:	da801e15 	stw	r10,120(sp)
   88b94:	d8801e17 	ldw	r2,120(sp)
   88b98:	da8019c4 	addi	r10,sp,103
   88b9c:	05800274 	movhi	r22,9
   88ba0:	05c00274 	movhi	r23,9
   88ba4:	da801f15 	stw	r10,124(sp)
   88ba8:	1295c83a 	sub	r10,r2,r10
   88bac:	b5824304 	addi	r22,r22,2316
   88bb0:	bdc23f04 	addi	r23,r23,2300
   88bb4:	dec01a15 	stw	sp,104(sp)
   88bb8:	d8001c15 	stw	zero,112(sp)
   88bbc:	d8001b15 	stw	zero,108(sp)
   88bc0:	d8002615 	stw	zero,152(sp)
   88bc4:	d8002315 	stw	zero,140(sp)
   88bc8:	da802715 	stw	r10,156(sp)
   88bcc:	d811883a 	mov	r8,sp
   88bd0:	dd002115 	stw	r20,132(sp)
   88bd4:	e021883a 	mov	r16,fp
   88bd8:	80800007 	ldb	r2,0(r16)
   88bdc:	1003ea26 	beq	r2,zero,89b88 <___vfiprintf_internal_r+0x1084>
   88be0:	00c00944 	movi	r3,37
   88be4:	8025883a 	mov	r18,r16
   88be8:	10c0021e 	bne	r2,r3,88bf4 <___vfiprintf_internal_r+0xf0>
   88bec:	00001606 	br	88c48 <___vfiprintf_internal_r+0x144>
   88bf0:	10c00326 	beq	r2,r3,88c00 <___vfiprintf_internal_r+0xfc>
   88bf4:	94800044 	addi	r18,r18,1
   88bf8:	90800007 	ldb	r2,0(r18)
   88bfc:	103ffc1e 	bne	r2,zero,88bf0 <__alt_data_end+0xfffbd100>
   88c00:	9423c83a 	sub	r17,r18,r16
   88c04:	88001026 	beq	r17,zero,88c48 <___vfiprintf_internal_r+0x144>
   88c08:	d8c01c17 	ldw	r3,112(sp)
   88c0c:	d8801b17 	ldw	r2,108(sp)
   88c10:	44000015 	stw	r16,0(r8)
   88c14:	88c7883a 	add	r3,r17,r3
   88c18:	10800044 	addi	r2,r2,1
   88c1c:	44400115 	stw	r17,4(r8)
   88c20:	d8c01c15 	stw	r3,112(sp)
   88c24:	d8801b15 	stw	r2,108(sp)
   88c28:	010001c4 	movi	r4,7
   88c2c:	2080760e 	bge	r4,r2,88e08 <___vfiprintf_internal_r+0x304>
   88c30:	1803821e 	bne	r3,zero,89a3c <___vfiprintf_internal_r+0xf38>
   88c34:	da802317 	ldw	r10,140(sp)
   88c38:	d8001b15 	stw	zero,108(sp)
   88c3c:	d811883a 	mov	r8,sp
   88c40:	5455883a 	add	r10,r10,r17
   88c44:	da802315 	stw	r10,140(sp)
   88c48:	90800007 	ldb	r2,0(r18)
   88c4c:	10044626 	beq	r2,zero,89d68 <___vfiprintf_internal_r+0x1264>
   88c50:	90c00047 	ldb	r3,1(r18)
   88c54:	94000044 	addi	r16,r18,1
   88c58:	d8001d85 	stb	zero,118(sp)
   88c5c:	0009883a 	mov	r4,zero
   88c60:	000f883a 	mov	r7,zero
   88c64:	027fffc4 	movi	r9,-1
   88c68:	0023883a 	mov	r17,zero
   88c6c:	0029883a 	mov	r20,zero
   88c70:	01401604 	movi	r5,88
   88c74:	01800244 	movi	r6,9
   88c78:	03400a84 	movi	r13,42
   88c7c:	03001b04 	movi	r12,108
   88c80:	84000044 	addi	r16,r16,1
   88c84:	18bff804 	addi	r2,r3,-32
   88c88:	28827336 	bltu	r5,r2,89658 <___vfiprintf_internal_r+0xb54>
   88c8c:	100490ba 	slli	r2,r2,2
   88c90:	02800274 	movhi	r10,9
   88c94:	52a32904 	addi	r10,r10,-29532
   88c98:	1285883a 	add	r2,r2,r10
   88c9c:	10800017 	ldw	r2,0(r2)
   88ca0:	1000683a 	jmp	r2
   88ca4:	0008938c 	andi	zero,zero,8782
   88ca8:	00089658 	cmpnei	zero,zero,8793
   88cac:	00089658 	cmpnei	zero,zero,8793
   88cb0:	000893ac 	andhi	zero,zero,8782
   88cb4:	00089658 	cmpnei	zero,zero,8793
   88cb8:	00089658 	cmpnei	zero,zero,8793
   88cbc:	00089658 	cmpnei	zero,zero,8793
   88cc0:	00089658 	cmpnei	zero,zero,8793
   88cc4:	00089658 	cmpnei	zero,zero,8793
   88cc8:	00089658 	cmpnei	zero,zero,8793
   88ccc:	00089594 	movui	zero,8790
   88cd0:	000895b0 	cmpltui	zero,zero,8790
   88cd4:	00089658 	cmpnei	zero,zero,8793
   88cd8:	00088e98 	cmpnei	zero,zero,8762
   88cdc:	000895c0 	call	895c <__alt_mem_onchip_memory2-0x776a4>
   88ce0:	00089658 	cmpnei	zero,zero,8793
   88ce4:	000893b8 	rdprs	zero,zero,8782
   88ce8:	000893c4 	movi	zero,8783
   88cec:	000893c4 	movi	zero,8783
   88cf0:	000893c4 	movi	zero,8783
   88cf4:	000893c4 	movi	zero,8783
   88cf8:	000893c4 	movi	zero,8783
   88cfc:	000893c4 	movi	zero,8783
   88d00:	000893c4 	movi	zero,8783
   88d04:	000893c4 	movi	zero,8783
   88d08:	000893c4 	movi	zero,8783
   88d0c:	00089658 	cmpnei	zero,zero,8793
   88d10:	00089658 	cmpnei	zero,zero,8793
   88d14:	00089658 	cmpnei	zero,zero,8793
   88d18:	00089658 	cmpnei	zero,zero,8793
   88d1c:	00089658 	cmpnei	zero,zero,8793
   88d20:	00089658 	cmpnei	zero,zero,8793
   88d24:	00089658 	cmpnei	zero,zero,8793
   88d28:	00089658 	cmpnei	zero,zero,8793
   88d2c:	00089658 	cmpnei	zero,zero,8793
   88d30:	00089658 	cmpnei	zero,zero,8793
   88d34:	000893f0 	cmpltui	zero,zero,8783
   88d38:	00089658 	cmpnei	zero,zero,8793
   88d3c:	00089658 	cmpnei	zero,zero,8793
   88d40:	00089658 	cmpnei	zero,zero,8793
   88d44:	00089658 	cmpnei	zero,zero,8793
   88d48:	00089658 	cmpnei	zero,zero,8793
   88d4c:	00089658 	cmpnei	zero,zero,8793
   88d50:	00089658 	cmpnei	zero,zero,8793
   88d54:	00089658 	cmpnei	zero,zero,8793
   88d58:	00089658 	cmpnei	zero,zero,8793
   88d5c:	00089658 	cmpnei	zero,zero,8793
   88d60:	00089428 	cmpgeui	zero,zero,8784
   88d64:	00089658 	cmpnei	zero,zero,8793
   88d68:	00089658 	cmpnei	zero,zero,8793
   88d6c:	00089658 	cmpnei	zero,zero,8793
   88d70:	00089658 	cmpnei	zero,zero,8793
   88d74:	00089658 	cmpnei	zero,zero,8793
   88d78:	00089480 	call	8948 <__alt_mem_onchip_memory2-0x776b8>
   88d7c:	00089658 	cmpnei	zero,zero,8793
   88d80:	00089658 	cmpnei	zero,zero,8793
   88d84:	000894f0 	cmpltui	zero,zero,8787
   88d88:	00089658 	cmpnei	zero,zero,8793
   88d8c:	00089658 	cmpnei	zero,zero,8793
   88d90:	00089658 	cmpnei	zero,zero,8793
   88d94:	00089658 	cmpnei	zero,zero,8793
   88d98:	00089658 	cmpnei	zero,zero,8793
   88d9c:	00089658 	cmpnei	zero,zero,8793
   88da0:	00089658 	cmpnei	zero,zero,8793
   88da4:	00089658 	cmpnei	zero,zero,8793
   88da8:	00089658 	cmpnei	zero,zero,8793
   88dac:	00089658 	cmpnei	zero,zero,8793
   88db0:	0008929c 	xori	zero,zero,8778
   88db4:	000892c8 	cmpgei	zero,zero,8779
   88db8:	00089658 	cmpnei	zero,zero,8793
   88dbc:	00089658 	cmpnei	zero,zero,8793
   88dc0:	00089658 	cmpnei	zero,zero,8793
   88dc4:	00089600 	call	8960 <__alt_mem_onchip_memory2-0x776a0>
   88dc8:	000892c8 	cmpgei	zero,zero,8779
   88dcc:	00089658 	cmpnei	zero,zero,8793
   88dd0:	00089658 	cmpnei	zero,zero,8793
   88dd4:	0008915c 	xori	zero,zero,8773
   88dd8:	00089658 	cmpnei	zero,zero,8793
   88ddc:	0008916c 	andhi	zero,zero,8773
   88de0:	000891a8 	cmpgeui	zero,zero,8774
   88de4:	00088ea4 	muli	zero,zero,8762
   88de8:	00089150 	cmplti	zero,zero,8773
   88dec:	00089658 	cmpnei	zero,zero,8793
   88df0:	0008952c 	andhi	zero,zero,8788
   88df4:	00089658 	cmpnei	zero,zero,8793
   88df8:	00089584 	movi	zero,8790
   88dfc:	00089658 	cmpnei	zero,zero,8793
   88e00:	00089658 	cmpnei	zero,zero,8793
   88e04:	00089248 	cmpgei	zero,zero,8777
   88e08:	42000204 	addi	r8,r8,8
   88e0c:	da802317 	ldw	r10,140(sp)
   88e10:	5455883a 	add	r10,r10,r17
   88e14:	da802315 	stw	r10,140(sp)
   88e18:	003f8b06 	br	88c48 <__alt_data_end+0xfffbd158>
   88e1c:	d9002017 	ldw	r4,128(sp)
   88e20:	a00b883a 	mov	r5,r20
   88e24:	00837640 	call	83764 <__swsetup_r>
   88e28:	1003b11e 	bne	r2,zero,89cf0 <___vfiprintf_internal_r+0x11ec>
   88e2c:	a080030b 	ldhu	r2,12(r20)
   88e30:	00c00284 	movi	r3,10
   88e34:	1080068c 	andi	r2,r2,26
   88e38:	10ff541e 	bne	r2,r3,88b8c <__alt_data_end+0xfffbd09c>
   88e3c:	a080038f 	ldh	r2,14(r20)
   88e40:	103f5216 	blt	r2,zero,88b8c <__alt_data_end+0xfffbd09c>
   88e44:	d9c02217 	ldw	r7,136(sp)
   88e48:	d9002017 	ldw	r4,128(sp)
   88e4c:	e00d883a 	mov	r6,fp
   88e50:	a00b883a 	mov	r5,r20
   88e54:	0089f7c0 	call	89f7c <__sbprintf>
   88e58:	dfc03617 	ldw	ra,216(sp)
   88e5c:	df003517 	ldw	fp,212(sp)
   88e60:	ddc03417 	ldw	r23,208(sp)
   88e64:	dd803317 	ldw	r22,204(sp)
   88e68:	dd403217 	ldw	r21,200(sp)
   88e6c:	dd003117 	ldw	r20,196(sp)
   88e70:	dcc03017 	ldw	r19,192(sp)
   88e74:	dc802f17 	ldw	r18,188(sp)
   88e78:	dc402e17 	ldw	r17,184(sp)
   88e7c:	dc002d17 	ldw	r16,180(sp)
   88e80:	dec03704 	addi	sp,sp,220
   88e84:	f800283a 	ret
   88e88:	00857380 	call	85738 <__sinit>
   88e8c:	003f2f06 	br	88b4c <__alt_data_end+0xfffbd05c>
   88e90:	0463c83a 	sub	r17,zero,r17
   88e94:	d8802215 	stw	r2,136(sp)
   88e98:	a5000114 	ori	r20,r20,4
   88e9c:	80c00007 	ldb	r3,0(r16)
   88ea0:	003f7706 	br	88c80 <__alt_data_end+0xfffbd190>
   88ea4:	00800c04 	movi	r2,48
   88ea8:	da802217 	ldw	r10,136(sp)
   88eac:	d8801d05 	stb	r2,116(sp)
   88eb0:	00801e04 	movi	r2,120
   88eb4:	d8801d45 	stb	r2,117(sp)
   88eb8:	d8001d85 	stb	zero,118(sp)
   88ebc:	50c00104 	addi	r3,r10,4
   88ec0:	54800017 	ldw	r18,0(r10)
   88ec4:	0027883a 	mov	r19,zero
   88ec8:	a0800094 	ori	r2,r20,2
   88ecc:	48030b16 	blt	r9,zero,89afc <___vfiprintf_internal_r+0xff8>
   88ed0:	00bfdfc4 	movi	r2,-129
   88ed4:	a096703a 	and	r11,r20,r2
   88ed8:	d8c02215 	stw	r3,136(sp)
   88edc:	5d000094 	ori	r20,r11,2
   88ee0:	90032b1e 	bne	r18,zero,89b90 <___vfiprintf_internal_r+0x108c>
   88ee4:	00800274 	movhi	r2,9
   88ee8:	1081de04 	addi	r2,r2,1912
   88eec:	d8802615 	stw	r2,152(sp)
   88ef0:	0039883a 	mov	fp,zero
   88ef4:	48017b1e 	bne	r9,zero,894e4 <___vfiprintf_internal_r+0x9e0>
   88ef8:	0013883a 	mov	r9,zero
   88efc:	0027883a 	mov	r19,zero
   88f00:	dd401a04 	addi	r21,sp,104
   88f04:	4825883a 	mov	r18,r9
   88f08:	4cc0010e 	bge	r9,r19,88f10 <___vfiprintf_internal_r+0x40c>
   88f0c:	9825883a 	mov	r18,r19
   88f10:	e7003fcc 	andi	fp,fp,255
   88f14:	e700201c 	xori	fp,fp,128
   88f18:	e73fe004 	addi	fp,fp,-128
   88f1c:	e0000126 	beq	fp,zero,88f24 <___vfiprintf_internal_r+0x420>
   88f20:	94800044 	addi	r18,r18,1
   88f24:	a380008c 	andi	r14,r20,2
   88f28:	70000126 	beq	r14,zero,88f30 <___vfiprintf_internal_r+0x42c>
   88f2c:	94800084 	addi	r18,r18,2
   88f30:	a700210c 	andi	fp,r20,132
   88f34:	e001df1e 	bne	fp,zero,896b4 <___vfiprintf_internal_r+0xbb0>
   88f38:	8c87c83a 	sub	r3,r17,r18
   88f3c:	00c1dd0e 	bge	zero,r3,896b4 <___vfiprintf_internal_r+0xbb0>
   88f40:	01c00404 	movi	r7,16
   88f44:	d8801c17 	ldw	r2,112(sp)
   88f48:	38c3ad0e 	bge	r7,r3,89e00 <___vfiprintf_internal_r+0x12fc>
   88f4c:	02800274 	movhi	r10,9
   88f50:	52824304 	addi	r10,r10,2316
   88f54:	dc002915 	stw	r16,164(sp)
   88f58:	d9801b17 	ldw	r6,108(sp)
   88f5c:	da802415 	stw	r10,144(sp)
   88f60:	03c001c4 	movi	r15,7
   88f64:	da402515 	stw	r9,148(sp)
   88f68:	db802815 	stw	r14,160(sp)
   88f6c:	1821883a 	mov	r16,r3
   88f70:	00000506 	br	88f88 <___vfiprintf_internal_r+0x484>
   88f74:	31400084 	addi	r5,r6,2
   88f78:	42000204 	addi	r8,r8,8
   88f7c:	200d883a 	mov	r6,r4
   88f80:	843ffc04 	addi	r16,r16,-16
   88f84:	3c000d0e 	bge	r7,r16,88fbc <___vfiprintf_internal_r+0x4b8>
   88f88:	10800404 	addi	r2,r2,16
   88f8c:	31000044 	addi	r4,r6,1
   88f90:	45800015 	stw	r22,0(r8)
   88f94:	41c00115 	stw	r7,4(r8)
   88f98:	d8801c15 	stw	r2,112(sp)
   88f9c:	d9001b15 	stw	r4,108(sp)
   88fa0:	793ff40e 	bge	r15,r4,88f74 <__alt_data_end+0xfffbd484>
   88fa4:	1001b51e 	bne	r2,zero,8967c <___vfiprintf_internal_r+0xb78>
   88fa8:	843ffc04 	addi	r16,r16,-16
   88fac:	000d883a 	mov	r6,zero
   88fb0:	01400044 	movi	r5,1
   88fb4:	d811883a 	mov	r8,sp
   88fb8:	3c3ff316 	blt	r7,r16,88f88 <__alt_data_end+0xfffbd498>
   88fbc:	8007883a 	mov	r3,r16
   88fc0:	da402517 	ldw	r9,148(sp)
   88fc4:	db802817 	ldw	r14,160(sp)
   88fc8:	dc002917 	ldw	r16,164(sp)
   88fcc:	da802417 	ldw	r10,144(sp)
   88fd0:	1885883a 	add	r2,r3,r2
   88fd4:	40c00115 	stw	r3,4(r8)
   88fd8:	42800015 	stw	r10,0(r8)
   88fdc:	d8801c15 	stw	r2,112(sp)
   88fe0:	d9401b15 	stw	r5,108(sp)
   88fe4:	00c001c4 	movi	r3,7
   88fe8:	19426016 	blt	r3,r5,8996c <___vfiprintf_internal_r+0xe68>
   88fec:	d8c01d87 	ldb	r3,118(sp)
   88ff0:	42000204 	addi	r8,r8,8
   88ff4:	29000044 	addi	r4,r5,1
   88ff8:	1801b31e 	bne	r3,zero,896c8 <___vfiprintf_internal_r+0xbc4>
   88ffc:	7001c026 	beq	r14,zero,89700 <___vfiprintf_internal_r+0xbfc>
   89000:	d8c01d04 	addi	r3,sp,116
   89004:	10800084 	addi	r2,r2,2
   89008:	40c00015 	stw	r3,0(r8)
   8900c:	00c00084 	movi	r3,2
   89010:	40c00115 	stw	r3,4(r8)
   89014:	d8801c15 	stw	r2,112(sp)
   89018:	d9001b15 	stw	r4,108(sp)
   8901c:	00c001c4 	movi	r3,7
   89020:	1902650e 	bge	r3,r4,899b8 <___vfiprintf_internal_r+0xeb4>
   89024:	10029a1e 	bne	r2,zero,89a90 <___vfiprintf_internal_r+0xf8c>
   89028:	00c02004 	movi	r3,128
   8902c:	01000044 	movi	r4,1
   89030:	000b883a 	mov	r5,zero
   89034:	d811883a 	mov	r8,sp
   89038:	e0c1b31e 	bne	fp,r3,89708 <___vfiprintf_internal_r+0xc04>
   8903c:	8cb9c83a 	sub	fp,r17,r18
   89040:	0701b10e 	bge	zero,fp,89708 <___vfiprintf_internal_r+0xc04>
   89044:	01c00404 	movi	r7,16
   89048:	3f03890e 	bge	r7,fp,89e70 <___vfiprintf_internal_r+0x136c>
   8904c:	00c00274 	movhi	r3,9
   89050:	18c23f04 	addi	r3,r3,2300
   89054:	d8c02415 	stw	r3,144(sp)
   89058:	8007883a 	mov	r3,r16
   8905c:	034001c4 	movi	r13,7
   89060:	e021883a 	mov	r16,fp
   89064:	da402515 	stw	r9,148(sp)
   89068:	1839883a 	mov	fp,r3
   8906c:	00000506 	br	89084 <___vfiprintf_internal_r+0x580>
   89070:	29800084 	addi	r6,r5,2
   89074:	42000204 	addi	r8,r8,8
   89078:	180b883a 	mov	r5,r3
   8907c:	843ffc04 	addi	r16,r16,-16
   89080:	3c000d0e 	bge	r7,r16,890b8 <___vfiprintf_internal_r+0x5b4>
   89084:	10800404 	addi	r2,r2,16
   89088:	28c00044 	addi	r3,r5,1
   8908c:	45c00015 	stw	r23,0(r8)
   89090:	41c00115 	stw	r7,4(r8)
   89094:	d8801c15 	stw	r2,112(sp)
   89098:	d8c01b15 	stw	r3,108(sp)
   8909c:	68fff40e 	bge	r13,r3,89070 <__alt_data_end+0xfffbd580>
   890a0:	1002241e 	bne	r2,zero,89934 <___vfiprintf_internal_r+0xe30>
   890a4:	843ffc04 	addi	r16,r16,-16
   890a8:	01800044 	movi	r6,1
   890ac:	000b883a 	mov	r5,zero
   890b0:	d811883a 	mov	r8,sp
   890b4:	3c3ff316 	blt	r7,r16,89084 <__alt_data_end+0xfffbd594>
   890b8:	da402517 	ldw	r9,148(sp)
   890bc:	e007883a 	mov	r3,fp
   890c0:	8039883a 	mov	fp,r16
   890c4:	1821883a 	mov	r16,r3
   890c8:	d8c02417 	ldw	r3,144(sp)
   890cc:	1705883a 	add	r2,r2,fp
   890d0:	47000115 	stw	fp,4(r8)
   890d4:	40c00015 	stw	r3,0(r8)
   890d8:	d8801c15 	stw	r2,112(sp)
   890dc:	d9801b15 	stw	r6,108(sp)
   890e0:	00c001c4 	movi	r3,7
   890e4:	19827616 	blt	r3,r6,89ac0 <___vfiprintf_internal_r+0xfbc>
   890e8:	4cf9c83a 	sub	fp,r9,r19
   890ec:	42000204 	addi	r8,r8,8
   890f0:	31000044 	addi	r4,r6,1
   890f4:	300b883a 	mov	r5,r6
   890f8:	07018516 	blt	zero,fp,89710 <___vfiprintf_internal_r+0xc0c>
   890fc:	9885883a 	add	r2,r19,r2
   89100:	45400015 	stw	r21,0(r8)
   89104:	44c00115 	stw	r19,4(r8)
   89108:	d8801c15 	stw	r2,112(sp)
   8910c:	d9001b15 	stw	r4,108(sp)
   89110:	00c001c4 	movi	r3,7
   89114:	1901dd0e 	bge	r3,r4,8988c <___vfiprintf_internal_r+0xd88>
   89118:	1002401e 	bne	r2,zero,89a1c <___vfiprintf_internal_r+0xf18>
   8911c:	d8001b15 	stw	zero,108(sp)
   89120:	a2c0010c 	andi	r11,r20,4
   89124:	58000226 	beq	r11,zero,89130 <___vfiprintf_internal_r+0x62c>
   89128:	8ca7c83a 	sub	r19,r17,r18
   8912c:	04c2f216 	blt	zero,r19,89cf8 <___vfiprintf_internal_r+0x11f4>
   89130:	8c80010e 	bge	r17,r18,89138 <___vfiprintf_internal_r+0x634>
   89134:	9023883a 	mov	r17,r18
   89138:	da802317 	ldw	r10,140(sp)
   8913c:	5455883a 	add	r10,r10,r17
   89140:	da802315 	stw	r10,140(sp)
   89144:	d8001b15 	stw	zero,108(sp)
   89148:	d811883a 	mov	r8,sp
   8914c:	003ea206 	br	88bd8 <__alt_data_end+0xfffbd0e8>
   89150:	a5000814 	ori	r20,r20,32
   89154:	80c00007 	ldb	r3,0(r16)
   89158:	003ec906 	br	88c80 <__alt_data_end+0xfffbd190>
   8915c:	80c00007 	ldb	r3,0(r16)
   89160:	1b030926 	beq	r3,r12,89d88 <___vfiprintf_internal_r+0x1284>
   89164:	a5000414 	ori	r20,r20,16
   89168:	003ec506 	br	88c80 <__alt_data_end+0xfffbd190>
   8916c:	21003fcc 	andi	r4,r4,255
   89170:	20035e1e 	bne	r4,zero,89eec <___vfiprintf_internal_r+0x13e8>
   89174:	a080080c 	andi	r2,r20,32
   89178:	1002a526 	beq	r2,zero,89c10 <___vfiprintf_internal_r+0x110c>
   8917c:	da802217 	ldw	r10,136(sp)
   89180:	50800017 	ldw	r2,0(r10)
   89184:	da802317 	ldw	r10,140(sp)
   89188:	5007d7fa 	srai	r3,r10,31
   8918c:	da802217 	ldw	r10,136(sp)
   89190:	10c00115 	stw	r3,4(r2)
   89194:	52800104 	addi	r10,r10,4
   89198:	da802215 	stw	r10,136(sp)
   8919c:	da802317 	ldw	r10,140(sp)
   891a0:	12800015 	stw	r10,0(r2)
   891a4:	003e8c06 	br	88bd8 <__alt_data_end+0xfffbd0e8>
   891a8:	21003fcc 	andi	r4,r4,255
   891ac:	2003511e 	bne	r4,zero,89ef4 <___vfiprintf_internal_r+0x13f0>
   891b0:	a080080c 	andi	r2,r20,32
   891b4:	1000a126 	beq	r2,zero,8943c <___vfiprintf_internal_r+0x938>
   891b8:	da802217 	ldw	r10,136(sp)
   891bc:	d8001d85 	stb	zero,118(sp)
   891c0:	50800204 	addi	r2,r10,8
   891c4:	54800017 	ldw	r18,0(r10)
   891c8:	54c00117 	ldw	r19,4(r10)
   891cc:	4802b416 	blt	r9,zero,89ca0 <___vfiprintf_internal_r+0x119c>
   891d0:	013fdfc4 	movi	r4,-129
   891d4:	94c6b03a 	or	r3,r18,r19
   891d8:	d8802215 	stw	r2,136(sp)
   891dc:	a128703a 	and	r20,r20,r4
   891e0:	1800a226 	beq	r3,zero,8946c <___vfiprintf_internal_r+0x968>
   891e4:	0039883a 	mov	fp,zero
   891e8:	dd401a04 	addi	r21,sp,104
   891ec:	9006d0fa 	srli	r3,r18,3
   891f0:	9808977a 	slli	r4,r19,29
   891f4:	9826d0fa 	srli	r19,r19,3
   891f8:	948001cc 	andi	r18,r18,7
   891fc:	90800c04 	addi	r2,r18,48
   89200:	ad7fffc4 	addi	r21,r21,-1
   89204:	20e4b03a 	or	r18,r4,r3
   89208:	a8800005 	stb	r2,0(r21)
   8920c:	94c6b03a 	or	r3,r18,r19
   89210:	183ff61e 	bne	r3,zero,891ec <__alt_data_end+0xfffbd6fc>
   89214:	a0c0004c 	andi	r3,r20,1
   89218:	18005926 	beq	r3,zero,89380 <___vfiprintf_internal_r+0x87c>
   8921c:	10803fcc 	andi	r2,r2,255
   89220:	1080201c 	xori	r2,r2,128
   89224:	10bfe004 	addi	r2,r2,-128
   89228:	00c00c04 	movi	r3,48
   8922c:	10c05426 	beq	r2,r3,89380 <___vfiprintf_internal_r+0x87c>
   89230:	da801e17 	ldw	r10,120(sp)
   89234:	a8bfffc4 	addi	r2,r21,-1
   89238:	a8ffffc5 	stb	r3,-1(r21)
   8923c:	50a7c83a 	sub	r19,r10,r2
   89240:	102b883a 	mov	r21,r2
   89244:	003f2f06 	br	88f04 <__alt_data_end+0xfffbd414>
   89248:	21003fcc 	andi	r4,r4,255
   8924c:	2003421e 	bne	r4,zero,89f58 <___vfiprintf_internal_r+0x1454>
   89250:	00800274 	movhi	r2,9
   89254:	1081de04 	addi	r2,r2,1912
   89258:	d8802615 	stw	r2,152(sp)
   8925c:	a080080c 	andi	r2,r20,32
   89260:	1000aa26 	beq	r2,zero,8950c <___vfiprintf_internal_r+0xa08>
   89264:	da802217 	ldw	r10,136(sp)
   89268:	54800017 	ldw	r18,0(r10)
   8926c:	54c00117 	ldw	r19,4(r10)
   89270:	52800204 	addi	r10,r10,8
   89274:	da802215 	stw	r10,136(sp)
   89278:	a080004c 	andi	r2,r20,1
   8927c:	1001d226 	beq	r2,zero,899c8 <___vfiprintf_internal_r+0xec4>
   89280:	94c4b03a 	or	r2,r18,r19
   89284:	1002351e 	bne	r2,zero,89b5c <___vfiprintf_internal_r+0x1058>
   89288:	d8001d85 	stb	zero,118(sp)
   8928c:	48022216 	blt	r9,zero,89b18 <___vfiprintf_internal_r+0x1014>
   89290:	00bfdfc4 	movi	r2,-129
   89294:	a0a8703a 	and	r20,r20,r2
   89298:	003f1506 	br	88ef0 <__alt_data_end+0xfffbd400>
   8929c:	da802217 	ldw	r10,136(sp)
   892a0:	04800044 	movi	r18,1
   892a4:	d8001d85 	stb	zero,118(sp)
   892a8:	50800017 	ldw	r2,0(r10)
   892ac:	52800104 	addi	r10,r10,4
   892b0:	da802215 	stw	r10,136(sp)
   892b4:	d8801005 	stb	r2,64(sp)
   892b8:	9027883a 	mov	r19,r18
   892bc:	dd401004 	addi	r21,sp,64
   892c0:	0013883a 	mov	r9,zero
   892c4:	003f1706 	br	88f24 <__alt_data_end+0xfffbd434>
   892c8:	21003fcc 	andi	r4,r4,255
   892cc:	2003201e 	bne	r4,zero,89f50 <___vfiprintf_internal_r+0x144c>
   892d0:	a080080c 	andi	r2,r20,32
   892d4:	10004b26 	beq	r2,zero,89404 <___vfiprintf_internal_r+0x900>
   892d8:	da802217 	ldw	r10,136(sp)
   892dc:	50800117 	ldw	r2,4(r10)
   892e0:	54800017 	ldw	r18,0(r10)
   892e4:	52800204 	addi	r10,r10,8
   892e8:	da802215 	stw	r10,136(sp)
   892ec:	1027883a 	mov	r19,r2
   892f0:	10022c16 	blt	r2,zero,89ba4 <___vfiprintf_internal_r+0x10a0>
   892f4:	df001d83 	ldbu	fp,118(sp)
   892f8:	48007216 	blt	r9,zero,894c4 <___vfiprintf_internal_r+0x9c0>
   892fc:	00ffdfc4 	movi	r3,-129
   89300:	94c4b03a 	or	r2,r18,r19
   89304:	a0e8703a 	and	r20,r20,r3
   89308:	1000cc26 	beq	r2,zero,8963c <___vfiprintf_internal_r+0xb38>
   8930c:	98021026 	beq	r19,zero,89b50 <___vfiprintf_internal_r+0x104c>
   89310:	dc402415 	stw	r17,144(sp)
   89314:	dc002515 	stw	r16,148(sp)
   89318:	9823883a 	mov	r17,r19
   8931c:	9021883a 	mov	r16,r18
   89320:	dd401a04 	addi	r21,sp,104
   89324:	4825883a 	mov	r18,r9
   89328:	4027883a 	mov	r19,r8
   8932c:	8009883a 	mov	r4,r16
   89330:	880b883a 	mov	r5,r17
   89334:	01800284 	movi	r6,10
   89338:	000f883a 	mov	r7,zero
   8933c:	008af440 	call	8af44 <__umoddi3>
   89340:	10800c04 	addi	r2,r2,48
   89344:	ad7fffc4 	addi	r21,r21,-1
   89348:	8009883a 	mov	r4,r16
   8934c:	880b883a 	mov	r5,r17
   89350:	a8800005 	stb	r2,0(r21)
   89354:	01800284 	movi	r6,10
   89358:	000f883a 	mov	r7,zero
   8935c:	008a9cc0 	call	8a9cc <__udivdi3>
   89360:	1021883a 	mov	r16,r2
   89364:	10c4b03a 	or	r2,r2,r3
   89368:	1823883a 	mov	r17,r3
   8936c:	103fef1e 	bne	r2,zero,8932c <__alt_data_end+0xfffbd83c>
   89370:	dc402417 	ldw	r17,144(sp)
   89374:	dc002517 	ldw	r16,148(sp)
   89378:	9013883a 	mov	r9,r18
   8937c:	9811883a 	mov	r8,r19
   89380:	da801e17 	ldw	r10,120(sp)
   89384:	5567c83a 	sub	r19,r10,r21
   89388:	003ede06 	br	88f04 <__alt_data_end+0xfffbd414>
   8938c:	38803fcc 	andi	r2,r7,255
   89390:	1080201c 	xori	r2,r2,128
   89394:	10bfe004 	addi	r2,r2,-128
   89398:	1002371e 	bne	r2,zero,89c78 <___vfiprintf_internal_r+0x1174>
   8939c:	01000044 	movi	r4,1
   893a0:	01c00804 	movi	r7,32
   893a4:	80c00007 	ldb	r3,0(r16)
   893a8:	003e3506 	br	88c80 <__alt_data_end+0xfffbd190>
   893ac:	a5000054 	ori	r20,r20,1
   893b0:	80c00007 	ldb	r3,0(r16)
   893b4:	003e3206 	br	88c80 <__alt_data_end+0xfffbd190>
   893b8:	a5002014 	ori	r20,r20,128
   893bc:	80c00007 	ldb	r3,0(r16)
   893c0:	003e2f06 	br	88c80 <__alt_data_end+0xfffbd190>
   893c4:	8015883a 	mov	r10,r16
   893c8:	0023883a 	mov	r17,zero
   893cc:	18bff404 	addi	r2,r3,-48
   893d0:	50c00007 	ldb	r3,0(r10)
   893d4:	8c4002a4 	muli	r17,r17,10
   893d8:	84000044 	addi	r16,r16,1
   893dc:	8015883a 	mov	r10,r16
   893e0:	1463883a 	add	r17,r2,r17
   893e4:	18bff404 	addi	r2,r3,-48
   893e8:	30bff92e 	bgeu	r6,r2,893d0 <__alt_data_end+0xfffbd8e0>
   893ec:	003e2506 	br	88c84 <__alt_data_end+0xfffbd194>
   893f0:	21003fcc 	andi	r4,r4,255
   893f4:	2002d41e 	bne	r4,zero,89f48 <___vfiprintf_internal_r+0x1444>
   893f8:	a5000414 	ori	r20,r20,16
   893fc:	a080080c 	andi	r2,r20,32
   89400:	103fb51e 	bne	r2,zero,892d8 <__alt_data_end+0xfffbd7e8>
   89404:	a080040c 	andi	r2,r20,16
   89408:	1001f826 	beq	r2,zero,89bec <___vfiprintf_internal_r+0x10e8>
   8940c:	da802217 	ldw	r10,136(sp)
   89410:	54800017 	ldw	r18,0(r10)
   89414:	52800104 	addi	r10,r10,4
   89418:	da802215 	stw	r10,136(sp)
   8941c:	9027d7fa 	srai	r19,r18,31
   89420:	9805883a 	mov	r2,r19
   89424:	003fb206 	br	892f0 <__alt_data_end+0xfffbd800>
   89428:	21003fcc 	andi	r4,r4,255
   8942c:	2002c41e 	bne	r4,zero,89f40 <___vfiprintf_internal_r+0x143c>
   89430:	a5000414 	ori	r20,r20,16
   89434:	a080080c 	andi	r2,r20,32
   89438:	103f5f1e 	bne	r2,zero,891b8 <__alt_data_end+0xfffbd6c8>
   8943c:	a080040c 	andi	r2,r20,16
   89440:	10020f26 	beq	r2,zero,89c80 <___vfiprintf_internal_r+0x117c>
   89444:	da802217 	ldw	r10,136(sp)
   89448:	d8001d85 	stb	zero,118(sp)
   8944c:	0027883a 	mov	r19,zero
   89450:	50800104 	addi	r2,r10,4
   89454:	54800017 	ldw	r18,0(r10)
   89458:	48021116 	blt	r9,zero,89ca0 <___vfiprintf_internal_r+0x119c>
   8945c:	00ffdfc4 	movi	r3,-129
   89460:	d8802215 	stw	r2,136(sp)
   89464:	a0e8703a 	and	r20,r20,r3
   89468:	903f5e1e 	bne	r18,zero,891e4 <__alt_data_end+0xfffbd6f4>
   8946c:	0039883a 	mov	fp,zero
   89470:	4802a626 	beq	r9,zero,89f0c <___vfiprintf_internal_r+0x1408>
   89474:	0025883a 	mov	r18,zero
   89478:	0027883a 	mov	r19,zero
   8947c:	003f5a06 	br	891e8 <__alt_data_end+0xfffbd6f8>
   89480:	21003fcc 	andi	r4,r4,255
   89484:	20029f1e 	bne	r4,zero,89f04 <___vfiprintf_internal_r+0x1400>
   89488:	a5000414 	ori	r20,r20,16
   8948c:	a080080c 	andi	r2,r20,32
   89490:	10005e1e 	bne	r2,zero,8960c <___vfiprintf_internal_r+0xb08>
   89494:	a080040c 	andi	r2,r20,16
   89498:	1001a21e 	bne	r2,zero,89b24 <___vfiprintf_internal_r+0x1020>
   8949c:	a080100c 	andi	r2,r20,64
   894a0:	d8001d85 	stb	zero,118(sp)
   894a4:	da802217 	ldw	r10,136(sp)
   894a8:	1002231e 	bne	r2,zero,89d38 <___vfiprintf_internal_r+0x1234>
   894ac:	50800104 	addi	r2,r10,4
   894b0:	54800017 	ldw	r18,0(r10)
   894b4:	0027883a 	mov	r19,zero
   894b8:	4801a00e 	bge	r9,zero,89b3c <___vfiprintf_internal_r+0x1038>
   894bc:	d8802215 	stw	r2,136(sp)
   894c0:	0039883a 	mov	fp,zero
   894c4:	94c4b03a 	or	r2,r18,r19
   894c8:	103f901e 	bne	r2,zero,8930c <__alt_data_end+0xfffbd81c>
   894cc:	00800044 	movi	r2,1
   894d0:	10803fcc 	andi	r2,r2,255
   894d4:	00c00044 	movi	r3,1
   894d8:	10c05926 	beq	r2,r3,89640 <___vfiprintf_internal_r+0xb3c>
   894dc:	00c00084 	movi	r3,2
   894e0:	10ffe41e 	bne	r2,r3,89474 <__alt_data_end+0xfffbd984>
   894e4:	0025883a 	mov	r18,zero
   894e8:	0027883a 	mov	r19,zero
   894ec:	00013d06 	br	899e4 <___vfiprintf_internal_r+0xee0>
   894f0:	21003fcc 	andi	r4,r4,255
   894f4:	2002811e 	bne	r4,zero,89efc <___vfiprintf_internal_r+0x13f8>
   894f8:	00800274 	movhi	r2,9
   894fc:	1081d904 	addi	r2,r2,1892
   89500:	d8802615 	stw	r2,152(sp)
   89504:	a080080c 	andi	r2,r20,32
   89508:	103f561e 	bne	r2,zero,89264 <__alt_data_end+0xfffbd774>
   8950c:	a080040c 	andi	r2,r20,16
   89510:	1001d126 	beq	r2,zero,89c58 <___vfiprintf_internal_r+0x1154>
   89514:	da802217 	ldw	r10,136(sp)
   89518:	0027883a 	mov	r19,zero
   8951c:	54800017 	ldw	r18,0(r10)
   89520:	52800104 	addi	r10,r10,4
   89524:	da802215 	stw	r10,136(sp)
   89528:	003f5306 	br	89278 <__alt_data_end+0xfffbd788>
   8952c:	da802217 	ldw	r10,136(sp)
   89530:	d8001d85 	stb	zero,118(sp)
   89534:	55400017 	ldw	r21,0(r10)
   89538:	50c00104 	addi	r3,r10,4
   8953c:	a8024226 	beq	r21,zero,89e48 <___vfiprintf_internal_r+0x1344>
   89540:	48021816 	blt	r9,zero,89da4 <___vfiprintf_internal_r+0x12a0>
   89544:	480d883a 	mov	r6,r9
   89548:	000b883a 	mov	r5,zero
   8954c:	a809883a 	mov	r4,r21
   89550:	d8c02a15 	stw	r3,168(sp)
   89554:	da002b15 	stw	r8,172(sp)
   89558:	da402c15 	stw	r9,176(sp)
   8955c:	0086d000 	call	86d00 <memchr>
   89560:	d8c02a17 	ldw	r3,168(sp)
   89564:	da002b17 	ldw	r8,172(sp)
   89568:	da402c17 	ldw	r9,176(sp)
   8956c:	10024826 	beq	r2,zero,89e90 <___vfiprintf_internal_r+0x138c>
   89570:	1567c83a 	sub	r19,r2,r21
   89574:	df001d83 	ldbu	fp,118(sp)
   89578:	d8c02215 	stw	r3,136(sp)
   8957c:	0013883a 	mov	r9,zero
   89580:	003e6006 	br	88f04 <__alt_data_end+0xfffbd414>
   89584:	21003fcc 	andi	r4,r4,255
   89588:	203fc026 	beq	r4,zero,8948c <__alt_data_end+0xfffbd99c>
   8958c:	d9c01d85 	stb	r7,118(sp)
   89590:	003fbe06 	br	8948c <__alt_data_end+0xfffbd99c>
   89594:	da802217 	ldw	r10,136(sp)
   89598:	54400017 	ldw	r17,0(r10)
   8959c:	50800104 	addi	r2,r10,4
   895a0:	883e3b16 	blt	r17,zero,88e90 <__alt_data_end+0xfffbd3a0>
   895a4:	d8802215 	stw	r2,136(sp)
   895a8:	80c00007 	ldb	r3,0(r16)
   895ac:	003db406 	br	88c80 <__alt_data_end+0xfffbd190>
   895b0:	01000044 	movi	r4,1
   895b4:	01c00ac4 	movi	r7,43
   895b8:	80c00007 	ldb	r3,0(r16)
   895bc:	003db006 	br	88c80 <__alt_data_end+0xfffbd190>
   895c0:	80c00007 	ldb	r3,0(r16)
   895c4:	82800044 	addi	r10,r16,1
   895c8:	1b423c26 	beq	r3,r13,89ebc <___vfiprintf_internal_r+0x13b8>
   895cc:	18bff404 	addi	r2,r3,-48
   895d0:	0013883a 	mov	r9,zero
   895d4:	30822b36 	bltu	r6,r2,89e84 <___vfiprintf_internal_r+0x1380>
   895d8:	50c00007 	ldb	r3,0(r10)
   895dc:	4a4002a4 	muli	r9,r9,10
   895e0:	54000044 	addi	r16,r10,1
   895e4:	8015883a 	mov	r10,r16
   895e8:	4893883a 	add	r9,r9,r2
   895ec:	18bff404 	addi	r2,r3,-48
   895f0:	30bff92e 	bgeu	r6,r2,895d8 <__alt_data_end+0xfffbdae8>
   895f4:	483da30e 	bge	r9,zero,88c84 <__alt_data_end+0xfffbd194>
   895f8:	027fffc4 	movi	r9,-1
   895fc:	003da106 	br	88c84 <__alt_data_end+0xfffbd194>
   89600:	a5001014 	ori	r20,r20,64
   89604:	80c00007 	ldb	r3,0(r16)
   89608:	003d9d06 	br	88c80 <__alt_data_end+0xfffbd190>
   8960c:	da802217 	ldw	r10,136(sp)
   89610:	d8001d85 	stb	zero,118(sp)
   89614:	50c00204 	addi	r3,r10,8
   89618:	54800017 	ldw	r18,0(r10)
   8961c:	54c00117 	ldw	r19,4(r10)
   89620:	4801ca16 	blt	r9,zero,89d4c <___vfiprintf_internal_r+0x1248>
   89624:	013fdfc4 	movi	r4,-129
   89628:	94c4b03a 	or	r2,r18,r19
   8962c:	d8c02215 	stw	r3,136(sp)
   89630:	a128703a 	and	r20,r20,r4
   89634:	0039883a 	mov	fp,zero
   89638:	103f341e 	bne	r2,zero,8930c <__alt_data_end+0xfffbd81c>
   8963c:	483e2e26 	beq	r9,zero,88ef8 <__alt_data_end+0xfffbd408>
   89640:	0025883a 	mov	r18,zero
   89644:	94800c04 	addi	r18,r18,48
   89648:	dc8019c5 	stb	r18,103(sp)
   8964c:	dcc02717 	ldw	r19,156(sp)
   89650:	dd4019c4 	addi	r21,sp,103
   89654:	003e2b06 	br	88f04 <__alt_data_end+0xfffbd414>
   89658:	21003fcc 	andi	r4,r4,255
   8965c:	2002361e 	bne	r4,zero,89f38 <___vfiprintf_internal_r+0x1434>
   89660:	1801c126 	beq	r3,zero,89d68 <___vfiprintf_internal_r+0x1264>
   89664:	04800044 	movi	r18,1
   89668:	d8c01005 	stb	r3,64(sp)
   8966c:	d8001d85 	stb	zero,118(sp)
   89670:	9027883a 	mov	r19,r18
   89674:	dd401004 	addi	r21,sp,64
   89678:	003f1106 	br	892c0 <__alt_data_end+0xfffbd7d0>
   8967c:	d9402117 	ldw	r5,132(sp)
   89680:	d9002017 	ldw	r4,128(sp)
   89684:	d9801a04 	addi	r6,sp,104
   89688:	d9c02b15 	stw	r7,172(sp)
   8968c:	dbc02a15 	stw	r15,168(sp)
   89690:	00889f00 	call	889f0 <__sprint_r.part.0>
   89694:	d9c02b17 	ldw	r7,172(sp)
   89698:	dbc02a17 	ldw	r15,168(sp)
   8969c:	10006d1e 	bne	r2,zero,89854 <___vfiprintf_internal_r+0xd50>
   896a0:	d9801b17 	ldw	r6,108(sp)
   896a4:	d8801c17 	ldw	r2,112(sp)
   896a8:	d811883a 	mov	r8,sp
   896ac:	31400044 	addi	r5,r6,1
   896b0:	003e3306 	br	88f80 <__alt_data_end+0xfffbd490>
   896b4:	d9401b17 	ldw	r5,108(sp)
   896b8:	d8801c17 	ldw	r2,112(sp)
   896bc:	29000044 	addi	r4,r5,1
   896c0:	d8c01d87 	ldb	r3,118(sp)
   896c4:	183e4d26 	beq	r3,zero,88ffc <__alt_data_end+0xfffbd50c>
   896c8:	00c00044 	movi	r3,1
   896cc:	d9401d84 	addi	r5,sp,118
   896d0:	10c5883a 	add	r2,r2,r3
   896d4:	41400015 	stw	r5,0(r8)
   896d8:	40c00115 	stw	r3,4(r8)
   896dc:	d8801c15 	stw	r2,112(sp)
   896e0:	d9001b15 	stw	r4,108(sp)
   896e4:	014001c4 	movi	r5,7
   896e8:	2900a90e 	bge	r5,r4,89990 <___vfiprintf_internal_r+0xe8c>
   896ec:	1000da1e 	bne	r2,zero,89a58 <___vfiprintf_internal_r+0xf54>
   896f0:	7000ab1e 	bne	r14,zero,899a0 <___vfiprintf_internal_r+0xe9c>
   896f4:	000b883a 	mov	r5,zero
   896f8:	1809883a 	mov	r4,r3
   896fc:	d811883a 	mov	r8,sp
   89700:	00c02004 	movi	r3,128
   89704:	e0fe4d26 	beq	fp,r3,8903c <__alt_data_end+0xfffbd54c>
   89708:	4cf9c83a 	sub	fp,r9,r19
   8970c:	073e7b0e 	bge	zero,fp,890fc <__alt_data_end+0xfffbd60c>
   89710:	01c00404 	movi	r7,16
   89714:	3f01900e 	bge	r7,fp,89d58 <___vfiprintf_internal_r+0x1254>
   89718:	00c00274 	movhi	r3,9
   8971c:	18c23f04 	addi	r3,r3,2300
   89720:	d8c02415 	stw	r3,144(sp)
   89724:	034001c4 	movi	r13,7
   89728:	00000506 	br	89740 <___vfiprintf_internal_r+0xc3c>
   8972c:	29000084 	addi	r4,r5,2
   89730:	42000204 	addi	r8,r8,8
   89734:	180b883a 	mov	r5,r3
   89738:	e73ffc04 	addi	fp,fp,-16
   8973c:	3f000d0e 	bge	r7,fp,89774 <___vfiprintf_internal_r+0xc70>
   89740:	10800404 	addi	r2,r2,16
   89744:	28c00044 	addi	r3,r5,1
   89748:	45c00015 	stw	r23,0(r8)
   8974c:	41c00115 	stw	r7,4(r8)
   89750:	d8801c15 	stw	r2,112(sp)
   89754:	d8c01b15 	stw	r3,108(sp)
   89758:	68fff40e 	bge	r13,r3,8972c <__alt_data_end+0xfffbdc3c>
   8975c:	1000101e 	bne	r2,zero,897a0 <___vfiprintf_internal_r+0xc9c>
   89760:	e73ffc04 	addi	fp,fp,-16
   89764:	01000044 	movi	r4,1
   89768:	000b883a 	mov	r5,zero
   8976c:	d811883a 	mov	r8,sp
   89770:	3f3ff316 	blt	r7,fp,89740 <__alt_data_end+0xfffbdc50>
   89774:	da802417 	ldw	r10,144(sp)
   89778:	1705883a 	add	r2,r2,fp
   8977c:	47000115 	stw	fp,4(r8)
   89780:	42800015 	stw	r10,0(r8)
   89784:	d8801c15 	stw	r2,112(sp)
   89788:	d9001b15 	stw	r4,108(sp)
   8978c:	00c001c4 	movi	r3,7
   89790:	19003616 	blt	r3,r4,8986c <___vfiprintf_internal_r+0xd68>
   89794:	42000204 	addi	r8,r8,8
   89798:	21000044 	addi	r4,r4,1
   8979c:	003e5706 	br	890fc <__alt_data_end+0xfffbd60c>
   897a0:	d9402117 	ldw	r5,132(sp)
   897a4:	d9002017 	ldw	r4,128(sp)
   897a8:	d9801a04 	addi	r6,sp,104
   897ac:	d9c02b15 	stw	r7,172(sp)
   897b0:	db402a15 	stw	r13,168(sp)
   897b4:	00889f00 	call	889f0 <__sprint_r.part.0>
   897b8:	d9c02b17 	ldw	r7,172(sp)
   897bc:	db402a17 	ldw	r13,168(sp)
   897c0:	1000241e 	bne	r2,zero,89854 <___vfiprintf_internal_r+0xd50>
   897c4:	d9401b17 	ldw	r5,108(sp)
   897c8:	d8801c17 	ldw	r2,112(sp)
   897cc:	d811883a 	mov	r8,sp
   897d0:	29000044 	addi	r4,r5,1
   897d4:	003fd806 	br	89738 <__alt_data_end+0xfffbdc48>
   897d8:	d9401b17 	ldw	r5,108(sp)
   897dc:	00c00274 	movhi	r3,9
   897e0:	18c24304 	addi	r3,r3,2316
   897e4:	d8c02415 	stw	r3,144(sp)
   897e8:	29400044 	addi	r5,r5,1
   897ec:	d8c02417 	ldw	r3,144(sp)
   897f0:	14c5883a 	add	r2,r2,r19
   897f4:	44c00115 	stw	r19,4(r8)
   897f8:	40c00015 	stw	r3,0(r8)
   897fc:	d8801c15 	stw	r2,112(sp)
   89800:	d9401b15 	stw	r5,108(sp)
   89804:	00c001c4 	movi	r3,7
   89808:	1940070e 	bge	r3,r5,89828 <___vfiprintf_internal_r+0xd24>
   8980c:	103e4826 	beq	r2,zero,89130 <__alt_data_end+0xfffbd640>
   89810:	d9402117 	ldw	r5,132(sp)
   89814:	d9002017 	ldw	r4,128(sp)
   89818:	d9801a04 	addi	r6,sp,104
   8981c:	00889f00 	call	889f0 <__sprint_r.part.0>
   89820:	10000c1e 	bne	r2,zero,89854 <___vfiprintf_internal_r+0xd50>
   89824:	d8801c17 	ldw	r2,112(sp)
   89828:	8c80010e 	bge	r17,r18,89830 <___vfiprintf_internal_r+0xd2c>
   8982c:	9023883a 	mov	r17,r18
   89830:	da802317 	ldw	r10,140(sp)
   89834:	5455883a 	add	r10,r10,r17
   89838:	da802315 	stw	r10,140(sp)
   8983c:	103e4126 	beq	r2,zero,89144 <__alt_data_end+0xfffbd654>
   89840:	d9402117 	ldw	r5,132(sp)
   89844:	d9002017 	ldw	r4,128(sp)
   89848:	d9801a04 	addi	r6,sp,104
   8984c:	00889f00 	call	889f0 <__sprint_r.part.0>
   89850:	103e3c26 	beq	r2,zero,89144 <__alt_data_end+0xfffbd654>
   89854:	dd002117 	ldw	r20,132(sp)
   89858:	a080030b 	ldhu	r2,12(r20)
   8985c:	1080100c 	andi	r2,r2,64
   89860:	1001231e 	bne	r2,zero,89cf0 <___vfiprintf_internal_r+0x11ec>
   89864:	d8802317 	ldw	r2,140(sp)
   89868:	003d7b06 	br	88e58 <__alt_data_end+0xfffbd368>
   8986c:	1000991e 	bne	r2,zero,89ad4 <___vfiprintf_internal_r+0xfd0>
   89870:	00c00044 	movi	r3,1
   89874:	9805883a 	mov	r2,r19
   89878:	dd400015 	stw	r21,0(sp)
   8987c:	dcc00115 	stw	r19,4(sp)
   89880:	dcc01c15 	stw	r19,112(sp)
   89884:	d8c01b15 	stw	r3,108(sp)
   89888:	d811883a 	mov	r8,sp
   8988c:	42000204 	addi	r8,r8,8
   89890:	a2c0010c 	andi	r11,r20,4
   89894:	583fe426 	beq	r11,zero,89828 <__alt_data_end+0xfffbdd38>
   89898:	8ca7c83a 	sub	r19,r17,r18
   8989c:	04ffe20e 	bge	zero,r19,89828 <__alt_data_end+0xfffbdd38>
   898a0:	01c00404 	movi	r7,16
   898a4:	3cffcc0e 	bge	r7,r19,897d8 <__alt_data_end+0xfffbdce8>
   898a8:	02800274 	movhi	r10,9
   898ac:	52824304 	addi	r10,r10,2316
   898b0:	d9001b17 	ldw	r4,108(sp)
   898b4:	da802415 	stw	r10,144(sp)
   898b8:	382b883a 	mov	r21,r7
   898bc:	050001c4 	movi	r20,7
   898c0:	df002017 	ldw	fp,128(sp)
   898c4:	00000506 	br	898dc <___vfiprintf_internal_r+0xdd8>
   898c8:	21400084 	addi	r5,r4,2
   898cc:	42000204 	addi	r8,r8,8
   898d0:	1809883a 	mov	r4,r3
   898d4:	9cfffc04 	addi	r19,r19,-16
   898d8:	acffc40e 	bge	r21,r19,897ec <__alt_data_end+0xfffbdcfc>
   898dc:	10800404 	addi	r2,r2,16
   898e0:	20c00044 	addi	r3,r4,1
   898e4:	45800015 	stw	r22,0(r8)
   898e8:	45400115 	stw	r21,4(r8)
   898ec:	d8801c15 	stw	r2,112(sp)
   898f0:	d8c01b15 	stw	r3,108(sp)
   898f4:	a0fff40e 	bge	r20,r3,898c8 <__alt_data_end+0xfffbddd8>
   898f8:	1000041e 	bne	r2,zero,8990c <___vfiprintf_internal_r+0xe08>
   898fc:	01400044 	movi	r5,1
   89900:	0009883a 	mov	r4,zero
   89904:	d811883a 	mov	r8,sp
   89908:	003ff206 	br	898d4 <__alt_data_end+0xfffbdde4>
   8990c:	d9402117 	ldw	r5,132(sp)
   89910:	d9801a04 	addi	r6,sp,104
   89914:	e009883a 	mov	r4,fp
   89918:	00889f00 	call	889f0 <__sprint_r.part.0>
   8991c:	103fcd1e 	bne	r2,zero,89854 <__alt_data_end+0xfffbdd64>
   89920:	d9001b17 	ldw	r4,108(sp)
   89924:	d8801c17 	ldw	r2,112(sp)
   89928:	d811883a 	mov	r8,sp
   8992c:	21400044 	addi	r5,r4,1
   89930:	003fe806 	br	898d4 <__alt_data_end+0xfffbdde4>
   89934:	d9402117 	ldw	r5,132(sp)
   89938:	d9002017 	ldw	r4,128(sp)
   8993c:	d9801a04 	addi	r6,sp,104
   89940:	d9c02b15 	stw	r7,172(sp)
   89944:	db402a15 	stw	r13,168(sp)
   89948:	00889f00 	call	889f0 <__sprint_r.part.0>
   8994c:	d9c02b17 	ldw	r7,172(sp)
   89950:	db402a17 	ldw	r13,168(sp)
   89954:	103fbf1e 	bne	r2,zero,89854 <__alt_data_end+0xfffbdd64>
   89958:	d9401b17 	ldw	r5,108(sp)
   8995c:	d8801c17 	ldw	r2,112(sp)
   89960:	d811883a 	mov	r8,sp
   89964:	29800044 	addi	r6,r5,1
   89968:	003dc406 	br	8907c <__alt_data_end+0xfffbd58c>
   8996c:	1000d21e 	bne	r2,zero,89cb8 <___vfiprintf_internal_r+0x11b4>
   89970:	d8c01d87 	ldb	r3,118(sp)
   89974:	18009526 	beq	r3,zero,89bcc <___vfiprintf_internal_r+0x10c8>
   89978:	00800044 	movi	r2,1
   8997c:	d8c01d84 	addi	r3,sp,118
   89980:	1009883a 	mov	r4,r2
   89984:	d8c00015 	stw	r3,0(sp)
   89988:	d8800115 	stw	r2,4(sp)
   8998c:	d811883a 	mov	r8,sp
   89990:	200b883a 	mov	r5,r4
   89994:	42000204 	addi	r8,r8,8
   89998:	21000044 	addi	r4,r4,1
   8999c:	003d9706 	br	88ffc <__alt_data_end+0xfffbd50c>
   899a0:	d9001d04 	addi	r4,sp,116
   899a4:	00800084 	movi	r2,2
   899a8:	d9000015 	stw	r4,0(sp)
   899ac:	d8800115 	stw	r2,4(sp)
   899b0:	1809883a 	mov	r4,r3
   899b4:	d811883a 	mov	r8,sp
   899b8:	200b883a 	mov	r5,r4
   899bc:	42000204 	addi	r8,r8,8
   899c0:	21000044 	addi	r4,r4,1
   899c4:	003f4e06 	br	89700 <__alt_data_end+0xfffbdc10>
   899c8:	d8001d85 	stb	zero,118(sp)
   899cc:	48005016 	blt	r9,zero,89b10 <___vfiprintf_internal_r+0x100c>
   899d0:	00ffdfc4 	movi	r3,-129
   899d4:	94c4b03a 	or	r2,r18,r19
   899d8:	a0e8703a 	and	r20,r20,r3
   899dc:	103d4426 	beq	r2,zero,88ef0 <__alt_data_end+0xfffbd400>
   899e0:	0039883a 	mov	fp,zero
   899e4:	d9002617 	ldw	r4,152(sp)
   899e8:	dd401a04 	addi	r21,sp,104
   899ec:	908003cc 	andi	r2,r18,15
   899f0:	9806973a 	slli	r3,r19,28
   899f4:	2085883a 	add	r2,r4,r2
   899f8:	9024d13a 	srli	r18,r18,4
   899fc:	10800003 	ldbu	r2,0(r2)
   89a00:	9826d13a 	srli	r19,r19,4
   89a04:	ad7fffc4 	addi	r21,r21,-1
   89a08:	1ca4b03a 	or	r18,r3,r18
   89a0c:	a8800005 	stb	r2,0(r21)
   89a10:	94c4b03a 	or	r2,r18,r19
   89a14:	103ff51e 	bne	r2,zero,899ec <__alt_data_end+0xfffbdefc>
   89a18:	003e5906 	br	89380 <__alt_data_end+0xfffbd890>
   89a1c:	d9402117 	ldw	r5,132(sp)
   89a20:	d9002017 	ldw	r4,128(sp)
   89a24:	d9801a04 	addi	r6,sp,104
   89a28:	00889f00 	call	889f0 <__sprint_r.part.0>
   89a2c:	103f891e 	bne	r2,zero,89854 <__alt_data_end+0xfffbdd64>
   89a30:	d8801c17 	ldw	r2,112(sp)
   89a34:	d811883a 	mov	r8,sp
   89a38:	003f9506 	br	89890 <__alt_data_end+0xfffbdda0>
   89a3c:	d9402117 	ldw	r5,132(sp)
   89a40:	d9002017 	ldw	r4,128(sp)
   89a44:	d9801a04 	addi	r6,sp,104
   89a48:	00889f00 	call	889f0 <__sprint_r.part.0>
   89a4c:	103f811e 	bne	r2,zero,89854 <__alt_data_end+0xfffbdd64>
   89a50:	d811883a 	mov	r8,sp
   89a54:	003ced06 	br	88e0c <__alt_data_end+0xfffbd31c>
   89a58:	d9402117 	ldw	r5,132(sp)
   89a5c:	d9002017 	ldw	r4,128(sp)
   89a60:	d9801a04 	addi	r6,sp,104
   89a64:	da402c15 	stw	r9,176(sp)
   89a68:	db802a15 	stw	r14,168(sp)
   89a6c:	00889f00 	call	889f0 <__sprint_r.part.0>
   89a70:	da402c17 	ldw	r9,176(sp)
   89a74:	db802a17 	ldw	r14,168(sp)
   89a78:	103f761e 	bne	r2,zero,89854 <__alt_data_end+0xfffbdd64>
   89a7c:	d9401b17 	ldw	r5,108(sp)
   89a80:	d8801c17 	ldw	r2,112(sp)
   89a84:	d811883a 	mov	r8,sp
   89a88:	29000044 	addi	r4,r5,1
   89a8c:	003d5b06 	br	88ffc <__alt_data_end+0xfffbd50c>
   89a90:	d9402117 	ldw	r5,132(sp)
   89a94:	d9002017 	ldw	r4,128(sp)
   89a98:	d9801a04 	addi	r6,sp,104
   89a9c:	da402c15 	stw	r9,176(sp)
   89aa0:	00889f00 	call	889f0 <__sprint_r.part.0>
   89aa4:	da402c17 	ldw	r9,176(sp)
   89aa8:	103f6a1e 	bne	r2,zero,89854 <__alt_data_end+0xfffbdd64>
   89aac:	d9401b17 	ldw	r5,108(sp)
   89ab0:	d8801c17 	ldw	r2,112(sp)
   89ab4:	d811883a 	mov	r8,sp
   89ab8:	29000044 	addi	r4,r5,1
   89abc:	003f1006 	br	89700 <__alt_data_end+0xfffbdc10>
   89ac0:	1000c31e 	bne	r2,zero,89dd0 <___vfiprintf_internal_r+0x12cc>
   89ac4:	01000044 	movi	r4,1
   89ac8:	000b883a 	mov	r5,zero
   89acc:	d811883a 	mov	r8,sp
   89ad0:	003f0d06 	br	89708 <__alt_data_end+0xfffbdc18>
   89ad4:	d9402117 	ldw	r5,132(sp)
   89ad8:	d9002017 	ldw	r4,128(sp)
   89adc:	d9801a04 	addi	r6,sp,104
   89ae0:	00889f00 	call	889f0 <__sprint_r.part.0>
   89ae4:	103f5b1e 	bne	r2,zero,89854 <__alt_data_end+0xfffbdd64>
   89ae8:	d9001b17 	ldw	r4,108(sp)
   89aec:	d8801c17 	ldw	r2,112(sp)
   89af0:	d811883a 	mov	r8,sp
   89af4:	21000044 	addi	r4,r4,1
   89af8:	003d8006 	br	890fc <__alt_data_end+0xfffbd60c>
   89afc:	01000274 	movhi	r4,9
   89b00:	2101de04 	addi	r4,r4,1912
   89b04:	d9002615 	stw	r4,152(sp)
   89b08:	d8c02215 	stw	r3,136(sp)
   89b0c:	1029883a 	mov	r20,r2
   89b10:	94c4b03a 	or	r2,r18,r19
   89b14:	103fb21e 	bne	r2,zero,899e0 <__alt_data_end+0xfffbdef0>
   89b18:	0039883a 	mov	fp,zero
   89b1c:	00800084 	movi	r2,2
   89b20:	003e6b06 	br	894d0 <__alt_data_end+0xfffbd9e0>
   89b24:	da802217 	ldw	r10,136(sp)
   89b28:	d8001d85 	stb	zero,118(sp)
   89b2c:	0027883a 	mov	r19,zero
   89b30:	50800104 	addi	r2,r10,4
   89b34:	54800017 	ldw	r18,0(r10)
   89b38:	483e6016 	blt	r9,zero,894bc <__alt_data_end+0xfffbd9cc>
   89b3c:	00ffdfc4 	movi	r3,-129
   89b40:	d8802215 	stw	r2,136(sp)
   89b44:	a0e8703a 	and	r20,r20,r3
   89b48:	0039883a 	mov	fp,zero
   89b4c:	903ebb26 	beq	r18,zero,8963c <__alt_data_end+0xfffbdb4c>
   89b50:	00800244 	movi	r2,9
   89b54:	14bdee36 	bltu	r2,r18,89310 <__alt_data_end+0xfffbd820>
   89b58:	003eba06 	br	89644 <__alt_data_end+0xfffbdb54>
   89b5c:	00800c04 	movi	r2,48
   89b60:	d8c01d45 	stb	r3,117(sp)
   89b64:	d8801d05 	stb	r2,116(sp)
   89b68:	d8001d85 	stb	zero,118(sp)
   89b6c:	a0c00094 	ori	r3,r20,2
   89b70:	4800a916 	blt	r9,zero,89e18 <___vfiprintf_internal_r+0x1314>
   89b74:	00bfdfc4 	movi	r2,-129
   89b78:	a096703a 	and	r11,r20,r2
   89b7c:	5d000094 	ori	r20,r11,2
   89b80:	0039883a 	mov	fp,zero
   89b84:	003f9706 	br	899e4 <__alt_data_end+0xfffbdef4>
   89b88:	8025883a 	mov	r18,r16
   89b8c:	003c2e06 	br	88c48 <__alt_data_end+0xfffbd158>
   89b90:	00800274 	movhi	r2,9
   89b94:	1081de04 	addi	r2,r2,1912
   89b98:	0039883a 	mov	fp,zero
   89b9c:	d8802615 	stw	r2,152(sp)
   89ba0:	003f9006 	br	899e4 <__alt_data_end+0xfffbdef4>
   89ba4:	04a5c83a 	sub	r18,zero,r18
   89ba8:	07000b44 	movi	fp,45
   89bac:	9004c03a 	cmpne	r2,r18,zero
   89bb0:	04e7c83a 	sub	r19,zero,r19
   89bb4:	df001d85 	stb	fp,118(sp)
   89bb8:	98a7c83a 	sub	r19,r19,r2
   89bbc:	48009f16 	blt	r9,zero,89e3c <___vfiprintf_internal_r+0x1338>
   89bc0:	00bfdfc4 	movi	r2,-129
   89bc4:	a0a8703a 	and	r20,r20,r2
   89bc8:	003dd006 	br	8930c <__alt_data_end+0xfffbd81c>
   89bcc:	70004c26 	beq	r14,zero,89d00 <___vfiprintf_internal_r+0x11fc>
   89bd0:	00800084 	movi	r2,2
   89bd4:	d8c01d04 	addi	r3,sp,116
   89bd8:	d8c00015 	stw	r3,0(sp)
   89bdc:	d8800115 	stw	r2,4(sp)
   89be0:	01000044 	movi	r4,1
   89be4:	d811883a 	mov	r8,sp
   89be8:	003f7306 	br	899b8 <__alt_data_end+0xfffbdec8>
   89bec:	a080100c 	andi	r2,r20,64
   89bf0:	da802217 	ldw	r10,136(sp)
   89bf4:	103e0626 	beq	r2,zero,89410 <__alt_data_end+0xfffbd920>
   89bf8:	5480000f 	ldh	r18,0(r10)
   89bfc:	52800104 	addi	r10,r10,4
   89c00:	da802215 	stw	r10,136(sp)
   89c04:	9027d7fa 	srai	r19,r18,31
   89c08:	9805883a 	mov	r2,r19
   89c0c:	003db806 	br	892f0 <__alt_data_end+0xfffbd800>
   89c10:	a080040c 	andi	r2,r20,16
   89c14:	1000091e 	bne	r2,zero,89c3c <___vfiprintf_internal_r+0x1138>
   89c18:	a2c0100c 	andi	r11,r20,64
   89c1c:	58000726 	beq	r11,zero,89c3c <___vfiprintf_internal_r+0x1138>
   89c20:	da802217 	ldw	r10,136(sp)
   89c24:	50800017 	ldw	r2,0(r10)
   89c28:	52800104 	addi	r10,r10,4
   89c2c:	da802215 	stw	r10,136(sp)
   89c30:	da802317 	ldw	r10,140(sp)
   89c34:	1280000d 	sth	r10,0(r2)
   89c38:	003be706 	br	88bd8 <__alt_data_end+0xfffbd0e8>
   89c3c:	da802217 	ldw	r10,136(sp)
   89c40:	50800017 	ldw	r2,0(r10)
   89c44:	52800104 	addi	r10,r10,4
   89c48:	da802215 	stw	r10,136(sp)
   89c4c:	da802317 	ldw	r10,140(sp)
   89c50:	12800015 	stw	r10,0(r2)
   89c54:	003be006 	br	88bd8 <__alt_data_end+0xfffbd0e8>
   89c58:	a080100c 	andi	r2,r20,64
   89c5c:	da802217 	ldw	r10,136(sp)
   89c60:	10003026 	beq	r2,zero,89d24 <___vfiprintf_internal_r+0x1220>
   89c64:	5480000b 	ldhu	r18,0(r10)
   89c68:	52800104 	addi	r10,r10,4
   89c6c:	0027883a 	mov	r19,zero
   89c70:	da802215 	stw	r10,136(sp)
   89c74:	003d8006 	br	89278 <__alt_data_end+0xfffbd788>
   89c78:	80c00007 	ldb	r3,0(r16)
   89c7c:	003c0006 	br	88c80 <__alt_data_end+0xfffbd190>
   89c80:	a080100c 	andi	r2,r20,64
   89c84:	d8001d85 	stb	zero,118(sp)
   89c88:	da802217 	ldw	r10,136(sp)
   89c8c:	1000201e 	bne	r2,zero,89d10 <___vfiprintf_internal_r+0x120c>
   89c90:	50800104 	addi	r2,r10,4
   89c94:	54800017 	ldw	r18,0(r10)
   89c98:	0027883a 	mov	r19,zero
   89c9c:	483def0e 	bge	r9,zero,8945c <__alt_data_end+0xfffbd96c>
   89ca0:	94c6b03a 	or	r3,r18,r19
   89ca4:	d8802215 	stw	r2,136(sp)
   89ca8:	183d4e1e 	bne	r3,zero,891e4 <__alt_data_end+0xfffbd6f4>
   89cac:	0039883a 	mov	fp,zero
   89cb0:	0005883a 	mov	r2,zero
   89cb4:	003e0606 	br	894d0 <__alt_data_end+0xfffbd9e0>
   89cb8:	d9402117 	ldw	r5,132(sp)
   89cbc:	d9002017 	ldw	r4,128(sp)
   89cc0:	d9801a04 	addi	r6,sp,104
   89cc4:	da402c15 	stw	r9,176(sp)
   89cc8:	db802a15 	stw	r14,168(sp)
   89ccc:	00889f00 	call	889f0 <__sprint_r.part.0>
   89cd0:	da402c17 	ldw	r9,176(sp)
   89cd4:	db802a17 	ldw	r14,168(sp)
   89cd8:	103ede1e 	bne	r2,zero,89854 <__alt_data_end+0xfffbdd64>
   89cdc:	d9401b17 	ldw	r5,108(sp)
   89ce0:	d8801c17 	ldw	r2,112(sp)
   89ce4:	d811883a 	mov	r8,sp
   89ce8:	29000044 	addi	r4,r5,1
   89cec:	003e7406 	br	896c0 <__alt_data_end+0xfffbdbd0>
   89cf0:	00bfffc4 	movi	r2,-1
   89cf4:	003c5806 	br	88e58 <__alt_data_end+0xfffbd368>
   89cf8:	d811883a 	mov	r8,sp
   89cfc:	003ee806 	br	898a0 <__alt_data_end+0xfffbddb0>
   89d00:	000b883a 	mov	r5,zero
   89d04:	01000044 	movi	r4,1
   89d08:	d811883a 	mov	r8,sp
   89d0c:	003e7c06 	br	89700 <__alt_data_end+0xfffbdc10>
   89d10:	50800104 	addi	r2,r10,4
   89d14:	5480000b 	ldhu	r18,0(r10)
   89d18:	0027883a 	mov	r19,zero
   89d1c:	483dcf0e 	bge	r9,zero,8945c <__alt_data_end+0xfffbd96c>
   89d20:	003fdf06 	br	89ca0 <__alt_data_end+0xfffbe1b0>
   89d24:	54800017 	ldw	r18,0(r10)
   89d28:	52800104 	addi	r10,r10,4
   89d2c:	0027883a 	mov	r19,zero
   89d30:	da802215 	stw	r10,136(sp)
   89d34:	003d5006 	br	89278 <__alt_data_end+0xfffbd788>
   89d38:	50800104 	addi	r2,r10,4
   89d3c:	5480000b 	ldhu	r18,0(r10)
   89d40:	0027883a 	mov	r19,zero
   89d44:	483f7d0e 	bge	r9,zero,89b3c <__alt_data_end+0xfffbe04c>
   89d48:	003ddc06 	br	894bc <__alt_data_end+0xfffbd9cc>
   89d4c:	d8c02215 	stw	r3,136(sp)
   89d50:	0039883a 	mov	fp,zero
   89d54:	003ddb06 	br	894c4 <__alt_data_end+0xfffbd9d4>
   89d58:	02800274 	movhi	r10,9
   89d5c:	52823f04 	addi	r10,r10,2300
   89d60:	da802415 	stw	r10,144(sp)
   89d64:	003e8306 	br	89774 <__alt_data_end+0xfffbdc84>
   89d68:	d8801c17 	ldw	r2,112(sp)
   89d6c:	dd002117 	ldw	r20,132(sp)
   89d70:	103eb926 	beq	r2,zero,89858 <__alt_data_end+0xfffbdd68>
   89d74:	d9002017 	ldw	r4,128(sp)
   89d78:	d9801a04 	addi	r6,sp,104
   89d7c:	a00b883a 	mov	r5,r20
   89d80:	00889f00 	call	889f0 <__sprint_r.part.0>
   89d84:	003eb406 	br	89858 <__alt_data_end+0xfffbdd68>
   89d88:	80c00043 	ldbu	r3,1(r16)
   89d8c:	a5000814 	ori	r20,r20,32
   89d90:	84000044 	addi	r16,r16,1
   89d94:	18c03fcc 	andi	r3,r3,255
   89d98:	18c0201c 	xori	r3,r3,128
   89d9c:	18ffe004 	addi	r3,r3,-128
   89da0:	003bb706 	br	88c80 <__alt_data_end+0xfffbd190>
   89da4:	a809883a 	mov	r4,r21
   89da8:	d8c02a15 	stw	r3,168(sp)
   89dac:	da002b15 	stw	r8,172(sp)
   89db0:	00813ac0 	call	813ac <strlen>
   89db4:	d8c02a17 	ldw	r3,168(sp)
   89db8:	1027883a 	mov	r19,r2
   89dbc:	df001d83 	ldbu	fp,118(sp)
   89dc0:	d8c02215 	stw	r3,136(sp)
   89dc4:	0013883a 	mov	r9,zero
   89dc8:	da002b17 	ldw	r8,172(sp)
   89dcc:	003c4d06 	br	88f04 <__alt_data_end+0xfffbd414>
   89dd0:	d9402117 	ldw	r5,132(sp)
   89dd4:	d9002017 	ldw	r4,128(sp)
   89dd8:	d9801a04 	addi	r6,sp,104
   89ddc:	da402c15 	stw	r9,176(sp)
   89de0:	00889f00 	call	889f0 <__sprint_r.part.0>
   89de4:	da402c17 	ldw	r9,176(sp)
   89de8:	103e9a1e 	bne	r2,zero,89854 <__alt_data_end+0xfffbdd64>
   89dec:	d9401b17 	ldw	r5,108(sp)
   89df0:	d8801c17 	ldw	r2,112(sp)
   89df4:	d811883a 	mov	r8,sp
   89df8:	29000044 	addi	r4,r5,1
   89dfc:	003e4206 	br	89708 <__alt_data_end+0xfffbdc18>
   89e00:	d9401b17 	ldw	r5,108(sp)
   89e04:	01000274 	movhi	r4,9
   89e08:	21024304 	addi	r4,r4,2316
   89e0c:	d9002415 	stw	r4,144(sp)
   89e10:	29400044 	addi	r5,r5,1
   89e14:	003c6d06 	br	88fcc <__alt_data_end+0xfffbd4dc>
   89e18:	0039883a 	mov	fp,zero
   89e1c:	00800084 	movi	r2,2
   89e20:	10803fcc 	andi	r2,r2,255
   89e24:	01000044 	movi	r4,1
   89e28:	11001e26 	beq	r2,r4,89ea4 <___vfiprintf_internal_r+0x13a0>
   89e2c:	01000084 	movi	r4,2
   89e30:	11001e1e 	bne	r2,r4,89eac <___vfiprintf_internal_r+0x13a8>
   89e34:	1829883a 	mov	r20,r3
   89e38:	003eea06 	br	899e4 <__alt_data_end+0xfffbdef4>
   89e3c:	a007883a 	mov	r3,r20
   89e40:	00800044 	movi	r2,1
   89e44:	003ff606 	br	89e20 <__alt_data_end+0xfffbe330>
   89e48:	00800184 	movi	r2,6
   89e4c:	1240012e 	bgeu	r2,r9,89e54 <___vfiprintf_internal_r+0x1350>
   89e50:	1013883a 	mov	r9,r2
   89e54:	4827883a 	mov	r19,r9
   89e58:	4825883a 	mov	r18,r9
   89e5c:	48001516 	blt	r9,zero,89eb4 <___vfiprintf_internal_r+0x13b0>
   89e60:	05400274 	movhi	r21,9
   89e64:	d8c02215 	stw	r3,136(sp)
   89e68:	ad41e304 	addi	r21,r21,1932
   89e6c:	003d1406 	br	892c0 <__alt_data_end+0xfffbd7d0>
   89e70:	02800274 	movhi	r10,9
   89e74:	52823f04 	addi	r10,r10,2300
   89e78:	da802415 	stw	r10,144(sp)
   89e7c:	200d883a 	mov	r6,r4
   89e80:	003c9106 	br	890c8 <__alt_data_end+0xfffbd5d8>
   89e84:	5021883a 	mov	r16,r10
   89e88:	0013883a 	mov	r9,zero
   89e8c:	003b7d06 	br	88c84 <__alt_data_end+0xfffbd194>
   89e90:	4827883a 	mov	r19,r9
   89e94:	df001d83 	ldbu	fp,118(sp)
   89e98:	d8c02215 	stw	r3,136(sp)
   89e9c:	0013883a 	mov	r9,zero
   89ea0:	003c1806 	br	88f04 <__alt_data_end+0xfffbd414>
   89ea4:	1829883a 	mov	r20,r3
   89ea8:	003d1806 	br	8930c <__alt_data_end+0xfffbd81c>
   89eac:	1829883a 	mov	r20,r3
   89eb0:	003ccd06 	br	891e8 <__alt_data_end+0xfffbd6f8>
   89eb4:	0025883a 	mov	r18,zero
   89eb8:	003fe906 	br	89e60 <__alt_data_end+0xfffbe370>
   89ebc:	d8802217 	ldw	r2,136(sp)
   89ec0:	80c00043 	ldbu	r3,1(r16)
   89ec4:	5021883a 	mov	r16,r10
   89ec8:	12400017 	ldw	r9,0(r2)
   89ecc:	10800104 	addi	r2,r2,4
   89ed0:	d8802215 	stw	r2,136(sp)
   89ed4:	483faf0e 	bge	r9,zero,89d94 <__alt_data_end+0xfffbe2a4>
   89ed8:	18c03fcc 	andi	r3,r3,255
   89edc:	18c0201c 	xori	r3,r3,128
   89ee0:	027fffc4 	movi	r9,-1
   89ee4:	18ffe004 	addi	r3,r3,-128
   89ee8:	003b6506 	br	88c80 <__alt_data_end+0xfffbd190>
   89eec:	d9c01d85 	stb	r7,118(sp)
   89ef0:	003ca006 	br	89174 <__alt_data_end+0xfffbd684>
   89ef4:	d9c01d85 	stb	r7,118(sp)
   89ef8:	003cad06 	br	891b0 <__alt_data_end+0xfffbd6c0>
   89efc:	d9c01d85 	stb	r7,118(sp)
   89f00:	003d7d06 	br	894f8 <__alt_data_end+0xfffbda08>
   89f04:	d9c01d85 	stb	r7,118(sp)
   89f08:	003d5f06 	br	89488 <__alt_data_end+0xfffbd998>
   89f0c:	a080004c 	andi	r2,r20,1
   89f10:	0039883a 	mov	fp,zero
   89f14:	10000526 	beq	r2,zero,89f2c <___vfiprintf_internal_r+0x1428>
   89f18:	00800c04 	movi	r2,48
   89f1c:	d88019c5 	stb	r2,103(sp)
   89f20:	dcc02717 	ldw	r19,156(sp)
   89f24:	dd4019c4 	addi	r21,sp,103
   89f28:	003bf606 	br	88f04 <__alt_data_end+0xfffbd414>
   89f2c:	0027883a 	mov	r19,zero
   89f30:	dd401a04 	addi	r21,sp,104
   89f34:	003bf306 	br	88f04 <__alt_data_end+0xfffbd414>
   89f38:	d9c01d85 	stb	r7,118(sp)
   89f3c:	003dc806 	br	89660 <__alt_data_end+0xfffbdb70>
   89f40:	d9c01d85 	stb	r7,118(sp)
   89f44:	003d3a06 	br	89430 <__alt_data_end+0xfffbd940>
   89f48:	d9c01d85 	stb	r7,118(sp)
   89f4c:	003d2a06 	br	893f8 <__alt_data_end+0xfffbd908>
   89f50:	d9c01d85 	stb	r7,118(sp)
   89f54:	003cde06 	br	892d0 <__alt_data_end+0xfffbd7e0>
   89f58:	d9c01d85 	stb	r7,118(sp)
   89f5c:	003cbc06 	br	89250 <__alt_data_end+0xfffbd760>

00089f60 <__vfiprintf_internal>:
   89f60:	00800274 	movhi	r2,9
   89f64:	10896b04 	addi	r2,r2,9644
   89f68:	300f883a 	mov	r7,r6
   89f6c:	280d883a 	mov	r6,r5
   89f70:	200b883a 	mov	r5,r4
   89f74:	11000017 	ldw	r4,0(r2)
   89f78:	0088b041 	jmpi	88b04 <___vfiprintf_internal_r>

00089f7c <__sbprintf>:
   89f7c:	2880030b 	ldhu	r2,12(r5)
   89f80:	2ac01917 	ldw	r11,100(r5)
   89f84:	2a80038b 	ldhu	r10,14(r5)
   89f88:	2a400717 	ldw	r9,28(r5)
   89f8c:	2a000917 	ldw	r8,36(r5)
   89f90:	defee204 	addi	sp,sp,-1144
   89f94:	00c10004 	movi	r3,1024
   89f98:	dc011a15 	stw	r16,1128(sp)
   89f9c:	10bfff4c 	andi	r2,r2,65533
   89fa0:	2821883a 	mov	r16,r5
   89fa4:	d8cb883a 	add	r5,sp,r3
   89fa8:	dc811c15 	stw	r18,1136(sp)
   89fac:	dc411b15 	stw	r17,1132(sp)
   89fb0:	dfc11d15 	stw	ra,1140(sp)
   89fb4:	2025883a 	mov	r18,r4
   89fb8:	d881030d 	sth	r2,1036(sp)
   89fbc:	dac11915 	stw	r11,1124(sp)
   89fc0:	da81038d 	sth	r10,1038(sp)
   89fc4:	da410715 	stw	r9,1052(sp)
   89fc8:	da010915 	stw	r8,1060(sp)
   89fcc:	dec10015 	stw	sp,1024(sp)
   89fd0:	dec10415 	stw	sp,1040(sp)
   89fd4:	d8c10215 	stw	r3,1032(sp)
   89fd8:	d8c10515 	stw	r3,1044(sp)
   89fdc:	d8010615 	stw	zero,1048(sp)
   89fe0:	0088b040 	call	88b04 <___vfiprintf_internal_r>
   89fe4:	1023883a 	mov	r17,r2
   89fe8:	10000416 	blt	r2,zero,89ffc <__sbprintf+0x80>
   89fec:	d9410004 	addi	r5,sp,1024
   89ff0:	9009883a 	mov	r4,r18
   89ff4:	008535c0 	call	8535c <_fflush_r>
   89ff8:	10000d1e 	bne	r2,zero,8a030 <__sbprintf+0xb4>
   89ffc:	d881030b 	ldhu	r2,1036(sp)
   8a000:	1080100c 	andi	r2,r2,64
   8a004:	10000326 	beq	r2,zero,8a014 <__sbprintf+0x98>
   8a008:	8080030b 	ldhu	r2,12(r16)
   8a00c:	10801014 	ori	r2,r2,64
   8a010:	8080030d 	sth	r2,12(r16)
   8a014:	8805883a 	mov	r2,r17
   8a018:	dfc11d17 	ldw	ra,1140(sp)
   8a01c:	dc811c17 	ldw	r18,1136(sp)
   8a020:	dc411b17 	ldw	r17,1132(sp)
   8a024:	dc011a17 	ldw	r16,1128(sp)
   8a028:	dec11e04 	addi	sp,sp,1144
   8a02c:	f800283a 	ret
   8a030:	047fffc4 	movi	r17,-1
   8a034:	003ff106 	br	89ffc <__alt_data_end+0xfffbe50c>

0008a038 <_write_r>:
   8a038:	defffd04 	addi	sp,sp,-12
   8a03c:	2805883a 	mov	r2,r5
   8a040:	dc000015 	stw	r16,0(sp)
   8a044:	04000274 	movhi	r16,9
   8a048:	dc400115 	stw	r17,4(sp)
   8a04c:	300b883a 	mov	r5,r6
   8a050:	84106204 	addi	r16,r16,16776
   8a054:	2023883a 	mov	r17,r4
   8a058:	380d883a 	mov	r6,r7
   8a05c:	1009883a 	mov	r4,r2
   8a060:	dfc00215 	stw	ra,8(sp)
   8a064:	80000015 	stw	zero,0(r16)
   8a068:	008eae80 	call	8eae8 <write>
   8a06c:	00ffffc4 	movi	r3,-1
   8a070:	10c00526 	beq	r2,r3,8a088 <_write_r+0x50>
   8a074:	dfc00217 	ldw	ra,8(sp)
   8a078:	dc400117 	ldw	r17,4(sp)
   8a07c:	dc000017 	ldw	r16,0(sp)
   8a080:	dec00304 	addi	sp,sp,12
   8a084:	f800283a 	ret
   8a088:	80c00017 	ldw	r3,0(r16)
   8a08c:	183ff926 	beq	r3,zero,8a074 <__alt_data_end+0xfffbe584>
   8a090:	88c00015 	stw	r3,0(r17)
   8a094:	003ff706 	br	8a074 <__alt_data_end+0xfffbe584>

0008a098 <_close_r>:
   8a098:	defffd04 	addi	sp,sp,-12
   8a09c:	dc000015 	stw	r16,0(sp)
   8a0a0:	04000274 	movhi	r16,9
   8a0a4:	dc400115 	stw	r17,4(sp)
   8a0a8:	84106204 	addi	r16,r16,16776
   8a0ac:	2023883a 	mov	r17,r4
   8a0b0:	2809883a 	mov	r4,r5
   8a0b4:	dfc00215 	stw	ra,8(sp)
   8a0b8:	80000015 	stw	zero,0(r16)
   8a0bc:	008db200 	call	8db20 <close>
   8a0c0:	00ffffc4 	movi	r3,-1
   8a0c4:	10c00526 	beq	r2,r3,8a0dc <_close_r+0x44>
   8a0c8:	dfc00217 	ldw	ra,8(sp)
   8a0cc:	dc400117 	ldw	r17,4(sp)
   8a0d0:	dc000017 	ldw	r16,0(sp)
   8a0d4:	dec00304 	addi	sp,sp,12
   8a0d8:	f800283a 	ret
   8a0dc:	80c00017 	ldw	r3,0(r16)
   8a0e0:	183ff926 	beq	r3,zero,8a0c8 <__alt_data_end+0xfffbe5d8>
   8a0e4:	88c00015 	stw	r3,0(r17)
   8a0e8:	003ff706 	br	8a0c8 <__alt_data_end+0xfffbe5d8>

0008a0ec <_calloc_r>:
   8a0ec:	298b383a 	mul	r5,r5,r6
   8a0f0:	defffe04 	addi	sp,sp,-8
   8a0f4:	dfc00115 	stw	ra,4(sp)
   8a0f8:	dc000015 	stw	r16,0(sp)
   8a0fc:	00864f40 	call	864f4 <_malloc_r>
   8a100:	10002926 	beq	r2,zero,8a1a8 <_calloc_r+0xbc>
   8a104:	11bfff17 	ldw	r6,-4(r2)
   8a108:	1021883a 	mov	r16,r2
   8a10c:	00bfff04 	movi	r2,-4
   8a110:	308c703a 	and	r6,r6,r2
   8a114:	00c00904 	movi	r3,36
   8a118:	308d883a 	add	r6,r6,r2
   8a11c:	19801636 	bltu	r3,r6,8a178 <_calloc_r+0x8c>
   8a120:	008004c4 	movi	r2,19
   8a124:	11800b2e 	bgeu	r2,r6,8a154 <_calloc_r+0x68>
   8a128:	80000015 	stw	zero,0(r16)
   8a12c:	80000115 	stw	zero,4(r16)
   8a130:	008006c4 	movi	r2,27
   8a134:	11801a2e 	bgeu	r2,r6,8a1a0 <_calloc_r+0xb4>
   8a138:	80000215 	stw	zero,8(r16)
   8a13c:	80000315 	stw	zero,12(r16)
   8a140:	30c0151e 	bne	r6,r3,8a198 <_calloc_r+0xac>
   8a144:	80000415 	stw	zero,16(r16)
   8a148:	80800604 	addi	r2,r16,24
   8a14c:	80000515 	stw	zero,20(r16)
   8a150:	00000106 	br	8a158 <_calloc_r+0x6c>
   8a154:	8005883a 	mov	r2,r16
   8a158:	10000015 	stw	zero,0(r2)
   8a15c:	10000115 	stw	zero,4(r2)
   8a160:	10000215 	stw	zero,8(r2)
   8a164:	8005883a 	mov	r2,r16
   8a168:	dfc00117 	ldw	ra,4(sp)
   8a16c:	dc000017 	ldw	r16,0(sp)
   8a170:	dec00204 	addi	sp,sp,8
   8a174:	f800283a 	ret
   8a178:	000b883a 	mov	r5,zero
   8a17c:	8009883a 	mov	r4,r16
   8a180:	00870880 	call	87088 <memset>
   8a184:	8005883a 	mov	r2,r16
   8a188:	dfc00117 	ldw	ra,4(sp)
   8a18c:	dc000017 	ldw	r16,0(sp)
   8a190:	dec00204 	addi	sp,sp,8
   8a194:	f800283a 	ret
   8a198:	80800404 	addi	r2,r16,16
   8a19c:	003fee06 	br	8a158 <__alt_data_end+0xfffbe668>
   8a1a0:	80800204 	addi	r2,r16,8
   8a1a4:	003fec06 	br	8a158 <__alt_data_end+0xfffbe668>
   8a1a8:	0005883a 	mov	r2,zero
   8a1ac:	003fee06 	br	8a168 <__alt_data_end+0xfffbe678>

0008a1b0 <_fclose_r>:
   8a1b0:	28003926 	beq	r5,zero,8a298 <_fclose_r+0xe8>
   8a1b4:	defffc04 	addi	sp,sp,-16
   8a1b8:	dc400115 	stw	r17,4(sp)
   8a1bc:	dc000015 	stw	r16,0(sp)
   8a1c0:	dfc00315 	stw	ra,12(sp)
   8a1c4:	dc800215 	stw	r18,8(sp)
   8a1c8:	2023883a 	mov	r17,r4
   8a1cc:	2821883a 	mov	r16,r5
   8a1d0:	20000226 	beq	r4,zero,8a1dc <_fclose_r+0x2c>
   8a1d4:	20800e17 	ldw	r2,56(r4)
   8a1d8:	10002726 	beq	r2,zero,8a278 <_fclose_r+0xc8>
   8a1dc:	8080030f 	ldh	r2,12(r16)
   8a1e0:	1000071e 	bne	r2,zero,8a200 <_fclose_r+0x50>
   8a1e4:	0005883a 	mov	r2,zero
   8a1e8:	dfc00317 	ldw	ra,12(sp)
   8a1ec:	dc800217 	ldw	r18,8(sp)
   8a1f0:	dc400117 	ldw	r17,4(sp)
   8a1f4:	dc000017 	ldw	r16,0(sp)
   8a1f8:	dec00404 	addi	sp,sp,16
   8a1fc:	f800283a 	ret
   8a200:	800b883a 	mov	r5,r16
   8a204:	8809883a 	mov	r4,r17
   8a208:	00851400 	call	85140 <__sflush_r>
   8a20c:	1025883a 	mov	r18,r2
   8a210:	80800b17 	ldw	r2,44(r16)
   8a214:	10000426 	beq	r2,zero,8a228 <_fclose_r+0x78>
   8a218:	81400717 	ldw	r5,28(r16)
   8a21c:	8809883a 	mov	r4,r17
   8a220:	103ee83a 	callr	r2
   8a224:	10001616 	blt	r2,zero,8a280 <_fclose_r+0xd0>
   8a228:	8080030b 	ldhu	r2,12(r16)
   8a22c:	1080200c 	andi	r2,r2,128
   8a230:	1000151e 	bne	r2,zero,8a288 <_fclose_r+0xd8>
   8a234:	81400c17 	ldw	r5,48(r16)
   8a238:	28000526 	beq	r5,zero,8a250 <_fclose_r+0xa0>
   8a23c:	80801004 	addi	r2,r16,64
   8a240:	28800226 	beq	r5,r2,8a24c <_fclose_r+0x9c>
   8a244:	8809883a 	mov	r4,r17
   8a248:	00858ac0 	call	858ac <_free_r>
   8a24c:	80000c15 	stw	zero,48(r16)
   8a250:	81401117 	ldw	r5,68(r16)
   8a254:	28000326 	beq	r5,zero,8a264 <_fclose_r+0xb4>
   8a258:	8809883a 	mov	r4,r17
   8a25c:	00858ac0 	call	858ac <_free_r>
   8a260:	80001115 	stw	zero,68(r16)
   8a264:	00857480 	call	85748 <__sfp_lock_acquire>
   8a268:	8000030d 	sth	zero,12(r16)
   8a26c:	008574c0 	call	8574c <__sfp_lock_release>
   8a270:	9005883a 	mov	r2,r18
   8a274:	003fdc06 	br	8a1e8 <__alt_data_end+0xfffbe6f8>
   8a278:	00857380 	call	85738 <__sinit>
   8a27c:	003fd706 	br	8a1dc <__alt_data_end+0xfffbe6ec>
   8a280:	04bfffc4 	movi	r18,-1
   8a284:	003fe806 	br	8a228 <__alt_data_end+0xfffbe738>
   8a288:	81400417 	ldw	r5,16(r16)
   8a28c:	8809883a 	mov	r4,r17
   8a290:	00858ac0 	call	858ac <_free_r>
   8a294:	003fe706 	br	8a234 <__alt_data_end+0xfffbe744>
   8a298:	0005883a 	mov	r2,zero
   8a29c:	f800283a 	ret

0008a2a0 <fclose>:
   8a2a0:	00800274 	movhi	r2,9
   8a2a4:	10896b04 	addi	r2,r2,9644
   8a2a8:	200b883a 	mov	r5,r4
   8a2ac:	11000017 	ldw	r4,0(r2)
   8a2b0:	008a1b01 	jmpi	8a1b0 <_fclose_r>

0008a2b4 <__fputwc>:
   8a2b4:	defff804 	addi	sp,sp,-32
   8a2b8:	dcc00415 	stw	r19,16(sp)
   8a2bc:	dc800315 	stw	r18,12(sp)
   8a2c0:	dc000115 	stw	r16,4(sp)
   8a2c4:	dfc00715 	stw	ra,28(sp)
   8a2c8:	dd400615 	stw	r21,24(sp)
   8a2cc:	dd000515 	stw	r20,20(sp)
   8a2d0:	dc400215 	stw	r17,8(sp)
   8a2d4:	2027883a 	mov	r19,r4
   8a2d8:	2825883a 	mov	r18,r5
   8a2dc:	3021883a 	mov	r16,r6
   8a2e0:	00862e40 	call	862e4 <__locale_mb_cur_max>
   8a2e4:	00c00044 	movi	r3,1
   8a2e8:	10c03e26 	beq	r2,r3,8a3e4 <__fputwc+0x130>
   8a2ec:	81c01704 	addi	r7,r16,92
   8a2f0:	900d883a 	mov	r6,r18
   8a2f4:	d80b883a 	mov	r5,sp
   8a2f8:	9809883a 	mov	r4,r19
   8a2fc:	008a7840 	call	8a784 <_wcrtomb_r>
   8a300:	1029883a 	mov	r20,r2
   8a304:	00bfffc4 	movi	r2,-1
   8a308:	a0802026 	beq	r20,r2,8a38c <__fputwc+0xd8>
   8a30c:	d9400003 	ldbu	r5,0(sp)
   8a310:	a0001c26 	beq	r20,zero,8a384 <__fputwc+0xd0>
   8a314:	0023883a 	mov	r17,zero
   8a318:	05400284 	movi	r21,10
   8a31c:	00000906 	br	8a344 <__fputwc+0x90>
   8a320:	80800017 	ldw	r2,0(r16)
   8a324:	11400005 	stb	r5,0(r2)
   8a328:	80c00017 	ldw	r3,0(r16)
   8a32c:	18c00044 	addi	r3,r3,1
   8a330:	80c00015 	stw	r3,0(r16)
   8a334:	8c400044 	addi	r17,r17,1
   8a338:	dc45883a 	add	r2,sp,r17
   8a33c:	8d00112e 	bgeu	r17,r20,8a384 <__fputwc+0xd0>
   8a340:	11400003 	ldbu	r5,0(r2)
   8a344:	80c00217 	ldw	r3,8(r16)
   8a348:	18ffffc4 	addi	r3,r3,-1
   8a34c:	80c00215 	stw	r3,8(r16)
   8a350:	183ff30e 	bge	r3,zero,8a320 <__alt_data_end+0xfffbe830>
   8a354:	80800617 	ldw	r2,24(r16)
   8a358:	18801916 	blt	r3,r2,8a3c0 <__fputwc+0x10c>
   8a35c:	80800017 	ldw	r2,0(r16)
   8a360:	11400005 	stb	r5,0(r2)
   8a364:	80800017 	ldw	r2,0(r16)
   8a368:	10c00003 	ldbu	r3,0(r2)
   8a36c:	10800044 	addi	r2,r2,1
   8a370:	1d402326 	beq	r3,r21,8a400 <__fputwc+0x14c>
   8a374:	80800015 	stw	r2,0(r16)
   8a378:	8c400044 	addi	r17,r17,1
   8a37c:	dc45883a 	add	r2,sp,r17
   8a380:	8d3fef36 	bltu	r17,r20,8a340 <__alt_data_end+0xfffbe850>
   8a384:	9005883a 	mov	r2,r18
   8a388:	00000406 	br	8a39c <__fputwc+0xe8>
   8a38c:	80c0030b 	ldhu	r3,12(r16)
   8a390:	a005883a 	mov	r2,r20
   8a394:	18c01014 	ori	r3,r3,64
   8a398:	80c0030d 	sth	r3,12(r16)
   8a39c:	dfc00717 	ldw	ra,28(sp)
   8a3a0:	dd400617 	ldw	r21,24(sp)
   8a3a4:	dd000517 	ldw	r20,20(sp)
   8a3a8:	dcc00417 	ldw	r19,16(sp)
   8a3ac:	dc800317 	ldw	r18,12(sp)
   8a3b0:	dc400217 	ldw	r17,8(sp)
   8a3b4:	dc000117 	ldw	r16,4(sp)
   8a3b8:	dec00804 	addi	sp,sp,32
   8a3bc:	f800283a 	ret
   8a3c0:	800d883a 	mov	r6,r16
   8a3c4:	29403fcc 	andi	r5,r5,255
   8a3c8:	9809883a 	mov	r4,r19
   8a3cc:	008a62c0 	call	8a62c <__swbuf_r>
   8a3d0:	10bfffe0 	cmpeqi	r2,r2,-1
   8a3d4:	10803fcc 	andi	r2,r2,255
   8a3d8:	103fd626 	beq	r2,zero,8a334 <__alt_data_end+0xfffbe844>
   8a3dc:	00bfffc4 	movi	r2,-1
   8a3e0:	003fee06 	br	8a39c <__alt_data_end+0xfffbe8ac>
   8a3e4:	90ffffc4 	addi	r3,r18,-1
   8a3e8:	01003f84 	movi	r4,254
   8a3ec:	20ffbf36 	bltu	r4,r3,8a2ec <__alt_data_end+0xfffbe7fc>
   8a3f0:	900b883a 	mov	r5,r18
   8a3f4:	dc800005 	stb	r18,0(sp)
   8a3f8:	1029883a 	mov	r20,r2
   8a3fc:	003fc506 	br	8a314 <__alt_data_end+0xfffbe824>
   8a400:	800d883a 	mov	r6,r16
   8a404:	a80b883a 	mov	r5,r21
   8a408:	9809883a 	mov	r4,r19
   8a40c:	008a62c0 	call	8a62c <__swbuf_r>
   8a410:	10bfffe0 	cmpeqi	r2,r2,-1
   8a414:	003fef06 	br	8a3d4 <__alt_data_end+0xfffbe8e4>

0008a418 <_fputwc_r>:
   8a418:	3080030b 	ldhu	r2,12(r6)
   8a41c:	10c8000c 	andi	r3,r2,8192
   8a420:	1800051e 	bne	r3,zero,8a438 <_fputwc_r+0x20>
   8a424:	30c01917 	ldw	r3,100(r6)
   8a428:	10880014 	ori	r2,r2,8192
   8a42c:	3080030d 	sth	r2,12(r6)
   8a430:	18880014 	ori	r2,r3,8192
   8a434:	30801915 	stw	r2,100(r6)
   8a438:	008a2b41 	jmpi	8a2b4 <__fputwc>

0008a43c <fputwc>:
   8a43c:	00800274 	movhi	r2,9
   8a440:	defffc04 	addi	sp,sp,-16
   8a444:	10896b04 	addi	r2,r2,9644
   8a448:	dc000115 	stw	r16,4(sp)
   8a44c:	14000017 	ldw	r16,0(r2)
   8a450:	dc400215 	stw	r17,8(sp)
   8a454:	dfc00315 	stw	ra,12(sp)
   8a458:	2023883a 	mov	r17,r4
   8a45c:	80000226 	beq	r16,zero,8a468 <fputwc+0x2c>
   8a460:	80800e17 	ldw	r2,56(r16)
   8a464:	10001026 	beq	r2,zero,8a4a8 <fputwc+0x6c>
   8a468:	2880030b 	ldhu	r2,12(r5)
   8a46c:	10c8000c 	andi	r3,r2,8192
   8a470:	1800051e 	bne	r3,zero,8a488 <fputwc+0x4c>
   8a474:	28c01917 	ldw	r3,100(r5)
   8a478:	10880014 	ori	r2,r2,8192
   8a47c:	2880030d 	sth	r2,12(r5)
   8a480:	18880014 	ori	r2,r3,8192
   8a484:	28801915 	stw	r2,100(r5)
   8a488:	280d883a 	mov	r6,r5
   8a48c:	8009883a 	mov	r4,r16
   8a490:	880b883a 	mov	r5,r17
   8a494:	dfc00317 	ldw	ra,12(sp)
   8a498:	dc400217 	ldw	r17,8(sp)
   8a49c:	dc000117 	ldw	r16,4(sp)
   8a4a0:	dec00404 	addi	sp,sp,16
   8a4a4:	008a2b41 	jmpi	8a2b4 <__fputwc>
   8a4a8:	8009883a 	mov	r4,r16
   8a4ac:	d9400015 	stw	r5,0(sp)
   8a4b0:	00857380 	call	85738 <__sinit>
   8a4b4:	d9400017 	ldw	r5,0(sp)
   8a4b8:	003feb06 	br	8a468 <__alt_data_end+0xfffbe978>

0008a4bc <_fstat_r>:
   8a4bc:	defffd04 	addi	sp,sp,-12
   8a4c0:	2805883a 	mov	r2,r5
   8a4c4:	dc000015 	stw	r16,0(sp)
   8a4c8:	04000274 	movhi	r16,9
   8a4cc:	dc400115 	stw	r17,4(sp)
   8a4d0:	84106204 	addi	r16,r16,16776
   8a4d4:	2023883a 	mov	r17,r4
   8a4d8:	300b883a 	mov	r5,r6
   8a4dc:	1009883a 	mov	r4,r2
   8a4e0:	dfc00215 	stw	ra,8(sp)
   8a4e4:	80000015 	stw	zero,0(r16)
   8a4e8:	008dc580 	call	8dc58 <fstat>
   8a4ec:	00ffffc4 	movi	r3,-1
   8a4f0:	10c00526 	beq	r2,r3,8a508 <_fstat_r+0x4c>
   8a4f4:	dfc00217 	ldw	ra,8(sp)
   8a4f8:	dc400117 	ldw	r17,4(sp)
   8a4fc:	dc000017 	ldw	r16,0(sp)
   8a500:	dec00304 	addi	sp,sp,12
   8a504:	f800283a 	ret
   8a508:	80c00017 	ldw	r3,0(r16)
   8a50c:	183ff926 	beq	r3,zero,8a4f4 <__alt_data_end+0xfffbea04>
   8a510:	88c00015 	stw	r3,0(r17)
   8a514:	003ff706 	br	8a4f4 <__alt_data_end+0xfffbea04>

0008a518 <_isatty_r>:
   8a518:	defffd04 	addi	sp,sp,-12
   8a51c:	dc000015 	stw	r16,0(sp)
   8a520:	04000274 	movhi	r16,9
   8a524:	dc400115 	stw	r17,4(sp)
   8a528:	84106204 	addi	r16,r16,16776
   8a52c:	2023883a 	mov	r17,r4
   8a530:	2809883a 	mov	r4,r5
   8a534:	dfc00215 	stw	ra,8(sp)
   8a538:	80000015 	stw	zero,0(r16)
   8a53c:	008e3580 	call	8e358 <isatty>
   8a540:	00ffffc4 	movi	r3,-1
   8a544:	10c00526 	beq	r2,r3,8a55c <_isatty_r+0x44>
   8a548:	dfc00217 	ldw	ra,8(sp)
   8a54c:	dc400117 	ldw	r17,4(sp)
   8a550:	dc000017 	ldw	r16,0(sp)
   8a554:	dec00304 	addi	sp,sp,12
   8a558:	f800283a 	ret
   8a55c:	80c00017 	ldw	r3,0(r16)
   8a560:	183ff926 	beq	r3,zero,8a548 <__alt_data_end+0xfffbea58>
   8a564:	88c00015 	stw	r3,0(r17)
   8a568:	003ff706 	br	8a548 <__alt_data_end+0xfffbea58>

0008a56c <_lseek_r>:
   8a56c:	defffd04 	addi	sp,sp,-12
   8a570:	2805883a 	mov	r2,r5
   8a574:	dc000015 	stw	r16,0(sp)
   8a578:	04000274 	movhi	r16,9
   8a57c:	dc400115 	stw	r17,4(sp)
   8a580:	300b883a 	mov	r5,r6
   8a584:	84106204 	addi	r16,r16,16776
   8a588:	2023883a 	mov	r17,r4
   8a58c:	380d883a 	mov	r6,r7
   8a590:	1009883a 	mov	r4,r2
   8a594:	dfc00215 	stw	ra,8(sp)
   8a598:	80000015 	stw	zero,0(r16)
   8a59c:	008e5240 	call	8e524 <lseek>
   8a5a0:	00ffffc4 	movi	r3,-1
   8a5a4:	10c00526 	beq	r2,r3,8a5bc <_lseek_r+0x50>
   8a5a8:	dfc00217 	ldw	ra,8(sp)
   8a5ac:	dc400117 	ldw	r17,4(sp)
   8a5b0:	dc000017 	ldw	r16,0(sp)
   8a5b4:	dec00304 	addi	sp,sp,12
   8a5b8:	f800283a 	ret
   8a5bc:	80c00017 	ldw	r3,0(r16)
   8a5c0:	183ff926 	beq	r3,zero,8a5a8 <__alt_data_end+0xfffbeab8>
   8a5c4:	88c00015 	stw	r3,0(r17)
   8a5c8:	003ff706 	br	8a5a8 <__alt_data_end+0xfffbeab8>

0008a5cc <_read_r>:
   8a5cc:	defffd04 	addi	sp,sp,-12
   8a5d0:	2805883a 	mov	r2,r5
   8a5d4:	dc000015 	stw	r16,0(sp)
   8a5d8:	04000274 	movhi	r16,9
   8a5dc:	dc400115 	stw	r17,4(sp)
   8a5e0:	300b883a 	mov	r5,r6
   8a5e4:	84106204 	addi	r16,r16,16776
   8a5e8:	2023883a 	mov	r17,r4
   8a5ec:	380d883a 	mov	r6,r7
   8a5f0:	1009883a 	mov	r4,r2
   8a5f4:	dfc00215 	stw	ra,8(sp)
   8a5f8:	80000015 	stw	zero,0(r16)
   8a5fc:	008e6f80 	call	8e6f8 <read>
   8a600:	00ffffc4 	movi	r3,-1
   8a604:	10c00526 	beq	r2,r3,8a61c <_read_r+0x50>
   8a608:	dfc00217 	ldw	ra,8(sp)
   8a60c:	dc400117 	ldw	r17,4(sp)
   8a610:	dc000017 	ldw	r16,0(sp)
   8a614:	dec00304 	addi	sp,sp,12
   8a618:	f800283a 	ret
   8a61c:	80c00017 	ldw	r3,0(r16)
   8a620:	183ff926 	beq	r3,zero,8a608 <__alt_data_end+0xfffbeb18>
   8a624:	88c00015 	stw	r3,0(r17)
   8a628:	003ff706 	br	8a608 <__alt_data_end+0xfffbeb18>

0008a62c <__swbuf_r>:
   8a62c:	defffb04 	addi	sp,sp,-20
   8a630:	dcc00315 	stw	r19,12(sp)
   8a634:	dc800215 	stw	r18,8(sp)
   8a638:	dc000015 	stw	r16,0(sp)
   8a63c:	dfc00415 	stw	ra,16(sp)
   8a640:	dc400115 	stw	r17,4(sp)
   8a644:	2025883a 	mov	r18,r4
   8a648:	2827883a 	mov	r19,r5
   8a64c:	3021883a 	mov	r16,r6
   8a650:	20000226 	beq	r4,zero,8a65c <__swbuf_r+0x30>
   8a654:	20800e17 	ldw	r2,56(r4)
   8a658:	10004226 	beq	r2,zero,8a764 <__swbuf_r+0x138>
   8a65c:	80800617 	ldw	r2,24(r16)
   8a660:	8100030b 	ldhu	r4,12(r16)
   8a664:	80800215 	stw	r2,8(r16)
   8a668:	2080020c 	andi	r2,r4,8
   8a66c:	10003626 	beq	r2,zero,8a748 <__swbuf_r+0x11c>
   8a670:	80c00417 	ldw	r3,16(r16)
   8a674:	18003426 	beq	r3,zero,8a748 <__swbuf_r+0x11c>
   8a678:	2088000c 	andi	r2,r4,8192
   8a67c:	9c403fcc 	andi	r17,r19,255
   8a680:	10001a26 	beq	r2,zero,8a6ec <__swbuf_r+0xc0>
   8a684:	80800017 	ldw	r2,0(r16)
   8a688:	81000517 	ldw	r4,20(r16)
   8a68c:	10c7c83a 	sub	r3,r2,r3
   8a690:	1900200e 	bge	r3,r4,8a714 <__swbuf_r+0xe8>
   8a694:	18c00044 	addi	r3,r3,1
   8a698:	81000217 	ldw	r4,8(r16)
   8a69c:	11400044 	addi	r5,r2,1
   8a6a0:	81400015 	stw	r5,0(r16)
   8a6a4:	213fffc4 	addi	r4,r4,-1
   8a6a8:	81000215 	stw	r4,8(r16)
   8a6ac:	14c00005 	stb	r19,0(r2)
   8a6b0:	80800517 	ldw	r2,20(r16)
   8a6b4:	10c01e26 	beq	r2,r3,8a730 <__swbuf_r+0x104>
   8a6b8:	8080030b 	ldhu	r2,12(r16)
   8a6bc:	1080004c 	andi	r2,r2,1
   8a6c0:	10000226 	beq	r2,zero,8a6cc <__swbuf_r+0xa0>
   8a6c4:	00800284 	movi	r2,10
   8a6c8:	88801926 	beq	r17,r2,8a730 <__swbuf_r+0x104>
   8a6cc:	8805883a 	mov	r2,r17
   8a6d0:	dfc00417 	ldw	ra,16(sp)
   8a6d4:	dcc00317 	ldw	r19,12(sp)
   8a6d8:	dc800217 	ldw	r18,8(sp)
   8a6dc:	dc400117 	ldw	r17,4(sp)
   8a6e0:	dc000017 	ldw	r16,0(sp)
   8a6e4:	dec00504 	addi	sp,sp,20
   8a6e8:	f800283a 	ret
   8a6ec:	81401917 	ldw	r5,100(r16)
   8a6f0:	00b7ffc4 	movi	r2,-8193
   8a6f4:	21080014 	ori	r4,r4,8192
   8a6f8:	2884703a 	and	r2,r5,r2
   8a6fc:	80801915 	stw	r2,100(r16)
   8a700:	80800017 	ldw	r2,0(r16)
   8a704:	8100030d 	sth	r4,12(r16)
   8a708:	81000517 	ldw	r4,20(r16)
   8a70c:	10c7c83a 	sub	r3,r2,r3
   8a710:	193fe016 	blt	r3,r4,8a694 <__alt_data_end+0xfffbeba4>
   8a714:	800b883a 	mov	r5,r16
   8a718:	9009883a 	mov	r4,r18
   8a71c:	008535c0 	call	8535c <_fflush_r>
   8a720:	1000071e 	bne	r2,zero,8a740 <__swbuf_r+0x114>
   8a724:	80800017 	ldw	r2,0(r16)
   8a728:	00c00044 	movi	r3,1
   8a72c:	003fda06 	br	8a698 <__alt_data_end+0xfffbeba8>
   8a730:	800b883a 	mov	r5,r16
   8a734:	9009883a 	mov	r4,r18
   8a738:	008535c0 	call	8535c <_fflush_r>
   8a73c:	103fe326 	beq	r2,zero,8a6cc <__alt_data_end+0xfffbebdc>
   8a740:	00bfffc4 	movi	r2,-1
   8a744:	003fe206 	br	8a6d0 <__alt_data_end+0xfffbebe0>
   8a748:	800b883a 	mov	r5,r16
   8a74c:	9009883a 	mov	r4,r18
   8a750:	00837640 	call	83764 <__swsetup_r>
   8a754:	103ffa1e 	bne	r2,zero,8a740 <__alt_data_end+0xfffbec50>
   8a758:	8100030b 	ldhu	r4,12(r16)
   8a75c:	80c00417 	ldw	r3,16(r16)
   8a760:	003fc506 	br	8a678 <__alt_data_end+0xfffbeb88>
   8a764:	00857380 	call	85738 <__sinit>
   8a768:	003fbc06 	br	8a65c <__alt_data_end+0xfffbeb6c>

0008a76c <__swbuf>:
   8a76c:	00800274 	movhi	r2,9
   8a770:	10896b04 	addi	r2,r2,9644
   8a774:	280d883a 	mov	r6,r5
   8a778:	200b883a 	mov	r5,r4
   8a77c:	11000017 	ldw	r4,0(r2)
   8a780:	008a62c1 	jmpi	8a62c <__swbuf_r>

0008a784 <_wcrtomb_r>:
   8a784:	defff604 	addi	sp,sp,-40
   8a788:	00800274 	movhi	r2,9
   8a78c:	dc800815 	stw	r18,32(sp)
   8a790:	dc400715 	stw	r17,28(sp)
   8a794:	dc000615 	stw	r16,24(sp)
   8a798:	10896f04 	addi	r2,r2,9660
   8a79c:	dfc00915 	stw	ra,36(sp)
   8a7a0:	2021883a 	mov	r16,r4
   8a7a4:	3823883a 	mov	r17,r7
   8a7a8:	14800017 	ldw	r18,0(r2)
   8a7ac:	28001426 	beq	r5,zero,8a800 <_wcrtomb_r+0x7c>
   8a7b0:	d9400415 	stw	r5,16(sp)
   8a7b4:	d9800515 	stw	r6,20(sp)
   8a7b8:	00862d80 	call	862d8 <__locale_charset>
   8a7bc:	d9800517 	ldw	r6,20(sp)
   8a7c0:	d9400417 	ldw	r5,16(sp)
   8a7c4:	100f883a 	mov	r7,r2
   8a7c8:	dc400015 	stw	r17,0(sp)
   8a7cc:	8009883a 	mov	r4,r16
   8a7d0:	903ee83a 	callr	r18
   8a7d4:	00ffffc4 	movi	r3,-1
   8a7d8:	10c0031e 	bne	r2,r3,8a7e8 <_wcrtomb_r+0x64>
   8a7dc:	88000015 	stw	zero,0(r17)
   8a7e0:	00c02284 	movi	r3,138
   8a7e4:	80c00015 	stw	r3,0(r16)
   8a7e8:	dfc00917 	ldw	ra,36(sp)
   8a7ec:	dc800817 	ldw	r18,32(sp)
   8a7f0:	dc400717 	ldw	r17,28(sp)
   8a7f4:	dc000617 	ldw	r16,24(sp)
   8a7f8:	dec00a04 	addi	sp,sp,40
   8a7fc:	f800283a 	ret
   8a800:	00862d80 	call	862d8 <__locale_charset>
   8a804:	100f883a 	mov	r7,r2
   8a808:	dc400015 	stw	r17,0(sp)
   8a80c:	000d883a 	mov	r6,zero
   8a810:	d9400104 	addi	r5,sp,4
   8a814:	8009883a 	mov	r4,r16
   8a818:	903ee83a 	callr	r18
   8a81c:	003fed06 	br	8a7d4 <__alt_data_end+0xfffbece4>

0008a820 <wcrtomb>:
   8a820:	defff604 	addi	sp,sp,-40
   8a824:	00800274 	movhi	r2,9
   8a828:	dc800615 	stw	r18,24(sp)
   8a82c:	dc400515 	stw	r17,20(sp)
   8a830:	10896b04 	addi	r2,r2,9644
   8a834:	dfc00915 	stw	ra,36(sp)
   8a838:	dd000815 	stw	r20,32(sp)
   8a83c:	dcc00715 	stw	r19,28(sp)
   8a840:	dc000415 	stw	r16,16(sp)
   8a844:	3025883a 	mov	r18,r6
   8a848:	14400017 	ldw	r17,0(r2)
   8a84c:	20001926 	beq	r4,zero,8a8b4 <wcrtomb+0x94>
   8a850:	00800274 	movhi	r2,9
   8a854:	10896f04 	addi	r2,r2,9660
   8a858:	15000017 	ldw	r20,0(r2)
   8a85c:	2021883a 	mov	r16,r4
   8a860:	2827883a 	mov	r19,r5
   8a864:	00862d80 	call	862d8 <__locale_charset>
   8a868:	100f883a 	mov	r7,r2
   8a86c:	dc800015 	stw	r18,0(sp)
   8a870:	980d883a 	mov	r6,r19
   8a874:	800b883a 	mov	r5,r16
   8a878:	8809883a 	mov	r4,r17
   8a87c:	a03ee83a 	callr	r20
   8a880:	00ffffc4 	movi	r3,-1
   8a884:	10c0031e 	bne	r2,r3,8a894 <wcrtomb+0x74>
   8a888:	90000015 	stw	zero,0(r18)
   8a88c:	00c02284 	movi	r3,138
   8a890:	88c00015 	stw	r3,0(r17)
   8a894:	dfc00917 	ldw	ra,36(sp)
   8a898:	dd000817 	ldw	r20,32(sp)
   8a89c:	dcc00717 	ldw	r19,28(sp)
   8a8a0:	dc800617 	ldw	r18,24(sp)
   8a8a4:	dc400517 	ldw	r17,20(sp)
   8a8a8:	dc000417 	ldw	r16,16(sp)
   8a8ac:	dec00a04 	addi	sp,sp,40
   8a8b0:	f800283a 	ret
   8a8b4:	00800274 	movhi	r2,9
   8a8b8:	10896f04 	addi	r2,r2,9660
   8a8bc:	14000017 	ldw	r16,0(r2)
   8a8c0:	00862d80 	call	862d8 <__locale_charset>
   8a8c4:	100f883a 	mov	r7,r2
   8a8c8:	dc800015 	stw	r18,0(sp)
   8a8cc:	000d883a 	mov	r6,zero
   8a8d0:	d9400104 	addi	r5,sp,4
   8a8d4:	8809883a 	mov	r4,r17
   8a8d8:	803ee83a 	callr	r16
   8a8dc:	003fe806 	br	8a880 <__alt_data_end+0xfffbed90>

0008a8e0 <__ascii_wctomb>:
   8a8e0:	28000526 	beq	r5,zero,8a8f8 <__ascii_wctomb+0x18>
   8a8e4:	00803fc4 	movi	r2,255
   8a8e8:	11800536 	bltu	r2,r6,8a900 <__ascii_wctomb+0x20>
   8a8ec:	29800005 	stb	r6,0(r5)
   8a8f0:	00800044 	movi	r2,1
   8a8f4:	f800283a 	ret
   8a8f8:	0005883a 	mov	r2,zero
   8a8fc:	f800283a 	ret
   8a900:	00802284 	movi	r2,138
   8a904:	20800015 	stw	r2,0(r4)
   8a908:	00bfffc4 	movi	r2,-1
   8a90c:	f800283a 	ret

0008a910 <_wctomb_r>:
   8a910:	00800274 	movhi	r2,9
   8a914:	defff904 	addi	sp,sp,-28
   8a918:	10896f04 	addi	r2,r2,9660
   8a91c:	dfc00615 	stw	ra,24(sp)
   8a920:	dc400515 	stw	r17,20(sp)
   8a924:	dc000415 	stw	r16,16(sp)
   8a928:	3823883a 	mov	r17,r7
   8a92c:	14000017 	ldw	r16,0(r2)
   8a930:	d9000115 	stw	r4,4(sp)
   8a934:	d9400215 	stw	r5,8(sp)
   8a938:	d9800315 	stw	r6,12(sp)
   8a93c:	00862d80 	call	862d8 <__locale_charset>
   8a940:	d9800317 	ldw	r6,12(sp)
   8a944:	d9400217 	ldw	r5,8(sp)
   8a948:	d9000117 	ldw	r4,4(sp)
   8a94c:	100f883a 	mov	r7,r2
   8a950:	dc400015 	stw	r17,0(sp)
   8a954:	803ee83a 	callr	r16
   8a958:	dfc00617 	ldw	ra,24(sp)
   8a95c:	dc400517 	ldw	r17,20(sp)
   8a960:	dc000417 	ldw	r16,16(sp)
   8a964:	dec00704 	addi	sp,sp,28
   8a968:	f800283a 	ret

0008a96c <__muldi3>:
   8a96c:	223fffcc 	andi	r8,r4,65535
   8a970:	2006d43a 	srli	r3,r4,16
   8a974:	32bfffcc 	andi	r10,r6,65535
   8a978:	3012d43a 	srli	r9,r6,16
   8a97c:	4297383a 	mul	r11,r8,r10
   8a980:	1a95383a 	mul	r10,r3,r10
   8a984:	4251383a 	mul	r8,r8,r9
   8a988:	5804d43a 	srli	r2,r11,16
   8a98c:	4291883a 	add	r8,r8,r10
   8a990:	1205883a 	add	r2,r2,r8
   8a994:	1a51383a 	mul	r8,r3,r9
   8a998:	1280022e 	bgeu	r2,r10,8a9a4 <__muldi3+0x38>
   8a99c:	00c00074 	movhi	r3,1
   8a9a0:	40d1883a 	add	r8,r8,r3
   8a9a4:	1006d43a 	srli	r3,r2,16
   8a9a8:	21cf383a 	mul	r7,r4,r7
   8a9ac:	314b383a 	mul	r5,r6,r5
   8a9b0:	1004943a 	slli	r2,r2,16
   8a9b4:	1a11883a 	add	r8,r3,r8
   8a9b8:	5affffcc 	andi	r11,r11,65535
   8a9bc:	3947883a 	add	r3,r7,r5
   8a9c0:	12c5883a 	add	r2,r2,r11
   8a9c4:	1a07883a 	add	r3,r3,r8
   8a9c8:	f800283a 	ret

0008a9cc <__udivdi3>:
   8a9cc:	defff504 	addi	sp,sp,-44
   8a9d0:	dcc00415 	stw	r19,16(sp)
   8a9d4:	dc000115 	stw	r16,4(sp)
   8a9d8:	dfc00a15 	stw	ra,40(sp)
   8a9dc:	df000915 	stw	fp,36(sp)
   8a9e0:	ddc00815 	stw	r23,32(sp)
   8a9e4:	dd800715 	stw	r22,28(sp)
   8a9e8:	dd400615 	stw	r21,24(sp)
   8a9ec:	dd000515 	stw	r20,20(sp)
   8a9f0:	dc800315 	stw	r18,12(sp)
   8a9f4:	dc400215 	stw	r17,8(sp)
   8a9f8:	2027883a 	mov	r19,r4
   8a9fc:	2821883a 	mov	r16,r5
   8aa00:	3800411e 	bne	r7,zero,8ab08 <__udivdi3+0x13c>
   8aa04:	3023883a 	mov	r17,r6
   8aa08:	2025883a 	mov	r18,r4
   8aa0c:	2980522e 	bgeu	r5,r6,8ab58 <__udivdi3+0x18c>
   8aa10:	00bfffd4 	movui	r2,65535
   8aa14:	282d883a 	mov	r22,r5
   8aa18:	1180a836 	bltu	r2,r6,8acbc <__udivdi3+0x2f0>
   8aa1c:	00803fc4 	movi	r2,255
   8aa20:	1185803a 	cmpltu	r2,r2,r6
   8aa24:	100490fa 	slli	r2,r2,3
   8aa28:	3086d83a 	srl	r3,r6,r2
   8aa2c:	01000274 	movhi	r4,9
   8aa30:	21024704 	addi	r4,r4,2332
   8aa34:	20c7883a 	add	r3,r4,r3
   8aa38:	18c00003 	ldbu	r3,0(r3)
   8aa3c:	1885883a 	add	r2,r3,r2
   8aa40:	00c00804 	movi	r3,32
   8aa44:	1887c83a 	sub	r3,r3,r2
   8aa48:	18000526 	beq	r3,zero,8aa60 <__udivdi3+0x94>
   8aa4c:	80e0983a 	sll	r16,r16,r3
   8aa50:	9884d83a 	srl	r2,r19,r2
   8aa54:	30e2983a 	sll	r17,r6,r3
   8aa58:	98e4983a 	sll	r18,r19,r3
   8aa5c:	142cb03a 	or	r22,r2,r16
   8aa60:	882ad43a 	srli	r21,r17,16
   8aa64:	b009883a 	mov	r4,r22
   8aa68:	8d3fffcc 	andi	r20,r17,65535
   8aa6c:	a80b883a 	mov	r5,r21
   8aa70:	00811980 	call	81198 <__umodsi3>
   8aa74:	b009883a 	mov	r4,r22
   8aa78:	a80b883a 	mov	r5,r21
   8aa7c:	1027883a 	mov	r19,r2
   8aa80:	00811340 	call	81134 <__udivsi3>
   8aa84:	102d883a 	mov	r22,r2
   8aa88:	9826943a 	slli	r19,r19,16
   8aa8c:	9004d43a 	srli	r2,r18,16
   8aa90:	a5a1383a 	mul	r16,r20,r22
   8aa94:	14c4b03a 	or	r2,r2,r19
   8aa98:	1400052e 	bgeu	r2,r16,8aab0 <__udivdi3+0xe4>
   8aa9c:	1445883a 	add	r2,r2,r17
   8aaa0:	b0ffffc4 	addi	r3,r22,-1
   8aaa4:	14400136 	bltu	r2,r17,8aaac <__udivdi3+0xe0>
   8aaa8:	14012336 	bltu	r2,r16,8af38 <__udivdi3+0x56c>
   8aaac:	182d883a 	mov	r22,r3
   8aab0:	1421c83a 	sub	r16,r2,r16
   8aab4:	a80b883a 	mov	r5,r21
   8aab8:	8009883a 	mov	r4,r16
   8aabc:	00811980 	call	81198 <__umodsi3>
   8aac0:	1027883a 	mov	r19,r2
   8aac4:	a80b883a 	mov	r5,r21
   8aac8:	8009883a 	mov	r4,r16
   8aacc:	00811340 	call	81134 <__udivsi3>
   8aad0:	9826943a 	slli	r19,r19,16
   8aad4:	a0a9383a 	mul	r20,r20,r2
   8aad8:	94bfffcc 	andi	r18,r18,65535
   8aadc:	94e4b03a 	or	r18,r18,r19
   8aae0:	9500052e 	bgeu	r18,r20,8aaf8 <__udivdi3+0x12c>
   8aae4:	8ca5883a 	add	r18,r17,r18
   8aae8:	10ffffc4 	addi	r3,r2,-1
   8aaec:	9440f136 	bltu	r18,r17,8aeb4 <__udivdi3+0x4e8>
   8aaf0:	9500f02e 	bgeu	r18,r20,8aeb4 <__udivdi3+0x4e8>
   8aaf4:	10bfff84 	addi	r2,r2,-2
   8aaf8:	b00c943a 	slli	r6,r22,16
   8aafc:	0007883a 	mov	r3,zero
   8ab00:	3084b03a 	or	r2,r6,r2
   8ab04:	00005906 	br	8ac6c <__udivdi3+0x2a0>
   8ab08:	29c05636 	bltu	r5,r7,8ac64 <__udivdi3+0x298>
   8ab0c:	00bfffd4 	movui	r2,65535
   8ab10:	11c0622e 	bgeu	r2,r7,8ac9c <__udivdi3+0x2d0>
   8ab14:	00804034 	movhi	r2,256
   8ab18:	10bfffc4 	addi	r2,r2,-1
   8ab1c:	11c0ee36 	bltu	r2,r7,8aed8 <__udivdi3+0x50c>
   8ab20:	00800404 	movi	r2,16
   8ab24:	3886d83a 	srl	r3,r7,r2
   8ab28:	01000274 	movhi	r4,9
   8ab2c:	21024704 	addi	r4,r4,2332
   8ab30:	20c7883a 	add	r3,r4,r3
   8ab34:	18c00003 	ldbu	r3,0(r3)
   8ab38:	05400804 	movi	r21,32
   8ab3c:	1885883a 	add	r2,r3,r2
   8ab40:	a8abc83a 	sub	r21,r21,r2
   8ab44:	a800621e 	bne	r21,zero,8acd0 <__udivdi3+0x304>
   8ab48:	3c00e936 	bltu	r7,r16,8aef0 <__udivdi3+0x524>
   8ab4c:	9985403a 	cmpgeu	r2,r19,r6
   8ab50:	0007883a 	mov	r3,zero
   8ab54:	00004506 	br	8ac6c <__udivdi3+0x2a0>
   8ab58:	3000041e 	bne	r6,zero,8ab6c <__udivdi3+0x1a0>
   8ab5c:	000b883a 	mov	r5,zero
   8ab60:	01000044 	movi	r4,1
   8ab64:	00811340 	call	81134 <__udivsi3>
   8ab68:	1023883a 	mov	r17,r2
   8ab6c:	00bfffd4 	movui	r2,65535
   8ab70:	14404e2e 	bgeu	r2,r17,8acac <__udivdi3+0x2e0>
   8ab74:	00804034 	movhi	r2,256
   8ab78:	10bfffc4 	addi	r2,r2,-1
   8ab7c:	1440d836 	bltu	r2,r17,8aee0 <__udivdi3+0x514>
   8ab80:	00800404 	movi	r2,16
   8ab84:	8886d83a 	srl	r3,r17,r2
   8ab88:	01000274 	movhi	r4,9
   8ab8c:	21024704 	addi	r4,r4,2332
   8ab90:	20c7883a 	add	r3,r4,r3
   8ab94:	18c00003 	ldbu	r3,0(r3)
   8ab98:	1885883a 	add	r2,r3,r2
   8ab9c:	00c00804 	movi	r3,32
   8aba0:	1887c83a 	sub	r3,r3,r2
   8aba4:	18008f1e 	bne	r3,zero,8ade4 <__udivdi3+0x418>
   8aba8:	882ad43a 	srli	r21,r17,16
   8abac:	8461c83a 	sub	r16,r16,r17
   8abb0:	8d3fffcc 	andi	r20,r17,65535
   8abb4:	00c00044 	movi	r3,1
   8abb8:	8009883a 	mov	r4,r16
   8abbc:	a80b883a 	mov	r5,r21
   8abc0:	d8c00015 	stw	r3,0(sp)
   8abc4:	00811980 	call	81198 <__umodsi3>
   8abc8:	8009883a 	mov	r4,r16
   8abcc:	a80b883a 	mov	r5,r21
   8abd0:	1027883a 	mov	r19,r2
   8abd4:	00811340 	call	81134 <__udivsi3>
   8abd8:	9826943a 	slli	r19,r19,16
   8abdc:	9008d43a 	srli	r4,r18,16
   8abe0:	1521383a 	mul	r16,r2,r20
   8abe4:	102d883a 	mov	r22,r2
   8abe8:	24c8b03a 	or	r4,r4,r19
   8abec:	d8c00017 	ldw	r3,0(sp)
   8abf0:	2400052e 	bgeu	r4,r16,8ac08 <__udivdi3+0x23c>
   8abf4:	2449883a 	add	r4,r4,r17
   8abf8:	b0bfffc4 	addi	r2,r22,-1
   8abfc:	24400136 	bltu	r4,r17,8ac04 <__udivdi3+0x238>
   8ac00:	2400ca36 	bltu	r4,r16,8af2c <__udivdi3+0x560>
   8ac04:	102d883a 	mov	r22,r2
   8ac08:	2421c83a 	sub	r16,r4,r16
   8ac0c:	a80b883a 	mov	r5,r21
   8ac10:	8009883a 	mov	r4,r16
   8ac14:	d8c00015 	stw	r3,0(sp)
   8ac18:	00811980 	call	81198 <__umodsi3>
   8ac1c:	1027883a 	mov	r19,r2
   8ac20:	a80b883a 	mov	r5,r21
   8ac24:	8009883a 	mov	r4,r16
   8ac28:	00811340 	call	81134 <__udivsi3>
   8ac2c:	9826943a 	slli	r19,r19,16
   8ac30:	1529383a 	mul	r20,r2,r20
   8ac34:	94bfffcc 	andi	r18,r18,65535
   8ac38:	94e4b03a 	or	r18,r18,r19
   8ac3c:	d8c00017 	ldw	r3,0(sp)
   8ac40:	9500052e 	bgeu	r18,r20,8ac58 <__udivdi3+0x28c>
   8ac44:	8ca5883a 	add	r18,r17,r18
   8ac48:	113fffc4 	addi	r4,r2,-1
   8ac4c:	94409736 	bltu	r18,r17,8aeac <__udivdi3+0x4e0>
   8ac50:	9500962e 	bgeu	r18,r20,8aeac <__udivdi3+0x4e0>
   8ac54:	10bfff84 	addi	r2,r2,-2
   8ac58:	b00c943a 	slli	r6,r22,16
   8ac5c:	3084b03a 	or	r2,r6,r2
   8ac60:	00000206 	br	8ac6c <__udivdi3+0x2a0>
   8ac64:	0007883a 	mov	r3,zero
   8ac68:	0005883a 	mov	r2,zero
   8ac6c:	dfc00a17 	ldw	ra,40(sp)
   8ac70:	df000917 	ldw	fp,36(sp)
   8ac74:	ddc00817 	ldw	r23,32(sp)
   8ac78:	dd800717 	ldw	r22,28(sp)
   8ac7c:	dd400617 	ldw	r21,24(sp)
   8ac80:	dd000517 	ldw	r20,20(sp)
   8ac84:	dcc00417 	ldw	r19,16(sp)
   8ac88:	dc800317 	ldw	r18,12(sp)
   8ac8c:	dc400217 	ldw	r17,8(sp)
   8ac90:	dc000117 	ldw	r16,4(sp)
   8ac94:	dec00b04 	addi	sp,sp,44
   8ac98:	f800283a 	ret
   8ac9c:	00803fc4 	movi	r2,255
   8aca0:	11c5803a 	cmpltu	r2,r2,r7
   8aca4:	100490fa 	slli	r2,r2,3
   8aca8:	003f9e06 	br	8ab24 <__alt_data_end+0xfffbf034>
   8acac:	00803fc4 	movi	r2,255
   8acb0:	1445803a 	cmpltu	r2,r2,r17
   8acb4:	100490fa 	slli	r2,r2,3
   8acb8:	003fb206 	br	8ab84 <__alt_data_end+0xfffbf094>
   8acbc:	00804034 	movhi	r2,256
   8acc0:	10bfffc4 	addi	r2,r2,-1
   8acc4:	11808836 	bltu	r2,r6,8aee8 <__udivdi3+0x51c>
   8acc8:	00800404 	movi	r2,16
   8accc:	003f5606 	br	8aa28 <__alt_data_end+0xfffbef38>
   8acd0:	30aed83a 	srl	r23,r6,r2
   8acd4:	3d4e983a 	sll	r7,r7,r21
   8acd8:	80acd83a 	srl	r22,r16,r2
   8acdc:	9884d83a 	srl	r2,r19,r2
   8ace0:	3deeb03a 	or	r23,r7,r23
   8ace4:	b824d43a 	srli	r18,r23,16
   8ace8:	8560983a 	sll	r16,r16,r21
   8acec:	b009883a 	mov	r4,r22
   8acf0:	900b883a 	mov	r5,r18
   8acf4:	3568983a 	sll	r20,r6,r21
   8acf8:	1420b03a 	or	r16,r2,r16
   8acfc:	00811980 	call	81198 <__umodsi3>
   8ad00:	b009883a 	mov	r4,r22
   8ad04:	900b883a 	mov	r5,r18
   8ad08:	1023883a 	mov	r17,r2
   8ad0c:	00811340 	call	81134 <__udivsi3>
   8ad10:	8808943a 	slli	r4,r17,16
   8ad14:	bf3fffcc 	andi	fp,r23,65535
   8ad18:	8006d43a 	srli	r3,r16,16
   8ad1c:	e0a3383a 	mul	r17,fp,r2
   8ad20:	100d883a 	mov	r6,r2
   8ad24:	1906b03a 	or	r3,r3,r4
   8ad28:	1c40042e 	bgeu	r3,r17,8ad3c <__udivdi3+0x370>
   8ad2c:	1dc7883a 	add	r3,r3,r23
   8ad30:	10bfffc4 	addi	r2,r2,-1
   8ad34:	1dc0752e 	bgeu	r3,r23,8af0c <__udivdi3+0x540>
   8ad38:	100d883a 	mov	r6,r2
   8ad3c:	1c63c83a 	sub	r17,r3,r17
   8ad40:	900b883a 	mov	r5,r18
   8ad44:	8809883a 	mov	r4,r17
   8ad48:	d9800015 	stw	r6,0(sp)
   8ad4c:	00811980 	call	81198 <__umodsi3>
   8ad50:	102d883a 	mov	r22,r2
   8ad54:	8809883a 	mov	r4,r17
   8ad58:	900b883a 	mov	r5,r18
   8ad5c:	00811340 	call	81134 <__udivsi3>
   8ad60:	b02c943a 	slli	r22,r22,16
   8ad64:	e089383a 	mul	r4,fp,r2
   8ad68:	843fffcc 	andi	r16,r16,65535
   8ad6c:	85a0b03a 	or	r16,r16,r22
   8ad70:	d9800017 	ldw	r6,0(sp)
   8ad74:	8100042e 	bgeu	r16,r4,8ad88 <__udivdi3+0x3bc>
   8ad78:	85e1883a 	add	r16,r16,r23
   8ad7c:	10ffffc4 	addi	r3,r2,-1
   8ad80:	85c05e2e 	bgeu	r16,r23,8aefc <__udivdi3+0x530>
   8ad84:	1805883a 	mov	r2,r3
   8ad88:	300c943a 	slli	r6,r6,16
   8ad8c:	a17fffcc 	andi	r5,r20,65535
   8ad90:	a028d43a 	srli	r20,r20,16
   8ad94:	3084b03a 	or	r2,r6,r2
   8ad98:	10ffffcc 	andi	r3,r2,65535
   8ad9c:	100cd43a 	srli	r6,r2,16
   8ada0:	194f383a 	mul	r7,r3,r5
   8ada4:	1d07383a 	mul	r3,r3,r20
   8ada8:	314b383a 	mul	r5,r6,r5
   8adac:	3810d43a 	srli	r8,r7,16
   8adb0:	8121c83a 	sub	r16,r16,r4
   8adb4:	1947883a 	add	r3,r3,r5
   8adb8:	40c7883a 	add	r3,r8,r3
   8adbc:	350d383a 	mul	r6,r6,r20
   8adc0:	1940022e 	bgeu	r3,r5,8adcc <__udivdi3+0x400>
   8adc4:	01000074 	movhi	r4,1
   8adc8:	310d883a 	add	r6,r6,r4
   8adcc:	1828d43a 	srli	r20,r3,16
   8add0:	a18d883a 	add	r6,r20,r6
   8add4:	81803e36 	bltu	r16,r6,8aed0 <__udivdi3+0x504>
   8add8:	81803826 	beq	r16,r6,8aebc <__udivdi3+0x4f0>
   8addc:	0007883a 	mov	r3,zero
   8ade0:	003fa206 	br	8ac6c <__alt_data_end+0xfffbf17c>
   8ade4:	88e2983a 	sll	r17,r17,r3
   8ade8:	80a8d83a 	srl	r20,r16,r2
   8adec:	80e0983a 	sll	r16,r16,r3
   8adf0:	882ad43a 	srli	r21,r17,16
   8adf4:	9884d83a 	srl	r2,r19,r2
   8adf8:	a009883a 	mov	r4,r20
   8adfc:	a80b883a 	mov	r5,r21
   8ae00:	142eb03a 	or	r23,r2,r16
   8ae04:	98e4983a 	sll	r18,r19,r3
   8ae08:	00811980 	call	81198 <__umodsi3>
   8ae0c:	a009883a 	mov	r4,r20
   8ae10:	a80b883a 	mov	r5,r21
   8ae14:	1021883a 	mov	r16,r2
   8ae18:	00811340 	call	81134 <__udivsi3>
   8ae1c:	1039883a 	mov	fp,r2
   8ae20:	8d3fffcc 	andi	r20,r17,65535
   8ae24:	8020943a 	slli	r16,r16,16
   8ae28:	b804d43a 	srli	r2,r23,16
   8ae2c:	a72d383a 	mul	r22,r20,fp
   8ae30:	1404b03a 	or	r2,r2,r16
   8ae34:	1580062e 	bgeu	r2,r22,8ae50 <__udivdi3+0x484>
   8ae38:	1445883a 	add	r2,r2,r17
   8ae3c:	e0ffffc4 	addi	r3,fp,-1
   8ae40:	14403836 	bltu	r2,r17,8af24 <__udivdi3+0x558>
   8ae44:	1580372e 	bgeu	r2,r22,8af24 <__udivdi3+0x558>
   8ae48:	e73fff84 	addi	fp,fp,-2
   8ae4c:	1445883a 	add	r2,r2,r17
   8ae50:	15adc83a 	sub	r22,r2,r22
   8ae54:	a80b883a 	mov	r5,r21
   8ae58:	b009883a 	mov	r4,r22
   8ae5c:	00811980 	call	81198 <__umodsi3>
   8ae60:	1027883a 	mov	r19,r2
   8ae64:	b009883a 	mov	r4,r22
   8ae68:	a80b883a 	mov	r5,r21
   8ae6c:	00811340 	call	81134 <__udivsi3>
   8ae70:	9826943a 	slli	r19,r19,16
   8ae74:	a0a1383a 	mul	r16,r20,r2
   8ae78:	b93fffcc 	andi	r4,r23,65535
   8ae7c:	24c8b03a 	or	r4,r4,r19
   8ae80:	2400062e 	bgeu	r4,r16,8ae9c <__udivdi3+0x4d0>
   8ae84:	2449883a 	add	r4,r4,r17
   8ae88:	10ffffc4 	addi	r3,r2,-1
   8ae8c:	24402336 	bltu	r4,r17,8af1c <__udivdi3+0x550>
   8ae90:	2400222e 	bgeu	r4,r16,8af1c <__udivdi3+0x550>
   8ae94:	10bfff84 	addi	r2,r2,-2
   8ae98:	2449883a 	add	r4,r4,r17
   8ae9c:	e038943a 	slli	fp,fp,16
   8aea0:	2421c83a 	sub	r16,r4,r16
   8aea4:	e086b03a 	or	r3,fp,r2
   8aea8:	003f4306 	br	8abb8 <__alt_data_end+0xfffbf0c8>
   8aeac:	2005883a 	mov	r2,r4
   8aeb0:	003f6906 	br	8ac58 <__alt_data_end+0xfffbf168>
   8aeb4:	1805883a 	mov	r2,r3
   8aeb8:	003f0f06 	br	8aaf8 <__alt_data_end+0xfffbf008>
   8aebc:	1806943a 	slli	r3,r3,16
   8aec0:	9d66983a 	sll	r19,r19,r21
   8aec4:	39ffffcc 	andi	r7,r7,65535
   8aec8:	19c7883a 	add	r3,r3,r7
   8aecc:	98ffc32e 	bgeu	r19,r3,8addc <__alt_data_end+0xfffbf2ec>
   8aed0:	10bfffc4 	addi	r2,r2,-1
   8aed4:	003fc106 	br	8addc <__alt_data_end+0xfffbf2ec>
   8aed8:	00800604 	movi	r2,24
   8aedc:	003f1106 	br	8ab24 <__alt_data_end+0xfffbf034>
   8aee0:	00800604 	movi	r2,24
   8aee4:	003f2706 	br	8ab84 <__alt_data_end+0xfffbf094>
   8aee8:	00800604 	movi	r2,24
   8aeec:	003ece06 	br	8aa28 <__alt_data_end+0xfffbef38>
   8aef0:	0007883a 	mov	r3,zero
   8aef4:	00800044 	movi	r2,1
   8aef8:	003f5c06 	br	8ac6c <__alt_data_end+0xfffbf17c>
   8aefc:	813fa12e 	bgeu	r16,r4,8ad84 <__alt_data_end+0xfffbf294>
   8af00:	10bfff84 	addi	r2,r2,-2
   8af04:	85e1883a 	add	r16,r16,r23
   8af08:	003f9f06 	br	8ad88 <__alt_data_end+0xfffbf298>
   8af0c:	1c7f8a2e 	bgeu	r3,r17,8ad38 <__alt_data_end+0xfffbf248>
   8af10:	31bfff84 	addi	r6,r6,-2
   8af14:	1dc7883a 	add	r3,r3,r23
   8af18:	003f8806 	br	8ad3c <__alt_data_end+0xfffbf24c>
   8af1c:	1805883a 	mov	r2,r3
   8af20:	003fde06 	br	8ae9c <__alt_data_end+0xfffbf3ac>
   8af24:	1839883a 	mov	fp,r3
   8af28:	003fc906 	br	8ae50 <__alt_data_end+0xfffbf360>
   8af2c:	b5bfff84 	addi	r22,r22,-2
   8af30:	2449883a 	add	r4,r4,r17
   8af34:	003f3406 	br	8ac08 <__alt_data_end+0xfffbf118>
   8af38:	b5bfff84 	addi	r22,r22,-2
   8af3c:	1445883a 	add	r2,r2,r17
   8af40:	003edb06 	br	8aab0 <__alt_data_end+0xfffbefc0>

0008af44 <__umoddi3>:
   8af44:	defff404 	addi	sp,sp,-48
   8af48:	df000a15 	stw	fp,40(sp)
   8af4c:	dc400315 	stw	r17,12(sp)
   8af50:	dc000215 	stw	r16,8(sp)
   8af54:	dfc00b15 	stw	ra,44(sp)
   8af58:	ddc00915 	stw	r23,36(sp)
   8af5c:	dd800815 	stw	r22,32(sp)
   8af60:	dd400715 	stw	r21,28(sp)
   8af64:	dd000615 	stw	r20,24(sp)
   8af68:	dcc00515 	stw	r19,20(sp)
   8af6c:	dc800415 	stw	r18,16(sp)
   8af70:	2021883a 	mov	r16,r4
   8af74:	2823883a 	mov	r17,r5
   8af78:	2839883a 	mov	fp,r5
   8af7c:	38003c1e 	bne	r7,zero,8b070 <__umoddi3+0x12c>
   8af80:	3027883a 	mov	r19,r6
   8af84:	2029883a 	mov	r20,r4
   8af88:	2980512e 	bgeu	r5,r6,8b0d0 <__umoddi3+0x18c>
   8af8c:	00bfffd4 	movui	r2,65535
   8af90:	11809a36 	bltu	r2,r6,8b1fc <__umoddi3+0x2b8>
   8af94:	01003fc4 	movi	r4,255
   8af98:	2189803a 	cmpltu	r4,r4,r6
   8af9c:	200890fa 	slli	r4,r4,3
   8afa0:	3104d83a 	srl	r2,r6,r4
   8afa4:	00c00274 	movhi	r3,9
   8afa8:	18c24704 	addi	r3,r3,2332
   8afac:	1885883a 	add	r2,r3,r2
   8afb0:	10c00003 	ldbu	r3,0(r2)
   8afb4:	00800804 	movi	r2,32
   8afb8:	1909883a 	add	r4,r3,r4
   8afbc:	1125c83a 	sub	r18,r2,r4
   8afc0:	90000526 	beq	r18,zero,8afd8 <__umoddi3+0x94>
   8afc4:	8ca2983a 	sll	r17,r17,r18
   8afc8:	8108d83a 	srl	r4,r16,r4
   8afcc:	34a6983a 	sll	r19,r6,r18
   8afd0:	84a8983a 	sll	r20,r16,r18
   8afd4:	2478b03a 	or	fp,r4,r17
   8afd8:	982ed43a 	srli	r23,r19,16
   8afdc:	e009883a 	mov	r4,fp
   8afe0:	9dbfffcc 	andi	r22,r19,65535
   8afe4:	b80b883a 	mov	r5,r23
   8afe8:	00811980 	call	81198 <__umodsi3>
   8afec:	e009883a 	mov	r4,fp
   8aff0:	b80b883a 	mov	r5,r23
   8aff4:	102b883a 	mov	r21,r2
   8aff8:	00811340 	call	81134 <__udivsi3>
   8affc:	a806943a 	slli	r3,r21,16
   8b000:	a008d43a 	srli	r4,r20,16
   8b004:	b085383a 	mul	r2,r22,r2
   8b008:	20c8b03a 	or	r4,r4,r3
   8b00c:	2080032e 	bgeu	r4,r2,8b01c <__umoddi3+0xd8>
   8b010:	24c9883a 	add	r4,r4,r19
   8b014:	24c00136 	bltu	r4,r19,8b01c <__umoddi3+0xd8>
   8b018:	20811036 	bltu	r4,r2,8b45c <__umoddi3+0x518>
   8b01c:	20abc83a 	sub	r21,r4,r2
   8b020:	b80b883a 	mov	r5,r23
   8b024:	a809883a 	mov	r4,r21
   8b028:	00811980 	call	81198 <__umodsi3>
   8b02c:	1023883a 	mov	r17,r2
   8b030:	b80b883a 	mov	r5,r23
   8b034:	a809883a 	mov	r4,r21
   8b038:	00811340 	call	81134 <__udivsi3>
   8b03c:	8822943a 	slli	r17,r17,16
   8b040:	b085383a 	mul	r2,r22,r2
   8b044:	a0ffffcc 	andi	r3,r20,65535
   8b048:	1c46b03a 	or	r3,r3,r17
   8b04c:	1880042e 	bgeu	r3,r2,8b060 <__umoddi3+0x11c>
   8b050:	1cc7883a 	add	r3,r3,r19
   8b054:	1cc00236 	bltu	r3,r19,8b060 <__umoddi3+0x11c>
   8b058:	1880012e 	bgeu	r3,r2,8b060 <__umoddi3+0x11c>
   8b05c:	1cc7883a 	add	r3,r3,r19
   8b060:	1885c83a 	sub	r2,r3,r2
   8b064:	1484d83a 	srl	r2,r2,r18
   8b068:	0007883a 	mov	r3,zero
   8b06c:	00004f06 	br	8b1ac <__umoddi3+0x268>
   8b070:	29c04c36 	bltu	r5,r7,8b1a4 <__umoddi3+0x260>
   8b074:	00bfffd4 	movui	r2,65535
   8b078:	11c0582e 	bgeu	r2,r7,8b1dc <__umoddi3+0x298>
   8b07c:	00804034 	movhi	r2,256
   8b080:	10bfffc4 	addi	r2,r2,-1
   8b084:	11c0e736 	bltu	r2,r7,8b424 <__umoddi3+0x4e0>
   8b088:	01000404 	movi	r4,16
   8b08c:	3904d83a 	srl	r2,r7,r4
   8b090:	00c00274 	movhi	r3,9
   8b094:	18c24704 	addi	r3,r3,2332
   8b098:	1885883a 	add	r2,r3,r2
   8b09c:	14c00003 	ldbu	r19,0(r2)
   8b0a0:	00c00804 	movi	r3,32
   8b0a4:	9927883a 	add	r19,r19,r4
   8b0a8:	1ce9c83a 	sub	r20,r3,r19
   8b0ac:	a000581e 	bne	r20,zero,8b210 <__umoddi3+0x2cc>
   8b0b0:	3c400136 	bltu	r7,r17,8b0b8 <__umoddi3+0x174>
   8b0b4:	8180eb36 	bltu	r16,r6,8b464 <__umoddi3+0x520>
   8b0b8:	8185c83a 	sub	r2,r16,r6
   8b0bc:	89e3c83a 	sub	r17,r17,r7
   8b0c0:	8089803a 	cmpltu	r4,r16,r2
   8b0c4:	8939c83a 	sub	fp,r17,r4
   8b0c8:	e007883a 	mov	r3,fp
   8b0cc:	00003706 	br	8b1ac <__umoddi3+0x268>
   8b0d0:	3000041e 	bne	r6,zero,8b0e4 <__umoddi3+0x1a0>
   8b0d4:	000b883a 	mov	r5,zero
   8b0d8:	01000044 	movi	r4,1
   8b0dc:	00811340 	call	81134 <__udivsi3>
   8b0e0:	1027883a 	mov	r19,r2
   8b0e4:	00bfffd4 	movui	r2,65535
   8b0e8:	14c0402e 	bgeu	r2,r19,8b1ec <__umoddi3+0x2a8>
   8b0ec:	00804034 	movhi	r2,256
   8b0f0:	10bfffc4 	addi	r2,r2,-1
   8b0f4:	14c0cd36 	bltu	r2,r19,8b42c <__umoddi3+0x4e8>
   8b0f8:	00800404 	movi	r2,16
   8b0fc:	9886d83a 	srl	r3,r19,r2
   8b100:	01000274 	movhi	r4,9
   8b104:	21024704 	addi	r4,r4,2332
   8b108:	20c7883a 	add	r3,r4,r3
   8b10c:	18c00003 	ldbu	r3,0(r3)
   8b110:	1887883a 	add	r3,r3,r2
   8b114:	00800804 	movi	r2,32
   8b118:	10e5c83a 	sub	r18,r2,r3
   8b11c:	9000901e 	bne	r18,zero,8b360 <__umoddi3+0x41c>
   8b120:	982cd43a 	srli	r22,r19,16
   8b124:	8ce3c83a 	sub	r17,r17,r19
   8b128:	9d7fffcc 	andi	r21,r19,65535
   8b12c:	b00b883a 	mov	r5,r22
   8b130:	8809883a 	mov	r4,r17
   8b134:	00811980 	call	81198 <__umodsi3>
   8b138:	8809883a 	mov	r4,r17
   8b13c:	b00b883a 	mov	r5,r22
   8b140:	1021883a 	mov	r16,r2
   8b144:	00811340 	call	81134 <__udivsi3>
   8b148:	8006943a 	slli	r3,r16,16
   8b14c:	a008d43a 	srli	r4,r20,16
   8b150:	1545383a 	mul	r2,r2,r21
   8b154:	20c8b03a 	or	r4,r4,r3
   8b158:	2080042e 	bgeu	r4,r2,8b16c <__umoddi3+0x228>
   8b15c:	24c9883a 	add	r4,r4,r19
   8b160:	24c00236 	bltu	r4,r19,8b16c <__umoddi3+0x228>
   8b164:	2080012e 	bgeu	r4,r2,8b16c <__umoddi3+0x228>
   8b168:	24c9883a 	add	r4,r4,r19
   8b16c:	20a1c83a 	sub	r16,r4,r2
   8b170:	b00b883a 	mov	r5,r22
   8b174:	8009883a 	mov	r4,r16
   8b178:	00811980 	call	81198 <__umodsi3>
   8b17c:	1023883a 	mov	r17,r2
   8b180:	b00b883a 	mov	r5,r22
   8b184:	8009883a 	mov	r4,r16
   8b188:	00811340 	call	81134 <__udivsi3>
   8b18c:	8822943a 	slli	r17,r17,16
   8b190:	1545383a 	mul	r2,r2,r21
   8b194:	a53fffcc 	andi	r20,r20,65535
   8b198:	a446b03a 	or	r3,r20,r17
   8b19c:	18bfb02e 	bgeu	r3,r2,8b060 <__alt_data_end+0xfffbf570>
   8b1a0:	003fab06 	br	8b050 <__alt_data_end+0xfffbf560>
   8b1a4:	2005883a 	mov	r2,r4
   8b1a8:	2807883a 	mov	r3,r5
   8b1ac:	dfc00b17 	ldw	ra,44(sp)
   8b1b0:	df000a17 	ldw	fp,40(sp)
   8b1b4:	ddc00917 	ldw	r23,36(sp)
   8b1b8:	dd800817 	ldw	r22,32(sp)
   8b1bc:	dd400717 	ldw	r21,28(sp)
   8b1c0:	dd000617 	ldw	r20,24(sp)
   8b1c4:	dcc00517 	ldw	r19,20(sp)
   8b1c8:	dc800417 	ldw	r18,16(sp)
   8b1cc:	dc400317 	ldw	r17,12(sp)
   8b1d0:	dc000217 	ldw	r16,8(sp)
   8b1d4:	dec00c04 	addi	sp,sp,48
   8b1d8:	f800283a 	ret
   8b1dc:	04c03fc4 	movi	r19,255
   8b1e0:	99c9803a 	cmpltu	r4,r19,r7
   8b1e4:	200890fa 	slli	r4,r4,3
   8b1e8:	003fa806 	br	8b08c <__alt_data_end+0xfffbf59c>
   8b1ec:	00803fc4 	movi	r2,255
   8b1f0:	14c5803a 	cmpltu	r2,r2,r19
   8b1f4:	100490fa 	slli	r2,r2,3
   8b1f8:	003fc006 	br	8b0fc <__alt_data_end+0xfffbf60c>
   8b1fc:	00804034 	movhi	r2,256
   8b200:	10bfffc4 	addi	r2,r2,-1
   8b204:	11808b36 	bltu	r2,r6,8b434 <__umoddi3+0x4f0>
   8b208:	01000404 	movi	r4,16
   8b20c:	003f6406 	br	8afa0 <__alt_data_end+0xfffbf4b0>
   8b210:	34c4d83a 	srl	r2,r6,r19
   8b214:	3d0e983a 	sll	r7,r7,r20
   8b218:	8cf8d83a 	srl	fp,r17,r19
   8b21c:	8d10983a 	sll	r8,r17,r20
   8b220:	38aab03a 	or	r21,r7,r2
   8b224:	a82cd43a 	srli	r22,r21,16
   8b228:	84e2d83a 	srl	r17,r16,r19
   8b22c:	e009883a 	mov	r4,fp
   8b230:	b00b883a 	mov	r5,r22
   8b234:	8a22b03a 	or	r17,r17,r8
   8b238:	3524983a 	sll	r18,r6,r20
   8b23c:	00811980 	call	81198 <__umodsi3>
   8b240:	e009883a 	mov	r4,fp
   8b244:	b00b883a 	mov	r5,r22
   8b248:	102f883a 	mov	r23,r2
   8b24c:	00811340 	call	81134 <__udivsi3>
   8b250:	100d883a 	mov	r6,r2
   8b254:	b808943a 	slli	r4,r23,16
   8b258:	aa3fffcc 	andi	r8,r21,65535
   8b25c:	8804d43a 	srli	r2,r17,16
   8b260:	41af383a 	mul	r23,r8,r6
   8b264:	8520983a 	sll	r16,r16,r20
   8b268:	1104b03a 	or	r2,r2,r4
   8b26c:	15c0042e 	bgeu	r2,r23,8b280 <__umoddi3+0x33c>
   8b270:	1545883a 	add	r2,r2,r21
   8b274:	30ffffc4 	addi	r3,r6,-1
   8b278:	1540742e 	bgeu	r2,r21,8b44c <__umoddi3+0x508>
   8b27c:	180d883a 	mov	r6,r3
   8b280:	15efc83a 	sub	r23,r2,r23
   8b284:	b00b883a 	mov	r5,r22
   8b288:	b809883a 	mov	r4,r23
   8b28c:	d9800115 	stw	r6,4(sp)
   8b290:	da000015 	stw	r8,0(sp)
   8b294:	00811980 	call	81198 <__umodsi3>
   8b298:	b00b883a 	mov	r5,r22
   8b29c:	b809883a 	mov	r4,r23
   8b2a0:	1039883a 	mov	fp,r2
   8b2a4:	00811340 	call	81134 <__udivsi3>
   8b2a8:	da000017 	ldw	r8,0(sp)
   8b2ac:	e038943a 	slli	fp,fp,16
   8b2b0:	100b883a 	mov	r5,r2
   8b2b4:	4089383a 	mul	r4,r8,r2
   8b2b8:	8a3fffcc 	andi	r8,r17,65535
   8b2bc:	4710b03a 	or	r8,r8,fp
   8b2c0:	d9800117 	ldw	r6,4(sp)
   8b2c4:	4100042e 	bgeu	r8,r4,8b2d8 <__umoddi3+0x394>
   8b2c8:	4551883a 	add	r8,r8,r21
   8b2cc:	10bfffc4 	addi	r2,r2,-1
   8b2d0:	45405a2e 	bgeu	r8,r21,8b43c <__umoddi3+0x4f8>
   8b2d4:	100b883a 	mov	r5,r2
   8b2d8:	300c943a 	slli	r6,r6,16
   8b2dc:	91ffffcc 	andi	r7,r18,65535
   8b2e0:	9004d43a 	srli	r2,r18,16
   8b2e4:	314cb03a 	or	r6,r6,r5
   8b2e8:	317fffcc 	andi	r5,r6,65535
   8b2ec:	300cd43a 	srli	r6,r6,16
   8b2f0:	29d3383a 	mul	r9,r5,r7
   8b2f4:	288b383a 	mul	r5,r5,r2
   8b2f8:	31cf383a 	mul	r7,r6,r7
   8b2fc:	4806d43a 	srli	r3,r9,16
   8b300:	4111c83a 	sub	r8,r8,r4
   8b304:	29cb883a 	add	r5,r5,r7
   8b308:	194b883a 	add	r5,r3,r5
   8b30c:	3085383a 	mul	r2,r6,r2
   8b310:	29c0022e 	bgeu	r5,r7,8b31c <__umoddi3+0x3d8>
   8b314:	00c00074 	movhi	r3,1
   8b318:	10c5883a 	add	r2,r2,r3
   8b31c:	2808d43a 	srli	r4,r5,16
   8b320:	280a943a 	slli	r5,r5,16
   8b324:	4a7fffcc 	andi	r9,r9,65535
   8b328:	2085883a 	add	r2,r4,r2
   8b32c:	2a4b883a 	add	r5,r5,r9
   8b330:	40803636 	bltu	r8,r2,8b40c <__umoddi3+0x4c8>
   8b334:	40804d26 	beq	r8,r2,8b46c <__umoddi3+0x528>
   8b338:	4089c83a 	sub	r4,r8,r2
   8b33c:	280f883a 	mov	r7,r5
   8b340:	81cfc83a 	sub	r7,r16,r7
   8b344:	81c7803a 	cmpltu	r3,r16,r7
   8b348:	20c7c83a 	sub	r3,r4,r3
   8b34c:	1cc4983a 	sll	r2,r3,r19
   8b350:	3d0ed83a 	srl	r7,r7,r20
   8b354:	1d06d83a 	srl	r3,r3,r20
   8b358:	11c4b03a 	or	r2,r2,r7
   8b35c:	003f9306 	br	8b1ac <__alt_data_end+0xfffbf6bc>
   8b360:	9ca6983a 	sll	r19,r19,r18
   8b364:	88e8d83a 	srl	r20,r17,r3
   8b368:	80c4d83a 	srl	r2,r16,r3
   8b36c:	982cd43a 	srli	r22,r19,16
   8b370:	8ca2983a 	sll	r17,r17,r18
   8b374:	a009883a 	mov	r4,r20
   8b378:	b00b883a 	mov	r5,r22
   8b37c:	1478b03a 	or	fp,r2,r17
   8b380:	00811980 	call	81198 <__umodsi3>
   8b384:	a009883a 	mov	r4,r20
   8b388:	b00b883a 	mov	r5,r22
   8b38c:	1023883a 	mov	r17,r2
   8b390:	00811340 	call	81134 <__udivsi3>
   8b394:	9d7fffcc 	andi	r21,r19,65535
   8b398:	880a943a 	slli	r5,r17,16
   8b39c:	e008d43a 	srli	r4,fp,16
   8b3a0:	a885383a 	mul	r2,r21,r2
   8b3a4:	84a8983a 	sll	r20,r16,r18
   8b3a8:	2148b03a 	or	r4,r4,r5
   8b3ac:	2080042e 	bgeu	r4,r2,8b3c0 <__umoddi3+0x47c>
   8b3b0:	24c9883a 	add	r4,r4,r19
   8b3b4:	24c00236 	bltu	r4,r19,8b3c0 <__umoddi3+0x47c>
   8b3b8:	2080012e 	bgeu	r4,r2,8b3c0 <__umoddi3+0x47c>
   8b3bc:	24c9883a 	add	r4,r4,r19
   8b3c0:	20a3c83a 	sub	r17,r4,r2
   8b3c4:	b00b883a 	mov	r5,r22
   8b3c8:	8809883a 	mov	r4,r17
   8b3cc:	00811980 	call	81198 <__umodsi3>
   8b3d0:	102f883a 	mov	r23,r2
   8b3d4:	8809883a 	mov	r4,r17
   8b3d8:	b00b883a 	mov	r5,r22
   8b3dc:	00811340 	call	81134 <__udivsi3>
   8b3e0:	b82e943a 	slli	r23,r23,16
   8b3e4:	a885383a 	mul	r2,r21,r2
   8b3e8:	e13fffcc 	andi	r4,fp,65535
   8b3ec:	25c8b03a 	or	r4,r4,r23
   8b3f0:	2080042e 	bgeu	r4,r2,8b404 <__umoddi3+0x4c0>
   8b3f4:	24c9883a 	add	r4,r4,r19
   8b3f8:	24c00236 	bltu	r4,r19,8b404 <__umoddi3+0x4c0>
   8b3fc:	2080012e 	bgeu	r4,r2,8b404 <__umoddi3+0x4c0>
   8b400:	24c9883a 	add	r4,r4,r19
   8b404:	20a3c83a 	sub	r17,r4,r2
   8b408:	003f4806 	br	8b12c <__alt_data_end+0xfffbf63c>
   8b40c:	2c8fc83a 	sub	r7,r5,r18
   8b410:	1545c83a 	sub	r2,r2,r21
   8b414:	29cb803a 	cmpltu	r5,r5,r7
   8b418:	1145c83a 	sub	r2,r2,r5
   8b41c:	4089c83a 	sub	r4,r8,r2
   8b420:	003fc706 	br	8b340 <__alt_data_end+0xfffbf850>
   8b424:	01000604 	movi	r4,24
   8b428:	003f1806 	br	8b08c <__alt_data_end+0xfffbf59c>
   8b42c:	00800604 	movi	r2,24
   8b430:	003f3206 	br	8b0fc <__alt_data_end+0xfffbf60c>
   8b434:	01000604 	movi	r4,24
   8b438:	003ed906 	br	8afa0 <__alt_data_end+0xfffbf4b0>
   8b43c:	413fa52e 	bgeu	r8,r4,8b2d4 <__alt_data_end+0xfffbf7e4>
   8b440:	297fff84 	addi	r5,r5,-2
   8b444:	4551883a 	add	r8,r8,r21
   8b448:	003fa306 	br	8b2d8 <__alt_data_end+0xfffbf7e8>
   8b44c:	15ff8b2e 	bgeu	r2,r23,8b27c <__alt_data_end+0xfffbf78c>
   8b450:	31bfff84 	addi	r6,r6,-2
   8b454:	1545883a 	add	r2,r2,r21
   8b458:	003f8906 	br	8b280 <__alt_data_end+0xfffbf790>
   8b45c:	24c9883a 	add	r4,r4,r19
   8b460:	003eee06 	br	8b01c <__alt_data_end+0xfffbf52c>
   8b464:	8005883a 	mov	r2,r16
   8b468:	003f1706 	br	8b0c8 <__alt_data_end+0xfffbf5d8>
   8b46c:	817fe736 	bltu	r16,r5,8b40c <__alt_data_end+0xfffbf91c>
   8b470:	280f883a 	mov	r7,r5
   8b474:	0009883a 	mov	r4,zero
   8b478:	003fb106 	br	8b340 <__alt_data_end+0xfffbf850>

0008b47c <__adddf3>:
   8b47c:	02c00434 	movhi	r11,16
   8b480:	5affffc4 	addi	r11,r11,-1
   8b484:	2806d7fa 	srli	r3,r5,31
   8b488:	2ad4703a 	and	r10,r5,r11
   8b48c:	3ad2703a 	and	r9,r7,r11
   8b490:	3804d53a 	srli	r2,r7,20
   8b494:	3018d77a 	srli	r12,r6,29
   8b498:	280ad53a 	srli	r5,r5,20
   8b49c:	501490fa 	slli	r10,r10,3
   8b4a0:	2010d77a 	srli	r8,r4,29
   8b4a4:	481290fa 	slli	r9,r9,3
   8b4a8:	380ed7fa 	srli	r7,r7,31
   8b4ac:	defffb04 	addi	sp,sp,-20
   8b4b0:	dc800215 	stw	r18,8(sp)
   8b4b4:	dc400115 	stw	r17,4(sp)
   8b4b8:	dc000015 	stw	r16,0(sp)
   8b4bc:	dfc00415 	stw	ra,16(sp)
   8b4c0:	dcc00315 	stw	r19,12(sp)
   8b4c4:	1c803fcc 	andi	r18,r3,255
   8b4c8:	2c01ffcc 	andi	r16,r5,2047
   8b4cc:	5210b03a 	or	r8,r10,r8
   8b4d0:	202290fa 	slli	r17,r4,3
   8b4d4:	1081ffcc 	andi	r2,r2,2047
   8b4d8:	4b12b03a 	or	r9,r9,r12
   8b4dc:	300c90fa 	slli	r6,r6,3
   8b4e0:	91c07526 	beq	r18,r7,8b6b8 <__adddf3+0x23c>
   8b4e4:	8087c83a 	sub	r3,r16,r2
   8b4e8:	00c0ab0e 	bge	zero,r3,8b798 <__adddf3+0x31c>
   8b4ec:	10002a1e 	bne	r2,zero,8b598 <__adddf3+0x11c>
   8b4f0:	4984b03a 	or	r2,r9,r6
   8b4f4:	1000961e 	bne	r2,zero,8b750 <__adddf3+0x2d4>
   8b4f8:	888001cc 	andi	r2,r17,7
   8b4fc:	10000726 	beq	r2,zero,8b51c <__adddf3+0xa0>
   8b500:	888003cc 	andi	r2,r17,15
   8b504:	00c00104 	movi	r3,4
   8b508:	10c00426 	beq	r2,r3,8b51c <__adddf3+0xa0>
   8b50c:	88c7883a 	add	r3,r17,r3
   8b510:	1c63803a 	cmpltu	r17,r3,r17
   8b514:	4451883a 	add	r8,r8,r17
   8b518:	1823883a 	mov	r17,r3
   8b51c:	4080202c 	andhi	r2,r8,128
   8b520:	10005926 	beq	r2,zero,8b688 <__adddf3+0x20c>
   8b524:	84000044 	addi	r16,r16,1
   8b528:	0081ffc4 	movi	r2,2047
   8b52c:	8080ba26 	beq	r16,r2,8b818 <__adddf3+0x39c>
   8b530:	00bfe034 	movhi	r2,65408
   8b534:	10bfffc4 	addi	r2,r2,-1
   8b538:	4090703a 	and	r8,r8,r2
   8b53c:	4004977a 	slli	r2,r8,29
   8b540:	4010927a 	slli	r8,r8,9
   8b544:	8822d0fa 	srli	r17,r17,3
   8b548:	8401ffcc 	andi	r16,r16,2047
   8b54c:	4010d33a 	srli	r8,r8,12
   8b550:	9007883a 	mov	r3,r18
   8b554:	1444b03a 	or	r2,r2,r17
   8b558:	8401ffcc 	andi	r16,r16,2047
   8b55c:	8020953a 	slli	r16,r16,20
   8b560:	18c03fcc 	andi	r3,r3,255
   8b564:	01000434 	movhi	r4,16
   8b568:	213fffc4 	addi	r4,r4,-1
   8b56c:	180697fa 	slli	r3,r3,31
   8b570:	4110703a 	and	r8,r8,r4
   8b574:	4410b03a 	or	r8,r8,r16
   8b578:	40c6b03a 	or	r3,r8,r3
   8b57c:	dfc00417 	ldw	ra,16(sp)
   8b580:	dcc00317 	ldw	r19,12(sp)
   8b584:	dc800217 	ldw	r18,8(sp)
   8b588:	dc400117 	ldw	r17,4(sp)
   8b58c:	dc000017 	ldw	r16,0(sp)
   8b590:	dec00504 	addi	sp,sp,20
   8b594:	f800283a 	ret
   8b598:	0081ffc4 	movi	r2,2047
   8b59c:	80bfd626 	beq	r16,r2,8b4f8 <__alt_data_end+0xfffbfa08>
   8b5a0:	4a402034 	orhi	r9,r9,128
   8b5a4:	00800e04 	movi	r2,56
   8b5a8:	10c09f16 	blt	r2,r3,8b828 <__adddf3+0x3ac>
   8b5ac:	008007c4 	movi	r2,31
   8b5b0:	10c0c216 	blt	r2,r3,8b8bc <__adddf3+0x440>
   8b5b4:	00800804 	movi	r2,32
   8b5b8:	10c5c83a 	sub	r2,r2,r3
   8b5bc:	488a983a 	sll	r5,r9,r2
   8b5c0:	30c8d83a 	srl	r4,r6,r3
   8b5c4:	3084983a 	sll	r2,r6,r2
   8b5c8:	48c6d83a 	srl	r3,r9,r3
   8b5cc:	290cb03a 	or	r6,r5,r4
   8b5d0:	1004c03a 	cmpne	r2,r2,zero
   8b5d4:	308cb03a 	or	r6,r6,r2
   8b5d8:	898dc83a 	sub	r6,r17,r6
   8b5dc:	89a3803a 	cmpltu	r17,r17,r6
   8b5e0:	40d1c83a 	sub	r8,r8,r3
   8b5e4:	4451c83a 	sub	r8,r8,r17
   8b5e8:	3023883a 	mov	r17,r6
   8b5ec:	4080202c 	andhi	r2,r8,128
   8b5f0:	10002326 	beq	r2,zero,8b680 <__adddf3+0x204>
   8b5f4:	04c02034 	movhi	r19,128
   8b5f8:	9cffffc4 	addi	r19,r19,-1
   8b5fc:	44e6703a 	and	r19,r8,r19
   8b600:	98007626 	beq	r19,zero,8b7dc <__adddf3+0x360>
   8b604:	9809883a 	mov	r4,r19
   8b608:	008da800 	call	8da80 <__clzsi2>
   8b60c:	10fffe04 	addi	r3,r2,-8
   8b610:	010007c4 	movi	r4,31
   8b614:	20c07716 	blt	r4,r3,8b7f4 <__adddf3+0x378>
   8b618:	00800804 	movi	r2,32
   8b61c:	10c5c83a 	sub	r2,r2,r3
   8b620:	8884d83a 	srl	r2,r17,r2
   8b624:	98d0983a 	sll	r8,r19,r3
   8b628:	88e2983a 	sll	r17,r17,r3
   8b62c:	1204b03a 	or	r2,r2,r8
   8b630:	1c007416 	blt	r3,r16,8b804 <__adddf3+0x388>
   8b634:	1c21c83a 	sub	r16,r3,r16
   8b638:	82000044 	addi	r8,r16,1
   8b63c:	00c007c4 	movi	r3,31
   8b640:	1a009116 	blt	r3,r8,8b888 <__adddf3+0x40c>
   8b644:	00c00804 	movi	r3,32
   8b648:	1a07c83a 	sub	r3,r3,r8
   8b64c:	8a08d83a 	srl	r4,r17,r8
   8b650:	88e2983a 	sll	r17,r17,r3
   8b654:	10c6983a 	sll	r3,r2,r3
   8b658:	1210d83a 	srl	r8,r2,r8
   8b65c:	8804c03a 	cmpne	r2,r17,zero
   8b660:	1906b03a 	or	r3,r3,r4
   8b664:	18a2b03a 	or	r17,r3,r2
   8b668:	0021883a 	mov	r16,zero
   8b66c:	003fa206 	br	8b4f8 <__alt_data_end+0xfffbfa08>
   8b670:	1890b03a 	or	r8,r3,r2
   8b674:	40017d26 	beq	r8,zero,8bc6c <__adddf3+0x7f0>
   8b678:	1011883a 	mov	r8,r2
   8b67c:	1823883a 	mov	r17,r3
   8b680:	888001cc 	andi	r2,r17,7
   8b684:	103f9e1e 	bne	r2,zero,8b500 <__alt_data_end+0xfffbfa10>
   8b688:	4004977a 	slli	r2,r8,29
   8b68c:	8822d0fa 	srli	r17,r17,3
   8b690:	4010d0fa 	srli	r8,r8,3
   8b694:	9007883a 	mov	r3,r18
   8b698:	1444b03a 	or	r2,r2,r17
   8b69c:	0101ffc4 	movi	r4,2047
   8b6a0:	81002426 	beq	r16,r4,8b734 <__adddf3+0x2b8>
   8b6a4:	8120703a 	and	r16,r16,r4
   8b6a8:	01000434 	movhi	r4,16
   8b6ac:	213fffc4 	addi	r4,r4,-1
   8b6b0:	4110703a 	and	r8,r8,r4
   8b6b4:	003fa806 	br	8b558 <__alt_data_end+0xfffbfa68>
   8b6b8:	8089c83a 	sub	r4,r16,r2
   8b6bc:	01005e0e 	bge	zero,r4,8b838 <__adddf3+0x3bc>
   8b6c0:	10002b26 	beq	r2,zero,8b770 <__adddf3+0x2f4>
   8b6c4:	0081ffc4 	movi	r2,2047
   8b6c8:	80bf8b26 	beq	r16,r2,8b4f8 <__alt_data_end+0xfffbfa08>
   8b6cc:	4a402034 	orhi	r9,r9,128
   8b6d0:	00800e04 	movi	r2,56
   8b6d4:	1100a40e 	bge	r2,r4,8b968 <__adddf3+0x4ec>
   8b6d8:	498cb03a 	or	r6,r9,r6
   8b6dc:	300ac03a 	cmpne	r5,r6,zero
   8b6e0:	0013883a 	mov	r9,zero
   8b6e4:	2c4b883a 	add	r5,r5,r17
   8b6e8:	2c63803a 	cmpltu	r17,r5,r17
   8b6ec:	4a11883a 	add	r8,r9,r8
   8b6f0:	8a11883a 	add	r8,r17,r8
   8b6f4:	2823883a 	mov	r17,r5
   8b6f8:	4080202c 	andhi	r2,r8,128
   8b6fc:	103fe026 	beq	r2,zero,8b680 <__alt_data_end+0xfffbfb90>
   8b700:	84000044 	addi	r16,r16,1
   8b704:	0081ffc4 	movi	r2,2047
   8b708:	8080d226 	beq	r16,r2,8ba54 <__adddf3+0x5d8>
   8b70c:	00bfe034 	movhi	r2,65408
   8b710:	10bfffc4 	addi	r2,r2,-1
   8b714:	4090703a 	and	r8,r8,r2
   8b718:	880ad07a 	srli	r5,r17,1
   8b71c:	400897fa 	slli	r4,r8,31
   8b720:	88c0004c 	andi	r3,r17,1
   8b724:	28e2b03a 	or	r17,r5,r3
   8b728:	4010d07a 	srli	r8,r8,1
   8b72c:	2462b03a 	or	r17,r4,r17
   8b730:	003f7106 	br	8b4f8 <__alt_data_end+0xfffbfa08>
   8b734:	4088b03a 	or	r4,r8,r2
   8b738:	20014526 	beq	r4,zero,8bc50 <__adddf3+0x7d4>
   8b73c:	01000434 	movhi	r4,16
   8b740:	42000234 	orhi	r8,r8,8
   8b744:	213fffc4 	addi	r4,r4,-1
   8b748:	4110703a 	and	r8,r8,r4
   8b74c:	003f8206 	br	8b558 <__alt_data_end+0xfffbfa68>
   8b750:	18ffffc4 	addi	r3,r3,-1
   8b754:	1800491e 	bne	r3,zero,8b87c <__adddf3+0x400>
   8b758:	898bc83a 	sub	r5,r17,r6
   8b75c:	8963803a 	cmpltu	r17,r17,r5
   8b760:	4251c83a 	sub	r8,r8,r9
   8b764:	4451c83a 	sub	r8,r8,r17
   8b768:	2823883a 	mov	r17,r5
   8b76c:	003f9f06 	br	8b5ec <__alt_data_end+0xfffbfafc>
   8b770:	4984b03a 	or	r2,r9,r6
   8b774:	103f6026 	beq	r2,zero,8b4f8 <__alt_data_end+0xfffbfa08>
   8b778:	213fffc4 	addi	r4,r4,-1
   8b77c:	2000931e 	bne	r4,zero,8b9cc <__adddf3+0x550>
   8b780:	898d883a 	add	r6,r17,r6
   8b784:	3463803a 	cmpltu	r17,r6,r17
   8b788:	4251883a 	add	r8,r8,r9
   8b78c:	8a11883a 	add	r8,r17,r8
   8b790:	3023883a 	mov	r17,r6
   8b794:	003fd806 	br	8b6f8 <__alt_data_end+0xfffbfc08>
   8b798:	1800541e 	bne	r3,zero,8b8ec <__adddf3+0x470>
   8b79c:	80800044 	addi	r2,r16,1
   8b7a0:	1081ffcc 	andi	r2,r2,2047
   8b7a4:	00c00044 	movi	r3,1
   8b7a8:	1880a00e 	bge	r3,r2,8ba2c <__adddf3+0x5b0>
   8b7ac:	8989c83a 	sub	r4,r17,r6
   8b7b0:	8905803a 	cmpltu	r2,r17,r4
   8b7b4:	4267c83a 	sub	r19,r8,r9
   8b7b8:	98a7c83a 	sub	r19,r19,r2
   8b7bc:	9880202c 	andhi	r2,r19,128
   8b7c0:	10006326 	beq	r2,zero,8b950 <__adddf3+0x4d4>
   8b7c4:	3463c83a 	sub	r17,r6,r17
   8b7c8:	4a07c83a 	sub	r3,r9,r8
   8b7cc:	344d803a 	cmpltu	r6,r6,r17
   8b7d0:	19a7c83a 	sub	r19,r3,r6
   8b7d4:	3825883a 	mov	r18,r7
   8b7d8:	983f8a1e 	bne	r19,zero,8b604 <__alt_data_end+0xfffbfb14>
   8b7dc:	8809883a 	mov	r4,r17
   8b7e0:	008da800 	call	8da80 <__clzsi2>
   8b7e4:	10800804 	addi	r2,r2,32
   8b7e8:	10fffe04 	addi	r3,r2,-8
   8b7ec:	010007c4 	movi	r4,31
   8b7f0:	20ff890e 	bge	r4,r3,8b618 <__alt_data_end+0xfffbfb28>
   8b7f4:	10bff604 	addi	r2,r2,-40
   8b7f8:	8884983a 	sll	r2,r17,r2
   8b7fc:	0023883a 	mov	r17,zero
   8b800:	1c3f8c0e 	bge	r3,r16,8b634 <__alt_data_end+0xfffbfb44>
   8b804:	023fe034 	movhi	r8,65408
   8b808:	423fffc4 	addi	r8,r8,-1
   8b80c:	80e1c83a 	sub	r16,r16,r3
   8b810:	1210703a 	and	r8,r2,r8
   8b814:	003f3806 	br	8b4f8 <__alt_data_end+0xfffbfa08>
   8b818:	9007883a 	mov	r3,r18
   8b81c:	0011883a 	mov	r8,zero
   8b820:	0005883a 	mov	r2,zero
   8b824:	003f4c06 	br	8b558 <__alt_data_end+0xfffbfa68>
   8b828:	498cb03a 	or	r6,r9,r6
   8b82c:	300cc03a 	cmpne	r6,r6,zero
   8b830:	0007883a 	mov	r3,zero
   8b834:	003f6806 	br	8b5d8 <__alt_data_end+0xfffbfae8>
   8b838:	20009c1e 	bne	r4,zero,8baac <__adddf3+0x630>
   8b83c:	80800044 	addi	r2,r16,1
   8b840:	1141ffcc 	andi	r5,r2,2047
   8b844:	01000044 	movi	r4,1
   8b848:	2140670e 	bge	r4,r5,8b9e8 <__adddf3+0x56c>
   8b84c:	0101ffc4 	movi	r4,2047
   8b850:	11007f26 	beq	r2,r4,8ba50 <__adddf3+0x5d4>
   8b854:	898d883a 	add	r6,r17,r6
   8b858:	4247883a 	add	r3,r8,r9
   8b85c:	3451803a 	cmpltu	r8,r6,r17
   8b860:	40d1883a 	add	r8,r8,r3
   8b864:	402297fa 	slli	r17,r8,31
   8b868:	300cd07a 	srli	r6,r6,1
   8b86c:	4010d07a 	srli	r8,r8,1
   8b870:	1021883a 	mov	r16,r2
   8b874:	89a2b03a 	or	r17,r17,r6
   8b878:	003f1f06 	br	8b4f8 <__alt_data_end+0xfffbfa08>
   8b87c:	0081ffc4 	movi	r2,2047
   8b880:	80bf481e 	bne	r16,r2,8b5a4 <__alt_data_end+0xfffbfab4>
   8b884:	003f1c06 	br	8b4f8 <__alt_data_end+0xfffbfa08>
   8b888:	843ff844 	addi	r16,r16,-31
   8b88c:	01000804 	movi	r4,32
   8b890:	1406d83a 	srl	r3,r2,r16
   8b894:	41005026 	beq	r8,r4,8b9d8 <__adddf3+0x55c>
   8b898:	01001004 	movi	r4,64
   8b89c:	2211c83a 	sub	r8,r4,r8
   8b8a0:	1204983a 	sll	r2,r2,r8
   8b8a4:	88a2b03a 	or	r17,r17,r2
   8b8a8:	8822c03a 	cmpne	r17,r17,zero
   8b8ac:	1c62b03a 	or	r17,r3,r17
   8b8b0:	0011883a 	mov	r8,zero
   8b8b4:	0021883a 	mov	r16,zero
   8b8b8:	003f7106 	br	8b680 <__alt_data_end+0xfffbfb90>
   8b8bc:	193ff804 	addi	r4,r3,-32
   8b8c0:	00800804 	movi	r2,32
   8b8c4:	4908d83a 	srl	r4,r9,r4
   8b8c8:	18804526 	beq	r3,r2,8b9e0 <__adddf3+0x564>
   8b8cc:	00801004 	movi	r2,64
   8b8d0:	10c5c83a 	sub	r2,r2,r3
   8b8d4:	4886983a 	sll	r3,r9,r2
   8b8d8:	198cb03a 	or	r6,r3,r6
   8b8dc:	300cc03a 	cmpne	r6,r6,zero
   8b8e0:	218cb03a 	or	r6,r4,r6
   8b8e4:	0007883a 	mov	r3,zero
   8b8e8:	003f3b06 	br	8b5d8 <__alt_data_end+0xfffbfae8>
   8b8ec:	80002a26 	beq	r16,zero,8b998 <__adddf3+0x51c>
   8b8f0:	0101ffc4 	movi	r4,2047
   8b8f4:	11006826 	beq	r2,r4,8ba98 <__adddf3+0x61c>
   8b8f8:	00c7c83a 	sub	r3,zero,r3
   8b8fc:	42002034 	orhi	r8,r8,128
   8b900:	01000e04 	movi	r4,56
   8b904:	20c07c16 	blt	r4,r3,8baf8 <__adddf3+0x67c>
   8b908:	010007c4 	movi	r4,31
   8b90c:	20c0da16 	blt	r4,r3,8bc78 <__adddf3+0x7fc>
   8b910:	01000804 	movi	r4,32
   8b914:	20c9c83a 	sub	r4,r4,r3
   8b918:	4114983a 	sll	r10,r8,r4
   8b91c:	88cad83a 	srl	r5,r17,r3
   8b920:	8908983a 	sll	r4,r17,r4
   8b924:	40c6d83a 	srl	r3,r8,r3
   8b928:	5162b03a 	or	r17,r10,r5
   8b92c:	2008c03a 	cmpne	r4,r4,zero
   8b930:	8922b03a 	or	r17,r17,r4
   8b934:	3463c83a 	sub	r17,r6,r17
   8b938:	48c7c83a 	sub	r3,r9,r3
   8b93c:	344d803a 	cmpltu	r6,r6,r17
   8b940:	1991c83a 	sub	r8,r3,r6
   8b944:	1021883a 	mov	r16,r2
   8b948:	3825883a 	mov	r18,r7
   8b94c:	003f2706 	br	8b5ec <__alt_data_end+0xfffbfafc>
   8b950:	24d0b03a 	or	r8,r4,r19
   8b954:	40001b1e 	bne	r8,zero,8b9c4 <__adddf3+0x548>
   8b958:	0005883a 	mov	r2,zero
   8b95c:	0007883a 	mov	r3,zero
   8b960:	0021883a 	mov	r16,zero
   8b964:	003f4d06 	br	8b69c <__alt_data_end+0xfffbfbac>
   8b968:	008007c4 	movi	r2,31
   8b96c:	11003c16 	blt	r2,r4,8ba60 <__adddf3+0x5e4>
   8b970:	00800804 	movi	r2,32
   8b974:	1105c83a 	sub	r2,r2,r4
   8b978:	488e983a 	sll	r7,r9,r2
   8b97c:	310ad83a 	srl	r5,r6,r4
   8b980:	3084983a 	sll	r2,r6,r2
   8b984:	4912d83a 	srl	r9,r9,r4
   8b988:	394ab03a 	or	r5,r7,r5
   8b98c:	1004c03a 	cmpne	r2,r2,zero
   8b990:	288ab03a 	or	r5,r5,r2
   8b994:	003f5306 	br	8b6e4 <__alt_data_end+0xfffbfbf4>
   8b998:	4448b03a 	or	r4,r8,r17
   8b99c:	20003e26 	beq	r4,zero,8ba98 <__adddf3+0x61c>
   8b9a0:	00c6303a 	nor	r3,zero,r3
   8b9a4:	18003a1e 	bne	r3,zero,8ba90 <__adddf3+0x614>
   8b9a8:	3463c83a 	sub	r17,r6,r17
   8b9ac:	4a07c83a 	sub	r3,r9,r8
   8b9b0:	344d803a 	cmpltu	r6,r6,r17
   8b9b4:	1991c83a 	sub	r8,r3,r6
   8b9b8:	1021883a 	mov	r16,r2
   8b9bc:	3825883a 	mov	r18,r7
   8b9c0:	003f0a06 	br	8b5ec <__alt_data_end+0xfffbfafc>
   8b9c4:	2023883a 	mov	r17,r4
   8b9c8:	003f0d06 	br	8b600 <__alt_data_end+0xfffbfb10>
   8b9cc:	0081ffc4 	movi	r2,2047
   8b9d0:	80bf3f1e 	bne	r16,r2,8b6d0 <__alt_data_end+0xfffbfbe0>
   8b9d4:	003ec806 	br	8b4f8 <__alt_data_end+0xfffbfa08>
   8b9d8:	0005883a 	mov	r2,zero
   8b9dc:	003fb106 	br	8b8a4 <__alt_data_end+0xfffbfdb4>
   8b9e0:	0007883a 	mov	r3,zero
   8b9e4:	003fbc06 	br	8b8d8 <__alt_data_end+0xfffbfde8>
   8b9e8:	4444b03a 	or	r2,r8,r17
   8b9ec:	8000871e 	bne	r16,zero,8bc0c <__adddf3+0x790>
   8b9f0:	1000ba26 	beq	r2,zero,8bcdc <__adddf3+0x860>
   8b9f4:	4984b03a 	or	r2,r9,r6
   8b9f8:	103ebf26 	beq	r2,zero,8b4f8 <__alt_data_end+0xfffbfa08>
   8b9fc:	8985883a 	add	r2,r17,r6
   8ba00:	4247883a 	add	r3,r8,r9
   8ba04:	1451803a 	cmpltu	r8,r2,r17
   8ba08:	40d1883a 	add	r8,r8,r3
   8ba0c:	40c0202c 	andhi	r3,r8,128
   8ba10:	1023883a 	mov	r17,r2
   8ba14:	183f1a26 	beq	r3,zero,8b680 <__alt_data_end+0xfffbfb90>
   8ba18:	00bfe034 	movhi	r2,65408
   8ba1c:	10bfffc4 	addi	r2,r2,-1
   8ba20:	2021883a 	mov	r16,r4
   8ba24:	4090703a 	and	r8,r8,r2
   8ba28:	003eb306 	br	8b4f8 <__alt_data_end+0xfffbfa08>
   8ba2c:	4444b03a 	or	r2,r8,r17
   8ba30:	8000291e 	bne	r16,zero,8bad8 <__adddf3+0x65c>
   8ba34:	10004b1e 	bne	r2,zero,8bb64 <__adddf3+0x6e8>
   8ba38:	4990b03a 	or	r8,r9,r6
   8ba3c:	40008b26 	beq	r8,zero,8bc6c <__adddf3+0x7f0>
   8ba40:	4811883a 	mov	r8,r9
   8ba44:	3023883a 	mov	r17,r6
   8ba48:	3825883a 	mov	r18,r7
   8ba4c:	003eaa06 	br	8b4f8 <__alt_data_end+0xfffbfa08>
   8ba50:	1021883a 	mov	r16,r2
   8ba54:	0011883a 	mov	r8,zero
   8ba58:	0005883a 	mov	r2,zero
   8ba5c:	003f0f06 	br	8b69c <__alt_data_end+0xfffbfbac>
   8ba60:	217ff804 	addi	r5,r4,-32
   8ba64:	00800804 	movi	r2,32
   8ba68:	494ad83a 	srl	r5,r9,r5
   8ba6c:	20807d26 	beq	r4,r2,8bc64 <__adddf3+0x7e8>
   8ba70:	00801004 	movi	r2,64
   8ba74:	1109c83a 	sub	r4,r2,r4
   8ba78:	4912983a 	sll	r9,r9,r4
   8ba7c:	498cb03a 	or	r6,r9,r6
   8ba80:	300cc03a 	cmpne	r6,r6,zero
   8ba84:	298ab03a 	or	r5,r5,r6
   8ba88:	0013883a 	mov	r9,zero
   8ba8c:	003f1506 	br	8b6e4 <__alt_data_end+0xfffbfbf4>
   8ba90:	0101ffc4 	movi	r4,2047
   8ba94:	113f9a1e 	bne	r2,r4,8b900 <__alt_data_end+0xfffbfe10>
   8ba98:	4811883a 	mov	r8,r9
   8ba9c:	3023883a 	mov	r17,r6
   8baa0:	1021883a 	mov	r16,r2
   8baa4:	3825883a 	mov	r18,r7
   8baa8:	003e9306 	br	8b4f8 <__alt_data_end+0xfffbfa08>
   8baac:	8000161e 	bne	r16,zero,8bb08 <__adddf3+0x68c>
   8bab0:	444ab03a 	or	r5,r8,r17
   8bab4:	28005126 	beq	r5,zero,8bbfc <__adddf3+0x780>
   8bab8:	0108303a 	nor	r4,zero,r4
   8babc:	20004d1e 	bne	r4,zero,8bbf4 <__adddf3+0x778>
   8bac0:	89a3883a 	add	r17,r17,r6
   8bac4:	4253883a 	add	r9,r8,r9
   8bac8:	898d803a 	cmpltu	r6,r17,r6
   8bacc:	3251883a 	add	r8,r6,r9
   8bad0:	1021883a 	mov	r16,r2
   8bad4:	003f0806 	br	8b6f8 <__alt_data_end+0xfffbfc08>
   8bad8:	1000301e 	bne	r2,zero,8bb9c <__adddf3+0x720>
   8badc:	4984b03a 	or	r2,r9,r6
   8bae0:	10007126 	beq	r2,zero,8bca8 <__adddf3+0x82c>
   8bae4:	4811883a 	mov	r8,r9
   8bae8:	3023883a 	mov	r17,r6
   8baec:	3825883a 	mov	r18,r7
   8baf0:	0401ffc4 	movi	r16,2047
   8baf4:	003e8006 	br	8b4f8 <__alt_data_end+0xfffbfa08>
   8baf8:	4462b03a 	or	r17,r8,r17
   8bafc:	8822c03a 	cmpne	r17,r17,zero
   8bb00:	0007883a 	mov	r3,zero
   8bb04:	003f8b06 	br	8b934 <__alt_data_end+0xfffbfe44>
   8bb08:	0141ffc4 	movi	r5,2047
   8bb0c:	11403b26 	beq	r2,r5,8bbfc <__adddf3+0x780>
   8bb10:	0109c83a 	sub	r4,zero,r4
   8bb14:	42002034 	orhi	r8,r8,128
   8bb18:	01400e04 	movi	r5,56
   8bb1c:	29006716 	blt	r5,r4,8bcbc <__adddf3+0x840>
   8bb20:	014007c4 	movi	r5,31
   8bb24:	29007016 	blt	r5,r4,8bce8 <__adddf3+0x86c>
   8bb28:	01400804 	movi	r5,32
   8bb2c:	290bc83a 	sub	r5,r5,r4
   8bb30:	4154983a 	sll	r10,r8,r5
   8bb34:	890ed83a 	srl	r7,r17,r4
   8bb38:	894a983a 	sll	r5,r17,r5
   8bb3c:	4108d83a 	srl	r4,r8,r4
   8bb40:	51e2b03a 	or	r17,r10,r7
   8bb44:	280ac03a 	cmpne	r5,r5,zero
   8bb48:	8962b03a 	or	r17,r17,r5
   8bb4c:	89a3883a 	add	r17,r17,r6
   8bb50:	2253883a 	add	r9,r4,r9
   8bb54:	898d803a 	cmpltu	r6,r17,r6
   8bb58:	3251883a 	add	r8,r6,r9
   8bb5c:	1021883a 	mov	r16,r2
   8bb60:	003ee506 	br	8b6f8 <__alt_data_end+0xfffbfc08>
   8bb64:	4984b03a 	or	r2,r9,r6
   8bb68:	103e6326 	beq	r2,zero,8b4f8 <__alt_data_end+0xfffbfa08>
   8bb6c:	8987c83a 	sub	r3,r17,r6
   8bb70:	88c9803a 	cmpltu	r4,r17,r3
   8bb74:	4245c83a 	sub	r2,r8,r9
   8bb78:	1105c83a 	sub	r2,r2,r4
   8bb7c:	1100202c 	andhi	r4,r2,128
   8bb80:	203ebb26 	beq	r4,zero,8b670 <__alt_data_end+0xfffbfb80>
   8bb84:	3463c83a 	sub	r17,r6,r17
   8bb88:	4a07c83a 	sub	r3,r9,r8
   8bb8c:	344d803a 	cmpltu	r6,r6,r17
   8bb90:	1991c83a 	sub	r8,r3,r6
   8bb94:	3825883a 	mov	r18,r7
   8bb98:	003e5706 	br	8b4f8 <__alt_data_end+0xfffbfa08>
   8bb9c:	4984b03a 	or	r2,r9,r6
   8bba0:	10002e26 	beq	r2,zero,8bc5c <__adddf3+0x7e0>
   8bba4:	4004d0fa 	srli	r2,r8,3
   8bba8:	8822d0fa 	srli	r17,r17,3
   8bbac:	4010977a 	slli	r8,r8,29
   8bbb0:	10c0022c 	andhi	r3,r2,8
   8bbb4:	4462b03a 	or	r17,r8,r17
   8bbb8:	18000826 	beq	r3,zero,8bbdc <__adddf3+0x760>
   8bbbc:	4808d0fa 	srli	r4,r9,3
   8bbc0:	20c0022c 	andhi	r3,r4,8
   8bbc4:	1800051e 	bne	r3,zero,8bbdc <__adddf3+0x760>
   8bbc8:	300cd0fa 	srli	r6,r6,3
   8bbcc:	4806977a 	slli	r3,r9,29
   8bbd0:	2005883a 	mov	r2,r4
   8bbd4:	3825883a 	mov	r18,r7
   8bbd8:	19a2b03a 	or	r17,r3,r6
   8bbdc:	8810d77a 	srli	r8,r17,29
   8bbe0:	100490fa 	slli	r2,r2,3
   8bbe4:	882290fa 	slli	r17,r17,3
   8bbe8:	0401ffc4 	movi	r16,2047
   8bbec:	4090b03a 	or	r8,r8,r2
   8bbf0:	003e4106 	br	8b4f8 <__alt_data_end+0xfffbfa08>
   8bbf4:	0141ffc4 	movi	r5,2047
   8bbf8:	117fc71e 	bne	r2,r5,8bb18 <__alt_data_end+0xfffc0028>
   8bbfc:	4811883a 	mov	r8,r9
   8bc00:	3023883a 	mov	r17,r6
   8bc04:	1021883a 	mov	r16,r2
   8bc08:	003e3b06 	br	8b4f8 <__alt_data_end+0xfffbfa08>
   8bc0c:	10002f26 	beq	r2,zero,8bccc <__adddf3+0x850>
   8bc10:	4984b03a 	or	r2,r9,r6
   8bc14:	10001126 	beq	r2,zero,8bc5c <__adddf3+0x7e0>
   8bc18:	4004d0fa 	srli	r2,r8,3
   8bc1c:	8822d0fa 	srli	r17,r17,3
   8bc20:	4010977a 	slli	r8,r8,29
   8bc24:	10c0022c 	andhi	r3,r2,8
   8bc28:	4462b03a 	or	r17,r8,r17
   8bc2c:	183feb26 	beq	r3,zero,8bbdc <__alt_data_end+0xfffc00ec>
   8bc30:	4808d0fa 	srli	r4,r9,3
   8bc34:	20c0022c 	andhi	r3,r4,8
   8bc38:	183fe81e 	bne	r3,zero,8bbdc <__alt_data_end+0xfffc00ec>
   8bc3c:	300cd0fa 	srli	r6,r6,3
   8bc40:	4806977a 	slli	r3,r9,29
   8bc44:	2005883a 	mov	r2,r4
   8bc48:	19a2b03a 	or	r17,r3,r6
   8bc4c:	003fe306 	br	8bbdc <__alt_data_end+0xfffc00ec>
   8bc50:	0011883a 	mov	r8,zero
   8bc54:	0005883a 	mov	r2,zero
   8bc58:	003e3f06 	br	8b558 <__alt_data_end+0xfffbfa68>
   8bc5c:	0401ffc4 	movi	r16,2047
   8bc60:	003e2506 	br	8b4f8 <__alt_data_end+0xfffbfa08>
   8bc64:	0013883a 	mov	r9,zero
   8bc68:	003f8406 	br	8ba7c <__alt_data_end+0xfffbff8c>
   8bc6c:	0005883a 	mov	r2,zero
   8bc70:	0007883a 	mov	r3,zero
   8bc74:	003e8906 	br	8b69c <__alt_data_end+0xfffbfbac>
   8bc78:	197ff804 	addi	r5,r3,-32
   8bc7c:	01000804 	movi	r4,32
   8bc80:	414ad83a 	srl	r5,r8,r5
   8bc84:	19002426 	beq	r3,r4,8bd18 <__adddf3+0x89c>
   8bc88:	01001004 	movi	r4,64
   8bc8c:	20c7c83a 	sub	r3,r4,r3
   8bc90:	40c6983a 	sll	r3,r8,r3
   8bc94:	1c46b03a 	or	r3,r3,r17
   8bc98:	1806c03a 	cmpne	r3,r3,zero
   8bc9c:	28e2b03a 	or	r17,r5,r3
   8bca0:	0007883a 	mov	r3,zero
   8bca4:	003f2306 	br	8b934 <__alt_data_end+0xfffbfe44>
   8bca8:	0007883a 	mov	r3,zero
   8bcac:	5811883a 	mov	r8,r11
   8bcb0:	00bfffc4 	movi	r2,-1
   8bcb4:	0401ffc4 	movi	r16,2047
   8bcb8:	003e7806 	br	8b69c <__alt_data_end+0xfffbfbac>
   8bcbc:	4462b03a 	or	r17,r8,r17
   8bcc0:	8822c03a 	cmpne	r17,r17,zero
   8bcc4:	0009883a 	mov	r4,zero
   8bcc8:	003fa006 	br	8bb4c <__alt_data_end+0xfffc005c>
   8bccc:	4811883a 	mov	r8,r9
   8bcd0:	3023883a 	mov	r17,r6
   8bcd4:	0401ffc4 	movi	r16,2047
   8bcd8:	003e0706 	br	8b4f8 <__alt_data_end+0xfffbfa08>
   8bcdc:	4811883a 	mov	r8,r9
   8bce0:	3023883a 	mov	r17,r6
   8bce4:	003e0406 	br	8b4f8 <__alt_data_end+0xfffbfa08>
   8bce8:	21fff804 	addi	r7,r4,-32
   8bcec:	01400804 	movi	r5,32
   8bcf0:	41ced83a 	srl	r7,r8,r7
   8bcf4:	21400a26 	beq	r4,r5,8bd20 <__adddf3+0x8a4>
   8bcf8:	01401004 	movi	r5,64
   8bcfc:	2909c83a 	sub	r4,r5,r4
   8bd00:	4108983a 	sll	r4,r8,r4
   8bd04:	2448b03a 	or	r4,r4,r17
   8bd08:	2008c03a 	cmpne	r4,r4,zero
   8bd0c:	3922b03a 	or	r17,r7,r4
   8bd10:	0009883a 	mov	r4,zero
   8bd14:	003f8d06 	br	8bb4c <__alt_data_end+0xfffc005c>
   8bd18:	0007883a 	mov	r3,zero
   8bd1c:	003fdd06 	br	8bc94 <__alt_data_end+0xfffc01a4>
   8bd20:	0009883a 	mov	r4,zero
   8bd24:	003ff706 	br	8bd04 <__alt_data_end+0xfffc0214>

0008bd28 <__divdf3>:
   8bd28:	defff204 	addi	sp,sp,-56
   8bd2c:	dd400915 	stw	r21,36(sp)
   8bd30:	282ad53a 	srli	r21,r5,20
   8bd34:	dd000815 	stw	r20,32(sp)
   8bd38:	2828d7fa 	srli	r20,r5,31
   8bd3c:	dc000415 	stw	r16,16(sp)
   8bd40:	04000434 	movhi	r16,16
   8bd44:	df000c15 	stw	fp,48(sp)
   8bd48:	843fffc4 	addi	r16,r16,-1
   8bd4c:	dfc00d15 	stw	ra,52(sp)
   8bd50:	ddc00b15 	stw	r23,44(sp)
   8bd54:	dd800a15 	stw	r22,40(sp)
   8bd58:	dcc00715 	stw	r19,28(sp)
   8bd5c:	dc800615 	stw	r18,24(sp)
   8bd60:	dc400515 	stw	r17,20(sp)
   8bd64:	ad41ffcc 	andi	r21,r21,2047
   8bd68:	2c20703a 	and	r16,r5,r16
   8bd6c:	a7003fcc 	andi	fp,r20,255
   8bd70:	a8006126 	beq	r21,zero,8bef8 <__divdf3+0x1d0>
   8bd74:	0081ffc4 	movi	r2,2047
   8bd78:	2025883a 	mov	r18,r4
   8bd7c:	a8803726 	beq	r21,r2,8be5c <__divdf3+0x134>
   8bd80:	80800434 	orhi	r2,r16,16
   8bd84:	100490fa 	slli	r2,r2,3
   8bd88:	2020d77a 	srli	r16,r4,29
   8bd8c:	202490fa 	slli	r18,r4,3
   8bd90:	ad7f0044 	addi	r21,r21,-1023
   8bd94:	80a0b03a 	or	r16,r16,r2
   8bd98:	0027883a 	mov	r19,zero
   8bd9c:	0013883a 	mov	r9,zero
   8bda0:	3804d53a 	srli	r2,r7,20
   8bda4:	382cd7fa 	srli	r22,r7,31
   8bda8:	04400434 	movhi	r17,16
   8bdac:	8c7fffc4 	addi	r17,r17,-1
   8bdb0:	1081ffcc 	andi	r2,r2,2047
   8bdb4:	3011883a 	mov	r8,r6
   8bdb8:	3c62703a 	and	r17,r7,r17
   8bdbc:	b5c03fcc 	andi	r23,r22,255
   8bdc0:	10006c26 	beq	r2,zero,8bf74 <__divdf3+0x24c>
   8bdc4:	00c1ffc4 	movi	r3,2047
   8bdc8:	10c06426 	beq	r2,r3,8bf5c <__divdf3+0x234>
   8bdcc:	88c00434 	orhi	r3,r17,16
   8bdd0:	180690fa 	slli	r3,r3,3
   8bdd4:	3022d77a 	srli	r17,r6,29
   8bdd8:	301090fa 	slli	r8,r6,3
   8bddc:	10bf0044 	addi	r2,r2,-1023
   8bde0:	88e2b03a 	or	r17,r17,r3
   8bde4:	000f883a 	mov	r7,zero
   8bde8:	a58cf03a 	xor	r6,r20,r22
   8bdec:	3cc8b03a 	or	r4,r7,r19
   8bdf0:	a8abc83a 	sub	r21,r21,r2
   8bdf4:	008003c4 	movi	r2,15
   8bdf8:	3007883a 	mov	r3,r6
   8bdfc:	34c03fcc 	andi	r19,r6,255
   8be00:	11009036 	bltu	r2,r4,8c044 <__divdf3+0x31c>
   8be04:	200890ba 	slli	r4,r4,2
   8be08:	00800274 	movhi	r2,9
   8be0c:	10af8704 	addi	r2,r2,-16868
   8be10:	2089883a 	add	r4,r4,r2
   8be14:	20800017 	ldw	r2,0(r4)
   8be18:	1000683a 	jmp	r2
   8be1c:	0008c044 	movi	zero,8961
   8be20:	0008be94 	movui	zero,8954
   8be24:	0008c034 	movhi	zero,8960
   8be28:	0008be88 	cmpgei	zero,zero,8954
   8be2c:	0008c034 	movhi	zero,8960
   8be30:	0008c008 	cmpgei	zero,zero,8960
   8be34:	0008c034 	movhi	zero,8960
   8be38:	0008be88 	cmpgei	zero,zero,8954
   8be3c:	0008be94 	movui	zero,8954
   8be40:	0008be94 	movui	zero,8954
   8be44:	0008c008 	cmpgei	zero,zero,8960
   8be48:	0008be88 	cmpgei	zero,zero,8954
   8be4c:	0008be78 	rdprs	zero,zero,8953
   8be50:	0008be78 	rdprs	zero,zero,8953
   8be54:	0008be78 	rdprs	zero,zero,8953
   8be58:	0008c328 	cmpgeui	zero,zero,8972
   8be5c:	2404b03a 	or	r2,r4,r16
   8be60:	1000661e 	bne	r2,zero,8bffc <__divdf3+0x2d4>
   8be64:	04c00204 	movi	r19,8
   8be68:	0021883a 	mov	r16,zero
   8be6c:	0025883a 	mov	r18,zero
   8be70:	02400084 	movi	r9,2
   8be74:	003fca06 	br	8bda0 <__alt_data_end+0xfffc02b0>
   8be78:	8023883a 	mov	r17,r16
   8be7c:	9011883a 	mov	r8,r18
   8be80:	e02f883a 	mov	r23,fp
   8be84:	480f883a 	mov	r7,r9
   8be88:	00800084 	movi	r2,2
   8be8c:	3881311e 	bne	r7,r2,8c354 <__divdf3+0x62c>
   8be90:	b827883a 	mov	r19,r23
   8be94:	98c0004c 	andi	r3,r19,1
   8be98:	0081ffc4 	movi	r2,2047
   8be9c:	000b883a 	mov	r5,zero
   8bea0:	0025883a 	mov	r18,zero
   8bea4:	1004953a 	slli	r2,r2,20
   8bea8:	18c03fcc 	andi	r3,r3,255
   8beac:	04400434 	movhi	r17,16
   8beb0:	8c7fffc4 	addi	r17,r17,-1
   8beb4:	180697fa 	slli	r3,r3,31
   8beb8:	2c4a703a 	and	r5,r5,r17
   8bebc:	288ab03a 	or	r5,r5,r2
   8bec0:	28c6b03a 	or	r3,r5,r3
   8bec4:	9005883a 	mov	r2,r18
   8bec8:	dfc00d17 	ldw	ra,52(sp)
   8becc:	df000c17 	ldw	fp,48(sp)
   8bed0:	ddc00b17 	ldw	r23,44(sp)
   8bed4:	dd800a17 	ldw	r22,40(sp)
   8bed8:	dd400917 	ldw	r21,36(sp)
   8bedc:	dd000817 	ldw	r20,32(sp)
   8bee0:	dcc00717 	ldw	r19,28(sp)
   8bee4:	dc800617 	ldw	r18,24(sp)
   8bee8:	dc400517 	ldw	r17,20(sp)
   8beec:	dc000417 	ldw	r16,16(sp)
   8bef0:	dec00e04 	addi	sp,sp,56
   8bef4:	f800283a 	ret
   8bef8:	2404b03a 	or	r2,r4,r16
   8befc:	2027883a 	mov	r19,r4
   8bf00:	10003926 	beq	r2,zero,8bfe8 <__divdf3+0x2c0>
   8bf04:	80012e26 	beq	r16,zero,8c3c0 <__divdf3+0x698>
   8bf08:	8009883a 	mov	r4,r16
   8bf0c:	d9800315 	stw	r6,12(sp)
   8bf10:	d9c00215 	stw	r7,8(sp)
   8bf14:	008da800 	call	8da80 <__clzsi2>
   8bf18:	d9800317 	ldw	r6,12(sp)
   8bf1c:	d9c00217 	ldw	r7,8(sp)
   8bf20:	113ffd44 	addi	r4,r2,-11
   8bf24:	00c00704 	movi	r3,28
   8bf28:	19012116 	blt	r3,r4,8c3b0 <__divdf3+0x688>
   8bf2c:	00c00744 	movi	r3,29
   8bf30:	147ffe04 	addi	r17,r2,-8
   8bf34:	1907c83a 	sub	r3,r3,r4
   8bf38:	8460983a 	sll	r16,r16,r17
   8bf3c:	98c6d83a 	srl	r3,r19,r3
   8bf40:	9c64983a 	sll	r18,r19,r17
   8bf44:	1c20b03a 	or	r16,r3,r16
   8bf48:	1080fcc4 	addi	r2,r2,1011
   8bf4c:	00abc83a 	sub	r21,zero,r2
   8bf50:	0027883a 	mov	r19,zero
   8bf54:	0013883a 	mov	r9,zero
   8bf58:	003f9106 	br	8bda0 <__alt_data_end+0xfffc02b0>
   8bf5c:	3446b03a 	or	r3,r6,r17
   8bf60:	18001f1e 	bne	r3,zero,8bfe0 <__divdf3+0x2b8>
   8bf64:	0023883a 	mov	r17,zero
   8bf68:	0011883a 	mov	r8,zero
   8bf6c:	01c00084 	movi	r7,2
   8bf70:	003f9d06 	br	8bde8 <__alt_data_end+0xfffc02f8>
   8bf74:	3446b03a 	or	r3,r6,r17
   8bf78:	18001526 	beq	r3,zero,8bfd0 <__divdf3+0x2a8>
   8bf7c:	88011b26 	beq	r17,zero,8c3ec <__divdf3+0x6c4>
   8bf80:	8809883a 	mov	r4,r17
   8bf84:	d9800315 	stw	r6,12(sp)
   8bf88:	da400115 	stw	r9,4(sp)
   8bf8c:	008da800 	call	8da80 <__clzsi2>
   8bf90:	d9800317 	ldw	r6,12(sp)
   8bf94:	da400117 	ldw	r9,4(sp)
   8bf98:	113ffd44 	addi	r4,r2,-11
   8bf9c:	00c00704 	movi	r3,28
   8bfa0:	19010e16 	blt	r3,r4,8c3dc <__divdf3+0x6b4>
   8bfa4:	00c00744 	movi	r3,29
   8bfa8:	123ffe04 	addi	r8,r2,-8
   8bfac:	1907c83a 	sub	r3,r3,r4
   8bfb0:	8a22983a 	sll	r17,r17,r8
   8bfb4:	30c6d83a 	srl	r3,r6,r3
   8bfb8:	3210983a 	sll	r8,r6,r8
   8bfbc:	1c62b03a 	or	r17,r3,r17
   8bfc0:	1080fcc4 	addi	r2,r2,1011
   8bfc4:	0085c83a 	sub	r2,zero,r2
   8bfc8:	000f883a 	mov	r7,zero
   8bfcc:	003f8606 	br	8bde8 <__alt_data_end+0xfffc02f8>
   8bfd0:	0023883a 	mov	r17,zero
   8bfd4:	0011883a 	mov	r8,zero
   8bfd8:	01c00044 	movi	r7,1
   8bfdc:	003f8206 	br	8bde8 <__alt_data_end+0xfffc02f8>
   8bfe0:	01c000c4 	movi	r7,3
   8bfe4:	003f8006 	br	8bde8 <__alt_data_end+0xfffc02f8>
   8bfe8:	04c00104 	movi	r19,4
   8bfec:	0021883a 	mov	r16,zero
   8bff0:	0025883a 	mov	r18,zero
   8bff4:	02400044 	movi	r9,1
   8bff8:	003f6906 	br	8bda0 <__alt_data_end+0xfffc02b0>
   8bffc:	04c00304 	movi	r19,12
   8c000:	024000c4 	movi	r9,3
   8c004:	003f6606 	br	8bda0 <__alt_data_end+0xfffc02b0>
   8c008:	01400434 	movhi	r5,16
   8c00c:	0007883a 	mov	r3,zero
   8c010:	297fffc4 	addi	r5,r5,-1
   8c014:	04bfffc4 	movi	r18,-1
   8c018:	0081ffc4 	movi	r2,2047
   8c01c:	003fa106 	br	8bea4 <__alt_data_end+0xfffc03b4>
   8c020:	00c00044 	movi	r3,1
   8c024:	1887c83a 	sub	r3,r3,r2
   8c028:	01000e04 	movi	r4,56
   8c02c:	20c1210e 	bge	r4,r3,8c4b4 <__divdf3+0x78c>
   8c030:	98c0004c 	andi	r3,r19,1
   8c034:	0005883a 	mov	r2,zero
   8c038:	000b883a 	mov	r5,zero
   8c03c:	0025883a 	mov	r18,zero
   8c040:	003f9806 	br	8bea4 <__alt_data_end+0xfffc03b4>
   8c044:	8c00fd36 	bltu	r17,r16,8c43c <__divdf3+0x714>
   8c048:	8440fb26 	beq	r16,r17,8c438 <__divdf3+0x710>
   8c04c:	8007883a 	mov	r3,r16
   8c050:	ad7fffc4 	addi	r21,r21,-1
   8c054:	0021883a 	mov	r16,zero
   8c058:	4004d63a 	srli	r2,r8,24
   8c05c:	8822923a 	slli	r17,r17,8
   8c060:	1809883a 	mov	r4,r3
   8c064:	402c923a 	slli	r22,r8,8
   8c068:	88b8b03a 	or	fp,r17,r2
   8c06c:	e028d43a 	srli	r20,fp,16
   8c070:	d8c00015 	stw	r3,0(sp)
   8c074:	e5ffffcc 	andi	r23,fp,65535
   8c078:	a00b883a 	mov	r5,r20
   8c07c:	00811340 	call	81134 <__udivsi3>
   8c080:	d8c00017 	ldw	r3,0(sp)
   8c084:	a00b883a 	mov	r5,r20
   8c088:	d8800315 	stw	r2,12(sp)
   8c08c:	1809883a 	mov	r4,r3
   8c090:	00811980 	call	81198 <__umodsi3>
   8c094:	d9800317 	ldw	r6,12(sp)
   8c098:	1006943a 	slli	r3,r2,16
   8c09c:	9004d43a 	srli	r2,r18,16
   8c0a0:	b9a3383a 	mul	r17,r23,r6
   8c0a4:	10c4b03a 	or	r2,r2,r3
   8c0a8:	1440062e 	bgeu	r2,r17,8c0c4 <__divdf3+0x39c>
   8c0ac:	1705883a 	add	r2,r2,fp
   8c0b0:	30ffffc4 	addi	r3,r6,-1
   8c0b4:	1700ee36 	bltu	r2,fp,8c470 <__divdf3+0x748>
   8c0b8:	1440ed2e 	bgeu	r2,r17,8c470 <__divdf3+0x748>
   8c0bc:	31bfff84 	addi	r6,r6,-2
   8c0c0:	1705883a 	add	r2,r2,fp
   8c0c4:	1463c83a 	sub	r17,r2,r17
   8c0c8:	a00b883a 	mov	r5,r20
   8c0cc:	8809883a 	mov	r4,r17
   8c0d0:	d9800315 	stw	r6,12(sp)
   8c0d4:	00811340 	call	81134 <__udivsi3>
   8c0d8:	a00b883a 	mov	r5,r20
   8c0dc:	8809883a 	mov	r4,r17
   8c0e0:	d8800215 	stw	r2,8(sp)
   8c0e4:	00811980 	call	81198 <__umodsi3>
   8c0e8:	d9c00217 	ldw	r7,8(sp)
   8c0ec:	1004943a 	slli	r2,r2,16
   8c0f0:	94bfffcc 	andi	r18,r18,65535
   8c0f4:	b9d1383a 	mul	r8,r23,r7
   8c0f8:	90a4b03a 	or	r18,r18,r2
   8c0fc:	d9800317 	ldw	r6,12(sp)
   8c100:	9200062e 	bgeu	r18,r8,8c11c <__divdf3+0x3f4>
   8c104:	9725883a 	add	r18,r18,fp
   8c108:	38bfffc4 	addi	r2,r7,-1
   8c10c:	9700d636 	bltu	r18,fp,8c468 <__divdf3+0x740>
   8c110:	9200d52e 	bgeu	r18,r8,8c468 <__divdf3+0x740>
   8c114:	39ffff84 	addi	r7,r7,-2
   8c118:	9725883a 	add	r18,r18,fp
   8c11c:	3004943a 	slli	r2,r6,16
   8c120:	b012d43a 	srli	r9,r22,16
   8c124:	b1bfffcc 	andi	r6,r22,65535
   8c128:	11e2b03a 	or	r17,r2,r7
   8c12c:	8806d43a 	srli	r3,r17,16
   8c130:	893fffcc 	andi	r4,r17,65535
   8c134:	218b383a 	mul	r5,r4,r6
   8c138:	30c5383a 	mul	r2,r6,r3
   8c13c:	2249383a 	mul	r4,r4,r9
   8c140:	280ed43a 	srli	r7,r5,16
   8c144:	9225c83a 	sub	r18,r18,r8
   8c148:	2089883a 	add	r4,r4,r2
   8c14c:	3909883a 	add	r4,r7,r4
   8c150:	1a47383a 	mul	r3,r3,r9
   8c154:	2080022e 	bgeu	r4,r2,8c160 <__divdf3+0x438>
   8c158:	00800074 	movhi	r2,1
   8c15c:	1887883a 	add	r3,r3,r2
   8c160:	2004d43a 	srli	r2,r4,16
   8c164:	2008943a 	slli	r4,r4,16
   8c168:	297fffcc 	andi	r5,r5,65535
   8c16c:	10c7883a 	add	r3,r2,r3
   8c170:	2149883a 	add	r4,r4,r5
   8c174:	90c0a536 	bltu	r18,r3,8c40c <__divdf3+0x6e4>
   8c178:	90c0bf26 	beq	r18,r3,8c478 <__divdf3+0x750>
   8c17c:	90c7c83a 	sub	r3,r18,r3
   8c180:	810fc83a 	sub	r7,r16,r4
   8c184:	81e5803a 	cmpltu	r18,r16,r7
   8c188:	1ca5c83a 	sub	r18,r3,r18
   8c18c:	e480c126 	beq	fp,r18,8c494 <__divdf3+0x76c>
   8c190:	a00b883a 	mov	r5,r20
   8c194:	9009883a 	mov	r4,r18
   8c198:	d9800315 	stw	r6,12(sp)
   8c19c:	d9c00215 	stw	r7,8(sp)
   8c1a0:	da400115 	stw	r9,4(sp)
   8c1a4:	00811340 	call	81134 <__udivsi3>
   8c1a8:	a00b883a 	mov	r5,r20
   8c1ac:	9009883a 	mov	r4,r18
   8c1b0:	d8800015 	stw	r2,0(sp)
   8c1b4:	00811980 	call	81198 <__umodsi3>
   8c1b8:	d9c00217 	ldw	r7,8(sp)
   8c1bc:	da000017 	ldw	r8,0(sp)
   8c1c0:	1006943a 	slli	r3,r2,16
   8c1c4:	3804d43a 	srli	r2,r7,16
   8c1c8:	ba21383a 	mul	r16,r23,r8
   8c1cc:	d9800317 	ldw	r6,12(sp)
   8c1d0:	10c4b03a 	or	r2,r2,r3
   8c1d4:	da400117 	ldw	r9,4(sp)
   8c1d8:	1400062e 	bgeu	r2,r16,8c1f4 <__divdf3+0x4cc>
   8c1dc:	1705883a 	add	r2,r2,fp
   8c1e0:	40ffffc4 	addi	r3,r8,-1
   8c1e4:	1700ad36 	bltu	r2,fp,8c49c <__divdf3+0x774>
   8c1e8:	1400ac2e 	bgeu	r2,r16,8c49c <__divdf3+0x774>
   8c1ec:	423fff84 	addi	r8,r8,-2
   8c1f0:	1705883a 	add	r2,r2,fp
   8c1f4:	1421c83a 	sub	r16,r2,r16
   8c1f8:	a00b883a 	mov	r5,r20
   8c1fc:	8009883a 	mov	r4,r16
   8c200:	d9800315 	stw	r6,12(sp)
   8c204:	d9c00215 	stw	r7,8(sp)
   8c208:	da000015 	stw	r8,0(sp)
   8c20c:	da400115 	stw	r9,4(sp)
   8c210:	00811340 	call	81134 <__udivsi3>
   8c214:	8009883a 	mov	r4,r16
   8c218:	a00b883a 	mov	r5,r20
   8c21c:	1025883a 	mov	r18,r2
   8c220:	00811980 	call	81198 <__umodsi3>
   8c224:	d9c00217 	ldw	r7,8(sp)
   8c228:	1004943a 	slli	r2,r2,16
   8c22c:	bcaf383a 	mul	r23,r23,r18
   8c230:	393fffcc 	andi	r4,r7,65535
   8c234:	2088b03a 	or	r4,r4,r2
   8c238:	d9800317 	ldw	r6,12(sp)
   8c23c:	da000017 	ldw	r8,0(sp)
   8c240:	da400117 	ldw	r9,4(sp)
   8c244:	25c0062e 	bgeu	r4,r23,8c260 <__divdf3+0x538>
   8c248:	2709883a 	add	r4,r4,fp
   8c24c:	90bfffc4 	addi	r2,r18,-1
   8c250:	27009436 	bltu	r4,fp,8c4a4 <__divdf3+0x77c>
   8c254:	25c0932e 	bgeu	r4,r23,8c4a4 <__divdf3+0x77c>
   8c258:	94bfff84 	addi	r18,r18,-2
   8c25c:	2709883a 	add	r4,r4,fp
   8c260:	4004943a 	slli	r2,r8,16
   8c264:	25efc83a 	sub	r23,r4,r23
   8c268:	1490b03a 	or	r8,r2,r18
   8c26c:	4008d43a 	srli	r4,r8,16
   8c270:	40ffffcc 	andi	r3,r8,65535
   8c274:	30c5383a 	mul	r2,r6,r3
   8c278:	1a47383a 	mul	r3,r3,r9
   8c27c:	310d383a 	mul	r6,r6,r4
   8c280:	100ad43a 	srli	r5,r2,16
   8c284:	4913383a 	mul	r9,r9,r4
   8c288:	1987883a 	add	r3,r3,r6
   8c28c:	28c7883a 	add	r3,r5,r3
   8c290:	1980022e 	bgeu	r3,r6,8c29c <__divdf3+0x574>
   8c294:	01000074 	movhi	r4,1
   8c298:	4913883a 	add	r9,r9,r4
   8c29c:	1808d43a 	srli	r4,r3,16
   8c2a0:	1806943a 	slli	r3,r3,16
   8c2a4:	10bfffcc 	andi	r2,r2,65535
   8c2a8:	2253883a 	add	r9,r4,r9
   8c2ac:	1887883a 	add	r3,r3,r2
   8c2b0:	ba403836 	bltu	r23,r9,8c394 <__divdf3+0x66c>
   8c2b4:	ba403626 	beq	r23,r9,8c390 <__divdf3+0x668>
   8c2b8:	42000054 	ori	r8,r8,1
   8c2bc:	a880ffc4 	addi	r2,r21,1023
   8c2c0:	00bf570e 	bge	zero,r2,8c020 <__alt_data_end+0xfffc0530>
   8c2c4:	40c001cc 	andi	r3,r8,7
   8c2c8:	18000726 	beq	r3,zero,8c2e8 <__divdf3+0x5c0>
   8c2cc:	40c003cc 	andi	r3,r8,15
   8c2d0:	01000104 	movi	r4,4
   8c2d4:	19000426 	beq	r3,r4,8c2e8 <__divdf3+0x5c0>
   8c2d8:	4107883a 	add	r3,r8,r4
   8c2dc:	1a11803a 	cmpltu	r8,r3,r8
   8c2e0:	8a23883a 	add	r17,r17,r8
   8c2e4:	1811883a 	mov	r8,r3
   8c2e8:	88c0402c 	andhi	r3,r17,256
   8c2ec:	18000426 	beq	r3,zero,8c300 <__divdf3+0x5d8>
   8c2f0:	00ffc034 	movhi	r3,65280
   8c2f4:	18ffffc4 	addi	r3,r3,-1
   8c2f8:	a8810004 	addi	r2,r21,1024
   8c2fc:	88e2703a 	and	r17,r17,r3
   8c300:	00c1ff84 	movi	r3,2046
   8c304:	18bee316 	blt	r3,r2,8be94 <__alt_data_end+0xfffc03a4>
   8c308:	8824977a 	slli	r18,r17,29
   8c30c:	4010d0fa 	srli	r8,r8,3
   8c310:	8822927a 	slli	r17,r17,9
   8c314:	1081ffcc 	andi	r2,r2,2047
   8c318:	9224b03a 	or	r18,r18,r8
   8c31c:	880ad33a 	srli	r5,r17,12
   8c320:	98c0004c 	andi	r3,r19,1
   8c324:	003edf06 	br	8bea4 <__alt_data_end+0xfffc03b4>
   8c328:	8080022c 	andhi	r2,r16,8
   8c32c:	10001226 	beq	r2,zero,8c378 <__divdf3+0x650>
   8c330:	8880022c 	andhi	r2,r17,8
   8c334:	1000101e 	bne	r2,zero,8c378 <__divdf3+0x650>
   8c338:	00800434 	movhi	r2,16
   8c33c:	89400234 	orhi	r5,r17,8
   8c340:	10bfffc4 	addi	r2,r2,-1
   8c344:	b007883a 	mov	r3,r22
   8c348:	288a703a 	and	r5,r5,r2
   8c34c:	4025883a 	mov	r18,r8
   8c350:	003f3106 	br	8c018 <__alt_data_end+0xfffc0528>
   8c354:	008000c4 	movi	r2,3
   8c358:	3880a626 	beq	r7,r2,8c5f4 <__divdf3+0x8cc>
   8c35c:	00800044 	movi	r2,1
   8c360:	3880521e 	bne	r7,r2,8c4ac <__divdf3+0x784>
   8c364:	b807883a 	mov	r3,r23
   8c368:	0005883a 	mov	r2,zero
   8c36c:	000b883a 	mov	r5,zero
   8c370:	0025883a 	mov	r18,zero
   8c374:	003ecb06 	br	8bea4 <__alt_data_end+0xfffc03b4>
   8c378:	00800434 	movhi	r2,16
   8c37c:	81400234 	orhi	r5,r16,8
   8c380:	10bfffc4 	addi	r2,r2,-1
   8c384:	a007883a 	mov	r3,r20
   8c388:	288a703a 	and	r5,r5,r2
   8c38c:	003f2206 	br	8c018 <__alt_data_end+0xfffc0528>
   8c390:	183fca26 	beq	r3,zero,8c2bc <__alt_data_end+0xfffc07cc>
   8c394:	e5ef883a 	add	r23,fp,r23
   8c398:	40bfffc4 	addi	r2,r8,-1
   8c39c:	bf00392e 	bgeu	r23,fp,8c484 <__divdf3+0x75c>
   8c3a0:	1011883a 	mov	r8,r2
   8c3a4:	ba7fc41e 	bne	r23,r9,8c2b8 <__alt_data_end+0xfffc07c8>
   8c3a8:	b0ffc31e 	bne	r22,r3,8c2b8 <__alt_data_end+0xfffc07c8>
   8c3ac:	003fc306 	br	8c2bc <__alt_data_end+0xfffc07cc>
   8c3b0:	143ff604 	addi	r16,r2,-40
   8c3b4:	9c20983a 	sll	r16,r19,r16
   8c3b8:	0025883a 	mov	r18,zero
   8c3bc:	003ee206 	br	8bf48 <__alt_data_end+0xfffc0458>
   8c3c0:	d9800315 	stw	r6,12(sp)
   8c3c4:	d9c00215 	stw	r7,8(sp)
   8c3c8:	008da800 	call	8da80 <__clzsi2>
   8c3cc:	10800804 	addi	r2,r2,32
   8c3d0:	d9c00217 	ldw	r7,8(sp)
   8c3d4:	d9800317 	ldw	r6,12(sp)
   8c3d8:	003ed106 	br	8bf20 <__alt_data_end+0xfffc0430>
   8c3dc:	147ff604 	addi	r17,r2,-40
   8c3e0:	3462983a 	sll	r17,r6,r17
   8c3e4:	0011883a 	mov	r8,zero
   8c3e8:	003ef506 	br	8bfc0 <__alt_data_end+0xfffc04d0>
   8c3ec:	3009883a 	mov	r4,r6
   8c3f0:	d9800315 	stw	r6,12(sp)
   8c3f4:	da400115 	stw	r9,4(sp)
   8c3f8:	008da800 	call	8da80 <__clzsi2>
   8c3fc:	10800804 	addi	r2,r2,32
   8c400:	da400117 	ldw	r9,4(sp)
   8c404:	d9800317 	ldw	r6,12(sp)
   8c408:	003ee306 	br	8bf98 <__alt_data_end+0xfffc04a8>
   8c40c:	85a1883a 	add	r16,r16,r22
   8c410:	8585803a 	cmpltu	r2,r16,r22
   8c414:	1705883a 	add	r2,r2,fp
   8c418:	14a5883a 	add	r18,r2,r18
   8c41c:	88bfffc4 	addi	r2,r17,-1
   8c420:	e4800c2e 	bgeu	fp,r18,8c454 <__divdf3+0x72c>
   8c424:	90c03e36 	bltu	r18,r3,8c520 <__divdf3+0x7f8>
   8c428:	1c806926 	beq	r3,r18,8c5d0 <__divdf3+0x8a8>
   8c42c:	90c7c83a 	sub	r3,r18,r3
   8c430:	1023883a 	mov	r17,r2
   8c434:	003f5206 	br	8c180 <__alt_data_end+0xfffc0690>
   8c438:	923f0436 	bltu	r18,r8,8c04c <__alt_data_end+0xfffc055c>
   8c43c:	800897fa 	slli	r4,r16,31
   8c440:	9004d07a 	srli	r2,r18,1
   8c444:	8006d07a 	srli	r3,r16,1
   8c448:	902097fa 	slli	r16,r18,31
   8c44c:	20a4b03a 	or	r18,r4,r2
   8c450:	003f0106 	br	8c058 <__alt_data_end+0xfffc0568>
   8c454:	e4bff51e 	bne	fp,r18,8c42c <__alt_data_end+0xfffc093c>
   8c458:	85bff22e 	bgeu	r16,r22,8c424 <__alt_data_end+0xfffc0934>
   8c45c:	e0c7c83a 	sub	r3,fp,r3
   8c460:	1023883a 	mov	r17,r2
   8c464:	003f4606 	br	8c180 <__alt_data_end+0xfffc0690>
   8c468:	100f883a 	mov	r7,r2
   8c46c:	003f2b06 	br	8c11c <__alt_data_end+0xfffc062c>
   8c470:	180d883a 	mov	r6,r3
   8c474:	003f1306 	br	8c0c4 <__alt_data_end+0xfffc05d4>
   8c478:	813fe436 	bltu	r16,r4,8c40c <__alt_data_end+0xfffc091c>
   8c47c:	0007883a 	mov	r3,zero
   8c480:	003f3f06 	br	8c180 <__alt_data_end+0xfffc0690>
   8c484:	ba402c36 	bltu	r23,r9,8c538 <__divdf3+0x810>
   8c488:	4dc05426 	beq	r9,r23,8c5dc <__divdf3+0x8b4>
   8c48c:	1011883a 	mov	r8,r2
   8c490:	003f8906 	br	8c2b8 <__alt_data_end+0xfffc07c8>
   8c494:	023fffc4 	movi	r8,-1
   8c498:	003f8806 	br	8c2bc <__alt_data_end+0xfffc07cc>
   8c49c:	1811883a 	mov	r8,r3
   8c4a0:	003f5406 	br	8c1f4 <__alt_data_end+0xfffc0704>
   8c4a4:	1025883a 	mov	r18,r2
   8c4a8:	003f6d06 	br	8c260 <__alt_data_end+0xfffc0770>
   8c4ac:	b827883a 	mov	r19,r23
   8c4b0:	003f8206 	br	8c2bc <__alt_data_end+0xfffc07cc>
   8c4b4:	010007c4 	movi	r4,31
   8c4b8:	20c02616 	blt	r4,r3,8c554 <__divdf3+0x82c>
   8c4bc:	00800804 	movi	r2,32
   8c4c0:	10c5c83a 	sub	r2,r2,r3
   8c4c4:	888a983a 	sll	r5,r17,r2
   8c4c8:	40c8d83a 	srl	r4,r8,r3
   8c4cc:	4084983a 	sll	r2,r8,r2
   8c4d0:	88e2d83a 	srl	r17,r17,r3
   8c4d4:	2906b03a 	or	r3,r5,r4
   8c4d8:	1004c03a 	cmpne	r2,r2,zero
   8c4dc:	1886b03a 	or	r3,r3,r2
   8c4e0:	188001cc 	andi	r2,r3,7
   8c4e4:	10000726 	beq	r2,zero,8c504 <__divdf3+0x7dc>
   8c4e8:	188003cc 	andi	r2,r3,15
   8c4ec:	01000104 	movi	r4,4
   8c4f0:	11000426 	beq	r2,r4,8c504 <__divdf3+0x7dc>
   8c4f4:	1805883a 	mov	r2,r3
   8c4f8:	10c00104 	addi	r3,r2,4
   8c4fc:	1885803a 	cmpltu	r2,r3,r2
   8c500:	88a3883a 	add	r17,r17,r2
   8c504:	8880202c 	andhi	r2,r17,128
   8c508:	10002726 	beq	r2,zero,8c5a8 <__divdf3+0x880>
   8c50c:	98c0004c 	andi	r3,r19,1
   8c510:	00800044 	movi	r2,1
   8c514:	000b883a 	mov	r5,zero
   8c518:	0025883a 	mov	r18,zero
   8c51c:	003e6106 	br	8bea4 <__alt_data_end+0xfffc03b4>
   8c520:	85a1883a 	add	r16,r16,r22
   8c524:	8585803a 	cmpltu	r2,r16,r22
   8c528:	1705883a 	add	r2,r2,fp
   8c52c:	14a5883a 	add	r18,r2,r18
   8c530:	8c7fff84 	addi	r17,r17,-2
   8c534:	003f1106 	br	8c17c <__alt_data_end+0xfffc068c>
   8c538:	b589883a 	add	r4,r22,r22
   8c53c:	25ad803a 	cmpltu	r22,r4,r22
   8c540:	b739883a 	add	fp,r22,fp
   8c544:	40bfff84 	addi	r2,r8,-2
   8c548:	bf2f883a 	add	r23,r23,fp
   8c54c:	202d883a 	mov	r22,r4
   8c550:	003f9306 	br	8c3a0 <__alt_data_end+0xfffc08b0>
   8c554:	013ff844 	movi	r4,-31
   8c558:	2085c83a 	sub	r2,r4,r2
   8c55c:	8888d83a 	srl	r4,r17,r2
   8c560:	00800804 	movi	r2,32
   8c564:	18802126 	beq	r3,r2,8c5ec <__divdf3+0x8c4>
   8c568:	00801004 	movi	r2,64
   8c56c:	10c5c83a 	sub	r2,r2,r3
   8c570:	8884983a 	sll	r2,r17,r2
   8c574:	1204b03a 	or	r2,r2,r8
   8c578:	1004c03a 	cmpne	r2,r2,zero
   8c57c:	2084b03a 	or	r2,r4,r2
   8c580:	144001cc 	andi	r17,r2,7
   8c584:	88000d1e 	bne	r17,zero,8c5bc <__divdf3+0x894>
   8c588:	000b883a 	mov	r5,zero
   8c58c:	1024d0fa 	srli	r18,r2,3
   8c590:	98c0004c 	andi	r3,r19,1
   8c594:	0005883a 	mov	r2,zero
   8c598:	9464b03a 	or	r18,r18,r17
   8c59c:	003e4106 	br	8bea4 <__alt_data_end+0xfffc03b4>
   8c5a0:	1007883a 	mov	r3,r2
   8c5a4:	0023883a 	mov	r17,zero
   8c5a8:	880a927a 	slli	r5,r17,9
   8c5ac:	1805883a 	mov	r2,r3
   8c5b0:	8822977a 	slli	r17,r17,29
   8c5b4:	280ad33a 	srli	r5,r5,12
   8c5b8:	003ff406 	br	8c58c <__alt_data_end+0xfffc0a9c>
   8c5bc:	10c003cc 	andi	r3,r2,15
   8c5c0:	01000104 	movi	r4,4
   8c5c4:	193ff626 	beq	r3,r4,8c5a0 <__alt_data_end+0xfffc0ab0>
   8c5c8:	0023883a 	mov	r17,zero
   8c5cc:	003fca06 	br	8c4f8 <__alt_data_end+0xfffc0a08>
   8c5d0:	813fd336 	bltu	r16,r4,8c520 <__alt_data_end+0xfffc0a30>
   8c5d4:	1023883a 	mov	r17,r2
   8c5d8:	003fa806 	br	8c47c <__alt_data_end+0xfffc098c>
   8c5dc:	b0ffd636 	bltu	r22,r3,8c538 <__alt_data_end+0xfffc0a48>
   8c5e0:	1011883a 	mov	r8,r2
   8c5e4:	b0ff341e 	bne	r22,r3,8c2b8 <__alt_data_end+0xfffc07c8>
   8c5e8:	003f3406 	br	8c2bc <__alt_data_end+0xfffc07cc>
   8c5ec:	0005883a 	mov	r2,zero
   8c5f0:	003fe006 	br	8c574 <__alt_data_end+0xfffc0a84>
   8c5f4:	00800434 	movhi	r2,16
   8c5f8:	89400234 	orhi	r5,r17,8
   8c5fc:	10bfffc4 	addi	r2,r2,-1
   8c600:	b807883a 	mov	r3,r23
   8c604:	288a703a 	and	r5,r5,r2
   8c608:	4025883a 	mov	r18,r8
   8c60c:	003e8206 	br	8c018 <__alt_data_end+0xfffc0528>

0008c610 <__eqdf2>:
   8c610:	2804d53a 	srli	r2,r5,20
   8c614:	3806d53a 	srli	r3,r7,20
   8c618:	02000434 	movhi	r8,16
   8c61c:	423fffc4 	addi	r8,r8,-1
   8c620:	1081ffcc 	andi	r2,r2,2047
   8c624:	0281ffc4 	movi	r10,2047
   8c628:	2a12703a 	and	r9,r5,r8
   8c62c:	18c1ffcc 	andi	r3,r3,2047
   8c630:	3a10703a 	and	r8,r7,r8
   8c634:	280ad7fa 	srli	r5,r5,31
   8c638:	380ed7fa 	srli	r7,r7,31
   8c63c:	12801026 	beq	r2,r10,8c680 <__eqdf2+0x70>
   8c640:	0281ffc4 	movi	r10,2047
   8c644:	1a800a26 	beq	r3,r10,8c670 <__eqdf2+0x60>
   8c648:	10c00226 	beq	r2,r3,8c654 <__eqdf2+0x44>
   8c64c:	00800044 	movi	r2,1
   8c650:	f800283a 	ret
   8c654:	4a3ffd1e 	bne	r9,r8,8c64c <__alt_data_end+0xfffc0b5c>
   8c658:	21bffc1e 	bne	r4,r6,8c64c <__alt_data_end+0xfffc0b5c>
   8c65c:	29c00c26 	beq	r5,r7,8c690 <__eqdf2+0x80>
   8c660:	103ffa1e 	bne	r2,zero,8c64c <__alt_data_end+0xfffc0b5c>
   8c664:	2244b03a 	or	r2,r4,r9
   8c668:	1004c03a 	cmpne	r2,r2,zero
   8c66c:	f800283a 	ret
   8c670:	3214b03a 	or	r10,r6,r8
   8c674:	503ff426 	beq	r10,zero,8c648 <__alt_data_end+0xfffc0b58>
   8c678:	00800044 	movi	r2,1
   8c67c:	f800283a 	ret
   8c680:	2254b03a 	or	r10,r4,r9
   8c684:	503fee26 	beq	r10,zero,8c640 <__alt_data_end+0xfffc0b50>
   8c688:	00800044 	movi	r2,1
   8c68c:	f800283a 	ret
   8c690:	0005883a 	mov	r2,zero
   8c694:	f800283a 	ret

0008c698 <__gedf2>:
   8c698:	2804d53a 	srli	r2,r5,20
   8c69c:	3806d53a 	srli	r3,r7,20
   8c6a0:	02000434 	movhi	r8,16
   8c6a4:	423fffc4 	addi	r8,r8,-1
   8c6a8:	1081ffcc 	andi	r2,r2,2047
   8c6ac:	0241ffc4 	movi	r9,2047
   8c6b0:	2a14703a 	and	r10,r5,r8
   8c6b4:	18c1ffcc 	andi	r3,r3,2047
   8c6b8:	3a10703a 	and	r8,r7,r8
   8c6bc:	280ad7fa 	srli	r5,r5,31
   8c6c0:	380ed7fa 	srli	r7,r7,31
   8c6c4:	12401d26 	beq	r2,r9,8c73c <__gedf2+0xa4>
   8c6c8:	0241ffc4 	movi	r9,2047
   8c6cc:	1a401226 	beq	r3,r9,8c718 <__gedf2+0x80>
   8c6d0:	1000081e 	bne	r2,zero,8c6f4 <__gedf2+0x5c>
   8c6d4:	2296b03a 	or	r11,r4,r10
   8c6d8:	5813003a 	cmpeq	r9,r11,zero
   8c6dc:	1800091e 	bne	r3,zero,8c704 <__gedf2+0x6c>
   8c6e0:	3218b03a 	or	r12,r6,r8
   8c6e4:	6000071e 	bne	r12,zero,8c704 <__gedf2+0x6c>
   8c6e8:	0005883a 	mov	r2,zero
   8c6ec:	5800101e 	bne	r11,zero,8c730 <__gedf2+0x98>
   8c6f0:	f800283a 	ret
   8c6f4:	18000c1e 	bne	r3,zero,8c728 <__gedf2+0x90>
   8c6f8:	3212b03a 	or	r9,r6,r8
   8c6fc:	48000c26 	beq	r9,zero,8c730 <__gedf2+0x98>
   8c700:	0013883a 	mov	r9,zero
   8c704:	39c03fcc 	andi	r7,r7,255
   8c708:	48000826 	beq	r9,zero,8c72c <__gedf2+0x94>
   8c70c:	38000926 	beq	r7,zero,8c734 <__gedf2+0x9c>
   8c710:	00800044 	movi	r2,1
   8c714:	f800283a 	ret
   8c718:	3212b03a 	or	r9,r6,r8
   8c71c:	483fec26 	beq	r9,zero,8c6d0 <__alt_data_end+0xfffc0be0>
   8c720:	00bfff84 	movi	r2,-2
   8c724:	f800283a 	ret
   8c728:	39c03fcc 	andi	r7,r7,255
   8c72c:	29c00626 	beq	r5,r7,8c748 <__gedf2+0xb0>
   8c730:	283ff726 	beq	r5,zero,8c710 <__alt_data_end+0xfffc0c20>
   8c734:	00bfffc4 	movi	r2,-1
   8c738:	f800283a 	ret
   8c73c:	2292b03a 	or	r9,r4,r10
   8c740:	483fe126 	beq	r9,zero,8c6c8 <__alt_data_end+0xfffc0bd8>
   8c744:	003ff606 	br	8c720 <__alt_data_end+0xfffc0c30>
   8c748:	18bff916 	blt	r3,r2,8c730 <__alt_data_end+0xfffc0c40>
   8c74c:	10c00316 	blt	r2,r3,8c75c <__gedf2+0xc4>
   8c750:	42bff736 	bltu	r8,r10,8c730 <__alt_data_end+0xfffc0c40>
   8c754:	52000326 	beq	r10,r8,8c764 <__gedf2+0xcc>
   8c758:	5200042e 	bgeu	r10,r8,8c76c <__gedf2+0xd4>
   8c75c:	283fec1e 	bne	r5,zero,8c710 <__alt_data_end+0xfffc0c20>
   8c760:	003ff406 	br	8c734 <__alt_data_end+0xfffc0c44>
   8c764:	313ff236 	bltu	r6,r4,8c730 <__alt_data_end+0xfffc0c40>
   8c768:	21bffc36 	bltu	r4,r6,8c75c <__alt_data_end+0xfffc0c6c>
   8c76c:	0005883a 	mov	r2,zero
   8c770:	f800283a 	ret

0008c774 <__ledf2>:
   8c774:	2804d53a 	srli	r2,r5,20
   8c778:	3810d53a 	srli	r8,r7,20
   8c77c:	00c00434 	movhi	r3,16
   8c780:	18ffffc4 	addi	r3,r3,-1
   8c784:	1081ffcc 	andi	r2,r2,2047
   8c788:	0241ffc4 	movi	r9,2047
   8c78c:	28d4703a 	and	r10,r5,r3
   8c790:	4201ffcc 	andi	r8,r8,2047
   8c794:	38c6703a 	and	r3,r7,r3
   8c798:	280ad7fa 	srli	r5,r5,31
   8c79c:	380ed7fa 	srli	r7,r7,31
   8c7a0:	12401f26 	beq	r2,r9,8c820 <__ledf2+0xac>
   8c7a4:	0241ffc4 	movi	r9,2047
   8c7a8:	42401426 	beq	r8,r9,8c7fc <__ledf2+0x88>
   8c7ac:	1000091e 	bne	r2,zero,8c7d4 <__ledf2+0x60>
   8c7b0:	2296b03a 	or	r11,r4,r10
   8c7b4:	5813003a 	cmpeq	r9,r11,zero
   8c7b8:	29403fcc 	andi	r5,r5,255
   8c7bc:	40000a1e 	bne	r8,zero,8c7e8 <__ledf2+0x74>
   8c7c0:	30d8b03a 	or	r12,r6,r3
   8c7c4:	6000081e 	bne	r12,zero,8c7e8 <__ledf2+0x74>
   8c7c8:	0005883a 	mov	r2,zero
   8c7cc:	5800111e 	bne	r11,zero,8c814 <__ledf2+0xa0>
   8c7d0:	f800283a 	ret
   8c7d4:	29403fcc 	andi	r5,r5,255
   8c7d8:	40000c1e 	bne	r8,zero,8c80c <__ledf2+0x98>
   8c7dc:	30d2b03a 	or	r9,r6,r3
   8c7e0:	48000c26 	beq	r9,zero,8c814 <__ledf2+0xa0>
   8c7e4:	0013883a 	mov	r9,zero
   8c7e8:	39c03fcc 	andi	r7,r7,255
   8c7ec:	48000826 	beq	r9,zero,8c810 <__ledf2+0x9c>
   8c7f0:	38001126 	beq	r7,zero,8c838 <__ledf2+0xc4>
   8c7f4:	00800044 	movi	r2,1
   8c7f8:	f800283a 	ret
   8c7fc:	30d2b03a 	or	r9,r6,r3
   8c800:	483fea26 	beq	r9,zero,8c7ac <__alt_data_end+0xfffc0cbc>
   8c804:	00800084 	movi	r2,2
   8c808:	f800283a 	ret
   8c80c:	39c03fcc 	andi	r7,r7,255
   8c810:	39400726 	beq	r7,r5,8c830 <__ledf2+0xbc>
   8c814:	2800081e 	bne	r5,zero,8c838 <__ledf2+0xc4>
   8c818:	00800044 	movi	r2,1
   8c81c:	f800283a 	ret
   8c820:	2292b03a 	or	r9,r4,r10
   8c824:	483fdf26 	beq	r9,zero,8c7a4 <__alt_data_end+0xfffc0cb4>
   8c828:	00800084 	movi	r2,2
   8c82c:	f800283a 	ret
   8c830:	4080030e 	bge	r8,r2,8c840 <__ledf2+0xcc>
   8c834:	383fef26 	beq	r7,zero,8c7f4 <__alt_data_end+0xfffc0d04>
   8c838:	00bfffc4 	movi	r2,-1
   8c83c:	f800283a 	ret
   8c840:	123feb16 	blt	r2,r8,8c7f0 <__alt_data_end+0xfffc0d00>
   8c844:	1abff336 	bltu	r3,r10,8c814 <__alt_data_end+0xfffc0d24>
   8c848:	50c00326 	beq	r10,r3,8c858 <__ledf2+0xe4>
   8c84c:	50c0042e 	bgeu	r10,r3,8c860 <__ledf2+0xec>
   8c850:	283fe81e 	bne	r5,zero,8c7f4 <__alt_data_end+0xfffc0d04>
   8c854:	003ff806 	br	8c838 <__alt_data_end+0xfffc0d48>
   8c858:	313fee36 	bltu	r6,r4,8c814 <__alt_data_end+0xfffc0d24>
   8c85c:	21bffc36 	bltu	r4,r6,8c850 <__alt_data_end+0xfffc0d60>
   8c860:	0005883a 	mov	r2,zero
   8c864:	f800283a 	ret

0008c868 <__muldf3>:
   8c868:	defff304 	addi	sp,sp,-52
   8c86c:	2804d53a 	srli	r2,r5,20
   8c870:	dd800915 	stw	r22,36(sp)
   8c874:	282cd7fa 	srli	r22,r5,31
   8c878:	dc000315 	stw	r16,12(sp)
   8c87c:	04000434 	movhi	r16,16
   8c880:	dd400815 	stw	r21,32(sp)
   8c884:	dc800515 	stw	r18,20(sp)
   8c888:	843fffc4 	addi	r16,r16,-1
   8c88c:	dfc00c15 	stw	ra,48(sp)
   8c890:	df000b15 	stw	fp,44(sp)
   8c894:	ddc00a15 	stw	r23,40(sp)
   8c898:	dd000715 	stw	r20,28(sp)
   8c89c:	dcc00615 	stw	r19,24(sp)
   8c8a0:	dc400415 	stw	r17,16(sp)
   8c8a4:	1481ffcc 	andi	r18,r2,2047
   8c8a8:	2c20703a 	and	r16,r5,r16
   8c8ac:	b02b883a 	mov	r21,r22
   8c8b0:	b2403fcc 	andi	r9,r22,255
   8c8b4:	90006026 	beq	r18,zero,8ca38 <__muldf3+0x1d0>
   8c8b8:	0081ffc4 	movi	r2,2047
   8c8bc:	2029883a 	mov	r20,r4
   8c8c0:	90803626 	beq	r18,r2,8c99c <__muldf3+0x134>
   8c8c4:	80800434 	orhi	r2,r16,16
   8c8c8:	100490fa 	slli	r2,r2,3
   8c8cc:	2020d77a 	srli	r16,r4,29
   8c8d0:	202890fa 	slli	r20,r4,3
   8c8d4:	94bf0044 	addi	r18,r18,-1023
   8c8d8:	80a0b03a 	or	r16,r16,r2
   8c8dc:	0027883a 	mov	r19,zero
   8c8e0:	0039883a 	mov	fp,zero
   8c8e4:	3804d53a 	srli	r2,r7,20
   8c8e8:	382ed7fa 	srli	r23,r7,31
   8c8ec:	04400434 	movhi	r17,16
   8c8f0:	8c7fffc4 	addi	r17,r17,-1
   8c8f4:	1081ffcc 	andi	r2,r2,2047
   8c8f8:	3011883a 	mov	r8,r6
   8c8fc:	3c62703a 	and	r17,r7,r17
   8c900:	ba803fcc 	andi	r10,r23,255
   8c904:	10006d26 	beq	r2,zero,8cabc <__muldf3+0x254>
   8c908:	00c1ffc4 	movi	r3,2047
   8c90c:	10c06526 	beq	r2,r3,8caa4 <__muldf3+0x23c>
   8c910:	88c00434 	orhi	r3,r17,16
   8c914:	180690fa 	slli	r3,r3,3
   8c918:	3022d77a 	srli	r17,r6,29
   8c91c:	301090fa 	slli	r8,r6,3
   8c920:	10bf0044 	addi	r2,r2,-1023
   8c924:	88e2b03a 	or	r17,r17,r3
   8c928:	000b883a 	mov	r5,zero
   8c92c:	9085883a 	add	r2,r18,r2
   8c930:	2cc8b03a 	or	r4,r5,r19
   8c934:	00c003c4 	movi	r3,15
   8c938:	bdacf03a 	xor	r22,r23,r22
   8c93c:	12c00044 	addi	r11,r2,1
   8c940:	19009936 	bltu	r3,r4,8cba8 <__muldf3+0x340>
   8c944:	200890ba 	slli	r4,r4,2
   8c948:	00c00274 	movhi	r3,9
   8c94c:	18f25704 	addi	r3,r3,-13988
   8c950:	20c9883a 	add	r4,r4,r3
   8c954:	20c00017 	ldw	r3,0(r4)
   8c958:	1800683a 	jmp	r3
   8c95c:	0008cba8 	cmpgeui	zero,zero,9006
   8c960:	0008c9bc 	xorhi	zero,zero,8998
   8c964:	0008c9bc 	xorhi	zero,zero,8998
   8c968:	0008c9b8 	rdprs	zero,zero,8998
   8c96c:	0008cb84 	movi	zero,9006
   8c970:	0008cb84 	movi	zero,9006
   8c974:	0008cb6c 	andhi	zero,zero,9005
   8c978:	0008c9b8 	rdprs	zero,zero,8998
   8c97c:	0008cb84 	movi	zero,9006
   8c980:	0008cb6c 	andhi	zero,zero,9005
   8c984:	0008cb84 	movi	zero,9006
   8c988:	0008c9b8 	rdprs	zero,zero,8998
   8c98c:	0008cb94 	movui	zero,9006
   8c990:	0008cb94 	movui	zero,9006
   8c994:	0008cb94 	movui	zero,9006
   8c998:	0008cdb0 	cmpltui	zero,zero,9014
   8c99c:	2404b03a 	or	r2,r4,r16
   8c9a0:	10006f1e 	bne	r2,zero,8cb60 <__muldf3+0x2f8>
   8c9a4:	04c00204 	movi	r19,8
   8c9a8:	0021883a 	mov	r16,zero
   8c9ac:	0029883a 	mov	r20,zero
   8c9b0:	07000084 	movi	fp,2
   8c9b4:	003fcb06 	br	8c8e4 <__alt_data_end+0xfffc0df4>
   8c9b8:	502d883a 	mov	r22,r10
   8c9bc:	00800084 	movi	r2,2
   8c9c0:	28805726 	beq	r5,r2,8cb20 <__muldf3+0x2b8>
   8c9c4:	008000c4 	movi	r2,3
   8c9c8:	28816626 	beq	r5,r2,8cf64 <__muldf3+0x6fc>
   8c9cc:	00800044 	movi	r2,1
   8c9d0:	2881411e 	bne	r5,r2,8ced8 <__muldf3+0x670>
   8c9d4:	b02b883a 	mov	r21,r22
   8c9d8:	0005883a 	mov	r2,zero
   8c9dc:	000b883a 	mov	r5,zero
   8c9e0:	0029883a 	mov	r20,zero
   8c9e4:	1004953a 	slli	r2,r2,20
   8c9e8:	a8c03fcc 	andi	r3,r21,255
   8c9ec:	04400434 	movhi	r17,16
   8c9f0:	8c7fffc4 	addi	r17,r17,-1
   8c9f4:	180697fa 	slli	r3,r3,31
   8c9f8:	2c4a703a 	and	r5,r5,r17
   8c9fc:	288ab03a 	or	r5,r5,r2
   8ca00:	28c6b03a 	or	r3,r5,r3
   8ca04:	a005883a 	mov	r2,r20
   8ca08:	dfc00c17 	ldw	ra,48(sp)
   8ca0c:	df000b17 	ldw	fp,44(sp)
   8ca10:	ddc00a17 	ldw	r23,40(sp)
   8ca14:	dd800917 	ldw	r22,36(sp)
   8ca18:	dd400817 	ldw	r21,32(sp)
   8ca1c:	dd000717 	ldw	r20,28(sp)
   8ca20:	dcc00617 	ldw	r19,24(sp)
   8ca24:	dc800517 	ldw	r18,20(sp)
   8ca28:	dc400417 	ldw	r17,16(sp)
   8ca2c:	dc000317 	ldw	r16,12(sp)
   8ca30:	dec00d04 	addi	sp,sp,52
   8ca34:	f800283a 	ret
   8ca38:	2404b03a 	or	r2,r4,r16
   8ca3c:	2027883a 	mov	r19,r4
   8ca40:	10004226 	beq	r2,zero,8cb4c <__muldf3+0x2e4>
   8ca44:	8000fc26 	beq	r16,zero,8ce38 <__muldf3+0x5d0>
   8ca48:	8009883a 	mov	r4,r16
   8ca4c:	d9800215 	stw	r6,8(sp)
   8ca50:	d9c00015 	stw	r7,0(sp)
   8ca54:	da400115 	stw	r9,4(sp)
   8ca58:	008da800 	call	8da80 <__clzsi2>
   8ca5c:	d9800217 	ldw	r6,8(sp)
   8ca60:	d9c00017 	ldw	r7,0(sp)
   8ca64:	da400117 	ldw	r9,4(sp)
   8ca68:	113ffd44 	addi	r4,r2,-11
   8ca6c:	00c00704 	movi	r3,28
   8ca70:	1900ed16 	blt	r3,r4,8ce28 <__muldf3+0x5c0>
   8ca74:	00c00744 	movi	r3,29
   8ca78:	147ffe04 	addi	r17,r2,-8
   8ca7c:	1907c83a 	sub	r3,r3,r4
   8ca80:	8460983a 	sll	r16,r16,r17
   8ca84:	98c6d83a 	srl	r3,r19,r3
   8ca88:	9c68983a 	sll	r20,r19,r17
   8ca8c:	1c20b03a 	or	r16,r3,r16
   8ca90:	1080fcc4 	addi	r2,r2,1011
   8ca94:	00a5c83a 	sub	r18,zero,r2
   8ca98:	0027883a 	mov	r19,zero
   8ca9c:	0039883a 	mov	fp,zero
   8caa0:	003f9006 	br	8c8e4 <__alt_data_end+0xfffc0df4>
   8caa4:	3446b03a 	or	r3,r6,r17
   8caa8:	1800261e 	bne	r3,zero,8cb44 <__muldf3+0x2dc>
   8caac:	0023883a 	mov	r17,zero
   8cab0:	0011883a 	mov	r8,zero
   8cab4:	01400084 	movi	r5,2
   8cab8:	003f9c06 	br	8c92c <__alt_data_end+0xfffc0e3c>
   8cabc:	3446b03a 	or	r3,r6,r17
   8cac0:	18001c26 	beq	r3,zero,8cb34 <__muldf3+0x2cc>
   8cac4:	8800ce26 	beq	r17,zero,8ce00 <__muldf3+0x598>
   8cac8:	8809883a 	mov	r4,r17
   8cacc:	d9800215 	stw	r6,8(sp)
   8cad0:	da400115 	stw	r9,4(sp)
   8cad4:	da800015 	stw	r10,0(sp)
   8cad8:	008da800 	call	8da80 <__clzsi2>
   8cadc:	d9800217 	ldw	r6,8(sp)
   8cae0:	da400117 	ldw	r9,4(sp)
   8cae4:	da800017 	ldw	r10,0(sp)
   8cae8:	113ffd44 	addi	r4,r2,-11
   8caec:	00c00704 	movi	r3,28
   8caf0:	1900bf16 	blt	r3,r4,8cdf0 <__muldf3+0x588>
   8caf4:	00c00744 	movi	r3,29
   8caf8:	123ffe04 	addi	r8,r2,-8
   8cafc:	1907c83a 	sub	r3,r3,r4
   8cb00:	8a22983a 	sll	r17,r17,r8
   8cb04:	30c6d83a 	srl	r3,r6,r3
   8cb08:	3210983a 	sll	r8,r6,r8
   8cb0c:	1c62b03a 	or	r17,r3,r17
   8cb10:	1080fcc4 	addi	r2,r2,1011
   8cb14:	0085c83a 	sub	r2,zero,r2
   8cb18:	000b883a 	mov	r5,zero
   8cb1c:	003f8306 	br	8c92c <__alt_data_end+0xfffc0e3c>
   8cb20:	b02b883a 	mov	r21,r22
   8cb24:	0081ffc4 	movi	r2,2047
   8cb28:	000b883a 	mov	r5,zero
   8cb2c:	0029883a 	mov	r20,zero
   8cb30:	003fac06 	br	8c9e4 <__alt_data_end+0xfffc0ef4>
   8cb34:	0023883a 	mov	r17,zero
   8cb38:	0011883a 	mov	r8,zero
   8cb3c:	01400044 	movi	r5,1
   8cb40:	003f7a06 	br	8c92c <__alt_data_end+0xfffc0e3c>
   8cb44:	014000c4 	movi	r5,3
   8cb48:	003f7806 	br	8c92c <__alt_data_end+0xfffc0e3c>
   8cb4c:	04c00104 	movi	r19,4
   8cb50:	0021883a 	mov	r16,zero
   8cb54:	0029883a 	mov	r20,zero
   8cb58:	07000044 	movi	fp,1
   8cb5c:	003f6106 	br	8c8e4 <__alt_data_end+0xfffc0df4>
   8cb60:	04c00304 	movi	r19,12
   8cb64:	070000c4 	movi	fp,3
   8cb68:	003f5e06 	br	8c8e4 <__alt_data_end+0xfffc0df4>
   8cb6c:	01400434 	movhi	r5,16
   8cb70:	002b883a 	mov	r21,zero
   8cb74:	297fffc4 	addi	r5,r5,-1
   8cb78:	053fffc4 	movi	r20,-1
   8cb7c:	0081ffc4 	movi	r2,2047
   8cb80:	003f9806 	br	8c9e4 <__alt_data_end+0xfffc0ef4>
   8cb84:	8023883a 	mov	r17,r16
   8cb88:	a011883a 	mov	r8,r20
   8cb8c:	e00b883a 	mov	r5,fp
   8cb90:	003f8a06 	br	8c9bc <__alt_data_end+0xfffc0ecc>
   8cb94:	8023883a 	mov	r17,r16
   8cb98:	a011883a 	mov	r8,r20
   8cb9c:	482d883a 	mov	r22,r9
   8cba0:	e00b883a 	mov	r5,fp
   8cba4:	003f8506 	br	8c9bc <__alt_data_end+0xfffc0ecc>
   8cba8:	a00ad43a 	srli	r5,r20,16
   8cbac:	401ad43a 	srli	r13,r8,16
   8cbb0:	a53fffcc 	andi	r20,r20,65535
   8cbb4:	423fffcc 	andi	r8,r8,65535
   8cbb8:	4519383a 	mul	r12,r8,r20
   8cbbc:	4147383a 	mul	r3,r8,r5
   8cbc0:	6d09383a 	mul	r4,r13,r20
   8cbc4:	600cd43a 	srli	r6,r12,16
   8cbc8:	2b5d383a 	mul	r14,r5,r13
   8cbcc:	20c9883a 	add	r4,r4,r3
   8cbd0:	310d883a 	add	r6,r6,r4
   8cbd4:	30c0022e 	bgeu	r6,r3,8cbe0 <__muldf3+0x378>
   8cbd8:	00c00074 	movhi	r3,1
   8cbdc:	70dd883a 	add	r14,r14,r3
   8cbe0:	8826d43a 	srli	r19,r17,16
   8cbe4:	8bffffcc 	andi	r15,r17,65535
   8cbe8:	7d23383a 	mul	r17,r15,r20
   8cbec:	7949383a 	mul	r4,r15,r5
   8cbf0:	9d29383a 	mul	r20,r19,r20
   8cbf4:	8814d43a 	srli	r10,r17,16
   8cbf8:	3012943a 	slli	r9,r6,16
   8cbfc:	a129883a 	add	r20,r20,r4
   8cc00:	633fffcc 	andi	r12,r12,65535
   8cc04:	5515883a 	add	r10,r10,r20
   8cc08:	3006d43a 	srli	r3,r6,16
   8cc0c:	4b13883a 	add	r9,r9,r12
   8cc10:	2ccb383a 	mul	r5,r5,r19
   8cc14:	5100022e 	bgeu	r10,r4,8cc20 <__muldf3+0x3b8>
   8cc18:	01000074 	movhi	r4,1
   8cc1c:	290b883a 	add	r5,r5,r4
   8cc20:	802ad43a 	srli	r21,r16,16
   8cc24:	843fffcc 	andi	r16,r16,65535
   8cc28:	440d383a 	mul	r6,r8,r16
   8cc2c:	4565383a 	mul	r18,r8,r21
   8cc30:	8349383a 	mul	r4,r16,r13
   8cc34:	500e943a 	slli	r7,r10,16
   8cc38:	3010d43a 	srli	r8,r6,16
   8cc3c:	5028d43a 	srli	r20,r10,16
   8cc40:	2489883a 	add	r4,r4,r18
   8cc44:	8abfffcc 	andi	r10,r17,65535
   8cc48:	3a95883a 	add	r10,r7,r10
   8cc4c:	4119883a 	add	r12,r8,r4
   8cc50:	a169883a 	add	r20,r20,r5
   8cc54:	1a87883a 	add	r3,r3,r10
   8cc58:	6d5b383a 	mul	r13,r13,r21
   8cc5c:	6480022e 	bgeu	r12,r18,8cc68 <__muldf3+0x400>
   8cc60:	01000074 	movhi	r4,1
   8cc64:	691b883a 	add	r13,r13,r4
   8cc68:	7c25383a 	mul	r18,r15,r16
   8cc6c:	7d4b383a 	mul	r5,r15,r21
   8cc70:	84cf383a 	mul	r7,r16,r19
   8cc74:	901ed43a 	srli	r15,r18,16
   8cc78:	6008d43a 	srli	r4,r12,16
   8cc7c:	6010943a 	slli	r8,r12,16
   8cc80:	394f883a 	add	r7,r7,r5
   8cc84:	333fffcc 	andi	r12,r6,65535
   8cc88:	79df883a 	add	r15,r15,r7
   8cc8c:	235b883a 	add	r13,r4,r13
   8cc90:	9d63383a 	mul	r17,r19,r21
   8cc94:	4309883a 	add	r4,r8,r12
   8cc98:	7940022e 	bgeu	r15,r5,8cca4 <__muldf3+0x43c>
   8cc9c:	01400074 	movhi	r5,1
   8cca0:	8963883a 	add	r17,r17,r5
   8cca4:	780a943a 	slli	r5,r15,16
   8cca8:	91bfffcc 	andi	r6,r18,65535
   8ccac:	70c7883a 	add	r3,r14,r3
   8ccb0:	298d883a 	add	r6,r5,r6
   8ccb4:	1a8f803a 	cmpltu	r7,r3,r10
   8ccb8:	350b883a 	add	r5,r6,r20
   8ccbc:	20c7883a 	add	r3,r4,r3
   8ccc0:	3955883a 	add	r10,r7,r5
   8ccc4:	1909803a 	cmpltu	r4,r3,r4
   8ccc8:	6a91883a 	add	r8,r13,r10
   8cccc:	780cd43a 	srli	r6,r15,16
   8ccd0:	2219883a 	add	r12,r4,r8
   8ccd4:	2d0b803a 	cmpltu	r5,r5,r20
   8ccd8:	51cf803a 	cmpltu	r7,r10,r7
   8ccdc:	29ceb03a 	or	r7,r5,r7
   8cce0:	4351803a 	cmpltu	r8,r8,r13
   8cce4:	610b803a 	cmpltu	r5,r12,r4
   8cce8:	4148b03a 	or	r4,r8,r5
   8ccec:	398f883a 	add	r7,r7,r6
   8ccf0:	3909883a 	add	r4,r7,r4
   8ccf4:	1810927a 	slli	r8,r3,9
   8ccf8:	2449883a 	add	r4,r4,r17
   8ccfc:	2008927a 	slli	r4,r4,9
   8cd00:	6022d5fa 	srli	r17,r12,23
   8cd04:	1806d5fa 	srli	r3,r3,23
   8cd08:	4252b03a 	or	r9,r8,r9
   8cd0c:	600a927a 	slli	r5,r12,9
   8cd10:	4810c03a 	cmpne	r8,r9,zero
   8cd14:	2462b03a 	or	r17,r4,r17
   8cd18:	40c6b03a 	or	r3,r8,r3
   8cd1c:	8900402c 	andhi	r4,r17,256
   8cd20:	1950b03a 	or	r8,r3,r5
   8cd24:	20000726 	beq	r4,zero,8cd44 <__muldf3+0x4dc>
   8cd28:	4006d07a 	srli	r3,r8,1
   8cd2c:	880497fa 	slli	r2,r17,31
   8cd30:	4200004c 	andi	r8,r8,1
   8cd34:	8822d07a 	srli	r17,r17,1
   8cd38:	1a10b03a 	or	r8,r3,r8
   8cd3c:	1210b03a 	or	r8,r2,r8
   8cd40:	5805883a 	mov	r2,r11
   8cd44:	1140ffc4 	addi	r5,r2,1023
   8cd48:	0140440e 	bge	zero,r5,8ce5c <__muldf3+0x5f4>
   8cd4c:	40c001cc 	andi	r3,r8,7
   8cd50:	18000726 	beq	r3,zero,8cd70 <__muldf3+0x508>
   8cd54:	40c003cc 	andi	r3,r8,15
   8cd58:	01000104 	movi	r4,4
   8cd5c:	19000426 	beq	r3,r4,8cd70 <__muldf3+0x508>
   8cd60:	4107883a 	add	r3,r8,r4
   8cd64:	1a11803a 	cmpltu	r8,r3,r8
   8cd68:	8a23883a 	add	r17,r17,r8
   8cd6c:	1811883a 	mov	r8,r3
   8cd70:	88c0402c 	andhi	r3,r17,256
   8cd74:	18000426 	beq	r3,zero,8cd88 <__muldf3+0x520>
   8cd78:	11410004 	addi	r5,r2,1024
   8cd7c:	00bfc034 	movhi	r2,65280
   8cd80:	10bfffc4 	addi	r2,r2,-1
   8cd84:	88a2703a 	and	r17,r17,r2
   8cd88:	0081ff84 	movi	r2,2046
   8cd8c:	117f6416 	blt	r2,r5,8cb20 <__alt_data_end+0xfffc1030>
   8cd90:	8828977a 	slli	r20,r17,29
   8cd94:	4010d0fa 	srli	r8,r8,3
   8cd98:	8822927a 	slli	r17,r17,9
   8cd9c:	2881ffcc 	andi	r2,r5,2047
   8cda0:	a228b03a 	or	r20,r20,r8
   8cda4:	880ad33a 	srli	r5,r17,12
   8cda8:	b02b883a 	mov	r21,r22
   8cdac:	003f0d06 	br	8c9e4 <__alt_data_end+0xfffc0ef4>
   8cdb0:	8080022c 	andhi	r2,r16,8
   8cdb4:	10000926 	beq	r2,zero,8cddc <__muldf3+0x574>
   8cdb8:	8880022c 	andhi	r2,r17,8
   8cdbc:	1000071e 	bne	r2,zero,8cddc <__muldf3+0x574>
   8cdc0:	00800434 	movhi	r2,16
   8cdc4:	89400234 	orhi	r5,r17,8
   8cdc8:	10bfffc4 	addi	r2,r2,-1
   8cdcc:	b82b883a 	mov	r21,r23
   8cdd0:	288a703a 	and	r5,r5,r2
   8cdd4:	4029883a 	mov	r20,r8
   8cdd8:	003f6806 	br	8cb7c <__alt_data_end+0xfffc108c>
   8cddc:	00800434 	movhi	r2,16
   8cde0:	81400234 	orhi	r5,r16,8
   8cde4:	10bfffc4 	addi	r2,r2,-1
   8cde8:	288a703a 	and	r5,r5,r2
   8cdec:	003f6306 	br	8cb7c <__alt_data_end+0xfffc108c>
   8cdf0:	147ff604 	addi	r17,r2,-40
   8cdf4:	3462983a 	sll	r17,r6,r17
   8cdf8:	0011883a 	mov	r8,zero
   8cdfc:	003f4406 	br	8cb10 <__alt_data_end+0xfffc1020>
   8ce00:	3009883a 	mov	r4,r6
   8ce04:	d9800215 	stw	r6,8(sp)
   8ce08:	da400115 	stw	r9,4(sp)
   8ce0c:	da800015 	stw	r10,0(sp)
   8ce10:	008da800 	call	8da80 <__clzsi2>
   8ce14:	10800804 	addi	r2,r2,32
   8ce18:	da800017 	ldw	r10,0(sp)
   8ce1c:	da400117 	ldw	r9,4(sp)
   8ce20:	d9800217 	ldw	r6,8(sp)
   8ce24:	003f3006 	br	8cae8 <__alt_data_end+0xfffc0ff8>
   8ce28:	143ff604 	addi	r16,r2,-40
   8ce2c:	9c20983a 	sll	r16,r19,r16
   8ce30:	0029883a 	mov	r20,zero
   8ce34:	003f1606 	br	8ca90 <__alt_data_end+0xfffc0fa0>
   8ce38:	d9800215 	stw	r6,8(sp)
   8ce3c:	d9c00015 	stw	r7,0(sp)
   8ce40:	da400115 	stw	r9,4(sp)
   8ce44:	008da800 	call	8da80 <__clzsi2>
   8ce48:	10800804 	addi	r2,r2,32
   8ce4c:	da400117 	ldw	r9,4(sp)
   8ce50:	d9c00017 	ldw	r7,0(sp)
   8ce54:	d9800217 	ldw	r6,8(sp)
   8ce58:	003f0306 	br	8ca68 <__alt_data_end+0xfffc0f78>
   8ce5c:	00c00044 	movi	r3,1
   8ce60:	1947c83a 	sub	r3,r3,r5
   8ce64:	00800e04 	movi	r2,56
   8ce68:	10feda16 	blt	r2,r3,8c9d4 <__alt_data_end+0xfffc0ee4>
   8ce6c:	008007c4 	movi	r2,31
   8ce70:	10c01b16 	blt	r2,r3,8cee0 <__muldf3+0x678>
   8ce74:	00800804 	movi	r2,32
   8ce78:	10c5c83a 	sub	r2,r2,r3
   8ce7c:	888a983a 	sll	r5,r17,r2
   8ce80:	40c8d83a 	srl	r4,r8,r3
   8ce84:	4084983a 	sll	r2,r8,r2
   8ce88:	88e2d83a 	srl	r17,r17,r3
   8ce8c:	2906b03a 	or	r3,r5,r4
   8ce90:	1004c03a 	cmpne	r2,r2,zero
   8ce94:	1886b03a 	or	r3,r3,r2
   8ce98:	188001cc 	andi	r2,r3,7
   8ce9c:	10000726 	beq	r2,zero,8cebc <__muldf3+0x654>
   8cea0:	188003cc 	andi	r2,r3,15
   8cea4:	01000104 	movi	r4,4
   8cea8:	11000426 	beq	r2,r4,8cebc <__muldf3+0x654>
   8ceac:	1805883a 	mov	r2,r3
   8ceb0:	10c00104 	addi	r3,r2,4
   8ceb4:	1885803a 	cmpltu	r2,r3,r2
   8ceb8:	88a3883a 	add	r17,r17,r2
   8cebc:	8880202c 	andhi	r2,r17,128
   8cec0:	10001c26 	beq	r2,zero,8cf34 <__muldf3+0x6cc>
   8cec4:	b02b883a 	mov	r21,r22
   8cec8:	00800044 	movi	r2,1
   8cecc:	000b883a 	mov	r5,zero
   8ced0:	0029883a 	mov	r20,zero
   8ced4:	003ec306 	br	8c9e4 <__alt_data_end+0xfffc0ef4>
   8ced8:	5805883a 	mov	r2,r11
   8cedc:	003f9906 	br	8cd44 <__alt_data_end+0xfffc1254>
   8cee0:	00bff844 	movi	r2,-31
   8cee4:	1145c83a 	sub	r2,r2,r5
   8cee8:	8888d83a 	srl	r4,r17,r2
   8ceec:	00800804 	movi	r2,32
   8cef0:	18801a26 	beq	r3,r2,8cf5c <__muldf3+0x6f4>
   8cef4:	00801004 	movi	r2,64
   8cef8:	10c5c83a 	sub	r2,r2,r3
   8cefc:	8884983a 	sll	r2,r17,r2
   8cf00:	1204b03a 	or	r2,r2,r8
   8cf04:	1004c03a 	cmpne	r2,r2,zero
   8cf08:	2084b03a 	or	r2,r4,r2
   8cf0c:	144001cc 	andi	r17,r2,7
   8cf10:	88000d1e 	bne	r17,zero,8cf48 <__muldf3+0x6e0>
   8cf14:	000b883a 	mov	r5,zero
   8cf18:	1028d0fa 	srli	r20,r2,3
   8cf1c:	b02b883a 	mov	r21,r22
   8cf20:	0005883a 	mov	r2,zero
   8cf24:	a468b03a 	or	r20,r20,r17
   8cf28:	003eae06 	br	8c9e4 <__alt_data_end+0xfffc0ef4>
   8cf2c:	1007883a 	mov	r3,r2
   8cf30:	0023883a 	mov	r17,zero
   8cf34:	880a927a 	slli	r5,r17,9
   8cf38:	1805883a 	mov	r2,r3
   8cf3c:	8822977a 	slli	r17,r17,29
   8cf40:	280ad33a 	srli	r5,r5,12
   8cf44:	003ff406 	br	8cf18 <__alt_data_end+0xfffc1428>
   8cf48:	10c003cc 	andi	r3,r2,15
   8cf4c:	01000104 	movi	r4,4
   8cf50:	193ff626 	beq	r3,r4,8cf2c <__alt_data_end+0xfffc143c>
   8cf54:	0023883a 	mov	r17,zero
   8cf58:	003fd506 	br	8ceb0 <__alt_data_end+0xfffc13c0>
   8cf5c:	0005883a 	mov	r2,zero
   8cf60:	003fe706 	br	8cf00 <__alt_data_end+0xfffc1410>
   8cf64:	00800434 	movhi	r2,16
   8cf68:	89400234 	orhi	r5,r17,8
   8cf6c:	10bfffc4 	addi	r2,r2,-1
   8cf70:	b02b883a 	mov	r21,r22
   8cf74:	288a703a 	and	r5,r5,r2
   8cf78:	4029883a 	mov	r20,r8
   8cf7c:	003eff06 	br	8cb7c <__alt_data_end+0xfffc108c>

0008cf80 <__subdf3>:
   8cf80:	02000434 	movhi	r8,16
   8cf84:	423fffc4 	addi	r8,r8,-1
   8cf88:	defffb04 	addi	sp,sp,-20
   8cf8c:	2a14703a 	and	r10,r5,r8
   8cf90:	3812d53a 	srli	r9,r7,20
   8cf94:	3a10703a 	and	r8,r7,r8
   8cf98:	2006d77a 	srli	r3,r4,29
   8cf9c:	3004d77a 	srli	r2,r6,29
   8cfa0:	dc000015 	stw	r16,0(sp)
   8cfa4:	501490fa 	slli	r10,r10,3
   8cfa8:	2820d53a 	srli	r16,r5,20
   8cfac:	401090fa 	slli	r8,r8,3
   8cfb0:	dc800215 	stw	r18,8(sp)
   8cfb4:	dc400115 	stw	r17,4(sp)
   8cfb8:	dfc00415 	stw	ra,16(sp)
   8cfbc:	202290fa 	slli	r17,r4,3
   8cfc0:	dcc00315 	stw	r19,12(sp)
   8cfc4:	4a41ffcc 	andi	r9,r9,2047
   8cfc8:	0101ffc4 	movi	r4,2047
   8cfcc:	2824d7fa 	srli	r18,r5,31
   8cfd0:	8401ffcc 	andi	r16,r16,2047
   8cfd4:	50c6b03a 	or	r3,r10,r3
   8cfd8:	380ed7fa 	srli	r7,r7,31
   8cfdc:	408ab03a 	or	r5,r8,r2
   8cfe0:	300c90fa 	slli	r6,r6,3
   8cfe4:	49009626 	beq	r9,r4,8d240 <__subdf3+0x2c0>
   8cfe8:	39c0005c 	xori	r7,r7,1
   8cfec:	8245c83a 	sub	r2,r16,r9
   8cff0:	3c807426 	beq	r7,r18,8d1c4 <__subdf3+0x244>
   8cff4:	0080af0e 	bge	zero,r2,8d2b4 <__subdf3+0x334>
   8cff8:	48002a1e 	bne	r9,zero,8d0a4 <__subdf3+0x124>
   8cffc:	2988b03a 	or	r4,r5,r6
   8d000:	20009a1e 	bne	r4,zero,8d26c <__subdf3+0x2ec>
   8d004:	888001cc 	andi	r2,r17,7
   8d008:	10000726 	beq	r2,zero,8d028 <__subdf3+0xa8>
   8d00c:	888003cc 	andi	r2,r17,15
   8d010:	01000104 	movi	r4,4
   8d014:	11000426 	beq	r2,r4,8d028 <__subdf3+0xa8>
   8d018:	890b883a 	add	r5,r17,r4
   8d01c:	2c63803a 	cmpltu	r17,r5,r17
   8d020:	1c47883a 	add	r3,r3,r17
   8d024:	2823883a 	mov	r17,r5
   8d028:	1880202c 	andhi	r2,r3,128
   8d02c:	10005926 	beq	r2,zero,8d194 <__subdf3+0x214>
   8d030:	84000044 	addi	r16,r16,1
   8d034:	0081ffc4 	movi	r2,2047
   8d038:	8080be26 	beq	r16,r2,8d334 <__subdf3+0x3b4>
   8d03c:	017fe034 	movhi	r5,65408
   8d040:	297fffc4 	addi	r5,r5,-1
   8d044:	1946703a 	and	r3,r3,r5
   8d048:	1804977a 	slli	r2,r3,29
   8d04c:	1806927a 	slli	r3,r3,9
   8d050:	8822d0fa 	srli	r17,r17,3
   8d054:	8401ffcc 	andi	r16,r16,2047
   8d058:	180ad33a 	srli	r5,r3,12
   8d05c:	9100004c 	andi	r4,r18,1
   8d060:	1444b03a 	or	r2,r2,r17
   8d064:	80c1ffcc 	andi	r3,r16,2047
   8d068:	1820953a 	slli	r16,r3,20
   8d06c:	20c03fcc 	andi	r3,r4,255
   8d070:	180897fa 	slli	r4,r3,31
   8d074:	00c00434 	movhi	r3,16
   8d078:	18ffffc4 	addi	r3,r3,-1
   8d07c:	28c6703a 	and	r3,r5,r3
   8d080:	1c06b03a 	or	r3,r3,r16
   8d084:	1906b03a 	or	r3,r3,r4
   8d088:	dfc00417 	ldw	ra,16(sp)
   8d08c:	dcc00317 	ldw	r19,12(sp)
   8d090:	dc800217 	ldw	r18,8(sp)
   8d094:	dc400117 	ldw	r17,4(sp)
   8d098:	dc000017 	ldw	r16,0(sp)
   8d09c:	dec00504 	addi	sp,sp,20
   8d0a0:	f800283a 	ret
   8d0a4:	0101ffc4 	movi	r4,2047
   8d0a8:	813fd626 	beq	r16,r4,8d004 <__alt_data_end+0xfffc1514>
   8d0ac:	29402034 	orhi	r5,r5,128
   8d0b0:	01000e04 	movi	r4,56
   8d0b4:	2080a316 	blt	r4,r2,8d344 <__subdf3+0x3c4>
   8d0b8:	010007c4 	movi	r4,31
   8d0bc:	2080c616 	blt	r4,r2,8d3d8 <__subdf3+0x458>
   8d0c0:	01000804 	movi	r4,32
   8d0c4:	2089c83a 	sub	r4,r4,r2
   8d0c8:	2910983a 	sll	r8,r5,r4
   8d0cc:	308ed83a 	srl	r7,r6,r2
   8d0d0:	3108983a 	sll	r4,r6,r4
   8d0d4:	2884d83a 	srl	r2,r5,r2
   8d0d8:	41ccb03a 	or	r6,r8,r7
   8d0dc:	2008c03a 	cmpne	r4,r4,zero
   8d0e0:	310cb03a 	or	r6,r6,r4
   8d0e4:	898dc83a 	sub	r6,r17,r6
   8d0e8:	89a3803a 	cmpltu	r17,r17,r6
   8d0ec:	1887c83a 	sub	r3,r3,r2
   8d0f0:	1c47c83a 	sub	r3,r3,r17
   8d0f4:	3023883a 	mov	r17,r6
   8d0f8:	1880202c 	andhi	r2,r3,128
   8d0fc:	10002326 	beq	r2,zero,8d18c <__subdf3+0x20c>
   8d100:	04c02034 	movhi	r19,128
   8d104:	9cffffc4 	addi	r19,r19,-1
   8d108:	1ce6703a 	and	r19,r3,r19
   8d10c:	98007a26 	beq	r19,zero,8d2f8 <__subdf3+0x378>
   8d110:	9809883a 	mov	r4,r19
   8d114:	008da800 	call	8da80 <__clzsi2>
   8d118:	113ffe04 	addi	r4,r2,-8
   8d11c:	00c007c4 	movi	r3,31
   8d120:	19007b16 	blt	r3,r4,8d310 <__subdf3+0x390>
   8d124:	00800804 	movi	r2,32
   8d128:	1105c83a 	sub	r2,r2,r4
   8d12c:	8884d83a 	srl	r2,r17,r2
   8d130:	9906983a 	sll	r3,r19,r4
   8d134:	8922983a 	sll	r17,r17,r4
   8d138:	10c4b03a 	or	r2,r2,r3
   8d13c:	24007816 	blt	r4,r16,8d320 <__subdf3+0x3a0>
   8d140:	2421c83a 	sub	r16,r4,r16
   8d144:	80c00044 	addi	r3,r16,1
   8d148:	010007c4 	movi	r4,31
   8d14c:	20c09516 	blt	r4,r3,8d3a4 <__subdf3+0x424>
   8d150:	01400804 	movi	r5,32
   8d154:	28cbc83a 	sub	r5,r5,r3
   8d158:	88c8d83a 	srl	r4,r17,r3
   8d15c:	8962983a 	sll	r17,r17,r5
   8d160:	114a983a 	sll	r5,r2,r5
   8d164:	10c6d83a 	srl	r3,r2,r3
   8d168:	8804c03a 	cmpne	r2,r17,zero
   8d16c:	290ab03a 	or	r5,r5,r4
   8d170:	28a2b03a 	or	r17,r5,r2
   8d174:	0021883a 	mov	r16,zero
   8d178:	003fa206 	br	8d004 <__alt_data_end+0xfffc1514>
   8d17c:	2090b03a 	or	r8,r4,r2
   8d180:	40018e26 	beq	r8,zero,8d7bc <__subdf3+0x83c>
   8d184:	1007883a 	mov	r3,r2
   8d188:	2023883a 	mov	r17,r4
   8d18c:	888001cc 	andi	r2,r17,7
   8d190:	103f9e1e 	bne	r2,zero,8d00c <__alt_data_end+0xfffc151c>
   8d194:	1804977a 	slli	r2,r3,29
   8d198:	8822d0fa 	srli	r17,r17,3
   8d19c:	1810d0fa 	srli	r8,r3,3
   8d1a0:	9100004c 	andi	r4,r18,1
   8d1a4:	1444b03a 	or	r2,r2,r17
   8d1a8:	00c1ffc4 	movi	r3,2047
   8d1ac:	80c02826 	beq	r16,r3,8d250 <__subdf3+0x2d0>
   8d1b0:	01400434 	movhi	r5,16
   8d1b4:	297fffc4 	addi	r5,r5,-1
   8d1b8:	80e0703a 	and	r16,r16,r3
   8d1bc:	414a703a 	and	r5,r8,r5
   8d1c0:	003fa806 	br	8d064 <__alt_data_end+0xfffc1574>
   8d1c4:	0080630e 	bge	zero,r2,8d354 <__subdf3+0x3d4>
   8d1c8:	48003026 	beq	r9,zero,8d28c <__subdf3+0x30c>
   8d1cc:	0101ffc4 	movi	r4,2047
   8d1d0:	813f8c26 	beq	r16,r4,8d004 <__alt_data_end+0xfffc1514>
   8d1d4:	29402034 	orhi	r5,r5,128
   8d1d8:	01000e04 	movi	r4,56
   8d1dc:	2080a90e 	bge	r4,r2,8d484 <__subdf3+0x504>
   8d1e0:	298cb03a 	or	r6,r5,r6
   8d1e4:	3012c03a 	cmpne	r9,r6,zero
   8d1e8:	0005883a 	mov	r2,zero
   8d1ec:	4c53883a 	add	r9,r9,r17
   8d1f0:	4c63803a 	cmpltu	r17,r9,r17
   8d1f4:	10c7883a 	add	r3,r2,r3
   8d1f8:	88c7883a 	add	r3,r17,r3
   8d1fc:	4823883a 	mov	r17,r9
   8d200:	1880202c 	andhi	r2,r3,128
   8d204:	1000d026 	beq	r2,zero,8d548 <__subdf3+0x5c8>
   8d208:	84000044 	addi	r16,r16,1
   8d20c:	0081ffc4 	movi	r2,2047
   8d210:	8080fe26 	beq	r16,r2,8d60c <__subdf3+0x68c>
   8d214:	00bfe034 	movhi	r2,65408
   8d218:	10bfffc4 	addi	r2,r2,-1
   8d21c:	1886703a 	and	r3,r3,r2
   8d220:	880ad07a 	srli	r5,r17,1
   8d224:	180497fa 	slli	r2,r3,31
   8d228:	8900004c 	andi	r4,r17,1
   8d22c:	2922b03a 	or	r17,r5,r4
   8d230:	1806d07a 	srli	r3,r3,1
   8d234:	1462b03a 	or	r17,r2,r17
   8d238:	3825883a 	mov	r18,r7
   8d23c:	003f7106 	br	8d004 <__alt_data_end+0xfffc1514>
   8d240:	2984b03a 	or	r2,r5,r6
   8d244:	103f6826 	beq	r2,zero,8cfe8 <__alt_data_end+0xfffc14f8>
   8d248:	39c03fcc 	andi	r7,r7,255
   8d24c:	003f6706 	br	8cfec <__alt_data_end+0xfffc14fc>
   8d250:	4086b03a 	or	r3,r8,r2
   8d254:	18015226 	beq	r3,zero,8d7a0 <__subdf3+0x820>
   8d258:	00c00434 	movhi	r3,16
   8d25c:	41400234 	orhi	r5,r8,8
   8d260:	18ffffc4 	addi	r3,r3,-1
   8d264:	28ca703a 	and	r5,r5,r3
   8d268:	003f7e06 	br	8d064 <__alt_data_end+0xfffc1574>
   8d26c:	10bfffc4 	addi	r2,r2,-1
   8d270:	1000491e 	bne	r2,zero,8d398 <__subdf3+0x418>
   8d274:	898fc83a 	sub	r7,r17,r6
   8d278:	89e3803a 	cmpltu	r17,r17,r7
   8d27c:	1947c83a 	sub	r3,r3,r5
   8d280:	1c47c83a 	sub	r3,r3,r17
   8d284:	3823883a 	mov	r17,r7
   8d288:	003f9b06 	br	8d0f8 <__alt_data_end+0xfffc1608>
   8d28c:	2988b03a 	or	r4,r5,r6
   8d290:	203f5c26 	beq	r4,zero,8d004 <__alt_data_end+0xfffc1514>
   8d294:	10bfffc4 	addi	r2,r2,-1
   8d298:	1000931e 	bne	r2,zero,8d4e8 <__subdf3+0x568>
   8d29c:	898d883a 	add	r6,r17,r6
   8d2a0:	3463803a 	cmpltu	r17,r6,r17
   8d2a4:	1947883a 	add	r3,r3,r5
   8d2a8:	88c7883a 	add	r3,r17,r3
   8d2ac:	3023883a 	mov	r17,r6
   8d2b0:	003fd306 	br	8d200 <__alt_data_end+0xfffc1710>
   8d2b4:	1000541e 	bne	r2,zero,8d408 <__subdf3+0x488>
   8d2b8:	80800044 	addi	r2,r16,1
   8d2bc:	1081ffcc 	andi	r2,r2,2047
   8d2c0:	01000044 	movi	r4,1
   8d2c4:	2080a20e 	bge	r4,r2,8d550 <__subdf3+0x5d0>
   8d2c8:	8989c83a 	sub	r4,r17,r6
   8d2cc:	8905803a 	cmpltu	r2,r17,r4
   8d2d0:	1967c83a 	sub	r19,r3,r5
   8d2d4:	98a7c83a 	sub	r19,r19,r2
   8d2d8:	9880202c 	andhi	r2,r19,128
   8d2dc:	10006326 	beq	r2,zero,8d46c <__subdf3+0x4ec>
   8d2e0:	3463c83a 	sub	r17,r6,r17
   8d2e4:	28c7c83a 	sub	r3,r5,r3
   8d2e8:	344d803a 	cmpltu	r6,r6,r17
   8d2ec:	19a7c83a 	sub	r19,r3,r6
   8d2f0:	3825883a 	mov	r18,r7
   8d2f4:	983f861e 	bne	r19,zero,8d110 <__alt_data_end+0xfffc1620>
   8d2f8:	8809883a 	mov	r4,r17
   8d2fc:	008da800 	call	8da80 <__clzsi2>
   8d300:	10800804 	addi	r2,r2,32
   8d304:	113ffe04 	addi	r4,r2,-8
   8d308:	00c007c4 	movi	r3,31
   8d30c:	193f850e 	bge	r3,r4,8d124 <__alt_data_end+0xfffc1634>
   8d310:	10bff604 	addi	r2,r2,-40
   8d314:	8884983a 	sll	r2,r17,r2
   8d318:	0023883a 	mov	r17,zero
   8d31c:	243f880e 	bge	r4,r16,8d140 <__alt_data_end+0xfffc1650>
   8d320:	00ffe034 	movhi	r3,65408
   8d324:	18ffffc4 	addi	r3,r3,-1
   8d328:	8121c83a 	sub	r16,r16,r4
   8d32c:	10c6703a 	and	r3,r2,r3
   8d330:	003f3406 	br	8d004 <__alt_data_end+0xfffc1514>
   8d334:	9100004c 	andi	r4,r18,1
   8d338:	000b883a 	mov	r5,zero
   8d33c:	0005883a 	mov	r2,zero
   8d340:	003f4806 	br	8d064 <__alt_data_end+0xfffc1574>
   8d344:	298cb03a 	or	r6,r5,r6
   8d348:	300cc03a 	cmpne	r6,r6,zero
   8d34c:	0005883a 	mov	r2,zero
   8d350:	003f6406 	br	8d0e4 <__alt_data_end+0xfffc15f4>
   8d354:	10009a1e 	bne	r2,zero,8d5c0 <__subdf3+0x640>
   8d358:	82400044 	addi	r9,r16,1
   8d35c:	4881ffcc 	andi	r2,r9,2047
   8d360:	02800044 	movi	r10,1
   8d364:	5080670e 	bge	r10,r2,8d504 <__subdf3+0x584>
   8d368:	0081ffc4 	movi	r2,2047
   8d36c:	4880af26 	beq	r9,r2,8d62c <__subdf3+0x6ac>
   8d370:	898d883a 	add	r6,r17,r6
   8d374:	1945883a 	add	r2,r3,r5
   8d378:	3447803a 	cmpltu	r3,r6,r17
   8d37c:	1887883a 	add	r3,r3,r2
   8d380:	182297fa 	slli	r17,r3,31
   8d384:	300cd07a 	srli	r6,r6,1
   8d388:	1806d07a 	srli	r3,r3,1
   8d38c:	4821883a 	mov	r16,r9
   8d390:	89a2b03a 	or	r17,r17,r6
   8d394:	003f1b06 	br	8d004 <__alt_data_end+0xfffc1514>
   8d398:	0101ffc4 	movi	r4,2047
   8d39c:	813f441e 	bne	r16,r4,8d0b0 <__alt_data_end+0xfffc15c0>
   8d3a0:	003f1806 	br	8d004 <__alt_data_end+0xfffc1514>
   8d3a4:	843ff844 	addi	r16,r16,-31
   8d3a8:	01400804 	movi	r5,32
   8d3ac:	1408d83a 	srl	r4,r2,r16
   8d3b0:	19405026 	beq	r3,r5,8d4f4 <__subdf3+0x574>
   8d3b4:	01401004 	movi	r5,64
   8d3b8:	28c7c83a 	sub	r3,r5,r3
   8d3bc:	10c4983a 	sll	r2,r2,r3
   8d3c0:	88a2b03a 	or	r17,r17,r2
   8d3c4:	8822c03a 	cmpne	r17,r17,zero
   8d3c8:	2462b03a 	or	r17,r4,r17
   8d3cc:	0007883a 	mov	r3,zero
   8d3d0:	0021883a 	mov	r16,zero
   8d3d4:	003f6d06 	br	8d18c <__alt_data_end+0xfffc169c>
   8d3d8:	11fff804 	addi	r7,r2,-32
   8d3dc:	01000804 	movi	r4,32
   8d3e0:	29ced83a 	srl	r7,r5,r7
   8d3e4:	11004526 	beq	r2,r4,8d4fc <__subdf3+0x57c>
   8d3e8:	01001004 	movi	r4,64
   8d3ec:	2089c83a 	sub	r4,r4,r2
   8d3f0:	2904983a 	sll	r2,r5,r4
   8d3f4:	118cb03a 	or	r6,r2,r6
   8d3f8:	300cc03a 	cmpne	r6,r6,zero
   8d3fc:	398cb03a 	or	r6,r7,r6
   8d400:	0005883a 	mov	r2,zero
   8d404:	003f3706 	br	8d0e4 <__alt_data_end+0xfffc15f4>
   8d408:	80002a26 	beq	r16,zero,8d4b4 <__subdf3+0x534>
   8d40c:	0101ffc4 	movi	r4,2047
   8d410:	49006626 	beq	r9,r4,8d5ac <__subdf3+0x62c>
   8d414:	0085c83a 	sub	r2,zero,r2
   8d418:	18c02034 	orhi	r3,r3,128
   8d41c:	01000e04 	movi	r4,56
   8d420:	20807e16 	blt	r4,r2,8d61c <__subdf3+0x69c>
   8d424:	010007c4 	movi	r4,31
   8d428:	2080e716 	blt	r4,r2,8d7c8 <__subdf3+0x848>
   8d42c:	01000804 	movi	r4,32
   8d430:	2089c83a 	sub	r4,r4,r2
   8d434:	1914983a 	sll	r10,r3,r4
   8d438:	8890d83a 	srl	r8,r17,r2
   8d43c:	8908983a 	sll	r4,r17,r4
   8d440:	1884d83a 	srl	r2,r3,r2
   8d444:	5222b03a 	or	r17,r10,r8
   8d448:	2006c03a 	cmpne	r3,r4,zero
   8d44c:	88e2b03a 	or	r17,r17,r3
   8d450:	3463c83a 	sub	r17,r6,r17
   8d454:	2885c83a 	sub	r2,r5,r2
   8d458:	344d803a 	cmpltu	r6,r6,r17
   8d45c:	1187c83a 	sub	r3,r2,r6
   8d460:	4821883a 	mov	r16,r9
   8d464:	3825883a 	mov	r18,r7
   8d468:	003f2306 	br	8d0f8 <__alt_data_end+0xfffc1608>
   8d46c:	24d0b03a 	or	r8,r4,r19
   8d470:	40001b1e 	bne	r8,zero,8d4e0 <__subdf3+0x560>
   8d474:	0005883a 	mov	r2,zero
   8d478:	0009883a 	mov	r4,zero
   8d47c:	0021883a 	mov	r16,zero
   8d480:	003f4906 	br	8d1a8 <__alt_data_end+0xfffc16b8>
   8d484:	010007c4 	movi	r4,31
   8d488:	20803a16 	blt	r4,r2,8d574 <__subdf3+0x5f4>
   8d48c:	01000804 	movi	r4,32
   8d490:	2089c83a 	sub	r4,r4,r2
   8d494:	2912983a 	sll	r9,r5,r4
   8d498:	3090d83a 	srl	r8,r6,r2
   8d49c:	3108983a 	sll	r4,r6,r4
   8d4a0:	2884d83a 	srl	r2,r5,r2
   8d4a4:	4a12b03a 	or	r9,r9,r8
   8d4a8:	2008c03a 	cmpne	r4,r4,zero
   8d4ac:	4912b03a 	or	r9,r9,r4
   8d4b0:	003f4e06 	br	8d1ec <__alt_data_end+0xfffc16fc>
   8d4b4:	1c48b03a 	or	r4,r3,r17
   8d4b8:	20003c26 	beq	r4,zero,8d5ac <__subdf3+0x62c>
   8d4bc:	0084303a 	nor	r2,zero,r2
   8d4c0:	1000381e 	bne	r2,zero,8d5a4 <__subdf3+0x624>
   8d4c4:	3463c83a 	sub	r17,r6,r17
   8d4c8:	28c5c83a 	sub	r2,r5,r3
   8d4cc:	344d803a 	cmpltu	r6,r6,r17
   8d4d0:	1187c83a 	sub	r3,r2,r6
   8d4d4:	4821883a 	mov	r16,r9
   8d4d8:	3825883a 	mov	r18,r7
   8d4dc:	003f0606 	br	8d0f8 <__alt_data_end+0xfffc1608>
   8d4e0:	2023883a 	mov	r17,r4
   8d4e4:	003f0906 	br	8d10c <__alt_data_end+0xfffc161c>
   8d4e8:	0101ffc4 	movi	r4,2047
   8d4ec:	813f3a1e 	bne	r16,r4,8d1d8 <__alt_data_end+0xfffc16e8>
   8d4f0:	003ec406 	br	8d004 <__alt_data_end+0xfffc1514>
   8d4f4:	0005883a 	mov	r2,zero
   8d4f8:	003fb106 	br	8d3c0 <__alt_data_end+0xfffc18d0>
   8d4fc:	0005883a 	mov	r2,zero
   8d500:	003fbc06 	br	8d3f4 <__alt_data_end+0xfffc1904>
   8d504:	1c44b03a 	or	r2,r3,r17
   8d508:	80008e1e 	bne	r16,zero,8d744 <__subdf3+0x7c4>
   8d50c:	1000c826 	beq	r2,zero,8d830 <__subdf3+0x8b0>
   8d510:	2984b03a 	or	r2,r5,r6
   8d514:	103ebb26 	beq	r2,zero,8d004 <__alt_data_end+0xfffc1514>
   8d518:	8989883a 	add	r4,r17,r6
   8d51c:	1945883a 	add	r2,r3,r5
   8d520:	2447803a 	cmpltu	r3,r4,r17
   8d524:	1887883a 	add	r3,r3,r2
   8d528:	1880202c 	andhi	r2,r3,128
   8d52c:	2023883a 	mov	r17,r4
   8d530:	103f1626 	beq	r2,zero,8d18c <__alt_data_end+0xfffc169c>
   8d534:	00bfe034 	movhi	r2,65408
   8d538:	10bfffc4 	addi	r2,r2,-1
   8d53c:	5021883a 	mov	r16,r10
   8d540:	1886703a 	and	r3,r3,r2
   8d544:	003eaf06 	br	8d004 <__alt_data_end+0xfffc1514>
   8d548:	3825883a 	mov	r18,r7
   8d54c:	003f0f06 	br	8d18c <__alt_data_end+0xfffc169c>
   8d550:	1c44b03a 	or	r2,r3,r17
   8d554:	8000251e 	bne	r16,zero,8d5ec <__subdf3+0x66c>
   8d558:	1000661e 	bne	r2,zero,8d6f4 <__subdf3+0x774>
   8d55c:	2990b03a 	or	r8,r5,r6
   8d560:	40009626 	beq	r8,zero,8d7bc <__subdf3+0x83c>
   8d564:	2807883a 	mov	r3,r5
   8d568:	3023883a 	mov	r17,r6
   8d56c:	3825883a 	mov	r18,r7
   8d570:	003ea406 	br	8d004 <__alt_data_end+0xfffc1514>
   8d574:	127ff804 	addi	r9,r2,-32
   8d578:	01000804 	movi	r4,32
   8d57c:	2a52d83a 	srl	r9,r5,r9
   8d580:	11008c26 	beq	r2,r4,8d7b4 <__subdf3+0x834>
   8d584:	01001004 	movi	r4,64
   8d588:	2085c83a 	sub	r2,r4,r2
   8d58c:	2884983a 	sll	r2,r5,r2
   8d590:	118cb03a 	or	r6,r2,r6
   8d594:	300cc03a 	cmpne	r6,r6,zero
   8d598:	4992b03a 	or	r9,r9,r6
   8d59c:	0005883a 	mov	r2,zero
   8d5a0:	003f1206 	br	8d1ec <__alt_data_end+0xfffc16fc>
   8d5a4:	0101ffc4 	movi	r4,2047
   8d5a8:	493f9c1e 	bne	r9,r4,8d41c <__alt_data_end+0xfffc192c>
   8d5ac:	2807883a 	mov	r3,r5
   8d5b0:	3023883a 	mov	r17,r6
   8d5b4:	4821883a 	mov	r16,r9
   8d5b8:	3825883a 	mov	r18,r7
   8d5bc:	003e9106 	br	8d004 <__alt_data_end+0xfffc1514>
   8d5c0:	80001f1e 	bne	r16,zero,8d640 <__subdf3+0x6c0>
   8d5c4:	1c48b03a 	or	r4,r3,r17
   8d5c8:	20005a26 	beq	r4,zero,8d734 <__subdf3+0x7b4>
   8d5cc:	0084303a 	nor	r2,zero,r2
   8d5d0:	1000561e 	bne	r2,zero,8d72c <__subdf3+0x7ac>
   8d5d4:	89a3883a 	add	r17,r17,r6
   8d5d8:	1945883a 	add	r2,r3,r5
   8d5dc:	898d803a 	cmpltu	r6,r17,r6
   8d5e0:	3087883a 	add	r3,r6,r2
   8d5e4:	4821883a 	mov	r16,r9
   8d5e8:	003f0506 	br	8d200 <__alt_data_end+0xfffc1710>
   8d5ec:	10002b1e 	bne	r2,zero,8d69c <__subdf3+0x71c>
   8d5f0:	2984b03a 	or	r2,r5,r6
   8d5f4:	10008026 	beq	r2,zero,8d7f8 <__subdf3+0x878>
   8d5f8:	2807883a 	mov	r3,r5
   8d5fc:	3023883a 	mov	r17,r6
   8d600:	3825883a 	mov	r18,r7
   8d604:	0401ffc4 	movi	r16,2047
   8d608:	003e7e06 	br	8d004 <__alt_data_end+0xfffc1514>
   8d60c:	3809883a 	mov	r4,r7
   8d610:	0011883a 	mov	r8,zero
   8d614:	0005883a 	mov	r2,zero
   8d618:	003ee306 	br	8d1a8 <__alt_data_end+0xfffc16b8>
   8d61c:	1c62b03a 	or	r17,r3,r17
   8d620:	8822c03a 	cmpne	r17,r17,zero
   8d624:	0005883a 	mov	r2,zero
   8d628:	003f8906 	br	8d450 <__alt_data_end+0xfffc1960>
   8d62c:	3809883a 	mov	r4,r7
   8d630:	4821883a 	mov	r16,r9
   8d634:	0011883a 	mov	r8,zero
   8d638:	0005883a 	mov	r2,zero
   8d63c:	003eda06 	br	8d1a8 <__alt_data_end+0xfffc16b8>
   8d640:	0101ffc4 	movi	r4,2047
   8d644:	49003b26 	beq	r9,r4,8d734 <__subdf3+0x7b4>
   8d648:	0085c83a 	sub	r2,zero,r2
   8d64c:	18c02034 	orhi	r3,r3,128
   8d650:	01000e04 	movi	r4,56
   8d654:	20806e16 	blt	r4,r2,8d810 <__subdf3+0x890>
   8d658:	010007c4 	movi	r4,31
   8d65c:	20807716 	blt	r4,r2,8d83c <__subdf3+0x8bc>
   8d660:	01000804 	movi	r4,32
   8d664:	2089c83a 	sub	r4,r4,r2
   8d668:	1914983a 	sll	r10,r3,r4
   8d66c:	8890d83a 	srl	r8,r17,r2
   8d670:	8908983a 	sll	r4,r17,r4
   8d674:	1884d83a 	srl	r2,r3,r2
   8d678:	5222b03a 	or	r17,r10,r8
   8d67c:	2006c03a 	cmpne	r3,r4,zero
   8d680:	88e2b03a 	or	r17,r17,r3
   8d684:	89a3883a 	add	r17,r17,r6
   8d688:	1145883a 	add	r2,r2,r5
   8d68c:	898d803a 	cmpltu	r6,r17,r6
   8d690:	3087883a 	add	r3,r6,r2
   8d694:	4821883a 	mov	r16,r9
   8d698:	003ed906 	br	8d200 <__alt_data_end+0xfffc1710>
   8d69c:	2984b03a 	or	r2,r5,r6
   8d6a0:	10004226 	beq	r2,zero,8d7ac <__subdf3+0x82c>
   8d6a4:	1808d0fa 	srli	r4,r3,3
   8d6a8:	8822d0fa 	srli	r17,r17,3
   8d6ac:	1806977a 	slli	r3,r3,29
   8d6b0:	2080022c 	andhi	r2,r4,8
   8d6b4:	1c62b03a 	or	r17,r3,r17
   8d6b8:	10000826 	beq	r2,zero,8d6dc <__subdf3+0x75c>
   8d6bc:	2812d0fa 	srli	r9,r5,3
   8d6c0:	4880022c 	andhi	r2,r9,8
   8d6c4:	1000051e 	bne	r2,zero,8d6dc <__subdf3+0x75c>
   8d6c8:	300cd0fa 	srli	r6,r6,3
   8d6cc:	2804977a 	slli	r2,r5,29
   8d6d0:	4809883a 	mov	r4,r9
   8d6d4:	3825883a 	mov	r18,r7
   8d6d8:	11a2b03a 	or	r17,r2,r6
   8d6dc:	8806d77a 	srli	r3,r17,29
   8d6e0:	200890fa 	slli	r4,r4,3
   8d6e4:	882290fa 	slli	r17,r17,3
   8d6e8:	0401ffc4 	movi	r16,2047
   8d6ec:	1906b03a 	or	r3,r3,r4
   8d6f0:	003e4406 	br	8d004 <__alt_data_end+0xfffc1514>
   8d6f4:	2984b03a 	or	r2,r5,r6
   8d6f8:	103e4226 	beq	r2,zero,8d004 <__alt_data_end+0xfffc1514>
   8d6fc:	8989c83a 	sub	r4,r17,r6
   8d700:	8911803a 	cmpltu	r8,r17,r4
   8d704:	1945c83a 	sub	r2,r3,r5
   8d708:	1205c83a 	sub	r2,r2,r8
   8d70c:	1200202c 	andhi	r8,r2,128
   8d710:	403e9a26 	beq	r8,zero,8d17c <__alt_data_end+0xfffc168c>
   8d714:	3463c83a 	sub	r17,r6,r17
   8d718:	28c5c83a 	sub	r2,r5,r3
   8d71c:	344d803a 	cmpltu	r6,r6,r17
   8d720:	1187c83a 	sub	r3,r2,r6
   8d724:	3825883a 	mov	r18,r7
   8d728:	003e3606 	br	8d004 <__alt_data_end+0xfffc1514>
   8d72c:	0101ffc4 	movi	r4,2047
   8d730:	493fc71e 	bne	r9,r4,8d650 <__alt_data_end+0xfffc1b60>
   8d734:	2807883a 	mov	r3,r5
   8d738:	3023883a 	mov	r17,r6
   8d73c:	4821883a 	mov	r16,r9
   8d740:	003e3006 	br	8d004 <__alt_data_end+0xfffc1514>
   8d744:	10003626 	beq	r2,zero,8d820 <__subdf3+0x8a0>
   8d748:	2984b03a 	or	r2,r5,r6
   8d74c:	10001726 	beq	r2,zero,8d7ac <__subdf3+0x82c>
   8d750:	1808d0fa 	srli	r4,r3,3
   8d754:	8822d0fa 	srli	r17,r17,3
   8d758:	1806977a 	slli	r3,r3,29
   8d75c:	2080022c 	andhi	r2,r4,8
   8d760:	1c62b03a 	or	r17,r3,r17
   8d764:	10000726 	beq	r2,zero,8d784 <__subdf3+0x804>
   8d768:	2812d0fa 	srli	r9,r5,3
   8d76c:	4880022c 	andhi	r2,r9,8
   8d770:	1000041e 	bne	r2,zero,8d784 <__subdf3+0x804>
   8d774:	300cd0fa 	srli	r6,r6,3
   8d778:	2804977a 	slli	r2,r5,29
   8d77c:	4809883a 	mov	r4,r9
   8d780:	11a2b03a 	or	r17,r2,r6
   8d784:	8806d77a 	srli	r3,r17,29
   8d788:	200890fa 	slli	r4,r4,3
   8d78c:	882290fa 	slli	r17,r17,3
   8d790:	3825883a 	mov	r18,r7
   8d794:	1906b03a 	or	r3,r3,r4
   8d798:	0401ffc4 	movi	r16,2047
   8d79c:	003e1906 	br	8d004 <__alt_data_end+0xfffc1514>
   8d7a0:	000b883a 	mov	r5,zero
   8d7a4:	0005883a 	mov	r2,zero
   8d7a8:	003e2e06 	br	8d064 <__alt_data_end+0xfffc1574>
   8d7ac:	0401ffc4 	movi	r16,2047
   8d7b0:	003e1406 	br	8d004 <__alt_data_end+0xfffc1514>
   8d7b4:	0005883a 	mov	r2,zero
   8d7b8:	003f7506 	br	8d590 <__alt_data_end+0xfffc1aa0>
   8d7bc:	0005883a 	mov	r2,zero
   8d7c0:	0009883a 	mov	r4,zero
   8d7c4:	003e7806 	br	8d1a8 <__alt_data_end+0xfffc16b8>
   8d7c8:	123ff804 	addi	r8,r2,-32
   8d7cc:	01000804 	movi	r4,32
   8d7d0:	1a10d83a 	srl	r8,r3,r8
   8d7d4:	11002526 	beq	r2,r4,8d86c <__subdf3+0x8ec>
   8d7d8:	01001004 	movi	r4,64
   8d7dc:	2085c83a 	sub	r2,r4,r2
   8d7e0:	1884983a 	sll	r2,r3,r2
   8d7e4:	1444b03a 	or	r2,r2,r17
   8d7e8:	1004c03a 	cmpne	r2,r2,zero
   8d7ec:	40a2b03a 	or	r17,r8,r2
   8d7f0:	0005883a 	mov	r2,zero
   8d7f4:	003f1606 	br	8d450 <__alt_data_end+0xfffc1960>
   8d7f8:	02000434 	movhi	r8,16
   8d7fc:	0009883a 	mov	r4,zero
   8d800:	423fffc4 	addi	r8,r8,-1
   8d804:	00bfffc4 	movi	r2,-1
   8d808:	0401ffc4 	movi	r16,2047
   8d80c:	003e6606 	br	8d1a8 <__alt_data_end+0xfffc16b8>
   8d810:	1c62b03a 	or	r17,r3,r17
   8d814:	8822c03a 	cmpne	r17,r17,zero
   8d818:	0005883a 	mov	r2,zero
   8d81c:	003f9906 	br	8d684 <__alt_data_end+0xfffc1b94>
   8d820:	2807883a 	mov	r3,r5
   8d824:	3023883a 	mov	r17,r6
   8d828:	0401ffc4 	movi	r16,2047
   8d82c:	003df506 	br	8d004 <__alt_data_end+0xfffc1514>
   8d830:	2807883a 	mov	r3,r5
   8d834:	3023883a 	mov	r17,r6
   8d838:	003df206 	br	8d004 <__alt_data_end+0xfffc1514>
   8d83c:	123ff804 	addi	r8,r2,-32
   8d840:	01000804 	movi	r4,32
   8d844:	1a10d83a 	srl	r8,r3,r8
   8d848:	11000a26 	beq	r2,r4,8d874 <__subdf3+0x8f4>
   8d84c:	01001004 	movi	r4,64
   8d850:	2085c83a 	sub	r2,r4,r2
   8d854:	1884983a 	sll	r2,r3,r2
   8d858:	1444b03a 	or	r2,r2,r17
   8d85c:	1004c03a 	cmpne	r2,r2,zero
   8d860:	40a2b03a 	or	r17,r8,r2
   8d864:	0005883a 	mov	r2,zero
   8d868:	003f8606 	br	8d684 <__alt_data_end+0xfffc1b94>
   8d86c:	0005883a 	mov	r2,zero
   8d870:	003fdc06 	br	8d7e4 <__alt_data_end+0xfffc1cf4>
   8d874:	0005883a 	mov	r2,zero
   8d878:	003ff706 	br	8d858 <__alt_data_end+0xfffc1d68>

0008d87c <__fixdfsi>:
   8d87c:	280cd53a 	srli	r6,r5,20
   8d880:	00c00434 	movhi	r3,16
   8d884:	18ffffc4 	addi	r3,r3,-1
   8d888:	3181ffcc 	andi	r6,r6,2047
   8d88c:	01c0ff84 	movi	r7,1022
   8d890:	28c6703a 	and	r3,r5,r3
   8d894:	280ad7fa 	srli	r5,r5,31
   8d898:	3980120e 	bge	r7,r6,8d8e4 <__fixdfsi+0x68>
   8d89c:	00810744 	movi	r2,1053
   8d8a0:	11800c16 	blt	r2,r6,8d8d4 <__fixdfsi+0x58>
   8d8a4:	00810cc4 	movi	r2,1075
   8d8a8:	1185c83a 	sub	r2,r2,r6
   8d8ac:	01c007c4 	movi	r7,31
   8d8b0:	18c00434 	orhi	r3,r3,16
   8d8b4:	38800d16 	blt	r7,r2,8d8ec <__fixdfsi+0x70>
   8d8b8:	31befb44 	addi	r6,r6,-1043
   8d8bc:	2084d83a 	srl	r2,r4,r2
   8d8c0:	1986983a 	sll	r3,r3,r6
   8d8c4:	1884b03a 	or	r2,r3,r2
   8d8c8:	28000726 	beq	r5,zero,8d8e8 <__fixdfsi+0x6c>
   8d8cc:	0085c83a 	sub	r2,zero,r2
   8d8d0:	f800283a 	ret
   8d8d4:	00a00034 	movhi	r2,32768
   8d8d8:	10bfffc4 	addi	r2,r2,-1
   8d8dc:	2885883a 	add	r2,r5,r2
   8d8e0:	f800283a 	ret
   8d8e4:	0005883a 	mov	r2,zero
   8d8e8:	f800283a 	ret
   8d8ec:	008104c4 	movi	r2,1043
   8d8f0:	1185c83a 	sub	r2,r2,r6
   8d8f4:	1884d83a 	srl	r2,r3,r2
   8d8f8:	003ff306 	br	8d8c8 <__alt_data_end+0xfffc1dd8>

0008d8fc <__floatsidf>:
   8d8fc:	defffd04 	addi	sp,sp,-12
   8d900:	dfc00215 	stw	ra,8(sp)
   8d904:	dc400115 	stw	r17,4(sp)
   8d908:	dc000015 	stw	r16,0(sp)
   8d90c:	20002b26 	beq	r4,zero,8d9bc <__floatsidf+0xc0>
   8d910:	2023883a 	mov	r17,r4
   8d914:	2020d7fa 	srli	r16,r4,31
   8d918:	20002d16 	blt	r4,zero,8d9d0 <__floatsidf+0xd4>
   8d91c:	8809883a 	mov	r4,r17
   8d920:	008da800 	call	8da80 <__clzsi2>
   8d924:	01410784 	movi	r5,1054
   8d928:	288bc83a 	sub	r5,r5,r2
   8d92c:	01010cc4 	movi	r4,1075
   8d930:	2149c83a 	sub	r4,r4,r5
   8d934:	00c007c4 	movi	r3,31
   8d938:	1900160e 	bge	r3,r4,8d994 <__floatsidf+0x98>
   8d93c:	00c104c4 	movi	r3,1043
   8d940:	1947c83a 	sub	r3,r3,r5
   8d944:	88c6983a 	sll	r3,r17,r3
   8d948:	00800434 	movhi	r2,16
   8d94c:	10bfffc4 	addi	r2,r2,-1
   8d950:	1886703a 	and	r3,r3,r2
   8d954:	2941ffcc 	andi	r5,r5,2047
   8d958:	800d883a 	mov	r6,r16
   8d95c:	0005883a 	mov	r2,zero
   8d960:	280a953a 	slli	r5,r5,20
   8d964:	31803fcc 	andi	r6,r6,255
   8d968:	01000434 	movhi	r4,16
   8d96c:	300c97fa 	slli	r6,r6,31
   8d970:	213fffc4 	addi	r4,r4,-1
   8d974:	1906703a 	and	r3,r3,r4
   8d978:	1946b03a 	or	r3,r3,r5
   8d97c:	1986b03a 	or	r3,r3,r6
   8d980:	dfc00217 	ldw	ra,8(sp)
   8d984:	dc400117 	ldw	r17,4(sp)
   8d988:	dc000017 	ldw	r16,0(sp)
   8d98c:	dec00304 	addi	sp,sp,12
   8d990:	f800283a 	ret
   8d994:	00c002c4 	movi	r3,11
   8d998:	1887c83a 	sub	r3,r3,r2
   8d99c:	88c6d83a 	srl	r3,r17,r3
   8d9a0:	8904983a 	sll	r2,r17,r4
   8d9a4:	01000434 	movhi	r4,16
   8d9a8:	213fffc4 	addi	r4,r4,-1
   8d9ac:	2941ffcc 	andi	r5,r5,2047
   8d9b0:	1906703a 	and	r3,r3,r4
   8d9b4:	800d883a 	mov	r6,r16
   8d9b8:	003fe906 	br	8d960 <__alt_data_end+0xfffc1e70>
   8d9bc:	000d883a 	mov	r6,zero
   8d9c0:	000b883a 	mov	r5,zero
   8d9c4:	0007883a 	mov	r3,zero
   8d9c8:	0005883a 	mov	r2,zero
   8d9cc:	003fe406 	br	8d960 <__alt_data_end+0xfffc1e70>
   8d9d0:	0123c83a 	sub	r17,zero,r4
   8d9d4:	003fd106 	br	8d91c <__alt_data_end+0xfffc1e2c>

0008d9d8 <__floatunsidf>:
   8d9d8:	defffe04 	addi	sp,sp,-8
   8d9dc:	dc000015 	stw	r16,0(sp)
   8d9e0:	dfc00115 	stw	ra,4(sp)
   8d9e4:	2021883a 	mov	r16,r4
   8d9e8:	20002226 	beq	r4,zero,8da74 <__floatunsidf+0x9c>
   8d9ec:	008da800 	call	8da80 <__clzsi2>
   8d9f0:	01010784 	movi	r4,1054
   8d9f4:	2089c83a 	sub	r4,r4,r2
   8d9f8:	01810cc4 	movi	r6,1075
   8d9fc:	310dc83a 	sub	r6,r6,r4
   8da00:	00c007c4 	movi	r3,31
   8da04:	1980120e 	bge	r3,r6,8da50 <__floatunsidf+0x78>
   8da08:	00c104c4 	movi	r3,1043
   8da0c:	1907c83a 	sub	r3,r3,r4
   8da10:	80ca983a 	sll	r5,r16,r3
   8da14:	00800434 	movhi	r2,16
   8da18:	10bfffc4 	addi	r2,r2,-1
   8da1c:	2101ffcc 	andi	r4,r4,2047
   8da20:	0021883a 	mov	r16,zero
   8da24:	288a703a 	and	r5,r5,r2
   8da28:	2008953a 	slli	r4,r4,20
   8da2c:	00c00434 	movhi	r3,16
   8da30:	18ffffc4 	addi	r3,r3,-1
   8da34:	28c6703a 	and	r3,r5,r3
   8da38:	8005883a 	mov	r2,r16
   8da3c:	1906b03a 	or	r3,r3,r4
   8da40:	dfc00117 	ldw	ra,4(sp)
   8da44:	dc000017 	ldw	r16,0(sp)
   8da48:	dec00204 	addi	sp,sp,8
   8da4c:	f800283a 	ret
   8da50:	00c002c4 	movi	r3,11
   8da54:	188bc83a 	sub	r5,r3,r2
   8da58:	814ad83a 	srl	r5,r16,r5
   8da5c:	00c00434 	movhi	r3,16
   8da60:	18ffffc4 	addi	r3,r3,-1
   8da64:	81a0983a 	sll	r16,r16,r6
   8da68:	2101ffcc 	andi	r4,r4,2047
   8da6c:	28ca703a 	and	r5,r5,r3
   8da70:	003fed06 	br	8da28 <__alt_data_end+0xfffc1f38>
   8da74:	0009883a 	mov	r4,zero
   8da78:	000b883a 	mov	r5,zero
   8da7c:	003fea06 	br	8da28 <__alt_data_end+0xfffc1f38>

0008da80 <__clzsi2>:
   8da80:	00bfffd4 	movui	r2,65535
   8da84:	11000536 	bltu	r2,r4,8da9c <__clzsi2+0x1c>
   8da88:	00803fc4 	movi	r2,255
   8da8c:	11000f36 	bltu	r2,r4,8dacc <__clzsi2+0x4c>
   8da90:	00800804 	movi	r2,32
   8da94:	0007883a 	mov	r3,zero
   8da98:	00000506 	br	8dab0 <__clzsi2+0x30>
   8da9c:	00804034 	movhi	r2,256
   8daa0:	10bfffc4 	addi	r2,r2,-1
   8daa4:	11000c2e 	bgeu	r2,r4,8dad8 <__clzsi2+0x58>
   8daa8:	00800204 	movi	r2,8
   8daac:	00c00604 	movi	r3,24
   8dab0:	20c8d83a 	srl	r4,r4,r3
   8dab4:	00c00274 	movhi	r3,9
   8dab8:	18c24704 	addi	r3,r3,2332
   8dabc:	1909883a 	add	r4,r3,r4
   8dac0:	20c00003 	ldbu	r3,0(r4)
   8dac4:	10c5c83a 	sub	r2,r2,r3
   8dac8:	f800283a 	ret
   8dacc:	00800604 	movi	r2,24
   8dad0:	00c00204 	movi	r3,8
   8dad4:	003ff606 	br	8dab0 <__alt_data_end+0xfffc1fc0>
   8dad8:	00800404 	movi	r2,16
   8dadc:	1007883a 	mov	r3,r2
   8dae0:	003ff306 	br	8dab0 <__alt_data_end+0xfffc1fc0>

0008dae4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8dae4:	defffe04 	addi	sp,sp,-8
   8dae8:	dfc00115 	stw	ra,4(sp)
   8daec:	df000015 	stw	fp,0(sp)
   8daf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8daf4:	d0a00b17 	ldw	r2,-32724(gp)
   8daf8:	10000326 	beq	r2,zero,8db08 <alt_get_errno+0x24>
   8dafc:	d0a00b17 	ldw	r2,-32724(gp)
   8db00:	103ee83a 	callr	r2
   8db04:	00000106 	br	8db0c <alt_get_errno+0x28>
   8db08:	d0a6f804 	addi	r2,gp,-25632
}
   8db0c:	e037883a 	mov	sp,fp
   8db10:	dfc00117 	ldw	ra,4(sp)
   8db14:	df000017 	ldw	fp,0(sp)
   8db18:	dec00204 	addi	sp,sp,8
   8db1c:	f800283a 	ret

0008db20 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8db20:	defffb04 	addi	sp,sp,-20
   8db24:	dfc00415 	stw	ra,16(sp)
   8db28:	df000315 	stw	fp,12(sp)
   8db2c:	df000304 	addi	fp,sp,12
   8db30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8db34:	e0bfff17 	ldw	r2,-4(fp)
   8db38:	10000616 	blt	r2,zero,8db54 <close+0x34>
   8db3c:	e0bfff17 	ldw	r2,-4(fp)
   8db40:	10c00324 	muli	r3,r2,12
   8db44:	00800274 	movhi	r2,9
   8db48:	1084f204 	addi	r2,r2,5064
   8db4c:	1885883a 	add	r2,r3,r2
   8db50:	00000106 	br	8db58 <close+0x38>
   8db54:	0005883a 	mov	r2,zero
   8db58:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   8db5c:	e0bffd17 	ldw	r2,-12(fp)
   8db60:	10001926 	beq	r2,zero,8dbc8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8db64:	e0bffd17 	ldw	r2,-12(fp)
   8db68:	10800017 	ldw	r2,0(r2)
   8db6c:	10800417 	ldw	r2,16(r2)
   8db70:	10000626 	beq	r2,zero,8db8c <close+0x6c>
   8db74:	e0bffd17 	ldw	r2,-12(fp)
   8db78:	10800017 	ldw	r2,0(r2)
   8db7c:	10800417 	ldw	r2,16(r2)
   8db80:	e13ffd17 	ldw	r4,-12(fp)
   8db84:	103ee83a 	callr	r2
   8db88:	00000106 	br	8db90 <close+0x70>
   8db8c:	0005883a 	mov	r2,zero
   8db90:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8db94:	e13fff17 	ldw	r4,-4(fp)
   8db98:	008e7f40 	call	8e7f4 <alt_release_fd>
    if (rval < 0)
   8db9c:	e0bffe17 	ldw	r2,-8(fp)
   8dba0:	1000070e 	bge	r2,zero,8dbc0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   8dba4:	008dae40 	call	8dae4 <alt_get_errno>
   8dba8:	1007883a 	mov	r3,r2
   8dbac:	e0bffe17 	ldw	r2,-8(fp)
   8dbb0:	0085c83a 	sub	r2,zero,r2
   8dbb4:	18800015 	stw	r2,0(r3)
      return -1;
   8dbb8:	00bfffc4 	movi	r2,-1
   8dbbc:	00000706 	br	8dbdc <close+0xbc>
    }
    return 0;
   8dbc0:	0005883a 	mov	r2,zero
   8dbc4:	00000506 	br	8dbdc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8dbc8:	008dae40 	call	8dae4 <alt_get_errno>
   8dbcc:	1007883a 	mov	r3,r2
   8dbd0:	00801444 	movi	r2,81
   8dbd4:	18800015 	stw	r2,0(r3)
    return -1;
   8dbd8:	00bfffc4 	movi	r2,-1
  }
}
   8dbdc:	e037883a 	mov	sp,fp
   8dbe0:	dfc00117 	ldw	ra,4(sp)
   8dbe4:	df000017 	ldw	fp,0(sp)
   8dbe8:	dec00204 	addi	sp,sp,8
   8dbec:	f800283a 	ret

0008dbf0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8dbf0:	defffc04 	addi	sp,sp,-16
   8dbf4:	df000315 	stw	fp,12(sp)
   8dbf8:	df000304 	addi	fp,sp,12
   8dbfc:	e13ffd15 	stw	r4,-12(fp)
   8dc00:	e17ffe15 	stw	r5,-8(fp)
   8dc04:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8dc08:	e0bfff17 	ldw	r2,-4(fp)
}
   8dc0c:	e037883a 	mov	sp,fp
   8dc10:	df000017 	ldw	fp,0(sp)
   8dc14:	dec00104 	addi	sp,sp,4
   8dc18:	f800283a 	ret

0008dc1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8dc1c:	defffe04 	addi	sp,sp,-8
   8dc20:	dfc00115 	stw	ra,4(sp)
   8dc24:	df000015 	stw	fp,0(sp)
   8dc28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8dc2c:	d0a00b17 	ldw	r2,-32724(gp)
   8dc30:	10000326 	beq	r2,zero,8dc40 <alt_get_errno+0x24>
   8dc34:	d0a00b17 	ldw	r2,-32724(gp)
   8dc38:	103ee83a 	callr	r2
   8dc3c:	00000106 	br	8dc44 <alt_get_errno+0x28>
   8dc40:	d0a6f804 	addi	r2,gp,-25632
}
   8dc44:	e037883a 	mov	sp,fp
   8dc48:	dfc00117 	ldw	ra,4(sp)
   8dc4c:	df000017 	ldw	fp,0(sp)
   8dc50:	dec00204 	addi	sp,sp,8
   8dc54:	f800283a 	ret

0008dc58 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8dc58:	defffb04 	addi	sp,sp,-20
   8dc5c:	dfc00415 	stw	ra,16(sp)
   8dc60:	df000315 	stw	fp,12(sp)
   8dc64:	df000304 	addi	fp,sp,12
   8dc68:	e13ffe15 	stw	r4,-8(fp)
   8dc6c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8dc70:	e0bffe17 	ldw	r2,-8(fp)
   8dc74:	10000616 	blt	r2,zero,8dc90 <fstat+0x38>
   8dc78:	e0bffe17 	ldw	r2,-8(fp)
   8dc7c:	10c00324 	muli	r3,r2,12
   8dc80:	00800274 	movhi	r2,9
   8dc84:	1084f204 	addi	r2,r2,5064
   8dc88:	1885883a 	add	r2,r3,r2
   8dc8c:	00000106 	br	8dc94 <fstat+0x3c>
   8dc90:	0005883a 	mov	r2,zero
   8dc94:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   8dc98:	e0bffd17 	ldw	r2,-12(fp)
   8dc9c:	10001026 	beq	r2,zero,8dce0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8dca0:	e0bffd17 	ldw	r2,-12(fp)
   8dca4:	10800017 	ldw	r2,0(r2)
   8dca8:	10800817 	ldw	r2,32(r2)
   8dcac:	10000726 	beq	r2,zero,8dccc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   8dcb0:	e0bffd17 	ldw	r2,-12(fp)
   8dcb4:	10800017 	ldw	r2,0(r2)
   8dcb8:	10800817 	ldw	r2,32(r2)
   8dcbc:	e17fff17 	ldw	r5,-4(fp)
   8dcc0:	e13ffd17 	ldw	r4,-12(fp)
   8dcc4:	103ee83a 	callr	r2
   8dcc8:	00000a06 	br	8dcf4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8dccc:	e0bfff17 	ldw	r2,-4(fp)
   8dcd0:	00c80004 	movi	r3,8192
   8dcd4:	10c00115 	stw	r3,4(r2)
      return 0;
   8dcd8:	0005883a 	mov	r2,zero
   8dcdc:	00000506 	br	8dcf4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8dce0:	008dc1c0 	call	8dc1c <alt_get_errno>
   8dce4:	1007883a 	mov	r3,r2
   8dce8:	00801444 	movi	r2,81
   8dcec:	18800015 	stw	r2,0(r3)
    return -1;
   8dcf0:	00bfffc4 	movi	r2,-1
  }
}
   8dcf4:	e037883a 	mov	sp,fp
   8dcf8:	dfc00117 	ldw	ra,4(sp)
   8dcfc:	df000017 	ldw	fp,0(sp)
   8dd00:	dec00204 	addi	sp,sp,8
   8dd04:	f800283a 	ret

0008dd08 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
   8dd08:	defff404 	addi	sp,sp,-48
   8dd0c:	dfc00b15 	stw	ra,44(sp)
   8dd10:	df000a15 	stw	fp,40(sp)
   8dd14:	dd000915 	stw	r20,36(sp)
   8dd18:	dcc00815 	stw	r19,32(sp)
   8dd1c:	dc800715 	stw	r18,28(sp)
   8dd20:	dc400615 	stw	r17,24(sp)
   8dd24:	dc000515 	stw	r16,20(sp)
   8dd28:	df000a04 	addi	fp,sp,40
   8dd2c:	e13ff915 	stw	r4,-28(fp)
   8dd30:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
   8dd34:	e0bffa17 	ldw	r2,-24(fp)
   8dd38:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8dd3c:	d0a70817 	ldw	r2,-25568(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
   8dd40:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8dd44:	d0a70717 	ldw	r2,-25572(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
   8dd48:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
   8dd4c:	e0bff817 	ldw	r2,-32(fp)
   8dd50:	10005f26 	beq	r2,zero,8ded0 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   8dd54:	d0a70117 	ldw	r2,-25596(gp)
   8dd58:	1029883a 	mov	r20,r2
   8dd5c:	e17ff817 	ldw	r5,-32(fp)
   8dd60:	e13ff717 	ldw	r4,-36(fp)
   8dd64:	00811340 	call	81134 <__udivsi3>
   8dd68:	a085883a 	add	r2,r20,r2
   8dd6c:	1007883a 	mov	r3,r2
   8dd70:	e0bff917 	ldw	r2,-28(fp)
   8dd74:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
   8dd78:	d0a70217 	ldw	r2,-25592(gp)
   8dd7c:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
   8dd80:	e0bff717 	ldw	r2,-36(fp)
   8dd84:	1021883a 	mov	r16,r2
   8dd88:	0023883a 	mov	r17,zero
   8dd8c:	e17ff817 	ldw	r5,-32(fp)
   8dd90:	010003f4 	movhi	r4,15
   8dd94:	21109004 	addi	r4,r4,16960
   8dd98:	00811340 	call	81134 <__udivsi3>
   8dd9c:	1025883a 	mov	r18,r2
   8dda0:	0027883a 	mov	r19,zero
   8dda4:	900d883a 	mov	r6,r18
   8dda8:	980f883a 	mov	r7,r19
   8ddac:	8009883a 	mov	r4,r16
   8ddb0:	880b883a 	mov	r5,r17
   8ddb4:	008a96c0 	call	8a96c <__muldi3>
   8ddb8:	1009883a 	mov	r4,r2
   8ddbc:	180b883a 	mov	r5,r3
   8ddc0:	2005883a 	mov	r2,r4
   8ddc4:	2807883a 	mov	r3,r5
   8ddc8:	018003f4 	movhi	r6,15
   8ddcc:	31909004 	addi	r6,r6,16960
   8ddd0:	000f883a 	mov	r7,zero
   8ddd4:	1009883a 	mov	r4,r2
   8ddd8:	180b883a 	mov	r5,r3
   8dddc:	008af440 	call	8af44 <__umoddi3>
   8dde0:	1009883a 	mov	r4,r2
   8dde4:	180b883a 	mov	r5,r3
   8dde8:	2005883a 	mov	r2,r4
   8ddec:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
   8ddf0:	a085883a 	add	r2,r20,r2
   8ddf4:	1007883a 	mov	r3,r2
   8ddf8:	e0bff917 	ldw	r2,-28(fp)
   8ddfc:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   8de00:	00001406 	br	8de54 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
   8de04:	e0bff917 	ldw	r2,-28(fp)
   8de08:	10800017 	ldw	r2,0(r2)
   8de0c:	00800516 	blt	zero,r2,8de24 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
   8de10:	e0bff917 	ldw	r2,-28(fp)
   8de14:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
   8de18:	e0bff917 	ldw	r2,-28(fp)
   8de1c:	10000115 	stw	zero,4(r2)
          break;
   8de20:	00000f06 	br	8de60 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
   8de24:	e0bff917 	ldw	r2,-28(fp)
   8de28:	10800017 	ldw	r2,0(r2)
   8de2c:	10ffffc4 	addi	r3,r2,-1
   8de30:	e0bff917 	ldw	r2,-28(fp)
   8de34:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
   8de38:	e0bff917 	ldw	r2,-28(fp)
   8de3c:	10c00117 	ldw	r3,4(r2)
   8de40:	008003f4 	movhi	r2,15
   8de44:	10909004 	addi	r2,r2,16960
   8de48:	1887883a 	add	r3,r3,r2
   8de4c:	e0bff917 	ldw	r2,-28(fp)
   8de50:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   8de54:	e0bff917 	ldw	r2,-28(fp)
   8de58:	10800117 	ldw	r2,4(r2)
   8de5c:	103fe916 	blt	r2,zero,8de04 <__alt_data_end+0xfffc2314>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   8de60:	00000c06 	br	8de94 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
   8de64:	e0bff917 	ldw	r2,-28(fp)
   8de68:	10800017 	ldw	r2,0(r2)
   8de6c:	10c00044 	addi	r3,r2,1
   8de70:	e0bff917 	ldw	r2,-28(fp)
   8de74:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
   8de78:	e0bff917 	ldw	r2,-28(fp)
   8de7c:	10c00117 	ldw	r3,4(r2)
   8de80:	00bffc74 	movhi	r2,65521
   8de84:	10af7004 	addi	r2,r2,-16960
   8de88:	1887883a 	add	r3,r3,r2
   8de8c:	e0bff917 	ldw	r2,-28(fp)
   8de90:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   8de94:	e0bff917 	ldw	r2,-28(fp)
   8de98:	10c00117 	ldw	r3,4(r2)
   8de9c:	008003f4 	movhi	r2,15
   8dea0:	10908fc4 	addi	r2,r2,16959
   8dea4:	10ffef16 	blt	r2,r3,8de64 <__alt_data_end+0xfffc2374>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
   8dea8:	e0bff617 	ldw	r2,-40(fp)
   8deac:	10000626 	beq	r2,zero,8dec8 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
   8deb0:	d0e6ff17 	ldw	r3,-25604(gp)
   8deb4:	e0bff617 	ldw	r2,-40(fp)
   8deb8:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
   8debc:	d0e70017 	ldw	r3,-25600(gp)
   8dec0:	e0bff617 	ldw	r2,-40(fp)
   8dec4:	10c00115 	stw	r3,4(r2)
    }

    return 0;
   8dec8:	0005883a 	mov	r2,zero
   8decc:	00000106 	br	8ded4 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
   8ded0:	00bfde84 	movi	r2,-134
}
   8ded4:	e6fffb04 	addi	sp,fp,-20
   8ded8:	dfc00617 	ldw	ra,24(sp)
   8dedc:	df000517 	ldw	fp,20(sp)
   8dee0:	dd000417 	ldw	r20,16(sp)
   8dee4:	dcc00317 	ldw	r19,12(sp)
   8dee8:	dc800217 	ldw	r18,8(sp)
   8deec:	dc400117 	ldw	r17,4(sp)
   8def0:	dc000017 	ldw	r16,0(sp)
   8def4:	dec00704 	addi	sp,sp,28
   8def8:	f800283a 	ret

0008defc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8defc:	defff904 	addi	sp,sp,-28
   8df00:	dfc00615 	stw	ra,24(sp)
   8df04:	df000515 	stw	fp,20(sp)
   8df08:	df000504 	addi	fp,sp,20
   8df0c:	e13ffc15 	stw	r4,-16(fp)
   8df10:	e17ffd15 	stw	r5,-12(fp)
   8df14:	e1bffe15 	stw	r6,-8(fp)
   8df18:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8df1c:	e0800217 	ldw	r2,8(fp)
   8df20:	d8800015 	stw	r2,0(sp)
   8df24:	e1ffff17 	ldw	r7,-4(fp)
   8df28:	e1bffe17 	ldw	r6,-8(fp)
   8df2c:	e17ffd17 	ldw	r5,-12(fp)
   8df30:	e13ffc17 	ldw	r4,-16(fp)
   8df34:	008e0ac0 	call	8e0ac <alt_iic_isr_register>
}  
   8df38:	e037883a 	mov	sp,fp
   8df3c:	dfc00117 	ldw	ra,4(sp)
   8df40:	df000017 	ldw	fp,0(sp)
   8df44:	dec00204 	addi	sp,sp,8
   8df48:	f800283a 	ret

0008df4c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8df4c:	defff904 	addi	sp,sp,-28
   8df50:	df000615 	stw	fp,24(sp)
   8df54:	df000604 	addi	fp,sp,24
   8df58:	e13ffe15 	stw	r4,-8(fp)
   8df5c:	e17fff15 	stw	r5,-4(fp)
   8df60:	e0bfff17 	ldw	r2,-4(fp)
   8df64:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8df68:	0005303a 	rdctl	r2,status
   8df6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8df70:	e0fffb17 	ldw	r3,-20(fp)
   8df74:	00bfff84 	movi	r2,-2
   8df78:	1884703a 	and	r2,r3,r2
   8df7c:	1001703a 	wrctl	status,r2
  
  return context;
   8df80:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8df84:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   8df88:	00c00044 	movi	r3,1
   8df8c:	e0bffa17 	ldw	r2,-24(fp)
   8df90:	1884983a 	sll	r2,r3,r2
   8df94:	1007883a 	mov	r3,r2
   8df98:	d0a70317 	ldw	r2,-25588(gp)
   8df9c:	1884b03a 	or	r2,r3,r2
   8dfa0:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8dfa4:	d0a70317 	ldw	r2,-25588(gp)
   8dfa8:	100170fa 	wrctl	ienable,r2
   8dfac:	e0bffc17 	ldw	r2,-16(fp)
   8dfb0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8dfb4:	e0bffd17 	ldw	r2,-12(fp)
   8dfb8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8dfbc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   8dfc0:	0001883a 	nop
}
   8dfc4:	e037883a 	mov	sp,fp
   8dfc8:	df000017 	ldw	fp,0(sp)
   8dfcc:	dec00104 	addi	sp,sp,4
   8dfd0:	f800283a 	ret

0008dfd4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8dfd4:	defff904 	addi	sp,sp,-28
   8dfd8:	df000615 	stw	fp,24(sp)
   8dfdc:	df000604 	addi	fp,sp,24
   8dfe0:	e13ffe15 	stw	r4,-8(fp)
   8dfe4:	e17fff15 	stw	r5,-4(fp)
   8dfe8:	e0bfff17 	ldw	r2,-4(fp)
   8dfec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8dff0:	0005303a 	rdctl	r2,status
   8dff4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8dff8:	e0fffb17 	ldw	r3,-20(fp)
   8dffc:	00bfff84 	movi	r2,-2
   8e000:	1884703a 	and	r2,r3,r2
   8e004:	1001703a 	wrctl	status,r2
  
  return context;
   8e008:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8e00c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   8e010:	00c00044 	movi	r3,1
   8e014:	e0bffa17 	ldw	r2,-24(fp)
   8e018:	1884983a 	sll	r2,r3,r2
   8e01c:	0084303a 	nor	r2,zero,r2
   8e020:	1007883a 	mov	r3,r2
   8e024:	d0a70317 	ldw	r2,-25588(gp)
   8e028:	1884703a 	and	r2,r3,r2
   8e02c:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8e030:	d0a70317 	ldw	r2,-25588(gp)
   8e034:	100170fa 	wrctl	ienable,r2
   8e038:	e0bffc17 	ldw	r2,-16(fp)
   8e03c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e040:	e0bffd17 	ldw	r2,-12(fp)
   8e044:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8e048:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   8e04c:	0001883a 	nop
}
   8e050:	e037883a 	mov	sp,fp
   8e054:	df000017 	ldw	fp,0(sp)
   8e058:	dec00104 	addi	sp,sp,4
   8e05c:	f800283a 	ret

0008e060 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8e060:	defffc04 	addi	sp,sp,-16
   8e064:	df000315 	stw	fp,12(sp)
   8e068:	df000304 	addi	fp,sp,12
   8e06c:	e13ffe15 	stw	r4,-8(fp)
   8e070:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8e074:	000530fa 	rdctl	r2,ienable
   8e078:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8e07c:	00c00044 	movi	r3,1
   8e080:	e0bfff17 	ldw	r2,-4(fp)
   8e084:	1884983a 	sll	r2,r3,r2
   8e088:	1007883a 	mov	r3,r2
   8e08c:	e0bffd17 	ldw	r2,-12(fp)
   8e090:	1884703a 	and	r2,r3,r2
   8e094:	1004c03a 	cmpne	r2,r2,zero
   8e098:	10803fcc 	andi	r2,r2,255
}
   8e09c:	e037883a 	mov	sp,fp
   8e0a0:	df000017 	ldw	fp,0(sp)
   8e0a4:	dec00104 	addi	sp,sp,4
   8e0a8:	f800283a 	ret

0008e0ac <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8e0ac:	defff504 	addi	sp,sp,-44
   8e0b0:	dfc00a15 	stw	ra,40(sp)
   8e0b4:	df000915 	stw	fp,36(sp)
   8e0b8:	df000904 	addi	fp,sp,36
   8e0bc:	e13ffc15 	stw	r4,-16(fp)
   8e0c0:	e17ffd15 	stw	r5,-12(fp)
   8e0c4:	e1bffe15 	stw	r6,-8(fp)
   8e0c8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   8e0cc:	00bffa84 	movi	r2,-22
   8e0d0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8e0d4:	e0bffd17 	ldw	r2,-12(fp)
   8e0d8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8e0dc:	e0bff817 	ldw	r2,-32(fp)
   8e0e0:	10800808 	cmpgei	r2,r2,32
   8e0e4:	1000271e 	bne	r2,zero,8e184 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e0e8:	0005303a 	rdctl	r2,status
   8e0ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e0f0:	e0fffb17 	ldw	r3,-20(fp)
   8e0f4:	00bfff84 	movi	r2,-2
   8e0f8:	1884703a 	and	r2,r3,r2
   8e0fc:	1001703a 	wrctl	status,r2
  
  return context;
   8e100:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8e104:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   8e108:	00800274 	movhi	r2,9
   8e10c:	10907e04 	addi	r2,r2,16888
   8e110:	e0fff817 	ldw	r3,-32(fp)
   8e114:	180690fa 	slli	r3,r3,3
   8e118:	10c5883a 	add	r2,r2,r3
   8e11c:	e0fffe17 	ldw	r3,-8(fp)
   8e120:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   8e124:	00800274 	movhi	r2,9
   8e128:	10907e04 	addi	r2,r2,16888
   8e12c:	e0fff817 	ldw	r3,-32(fp)
   8e130:	180690fa 	slli	r3,r3,3
   8e134:	10c5883a 	add	r2,r2,r3
   8e138:	10800104 	addi	r2,r2,4
   8e13c:	e0ffff17 	ldw	r3,-4(fp)
   8e140:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8e144:	e0bffe17 	ldw	r2,-8(fp)
   8e148:	10000526 	beq	r2,zero,8e160 <alt_iic_isr_register+0xb4>
   8e14c:	e0bff817 	ldw	r2,-32(fp)
   8e150:	100b883a 	mov	r5,r2
   8e154:	e13ffc17 	ldw	r4,-16(fp)
   8e158:	008df4c0 	call	8df4c <alt_ic_irq_enable>
   8e15c:	00000406 	br	8e170 <alt_iic_isr_register+0xc4>
   8e160:	e0bff817 	ldw	r2,-32(fp)
   8e164:	100b883a 	mov	r5,r2
   8e168:	e13ffc17 	ldw	r4,-16(fp)
   8e16c:	008dfd40 	call	8dfd4 <alt_ic_irq_disable>
   8e170:	e0bff715 	stw	r2,-36(fp)
   8e174:	e0bffa17 	ldw	r2,-24(fp)
   8e178:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e17c:	e0bff917 	ldw	r2,-28(fp)
   8e180:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8e184:	e0bff717 	ldw	r2,-36(fp)
}
   8e188:	e037883a 	mov	sp,fp
   8e18c:	dfc00117 	ldw	ra,4(sp)
   8e190:	df000017 	ldw	fp,0(sp)
   8e194:	dec00204 	addi	sp,sp,8
   8e198:	f800283a 	ret

0008e19c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   8e19c:	defff004 	addi	sp,sp,-64
   8e1a0:	df000f15 	stw	fp,60(sp)
   8e1a4:	df000f04 	addi	fp,sp,60
   8e1a8:	e13ffd15 	stw	r4,-12(fp)
   8e1ac:	e17ffe15 	stw	r5,-8(fp)
   8e1b0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   8e1b4:	00bffa84 	movi	r2,-22
   8e1b8:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8e1bc:	e0bffd17 	ldw	r2,-12(fp)
   8e1c0:	10800828 	cmpgeui	r2,r2,32
   8e1c4:	1000501e 	bne	r2,zero,8e308 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e1c8:	0005303a 	rdctl	r2,status
   8e1cc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e1d0:	e0fff617 	ldw	r3,-40(fp)
   8e1d4:	00bfff84 	movi	r2,-2
   8e1d8:	1884703a 	and	r2,r3,r2
   8e1dc:	1001703a 	wrctl	status,r2
  
  return context;
   8e1e0:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   8e1e4:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   8e1e8:	00800274 	movhi	r2,9
   8e1ec:	10907e04 	addi	r2,r2,16888
   8e1f0:	e0fffd17 	ldw	r3,-12(fp)
   8e1f4:	180690fa 	slli	r3,r3,3
   8e1f8:	10c5883a 	add	r2,r2,r3
   8e1fc:	e0ffff17 	ldw	r3,-4(fp)
   8e200:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   8e204:	00800274 	movhi	r2,9
   8e208:	10907e04 	addi	r2,r2,16888
   8e20c:	e0fffd17 	ldw	r3,-12(fp)
   8e210:	180690fa 	slli	r3,r3,3
   8e214:	10c5883a 	add	r2,r2,r3
   8e218:	10800104 	addi	r2,r2,4
   8e21c:	e0fffe17 	ldw	r3,-8(fp)
   8e220:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   8e224:	e0bfff17 	ldw	r2,-4(fp)
   8e228:	10001926 	beq	r2,zero,8e290 <alt_irq_register+0xf4>
   8e22c:	e0bffd17 	ldw	r2,-12(fp)
   8e230:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e234:	0005303a 	rdctl	r2,status
   8e238:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e23c:	e0fff717 	ldw	r3,-36(fp)
   8e240:	00bfff84 	movi	r2,-2
   8e244:	1884703a 	and	r2,r3,r2
   8e248:	1001703a 	wrctl	status,r2
  
  return context;
   8e24c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8e250:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   8e254:	00c00044 	movi	r3,1
   8e258:	e0bff217 	ldw	r2,-56(fp)
   8e25c:	1884983a 	sll	r2,r3,r2
   8e260:	1007883a 	mov	r3,r2
   8e264:	d0a70317 	ldw	r2,-25588(gp)
   8e268:	1884b03a 	or	r2,r3,r2
   8e26c:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8e270:	d0a70317 	ldw	r2,-25588(gp)
   8e274:	100170fa 	wrctl	ienable,r2
   8e278:	e0bff817 	ldw	r2,-32(fp)
   8e27c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e280:	e0bff917 	ldw	r2,-28(fp)
   8e284:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8e288:	0005883a 	mov	r2,zero
   8e28c:	00001906 	br	8e2f4 <alt_irq_register+0x158>
   8e290:	e0bffd17 	ldw	r2,-12(fp)
   8e294:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e298:	0005303a 	rdctl	r2,status
   8e29c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e2a0:	e0fffa17 	ldw	r3,-24(fp)
   8e2a4:	00bfff84 	movi	r2,-2
   8e2a8:	1884703a 	and	r2,r3,r2
   8e2ac:	1001703a 	wrctl	status,r2
  
  return context;
   8e2b0:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8e2b4:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   8e2b8:	00c00044 	movi	r3,1
   8e2bc:	e0bff417 	ldw	r2,-48(fp)
   8e2c0:	1884983a 	sll	r2,r3,r2
   8e2c4:	0084303a 	nor	r2,zero,r2
   8e2c8:	1007883a 	mov	r3,r2
   8e2cc:	d0a70317 	ldw	r2,-25588(gp)
   8e2d0:	1884703a 	and	r2,r3,r2
   8e2d4:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8e2d8:	d0a70317 	ldw	r2,-25588(gp)
   8e2dc:	100170fa 	wrctl	ienable,r2
   8e2e0:	e0bffb17 	ldw	r2,-20(fp)
   8e2e4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e2e8:	e0bffc17 	ldw	r2,-16(fp)
   8e2ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8e2f0:	0005883a 	mov	r2,zero
   8e2f4:	e0bff115 	stw	r2,-60(fp)
   8e2f8:	e0bff317 	ldw	r2,-52(fp)
   8e2fc:	e0bff515 	stw	r2,-44(fp)
   8e300:	e0bff517 	ldw	r2,-44(fp)
   8e304:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   8e308:	e0bff117 	ldw	r2,-60(fp)
}
   8e30c:	e037883a 	mov	sp,fp
   8e310:	df000017 	ldw	fp,0(sp)
   8e314:	dec00104 	addi	sp,sp,4
   8e318:	f800283a 	ret

0008e31c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e31c:	defffe04 	addi	sp,sp,-8
   8e320:	dfc00115 	stw	ra,4(sp)
   8e324:	df000015 	stw	fp,0(sp)
   8e328:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e32c:	d0a00b17 	ldw	r2,-32724(gp)
   8e330:	10000326 	beq	r2,zero,8e340 <alt_get_errno+0x24>
   8e334:	d0a00b17 	ldw	r2,-32724(gp)
   8e338:	103ee83a 	callr	r2
   8e33c:	00000106 	br	8e344 <alt_get_errno+0x28>
   8e340:	d0a6f804 	addi	r2,gp,-25632
}
   8e344:	e037883a 	mov	sp,fp
   8e348:	dfc00117 	ldw	ra,4(sp)
   8e34c:	df000017 	ldw	fp,0(sp)
   8e350:	dec00204 	addi	sp,sp,8
   8e354:	f800283a 	ret

0008e358 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8e358:	deffed04 	addi	sp,sp,-76
   8e35c:	dfc01215 	stw	ra,72(sp)
   8e360:	df001115 	stw	fp,68(sp)
   8e364:	df001104 	addi	fp,sp,68
   8e368:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e36c:	e0bfff17 	ldw	r2,-4(fp)
   8e370:	10000616 	blt	r2,zero,8e38c <isatty+0x34>
   8e374:	e0bfff17 	ldw	r2,-4(fp)
   8e378:	10c00324 	muli	r3,r2,12
   8e37c:	00800274 	movhi	r2,9
   8e380:	1084f204 	addi	r2,r2,5064
   8e384:	1885883a 	add	r2,r3,r2
   8e388:	00000106 	br	8e390 <isatty+0x38>
   8e38c:	0005883a 	mov	r2,zero
   8e390:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   8e394:	e0bfef17 	ldw	r2,-68(fp)
   8e398:	10000e26 	beq	r2,zero,8e3d4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8e39c:	e0bfef17 	ldw	r2,-68(fp)
   8e3a0:	10800017 	ldw	r2,0(r2)
   8e3a4:	10800817 	ldw	r2,32(r2)
   8e3a8:	1000021e 	bne	r2,zero,8e3b4 <isatty+0x5c>
    {
      return 1;
   8e3ac:	00800044 	movi	r2,1
   8e3b0:	00000d06 	br	8e3e8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8e3b4:	e0bff004 	addi	r2,fp,-64
   8e3b8:	100b883a 	mov	r5,r2
   8e3bc:	e13fff17 	ldw	r4,-4(fp)
   8e3c0:	008dc580 	call	8dc58 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8e3c4:	e0bff117 	ldw	r2,-60(fp)
   8e3c8:	10880020 	cmpeqi	r2,r2,8192
   8e3cc:	10803fcc 	andi	r2,r2,255
   8e3d0:	00000506 	br	8e3e8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e3d4:	008e31c0 	call	8e31c <alt_get_errno>
   8e3d8:	1007883a 	mov	r3,r2
   8e3dc:	00801444 	movi	r2,81
   8e3e0:	18800015 	stw	r2,0(r3)
    return 0;
   8e3e4:	0005883a 	mov	r2,zero
  }
}
   8e3e8:	e037883a 	mov	sp,fp
   8e3ec:	dfc00117 	ldw	ra,4(sp)
   8e3f0:	df000017 	ldw	fp,0(sp)
   8e3f4:	dec00204 	addi	sp,sp,8
   8e3f8:	f800283a 	ret

0008e3fc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8e3fc:	defffc04 	addi	sp,sp,-16
   8e400:	df000315 	stw	fp,12(sp)
   8e404:	df000304 	addi	fp,sp,12
   8e408:	e13ffd15 	stw	r4,-12(fp)
   8e40c:	e17ffe15 	stw	r5,-8(fp)
   8e410:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8e414:	e0fffe17 	ldw	r3,-8(fp)
   8e418:	e0bffd17 	ldw	r2,-12(fp)
   8e41c:	18800c26 	beq	r3,r2,8e450 <alt_load_section+0x54>
  {
    while( to != end )
   8e420:	00000806 	br	8e444 <alt_load_section+0x48>
    {
      *to++ = *from++;
   8e424:	e0bffe17 	ldw	r2,-8(fp)
   8e428:	10c00104 	addi	r3,r2,4
   8e42c:	e0fffe15 	stw	r3,-8(fp)
   8e430:	e0fffd17 	ldw	r3,-12(fp)
   8e434:	19000104 	addi	r4,r3,4
   8e438:	e13ffd15 	stw	r4,-12(fp)
   8e43c:	18c00017 	ldw	r3,0(r3)
   8e440:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8e444:	e0fffe17 	ldw	r3,-8(fp)
   8e448:	e0bfff17 	ldw	r2,-4(fp)
   8e44c:	18bff51e 	bne	r3,r2,8e424 <__alt_data_end+0xfffc2934>
    {
      *to++ = *from++;
    }
  }
}
   8e450:	0001883a 	nop
   8e454:	e037883a 	mov	sp,fp
   8e458:	df000017 	ldw	fp,0(sp)
   8e45c:	dec00104 	addi	sp,sp,4
   8e460:	f800283a 	ret

0008e464 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8e464:	defffe04 	addi	sp,sp,-8
   8e468:	dfc00115 	stw	ra,4(sp)
   8e46c:	df000015 	stw	fp,0(sp)
   8e470:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8e474:	01800274 	movhi	r6,9
   8e478:	31897a04 	addi	r6,r6,9704
   8e47c:	01400274 	movhi	r5,9
   8e480:	29429204 	addi	r5,r5,2632
   8e484:	01000274 	movhi	r4,9
   8e488:	21097a04 	addi	r4,r4,9704
   8e48c:	008e3fc0 	call	8e3fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8e490:	01800234 	movhi	r6,8
   8e494:	31809104 	addi	r6,r6,580
   8e498:	01400234 	movhi	r5,8
   8e49c:	29400804 	addi	r5,r5,32
   8e4a0:	01000234 	movhi	r4,8
   8e4a4:	21000804 	addi	r4,r4,32
   8e4a8:	008e3fc0 	call	8e3fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8e4ac:	01800274 	movhi	r6,9
   8e4b0:	31829204 	addi	r6,r6,2632
   8e4b4:	01400274 	movhi	r5,9
   8e4b8:	29418204 	addi	r5,r5,1544
   8e4bc:	01000274 	movhi	r4,9
   8e4c0:	21018204 	addi	r4,r4,1544
   8e4c4:	008e3fc0 	call	8e3fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8e4c8:	008f9380 	call	8f938 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8e4cc:	008fb200 	call	8fb20 <alt_icache_flush_all>
}
   8e4d0:	0001883a 	nop
   8e4d4:	e037883a 	mov	sp,fp
   8e4d8:	dfc00117 	ldw	ra,4(sp)
   8e4dc:	df000017 	ldw	fp,0(sp)
   8e4e0:	dec00204 	addi	sp,sp,8
   8e4e4:	f800283a 	ret

0008e4e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e4e8:	defffe04 	addi	sp,sp,-8
   8e4ec:	dfc00115 	stw	ra,4(sp)
   8e4f0:	df000015 	stw	fp,0(sp)
   8e4f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e4f8:	d0a00b17 	ldw	r2,-32724(gp)
   8e4fc:	10000326 	beq	r2,zero,8e50c <alt_get_errno+0x24>
   8e500:	d0a00b17 	ldw	r2,-32724(gp)
   8e504:	103ee83a 	callr	r2
   8e508:	00000106 	br	8e510 <alt_get_errno+0x28>
   8e50c:	d0a6f804 	addi	r2,gp,-25632
}
   8e510:	e037883a 	mov	sp,fp
   8e514:	dfc00117 	ldw	ra,4(sp)
   8e518:	df000017 	ldw	fp,0(sp)
   8e51c:	dec00204 	addi	sp,sp,8
   8e520:	f800283a 	ret

0008e524 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8e524:	defff904 	addi	sp,sp,-28
   8e528:	dfc00615 	stw	ra,24(sp)
   8e52c:	df000515 	stw	fp,20(sp)
   8e530:	df000504 	addi	fp,sp,20
   8e534:	e13ffd15 	stw	r4,-12(fp)
   8e538:	e17ffe15 	stw	r5,-8(fp)
   8e53c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8e540:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e544:	e0bffd17 	ldw	r2,-12(fp)
   8e548:	10000616 	blt	r2,zero,8e564 <lseek+0x40>
   8e54c:	e0bffd17 	ldw	r2,-12(fp)
   8e550:	10c00324 	muli	r3,r2,12
   8e554:	00800274 	movhi	r2,9
   8e558:	1084f204 	addi	r2,r2,5064
   8e55c:	1885883a 	add	r2,r3,r2
   8e560:	00000106 	br	8e568 <lseek+0x44>
   8e564:	0005883a 	mov	r2,zero
   8e568:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   8e56c:	e0bffc17 	ldw	r2,-16(fp)
   8e570:	10001026 	beq	r2,zero,8e5b4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8e574:	e0bffc17 	ldw	r2,-16(fp)
   8e578:	10800017 	ldw	r2,0(r2)
   8e57c:	10800717 	ldw	r2,28(r2)
   8e580:	10000926 	beq	r2,zero,8e5a8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8e584:	e0bffc17 	ldw	r2,-16(fp)
   8e588:	10800017 	ldw	r2,0(r2)
   8e58c:	10800717 	ldw	r2,28(r2)
   8e590:	e1bfff17 	ldw	r6,-4(fp)
   8e594:	e17ffe17 	ldw	r5,-8(fp)
   8e598:	e13ffc17 	ldw	r4,-16(fp)
   8e59c:	103ee83a 	callr	r2
   8e5a0:	e0bffb15 	stw	r2,-20(fp)
   8e5a4:	00000506 	br	8e5bc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8e5a8:	00bfde84 	movi	r2,-134
   8e5ac:	e0bffb15 	stw	r2,-20(fp)
   8e5b0:	00000206 	br	8e5bc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   8e5b4:	00bfebc4 	movi	r2,-81
   8e5b8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   8e5bc:	e0bffb17 	ldw	r2,-20(fp)
   8e5c0:	1000070e 	bge	r2,zero,8e5e0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   8e5c4:	008e4e80 	call	8e4e8 <alt_get_errno>
   8e5c8:	1007883a 	mov	r3,r2
   8e5cc:	e0bffb17 	ldw	r2,-20(fp)
   8e5d0:	0085c83a 	sub	r2,zero,r2
   8e5d4:	18800015 	stw	r2,0(r3)
    rc = -1;
   8e5d8:	00bfffc4 	movi	r2,-1
   8e5dc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   8e5e0:	e0bffb17 	ldw	r2,-20(fp)
}
   8e5e4:	e037883a 	mov	sp,fp
   8e5e8:	dfc00117 	ldw	ra,4(sp)
   8e5ec:	df000017 	ldw	fp,0(sp)
   8e5f0:	dec00204 	addi	sp,sp,8
   8e5f4:	f800283a 	ret

0008e5f8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8e5f8:	defffd04 	addi	sp,sp,-12
   8e5fc:	dfc00215 	stw	ra,8(sp)
   8e600:	df000115 	stw	fp,4(sp)
   8e604:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8e608:	0009883a 	mov	r4,zero
   8e60c:	008ec140 	call	8ec14 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8e610:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8e614:	008ec4c0 	call	8ec4c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8e618:	01800274 	movhi	r6,9
   8e61c:	31828a04 	addi	r6,r6,2600
   8e620:	01400274 	movhi	r5,9
   8e624:	29428a04 	addi	r5,r5,2600
   8e628:	01000274 	movhi	r4,9
   8e62c:	21028a04 	addi	r4,r4,2600
   8e630:	008fcb40 	call	8fcb4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8e634:	008fa600 	call	8fa60 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8e638:	01000274 	movhi	r4,9
   8e63c:	213eb004 	addi	r4,r4,-1344
   8e640:	00902740 	call	90274 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8e644:	d0a70417 	ldw	r2,-25584(gp)
   8e648:	d0e70517 	ldw	r3,-25580(gp)
   8e64c:	d1270617 	ldw	r4,-25576(gp)
   8e650:	200d883a 	mov	r6,r4
   8e654:	180b883a 	mov	r5,r3
   8e658:	1009883a 	mov	r4,r2
   8e65c:	00804bc0 	call	804bc <main>
   8e660:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8e664:	01000044 	movi	r4,1
   8e668:	008db200 	call	8db20 <close>
  exit (result);
   8e66c:	e13fff17 	ldw	r4,-4(fp)
   8e670:	00902880 	call	90288 <exit>

0008e674 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8e674:	defffe04 	addi	sp,sp,-8
   8e678:	df000115 	stw	fp,4(sp)
   8e67c:	df000104 	addi	fp,sp,4
   8e680:	e13fff15 	stw	r4,-4(fp)
}
   8e684:	0001883a 	nop
   8e688:	e037883a 	mov	sp,fp
   8e68c:	df000017 	ldw	fp,0(sp)
   8e690:	dec00104 	addi	sp,sp,4
   8e694:	f800283a 	ret

0008e698 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8e698:	defffe04 	addi	sp,sp,-8
   8e69c:	df000115 	stw	fp,4(sp)
   8e6a0:	df000104 	addi	fp,sp,4
   8e6a4:	e13fff15 	stw	r4,-4(fp)
}
   8e6a8:	0001883a 	nop
   8e6ac:	e037883a 	mov	sp,fp
   8e6b0:	df000017 	ldw	fp,0(sp)
   8e6b4:	dec00104 	addi	sp,sp,4
   8e6b8:	f800283a 	ret

0008e6bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e6bc:	defffe04 	addi	sp,sp,-8
   8e6c0:	dfc00115 	stw	ra,4(sp)
   8e6c4:	df000015 	stw	fp,0(sp)
   8e6c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e6cc:	d0a00b17 	ldw	r2,-32724(gp)
   8e6d0:	10000326 	beq	r2,zero,8e6e0 <alt_get_errno+0x24>
   8e6d4:	d0a00b17 	ldw	r2,-32724(gp)
   8e6d8:	103ee83a 	callr	r2
   8e6dc:	00000106 	br	8e6e4 <alt_get_errno+0x28>
   8e6e0:	d0a6f804 	addi	r2,gp,-25632
}
   8e6e4:	e037883a 	mov	sp,fp
   8e6e8:	dfc00117 	ldw	ra,4(sp)
   8e6ec:	df000017 	ldw	fp,0(sp)
   8e6f0:	dec00204 	addi	sp,sp,8
   8e6f4:	f800283a 	ret

0008e6f8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8e6f8:	defff904 	addi	sp,sp,-28
   8e6fc:	dfc00615 	stw	ra,24(sp)
   8e700:	df000515 	stw	fp,20(sp)
   8e704:	df000504 	addi	fp,sp,20
   8e708:	e13ffd15 	stw	r4,-12(fp)
   8e70c:	e17ffe15 	stw	r5,-8(fp)
   8e710:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e714:	e0bffd17 	ldw	r2,-12(fp)
   8e718:	10000616 	blt	r2,zero,8e734 <read+0x3c>
   8e71c:	e0bffd17 	ldw	r2,-12(fp)
   8e720:	10c00324 	muli	r3,r2,12
   8e724:	00800274 	movhi	r2,9
   8e728:	1084f204 	addi	r2,r2,5064
   8e72c:	1885883a 	add	r2,r3,r2
   8e730:	00000106 	br	8e738 <read+0x40>
   8e734:	0005883a 	mov	r2,zero
   8e738:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8e73c:	e0bffb17 	ldw	r2,-20(fp)
   8e740:	10002226 	beq	r2,zero,8e7cc <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8e744:	e0bffb17 	ldw	r2,-20(fp)
   8e748:	10800217 	ldw	r2,8(r2)
   8e74c:	108000cc 	andi	r2,r2,3
   8e750:	10800060 	cmpeqi	r2,r2,1
   8e754:	1000181e 	bne	r2,zero,8e7b8 <read+0xc0>
        (fd->dev->read))
   8e758:	e0bffb17 	ldw	r2,-20(fp)
   8e75c:	10800017 	ldw	r2,0(r2)
   8e760:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8e764:	10001426 	beq	r2,zero,8e7b8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8e768:	e0bffb17 	ldw	r2,-20(fp)
   8e76c:	10800017 	ldw	r2,0(r2)
   8e770:	10800517 	ldw	r2,20(r2)
   8e774:	e0ffff17 	ldw	r3,-4(fp)
   8e778:	180d883a 	mov	r6,r3
   8e77c:	e17ffe17 	ldw	r5,-8(fp)
   8e780:	e13ffb17 	ldw	r4,-20(fp)
   8e784:	103ee83a 	callr	r2
   8e788:	e0bffc15 	stw	r2,-16(fp)
   8e78c:	e0bffc17 	ldw	r2,-16(fp)
   8e790:	1000070e 	bge	r2,zero,8e7b0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   8e794:	008e6bc0 	call	8e6bc <alt_get_errno>
   8e798:	1007883a 	mov	r3,r2
   8e79c:	e0bffc17 	ldw	r2,-16(fp)
   8e7a0:	0085c83a 	sub	r2,zero,r2
   8e7a4:	18800015 	stw	r2,0(r3)
          return -1;
   8e7a8:	00bfffc4 	movi	r2,-1
   8e7ac:	00000c06 	br	8e7e0 <read+0xe8>
        }
        return rval;
   8e7b0:	e0bffc17 	ldw	r2,-16(fp)
   8e7b4:	00000a06 	br	8e7e0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8e7b8:	008e6bc0 	call	8e6bc <alt_get_errno>
   8e7bc:	1007883a 	mov	r3,r2
   8e7c0:	00800344 	movi	r2,13
   8e7c4:	18800015 	stw	r2,0(r3)
   8e7c8:	00000406 	br	8e7dc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8e7cc:	008e6bc0 	call	8e6bc <alt_get_errno>
   8e7d0:	1007883a 	mov	r3,r2
   8e7d4:	00801444 	movi	r2,81
   8e7d8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8e7dc:	00bfffc4 	movi	r2,-1
}
   8e7e0:	e037883a 	mov	sp,fp
   8e7e4:	dfc00117 	ldw	ra,4(sp)
   8e7e8:	df000017 	ldw	fp,0(sp)
   8e7ec:	dec00204 	addi	sp,sp,8
   8e7f0:	f800283a 	ret

0008e7f4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8e7f4:	defffe04 	addi	sp,sp,-8
   8e7f8:	df000115 	stw	fp,4(sp)
   8e7fc:	df000104 	addi	fp,sp,4
   8e800:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8e804:	e0bfff17 	ldw	r2,-4(fp)
   8e808:	108000d0 	cmplti	r2,r2,3
   8e80c:	10000d1e 	bne	r2,zero,8e844 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   8e810:	00800274 	movhi	r2,9
   8e814:	1084f204 	addi	r2,r2,5064
   8e818:	e0ffff17 	ldw	r3,-4(fp)
   8e81c:	18c00324 	muli	r3,r3,12
   8e820:	10c5883a 	add	r2,r2,r3
   8e824:	10800204 	addi	r2,r2,8
   8e828:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8e82c:	00800274 	movhi	r2,9
   8e830:	1084f204 	addi	r2,r2,5064
   8e834:	e0ffff17 	ldw	r3,-4(fp)
   8e838:	18c00324 	muli	r3,r3,12
   8e83c:	10c5883a 	add	r2,r2,r3
   8e840:	10000015 	stw	zero,0(r2)
  }
}
   8e844:	0001883a 	nop
   8e848:	e037883a 	mov	sp,fp
   8e84c:	df000017 	ldw	fp,0(sp)
   8e850:	dec00104 	addi	sp,sp,4
   8e854:	f800283a 	ret

0008e858 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8e858:	defff904 	addi	sp,sp,-28
   8e85c:	df000615 	stw	fp,24(sp)
   8e860:	df000604 	addi	fp,sp,24
   8e864:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e868:	0005303a 	rdctl	r2,status
   8e86c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e870:	e0fffe17 	ldw	r3,-8(fp)
   8e874:	00bfff84 	movi	r2,-2
   8e878:	1884703a 	and	r2,r3,r2
   8e87c:	1001703a 	wrctl	status,r2
  
  return context;
   8e880:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8e884:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8e888:	d0a00d17 	ldw	r2,-32716(gp)
   8e88c:	10c000c4 	addi	r3,r2,3
   8e890:	00bfff04 	movi	r2,-4
   8e894:	1884703a 	and	r2,r3,r2
   8e898:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8e89c:	d0e00d17 	ldw	r3,-32716(gp)
   8e8a0:	e0bfff17 	ldw	r2,-4(fp)
   8e8a4:	1887883a 	add	r3,r3,r2
   8e8a8:	00800374 	movhi	r2,13
   8e8ac:	10aebc04 	addi	r2,r2,-17680
   8e8b0:	10c0062e 	bgeu	r2,r3,8e8cc <sbrk+0x74>
   8e8b4:	e0bffb17 	ldw	r2,-20(fp)
   8e8b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e8bc:	e0bffa17 	ldw	r2,-24(fp)
   8e8c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8e8c4:	00bfffc4 	movi	r2,-1
   8e8c8:	00000b06 	br	8e8f8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   8e8cc:	d0a00d17 	ldw	r2,-32716(gp)
   8e8d0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   8e8d4:	d0e00d17 	ldw	r3,-32716(gp)
   8e8d8:	e0bfff17 	ldw	r2,-4(fp)
   8e8dc:	1885883a 	add	r2,r3,r2
   8e8e0:	d0a00d15 	stw	r2,-32716(gp)
   8e8e4:	e0bffb17 	ldw	r2,-20(fp)
   8e8e8:	e0bffc15 	stw	r2,-16(fp)
   8e8ec:	e0bffc17 	ldw	r2,-16(fp)
   8e8f0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8e8f4:	e0bffd17 	ldw	r2,-12(fp)
} 
   8e8f8:	e037883a 	mov	sp,fp
   8e8fc:	df000017 	ldw	fp,0(sp)
   8e900:	dec00104 	addi	sp,sp,4
   8e904:	f800283a 	ret

0008e908 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8e908:	defffa04 	addi	sp,sp,-24
   8e90c:	df000515 	stw	fp,20(sp)
   8e910:	df000504 	addi	fp,sp,20
   8e914:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e918:	0005303a 	rdctl	r2,status
   8e91c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e920:	e0fffc17 	ldw	r3,-16(fp)
   8e924:	00bfff84 	movi	r2,-2
   8e928:	1884703a 	and	r2,r3,r2
   8e92c:	1001703a 	wrctl	status,r2
  
  return context;
   8e930:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8e934:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   8e938:	e0bfff17 	ldw	r2,-4(fp)
   8e93c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8e940:	e0bffd17 	ldw	r2,-12(fp)
   8e944:	10800017 	ldw	r2,0(r2)
   8e948:	e0fffd17 	ldw	r3,-12(fp)
   8e94c:	18c00117 	ldw	r3,4(r3)
   8e950:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   8e954:	e0bffd17 	ldw	r2,-12(fp)
   8e958:	10800117 	ldw	r2,4(r2)
   8e95c:	e0fffd17 	ldw	r3,-12(fp)
   8e960:	18c00017 	ldw	r3,0(r3)
   8e964:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8e968:	e0bffd17 	ldw	r2,-12(fp)
   8e96c:	e0fffd17 	ldw	r3,-12(fp)
   8e970:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   8e974:	e0bffd17 	ldw	r2,-12(fp)
   8e978:	e0fffd17 	ldw	r3,-12(fp)
   8e97c:	10c00015 	stw	r3,0(r2)
   8e980:	e0bffb17 	ldw	r2,-20(fp)
   8e984:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e988:	e0bffe17 	ldw	r2,-8(fp)
   8e98c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8e990:	0001883a 	nop
   8e994:	e037883a 	mov	sp,fp
   8e998:	df000017 	ldw	fp,0(sp)
   8e99c:	dec00104 	addi	sp,sp,4
   8e9a0:	f800283a 	ret

0008e9a4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8e9a4:	defffb04 	addi	sp,sp,-20
   8e9a8:	dfc00415 	stw	ra,16(sp)
   8e9ac:	df000315 	stw	fp,12(sp)
   8e9b0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8e9b4:	d0a00e17 	ldw	r2,-32712(gp)
   8e9b8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8e9bc:	d0a70817 	ldw	r2,-25568(gp)
   8e9c0:	10800044 	addi	r2,r2,1
   8e9c4:	d0a70815 	stw	r2,-25568(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8e9c8:	00002e06 	br	8ea84 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   8e9cc:	e0bffd17 	ldw	r2,-12(fp)
   8e9d0:	10800017 	ldw	r2,0(r2)
   8e9d4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8e9d8:	e0bffd17 	ldw	r2,-12(fp)
   8e9dc:	10800403 	ldbu	r2,16(r2)
   8e9e0:	10803fcc 	andi	r2,r2,255
   8e9e4:	10000426 	beq	r2,zero,8e9f8 <alt_tick+0x54>
   8e9e8:	d0a70817 	ldw	r2,-25568(gp)
   8e9ec:	1000021e 	bne	r2,zero,8e9f8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   8e9f0:	e0bffd17 	ldw	r2,-12(fp)
   8e9f4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8e9f8:	e0bffd17 	ldw	r2,-12(fp)
   8e9fc:	10800217 	ldw	r2,8(r2)
   8ea00:	d0e70817 	ldw	r3,-25568(gp)
   8ea04:	18801d36 	bltu	r3,r2,8ea7c <alt_tick+0xd8>
   8ea08:	e0bffd17 	ldw	r2,-12(fp)
   8ea0c:	10800403 	ldbu	r2,16(r2)
   8ea10:	10803fcc 	andi	r2,r2,255
   8ea14:	1000191e 	bne	r2,zero,8ea7c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   8ea18:	e0bffd17 	ldw	r2,-12(fp)
   8ea1c:	10800317 	ldw	r2,12(r2)
   8ea20:	e0fffd17 	ldw	r3,-12(fp)
   8ea24:	18c00517 	ldw	r3,20(r3)
   8ea28:	1809883a 	mov	r4,r3
   8ea2c:	103ee83a 	callr	r2
   8ea30:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8ea34:	e0bfff17 	ldw	r2,-4(fp)
   8ea38:	1000031e 	bne	r2,zero,8ea48 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   8ea3c:	e13ffd17 	ldw	r4,-12(fp)
   8ea40:	008e9080 	call	8e908 <alt_alarm_stop>
   8ea44:	00000d06 	br	8ea7c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   8ea48:	e0bffd17 	ldw	r2,-12(fp)
   8ea4c:	10c00217 	ldw	r3,8(r2)
   8ea50:	e0bfff17 	ldw	r2,-4(fp)
   8ea54:	1887883a 	add	r3,r3,r2
   8ea58:	e0bffd17 	ldw	r2,-12(fp)
   8ea5c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8ea60:	e0bffd17 	ldw	r2,-12(fp)
   8ea64:	10c00217 	ldw	r3,8(r2)
   8ea68:	d0a70817 	ldw	r2,-25568(gp)
   8ea6c:	1880032e 	bgeu	r3,r2,8ea7c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   8ea70:	e0bffd17 	ldw	r2,-12(fp)
   8ea74:	00c00044 	movi	r3,1
   8ea78:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   8ea7c:	e0bffe17 	ldw	r2,-8(fp)
   8ea80:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8ea84:	e0fffd17 	ldw	r3,-12(fp)
   8ea88:	d0a00e04 	addi	r2,gp,-32712
   8ea8c:	18bfcf1e 	bne	r3,r2,8e9cc <__alt_data_end+0xfffc2edc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   8ea90:	0001883a 	nop
}
   8ea94:	0001883a 	nop
   8ea98:	e037883a 	mov	sp,fp
   8ea9c:	dfc00117 	ldw	ra,4(sp)
   8eaa0:	df000017 	ldw	fp,0(sp)
   8eaa4:	dec00204 	addi	sp,sp,8
   8eaa8:	f800283a 	ret

0008eaac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8eaac:	defffe04 	addi	sp,sp,-8
   8eab0:	dfc00115 	stw	ra,4(sp)
   8eab4:	df000015 	stw	fp,0(sp)
   8eab8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8eabc:	d0a00b17 	ldw	r2,-32724(gp)
   8eac0:	10000326 	beq	r2,zero,8ead0 <alt_get_errno+0x24>
   8eac4:	d0a00b17 	ldw	r2,-32724(gp)
   8eac8:	103ee83a 	callr	r2
   8eacc:	00000106 	br	8ead4 <alt_get_errno+0x28>
   8ead0:	d0a6f804 	addi	r2,gp,-25632
}
   8ead4:	e037883a 	mov	sp,fp
   8ead8:	dfc00117 	ldw	ra,4(sp)
   8eadc:	df000017 	ldw	fp,0(sp)
   8eae0:	dec00204 	addi	sp,sp,8
   8eae4:	f800283a 	ret

0008eae8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8eae8:	defff904 	addi	sp,sp,-28
   8eaec:	dfc00615 	stw	ra,24(sp)
   8eaf0:	df000515 	stw	fp,20(sp)
   8eaf4:	df000504 	addi	fp,sp,20
   8eaf8:	e13ffd15 	stw	r4,-12(fp)
   8eafc:	e17ffe15 	stw	r5,-8(fp)
   8eb00:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8eb04:	e0bffd17 	ldw	r2,-12(fp)
   8eb08:	10000616 	blt	r2,zero,8eb24 <write+0x3c>
   8eb0c:	e0bffd17 	ldw	r2,-12(fp)
   8eb10:	10c00324 	muli	r3,r2,12
   8eb14:	00800274 	movhi	r2,9
   8eb18:	1084f204 	addi	r2,r2,5064
   8eb1c:	1885883a 	add	r2,r3,r2
   8eb20:	00000106 	br	8eb28 <write+0x40>
   8eb24:	0005883a 	mov	r2,zero
   8eb28:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8eb2c:	e0bffb17 	ldw	r2,-20(fp)
   8eb30:	10002126 	beq	r2,zero,8ebb8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8eb34:	e0bffb17 	ldw	r2,-20(fp)
   8eb38:	10800217 	ldw	r2,8(r2)
   8eb3c:	108000cc 	andi	r2,r2,3
   8eb40:	10001826 	beq	r2,zero,8eba4 <write+0xbc>
   8eb44:	e0bffb17 	ldw	r2,-20(fp)
   8eb48:	10800017 	ldw	r2,0(r2)
   8eb4c:	10800617 	ldw	r2,24(r2)
   8eb50:	10001426 	beq	r2,zero,8eba4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8eb54:	e0bffb17 	ldw	r2,-20(fp)
   8eb58:	10800017 	ldw	r2,0(r2)
   8eb5c:	10800617 	ldw	r2,24(r2)
   8eb60:	e0ffff17 	ldw	r3,-4(fp)
   8eb64:	180d883a 	mov	r6,r3
   8eb68:	e17ffe17 	ldw	r5,-8(fp)
   8eb6c:	e13ffb17 	ldw	r4,-20(fp)
   8eb70:	103ee83a 	callr	r2
   8eb74:	e0bffc15 	stw	r2,-16(fp)
   8eb78:	e0bffc17 	ldw	r2,-16(fp)
   8eb7c:	1000070e 	bge	r2,zero,8eb9c <write+0xb4>
      {
        ALT_ERRNO = -rval;
   8eb80:	008eaac0 	call	8eaac <alt_get_errno>
   8eb84:	1007883a 	mov	r3,r2
   8eb88:	e0bffc17 	ldw	r2,-16(fp)
   8eb8c:	0085c83a 	sub	r2,zero,r2
   8eb90:	18800015 	stw	r2,0(r3)
        return -1;
   8eb94:	00bfffc4 	movi	r2,-1
   8eb98:	00000c06 	br	8ebcc <write+0xe4>
      }
      return rval;
   8eb9c:	e0bffc17 	ldw	r2,-16(fp)
   8eba0:	00000a06 	br	8ebcc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8eba4:	008eaac0 	call	8eaac <alt_get_errno>
   8eba8:	1007883a 	mov	r3,r2
   8ebac:	00800344 	movi	r2,13
   8ebb0:	18800015 	stw	r2,0(r3)
   8ebb4:	00000406 	br	8ebc8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8ebb8:	008eaac0 	call	8eaac <alt_get_errno>
   8ebbc:	1007883a 	mov	r3,r2
   8ebc0:	00801444 	movi	r2,81
   8ebc4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8ebc8:	00bfffc4 	movi	r2,-1
}
   8ebcc:	e037883a 	mov	sp,fp
   8ebd0:	dfc00117 	ldw	ra,4(sp)
   8ebd4:	df000017 	ldw	fp,0(sp)
   8ebd8:	dec00204 	addi	sp,sp,8
   8ebdc:	f800283a 	ret

0008ebe0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8ebe0:	defffd04 	addi	sp,sp,-12
   8ebe4:	dfc00215 	stw	ra,8(sp)
   8ebe8:	df000115 	stw	fp,4(sp)
   8ebec:	df000104 	addi	fp,sp,4
   8ebf0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8ebf4:	d1600804 	addi	r5,gp,-32736
   8ebf8:	e13fff17 	ldw	r4,-4(fp)
   8ebfc:	008f9bc0 	call	8f9bc <alt_dev_llist_insert>
}
   8ec00:	e037883a 	mov	sp,fp
   8ec04:	dfc00117 	ldw	ra,4(sp)
   8ec08:	df000017 	ldw	fp,0(sp)
   8ec0c:	dec00204 	addi	sp,sp,8
   8ec10:	f800283a 	ret

0008ec14 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8ec14:	defffd04 	addi	sp,sp,-12
   8ec18:	dfc00215 	stw	ra,8(sp)
   8ec1c:	df000115 	stw	fp,4(sp)
   8ec20:	df000104 	addi	fp,sp,4
   8ec24:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   8ec28:	008ff840 	call	8ff84 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8ec2c:	00800044 	movi	r2,1
   8ec30:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8ec34:	0001883a 	nop
   8ec38:	e037883a 	mov	sp,fp
   8ec3c:	dfc00117 	ldw	ra,4(sp)
   8ec40:	df000017 	ldw	fp,0(sp)
   8ec44:	dec00204 	addi	sp,sp,8
   8ec48:	f800283a 	ret

0008ec4c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8ec4c:	defffe04 	addi	sp,sp,-8
   8ec50:	dfc00115 	stw	ra,4(sp)
   8ec54:	df000015 	stw	fp,0(sp)
   8ec58:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   8ec5c:	01c0fa04 	movi	r7,1000
   8ec60:	000d883a 	mov	r6,zero
   8ec64:	000b883a 	mov	r5,zero
   8ec68:	01000434 	movhi	r4,16
   8ec6c:	21040004 	addi	r4,r4,4096
   8ec70:	008f7900 	call	8f790 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   8ec74:	01800044 	movi	r6,1
   8ec78:	000b883a 	mov	r5,zero
   8ec7c:	01000274 	movhi	r4,9
   8ec80:	21055c04 	addi	r4,r4,5488
   8ec84:	008ee140 	call	8ee14 <altera_avalon_jtag_uart_init>
   8ec88:	01000274 	movhi	r4,9
   8ec8c:	21055204 	addi	r4,r4,5448
   8ec90:	008ebe00 	call	8ebe0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   8ec94:	0001883a 	nop
}
   8ec98:	0001883a 	nop
   8ec9c:	e037883a 	mov	sp,fp
   8eca0:	dfc00117 	ldw	ra,4(sp)
   8eca4:	df000017 	ldw	fp,0(sp)
   8eca8:	dec00204 	addi	sp,sp,8
   8ecac:	f800283a 	ret

0008ecb0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8ecb0:	defffa04 	addi	sp,sp,-24
   8ecb4:	dfc00515 	stw	ra,20(sp)
   8ecb8:	df000415 	stw	fp,16(sp)
   8ecbc:	df000404 	addi	fp,sp,16
   8ecc0:	e13ffd15 	stw	r4,-12(fp)
   8ecc4:	e17ffe15 	stw	r5,-8(fp)
   8ecc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8eccc:	e0bffd17 	ldw	r2,-12(fp)
   8ecd0:	10800017 	ldw	r2,0(r2)
   8ecd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8ecd8:	e0bffc17 	ldw	r2,-16(fp)
   8ecdc:	10c00a04 	addi	r3,r2,40
   8ece0:	e0bffd17 	ldw	r2,-12(fp)
   8ece4:	10800217 	ldw	r2,8(r2)
   8ece8:	100f883a 	mov	r7,r2
   8ecec:	e1bfff17 	ldw	r6,-4(fp)
   8ecf0:	e17ffe17 	ldw	r5,-8(fp)
   8ecf4:	1809883a 	mov	r4,r3
   8ecf8:	008f2d80 	call	8f2d8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8ecfc:	e037883a 	mov	sp,fp
   8ed00:	dfc00117 	ldw	ra,4(sp)
   8ed04:	df000017 	ldw	fp,0(sp)
   8ed08:	dec00204 	addi	sp,sp,8
   8ed0c:	f800283a 	ret

0008ed10 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8ed10:	defffa04 	addi	sp,sp,-24
   8ed14:	dfc00515 	stw	ra,20(sp)
   8ed18:	df000415 	stw	fp,16(sp)
   8ed1c:	df000404 	addi	fp,sp,16
   8ed20:	e13ffd15 	stw	r4,-12(fp)
   8ed24:	e17ffe15 	stw	r5,-8(fp)
   8ed28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8ed2c:	e0bffd17 	ldw	r2,-12(fp)
   8ed30:	10800017 	ldw	r2,0(r2)
   8ed34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8ed38:	e0bffc17 	ldw	r2,-16(fp)
   8ed3c:	10c00a04 	addi	r3,r2,40
   8ed40:	e0bffd17 	ldw	r2,-12(fp)
   8ed44:	10800217 	ldw	r2,8(r2)
   8ed48:	100f883a 	mov	r7,r2
   8ed4c:	e1bfff17 	ldw	r6,-4(fp)
   8ed50:	e17ffe17 	ldw	r5,-8(fp)
   8ed54:	1809883a 	mov	r4,r3
   8ed58:	008f4f40 	call	8f4f4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8ed5c:	e037883a 	mov	sp,fp
   8ed60:	dfc00117 	ldw	ra,4(sp)
   8ed64:	df000017 	ldw	fp,0(sp)
   8ed68:	dec00204 	addi	sp,sp,8
   8ed6c:	f800283a 	ret

0008ed70 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8ed70:	defffc04 	addi	sp,sp,-16
   8ed74:	dfc00315 	stw	ra,12(sp)
   8ed78:	df000215 	stw	fp,8(sp)
   8ed7c:	df000204 	addi	fp,sp,8
   8ed80:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8ed84:	e0bfff17 	ldw	r2,-4(fp)
   8ed88:	10800017 	ldw	r2,0(r2)
   8ed8c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8ed90:	e0bffe17 	ldw	r2,-8(fp)
   8ed94:	10c00a04 	addi	r3,r2,40
   8ed98:	e0bfff17 	ldw	r2,-4(fp)
   8ed9c:	10800217 	ldw	r2,8(r2)
   8eda0:	100b883a 	mov	r5,r2
   8eda4:	1809883a 	mov	r4,r3
   8eda8:	008f1800 	call	8f180 <altera_avalon_jtag_uart_close>
}
   8edac:	e037883a 	mov	sp,fp
   8edb0:	dfc00117 	ldw	ra,4(sp)
   8edb4:	df000017 	ldw	fp,0(sp)
   8edb8:	dec00204 	addi	sp,sp,8
   8edbc:	f800283a 	ret

0008edc0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8edc0:	defffa04 	addi	sp,sp,-24
   8edc4:	dfc00515 	stw	ra,20(sp)
   8edc8:	df000415 	stw	fp,16(sp)
   8edcc:	df000404 	addi	fp,sp,16
   8edd0:	e13ffd15 	stw	r4,-12(fp)
   8edd4:	e17ffe15 	stw	r5,-8(fp)
   8edd8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8eddc:	e0bffd17 	ldw	r2,-12(fp)
   8ede0:	10800017 	ldw	r2,0(r2)
   8ede4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8ede8:	e0bffc17 	ldw	r2,-16(fp)
   8edec:	10800a04 	addi	r2,r2,40
   8edf0:	e1bfff17 	ldw	r6,-4(fp)
   8edf4:	e17ffe17 	ldw	r5,-8(fp)
   8edf8:	1009883a 	mov	r4,r2
   8edfc:	008f1e80 	call	8f1e8 <altera_avalon_jtag_uart_ioctl>
}
   8ee00:	e037883a 	mov	sp,fp
   8ee04:	dfc00117 	ldw	ra,4(sp)
   8ee08:	df000017 	ldw	fp,0(sp)
   8ee0c:	dec00204 	addi	sp,sp,8
   8ee10:	f800283a 	ret

0008ee14 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8ee14:	defffa04 	addi	sp,sp,-24
   8ee18:	dfc00515 	stw	ra,20(sp)
   8ee1c:	df000415 	stw	fp,16(sp)
   8ee20:	df000404 	addi	fp,sp,16
   8ee24:	e13ffd15 	stw	r4,-12(fp)
   8ee28:	e17ffe15 	stw	r5,-8(fp)
   8ee2c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8ee30:	e0bffd17 	ldw	r2,-12(fp)
   8ee34:	00c00044 	movi	r3,1
   8ee38:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8ee3c:	e0bffd17 	ldw	r2,-12(fp)
   8ee40:	10800017 	ldw	r2,0(r2)
   8ee44:	10800104 	addi	r2,r2,4
   8ee48:	1007883a 	mov	r3,r2
   8ee4c:	e0bffd17 	ldw	r2,-12(fp)
   8ee50:	10800817 	ldw	r2,32(r2)
   8ee54:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8ee58:	e0bffe17 	ldw	r2,-8(fp)
   8ee5c:	e0ffff17 	ldw	r3,-4(fp)
   8ee60:	d8000015 	stw	zero,0(sp)
   8ee64:	e1fffd17 	ldw	r7,-12(fp)
   8ee68:	01800274 	movhi	r6,9
   8ee6c:	31bbb504 	addi	r6,r6,-4396
   8ee70:	180b883a 	mov	r5,r3
   8ee74:	1009883a 	mov	r4,r2
   8ee78:	008defc0 	call	8defc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8ee7c:	e0bffd17 	ldw	r2,-12(fp)
   8ee80:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8ee84:	e0bffd17 	ldw	r2,-12(fp)
   8ee88:	10800204 	addi	r2,r2,8
   8ee8c:	d0e70717 	ldw	r3,-25572(gp)
   8ee90:	e1fffd17 	ldw	r7,-12(fp)
   8ee94:	01800274 	movhi	r6,9
   8ee98:	31bc3804 	addi	r6,r6,-3872
   8ee9c:	180b883a 	mov	r5,r3
   8eea0:	1009883a 	mov	r4,r2
   8eea4:	008f80c0 	call	8f80c <alt_alarm_start>
   8eea8:	1000040e 	bge	r2,zero,8eebc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8eeac:	e0fffd17 	ldw	r3,-12(fp)
   8eeb0:	00a00034 	movhi	r2,32768
   8eeb4:	10bfffc4 	addi	r2,r2,-1
   8eeb8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8eebc:	0001883a 	nop
   8eec0:	e037883a 	mov	sp,fp
   8eec4:	dfc00117 	ldw	ra,4(sp)
   8eec8:	df000017 	ldw	fp,0(sp)
   8eecc:	dec00204 	addi	sp,sp,8
   8eed0:	f800283a 	ret

0008eed4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8eed4:	defff804 	addi	sp,sp,-32
   8eed8:	df000715 	stw	fp,28(sp)
   8eedc:	df000704 	addi	fp,sp,28
   8eee0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8eee4:	e0bfff17 	ldw	r2,-4(fp)
   8eee8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   8eeec:	e0bffb17 	ldw	r2,-20(fp)
   8eef0:	10800017 	ldw	r2,0(r2)
   8eef4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8eef8:	e0bffc17 	ldw	r2,-16(fp)
   8eefc:	10800104 	addi	r2,r2,4
   8ef00:	10800037 	ldwio	r2,0(r2)
   8ef04:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8ef08:	e0bffd17 	ldw	r2,-12(fp)
   8ef0c:	1080c00c 	andi	r2,r2,768
   8ef10:	10006d26 	beq	r2,zero,8f0c8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8ef14:	e0bffd17 	ldw	r2,-12(fp)
   8ef18:	1080400c 	andi	r2,r2,256
   8ef1c:	10003526 	beq	r2,zero,8eff4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8ef20:	00800074 	movhi	r2,1
   8ef24:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8ef28:	e0bffb17 	ldw	r2,-20(fp)
   8ef2c:	10800a17 	ldw	r2,40(r2)
   8ef30:	10800044 	addi	r2,r2,1
   8ef34:	1081ffcc 	andi	r2,r2,2047
   8ef38:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   8ef3c:	e0bffb17 	ldw	r2,-20(fp)
   8ef40:	10c00b17 	ldw	r3,44(r2)
   8ef44:	e0bffe17 	ldw	r2,-8(fp)
   8ef48:	18801526 	beq	r3,r2,8efa0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8ef4c:	e0bffc17 	ldw	r2,-16(fp)
   8ef50:	10800037 	ldwio	r2,0(r2)
   8ef54:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8ef58:	e0bff917 	ldw	r2,-28(fp)
   8ef5c:	10a0000c 	andi	r2,r2,32768
   8ef60:	10001126 	beq	r2,zero,8efa8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8ef64:	e0bffb17 	ldw	r2,-20(fp)
   8ef68:	10800a17 	ldw	r2,40(r2)
   8ef6c:	e0fff917 	ldw	r3,-28(fp)
   8ef70:	1809883a 	mov	r4,r3
   8ef74:	e0fffb17 	ldw	r3,-20(fp)
   8ef78:	1885883a 	add	r2,r3,r2
   8ef7c:	10800e04 	addi	r2,r2,56
   8ef80:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8ef84:	e0bffb17 	ldw	r2,-20(fp)
   8ef88:	10800a17 	ldw	r2,40(r2)
   8ef8c:	10800044 	addi	r2,r2,1
   8ef90:	10c1ffcc 	andi	r3,r2,2047
   8ef94:	e0bffb17 	ldw	r2,-20(fp)
   8ef98:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8ef9c:	003fe206 	br	8ef28 <__alt_data_end+0xfffc3438>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   8efa0:	0001883a 	nop
   8efa4:	00000106 	br	8efac <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   8efa8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8efac:	e0bff917 	ldw	r2,-28(fp)
   8efb0:	10bfffec 	andhi	r2,r2,65535
   8efb4:	10000f26 	beq	r2,zero,8eff4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8efb8:	e0bffb17 	ldw	r2,-20(fp)
   8efbc:	10c00817 	ldw	r3,32(r2)
   8efc0:	00bfff84 	movi	r2,-2
   8efc4:	1886703a 	and	r3,r3,r2
   8efc8:	e0bffb17 	ldw	r2,-20(fp)
   8efcc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8efd0:	e0bffc17 	ldw	r2,-16(fp)
   8efd4:	10800104 	addi	r2,r2,4
   8efd8:	1007883a 	mov	r3,r2
   8efdc:	e0bffb17 	ldw	r2,-20(fp)
   8efe0:	10800817 	ldw	r2,32(r2)
   8efe4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8efe8:	e0bffc17 	ldw	r2,-16(fp)
   8efec:	10800104 	addi	r2,r2,4
   8eff0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8eff4:	e0bffd17 	ldw	r2,-12(fp)
   8eff8:	1080800c 	andi	r2,r2,512
   8effc:	103fbe26 	beq	r2,zero,8eef8 <__alt_data_end+0xfffc3408>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8f000:	e0bffd17 	ldw	r2,-12(fp)
   8f004:	1004d43a 	srli	r2,r2,16
   8f008:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8f00c:	00001406 	br	8f060 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8f010:	e0bffc17 	ldw	r2,-16(fp)
   8f014:	e0fffb17 	ldw	r3,-20(fp)
   8f018:	18c00d17 	ldw	r3,52(r3)
   8f01c:	e13ffb17 	ldw	r4,-20(fp)
   8f020:	20c7883a 	add	r3,r4,r3
   8f024:	18c20e04 	addi	r3,r3,2104
   8f028:	18c00003 	ldbu	r3,0(r3)
   8f02c:	18c03fcc 	andi	r3,r3,255
   8f030:	18c0201c 	xori	r3,r3,128
   8f034:	18ffe004 	addi	r3,r3,-128
   8f038:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f03c:	e0bffb17 	ldw	r2,-20(fp)
   8f040:	10800d17 	ldw	r2,52(r2)
   8f044:	10800044 	addi	r2,r2,1
   8f048:	10c1ffcc 	andi	r3,r2,2047
   8f04c:	e0bffb17 	ldw	r2,-20(fp)
   8f050:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8f054:	e0bffa17 	ldw	r2,-24(fp)
   8f058:	10bfffc4 	addi	r2,r2,-1
   8f05c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8f060:	e0bffa17 	ldw	r2,-24(fp)
   8f064:	10000526 	beq	r2,zero,8f07c <altera_avalon_jtag_uart_irq+0x1a8>
   8f068:	e0bffb17 	ldw	r2,-20(fp)
   8f06c:	10c00d17 	ldw	r3,52(r2)
   8f070:	e0bffb17 	ldw	r2,-20(fp)
   8f074:	10800c17 	ldw	r2,48(r2)
   8f078:	18bfe51e 	bne	r3,r2,8f010 <__alt_data_end+0xfffc3520>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8f07c:	e0bffa17 	ldw	r2,-24(fp)
   8f080:	103f9d26 	beq	r2,zero,8eef8 <__alt_data_end+0xfffc3408>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8f084:	e0bffb17 	ldw	r2,-20(fp)
   8f088:	10c00817 	ldw	r3,32(r2)
   8f08c:	00bfff44 	movi	r2,-3
   8f090:	1886703a 	and	r3,r3,r2
   8f094:	e0bffb17 	ldw	r2,-20(fp)
   8f098:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8f09c:	e0bffb17 	ldw	r2,-20(fp)
   8f0a0:	10800017 	ldw	r2,0(r2)
   8f0a4:	10800104 	addi	r2,r2,4
   8f0a8:	1007883a 	mov	r3,r2
   8f0ac:	e0bffb17 	ldw	r2,-20(fp)
   8f0b0:	10800817 	ldw	r2,32(r2)
   8f0b4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f0b8:	e0bffc17 	ldw	r2,-16(fp)
   8f0bc:	10800104 	addi	r2,r2,4
   8f0c0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8f0c4:	003f8c06 	br	8eef8 <__alt_data_end+0xfffc3408>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   8f0c8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   8f0cc:	0001883a 	nop
   8f0d0:	e037883a 	mov	sp,fp
   8f0d4:	df000017 	ldw	fp,0(sp)
   8f0d8:	dec00104 	addi	sp,sp,4
   8f0dc:	f800283a 	ret

0008f0e0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8f0e0:	defff804 	addi	sp,sp,-32
   8f0e4:	df000715 	stw	fp,28(sp)
   8f0e8:	df000704 	addi	fp,sp,28
   8f0ec:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8f0f0:	e0bffb17 	ldw	r2,-20(fp)
   8f0f4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8f0f8:	e0bff917 	ldw	r2,-28(fp)
   8f0fc:	10800017 	ldw	r2,0(r2)
   8f100:	10800104 	addi	r2,r2,4
   8f104:	10800037 	ldwio	r2,0(r2)
   8f108:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8f10c:	e0bffa17 	ldw	r2,-24(fp)
   8f110:	1081000c 	andi	r2,r2,1024
   8f114:	10000b26 	beq	r2,zero,8f144 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8f118:	e0bff917 	ldw	r2,-28(fp)
   8f11c:	10800017 	ldw	r2,0(r2)
   8f120:	10800104 	addi	r2,r2,4
   8f124:	1007883a 	mov	r3,r2
   8f128:	e0bff917 	ldw	r2,-28(fp)
   8f12c:	10800817 	ldw	r2,32(r2)
   8f130:	10810014 	ori	r2,r2,1024
   8f134:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   8f138:	e0bff917 	ldw	r2,-28(fp)
   8f13c:	10000915 	stw	zero,36(r2)
   8f140:	00000a06 	br	8f16c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8f144:	e0bff917 	ldw	r2,-28(fp)
   8f148:	10c00917 	ldw	r3,36(r2)
   8f14c:	00a00034 	movhi	r2,32768
   8f150:	10bfff04 	addi	r2,r2,-4
   8f154:	10c00536 	bltu	r2,r3,8f16c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   8f158:	e0bff917 	ldw	r2,-28(fp)
   8f15c:	10800917 	ldw	r2,36(r2)
   8f160:	10c00044 	addi	r3,r2,1
   8f164:	e0bff917 	ldw	r2,-28(fp)
   8f168:	10c00915 	stw	r3,36(r2)
   8f16c:	d0a70717 	ldw	r2,-25572(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8f170:	e037883a 	mov	sp,fp
   8f174:	df000017 	ldw	fp,0(sp)
   8f178:	dec00104 	addi	sp,sp,4
   8f17c:	f800283a 	ret

0008f180 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8f180:	defffd04 	addi	sp,sp,-12
   8f184:	df000215 	stw	fp,8(sp)
   8f188:	df000204 	addi	fp,sp,8
   8f18c:	e13ffe15 	stw	r4,-8(fp)
   8f190:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8f194:	00000506 	br	8f1ac <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   8f198:	e0bfff17 	ldw	r2,-4(fp)
   8f19c:	1090000c 	andi	r2,r2,16384
   8f1a0:	10000226 	beq	r2,zero,8f1ac <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   8f1a4:	00bffd44 	movi	r2,-11
   8f1a8:	00000b06 	br	8f1d8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8f1ac:	e0bffe17 	ldw	r2,-8(fp)
   8f1b0:	10c00d17 	ldw	r3,52(r2)
   8f1b4:	e0bffe17 	ldw	r2,-8(fp)
   8f1b8:	10800c17 	ldw	r2,48(r2)
   8f1bc:	18800526 	beq	r3,r2,8f1d4 <altera_avalon_jtag_uart_close+0x54>
   8f1c0:	e0bffe17 	ldw	r2,-8(fp)
   8f1c4:	10c00917 	ldw	r3,36(r2)
   8f1c8:	e0bffe17 	ldw	r2,-8(fp)
   8f1cc:	10800117 	ldw	r2,4(r2)
   8f1d0:	18bff136 	bltu	r3,r2,8f198 <__alt_data_end+0xfffc36a8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8f1d4:	0005883a 	mov	r2,zero
}
   8f1d8:	e037883a 	mov	sp,fp
   8f1dc:	df000017 	ldw	fp,0(sp)
   8f1e0:	dec00104 	addi	sp,sp,4
   8f1e4:	f800283a 	ret

0008f1e8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8f1e8:	defffa04 	addi	sp,sp,-24
   8f1ec:	df000515 	stw	fp,20(sp)
   8f1f0:	df000504 	addi	fp,sp,20
   8f1f4:	e13ffd15 	stw	r4,-12(fp)
   8f1f8:	e17ffe15 	stw	r5,-8(fp)
   8f1fc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   8f200:	00bff9c4 	movi	r2,-25
   8f204:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   8f208:	e0bffe17 	ldw	r2,-8(fp)
   8f20c:	10da8060 	cmpeqi	r3,r2,27137
   8f210:	1800031e 	bne	r3,zero,8f220 <altera_avalon_jtag_uart_ioctl+0x38>
   8f214:	109a80a0 	cmpeqi	r2,r2,27138
   8f218:	1000181e 	bne	r2,zero,8f27c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   8f21c:	00002906 	br	8f2c4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8f220:	e0bffd17 	ldw	r2,-12(fp)
   8f224:	10c00117 	ldw	r3,4(r2)
   8f228:	00a00034 	movhi	r2,32768
   8f22c:	10bfffc4 	addi	r2,r2,-1
   8f230:	18802126 	beq	r3,r2,8f2b8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   8f234:	e0bfff17 	ldw	r2,-4(fp)
   8f238:	10800017 	ldw	r2,0(r2)
   8f23c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8f240:	e0bffc17 	ldw	r2,-16(fp)
   8f244:	10800090 	cmplti	r2,r2,2
   8f248:	1000061e 	bne	r2,zero,8f264 <altera_avalon_jtag_uart_ioctl+0x7c>
   8f24c:	e0fffc17 	ldw	r3,-16(fp)
   8f250:	00a00034 	movhi	r2,32768
   8f254:	10bfffc4 	addi	r2,r2,-1
   8f258:	18800226 	beq	r3,r2,8f264 <altera_avalon_jtag_uart_ioctl+0x7c>
   8f25c:	e0bffc17 	ldw	r2,-16(fp)
   8f260:	00000206 	br	8f26c <altera_avalon_jtag_uart_ioctl+0x84>
   8f264:	00a00034 	movhi	r2,32768
   8f268:	10bfff84 	addi	r2,r2,-2
   8f26c:	e0fffd17 	ldw	r3,-12(fp)
   8f270:	18800115 	stw	r2,4(r3)
      rc = 0;
   8f274:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8f278:	00000f06 	br	8f2b8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8f27c:	e0bffd17 	ldw	r2,-12(fp)
   8f280:	10c00117 	ldw	r3,4(r2)
   8f284:	00a00034 	movhi	r2,32768
   8f288:	10bfffc4 	addi	r2,r2,-1
   8f28c:	18800c26 	beq	r3,r2,8f2c0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8f290:	e0bffd17 	ldw	r2,-12(fp)
   8f294:	10c00917 	ldw	r3,36(r2)
   8f298:	e0bffd17 	ldw	r2,-12(fp)
   8f29c:	10800117 	ldw	r2,4(r2)
   8f2a0:	1885803a 	cmpltu	r2,r3,r2
   8f2a4:	10c03fcc 	andi	r3,r2,255
   8f2a8:	e0bfff17 	ldw	r2,-4(fp)
   8f2ac:	10c00015 	stw	r3,0(r2)
      rc = 0;
   8f2b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8f2b4:	00000206 	br	8f2c0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   8f2b8:	0001883a 	nop
   8f2bc:	00000106 	br	8f2c4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   8f2c0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   8f2c4:	e0bffb17 	ldw	r2,-20(fp)
}
   8f2c8:	e037883a 	mov	sp,fp
   8f2cc:	df000017 	ldw	fp,0(sp)
   8f2d0:	dec00104 	addi	sp,sp,4
   8f2d4:	f800283a 	ret

0008f2d8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8f2d8:	defff304 	addi	sp,sp,-52
   8f2dc:	dfc00c15 	stw	ra,48(sp)
   8f2e0:	df000b15 	stw	fp,44(sp)
   8f2e4:	df000b04 	addi	fp,sp,44
   8f2e8:	e13ffc15 	stw	r4,-16(fp)
   8f2ec:	e17ffd15 	stw	r5,-12(fp)
   8f2f0:	e1bffe15 	stw	r6,-8(fp)
   8f2f4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   8f2f8:	e0bffd17 	ldw	r2,-12(fp)
   8f2fc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8f300:	00004706 	br	8f420 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8f304:	e0bffc17 	ldw	r2,-16(fp)
   8f308:	10800a17 	ldw	r2,40(r2)
   8f30c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8f310:	e0bffc17 	ldw	r2,-16(fp)
   8f314:	10800b17 	ldw	r2,44(r2)
   8f318:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   8f31c:	e0fff717 	ldw	r3,-36(fp)
   8f320:	e0bff817 	ldw	r2,-32(fp)
   8f324:	18800536 	bltu	r3,r2,8f33c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8f328:	e0fff717 	ldw	r3,-36(fp)
   8f32c:	e0bff817 	ldw	r2,-32(fp)
   8f330:	1885c83a 	sub	r2,r3,r2
   8f334:	e0bff615 	stw	r2,-40(fp)
   8f338:	00000406 	br	8f34c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8f33c:	00c20004 	movi	r3,2048
   8f340:	e0bff817 	ldw	r2,-32(fp)
   8f344:	1885c83a 	sub	r2,r3,r2
   8f348:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8f34c:	e0bff617 	ldw	r2,-40(fp)
   8f350:	10001e26 	beq	r2,zero,8f3cc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   8f354:	e0fffe17 	ldw	r3,-8(fp)
   8f358:	e0bff617 	ldw	r2,-40(fp)
   8f35c:	1880022e 	bgeu	r3,r2,8f368 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   8f360:	e0bffe17 	ldw	r2,-8(fp)
   8f364:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8f368:	e0bffc17 	ldw	r2,-16(fp)
   8f36c:	10c00e04 	addi	r3,r2,56
   8f370:	e0bff817 	ldw	r2,-32(fp)
   8f374:	1885883a 	add	r2,r3,r2
   8f378:	e1bff617 	ldw	r6,-40(fp)
   8f37c:	100b883a 	mov	r5,r2
   8f380:	e13ff517 	ldw	r4,-44(fp)
   8f384:	0086de40 	call	86de4 <memcpy>
      ptr   += n;
   8f388:	e0fff517 	ldw	r3,-44(fp)
   8f38c:	e0bff617 	ldw	r2,-40(fp)
   8f390:	1885883a 	add	r2,r3,r2
   8f394:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   8f398:	e0fffe17 	ldw	r3,-8(fp)
   8f39c:	e0bff617 	ldw	r2,-40(fp)
   8f3a0:	1885c83a 	sub	r2,r3,r2
   8f3a4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f3a8:	e0fff817 	ldw	r3,-32(fp)
   8f3ac:	e0bff617 	ldw	r2,-40(fp)
   8f3b0:	1885883a 	add	r2,r3,r2
   8f3b4:	10c1ffcc 	andi	r3,r2,2047
   8f3b8:	e0bffc17 	ldw	r2,-16(fp)
   8f3bc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8f3c0:	e0bffe17 	ldw	r2,-8(fp)
   8f3c4:	00bfcf16 	blt	zero,r2,8f304 <__alt_data_end+0xfffc3814>
   8f3c8:	00000106 	br	8f3d0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   8f3cc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   8f3d0:	e0fff517 	ldw	r3,-44(fp)
   8f3d4:	e0bffd17 	ldw	r2,-12(fp)
   8f3d8:	1880141e 	bne	r3,r2,8f42c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8f3dc:	e0bfff17 	ldw	r2,-4(fp)
   8f3e0:	1090000c 	andi	r2,r2,16384
   8f3e4:	1000131e 	bne	r2,zero,8f434 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8f3e8:	0001883a 	nop
   8f3ec:	e0bffc17 	ldw	r2,-16(fp)
   8f3f0:	10c00a17 	ldw	r3,40(r2)
   8f3f4:	e0bff717 	ldw	r2,-36(fp)
   8f3f8:	1880051e 	bne	r3,r2,8f410 <altera_avalon_jtag_uart_read+0x138>
   8f3fc:	e0bffc17 	ldw	r2,-16(fp)
   8f400:	10c00917 	ldw	r3,36(r2)
   8f404:	e0bffc17 	ldw	r2,-16(fp)
   8f408:	10800117 	ldw	r2,4(r2)
   8f40c:	18bff736 	bltu	r3,r2,8f3ec <__alt_data_end+0xfffc38fc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8f410:	e0bffc17 	ldw	r2,-16(fp)
   8f414:	10c00a17 	ldw	r3,40(r2)
   8f418:	e0bff717 	ldw	r2,-36(fp)
   8f41c:	18800726 	beq	r3,r2,8f43c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8f420:	e0bffe17 	ldw	r2,-8(fp)
   8f424:	00bfb716 	blt	zero,r2,8f304 <__alt_data_end+0xfffc3814>
   8f428:	00000506 	br	8f440 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   8f42c:	0001883a 	nop
   8f430:	00000306 	br	8f440 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   8f434:	0001883a 	nop
   8f438:	00000106 	br	8f440 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   8f43c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8f440:	e0fff517 	ldw	r3,-44(fp)
   8f444:	e0bffd17 	ldw	r2,-12(fp)
   8f448:	18801826 	beq	r3,r2,8f4ac <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f44c:	0005303a 	rdctl	r2,status
   8f450:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f454:	e0fffb17 	ldw	r3,-20(fp)
   8f458:	00bfff84 	movi	r2,-2
   8f45c:	1884703a 	and	r2,r3,r2
   8f460:	1001703a 	wrctl	status,r2
  
  return context;
   8f464:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8f468:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f46c:	e0bffc17 	ldw	r2,-16(fp)
   8f470:	10800817 	ldw	r2,32(r2)
   8f474:	10c00054 	ori	r3,r2,1
   8f478:	e0bffc17 	ldw	r2,-16(fp)
   8f47c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8f480:	e0bffc17 	ldw	r2,-16(fp)
   8f484:	10800017 	ldw	r2,0(r2)
   8f488:	10800104 	addi	r2,r2,4
   8f48c:	1007883a 	mov	r3,r2
   8f490:	e0bffc17 	ldw	r2,-16(fp)
   8f494:	10800817 	ldw	r2,32(r2)
   8f498:	18800035 	stwio	r2,0(r3)
   8f49c:	e0bffa17 	ldw	r2,-24(fp)
   8f4a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f4a4:	e0bff917 	ldw	r2,-28(fp)
   8f4a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8f4ac:	e0fff517 	ldw	r3,-44(fp)
   8f4b0:	e0bffd17 	ldw	r2,-12(fp)
   8f4b4:	18800426 	beq	r3,r2,8f4c8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   8f4b8:	e0fff517 	ldw	r3,-44(fp)
   8f4bc:	e0bffd17 	ldw	r2,-12(fp)
   8f4c0:	1885c83a 	sub	r2,r3,r2
   8f4c4:	00000606 	br	8f4e0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   8f4c8:	e0bfff17 	ldw	r2,-4(fp)
   8f4cc:	1090000c 	andi	r2,r2,16384
   8f4d0:	10000226 	beq	r2,zero,8f4dc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8f4d4:	00bffd44 	movi	r2,-11
   8f4d8:	00000106 	br	8f4e0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   8f4dc:	00bffec4 	movi	r2,-5
}
   8f4e0:	e037883a 	mov	sp,fp
   8f4e4:	dfc00117 	ldw	ra,4(sp)
   8f4e8:	df000017 	ldw	fp,0(sp)
   8f4ec:	dec00204 	addi	sp,sp,8
   8f4f0:	f800283a 	ret

0008f4f4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8f4f4:	defff304 	addi	sp,sp,-52
   8f4f8:	dfc00c15 	stw	ra,48(sp)
   8f4fc:	df000b15 	stw	fp,44(sp)
   8f500:	df000b04 	addi	fp,sp,44
   8f504:	e13ffc15 	stw	r4,-16(fp)
   8f508:	e17ffd15 	stw	r5,-12(fp)
   8f50c:	e1bffe15 	stw	r6,-8(fp)
   8f510:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8f514:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8f518:	e0bffd17 	ldw	r2,-12(fp)
   8f51c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8f520:	00003706 	br	8f600 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8f524:	e0bffc17 	ldw	r2,-16(fp)
   8f528:	10800c17 	ldw	r2,48(r2)
   8f52c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   8f530:	e0bffc17 	ldw	r2,-16(fp)
   8f534:	10800d17 	ldw	r2,52(r2)
   8f538:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   8f53c:	e0fff917 	ldw	r3,-28(fp)
   8f540:	e0bff517 	ldw	r2,-44(fp)
   8f544:	1880062e 	bgeu	r3,r2,8f560 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8f548:	e0fff517 	ldw	r3,-44(fp)
   8f54c:	e0bff917 	ldw	r2,-28(fp)
   8f550:	1885c83a 	sub	r2,r3,r2
   8f554:	10bfffc4 	addi	r2,r2,-1
   8f558:	e0bff615 	stw	r2,-40(fp)
   8f55c:	00000b06 	br	8f58c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   8f560:	e0bff517 	ldw	r2,-44(fp)
   8f564:	10000526 	beq	r2,zero,8f57c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8f568:	00c20004 	movi	r3,2048
   8f56c:	e0bff917 	ldw	r2,-28(fp)
   8f570:	1885c83a 	sub	r2,r3,r2
   8f574:	e0bff615 	stw	r2,-40(fp)
   8f578:	00000406 	br	8f58c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8f57c:	00c1ffc4 	movi	r3,2047
   8f580:	e0bff917 	ldw	r2,-28(fp)
   8f584:	1885c83a 	sub	r2,r3,r2
   8f588:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8f58c:	e0bff617 	ldw	r2,-40(fp)
   8f590:	10001e26 	beq	r2,zero,8f60c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   8f594:	e0fffe17 	ldw	r3,-8(fp)
   8f598:	e0bff617 	ldw	r2,-40(fp)
   8f59c:	1880022e 	bgeu	r3,r2,8f5a8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   8f5a0:	e0bffe17 	ldw	r2,-8(fp)
   8f5a4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8f5a8:	e0bffc17 	ldw	r2,-16(fp)
   8f5ac:	10c20e04 	addi	r3,r2,2104
   8f5b0:	e0bff917 	ldw	r2,-28(fp)
   8f5b4:	1885883a 	add	r2,r3,r2
   8f5b8:	e1bff617 	ldw	r6,-40(fp)
   8f5bc:	e17ffd17 	ldw	r5,-12(fp)
   8f5c0:	1009883a 	mov	r4,r2
   8f5c4:	0086de40 	call	86de4 <memcpy>
      ptr   += n;
   8f5c8:	e0fffd17 	ldw	r3,-12(fp)
   8f5cc:	e0bff617 	ldw	r2,-40(fp)
   8f5d0:	1885883a 	add	r2,r3,r2
   8f5d4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   8f5d8:	e0fffe17 	ldw	r3,-8(fp)
   8f5dc:	e0bff617 	ldw	r2,-40(fp)
   8f5e0:	1885c83a 	sub	r2,r3,r2
   8f5e4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f5e8:	e0fff917 	ldw	r3,-28(fp)
   8f5ec:	e0bff617 	ldw	r2,-40(fp)
   8f5f0:	1885883a 	add	r2,r3,r2
   8f5f4:	10c1ffcc 	andi	r3,r2,2047
   8f5f8:	e0bffc17 	ldw	r2,-16(fp)
   8f5fc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8f600:	e0bffe17 	ldw	r2,-8(fp)
   8f604:	00bfc716 	blt	zero,r2,8f524 <__alt_data_end+0xfffc3a34>
   8f608:	00000106 	br	8f610 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   8f60c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f610:	0005303a 	rdctl	r2,status
   8f614:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f618:	e0fffb17 	ldw	r3,-20(fp)
   8f61c:	00bfff84 	movi	r2,-2
   8f620:	1884703a 	and	r2,r3,r2
   8f624:	1001703a 	wrctl	status,r2
  
  return context;
   8f628:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8f62c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8f630:	e0bffc17 	ldw	r2,-16(fp)
   8f634:	10800817 	ldw	r2,32(r2)
   8f638:	10c00094 	ori	r3,r2,2
   8f63c:	e0bffc17 	ldw	r2,-16(fp)
   8f640:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8f644:	e0bffc17 	ldw	r2,-16(fp)
   8f648:	10800017 	ldw	r2,0(r2)
   8f64c:	10800104 	addi	r2,r2,4
   8f650:	1007883a 	mov	r3,r2
   8f654:	e0bffc17 	ldw	r2,-16(fp)
   8f658:	10800817 	ldw	r2,32(r2)
   8f65c:	18800035 	stwio	r2,0(r3)
   8f660:	e0bffa17 	ldw	r2,-24(fp)
   8f664:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f668:	e0bff817 	ldw	r2,-32(fp)
   8f66c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8f670:	e0bffe17 	ldw	r2,-8(fp)
   8f674:	0080100e 	bge	zero,r2,8f6b8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   8f678:	e0bfff17 	ldw	r2,-4(fp)
   8f67c:	1090000c 	andi	r2,r2,16384
   8f680:	1000101e 	bne	r2,zero,8f6c4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8f684:	0001883a 	nop
   8f688:	e0bffc17 	ldw	r2,-16(fp)
   8f68c:	10c00d17 	ldw	r3,52(r2)
   8f690:	e0bff517 	ldw	r2,-44(fp)
   8f694:	1880051e 	bne	r3,r2,8f6ac <altera_avalon_jtag_uart_write+0x1b8>
   8f698:	e0bffc17 	ldw	r2,-16(fp)
   8f69c:	10c00917 	ldw	r3,36(r2)
   8f6a0:	e0bffc17 	ldw	r2,-16(fp)
   8f6a4:	10800117 	ldw	r2,4(r2)
   8f6a8:	18bff736 	bltu	r3,r2,8f688 <__alt_data_end+0xfffc3b98>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   8f6ac:	e0bffc17 	ldw	r2,-16(fp)
   8f6b0:	10800917 	ldw	r2,36(r2)
   8f6b4:	1000051e 	bne	r2,zero,8f6cc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   8f6b8:	e0bffe17 	ldw	r2,-8(fp)
   8f6bc:	00bfd016 	blt	zero,r2,8f600 <__alt_data_end+0xfffc3b10>
   8f6c0:	00000306 	br	8f6d0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   8f6c4:	0001883a 	nop
   8f6c8:	00000106 	br	8f6d0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   8f6cc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8f6d0:	e0fffd17 	ldw	r3,-12(fp)
   8f6d4:	e0bff717 	ldw	r2,-36(fp)
   8f6d8:	18800426 	beq	r3,r2,8f6ec <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   8f6dc:	e0fffd17 	ldw	r3,-12(fp)
   8f6e0:	e0bff717 	ldw	r2,-36(fp)
   8f6e4:	1885c83a 	sub	r2,r3,r2
   8f6e8:	00000606 	br	8f704 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   8f6ec:	e0bfff17 	ldw	r2,-4(fp)
   8f6f0:	1090000c 	andi	r2,r2,16384
   8f6f4:	10000226 	beq	r2,zero,8f700 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   8f6f8:	00bffd44 	movi	r2,-11
   8f6fc:	00000106 	br	8f704 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8f700:	00bffec4 	movi	r2,-5
}
   8f704:	e037883a 	mov	sp,fp
   8f708:	dfc00117 	ldw	ra,4(sp)
   8f70c:	df000017 	ldw	fp,0(sp)
   8f710:	dec00204 	addi	sp,sp,8
   8f714:	f800283a 	ret

0008f718 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   8f718:	defffa04 	addi	sp,sp,-24
   8f71c:	dfc00515 	stw	ra,20(sp)
   8f720:	df000415 	stw	fp,16(sp)
   8f724:	df000404 	addi	fp,sp,16
   8f728:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   8f72c:	0007883a 	mov	r3,zero
   8f730:	e0bfff17 	ldw	r2,-4(fp)
   8f734:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   8f738:	e0bfff17 	ldw	r2,-4(fp)
   8f73c:	10800104 	addi	r2,r2,4
   8f740:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f744:	0005303a 	rdctl	r2,status
   8f748:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f74c:	e0fffd17 	ldw	r3,-12(fp)
   8f750:	00bfff84 	movi	r2,-2
   8f754:	1884703a 	and	r2,r3,r2
   8f758:	1001703a 	wrctl	status,r2
  
  return context;
   8f75c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   8f760:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   8f764:	008e9a40 	call	8e9a4 <alt_tick>
   8f768:	e0bffc17 	ldw	r2,-16(fp)
   8f76c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f770:	e0bffe17 	ldw	r2,-8(fp)
   8f774:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   8f778:	0001883a 	nop
   8f77c:	e037883a 	mov	sp,fp
   8f780:	dfc00117 	ldw	ra,4(sp)
   8f784:	df000017 	ldw	fp,0(sp)
   8f788:	dec00204 	addi	sp,sp,8
   8f78c:	f800283a 	ret

0008f790 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   8f790:	defff804 	addi	sp,sp,-32
   8f794:	dfc00715 	stw	ra,28(sp)
   8f798:	df000615 	stw	fp,24(sp)
   8f79c:	df000604 	addi	fp,sp,24
   8f7a0:	e13ffc15 	stw	r4,-16(fp)
   8f7a4:	e17ffd15 	stw	r5,-12(fp)
   8f7a8:	e1bffe15 	stw	r6,-8(fp)
   8f7ac:	e1ffff15 	stw	r7,-4(fp)
   8f7b0:	e0bfff17 	ldw	r2,-4(fp)
   8f7b4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   8f7b8:	d0a70717 	ldw	r2,-25572(gp)
   8f7bc:	1000021e 	bne	r2,zero,8f7c8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   8f7c0:	e0bffb17 	ldw	r2,-20(fp)
   8f7c4:	d0a70715 	stw	r2,-25572(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   8f7c8:	e0bffc17 	ldw	r2,-16(fp)
   8f7cc:	10800104 	addi	r2,r2,4
   8f7d0:	00c001c4 	movi	r3,7
   8f7d4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   8f7d8:	d8000015 	stw	zero,0(sp)
   8f7dc:	e1fffc17 	ldw	r7,-16(fp)
   8f7e0:	01800274 	movhi	r6,9
   8f7e4:	31bdc604 	addi	r6,r6,-2280
   8f7e8:	e17ffe17 	ldw	r5,-8(fp)
   8f7ec:	e13ffd17 	ldw	r4,-12(fp)
   8f7f0:	008defc0 	call	8defc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   8f7f4:	0001883a 	nop
   8f7f8:	e037883a 	mov	sp,fp
   8f7fc:	dfc00117 	ldw	ra,4(sp)
   8f800:	df000017 	ldw	fp,0(sp)
   8f804:	dec00204 	addi	sp,sp,8
   8f808:	f800283a 	ret

0008f80c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8f80c:	defff504 	addi	sp,sp,-44
   8f810:	df000a15 	stw	fp,40(sp)
   8f814:	df000a04 	addi	fp,sp,40
   8f818:	e13ffc15 	stw	r4,-16(fp)
   8f81c:	e17ffd15 	stw	r5,-12(fp)
   8f820:	e1bffe15 	stw	r6,-8(fp)
   8f824:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8f828:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8f82c:	d0a70717 	ldw	r2,-25572(gp)
  
  if (alt_ticks_per_second ())
   8f830:	10003c26 	beq	r2,zero,8f924 <alt_alarm_start+0x118>
  {
    if (alarm)
   8f834:	e0bffc17 	ldw	r2,-16(fp)
   8f838:	10003826 	beq	r2,zero,8f91c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   8f83c:	e0bffc17 	ldw	r2,-16(fp)
   8f840:	e0fffe17 	ldw	r3,-8(fp)
   8f844:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   8f848:	e0bffc17 	ldw	r2,-16(fp)
   8f84c:	e0ffff17 	ldw	r3,-4(fp)
   8f850:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f854:	0005303a 	rdctl	r2,status
   8f858:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f85c:	e0fff917 	ldw	r3,-28(fp)
   8f860:	00bfff84 	movi	r2,-2
   8f864:	1884703a 	and	r2,r3,r2
   8f868:	1001703a 	wrctl	status,r2
  
  return context;
   8f86c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   8f870:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8f874:	d0a70817 	ldw	r2,-25568(gp)
      
      current_nticks = alt_nticks();
   8f878:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8f87c:	e0fffd17 	ldw	r3,-12(fp)
   8f880:	e0bff617 	ldw	r2,-40(fp)
   8f884:	1885883a 	add	r2,r3,r2
   8f888:	10c00044 	addi	r3,r2,1
   8f88c:	e0bffc17 	ldw	r2,-16(fp)
   8f890:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8f894:	e0bffc17 	ldw	r2,-16(fp)
   8f898:	10c00217 	ldw	r3,8(r2)
   8f89c:	e0bff617 	ldw	r2,-40(fp)
   8f8a0:	1880042e 	bgeu	r3,r2,8f8b4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   8f8a4:	e0bffc17 	ldw	r2,-16(fp)
   8f8a8:	00c00044 	movi	r3,1
   8f8ac:	10c00405 	stb	r3,16(r2)
   8f8b0:	00000206 	br	8f8bc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   8f8b4:	e0bffc17 	ldw	r2,-16(fp)
   8f8b8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8f8bc:	e0bffc17 	ldw	r2,-16(fp)
   8f8c0:	d0e00e04 	addi	r3,gp,-32712
   8f8c4:	e0fffa15 	stw	r3,-24(fp)
   8f8c8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8f8cc:	e0bffb17 	ldw	r2,-20(fp)
   8f8d0:	e0fffa17 	ldw	r3,-24(fp)
   8f8d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8f8d8:	e0bffa17 	ldw	r2,-24(fp)
   8f8dc:	10c00017 	ldw	r3,0(r2)
   8f8e0:	e0bffb17 	ldw	r2,-20(fp)
   8f8e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8f8e8:	e0bffa17 	ldw	r2,-24(fp)
   8f8ec:	10800017 	ldw	r2,0(r2)
   8f8f0:	e0fffb17 	ldw	r3,-20(fp)
   8f8f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8f8f8:	e0bffa17 	ldw	r2,-24(fp)
   8f8fc:	e0fffb17 	ldw	r3,-20(fp)
   8f900:	10c00015 	stw	r3,0(r2)
   8f904:	e0bff817 	ldw	r2,-32(fp)
   8f908:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f90c:	e0bff717 	ldw	r2,-36(fp)
   8f910:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8f914:	0005883a 	mov	r2,zero
   8f918:	00000306 	br	8f928 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   8f91c:	00bffa84 	movi	r2,-22
   8f920:	00000106 	br	8f928 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   8f924:	00bfde84 	movi	r2,-134
  }
}
   8f928:	e037883a 	mov	sp,fp
   8f92c:	df000017 	ldw	fp,0(sp)
   8f930:	dec00104 	addi	sp,sp,4
   8f934:	f800283a 	ret

0008f938 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8f938:	defffe04 	addi	sp,sp,-8
   8f93c:	df000115 	stw	fp,4(sp)
   8f940:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   8f944:	e03fff15 	stw	zero,-4(fp)
   8f948:	00000506 	br	8f960 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   8f94c:	e0bfff17 	ldw	r2,-4(fp)
   8f950:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   8f954:	e0bfff17 	ldw	r2,-4(fp)
   8f958:	10800804 	addi	r2,r2,32
   8f95c:	e0bfff15 	stw	r2,-4(fp)
   8f960:	e0bfff17 	ldw	r2,-4(fp)
   8f964:	10820030 	cmpltui	r2,r2,2048
   8f968:	103ff81e 	bne	r2,zero,8f94c <__alt_data_end+0xfffc3e5c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8f96c:	0001883a 	nop
   8f970:	e037883a 	mov	sp,fp
   8f974:	df000017 	ldw	fp,0(sp)
   8f978:	dec00104 	addi	sp,sp,4
   8f97c:	f800283a 	ret

0008f980 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8f980:	defffe04 	addi	sp,sp,-8
   8f984:	dfc00115 	stw	ra,4(sp)
   8f988:	df000015 	stw	fp,0(sp)
   8f98c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8f990:	d0a00b17 	ldw	r2,-32724(gp)
   8f994:	10000326 	beq	r2,zero,8f9a4 <alt_get_errno+0x24>
   8f998:	d0a00b17 	ldw	r2,-32724(gp)
   8f99c:	103ee83a 	callr	r2
   8f9a0:	00000106 	br	8f9a8 <alt_get_errno+0x28>
   8f9a4:	d0a6f804 	addi	r2,gp,-25632
}
   8f9a8:	e037883a 	mov	sp,fp
   8f9ac:	dfc00117 	ldw	ra,4(sp)
   8f9b0:	df000017 	ldw	fp,0(sp)
   8f9b4:	dec00204 	addi	sp,sp,8
   8f9b8:	f800283a 	ret

0008f9bc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8f9bc:	defffa04 	addi	sp,sp,-24
   8f9c0:	dfc00515 	stw	ra,20(sp)
   8f9c4:	df000415 	stw	fp,16(sp)
   8f9c8:	df000404 	addi	fp,sp,16
   8f9cc:	e13ffe15 	stw	r4,-8(fp)
   8f9d0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8f9d4:	e0bffe17 	ldw	r2,-8(fp)
   8f9d8:	10000326 	beq	r2,zero,8f9e8 <alt_dev_llist_insert+0x2c>
   8f9dc:	e0bffe17 	ldw	r2,-8(fp)
   8f9e0:	10800217 	ldw	r2,8(r2)
   8f9e4:	1000061e 	bne	r2,zero,8fa00 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   8f9e8:	008f9800 	call	8f980 <alt_get_errno>
   8f9ec:	1007883a 	mov	r3,r2
   8f9f0:	00800584 	movi	r2,22
   8f9f4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   8f9f8:	00bffa84 	movi	r2,-22
   8f9fc:	00001306 	br	8fa4c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8fa00:	e0bffe17 	ldw	r2,-8(fp)
   8fa04:	e0ffff17 	ldw	r3,-4(fp)
   8fa08:	e0fffc15 	stw	r3,-16(fp)
   8fa0c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8fa10:	e0bffd17 	ldw	r2,-12(fp)
   8fa14:	e0fffc17 	ldw	r3,-16(fp)
   8fa18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8fa1c:	e0bffc17 	ldw	r2,-16(fp)
   8fa20:	10c00017 	ldw	r3,0(r2)
   8fa24:	e0bffd17 	ldw	r2,-12(fp)
   8fa28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8fa2c:	e0bffc17 	ldw	r2,-16(fp)
   8fa30:	10800017 	ldw	r2,0(r2)
   8fa34:	e0fffd17 	ldw	r3,-12(fp)
   8fa38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8fa3c:	e0bffc17 	ldw	r2,-16(fp)
   8fa40:	e0fffd17 	ldw	r3,-12(fp)
   8fa44:	10c00015 	stw	r3,0(r2)

  return 0;  
   8fa48:	0005883a 	mov	r2,zero
}
   8fa4c:	e037883a 	mov	sp,fp
   8fa50:	dfc00117 	ldw	ra,4(sp)
   8fa54:	df000017 	ldw	fp,0(sp)
   8fa58:	dec00204 	addi	sp,sp,8
   8fa5c:	f800283a 	ret

0008fa60 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8fa60:	defffd04 	addi	sp,sp,-12
   8fa64:	dfc00215 	stw	ra,8(sp)
   8fa68:	df000115 	stw	fp,4(sp)
   8fa6c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8fa70:	00800274 	movhi	r2,9
   8fa74:	10818104 	addi	r2,r2,1540
   8fa78:	e0bfff15 	stw	r2,-4(fp)
   8fa7c:	00000606 	br	8fa98 <_do_ctors+0x38>
        (*ctor) (); 
   8fa80:	e0bfff17 	ldw	r2,-4(fp)
   8fa84:	10800017 	ldw	r2,0(r2)
   8fa88:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8fa8c:	e0bfff17 	ldw	r2,-4(fp)
   8fa90:	10bfff04 	addi	r2,r2,-4
   8fa94:	e0bfff15 	stw	r2,-4(fp)
   8fa98:	e0ffff17 	ldw	r3,-4(fp)
   8fa9c:	00800274 	movhi	r2,9
   8faa0:	10818204 	addi	r2,r2,1544
   8faa4:	18bff62e 	bgeu	r3,r2,8fa80 <__alt_data_end+0xfffc3f90>
        (*ctor) (); 
}
   8faa8:	0001883a 	nop
   8faac:	e037883a 	mov	sp,fp
   8fab0:	dfc00117 	ldw	ra,4(sp)
   8fab4:	df000017 	ldw	fp,0(sp)
   8fab8:	dec00204 	addi	sp,sp,8
   8fabc:	f800283a 	ret

0008fac0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8fac0:	defffd04 	addi	sp,sp,-12
   8fac4:	dfc00215 	stw	ra,8(sp)
   8fac8:	df000115 	stw	fp,4(sp)
   8facc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8fad0:	00800274 	movhi	r2,9
   8fad4:	10818104 	addi	r2,r2,1540
   8fad8:	e0bfff15 	stw	r2,-4(fp)
   8fadc:	00000606 	br	8faf8 <_do_dtors+0x38>
        (*dtor) (); 
   8fae0:	e0bfff17 	ldw	r2,-4(fp)
   8fae4:	10800017 	ldw	r2,0(r2)
   8fae8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8faec:	e0bfff17 	ldw	r2,-4(fp)
   8faf0:	10bfff04 	addi	r2,r2,-4
   8faf4:	e0bfff15 	stw	r2,-4(fp)
   8faf8:	e0ffff17 	ldw	r3,-4(fp)
   8fafc:	00800274 	movhi	r2,9
   8fb00:	10818204 	addi	r2,r2,1544
   8fb04:	18bff62e 	bgeu	r3,r2,8fae0 <__alt_data_end+0xfffc3ff0>
        (*dtor) (); 
}
   8fb08:	0001883a 	nop
   8fb0c:	e037883a 	mov	sp,fp
   8fb10:	dfc00117 	ldw	ra,4(sp)
   8fb14:	df000017 	ldw	fp,0(sp)
   8fb18:	dec00204 	addi	sp,sp,8
   8fb1c:	f800283a 	ret

0008fb20 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8fb20:	defffe04 	addi	sp,sp,-8
   8fb24:	dfc00115 	stw	ra,4(sp)
   8fb28:	df000015 	stw	fp,0(sp)
   8fb2c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   8fb30:	01440004 	movi	r5,4096
   8fb34:	0009883a 	mov	r4,zero
   8fb38:	00901e40 	call	901e4 <alt_icache_flush>
#endif
}
   8fb3c:	0001883a 	nop
   8fb40:	e037883a 	mov	sp,fp
   8fb44:	dfc00117 	ldw	ra,4(sp)
   8fb48:	df000017 	ldw	fp,0(sp)
   8fb4c:	dec00204 	addi	sp,sp,8
   8fb50:	f800283a 	ret

0008fb54 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   8fb54:	defffe04 	addi	sp,sp,-8
   8fb58:	df000115 	stw	fp,4(sp)
   8fb5c:	df000104 	addi	fp,sp,4
   8fb60:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   8fb64:	e0bfff17 	ldw	r2,-4(fp)
   8fb68:	10bffe84 	addi	r2,r2,-6
   8fb6c:	10c00428 	cmpgeui	r3,r2,16
   8fb70:	18001a1e 	bne	r3,zero,8fbdc <alt_exception_cause_generated_bad_addr+0x88>
   8fb74:	100690ba 	slli	r3,r2,2
   8fb78:	00800274 	movhi	r2,9
   8fb7c:	10bee304 	addi	r2,r2,-1140
   8fb80:	1885883a 	add	r2,r3,r2
   8fb84:	10800017 	ldw	r2,0(r2)
   8fb88:	1000683a 	jmp	r2
   8fb8c:	0008fbcc 	andi	zero,zero,9199
   8fb90:	0008fbcc 	andi	zero,zero,9199
   8fb94:	0008fbdc 	xori	zero,zero,9199
   8fb98:	0008fbdc 	xori	zero,zero,9199
   8fb9c:	0008fbdc 	xori	zero,zero,9199
   8fba0:	0008fbcc 	andi	zero,zero,9199
   8fba4:	0008fbd4 	movui	zero,9199
   8fba8:	0008fbdc 	xori	zero,zero,9199
   8fbac:	0008fbcc 	andi	zero,zero,9199
   8fbb0:	0008fbcc 	andi	zero,zero,9199
   8fbb4:	0008fbdc 	xori	zero,zero,9199
   8fbb8:	0008fbcc 	andi	zero,zero,9199
   8fbbc:	0008fbd4 	movui	zero,9199
   8fbc0:	0008fbdc 	xori	zero,zero,9199
   8fbc4:	0008fbdc 	xori	zero,zero,9199
   8fbc8:	0008fbcc 	andi	zero,zero,9199
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   8fbcc:	00800044 	movi	r2,1
   8fbd0:	00000306 	br	8fbe0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   8fbd4:	0005883a 	mov	r2,zero
   8fbd8:	00000106 	br	8fbe0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   8fbdc:	0005883a 	mov	r2,zero
  }
}
   8fbe0:	e037883a 	mov	sp,fp
   8fbe4:	df000017 	ldw	fp,0(sp)
   8fbe8:	dec00104 	addi	sp,sp,4
   8fbec:	f800283a 	ret

0008fbf0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8fbf0:	defff904 	addi	sp,sp,-28
   8fbf4:	dfc00615 	stw	ra,24(sp)
   8fbf8:	df000515 	stw	fp,20(sp)
   8fbfc:	df000504 	addi	fp,sp,20
   8fc00:	e13ffc15 	stw	r4,-16(fp)
   8fc04:	e17ffd15 	stw	r5,-12(fp)
   8fc08:	e1bffe15 	stw	r6,-8(fp)
   8fc0c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8fc10:	e1bfff17 	ldw	r6,-4(fp)
   8fc14:	e17ffe17 	ldw	r5,-8(fp)
   8fc18:	e13ffd17 	ldw	r4,-12(fp)
   8fc1c:	008fe300 	call	8fe30 <open>
   8fc20:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8fc24:	e0bffb17 	ldw	r2,-20(fp)
   8fc28:	10001c16 	blt	r2,zero,8fc9c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   8fc2c:	00800274 	movhi	r2,9
   8fc30:	1084f204 	addi	r2,r2,5064
   8fc34:	e0fffb17 	ldw	r3,-20(fp)
   8fc38:	18c00324 	muli	r3,r3,12
   8fc3c:	10c5883a 	add	r2,r2,r3
   8fc40:	10c00017 	ldw	r3,0(r2)
   8fc44:	e0bffc17 	ldw	r2,-16(fp)
   8fc48:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8fc4c:	00800274 	movhi	r2,9
   8fc50:	1084f204 	addi	r2,r2,5064
   8fc54:	e0fffb17 	ldw	r3,-20(fp)
   8fc58:	18c00324 	muli	r3,r3,12
   8fc5c:	10c5883a 	add	r2,r2,r3
   8fc60:	10800104 	addi	r2,r2,4
   8fc64:	10c00017 	ldw	r3,0(r2)
   8fc68:	e0bffc17 	ldw	r2,-16(fp)
   8fc6c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8fc70:	00800274 	movhi	r2,9
   8fc74:	1084f204 	addi	r2,r2,5064
   8fc78:	e0fffb17 	ldw	r3,-20(fp)
   8fc7c:	18c00324 	muli	r3,r3,12
   8fc80:	10c5883a 	add	r2,r2,r3
   8fc84:	10800204 	addi	r2,r2,8
   8fc88:	10c00017 	ldw	r3,0(r2)
   8fc8c:	e0bffc17 	ldw	r2,-16(fp)
   8fc90:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8fc94:	e13ffb17 	ldw	r4,-20(fp)
   8fc98:	008e7f40 	call	8e7f4 <alt_release_fd>
  }
} 
   8fc9c:	0001883a 	nop
   8fca0:	e037883a 	mov	sp,fp
   8fca4:	dfc00117 	ldw	ra,4(sp)
   8fca8:	df000017 	ldw	fp,0(sp)
   8fcac:	dec00204 	addi	sp,sp,8
   8fcb0:	f800283a 	ret

0008fcb4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8fcb4:	defffb04 	addi	sp,sp,-20
   8fcb8:	dfc00415 	stw	ra,16(sp)
   8fcbc:	df000315 	stw	fp,12(sp)
   8fcc0:	df000304 	addi	fp,sp,12
   8fcc4:	e13ffd15 	stw	r4,-12(fp)
   8fcc8:	e17ffe15 	stw	r5,-8(fp)
   8fccc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8fcd0:	01c07fc4 	movi	r7,511
   8fcd4:	01800044 	movi	r6,1
   8fcd8:	e17ffd17 	ldw	r5,-12(fp)
   8fcdc:	01000274 	movhi	r4,9
   8fce0:	2104f504 	addi	r4,r4,5076
   8fce4:	008fbf00 	call	8fbf0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8fce8:	01c07fc4 	movi	r7,511
   8fcec:	000d883a 	mov	r6,zero
   8fcf0:	e17ffe17 	ldw	r5,-8(fp)
   8fcf4:	01000274 	movhi	r4,9
   8fcf8:	2104f204 	addi	r4,r4,5064
   8fcfc:	008fbf00 	call	8fbf0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8fd00:	01c07fc4 	movi	r7,511
   8fd04:	01800044 	movi	r6,1
   8fd08:	e17fff17 	ldw	r5,-4(fp)
   8fd0c:	01000274 	movhi	r4,9
   8fd10:	2104f804 	addi	r4,r4,5088
   8fd14:	008fbf00 	call	8fbf0 <alt_open_fd>
}  
   8fd18:	0001883a 	nop
   8fd1c:	e037883a 	mov	sp,fp
   8fd20:	dfc00117 	ldw	ra,4(sp)
   8fd24:	df000017 	ldw	fp,0(sp)
   8fd28:	dec00204 	addi	sp,sp,8
   8fd2c:	f800283a 	ret

0008fd30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8fd30:	defffe04 	addi	sp,sp,-8
   8fd34:	dfc00115 	stw	ra,4(sp)
   8fd38:	df000015 	stw	fp,0(sp)
   8fd3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8fd40:	d0a00b17 	ldw	r2,-32724(gp)
   8fd44:	10000326 	beq	r2,zero,8fd54 <alt_get_errno+0x24>
   8fd48:	d0a00b17 	ldw	r2,-32724(gp)
   8fd4c:	103ee83a 	callr	r2
   8fd50:	00000106 	br	8fd58 <alt_get_errno+0x28>
   8fd54:	d0a6f804 	addi	r2,gp,-25632
}
   8fd58:	e037883a 	mov	sp,fp
   8fd5c:	dfc00117 	ldw	ra,4(sp)
   8fd60:	df000017 	ldw	fp,0(sp)
   8fd64:	dec00204 	addi	sp,sp,8
   8fd68:	f800283a 	ret

0008fd6c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8fd6c:	defffd04 	addi	sp,sp,-12
   8fd70:	df000215 	stw	fp,8(sp)
   8fd74:	df000204 	addi	fp,sp,8
   8fd78:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8fd7c:	e0bfff17 	ldw	r2,-4(fp)
   8fd80:	10800217 	ldw	r2,8(r2)
   8fd84:	10d00034 	orhi	r3,r2,16384
   8fd88:	e0bfff17 	ldw	r2,-4(fp)
   8fd8c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8fd90:	e03ffe15 	stw	zero,-8(fp)
   8fd94:	00001d06 	br	8fe0c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8fd98:	00800274 	movhi	r2,9
   8fd9c:	1084f204 	addi	r2,r2,5064
   8fda0:	e0fffe17 	ldw	r3,-8(fp)
   8fda4:	18c00324 	muli	r3,r3,12
   8fda8:	10c5883a 	add	r2,r2,r3
   8fdac:	10c00017 	ldw	r3,0(r2)
   8fdb0:	e0bfff17 	ldw	r2,-4(fp)
   8fdb4:	10800017 	ldw	r2,0(r2)
   8fdb8:	1880111e 	bne	r3,r2,8fe00 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   8fdbc:	00800274 	movhi	r2,9
   8fdc0:	1084f204 	addi	r2,r2,5064
   8fdc4:	e0fffe17 	ldw	r3,-8(fp)
   8fdc8:	18c00324 	muli	r3,r3,12
   8fdcc:	10c5883a 	add	r2,r2,r3
   8fdd0:	10800204 	addi	r2,r2,8
   8fdd4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8fdd8:	1000090e 	bge	r2,zero,8fe00 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   8fddc:	e0bffe17 	ldw	r2,-8(fp)
   8fde0:	10c00324 	muli	r3,r2,12
   8fde4:	00800274 	movhi	r2,9
   8fde8:	1084f204 	addi	r2,r2,5064
   8fdec:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   8fdf0:	e0bfff17 	ldw	r2,-4(fp)
   8fdf4:	18800226 	beq	r3,r2,8fe00 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8fdf8:	00bffcc4 	movi	r2,-13
   8fdfc:	00000806 	br	8fe20 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8fe00:	e0bffe17 	ldw	r2,-8(fp)
   8fe04:	10800044 	addi	r2,r2,1
   8fe08:	e0bffe15 	stw	r2,-8(fp)
   8fe0c:	d0a00a17 	ldw	r2,-32728(gp)
   8fe10:	1007883a 	mov	r3,r2
   8fe14:	e0bffe17 	ldw	r2,-8(fp)
   8fe18:	18bfdf2e 	bgeu	r3,r2,8fd98 <__alt_data_end+0xfffc42a8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8fe1c:	0005883a 	mov	r2,zero
}
   8fe20:	e037883a 	mov	sp,fp
   8fe24:	df000017 	ldw	fp,0(sp)
   8fe28:	dec00104 	addi	sp,sp,4
   8fe2c:	f800283a 	ret

0008fe30 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8fe30:	defff604 	addi	sp,sp,-40
   8fe34:	dfc00915 	stw	ra,36(sp)
   8fe38:	df000815 	stw	fp,32(sp)
   8fe3c:	df000804 	addi	fp,sp,32
   8fe40:	e13ffd15 	stw	r4,-12(fp)
   8fe44:	e17ffe15 	stw	r5,-8(fp)
   8fe48:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8fe4c:	00bfffc4 	movi	r2,-1
   8fe50:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   8fe54:	00bffb44 	movi	r2,-19
   8fe58:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   8fe5c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8fe60:	d1600804 	addi	r5,gp,-32736
   8fe64:	e13ffd17 	ldw	r4,-12(fp)
   8fe68:	008ffa80 	call	8ffa8 <alt_find_dev>
   8fe6c:	e0bff815 	stw	r2,-32(fp)
   8fe70:	e0bff817 	ldw	r2,-32(fp)
   8fe74:	1000051e 	bne	r2,zero,8fe8c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8fe78:	e13ffd17 	ldw	r4,-12(fp)
   8fe7c:	00900380 	call	90038 <alt_find_file>
   8fe80:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   8fe84:	00800044 	movi	r2,1
   8fe88:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8fe8c:	e0bff817 	ldw	r2,-32(fp)
   8fe90:	10002926 	beq	r2,zero,8ff38 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8fe94:	e13ff817 	ldw	r4,-32(fp)
   8fe98:	00901400 	call	90140 <alt_get_fd>
   8fe9c:	e0bff915 	stw	r2,-28(fp)
   8fea0:	e0bff917 	ldw	r2,-28(fp)
   8fea4:	1000030e 	bge	r2,zero,8feb4 <open+0x84>
    {
      status = index;
   8fea8:	e0bff917 	ldw	r2,-28(fp)
   8feac:	e0bffa15 	stw	r2,-24(fp)
   8feb0:	00002306 	br	8ff40 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   8feb4:	e0bff917 	ldw	r2,-28(fp)
   8feb8:	10c00324 	muli	r3,r2,12
   8febc:	00800274 	movhi	r2,9
   8fec0:	1084f204 	addi	r2,r2,5064
   8fec4:	1885883a 	add	r2,r3,r2
   8fec8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8fecc:	e0fffe17 	ldw	r3,-8(fp)
   8fed0:	00900034 	movhi	r2,16384
   8fed4:	10bfffc4 	addi	r2,r2,-1
   8fed8:	1886703a 	and	r3,r3,r2
   8fedc:	e0bffc17 	ldw	r2,-16(fp)
   8fee0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8fee4:	e0bffb17 	ldw	r2,-20(fp)
   8fee8:	1000051e 	bne	r2,zero,8ff00 <open+0xd0>
   8feec:	e13ffc17 	ldw	r4,-16(fp)
   8fef0:	008fd6c0 	call	8fd6c <alt_file_locked>
   8fef4:	e0bffa15 	stw	r2,-24(fp)
   8fef8:	e0bffa17 	ldw	r2,-24(fp)
   8fefc:	10001016 	blt	r2,zero,8ff40 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8ff00:	e0bff817 	ldw	r2,-32(fp)
   8ff04:	10800317 	ldw	r2,12(r2)
   8ff08:	10000826 	beq	r2,zero,8ff2c <open+0xfc>
   8ff0c:	e0bff817 	ldw	r2,-32(fp)
   8ff10:	10800317 	ldw	r2,12(r2)
   8ff14:	e1ffff17 	ldw	r7,-4(fp)
   8ff18:	e1bffe17 	ldw	r6,-8(fp)
   8ff1c:	e17ffd17 	ldw	r5,-12(fp)
   8ff20:	e13ffc17 	ldw	r4,-16(fp)
   8ff24:	103ee83a 	callr	r2
   8ff28:	00000106 	br	8ff30 <open+0x100>
   8ff2c:	0005883a 	mov	r2,zero
   8ff30:	e0bffa15 	stw	r2,-24(fp)
   8ff34:	00000206 	br	8ff40 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8ff38:	00bffb44 	movi	r2,-19
   8ff3c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8ff40:	e0bffa17 	ldw	r2,-24(fp)
   8ff44:	1000090e 	bge	r2,zero,8ff6c <open+0x13c>
  {
    alt_release_fd (index);  
   8ff48:	e13ff917 	ldw	r4,-28(fp)
   8ff4c:	008e7f40 	call	8e7f4 <alt_release_fd>
    ALT_ERRNO = -status;
   8ff50:	008fd300 	call	8fd30 <alt_get_errno>
   8ff54:	1007883a 	mov	r3,r2
   8ff58:	e0bffa17 	ldw	r2,-24(fp)
   8ff5c:	0085c83a 	sub	r2,zero,r2
   8ff60:	18800015 	stw	r2,0(r3)
    return -1;
   8ff64:	00bfffc4 	movi	r2,-1
   8ff68:	00000106 	br	8ff70 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   8ff6c:	e0bff917 	ldw	r2,-28(fp)
}
   8ff70:	e037883a 	mov	sp,fp
   8ff74:	dfc00117 	ldw	ra,4(sp)
   8ff78:	df000017 	ldw	fp,0(sp)
   8ff7c:	dec00204 	addi	sp,sp,8
   8ff80:	f800283a 	ret

0008ff84 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   8ff84:	deffff04 	addi	sp,sp,-4
   8ff88:	df000015 	stw	fp,0(sp)
   8ff8c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8ff90:	000170fa 	wrctl	ienable,zero
}
   8ff94:	0001883a 	nop
   8ff98:	e037883a 	mov	sp,fp
   8ff9c:	df000017 	ldw	fp,0(sp)
   8ffa0:	dec00104 	addi	sp,sp,4
   8ffa4:	f800283a 	ret

0008ffa8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8ffa8:	defffa04 	addi	sp,sp,-24
   8ffac:	dfc00515 	stw	ra,20(sp)
   8ffb0:	df000415 	stw	fp,16(sp)
   8ffb4:	df000404 	addi	fp,sp,16
   8ffb8:	e13ffe15 	stw	r4,-8(fp)
   8ffbc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8ffc0:	e0bfff17 	ldw	r2,-4(fp)
   8ffc4:	10800017 	ldw	r2,0(r2)
   8ffc8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8ffcc:	e13ffe17 	ldw	r4,-8(fp)
   8ffd0:	00813ac0 	call	813ac <strlen>
   8ffd4:	10800044 	addi	r2,r2,1
   8ffd8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8ffdc:	00000d06 	br	90014 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8ffe0:	e0bffc17 	ldw	r2,-16(fp)
   8ffe4:	10800217 	ldw	r2,8(r2)
   8ffe8:	e0fffd17 	ldw	r3,-12(fp)
   8ffec:	180d883a 	mov	r6,r3
   8fff0:	e17ffe17 	ldw	r5,-8(fp)
   8fff4:	1009883a 	mov	r4,r2
   8fff8:	00902c00 	call	902c0 <memcmp>
   8fffc:	1000021e 	bne	r2,zero,90008 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   90000:	e0bffc17 	ldw	r2,-16(fp)
   90004:	00000706 	br	90024 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   90008:	e0bffc17 	ldw	r2,-16(fp)
   9000c:	10800017 	ldw	r2,0(r2)
   90010:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   90014:	e0fffc17 	ldw	r3,-16(fp)
   90018:	e0bfff17 	ldw	r2,-4(fp)
   9001c:	18bff01e 	bne	r3,r2,8ffe0 <__alt_data_end+0xfffc44f0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   90020:	0005883a 	mov	r2,zero
}
   90024:	e037883a 	mov	sp,fp
   90028:	dfc00117 	ldw	ra,4(sp)
   9002c:	df000017 	ldw	fp,0(sp)
   90030:	dec00204 	addi	sp,sp,8
   90034:	f800283a 	ret

00090038 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   90038:	defffb04 	addi	sp,sp,-20
   9003c:	dfc00415 	stw	ra,16(sp)
   90040:	df000315 	stw	fp,12(sp)
   90044:	df000304 	addi	fp,sp,12
   90048:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   9004c:	d0a00617 	ldw	r2,-32744(gp)
   90050:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   90054:	00003106 	br	9011c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   90058:	e0bffd17 	ldw	r2,-12(fp)
   9005c:	10800217 	ldw	r2,8(r2)
   90060:	1009883a 	mov	r4,r2
   90064:	00813ac0 	call	813ac <strlen>
   90068:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   9006c:	e0bffd17 	ldw	r2,-12(fp)
   90070:	10c00217 	ldw	r3,8(r2)
   90074:	e0bffe17 	ldw	r2,-8(fp)
   90078:	10bfffc4 	addi	r2,r2,-1
   9007c:	1885883a 	add	r2,r3,r2
   90080:	10800003 	ldbu	r2,0(r2)
   90084:	10803fcc 	andi	r2,r2,255
   90088:	1080201c 	xori	r2,r2,128
   9008c:	10bfe004 	addi	r2,r2,-128
   90090:	10800bd8 	cmpnei	r2,r2,47
   90094:	1000031e 	bne	r2,zero,900a4 <alt_find_file+0x6c>
    {
      len -= 1;
   90098:	e0bffe17 	ldw	r2,-8(fp)
   9009c:	10bfffc4 	addi	r2,r2,-1
   900a0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   900a4:	e0bffe17 	ldw	r2,-8(fp)
   900a8:	e0ffff17 	ldw	r3,-4(fp)
   900ac:	1885883a 	add	r2,r3,r2
   900b0:	10800003 	ldbu	r2,0(r2)
   900b4:	10803fcc 	andi	r2,r2,255
   900b8:	1080201c 	xori	r2,r2,128
   900bc:	10bfe004 	addi	r2,r2,-128
   900c0:	10800be0 	cmpeqi	r2,r2,47
   900c4:	1000081e 	bne	r2,zero,900e8 <alt_find_file+0xb0>
   900c8:	e0bffe17 	ldw	r2,-8(fp)
   900cc:	e0ffff17 	ldw	r3,-4(fp)
   900d0:	1885883a 	add	r2,r3,r2
   900d4:	10800003 	ldbu	r2,0(r2)
   900d8:	10803fcc 	andi	r2,r2,255
   900dc:	1080201c 	xori	r2,r2,128
   900e0:	10bfe004 	addi	r2,r2,-128
   900e4:	10000a1e 	bne	r2,zero,90110 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   900e8:	e0bffd17 	ldw	r2,-12(fp)
   900ec:	10800217 	ldw	r2,8(r2)
   900f0:	e0fffe17 	ldw	r3,-8(fp)
   900f4:	180d883a 	mov	r6,r3
   900f8:	e17fff17 	ldw	r5,-4(fp)
   900fc:	1009883a 	mov	r4,r2
   90100:	00902c00 	call	902c0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   90104:	1000021e 	bne	r2,zero,90110 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   90108:	e0bffd17 	ldw	r2,-12(fp)
   9010c:	00000706 	br	9012c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   90110:	e0bffd17 	ldw	r2,-12(fp)
   90114:	10800017 	ldw	r2,0(r2)
   90118:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   9011c:	e0fffd17 	ldw	r3,-12(fp)
   90120:	d0a00604 	addi	r2,gp,-32744
   90124:	18bfcc1e 	bne	r3,r2,90058 <__alt_data_end+0xfffc4568>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   90128:	0005883a 	mov	r2,zero
}
   9012c:	e037883a 	mov	sp,fp
   90130:	dfc00117 	ldw	ra,4(sp)
   90134:	df000017 	ldw	fp,0(sp)
   90138:	dec00204 	addi	sp,sp,8
   9013c:	f800283a 	ret

00090140 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   90140:	defffc04 	addi	sp,sp,-16
   90144:	df000315 	stw	fp,12(sp)
   90148:	df000304 	addi	fp,sp,12
   9014c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   90150:	00bffa04 	movi	r2,-24
   90154:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   90158:	e03ffd15 	stw	zero,-12(fp)
   9015c:	00001906 	br	901c4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   90160:	00800274 	movhi	r2,9
   90164:	1084f204 	addi	r2,r2,5064
   90168:	e0fffd17 	ldw	r3,-12(fp)
   9016c:	18c00324 	muli	r3,r3,12
   90170:	10c5883a 	add	r2,r2,r3
   90174:	10800017 	ldw	r2,0(r2)
   90178:	10000f1e 	bne	r2,zero,901b8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   9017c:	00800274 	movhi	r2,9
   90180:	1084f204 	addi	r2,r2,5064
   90184:	e0fffd17 	ldw	r3,-12(fp)
   90188:	18c00324 	muli	r3,r3,12
   9018c:	10c5883a 	add	r2,r2,r3
   90190:	e0ffff17 	ldw	r3,-4(fp)
   90194:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   90198:	d0e00a17 	ldw	r3,-32728(gp)
   9019c:	e0bffd17 	ldw	r2,-12(fp)
   901a0:	1880020e 	bge	r3,r2,901ac <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   901a4:	e0bffd17 	ldw	r2,-12(fp)
   901a8:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   901ac:	e0bffd17 	ldw	r2,-12(fp)
   901b0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   901b4:	00000606 	br	901d0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   901b8:	e0bffd17 	ldw	r2,-12(fp)
   901bc:	10800044 	addi	r2,r2,1
   901c0:	e0bffd15 	stw	r2,-12(fp)
   901c4:	e0bffd17 	ldw	r2,-12(fp)
   901c8:	10800810 	cmplti	r2,r2,32
   901cc:	103fe41e 	bne	r2,zero,90160 <__alt_data_end+0xfffc4670>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   901d0:	e0bffe17 	ldw	r2,-8(fp)
}
   901d4:	e037883a 	mov	sp,fp
   901d8:	df000017 	ldw	fp,0(sp)
   901dc:	dec00104 	addi	sp,sp,4
   901e0:	f800283a 	ret

000901e4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   901e4:	defffb04 	addi	sp,sp,-20
   901e8:	df000415 	stw	fp,16(sp)
   901ec:	df000404 	addi	fp,sp,16
   901f0:	e13ffe15 	stw	r4,-8(fp)
   901f4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   901f8:	e0bfff17 	ldw	r2,-4(fp)
   901fc:	10840070 	cmpltui	r2,r2,4097
   90200:	1000021e 	bne	r2,zero,9020c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   90204:	00840004 	movi	r2,4096
   90208:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   9020c:	e0fffe17 	ldw	r3,-8(fp)
   90210:	e0bfff17 	ldw	r2,-4(fp)
   90214:	1885883a 	add	r2,r3,r2
   90218:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   9021c:	e0bffe17 	ldw	r2,-8(fp)
   90220:	e0bffc15 	stw	r2,-16(fp)
   90224:	00000506 	br	9023c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   90228:	e0bffc17 	ldw	r2,-16(fp)
   9022c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   90230:	e0bffc17 	ldw	r2,-16(fp)
   90234:	10800804 	addi	r2,r2,32
   90238:	e0bffc15 	stw	r2,-16(fp)
   9023c:	e0fffc17 	ldw	r3,-16(fp)
   90240:	e0bffd17 	ldw	r2,-12(fp)
   90244:	18bff836 	bltu	r3,r2,90228 <__alt_data_end+0xfffc4738>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   90248:	e0bffe17 	ldw	r2,-8(fp)
   9024c:	108007cc 	andi	r2,r2,31
   90250:	10000226 	beq	r2,zero,9025c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   90254:	e0bffc17 	ldw	r2,-16(fp)
   90258:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   9025c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   90260:	0001883a 	nop
   90264:	e037883a 	mov	sp,fp
   90268:	df000017 	ldw	fp,0(sp)
   9026c:	dec00104 	addi	sp,sp,4
   90270:	f800283a 	ret

00090274 <atexit>:
   90274:	200b883a 	mov	r5,r4
   90278:	000f883a 	mov	r7,zero
   9027c:	000d883a 	mov	r6,zero
   90280:	0009883a 	mov	r4,zero
   90284:	009033c1 	jmpi	9033c <__register_exitproc>

00090288 <exit>:
   90288:	defffe04 	addi	sp,sp,-8
   9028c:	000b883a 	mov	r5,zero
   90290:	dc000015 	stw	r16,0(sp)
   90294:	dfc00115 	stw	ra,4(sp)
   90298:	2021883a 	mov	r16,r4
   9029c:	00904540 	call	90454 <__call_exitprocs>
   902a0:	00800274 	movhi	r2,9
   902a4:	10896a04 	addi	r2,r2,9640
   902a8:	11000017 	ldw	r4,0(r2)
   902ac:	20800f17 	ldw	r2,60(r4)
   902b0:	10000126 	beq	r2,zero,902b8 <exit+0x30>
   902b4:	103ee83a 	callr	r2
   902b8:	8009883a 	mov	r4,r16
   902bc:	00905d40 	call	905d4 <_exit>

000902c0 <memcmp>:
   902c0:	01c000c4 	movi	r7,3
   902c4:	3980192e 	bgeu	r7,r6,9032c <memcmp+0x6c>
   902c8:	2144b03a 	or	r2,r4,r5
   902cc:	11c4703a 	and	r2,r2,r7
   902d0:	10000f26 	beq	r2,zero,90310 <memcmp+0x50>
   902d4:	20800003 	ldbu	r2,0(r4)
   902d8:	28c00003 	ldbu	r3,0(r5)
   902dc:	10c0151e 	bne	r2,r3,90334 <memcmp+0x74>
   902e0:	31bfff84 	addi	r6,r6,-2
   902e4:	01ffffc4 	movi	r7,-1
   902e8:	00000406 	br	902fc <memcmp+0x3c>
   902ec:	20800003 	ldbu	r2,0(r4)
   902f0:	28c00003 	ldbu	r3,0(r5)
   902f4:	31bfffc4 	addi	r6,r6,-1
   902f8:	10c00e1e 	bne	r2,r3,90334 <memcmp+0x74>
   902fc:	21000044 	addi	r4,r4,1
   90300:	29400044 	addi	r5,r5,1
   90304:	31fff91e 	bne	r6,r7,902ec <__alt_data_end+0xfffc47fc>
   90308:	0005883a 	mov	r2,zero
   9030c:	f800283a 	ret
   90310:	20c00017 	ldw	r3,0(r4)
   90314:	28800017 	ldw	r2,0(r5)
   90318:	18bfee1e 	bne	r3,r2,902d4 <__alt_data_end+0xfffc47e4>
   9031c:	31bfff04 	addi	r6,r6,-4
   90320:	21000104 	addi	r4,r4,4
   90324:	29400104 	addi	r5,r5,4
   90328:	39bff936 	bltu	r7,r6,90310 <__alt_data_end+0xfffc4820>
   9032c:	303fe91e 	bne	r6,zero,902d4 <__alt_data_end+0xfffc47e4>
   90330:	003ff506 	br	90308 <__alt_data_end+0xfffc4818>
   90334:	10c5c83a 	sub	r2,r2,r3
   90338:	f800283a 	ret

0009033c <__register_exitproc>:
   9033c:	defffa04 	addi	sp,sp,-24
   90340:	dc000315 	stw	r16,12(sp)
   90344:	04000274 	movhi	r16,9
   90348:	84096a04 	addi	r16,r16,9640
   9034c:	80c00017 	ldw	r3,0(r16)
   90350:	dc400415 	stw	r17,16(sp)
   90354:	dfc00515 	stw	ra,20(sp)
   90358:	18805217 	ldw	r2,328(r3)
   9035c:	2023883a 	mov	r17,r4
   90360:	10003726 	beq	r2,zero,90440 <__register_exitproc+0x104>
   90364:	10c00117 	ldw	r3,4(r2)
   90368:	010007c4 	movi	r4,31
   9036c:	20c00e16 	blt	r4,r3,903a8 <__register_exitproc+0x6c>
   90370:	1a000044 	addi	r8,r3,1
   90374:	8800221e 	bne	r17,zero,90400 <__register_exitproc+0xc4>
   90378:	18c00084 	addi	r3,r3,2
   9037c:	18c7883a 	add	r3,r3,r3
   90380:	18c7883a 	add	r3,r3,r3
   90384:	12000115 	stw	r8,4(r2)
   90388:	10c7883a 	add	r3,r2,r3
   9038c:	19400015 	stw	r5,0(r3)
   90390:	0005883a 	mov	r2,zero
   90394:	dfc00517 	ldw	ra,20(sp)
   90398:	dc400417 	ldw	r17,16(sp)
   9039c:	dc000317 	ldw	r16,12(sp)
   903a0:	dec00604 	addi	sp,sp,24
   903a4:	f800283a 	ret
   903a8:	00800034 	movhi	r2,0
   903ac:	10800004 	addi	r2,r2,0
   903b0:	10002626 	beq	r2,zero,9044c <__register_exitproc+0x110>
   903b4:	01006404 	movi	r4,400
   903b8:	d9400015 	stw	r5,0(sp)
   903bc:	d9800115 	stw	r6,4(sp)
   903c0:	d9c00215 	stw	r7,8(sp)
   903c4:	00000000 	call	0 <__alt_mem_onchip_memory2-0x80000>
   903c8:	d9400017 	ldw	r5,0(sp)
   903cc:	d9800117 	ldw	r6,4(sp)
   903d0:	d9c00217 	ldw	r7,8(sp)
   903d4:	10001d26 	beq	r2,zero,9044c <__register_exitproc+0x110>
   903d8:	81000017 	ldw	r4,0(r16)
   903dc:	10000115 	stw	zero,4(r2)
   903e0:	02000044 	movi	r8,1
   903e4:	22405217 	ldw	r9,328(r4)
   903e8:	0007883a 	mov	r3,zero
   903ec:	12400015 	stw	r9,0(r2)
   903f0:	20805215 	stw	r2,328(r4)
   903f4:	10006215 	stw	zero,392(r2)
   903f8:	10006315 	stw	zero,396(r2)
   903fc:	883fde26 	beq	r17,zero,90378 <__alt_data_end+0xfffc4888>
   90400:	18c9883a 	add	r4,r3,r3
   90404:	2109883a 	add	r4,r4,r4
   90408:	1109883a 	add	r4,r2,r4
   9040c:	21802215 	stw	r6,136(r4)
   90410:	01800044 	movi	r6,1
   90414:	12406217 	ldw	r9,392(r2)
   90418:	30cc983a 	sll	r6,r6,r3
   9041c:	4992b03a 	or	r9,r9,r6
   90420:	12406215 	stw	r9,392(r2)
   90424:	21c04215 	stw	r7,264(r4)
   90428:	01000084 	movi	r4,2
   9042c:	893fd21e 	bne	r17,r4,90378 <__alt_data_end+0xfffc4888>
   90430:	11006317 	ldw	r4,396(r2)
   90434:	218cb03a 	or	r6,r4,r6
   90438:	11806315 	stw	r6,396(r2)
   9043c:	003fce06 	br	90378 <__alt_data_end+0xfffc4888>
   90440:	18805304 	addi	r2,r3,332
   90444:	18805215 	stw	r2,328(r3)
   90448:	003fc606 	br	90364 <__alt_data_end+0xfffc4874>
   9044c:	00bfffc4 	movi	r2,-1
   90450:	003fd006 	br	90394 <__alt_data_end+0xfffc48a4>

00090454 <__call_exitprocs>:
   90454:	defff504 	addi	sp,sp,-44
   90458:	df000915 	stw	fp,36(sp)
   9045c:	dd400615 	stw	r21,24(sp)
   90460:	dc800315 	stw	r18,12(sp)
   90464:	dfc00a15 	stw	ra,40(sp)
   90468:	ddc00815 	stw	r23,32(sp)
   9046c:	dd800715 	stw	r22,28(sp)
   90470:	dd000515 	stw	r20,20(sp)
   90474:	dcc00415 	stw	r19,16(sp)
   90478:	dc400215 	stw	r17,8(sp)
   9047c:	dc000115 	stw	r16,4(sp)
   90480:	d9000015 	stw	r4,0(sp)
   90484:	2839883a 	mov	fp,r5
   90488:	04800044 	movi	r18,1
   9048c:	057fffc4 	movi	r21,-1
   90490:	00800274 	movhi	r2,9
   90494:	10896a04 	addi	r2,r2,9640
   90498:	12000017 	ldw	r8,0(r2)
   9049c:	45005217 	ldw	r20,328(r8)
   904a0:	44c05204 	addi	r19,r8,328
   904a4:	a0001c26 	beq	r20,zero,90518 <__call_exitprocs+0xc4>
   904a8:	a0800117 	ldw	r2,4(r20)
   904ac:	15ffffc4 	addi	r23,r2,-1
   904b0:	b8000d16 	blt	r23,zero,904e8 <__call_exitprocs+0x94>
   904b4:	14000044 	addi	r16,r2,1
   904b8:	8421883a 	add	r16,r16,r16
   904bc:	8421883a 	add	r16,r16,r16
   904c0:	84402004 	addi	r17,r16,128
   904c4:	a463883a 	add	r17,r20,r17
   904c8:	a421883a 	add	r16,r20,r16
   904cc:	e0001e26 	beq	fp,zero,90548 <__call_exitprocs+0xf4>
   904d0:	80804017 	ldw	r2,256(r16)
   904d4:	e0801c26 	beq	fp,r2,90548 <__call_exitprocs+0xf4>
   904d8:	bdffffc4 	addi	r23,r23,-1
   904dc:	843fff04 	addi	r16,r16,-4
   904e0:	8c7fff04 	addi	r17,r17,-4
   904e4:	bd7ff91e 	bne	r23,r21,904cc <__alt_data_end+0xfffc49dc>
   904e8:	00800034 	movhi	r2,0
   904ec:	10800004 	addi	r2,r2,0
   904f0:	10000926 	beq	r2,zero,90518 <__call_exitprocs+0xc4>
   904f4:	a0800117 	ldw	r2,4(r20)
   904f8:	1000301e 	bne	r2,zero,905bc <__call_exitprocs+0x168>
   904fc:	a0800017 	ldw	r2,0(r20)
   90500:	10003226 	beq	r2,zero,905cc <__call_exitprocs+0x178>
   90504:	a009883a 	mov	r4,r20
   90508:	98800015 	stw	r2,0(r19)
   9050c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x80000>
   90510:	9d000017 	ldw	r20,0(r19)
   90514:	a03fe41e 	bne	r20,zero,904a8 <__alt_data_end+0xfffc49b8>
   90518:	dfc00a17 	ldw	ra,40(sp)
   9051c:	df000917 	ldw	fp,36(sp)
   90520:	ddc00817 	ldw	r23,32(sp)
   90524:	dd800717 	ldw	r22,28(sp)
   90528:	dd400617 	ldw	r21,24(sp)
   9052c:	dd000517 	ldw	r20,20(sp)
   90530:	dcc00417 	ldw	r19,16(sp)
   90534:	dc800317 	ldw	r18,12(sp)
   90538:	dc400217 	ldw	r17,8(sp)
   9053c:	dc000117 	ldw	r16,4(sp)
   90540:	dec00b04 	addi	sp,sp,44
   90544:	f800283a 	ret
   90548:	a0800117 	ldw	r2,4(r20)
   9054c:	80c00017 	ldw	r3,0(r16)
   90550:	10bfffc4 	addi	r2,r2,-1
   90554:	15c01426 	beq	r2,r23,905a8 <__call_exitprocs+0x154>
   90558:	80000015 	stw	zero,0(r16)
   9055c:	183fde26 	beq	r3,zero,904d8 <__alt_data_end+0xfffc49e8>
   90560:	95c8983a 	sll	r4,r18,r23
   90564:	a0806217 	ldw	r2,392(r20)
   90568:	a5800117 	ldw	r22,4(r20)
   9056c:	2084703a 	and	r2,r4,r2
   90570:	10000b26 	beq	r2,zero,905a0 <__call_exitprocs+0x14c>
   90574:	a0806317 	ldw	r2,396(r20)
   90578:	2088703a 	and	r4,r4,r2
   9057c:	20000c1e 	bne	r4,zero,905b0 <__call_exitprocs+0x15c>
   90580:	89400017 	ldw	r5,0(r17)
   90584:	d9000017 	ldw	r4,0(sp)
   90588:	183ee83a 	callr	r3
   9058c:	a0800117 	ldw	r2,4(r20)
   90590:	15bfbf1e 	bne	r2,r22,90490 <__alt_data_end+0xfffc49a0>
   90594:	98800017 	ldw	r2,0(r19)
   90598:	153fcf26 	beq	r2,r20,904d8 <__alt_data_end+0xfffc49e8>
   9059c:	003fbc06 	br	90490 <__alt_data_end+0xfffc49a0>
   905a0:	183ee83a 	callr	r3
   905a4:	003ff906 	br	9058c <__alt_data_end+0xfffc4a9c>
   905a8:	a5c00115 	stw	r23,4(r20)
   905ac:	003feb06 	br	9055c <__alt_data_end+0xfffc4a6c>
   905b0:	89000017 	ldw	r4,0(r17)
   905b4:	183ee83a 	callr	r3
   905b8:	003ff406 	br	9058c <__alt_data_end+0xfffc4a9c>
   905bc:	a0800017 	ldw	r2,0(r20)
   905c0:	a027883a 	mov	r19,r20
   905c4:	1029883a 	mov	r20,r2
   905c8:	003fb606 	br	904a4 <__alt_data_end+0xfffc49b4>
   905cc:	0005883a 	mov	r2,zero
   905d0:	003ffb06 	br	905c0 <__alt_data_end+0xfffc4ad0>

000905d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   905d4:	defffd04 	addi	sp,sp,-12
   905d8:	df000215 	stw	fp,8(sp)
   905dc:	df000204 	addi	fp,sp,8
   905e0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   905e4:	0001883a 	nop
   905e8:	e0bfff17 	ldw	r2,-4(fp)
   905ec:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   905f0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   905f4:	10000226 	beq	r2,zero,90600 <_exit+0x2c>
    ALT_SIM_FAIL();
   905f8:	002af070 	cmpltui	zero,zero,43969
   905fc:	00000106 	br	90604 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   90600:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   90604:	003fff06 	br	90604 <__alt_data_end+0xfffc4b14>
