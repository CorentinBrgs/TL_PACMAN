
pacman_soft_1.elf:     file format elf32-littlenios2
pacman_soft_1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080244

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x000110c0 memsz 0x000110c0 flags r-x
    LOAD off    0x000120e0 vaddr 0x000910e0 paddr 0x00092de8 align 2**12
         filesz 0x00001d08 memsz 0x00001d08 flags rw-
    LOAD off    0x00014af0 vaddr 0x00094af0 paddr 0x00094af0 align 2**12
         filesz 0x00000000 memsz 0x00000264 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010a90  00080244  00080244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000040c  00090cd4  00090cd4  00011cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d08  000910e0  00092de8  000120e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000264  00094af0  00094af0  00014af0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00094d54  00094d54  00013de8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013de8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001020  00000000  00000000  00013e10  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000265ec  00000000  00000000  00014e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009d49  00000000  00000000  0003b41c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c18e  00000000  00000000  00045165  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002530  00000000  00000000  000512f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003d07  00000000  00000000  00053824  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017a63  00000000  00000000  0005752b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006ef90  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001910  00000000  00000000  0006efc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007404a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0007404d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00074057  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00074058  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00074059  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0007405d  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00074061  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00074065  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0007406e  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00074077  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  00074080  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001e  00000000  00000000  00074089  2**0
                  CONTENTS, READONLY
 29 .jdi          0000677d  00000000  00000000  000740a7  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000b0a63  00000000  00000000  0007a824  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080244 l    d  .text	00000000 .text
00090cd4 l    d  .rodata	00000000 .rodata
000910e0 l    d  .rwdata	00000000 .rwdata
00094af0 l    d  .bss	00000000 .bss
00094d54 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pacman_soft_1_bsp//obj/HAL/src/crt0.o
0008028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 background.c
000910e0 l     O .rwdata	0000003c charBackground
0009111c l     O .rwdata	0000003c ghostBackground
00094b3c l     O .bss	0000003c foodLayer
00000000 l    df *ABS*	00000000 game_manager.c
00091158 l     O .rwdata	0000003c charBackground
00091194 l     O .rwdata	0000003c ghostBackground
00094b78 l     O .bss	0000003c foodLayer
000911d0 l     O .rwdata	0000000a char_array_1
000911da l     O .rwdata	0000000a char_array_2
00000000 l    df *ABS*	00000000 general.c
00000000 l    df *ABS*	00000000 main.c
000911e4 l     O .rwdata	0000003c charBackground
00091220 l     O .rwdata	0000003c ghostBackground
00094bb4 l     O .bss	0000003c foodLayer
0009125c l     O .rwdata	0000000a char_array_1
00091266 l     O .rwdata	0000000a char_array_2
000807b8 l     F .text	0000007c refresh_position_interrupt_handler
00080834 l     F .text	00000048 left_button_interrupt_handler
0008087c l     F .text	00000048 up_button_interrupt_handler
000808c4 l     F .text	00000048 down_button_interrupt_handler
0008090c l     F .text	00000048 right_button_interrupt_handler
00000000 l    df *ABS*	00000000 refresh_position.c
00091270 l     O .rwdata	0000003c charBackground
000912ac l     O .rwdata	0000003c ghostBackground
00094bf0 l     O .bss	0000003c foodLayer
00000000 l    df *ABS*	00000000 segments_display.c
000912e8 l     O .rwdata	0000000a char_array_1
000912f2 l     O .rwdata	0000000a char_array_2
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
00090e2e l     O .rodata	00000010 zeroes.4404
00083d74 l     F .text	000000bc __sbprintf
00090e3e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00083f84 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00085ab4 l     F .text	00000008 __fp_unlock
00085ac8 l     F .text	0000019c __sinit.part.1
00085c64 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
000912fc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00091740 l     O .rwdata	00000020 lc_ctype_charset
00091720 l     O .rwdata	00000020 lc_message_charset
00091760 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00090e70 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000890bc l     F .text	000000fc __sprint_r.part.0
00090fa4 l     O .rodata	00000010 blanks.4348
00090f94 l     O .rodata	00000010 zeroes.4349
0008a648 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0008e1b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008e2bc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008e2e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0008e9e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008eac8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008ebb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0008ed88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00092ddc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0008f178 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008f2ac l     F .text	00000034 alt_dev_reg
00091d48 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008f5a0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0008f7ac l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0008fde4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0009004c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000902bc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
000903fc l     F .text	0000003c alt_get_errno
00090438 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00080290 g     F .text	000000a4 set_background_in_memory
00094b38 g     O .bss	00000004 alt_instruction_exception_handler
00088700 g     F .text	00000074 _mprec_log10
000887ec g     F .text	0000008c __any_on
0008abe4 g     F .text	00000054 _isatty_r
00090e7c g     O .rodata	00000028 __mprec_tinytens
0008ecc4 g     F .text	0000007c alt_main
00080da4 g     F .text	0000003c init_ghost_position
00081928 g     F .text	000000c0 _puts_r
00094c54 g     O .bss	00000100 alt_irq
0008ac38 g     F .text	00000060 _lseek_r
00092de8 g       *ABS*	00000000 __flash_rwdata_start
0008ccdc g     F .text	00000088 .hidden __eqdf2
000868cc g     F .text	0000005c _gettimeofday_r
00080d08 g     F .text	0000009c init_position
00094d54 g       *ABS*	00000000 __alt_heap_start
000818ec g     F .text	0000003c printf
0008ae50 g     F .text	0000009c _wcrtomb_r
00088f7c g     F .text	0000005c __sseek
00085e04 g     F .text	00000010 __sinit
0008acf8 g     F .text	00000140 __swbuf_r
00086928 g     F .text	0000007c _setlocale_r
00085c6c g     F .text	00000068 __sfmoreglue
0008ed64 g     F .text	00000024 __malloc_unlock
000875f8 g     F .text	0000015c memmove
00085dec g     F .text	00000018 _cleanup
0008787c g     F .text	000000a8 _Balloc
0008cd64 g     F .text	000000dc .hidden __gtdf2
00090650 g     F .text	00000024 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000001c __reset
000805c4 g     F .text	0000006c food_layer_empty
00080020 g       *ABS*	00000000 __flash_exceptions_start
0008ab88 g     F .text	0000005c _fstat_r
00094af4 g     O .bss	00000004 errno
00088ef8 g     F .text	00000008 __seofread
00094b28 g     O .bss	00000004 alt_argv
0009ada8 g       *ABS*	00000000 _gp
00091bc8 g     O .rwdata	00000180 alt_fd_list
00090674 g     F .text	00000090 alt_find_dev
000874b0 g     F .text	00000148 memcpy
00085abc g     F .text	0000000c _cleanup_r
0008dfc8 g     F .text	000000dc .hidden __floatsidf
00090380 g     F .text	0000007c alt_io_redirect
0008ce40 g     F .text	000000f4 .hidden __ltdf2
00090cd4 g       *ABS*	00000000 __DTOR_END__
0008143c g     F .text	00000104 randomDirection
000819e8 g     F .text	00000014 puts
00090220 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00088ddc g     F .text	00000074 __fpclassifyd
0008865c g     F .text	000000a4 __ratio
0008a62c g     F .text	0000001c __vfiprintf_internal
0008f9a4 g     F .text	0000021c altera_avalon_jtag_uart_read
000818bc g     F .text	00000030 _printf_r
00081800 g     F .text	00000064 .hidden __udivsi3
0008ea24 g     F .text	000000a4 isatty
00090ecc g     O .rodata	000000c8 __mprec_tens
000869a4 g     F .text	0000000c __locale_charset
00094b10 g     O .bss	00000008 alt_timezone
000908b0 g     F .text	00000090 alt_icache_flush
00094b0c g     O .bss	00000004 __malloc_top_pad
00092db0 g     O .rwdata	00000004 __mb_cur_max
000869d4 g     F .text	0000000c _localeconv_r
00087c88 g     F .text	0000003c __i2b
00086288 g     F .text	000004bc __sfvwrite_r
00088e50 g     F .text	00000054 _sbrk_r
0008ac98 g     F .text	00000060 _read_r
00092dd0 g     O .rwdata	00000004 alt_max_fd
0008a87c g     F .text	000000f0 _fclose_r
00085a84 g     F .text	00000030 fflush
00094b08 g     O .bss	00000004 __malloc_max_sbrked_mem
0008e868 g     F .text	00000180 alt_irq_register
0008bb48 g     F .text	000008ac .hidden __adddf3
00088404 g     F .text	0000010c __b2d
0008b610 g     F .text	00000538 .hidden __umoddi3
0008ebf0 g     F .text	000000d4 lseek
00092da8 g     O .rwdata	00000004 _global_impure_ptr
00088878 g     F .text	00000564 _realloc_r
00094d54 g       *ABS*	00000000 __bss_end
0008e778 g     F .text	000000f0 alt_iic_isr_register
0008f070 g     F .text	00000108 alt_tick
0008b098 g     F .text	00000578 .hidden __udivdi3
00081540 g     F .text	000001c8 display_number
0008aae4 g     F .text	00000024 _fputwc_r
00090ea4 g     O .rodata	00000028 __mprec_bigtens
00087a6c g     F .text	00000104 __s2b
0008e0a4 g     F .text	000000a8 .hidden __floatunsidf
00088144 g     F .text	00000060 __mcmp
00085e24 g     F .text	00000018 __fp_lock_all
0008e72c g     F .text	0000004c alt_ic_irq_enabled
0008efd4 g     F .text	0000009c alt_alarm_stop
00094b20 g     O .bss	00000004 alt_irq_active
00080c40 g     F .text	00000084 compute_byte_packet
000800fc g     F .exceptions	000000d4 alt_irq_handler
00091ba0 g     O .rwdata	00000028 alt_dev_null
00090004 g     F .text	00000048 alt_dcache_flush_all
00087b70 g     F .text	00000068 __hi0bits
0008df48 g     F .text	00000080 .hidden __fixdfsi
00080724 g     F .text	00000094 get_block_with_coordinates
00092de8 g       *ABS*	00000000 __ram_rwdata_end
00092dc8 g     O .rwdata	00000008 alt_dev_list
00094af0 g     O .bss	00000002 score
0008f1b4 g     F .text	000000f8 write
000910e0 g       *ABS*	00000000 __ram_rodata_end
0008e324 g     F .text	000000b0 fstat
0008ce40 g     F .text	000000f4 .hidden __ledf2
00087ebc g     F .text	00000140 __pow5mult
000891d0 g     F .text	0000145c ___vfiprintf_internal_r
00094b00 g     O .bss	00000004 __nlocale_changed
00081864 g     F .text	00000058 .hidden __umodsi3
00094d54 g       *ABS*	00000000 end
0008f4e0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000801d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00090cd4 g       *ABS*	00000000 __CTOR_LIST__
000e1a80 g       *ABS*	00000000 __alt_stack_pointer
0008fe5c g     F .text	0000007c alt_avalon_timer_sc_init
0008e14c g     F .text	00000064 .hidden __clzsi2
0008fbc0 g     F .text	00000224 altera_avalon_jtag_uart_write
00085e14 g     F .text	00000004 __sfp_lock_acquire
000873cc g     F .text	000000e4 memchr
00081b60 g     F .text	000021f8 ___vfprintf_internal_r
00085f78 g     F .text	00000310 _free_r
000869b0 g     F .text	00000010 __locale_mb_cur_max
00090b20 g     F .text	00000180 __call_exitprocs
00094afc g     O .bss	00000004 __mlocale_changed
00092db4 g     O .rwdata	00000004 __malloc_sbrk_base
00080244 g     F .text	0000004c _start
00094b30 g     O .bss	00000004 _alt_tick_rate
00081a14 g     F .text	00000064 rand
00087ffc g     F .text	00000148 __lshift
00094b34 g     O .bss	00000004 _alt_nticks
0008edc4 g     F .text	000000fc read
0008f318 g     F .text	00000064 alt_sys_init
00090a08 g     F .text	00000118 __register_exitproc
00087cc4 g     F .text	000001f8 __multiply
0008f84c g     F .text	00000068 altera_avalon_jtag_uart_close
000910e0 g       *ABS*	00000000 __ram_rwdata_start
00090cd4 g       *ABS*	00000000 __ram_rodata_start
00094c2c g     O .bss	00000028 __malloc_current_mallinfo
00088510 g     F .text	0000014c __d2b
0008f37c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0009080c g     F .text	000000a4 alt_get_fd
0008a764 g     F .text	00000054 _close_r
00080464 g     F .text	00000160 refresh_food_layer
0009098c g     F .text	0000007c memcmp
0008f43c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00094d54 g       *ABS*	00000000 __alt_stack_base
0008f48c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00083e30 g     F .text	00000154 __swsetup_r
0008c3f4 g     F .text	000008e8 .hidden __divdf3
00085cd4 g     F .text	00000118 __sfp
00088774 g     F .text	00000078 __copybits
00091798 g     O .rwdata	00000408 __malloc_av_
00085e20 g     F .text	00000004 __sinit_lock_release
0008cf34 g     F .text	00000718 .hidden __muldf3
00088ea4 g     F .text	00000054 __sread
00090704 g     F .text	00000108 alt_find_file
00090088 g     F .text	000000a4 alt_dev_llist_insert
0008ed40 g     F .text	00000024 __malloc_lock
0008ef24 g     F .text	000000b0 sbrk
00085a28 g     F .text	0000005c _fflush_r
0008a7b8 g     F .text	000000c4 _calloc_r
0008e3d4 g     F .text	000001f4 gettimeofday
00080de0 g     F .text	0000026c compute_collision
00094af0 g       *ABS*	00000000 __bss_start
00087754 g     F .text	00000128 memset
00080954 g     F .text	000002ec main
00094b2c g     O .bss	00000004 alt_envp
00094b04 g     O .bss	00000004 __malloc_max_total_mem
0008f3dc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008ae38 g     F .text	00000018 __swbuf
000819fc g     F .text	00000018 srand
00088fd8 g     F .text	00000008 __sclose
000e1a80 g       *ABS*	00000000 __alt_heap_limit
0008a96c g     F .text	00000014 fclose
00084184 g     F .text	00001688 _dtoa_r
00086bc0 g     F .text	0000080c _malloc_r
0008afac g     F .text	00000030 __ascii_wctomb
00081b10 g     F .text	00000050 time
00092dd4 g     O .rwdata	00000004 alt_errno
00086744 g     F .text	000000c4 _fwalk
00081708 g     F .text	00000084 .hidden __divsi3
00085e54 g     F .text	00000124 _malloc_trim_r
00090cd4 g       *ABS*	00000000 __CTOR_END__
00088fe0 g     F .text	000000dc strcmp
00090cd4 g       *ABS*	00000000 __flash_rodata_start
00090cd4 g       *ABS*	00000000 __DTOR_LIST__
0008ccdc g     F .text	00000088 .hidden __nedf2
0008f2e0 g     F .text	00000038 alt_irq_init
0008eec0 g     F .text	00000064 alt_release_fd
00090fb4 g     O .rodata	00000100 .hidden __clz_tab
00094af8 g     O .bss	00000004 _PathLocale
00090940 g     F .text	00000014 atexit
0008a704 g     F .text	00000060 _write_r
000869e0 g     F .text	00000018 setlocale
00092dac g     O .rwdata	00000004 _impure_ptr
00094b24 g     O .bss	00000004 alt_argc
0008580c g     F .text	0000021c __sflush_r
0009018c g     F .text	00000060 _do_dtors
000869cc g     F .text	00000008 __locale_cjk_lang
00080020 g       .exceptions	00000000 alt_irq_entry
000883a0 g     F .text	00000064 __ulp
00085e3c g     F .text	00000018 __fp_unlock_all
00092dc0 g     O .rwdata	00000008 alt_fs_list
00094b18 g     O .bss	00000008 alt_resettime
00080020 g       *ABS*	00000000 __ram_exceptions_start
000869f8 g     F .text	0000000c localeconv
0008104c g     F .text	00000240 refresh_position
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00080334 g     F .text	0000008c init_foodLayer
0008e5c8 g     F .text	00000050 alt_ic_isr_register
00092de8 g       *ABS*	00000000 _edata
00094d54 g       *ABS*	00000000 _end
00080630 g     F .text	000000f4 init_game
0008a980 g     F .text	00000164 __fputwc
00080244 g       *ABS*	00000000 __ram_exceptions_end
0008f8b4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0008e6a0 g     F .text	0000008c alt_ic_irq_disable
00088f00 g     F .text	0000007c __swrite
00092db8 g     O .rwdata	00000004 __malloc_trim_threshold
000869c0 g     F .text	0000000c __locale_msgcharset
00090954 g     F .text	00000038 exit
00086808 g     F .text	000000c4 _fwalk_reent
000881a4 g     F .text	000001fc __mdiff
0008178c g     F .text	00000074 .hidden __modsi3
000e1a80 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00085e18 g     F .text	00000004 __sfp_lock_release
000803c0 g     F .text	000000a4 set_foodLayer_in_memory
00080cc4 g     F .text	00000044 init_collision
00090ca0 g     F .text	00000034 _exit
0008fed8 g     F .text	0000012c alt_alarm_start
0008b038 g     F .text	00000060 .hidden __muldi3
00086a04 g     F .text	000001bc __smakebuf_r
00081a78 g     F .text	00000098 strlen
000904fc g     F .text	00000154 open
0008cd64 g     F .text	000000dc .hidden __gedf2
00092dbc g     O .rwdata	00000004 __wctomb
000891b8 g     F .text	00000018 __sprint_r
000901ec g     F .text	00000034 alt_icache_flush_all
00092dd8 g     O .rwdata	00000004 alt_priority_mask
0008e618 g     F .text	00000088 alt_ic_irq_enable
00083d58 g     F .text	0000001c __vfprintf_internal
0008afdc g     F .text	0000005c _wctomb_r
0008d64c g     F .text	000008fc .hidden __subdf3
00087bd8 g     F .text	000000b0 __lo0bits
00092de0 g     O .rwdata	00000008 alt_alarm_list
0009012c g     F .text	00000060 _do_ctors
0008aeec g     F .text	000000c0 wcrtomb
0008e1ec g     F .text	000000d0 close
0008128c g     F .text	000001b0 refresh_position_keepGoing
0008eb30 g     F .text	00000084 alt_load
0008ab08 g     F .text	00000080 fputwc
00085e1c g     F .text	00000004 __sinit_lock_acquire
0008794c g     F .text	00000120 __multadd
00087924 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__alt_data_end+0xfff9e584>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08409114 	ori	at,at,580
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__reset-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800274 	movhi	r2,9
   80140:	10931504 	addi	r2,r2,19540
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800274 	movhi	r2,9
   80158:	10931504 	addi	r2,r2,19540
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <__alt_data_end+0xfff9e6ac>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <__alt_data_end+0xfff9e6a0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	0001883a 	nop
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   801e4:	000531fa 	rdctl	r2,exception
   801e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   801ec:	e0bffd17 	ldw	r2,-12(fp)
   801f0:	10801f0c 	andi	r2,r2,124
   801f4:	1004d0ba 	srli	r2,r2,2
   801f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   801fc:	0005333a 	rdctl	r2,badaddr
   80200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   80204:	d0a76417 	ldw	r2,-25200(gp)
   80208:	10000726 	beq	r2,zero,80228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   8020c:	d0a76417 	ldw	r2,-25200(gp)
   80210:	e0fffd17 	ldw	r3,-12(fp)
   80214:	e1bffe17 	ldw	r6,-8(fp)
   80218:	e17fff17 	ldw	r5,-4(fp)
   8021c:	1809883a 	mov	r4,r3
   80220:	103ee83a 	callr	r2
   80224:	00000206 	br	80230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   8022c:	0005883a 	mov	r2,zero
}
   80230:	e037883a 	mov	sp,fp
   80234:	dfc00117 	ldw	ra,4(sp)
   80238:	df000017 	ldw	fp,0(sp)
   8023c:	dec00204 	addi	sp,sp,8
   80240:	f800283a 	ret

Disassembly of section .text:

00080244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   80244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   80248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   8024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   80250:	00bffd16 	blt	zero,r2,80248 <__alt_data_end+0xfff9e7c8>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80254:	06c003b4 	movhi	sp,14
    ori sp, sp, %lo(__alt_stack_pointer)
   80258:	dec6a014 	ori	sp,sp,6784
    movhi gp, %hi(_gp)
   8025c:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   80260:	d6ab6a14 	ori	gp,gp,44456
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80264:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   80268:	1092bc14 	ori	r2,r2,19184

    movhi r3, %hi(__bss_end)
   8026c:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   80270:	18d35514 	ori	r3,r3,19796

    beq r2, r3, 1f
   80274:	10c00326 	beq	r2,r3,80284 <_start+0x40>

0:
    stw zero, (r2)
   80278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   8027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80280:	10fffd36 	bltu	r2,r3,80278 <__alt_data_end+0xfff9e7f8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80284:	008eb300 	call	8eb30 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80288:	008ecc40 	call	8ecc4 <alt_main>

0008028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   8028c:	003fff06 	br	8028c <__alt_data_end+0xfff9e80c>

00080290 <set_background_in_memory>:


#include "background.h"

void set_background_in_memory(alt_u32 background[15])
{
   80290:	defffd04 	addi	sp,sp,-12
   80294:	df000215 	stw	fp,8(sp)
   80298:	df000204 	addi	fp,sp,8
   8029c:	e13fff15 	stw	r4,-4(fp)
	for(int i=0; i<16; i++){
   802a0:	e03ffe15 	stw	zero,-8(fp)
   802a4:	00001b06 	br	80314 <set_background_in_memory+0x84>
		IOWR_32DIRECT(BACKGROUND_DATA_BASE, 0, background[i]);
   802a8:	e0bffe17 	ldw	r2,-8(fp)
   802ac:	1085883a 	add	r2,r2,r2
   802b0:	1085883a 	add	r2,r2,r2
   802b4:	1007883a 	mov	r3,r2
   802b8:	e0bfff17 	ldw	r2,-4(fp)
   802bc:	10c5883a 	add	r2,r2,r3
   802c0:	10800017 	ldw	r2,0(r2)
   802c4:	1007883a 	mov	r3,r2
   802c8:	00800434 	movhi	r2,16
   802cc:	10842804 	addi	r2,r2,4256
   802d0:	10c00035 	stwio	r3,0(r2)
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b00000 + i);
   802d4:	00800434 	movhi	r2,16
   802d8:	10842404 	addi	r2,r2,4240
   802dc:	e0fffe03 	ldbu	r3,-8(fp)
   802e0:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b10000 + i);
   802e4:	e0bffe17 	ldw	r2,-8(fp)
   802e8:	10c00404 	addi	r3,r2,16
   802ec:	00800434 	movhi	r2,16
   802f0:	10842404 	addi	r2,r2,4240
   802f4:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b00000 + i);
   802f8:	00800434 	movhi	r2,16
   802fc:	10842404 	addi	r2,r2,4240
   80300:	e0fffe03 	ldbu	r3,-8(fp)
   80304:	10c00025 	stbio	r3,0(r2)

#include "background.h"

void set_background_in_memory(alt_u32 background[15])
{
	for(int i=0; i<16; i++){
   80308:	e0bffe17 	ldw	r2,-8(fp)
   8030c:	10800044 	addi	r2,r2,1
   80310:	e0bffe15 	stw	r2,-8(fp)
   80314:	e0bffe17 	ldw	r2,-8(fp)
   80318:	10800410 	cmplti	r2,r2,16
   8031c:	103fe21e 	bne	r2,zero,802a8 <__alt_data_end+0xfff9e828>
		IOWR_32DIRECT(BACKGROUND_DATA_BASE, 0, background[i]);
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b00000 + i);
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b10000 + i);
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b00000 + i);
	}
}
   80320:	0001883a 	nop
   80324:	e037883a 	mov	sp,fp
   80328:	df000017 	ldw	fp,0(sp)
   8032c:	dec00104 	addi	sp,sp,4
   80330:	f800283a 	ret

00080334 <init_foodLayer>:

void init_foodLayer(alt_u32 background[15], alt_u32 foodLayer[15], alt_u8 sizeY)
{
   80334:	defffb04 	addi	sp,sp,-20
   80338:	df000415 	stw	fp,16(sp)
   8033c:	df000404 	addi	fp,sp,16
   80340:	e13ffd15 	stw	r4,-12(fp)
   80344:	e17ffe15 	stw	r5,-8(fp)
   80348:	3005883a 	mov	r2,r6
   8034c:	e0bfff05 	stb	r2,-4(fp)
	for(int i=0; i<sizeY; i++){
   80350:	e03ffc15 	stw	zero,-16(fp)
   80354:	00001206 	br	803a0 <init_foodLayer+0x6c>
		foodLayer[i] = ~background[i];
   80358:	e0bffc17 	ldw	r2,-16(fp)
   8035c:	1085883a 	add	r2,r2,r2
   80360:	1085883a 	add	r2,r2,r2
   80364:	1007883a 	mov	r3,r2
   80368:	e0bffe17 	ldw	r2,-8(fp)
   8036c:	10c7883a 	add	r3,r2,r3
   80370:	e0bffc17 	ldw	r2,-16(fp)
   80374:	1085883a 	add	r2,r2,r2
   80378:	1085883a 	add	r2,r2,r2
   8037c:	1009883a 	mov	r4,r2
   80380:	e0bffd17 	ldw	r2,-12(fp)
   80384:	1105883a 	add	r2,r2,r4
   80388:	10800017 	ldw	r2,0(r2)
   8038c:	0084303a 	nor	r2,zero,r2
   80390:	18800015 	stw	r2,0(r3)
	}
}

void init_foodLayer(alt_u32 background[15], alt_u32 foodLayer[15], alt_u8 sizeY)
{
	for(int i=0; i<sizeY; i++){
   80394:	e0bffc17 	ldw	r2,-16(fp)
   80398:	10800044 	addi	r2,r2,1
   8039c:	e0bffc15 	stw	r2,-16(fp)
   803a0:	e0bfff03 	ldbu	r2,-4(fp)
   803a4:	e0fffc17 	ldw	r3,-16(fp)
   803a8:	18bfeb16 	blt	r3,r2,80358 <__alt_data_end+0xfff9e8d8>
		foodLayer[i] = ~background[i];
	}
}
   803ac:	0001883a 	nop
   803b0:	e037883a 	mov	sp,fp
   803b4:	df000017 	ldw	fp,0(sp)
   803b8:	dec00104 	addi	sp,sp,4
   803bc:	f800283a 	ret

000803c0 <set_foodLayer_in_memory>:


void set_foodLayer_in_memory(alt_u32 foodLayer[15])
{
   803c0:	defffd04 	addi	sp,sp,-12
   803c4:	df000215 	stw	fp,8(sp)
   803c8:	df000204 	addi	fp,sp,8
   803cc:	e13fff15 	stw	r4,-4(fp)
	for(int i=0; i<16; i++){
   803d0:	e03ffe15 	stw	zero,-8(fp)
   803d4:	00001b06 	br	80444 <set_foodLayer_in_memory+0x84>
		IOWR_32DIRECT(FOOD_LAYER_DATA_BASE, 0, foodLayer[i]);
   803d8:	e0bffe17 	ldw	r2,-8(fp)
   803dc:	1085883a 	add	r2,r2,r2
   803e0:	1085883a 	add	r2,r2,r2
   803e4:	1007883a 	mov	r3,r2
   803e8:	e0bfff17 	ldw	r2,-4(fp)
   803ec:	10c5883a 	add	r2,r2,r3
   803f0:	10800017 	ldw	r2,0(r2)
   803f4:	1007883a 	mov	r3,r2
   803f8:	00800434 	movhi	r2,16
   803fc:	10841004 	addi	r2,r2,4160
   80400:	10c00035 	stwio	r3,0(r2)
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b00000 + i);
   80404:	00800434 	movhi	r2,16
   80408:	10840c04 	addi	r2,r2,4144
   8040c:	e0fffe03 	ldbu	r3,-8(fp)
   80410:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b10000 + i);
   80414:	e0bffe17 	ldw	r2,-8(fp)
   80418:	10c00404 	addi	r3,r2,16
   8041c:	00800434 	movhi	r2,16
   80420:	10840c04 	addi	r2,r2,4144
   80424:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b00000 + i);
   80428:	00800434 	movhi	r2,16
   8042c:	10840c04 	addi	r2,r2,4144
   80430:	e0fffe03 	ldbu	r3,-8(fp)
   80434:	10c00025 	stbio	r3,0(r2)
}


void set_foodLayer_in_memory(alt_u32 foodLayer[15])
{
	for(int i=0; i<16; i++){
   80438:	e0bffe17 	ldw	r2,-8(fp)
   8043c:	10800044 	addi	r2,r2,1
   80440:	e0bffe15 	stw	r2,-8(fp)
   80444:	e0bffe17 	ldw	r2,-8(fp)
   80448:	10800410 	cmplti	r2,r2,16
   8044c:	103fe21e 	bne	r2,zero,803d8 <__alt_data_end+0xfff9e958>
		IOWR_32DIRECT(FOOD_LAYER_DATA_BASE, 0, foodLayer[i]);
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b00000 + i);
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b10000 + i);
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b00000 + i);
	}
}
   80450:	0001883a 	nop
   80454:	e037883a 	mov	sp,fp
   80458:	df000017 	ldw	fp,0(sp)
   8045c:	dec00104 	addi	sp,sp,4
   80460:	f800283a 	ret

00080464 <refresh_food_layer>:

void refresh_food_layer(position* charPosition, alt_u32 foodLayer[15], alt_u16* score)
{
   80464:	defff804 	addi	sp,sp,-32
   80468:	dfc00715 	stw	ra,28(sp)
   8046c:	df000615 	stw	fp,24(sp)
   80470:	df000604 	addi	fp,sp,24
   80474:	e13ffd15 	stw	r4,-12(fp)
   80478:	e17ffe15 	stw	r5,-8(fp)
   8047c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 middlePosX = (charPosition->positionX + 30);
   80480:	e0bffd17 	ldw	r2,-12(fp)
   80484:	10800117 	ldw	r2,4(r2)
   80488:	10800784 	addi	r2,r2,30
   8048c:	e0bffa15 	stw	r2,-24(fp)
	alt_u32 middlePosY = (charPosition->positionY + 30);
   80490:	e0bffd17 	ldw	r2,-12(fp)
   80494:	10800217 	ldw	r2,8(r2)
   80498:	10800784 	addi	r2,r2,30
   8049c:	e0bffb15 	stw	r2,-20(fp)

	alt_u16 blockX = middlePosX / 60;
   804a0:	e0bffa17 	ldw	r2,-24(fp)
   804a4:	01400f04 	movi	r5,60
   804a8:	1009883a 	mov	r4,r2
   804ac:	00818000 	call	81800 <__udivsi3>
   804b0:	e0bffc0d 	sth	r2,-16(fp)
	alt_u16 blockY = middlePosY / 60;
   804b4:	e0bffb17 	ldw	r2,-20(fp)
   804b8:	01400f04 	movi	r5,60
   804bc:	1009883a 	mov	r4,r2
   804c0:	00818000 	call	81800 <__udivsi3>
   804c4:	e0bffc8d 	sth	r2,-14(fp)

	if (get_block_with_coordinates(middlePosX, middlePosY, foodLayer) == 1){
   804c8:	e1bffe17 	ldw	r6,-8(fp)
   804cc:	e17ffb17 	ldw	r5,-20(fp)
   804d0:	e13ffa17 	ldw	r4,-24(fp)
   804d4:	00807240 	call	80724 <get_block_with_coordinates>
   804d8:	10803fcc 	andi	r2,r2,255
   804dc:	10800058 	cmpnei	r2,r2,1
   804e0:	1000321e 	bne	r2,zero,805ac <refresh_food_layer+0x148>
		foodLayer[blockY] &= (~(1<<(8+blockX)));
   804e4:	e0bffc8b 	ldhu	r2,-14(fp)
   804e8:	1085883a 	add	r2,r2,r2
   804ec:	1085883a 	add	r2,r2,r2
   804f0:	1007883a 	mov	r3,r2
   804f4:	e0bffe17 	ldw	r2,-8(fp)
   804f8:	10c7883a 	add	r3,r2,r3
   804fc:	e0bffc8b 	ldhu	r2,-14(fp)
   80500:	1085883a 	add	r2,r2,r2
   80504:	1085883a 	add	r2,r2,r2
   80508:	1009883a 	mov	r4,r2
   8050c:	e0bffe17 	ldw	r2,-8(fp)
   80510:	1105883a 	add	r2,r2,r4
   80514:	10800017 	ldw	r2,0(r2)
   80518:	e13ffc0b 	ldhu	r4,-16(fp)
   8051c:	21000204 	addi	r4,r4,8
   80520:	01400044 	movi	r5,1
   80524:	2908983a 	sll	r4,r5,r4
   80528:	0108303a 	nor	r4,zero,r4
   8052c:	1104703a 	and	r2,r2,r4
   80530:	18800015 	stw	r2,0(r3)
		IOWR_32DIRECT(FOOD_LAYER_DATA_BASE, 0, foodLayer[blockY]);
   80534:	e0bffc8b 	ldhu	r2,-14(fp)
   80538:	1085883a 	add	r2,r2,r2
   8053c:	1085883a 	add	r2,r2,r2
   80540:	1007883a 	mov	r3,r2
   80544:	e0bffe17 	ldw	r2,-8(fp)
   80548:	10c5883a 	add	r2,r2,r3
   8054c:	10800017 	ldw	r2,0(r2)
   80550:	1007883a 	mov	r3,r2
   80554:	00800434 	movhi	r2,16
   80558:	10841004 	addi	r2,r2,4160
   8055c:	10c00035 	stwio	r3,0(r2)
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b00000 + blockY);
   80560:	e0fffc8b 	ldhu	r3,-14(fp)
   80564:	00800434 	movhi	r2,16
   80568:	10840c04 	addi	r2,r2,4144
   8056c:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b10000 + blockY);
   80570:	e0bffc8b 	ldhu	r2,-14(fp)
   80574:	10c00404 	addi	r3,r2,16
   80578:	00800434 	movhi	r2,16
   8057c:	10840c04 	addi	r2,r2,4144
   80580:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b00000 + blockY);
   80584:	e0fffc8b 	ldhu	r3,-14(fp)
   80588:	00800434 	movhi	r2,16
   8058c:	10840c04 	addi	r2,r2,4144
   80590:	10c00025 	stbio	r3,0(r2)
		*score = *score+1;
   80594:	e0bfff17 	ldw	r2,-4(fp)
   80598:	1080000b 	ldhu	r2,0(r2)
   8059c:	10800044 	addi	r2,r2,1
   805a0:	1007883a 	mov	r3,r2
   805a4:	e0bfff17 	ldw	r2,-4(fp)
   805a8:	10c0000d 	sth	r3,0(r2)
	}
}
   805ac:	0001883a 	nop
   805b0:	e037883a 	mov	sp,fp
   805b4:	dfc00117 	ldw	ra,4(sp)
   805b8:	df000017 	ldw	fp,0(sp)
   805bc:	dec00204 	addi	sp,sp,8
   805c0:	f800283a 	ret

000805c4 <food_layer_empty>:

alt_u8 food_layer_empty(alt_u32 foodLayer[15]) 
{
   805c4:	defffd04 	addi	sp,sp,-12
   805c8:	df000215 	stw	fp,8(sp)
   805cc:	df000204 	addi	fp,sp,8
   805d0:	e13fff15 	stw	r4,-4(fp)
	for(alt_u8 idx = 0; idx < 15; idx++){
   805d4:	e03ffe05 	stb	zero,-8(fp)
   805d8:	00000d06 	br	80610 <food_layer_empty+0x4c>
		if(foodLayer[idx] != 0){
   805dc:	e0bffe03 	ldbu	r2,-8(fp)
   805e0:	1085883a 	add	r2,r2,r2
   805e4:	1085883a 	add	r2,r2,r2
   805e8:	1007883a 	mov	r3,r2
   805ec:	e0bfff17 	ldw	r2,-4(fp)
   805f0:	10c5883a 	add	r2,r2,r3
   805f4:	10800017 	ldw	r2,0(r2)
   805f8:	10000226 	beq	r2,zero,80604 <food_layer_empty+0x40>
			return 0;
   805fc:	0005883a 	mov	r2,zero
   80600:	00000706 	br	80620 <food_layer_empty+0x5c>
	}
}

alt_u8 food_layer_empty(alt_u32 foodLayer[15]) 
{
	for(alt_u8 idx = 0; idx < 15; idx++){
   80604:	e0bffe03 	ldbu	r2,-8(fp)
   80608:	10800044 	addi	r2,r2,1
   8060c:	e0bffe05 	stb	r2,-8(fp)
   80610:	e0bffe03 	ldbu	r2,-8(fp)
   80614:	108003f0 	cmpltui	r2,r2,15
   80618:	103ff01e 	bne	r2,zero,805dc <__alt_data_end+0xfff9eb5c>
		if(foodLayer[idx] != 0){
			return 0;
		}
	}
	return 1;
   8061c:	00800044 	movi	r2,1
}
   80620:	e037883a 	mov	sp,fp
   80624:	df000017 	ldw	fp,0(sp)
   80628:	dec00104 	addi	sp,sp,4
   8062c:	f800283a 	ret

00080630 <init_game>:
	alt_u32 charBackground[15],
	alt_u32 ghostBackground[15],
	alt_u32 foodLayer[15],
	alt_u16 *score
	)
{
   80630:	defff704 	addi	sp,sp,-36
   80634:	dfc00815 	stw	ra,32(sp)
   80638:	df000715 	stw	fp,28(sp)
   8063c:	df000704 	addi	fp,sp,28
   80640:	e13ffc15 	stw	r4,-16(fp)
   80644:	e17ffd15 	stw	r5,-12(fp)
   80648:	e1bffe15 	stw	r6,-8(fp)
   8064c:	e1ffff15 	stw	r7,-4(fp)
	*score = 0;
   80650:	e0800617 	ldw	r2,24(fp)
   80654:	1000000d 	sth	zero,0(r2)

	init_position(charPosition, 0, positionX, positionY, ACTIVE, orientation, charBackground);
   80658:	e0800317 	ldw	r2,12(fp)
   8065c:	d8800215 	stw	r2,8(sp)
   80660:	e0800217 	ldw	r2,8(fp)
   80664:	d8800115 	stw	r2,4(sp)
   80668:	00800044 	movi	r2,1
   8066c:	d8800015 	stw	r2,0(sp)
   80670:	e1ffff17 	ldw	r7,-4(fp)
   80674:	e1bffe17 	ldw	r6,-8(fp)
   80678:	000b883a 	mov	r5,zero
   8067c:	e13ffc17 	ldw	r4,-16(fp)
   80680:	0080d080 	call	80d08 <init_position>
	init_position(&(ghostPosition[0]), 0, 60, 60, ACTIVE, NORTH, ghostBackground);
   80684:	e0800417 	ldw	r2,16(fp)
   80688:	d8800215 	stw	r2,8(sp)
   8068c:	00800044 	movi	r2,1
   80690:	d8800115 	stw	r2,4(sp)
   80694:	00800044 	movi	r2,1
   80698:	d8800015 	stw	r2,0(sp)
   8069c:	01c00f04 	movi	r7,60
   806a0:	01800f04 	movi	r6,60
   806a4:	000b883a 	mov	r5,zero
   806a8:	e13ffd17 	ldw	r4,-12(fp)
   806ac:	0080d080 	call	80d08 <init_position>
	init_position(&(ghostPosition[1]), 0, 60, 60, ACTIVE, SOUTH, ghostBackground);
   806b0:	e0bffd17 	ldw	r2,-12(fp)
   806b4:	10c00904 	addi	r3,r2,36
   806b8:	e0800417 	ldw	r2,16(fp)
   806bc:	d8800215 	stw	r2,8(sp)
   806c0:	008000c4 	movi	r2,3
   806c4:	d8800115 	stw	r2,4(sp)
   806c8:	00800044 	movi	r2,1
   806cc:	d8800015 	stw	r2,0(sp)
   806d0:	01c00f04 	movi	r7,60
   806d4:	01800f04 	movi	r6,60
   806d8:	000b883a 	mov	r5,zero
   806dc:	1809883a 	mov	r4,r3
   806e0:	0080d080 	call	80d08 <init_position>

	set_background_in_memory(ghostBackground);
   806e4:	e1000417 	ldw	r4,16(fp)
   806e8:	00802900 	call	80290 <set_background_in_memory>
	init_foodLayer(charBackground, foodLayer, 15);
   806ec:	018003c4 	movi	r6,15
   806f0:	e1400517 	ldw	r5,20(fp)
   806f4:	e1000317 	ldw	r4,12(fp)
   806f8:	00803340 	call	80334 <init_foodLayer>
	set_foodLayer_in_memory(foodLayer);
   806fc:	e1000517 	ldw	r4,20(fp)
   80700:	00803c00 	call	803c0 <set_foodLayer_in_memory>
	compute_collision(charPosition);
   80704:	e13ffc17 	ldw	r4,-16(fp)
   80708:	0080de00 	call	80de0 <compute_collision>
}
   8070c:	0001883a 	nop
   80710:	e037883a 	mov	sp,fp
   80714:	dfc00117 	ldw	ra,4(sp)
   80718:	df000017 	ldw	fp,0(sp)
   8071c:	dec00204 	addi	sp,sp,8
   80720:	f800283a 	ret

00080724 <get_block_with_coordinates>:
 */

#include "general.h"


alt_u8 get_block_with_coordinates(alt_u32 positionX, alt_u32 positionY, alt_u32 layer[]){
   80724:	defffa04 	addi	sp,sp,-24
   80728:	dfc00515 	stw	ra,20(sp)
   8072c:	df000415 	stw	fp,16(sp)
   80730:	df000404 	addi	fp,sp,16
   80734:	e13ffd15 	stw	r4,-12(fp)
   80738:	e17ffe15 	stw	r5,-8(fp)
   8073c:	e1bfff15 	stw	r6,-4(fp)
	alt_u16 blockX = positionX / 60;
   80740:	e0bffd17 	ldw	r2,-12(fp)
   80744:	01400f04 	movi	r5,60
   80748:	1009883a 	mov	r4,r2
   8074c:	00818000 	call	81800 <__udivsi3>
   80750:	e0bffc0d 	sth	r2,-16(fp)
	alt_u16 blockY = positionY / 60;
   80754:	e0bffe17 	ldw	r2,-8(fp)
   80758:	01400f04 	movi	r5,60
   8075c:	1009883a 	mov	r4,r2
   80760:	00818000 	call	81800 <__udivsi3>
   80764:	e0bffc8d 	sth	r2,-14(fp)
	return ((layer[blockY] & 1<<(8+blockX))>>(8+blockX));
   80768:	e0bffc8b 	ldhu	r2,-14(fp)
   8076c:	1085883a 	add	r2,r2,r2
   80770:	1085883a 	add	r2,r2,r2
   80774:	1007883a 	mov	r3,r2
   80778:	e0bfff17 	ldw	r2,-4(fp)
   8077c:	10c5883a 	add	r2,r2,r3
   80780:	10800017 	ldw	r2,0(r2)
   80784:	e0fffc0b 	ldhu	r3,-16(fp)
   80788:	18c00204 	addi	r3,r3,8
   8078c:	01000044 	movi	r4,1
   80790:	20c6983a 	sll	r3,r4,r3
   80794:	10c6703a 	and	r3,r2,r3
   80798:	e0bffc0b 	ldhu	r2,-16(fp)
   8079c:	10800204 	addi	r2,r2,8
   807a0:	1884d83a 	srl	r2,r3,r2
}
   807a4:	e037883a 	mov	sp,fp
   807a8:	dfc00117 	ldw	ra,4(sp)
   807ac:	df000017 	ldw	fp,0(sp)
   807b0:	dec00204 	addi	sp,sp,8
   807b4:	f800283a 	ret

000807b8 <refresh_position_interrupt_handler>:

static void refresh_position_interrupt_handler(void* context)
/* interrupt handler : this function is called each time a new frame is build (60Hz)
 * it calls *refresh_position()* function and ensures the char doesn't go out of the frame.
*/
{
   807b8:	defffc04 	addi	sp,sp,-16
   807bc:	dfc00315 	stw	ra,12(sp)
   807c0:	df000215 	stw	fp,8(sp)
   807c4:	df000204 	addi	fp,sp,8
   807c8:	e13fff15 	stw	r4,-4(fp)
	position* p_pacmanPosition = (position*) context;
   807cc:	e0bfff17 	ldw	r2,-4(fp)
   807d0:	e0bffe15 	stw	r2,-8(fp)
	refresh_position(p_pacmanPosition, 0);
   807d4:	000b883a 	mov	r5,zero
   807d8:	e13ffe17 	ldw	r4,-8(fp)
   807dc:	008104c0 	call	8104c <refresh_position>
	refresh_food_layer(p_pacmanPosition, foodLayer, &score);
   807e0:	d1a75204 	addi	r6,gp,-25272
   807e4:	01400274 	movhi	r5,9
   807e8:	2952ed04 	addi	r5,r5,19380
   807ec:	e13ffe17 	ldw	r4,-8(fp)
   807f0:	00804640 	call	80464 <refresh_food_layer>
	IOWR_32DIRECT(POSITION_BASE, 0, p_pacmanPosition->bytePacket);
   807f4:	e0bffe17 	ldw	r2,-8(fp)
   807f8:	10800517 	ldw	r2,20(r2)
   807fc:	1007883a 	mov	r3,r2
   80800:	00800434 	movhi	r2,16
   80804:	10843004 	addi	r2,r2,4288
   80808:	10c00035 	stwio	r3,0(r2)
	IOWR(REFRESH_BASE,3,0xf);
   8080c:	00c003c4 	movi	r3,15
   80810:	00800434 	movhi	r2,16
   80814:	10842f04 	addi	r2,r2,4284
   80818:	10c00035 	stwio	r3,0(r2)
}
   8081c:	0001883a 	nop
   80820:	e037883a 	mov	sp,fp
   80824:	dfc00117 	ldw	ra,4(sp)
   80828:	df000017 	ldw	fp,0(sp)
   8082c:	dec00204 	addi	sp,sp,8
   80830:	f800283a 	ret

00080834 <left_button_interrupt_handler>:

static void left_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the left button direction is pressed */
{
   80834:	defffd04 	addi	sp,sp,-12
   80838:	df000215 	stw	fp,8(sp)
   8083c:	df000204 	addi	fp,sp,8
   80840:	e13fff15 	stw	r4,-4(fp)
	position* p_pacmanPosition = (position*) context;
   80844:	e0bfff17 	ldw	r2,-4(fp)
   80848:	e0bffe15 	stw	r2,-8(fp)
	p_pacmanPosition->directionControl = LEFT;
   8084c:	e0bffe17 	ldw	r2,-8(fp)
   80850:	00c00104 	movi	r3,4
   80854:	10c00715 	stw	r3,28(r2)
	IOWR(LEFT_BUTTON_BASE,3,0xf);
   80858:	00c003c4 	movi	r3,15
   8085c:	00800434 	movhi	r2,16
   80860:	10842304 	addi	r2,r2,4236
   80864:	10c00035 	stwio	r3,0(r2)
}
   80868:	0001883a 	nop
   8086c:	e037883a 	mov	sp,fp
   80870:	df000017 	ldw	fp,0(sp)
   80874:	dec00104 	addi	sp,sp,4
   80878:	f800283a 	ret

0008087c <up_button_interrupt_handler>:

static void up_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the up button direction is pressed */
{
   8087c:	defffd04 	addi	sp,sp,-12
   80880:	df000215 	stw	fp,8(sp)
   80884:	df000204 	addi	fp,sp,8
   80888:	e13fff15 	stw	r4,-4(fp)
	position* p_pacmanPosition = (position*) context;
   8088c:	e0bfff17 	ldw	r2,-4(fp)
   80890:	e0bffe15 	stw	r2,-8(fp)
	p_pacmanPosition->directionControl = DOWN;
   80894:	e0bffe17 	ldw	r2,-8(fp)
   80898:	00c000c4 	movi	r3,3
   8089c:	10c00715 	stw	r3,28(r2)
	IOWR(UP_BUTTON_BASE,3,0xf);
   808a0:	00c003c4 	movi	r3,15
   808a4:	00800434 	movhi	r2,16
   808a8:	10841f04 	addi	r2,r2,4220
   808ac:	10c00035 	stwio	r3,0(r2)
}
   808b0:	0001883a 	nop
   808b4:	e037883a 	mov	sp,fp
   808b8:	df000017 	ldw	fp,0(sp)
   808bc:	dec00104 	addi	sp,sp,4
   808c0:	f800283a 	ret

000808c4 <down_button_interrupt_handler>:

static void down_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the down button direction is pressed */
{
   808c4:	defffd04 	addi	sp,sp,-12
   808c8:	df000215 	stw	fp,8(sp)
   808cc:	df000204 	addi	fp,sp,8
   808d0:	e13fff15 	stw	r4,-4(fp)
	position* p_pacmanPosition = (position*) context;
   808d4:	e0bfff17 	ldw	r2,-4(fp)
   808d8:	e0bffe15 	stw	r2,-8(fp)
	p_pacmanPosition->directionControl = UP;
   808dc:	e0bffe17 	ldw	r2,-8(fp)
   808e0:	00c00044 	movi	r3,1
   808e4:	10c00715 	stw	r3,28(r2)
	IOWR(DOWN_BUTTON_BASE,3,0xf);
   808e8:	00c003c4 	movi	r3,15
   808ec:	00800434 	movhi	r2,16
   808f0:	10841b04 	addi	r2,r2,4204
   808f4:	10c00035 	stwio	r3,0(r2)
}
   808f8:	0001883a 	nop
   808fc:	e037883a 	mov	sp,fp
   80900:	df000017 	ldw	fp,0(sp)
   80904:	dec00104 	addi	sp,sp,4
   80908:	f800283a 	ret

0008090c <right_button_interrupt_handler>:

static void right_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the right button direction is pressed */
{
   8090c:	defffd04 	addi	sp,sp,-12
   80910:	df000215 	stw	fp,8(sp)
   80914:	df000204 	addi	fp,sp,8
   80918:	e13fff15 	stw	r4,-4(fp)
	position* p_pacmanPosition = (position*) context;
   8091c:	e0bfff17 	ldw	r2,-4(fp)
   80920:	e0bffe15 	stw	r2,-8(fp)
	p_pacmanPosition->directionControl = RIGHT;
   80924:	e0bffe17 	ldw	r2,-8(fp)
   80928:	00c00084 	movi	r3,2
   8092c:	10c00715 	stw	r3,28(r2)
	IOWR(RIGHT_BUTTON_BASE,3,0xf);
   80930:	00c003c4 	movi	r3,15
   80934:	00800434 	movhi	r2,16
   80938:	10841704 	addi	r2,r2,4188
   8093c:	10c00035 	stwio	r3,0(r2)
}
   80940:	0001883a 	nop
   80944:	e037883a 	mov	sp,fp
   80948:	df000017 	ldw	fp,0(sp)
   8094c:	dec00104 	addi	sp,sp,4
   80950:	f800283a 	ret

00080954 <main>:

int main()
{
   80954:	deffdd04 	addi	sp,sp,-140
   80958:	dfc02215 	stw	ra,136(sp)
   8095c:	df002115 	stw	fp,132(sp)
   80960:	df002104 	addi	fp,sp,132

	position pacmanPosition;
	position ghostPosition[2];
	init_game(&pacmanPosition, ghostPosition, 60, 60, SOUTH, charBackground, ghostBackground, foodLayer, &score);
   80964:	e13fee04 	addi	r4,fp,-72
   80968:	e0ffe504 	addi	r3,fp,-108
   8096c:	d0a75204 	addi	r2,gp,-25272
   80970:	d8800415 	stw	r2,16(sp)
   80974:	00800274 	movhi	r2,9
   80978:	1092ed04 	addi	r2,r2,19380
   8097c:	d8800315 	stw	r2,12(sp)
   80980:	00800274 	movhi	r2,9
   80984:	10848804 	addi	r2,r2,4640
   80988:	d8800215 	stw	r2,8(sp)
   8098c:	00800274 	movhi	r2,9
   80990:	10847904 	addi	r2,r2,4580
   80994:	d8800115 	stw	r2,4(sp)
   80998:	008000c4 	movi	r2,3
   8099c:	d8800015 	stw	r2,0(sp)
   809a0:	01c00f04 	movi	r7,60
   809a4:	01800f04 	movi	r6,60
   809a8:	200b883a 	mov	r5,r4
   809ac:	1809883a 	mov	r4,r3
   809b0:	00806300 	call	80630 <init_game>

	printf("Hello from Nios II!\n");
   809b4:	01000274 	movhi	r4,9
   809b8:	21033504 	addi	r4,r4,3284
   809bc:	00819e80 	call	819e8 <puts>

	//IRQ initialization
	IOWR(REFRESH_BASE,2,0xf); //enable interrupt
   809c0:	00c003c4 	movi	r3,15
   809c4:	00800434 	movhi	r2,16
   809c8:	10842e04 	addi	r2,r2,4280
   809cc:	10c00035 	stwio	r3,0(r2)
	IOWR(REFRESH_BASE,3,0xf); //clear edge register
   809d0:	00c003c4 	movi	r3,15
   809d4:	00800434 	movhi	r2,16
   809d8:	10842f04 	addi	r2,r2,4284
   809dc:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(REFRESH_IRQ,(void*)&pacmanPosition,refresh_position_interrupt_handler);
   809e0:	e0bfe504 	addi	r2,fp,-108
   809e4:	01800234 	movhi	r6,8
   809e8:	3181ee04 	addi	r6,r6,1976
   809ec:	100b883a 	mov	r5,r2
   809f0:	010000c4 	movi	r4,3
   809f4:	008e8680 	call	8e868 <alt_irq_register>
	printf("Refresh IRQ : ");
   809f8:	01000274 	movhi	r4,9
   809fc:	21033a04 	addi	r4,r4,3304
   80a00:	00818ec0 	call	818ec <printf>
	printf("alt_ic_irq_enabled : %lu \n", alt_ic_irq_enabled(REFRESH_IRQ_INTERRUPT_CONTROLLER_ID, REFRESH_IRQ));
   80a04:	014000c4 	movi	r5,3
   80a08:	0009883a 	mov	r4,zero
   80a0c:	008e72c0 	call	8e72c <alt_ic_irq_enabled>
   80a10:	100b883a 	mov	r5,r2
   80a14:	01000274 	movhi	r4,9
   80a18:	21033e04 	addi	r4,r4,3320
   80a1c:	00818ec0 	call	818ec <printf>

	//Left button IRQ initialization
	IOWR(LEFT_BUTTON_BASE,2,0xf); //enable interrupt
   80a20:	00c003c4 	movi	r3,15
   80a24:	00800434 	movhi	r2,16
   80a28:	10842204 	addi	r2,r2,4232
   80a2c:	10c00035 	stwio	r3,0(r2)
	IOWR(LEFT_BUTTON_BASE,3,0xf); //clear edge register
   80a30:	00c003c4 	movi	r3,15
   80a34:	00800434 	movhi	r2,16
   80a38:	10842304 	addi	r2,r2,4236
   80a3c:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(LEFT_BUTTON_IRQ,(void*)&pacmanPosition,left_button_interrupt_handler);
   80a40:	e0bfe504 	addi	r2,fp,-108
   80a44:	01800234 	movhi	r6,8
   80a48:	31820d04 	addi	r6,r6,2100
   80a4c:	100b883a 	mov	r5,r2
   80a50:	01000104 	movi	r4,4
   80a54:	008e8680 	call	8e868 <alt_irq_register>
	printf("Left button IRQ : ");
   80a58:	01000274 	movhi	r4,9
   80a5c:	21034504 	addi	r4,r4,3348
   80a60:	00818ec0 	call	818ec <printf>
	printf("left_button_irq_enabled : %lu \n", alt_ic_irq_enabled(LEFT_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID, LEFT_BUTTON_IRQ));
   80a64:	01400104 	movi	r5,4
   80a68:	0009883a 	mov	r4,zero
   80a6c:	008e72c0 	call	8e72c <alt_ic_irq_enabled>
   80a70:	100b883a 	mov	r5,r2
   80a74:	01000274 	movhi	r4,9
   80a78:	21034a04 	addi	r4,r4,3368
   80a7c:	00818ec0 	call	818ec <printf>

	//Up button IRQ initialization
	IOWR(UP_BUTTON_BASE,2,0xf); //enable interrupt
   80a80:	00c003c4 	movi	r3,15
   80a84:	00800434 	movhi	r2,16
   80a88:	10841e04 	addi	r2,r2,4216
   80a8c:	10c00035 	stwio	r3,0(r2)
	IOWR(UP_BUTTON_BASE,3,0xf); //clear edge register
   80a90:	00c003c4 	movi	r3,15
   80a94:	00800434 	movhi	r2,16
   80a98:	10841f04 	addi	r2,r2,4220
   80a9c:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(UP_BUTTON_IRQ,(void*)&pacmanPosition,up_button_interrupt_handler);
   80aa0:	e0bfe504 	addi	r2,fp,-108
   80aa4:	01800234 	movhi	r6,8
   80aa8:	31821f04 	addi	r6,r6,2172
   80aac:	100b883a 	mov	r5,r2
   80ab0:	01000144 	movi	r4,5
   80ab4:	008e8680 	call	8e868 <alt_irq_register>
	printf("Up button IRQ : ");
   80ab8:	01000274 	movhi	r4,9
   80abc:	21035204 	addi	r4,r4,3400
   80ac0:	00818ec0 	call	818ec <printf>
	printf("up_button_irq_enabled : %lu \n", alt_ic_irq_enabled(UP_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID, UP_BUTTON_IRQ));
   80ac4:	01400144 	movi	r5,5
   80ac8:	0009883a 	mov	r4,zero
   80acc:	008e72c0 	call	8e72c <alt_ic_irq_enabled>
   80ad0:	100b883a 	mov	r5,r2
   80ad4:	01000274 	movhi	r4,9
   80ad8:	21035704 	addi	r4,r4,3420
   80adc:	00818ec0 	call	818ec <printf>

	//Down button IRQ initialization
	IOWR(DOWN_BUTTON_BASE,2,0xf); //enable interrupt
   80ae0:	00c003c4 	movi	r3,15
   80ae4:	00800434 	movhi	r2,16
   80ae8:	10841a04 	addi	r2,r2,4200
   80aec:	10c00035 	stwio	r3,0(r2)
	IOWR(DOWN_BUTTON_BASE,3,0xf); //clear edge register
   80af0:	00c003c4 	movi	r3,15
   80af4:	00800434 	movhi	r2,16
   80af8:	10841b04 	addi	r2,r2,4204
   80afc:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(DOWN_BUTTON_IRQ,(void*)&pacmanPosition,down_button_interrupt_handler);
   80b00:	e0bfe504 	addi	r2,fp,-108
   80b04:	01800234 	movhi	r6,8
   80b08:	31823104 	addi	r6,r6,2244
   80b0c:	100b883a 	mov	r5,r2
   80b10:	01000184 	movi	r4,6
   80b14:	008e8680 	call	8e868 <alt_irq_register>
	printf("Down button IRQ : ");
   80b18:	01000274 	movhi	r4,9
   80b1c:	21035f04 	addi	r4,r4,3452
   80b20:	00818ec0 	call	818ec <printf>
	printf("down_button_irq_enabled : %lu \n", alt_ic_irq_enabled(DOWN_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID, DOWN_BUTTON_IRQ));
   80b24:	01400184 	movi	r5,6
   80b28:	0009883a 	mov	r4,zero
   80b2c:	008e72c0 	call	8e72c <alt_ic_irq_enabled>
   80b30:	100b883a 	mov	r5,r2
   80b34:	01000274 	movhi	r4,9
   80b38:	21036404 	addi	r4,r4,3472
   80b3c:	00818ec0 	call	818ec <printf>

	//Right button IRQ initialization
	IOWR(RIGHT_BUTTON_BASE,2,0xf); //enable interrupt
   80b40:	00c003c4 	movi	r3,15
   80b44:	00800434 	movhi	r2,16
   80b48:	10841604 	addi	r2,r2,4184
   80b4c:	10c00035 	stwio	r3,0(r2)
	IOWR(RIGHT_BUTTON_BASE,3,0xf); //clear edge register
   80b50:	00c003c4 	movi	r3,15
   80b54:	00800434 	movhi	r2,16
   80b58:	10841704 	addi	r2,r2,4188
   80b5c:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(RIGHT_BUTTON_IRQ,(void*)&pacmanPosition,right_button_interrupt_handler);
   80b60:	e0bfe504 	addi	r2,fp,-108
   80b64:	01800234 	movhi	r6,8
   80b68:	31824304 	addi	r6,r6,2316
   80b6c:	100b883a 	mov	r5,r2
   80b70:	010001c4 	movi	r4,7
   80b74:	008e8680 	call	8e868 <alt_irq_register>
	printf("Right button IRQ : ");
   80b78:	01000274 	movhi	r4,9
   80b7c:	21036c04 	addi	r4,r4,3504
   80b80:	00818ec0 	call	818ec <printf>
	printf("right_button_irq_enabled : %lu \n", alt_ic_irq_enabled(RIGHT_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID, RIGHT_BUTTON_IRQ));
   80b84:	014001c4 	movi	r5,7
   80b88:	0009883a 	mov	r4,zero
   80b8c:	008e72c0 	call	8e72c <alt_ic_irq_enabled>
   80b90:	100b883a 	mov	r5,r2
   80b94:	01000274 	movhi	r4,9
   80b98:	21037104 	addi	r4,r4,3524
   80b9c:	00818ec0 	call	818ec <printf>



	long whileCounter = 0;
   80ba0:	e03fe415 	stw	zero,-112(fp)
	while(1)
	{
		display_number(score);
   80ba4:	d0a7520b 	ldhu	r2,-25272(gp)
   80ba8:	10bfffcc 	andi	r2,r2,65535
   80bac:	1009883a 	mov	r4,r2
   80bb0:	00815400 	call	81540 <display_number>
		whileCounter++;
   80bb4:	e0bfe417 	ldw	r2,-112(fp)
   80bb8:	10800044 	addi	r2,r2,1
   80bbc:	e0bfe415 	stw	r2,-112(fp)
		if (whileCounter > 500000){
   80bc0:	e0ffe417 	ldw	r3,-112(fp)
   80bc4:	00800234 	movhi	r2,8
   80bc8:	10a84804 	addi	r2,r2,-24288
   80bcc:	10fff50e 	bge	r2,r3,80ba4 <__alt_data_end+0xfff9f124>
			if(food_layer_empty(foodLayer) == 1){
   80bd0:	01000274 	movhi	r4,9
   80bd4:	2112ed04 	addi	r4,r4,19380
   80bd8:	00805c40 	call	805c4 <food_layer_empty>
   80bdc:	10803fcc 	andi	r2,r2,255
   80be0:	10800058 	cmpnei	r2,r2,1
   80be4:	1000141e 	bne	r2,zero,80c38 <main+0x2e4>
				init_game(&pacmanPosition, ghostPosition, 60, 60, SOUTH, charBackground, ghostBackground, foodLayer, &score);
   80be8:	e13fee04 	addi	r4,fp,-72
   80bec:	e0ffe504 	addi	r3,fp,-108
   80bf0:	d0a75204 	addi	r2,gp,-25272
   80bf4:	d8800415 	stw	r2,16(sp)
   80bf8:	00800274 	movhi	r2,9
   80bfc:	1092ed04 	addi	r2,r2,19380
   80c00:	d8800315 	stw	r2,12(sp)
   80c04:	00800274 	movhi	r2,9
   80c08:	10848804 	addi	r2,r2,4640
   80c0c:	d8800215 	stw	r2,8(sp)
   80c10:	00800274 	movhi	r2,9
   80c14:	10847904 	addi	r2,r2,4580
   80c18:	d8800115 	stw	r2,4(sp)
   80c1c:	008000c4 	movi	r2,3
   80c20:	d8800015 	stw	r2,0(sp)
   80c24:	01c00f04 	movi	r7,60
   80c28:	01800f04 	movi	r6,60
   80c2c:	200b883a 	mov	r5,r4
   80c30:	1809883a 	mov	r4,r3
   80c34:	00806300 	call	80630 <init_game>
//			 	foodLayer[11],
//			 	foodLayer[12],
//			 	foodLayer[13],
//			 	foodLayer[14]
//			 );
			whileCounter = 0;
   80c38:	e03fe415 	stw	zero,-112(fp)
		}
	}
   80c3c:	003fd906 	br	80ba4 <__alt_data_end+0xfff9f124>

00080c40 <compute_byte_packet>:
#define MOVEMENT_STEP 5

void compute_byte_packet(position* charPosition)
//computes the binary data sent to the logic given the other arguments (position, orientation,...)
//contained in the structure position
{
   80c40:	defffe04 	addi	sp,sp,-8
   80c44:	df000115 	stw	fp,4(sp)
   80c48:	df000104 	addi	fp,sp,4
   80c4c:	e13fff15 	stw	r4,-4(fp)
	charPosition->bytePacket = (charPosition->charId << 29) + (charPosition->positionX << 17 ) + (charPosition->positionY << 5) + (charPosition->state << 2) + (charPosition->orientation );
   80c50:	e0bfff17 	ldw	r2,-4(fp)
   80c54:	10800003 	ldbu	r2,0(r2)
   80c58:	10803fcc 	andi	r2,r2,255
   80c5c:	1004977a 	slli	r2,r2,29
   80c60:	1007883a 	mov	r3,r2
   80c64:	e0bfff17 	ldw	r2,-4(fp)
   80c68:	10800117 	ldw	r2,4(r2)
   80c6c:	1004947a 	slli	r2,r2,17
   80c70:	1887883a 	add	r3,r3,r2
   80c74:	e0bfff17 	ldw	r2,-4(fp)
   80c78:	10800217 	ldw	r2,8(r2)
   80c7c:	1004917a 	slli	r2,r2,5
   80c80:	1887883a 	add	r3,r3,r2
   80c84:	e0bfff17 	ldw	r2,-4(fp)
   80c88:	10800303 	ldbu	r2,12(r2)
   80c8c:	10803fcc 	andi	r2,r2,255
   80c90:	1085883a 	add	r2,r2,r2
   80c94:	1085883a 	add	r2,r2,r2
   80c98:	1887883a 	add	r3,r3,r2
   80c9c:	e0bfff17 	ldw	r2,-4(fp)
   80ca0:	10800417 	ldw	r2,16(r2)
   80ca4:	1887883a 	add	r3,r3,r2
   80ca8:	e0bfff17 	ldw	r2,-4(fp)
   80cac:	10c00515 	stw	r3,20(r2)
}
   80cb0:	0001883a 	nop
   80cb4:	e037883a 	mov	sp,fp
   80cb8:	df000017 	ldw	fp,0(sp)
   80cbc:	dec00104 	addi	sp,sp,4
   80cc0:	f800283a 	ret

00080cc4 <init_collision>:

void init_collision(position* charPosition){
   80cc4:	defffe04 	addi	sp,sp,-8
   80cc8:	df000115 	stw	fp,4(sp)
   80ccc:	df000104 	addi	fp,sp,4
   80cd0:	e13fff15 	stw	r4,-4(fp)
	charPosition->collision.north = 0;
   80cd4:	e0bfff17 	ldw	r2,-4(fp)
   80cd8:	10000605 	stb	zero,24(r2)
	charPosition->collision.east = 0;
   80cdc:	e0bfff17 	ldw	r2,-4(fp)
   80ce0:	10000645 	stb	zero,25(r2)
	charPosition->collision.south = 0;
   80ce4:	e0bfff17 	ldw	r2,-4(fp)
   80ce8:	10000685 	stb	zero,26(r2)
	charPosition->collision.west = 0;
   80cec:	e0bfff17 	ldw	r2,-4(fp)
   80cf0:	100006c5 	stb	zero,27(r2)
}
   80cf4:	0001883a 	nop
   80cf8:	e037883a 	mov	sp,fp
   80cfc:	df000017 	ldw	fp,0(sp)
   80d00:	dec00104 	addi	sp,sp,4
   80d04:	f800283a 	ret

00080d08 <init_position>:

void init_position(position* charPosition, alt_u8 charId, alt_u32 positionX, alt_u32 positionY, alt_u8 state, orientation orientation, alt_u32 background[15])
//initialize the charPosition with the given arguments
{
   80d08:	defff904 	addi	sp,sp,-28
   80d0c:	dfc00615 	stw	ra,24(sp)
   80d10:	df000515 	stw	fp,20(sp)
   80d14:	df000504 	addi	fp,sp,20
   80d18:	e13ffb15 	stw	r4,-20(fp)
   80d1c:	2807883a 	mov	r3,r5
   80d20:	e1bffd15 	stw	r6,-12(fp)
   80d24:	e1fffe15 	stw	r7,-8(fp)
   80d28:	e0800217 	ldw	r2,8(fp)
   80d2c:	e0fffc05 	stb	r3,-16(fp)
   80d30:	e0bfff05 	stb	r2,-4(fp)
	charPosition->charId = charId ;
   80d34:	e0bffb17 	ldw	r2,-20(fp)
   80d38:	e0fffc03 	ldbu	r3,-16(fp)
   80d3c:	10c00005 	stb	r3,0(r2)
	charPosition->positionX = positionX ;
   80d40:	e0bffb17 	ldw	r2,-20(fp)
   80d44:	e0fffd17 	ldw	r3,-12(fp)
   80d48:	10c00115 	stw	r3,4(r2)
	charPosition->positionY = positionY ;
   80d4c:	e0bffb17 	ldw	r2,-20(fp)
   80d50:	e0fffe17 	ldw	r3,-8(fp)
   80d54:	10c00215 	stw	r3,8(r2)
	charPosition->state = state ;
   80d58:	e0bffb17 	ldw	r2,-20(fp)
   80d5c:	e0ffff03 	ldbu	r3,-4(fp)
   80d60:	10c00305 	stb	r3,12(r2)
	charPosition->orientation = orientation ;
   80d64:	e0bffb17 	ldw	r2,-20(fp)
   80d68:	e0c00317 	ldw	r3,12(fp)
   80d6c:	10c00415 	stw	r3,16(r2)
	charPosition->background = background;
   80d70:	e0bffb17 	ldw	r2,-20(fp)
   80d74:	e0c00417 	ldw	r3,16(fp)
   80d78:	10c00815 	stw	r3,32(r2)
	init_collision(charPosition);
   80d7c:	e13ffb17 	ldw	r4,-20(fp)
   80d80:	0080cc40 	call	80cc4 <init_collision>
	compute_byte_packet(charPosition);
   80d84:	e13ffb17 	ldw	r4,-20(fp)
   80d88:	0080c400 	call	80c40 <compute_byte_packet>
}
   80d8c:	0001883a 	nop
   80d90:	e037883a 	mov	sp,fp
   80d94:	dfc00117 	ldw	ra,4(sp)
   80d98:	df000017 	ldw	fp,0(sp)
   80d9c:	dec00204 	addi	sp,sp,8
   80da0:	f800283a 	ret

00080da4 <init_ghost_position>:

void init_ghost_position(position* charPosition, alt_u8 charId, alt_u32 positionX, alt_u32 positionY, alt_u8 state, orientation orientation){
   80da4:	defffa04 	addi	sp,sp,-24
   80da8:	df000515 	stw	fp,20(sp)
   80dac:	df000504 	addi	fp,sp,20
   80db0:	e13ffb15 	stw	r4,-20(fp)
   80db4:	2807883a 	mov	r3,r5
   80db8:	e1bffd15 	stw	r6,-12(fp)
   80dbc:	e1fffe15 	stw	r7,-8(fp)
   80dc0:	e0800117 	ldw	r2,4(fp)
   80dc4:	e0fffc05 	stb	r3,-16(fp)
   80dc8:	e0bfff05 	stb	r2,-4(fp)

}
   80dcc:	0001883a 	nop
   80dd0:	e037883a 	mov	sp,fp
   80dd4:	df000017 	ldw	fp,0(sp)
   80dd8:	dec00104 	addi	sp,sp,4
   80ddc:	f800283a 	ret

00080de0 <compute_collision>:

void compute_collision(position* charPosition){
   80de0:	defffd04 	addi	sp,sp,-12
   80de4:	dfc00215 	stw	ra,8(sp)
   80de8:	df000115 	stw	fp,4(sp)
   80dec:	df000104 	addi	fp,sp,4
   80df0:	e13fff15 	stw	r4,-4(fp)
	charPosition->collision.north = 1 -
		(int)
		(
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY - 1, charPosition->background) 	== 0)
   80df4:	e0bfff17 	ldw	r2,-4(fp)
   80df8:	10c00117 	ldw	r3,4(r2)
   80dfc:	e0bfff17 	ldw	r2,-4(fp)
   80e00:	10800217 	ldw	r2,8(r2)
   80e04:	113fffc4 	addi	r4,r2,-1
   80e08:	e0bfff17 	ldw	r2,-4(fp)
   80e0c:	10800817 	ldw	r2,32(r2)
   80e10:	100d883a 	mov	r6,r2
   80e14:	200b883a 	mov	r5,r4
   80e18:	1809883a 	mov	r4,r3
   80e1c:	00807240 	call	80724 <get_block_with_coordinates>

}

void compute_collision(position* charPosition){
	charPosition->collision.north = 1 -
		(int)
   80e20:	10803fcc 	andi	r2,r2,255
   80e24:	1000101e 	bne	r2,zero,80e68 <compute_collision+0x88>
		(
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY - 1, charPosition->background) 	== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY - 1, charPosition->background) 	== 0)
   80e28:	e0bfff17 	ldw	r2,-4(fp)
   80e2c:	10800117 	ldw	r2,4(r2)
   80e30:	10c00ec4 	addi	r3,r2,59
   80e34:	e0bfff17 	ldw	r2,-4(fp)
   80e38:	10800217 	ldw	r2,8(r2)
   80e3c:	113fffc4 	addi	r4,r2,-1
   80e40:	e0bfff17 	ldw	r2,-4(fp)
   80e44:	10800817 	ldw	r2,32(r2)
   80e48:	100d883a 	mov	r6,r2
   80e4c:	200b883a 	mov	r5,r4
   80e50:	1809883a 	mov	r4,r3
   80e54:	00807240 	call	80724 <get_block_with_coordinates>

}

void compute_collision(position* charPosition){
	charPosition->collision.north = 1 -
		(int)
   80e58:	10803fcc 	andi	r2,r2,255
   80e5c:	1000021e 	bne	r2,zero,80e68 <compute_collision+0x88>
   80e60:	00800044 	movi	r2,1
   80e64:	00000106 	br	80e6c <compute_collision+0x8c>
   80e68:	0005883a 	mov	r2,zero
void init_ghost_position(position* charPosition, alt_u8 charId, alt_u32 positionX, alt_u32 positionY, alt_u8 state, orientation orientation){

}

void compute_collision(position* charPosition){
	charPosition->collision.north = 1 -
   80e6c:	1007883a 	mov	r3,r2
   80e70:	00800044 	movi	r2,1
   80e74:	10c5c83a 	sub	r2,r2,r3
   80e78:	1007883a 	mov	r3,r2
   80e7c:	e0bfff17 	ldw	r2,-4(fp)
   80e80:	10c00605 	stb	r3,24(r2)
		);

	charPosition->collision.east = 1 -
		(int)
		(
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY, charPosition->background) 		== 0)
   80e84:	e0bfff17 	ldw	r2,-4(fp)
   80e88:	10800117 	ldw	r2,4(r2)
   80e8c:	10c00f04 	addi	r3,r2,60
   80e90:	e0bfff17 	ldw	r2,-4(fp)
   80e94:	11000217 	ldw	r4,8(r2)
   80e98:	e0bfff17 	ldw	r2,-4(fp)
   80e9c:	10800817 	ldw	r2,32(r2)
   80ea0:	100d883a 	mov	r6,r2
   80ea4:	200b883a 	mov	r5,r4
   80ea8:	1809883a 	mov	r4,r3
   80eac:	00807240 	call	80724 <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY - 1, charPosition->background) 	== 0)
		);

	charPosition->collision.east = 1 -
		(int)
   80eb0:	10803fcc 	andi	r2,r2,255
   80eb4:	1000101e 	bne	r2,zero,80ef8 <compute_collision+0x118>
		(
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY, charPosition->background) 		== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY + 59, charPosition->background) 	== 0)
   80eb8:	e0bfff17 	ldw	r2,-4(fp)
   80ebc:	10800117 	ldw	r2,4(r2)
   80ec0:	10c00f04 	addi	r3,r2,60
   80ec4:	e0bfff17 	ldw	r2,-4(fp)
   80ec8:	10800217 	ldw	r2,8(r2)
   80ecc:	11000ec4 	addi	r4,r2,59
   80ed0:	e0bfff17 	ldw	r2,-4(fp)
   80ed4:	10800817 	ldw	r2,32(r2)
   80ed8:	100d883a 	mov	r6,r2
   80edc:	200b883a 	mov	r5,r4
   80ee0:	1809883a 	mov	r4,r3
   80ee4:	00807240 	call	80724 <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY - 1, charPosition->background) 	== 0)
		);

	charPosition->collision.east = 1 -
		(int)
   80ee8:	10803fcc 	andi	r2,r2,255
   80eec:	1000021e 	bne	r2,zero,80ef8 <compute_collision+0x118>
   80ef0:	00800044 	movi	r2,1
   80ef4:	00000106 	br	80efc <compute_collision+0x11c>
   80ef8:	0005883a 	mov	r2,zero
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY - 1, charPosition->background) 	== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY - 1, charPosition->background) 	== 0)
		);

	charPosition->collision.east = 1 -
   80efc:	1007883a 	mov	r3,r2
   80f00:	00800044 	movi	r2,1
   80f04:	10c5c83a 	sub	r2,r2,r3
   80f08:	1007883a 	mov	r3,r2
   80f0c:	e0bfff17 	ldw	r2,-4(fp)
   80f10:	10c00645 	stb	r3,25(r2)
		);

	charPosition->collision.south = 1 -
		(int)
		(
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY + 60, charPosition->background) 	== 0)
   80f14:	e0bfff17 	ldw	r2,-4(fp)
   80f18:	10c00117 	ldw	r3,4(r2)
   80f1c:	e0bfff17 	ldw	r2,-4(fp)
   80f20:	10800217 	ldw	r2,8(r2)
   80f24:	11000f04 	addi	r4,r2,60
   80f28:	e0bfff17 	ldw	r2,-4(fp)
   80f2c:	10800817 	ldw	r2,32(r2)
   80f30:	100d883a 	mov	r6,r2
   80f34:	200b883a 	mov	r5,r4
   80f38:	1809883a 	mov	r4,r3
   80f3c:	00807240 	call	80724 <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY + 59, charPosition->background) 	== 0)
		);

	charPosition->collision.south = 1 -
		(int)
   80f40:	10803fcc 	andi	r2,r2,255
   80f44:	1000101e 	bne	r2,zero,80f88 <compute_collision+0x1a8>
		(
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY + 60, charPosition->background) 	== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY + 60, charPosition->background) 	== 0)
   80f48:	e0bfff17 	ldw	r2,-4(fp)
   80f4c:	10800117 	ldw	r2,4(r2)
   80f50:	10c00ec4 	addi	r3,r2,59
   80f54:	e0bfff17 	ldw	r2,-4(fp)
   80f58:	10800217 	ldw	r2,8(r2)
   80f5c:	11000f04 	addi	r4,r2,60
   80f60:	e0bfff17 	ldw	r2,-4(fp)
   80f64:	10800817 	ldw	r2,32(r2)
   80f68:	100d883a 	mov	r6,r2
   80f6c:	200b883a 	mov	r5,r4
   80f70:	1809883a 	mov	r4,r3
   80f74:	00807240 	call	80724 <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY + 59, charPosition->background) 	== 0)
		);

	charPosition->collision.south = 1 -
		(int)
   80f78:	10803fcc 	andi	r2,r2,255
   80f7c:	1000021e 	bne	r2,zero,80f88 <compute_collision+0x1a8>
   80f80:	00800044 	movi	r2,1
   80f84:	00000106 	br	80f8c <compute_collision+0x1ac>
   80f88:	0005883a 	mov	r2,zero
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY, charPosition->background) 		== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY + 59, charPosition->background) 	== 0)
		);

	charPosition->collision.south = 1 -
   80f8c:	1007883a 	mov	r3,r2
   80f90:	00800044 	movi	r2,1
   80f94:	10c5c83a 	sub	r2,r2,r3
   80f98:	1007883a 	mov	r3,r2
   80f9c:	e0bfff17 	ldw	r2,-4(fp)
   80fa0:	10c00685 	stb	r3,26(r2)
		);

	charPosition->collision.west = 1 -
		(int)
		(
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY, charPosition->background) 		== 0)
   80fa4:	e0bfff17 	ldw	r2,-4(fp)
   80fa8:	10800117 	ldw	r2,4(r2)
   80fac:	10ffffc4 	addi	r3,r2,-1
   80fb0:	e0bfff17 	ldw	r2,-4(fp)
   80fb4:	11000217 	ldw	r4,8(r2)
   80fb8:	e0bfff17 	ldw	r2,-4(fp)
   80fbc:	10800817 	ldw	r2,32(r2)
   80fc0:	100d883a 	mov	r6,r2
   80fc4:	200b883a 	mov	r5,r4
   80fc8:	1809883a 	mov	r4,r3
   80fcc:	00807240 	call	80724 <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY + 60, charPosition->background) 	== 0)
		);

	charPosition->collision.west = 1 -
		(int)
   80fd0:	10803fcc 	andi	r2,r2,255
   80fd4:	1000101e 	bne	r2,zero,81018 <compute_collision+0x238>
		(
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY, charPosition->background) 		== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY + 59, charPosition->background) 	== 0)
   80fd8:	e0bfff17 	ldw	r2,-4(fp)
   80fdc:	10800117 	ldw	r2,4(r2)
   80fe0:	10ffffc4 	addi	r3,r2,-1
   80fe4:	e0bfff17 	ldw	r2,-4(fp)
   80fe8:	10800217 	ldw	r2,8(r2)
   80fec:	11000ec4 	addi	r4,r2,59
   80ff0:	e0bfff17 	ldw	r2,-4(fp)
   80ff4:	10800817 	ldw	r2,32(r2)
   80ff8:	100d883a 	mov	r6,r2
   80ffc:	200b883a 	mov	r5,r4
   81000:	1809883a 	mov	r4,r3
   81004:	00807240 	call	80724 <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY + 60, charPosition->background) 	== 0)
		);

	charPosition->collision.west = 1 -
		(int)
   81008:	10803fcc 	andi	r2,r2,255
   8100c:	1000021e 	bne	r2,zero,81018 <compute_collision+0x238>
   81010:	00800044 	movi	r2,1
   81014:	00000106 	br	8101c <compute_collision+0x23c>
   81018:	0005883a 	mov	r2,zero
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY + 60, charPosition->background) 	== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY + 60, charPosition->background) 	== 0)
		);

	charPosition->collision.west = 1 -
   8101c:	1007883a 	mov	r3,r2
   81020:	00800044 	movi	r2,1
   81024:	10c5c83a 	sub	r2,r2,r3
   81028:	1007883a 	mov	r3,r2
   8102c:	e0bfff17 	ldw	r2,-4(fp)
   81030:	10c006c5 	stb	r3,27(r2)
		(
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY, charPosition->background) 		== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY + 59, charPosition->background) 	== 0)
		);
}
   81034:	0001883a 	nop
   81038:	e037883a 	mov	sp,fp
   8103c:	dfc00117 	ldw	ra,4(sp)
   81040:	df000017 	ldw	fp,0(sp)
   81044:	dec00204 	addi	sp,sp,8
   81048:	f800283a 	ret

0008104c <refresh_position>:
void refresh_position(position* charPosition, alt_u8 autoMode)
/*this function computes the new position of the pacman given :
 * - the orientation
 * - the collisions around the character
 */
{
   8104c:	defffa04 	addi	sp,sp,-24
   81050:	dfc00515 	stw	ra,20(sp)
   81054:	df000415 	stw	fp,16(sp)
   81058:	df000404 	addi	fp,sp,16
   8105c:	e13ffe15 	stw	r4,-8(fp)
   81060:	2805883a 	mov	r2,r5
   81064:	e0bfff05 	stb	r2,-4(fp)
	compute_collision(charPosition);
   81068:	e13ffe17 	ldw	r4,-8(fp)
   8106c:	0080de00 	call	80de0 <compute_collision>
	alt_u16 step = MOVEMENT_STEP;
   81070:	00800144 	movi	r2,5
   81074:	e0bffc0d 	sth	r2,-16(fp)
	
	srand((unsigned int)time(NULL) + charPosition->positionX);
   81078:	0009883a 	mov	r4,zero
   8107c:	0081b100 	call	81b10 <time>
   81080:	1007883a 	mov	r3,r2
   81084:	e0bffe17 	ldw	r2,-8(fp)
   81088:	10800117 	ldw	r2,4(r2)
   8108c:	1885883a 	add	r2,r3,r2
   81090:	1009883a 	mov	r4,r2
   81094:	00819fc0 	call	819fc <srand>
	int randomOrientation = rand() % 5;
   81098:	0081a140 	call	81a14 <rand>
   8109c:	01400144 	movi	r5,5
   810a0:	1009883a 	mov	r4,r2
   810a4:	008178c0 	call	8178c <__modsi3>
   810a8:	e0bffd15 	stw	r2,-12(fp)

	switch(charPosition->directionControl)
   810ac:	e0bffe17 	ldw	r2,-8(fp)
   810b0:	10800717 	ldw	r2,28(r2)
   810b4:	10c000a0 	cmpeqi	r3,r2,2
   810b8:	1800211e 	bne	r3,zero,81140 <refresh_position+0xf4>
   810bc:	10c000e8 	cmpgeui	r3,r2,3
   810c0:	1800031e 	bne	r3,zero,810d0 <refresh_position+0x84>
   810c4:	10800060 	cmpeqi	r2,r2,1
   810c8:	1000061e 	bne	r2,zero,810e4 <refresh_position+0x98>
   810cc:	00006006 	br	81250 <refresh_position+0x204>
   810d0:	10c000e0 	cmpeqi	r3,r2,3
   810d4:	1800311e 	bne	r3,zero,8119c <refresh_position+0x150>
   810d8:	10800120 	cmpeqi	r2,r2,4
   810dc:	1000461e 	bne	r2,zero,811f8 <refresh_position+0x1ac>
   810e0:	00005b06 	br	81250 <refresh_position+0x204>
	{
		case UP:
			if(charPosition->collision.north == 0){
   810e4:	e0bffe17 	ldw	r2,-8(fp)
   810e8:	10800603 	ldbu	r2,24(r2)
   810ec:	10803fcc 	andi	r2,r2,255
   810f0:	10000c1e 	bne	r2,zero,81124 <refresh_position+0xd8>
				charPosition->orientation = NORTH;
   810f4:	e0bffe17 	ldw	r2,-8(fp)
   810f8:	00c00044 	movi	r3,1
   810fc:	10c00415 	stw	r3,16(r2)
				charPosition->positionY = charPosition->positionY - step;
   81100:	e0bffe17 	ldw	r2,-8(fp)
   81104:	10c00217 	ldw	r3,8(r2)
   81108:	e0bffc0b 	ldhu	r2,-16(fp)
   8110c:	1887c83a 	sub	r3,r3,r2
   81110:	e0bffe17 	ldw	r2,-8(fp)
   81114:	10c00215 	stw	r3,8(r2)
				charPosition->directionControl = NONE;
   81118:	e0bffe17 	ldw	r2,-8(fp)
   8111c:	10000715 	stw	zero,28(r2)
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
			}
		break;
   81120:	00005206 	br	8126c <refresh_position+0x220>
			if(charPosition->collision.north == 0){
				charPosition->orientation = NORTH;
				charPosition->positionY = charPosition->positionY - step;
				charPosition->directionControl = NONE;
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
   81124:	e0bffc0b 	ldhu	r2,-16(fp)
   81128:	e0ffff03 	ldbu	r3,-4(fp)
   8112c:	180d883a 	mov	r6,r3
   81130:	100b883a 	mov	r5,r2
   81134:	e13ffe17 	ldw	r4,-8(fp)
   81138:	008128c0 	call	8128c <refresh_position_keepGoing>
			}
		break;
   8113c:	00004b06 	br	8126c <refresh_position+0x220>
		case RIGHT:
			if(charPosition->collision.east == 0){
   81140:	e0bffe17 	ldw	r2,-8(fp)
   81144:	10800643 	ldbu	r2,25(r2)
   81148:	10803fcc 	andi	r2,r2,255
   8114c:	10000c1e 	bne	r2,zero,81180 <refresh_position+0x134>
				charPosition->orientation = EAST;
   81150:	e0bffe17 	ldw	r2,-8(fp)
   81154:	00c00084 	movi	r3,2
   81158:	10c00415 	stw	r3,16(r2)
				charPosition->positionX = charPosition->positionX + step;
   8115c:	e0bffe17 	ldw	r2,-8(fp)
   81160:	10c00117 	ldw	r3,4(r2)
   81164:	e0bffc0b 	ldhu	r2,-16(fp)
   81168:	1887883a 	add	r3,r3,r2
   8116c:	e0bffe17 	ldw	r2,-8(fp)
   81170:	10c00115 	stw	r3,4(r2)
				charPosition->directionControl = NONE;
   81174:	e0bffe17 	ldw	r2,-8(fp)
   81178:	10000715 	stw	zero,28(r2)
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
			}
		break;
   8117c:	00003b06 	br	8126c <refresh_position+0x220>
			if(charPosition->collision.east == 0){
				charPosition->orientation = EAST;
				charPosition->positionX = charPosition->positionX + step;
				charPosition->directionControl = NONE;
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
   81180:	e0bffc0b 	ldhu	r2,-16(fp)
   81184:	e0ffff03 	ldbu	r3,-4(fp)
   81188:	180d883a 	mov	r6,r3
   8118c:	100b883a 	mov	r5,r2
   81190:	e13ffe17 	ldw	r4,-8(fp)
   81194:	008128c0 	call	8128c <refresh_position_keepGoing>
			}
		break;
   81198:	00003406 	br	8126c <refresh_position+0x220>
		case DOWN:
			if(charPosition->collision.south == 0){
   8119c:	e0bffe17 	ldw	r2,-8(fp)
   811a0:	10800683 	ldbu	r2,26(r2)
   811a4:	10803fcc 	andi	r2,r2,255
   811a8:	10000c1e 	bne	r2,zero,811dc <refresh_position+0x190>
				charPosition->orientation = SOUTH;
   811ac:	e0bffe17 	ldw	r2,-8(fp)
   811b0:	00c000c4 	movi	r3,3
   811b4:	10c00415 	stw	r3,16(r2)
				charPosition->positionY = charPosition->positionY + step;
   811b8:	e0bffe17 	ldw	r2,-8(fp)
   811bc:	10c00217 	ldw	r3,8(r2)
   811c0:	e0bffc0b 	ldhu	r2,-16(fp)
   811c4:	1887883a 	add	r3,r3,r2
   811c8:	e0bffe17 	ldw	r2,-8(fp)
   811cc:	10c00215 	stw	r3,8(r2)
				charPosition->directionControl = NONE;
   811d0:	e0bffe17 	ldw	r2,-8(fp)
   811d4:	10000715 	stw	zero,28(r2)
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
			}
		break;
   811d8:	00002406 	br	8126c <refresh_position+0x220>
			if(charPosition->collision.south == 0){
				charPosition->orientation = SOUTH;
				charPosition->positionY = charPosition->positionY + step;
				charPosition->directionControl = NONE;
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
   811dc:	e0bffc0b 	ldhu	r2,-16(fp)
   811e0:	e0ffff03 	ldbu	r3,-4(fp)
   811e4:	180d883a 	mov	r6,r3
   811e8:	100b883a 	mov	r5,r2
   811ec:	e13ffe17 	ldw	r4,-8(fp)
   811f0:	008128c0 	call	8128c <refresh_position_keepGoing>
			}
		break;
   811f4:	00001d06 	br	8126c <refresh_position+0x220>
		case LEFT:
			if(charPosition->collision.west == 0){
   811f8:	e0bffe17 	ldw	r2,-8(fp)
   811fc:	108006c3 	ldbu	r2,27(r2)
   81200:	10803fcc 	andi	r2,r2,255
   81204:	10000b1e 	bne	r2,zero,81234 <refresh_position+0x1e8>
				charPosition->orientation = WEST;
   81208:	e0bffe17 	ldw	r2,-8(fp)
   8120c:	10000415 	stw	zero,16(r2)
				charPosition->positionX = charPosition->positionX - step;
   81210:	e0bffe17 	ldw	r2,-8(fp)
   81214:	10c00117 	ldw	r3,4(r2)
   81218:	e0bffc0b 	ldhu	r2,-16(fp)
   8121c:	1887c83a 	sub	r3,r3,r2
   81220:	e0bffe17 	ldw	r2,-8(fp)
   81224:	10c00115 	stw	r3,4(r2)
				charPosition->directionControl = NONE;
   81228:	e0bffe17 	ldw	r2,-8(fp)
   8122c:	10000715 	stw	zero,28(r2)
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
			}
		break;
   81230:	00000e06 	br	8126c <refresh_position+0x220>
			if(charPosition->collision.west == 0){
				charPosition->orientation = WEST;
				charPosition->positionX = charPosition->positionX - step;
				charPosition->directionControl = NONE;
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
   81234:	e0bffc0b 	ldhu	r2,-16(fp)
   81238:	e0ffff03 	ldbu	r3,-4(fp)
   8123c:	180d883a 	mov	r6,r3
   81240:	100b883a 	mov	r5,r2
   81244:	e13ffe17 	ldw	r4,-8(fp)
   81248:	008128c0 	call	8128c <refresh_position_keepGoing>
			}
		break;
   8124c:	00000706 	br	8126c <refresh_position+0x220>
		default :
			refresh_position_keepGoing(charPosition, step, autoMode);
   81250:	e0bffc0b 	ldhu	r2,-16(fp)
   81254:	e0ffff03 	ldbu	r3,-4(fp)
   81258:	180d883a 	mov	r6,r3
   8125c:	100b883a 	mov	r5,r2
   81260:	e13ffe17 	ldw	r4,-8(fp)
   81264:	008128c0 	call	8128c <refresh_position_keepGoing>
		break;
   81268:	0001883a 	nop
	}
	compute_byte_packet(charPosition);
   8126c:	e13ffe17 	ldw	r4,-8(fp)
   81270:	0080c400 	call	80c40 <compute_byte_packet>
}
   81274:	0001883a 	nop
   81278:	e037883a 	mov	sp,fp
   8127c:	dfc00117 	ldw	ra,4(sp)
   81280:	df000017 	ldw	fp,0(sp)
   81284:	dec00204 	addi	sp,sp,8
   81288:	f800283a 	ret

0008128c <refresh_position_keepGoing>:

void refresh_position_keepGoing(position* charPosition, alt_u16 step, alt_u8 autoMode){
   8128c:	defffb04 	addi	sp,sp,-20
   81290:	dfc00415 	stw	ra,16(sp)
   81294:	df000315 	stw	fp,12(sp)
   81298:	df000304 	addi	fp,sp,12
   8129c:	e13ffd15 	stw	r4,-12(fp)
   812a0:	2807883a 	mov	r3,r5
   812a4:	3005883a 	mov	r2,r6
   812a8:	e0fffe0d 	sth	r3,-8(fp)
   812ac:	e0bfff05 	stb	r2,-4(fp)
	switch(charPosition->orientation)
   812b0:	e0bffd17 	ldw	r2,-12(fp)
   812b4:	10800417 	ldw	r2,16(r2)
   812b8:	10c00060 	cmpeqi	r3,r2,1
   812bc:	1800061e 	bne	r3,zero,812d8 <refresh_position_keepGoing+0x4c>
   812c0:	00803e2e 	bgeu	zero,r2,813bc <refresh_position_keepGoing+0x130>
   812c4:	10c000a0 	cmpeqi	r3,r2,2
   812c8:	1800161e 	bne	r3,zero,81324 <refresh_position_keepGoing+0x98>
   812cc:	108000e0 	cmpeqi	r2,r2,3
   812d0:	1000271e 	bne	r2,zero,81370 <refresh_position_keepGoing+0xe4>
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
	}
}
   812d4:	00005306 	br	81424 <refresh_position_keepGoing+0x198>

void refresh_position_keepGoing(position* charPosition, alt_u16 step, alt_u8 autoMode){
	switch(charPosition->orientation)
	{
		case NORTH :
			if (charPosition->collision.north == 0){
   812d8:	e0bffd17 	ldw	r2,-12(fp)
   812dc:	10800603 	ldbu	r2,24(r2)
   812e0:	10803fcc 	andi	r2,r2,255
   812e4:	1000071e 	bne	r2,zero,81304 <refresh_position_keepGoing+0x78>
				charPosition->positionY = charPosition->positionY - step;	
   812e8:	e0bffd17 	ldw	r2,-12(fp)
   812ec:	10c00217 	ldw	r3,8(r2)
   812f0:	e0bffe0b 	ldhu	r2,-8(fp)
   812f4:	1887c83a 	sub	r3,r3,r2
   812f8:	e0bffd17 	ldw	r2,-12(fp)
   812fc:	10c00215 	stw	r3,8(r2)
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   81300:	00004106 	br	81408 <refresh_position_keepGoing+0x17c>
	switch(charPosition->orientation)
	{
		case NORTH :
			if (charPosition->collision.north == 0){
				charPosition->positionY = charPosition->positionY - step;	
			} else if (autoMode == 1) {
   81304:	e0bfff03 	ldbu	r2,-4(fp)
   81308:	10800058 	cmpnei	r2,r2,1
   8130c:	10003e1e 	bne	r2,zero,81408 <refresh_position_keepGoing+0x17c>
				randomDirection(charPosition, step);
   81310:	e0bffe0b 	ldhu	r2,-8(fp)
   81314:	100b883a 	mov	r5,r2
   81318:	e13ffd17 	ldw	r4,-12(fp)
   8131c:	008143c0 	call	8143c <randomDirection>
			} 
		break;
   81320:	00003906 	br	81408 <refresh_position_keepGoing+0x17c>
		case EAST :
			if (charPosition->collision.east == 0){
   81324:	e0bffd17 	ldw	r2,-12(fp)
   81328:	10800643 	ldbu	r2,25(r2)
   8132c:	10803fcc 	andi	r2,r2,255
   81330:	1000071e 	bne	r2,zero,81350 <refresh_position_keepGoing+0xc4>
				charPosition->positionX = charPosition->positionX + step;
   81334:	e0bffd17 	ldw	r2,-12(fp)
   81338:	10c00117 	ldw	r3,4(r2)
   8133c:	e0bffe0b 	ldhu	r2,-8(fp)
   81340:	1887883a 	add	r3,r3,r2
   81344:	e0bffd17 	ldw	r2,-12(fp)
   81348:	10c00115 	stw	r3,4(r2)
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   8134c:	00003006 	br	81410 <refresh_position_keepGoing+0x184>
			} 
		break;
		case EAST :
			if (charPosition->collision.east == 0){
				charPosition->positionX = charPosition->positionX + step;
			} else if (autoMode == 1) {
   81350:	e0bfff03 	ldbu	r2,-4(fp)
   81354:	10800058 	cmpnei	r2,r2,1
   81358:	10002d1e 	bne	r2,zero,81410 <refresh_position_keepGoing+0x184>
				randomDirection(charPosition, step);
   8135c:	e0bffe0b 	ldhu	r2,-8(fp)
   81360:	100b883a 	mov	r5,r2
   81364:	e13ffd17 	ldw	r4,-12(fp)
   81368:	008143c0 	call	8143c <randomDirection>
			} 
		break;
   8136c:	00002806 	br	81410 <refresh_position_keepGoing+0x184>
		case SOUTH :
			if (charPosition->collision.south == 0){
   81370:	e0bffd17 	ldw	r2,-12(fp)
   81374:	10800683 	ldbu	r2,26(r2)
   81378:	10803fcc 	andi	r2,r2,255
   8137c:	1000071e 	bne	r2,zero,8139c <refresh_position_keepGoing+0x110>
				charPosition->positionY = charPosition->positionY + step;
   81380:	e0bffd17 	ldw	r2,-12(fp)
   81384:	10c00217 	ldw	r3,8(r2)
   81388:	e0bffe0b 	ldhu	r2,-8(fp)
   8138c:	1887883a 	add	r3,r3,r2
   81390:	e0bffd17 	ldw	r2,-12(fp)
   81394:	10c00215 	stw	r3,8(r2)
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   81398:	00001f06 	br	81418 <refresh_position_keepGoing+0x18c>
			} 
		break;
		case SOUTH :
			if (charPosition->collision.south == 0){
				charPosition->positionY = charPosition->positionY + step;
			} else if (autoMode == 1) {
   8139c:	e0bfff03 	ldbu	r2,-4(fp)
   813a0:	10800058 	cmpnei	r2,r2,1
   813a4:	10001c1e 	bne	r2,zero,81418 <refresh_position_keepGoing+0x18c>
				randomDirection(charPosition, step);
   813a8:	e0bffe0b 	ldhu	r2,-8(fp)
   813ac:	100b883a 	mov	r5,r2
   813b0:	e13ffd17 	ldw	r4,-12(fp)
   813b4:	008143c0 	call	8143c <randomDirection>
			} 
		break;
   813b8:	00001706 	br	81418 <refresh_position_keepGoing+0x18c>
		case WEST :
			if (charPosition->collision.west == 0){
   813bc:	e0bffd17 	ldw	r2,-12(fp)
   813c0:	108006c3 	ldbu	r2,27(r2)
   813c4:	10803fcc 	andi	r2,r2,255
   813c8:	1000071e 	bne	r2,zero,813e8 <refresh_position_keepGoing+0x15c>
				charPosition->positionX = charPosition->positionX - step;
   813cc:	e0bffd17 	ldw	r2,-12(fp)
   813d0:	10c00117 	ldw	r3,4(r2)
   813d4:	e0bffe0b 	ldhu	r2,-8(fp)
   813d8:	1887c83a 	sub	r3,r3,r2
   813dc:	e0bffd17 	ldw	r2,-12(fp)
   813e0:	10c00115 	stw	r3,4(r2)
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   813e4:	00000e06 	br	81420 <refresh_position_keepGoing+0x194>
			} 
		break;
		case WEST :
			if (charPosition->collision.west == 0){
				charPosition->positionX = charPosition->positionX - step;
			} else if (autoMode == 1) {
   813e8:	e0bfff03 	ldbu	r2,-4(fp)
   813ec:	10800058 	cmpnei	r2,r2,1
   813f0:	10000b1e 	bne	r2,zero,81420 <refresh_position_keepGoing+0x194>
				randomDirection(charPosition, step);
   813f4:	e0bffe0b 	ldhu	r2,-8(fp)
   813f8:	100b883a 	mov	r5,r2
   813fc:	e13ffd17 	ldw	r4,-12(fp)
   81400:	008143c0 	call	8143c <randomDirection>
			} 
		break;
   81404:	00000606 	br	81420 <refresh_position_keepGoing+0x194>
			if (charPosition->collision.north == 0){
				charPosition->positionY = charPosition->positionY - step;	
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   81408:	0001883a 	nop
   8140c:	00000506 	br	81424 <refresh_position_keepGoing+0x198>
			if (charPosition->collision.east == 0){
				charPosition->positionX = charPosition->positionX + step;
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   81410:	0001883a 	nop
   81414:	00000306 	br	81424 <refresh_position_keepGoing+0x198>
			if (charPosition->collision.south == 0){
				charPosition->positionY = charPosition->positionY + step;
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   81418:	0001883a 	nop
   8141c:	00000106 	br	81424 <refresh_position_keepGoing+0x198>
			if (charPosition->collision.west == 0){
				charPosition->positionX = charPosition->positionX - step;
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   81420:	0001883a 	nop
	}
}
   81424:	0001883a 	nop
   81428:	e037883a 	mov	sp,fp
   8142c:	dfc00117 	ldw	ra,4(sp)
   81430:	df000017 	ldw	fp,0(sp)
   81434:	dec00204 	addi	sp,sp,8
   81438:	f800283a 	ret

0008143c <randomDirection>:

//this function should be removed once the button controls are working
void randomDirection(position* charPosition, alt_u16 step){
   8143c:	defffd04 	addi	sp,sp,-12
   81440:	df000215 	stw	fp,8(sp)
   81444:	df000204 	addi	fp,sp,8
   81448:	e13ffe15 	stw	r4,-8(fp)
   8144c:	2805883a 	mov	r2,r5
   81450:	e0bfff0d 	sth	r2,-4(fp)
	if (charPosition->collision.north == 0){
   81454:	e0bffe17 	ldw	r2,-8(fp)
   81458:	10800603 	ldbu	r2,24(r2)
   8145c:	10803fcc 	andi	r2,r2,255
   81460:	10000a1e 	bne	r2,zero,8148c <randomDirection+0x50>
		charPosition->orientation = NORTH;
   81464:	e0bffe17 	ldw	r2,-8(fp)
   81468:	00c00044 	movi	r3,1
   8146c:	10c00415 	stw	r3,16(r2)
		charPosition->positionY = charPosition->positionY - step;				
   81470:	e0bffe17 	ldw	r2,-8(fp)
   81474:	10c00217 	ldw	r3,8(r2)
   81478:	e0bfff0b 	ldhu	r2,-4(fp)
   8147c:	1887c83a 	sub	r3,r3,r2
   81480:	e0bffe17 	ldw	r2,-8(fp)
   81484:	10c00215 	stw	r3,8(r2)
	}	
	else if (charPosition->collision.west == 0){
		charPosition->orientation = WEST;
		charPosition->positionX = charPosition->positionX - step;		
	}
}
   81488:	00002806 	br	8152c <randomDirection+0xf0>
void randomDirection(position* charPosition, alt_u16 step){
	if (charPosition->collision.north == 0){
		charPosition->orientation = NORTH;
		charPosition->positionY = charPosition->positionY - step;				
	}	
	else if (charPosition->collision.east == 0){	
   8148c:	e0bffe17 	ldw	r2,-8(fp)
   81490:	10800643 	ldbu	r2,25(r2)
   81494:	10803fcc 	andi	r2,r2,255
   81498:	10000a1e 	bne	r2,zero,814c4 <randomDirection+0x88>
		charPosition->orientation = EAST;
   8149c:	e0bffe17 	ldw	r2,-8(fp)
   814a0:	00c00084 	movi	r3,2
   814a4:	10c00415 	stw	r3,16(r2)
		charPosition->positionX = charPosition->positionX + step;		
   814a8:	e0bffe17 	ldw	r2,-8(fp)
   814ac:	10c00117 	ldw	r3,4(r2)
   814b0:	e0bfff0b 	ldhu	r2,-4(fp)
   814b4:	1887883a 	add	r3,r3,r2
   814b8:	e0bffe17 	ldw	r2,-8(fp)
   814bc:	10c00115 	stw	r3,4(r2)
	}	
	else if (charPosition->collision.west == 0){
		charPosition->orientation = WEST;
		charPosition->positionX = charPosition->positionX - step;		
	}
}
   814c0:	00001a06 	br	8152c <randomDirection+0xf0>
	}	
	else if (charPosition->collision.east == 0){	
		charPosition->orientation = EAST;
		charPosition->positionX = charPosition->positionX + step;		
	}	
	else if (charPosition->collision.south == 0){
   814c4:	e0bffe17 	ldw	r2,-8(fp)
   814c8:	10800683 	ldbu	r2,26(r2)
   814cc:	10803fcc 	andi	r2,r2,255
   814d0:	10000a1e 	bne	r2,zero,814fc <randomDirection+0xc0>
		charPosition->orientation = SOUTH;
   814d4:	e0bffe17 	ldw	r2,-8(fp)
   814d8:	00c000c4 	movi	r3,3
   814dc:	10c00415 	stw	r3,16(r2)
		charPosition->positionY = charPosition->positionY + step;				
   814e0:	e0bffe17 	ldw	r2,-8(fp)
   814e4:	10c00217 	ldw	r3,8(r2)
   814e8:	e0bfff0b 	ldhu	r2,-4(fp)
   814ec:	1887883a 	add	r3,r3,r2
   814f0:	e0bffe17 	ldw	r2,-8(fp)
   814f4:	10c00215 	stw	r3,8(r2)
	}	
	else if (charPosition->collision.west == 0){
		charPosition->orientation = WEST;
		charPosition->positionX = charPosition->positionX - step;		
	}
}
   814f8:	00000c06 	br	8152c <randomDirection+0xf0>
	}	
	else if (charPosition->collision.south == 0){
		charPosition->orientation = SOUTH;
		charPosition->positionY = charPosition->positionY + step;				
	}	
	else if (charPosition->collision.west == 0){
   814fc:	e0bffe17 	ldw	r2,-8(fp)
   81500:	108006c3 	ldbu	r2,27(r2)
   81504:	10803fcc 	andi	r2,r2,255
   81508:	1000081e 	bne	r2,zero,8152c <randomDirection+0xf0>
		charPosition->orientation = WEST;
   8150c:	e0bffe17 	ldw	r2,-8(fp)
   81510:	10000415 	stw	zero,16(r2)
		charPosition->positionX = charPosition->positionX - step;		
   81514:	e0bffe17 	ldw	r2,-8(fp)
   81518:	10c00117 	ldw	r3,4(r2)
   8151c:	e0bfff0b 	ldhu	r2,-4(fp)
   81520:	1887c83a 	sub	r3,r3,r2
   81524:	e0bffe17 	ldw	r2,-8(fp)
   81528:	10c00115 	stw	r3,4(r2)
	}
}
   8152c:	0001883a 	nop
   81530:	e037883a 	mov	sp,fp
   81534:	df000017 	ldw	fp,0(sp)
   81538:	dec00104 	addi	sp,sp,4
   8153c:	f800283a 	ret

00081540 <display_number>:
 *      Author: berges_cor
 */

#include "segments_display.h"

void display_number(alt_u16 number) {
   81540:	defffb04 	addi	sp,sp,-20
   81544:	dfc00415 	stw	ra,16(sp)
   81548:	df000315 	stw	fp,12(sp)
   8154c:	dc000215 	stw	r16,8(sp)
   81550:	df000304 	addi	fp,sp,12
   81554:	2005883a 	mov	r2,r4
   81558:	e0bffe0d 	sth	r2,-8(fp)
 	alt_u32 mask = 0;
   8155c:	e03ffd15 	stw	zero,-12(fp)
	if (number/100 != 0) {
   81560:	e0bffe0b 	ldhu	r2,-8(fp)
   81564:	10801930 	cmpltui	r2,r2,100
   81568:	10002b1e 	bne	r2,zero,81618 <display_number+0xd8>
		mask |= (char_array_2[number/100] << 14) | 
   8156c:	e0bffe0b 	ldhu	r2,-8(fp)
   81570:	01401904 	movi	r5,100
   81574:	1009883a 	mov	r4,r2
   81578:	00818000 	call	81800 <__udivsi3>
   8157c:	10ffffcc 	andi	r3,r2,65535
   81580:	00800274 	movhi	r2,9
   81584:	1084bc84 	addi	r2,r2,4850
   81588:	10c5883a 	add	r2,r2,r3
   8158c:	10800003 	ldbu	r2,0(r2)
   81590:	10803fcc 	andi	r2,r2,255
   81594:	102093ba 	slli	r16,r2,14
				(char_array_1[(number%100)/10] << 7) | 
   81598:	e0bffe0b 	ldhu	r2,-8(fp)
   8159c:	01401904 	movi	r5,100
   815a0:	1009883a 	mov	r4,r2
   815a4:	00818640 	call	81864 <__umodsi3>
   815a8:	10bfffcc 	andi	r2,r2,65535
   815ac:	01400284 	movi	r5,10
   815b0:	1009883a 	mov	r4,r2
   815b4:	00818000 	call	81800 <__udivsi3>
   815b8:	10ffffcc 	andi	r3,r2,65535
   815bc:	00800274 	movhi	r2,9
   815c0:	1084ba04 	addi	r2,r2,4840
   815c4:	10c5883a 	add	r2,r2,r3
   815c8:	10800003 	ldbu	r2,0(r2)
   815cc:	10803fcc 	andi	r2,r2,255
   815d0:	100491fa 	slli	r2,r2,7
#include "segments_display.h"

void display_number(alt_u16 number) {
 	alt_u32 mask = 0;
	if (number/100 != 0) {
		mask |= (char_array_2[number/100] << 14) | 
   815d4:	80a0b03a 	or	r16,r16,r2
				(char_array_1[(number%100)/10] << 7) | 
				(char_array_1[number%10]);
   815d8:	e0bffe0b 	ldhu	r2,-8(fp)
   815dc:	01400284 	movi	r5,10
   815e0:	1009883a 	mov	r4,r2
   815e4:	00818640 	call	81864 <__umodsi3>
   815e8:	10ffffcc 	andi	r3,r2,65535
   815ec:	00800274 	movhi	r2,9
   815f0:	1084ba04 	addi	r2,r2,4840
   815f4:	10c5883a 	add	r2,r2,r3
   815f8:	10800003 	ldbu	r2,0(r2)

void display_number(alt_u16 number) {
 	alt_u32 mask = 0;
	if (number/100 != 0) {
		mask |= (char_array_2[number/100] << 14) | 
				(char_array_1[(number%100)/10] << 7) | 
   815fc:	10803fcc 	andi	r2,r2,255
   81600:	8084b03a 	or	r2,r16,r2
#include "segments_display.h"

void display_number(alt_u16 number) {
 	alt_u32 mask = 0;
	if (number/100 != 0) {
		mask |= (char_array_2[number/100] << 14) | 
   81604:	1007883a 	mov	r3,r2
   81608:	e0bffd17 	ldw	r2,-12(fp)
   8160c:	10c4b03a 	or	r2,r2,r3
   81610:	e0bffd15 	stw	r2,-12(fp)
   81614:	00002f06 	br	816d4 <display_number+0x194>
				(char_array_1[(number%100)/10] << 7) | 
				(char_array_1[number%10]);
	} else if (number/10 != 0) {
   81618:	e0bffe0b 	ldhu	r2,-8(fp)
   8161c:	108002b0 	cmpltui	r2,r2,10
   81620:	10001f1e 	bne	r2,zero,816a0 <display_number+0x160>
		mask |= (char_array_1[(number%100)/10] << 7) | 
   81624:	e0bffe0b 	ldhu	r2,-8(fp)
   81628:	01401904 	movi	r5,100
   8162c:	1009883a 	mov	r4,r2
   81630:	00818640 	call	81864 <__umodsi3>
   81634:	10bfffcc 	andi	r2,r2,65535
   81638:	01400284 	movi	r5,10
   8163c:	1009883a 	mov	r4,r2
   81640:	00818000 	call	81800 <__udivsi3>
   81644:	10ffffcc 	andi	r3,r2,65535
   81648:	00800274 	movhi	r2,9
   8164c:	1084ba04 	addi	r2,r2,4840
   81650:	10c5883a 	add	r2,r2,r3
   81654:	10800003 	ldbu	r2,0(r2)
   81658:	10803fcc 	andi	r2,r2,255
   8165c:	102091fa 	slli	r16,r2,7
				(char_array_1[number%10]);
   81660:	e0bffe0b 	ldhu	r2,-8(fp)
   81664:	01400284 	movi	r5,10
   81668:	1009883a 	mov	r4,r2
   8166c:	00818640 	call	81864 <__umodsi3>
   81670:	10ffffcc 	andi	r3,r2,65535
   81674:	00800274 	movhi	r2,9
   81678:	1084ba04 	addi	r2,r2,4840
   8167c:	10c5883a 	add	r2,r2,r3
   81680:	10800003 	ldbu	r2,0(r2)
	if (number/100 != 0) {
		mask |= (char_array_2[number/100] << 14) | 
				(char_array_1[(number%100)/10] << 7) | 
				(char_array_1[number%10]);
	} else if (number/10 != 0) {
		mask |= (char_array_1[(number%100)/10] << 7) | 
   81684:	10803fcc 	andi	r2,r2,255
   81688:	8084b03a 	or	r2,r16,r2
   8168c:	1007883a 	mov	r3,r2
   81690:	e0bffd17 	ldw	r2,-12(fp)
   81694:	10c4b03a 	or	r2,r2,r3
   81698:	e0bffd15 	stw	r2,-12(fp)
   8169c:	00000d06 	br	816d4 <display_number+0x194>
				(char_array_1[number%10]);
	} else {
		mask |= (char_array_1[number%10]);
   816a0:	e0bffe0b 	ldhu	r2,-8(fp)
   816a4:	01400284 	movi	r5,10
   816a8:	1009883a 	mov	r4,r2
   816ac:	00818640 	call	81864 <__umodsi3>
   816b0:	10ffffcc 	andi	r3,r2,65535
   816b4:	00800274 	movhi	r2,9
   816b8:	1084ba04 	addi	r2,r2,4840
   816bc:	10c5883a 	add	r2,r2,r3
   816c0:	10800003 	ldbu	r2,0(r2)
   816c4:	10803fcc 	andi	r2,r2,255
   816c8:	e0fffd17 	ldw	r3,-12(fp)
   816cc:	1884b03a 	or	r2,r3,r2
   816d0:	e0bffd15 	stw	r2,-12(fp)
	}
	IOWR_32DIRECT(SEGMENTS_DISPLAY_BASE, 0, ~mask);
   816d4:	e0bffd17 	ldw	r2,-12(fp)
   816d8:	0084303a 	nor	r2,zero,r2
   816dc:	1007883a 	mov	r3,r2
   816e0:	00800434 	movhi	r2,16
   816e4:	10840804 	addi	r2,r2,4128
   816e8:	10c00035 	stwio	r3,0(r2)
}
   816ec:	0001883a 	nop
   816f0:	e6ffff04 	addi	sp,fp,-4
   816f4:	dfc00217 	ldw	ra,8(sp)
   816f8:	df000117 	ldw	fp,4(sp)
   816fc:	dc000017 	ldw	r16,0(sp)
   81700:	dec00304 	addi	sp,sp,12
   81704:	f800283a 	ret

00081708 <__divsi3>:
   81708:	20001b16 	blt	r4,zero,81778 <__divsi3+0x70>
   8170c:	000f883a 	mov	r7,zero
   81710:	28001616 	blt	r5,zero,8176c <__divsi3+0x64>
   81714:	200d883a 	mov	r6,r4
   81718:	29001a2e 	bgeu	r5,r4,81784 <__divsi3+0x7c>
   8171c:	00800804 	movi	r2,32
   81720:	00c00044 	movi	r3,1
   81724:	00000106 	br	8172c <__divsi3+0x24>
   81728:	10000d26 	beq	r2,zero,81760 <__divsi3+0x58>
   8172c:	294b883a 	add	r5,r5,r5
   81730:	10bfffc4 	addi	r2,r2,-1
   81734:	18c7883a 	add	r3,r3,r3
   81738:	293ffb36 	bltu	r5,r4,81728 <__alt_data_end+0xfff9fca8>
   8173c:	0005883a 	mov	r2,zero
   81740:	18000726 	beq	r3,zero,81760 <__divsi3+0x58>
   81744:	0005883a 	mov	r2,zero
   81748:	31400236 	bltu	r6,r5,81754 <__divsi3+0x4c>
   8174c:	314dc83a 	sub	r6,r6,r5
   81750:	10c4b03a 	or	r2,r2,r3
   81754:	1806d07a 	srli	r3,r3,1
   81758:	280ad07a 	srli	r5,r5,1
   8175c:	183ffa1e 	bne	r3,zero,81748 <__alt_data_end+0xfff9fcc8>
   81760:	38000126 	beq	r7,zero,81768 <__divsi3+0x60>
   81764:	0085c83a 	sub	r2,zero,r2
   81768:	f800283a 	ret
   8176c:	014bc83a 	sub	r5,zero,r5
   81770:	39c0005c 	xori	r7,r7,1
   81774:	003fe706 	br	81714 <__alt_data_end+0xfff9fc94>
   81778:	0109c83a 	sub	r4,zero,r4
   8177c:	01c00044 	movi	r7,1
   81780:	003fe306 	br	81710 <__alt_data_end+0xfff9fc90>
   81784:	00c00044 	movi	r3,1
   81788:	003fee06 	br	81744 <__alt_data_end+0xfff9fcc4>

0008178c <__modsi3>:
   8178c:	20001716 	blt	r4,zero,817ec <__modsi3+0x60>
   81790:	000f883a 	mov	r7,zero
   81794:	2005883a 	mov	r2,r4
   81798:	28001216 	blt	r5,zero,817e4 <__modsi3+0x58>
   8179c:	2900162e 	bgeu	r5,r4,817f8 <__modsi3+0x6c>
   817a0:	01800804 	movi	r6,32
   817a4:	00c00044 	movi	r3,1
   817a8:	00000106 	br	817b0 <__modsi3+0x24>
   817ac:	30000a26 	beq	r6,zero,817d8 <__modsi3+0x4c>
   817b0:	294b883a 	add	r5,r5,r5
   817b4:	31bfffc4 	addi	r6,r6,-1
   817b8:	18c7883a 	add	r3,r3,r3
   817bc:	293ffb36 	bltu	r5,r4,817ac <__alt_data_end+0xfff9fd2c>
   817c0:	18000526 	beq	r3,zero,817d8 <__modsi3+0x4c>
   817c4:	1806d07a 	srli	r3,r3,1
   817c8:	11400136 	bltu	r2,r5,817d0 <__modsi3+0x44>
   817cc:	1145c83a 	sub	r2,r2,r5
   817d0:	280ad07a 	srli	r5,r5,1
   817d4:	183ffb1e 	bne	r3,zero,817c4 <__alt_data_end+0xfff9fd44>
   817d8:	38000126 	beq	r7,zero,817e0 <__modsi3+0x54>
   817dc:	0085c83a 	sub	r2,zero,r2
   817e0:	f800283a 	ret
   817e4:	014bc83a 	sub	r5,zero,r5
   817e8:	003fec06 	br	8179c <__alt_data_end+0xfff9fd1c>
   817ec:	0109c83a 	sub	r4,zero,r4
   817f0:	01c00044 	movi	r7,1
   817f4:	003fe706 	br	81794 <__alt_data_end+0xfff9fd14>
   817f8:	00c00044 	movi	r3,1
   817fc:	003ff106 	br	817c4 <__alt_data_end+0xfff9fd44>

00081800 <__udivsi3>:
   81800:	200d883a 	mov	r6,r4
   81804:	2900152e 	bgeu	r5,r4,8185c <__udivsi3+0x5c>
   81808:	28001416 	blt	r5,zero,8185c <__udivsi3+0x5c>
   8180c:	00800804 	movi	r2,32
   81810:	00c00044 	movi	r3,1
   81814:	00000206 	br	81820 <__udivsi3+0x20>
   81818:	10000e26 	beq	r2,zero,81854 <__udivsi3+0x54>
   8181c:	28000516 	blt	r5,zero,81834 <__udivsi3+0x34>
   81820:	294b883a 	add	r5,r5,r5
   81824:	10bfffc4 	addi	r2,r2,-1
   81828:	18c7883a 	add	r3,r3,r3
   8182c:	293ffa36 	bltu	r5,r4,81818 <__alt_data_end+0xfff9fd98>
   81830:	18000826 	beq	r3,zero,81854 <__udivsi3+0x54>
   81834:	0005883a 	mov	r2,zero
   81838:	31400236 	bltu	r6,r5,81844 <__udivsi3+0x44>
   8183c:	314dc83a 	sub	r6,r6,r5
   81840:	10c4b03a 	or	r2,r2,r3
   81844:	1806d07a 	srli	r3,r3,1
   81848:	280ad07a 	srli	r5,r5,1
   8184c:	183ffa1e 	bne	r3,zero,81838 <__alt_data_end+0xfff9fdb8>
   81850:	f800283a 	ret
   81854:	0005883a 	mov	r2,zero
   81858:	f800283a 	ret
   8185c:	00c00044 	movi	r3,1
   81860:	003ff406 	br	81834 <__alt_data_end+0xfff9fdb4>

00081864 <__umodsi3>:
   81864:	2005883a 	mov	r2,r4
   81868:	2900122e 	bgeu	r5,r4,818b4 <__umodsi3+0x50>
   8186c:	28001116 	blt	r5,zero,818b4 <__umodsi3+0x50>
   81870:	01800804 	movi	r6,32
   81874:	00c00044 	movi	r3,1
   81878:	00000206 	br	81884 <__umodsi3+0x20>
   8187c:	30000c26 	beq	r6,zero,818b0 <__umodsi3+0x4c>
   81880:	28000516 	blt	r5,zero,81898 <__umodsi3+0x34>
   81884:	294b883a 	add	r5,r5,r5
   81888:	31bfffc4 	addi	r6,r6,-1
   8188c:	18c7883a 	add	r3,r3,r3
   81890:	293ffa36 	bltu	r5,r4,8187c <__alt_data_end+0xfff9fdfc>
   81894:	18000626 	beq	r3,zero,818b0 <__umodsi3+0x4c>
   81898:	1806d07a 	srli	r3,r3,1
   8189c:	11400136 	bltu	r2,r5,818a4 <__umodsi3+0x40>
   818a0:	1145c83a 	sub	r2,r2,r5
   818a4:	280ad07a 	srli	r5,r5,1
   818a8:	183ffb1e 	bne	r3,zero,81898 <__alt_data_end+0xfff9fe18>
   818ac:	f800283a 	ret
   818b0:	f800283a 	ret
   818b4:	00c00044 	movi	r3,1
   818b8:	003ff706 	br	81898 <__alt_data_end+0xfff9fe18>

000818bc <_printf_r>:
   818bc:	defffd04 	addi	sp,sp,-12
   818c0:	2805883a 	mov	r2,r5
   818c4:	dfc00015 	stw	ra,0(sp)
   818c8:	d9800115 	stw	r6,4(sp)
   818cc:	d9c00215 	stw	r7,8(sp)
   818d0:	21400217 	ldw	r5,8(r4)
   818d4:	d9c00104 	addi	r7,sp,4
   818d8:	100d883a 	mov	r6,r2
   818dc:	0081b600 	call	81b60 <___vfprintf_internal_r>
   818e0:	dfc00017 	ldw	ra,0(sp)
   818e4:	dec00304 	addi	sp,sp,12
   818e8:	f800283a 	ret

000818ec <printf>:
   818ec:	defffc04 	addi	sp,sp,-16
   818f0:	dfc00015 	stw	ra,0(sp)
   818f4:	d9400115 	stw	r5,4(sp)
   818f8:	d9800215 	stw	r6,8(sp)
   818fc:	d9c00315 	stw	r7,12(sp)
   81900:	00800274 	movhi	r2,9
   81904:	108b6b04 	addi	r2,r2,11692
   81908:	10800017 	ldw	r2,0(r2)
   8190c:	200b883a 	mov	r5,r4
   81910:	d9800104 	addi	r6,sp,4
   81914:	11000217 	ldw	r4,8(r2)
   81918:	0083d580 	call	83d58 <__vfprintf_internal>
   8191c:	dfc00017 	ldw	ra,0(sp)
   81920:	dec00404 	addi	sp,sp,16
   81924:	f800283a 	ret

00081928 <_puts_r>:
   81928:	defff604 	addi	sp,sp,-40
   8192c:	dc000715 	stw	r16,28(sp)
   81930:	2021883a 	mov	r16,r4
   81934:	2809883a 	mov	r4,r5
   81938:	dc400815 	stw	r17,32(sp)
   8193c:	dfc00915 	stw	ra,36(sp)
   81940:	2823883a 	mov	r17,r5
   81944:	0081a780 	call	81a78 <strlen>
   81948:	10c00044 	addi	r3,r2,1
   8194c:	d8800115 	stw	r2,4(sp)
   81950:	00800274 	movhi	r2,9
   81954:	10837a04 	addi	r2,r2,3560
   81958:	d8800215 	stw	r2,8(sp)
   8195c:	00800044 	movi	r2,1
   81960:	d8800315 	stw	r2,12(sp)
   81964:	00800084 	movi	r2,2
   81968:	dc400015 	stw	r17,0(sp)
   8196c:	d8c00615 	stw	r3,24(sp)
   81970:	dec00415 	stw	sp,16(sp)
   81974:	d8800515 	stw	r2,20(sp)
   81978:	80000226 	beq	r16,zero,81984 <_puts_r+0x5c>
   8197c:	80800e17 	ldw	r2,56(r16)
   81980:	10001426 	beq	r2,zero,819d4 <_puts_r+0xac>
   81984:	81400217 	ldw	r5,8(r16)
   81988:	2880030b 	ldhu	r2,12(r5)
   8198c:	10c8000c 	andi	r3,r2,8192
   81990:	1800061e 	bne	r3,zero,819ac <_puts_r+0x84>
   81994:	29001917 	ldw	r4,100(r5)
   81998:	00f7ffc4 	movi	r3,-8193
   8199c:	10880014 	ori	r2,r2,8192
   819a0:	20c6703a 	and	r3,r4,r3
   819a4:	2880030d 	sth	r2,12(r5)
   819a8:	28c01915 	stw	r3,100(r5)
   819ac:	d9800404 	addi	r6,sp,16
   819b0:	8009883a 	mov	r4,r16
   819b4:	00862880 	call	86288 <__sfvwrite_r>
   819b8:	1000091e 	bne	r2,zero,819e0 <_puts_r+0xb8>
   819bc:	00800284 	movi	r2,10
   819c0:	dfc00917 	ldw	ra,36(sp)
   819c4:	dc400817 	ldw	r17,32(sp)
   819c8:	dc000717 	ldw	r16,28(sp)
   819cc:	dec00a04 	addi	sp,sp,40
   819d0:	f800283a 	ret
   819d4:	8009883a 	mov	r4,r16
   819d8:	0085e040 	call	85e04 <__sinit>
   819dc:	003fe906 	br	81984 <__alt_data_end+0xfff9ff04>
   819e0:	00bfffc4 	movi	r2,-1
   819e4:	003ff606 	br	819c0 <__alt_data_end+0xfff9ff40>

000819e8 <puts>:
   819e8:	00800274 	movhi	r2,9
   819ec:	108b6b04 	addi	r2,r2,11692
   819f0:	200b883a 	mov	r5,r4
   819f4:	11000017 	ldw	r4,0(r2)
   819f8:	00819281 	jmpi	81928 <_puts_r>

000819fc <srand>:
   819fc:	00800274 	movhi	r2,9
   81a00:	108b6b04 	addi	r2,r2,11692
   81a04:	10800017 	ldw	r2,0(r2)
   81a08:	11002915 	stw	r4,164(r2)
   81a0c:	10002a15 	stw	zero,168(r2)
   81a10:	f800283a 	ret

00081a14 <rand>:
   81a14:	00800274 	movhi	r2,9
   81a18:	defffe04 	addi	sp,sp,-8
   81a1c:	108b6b04 	addi	r2,r2,11692
   81a20:	dc000015 	stw	r16,0(sp)
   81a24:	14000017 	ldw	r16,0(r2)
   81a28:	dfc00115 	stw	ra,4(sp)
   81a2c:	01932574 	movhi	r6,19605
   81a30:	81002917 	ldw	r4,164(r16)
   81a34:	81402a17 	ldw	r5,168(r16)
   81a38:	01d614b4 	movhi	r7,22610
   81a3c:	319fcb44 	addi	r6,r6,32557
   81a40:	39fd0b44 	addi	r7,r7,-3027
   81a44:	008b0380 	call	8b038 <__muldi3>
   81a48:	11000044 	addi	r4,r2,1
   81a4c:	2085803a 	cmpltu	r2,r4,r2
   81a50:	10c7883a 	add	r3,r2,r3
   81a54:	00a00034 	movhi	r2,32768
   81a58:	10bfffc4 	addi	r2,r2,-1
   81a5c:	1884703a 	and	r2,r3,r2
   81a60:	81002915 	stw	r4,164(r16)
   81a64:	80c02a15 	stw	r3,168(r16)
   81a68:	dfc00117 	ldw	ra,4(sp)
   81a6c:	dc000017 	ldw	r16,0(sp)
   81a70:	dec00204 	addi	sp,sp,8
   81a74:	f800283a 	ret

00081a78 <strlen>:
   81a78:	208000cc 	andi	r2,r4,3
   81a7c:	10002026 	beq	r2,zero,81b00 <strlen+0x88>
   81a80:	20800007 	ldb	r2,0(r4)
   81a84:	10002026 	beq	r2,zero,81b08 <strlen+0x90>
   81a88:	2005883a 	mov	r2,r4
   81a8c:	00000206 	br	81a98 <strlen+0x20>
   81a90:	10c00007 	ldb	r3,0(r2)
   81a94:	18001826 	beq	r3,zero,81af8 <strlen+0x80>
   81a98:	10800044 	addi	r2,r2,1
   81a9c:	10c000cc 	andi	r3,r2,3
   81aa0:	183ffb1e 	bne	r3,zero,81a90 <__alt_data_end+0xfffa0010>
   81aa4:	10c00017 	ldw	r3,0(r2)
   81aa8:	01ffbff4 	movhi	r7,65279
   81aac:	39ffbfc4 	addi	r7,r7,-257
   81ab0:	00ca303a 	nor	r5,zero,r3
   81ab4:	01a02074 	movhi	r6,32897
   81ab8:	19c7883a 	add	r3,r3,r7
   81abc:	31a02004 	addi	r6,r6,-32640
   81ac0:	1946703a 	and	r3,r3,r5
   81ac4:	1986703a 	and	r3,r3,r6
   81ac8:	1800091e 	bne	r3,zero,81af0 <strlen+0x78>
   81acc:	10800104 	addi	r2,r2,4
   81ad0:	10c00017 	ldw	r3,0(r2)
   81ad4:	19cb883a 	add	r5,r3,r7
   81ad8:	00c6303a 	nor	r3,zero,r3
   81adc:	28c6703a 	and	r3,r5,r3
   81ae0:	1986703a 	and	r3,r3,r6
   81ae4:	183ff926 	beq	r3,zero,81acc <__alt_data_end+0xfffa004c>
   81ae8:	00000106 	br	81af0 <strlen+0x78>
   81aec:	10800044 	addi	r2,r2,1
   81af0:	10c00007 	ldb	r3,0(r2)
   81af4:	183ffd1e 	bne	r3,zero,81aec <__alt_data_end+0xfffa006c>
   81af8:	1105c83a 	sub	r2,r2,r4
   81afc:	f800283a 	ret
   81b00:	2005883a 	mov	r2,r4
   81b04:	003fe706 	br	81aa4 <__alt_data_end+0xfffa0024>
   81b08:	0005883a 	mov	r2,zero
   81b0c:	f800283a 	ret

00081b10 <time>:
   81b10:	00800274 	movhi	r2,9
   81b14:	defffc04 	addi	sp,sp,-16
   81b18:	108b6b04 	addi	r2,r2,11692
   81b1c:	dc000215 	stw	r16,8(sp)
   81b20:	2021883a 	mov	r16,r4
   81b24:	11000017 	ldw	r4,0(r2)
   81b28:	000d883a 	mov	r6,zero
   81b2c:	d80b883a 	mov	r5,sp
   81b30:	dfc00315 	stw	ra,12(sp)
   81b34:	00868cc0 	call	868cc <_gettimeofday_r>
   81b38:	10000716 	blt	r2,zero,81b58 <time+0x48>
   81b3c:	d8800017 	ldw	r2,0(sp)
   81b40:	80000126 	beq	r16,zero,81b48 <time+0x38>
   81b44:	80800015 	stw	r2,0(r16)
   81b48:	dfc00317 	ldw	ra,12(sp)
   81b4c:	dc000217 	ldw	r16,8(sp)
   81b50:	dec00404 	addi	sp,sp,16
   81b54:	f800283a 	ret
   81b58:	00bfffc4 	movi	r2,-1
   81b5c:	003ffa06 	br	81b48 <__alt_data_end+0xfffa00c8>

00081b60 <___vfprintf_internal_r>:
   81b60:	deffb804 	addi	sp,sp,-288
   81b64:	dfc04715 	stw	ra,284(sp)
   81b68:	ddc04515 	stw	r23,276(sp)
   81b6c:	dd404315 	stw	r21,268(sp)
   81b70:	d9002c15 	stw	r4,176(sp)
   81b74:	282f883a 	mov	r23,r5
   81b78:	302b883a 	mov	r21,r6
   81b7c:	d9c02d15 	stw	r7,180(sp)
   81b80:	df004615 	stw	fp,280(sp)
   81b84:	dd804415 	stw	r22,272(sp)
   81b88:	dd004215 	stw	r20,264(sp)
   81b8c:	dcc04115 	stw	r19,260(sp)
   81b90:	dc804015 	stw	r18,256(sp)
   81b94:	dc403f15 	stw	r17,252(sp)
   81b98:	dc003e15 	stw	r16,248(sp)
   81b9c:	00869d40 	call	869d4 <_localeconv_r>
   81ba0:	10800017 	ldw	r2,0(r2)
   81ba4:	1009883a 	mov	r4,r2
   81ba8:	d8803415 	stw	r2,208(sp)
   81bac:	0081a780 	call	81a78 <strlen>
   81bb0:	d8803715 	stw	r2,220(sp)
   81bb4:	d8802c17 	ldw	r2,176(sp)
   81bb8:	10000226 	beq	r2,zero,81bc4 <___vfprintf_internal_r+0x64>
   81bbc:	10800e17 	ldw	r2,56(r2)
   81bc0:	1000f926 	beq	r2,zero,81fa8 <___vfprintf_internal_r+0x448>
   81bc4:	b880030b 	ldhu	r2,12(r23)
   81bc8:	10c8000c 	andi	r3,r2,8192
   81bcc:	1800061e 	bne	r3,zero,81be8 <___vfprintf_internal_r+0x88>
   81bd0:	b9001917 	ldw	r4,100(r23)
   81bd4:	00f7ffc4 	movi	r3,-8193
   81bd8:	10880014 	ori	r2,r2,8192
   81bdc:	20c6703a 	and	r3,r4,r3
   81be0:	b880030d 	sth	r2,12(r23)
   81be4:	b8c01915 	stw	r3,100(r23)
   81be8:	10c0020c 	andi	r3,r2,8
   81bec:	1800c126 	beq	r3,zero,81ef4 <___vfprintf_internal_r+0x394>
   81bf0:	b8c00417 	ldw	r3,16(r23)
   81bf4:	1800bf26 	beq	r3,zero,81ef4 <___vfprintf_internal_r+0x394>
   81bf8:	1080068c 	andi	r2,r2,26
   81bfc:	00c00284 	movi	r3,10
   81c00:	10c0c426 	beq	r2,r3,81f14 <___vfprintf_internal_r+0x3b4>
   81c04:	d8c00404 	addi	r3,sp,16
   81c08:	05000274 	movhi	r20,9
   81c0c:	d9001e04 	addi	r4,sp,120
   81c10:	a5038b84 	addi	r20,r20,3630
   81c14:	d8c01e15 	stw	r3,120(sp)
   81c18:	d8002015 	stw	zero,128(sp)
   81c1c:	d8001f15 	stw	zero,124(sp)
   81c20:	d8003315 	stw	zero,204(sp)
   81c24:	d8003615 	stw	zero,216(sp)
   81c28:	d8003815 	stw	zero,224(sp)
   81c2c:	1811883a 	mov	r8,r3
   81c30:	d8003915 	stw	zero,228(sp)
   81c34:	d8003a15 	stw	zero,232(sp)
   81c38:	d8002f15 	stw	zero,188(sp)
   81c3c:	d9002815 	stw	r4,160(sp)
   81c40:	a8800007 	ldb	r2,0(r21)
   81c44:	10027b26 	beq	r2,zero,82634 <___vfprintf_internal_r+0xad4>
   81c48:	00c00944 	movi	r3,37
   81c4c:	a821883a 	mov	r16,r21
   81c50:	10c0021e 	bne	r2,r3,81c5c <___vfprintf_internal_r+0xfc>
   81c54:	00001406 	br	81ca8 <___vfprintf_internal_r+0x148>
   81c58:	10c00326 	beq	r2,r3,81c68 <___vfprintf_internal_r+0x108>
   81c5c:	84000044 	addi	r16,r16,1
   81c60:	80800007 	ldb	r2,0(r16)
   81c64:	103ffc1e 	bne	r2,zero,81c58 <__alt_data_end+0xfffa01d8>
   81c68:	8563c83a 	sub	r17,r16,r21
   81c6c:	88000e26 	beq	r17,zero,81ca8 <___vfprintf_internal_r+0x148>
   81c70:	d8c02017 	ldw	r3,128(sp)
   81c74:	d8801f17 	ldw	r2,124(sp)
   81c78:	45400015 	stw	r21,0(r8)
   81c7c:	1c47883a 	add	r3,r3,r17
   81c80:	10800044 	addi	r2,r2,1
   81c84:	d8c02015 	stw	r3,128(sp)
   81c88:	44400115 	stw	r17,4(r8)
   81c8c:	d8801f15 	stw	r2,124(sp)
   81c90:	00c001c4 	movi	r3,7
   81c94:	1880a716 	blt	r3,r2,81f34 <___vfprintf_internal_r+0x3d4>
   81c98:	42000204 	addi	r8,r8,8
   81c9c:	d9402f17 	ldw	r5,188(sp)
   81ca0:	2c4b883a 	add	r5,r5,r17
   81ca4:	d9402f15 	stw	r5,188(sp)
   81ca8:	80800007 	ldb	r2,0(r16)
   81cac:	1000a826 	beq	r2,zero,81f50 <___vfprintf_internal_r+0x3f0>
   81cb0:	84400047 	ldb	r17,1(r16)
   81cb4:	00bfffc4 	movi	r2,-1
   81cb8:	85400044 	addi	r21,r16,1
   81cbc:	d8002785 	stb	zero,158(sp)
   81cc0:	0007883a 	mov	r3,zero
   81cc4:	000f883a 	mov	r7,zero
   81cc8:	d8802915 	stw	r2,164(sp)
   81ccc:	d8003115 	stw	zero,196(sp)
   81cd0:	0025883a 	mov	r18,zero
   81cd4:	01401604 	movi	r5,88
   81cd8:	01800244 	movi	r6,9
   81cdc:	02800a84 	movi	r10,42
   81ce0:	02401b04 	movi	r9,108
   81ce4:	ad400044 	addi	r21,r21,1
   81ce8:	88bff804 	addi	r2,r17,-32
   81cec:	28830436 	bltu	r5,r2,82900 <___vfprintf_internal_r+0xda0>
   81cf0:	100490ba 	slli	r2,r2,2
   81cf4:	01000234 	movhi	r4,8
   81cf8:	21074204 	addi	r4,r4,7432
   81cfc:	1105883a 	add	r2,r2,r4
   81d00:	10800017 	ldw	r2,0(r2)
   81d04:	1000683a 	jmp	r2
   81d08:	00082820 	cmpeqi	zero,zero,8352
   81d0c:	00082900 	call	8290 <__reset-0x77d70>
   81d10:	00082900 	call	8290 <__reset-0x77d70>
   81d14:	00082840 	call	8284 <__reset-0x77d7c>
   81d18:	00082900 	call	8290 <__reset-0x77d70>
   81d1c:	00082900 	call	8290 <__reset-0x77d70>
   81d20:	00082900 	call	8290 <__reset-0x77d70>
   81d24:	00082900 	call	8290 <__reset-0x77d70>
   81d28:	00082900 	call	8290 <__reset-0x77d70>
   81d2c:	00082900 	call	8290 <__reset-0x77d70>
   81d30:	00081fb4 	movhi	zero,8318
   81d34:	0008275c 	xori	zero,zero,8349
   81d38:	00082900 	call	8290 <__reset-0x77d70>
   81d3c:	00081e7c 	xorhi	zero,zero,8313
   81d40:	00081fdc 	xori	zero,zero,8319
   81d44:	00082900 	call	8290 <__reset-0x77d70>
   81d48:	0008201c 	xori	zero,zero,8320
   81d4c:	00082028 	cmpgeui	zero,zero,8320
   81d50:	00082028 	cmpgeui	zero,zero,8320
   81d54:	00082028 	cmpgeui	zero,zero,8320
   81d58:	00082028 	cmpgeui	zero,zero,8320
   81d5c:	00082028 	cmpgeui	zero,zero,8320
   81d60:	00082028 	cmpgeui	zero,zero,8320
   81d64:	00082028 	cmpgeui	zero,zero,8320
   81d68:	00082028 	cmpgeui	zero,zero,8320
   81d6c:	00082028 	cmpgeui	zero,zero,8320
   81d70:	00082900 	call	8290 <__reset-0x77d70>
   81d74:	00082900 	call	8290 <__reset-0x77d70>
   81d78:	00082900 	call	8290 <__reset-0x77d70>
   81d7c:	00082900 	call	8290 <__reset-0x77d70>
   81d80:	00082900 	call	8290 <__reset-0x77d70>
   81d84:	00082900 	call	8290 <__reset-0x77d70>
   81d88:	00082900 	call	8290 <__reset-0x77d70>
   81d8c:	00082900 	call	8290 <__reset-0x77d70>
   81d90:	00082900 	call	8290 <__reset-0x77d70>
   81d94:	00082900 	call	8290 <__reset-0x77d70>
   81d98:	0008205c 	xori	zero,zero,8321
   81d9c:	00082118 	cmpnei	zero,zero,8324
   81da0:	00082900 	call	8290 <__reset-0x77d70>
   81da4:	00082118 	cmpnei	zero,zero,8324
   81da8:	00082900 	call	8290 <__reset-0x77d70>
   81dac:	00082900 	call	8290 <__reset-0x77d70>
   81db0:	00082900 	call	8290 <__reset-0x77d70>
   81db4:	00082900 	call	8290 <__reset-0x77d70>
   81db8:	000821b8 	rdprs	zero,zero,8326
   81dbc:	00082900 	call	8290 <__reset-0x77d70>
   81dc0:	00082900 	call	8290 <__reset-0x77d70>
   81dc4:	000821c4 	movi	zero,8327
   81dc8:	00082900 	call	8290 <__reset-0x77d70>
   81dcc:	00082900 	call	8290 <__reset-0x77d70>
   81dd0:	00082900 	call	8290 <__reset-0x77d70>
   81dd4:	00082900 	call	8290 <__reset-0x77d70>
   81dd8:	00082900 	call	8290 <__reset-0x77d70>
   81ddc:	0008263c 	xorhi	zero,zero,8344
   81de0:	00082900 	call	8290 <__reset-0x77d70>
   81de4:	00082900 	call	8290 <__reset-0x77d70>
   81de8:	0008269c 	xori	zero,zero,8346
   81dec:	00082900 	call	8290 <__reset-0x77d70>
   81df0:	00082900 	call	8290 <__reset-0x77d70>
   81df4:	00082900 	call	8290 <__reset-0x77d70>
   81df8:	00082900 	call	8290 <__reset-0x77d70>
   81dfc:	00082900 	call	8290 <__reset-0x77d70>
   81e00:	00082900 	call	8290 <__reset-0x77d70>
   81e04:	00082900 	call	8290 <__reset-0x77d70>
   81e08:	00082900 	call	8290 <__reset-0x77d70>
   81e0c:	00082900 	call	8290 <__reset-0x77d70>
   81e10:	00082900 	call	8290 <__reset-0x77d70>
   81e14:	000828ac 	andhi	zero,zero,8354
   81e18:	0008284c 	andi	zero,zero,8353
   81e1c:	00082118 	cmpnei	zero,zero,8324
   81e20:	00082118 	cmpnei	zero,zero,8324
   81e24:	00082118 	cmpnei	zero,zero,8324
   81e28:	0008285c 	xori	zero,zero,8353
   81e2c:	0008284c 	andi	zero,zero,8353
   81e30:	00082900 	call	8290 <__reset-0x77d70>
   81e34:	00082900 	call	8290 <__reset-0x77d70>
   81e38:	00082868 	cmpgeui	zero,zero,8353
   81e3c:	00082900 	call	8290 <__reset-0x77d70>
   81e40:	00082878 	rdprs	zero,zero,8353
   81e44:	0008274c 	andi	zero,zero,8349
   81e48:	00081e88 	cmpgei	zero,zero,8314
   81e4c:	0008276c 	andhi	zero,zero,8349
   81e50:	00082900 	call	8290 <__reset-0x77d70>
   81e54:	00082778 	rdprs	zero,zero,8349
   81e58:	00082900 	call	8290 <__reset-0x77d70>
   81e5c:	000827d4 	movui	zero,8351
   81e60:	00082900 	call	8290 <__reset-0x77d70>
   81e64:	00082900 	call	8290 <__reset-0x77d70>
   81e68:	000827e4 	muli	zero,zero,8351
   81e6c:	d9003117 	ldw	r4,196(sp)
   81e70:	d8802d15 	stw	r2,180(sp)
   81e74:	0109c83a 	sub	r4,zero,r4
   81e78:	d9003115 	stw	r4,196(sp)
   81e7c:	94800114 	ori	r18,r18,4
   81e80:	ac400007 	ldb	r17,0(r21)
   81e84:	003f9706 	br	81ce4 <__alt_data_end+0xfffa0264>
   81e88:	00800c04 	movi	r2,48
   81e8c:	d9002d17 	ldw	r4,180(sp)
   81e90:	d9402917 	ldw	r5,164(sp)
   81e94:	d8802705 	stb	r2,156(sp)
   81e98:	00801e04 	movi	r2,120
   81e9c:	d8802745 	stb	r2,157(sp)
   81ea0:	d8002785 	stb	zero,158(sp)
   81ea4:	20c00104 	addi	r3,r4,4
   81ea8:	24c00017 	ldw	r19,0(r4)
   81eac:	002d883a 	mov	r22,zero
   81eb0:	90800094 	ori	r2,r18,2
   81eb4:	28029a16 	blt	r5,zero,82920 <___vfprintf_internal_r+0xdc0>
   81eb8:	00bfdfc4 	movi	r2,-129
   81ebc:	90a4703a 	and	r18,r18,r2
   81ec0:	d8c02d15 	stw	r3,180(sp)
   81ec4:	94800094 	ori	r18,r18,2
   81ec8:	9802871e 	bne	r19,zero,828e8 <___vfprintf_internal_r+0xd88>
   81ecc:	00800274 	movhi	r2,9
   81ed0:	10838404 	addi	r2,r2,3600
   81ed4:	d8803915 	stw	r2,228(sp)
   81ed8:	04401e04 	movi	r17,120
   81edc:	d8802917 	ldw	r2,164(sp)
   81ee0:	0039883a 	mov	fp,zero
   81ee4:	1001e926 	beq	r2,zero,8268c <___vfprintf_internal_r+0xb2c>
   81ee8:	0027883a 	mov	r19,zero
   81eec:	002d883a 	mov	r22,zero
   81ef0:	00020506 	br	82708 <___vfprintf_internal_r+0xba8>
   81ef4:	d9002c17 	ldw	r4,176(sp)
   81ef8:	b80b883a 	mov	r5,r23
   81efc:	0083e300 	call	83e30 <__swsetup_r>
   81f00:	1005ac1e 	bne	r2,zero,835b4 <___vfprintf_internal_r+0x1a54>
   81f04:	b880030b 	ldhu	r2,12(r23)
   81f08:	00c00284 	movi	r3,10
   81f0c:	1080068c 	andi	r2,r2,26
   81f10:	10ff3c1e 	bne	r2,r3,81c04 <__alt_data_end+0xfffa0184>
   81f14:	b880038f 	ldh	r2,14(r23)
   81f18:	103f3a16 	blt	r2,zero,81c04 <__alt_data_end+0xfffa0184>
   81f1c:	d9c02d17 	ldw	r7,180(sp)
   81f20:	d9002c17 	ldw	r4,176(sp)
   81f24:	a80d883a 	mov	r6,r21
   81f28:	b80b883a 	mov	r5,r23
   81f2c:	0083d740 	call	83d74 <__sbprintf>
   81f30:	00001106 	br	81f78 <___vfprintf_internal_r+0x418>
   81f34:	d9002c17 	ldw	r4,176(sp)
   81f38:	d9801e04 	addi	r6,sp,120
   81f3c:	b80b883a 	mov	r5,r23
   81f40:	00891b80 	call	891b8 <__sprint_r>
   81f44:	1000081e 	bne	r2,zero,81f68 <___vfprintf_internal_r+0x408>
   81f48:	da000404 	addi	r8,sp,16
   81f4c:	003f5306 	br	81c9c <__alt_data_end+0xfffa021c>
   81f50:	d8802017 	ldw	r2,128(sp)
   81f54:	10000426 	beq	r2,zero,81f68 <___vfprintf_internal_r+0x408>
   81f58:	d9002c17 	ldw	r4,176(sp)
   81f5c:	d9801e04 	addi	r6,sp,120
   81f60:	b80b883a 	mov	r5,r23
   81f64:	00891b80 	call	891b8 <__sprint_r>
   81f68:	b880030b 	ldhu	r2,12(r23)
   81f6c:	1080100c 	andi	r2,r2,64
   81f70:	1005901e 	bne	r2,zero,835b4 <___vfprintf_internal_r+0x1a54>
   81f74:	d8802f17 	ldw	r2,188(sp)
   81f78:	dfc04717 	ldw	ra,284(sp)
   81f7c:	df004617 	ldw	fp,280(sp)
   81f80:	ddc04517 	ldw	r23,276(sp)
   81f84:	dd804417 	ldw	r22,272(sp)
   81f88:	dd404317 	ldw	r21,268(sp)
   81f8c:	dd004217 	ldw	r20,264(sp)
   81f90:	dcc04117 	ldw	r19,260(sp)
   81f94:	dc804017 	ldw	r18,256(sp)
   81f98:	dc403f17 	ldw	r17,252(sp)
   81f9c:	dc003e17 	ldw	r16,248(sp)
   81fa0:	dec04804 	addi	sp,sp,288
   81fa4:	f800283a 	ret
   81fa8:	d9002c17 	ldw	r4,176(sp)
   81fac:	0085e040 	call	85e04 <__sinit>
   81fb0:	003f0406 	br	81bc4 <__alt_data_end+0xfffa0144>
   81fb4:	d8802d17 	ldw	r2,180(sp)
   81fb8:	d9002d17 	ldw	r4,180(sp)
   81fbc:	10800017 	ldw	r2,0(r2)
   81fc0:	d8803115 	stw	r2,196(sp)
   81fc4:	20800104 	addi	r2,r4,4
   81fc8:	d9003117 	ldw	r4,196(sp)
   81fcc:	203fa716 	blt	r4,zero,81e6c <__alt_data_end+0xfffa03ec>
   81fd0:	d8802d15 	stw	r2,180(sp)
   81fd4:	ac400007 	ldb	r17,0(r21)
   81fd8:	003f4206 	br	81ce4 <__alt_data_end+0xfffa0264>
   81fdc:	ac400007 	ldb	r17,0(r21)
   81fe0:	aac00044 	addi	r11,r21,1
   81fe4:	8a872826 	beq	r17,r10,83c88 <___vfprintf_internal_r+0x2128>
   81fe8:	88bff404 	addi	r2,r17,-48
   81fec:	0009883a 	mov	r4,zero
   81ff0:	30867d36 	bltu	r6,r2,839e8 <___vfprintf_internal_r+0x1e88>
   81ff4:	5c400007 	ldb	r17,0(r11)
   81ff8:	210002a4 	muli	r4,r4,10
   81ffc:	5d400044 	addi	r21,r11,1
   82000:	a817883a 	mov	r11,r21
   82004:	2089883a 	add	r4,r4,r2
   82008:	88bff404 	addi	r2,r17,-48
   8200c:	30bff92e 	bgeu	r6,r2,81ff4 <__alt_data_end+0xfffa0574>
   82010:	2005c916 	blt	r4,zero,83738 <___vfprintf_internal_r+0x1bd8>
   82014:	d9002915 	stw	r4,164(sp)
   82018:	003f3306 	br	81ce8 <__alt_data_end+0xfffa0268>
   8201c:	94802014 	ori	r18,r18,128
   82020:	ac400007 	ldb	r17,0(r21)
   82024:	003f2f06 	br	81ce4 <__alt_data_end+0xfffa0264>
   82028:	a809883a 	mov	r4,r21
   8202c:	d8003115 	stw	zero,196(sp)
   82030:	88bff404 	addi	r2,r17,-48
   82034:	0017883a 	mov	r11,zero
   82038:	24400007 	ldb	r17,0(r4)
   8203c:	5ac002a4 	muli	r11,r11,10
   82040:	ad400044 	addi	r21,r21,1
   82044:	a809883a 	mov	r4,r21
   82048:	12d7883a 	add	r11,r2,r11
   8204c:	88bff404 	addi	r2,r17,-48
   82050:	30bff92e 	bgeu	r6,r2,82038 <__alt_data_end+0xfffa05b8>
   82054:	dac03115 	stw	r11,196(sp)
   82058:	003f2306 	br	81ce8 <__alt_data_end+0xfffa0268>
   8205c:	18c03fcc 	andi	r3,r3,255
   82060:	18072b1e 	bne	r3,zero,83d10 <___vfprintf_internal_r+0x21b0>
   82064:	94800414 	ori	r18,r18,16
   82068:	9080080c 	andi	r2,r18,32
   8206c:	10037b26 	beq	r2,zero,82e5c <___vfprintf_internal_r+0x12fc>
   82070:	d9402d17 	ldw	r5,180(sp)
   82074:	28800117 	ldw	r2,4(r5)
   82078:	2cc00017 	ldw	r19,0(r5)
   8207c:	29400204 	addi	r5,r5,8
   82080:	d9402d15 	stw	r5,180(sp)
   82084:	102d883a 	mov	r22,r2
   82088:	10044b16 	blt	r2,zero,831b8 <___vfprintf_internal_r+0x1658>
   8208c:	d9402917 	ldw	r5,164(sp)
   82090:	df002783 	ldbu	fp,158(sp)
   82094:	2803bc16 	blt	r5,zero,82f88 <___vfprintf_internal_r+0x1428>
   82098:	00ffdfc4 	movi	r3,-129
   8209c:	9d84b03a 	or	r2,r19,r22
   820a0:	90e4703a 	and	r18,r18,r3
   820a4:	10017726 	beq	r2,zero,82684 <___vfprintf_internal_r+0xb24>
   820a8:	b0038326 	beq	r22,zero,82eb8 <___vfprintf_internal_r+0x1358>
   820ac:	dc402a15 	stw	r17,168(sp)
   820b0:	dc001e04 	addi	r16,sp,120
   820b4:	b023883a 	mov	r17,r22
   820b8:	402d883a 	mov	r22,r8
   820bc:	9809883a 	mov	r4,r19
   820c0:	880b883a 	mov	r5,r17
   820c4:	01800284 	movi	r6,10
   820c8:	000f883a 	mov	r7,zero
   820cc:	008b6100 	call	8b610 <__umoddi3>
   820d0:	10800c04 	addi	r2,r2,48
   820d4:	843fffc4 	addi	r16,r16,-1
   820d8:	9809883a 	mov	r4,r19
   820dc:	880b883a 	mov	r5,r17
   820e0:	80800005 	stb	r2,0(r16)
   820e4:	01800284 	movi	r6,10
   820e8:	000f883a 	mov	r7,zero
   820ec:	008b0980 	call	8b098 <__udivdi3>
   820f0:	1027883a 	mov	r19,r2
   820f4:	10c4b03a 	or	r2,r2,r3
   820f8:	1823883a 	mov	r17,r3
   820fc:	103fef1e 	bne	r2,zero,820bc <__alt_data_end+0xfffa063c>
   82100:	d8c02817 	ldw	r3,160(sp)
   82104:	dc402a17 	ldw	r17,168(sp)
   82108:	b011883a 	mov	r8,r22
   8210c:	1c07c83a 	sub	r3,r3,r16
   82110:	d8c02e15 	stw	r3,184(sp)
   82114:	00005906 	br	8227c <___vfprintf_internal_r+0x71c>
   82118:	18c03fcc 	andi	r3,r3,255
   8211c:	1806fa1e 	bne	r3,zero,83d08 <___vfprintf_internal_r+0x21a8>
   82120:	9080020c 	andi	r2,r18,8
   82124:	10048a26 	beq	r2,zero,83350 <___vfprintf_internal_r+0x17f0>
   82128:	d8c02d17 	ldw	r3,180(sp)
   8212c:	d9002d17 	ldw	r4,180(sp)
   82130:	d9402d17 	ldw	r5,180(sp)
   82134:	18c00017 	ldw	r3,0(r3)
   82138:	21000117 	ldw	r4,4(r4)
   8213c:	29400204 	addi	r5,r5,8
   82140:	d8c03615 	stw	r3,216(sp)
   82144:	d9003815 	stw	r4,224(sp)
   82148:	d9402d15 	stw	r5,180(sp)
   8214c:	d9003617 	ldw	r4,216(sp)
   82150:	d9403817 	ldw	r5,224(sp)
   82154:	da003d15 	stw	r8,244(sp)
   82158:	04000044 	movi	r16,1
   8215c:	0088ddc0 	call	88ddc <__fpclassifyd>
   82160:	da003d17 	ldw	r8,244(sp)
   82164:	14041f1e 	bne	r2,r16,831e4 <___vfprintf_internal_r+0x1684>
   82168:	d9003617 	ldw	r4,216(sp)
   8216c:	d9403817 	ldw	r5,224(sp)
   82170:	000d883a 	mov	r6,zero
   82174:	000f883a 	mov	r7,zero
   82178:	008ce400 	call	8ce40 <__ledf2>
   8217c:	da003d17 	ldw	r8,244(sp)
   82180:	1005be16 	blt	r2,zero,8387c <___vfprintf_internal_r+0x1d1c>
   82184:	df002783 	ldbu	fp,158(sp)
   82188:	008011c4 	movi	r2,71
   8218c:	1445330e 	bge	r2,r17,8365c <___vfprintf_internal_r+0x1afc>
   82190:	04000274 	movhi	r16,9
   82194:	84037c04 	addi	r16,r16,3568
   82198:	00c000c4 	movi	r3,3
   8219c:	00bfdfc4 	movi	r2,-129
   821a0:	d8c02a15 	stw	r3,168(sp)
   821a4:	90a4703a 	and	r18,r18,r2
   821a8:	d8c02e15 	stw	r3,184(sp)
   821ac:	d8002915 	stw	zero,164(sp)
   821b0:	d8003215 	stw	zero,200(sp)
   821b4:	00003706 	br	82294 <___vfprintf_internal_r+0x734>
   821b8:	94800214 	ori	r18,r18,8
   821bc:	ac400007 	ldb	r17,0(r21)
   821c0:	003ec806 	br	81ce4 <__alt_data_end+0xfffa0264>
   821c4:	18c03fcc 	andi	r3,r3,255
   821c8:	1806db1e 	bne	r3,zero,83d38 <___vfprintf_internal_r+0x21d8>
   821cc:	94800414 	ori	r18,r18,16
   821d0:	9080080c 	andi	r2,r18,32
   821d4:	1002d826 	beq	r2,zero,82d38 <___vfprintf_internal_r+0x11d8>
   821d8:	d9402d17 	ldw	r5,180(sp)
   821dc:	d8c02917 	ldw	r3,164(sp)
   821e0:	d8002785 	stb	zero,158(sp)
   821e4:	28800204 	addi	r2,r5,8
   821e8:	2cc00017 	ldw	r19,0(r5)
   821ec:	2d800117 	ldw	r22,4(r5)
   821f0:	18048f16 	blt	r3,zero,83430 <___vfprintf_internal_r+0x18d0>
   821f4:	013fdfc4 	movi	r4,-129
   821f8:	9d86b03a 	or	r3,r19,r22
   821fc:	d8802d15 	stw	r2,180(sp)
   82200:	9124703a 	and	r18,r18,r4
   82204:	1802d91e 	bne	r3,zero,82d6c <___vfprintf_internal_r+0x120c>
   82208:	d8c02917 	ldw	r3,164(sp)
   8220c:	0039883a 	mov	fp,zero
   82210:	1805c326 	beq	r3,zero,83920 <___vfprintf_internal_r+0x1dc0>
   82214:	0027883a 	mov	r19,zero
   82218:	002d883a 	mov	r22,zero
   8221c:	dc001e04 	addi	r16,sp,120
   82220:	9806d0fa 	srli	r3,r19,3
   82224:	b008977a 	slli	r4,r22,29
   82228:	b02cd0fa 	srli	r22,r22,3
   8222c:	9cc001cc 	andi	r19,r19,7
   82230:	98800c04 	addi	r2,r19,48
   82234:	843fffc4 	addi	r16,r16,-1
   82238:	20e6b03a 	or	r19,r4,r3
   8223c:	80800005 	stb	r2,0(r16)
   82240:	9d86b03a 	or	r3,r19,r22
   82244:	183ff61e 	bne	r3,zero,82220 <__alt_data_end+0xfffa07a0>
   82248:	90c0004c 	andi	r3,r18,1
   8224c:	18013b26 	beq	r3,zero,8273c <___vfprintf_internal_r+0xbdc>
   82250:	10803fcc 	andi	r2,r2,255
   82254:	1080201c 	xori	r2,r2,128
   82258:	10bfe004 	addi	r2,r2,-128
   8225c:	00c00c04 	movi	r3,48
   82260:	10c13626 	beq	r2,r3,8273c <___vfprintf_internal_r+0xbdc>
   82264:	80ffffc5 	stb	r3,-1(r16)
   82268:	d8c02817 	ldw	r3,160(sp)
   8226c:	80bfffc4 	addi	r2,r16,-1
   82270:	1021883a 	mov	r16,r2
   82274:	1887c83a 	sub	r3,r3,r2
   82278:	d8c02e15 	stw	r3,184(sp)
   8227c:	d8802e17 	ldw	r2,184(sp)
   82280:	d9002917 	ldw	r4,164(sp)
   82284:	1100010e 	bge	r2,r4,8228c <___vfprintf_internal_r+0x72c>
   82288:	2005883a 	mov	r2,r4
   8228c:	d8802a15 	stw	r2,168(sp)
   82290:	d8003215 	stw	zero,200(sp)
   82294:	e7003fcc 	andi	fp,fp,255
   82298:	e700201c 	xori	fp,fp,128
   8229c:	e73fe004 	addi	fp,fp,-128
   822a0:	e0000326 	beq	fp,zero,822b0 <___vfprintf_internal_r+0x750>
   822a4:	d8c02a17 	ldw	r3,168(sp)
   822a8:	18c00044 	addi	r3,r3,1
   822ac:	d8c02a15 	stw	r3,168(sp)
   822b0:	90c0008c 	andi	r3,r18,2
   822b4:	d8c02b15 	stw	r3,172(sp)
   822b8:	18000326 	beq	r3,zero,822c8 <___vfprintf_internal_r+0x768>
   822bc:	d8c02a17 	ldw	r3,168(sp)
   822c0:	18c00084 	addi	r3,r3,2
   822c4:	d8c02a15 	stw	r3,168(sp)
   822c8:	90c0210c 	andi	r3,r18,132
   822cc:	d8c03015 	stw	r3,192(sp)
   822d0:	1801a31e 	bne	r3,zero,82960 <___vfprintf_internal_r+0xe00>
   822d4:	d9003117 	ldw	r4,196(sp)
   822d8:	d8c02a17 	ldw	r3,168(sp)
   822dc:	20e7c83a 	sub	r19,r4,r3
   822e0:	04c19f0e 	bge	zero,r19,82960 <___vfprintf_internal_r+0xe00>
   822e4:	02400404 	movi	r9,16
   822e8:	d8c02017 	ldw	r3,128(sp)
   822ec:	d8801f17 	ldw	r2,124(sp)
   822f0:	4cc50d0e 	bge	r9,r19,83728 <___vfprintf_internal_r+0x1bc8>
   822f4:	01400274 	movhi	r5,9
   822f8:	29438f84 	addi	r5,r5,3646
   822fc:	dc403b15 	stw	r17,236(sp)
   82300:	d9403515 	stw	r5,212(sp)
   82304:	9823883a 	mov	r17,r19
   82308:	482d883a 	mov	r22,r9
   8230c:	9027883a 	mov	r19,r18
   82310:	070001c4 	movi	fp,7
   82314:	8025883a 	mov	r18,r16
   82318:	dc002c17 	ldw	r16,176(sp)
   8231c:	00000306 	br	8232c <___vfprintf_internal_r+0x7cc>
   82320:	8c7ffc04 	addi	r17,r17,-16
   82324:	42000204 	addi	r8,r8,8
   82328:	b440130e 	bge	r22,r17,82378 <___vfprintf_internal_r+0x818>
   8232c:	01000274 	movhi	r4,9
   82330:	18c00404 	addi	r3,r3,16
   82334:	10800044 	addi	r2,r2,1
   82338:	21038f84 	addi	r4,r4,3646
   8233c:	41000015 	stw	r4,0(r8)
   82340:	45800115 	stw	r22,4(r8)
   82344:	d8c02015 	stw	r3,128(sp)
   82348:	d8801f15 	stw	r2,124(sp)
   8234c:	e0bff40e 	bge	fp,r2,82320 <__alt_data_end+0xfffa08a0>
   82350:	d9801e04 	addi	r6,sp,120
   82354:	b80b883a 	mov	r5,r23
   82358:	8009883a 	mov	r4,r16
   8235c:	00891b80 	call	891b8 <__sprint_r>
   82360:	103f011e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   82364:	8c7ffc04 	addi	r17,r17,-16
   82368:	d8c02017 	ldw	r3,128(sp)
   8236c:	d8801f17 	ldw	r2,124(sp)
   82370:	da000404 	addi	r8,sp,16
   82374:	b47fed16 	blt	r22,r17,8232c <__alt_data_end+0xfffa08ac>
   82378:	9021883a 	mov	r16,r18
   8237c:	9825883a 	mov	r18,r19
   82380:	8827883a 	mov	r19,r17
   82384:	dc403b17 	ldw	r17,236(sp)
   82388:	d9403517 	ldw	r5,212(sp)
   8238c:	98c7883a 	add	r3,r19,r3
   82390:	10800044 	addi	r2,r2,1
   82394:	41400015 	stw	r5,0(r8)
   82398:	44c00115 	stw	r19,4(r8)
   8239c:	d8c02015 	stw	r3,128(sp)
   823a0:	d8801f15 	stw	r2,124(sp)
   823a4:	010001c4 	movi	r4,7
   823a8:	2082a316 	blt	r4,r2,82e38 <___vfprintf_internal_r+0x12d8>
   823ac:	df002787 	ldb	fp,158(sp)
   823b0:	42000204 	addi	r8,r8,8
   823b4:	e0000c26 	beq	fp,zero,823e8 <___vfprintf_internal_r+0x888>
   823b8:	d8801f17 	ldw	r2,124(sp)
   823bc:	d9002784 	addi	r4,sp,158
   823c0:	18c00044 	addi	r3,r3,1
   823c4:	10800044 	addi	r2,r2,1
   823c8:	41000015 	stw	r4,0(r8)
   823cc:	01000044 	movi	r4,1
   823d0:	41000115 	stw	r4,4(r8)
   823d4:	d8c02015 	stw	r3,128(sp)
   823d8:	d8801f15 	stw	r2,124(sp)
   823dc:	010001c4 	movi	r4,7
   823e0:	20823c16 	blt	r4,r2,82cd4 <___vfprintf_internal_r+0x1174>
   823e4:	42000204 	addi	r8,r8,8
   823e8:	d8802b17 	ldw	r2,172(sp)
   823ec:	10000c26 	beq	r2,zero,82420 <___vfprintf_internal_r+0x8c0>
   823f0:	d8801f17 	ldw	r2,124(sp)
   823f4:	d9002704 	addi	r4,sp,156
   823f8:	18c00084 	addi	r3,r3,2
   823fc:	10800044 	addi	r2,r2,1
   82400:	41000015 	stw	r4,0(r8)
   82404:	01000084 	movi	r4,2
   82408:	41000115 	stw	r4,4(r8)
   8240c:	d8c02015 	stw	r3,128(sp)
   82410:	d8801f15 	stw	r2,124(sp)
   82414:	010001c4 	movi	r4,7
   82418:	20823616 	blt	r4,r2,82cf4 <___vfprintf_internal_r+0x1194>
   8241c:	42000204 	addi	r8,r8,8
   82420:	d9003017 	ldw	r4,192(sp)
   82424:	00802004 	movi	r2,128
   82428:	20819926 	beq	r4,r2,82a90 <___vfprintf_internal_r+0xf30>
   8242c:	d9402917 	ldw	r5,164(sp)
   82430:	d8802e17 	ldw	r2,184(sp)
   82434:	28adc83a 	sub	r22,r5,r2
   82438:	0580310e 	bge	zero,r22,82500 <___vfprintf_internal_r+0x9a0>
   8243c:	07000404 	movi	fp,16
   82440:	d8801f17 	ldw	r2,124(sp)
   82444:	e584140e 	bge	fp,r22,83498 <___vfprintf_internal_r+0x1938>
   82448:	01400274 	movhi	r5,9
   8244c:	29438b84 	addi	r5,r5,3630
   82450:	dc402915 	stw	r17,164(sp)
   82454:	d9402b15 	stw	r5,172(sp)
   82458:	b023883a 	mov	r17,r22
   8245c:	04c001c4 	movi	r19,7
   82460:	a82d883a 	mov	r22,r21
   82464:	902b883a 	mov	r21,r18
   82468:	8025883a 	mov	r18,r16
   8246c:	dc002c17 	ldw	r16,176(sp)
   82470:	00000306 	br	82480 <___vfprintf_internal_r+0x920>
   82474:	8c7ffc04 	addi	r17,r17,-16
   82478:	42000204 	addi	r8,r8,8
   8247c:	e440110e 	bge	fp,r17,824c4 <___vfprintf_internal_r+0x964>
   82480:	18c00404 	addi	r3,r3,16
   82484:	10800044 	addi	r2,r2,1
   82488:	45000015 	stw	r20,0(r8)
   8248c:	47000115 	stw	fp,4(r8)
   82490:	d8c02015 	stw	r3,128(sp)
   82494:	d8801f15 	stw	r2,124(sp)
   82498:	98bff60e 	bge	r19,r2,82474 <__alt_data_end+0xfffa09f4>
   8249c:	d9801e04 	addi	r6,sp,120
   824a0:	b80b883a 	mov	r5,r23
   824a4:	8009883a 	mov	r4,r16
   824a8:	00891b80 	call	891b8 <__sprint_r>
   824ac:	103eae1e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   824b0:	8c7ffc04 	addi	r17,r17,-16
   824b4:	d8c02017 	ldw	r3,128(sp)
   824b8:	d8801f17 	ldw	r2,124(sp)
   824bc:	da000404 	addi	r8,sp,16
   824c0:	e47fef16 	blt	fp,r17,82480 <__alt_data_end+0xfffa0a00>
   824c4:	9021883a 	mov	r16,r18
   824c8:	a825883a 	mov	r18,r21
   824cc:	b02b883a 	mov	r21,r22
   824d0:	882d883a 	mov	r22,r17
   824d4:	dc402917 	ldw	r17,164(sp)
   824d8:	d9002b17 	ldw	r4,172(sp)
   824dc:	1d87883a 	add	r3,r3,r22
   824e0:	10800044 	addi	r2,r2,1
   824e4:	41000015 	stw	r4,0(r8)
   824e8:	45800115 	stw	r22,4(r8)
   824ec:	d8c02015 	stw	r3,128(sp)
   824f0:	d8801f15 	stw	r2,124(sp)
   824f4:	010001c4 	movi	r4,7
   824f8:	2081ee16 	blt	r4,r2,82cb4 <___vfprintf_internal_r+0x1154>
   824fc:	42000204 	addi	r8,r8,8
   82500:	9080400c 	andi	r2,r18,256
   82504:	1001181e 	bne	r2,zero,82968 <___vfprintf_internal_r+0xe08>
   82508:	d9402e17 	ldw	r5,184(sp)
   8250c:	d8801f17 	ldw	r2,124(sp)
   82510:	44000015 	stw	r16,0(r8)
   82514:	1947883a 	add	r3,r3,r5
   82518:	10800044 	addi	r2,r2,1
   8251c:	41400115 	stw	r5,4(r8)
   82520:	d8c02015 	stw	r3,128(sp)
   82524:	d8801f15 	stw	r2,124(sp)
   82528:	010001c4 	movi	r4,7
   8252c:	2081d316 	blt	r4,r2,82c7c <___vfprintf_internal_r+0x111c>
   82530:	42000204 	addi	r8,r8,8
   82534:	9480010c 	andi	r18,r18,4
   82538:	90003226 	beq	r18,zero,82604 <___vfprintf_internal_r+0xaa4>
   8253c:	d9403117 	ldw	r5,196(sp)
   82540:	d8802a17 	ldw	r2,168(sp)
   82544:	28a1c83a 	sub	r16,r5,r2
   82548:	04002e0e 	bge	zero,r16,82604 <___vfprintf_internal_r+0xaa4>
   8254c:	04400404 	movi	r17,16
   82550:	d8801f17 	ldw	r2,124(sp)
   82554:	8c04a20e 	bge	r17,r16,837e0 <___vfprintf_internal_r+0x1c80>
   82558:	01400274 	movhi	r5,9
   8255c:	29438f84 	addi	r5,r5,3646
   82560:	d9403515 	stw	r5,212(sp)
   82564:	048001c4 	movi	r18,7
   82568:	dcc02c17 	ldw	r19,176(sp)
   8256c:	00000306 	br	8257c <___vfprintf_internal_r+0xa1c>
   82570:	843ffc04 	addi	r16,r16,-16
   82574:	42000204 	addi	r8,r8,8
   82578:	8c00130e 	bge	r17,r16,825c8 <___vfprintf_internal_r+0xa68>
   8257c:	01000274 	movhi	r4,9
   82580:	18c00404 	addi	r3,r3,16
   82584:	10800044 	addi	r2,r2,1
   82588:	21038f84 	addi	r4,r4,3646
   8258c:	41000015 	stw	r4,0(r8)
   82590:	44400115 	stw	r17,4(r8)
   82594:	d8c02015 	stw	r3,128(sp)
   82598:	d8801f15 	stw	r2,124(sp)
   8259c:	90bff40e 	bge	r18,r2,82570 <__alt_data_end+0xfffa0af0>
   825a0:	d9801e04 	addi	r6,sp,120
   825a4:	b80b883a 	mov	r5,r23
   825a8:	9809883a 	mov	r4,r19
   825ac:	00891b80 	call	891b8 <__sprint_r>
   825b0:	103e6d1e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   825b4:	843ffc04 	addi	r16,r16,-16
   825b8:	d8c02017 	ldw	r3,128(sp)
   825bc:	d8801f17 	ldw	r2,124(sp)
   825c0:	da000404 	addi	r8,sp,16
   825c4:	8c3fed16 	blt	r17,r16,8257c <__alt_data_end+0xfffa0afc>
   825c8:	d9403517 	ldw	r5,212(sp)
   825cc:	1c07883a 	add	r3,r3,r16
   825d0:	10800044 	addi	r2,r2,1
   825d4:	41400015 	stw	r5,0(r8)
   825d8:	44000115 	stw	r16,4(r8)
   825dc:	d8c02015 	stw	r3,128(sp)
   825e0:	d8801f15 	stw	r2,124(sp)
   825e4:	010001c4 	movi	r4,7
   825e8:	2080060e 	bge	r4,r2,82604 <___vfprintf_internal_r+0xaa4>
   825ec:	d9002c17 	ldw	r4,176(sp)
   825f0:	d9801e04 	addi	r6,sp,120
   825f4:	b80b883a 	mov	r5,r23
   825f8:	00891b80 	call	891b8 <__sprint_r>
   825fc:	103e5a1e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   82600:	d8c02017 	ldw	r3,128(sp)
   82604:	d8803117 	ldw	r2,196(sp)
   82608:	d9002a17 	ldw	r4,168(sp)
   8260c:	1100010e 	bge	r2,r4,82614 <___vfprintf_internal_r+0xab4>
   82610:	2005883a 	mov	r2,r4
   82614:	d9402f17 	ldw	r5,188(sp)
   82618:	288b883a 	add	r5,r5,r2
   8261c:	d9402f15 	stw	r5,188(sp)
   82620:	18019e1e 	bne	r3,zero,82c9c <___vfprintf_internal_r+0x113c>
   82624:	a8800007 	ldb	r2,0(r21)
   82628:	d8001f15 	stw	zero,124(sp)
   8262c:	da000404 	addi	r8,sp,16
   82630:	103d851e 	bne	r2,zero,81c48 <__alt_data_end+0xfffa01c8>
   82634:	a821883a 	mov	r16,r21
   82638:	003d9b06 	br	81ca8 <__alt_data_end+0xfffa0228>
   8263c:	18c03fcc 	andi	r3,r3,255
   82640:	1805c11e 	bne	r3,zero,83d48 <___vfprintf_internal_r+0x21e8>
   82644:	94800414 	ori	r18,r18,16
   82648:	9080080c 	andi	r2,r18,32
   8264c:	10020c26 	beq	r2,zero,82e80 <___vfprintf_internal_r+0x1320>
   82650:	d8802d17 	ldw	r2,180(sp)
   82654:	d9002917 	ldw	r4,164(sp)
   82658:	d8002785 	stb	zero,158(sp)
   8265c:	10c00204 	addi	r3,r2,8
   82660:	14c00017 	ldw	r19,0(r2)
   82664:	15800117 	ldw	r22,4(r2)
   82668:	20040f16 	blt	r4,zero,836a8 <___vfprintf_internal_r+0x1b48>
   8266c:	013fdfc4 	movi	r4,-129
   82670:	9d84b03a 	or	r2,r19,r22
   82674:	d8c02d15 	stw	r3,180(sp)
   82678:	9124703a 	and	r18,r18,r4
   8267c:	0039883a 	mov	fp,zero
   82680:	103e891e 	bne	r2,zero,820a8 <__alt_data_end+0xfffa0628>
   82684:	d9002917 	ldw	r4,164(sp)
   82688:	2002c11e 	bne	r4,zero,83190 <___vfprintf_internal_r+0x1630>
   8268c:	d8002915 	stw	zero,164(sp)
   82690:	d8002e15 	stw	zero,184(sp)
   82694:	dc001e04 	addi	r16,sp,120
   82698:	003ef806 	br	8227c <__alt_data_end+0xfffa07fc>
   8269c:	18c03fcc 	andi	r3,r3,255
   826a0:	18059d1e 	bne	r3,zero,83d18 <___vfprintf_internal_r+0x21b8>
   826a4:	01400274 	movhi	r5,9
   826a8:	29437f04 	addi	r5,r5,3580
   826ac:	d9403915 	stw	r5,228(sp)
   826b0:	9080080c 	andi	r2,r18,32
   826b4:	10005226 	beq	r2,zero,82800 <___vfprintf_internal_r+0xca0>
   826b8:	d8802d17 	ldw	r2,180(sp)
   826bc:	14c00017 	ldw	r19,0(r2)
   826c0:	15800117 	ldw	r22,4(r2)
   826c4:	10800204 	addi	r2,r2,8
   826c8:	d8802d15 	stw	r2,180(sp)
   826cc:	9080004c 	andi	r2,r18,1
   826d0:	10019026 	beq	r2,zero,82d14 <___vfprintf_internal_r+0x11b4>
   826d4:	9d84b03a 	or	r2,r19,r22
   826d8:	10036926 	beq	r2,zero,83480 <___vfprintf_internal_r+0x1920>
   826dc:	d8c02917 	ldw	r3,164(sp)
   826e0:	00800c04 	movi	r2,48
   826e4:	d8802705 	stb	r2,156(sp)
   826e8:	dc402745 	stb	r17,157(sp)
   826ec:	d8002785 	stb	zero,158(sp)
   826f0:	90800094 	ori	r2,r18,2
   826f4:	18045d16 	blt	r3,zero,8386c <___vfprintf_internal_r+0x1d0c>
   826f8:	00bfdfc4 	movi	r2,-129
   826fc:	90a4703a 	and	r18,r18,r2
   82700:	94800094 	ori	r18,r18,2
   82704:	0039883a 	mov	fp,zero
   82708:	d9003917 	ldw	r4,228(sp)
   8270c:	dc001e04 	addi	r16,sp,120
   82710:	988003cc 	andi	r2,r19,15
   82714:	b006973a 	slli	r3,r22,28
   82718:	2085883a 	add	r2,r4,r2
   8271c:	9826d13a 	srli	r19,r19,4
   82720:	10800003 	ldbu	r2,0(r2)
   82724:	b02cd13a 	srli	r22,r22,4
   82728:	843fffc4 	addi	r16,r16,-1
   8272c:	1ce6b03a 	or	r19,r3,r19
   82730:	80800005 	stb	r2,0(r16)
   82734:	9d84b03a 	or	r2,r19,r22
   82738:	103ff51e 	bne	r2,zero,82710 <__alt_data_end+0xfffa0c90>
   8273c:	d8c02817 	ldw	r3,160(sp)
   82740:	1c07c83a 	sub	r3,r3,r16
   82744:	d8c02e15 	stw	r3,184(sp)
   82748:	003ecc06 	br	8227c <__alt_data_end+0xfffa07fc>
   8274c:	18c03fcc 	andi	r3,r3,255
   82750:	183e9f26 	beq	r3,zero,821d0 <__alt_data_end+0xfffa0750>
   82754:	d9c02785 	stb	r7,158(sp)
   82758:	003e9d06 	br	821d0 <__alt_data_end+0xfffa0750>
   8275c:	00c00044 	movi	r3,1
   82760:	01c00ac4 	movi	r7,43
   82764:	ac400007 	ldb	r17,0(r21)
   82768:	003d5e06 	br	81ce4 <__alt_data_end+0xfffa0264>
   8276c:	94800814 	ori	r18,r18,32
   82770:	ac400007 	ldb	r17,0(r21)
   82774:	003d5b06 	br	81ce4 <__alt_data_end+0xfffa0264>
   82778:	d8c02d17 	ldw	r3,180(sp)
   8277c:	d8002785 	stb	zero,158(sp)
   82780:	1c000017 	ldw	r16,0(r3)
   82784:	1cc00104 	addi	r19,r3,4
   82788:	80041926 	beq	r16,zero,837f0 <___vfprintf_internal_r+0x1c90>
   8278c:	d9002917 	ldw	r4,164(sp)
   82790:	2003d016 	blt	r4,zero,836d4 <___vfprintf_internal_r+0x1b74>
   82794:	200d883a 	mov	r6,r4
   82798:	000b883a 	mov	r5,zero
   8279c:	8009883a 	mov	r4,r16
   827a0:	da003d15 	stw	r8,244(sp)
   827a4:	00873cc0 	call	873cc <memchr>
   827a8:	da003d17 	ldw	r8,244(sp)
   827ac:	10045426 	beq	r2,zero,83900 <___vfprintf_internal_r+0x1da0>
   827b0:	1405c83a 	sub	r2,r2,r16
   827b4:	d8802e15 	stw	r2,184(sp)
   827b8:	1003cc16 	blt	r2,zero,836ec <___vfprintf_internal_r+0x1b8c>
   827bc:	df002783 	ldbu	fp,158(sp)
   827c0:	d8802a15 	stw	r2,168(sp)
   827c4:	dcc02d15 	stw	r19,180(sp)
   827c8:	d8002915 	stw	zero,164(sp)
   827cc:	d8003215 	stw	zero,200(sp)
   827d0:	003eb006 	br	82294 <__alt_data_end+0xfffa0814>
   827d4:	18c03fcc 	andi	r3,r3,255
   827d8:	183f9b26 	beq	r3,zero,82648 <__alt_data_end+0xfffa0bc8>
   827dc:	d9c02785 	stb	r7,158(sp)
   827e0:	003f9906 	br	82648 <__alt_data_end+0xfffa0bc8>
   827e4:	18c03fcc 	andi	r3,r3,255
   827e8:	1805551e 	bne	r3,zero,83d40 <___vfprintf_internal_r+0x21e0>
   827ec:	01400274 	movhi	r5,9
   827f0:	29438404 	addi	r5,r5,3600
   827f4:	d9403915 	stw	r5,228(sp)
   827f8:	9080080c 	andi	r2,r18,32
   827fc:	103fae1e 	bne	r2,zero,826b8 <__alt_data_end+0xfffa0c38>
   82800:	9080040c 	andi	r2,r18,16
   82804:	1002de26 	beq	r2,zero,83380 <___vfprintf_internal_r+0x1820>
   82808:	d8c02d17 	ldw	r3,180(sp)
   8280c:	002d883a 	mov	r22,zero
   82810:	1cc00017 	ldw	r19,0(r3)
   82814:	18c00104 	addi	r3,r3,4
   82818:	d8c02d15 	stw	r3,180(sp)
   8281c:	003fab06 	br	826cc <__alt_data_end+0xfffa0c4c>
   82820:	38803fcc 	andi	r2,r7,255
   82824:	1080201c 	xori	r2,r2,128
   82828:	10bfe004 	addi	r2,r2,-128
   8282c:	1002d21e 	bne	r2,zero,83378 <___vfprintf_internal_r+0x1818>
   82830:	00c00044 	movi	r3,1
   82834:	01c00804 	movi	r7,32
   82838:	ac400007 	ldb	r17,0(r21)
   8283c:	003d2906 	br	81ce4 <__alt_data_end+0xfffa0264>
   82840:	94800054 	ori	r18,r18,1
   82844:	ac400007 	ldb	r17,0(r21)
   82848:	003d2606 	br	81ce4 <__alt_data_end+0xfffa0264>
   8284c:	18c03fcc 	andi	r3,r3,255
   82850:	183e0526 	beq	r3,zero,82068 <__alt_data_end+0xfffa05e8>
   82854:	d9c02785 	stb	r7,158(sp)
   82858:	003e0306 	br	82068 <__alt_data_end+0xfffa05e8>
   8285c:	94801014 	ori	r18,r18,64
   82860:	ac400007 	ldb	r17,0(r21)
   82864:	003d1f06 	br	81ce4 <__alt_data_end+0xfffa0264>
   82868:	ac400007 	ldb	r17,0(r21)
   8286c:	8a438726 	beq	r17,r9,8368c <___vfprintf_internal_r+0x1b2c>
   82870:	94800414 	ori	r18,r18,16
   82874:	003d1b06 	br	81ce4 <__alt_data_end+0xfffa0264>
   82878:	18c03fcc 	andi	r3,r3,255
   8287c:	1805341e 	bne	r3,zero,83d50 <___vfprintf_internal_r+0x21f0>
   82880:	9080080c 	andi	r2,r18,32
   82884:	1002cd26 	beq	r2,zero,833bc <___vfprintf_internal_r+0x185c>
   82888:	d9402d17 	ldw	r5,180(sp)
   8288c:	d9002f17 	ldw	r4,188(sp)
   82890:	28800017 	ldw	r2,0(r5)
   82894:	2007d7fa 	srai	r3,r4,31
   82898:	29400104 	addi	r5,r5,4
   8289c:	d9402d15 	stw	r5,180(sp)
   828a0:	11000015 	stw	r4,0(r2)
   828a4:	10c00115 	stw	r3,4(r2)
   828a8:	003ce506 	br	81c40 <__alt_data_end+0xfffa01c0>
   828ac:	d8c02d17 	ldw	r3,180(sp)
   828b0:	d9002d17 	ldw	r4,180(sp)
   828b4:	d8002785 	stb	zero,158(sp)
   828b8:	18800017 	ldw	r2,0(r3)
   828bc:	21000104 	addi	r4,r4,4
   828c0:	00c00044 	movi	r3,1
   828c4:	d8c02a15 	stw	r3,168(sp)
   828c8:	d8801405 	stb	r2,80(sp)
   828cc:	d9002d15 	stw	r4,180(sp)
   828d0:	d8c02e15 	stw	r3,184(sp)
   828d4:	d8002915 	stw	zero,164(sp)
   828d8:	d8003215 	stw	zero,200(sp)
   828dc:	dc001404 	addi	r16,sp,80
   828e0:	0039883a 	mov	fp,zero
   828e4:	003e7206 	br	822b0 <__alt_data_end+0xfffa0830>
   828e8:	01000274 	movhi	r4,9
   828ec:	21038404 	addi	r4,r4,3600
   828f0:	0039883a 	mov	fp,zero
   828f4:	d9003915 	stw	r4,228(sp)
   828f8:	04401e04 	movi	r17,120
   828fc:	003f8206 	br	82708 <__alt_data_end+0xfffa0c88>
   82900:	18c03fcc 	andi	r3,r3,255
   82904:	1805061e 	bne	r3,zero,83d20 <___vfprintf_internal_r+0x21c0>
   82908:	883d9126 	beq	r17,zero,81f50 <__alt_data_end+0xfffa04d0>
   8290c:	00c00044 	movi	r3,1
   82910:	d8c02a15 	stw	r3,168(sp)
   82914:	dc401405 	stb	r17,80(sp)
   82918:	d8002785 	stb	zero,158(sp)
   8291c:	003fec06 	br	828d0 <__alt_data_end+0xfffa0e50>
   82920:	01400274 	movhi	r5,9
   82924:	29438404 	addi	r5,r5,3600
   82928:	d9403915 	stw	r5,228(sp)
   8292c:	d8c02d15 	stw	r3,180(sp)
   82930:	1025883a 	mov	r18,r2
   82934:	04401e04 	movi	r17,120
   82938:	9d84b03a 	or	r2,r19,r22
   8293c:	1000fc1e 	bne	r2,zero,82d30 <___vfprintf_internal_r+0x11d0>
   82940:	0039883a 	mov	fp,zero
   82944:	00800084 	movi	r2,2
   82948:	10803fcc 	andi	r2,r2,255
   8294c:	00c00044 	movi	r3,1
   82950:	10c20f26 	beq	r2,r3,83190 <___vfprintf_internal_r+0x1630>
   82954:	00c00084 	movi	r3,2
   82958:	10fd6326 	beq	r2,r3,81ee8 <__alt_data_end+0xfffa0468>
   8295c:	003e2d06 	br	82214 <__alt_data_end+0xfffa0794>
   82960:	d8c02017 	ldw	r3,128(sp)
   82964:	003e9306 	br	823b4 <__alt_data_end+0xfffa0934>
   82968:	00801944 	movi	r2,101
   8296c:	14407e0e 	bge	r2,r17,82b68 <___vfprintf_internal_r+0x1008>
   82970:	d9003617 	ldw	r4,216(sp)
   82974:	d9403817 	ldw	r5,224(sp)
   82978:	000d883a 	mov	r6,zero
   8297c:	000f883a 	mov	r7,zero
   82980:	d8c03c15 	stw	r3,240(sp)
   82984:	da003d15 	stw	r8,244(sp)
   82988:	008ccdc0 	call	8ccdc <__eqdf2>
   8298c:	d8c03c17 	ldw	r3,240(sp)
   82990:	da003d17 	ldw	r8,244(sp)
   82994:	1000f71e 	bne	r2,zero,82d74 <___vfprintf_internal_r+0x1214>
   82998:	d8801f17 	ldw	r2,124(sp)
   8299c:	01000274 	movhi	r4,9
   829a0:	21038b04 	addi	r4,r4,3628
   829a4:	18c00044 	addi	r3,r3,1
   829a8:	10800044 	addi	r2,r2,1
   829ac:	41000015 	stw	r4,0(r8)
   829b0:	01000044 	movi	r4,1
   829b4:	41000115 	stw	r4,4(r8)
   829b8:	d8c02015 	stw	r3,128(sp)
   829bc:	d8801f15 	stw	r2,124(sp)
   829c0:	010001c4 	movi	r4,7
   829c4:	2082b816 	blt	r4,r2,834a8 <___vfprintf_internal_r+0x1948>
   829c8:	42000204 	addi	r8,r8,8
   829cc:	d8802617 	ldw	r2,152(sp)
   829d0:	d9403317 	ldw	r5,204(sp)
   829d4:	11400216 	blt	r2,r5,829e0 <___vfprintf_internal_r+0xe80>
   829d8:	9080004c 	andi	r2,r18,1
   829dc:	103ed526 	beq	r2,zero,82534 <__alt_data_end+0xfffa0ab4>
   829e0:	d8803717 	ldw	r2,220(sp)
   829e4:	d9003417 	ldw	r4,208(sp)
   829e8:	d9403717 	ldw	r5,220(sp)
   829ec:	1887883a 	add	r3,r3,r2
   829f0:	d8801f17 	ldw	r2,124(sp)
   829f4:	41000015 	stw	r4,0(r8)
   829f8:	41400115 	stw	r5,4(r8)
   829fc:	10800044 	addi	r2,r2,1
   82a00:	d8c02015 	stw	r3,128(sp)
   82a04:	d8801f15 	stw	r2,124(sp)
   82a08:	010001c4 	movi	r4,7
   82a0c:	20832916 	blt	r4,r2,836b4 <___vfprintf_internal_r+0x1b54>
   82a10:	42000204 	addi	r8,r8,8
   82a14:	d8803317 	ldw	r2,204(sp)
   82a18:	143fffc4 	addi	r16,r2,-1
   82a1c:	043ec50e 	bge	zero,r16,82534 <__alt_data_end+0xfffa0ab4>
   82a20:	04400404 	movi	r17,16
   82a24:	d8801f17 	ldw	r2,124(sp)
   82a28:	8c00880e 	bge	r17,r16,82c4c <___vfprintf_internal_r+0x10ec>
   82a2c:	01400274 	movhi	r5,9
   82a30:	29438b84 	addi	r5,r5,3630
   82a34:	d9402b15 	stw	r5,172(sp)
   82a38:	058001c4 	movi	r22,7
   82a3c:	dcc02c17 	ldw	r19,176(sp)
   82a40:	00000306 	br	82a50 <___vfprintf_internal_r+0xef0>
   82a44:	42000204 	addi	r8,r8,8
   82a48:	843ffc04 	addi	r16,r16,-16
   82a4c:	8c00820e 	bge	r17,r16,82c58 <___vfprintf_internal_r+0x10f8>
   82a50:	18c00404 	addi	r3,r3,16
   82a54:	10800044 	addi	r2,r2,1
   82a58:	45000015 	stw	r20,0(r8)
   82a5c:	44400115 	stw	r17,4(r8)
   82a60:	d8c02015 	stw	r3,128(sp)
   82a64:	d8801f15 	stw	r2,124(sp)
   82a68:	b0bff60e 	bge	r22,r2,82a44 <__alt_data_end+0xfffa0fc4>
   82a6c:	d9801e04 	addi	r6,sp,120
   82a70:	b80b883a 	mov	r5,r23
   82a74:	9809883a 	mov	r4,r19
   82a78:	00891b80 	call	891b8 <__sprint_r>
   82a7c:	103d3a1e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   82a80:	d8c02017 	ldw	r3,128(sp)
   82a84:	d8801f17 	ldw	r2,124(sp)
   82a88:	da000404 	addi	r8,sp,16
   82a8c:	003fee06 	br	82a48 <__alt_data_end+0xfffa0fc8>
   82a90:	d9403117 	ldw	r5,196(sp)
   82a94:	d8802a17 	ldw	r2,168(sp)
   82a98:	28adc83a 	sub	r22,r5,r2
   82a9c:	05be630e 	bge	zero,r22,8242c <__alt_data_end+0xfffa09ac>
   82aa0:	07000404 	movi	fp,16
   82aa4:	d8801f17 	ldw	r2,124(sp)
   82aa8:	e5838f0e 	bge	fp,r22,838e8 <___vfprintf_internal_r+0x1d88>
   82aac:	01400274 	movhi	r5,9
   82ab0:	29438b84 	addi	r5,r5,3630
   82ab4:	dc403015 	stw	r17,192(sp)
   82ab8:	d9402b15 	stw	r5,172(sp)
   82abc:	b023883a 	mov	r17,r22
   82ac0:	04c001c4 	movi	r19,7
   82ac4:	a82d883a 	mov	r22,r21
   82ac8:	902b883a 	mov	r21,r18
   82acc:	8025883a 	mov	r18,r16
   82ad0:	dc002c17 	ldw	r16,176(sp)
   82ad4:	00000306 	br	82ae4 <___vfprintf_internal_r+0xf84>
   82ad8:	8c7ffc04 	addi	r17,r17,-16
   82adc:	42000204 	addi	r8,r8,8
   82ae0:	e440110e 	bge	fp,r17,82b28 <___vfprintf_internal_r+0xfc8>
   82ae4:	18c00404 	addi	r3,r3,16
   82ae8:	10800044 	addi	r2,r2,1
   82aec:	45000015 	stw	r20,0(r8)
   82af0:	47000115 	stw	fp,4(r8)
   82af4:	d8c02015 	stw	r3,128(sp)
   82af8:	d8801f15 	stw	r2,124(sp)
   82afc:	98bff60e 	bge	r19,r2,82ad8 <__alt_data_end+0xfffa1058>
   82b00:	d9801e04 	addi	r6,sp,120
   82b04:	b80b883a 	mov	r5,r23
   82b08:	8009883a 	mov	r4,r16
   82b0c:	00891b80 	call	891b8 <__sprint_r>
   82b10:	103d151e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   82b14:	8c7ffc04 	addi	r17,r17,-16
   82b18:	d8c02017 	ldw	r3,128(sp)
   82b1c:	d8801f17 	ldw	r2,124(sp)
   82b20:	da000404 	addi	r8,sp,16
   82b24:	e47fef16 	blt	fp,r17,82ae4 <__alt_data_end+0xfffa1064>
   82b28:	9021883a 	mov	r16,r18
   82b2c:	a825883a 	mov	r18,r21
   82b30:	b02b883a 	mov	r21,r22
   82b34:	882d883a 	mov	r22,r17
   82b38:	dc403017 	ldw	r17,192(sp)
   82b3c:	d9002b17 	ldw	r4,172(sp)
   82b40:	1d87883a 	add	r3,r3,r22
   82b44:	10800044 	addi	r2,r2,1
   82b48:	41000015 	stw	r4,0(r8)
   82b4c:	45800115 	stw	r22,4(r8)
   82b50:	d8c02015 	stw	r3,128(sp)
   82b54:	d8801f15 	stw	r2,124(sp)
   82b58:	010001c4 	movi	r4,7
   82b5c:	20818e16 	blt	r4,r2,83198 <___vfprintf_internal_r+0x1638>
   82b60:	42000204 	addi	r8,r8,8
   82b64:	003e3106 	br	8242c <__alt_data_end+0xfffa09ac>
   82b68:	d9403317 	ldw	r5,204(sp)
   82b6c:	00800044 	movi	r2,1
   82b70:	18c00044 	addi	r3,r3,1
   82b74:	1141530e 	bge	r2,r5,830c4 <___vfprintf_internal_r+0x1564>
   82b78:	dc401f17 	ldw	r17,124(sp)
   82b7c:	00800044 	movi	r2,1
   82b80:	40800115 	stw	r2,4(r8)
   82b84:	8c400044 	addi	r17,r17,1
   82b88:	44000015 	stw	r16,0(r8)
   82b8c:	d8c02015 	stw	r3,128(sp)
   82b90:	dc401f15 	stw	r17,124(sp)
   82b94:	008001c4 	movi	r2,7
   82b98:	14416b16 	blt	r2,r17,83148 <___vfprintf_internal_r+0x15e8>
   82b9c:	42000204 	addi	r8,r8,8
   82ba0:	d8803717 	ldw	r2,220(sp)
   82ba4:	d9003417 	ldw	r4,208(sp)
   82ba8:	8c400044 	addi	r17,r17,1
   82bac:	10c7883a 	add	r3,r2,r3
   82bb0:	40800115 	stw	r2,4(r8)
   82bb4:	41000015 	stw	r4,0(r8)
   82bb8:	d8c02015 	stw	r3,128(sp)
   82bbc:	dc401f15 	stw	r17,124(sp)
   82bc0:	008001c4 	movi	r2,7
   82bc4:	14416916 	blt	r2,r17,8316c <___vfprintf_internal_r+0x160c>
   82bc8:	45800204 	addi	r22,r8,8
   82bcc:	d9003617 	ldw	r4,216(sp)
   82bd0:	d9403817 	ldw	r5,224(sp)
   82bd4:	000d883a 	mov	r6,zero
   82bd8:	000f883a 	mov	r7,zero
   82bdc:	d8c03c15 	stw	r3,240(sp)
   82be0:	008ccdc0 	call	8ccdc <__eqdf2>
   82be4:	d8c03c17 	ldw	r3,240(sp)
   82be8:	1000bc26 	beq	r2,zero,82edc <___vfprintf_internal_r+0x137c>
   82bec:	d9403317 	ldw	r5,204(sp)
   82bf0:	84000044 	addi	r16,r16,1
   82bf4:	8c400044 	addi	r17,r17,1
   82bf8:	28bfffc4 	addi	r2,r5,-1
   82bfc:	1887883a 	add	r3,r3,r2
   82c00:	b0800115 	stw	r2,4(r22)
   82c04:	b4000015 	stw	r16,0(r22)
   82c08:	d8c02015 	stw	r3,128(sp)
   82c0c:	dc401f15 	stw	r17,124(sp)
   82c10:	008001c4 	movi	r2,7
   82c14:	14414316 	blt	r2,r17,83124 <___vfprintf_internal_r+0x15c4>
   82c18:	b5800204 	addi	r22,r22,8
   82c1c:	d9003a17 	ldw	r4,232(sp)
   82c20:	df0022c4 	addi	fp,sp,139
   82c24:	8c400044 	addi	r17,r17,1
   82c28:	20c7883a 	add	r3,r4,r3
   82c2c:	b7000015 	stw	fp,0(r22)
   82c30:	b1000115 	stw	r4,4(r22)
   82c34:	d8c02015 	stw	r3,128(sp)
   82c38:	dc401f15 	stw	r17,124(sp)
   82c3c:	008001c4 	movi	r2,7
   82c40:	14400e16 	blt	r2,r17,82c7c <___vfprintf_internal_r+0x111c>
   82c44:	b2000204 	addi	r8,r22,8
   82c48:	003e3a06 	br	82534 <__alt_data_end+0xfffa0ab4>
   82c4c:	01000274 	movhi	r4,9
   82c50:	21038b84 	addi	r4,r4,3630
   82c54:	d9002b15 	stw	r4,172(sp)
   82c58:	d9002b17 	ldw	r4,172(sp)
   82c5c:	1c07883a 	add	r3,r3,r16
   82c60:	44000115 	stw	r16,4(r8)
   82c64:	41000015 	stw	r4,0(r8)
   82c68:	10800044 	addi	r2,r2,1
   82c6c:	d8c02015 	stw	r3,128(sp)
   82c70:	d8801f15 	stw	r2,124(sp)
   82c74:	010001c4 	movi	r4,7
   82c78:	20be2d0e 	bge	r4,r2,82530 <__alt_data_end+0xfffa0ab0>
   82c7c:	d9002c17 	ldw	r4,176(sp)
   82c80:	d9801e04 	addi	r6,sp,120
   82c84:	b80b883a 	mov	r5,r23
   82c88:	00891b80 	call	891b8 <__sprint_r>
   82c8c:	103cb61e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   82c90:	d8c02017 	ldw	r3,128(sp)
   82c94:	da000404 	addi	r8,sp,16
   82c98:	003e2606 	br	82534 <__alt_data_end+0xfffa0ab4>
   82c9c:	d9002c17 	ldw	r4,176(sp)
   82ca0:	d9801e04 	addi	r6,sp,120
   82ca4:	b80b883a 	mov	r5,r23
   82ca8:	00891b80 	call	891b8 <__sprint_r>
   82cac:	103e5d26 	beq	r2,zero,82624 <__alt_data_end+0xfffa0ba4>
   82cb0:	003cad06 	br	81f68 <__alt_data_end+0xfffa04e8>
   82cb4:	d9002c17 	ldw	r4,176(sp)
   82cb8:	d9801e04 	addi	r6,sp,120
   82cbc:	b80b883a 	mov	r5,r23
   82cc0:	00891b80 	call	891b8 <__sprint_r>
   82cc4:	103ca81e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   82cc8:	d8c02017 	ldw	r3,128(sp)
   82ccc:	da000404 	addi	r8,sp,16
   82cd0:	003e0b06 	br	82500 <__alt_data_end+0xfffa0a80>
   82cd4:	d9002c17 	ldw	r4,176(sp)
   82cd8:	d9801e04 	addi	r6,sp,120
   82cdc:	b80b883a 	mov	r5,r23
   82ce0:	00891b80 	call	891b8 <__sprint_r>
   82ce4:	103ca01e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   82ce8:	d8c02017 	ldw	r3,128(sp)
   82cec:	da000404 	addi	r8,sp,16
   82cf0:	003dbd06 	br	823e8 <__alt_data_end+0xfffa0968>
   82cf4:	d9002c17 	ldw	r4,176(sp)
   82cf8:	d9801e04 	addi	r6,sp,120
   82cfc:	b80b883a 	mov	r5,r23
   82d00:	00891b80 	call	891b8 <__sprint_r>
   82d04:	103c981e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   82d08:	d8c02017 	ldw	r3,128(sp)
   82d0c:	da000404 	addi	r8,sp,16
   82d10:	003dc306 	br	82420 <__alt_data_end+0xfffa09a0>
   82d14:	d8802917 	ldw	r2,164(sp)
   82d18:	d8002785 	stb	zero,158(sp)
   82d1c:	103f0616 	blt	r2,zero,82938 <__alt_data_end+0xfffa0eb8>
   82d20:	00ffdfc4 	movi	r3,-129
   82d24:	9d84b03a 	or	r2,r19,r22
   82d28:	90e4703a 	and	r18,r18,r3
   82d2c:	103c6b26 	beq	r2,zero,81edc <__alt_data_end+0xfffa045c>
   82d30:	0039883a 	mov	fp,zero
   82d34:	003e7406 	br	82708 <__alt_data_end+0xfffa0c88>
   82d38:	9080040c 	andi	r2,r18,16
   82d3c:	1001b326 	beq	r2,zero,8340c <___vfprintf_internal_r+0x18ac>
   82d40:	d9002d17 	ldw	r4,180(sp)
   82d44:	d9402917 	ldw	r5,164(sp)
   82d48:	d8002785 	stb	zero,158(sp)
   82d4c:	20800104 	addi	r2,r4,4
   82d50:	24c00017 	ldw	r19,0(r4)
   82d54:	002d883a 	mov	r22,zero
   82d58:	2801b516 	blt	r5,zero,83430 <___vfprintf_internal_r+0x18d0>
   82d5c:	00ffdfc4 	movi	r3,-129
   82d60:	d8802d15 	stw	r2,180(sp)
   82d64:	90e4703a 	and	r18,r18,r3
   82d68:	983d2726 	beq	r19,zero,82208 <__alt_data_end+0xfffa0788>
   82d6c:	0039883a 	mov	fp,zero
   82d70:	003d2a06 	br	8221c <__alt_data_end+0xfffa079c>
   82d74:	dc402617 	ldw	r17,152(sp)
   82d78:	0441d30e 	bge	zero,r17,834c8 <___vfprintf_internal_r+0x1968>
   82d7c:	dc403217 	ldw	r17,200(sp)
   82d80:	d8803317 	ldw	r2,204(sp)
   82d84:	1440010e 	bge	r2,r17,82d8c <___vfprintf_internal_r+0x122c>
   82d88:	1023883a 	mov	r17,r2
   82d8c:	04400a0e 	bge	zero,r17,82db8 <___vfprintf_internal_r+0x1258>
   82d90:	d8801f17 	ldw	r2,124(sp)
   82d94:	1c47883a 	add	r3,r3,r17
   82d98:	44000015 	stw	r16,0(r8)
   82d9c:	10800044 	addi	r2,r2,1
   82da0:	44400115 	stw	r17,4(r8)
   82da4:	d8c02015 	stw	r3,128(sp)
   82da8:	d8801f15 	stw	r2,124(sp)
   82dac:	010001c4 	movi	r4,7
   82db0:	20826516 	blt	r4,r2,83748 <___vfprintf_internal_r+0x1be8>
   82db4:	42000204 	addi	r8,r8,8
   82db8:	88026116 	blt	r17,zero,83740 <___vfprintf_internal_r+0x1be0>
   82dbc:	d9003217 	ldw	r4,200(sp)
   82dc0:	2463c83a 	sub	r17,r4,r17
   82dc4:	04407b0e 	bge	zero,r17,82fb4 <___vfprintf_internal_r+0x1454>
   82dc8:	05800404 	movi	r22,16
   82dcc:	d8801f17 	ldw	r2,124(sp)
   82dd0:	b4419d0e 	bge	r22,r17,83448 <___vfprintf_internal_r+0x18e8>
   82dd4:	01000274 	movhi	r4,9
   82dd8:	21038b84 	addi	r4,r4,3630
   82ddc:	d9002b15 	stw	r4,172(sp)
   82de0:	070001c4 	movi	fp,7
   82de4:	dcc02c17 	ldw	r19,176(sp)
   82de8:	00000306 	br	82df8 <___vfprintf_internal_r+0x1298>
   82dec:	42000204 	addi	r8,r8,8
   82df0:	8c7ffc04 	addi	r17,r17,-16
   82df4:	b441970e 	bge	r22,r17,83454 <___vfprintf_internal_r+0x18f4>
   82df8:	18c00404 	addi	r3,r3,16
   82dfc:	10800044 	addi	r2,r2,1
   82e00:	45000015 	stw	r20,0(r8)
   82e04:	45800115 	stw	r22,4(r8)
   82e08:	d8c02015 	stw	r3,128(sp)
   82e0c:	d8801f15 	stw	r2,124(sp)
   82e10:	e0bff60e 	bge	fp,r2,82dec <__alt_data_end+0xfffa136c>
   82e14:	d9801e04 	addi	r6,sp,120
   82e18:	b80b883a 	mov	r5,r23
   82e1c:	9809883a 	mov	r4,r19
   82e20:	00891b80 	call	891b8 <__sprint_r>
   82e24:	103c501e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   82e28:	d8c02017 	ldw	r3,128(sp)
   82e2c:	d8801f17 	ldw	r2,124(sp)
   82e30:	da000404 	addi	r8,sp,16
   82e34:	003fee06 	br	82df0 <__alt_data_end+0xfffa1370>
   82e38:	d9002c17 	ldw	r4,176(sp)
   82e3c:	d9801e04 	addi	r6,sp,120
   82e40:	b80b883a 	mov	r5,r23
   82e44:	00891b80 	call	891b8 <__sprint_r>
   82e48:	103c471e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   82e4c:	d8c02017 	ldw	r3,128(sp)
   82e50:	df002787 	ldb	fp,158(sp)
   82e54:	da000404 	addi	r8,sp,16
   82e58:	003d5606 	br	823b4 <__alt_data_end+0xfffa0934>
   82e5c:	9080040c 	andi	r2,r18,16
   82e60:	10016126 	beq	r2,zero,833e8 <___vfprintf_internal_r+0x1888>
   82e64:	d8802d17 	ldw	r2,180(sp)
   82e68:	14c00017 	ldw	r19,0(r2)
   82e6c:	10800104 	addi	r2,r2,4
   82e70:	d8802d15 	stw	r2,180(sp)
   82e74:	982dd7fa 	srai	r22,r19,31
   82e78:	b005883a 	mov	r2,r22
   82e7c:	003c8206 	br	82088 <__alt_data_end+0xfffa0608>
   82e80:	9080040c 	andi	r2,r18,16
   82e84:	10003526 	beq	r2,zero,82f5c <___vfprintf_internal_r+0x13fc>
   82e88:	d9402d17 	ldw	r5,180(sp)
   82e8c:	d8c02917 	ldw	r3,164(sp)
   82e90:	d8002785 	stb	zero,158(sp)
   82e94:	28800104 	addi	r2,r5,4
   82e98:	2cc00017 	ldw	r19,0(r5)
   82e9c:	002d883a 	mov	r22,zero
   82ea0:	18003716 	blt	r3,zero,82f80 <___vfprintf_internal_r+0x1420>
   82ea4:	00ffdfc4 	movi	r3,-129
   82ea8:	d8802d15 	stw	r2,180(sp)
   82eac:	90e4703a 	and	r18,r18,r3
   82eb0:	0039883a 	mov	fp,zero
   82eb4:	983df326 	beq	r19,zero,82684 <__alt_data_end+0xfffa0c04>
   82eb8:	00800244 	movi	r2,9
   82ebc:	14fc7b36 	bltu	r2,r19,820ac <__alt_data_end+0xfffa062c>
   82ec0:	d8c02817 	ldw	r3,160(sp)
   82ec4:	dc001dc4 	addi	r16,sp,119
   82ec8:	9cc00c04 	addi	r19,r19,48
   82ecc:	1c07c83a 	sub	r3,r3,r16
   82ed0:	dcc01dc5 	stb	r19,119(sp)
   82ed4:	d8c02e15 	stw	r3,184(sp)
   82ed8:	003ce806 	br	8227c <__alt_data_end+0xfffa07fc>
   82edc:	d8803317 	ldw	r2,204(sp)
   82ee0:	143fffc4 	addi	r16,r2,-1
   82ee4:	043f4d0e 	bge	zero,r16,82c1c <__alt_data_end+0xfffa119c>
   82ee8:	07000404 	movi	fp,16
   82eec:	e400810e 	bge	fp,r16,830f4 <___vfprintf_internal_r+0x1594>
   82ef0:	01400274 	movhi	r5,9
   82ef4:	29438b84 	addi	r5,r5,3630
   82ef8:	d9402b15 	stw	r5,172(sp)
   82efc:	01c001c4 	movi	r7,7
   82f00:	dcc02c17 	ldw	r19,176(sp)
   82f04:	00000306 	br	82f14 <___vfprintf_internal_r+0x13b4>
   82f08:	b5800204 	addi	r22,r22,8
   82f0c:	843ffc04 	addi	r16,r16,-16
   82f10:	e4007b0e 	bge	fp,r16,83100 <___vfprintf_internal_r+0x15a0>
   82f14:	18c00404 	addi	r3,r3,16
   82f18:	8c400044 	addi	r17,r17,1
   82f1c:	b5000015 	stw	r20,0(r22)
   82f20:	b7000115 	stw	fp,4(r22)
   82f24:	d8c02015 	stw	r3,128(sp)
   82f28:	dc401f15 	stw	r17,124(sp)
   82f2c:	3c7ff60e 	bge	r7,r17,82f08 <__alt_data_end+0xfffa1488>
   82f30:	d9801e04 	addi	r6,sp,120
   82f34:	b80b883a 	mov	r5,r23
   82f38:	9809883a 	mov	r4,r19
   82f3c:	d9c03c15 	stw	r7,240(sp)
   82f40:	00891b80 	call	891b8 <__sprint_r>
   82f44:	d9c03c17 	ldw	r7,240(sp)
   82f48:	103c071e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   82f4c:	d8c02017 	ldw	r3,128(sp)
   82f50:	dc401f17 	ldw	r17,124(sp)
   82f54:	dd800404 	addi	r22,sp,16
   82f58:	003fec06 	br	82f0c <__alt_data_end+0xfffa148c>
   82f5c:	9080100c 	andi	r2,r18,64
   82f60:	d8002785 	stb	zero,158(sp)
   82f64:	10010e26 	beq	r2,zero,833a0 <___vfprintf_internal_r+0x1840>
   82f68:	d9002d17 	ldw	r4,180(sp)
   82f6c:	d9402917 	ldw	r5,164(sp)
   82f70:	002d883a 	mov	r22,zero
   82f74:	20800104 	addi	r2,r4,4
   82f78:	24c0000b 	ldhu	r19,0(r4)
   82f7c:	283fc90e 	bge	r5,zero,82ea4 <__alt_data_end+0xfffa1424>
   82f80:	d8802d15 	stw	r2,180(sp)
   82f84:	0039883a 	mov	fp,zero
   82f88:	9d84b03a 	or	r2,r19,r22
   82f8c:	103c461e 	bne	r2,zero,820a8 <__alt_data_end+0xfffa0628>
   82f90:	00800044 	movi	r2,1
   82f94:	003e6c06 	br	82948 <__alt_data_end+0xfffa0ec8>
   82f98:	d9002c17 	ldw	r4,176(sp)
   82f9c:	d9801e04 	addi	r6,sp,120
   82fa0:	b80b883a 	mov	r5,r23
   82fa4:	00891b80 	call	891b8 <__sprint_r>
   82fa8:	103bef1e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   82fac:	d8c02017 	ldw	r3,128(sp)
   82fb0:	da000404 	addi	r8,sp,16
   82fb4:	d9003217 	ldw	r4,200(sp)
   82fb8:	d8802617 	ldw	r2,152(sp)
   82fbc:	d9403317 	ldw	r5,204(sp)
   82fc0:	8123883a 	add	r17,r16,r4
   82fc4:	11400216 	blt	r2,r5,82fd0 <___vfprintf_internal_r+0x1470>
   82fc8:	9100004c 	andi	r4,r18,1
   82fcc:	20000d26 	beq	r4,zero,83004 <___vfprintf_internal_r+0x14a4>
   82fd0:	d9003717 	ldw	r4,220(sp)
   82fd4:	d9403417 	ldw	r5,208(sp)
   82fd8:	1907883a 	add	r3,r3,r4
   82fdc:	d9001f17 	ldw	r4,124(sp)
   82fe0:	41400015 	stw	r5,0(r8)
   82fe4:	d9403717 	ldw	r5,220(sp)
   82fe8:	21000044 	addi	r4,r4,1
   82fec:	d8c02015 	stw	r3,128(sp)
   82ff0:	41400115 	stw	r5,4(r8)
   82ff4:	d9001f15 	stw	r4,124(sp)
   82ff8:	014001c4 	movi	r5,7
   82ffc:	2901e816 	blt	r5,r4,837a0 <___vfprintf_internal_r+0x1c40>
   83000:	42000204 	addi	r8,r8,8
   83004:	d9003317 	ldw	r4,204(sp)
   83008:	8121883a 	add	r16,r16,r4
   8300c:	2085c83a 	sub	r2,r4,r2
   83010:	8461c83a 	sub	r16,r16,r17
   83014:	1400010e 	bge	r2,r16,8301c <___vfprintf_internal_r+0x14bc>
   83018:	1021883a 	mov	r16,r2
   8301c:	04000a0e 	bge	zero,r16,83048 <___vfprintf_internal_r+0x14e8>
   83020:	d9001f17 	ldw	r4,124(sp)
   83024:	1c07883a 	add	r3,r3,r16
   83028:	44400015 	stw	r17,0(r8)
   8302c:	21000044 	addi	r4,r4,1
   83030:	44000115 	stw	r16,4(r8)
   83034:	d8c02015 	stw	r3,128(sp)
   83038:	d9001f15 	stw	r4,124(sp)
   8303c:	014001c4 	movi	r5,7
   83040:	2901fb16 	blt	r5,r4,83830 <___vfprintf_internal_r+0x1cd0>
   83044:	42000204 	addi	r8,r8,8
   83048:	8001f716 	blt	r16,zero,83828 <___vfprintf_internal_r+0x1cc8>
   8304c:	1421c83a 	sub	r16,r2,r16
   83050:	043d380e 	bge	zero,r16,82534 <__alt_data_end+0xfffa0ab4>
   83054:	04400404 	movi	r17,16
   83058:	d8801f17 	ldw	r2,124(sp)
   8305c:	8c3efb0e 	bge	r17,r16,82c4c <__alt_data_end+0xfffa11cc>
   83060:	01400274 	movhi	r5,9
   83064:	29438b84 	addi	r5,r5,3630
   83068:	d9402b15 	stw	r5,172(sp)
   8306c:	058001c4 	movi	r22,7
   83070:	dcc02c17 	ldw	r19,176(sp)
   83074:	00000306 	br	83084 <___vfprintf_internal_r+0x1524>
   83078:	42000204 	addi	r8,r8,8
   8307c:	843ffc04 	addi	r16,r16,-16
   83080:	8c3ef50e 	bge	r17,r16,82c58 <__alt_data_end+0xfffa11d8>
   83084:	18c00404 	addi	r3,r3,16
   83088:	10800044 	addi	r2,r2,1
   8308c:	45000015 	stw	r20,0(r8)
   83090:	44400115 	stw	r17,4(r8)
   83094:	d8c02015 	stw	r3,128(sp)
   83098:	d8801f15 	stw	r2,124(sp)
   8309c:	b0bff60e 	bge	r22,r2,83078 <__alt_data_end+0xfffa15f8>
   830a0:	d9801e04 	addi	r6,sp,120
   830a4:	b80b883a 	mov	r5,r23
   830a8:	9809883a 	mov	r4,r19
   830ac:	00891b80 	call	891b8 <__sprint_r>
   830b0:	103bad1e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   830b4:	d8c02017 	ldw	r3,128(sp)
   830b8:	d8801f17 	ldw	r2,124(sp)
   830bc:	da000404 	addi	r8,sp,16
   830c0:	003fee06 	br	8307c <__alt_data_end+0xfffa15fc>
   830c4:	9088703a 	and	r4,r18,r2
   830c8:	203eab1e 	bne	r4,zero,82b78 <__alt_data_end+0xfffa10f8>
   830cc:	dc401f17 	ldw	r17,124(sp)
   830d0:	40800115 	stw	r2,4(r8)
   830d4:	44000015 	stw	r16,0(r8)
   830d8:	8c400044 	addi	r17,r17,1
   830dc:	d8c02015 	stw	r3,128(sp)
   830e0:	dc401f15 	stw	r17,124(sp)
   830e4:	008001c4 	movi	r2,7
   830e8:	14400e16 	blt	r2,r17,83124 <___vfprintf_internal_r+0x15c4>
   830ec:	45800204 	addi	r22,r8,8
   830f0:	003eca06 	br	82c1c <__alt_data_end+0xfffa119c>
   830f4:	01000274 	movhi	r4,9
   830f8:	21038b84 	addi	r4,r4,3630
   830fc:	d9002b15 	stw	r4,172(sp)
   83100:	d8802b17 	ldw	r2,172(sp)
   83104:	1c07883a 	add	r3,r3,r16
   83108:	8c400044 	addi	r17,r17,1
   8310c:	b0800015 	stw	r2,0(r22)
   83110:	b4000115 	stw	r16,4(r22)
   83114:	d8c02015 	stw	r3,128(sp)
   83118:	dc401f15 	stw	r17,124(sp)
   8311c:	008001c4 	movi	r2,7
   83120:	147ebd0e 	bge	r2,r17,82c18 <__alt_data_end+0xfffa1198>
   83124:	d9002c17 	ldw	r4,176(sp)
   83128:	d9801e04 	addi	r6,sp,120
   8312c:	b80b883a 	mov	r5,r23
   83130:	00891b80 	call	891b8 <__sprint_r>
   83134:	103b8c1e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   83138:	d8c02017 	ldw	r3,128(sp)
   8313c:	dc401f17 	ldw	r17,124(sp)
   83140:	dd800404 	addi	r22,sp,16
   83144:	003eb506 	br	82c1c <__alt_data_end+0xfffa119c>
   83148:	d9002c17 	ldw	r4,176(sp)
   8314c:	d9801e04 	addi	r6,sp,120
   83150:	b80b883a 	mov	r5,r23
   83154:	00891b80 	call	891b8 <__sprint_r>
   83158:	103b831e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   8315c:	d8c02017 	ldw	r3,128(sp)
   83160:	dc401f17 	ldw	r17,124(sp)
   83164:	da000404 	addi	r8,sp,16
   83168:	003e8d06 	br	82ba0 <__alt_data_end+0xfffa1120>
   8316c:	d9002c17 	ldw	r4,176(sp)
   83170:	d9801e04 	addi	r6,sp,120
   83174:	b80b883a 	mov	r5,r23
   83178:	00891b80 	call	891b8 <__sprint_r>
   8317c:	103b7a1e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   83180:	d8c02017 	ldw	r3,128(sp)
   83184:	dc401f17 	ldw	r17,124(sp)
   83188:	dd800404 	addi	r22,sp,16
   8318c:	003e8f06 	br	82bcc <__alt_data_end+0xfffa114c>
   83190:	0027883a 	mov	r19,zero
   83194:	003f4a06 	br	82ec0 <__alt_data_end+0xfffa1440>
   83198:	d9002c17 	ldw	r4,176(sp)
   8319c:	d9801e04 	addi	r6,sp,120
   831a0:	b80b883a 	mov	r5,r23
   831a4:	00891b80 	call	891b8 <__sprint_r>
   831a8:	103b6f1e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   831ac:	d8c02017 	ldw	r3,128(sp)
   831b0:	da000404 	addi	r8,sp,16
   831b4:	003c9d06 	br	8242c <__alt_data_end+0xfffa09ac>
   831b8:	04e7c83a 	sub	r19,zero,r19
   831bc:	9804c03a 	cmpne	r2,r19,zero
   831c0:	05adc83a 	sub	r22,zero,r22
   831c4:	b0adc83a 	sub	r22,r22,r2
   831c8:	d8802917 	ldw	r2,164(sp)
   831cc:	07000b44 	movi	fp,45
   831d0:	df002785 	stb	fp,158(sp)
   831d4:	10017b16 	blt	r2,zero,837c4 <___vfprintf_internal_r+0x1c64>
   831d8:	00bfdfc4 	movi	r2,-129
   831dc:	90a4703a 	and	r18,r18,r2
   831e0:	003bb106 	br	820a8 <__alt_data_end+0xfffa0628>
   831e4:	d9003617 	ldw	r4,216(sp)
   831e8:	d9403817 	ldw	r5,224(sp)
   831ec:	da003d15 	stw	r8,244(sp)
   831f0:	0088ddc0 	call	88ddc <__fpclassifyd>
   831f4:	da003d17 	ldw	r8,244(sp)
   831f8:	1000f026 	beq	r2,zero,835bc <___vfprintf_internal_r+0x1a5c>
   831fc:	d9002917 	ldw	r4,164(sp)
   83200:	05bff7c4 	movi	r22,-33
   83204:	00bfffc4 	movi	r2,-1
   83208:	8dac703a 	and	r22,r17,r22
   8320c:	20820026 	beq	r4,r2,83a10 <___vfprintf_internal_r+0x1eb0>
   83210:	008011c4 	movi	r2,71
   83214:	b081f726 	beq	r22,r2,839f4 <___vfprintf_internal_r+0x1e94>
   83218:	d9003817 	ldw	r4,224(sp)
   8321c:	90c04014 	ori	r3,r18,256
   83220:	d8c02b15 	stw	r3,172(sp)
   83224:	20021516 	blt	r4,zero,83a7c <___vfprintf_internal_r+0x1f1c>
   83228:	dcc03817 	ldw	r19,224(sp)
   8322c:	d8002a05 	stb	zero,168(sp)
   83230:	00801984 	movi	r2,102
   83234:	8881f926 	beq	r17,r2,83a1c <___vfprintf_internal_r+0x1ebc>
   83238:	00801184 	movi	r2,70
   8323c:	88821c26 	beq	r17,r2,83ab0 <___vfprintf_internal_r+0x1f50>
   83240:	00801144 	movi	r2,69
   83244:	b081ef26 	beq	r22,r2,83a04 <___vfprintf_internal_r+0x1ea4>
   83248:	d8c02917 	ldw	r3,164(sp)
   8324c:	d8802104 	addi	r2,sp,132
   83250:	d8800315 	stw	r2,12(sp)
   83254:	d9403617 	ldw	r5,216(sp)
   83258:	d8802504 	addi	r2,sp,148
   8325c:	d9002c17 	ldw	r4,176(sp)
   83260:	d8800215 	stw	r2,8(sp)
   83264:	d8802604 	addi	r2,sp,152
   83268:	d8c00015 	stw	r3,0(sp)
   8326c:	d8800115 	stw	r2,4(sp)
   83270:	01c00084 	movi	r7,2
   83274:	980d883a 	mov	r6,r19
   83278:	d8c03c15 	stw	r3,240(sp)
   8327c:	da003d15 	stw	r8,244(sp)
   83280:	00841840 	call	84184 <_dtoa_r>
   83284:	1021883a 	mov	r16,r2
   83288:	008019c4 	movi	r2,103
   8328c:	d8c03c17 	ldw	r3,240(sp)
   83290:	da003d17 	ldw	r8,244(sp)
   83294:	88817126 	beq	r17,r2,8385c <___vfprintf_internal_r+0x1cfc>
   83298:	008011c4 	movi	r2,71
   8329c:	88829226 	beq	r17,r2,83ce8 <___vfprintf_internal_r+0x2188>
   832a0:	80f9883a 	add	fp,r16,r3
   832a4:	d9003617 	ldw	r4,216(sp)
   832a8:	000d883a 	mov	r6,zero
   832ac:	000f883a 	mov	r7,zero
   832b0:	980b883a 	mov	r5,r19
   832b4:	da003d15 	stw	r8,244(sp)
   832b8:	008ccdc0 	call	8ccdc <__eqdf2>
   832bc:	da003d17 	ldw	r8,244(sp)
   832c0:	10018d26 	beq	r2,zero,838f8 <___vfprintf_internal_r+0x1d98>
   832c4:	d8802117 	ldw	r2,132(sp)
   832c8:	1700062e 	bgeu	r2,fp,832e4 <___vfprintf_internal_r+0x1784>
   832cc:	01000c04 	movi	r4,48
   832d0:	10c00044 	addi	r3,r2,1
   832d4:	d8c02115 	stw	r3,132(sp)
   832d8:	11000005 	stb	r4,0(r2)
   832dc:	d8802117 	ldw	r2,132(sp)
   832e0:	173ffb36 	bltu	r2,fp,832d0 <__alt_data_end+0xfffa1850>
   832e4:	1405c83a 	sub	r2,r2,r16
   832e8:	d8803315 	stw	r2,204(sp)
   832ec:	008011c4 	movi	r2,71
   832f0:	b0817626 	beq	r22,r2,838cc <___vfprintf_internal_r+0x1d6c>
   832f4:	00801944 	movi	r2,101
   832f8:	1442810e 	bge	r2,r17,83d00 <___vfprintf_internal_r+0x21a0>
   832fc:	d8c02617 	ldw	r3,152(sp)
   83300:	00801984 	movi	r2,102
   83304:	d8c03215 	stw	r3,200(sp)
   83308:	8881fe26 	beq	r17,r2,83b04 <___vfprintf_internal_r+0x1fa4>
   8330c:	d8c03217 	ldw	r3,200(sp)
   83310:	d9003317 	ldw	r4,204(sp)
   83314:	1901dd16 	blt	r3,r4,83a8c <___vfprintf_internal_r+0x1f2c>
   83318:	9480004c 	andi	r18,r18,1
   8331c:	90022b1e 	bne	r18,zero,83bcc <___vfprintf_internal_r+0x206c>
   83320:	1805883a 	mov	r2,r3
   83324:	18028016 	blt	r3,zero,83d28 <___vfprintf_internal_r+0x21c8>
   83328:	d8c03217 	ldw	r3,200(sp)
   8332c:	044019c4 	movi	r17,103
   83330:	d8c02e15 	stw	r3,184(sp)
   83334:	df002a07 	ldb	fp,168(sp)
   83338:	e001531e 	bne	fp,zero,83888 <___vfprintf_internal_r+0x1d28>
   8333c:	df002783 	ldbu	fp,158(sp)
   83340:	d8802a15 	stw	r2,168(sp)
   83344:	dc802b17 	ldw	r18,172(sp)
   83348:	d8002915 	stw	zero,164(sp)
   8334c:	003bd106 	br	82294 <__alt_data_end+0xfffa0814>
   83350:	d8802d17 	ldw	r2,180(sp)
   83354:	d8c02d17 	ldw	r3,180(sp)
   83358:	d9002d17 	ldw	r4,180(sp)
   8335c:	10800017 	ldw	r2,0(r2)
   83360:	18c00117 	ldw	r3,4(r3)
   83364:	21000204 	addi	r4,r4,8
   83368:	d8803615 	stw	r2,216(sp)
   8336c:	d8c03815 	stw	r3,224(sp)
   83370:	d9002d15 	stw	r4,180(sp)
   83374:	003b7506 	br	8214c <__alt_data_end+0xfffa06cc>
   83378:	ac400007 	ldb	r17,0(r21)
   8337c:	003a5906 	br	81ce4 <__alt_data_end+0xfffa0264>
   83380:	9080100c 	andi	r2,r18,64
   83384:	1000a826 	beq	r2,zero,83628 <___vfprintf_internal_r+0x1ac8>
   83388:	d9002d17 	ldw	r4,180(sp)
   8338c:	002d883a 	mov	r22,zero
   83390:	24c0000b 	ldhu	r19,0(r4)
   83394:	21000104 	addi	r4,r4,4
   83398:	d9002d15 	stw	r4,180(sp)
   8339c:	003ccb06 	br	826cc <__alt_data_end+0xfffa0c4c>
   833a0:	d8c02d17 	ldw	r3,180(sp)
   833a4:	d9002917 	ldw	r4,164(sp)
   833a8:	002d883a 	mov	r22,zero
   833ac:	18800104 	addi	r2,r3,4
   833b0:	1cc00017 	ldw	r19,0(r3)
   833b4:	203ebb0e 	bge	r4,zero,82ea4 <__alt_data_end+0xfffa1424>
   833b8:	003ef106 	br	82f80 <__alt_data_end+0xfffa1500>
   833bc:	9080040c 	andi	r2,r18,16
   833c0:	1000921e 	bne	r2,zero,8360c <___vfprintf_internal_r+0x1aac>
   833c4:	9480100c 	andi	r18,r18,64
   833c8:	90013926 	beq	r18,zero,838b0 <___vfprintf_internal_r+0x1d50>
   833cc:	d9002d17 	ldw	r4,180(sp)
   833d0:	d9402f17 	ldw	r5,188(sp)
   833d4:	20800017 	ldw	r2,0(r4)
   833d8:	21000104 	addi	r4,r4,4
   833dc:	d9002d15 	stw	r4,180(sp)
   833e0:	1140000d 	sth	r5,0(r2)
   833e4:	003a1606 	br	81c40 <__alt_data_end+0xfffa01c0>
   833e8:	9080100c 	andi	r2,r18,64
   833ec:	10008026 	beq	r2,zero,835f0 <___vfprintf_internal_r+0x1a90>
   833f0:	d8c02d17 	ldw	r3,180(sp)
   833f4:	1cc0000f 	ldh	r19,0(r3)
   833f8:	18c00104 	addi	r3,r3,4
   833fc:	d8c02d15 	stw	r3,180(sp)
   83400:	982dd7fa 	srai	r22,r19,31
   83404:	b005883a 	mov	r2,r22
   83408:	003b1f06 	br	82088 <__alt_data_end+0xfffa0608>
   8340c:	9080100c 	andi	r2,r18,64
   83410:	d8002785 	stb	zero,158(sp)
   83414:	10008a1e 	bne	r2,zero,83640 <___vfprintf_internal_r+0x1ae0>
   83418:	d9402d17 	ldw	r5,180(sp)
   8341c:	d8c02917 	ldw	r3,164(sp)
   83420:	002d883a 	mov	r22,zero
   83424:	28800104 	addi	r2,r5,4
   83428:	2cc00017 	ldw	r19,0(r5)
   8342c:	183e4b0e 	bge	r3,zero,82d5c <__alt_data_end+0xfffa12dc>
   83430:	9d86b03a 	or	r3,r19,r22
   83434:	d8802d15 	stw	r2,180(sp)
   83438:	183e4c1e 	bne	r3,zero,82d6c <__alt_data_end+0xfffa12ec>
   8343c:	0039883a 	mov	fp,zero
   83440:	0005883a 	mov	r2,zero
   83444:	003d4006 	br	82948 <__alt_data_end+0xfffa0ec8>
   83448:	01400274 	movhi	r5,9
   8344c:	29438b84 	addi	r5,r5,3630
   83450:	d9402b15 	stw	r5,172(sp)
   83454:	d9402b17 	ldw	r5,172(sp)
   83458:	1c47883a 	add	r3,r3,r17
   8345c:	10800044 	addi	r2,r2,1
   83460:	41400015 	stw	r5,0(r8)
   83464:	44400115 	stw	r17,4(r8)
   83468:	d8c02015 	stw	r3,128(sp)
   8346c:	d8801f15 	stw	r2,124(sp)
   83470:	010001c4 	movi	r4,7
   83474:	20bec816 	blt	r4,r2,82f98 <__alt_data_end+0xfffa1518>
   83478:	42000204 	addi	r8,r8,8
   8347c:	003ecd06 	br	82fb4 <__alt_data_end+0xfffa1534>
   83480:	d9002917 	ldw	r4,164(sp)
   83484:	d8002785 	stb	zero,158(sp)
   83488:	203d2d16 	blt	r4,zero,82940 <__alt_data_end+0xfffa0ec0>
   8348c:	00bfdfc4 	movi	r2,-129
   83490:	90a4703a 	and	r18,r18,r2
   83494:	003a9106 	br	81edc <__alt_data_end+0xfffa045c>
   83498:	01000274 	movhi	r4,9
   8349c:	21038b84 	addi	r4,r4,3630
   834a0:	d9002b15 	stw	r4,172(sp)
   834a4:	003c0c06 	br	824d8 <__alt_data_end+0xfffa0a58>
   834a8:	d9002c17 	ldw	r4,176(sp)
   834ac:	d9801e04 	addi	r6,sp,120
   834b0:	b80b883a 	mov	r5,r23
   834b4:	00891b80 	call	891b8 <__sprint_r>
   834b8:	103aab1e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   834bc:	d8c02017 	ldw	r3,128(sp)
   834c0:	da000404 	addi	r8,sp,16
   834c4:	003d4106 	br	829cc <__alt_data_end+0xfffa0f4c>
   834c8:	d8801f17 	ldw	r2,124(sp)
   834cc:	01400274 	movhi	r5,9
   834d0:	01000044 	movi	r4,1
   834d4:	18c00044 	addi	r3,r3,1
   834d8:	10800044 	addi	r2,r2,1
   834dc:	29438b04 	addi	r5,r5,3628
   834e0:	41000115 	stw	r4,4(r8)
   834e4:	41400015 	stw	r5,0(r8)
   834e8:	d8c02015 	stw	r3,128(sp)
   834ec:	d8801f15 	stw	r2,124(sp)
   834f0:	010001c4 	movi	r4,7
   834f4:	20805c16 	blt	r4,r2,83668 <___vfprintf_internal_r+0x1b08>
   834f8:	42000204 	addi	r8,r8,8
   834fc:	8800041e 	bne	r17,zero,83510 <___vfprintf_internal_r+0x19b0>
   83500:	d8803317 	ldw	r2,204(sp)
   83504:	1000021e 	bne	r2,zero,83510 <___vfprintf_internal_r+0x19b0>
   83508:	9080004c 	andi	r2,r18,1
   8350c:	103c0926 	beq	r2,zero,82534 <__alt_data_end+0xfffa0ab4>
   83510:	d9003717 	ldw	r4,220(sp)
   83514:	d8801f17 	ldw	r2,124(sp)
   83518:	d9403417 	ldw	r5,208(sp)
   8351c:	20c7883a 	add	r3,r4,r3
   83520:	10800044 	addi	r2,r2,1
   83524:	41000115 	stw	r4,4(r8)
   83528:	41400015 	stw	r5,0(r8)
   8352c:	d8c02015 	stw	r3,128(sp)
   83530:	d8801f15 	stw	r2,124(sp)
   83534:	010001c4 	movi	r4,7
   83538:	20812116 	blt	r4,r2,839c0 <___vfprintf_internal_r+0x1e60>
   8353c:	42000204 	addi	r8,r8,8
   83540:	0463c83a 	sub	r17,zero,r17
   83544:	0440730e 	bge	zero,r17,83714 <___vfprintf_internal_r+0x1bb4>
   83548:	05800404 	movi	r22,16
   8354c:	b440860e 	bge	r22,r17,83768 <___vfprintf_internal_r+0x1c08>
   83550:	01400274 	movhi	r5,9
   83554:	29438b84 	addi	r5,r5,3630
   83558:	d9402b15 	stw	r5,172(sp)
   8355c:	070001c4 	movi	fp,7
   83560:	dcc02c17 	ldw	r19,176(sp)
   83564:	00000306 	br	83574 <___vfprintf_internal_r+0x1a14>
   83568:	42000204 	addi	r8,r8,8
   8356c:	8c7ffc04 	addi	r17,r17,-16
   83570:	b440800e 	bge	r22,r17,83774 <___vfprintf_internal_r+0x1c14>
   83574:	18c00404 	addi	r3,r3,16
   83578:	10800044 	addi	r2,r2,1
   8357c:	45000015 	stw	r20,0(r8)
   83580:	45800115 	stw	r22,4(r8)
   83584:	d8c02015 	stw	r3,128(sp)
   83588:	d8801f15 	stw	r2,124(sp)
   8358c:	e0bff60e 	bge	fp,r2,83568 <__alt_data_end+0xfffa1ae8>
   83590:	d9801e04 	addi	r6,sp,120
   83594:	b80b883a 	mov	r5,r23
   83598:	9809883a 	mov	r4,r19
   8359c:	00891b80 	call	891b8 <__sprint_r>
   835a0:	103a711e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   835a4:	d8c02017 	ldw	r3,128(sp)
   835a8:	d8801f17 	ldw	r2,124(sp)
   835ac:	da000404 	addi	r8,sp,16
   835b0:	003fee06 	br	8356c <__alt_data_end+0xfffa1aec>
   835b4:	00bfffc4 	movi	r2,-1
   835b8:	003a6f06 	br	81f78 <__alt_data_end+0xfffa04f8>
   835bc:	008011c4 	movi	r2,71
   835c0:	1440b816 	blt	r2,r17,838a4 <___vfprintf_internal_r+0x1d44>
   835c4:	04000274 	movhi	r16,9
   835c8:	84037d04 	addi	r16,r16,3572
   835cc:	00c000c4 	movi	r3,3
   835d0:	00bfdfc4 	movi	r2,-129
   835d4:	d8c02a15 	stw	r3,168(sp)
   835d8:	90a4703a 	and	r18,r18,r2
   835dc:	df002783 	ldbu	fp,158(sp)
   835e0:	d8c02e15 	stw	r3,184(sp)
   835e4:	d8002915 	stw	zero,164(sp)
   835e8:	d8003215 	stw	zero,200(sp)
   835ec:	003b2906 	br	82294 <__alt_data_end+0xfffa0814>
   835f0:	d9002d17 	ldw	r4,180(sp)
   835f4:	24c00017 	ldw	r19,0(r4)
   835f8:	21000104 	addi	r4,r4,4
   835fc:	d9002d15 	stw	r4,180(sp)
   83600:	982dd7fa 	srai	r22,r19,31
   83604:	b005883a 	mov	r2,r22
   83608:	003a9f06 	br	82088 <__alt_data_end+0xfffa0608>
   8360c:	d9402d17 	ldw	r5,180(sp)
   83610:	d8c02f17 	ldw	r3,188(sp)
   83614:	28800017 	ldw	r2,0(r5)
   83618:	29400104 	addi	r5,r5,4
   8361c:	d9402d15 	stw	r5,180(sp)
   83620:	10c00015 	stw	r3,0(r2)
   83624:	00398606 	br	81c40 <__alt_data_end+0xfffa01c0>
   83628:	d9402d17 	ldw	r5,180(sp)
   8362c:	002d883a 	mov	r22,zero
   83630:	2cc00017 	ldw	r19,0(r5)
   83634:	29400104 	addi	r5,r5,4
   83638:	d9402d15 	stw	r5,180(sp)
   8363c:	003c2306 	br	826cc <__alt_data_end+0xfffa0c4c>
   83640:	d8c02d17 	ldw	r3,180(sp)
   83644:	d9002917 	ldw	r4,164(sp)
   83648:	002d883a 	mov	r22,zero
   8364c:	18800104 	addi	r2,r3,4
   83650:	1cc0000b 	ldhu	r19,0(r3)
   83654:	203dc10e 	bge	r4,zero,82d5c <__alt_data_end+0xfffa12dc>
   83658:	003f7506 	br	83430 <__alt_data_end+0xfffa19b0>
   8365c:	04000274 	movhi	r16,9
   83660:	84037b04 	addi	r16,r16,3564
   83664:	003acc06 	br	82198 <__alt_data_end+0xfffa0718>
   83668:	d9002c17 	ldw	r4,176(sp)
   8366c:	d9801e04 	addi	r6,sp,120
   83670:	b80b883a 	mov	r5,r23
   83674:	00891b80 	call	891b8 <__sprint_r>
   83678:	103a3b1e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   8367c:	dc402617 	ldw	r17,152(sp)
   83680:	d8c02017 	ldw	r3,128(sp)
   83684:	da000404 	addi	r8,sp,16
   83688:	003f9c06 	br	834fc <__alt_data_end+0xfffa1a7c>
   8368c:	ac400043 	ldbu	r17,1(r21)
   83690:	94800814 	ori	r18,r18,32
   83694:	ad400044 	addi	r21,r21,1
   83698:	8c403fcc 	andi	r17,r17,255
   8369c:	8c40201c 	xori	r17,r17,128
   836a0:	8c7fe004 	addi	r17,r17,-128
   836a4:	00398f06 	br	81ce4 <__alt_data_end+0xfffa0264>
   836a8:	d8c02d15 	stw	r3,180(sp)
   836ac:	0039883a 	mov	fp,zero
   836b0:	003e3506 	br	82f88 <__alt_data_end+0xfffa1508>
   836b4:	d9002c17 	ldw	r4,176(sp)
   836b8:	d9801e04 	addi	r6,sp,120
   836bc:	b80b883a 	mov	r5,r23
   836c0:	00891b80 	call	891b8 <__sprint_r>
   836c4:	103a281e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   836c8:	d8c02017 	ldw	r3,128(sp)
   836cc:	da000404 	addi	r8,sp,16
   836d0:	003cd006 	br	82a14 <__alt_data_end+0xfffa0f94>
   836d4:	8009883a 	mov	r4,r16
   836d8:	da003d15 	stw	r8,244(sp)
   836dc:	0081a780 	call	81a78 <strlen>
   836e0:	d8802e15 	stw	r2,184(sp)
   836e4:	da003d17 	ldw	r8,244(sp)
   836e8:	103c340e 	bge	r2,zero,827bc <__alt_data_end+0xfffa0d3c>
   836ec:	0005883a 	mov	r2,zero
   836f0:	003c3206 	br	827bc <__alt_data_end+0xfffa0d3c>
   836f4:	d9002c17 	ldw	r4,176(sp)
   836f8:	d9801e04 	addi	r6,sp,120
   836fc:	b80b883a 	mov	r5,r23
   83700:	00891b80 	call	891b8 <__sprint_r>
   83704:	103a181e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   83708:	d8c02017 	ldw	r3,128(sp)
   8370c:	d8801f17 	ldw	r2,124(sp)
   83710:	da000404 	addi	r8,sp,16
   83714:	d9403317 	ldw	r5,204(sp)
   83718:	10800044 	addi	r2,r2,1
   8371c:	44000015 	stw	r16,0(r8)
   83720:	28c7883a 	add	r3,r5,r3
   83724:	003b7d06 	br	8251c <__alt_data_end+0xfffa0a9c>
   83728:	01000274 	movhi	r4,9
   8372c:	21038f84 	addi	r4,r4,3646
   83730:	d9003515 	stw	r4,212(sp)
   83734:	003b1406 	br	82388 <__alt_data_end+0xfffa0908>
   83738:	013fffc4 	movi	r4,-1
   8373c:	003a3506 	br	82014 <__alt_data_end+0xfffa0594>
   83740:	0023883a 	mov	r17,zero
   83744:	003d9d06 	br	82dbc <__alt_data_end+0xfffa133c>
   83748:	d9002c17 	ldw	r4,176(sp)
   8374c:	d9801e04 	addi	r6,sp,120
   83750:	b80b883a 	mov	r5,r23
   83754:	00891b80 	call	891b8 <__sprint_r>
   83758:	103a031e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   8375c:	d8c02017 	ldw	r3,128(sp)
   83760:	da000404 	addi	r8,sp,16
   83764:	003d9406 	br	82db8 <__alt_data_end+0xfffa1338>
   83768:	01000274 	movhi	r4,9
   8376c:	21038b84 	addi	r4,r4,3630
   83770:	d9002b15 	stw	r4,172(sp)
   83774:	d9002b17 	ldw	r4,172(sp)
   83778:	1c47883a 	add	r3,r3,r17
   8377c:	10800044 	addi	r2,r2,1
   83780:	41000015 	stw	r4,0(r8)
   83784:	44400115 	stw	r17,4(r8)
   83788:	d8c02015 	stw	r3,128(sp)
   8378c:	d8801f15 	stw	r2,124(sp)
   83790:	010001c4 	movi	r4,7
   83794:	20bfd716 	blt	r4,r2,836f4 <__alt_data_end+0xfffa1c74>
   83798:	42000204 	addi	r8,r8,8
   8379c:	003fdd06 	br	83714 <__alt_data_end+0xfffa1c94>
   837a0:	d9002c17 	ldw	r4,176(sp)
   837a4:	d9801e04 	addi	r6,sp,120
   837a8:	b80b883a 	mov	r5,r23
   837ac:	00891b80 	call	891b8 <__sprint_r>
   837b0:	1039ed1e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   837b4:	d8802617 	ldw	r2,152(sp)
   837b8:	d8c02017 	ldw	r3,128(sp)
   837bc:	da000404 	addi	r8,sp,16
   837c0:	003e1006 	br	83004 <__alt_data_end+0xfffa1584>
   837c4:	00800044 	movi	r2,1
   837c8:	10803fcc 	andi	r2,r2,255
   837cc:	00c00044 	movi	r3,1
   837d0:	10fa3526 	beq	r2,r3,820a8 <__alt_data_end+0xfffa0628>
   837d4:	00c00084 	movi	r3,2
   837d8:	10fbcb26 	beq	r2,r3,82708 <__alt_data_end+0xfffa0c88>
   837dc:	003a8f06 	br	8221c <__alt_data_end+0xfffa079c>
   837e0:	01000274 	movhi	r4,9
   837e4:	21038f84 	addi	r4,r4,3646
   837e8:	d9003515 	stw	r4,212(sp)
   837ec:	003b7606 	br	825c8 <__alt_data_end+0xfffa0b48>
   837f0:	d8802917 	ldw	r2,164(sp)
   837f4:	00c00184 	movi	r3,6
   837f8:	1880012e 	bgeu	r3,r2,83800 <___vfprintf_internal_r+0x1ca0>
   837fc:	1805883a 	mov	r2,r3
   83800:	d8802e15 	stw	r2,184(sp)
   83804:	1000ef16 	blt	r2,zero,83bc4 <___vfprintf_internal_r+0x2064>
   83808:	04000274 	movhi	r16,9
   8380c:	d8802a15 	stw	r2,168(sp)
   83810:	dcc02d15 	stw	r19,180(sp)
   83814:	d8002915 	stw	zero,164(sp)
   83818:	d8003215 	stw	zero,200(sp)
   8381c:	84038904 	addi	r16,r16,3620
   83820:	0039883a 	mov	fp,zero
   83824:	003aa206 	br	822b0 <__alt_data_end+0xfffa0830>
   83828:	0021883a 	mov	r16,zero
   8382c:	003e0706 	br	8304c <__alt_data_end+0xfffa15cc>
   83830:	d9002c17 	ldw	r4,176(sp)
   83834:	d9801e04 	addi	r6,sp,120
   83838:	b80b883a 	mov	r5,r23
   8383c:	00891b80 	call	891b8 <__sprint_r>
   83840:	1039c91e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   83844:	d8802617 	ldw	r2,152(sp)
   83848:	d9403317 	ldw	r5,204(sp)
   8384c:	d8c02017 	ldw	r3,128(sp)
   83850:	da000404 	addi	r8,sp,16
   83854:	2885c83a 	sub	r2,r5,r2
   83858:	003dfb06 	br	83048 <__alt_data_end+0xfffa15c8>
   8385c:	9080004c 	andi	r2,r18,1
   83860:	103e8f1e 	bne	r2,zero,832a0 <__alt_data_end+0xfffa1820>
   83864:	d8802117 	ldw	r2,132(sp)
   83868:	003e9e06 	br	832e4 <__alt_data_end+0xfffa1864>
   8386c:	1025883a 	mov	r18,r2
   83870:	0039883a 	mov	fp,zero
   83874:	00800084 	movi	r2,2
   83878:	003fd306 	br	837c8 <__alt_data_end+0xfffa1d48>
   8387c:	07000b44 	movi	fp,45
   83880:	df002785 	stb	fp,158(sp)
   83884:	003a4006 	br	82188 <__alt_data_end+0xfffa0708>
   83888:	00c00b44 	movi	r3,45
   8388c:	d8c02785 	stb	r3,158(sp)
   83890:	d8802a15 	stw	r2,168(sp)
   83894:	dc802b17 	ldw	r18,172(sp)
   83898:	d8002915 	stw	zero,164(sp)
   8389c:	07000b44 	movi	fp,45
   838a0:	003a8006 	br	822a4 <__alt_data_end+0xfffa0824>
   838a4:	04000274 	movhi	r16,9
   838a8:	84037e04 	addi	r16,r16,3576
   838ac:	003f4706 	br	835cc <__alt_data_end+0xfffa1b4c>
   838b0:	d8c02d17 	ldw	r3,180(sp)
   838b4:	d9002f17 	ldw	r4,188(sp)
   838b8:	18800017 	ldw	r2,0(r3)
   838bc:	18c00104 	addi	r3,r3,4
   838c0:	d8c02d15 	stw	r3,180(sp)
   838c4:	11000015 	stw	r4,0(r2)
   838c8:	0038dd06 	br	81c40 <__alt_data_end+0xfffa01c0>
   838cc:	dd802617 	ldw	r22,152(sp)
   838d0:	00bfff44 	movi	r2,-3
   838d4:	b0801c16 	blt	r22,r2,83948 <___vfprintf_internal_r+0x1de8>
   838d8:	d9402917 	ldw	r5,164(sp)
   838dc:	2d801a16 	blt	r5,r22,83948 <___vfprintf_internal_r+0x1de8>
   838e0:	dd803215 	stw	r22,200(sp)
   838e4:	003e8906 	br	8330c <__alt_data_end+0xfffa188c>
   838e8:	01000274 	movhi	r4,9
   838ec:	21038b84 	addi	r4,r4,3630
   838f0:	d9002b15 	stw	r4,172(sp)
   838f4:	003c9106 	br	82b3c <__alt_data_end+0xfffa10bc>
   838f8:	e005883a 	mov	r2,fp
   838fc:	003e7906 	br	832e4 <__alt_data_end+0xfffa1864>
   83900:	d9402917 	ldw	r5,164(sp)
   83904:	df002783 	ldbu	fp,158(sp)
   83908:	dcc02d15 	stw	r19,180(sp)
   8390c:	d9402a15 	stw	r5,168(sp)
   83910:	d9402e15 	stw	r5,184(sp)
   83914:	d8002915 	stw	zero,164(sp)
   83918:	d8003215 	stw	zero,200(sp)
   8391c:	003a5d06 	br	82294 <__alt_data_end+0xfffa0814>
   83920:	9080004c 	andi	r2,r18,1
   83924:	0039883a 	mov	fp,zero
   83928:	10000426 	beq	r2,zero,8393c <___vfprintf_internal_r+0x1ddc>
   8392c:	00800c04 	movi	r2,48
   83930:	dc001dc4 	addi	r16,sp,119
   83934:	d8801dc5 	stb	r2,119(sp)
   83938:	003b8006 	br	8273c <__alt_data_end+0xfffa0cbc>
   8393c:	d8002e15 	stw	zero,184(sp)
   83940:	dc001e04 	addi	r16,sp,120
   83944:	003a4d06 	br	8227c <__alt_data_end+0xfffa07fc>
   83948:	8c7fff84 	addi	r17,r17,-2
   8394c:	b5bfffc4 	addi	r22,r22,-1
   83950:	dd802615 	stw	r22,152(sp)
   83954:	dc4022c5 	stb	r17,139(sp)
   83958:	b000bf16 	blt	r22,zero,83c58 <___vfprintf_internal_r+0x20f8>
   8395c:	00800ac4 	movi	r2,43
   83960:	d8802305 	stb	r2,140(sp)
   83964:	00800244 	movi	r2,9
   83968:	15807016 	blt	r2,r22,83b2c <___vfprintf_internal_r+0x1fcc>
   8396c:	00800c04 	movi	r2,48
   83970:	b5800c04 	addi	r22,r22,48
   83974:	d8802345 	stb	r2,141(sp)
   83978:	dd802385 	stb	r22,142(sp)
   8397c:	d88023c4 	addi	r2,sp,143
   83980:	df0022c4 	addi	fp,sp,139
   83984:	d8c03317 	ldw	r3,204(sp)
   83988:	1739c83a 	sub	fp,r2,fp
   8398c:	d9003317 	ldw	r4,204(sp)
   83990:	e0c7883a 	add	r3,fp,r3
   83994:	df003a15 	stw	fp,232(sp)
   83998:	d8c02e15 	stw	r3,184(sp)
   8399c:	00800044 	movi	r2,1
   839a0:	1100b30e 	bge	r2,r4,83c70 <___vfprintf_internal_r+0x2110>
   839a4:	d8c02e17 	ldw	r3,184(sp)
   839a8:	18c00044 	addi	r3,r3,1
   839ac:	d8c02e15 	stw	r3,184(sp)
   839b0:	1805883a 	mov	r2,r3
   839b4:	1800ac16 	blt	r3,zero,83c68 <___vfprintf_internal_r+0x2108>
   839b8:	d8003215 	stw	zero,200(sp)
   839bc:	003e5d06 	br	83334 <__alt_data_end+0xfffa18b4>
   839c0:	d9002c17 	ldw	r4,176(sp)
   839c4:	d9801e04 	addi	r6,sp,120
   839c8:	b80b883a 	mov	r5,r23
   839cc:	00891b80 	call	891b8 <__sprint_r>
   839d0:	1039651e 	bne	r2,zero,81f68 <__alt_data_end+0xfffa04e8>
   839d4:	dc402617 	ldw	r17,152(sp)
   839d8:	d8c02017 	ldw	r3,128(sp)
   839dc:	d8801f17 	ldw	r2,124(sp)
   839e0:	da000404 	addi	r8,sp,16
   839e4:	003ed606 	br	83540 <__alt_data_end+0xfffa1ac0>
   839e8:	582b883a 	mov	r21,r11
   839ec:	d8002915 	stw	zero,164(sp)
   839f0:	0038bd06 	br	81ce8 <__alt_data_end+0xfffa0268>
   839f4:	d8802917 	ldw	r2,164(sp)
   839f8:	103e071e 	bne	r2,zero,83218 <__alt_data_end+0xfffa1798>
   839fc:	dc002915 	stw	r16,164(sp)
   83a00:	003e0506 	br	83218 <__alt_data_end+0xfffa1798>
   83a04:	d9002917 	ldw	r4,164(sp)
   83a08:	20c00044 	addi	r3,r4,1
   83a0c:	003e0f06 	br	8324c <__alt_data_end+0xfffa17cc>
   83a10:	01400184 	movi	r5,6
   83a14:	d9402915 	stw	r5,164(sp)
   83a18:	003dff06 	br	83218 <__alt_data_end+0xfffa1798>
   83a1c:	d8802104 	addi	r2,sp,132
   83a20:	d8800315 	stw	r2,12(sp)
   83a24:	d8802504 	addi	r2,sp,148
   83a28:	d8800215 	stw	r2,8(sp)
   83a2c:	d8802604 	addi	r2,sp,152
   83a30:	d8800115 	stw	r2,4(sp)
   83a34:	d8802917 	ldw	r2,164(sp)
   83a38:	d9403617 	ldw	r5,216(sp)
   83a3c:	d9002c17 	ldw	r4,176(sp)
   83a40:	d8800015 	stw	r2,0(sp)
   83a44:	01c000c4 	movi	r7,3
   83a48:	980d883a 	mov	r6,r19
   83a4c:	da003d15 	stw	r8,244(sp)
   83a50:	00841840 	call	84184 <_dtoa_r>
   83a54:	d8c02917 	ldw	r3,164(sp)
   83a58:	da003d17 	ldw	r8,244(sp)
   83a5c:	1021883a 	mov	r16,r2
   83a60:	10f9883a 	add	fp,r2,r3
   83a64:	81000007 	ldb	r4,0(r16)
   83a68:	00800c04 	movi	r2,48
   83a6c:	20805e26 	beq	r4,r2,83be8 <___vfprintf_internal_r+0x2088>
   83a70:	d8c02617 	ldw	r3,152(sp)
   83a74:	e0f9883a 	add	fp,fp,r3
   83a78:	003e0a06 	br	832a4 <__alt_data_end+0xfffa1824>
   83a7c:	00c00b44 	movi	r3,45
   83a80:	24e0003c 	xorhi	r19,r4,32768
   83a84:	d8c02a05 	stb	r3,168(sp)
   83a88:	003de906 	br	83230 <__alt_data_end+0xfffa17b0>
   83a8c:	d8c03217 	ldw	r3,200(sp)
   83a90:	00c07a0e 	bge	zero,r3,83c7c <___vfprintf_internal_r+0x211c>
   83a94:	00800044 	movi	r2,1
   83a98:	d9003317 	ldw	r4,204(sp)
   83a9c:	1105883a 	add	r2,r2,r4
   83aa0:	d8802e15 	stw	r2,184(sp)
   83aa4:	10004e16 	blt	r2,zero,83be0 <___vfprintf_internal_r+0x2080>
   83aa8:	044019c4 	movi	r17,103
   83aac:	003e2106 	br	83334 <__alt_data_end+0xfffa18b4>
   83ab0:	d9002917 	ldw	r4,164(sp)
   83ab4:	d8802104 	addi	r2,sp,132
   83ab8:	d8800315 	stw	r2,12(sp)
   83abc:	d9000015 	stw	r4,0(sp)
   83ac0:	d8802504 	addi	r2,sp,148
   83ac4:	d9403617 	ldw	r5,216(sp)
   83ac8:	d9002c17 	ldw	r4,176(sp)
   83acc:	d8800215 	stw	r2,8(sp)
   83ad0:	d8802604 	addi	r2,sp,152
   83ad4:	d8800115 	stw	r2,4(sp)
   83ad8:	01c000c4 	movi	r7,3
   83adc:	980d883a 	mov	r6,r19
   83ae0:	da003d15 	stw	r8,244(sp)
   83ae4:	00841840 	call	84184 <_dtoa_r>
   83ae8:	d8c02917 	ldw	r3,164(sp)
   83aec:	da003d17 	ldw	r8,244(sp)
   83af0:	1021883a 	mov	r16,r2
   83af4:	00801184 	movi	r2,70
   83af8:	80f9883a 	add	fp,r16,r3
   83afc:	88bfd926 	beq	r17,r2,83a64 <__alt_data_end+0xfffa1fe4>
   83b00:	003de806 	br	832a4 <__alt_data_end+0xfffa1824>
   83b04:	d9002917 	ldw	r4,164(sp)
   83b08:	00c04d0e 	bge	zero,r3,83c40 <___vfprintf_internal_r+0x20e0>
   83b0c:	2000441e 	bne	r4,zero,83c20 <___vfprintf_internal_r+0x20c0>
   83b10:	9480004c 	andi	r18,r18,1
   83b14:	9000421e 	bne	r18,zero,83c20 <___vfprintf_internal_r+0x20c0>
   83b18:	1805883a 	mov	r2,r3
   83b1c:	18007016 	blt	r3,zero,83ce0 <___vfprintf_internal_r+0x2180>
   83b20:	d8c03217 	ldw	r3,200(sp)
   83b24:	d8c02e15 	stw	r3,184(sp)
   83b28:	003e0206 	br	83334 <__alt_data_end+0xfffa18b4>
   83b2c:	df0022c4 	addi	fp,sp,139
   83b30:	dc002915 	stw	r16,164(sp)
   83b34:	4027883a 	mov	r19,r8
   83b38:	e021883a 	mov	r16,fp
   83b3c:	b009883a 	mov	r4,r22
   83b40:	01400284 	movi	r5,10
   83b44:	008178c0 	call	8178c <__modsi3>
   83b48:	10800c04 	addi	r2,r2,48
   83b4c:	843fffc4 	addi	r16,r16,-1
   83b50:	b009883a 	mov	r4,r22
   83b54:	01400284 	movi	r5,10
   83b58:	80800005 	stb	r2,0(r16)
   83b5c:	00817080 	call	81708 <__divsi3>
   83b60:	102d883a 	mov	r22,r2
   83b64:	00800244 	movi	r2,9
   83b68:	15bff416 	blt	r2,r22,83b3c <__alt_data_end+0xfffa20bc>
   83b6c:	9811883a 	mov	r8,r19
   83b70:	b0800c04 	addi	r2,r22,48
   83b74:	8027883a 	mov	r19,r16
   83b78:	997fffc4 	addi	r5,r19,-1
   83b7c:	98bfffc5 	stb	r2,-1(r19)
   83b80:	dc002917 	ldw	r16,164(sp)
   83b84:	2f006a2e 	bgeu	r5,fp,83d30 <___vfprintf_internal_r+0x21d0>
   83b88:	d9c02384 	addi	r7,sp,142
   83b8c:	3ccfc83a 	sub	r7,r7,r19
   83b90:	d9002344 	addi	r4,sp,141
   83b94:	e1cf883a 	add	r7,fp,r7
   83b98:	00000106 	br	83ba0 <___vfprintf_internal_r+0x2040>
   83b9c:	28800003 	ldbu	r2,0(r5)
   83ba0:	20800005 	stb	r2,0(r4)
   83ba4:	21000044 	addi	r4,r4,1
   83ba8:	29400044 	addi	r5,r5,1
   83bac:	393ffb1e 	bne	r7,r4,83b9c <__alt_data_end+0xfffa211c>
   83bb0:	d8802304 	addi	r2,sp,140
   83bb4:	14c5c83a 	sub	r2,r2,r19
   83bb8:	d8c02344 	addi	r3,sp,141
   83bbc:	1885883a 	add	r2,r3,r2
   83bc0:	003f7006 	br	83984 <__alt_data_end+0xfffa1f04>
   83bc4:	0005883a 	mov	r2,zero
   83bc8:	003f0f06 	br	83808 <__alt_data_end+0xfffa1d88>
   83bcc:	d8c03217 	ldw	r3,200(sp)
   83bd0:	18c00044 	addi	r3,r3,1
   83bd4:	d8c02e15 	stw	r3,184(sp)
   83bd8:	1805883a 	mov	r2,r3
   83bdc:	183fb20e 	bge	r3,zero,83aa8 <__alt_data_end+0xfffa2028>
   83be0:	0005883a 	mov	r2,zero
   83be4:	003fb006 	br	83aa8 <__alt_data_end+0xfffa2028>
   83be8:	d9003617 	ldw	r4,216(sp)
   83bec:	000d883a 	mov	r6,zero
   83bf0:	000f883a 	mov	r7,zero
   83bf4:	980b883a 	mov	r5,r19
   83bf8:	d8c03c15 	stw	r3,240(sp)
   83bfc:	da003d15 	stw	r8,244(sp)
   83c00:	008ccdc0 	call	8ccdc <__eqdf2>
   83c04:	d8c03c17 	ldw	r3,240(sp)
   83c08:	da003d17 	ldw	r8,244(sp)
   83c0c:	103f9826 	beq	r2,zero,83a70 <__alt_data_end+0xfffa1ff0>
   83c10:	00800044 	movi	r2,1
   83c14:	10c7c83a 	sub	r3,r2,r3
   83c18:	d8c02615 	stw	r3,152(sp)
   83c1c:	003f9506 	br	83a74 <__alt_data_end+0xfffa1ff4>
   83c20:	d9002917 	ldw	r4,164(sp)
   83c24:	d8c03217 	ldw	r3,200(sp)
   83c28:	20800044 	addi	r2,r4,1
   83c2c:	1885883a 	add	r2,r3,r2
   83c30:	d8802e15 	stw	r2,184(sp)
   83c34:	103dbf0e 	bge	r2,zero,83334 <__alt_data_end+0xfffa18b4>
   83c38:	0005883a 	mov	r2,zero
   83c3c:	003dbd06 	br	83334 <__alt_data_end+0xfffa18b4>
   83c40:	2000211e 	bne	r4,zero,83cc8 <___vfprintf_internal_r+0x2168>
   83c44:	9480004c 	andi	r18,r18,1
   83c48:	90001f1e 	bne	r18,zero,83cc8 <___vfprintf_internal_r+0x2168>
   83c4c:	00800044 	movi	r2,1
   83c50:	d8802e15 	stw	r2,184(sp)
   83c54:	003db706 	br	83334 <__alt_data_end+0xfffa18b4>
   83c58:	00800b44 	movi	r2,45
   83c5c:	05adc83a 	sub	r22,zero,r22
   83c60:	d8802305 	stb	r2,140(sp)
   83c64:	003f3f06 	br	83964 <__alt_data_end+0xfffa1ee4>
   83c68:	0005883a 	mov	r2,zero
   83c6c:	003f5206 	br	839b8 <__alt_data_end+0xfffa1f38>
   83c70:	90a4703a 	and	r18,r18,r2
   83c74:	903f4e26 	beq	r18,zero,839b0 <__alt_data_end+0xfffa1f30>
   83c78:	003f4a06 	br	839a4 <__alt_data_end+0xfffa1f24>
   83c7c:	00800084 	movi	r2,2
   83c80:	10c5c83a 	sub	r2,r2,r3
   83c84:	003f8406 	br	83a98 <__alt_data_end+0xfffa2018>
   83c88:	d8802d17 	ldw	r2,180(sp)
   83c8c:	d9002d17 	ldw	r4,180(sp)
   83c90:	ac400043 	ldbu	r17,1(r21)
   83c94:	10800017 	ldw	r2,0(r2)
   83c98:	582b883a 	mov	r21,r11
   83c9c:	d8802915 	stw	r2,164(sp)
   83ca0:	20800104 	addi	r2,r4,4
   83ca4:	d9002917 	ldw	r4,164(sp)
   83ca8:	d8802d15 	stw	r2,180(sp)
   83cac:	203e7a0e 	bge	r4,zero,83698 <__alt_data_end+0xfffa1c18>
   83cb0:	8c403fcc 	andi	r17,r17,255
   83cb4:	00bfffc4 	movi	r2,-1
   83cb8:	8c40201c 	xori	r17,r17,128
   83cbc:	d8802915 	stw	r2,164(sp)
   83cc0:	8c7fe004 	addi	r17,r17,-128
   83cc4:	00380706 	br	81ce4 <__alt_data_end+0xfffa0264>
   83cc8:	d8c02917 	ldw	r3,164(sp)
   83ccc:	18c00084 	addi	r3,r3,2
   83cd0:	d8c02e15 	stw	r3,184(sp)
   83cd4:	1805883a 	mov	r2,r3
   83cd8:	183d960e 	bge	r3,zero,83334 <__alt_data_end+0xfffa18b4>
   83cdc:	003fd606 	br	83c38 <__alt_data_end+0xfffa21b8>
   83ce0:	0005883a 	mov	r2,zero
   83ce4:	003f8e06 	br	83b20 <__alt_data_end+0xfffa20a0>
   83ce8:	9080004c 	andi	r2,r18,1
   83cec:	103f811e 	bne	r2,zero,83af4 <__alt_data_end+0xfffa2074>
   83cf0:	d8802117 	ldw	r2,132(sp)
   83cf4:	1405c83a 	sub	r2,r2,r16
   83cf8:	d8803315 	stw	r2,204(sp)
   83cfc:	b47ef326 	beq	r22,r17,838cc <__alt_data_end+0xfffa1e4c>
   83d00:	dd802617 	ldw	r22,152(sp)
   83d04:	003f1106 	br	8394c <__alt_data_end+0xfffa1ecc>
   83d08:	d9c02785 	stb	r7,158(sp)
   83d0c:	00390406 	br	82120 <__alt_data_end+0xfffa06a0>
   83d10:	d9c02785 	stb	r7,158(sp)
   83d14:	0038d306 	br	82064 <__alt_data_end+0xfffa05e4>
   83d18:	d9c02785 	stb	r7,158(sp)
   83d1c:	003a6106 	br	826a4 <__alt_data_end+0xfffa0c24>
   83d20:	d9c02785 	stb	r7,158(sp)
   83d24:	003af806 	br	82908 <__alt_data_end+0xfffa0e88>
   83d28:	0005883a 	mov	r2,zero
   83d2c:	003d7e06 	br	83328 <__alt_data_end+0xfffa18a8>
   83d30:	d8802344 	addi	r2,sp,141
   83d34:	003f1306 	br	83984 <__alt_data_end+0xfffa1f04>
   83d38:	d9c02785 	stb	r7,158(sp)
   83d3c:	00392306 	br	821cc <__alt_data_end+0xfffa074c>
   83d40:	d9c02785 	stb	r7,158(sp)
   83d44:	003aa906 	br	827ec <__alt_data_end+0xfffa0d6c>
   83d48:	d9c02785 	stb	r7,158(sp)
   83d4c:	003a3d06 	br	82644 <__alt_data_end+0xfffa0bc4>
   83d50:	d9c02785 	stb	r7,158(sp)
   83d54:	003aca06 	br	82880 <__alt_data_end+0xfffa0e00>

00083d58 <__vfprintf_internal>:
   83d58:	00800274 	movhi	r2,9
   83d5c:	108b6b04 	addi	r2,r2,11692
   83d60:	300f883a 	mov	r7,r6
   83d64:	280d883a 	mov	r6,r5
   83d68:	200b883a 	mov	r5,r4
   83d6c:	11000017 	ldw	r4,0(r2)
   83d70:	0081b601 	jmpi	81b60 <___vfprintf_internal_r>

00083d74 <__sbprintf>:
   83d74:	2880030b 	ldhu	r2,12(r5)
   83d78:	2ac01917 	ldw	r11,100(r5)
   83d7c:	2a80038b 	ldhu	r10,14(r5)
   83d80:	2a400717 	ldw	r9,28(r5)
   83d84:	2a000917 	ldw	r8,36(r5)
   83d88:	defee204 	addi	sp,sp,-1144
   83d8c:	00c10004 	movi	r3,1024
   83d90:	dc011a15 	stw	r16,1128(sp)
   83d94:	10bfff4c 	andi	r2,r2,65533
   83d98:	2821883a 	mov	r16,r5
   83d9c:	d8cb883a 	add	r5,sp,r3
   83da0:	dc811c15 	stw	r18,1136(sp)
   83da4:	dc411b15 	stw	r17,1132(sp)
   83da8:	dfc11d15 	stw	ra,1140(sp)
   83dac:	2025883a 	mov	r18,r4
   83db0:	d881030d 	sth	r2,1036(sp)
   83db4:	dac11915 	stw	r11,1124(sp)
   83db8:	da81038d 	sth	r10,1038(sp)
   83dbc:	da410715 	stw	r9,1052(sp)
   83dc0:	da010915 	stw	r8,1060(sp)
   83dc4:	dec10015 	stw	sp,1024(sp)
   83dc8:	dec10415 	stw	sp,1040(sp)
   83dcc:	d8c10215 	stw	r3,1032(sp)
   83dd0:	d8c10515 	stw	r3,1044(sp)
   83dd4:	d8010615 	stw	zero,1048(sp)
   83dd8:	0081b600 	call	81b60 <___vfprintf_internal_r>
   83ddc:	1023883a 	mov	r17,r2
   83de0:	10000416 	blt	r2,zero,83df4 <__sbprintf+0x80>
   83de4:	d9410004 	addi	r5,sp,1024
   83de8:	9009883a 	mov	r4,r18
   83dec:	0085a280 	call	85a28 <_fflush_r>
   83df0:	10000d1e 	bne	r2,zero,83e28 <__sbprintf+0xb4>
   83df4:	d881030b 	ldhu	r2,1036(sp)
   83df8:	1080100c 	andi	r2,r2,64
   83dfc:	10000326 	beq	r2,zero,83e0c <__sbprintf+0x98>
   83e00:	8080030b 	ldhu	r2,12(r16)
   83e04:	10801014 	ori	r2,r2,64
   83e08:	8080030d 	sth	r2,12(r16)
   83e0c:	8805883a 	mov	r2,r17
   83e10:	dfc11d17 	ldw	ra,1140(sp)
   83e14:	dc811c17 	ldw	r18,1136(sp)
   83e18:	dc411b17 	ldw	r17,1132(sp)
   83e1c:	dc011a17 	ldw	r16,1128(sp)
   83e20:	dec11e04 	addi	sp,sp,1144
   83e24:	f800283a 	ret
   83e28:	047fffc4 	movi	r17,-1
   83e2c:	003ff106 	br	83df4 <__alt_data_end+0xfffa2374>

00083e30 <__swsetup_r>:
   83e30:	00800274 	movhi	r2,9
   83e34:	defffd04 	addi	sp,sp,-12
   83e38:	108b6b04 	addi	r2,r2,11692
   83e3c:	dc400115 	stw	r17,4(sp)
   83e40:	2023883a 	mov	r17,r4
   83e44:	11000017 	ldw	r4,0(r2)
   83e48:	dc000015 	stw	r16,0(sp)
   83e4c:	dfc00215 	stw	ra,8(sp)
   83e50:	2821883a 	mov	r16,r5
   83e54:	20000226 	beq	r4,zero,83e60 <__swsetup_r+0x30>
   83e58:	20800e17 	ldw	r2,56(r4)
   83e5c:	10003126 	beq	r2,zero,83f24 <__swsetup_r+0xf4>
   83e60:	8080030b 	ldhu	r2,12(r16)
   83e64:	10c0020c 	andi	r3,r2,8
   83e68:	1009883a 	mov	r4,r2
   83e6c:	18000f26 	beq	r3,zero,83eac <__swsetup_r+0x7c>
   83e70:	80c00417 	ldw	r3,16(r16)
   83e74:	18001526 	beq	r3,zero,83ecc <__swsetup_r+0x9c>
   83e78:	1100004c 	andi	r4,r2,1
   83e7c:	20001c1e 	bne	r4,zero,83ef0 <__swsetup_r+0xc0>
   83e80:	1080008c 	andi	r2,r2,2
   83e84:	1000291e 	bne	r2,zero,83f2c <__swsetup_r+0xfc>
   83e88:	80800517 	ldw	r2,20(r16)
   83e8c:	80800215 	stw	r2,8(r16)
   83e90:	18001c26 	beq	r3,zero,83f04 <__swsetup_r+0xd4>
   83e94:	0005883a 	mov	r2,zero
   83e98:	dfc00217 	ldw	ra,8(sp)
   83e9c:	dc400117 	ldw	r17,4(sp)
   83ea0:	dc000017 	ldw	r16,0(sp)
   83ea4:	dec00304 	addi	sp,sp,12
   83ea8:	f800283a 	ret
   83eac:	2080040c 	andi	r2,r4,16
   83eb0:	10002e26 	beq	r2,zero,83f6c <__swsetup_r+0x13c>
   83eb4:	2080010c 	andi	r2,r4,4
   83eb8:	10001e1e 	bne	r2,zero,83f34 <__swsetup_r+0x104>
   83ebc:	80c00417 	ldw	r3,16(r16)
   83ec0:	20800214 	ori	r2,r4,8
   83ec4:	8080030d 	sth	r2,12(r16)
   83ec8:	183feb1e 	bne	r3,zero,83e78 <__alt_data_end+0xfffa23f8>
   83ecc:	1100a00c 	andi	r4,r2,640
   83ed0:	01408004 	movi	r5,512
   83ed4:	217fe826 	beq	r4,r5,83e78 <__alt_data_end+0xfffa23f8>
   83ed8:	800b883a 	mov	r5,r16
   83edc:	8809883a 	mov	r4,r17
   83ee0:	0086a040 	call	86a04 <__smakebuf_r>
   83ee4:	8080030b 	ldhu	r2,12(r16)
   83ee8:	80c00417 	ldw	r3,16(r16)
   83eec:	003fe206 	br	83e78 <__alt_data_end+0xfffa23f8>
   83ef0:	80800517 	ldw	r2,20(r16)
   83ef4:	80000215 	stw	zero,8(r16)
   83ef8:	0085c83a 	sub	r2,zero,r2
   83efc:	80800615 	stw	r2,24(r16)
   83f00:	183fe41e 	bne	r3,zero,83e94 <__alt_data_end+0xfffa2414>
   83f04:	80c0030b 	ldhu	r3,12(r16)
   83f08:	0005883a 	mov	r2,zero
   83f0c:	1900200c 	andi	r4,r3,128
   83f10:	203fe126 	beq	r4,zero,83e98 <__alt_data_end+0xfffa2418>
   83f14:	18c01014 	ori	r3,r3,64
   83f18:	80c0030d 	sth	r3,12(r16)
   83f1c:	00bfffc4 	movi	r2,-1
   83f20:	003fdd06 	br	83e98 <__alt_data_end+0xfffa2418>
   83f24:	0085e040 	call	85e04 <__sinit>
   83f28:	003fcd06 	br	83e60 <__alt_data_end+0xfffa23e0>
   83f2c:	0005883a 	mov	r2,zero
   83f30:	003fd606 	br	83e8c <__alt_data_end+0xfffa240c>
   83f34:	81400c17 	ldw	r5,48(r16)
   83f38:	28000626 	beq	r5,zero,83f54 <__swsetup_r+0x124>
   83f3c:	80801004 	addi	r2,r16,64
   83f40:	28800326 	beq	r5,r2,83f50 <__swsetup_r+0x120>
   83f44:	8809883a 	mov	r4,r17
   83f48:	0085f780 	call	85f78 <_free_r>
   83f4c:	8100030b 	ldhu	r4,12(r16)
   83f50:	80000c15 	stw	zero,48(r16)
   83f54:	80c00417 	ldw	r3,16(r16)
   83f58:	00bff6c4 	movi	r2,-37
   83f5c:	1108703a 	and	r4,r2,r4
   83f60:	80000115 	stw	zero,4(r16)
   83f64:	80c00015 	stw	r3,0(r16)
   83f68:	003fd506 	br	83ec0 <__alt_data_end+0xfffa2440>
   83f6c:	00800244 	movi	r2,9
   83f70:	88800015 	stw	r2,0(r17)
   83f74:	20801014 	ori	r2,r4,64
   83f78:	8080030d 	sth	r2,12(r16)
   83f7c:	00bfffc4 	movi	r2,-1
   83f80:	003fc506 	br	83e98 <__alt_data_end+0xfffa2418>

00083f84 <quorem>:
   83f84:	defff704 	addi	sp,sp,-36
   83f88:	dc800215 	stw	r18,8(sp)
   83f8c:	20800417 	ldw	r2,16(r4)
   83f90:	2c800417 	ldw	r18,16(r5)
   83f94:	dfc00815 	stw	ra,32(sp)
   83f98:	ddc00715 	stw	r23,28(sp)
   83f9c:	dd800615 	stw	r22,24(sp)
   83fa0:	dd400515 	stw	r21,20(sp)
   83fa4:	dd000415 	stw	r20,16(sp)
   83fa8:	dcc00315 	stw	r19,12(sp)
   83fac:	dc400115 	stw	r17,4(sp)
   83fb0:	dc000015 	stw	r16,0(sp)
   83fb4:	14807116 	blt	r2,r18,8417c <quorem+0x1f8>
   83fb8:	94bfffc4 	addi	r18,r18,-1
   83fbc:	94ad883a 	add	r22,r18,r18
   83fc0:	b5ad883a 	add	r22,r22,r22
   83fc4:	2c400504 	addi	r17,r5,20
   83fc8:	8da9883a 	add	r20,r17,r22
   83fcc:	25400504 	addi	r21,r4,20
   83fd0:	282f883a 	mov	r23,r5
   83fd4:	adad883a 	add	r22,r21,r22
   83fd8:	a1400017 	ldw	r5,0(r20)
   83fdc:	2021883a 	mov	r16,r4
   83fe0:	b1000017 	ldw	r4,0(r22)
   83fe4:	29400044 	addi	r5,r5,1
   83fe8:	00818000 	call	81800 <__udivsi3>
   83fec:	1027883a 	mov	r19,r2
   83ff0:	10002c26 	beq	r2,zero,840a4 <quorem+0x120>
   83ff4:	a813883a 	mov	r9,r21
   83ff8:	880b883a 	mov	r5,r17
   83ffc:	0009883a 	mov	r4,zero
   84000:	000d883a 	mov	r6,zero
   84004:	2a000017 	ldw	r8,0(r5)
   84008:	49c00017 	ldw	r7,0(r9)
   8400c:	29400104 	addi	r5,r5,4
   84010:	40bfffcc 	andi	r2,r8,65535
   84014:	14c5383a 	mul	r2,r2,r19
   84018:	4010d43a 	srli	r8,r8,16
   8401c:	38ffffcc 	andi	r3,r7,65535
   84020:	1105883a 	add	r2,r2,r4
   84024:	1008d43a 	srli	r4,r2,16
   84028:	44d1383a 	mul	r8,r8,r19
   8402c:	198d883a 	add	r6,r3,r6
   84030:	10ffffcc 	andi	r3,r2,65535
   84034:	30c7c83a 	sub	r3,r6,r3
   84038:	380ed43a 	srli	r7,r7,16
   8403c:	4105883a 	add	r2,r8,r4
   84040:	180dd43a 	srai	r6,r3,16
   84044:	113fffcc 	andi	r4,r2,65535
   84048:	390fc83a 	sub	r7,r7,r4
   8404c:	398d883a 	add	r6,r7,r6
   84050:	300e943a 	slli	r7,r6,16
   84054:	18ffffcc 	andi	r3,r3,65535
   84058:	1008d43a 	srli	r4,r2,16
   8405c:	38ceb03a 	or	r7,r7,r3
   84060:	49c00015 	stw	r7,0(r9)
   84064:	300dd43a 	srai	r6,r6,16
   84068:	4a400104 	addi	r9,r9,4
   8406c:	a17fe52e 	bgeu	r20,r5,84004 <__alt_data_end+0xfffa2584>
   84070:	b0800017 	ldw	r2,0(r22)
   84074:	10000b1e 	bne	r2,zero,840a4 <quorem+0x120>
   84078:	b0bfff04 	addi	r2,r22,-4
   8407c:	a880082e 	bgeu	r21,r2,840a0 <quorem+0x11c>
   84080:	b0ffff17 	ldw	r3,-4(r22)
   84084:	18000326 	beq	r3,zero,84094 <quorem+0x110>
   84088:	00000506 	br	840a0 <quorem+0x11c>
   8408c:	10c00017 	ldw	r3,0(r2)
   84090:	1800031e 	bne	r3,zero,840a0 <quorem+0x11c>
   84094:	10bfff04 	addi	r2,r2,-4
   84098:	94bfffc4 	addi	r18,r18,-1
   8409c:	a8bffb36 	bltu	r21,r2,8408c <__alt_data_end+0xfffa260c>
   840a0:	84800415 	stw	r18,16(r16)
   840a4:	b80b883a 	mov	r5,r23
   840a8:	8009883a 	mov	r4,r16
   840ac:	00881440 	call	88144 <__mcmp>
   840b0:	10002616 	blt	r2,zero,8414c <quorem+0x1c8>
   840b4:	9cc00044 	addi	r19,r19,1
   840b8:	a805883a 	mov	r2,r21
   840bc:	000b883a 	mov	r5,zero
   840c0:	11000017 	ldw	r4,0(r2)
   840c4:	89800017 	ldw	r6,0(r17)
   840c8:	10800104 	addi	r2,r2,4
   840cc:	20ffffcc 	andi	r3,r4,65535
   840d0:	194b883a 	add	r5,r3,r5
   840d4:	30ffffcc 	andi	r3,r6,65535
   840d8:	28c7c83a 	sub	r3,r5,r3
   840dc:	300cd43a 	srli	r6,r6,16
   840e0:	2008d43a 	srli	r4,r4,16
   840e4:	180bd43a 	srai	r5,r3,16
   840e8:	18ffffcc 	andi	r3,r3,65535
   840ec:	2189c83a 	sub	r4,r4,r6
   840f0:	2149883a 	add	r4,r4,r5
   840f4:	200c943a 	slli	r6,r4,16
   840f8:	8c400104 	addi	r17,r17,4
   840fc:	200bd43a 	srai	r5,r4,16
   84100:	30c6b03a 	or	r3,r6,r3
   84104:	10ffff15 	stw	r3,-4(r2)
   84108:	a47fed2e 	bgeu	r20,r17,840c0 <__alt_data_end+0xfffa2640>
   8410c:	9485883a 	add	r2,r18,r18
   84110:	1085883a 	add	r2,r2,r2
   84114:	a887883a 	add	r3,r21,r2
   84118:	18800017 	ldw	r2,0(r3)
   8411c:	10000b1e 	bne	r2,zero,8414c <quorem+0x1c8>
   84120:	18bfff04 	addi	r2,r3,-4
   84124:	a880082e 	bgeu	r21,r2,84148 <quorem+0x1c4>
   84128:	18ffff17 	ldw	r3,-4(r3)
   8412c:	18000326 	beq	r3,zero,8413c <quorem+0x1b8>
   84130:	00000506 	br	84148 <quorem+0x1c4>
   84134:	10c00017 	ldw	r3,0(r2)
   84138:	1800031e 	bne	r3,zero,84148 <quorem+0x1c4>
   8413c:	10bfff04 	addi	r2,r2,-4
   84140:	94bfffc4 	addi	r18,r18,-1
   84144:	a8bffb36 	bltu	r21,r2,84134 <__alt_data_end+0xfffa26b4>
   84148:	84800415 	stw	r18,16(r16)
   8414c:	9805883a 	mov	r2,r19
   84150:	dfc00817 	ldw	ra,32(sp)
   84154:	ddc00717 	ldw	r23,28(sp)
   84158:	dd800617 	ldw	r22,24(sp)
   8415c:	dd400517 	ldw	r21,20(sp)
   84160:	dd000417 	ldw	r20,16(sp)
   84164:	dcc00317 	ldw	r19,12(sp)
   84168:	dc800217 	ldw	r18,8(sp)
   8416c:	dc400117 	ldw	r17,4(sp)
   84170:	dc000017 	ldw	r16,0(sp)
   84174:	dec00904 	addi	sp,sp,36
   84178:	f800283a 	ret
   8417c:	0005883a 	mov	r2,zero
   84180:	003ff306 	br	84150 <__alt_data_end+0xfffa26d0>

00084184 <_dtoa_r>:
   84184:	20801017 	ldw	r2,64(r4)
   84188:	deffde04 	addi	sp,sp,-136
   8418c:	df002015 	stw	fp,128(sp)
   84190:	dcc01b15 	stw	r19,108(sp)
   84194:	dc801a15 	stw	r18,104(sp)
   84198:	dc401915 	stw	r17,100(sp)
   8419c:	dc001815 	stw	r16,96(sp)
   841a0:	dfc02115 	stw	ra,132(sp)
   841a4:	ddc01f15 	stw	r23,124(sp)
   841a8:	dd801e15 	stw	r22,120(sp)
   841ac:	dd401d15 	stw	r21,116(sp)
   841b0:	dd001c15 	stw	r20,112(sp)
   841b4:	d9c00315 	stw	r7,12(sp)
   841b8:	2039883a 	mov	fp,r4
   841bc:	3023883a 	mov	r17,r6
   841c0:	2825883a 	mov	r18,r5
   841c4:	dc002417 	ldw	r16,144(sp)
   841c8:	3027883a 	mov	r19,r6
   841cc:	10000826 	beq	r2,zero,841f0 <_dtoa_r+0x6c>
   841d0:	21801117 	ldw	r6,68(r4)
   841d4:	00c00044 	movi	r3,1
   841d8:	100b883a 	mov	r5,r2
   841dc:	1986983a 	sll	r3,r3,r6
   841e0:	11800115 	stw	r6,4(r2)
   841e4:	10c00215 	stw	r3,8(r2)
   841e8:	00879240 	call	87924 <_Bfree>
   841ec:	e0001015 	stw	zero,64(fp)
   841f0:	88002e16 	blt	r17,zero,842ac <_dtoa_r+0x128>
   841f4:	80000015 	stw	zero,0(r16)
   841f8:	889ffc2c 	andhi	r2,r17,32752
   841fc:	00dffc34 	movhi	r3,32752
   84200:	10c01c26 	beq	r2,r3,84274 <_dtoa_r+0xf0>
   84204:	000d883a 	mov	r6,zero
   84208:	000f883a 	mov	r7,zero
   8420c:	9009883a 	mov	r4,r18
   84210:	980b883a 	mov	r5,r19
   84214:	008ccdc0 	call	8ccdc <__eqdf2>
   84218:	10002b1e 	bne	r2,zero,842c8 <_dtoa_r+0x144>
   8421c:	d9c02317 	ldw	r7,140(sp)
   84220:	00800044 	movi	r2,1
   84224:	38800015 	stw	r2,0(r7)
   84228:	d8802517 	ldw	r2,148(sp)
   8422c:	10019e26 	beq	r2,zero,848a8 <_dtoa_r+0x724>
   84230:	d8c02517 	ldw	r3,148(sp)
   84234:	00800274 	movhi	r2,9
   84238:	10838b44 	addi	r2,r2,3629
   8423c:	18800015 	stw	r2,0(r3)
   84240:	10bfffc4 	addi	r2,r2,-1
   84244:	dfc02117 	ldw	ra,132(sp)
   84248:	df002017 	ldw	fp,128(sp)
   8424c:	ddc01f17 	ldw	r23,124(sp)
   84250:	dd801e17 	ldw	r22,120(sp)
   84254:	dd401d17 	ldw	r21,116(sp)
   84258:	dd001c17 	ldw	r20,112(sp)
   8425c:	dcc01b17 	ldw	r19,108(sp)
   84260:	dc801a17 	ldw	r18,104(sp)
   84264:	dc401917 	ldw	r17,100(sp)
   84268:	dc001817 	ldw	r16,96(sp)
   8426c:	dec02204 	addi	sp,sp,136
   84270:	f800283a 	ret
   84274:	d8c02317 	ldw	r3,140(sp)
   84278:	0089c3c4 	movi	r2,9999
   8427c:	18800015 	stw	r2,0(r3)
   84280:	90017726 	beq	r18,zero,84860 <_dtoa_r+0x6dc>
   84284:	00800274 	movhi	r2,9
   84288:	10839704 	addi	r2,r2,3676
   8428c:	d9002517 	ldw	r4,148(sp)
   84290:	203fec26 	beq	r4,zero,84244 <__alt_data_end+0xfffa27c4>
   84294:	10c000c7 	ldb	r3,3(r2)
   84298:	1801781e 	bne	r3,zero,8487c <_dtoa_r+0x6f8>
   8429c:	10c000c4 	addi	r3,r2,3
   842a0:	d9802517 	ldw	r6,148(sp)
   842a4:	30c00015 	stw	r3,0(r6)
   842a8:	003fe606 	br	84244 <__alt_data_end+0xfffa27c4>
   842ac:	04e00034 	movhi	r19,32768
   842b0:	9cffffc4 	addi	r19,r19,-1
   842b4:	00800044 	movi	r2,1
   842b8:	8ce6703a 	and	r19,r17,r19
   842bc:	80800015 	stw	r2,0(r16)
   842c0:	9823883a 	mov	r17,r19
   842c4:	003fcc06 	br	841f8 <__alt_data_end+0xfffa2778>
   842c8:	d8800204 	addi	r2,sp,8
   842cc:	d8800015 	stw	r2,0(sp)
   842d0:	d9c00104 	addi	r7,sp,4
   842d4:	900b883a 	mov	r5,r18
   842d8:	980d883a 	mov	r6,r19
   842dc:	e009883a 	mov	r4,fp
   842e0:	8820d53a 	srli	r16,r17,20
   842e4:	00885100 	call	88510 <__d2b>
   842e8:	d8800915 	stw	r2,36(sp)
   842ec:	8001651e 	bne	r16,zero,84884 <_dtoa_r+0x700>
   842f0:	dd800217 	ldw	r22,8(sp)
   842f4:	dc000117 	ldw	r16,4(sp)
   842f8:	00800804 	movi	r2,32
   842fc:	b421883a 	add	r16,r22,r16
   84300:	80c10c84 	addi	r3,r16,1074
   84304:	10c2d10e 	bge	r2,r3,84e4c <_dtoa_r+0xcc8>
   84308:	00801004 	movi	r2,64
   8430c:	81010484 	addi	r4,r16,1042
   84310:	10c7c83a 	sub	r3,r2,r3
   84314:	9108d83a 	srl	r4,r18,r4
   84318:	88e2983a 	sll	r17,r17,r3
   8431c:	2448b03a 	or	r4,r4,r17
   84320:	008e0a40 	call	8e0a4 <__floatunsidf>
   84324:	017f8434 	movhi	r5,65040
   84328:	01800044 	movi	r6,1
   8432c:	1009883a 	mov	r4,r2
   84330:	194b883a 	add	r5,r3,r5
   84334:	843fffc4 	addi	r16,r16,-1
   84338:	d9801115 	stw	r6,68(sp)
   8433c:	000d883a 	mov	r6,zero
   84340:	01cffe34 	movhi	r7,16376
   84344:	008d64c0 	call	8d64c <__subdf3>
   84348:	0198dbf4 	movhi	r6,25455
   8434c:	01cff4f4 	movhi	r7,16339
   84350:	3190d844 	addi	r6,r6,17249
   84354:	39e1e9c4 	addi	r7,r7,-30809
   84358:	1009883a 	mov	r4,r2
   8435c:	180b883a 	mov	r5,r3
   84360:	008cf340 	call	8cf34 <__muldf3>
   84364:	01a2d874 	movhi	r6,35681
   84368:	01cff1f4 	movhi	r7,16327
   8436c:	31b22cc4 	addi	r6,r6,-14157
   84370:	39e28a04 	addi	r7,r7,-30168
   84374:	180b883a 	mov	r5,r3
   84378:	1009883a 	mov	r4,r2
   8437c:	008bb480 	call	8bb48 <__adddf3>
   84380:	8009883a 	mov	r4,r16
   84384:	1029883a 	mov	r20,r2
   84388:	1823883a 	mov	r17,r3
   8438c:	008dfc80 	call	8dfc8 <__floatsidf>
   84390:	019427f4 	movhi	r6,20639
   84394:	01cff4f4 	movhi	r7,16339
   84398:	319e7ec4 	addi	r6,r6,31227
   8439c:	39d104c4 	addi	r7,r7,17427
   843a0:	1009883a 	mov	r4,r2
   843a4:	180b883a 	mov	r5,r3
   843a8:	008cf340 	call	8cf34 <__muldf3>
   843ac:	100d883a 	mov	r6,r2
   843b0:	180f883a 	mov	r7,r3
   843b4:	a009883a 	mov	r4,r20
   843b8:	880b883a 	mov	r5,r17
   843bc:	008bb480 	call	8bb48 <__adddf3>
   843c0:	1009883a 	mov	r4,r2
   843c4:	180b883a 	mov	r5,r3
   843c8:	1029883a 	mov	r20,r2
   843cc:	1823883a 	mov	r17,r3
   843d0:	008df480 	call	8df48 <__fixdfsi>
   843d4:	000d883a 	mov	r6,zero
   843d8:	000f883a 	mov	r7,zero
   843dc:	a009883a 	mov	r4,r20
   843e0:	880b883a 	mov	r5,r17
   843e4:	d8800515 	stw	r2,20(sp)
   843e8:	008ce400 	call	8ce40 <__ledf2>
   843ec:	10028716 	blt	r2,zero,84e0c <_dtoa_r+0xc88>
   843f0:	d8c00517 	ldw	r3,20(sp)
   843f4:	00800584 	movi	r2,22
   843f8:	10c27536 	bltu	r2,r3,84dd0 <_dtoa_r+0xc4c>
   843fc:	180490fa 	slli	r2,r3,3
   84400:	00c00274 	movhi	r3,9
   84404:	18c3b304 	addi	r3,r3,3788
   84408:	1885883a 	add	r2,r3,r2
   8440c:	11000017 	ldw	r4,0(r2)
   84410:	11400117 	ldw	r5,4(r2)
   84414:	900d883a 	mov	r6,r18
   84418:	980f883a 	mov	r7,r19
   8441c:	008cd640 	call	8cd64 <__gedf2>
   84420:	00828d0e 	bge	zero,r2,84e58 <_dtoa_r+0xcd4>
   84424:	d9000517 	ldw	r4,20(sp)
   84428:	d8000e15 	stw	zero,56(sp)
   8442c:	213fffc4 	addi	r4,r4,-1
   84430:	d9000515 	stw	r4,20(sp)
   84434:	b42dc83a 	sub	r22,r22,r16
   84438:	b5bfffc4 	addi	r22,r22,-1
   8443c:	b0026f16 	blt	r22,zero,84dfc <_dtoa_r+0xc78>
   84440:	d8000815 	stw	zero,32(sp)
   84444:	d9c00517 	ldw	r7,20(sp)
   84448:	38026416 	blt	r7,zero,84ddc <_dtoa_r+0xc58>
   8444c:	b1ed883a 	add	r22,r22,r7
   84450:	d9c00d15 	stw	r7,52(sp)
   84454:	d8000a15 	stw	zero,40(sp)
   84458:	d9800317 	ldw	r6,12(sp)
   8445c:	00800244 	movi	r2,9
   84460:	11811436 	bltu	r2,r6,848b4 <_dtoa_r+0x730>
   84464:	00800144 	movi	r2,5
   84468:	1184e10e 	bge	r2,r6,857f0 <_dtoa_r+0x166c>
   8446c:	31bfff04 	addi	r6,r6,-4
   84470:	d9800315 	stw	r6,12(sp)
   84474:	0023883a 	mov	r17,zero
   84478:	d9800317 	ldw	r6,12(sp)
   8447c:	008000c4 	movi	r2,3
   84480:	30836726 	beq	r6,r2,85220 <_dtoa_r+0x109c>
   84484:	1183410e 	bge	r2,r6,8518c <_dtoa_r+0x1008>
   84488:	d9c00317 	ldw	r7,12(sp)
   8448c:	00800104 	movi	r2,4
   84490:	38827c26 	beq	r7,r2,84e84 <_dtoa_r+0xd00>
   84494:	00800144 	movi	r2,5
   84498:	3884c41e 	bne	r7,r2,857ac <_dtoa_r+0x1628>
   8449c:	00800044 	movi	r2,1
   844a0:	d8800b15 	stw	r2,44(sp)
   844a4:	d8c00517 	ldw	r3,20(sp)
   844a8:	d9002217 	ldw	r4,136(sp)
   844ac:	1907883a 	add	r3,r3,r4
   844b0:	19800044 	addi	r6,r3,1
   844b4:	d8c00c15 	stw	r3,48(sp)
   844b8:	d9800615 	stw	r6,24(sp)
   844bc:	0183a40e 	bge	zero,r6,85350 <_dtoa_r+0x11cc>
   844c0:	d9800617 	ldw	r6,24(sp)
   844c4:	3021883a 	mov	r16,r6
   844c8:	e0001115 	stw	zero,68(fp)
   844cc:	008005c4 	movi	r2,23
   844d0:	1184c92e 	bgeu	r2,r6,857f8 <_dtoa_r+0x1674>
   844d4:	00c00044 	movi	r3,1
   844d8:	00800104 	movi	r2,4
   844dc:	1085883a 	add	r2,r2,r2
   844e0:	11000504 	addi	r4,r2,20
   844e4:	180b883a 	mov	r5,r3
   844e8:	18c00044 	addi	r3,r3,1
   844ec:	313ffb2e 	bgeu	r6,r4,844dc <__alt_data_end+0xfffa2a5c>
   844f0:	e1401115 	stw	r5,68(fp)
   844f4:	e009883a 	mov	r4,fp
   844f8:	008787c0 	call	8787c <_Balloc>
   844fc:	d8800715 	stw	r2,28(sp)
   84500:	e0801015 	stw	r2,64(fp)
   84504:	00800384 	movi	r2,14
   84508:	1400f736 	bltu	r2,r16,848e8 <_dtoa_r+0x764>
   8450c:	8800f626 	beq	r17,zero,848e8 <_dtoa_r+0x764>
   84510:	d9c00517 	ldw	r7,20(sp)
   84514:	01c39a0e 	bge	zero,r7,85380 <_dtoa_r+0x11fc>
   84518:	388003cc 	andi	r2,r7,15
   8451c:	100490fa 	slli	r2,r2,3
   84520:	382bd13a 	srai	r21,r7,4
   84524:	00c00274 	movhi	r3,9
   84528:	18c3b304 	addi	r3,r3,3788
   8452c:	1885883a 	add	r2,r3,r2
   84530:	a8c0040c 	andi	r3,r21,16
   84534:	12400017 	ldw	r9,0(r2)
   84538:	12000117 	ldw	r8,4(r2)
   8453c:	18037926 	beq	r3,zero,85324 <_dtoa_r+0x11a0>
   84540:	00800274 	movhi	r2,9
   84544:	1083a904 	addi	r2,r2,3748
   84548:	11800817 	ldw	r6,32(r2)
   8454c:	11c00917 	ldw	r7,36(r2)
   84550:	9009883a 	mov	r4,r18
   84554:	980b883a 	mov	r5,r19
   84558:	da001715 	stw	r8,92(sp)
   8455c:	da401615 	stw	r9,88(sp)
   84560:	008c3f40 	call	8c3f4 <__divdf3>
   84564:	da001717 	ldw	r8,92(sp)
   84568:	da401617 	ldw	r9,88(sp)
   8456c:	ad4003cc 	andi	r21,r21,15
   84570:	040000c4 	movi	r16,3
   84574:	1023883a 	mov	r17,r2
   84578:	1829883a 	mov	r20,r3
   8457c:	a8001126 	beq	r21,zero,845c4 <_dtoa_r+0x440>
   84580:	05c00274 	movhi	r23,9
   84584:	bdc3a904 	addi	r23,r23,3748
   84588:	4805883a 	mov	r2,r9
   8458c:	4007883a 	mov	r3,r8
   84590:	a980004c 	andi	r6,r21,1
   84594:	1009883a 	mov	r4,r2
   84598:	a82bd07a 	srai	r21,r21,1
   8459c:	180b883a 	mov	r5,r3
   845a0:	30000426 	beq	r6,zero,845b4 <_dtoa_r+0x430>
   845a4:	b9800017 	ldw	r6,0(r23)
   845a8:	b9c00117 	ldw	r7,4(r23)
   845ac:	84000044 	addi	r16,r16,1
   845b0:	008cf340 	call	8cf34 <__muldf3>
   845b4:	bdc00204 	addi	r23,r23,8
   845b8:	a83ff51e 	bne	r21,zero,84590 <__alt_data_end+0xfffa2b10>
   845bc:	1013883a 	mov	r9,r2
   845c0:	1811883a 	mov	r8,r3
   845c4:	480d883a 	mov	r6,r9
   845c8:	400f883a 	mov	r7,r8
   845cc:	8809883a 	mov	r4,r17
   845d0:	a00b883a 	mov	r5,r20
   845d4:	008c3f40 	call	8c3f4 <__divdf3>
   845d8:	d8800f15 	stw	r2,60(sp)
   845dc:	d8c01015 	stw	r3,64(sp)
   845e0:	d8c00e17 	ldw	r3,56(sp)
   845e4:	18000626 	beq	r3,zero,84600 <_dtoa_r+0x47c>
   845e8:	d9000f17 	ldw	r4,60(sp)
   845ec:	d9401017 	ldw	r5,64(sp)
   845f0:	000d883a 	mov	r6,zero
   845f4:	01cffc34 	movhi	r7,16368
   845f8:	008ce400 	call	8ce40 <__ledf2>
   845fc:	10040b16 	blt	r2,zero,8562c <_dtoa_r+0x14a8>
   84600:	8009883a 	mov	r4,r16
   84604:	008dfc80 	call	8dfc8 <__floatsidf>
   84608:	d9800f17 	ldw	r6,60(sp)
   8460c:	d9c01017 	ldw	r7,64(sp)
   84610:	1009883a 	mov	r4,r2
   84614:	180b883a 	mov	r5,r3
   84618:	008cf340 	call	8cf34 <__muldf3>
   8461c:	000d883a 	mov	r6,zero
   84620:	01d00734 	movhi	r7,16412
   84624:	1009883a 	mov	r4,r2
   84628:	180b883a 	mov	r5,r3
   8462c:	008bb480 	call	8bb48 <__adddf3>
   84630:	1021883a 	mov	r16,r2
   84634:	d8800617 	ldw	r2,24(sp)
   84638:	047f3034 	movhi	r17,64704
   8463c:	1c63883a 	add	r17,r3,r17
   84640:	10031826 	beq	r2,zero,852a4 <_dtoa_r+0x1120>
   84644:	d8c00517 	ldw	r3,20(sp)
   84648:	db000617 	ldw	r12,24(sp)
   8464c:	d8c01315 	stw	r3,76(sp)
   84650:	d9000b17 	ldw	r4,44(sp)
   84654:	20038f26 	beq	r4,zero,85494 <_dtoa_r+0x1310>
   84658:	60bfffc4 	addi	r2,r12,-1
   8465c:	100490fa 	slli	r2,r2,3
   84660:	00c00274 	movhi	r3,9
   84664:	18c3b304 	addi	r3,r3,3788
   84668:	1885883a 	add	r2,r3,r2
   8466c:	11800017 	ldw	r6,0(r2)
   84670:	11c00117 	ldw	r7,4(r2)
   84674:	d8800717 	ldw	r2,28(sp)
   84678:	0009883a 	mov	r4,zero
   8467c:	014ff834 	movhi	r5,16352
   84680:	db001615 	stw	r12,88(sp)
   84684:	15c00044 	addi	r23,r2,1
   84688:	008c3f40 	call	8c3f4 <__divdf3>
   8468c:	800d883a 	mov	r6,r16
   84690:	880f883a 	mov	r7,r17
   84694:	1009883a 	mov	r4,r2
   84698:	180b883a 	mov	r5,r3
   8469c:	008d64c0 	call	8d64c <__subdf3>
   846a0:	d9401017 	ldw	r5,64(sp)
   846a4:	d9000f17 	ldw	r4,60(sp)
   846a8:	102b883a 	mov	r21,r2
   846ac:	d8c01215 	stw	r3,72(sp)
   846b0:	008df480 	call	8df48 <__fixdfsi>
   846b4:	1009883a 	mov	r4,r2
   846b8:	1029883a 	mov	r20,r2
   846bc:	008dfc80 	call	8dfc8 <__floatsidf>
   846c0:	d9000f17 	ldw	r4,60(sp)
   846c4:	d9401017 	ldw	r5,64(sp)
   846c8:	100d883a 	mov	r6,r2
   846cc:	180f883a 	mov	r7,r3
   846d0:	008d64c0 	call	8d64c <__subdf3>
   846d4:	1823883a 	mov	r17,r3
   846d8:	d8c00717 	ldw	r3,28(sp)
   846dc:	d9401217 	ldw	r5,72(sp)
   846e0:	a2000c04 	addi	r8,r20,48
   846e4:	1021883a 	mov	r16,r2
   846e8:	1a000005 	stb	r8,0(r3)
   846ec:	800d883a 	mov	r6,r16
   846f0:	880f883a 	mov	r7,r17
   846f4:	a809883a 	mov	r4,r21
   846f8:	4029883a 	mov	r20,r8
   846fc:	008cd640 	call	8cd64 <__gedf2>
   84700:	00841d16 	blt	zero,r2,85778 <_dtoa_r+0x15f4>
   84704:	800d883a 	mov	r6,r16
   84708:	880f883a 	mov	r7,r17
   8470c:	0009883a 	mov	r4,zero
   84710:	014ffc34 	movhi	r5,16368
   84714:	008d64c0 	call	8d64c <__subdf3>
   84718:	d9401217 	ldw	r5,72(sp)
   8471c:	100d883a 	mov	r6,r2
   84720:	180f883a 	mov	r7,r3
   84724:	a809883a 	mov	r4,r21
   84728:	008cd640 	call	8cd64 <__gedf2>
   8472c:	db001617 	ldw	r12,88(sp)
   84730:	00840e16 	blt	zero,r2,8576c <_dtoa_r+0x15e8>
   84734:	00800044 	movi	r2,1
   84738:	13006b0e 	bge	r2,r12,848e8 <_dtoa_r+0x764>
   8473c:	d9000717 	ldw	r4,28(sp)
   84740:	dd800f15 	stw	r22,60(sp)
   84744:	dcc01015 	stw	r19,64(sp)
   84748:	2319883a 	add	r12,r4,r12
   8474c:	dcc01217 	ldw	r19,72(sp)
   84750:	602d883a 	mov	r22,r12
   84754:	dc801215 	stw	r18,72(sp)
   84758:	b825883a 	mov	r18,r23
   8475c:	00000906 	br	84784 <_dtoa_r+0x600>
   84760:	008d64c0 	call	8d64c <__subdf3>
   84764:	a80d883a 	mov	r6,r21
   84768:	980f883a 	mov	r7,r19
   8476c:	1009883a 	mov	r4,r2
   84770:	180b883a 	mov	r5,r3
   84774:	008ce400 	call	8ce40 <__ledf2>
   84778:	1003e816 	blt	r2,zero,8571c <_dtoa_r+0x1598>
   8477c:	b825883a 	mov	r18,r23
   84780:	bd83e926 	beq	r23,r22,85728 <_dtoa_r+0x15a4>
   84784:	a809883a 	mov	r4,r21
   84788:	980b883a 	mov	r5,r19
   8478c:	000d883a 	mov	r6,zero
   84790:	01d00934 	movhi	r7,16420
   84794:	008cf340 	call	8cf34 <__muldf3>
   84798:	000d883a 	mov	r6,zero
   8479c:	01d00934 	movhi	r7,16420
   847a0:	8009883a 	mov	r4,r16
   847a4:	880b883a 	mov	r5,r17
   847a8:	102b883a 	mov	r21,r2
   847ac:	1827883a 	mov	r19,r3
   847b0:	008cf340 	call	8cf34 <__muldf3>
   847b4:	180b883a 	mov	r5,r3
   847b8:	1009883a 	mov	r4,r2
   847bc:	1821883a 	mov	r16,r3
   847c0:	1023883a 	mov	r17,r2
   847c4:	008df480 	call	8df48 <__fixdfsi>
   847c8:	1009883a 	mov	r4,r2
   847cc:	1029883a 	mov	r20,r2
   847d0:	008dfc80 	call	8dfc8 <__floatsidf>
   847d4:	8809883a 	mov	r4,r17
   847d8:	800b883a 	mov	r5,r16
   847dc:	100d883a 	mov	r6,r2
   847e0:	180f883a 	mov	r7,r3
   847e4:	008d64c0 	call	8d64c <__subdf3>
   847e8:	a5000c04 	addi	r20,r20,48
   847ec:	a80d883a 	mov	r6,r21
   847f0:	980f883a 	mov	r7,r19
   847f4:	1009883a 	mov	r4,r2
   847f8:	180b883a 	mov	r5,r3
   847fc:	95000005 	stb	r20,0(r18)
   84800:	1021883a 	mov	r16,r2
   84804:	1823883a 	mov	r17,r3
   84808:	008ce400 	call	8ce40 <__ledf2>
   8480c:	bdc00044 	addi	r23,r23,1
   84810:	800d883a 	mov	r6,r16
   84814:	880f883a 	mov	r7,r17
   84818:	0009883a 	mov	r4,zero
   8481c:	014ffc34 	movhi	r5,16368
   84820:	103fcf0e 	bge	r2,zero,84760 <__alt_data_end+0xfffa2ce0>
   84824:	d8c01317 	ldw	r3,76(sp)
   84828:	d8c00515 	stw	r3,20(sp)
   8482c:	d9400917 	ldw	r5,36(sp)
   84830:	e009883a 	mov	r4,fp
   84834:	00879240 	call	87924 <_Bfree>
   84838:	d9000517 	ldw	r4,20(sp)
   8483c:	d9802317 	ldw	r6,140(sp)
   84840:	d9c02517 	ldw	r7,148(sp)
   84844:	b8000005 	stb	zero,0(r23)
   84848:	20800044 	addi	r2,r4,1
   8484c:	30800015 	stw	r2,0(r6)
   84850:	3802aa26 	beq	r7,zero,852fc <_dtoa_r+0x1178>
   84854:	3dc00015 	stw	r23,0(r7)
   84858:	d8800717 	ldw	r2,28(sp)
   8485c:	003e7906 	br	84244 <__alt_data_end+0xfffa27c4>
   84860:	00800434 	movhi	r2,16
   84864:	10bfffc4 	addi	r2,r2,-1
   84868:	88a2703a 	and	r17,r17,r2
   8486c:	883e851e 	bne	r17,zero,84284 <__alt_data_end+0xfffa2804>
   84870:	00800274 	movhi	r2,9
   84874:	10839404 	addi	r2,r2,3664
   84878:	003e8406 	br	8428c <__alt_data_end+0xfffa280c>
   8487c:	10c00204 	addi	r3,r2,8
   84880:	003e8706 	br	842a0 <__alt_data_end+0xfffa2820>
   84884:	01400434 	movhi	r5,16
   84888:	297fffc4 	addi	r5,r5,-1
   8488c:	994a703a 	and	r5,r19,r5
   84890:	9009883a 	mov	r4,r18
   84894:	843f0044 	addi	r16,r16,-1023
   84898:	294ffc34 	orhi	r5,r5,16368
   8489c:	dd800217 	ldw	r22,8(sp)
   848a0:	d8001115 	stw	zero,68(sp)
   848a4:	003ea506 	br	8433c <__alt_data_end+0xfffa28bc>
   848a8:	00800274 	movhi	r2,9
   848ac:	10838b04 	addi	r2,r2,3628
   848b0:	003e6406 	br	84244 <__alt_data_end+0xfffa27c4>
   848b4:	e0001115 	stw	zero,68(fp)
   848b8:	000b883a 	mov	r5,zero
   848bc:	e009883a 	mov	r4,fp
   848c0:	008787c0 	call	8787c <_Balloc>
   848c4:	01bfffc4 	movi	r6,-1
   848c8:	01c00044 	movi	r7,1
   848cc:	d8800715 	stw	r2,28(sp)
   848d0:	d9800c15 	stw	r6,48(sp)
   848d4:	e0801015 	stw	r2,64(fp)
   848d8:	d8000315 	stw	zero,12(sp)
   848dc:	d9c00b15 	stw	r7,44(sp)
   848e0:	d9800615 	stw	r6,24(sp)
   848e4:	d8002215 	stw	zero,136(sp)
   848e8:	d8800117 	ldw	r2,4(sp)
   848ec:	10008916 	blt	r2,zero,84b14 <_dtoa_r+0x990>
   848f0:	d9000517 	ldw	r4,20(sp)
   848f4:	00c00384 	movi	r3,14
   848f8:	19008616 	blt	r3,r4,84b14 <_dtoa_r+0x990>
   848fc:	200490fa 	slli	r2,r4,3
   84900:	00c00274 	movhi	r3,9
   84904:	d9802217 	ldw	r6,136(sp)
   84908:	18c3b304 	addi	r3,r3,3788
   8490c:	1885883a 	add	r2,r3,r2
   84910:	14000017 	ldw	r16,0(r2)
   84914:	14400117 	ldw	r17,4(r2)
   84918:	30016316 	blt	r6,zero,84ea8 <_dtoa_r+0xd24>
   8491c:	800d883a 	mov	r6,r16
   84920:	880f883a 	mov	r7,r17
   84924:	9009883a 	mov	r4,r18
   84928:	980b883a 	mov	r5,r19
   8492c:	008c3f40 	call	8c3f4 <__divdf3>
   84930:	180b883a 	mov	r5,r3
   84934:	1009883a 	mov	r4,r2
   84938:	008df480 	call	8df48 <__fixdfsi>
   8493c:	1009883a 	mov	r4,r2
   84940:	102b883a 	mov	r21,r2
   84944:	008dfc80 	call	8dfc8 <__floatsidf>
   84948:	800d883a 	mov	r6,r16
   8494c:	880f883a 	mov	r7,r17
   84950:	1009883a 	mov	r4,r2
   84954:	180b883a 	mov	r5,r3
   84958:	008cf340 	call	8cf34 <__muldf3>
   8495c:	100d883a 	mov	r6,r2
   84960:	180f883a 	mov	r7,r3
   84964:	9009883a 	mov	r4,r18
   84968:	980b883a 	mov	r5,r19
   8496c:	008d64c0 	call	8d64c <__subdf3>
   84970:	d9c00717 	ldw	r7,28(sp)
   84974:	1009883a 	mov	r4,r2
   84978:	a8800c04 	addi	r2,r21,48
   8497c:	38800005 	stb	r2,0(r7)
   84980:	3dc00044 	addi	r23,r7,1
   84984:	d9c00617 	ldw	r7,24(sp)
   84988:	01800044 	movi	r6,1
   8498c:	180b883a 	mov	r5,r3
   84990:	2005883a 	mov	r2,r4
   84994:	39803826 	beq	r7,r6,84a78 <_dtoa_r+0x8f4>
   84998:	000d883a 	mov	r6,zero
   8499c:	01d00934 	movhi	r7,16420
   849a0:	008cf340 	call	8cf34 <__muldf3>
   849a4:	000d883a 	mov	r6,zero
   849a8:	000f883a 	mov	r7,zero
   849ac:	1009883a 	mov	r4,r2
   849b0:	180b883a 	mov	r5,r3
   849b4:	1025883a 	mov	r18,r2
   849b8:	1827883a 	mov	r19,r3
   849bc:	008ccdc0 	call	8ccdc <__eqdf2>
   849c0:	103f9a26 	beq	r2,zero,8482c <__alt_data_end+0xfffa2dac>
   849c4:	d9c00617 	ldw	r7,24(sp)
   849c8:	d8c00717 	ldw	r3,28(sp)
   849cc:	b829883a 	mov	r20,r23
   849d0:	38bfffc4 	addi	r2,r7,-1
   849d4:	18ad883a 	add	r22,r3,r2
   849d8:	00000a06 	br	84a04 <_dtoa_r+0x880>
   849dc:	008cf340 	call	8cf34 <__muldf3>
   849e0:	000d883a 	mov	r6,zero
   849e4:	000f883a 	mov	r7,zero
   849e8:	1009883a 	mov	r4,r2
   849ec:	180b883a 	mov	r5,r3
   849f0:	1025883a 	mov	r18,r2
   849f4:	1827883a 	mov	r19,r3
   849f8:	b829883a 	mov	r20,r23
   849fc:	008ccdc0 	call	8ccdc <__eqdf2>
   84a00:	103f8a26 	beq	r2,zero,8482c <__alt_data_end+0xfffa2dac>
   84a04:	800d883a 	mov	r6,r16
   84a08:	880f883a 	mov	r7,r17
   84a0c:	9009883a 	mov	r4,r18
   84a10:	980b883a 	mov	r5,r19
   84a14:	008c3f40 	call	8c3f4 <__divdf3>
   84a18:	180b883a 	mov	r5,r3
   84a1c:	1009883a 	mov	r4,r2
   84a20:	008df480 	call	8df48 <__fixdfsi>
   84a24:	1009883a 	mov	r4,r2
   84a28:	102b883a 	mov	r21,r2
   84a2c:	008dfc80 	call	8dfc8 <__floatsidf>
   84a30:	800d883a 	mov	r6,r16
   84a34:	880f883a 	mov	r7,r17
   84a38:	1009883a 	mov	r4,r2
   84a3c:	180b883a 	mov	r5,r3
   84a40:	008cf340 	call	8cf34 <__muldf3>
   84a44:	100d883a 	mov	r6,r2
   84a48:	180f883a 	mov	r7,r3
   84a4c:	9009883a 	mov	r4,r18
   84a50:	980b883a 	mov	r5,r19
   84a54:	008d64c0 	call	8d64c <__subdf3>
   84a58:	aa000c04 	addi	r8,r21,48
   84a5c:	a2000005 	stb	r8,0(r20)
   84a60:	000d883a 	mov	r6,zero
   84a64:	01d00934 	movhi	r7,16420
   84a68:	1009883a 	mov	r4,r2
   84a6c:	180b883a 	mov	r5,r3
   84a70:	a5c00044 	addi	r23,r20,1
   84a74:	b53fd91e 	bne	r22,r20,849dc <__alt_data_end+0xfffa2f5c>
   84a78:	100d883a 	mov	r6,r2
   84a7c:	180f883a 	mov	r7,r3
   84a80:	1009883a 	mov	r4,r2
   84a84:	180b883a 	mov	r5,r3
   84a88:	008bb480 	call	8bb48 <__adddf3>
   84a8c:	100d883a 	mov	r6,r2
   84a90:	180f883a 	mov	r7,r3
   84a94:	8009883a 	mov	r4,r16
   84a98:	880b883a 	mov	r5,r17
   84a9c:	1027883a 	mov	r19,r2
   84aa0:	1825883a 	mov	r18,r3
   84aa4:	008ce400 	call	8ce40 <__ledf2>
   84aa8:	10000816 	blt	r2,zero,84acc <_dtoa_r+0x948>
   84aac:	980d883a 	mov	r6,r19
   84ab0:	900f883a 	mov	r7,r18
   84ab4:	8009883a 	mov	r4,r16
   84ab8:	880b883a 	mov	r5,r17
   84abc:	008ccdc0 	call	8ccdc <__eqdf2>
   84ac0:	103f5a1e 	bne	r2,zero,8482c <__alt_data_end+0xfffa2dac>
   84ac4:	ad40004c 	andi	r21,r21,1
   84ac8:	a83f5826 	beq	r21,zero,8482c <__alt_data_end+0xfffa2dac>
   84acc:	bd3fffc3 	ldbu	r20,-1(r23)
   84ad0:	b8bfffc4 	addi	r2,r23,-1
   84ad4:	1007883a 	mov	r3,r2
   84ad8:	01400e44 	movi	r5,57
   84adc:	d9800717 	ldw	r6,28(sp)
   84ae0:	00000506 	br	84af8 <_dtoa_r+0x974>
   84ae4:	18ffffc4 	addi	r3,r3,-1
   84ae8:	11824726 	beq	r2,r6,85408 <_dtoa_r+0x1284>
   84aec:	1d000003 	ldbu	r20,0(r3)
   84af0:	102f883a 	mov	r23,r2
   84af4:	10bfffc4 	addi	r2,r2,-1
   84af8:	a1003fcc 	andi	r4,r20,255
   84afc:	2100201c 	xori	r4,r4,128
   84b00:	213fe004 	addi	r4,r4,-128
   84b04:	217ff726 	beq	r4,r5,84ae4 <__alt_data_end+0xfffa3064>
   84b08:	a2000044 	addi	r8,r20,1
   84b0c:	12000005 	stb	r8,0(r2)
   84b10:	003f4606 	br	8482c <__alt_data_end+0xfffa2dac>
   84b14:	d9000b17 	ldw	r4,44(sp)
   84b18:	2000c826 	beq	r4,zero,84e3c <_dtoa_r+0xcb8>
   84b1c:	d9800317 	ldw	r6,12(sp)
   84b20:	00c00044 	movi	r3,1
   84b24:	1980f90e 	bge	r3,r6,84f0c <_dtoa_r+0xd88>
   84b28:	d8800617 	ldw	r2,24(sp)
   84b2c:	d8c00a17 	ldw	r3,40(sp)
   84b30:	157fffc4 	addi	r21,r2,-1
   84b34:	1d41f316 	blt	r3,r21,85304 <_dtoa_r+0x1180>
   84b38:	1d6bc83a 	sub	r21,r3,r21
   84b3c:	d9c00617 	ldw	r7,24(sp)
   84b40:	3802aa16 	blt	r7,zero,855ec <_dtoa_r+0x1468>
   84b44:	dd000817 	ldw	r20,32(sp)
   84b48:	d8800617 	ldw	r2,24(sp)
   84b4c:	d8c00817 	ldw	r3,32(sp)
   84b50:	01400044 	movi	r5,1
   84b54:	e009883a 	mov	r4,fp
   84b58:	1887883a 	add	r3,r3,r2
   84b5c:	d8c00815 	stw	r3,32(sp)
   84b60:	b0ad883a 	add	r22,r22,r2
   84b64:	0087c880 	call	87c88 <__i2b>
   84b68:	1023883a 	mov	r17,r2
   84b6c:	a0000826 	beq	r20,zero,84b90 <_dtoa_r+0xa0c>
   84b70:	0580070e 	bge	zero,r22,84b90 <_dtoa_r+0xa0c>
   84b74:	a005883a 	mov	r2,r20
   84b78:	b500b916 	blt	r22,r20,84e60 <_dtoa_r+0xcdc>
   84b7c:	d9000817 	ldw	r4,32(sp)
   84b80:	a0a9c83a 	sub	r20,r20,r2
   84b84:	b0adc83a 	sub	r22,r22,r2
   84b88:	2089c83a 	sub	r4,r4,r2
   84b8c:	d9000815 	stw	r4,32(sp)
   84b90:	d9800a17 	ldw	r6,40(sp)
   84b94:	0181810e 	bge	zero,r6,8519c <_dtoa_r+0x1018>
   84b98:	d9c00b17 	ldw	r7,44(sp)
   84b9c:	3800b326 	beq	r7,zero,84e6c <_dtoa_r+0xce8>
   84ba0:	a800b226 	beq	r21,zero,84e6c <_dtoa_r+0xce8>
   84ba4:	880b883a 	mov	r5,r17
   84ba8:	a80d883a 	mov	r6,r21
   84bac:	e009883a 	mov	r4,fp
   84bb0:	0087ebc0 	call	87ebc <__pow5mult>
   84bb4:	d9800917 	ldw	r6,36(sp)
   84bb8:	100b883a 	mov	r5,r2
   84bbc:	e009883a 	mov	r4,fp
   84bc0:	1023883a 	mov	r17,r2
   84bc4:	0087cc40 	call	87cc4 <__multiply>
   84bc8:	1021883a 	mov	r16,r2
   84bcc:	d8800a17 	ldw	r2,40(sp)
   84bd0:	d9400917 	ldw	r5,36(sp)
   84bd4:	e009883a 	mov	r4,fp
   84bd8:	1545c83a 	sub	r2,r2,r21
   84bdc:	d8800a15 	stw	r2,40(sp)
   84be0:	00879240 	call	87924 <_Bfree>
   84be4:	d8c00a17 	ldw	r3,40(sp)
   84be8:	18009f1e 	bne	r3,zero,84e68 <_dtoa_r+0xce4>
   84bec:	05c00044 	movi	r23,1
   84bf0:	e009883a 	mov	r4,fp
   84bf4:	b80b883a 	mov	r5,r23
   84bf8:	0087c880 	call	87c88 <__i2b>
   84bfc:	d9000d17 	ldw	r4,52(sp)
   84c00:	102b883a 	mov	r21,r2
   84c04:	2000ce26 	beq	r4,zero,84f40 <_dtoa_r+0xdbc>
   84c08:	200d883a 	mov	r6,r4
   84c0c:	100b883a 	mov	r5,r2
   84c10:	e009883a 	mov	r4,fp
   84c14:	0087ebc0 	call	87ebc <__pow5mult>
   84c18:	d9800317 	ldw	r6,12(sp)
   84c1c:	102b883a 	mov	r21,r2
   84c20:	b981810e 	bge	r23,r6,85228 <_dtoa_r+0x10a4>
   84c24:	0027883a 	mov	r19,zero
   84c28:	a8800417 	ldw	r2,16(r21)
   84c2c:	05c00804 	movi	r23,32
   84c30:	10800104 	addi	r2,r2,4
   84c34:	1085883a 	add	r2,r2,r2
   84c38:	1085883a 	add	r2,r2,r2
   84c3c:	a885883a 	add	r2,r21,r2
   84c40:	11000017 	ldw	r4,0(r2)
   84c44:	0087b700 	call	87b70 <__hi0bits>
   84c48:	b885c83a 	sub	r2,r23,r2
   84c4c:	1585883a 	add	r2,r2,r22
   84c50:	108007cc 	andi	r2,r2,31
   84c54:	1000b326 	beq	r2,zero,84f24 <_dtoa_r+0xda0>
   84c58:	00c00804 	movi	r3,32
   84c5c:	1887c83a 	sub	r3,r3,r2
   84c60:	01000104 	movi	r4,4
   84c64:	20c2cd0e 	bge	r4,r3,8579c <_dtoa_r+0x1618>
   84c68:	00c00704 	movi	r3,28
   84c6c:	1885c83a 	sub	r2,r3,r2
   84c70:	d8c00817 	ldw	r3,32(sp)
   84c74:	a0a9883a 	add	r20,r20,r2
   84c78:	b0ad883a 	add	r22,r22,r2
   84c7c:	1887883a 	add	r3,r3,r2
   84c80:	d8c00815 	stw	r3,32(sp)
   84c84:	d9800817 	ldw	r6,32(sp)
   84c88:	0180040e 	bge	zero,r6,84c9c <_dtoa_r+0xb18>
   84c8c:	800b883a 	mov	r5,r16
   84c90:	e009883a 	mov	r4,fp
   84c94:	0087ffc0 	call	87ffc <__lshift>
   84c98:	1021883a 	mov	r16,r2
   84c9c:	0580050e 	bge	zero,r22,84cb4 <_dtoa_r+0xb30>
   84ca0:	a80b883a 	mov	r5,r21
   84ca4:	b00d883a 	mov	r6,r22
   84ca8:	e009883a 	mov	r4,fp
   84cac:	0087ffc0 	call	87ffc <__lshift>
   84cb0:	102b883a 	mov	r21,r2
   84cb4:	d9c00e17 	ldw	r7,56(sp)
   84cb8:	3801211e 	bne	r7,zero,85140 <_dtoa_r+0xfbc>
   84cbc:	d9800617 	ldw	r6,24(sp)
   84cc0:	0181380e 	bge	zero,r6,851a4 <_dtoa_r+0x1020>
   84cc4:	d8c00b17 	ldw	r3,44(sp)
   84cc8:	1800ab1e 	bne	r3,zero,84f78 <_dtoa_r+0xdf4>
   84ccc:	dc800717 	ldw	r18,28(sp)
   84cd0:	dcc00617 	ldw	r19,24(sp)
   84cd4:	9029883a 	mov	r20,r18
   84cd8:	00000206 	br	84ce4 <_dtoa_r+0xb60>
   84cdc:	008794c0 	call	8794c <__multadd>
   84ce0:	1021883a 	mov	r16,r2
   84ce4:	a80b883a 	mov	r5,r21
   84ce8:	8009883a 	mov	r4,r16
   84cec:	0083f840 	call	83f84 <quorem>
   84cf0:	10800c04 	addi	r2,r2,48
   84cf4:	90800005 	stb	r2,0(r18)
   84cf8:	94800044 	addi	r18,r18,1
   84cfc:	9507c83a 	sub	r3,r18,r20
   84d00:	000f883a 	mov	r7,zero
   84d04:	01800284 	movi	r6,10
   84d08:	800b883a 	mov	r5,r16
   84d0c:	e009883a 	mov	r4,fp
   84d10:	1cfff216 	blt	r3,r19,84cdc <__alt_data_end+0xfffa325c>
   84d14:	1011883a 	mov	r8,r2
   84d18:	d8800617 	ldw	r2,24(sp)
   84d1c:	0082370e 	bge	zero,r2,855fc <_dtoa_r+0x1478>
   84d20:	d9000717 	ldw	r4,28(sp)
   84d24:	0025883a 	mov	r18,zero
   84d28:	20af883a 	add	r23,r4,r2
   84d2c:	01800044 	movi	r6,1
   84d30:	800b883a 	mov	r5,r16
   84d34:	e009883a 	mov	r4,fp
   84d38:	da001715 	stw	r8,92(sp)
   84d3c:	0087ffc0 	call	87ffc <__lshift>
   84d40:	a80b883a 	mov	r5,r21
   84d44:	1009883a 	mov	r4,r2
   84d48:	d8800915 	stw	r2,36(sp)
   84d4c:	00881440 	call	88144 <__mcmp>
   84d50:	da001717 	ldw	r8,92(sp)
   84d54:	0081800e 	bge	zero,r2,85358 <_dtoa_r+0x11d4>
   84d58:	b93fffc3 	ldbu	r4,-1(r23)
   84d5c:	b8bfffc4 	addi	r2,r23,-1
   84d60:	1007883a 	mov	r3,r2
   84d64:	01800e44 	movi	r6,57
   84d68:	d9c00717 	ldw	r7,28(sp)
   84d6c:	00000506 	br	84d84 <_dtoa_r+0xc00>
   84d70:	18ffffc4 	addi	r3,r3,-1
   84d74:	11c12326 	beq	r2,r7,85204 <_dtoa_r+0x1080>
   84d78:	19000003 	ldbu	r4,0(r3)
   84d7c:	102f883a 	mov	r23,r2
   84d80:	10bfffc4 	addi	r2,r2,-1
   84d84:	21403fcc 	andi	r5,r4,255
   84d88:	2940201c 	xori	r5,r5,128
   84d8c:	297fe004 	addi	r5,r5,-128
   84d90:	29bff726 	beq	r5,r6,84d70 <__alt_data_end+0xfffa32f0>
   84d94:	21000044 	addi	r4,r4,1
   84d98:	11000005 	stb	r4,0(r2)
   84d9c:	a80b883a 	mov	r5,r21
   84da0:	e009883a 	mov	r4,fp
   84da4:	00879240 	call	87924 <_Bfree>
   84da8:	883ea026 	beq	r17,zero,8482c <__alt_data_end+0xfffa2dac>
   84dac:	90000426 	beq	r18,zero,84dc0 <_dtoa_r+0xc3c>
   84db0:	94400326 	beq	r18,r17,84dc0 <_dtoa_r+0xc3c>
   84db4:	900b883a 	mov	r5,r18
   84db8:	e009883a 	mov	r4,fp
   84dbc:	00879240 	call	87924 <_Bfree>
   84dc0:	880b883a 	mov	r5,r17
   84dc4:	e009883a 	mov	r4,fp
   84dc8:	00879240 	call	87924 <_Bfree>
   84dcc:	003e9706 	br	8482c <__alt_data_end+0xfffa2dac>
   84dd0:	01800044 	movi	r6,1
   84dd4:	d9800e15 	stw	r6,56(sp)
   84dd8:	003d9606 	br	84434 <__alt_data_end+0xfffa29b4>
   84ddc:	d8800817 	ldw	r2,32(sp)
   84de0:	d8c00517 	ldw	r3,20(sp)
   84de4:	d8000d15 	stw	zero,52(sp)
   84de8:	10c5c83a 	sub	r2,r2,r3
   84dec:	00c9c83a 	sub	r4,zero,r3
   84df0:	d8800815 	stw	r2,32(sp)
   84df4:	d9000a15 	stw	r4,40(sp)
   84df8:	003d9706 	br	84458 <__alt_data_end+0xfffa29d8>
   84dfc:	05adc83a 	sub	r22,zero,r22
   84e00:	dd800815 	stw	r22,32(sp)
   84e04:	002d883a 	mov	r22,zero
   84e08:	003d8e06 	br	84444 <__alt_data_end+0xfffa29c4>
   84e0c:	d9000517 	ldw	r4,20(sp)
   84e10:	008dfc80 	call	8dfc8 <__floatsidf>
   84e14:	100d883a 	mov	r6,r2
   84e18:	180f883a 	mov	r7,r3
   84e1c:	a009883a 	mov	r4,r20
   84e20:	880b883a 	mov	r5,r17
   84e24:	008ccdc0 	call	8ccdc <__eqdf2>
   84e28:	103d7126 	beq	r2,zero,843f0 <__alt_data_end+0xfffa2970>
   84e2c:	d9c00517 	ldw	r7,20(sp)
   84e30:	39ffffc4 	addi	r7,r7,-1
   84e34:	d9c00515 	stw	r7,20(sp)
   84e38:	003d6d06 	br	843f0 <__alt_data_end+0xfffa2970>
   84e3c:	dd400a17 	ldw	r21,40(sp)
   84e40:	dd000817 	ldw	r20,32(sp)
   84e44:	0023883a 	mov	r17,zero
   84e48:	003f4806 	br	84b6c <__alt_data_end+0xfffa30ec>
   84e4c:	10e3c83a 	sub	r17,r2,r3
   84e50:	9448983a 	sll	r4,r18,r17
   84e54:	003d3206 	br	84320 <__alt_data_end+0xfffa28a0>
   84e58:	d8000e15 	stw	zero,56(sp)
   84e5c:	003d7506 	br	84434 <__alt_data_end+0xfffa29b4>
   84e60:	b005883a 	mov	r2,r22
   84e64:	003f4506 	br	84b7c <__alt_data_end+0xfffa30fc>
   84e68:	dc000915 	stw	r16,36(sp)
   84e6c:	d9800a17 	ldw	r6,40(sp)
   84e70:	d9400917 	ldw	r5,36(sp)
   84e74:	e009883a 	mov	r4,fp
   84e78:	0087ebc0 	call	87ebc <__pow5mult>
   84e7c:	1021883a 	mov	r16,r2
   84e80:	003f5a06 	br	84bec <__alt_data_end+0xfffa316c>
   84e84:	01c00044 	movi	r7,1
   84e88:	d9c00b15 	stw	r7,44(sp)
   84e8c:	d8802217 	ldw	r2,136(sp)
   84e90:	0081280e 	bge	zero,r2,85334 <_dtoa_r+0x11b0>
   84e94:	100d883a 	mov	r6,r2
   84e98:	1021883a 	mov	r16,r2
   84e9c:	d8800c15 	stw	r2,48(sp)
   84ea0:	d8800615 	stw	r2,24(sp)
   84ea4:	003d8806 	br	844c8 <__alt_data_end+0xfffa2a48>
   84ea8:	d8800617 	ldw	r2,24(sp)
   84eac:	00be9b16 	blt	zero,r2,8491c <__alt_data_end+0xfffa2e9c>
   84eb0:	10010f1e 	bne	r2,zero,852f0 <_dtoa_r+0x116c>
   84eb4:	880b883a 	mov	r5,r17
   84eb8:	000d883a 	mov	r6,zero
   84ebc:	01d00534 	movhi	r7,16404
   84ec0:	8009883a 	mov	r4,r16
   84ec4:	008cf340 	call	8cf34 <__muldf3>
   84ec8:	900d883a 	mov	r6,r18
   84ecc:	980f883a 	mov	r7,r19
   84ed0:	1009883a 	mov	r4,r2
   84ed4:	180b883a 	mov	r5,r3
   84ed8:	008cd640 	call	8cd64 <__gedf2>
   84edc:	002b883a 	mov	r21,zero
   84ee0:	0023883a 	mov	r17,zero
   84ee4:	1000bf16 	blt	r2,zero,851e4 <_dtoa_r+0x1060>
   84ee8:	d9802217 	ldw	r6,136(sp)
   84eec:	ddc00717 	ldw	r23,28(sp)
   84ef0:	018c303a 	nor	r6,zero,r6
   84ef4:	d9800515 	stw	r6,20(sp)
   84ef8:	a80b883a 	mov	r5,r21
   84efc:	e009883a 	mov	r4,fp
   84f00:	00879240 	call	87924 <_Bfree>
   84f04:	883e4926 	beq	r17,zero,8482c <__alt_data_end+0xfffa2dac>
   84f08:	003fad06 	br	84dc0 <__alt_data_end+0xfffa3340>
   84f0c:	d9c01117 	ldw	r7,68(sp)
   84f10:	3801bc26 	beq	r7,zero,85604 <_dtoa_r+0x1480>
   84f14:	10810cc4 	addi	r2,r2,1075
   84f18:	dd400a17 	ldw	r21,40(sp)
   84f1c:	dd000817 	ldw	r20,32(sp)
   84f20:	003f0a06 	br	84b4c <__alt_data_end+0xfffa30cc>
   84f24:	00800704 	movi	r2,28
   84f28:	d9000817 	ldw	r4,32(sp)
   84f2c:	a0a9883a 	add	r20,r20,r2
   84f30:	b0ad883a 	add	r22,r22,r2
   84f34:	2089883a 	add	r4,r4,r2
   84f38:	d9000815 	stw	r4,32(sp)
   84f3c:	003f5106 	br	84c84 <__alt_data_end+0xfffa3204>
   84f40:	d8c00317 	ldw	r3,12(sp)
   84f44:	b8c1fc0e 	bge	r23,r3,85738 <_dtoa_r+0x15b4>
   84f48:	0027883a 	mov	r19,zero
   84f4c:	b805883a 	mov	r2,r23
   84f50:	003f3e06 	br	84c4c <__alt_data_end+0xfffa31cc>
   84f54:	880b883a 	mov	r5,r17
   84f58:	e009883a 	mov	r4,fp
   84f5c:	000f883a 	mov	r7,zero
   84f60:	01800284 	movi	r6,10
   84f64:	008794c0 	call	8794c <__multadd>
   84f68:	d9000c17 	ldw	r4,48(sp)
   84f6c:	1023883a 	mov	r17,r2
   84f70:	0102040e 	bge	zero,r4,85784 <_dtoa_r+0x1600>
   84f74:	d9000615 	stw	r4,24(sp)
   84f78:	0500050e 	bge	zero,r20,84f90 <_dtoa_r+0xe0c>
   84f7c:	880b883a 	mov	r5,r17
   84f80:	a00d883a 	mov	r6,r20
   84f84:	e009883a 	mov	r4,fp
   84f88:	0087ffc0 	call	87ffc <__lshift>
   84f8c:	1023883a 	mov	r17,r2
   84f90:	9801241e 	bne	r19,zero,85424 <_dtoa_r+0x12a0>
   84f94:	8829883a 	mov	r20,r17
   84f98:	d9000617 	ldw	r4,24(sp)
   84f9c:	dcc00717 	ldw	r19,28(sp)
   84fa0:	9480004c 	andi	r18,r18,1
   84fa4:	20bfffc4 	addi	r2,r4,-1
   84fa8:	9885883a 	add	r2,r19,r2
   84fac:	d8800415 	stw	r2,16(sp)
   84fb0:	dc800615 	stw	r18,24(sp)
   84fb4:	a80b883a 	mov	r5,r21
   84fb8:	8009883a 	mov	r4,r16
   84fbc:	0083f840 	call	83f84 <quorem>
   84fc0:	880b883a 	mov	r5,r17
   84fc4:	8009883a 	mov	r4,r16
   84fc8:	102f883a 	mov	r23,r2
   84fcc:	00881440 	call	88144 <__mcmp>
   84fd0:	a80b883a 	mov	r5,r21
   84fd4:	a00d883a 	mov	r6,r20
   84fd8:	e009883a 	mov	r4,fp
   84fdc:	102d883a 	mov	r22,r2
   84fe0:	00881a40 	call	881a4 <__mdiff>
   84fe4:	1007883a 	mov	r3,r2
   84fe8:	10800317 	ldw	r2,12(r2)
   84fec:	bc800c04 	addi	r18,r23,48
   84ff0:	180b883a 	mov	r5,r3
   84ff4:	10004e1e 	bne	r2,zero,85130 <_dtoa_r+0xfac>
   84ff8:	8009883a 	mov	r4,r16
   84ffc:	d8c01615 	stw	r3,88(sp)
   85000:	00881440 	call	88144 <__mcmp>
   85004:	d8c01617 	ldw	r3,88(sp)
   85008:	e009883a 	mov	r4,fp
   8500c:	d8801615 	stw	r2,88(sp)
   85010:	180b883a 	mov	r5,r3
   85014:	00879240 	call	87924 <_Bfree>
   85018:	d8801617 	ldw	r2,88(sp)
   8501c:	1000041e 	bne	r2,zero,85030 <_dtoa_r+0xeac>
   85020:	d9800317 	ldw	r6,12(sp)
   85024:	3000021e 	bne	r6,zero,85030 <_dtoa_r+0xeac>
   85028:	d8c00617 	ldw	r3,24(sp)
   8502c:	18003726 	beq	r3,zero,8510c <_dtoa_r+0xf88>
   85030:	b0002016 	blt	r22,zero,850b4 <_dtoa_r+0xf30>
   85034:	b000041e 	bne	r22,zero,85048 <_dtoa_r+0xec4>
   85038:	d9000317 	ldw	r4,12(sp)
   8503c:	2000021e 	bne	r4,zero,85048 <_dtoa_r+0xec4>
   85040:	d8c00617 	ldw	r3,24(sp)
   85044:	18001b26 	beq	r3,zero,850b4 <_dtoa_r+0xf30>
   85048:	00810716 	blt	zero,r2,85468 <_dtoa_r+0x12e4>
   8504c:	d8c00417 	ldw	r3,16(sp)
   85050:	9d800044 	addi	r22,r19,1
   85054:	9c800005 	stb	r18,0(r19)
   85058:	b02f883a 	mov	r23,r22
   8505c:	98c10626 	beq	r19,r3,85478 <_dtoa_r+0x12f4>
   85060:	800b883a 	mov	r5,r16
   85064:	000f883a 	mov	r7,zero
   85068:	01800284 	movi	r6,10
   8506c:	e009883a 	mov	r4,fp
   85070:	008794c0 	call	8794c <__multadd>
   85074:	1021883a 	mov	r16,r2
   85078:	000f883a 	mov	r7,zero
   8507c:	01800284 	movi	r6,10
   85080:	880b883a 	mov	r5,r17
   85084:	e009883a 	mov	r4,fp
   85088:	8d002526 	beq	r17,r20,85120 <_dtoa_r+0xf9c>
   8508c:	008794c0 	call	8794c <__multadd>
   85090:	a00b883a 	mov	r5,r20
   85094:	000f883a 	mov	r7,zero
   85098:	01800284 	movi	r6,10
   8509c:	e009883a 	mov	r4,fp
   850a0:	1023883a 	mov	r17,r2
   850a4:	008794c0 	call	8794c <__multadd>
   850a8:	1029883a 	mov	r20,r2
   850ac:	b027883a 	mov	r19,r22
   850b0:	003fc006 	br	84fb4 <__alt_data_end+0xfffa3534>
   850b4:	9011883a 	mov	r8,r18
   850b8:	00800e0e 	bge	zero,r2,850f4 <_dtoa_r+0xf70>
   850bc:	800b883a 	mov	r5,r16
   850c0:	01800044 	movi	r6,1
   850c4:	e009883a 	mov	r4,fp
   850c8:	da001715 	stw	r8,92(sp)
   850cc:	0087ffc0 	call	87ffc <__lshift>
   850d0:	a80b883a 	mov	r5,r21
   850d4:	1009883a 	mov	r4,r2
   850d8:	1021883a 	mov	r16,r2
   850dc:	00881440 	call	88144 <__mcmp>
   850e0:	da001717 	ldw	r8,92(sp)
   850e4:	0081960e 	bge	zero,r2,85740 <_dtoa_r+0x15bc>
   850e8:	00800e44 	movi	r2,57
   850ec:	40817026 	beq	r8,r2,856b0 <_dtoa_r+0x152c>
   850f0:	ba000c44 	addi	r8,r23,49
   850f4:	8825883a 	mov	r18,r17
   850f8:	9dc00044 	addi	r23,r19,1
   850fc:	9a000005 	stb	r8,0(r19)
   85100:	a023883a 	mov	r17,r20
   85104:	dc000915 	stw	r16,36(sp)
   85108:	003f2406 	br	84d9c <__alt_data_end+0xfffa331c>
   8510c:	00800e44 	movi	r2,57
   85110:	9011883a 	mov	r8,r18
   85114:	90816626 	beq	r18,r2,856b0 <_dtoa_r+0x152c>
   85118:	05bff516 	blt	zero,r22,850f0 <__alt_data_end+0xfffa3670>
   8511c:	003ff506 	br	850f4 <__alt_data_end+0xfffa3674>
   85120:	008794c0 	call	8794c <__multadd>
   85124:	1023883a 	mov	r17,r2
   85128:	1029883a 	mov	r20,r2
   8512c:	003fdf06 	br	850ac <__alt_data_end+0xfffa362c>
   85130:	e009883a 	mov	r4,fp
   85134:	00879240 	call	87924 <_Bfree>
   85138:	00800044 	movi	r2,1
   8513c:	003fbc06 	br	85030 <__alt_data_end+0xfffa35b0>
   85140:	a80b883a 	mov	r5,r21
   85144:	8009883a 	mov	r4,r16
   85148:	00881440 	call	88144 <__mcmp>
   8514c:	103edb0e 	bge	r2,zero,84cbc <__alt_data_end+0xfffa323c>
   85150:	800b883a 	mov	r5,r16
   85154:	000f883a 	mov	r7,zero
   85158:	01800284 	movi	r6,10
   8515c:	e009883a 	mov	r4,fp
   85160:	008794c0 	call	8794c <__multadd>
   85164:	1021883a 	mov	r16,r2
   85168:	d8800517 	ldw	r2,20(sp)
   8516c:	d8c00b17 	ldw	r3,44(sp)
   85170:	10bfffc4 	addi	r2,r2,-1
   85174:	d8800515 	stw	r2,20(sp)
   85178:	183f761e 	bne	r3,zero,84f54 <__alt_data_end+0xfffa34d4>
   8517c:	d9000c17 	ldw	r4,48(sp)
   85180:	0101730e 	bge	zero,r4,85750 <_dtoa_r+0x15cc>
   85184:	d9000615 	stw	r4,24(sp)
   85188:	003ed006 	br	84ccc <__alt_data_end+0xfffa324c>
   8518c:	00800084 	movi	r2,2
   85190:	3081861e 	bne	r6,r2,857ac <_dtoa_r+0x1628>
   85194:	d8000b15 	stw	zero,44(sp)
   85198:	003f3c06 	br	84e8c <__alt_data_end+0xfffa340c>
   8519c:	dc000917 	ldw	r16,36(sp)
   851a0:	003e9206 	br	84bec <__alt_data_end+0xfffa316c>
   851a4:	d9c00317 	ldw	r7,12(sp)
   851a8:	00800084 	movi	r2,2
   851ac:	11fec50e 	bge	r2,r7,84cc4 <__alt_data_end+0xfffa3244>
   851b0:	d9000617 	ldw	r4,24(sp)
   851b4:	20013c1e 	bne	r4,zero,856a8 <_dtoa_r+0x1524>
   851b8:	a80b883a 	mov	r5,r21
   851bc:	000f883a 	mov	r7,zero
   851c0:	01800144 	movi	r6,5
   851c4:	e009883a 	mov	r4,fp
   851c8:	008794c0 	call	8794c <__multadd>
   851cc:	100b883a 	mov	r5,r2
   851d0:	8009883a 	mov	r4,r16
   851d4:	102b883a 	mov	r21,r2
   851d8:	00881440 	call	88144 <__mcmp>
   851dc:	dc000915 	stw	r16,36(sp)
   851e0:	00bf410e 	bge	zero,r2,84ee8 <__alt_data_end+0xfffa3468>
   851e4:	d9c00717 	ldw	r7,28(sp)
   851e8:	00800c44 	movi	r2,49
   851ec:	38800005 	stb	r2,0(r7)
   851f0:	d8800517 	ldw	r2,20(sp)
   851f4:	3dc00044 	addi	r23,r7,1
   851f8:	10800044 	addi	r2,r2,1
   851fc:	d8800515 	stw	r2,20(sp)
   85200:	003f3d06 	br	84ef8 <__alt_data_end+0xfffa3478>
   85204:	d9800517 	ldw	r6,20(sp)
   85208:	d9c00717 	ldw	r7,28(sp)
   8520c:	00800c44 	movi	r2,49
   85210:	31800044 	addi	r6,r6,1
   85214:	d9800515 	stw	r6,20(sp)
   85218:	38800005 	stb	r2,0(r7)
   8521c:	003edf06 	br	84d9c <__alt_data_end+0xfffa331c>
   85220:	d8000b15 	stw	zero,44(sp)
   85224:	003c9f06 	br	844a4 <__alt_data_end+0xfffa2a24>
   85228:	903e7e1e 	bne	r18,zero,84c24 <__alt_data_end+0xfffa31a4>
   8522c:	00800434 	movhi	r2,16
   85230:	10bfffc4 	addi	r2,r2,-1
   85234:	9884703a 	and	r2,r19,r2
   85238:	1000ea1e 	bne	r2,zero,855e4 <_dtoa_r+0x1460>
   8523c:	9cdffc2c 	andhi	r19,r19,32752
   85240:	9800e826 	beq	r19,zero,855e4 <_dtoa_r+0x1460>
   85244:	d9c00817 	ldw	r7,32(sp)
   85248:	b5800044 	addi	r22,r22,1
   8524c:	04c00044 	movi	r19,1
   85250:	39c00044 	addi	r7,r7,1
   85254:	d9c00815 	stw	r7,32(sp)
   85258:	d8800d17 	ldw	r2,52(sp)
   8525c:	103e721e 	bne	r2,zero,84c28 <__alt_data_end+0xfffa31a8>
   85260:	00800044 	movi	r2,1
   85264:	003e7906 	br	84c4c <__alt_data_end+0xfffa31cc>
   85268:	8009883a 	mov	r4,r16
   8526c:	008dfc80 	call	8dfc8 <__floatsidf>
   85270:	d9800f17 	ldw	r6,60(sp)
   85274:	d9c01017 	ldw	r7,64(sp)
   85278:	1009883a 	mov	r4,r2
   8527c:	180b883a 	mov	r5,r3
   85280:	008cf340 	call	8cf34 <__muldf3>
   85284:	000d883a 	mov	r6,zero
   85288:	01d00734 	movhi	r7,16412
   8528c:	1009883a 	mov	r4,r2
   85290:	180b883a 	mov	r5,r3
   85294:	008bb480 	call	8bb48 <__adddf3>
   85298:	047f3034 	movhi	r17,64704
   8529c:	1021883a 	mov	r16,r2
   852a0:	1c63883a 	add	r17,r3,r17
   852a4:	d9000f17 	ldw	r4,60(sp)
   852a8:	d9401017 	ldw	r5,64(sp)
   852ac:	000d883a 	mov	r6,zero
   852b0:	01d00534 	movhi	r7,16404
   852b4:	008d64c0 	call	8d64c <__subdf3>
   852b8:	800d883a 	mov	r6,r16
   852bc:	880f883a 	mov	r7,r17
   852c0:	1009883a 	mov	r4,r2
   852c4:	180b883a 	mov	r5,r3
   852c8:	102b883a 	mov	r21,r2
   852cc:	1829883a 	mov	r20,r3
   852d0:	008cd640 	call	8cd64 <__gedf2>
   852d4:	00806c16 	blt	zero,r2,85488 <_dtoa_r+0x1304>
   852d8:	89e0003c 	xorhi	r7,r17,32768
   852dc:	800d883a 	mov	r6,r16
   852e0:	a809883a 	mov	r4,r21
   852e4:	a00b883a 	mov	r5,r20
   852e8:	008ce400 	call	8ce40 <__ledf2>
   852ec:	103d7e0e 	bge	r2,zero,848e8 <__alt_data_end+0xfffa2e68>
   852f0:	002b883a 	mov	r21,zero
   852f4:	0023883a 	mov	r17,zero
   852f8:	003efb06 	br	84ee8 <__alt_data_end+0xfffa3468>
   852fc:	d8800717 	ldw	r2,28(sp)
   85300:	003bd006 	br	84244 <__alt_data_end+0xfffa27c4>
   85304:	d9000a17 	ldw	r4,40(sp)
   85308:	d9800d17 	ldw	r6,52(sp)
   8530c:	dd400a15 	stw	r21,40(sp)
   85310:	a905c83a 	sub	r2,r21,r4
   85314:	308d883a 	add	r6,r6,r2
   85318:	d9800d15 	stw	r6,52(sp)
   8531c:	002b883a 	mov	r21,zero
   85320:	003e0606 	br	84b3c <__alt_data_end+0xfffa30bc>
   85324:	9023883a 	mov	r17,r18
   85328:	9829883a 	mov	r20,r19
   8532c:	04000084 	movi	r16,2
   85330:	003c9206 	br	8457c <__alt_data_end+0xfffa2afc>
   85334:	04000044 	movi	r16,1
   85338:	dc000c15 	stw	r16,48(sp)
   8533c:	dc000615 	stw	r16,24(sp)
   85340:	dc002215 	stw	r16,136(sp)
   85344:	e0001115 	stw	zero,68(fp)
   85348:	000b883a 	mov	r5,zero
   8534c:	003c6906 	br	844f4 <__alt_data_end+0xfffa2a74>
   85350:	3021883a 	mov	r16,r6
   85354:	003ffb06 	br	85344 <__alt_data_end+0xfffa38c4>
   85358:	1000021e 	bne	r2,zero,85364 <_dtoa_r+0x11e0>
   8535c:	4200004c 	andi	r8,r8,1
   85360:	403e7d1e 	bne	r8,zero,84d58 <__alt_data_end+0xfffa32d8>
   85364:	01000c04 	movi	r4,48
   85368:	00000106 	br	85370 <_dtoa_r+0x11ec>
   8536c:	102f883a 	mov	r23,r2
   85370:	b8bfffc4 	addi	r2,r23,-1
   85374:	10c00007 	ldb	r3,0(r2)
   85378:	193ffc26 	beq	r3,r4,8536c <__alt_data_end+0xfffa38ec>
   8537c:	003e8706 	br	84d9c <__alt_data_end+0xfffa331c>
   85380:	d8800517 	ldw	r2,20(sp)
   85384:	00a3c83a 	sub	r17,zero,r2
   85388:	8800a426 	beq	r17,zero,8561c <_dtoa_r+0x1498>
   8538c:	888003cc 	andi	r2,r17,15
   85390:	100490fa 	slli	r2,r2,3
   85394:	00c00274 	movhi	r3,9
   85398:	18c3b304 	addi	r3,r3,3788
   8539c:	1885883a 	add	r2,r3,r2
   853a0:	11800017 	ldw	r6,0(r2)
   853a4:	11c00117 	ldw	r7,4(r2)
   853a8:	9009883a 	mov	r4,r18
   853ac:	980b883a 	mov	r5,r19
   853b0:	8823d13a 	srai	r17,r17,4
   853b4:	008cf340 	call	8cf34 <__muldf3>
   853b8:	d8800f15 	stw	r2,60(sp)
   853bc:	d8c01015 	stw	r3,64(sp)
   853c0:	8800e826 	beq	r17,zero,85764 <_dtoa_r+0x15e0>
   853c4:	05000274 	movhi	r20,9
   853c8:	a503a904 	addi	r20,r20,3748
   853cc:	04000084 	movi	r16,2
   853d0:	8980004c 	andi	r6,r17,1
   853d4:	1009883a 	mov	r4,r2
   853d8:	8823d07a 	srai	r17,r17,1
   853dc:	180b883a 	mov	r5,r3
   853e0:	30000426 	beq	r6,zero,853f4 <_dtoa_r+0x1270>
   853e4:	a1800017 	ldw	r6,0(r20)
   853e8:	a1c00117 	ldw	r7,4(r20)
   853ec:	84000044 	addi	r16,r16,1
   853f0:	008cf340 	call	8cf34 <__muldf3>
   853f4:	a5000204 	addi	r20,r20,8
   853f8:	883ff51e 	bne	r17,zero,853d0 <__alt_data_end+0xfffa3950>
   853fc:	d8800f15 	stw	r2,60(sp)
   85400:	d8c01015 	stw	r3,64(sp)
   85404:	003c7606 	br	845e0 <__alt_data_end+0xfffa2b60>
   85408:	00c00c04 	movi	r3,48
   8540c:	10c00005 	stb	r3,0(r2)
   85410:	d8c00517 	ldw	r3,20(sp)
   85414:	bd3fffc3 	ldbu	r20,-1(r23)
   85418:	18c00044 	addi	r3,r3,1
   8541c:	d8c00515 	stw	r3,20(sp)
   85420:	003db906 	br	84b08 <__alt_data_end+0xfffa3088>
   85424:	89400117 	ldw	r5,4(r17)
   85428:	e009883a 	mov	r4,fp
   8542c:	008787c0 	call	8787c <_Balloc>
   85430:	89800417 	ldw	r6,16(r17)
   85434:	89400304 	addi	r5,r17,12
   85438:	11000304 	addi	r4,r2,12
   8543c:	31800084 	addi	r6,r6,2
   85440:	318d883a 	add	r6,r6,r6
   85444:	318d883a 	add	r6,r6,r6
   85448:	1027883a 	mov	r19,r2
   8544c:	00874b00 	call	874b0 <memcpy>
   85450:	01800044 	movi	r6,1
   85454:	980b883a 	mov	r5,r19
   85458:	e009883a 	mov	r4,fp
   8545c:	0087ffc0 	call	87ffc <__lshift>
   85460:	1029883a 	mov	r20,r2
   85464:	003ecc06 	br	84f98 <__alt_data_end+0xfffa3518>
   85468:	00800e44 	movi	r2,57
   8546c:	90809026 	beq	r18,r2,856b0 <_dtoa_r+0x152c>
   85470:	92000044 	addi	r8,r18,1
   85474:	003f1f06 	br	850f4 <__alt_data_end+0xfffa3674>
   85478:	9011883a 	mov	r8,r18
   8547c:	8825883a 	mov	r18,r17
   85480:	a023883a 	mov	r17,r20
   85484:	003e2906 	br	84d2c <__alt_data_end+0xfffa32ac>
   85488:	002b883a 	mov	r21,zero
   8548c:	0023883a 	mov	r17,zero
   85490:	003f5406 	br	851e4 <__alt_data_end+0xfffa3764>
   85494:	61bfffc4 	addi	r6,r12,-1
   85498:	300490fa 	slli	r2,r6,3
   8549c:	00c00274 	movhi	r3,9
   854a0:	18c3b304 	addi	r3,r3,3788
   854a4:	1885883a 	add	r2,r3,r2
   854a8:	11000017 	ldw	r4,0(r2)
   854ac:	11400117 	ldw	r5,4(r2)
   854b0:	d8800717 	ldw	r2,28(sp)
   854b4:	880f883a 	mov	r7,r17
   854b8:	d9801215 	stw	r6,72(sp)
   854bc:	800d883a 	mov	r6,r16
   854c0:	db001615 	stw	r12,88(sp)
   854c4:	15c00044 	addi	r23,r2,1
   854c8:	008cf340 	call	8cf34 <__muldf3>
   854cc:	d9401017 	ldw	r5,64(sp)
   854d0:	d9000f17 	ldw	r4,60(sp)
   854d4:	d8c01515 	stw	r3,84(sp)
   854d8:	d8801415 	stw	r2,80(sp)
   854dc:	008df480 	call	8df48 <__fixdfsi>
   854e0:	1009883a 	mov	r4,r2
   854e4:	1021883a 	mov	r16,r2
   854e8:	008dfc80 	call	8dfc8 <__floatsidf>
   854ec:	d9000f17 	ldw	r4,60(sp)
   854f0:	d9401017 	ldw	r5,64(sp)
   854f4:	100d883a 	mov	r6,r2
   854f8:	180f883a 	mov	r7,r3
   854fc:	008d64c0 	call	8d64c <__subdf3>
   85500:	1829883a 	mov	r20,r3
   85504:	d8c00717 	ldw	r3,28(sp)
   85508:	84000c04 	addi	r16,r16,48
   8550c:	1023883a 	mov	r17,r2
   85510:	1c000005 	stb	r16,0(r3)
   85514:	db001617 	ldw	r12,88(sp)
   85518:	00800044 	movi	r2,1
   8551c:	60802226 	beq	r12,r2,855a8 <_dtoa_r+0x1424>
   85520:	d9c00717 	ldw	r7,28(sp)
   85524:	8805883a 	mov	r2,r17
   85528:	b82b883a 	mov	r21,r23
   8552c:	3b19883a 	add	r12,r7,r12
   85530:	6023883a 	mov	r17,r12
   85534:	a007883a 	mov	r3,r20
   85538:	dc800f15 	stw	r18,60(sp)
   8553c:	000d883a 	mov	r6,zero
   85540:	01d00934 	movhi	r7,16420
   85544:	1009883a 	mov	r4,r2
   85548:	180b883a 	mov	r5,r3
   8554c:	008cf340 	call	8cf34 <__muldf3>
   85550:	180b883a 	mov	r5,r3
   85554:	1009883a 	mov	r4,r2
   85558:	1829883a 	mov	r20,r3
   8555c:	1025883a 	mov	r18,r2
   85560:	008df480 	call	8df48 <__fixdfsi>
   85564:	1009883a 	mov	r4,r2
   85568:	1021883a 	mov	r16,r2
   8556c:	008dfc80 	call	8dfc8 <__floatsidf>
   85570:	100d883a 	mov	r6,r2
   85574:	180f883a 	mov	r7,r3
   85578:	9009883a 	mov	r4,r18
   8557c:	a00b883a 	mov	r5,r20
   85580:	84000c04 	addi	r16,r16,48
   85584:	008d64c0 	call	8d64c <__subdf3>
   85588:	ad400044 	addi	r21,r21,1
   8558c:	ac3fffc5 	stb	r16,-1(r21)
   85590:	ac7fea1e 	bne	r21,r17,8553c <__alt_data_end+0xfffa3abc>
   85594:	1023883a 	mov	r17,r2
   85598:	d8801217 	ldw	r2,72(sp)
   8559c:	dc800f17 	ldw	r18,60(sp)
   855a0:	1829883a 	mov	r20,r3
   855a4:	b8af883a 	add	r23,r23,r2
   855a8:	d9001417 	ldw	r4,80(sp)
   855ac:	d9401517 	ldw	r5,84(sp)
   855b0:	000d883a 	mov	r6,zero
   855b4:	01cff834 	movhi	r7,16352
   855b8:	008bb480 	call	8bb48 <__adddf3>
   855bc:	880d883a 	mov	r6,r17
   855c0:	a00f883a 	mov	r7,r20
   855c4:	1009883a 	mov	r4,r2
   855c8:	180b883a 	mov	r5,r3
   855cc:	008ce400 	call	8ce40 <__ledf2>
   855d0:	10003e0e 	bge	r2,zero,856cc <_dtoa_r+0x1548>
   855d4:	d9001317 	ldw	r4,76(sp)
   855d8:	bd3fffc3 	ldbu	r20,-1(r23)
   855dc:	d9000515 	stw	r4,20(sp)
   855e0:	003d3b06 	br	84ad0 <__alt_data_end+0xfffa3050>
   855e4:	0027883a 	mov	r19,zero
   855e8:	003f1b06 	br	85258 <__alt_data_end+0xfffa37d8>
   855ec:	d8800817 	ldw	r2,32(sp)
   855f0:	11e9c83a 	sub	r20,r2,r7
   855f4:	0005883a 	mov	r2,zero
   855f8:	003d5406 	br	84b4c <__alt_data_end+0xfffa30cc>
   855fc:	00800044 	movi	r2,1
   85600:	003dc706 	br	84d20 <__alt_data_end+0xfffa32a0>
   85604:	d8c00217 	ldw	r3,8(sp)
   85608:	00800d84 	movi	r2,54
   8560c:	dd400a17 	ldw	r21,40(sp)
   85610:	10c5c83a 	sub	r2,r2,r3
   85614:	dd000817 	ldw	r20,32(sp)
   85618:	003d4c06 	br	84b4c <__alt_data_end+0xfffa30cc>
   8561c:	dc800f15 	stw	r18,60(sp)
   85620:	dcc01015 	stw	r19,64(sp)
   85624:	04000084 	movi	r16,2
   85628:	003bed06 	br	845e0 <__alt_data_end+0xfffa2b60>
   8562c:	d9000617 	ldw	r4,24(sp)
   85630:	203f0d26 	beq	r4,zero,85268 <__alt_data_end+0xfffa37e8>
   85634:	d9800c17 	ldw	r6,48(sp)
   85638:	01bcab0e 	bge	zero,r6,848e8 <__alt_data_end+0xfffa2e68>
   8563c:	d9401017 	ldw	r5,64(sp)
   85640:	d9000f17 	ldw	r4,60(sp)
   85644:	000d883a 	mov	r6,zero
   85648:	01d00934 	movhi	r7,16420
   8564c:	008cf340 	call	8cf34 <__muldf3>
   85650:	81000044 	addi	r4,r16,1
   85654:	d8800f15 	stw	r2,60(sp)
   85658:	d8c01015 	stw	r3,64(sp)
   8565c:	008dfc80 	call	8dfc8 <__floatsidf>
   85660:	d9800f17 	ldw	r6,60(sp)
   85664:	d9c01017 	ldw	r7,64(sp)
   85668:	1009883a 	mov	r4,r2
   8566c:	180b883a 	mov	r5,r3
   85670:	008cf340 	call	8cf34 <__muldf3>
   85674:	01d00734 	movhi	r7,16412
   85678:	000d883a 	mov	r6,zero
   8567c:	1009883a 	mov	r4,r2
   85680:	180b883a 	mov	r5,r3
   85684:	008bb480 	call	8bb48 <__adddf3>
   85688:	d9c00517 	ldw	r7,20(sp)
   8568c:	047f3034 	movhi	r17,64704
   85690:	1021883a 	mov	r16,r2
   85694:	39ffffc4 	addi	r7,r7,-1
   85698:	d9c01315 	stw	r7,76(sp)
   8569c:	1c63883a 	add	r17,r3,r17
   856a0:	db000c17 	ldw	r12,48(sp)
   856a4:	003bea06 	br	84650 <__alt_data_end+0xfffa2bd0>
   856a8:	dc000915 	stw	r16,36(sp)
   856ac:	003e0e06 	br	84ee8 <__alt_data_end+0xfffa3468>
   856b0:	01000e44 	movi	r4,57
   856b4:	8825883a 	mov	r18,r17
   856b8:	9dc00044 	addi	r23,r19,1
   856bc:	99000005 	stb	r4,0(r19)
   856c0:	a023883a 	mov	r17,r20
   856c4:	dc000915 	stw	r16,36(sp)
   856c8:	003da406 	br	84d5c <__alt_data_end+0xfffa32dc>
   856cc:	d9801417 	ldw	r6,80(sp)
   856d0:	d9c01517 	ldw	r7,84(sp)
   856d4:	0009883a 	mov	r4,zero
   856d8:	014ff834 	movhi	r5,16352
   856dc:	008d64c0 	call	8d64c <__subdf3>
   856e0:	880d883a 	mov	r6,r17
   856e4:	a00f883a 	mov	r7,r20
   856e8:	1009883a 	mov	r4,r2
   856ec:	180b883a 	mov	r5,r3
   856f0:	008cd640 	call	8cd64 <__gedf2>
   856f4:	00bc7c0e 	bge	zero,r2,848e8 <__alt_data_end+0xfffa2e68>
   856f8:	01000c04 	movi	r4,48
   856fc:	00000106 	br	85704 <_dtoa_r+0x1580>
   85700:	102f883a 	mov	r23,r2
   85704:	b8bfffc4 	addi	r2,r23,-1
   85708:	10c00007 	ldb	r3,0(r2)
   8570c:	193ffc26 	beq	r3,r4,85700 <__alt_data_end+0xfffa3c80>
   85710:	d9801317 	ldw	r6,76(sp)
   85714:	d9800515 	stw	r6,20(sp)
   85718:	003c4406 	br	8482c <__alt_data_end+0xfffa2dac>
   8571c:	d9801317 	ldw	r6,76(sp)
   85720:	d9800515 	stw	r6,20(sp)
   85724:	003cea06 	br	84ad0 <__alt_data_end+0xfffa3050>
   85728:	dd800f17 	ldw	r22,60(sp)
   8572c:	dcc01017 	ldw	r19,64(sp)
   85730:	dc801217 	ldw	r18,72(sp)
   85734:	003c6c06 	br	848e8 <__alt_data_end+0xfffa2e68>
   85738:	903e031e 	bne	r18,zero,84f48 <__alt_data_end+0xfffa34c8>
   8573c:	003ebb06 	br	8522c <__alt_data_end+0xfffa37ac>
   85740:	103e6c1e 	bne	r2,zero,850f4 <__alt_data_end+0xfffa3674>
   85744:	4080004c 	andi	r2,r8,1
   85748:	103e6a26 	beq	r2,zero,850f4 <__alt_data_end+0xfffa3674>
   8574c:	003e6606 	br	850e8 <__alt_data_end+0xfffa3668>
   85750:	d8c00317 	ldw	r3,12(sp)
   85754:	00800084 	movi	r2,2
   85758:	10c02916 	blt	r2,r3,85800 <_dtoa_r+0x167c>
   8575c:	d9000c17 	ldw	r4,48(sp)
   85760:	003e8806 	br	85184 <__alt_data_end+0xfffa3704>
   85764:	04000084 	movi	r16,2
   85768:	003b9d06 	br	845e0 <__alt_data_end+0xfffa2b60>
   8576c:	d9001317 	ldw	r4,76(sp)
   85770:	d9000515 	stw	r4,20(sp)
   85774:	003cd606 	br	84ad0 <__alt_data_end+0xfffa3050>
   85778:	d8801317 	ldw	r2,76(sp)
   8577c:	d8800515 	stw	r2,20(sp)
   85780:	003c2a06 	br	8482c <__alt_data_end+0xfffa2dac>
   85784:	d9800317 	ldw	r6,12(sp)
   85788:	00800084 	movi	r2,2
   8578c:	11801516 	blt	r2,r6,857e4 <_dtoa_r+0x1660>
   85790:	d9c00c17 	ldw	r7,48(sp)
   85794:	d9c00615 	stw	r7,24(sp)
   85798:	003df706 	br	84f78 <__alt_data_end+0xfffa34f8>
   8579c:	193d3926 	beq	r3,r4,84c84 <__alt_data_end+0xfffa3204>
   857a0:	00c00f04 	movi	r3,60
   857a4:	1885c83a 	sub	r2,r3,r2
   857a8:	003ddf06 	br	84f28 <__alt_data_end+0xfffa34a8>
   857ac:	e009883a 	mov	r4,fp
   857b0:	e0001115 	stw	zero,68(fp)
   857b4:	000b883a 	mov	r5,zero
   857b8:	008787c0 	call	8787c <_Balloc>
   857bc:	d8800715 	stw	r2,28(sp)
   857c0:	d8c00717 	ldw	r3,28(sp)
   857c4:	00bfffc4 	movi	r2,-1
   857c8:	01000044 	movi	r4,1
   857cc:	d8800c15 	stw	r2,48(sp)
   857d0:	e0c01015 	stw	r3,64(fp)
   857d4:	d9000b15 	stw	r4,44(sp)
   857d8:	d8800615 	stw	r2,24(sp)
   857dc:	d8002215 	stw	zero,136(sp)
   857e0:	003c4106 	br	848e8 <__alt_data_end+0xfffa2e68>
   857e4:	d8c00c17 	ldw	r3,48(sp)
   857e8:	d8c00615 	stw	r3,24(sp)
   857ec:	003e7006 	br	851b0 <__alt_data_end+0xfffa3730>
   857f0:	04400044 	movi	r17,1
   857f4:	003b2006 	br	84478 <__alt_data_end+0xfffa29f8>
   857f8:	000b883a 	mov	r5,zero
   857fc:	003b3d06 	br	844f4 <__alt_data_end+0xfffa2a74>
   85800:	d8800c17 	ldw	r2,48(sp)
   85804:	d8800615 	stw	r2,24(sp)
   85808:	003e6906 	br	851b0 <__alt_data_end+0xfffa3730>

0008580c <__sflush_r>:
   8580c:	2880030b 	ldhu	r2,12(r5)
   85810:	defffb04 	addi	sp,sp,-20
   85814:	dcc00315 	stw	r19,12(sp)
   85818:	dc400115 	stw	r17,4(sp)
   8581c:	dfc00415 	stw	ra,16(sp)
   85820:	dc800215 	stw	r18,8(sp)
   85824:	dc000015 	stw	r16,0(sp)
   85828:	10c0020c 	andi	r3,r2,8
   8582c:	2823883a 	mov	r17,r5
   85830:	2027883a 	mov	r19,r4
   85834:	1800311e 	bne	r3,zero,858fc <__sflush_r+0xf0>
   85838:	28c00117 	ldw	r3,4(r5)
   8583c:	10820014 	ori	r2,r2,2048
   85840:	2880030d 	sth	r2,12(r5)
   85844:	00c04b0e 	bge	zero,r3,85974 <__sflush_r+0x168>
   85848:	8a000a17 	ldw	r8,40(r17)
   8584c:	40002326 	beq	r8,zero,858dc <__sflush_r+0xd0>
   85850:	9c000017 	ldw	r16,0(r19)
   85854:	10c4000c 	andi	r3,r2,4096
   85858:	98000015 	stw	zero,0(r19)
   8585c:	18004826 	beq	r3,zero,85980 <__sflush_r+0x174>
   85860:	89801417 	ldw	r6,80(r17)
   85864:	10c0010c 	andi	r3,r2,4
   85868:	18000626 	beq	r3,zero,85884 <__sflush_r+0x78>
   8586c:	88c00117 	ldw	r3,4(r17)
   85870:	88800c17 	ldw	r2,48(r17)
   85874:	30cdc83a 	sub	r6,r6,r3
   85878:	10000226 	beq	r2,zero,85884 <__sflush_r+0x78>
   8587c:	88800f17 	ldw	r2,60(r17)
   85880:	308dc83a 	sub	r6,r6,r2
   85884:	89400717 	ldw	r5,28(r17)
   85888:	000f883a 	mov	r7,zero
   8588c:	9809883a 	mov	r4,r19
   85890:	403ee83a 	callr	r8
   85894:	00ffffc4 	movi	r3,-1
   85898:	10c04426 	beq	r2,r3,859ac <__sflush_r+0x1a0>
   8589c:	88c0030b 	ldhu	r3,12(r17)
   858a0:	89000417 	ldw	r4,16(r17)
   858a4:	88000115 	stw	zero,4(r17)
   858a8:	197dffcc 	andi	r5,r3,63487
   858ac:	8940030d 	sth	r5,12(r17)
   858b0:	89000015 	stw	r4,0(r17)
   858b4:	18c4000c 	andi	r3,r3,4096
   858b8:	18002c1e 	bne	r3,zero,8596c <__sflush_r+0x160>
   858bc:	89400c17 	ldw	r5,48(r17)
   858c0:	9c000015 	stw	r16,0(r19)
   858c4:	28000526 	beq	r5,zero,858dc <__sflush_r+0xd0>
   858c8:	88801004 	addi	r2,r17,64
   858cc:	28800226 	beq	r5,r2,858d8 <__sflush_r+0xcc>
   858d0:	9809883a 	mov	r4,r19
   858d4:	0085f780 	call	85f78 <_free_r>
   858d8:	88000c15 	stw	zero,48(r17)
   858dc:	0005883a 	mov	r2,zero
   858e0:	dfc00417 	ldw	ra,16(sp)
   858e4:	dcc00317 	ldw	r19,12(sp)
   858e8:	dc800217 	ldw	r18,8(sp)
   858ec:	dc400117 	ldw	r17,4(sp)
   858f0:	dc000017 	ldw	r16,0(sp)
   858f4:	dec00504 	addi	sp,sp,20
   858f8:	f800283a 	ret
   858fc:	2c800417 	ldw	r18,16(r5)
   85900:	903ff626 	beq	r18,zero,858dc <__alt_data_end+0xfffa3e5c>
   85904:	2c000017 	ldw	r16,0(r5)
   85908:	108000cc 	andi	r2,r2,3
   8590c:	2c800015 	stw	r18,0(r5)
   85910:	84a1c83a 	sub	r16,r16,r18
   85914:	1000131e 	bne	r2,zero,85964 <__sflush_r+0x158>
   85918:	28800517 	ldw	r2,20(r5)
   8591c:	88800215 	stw	r2,8(r17)
   85920:	04000316 	blt	zero,r16,85930 <__sflush_r+0x124>
   85924:	003fed06 	br	858dc <__alt_data_end+0xfffa3e5c>
   85928:	90a5883a 	add	r18,r18,r2
   8592c:	043feb0e 	bge	zero,r16,858dc <__alt_data_end+0xfffa3e5c>
   85930:	88800917 	ldw	r2,36(r17)
   85934:	89400717 	ldw	r5,28(r17)
   85938:	800f883a 	mov	r7,r16
   8593c:	900d883a 	mov	r6,r18
   85940:	9809883a 	mov	r4,r19
   85944:	103ee83a 	callr	r2
   85948:	80a1c83a 	sub	r16,r16,r2
   8594c:	00bff616 	blt	zero,r2,85928 <__alt_data_end+0xfffa3ea8>
   85950:	88c0030b 	ldhu	r3,12(r17)
   85954:	00bfffc4 	movi	r2,-1
   85958:	18c01014 	ori	r3,r3,64
   8595c:	88c0030d 	sth	r3,12(r17)
   85960:	003fdf06 	br	858e0 <__alt_data_end+0xfffa3e60>
   85964:	0005883a 	mov	r2,zero
   85968:	003fec06 	br	8591c <__alt_data_end+0xfffa3e9c>
   8596c:	88801415 	stw	r2,80(r17)
   85970:	003fd206 	br	858bc <__alt_data_end+0xfffa3e3c>
   85974:	28c00f17 	ldw	r3,60(r5)
   85978:	00ffb316 	blt	zero,r3,85848 <__alt_data_end+0xfffa3dc8>
   8597c:	003fd706 	br	858dc <__alt_data_end+0xfffa3e5c>
   85980:	89400717 	ldw	r5,28(r17)
   85984:	000d883a 	mov	r6,zero
   85988:	01c00044 	movi	r7,1
   8598c:	9809883a 	mov	r4,r19
   85990:	403ee83a 	callr	r8
   85994:	100d883a 	mov	r6,r2
   85998:	00bfffc4 	movi	r2,-1
   8599c:	30801426 	beq	r6,r2,859f0 <__sflush_r+0x1e4>
   859a0:	8880030b 	ldhu	r2,12(r17)
   859a4:	8a000a17 	ldw	r8,40(r17)
   859a8:	003fae06 	br	85864 <__alt_data_end+0xfffa3de4>
   859ac:	98c00017 	ldw	r3,0(r19)
   859b0:	183fba26 	beq	r3,zero,8589c <__alt_data_end+0xfffa3e1c>
   859b4:	01000744 	movi	r4,29
   859b8:	19000626 	beq	r3,r4,859d4 <__sflush_r+0x1c8>
   859bc:	01000584 	movi	r4,22
   859c0:	19000426 	beq	r3,r4,859d4 <__sflush_r+0x1c8>
   859c4:	88c0030b 	ldhu	r3,12(r17)
   859c8:	18c01014 	ori	r3,r3,64
   859cc:	88c0030d 	sth	r3,12(r17)
   859d0:	003fc306 	br	858e0 <__alt_data_end+0xfffa3e60>
   859d4:	8880030b 	ldhu	r2,12(r17)
   859d8:	88c00417 	ldw	r3,16(r17)
   859dc:	88000115 	stw	zero,4(r17)
   859e0:	10bdffcc 	andi	r2,r2,63487
   859e4:	8880030d 	sth	r2,12(r17)
   859e8:	88c00015 	stw	r3,0(r17)
   859ec:	003fb306 	br	858bc <__alt_data_end+0xfffa3e3c>
   859f0:	98800017 	ldw	r2,0(r19)
   859f4:	103fea26 	beq	r2,zero,859a0 <__alt_data_end+0xfffa3f20>
   859f8:	00c00744 	movi	r3,29
   859fc:	10c00226 	beq	r2,r3,85a08 <__sflush_r+0x1fc>
   85a00:	00c00584 	movi	r3,22
   85a04:	10c0031e 	bne	r2,r3,85a14 <__sflush_r+0x208>
   85a08:	9c000015 	stw	r16,0(r19)
   85a0c:	0005883a 	mov	r2,zero
   85a10:	003fb306 	br	858e0 <__alt_data_end+0xfffa3e60>
   85a14:	88c0030b 	ldhu	r3,12(r17)
   85a18:	3005883a 	mov	r2,r6
   85a1c:	18c01014 	ori	r3,r3,64
   85a20:	88c0030d 	sth	r3,12(r17)
   85a24:	003fae06 	br	858e0 <__alt_data_end+0xfffa3e60>

00085a28 <_fflush_r>:
   85a28:	defffd04 	addi	sp,sp,-12
   85a2c:	dc000115 	stw	r16,4(sp)
   85a30:	dfc00215 	stw	ra,8(sp)
   85a34:	2021883a 	mov	r16,r4
   85a38:	20000226 	beq	r4,zero,85a44 <_fflush_r+0x1c>
   85a3c:	20800e17 	ldw	r2,56(r4)
   85a40:	10000c26 	beq	r2,zero,85a74 <_fflush_r+0x4c>
   85a44:	2880030f 	ldh	r2,12(r5)
   85a48:	1000051e 	bne	r2,zero,85a60 <_fflush_r+0x38>
   85a4c:	0005883a 	mov	r2,zero
   85a50:	dfc00217 	ldw	ra,8(sp)
   85a54:	dc000117 	ldw	r16,4(sp)
   85a58:	dec00304 	addi	sp,sp,12
   85a5c:	f800283a 	ret
   85a60:	8009883a 	mov	r4,r16
   85a64:	dfc00217 	ldw	ra,8(sp)
   85a68:	dc000117 	ldw	r16,4(sp)
   85a6c:	dec00304 	addi	sp,sp,12
   85a70:	008580c1 	jmpi	8580c <__sflush_r>
   85a74:	d9400015 	stw	r5,0(sp)
   85a78:	0085e040 	call	85e04 <__sinit>
   85a7c:	d9400017 	ldw	r5,0(sp)
   85a80:	003ff006 	br	85a44 <__alt_data_end+0xfffa3fc4>

00085a84 <fflush>:
   85a84:	20000526 	beq	r4,zero,85a9c <fflush+0x18>
   85a88:	00800274 	movhi	r2,9
   85a8c:	108b6b04 	addi	r2,r2,11692
   85a90:	200b883a 	mov	r5,r4
   85a94:	11000017 	ldw	r4,0(r2)
   85a98:	0085a281 	jmpi	85a28 <_fflush_r>
   85a9c:	00800274 	movhi	r2,9
   85aa0:	108b6a04 	addi	r2,r2,11688
   85aa4:	11000017 	ldw	r4,0(r2)
   85aa8:	01400234 	movhi	r5,8
   85aac:	29568a04 	addi	r5,r5,23080
   85ab0:	00868081 	jmpi	86808 <_fwalk_reent>

00085ab4 <__fp_unlock>:
   85ab4:	0005883a 	mov	r2,zero
   85ab8:	f800283a 	ret

00085abc <_cleanup_r>:
   85abc:	01400274 	movhi	r5,9
   85ac0:	296a1f04 	addi	r5,r5,-22404
   85ac4:	00868081 	jmpi	86808 <_fwalk_reent>

00085ac8 <__sinit.part.1>:
   85ac8:	defff704 	addi	sp,sp,-36
   85acc:	00c00234 	movhi	r3,8
   85ad0:	dfc00815 	stw	ra,32(sp)
   85ad4:	ddc00715 	stw	r23,28(sp)
   85ad8:	dd800615 	stw	r22,24(sp)
   85adc:	dd400515 	stw	r21,20(sp)
   85ae0:	dd000415 	stw	r20,16(sp)
   85ae4:	dcc00315 	stw	r19,12(sp)
   85ae8:	dc800215 	stw	r18,8(sp)
   85aec:	dc400115 	stw	r17,4(sp)
   85af0:	dc000015 	stw	r16,0(sp)
   85af4:	18d6af04 	addi	r3,r3,23228
   85af8:	24000117 	ldw	r16,4(r4)
   85afc:	20c00f15 	stw	r3,60(r4)
   85b00:	2080bb04 	addi	r2,r4,748
   85b04:	00c000c4 	movi	r3,3
   85b08:	20c0b915 	stw	r3,740(r4)
   85b0c:	2080ba15 	stw	r2,744(r4)
   85b10:	2000b815 	stw	zero,736(r4)
   85b14:	05c00204 	movi	r23,8
   85b18:	00800104 	movi	r2,4
   85b1c:	2025883a 	mov	r18,r4
   85b20:	b80d883a 	mov	r6,r23
   85b24:	81001704 	addi	r4,r16,92
   85b28:	000b883a 	mov	r5,zero
   85b2c:	80000015 	stw	zero,0(r16)
   85b30:	80000115 	stw	zero,4(r16)
   85b34:	80000215 	stw	zero,8(r16)
   85b38:	8080030d 	sth	r2,12(r16)
   85b3c:	80001915 	stw	zero,100(r16)
   85b40:	8000038d 	sth	zero,14(r16)
   85b44:	80000415 	stw	zero,16(r16)
   85b48:	80000515 	stw	zero,20(r16)
   85b4c:	80000615 	stw	zero,24(r16)
   85b50:	00877540 	call	87754 <memset>
   85b54:	05800274 	movhi	r22,9
   85b58:	94400217 	ldw	r17,8(r18)
   85b5c:	05400274 	movhi	r21,9
   85b60:	05000274 	movhi	r20,9
   85b64:	04c00274 	movhi	r19,9
   85b68:	b5a3a904 	addi	r22,r22,-29020
   85b6c:	ad63c004 	addi	r21,r21,-28928
   85b70:	a523df04 	addi	r20,r20,-28804
   85b74:	9ce3f604 	addi	r19,r19,-28712
   85b78:	85800815 	stw	r22,32(r16)
   85b7c:	85400915 	stw	r21,36(r16)
   85b80:	85000a15 	stw	r20,40(r16)
   85b84:	84c00b15 	stw	r19,44(r16)
   85b88:	84000715 	stw	r16,28(r16)
   85b8c:	00800284 	movi	r2,10
   85b90:	8880030d 	sth	r2,12(r17)
   85b94:	00800044 	movi	r2,1
   85b98:	b80d883a 	mov	r6,r23
   85b9c:	89001704 	addi	r4,r17,92
   85ba0:	000b883a 	mov	r5,zero
   85ba4:	88000015 	stw	zero,0(r17)
   85ba8:	88000115 	stw	zero,4(r17)
   85bac:	88000215 	stw	zero,8(r17)
   85bb0:	88001915 	stw	zero,100(r17)
   85bb4:	8880038d 	sth	r2,14(r17)
   85bb8:	88000415 	stw	zero,16(r17)
   85bbc:	88000515 	stw	zero,20(r17)
   85bc0:	88000615 	stw	zero,24(r17)
   85bc4:	00877540 	call	87754 <memset>
   85bc8:	94000317 	ldw	r16,12(r18)
   85bcc:	00800484 	movi	r2,18
   85bd0:	8c400715 	stw	r17,28(r17)
   85bd4:	8d800815 	stw	r22,32(r17)
   85bd8:	8d400915 	stw	r21,36(r17)
   85bdc:	8d000a15 	stw	r20,40(r17)
   85be0:	8cc00b15 	stw	r19,44(r17)
   85be4:	8080030d 	sth	r2,12(r16)
   85be8:	00800084 	movi	r2,2
   85bec:	80000015 	stw	zero,0(r16)
   85bf0:	80000115 	stw	zero,4(r16)
   85bf4:	80000215 	stw	zero,8(r16)
   85bf8:	80001915 	stw	zero,100(r16)
   85bfc:	8080038d 	sth	r2,14(r16)
   85c00:	80000415 	stw	zero,16(r16)
   85c04:	80000515 	stw	zero,20(r16)
   85c08:	80000615 	stw	zero,24(r16)
   85c0c:	b80d883a 	mov	r6,r23
   85c10:	000b883a 	mov	r5,zero
   85c14:	81001704 	addi	r4,r16,92
   85c18:	00877540 	call	87754 <memset>
   85c1c:	00800044 	movi	r2,1
   85c20:	84000715 	stw	r16,28(r16)
   85c24:	85800815 	stw	r22,32(r16)
   85c28:	85400915 	stw	r21,36(r16)
   85c2c:	85000a15 	stw	r20,40(r16)
   85c30:	84c00b15 	stw	r19,44(r16)
   85c34:	90800e15 	stw	r2,56(r18)
   85c38:	dfc00817 	ldw	ra,32(sp)
   85c3c:	ddc00717 	ldw	r23,28(sp)
   85c40:	dd800617 	ldw	r22,24(sp)
   85c44:	dd400517 	ldw	r21,20(sp)
   85c48:	dd000417 	ldw	r20,16(sp)
   85c4c:	dcc00317 	ldw	r19,12(sp)
   85c50:	dc800217 	ldw	r18,8(sp)
   85c54:	dc400117 	ldw	r17,4(sp)
   85c58:	dc000017 	ldw	r16,0(sp)
   85c5c:	dec00904 	addi	sp,sp,36
   85c60:	f800283a 	ret

00085c64 <__fp_lock>:
   85c64:	0005883a 	mov	r2,zero
   85c68:	f800283a 	ret

00085c6c <__sfmoreglue>:
   85c6c:	defffc04 	addi	sp,sp,-16
   85c70:	dc400115 	stw	r17,4(sp)
   85c74:	2c7fffc4 	addi	r17,r5,-1
   85c78:	8c401a24 	muli	r17,r17,104
   85c7c:	dc800215 	stw	r18,8(sp)
   85c80:	2825883a 	mov	r18,r5
   85c84:	89401d04 	addi	r5,r17,116
   85c88:	dc000015 	stw	r16,0(sp)
   85c8c:	dfc00315 	stw	ra,12(sp)
   85c90:	0086bc00 	call	86bc0 <_malloc_r>
   85c94:	1021883a 	mov	r16,r2
   85c98:	10000726 	beq	r2,zero,85cb8 <__sfmoreglue+0x4c>
   85c9c:	11000304 	addi	r4,r2,12
   85ca0:	10000015 	stw	zero,0(r2)
   85ca4:	14800115 	stw	r18,4(r2)
   85ca8:	11000215 	stw	r4,8(r2)
   85cac:	89801a04 	addi	r6,r17,104
   85cb0:	000b883a 	mov	r5,zero
   85cb4:	00877540 	call	87754 <memset>
   85cb8:	8005883a 	mov	r2,r16
   85cbc:	dfc00317 	ldw	ra,12(sp)
   85cc0:	dc800217 	ldw	r18,8(sp)
   85cc4:	dc400117 	ldw	r17,4(sp)
   85cc8:	dc000017 	ldw	r16,0(sp)
   85ccc:	dec00404 	addi	sp,sp,16
   85cd0:	f800283a 	ret

00085cd4 <__sfp>:
   85cd4:	defffb04 	addi	sp,sp,-20
   85cd8:	dc000015 	stw	r16,0(sp)
   85cdc:	04000274 	movhi	r16,9
   85ce0:	840b6a04 	addi	r16,r16,11688
   85ce4:	dcc00315 	stw	r19,12(sp)
   85ce8:	2027883a 	mov	r19,r4
   85cec:	81000017 	ldw	r4,0(r16)
   85cf0:	dfc00415 	stw	ra,16(sp)
   85cf4:	dc800215 	stw	r18,8(sp)
   85cf8:	20800e17 	ldw	r2,56(r4)
   85cfc:	dc400115 	stw	r17,4(sp)
   85d00:	1000021e 	bne	r2,zero,85d0c <__sfp+0x38>
   85d04:	0085ac80 	call	85ac8 <__sinit.part.1>
   85d08:	81000017 	ldw	r4,0(r16)
   85d0c:	2480b804 	addi	r18,r4,736
   85d10:	047fffc4 	movi	r17,-1
   85d14:	91000117 	ldw	r4,4(r18)
   85d18:	94000217 	ldw	r16,8(r18)
   85d1c:	213fffc4 	addi	r4,r4,-1
   85d20:	20000a16 	blt	r4,zero,85d4c <__sfp+0x78>
   85d24:	8080030f 	ldh	r2,12(r16)
   85d28:	10000c26 	beq	r2,zero,85d5c <__sfp+0x88>
   85d2c:	80c01d04 	addi	r3,r16,116
   85d30:	00000206 	br	85d3c <__sfp+0x68>
   85d34:	18bfe60f 	ldh	r2,-104(r3)
   85d38:	10000826 	beq	r2,zero,85d5c <__sfp+0x88>
   85d3c:	213fffc4 	addi	r4,r4,-1
   85d40:	1c3ffd04 	addi	r16,r3,-12
   85d44:	18c01a04 	addi	r3,r3,104
   85d48:	247ffa1e 	bne	r4,r17,85d34 <__alt_data_end+0xfffa42b4>
   85d4c:	90800017 	ldw	r2,0(r18)
   85d50:	10001d26 	beq	r2,zero,85dc8 <__sfp+0xf4>
   85d54:	1025883a 	mov	r18,r2
   85d58:	003fee06 	br	85d14 <__alt_data_end+0xfffa4294>
   85d5c:	00bfffc4 	movi	r2,-1
   85d60:	8080038d 	sth	r2,14(r16)
   85d64:	00800044 	movi	r2,1
   85d68:	8080030d 	sth	r2,12(r16)
   85d6c:	80001915 	stw	zero,100(r16)
   85d70:	80000015 	stw	zero,0(r16)
   85d74:	80000215 	stw	zero,8(r16)
   85d78:	80000115 	stw	zero,4(r16)
   85d7c:	80000415 	stw	zero,16(r16)
   85d80:	80000515 	stw	zero,20(r16)
   85d84:	80000615 	stw	zero,24(r16)
   85d88:	01800204 	movi	r6,8
   85d8c:	000b883a 	mov	r5,zero
   85d90:	81001704 	addi	r4,r16,92
   85d94:	00877540 	call	87754 <memset>
   85d98:	8005883a 	mov	r2,r16
   85d9c:	80000c15 	stw	zero,48(r16)
   85da0:	80000d15 	stw	zero,52(r16)
   85da4:	80001115 	stw	zero,68(r16)
   85da8:	80001215 	stw	zero,72(r16)
   85dac:	dfc00417 	ldw	ra,16(sp)
   85db0:	dcc00317 	ldw	r19,12(sp)
   85db4:	dc800217 	ldw	r18,8(sp)
   85db8:	dc400117 	ldw	r17,4(sp)
   85dbc:	dc000017 	ldw	r16,0(sp)
   85dc0:	dec00504 	addi	sp,sp,20
   85dc4:	f800283a 	ret
   85dc8:	01400104 	movi	r5,4
   85dcc:	9809883a 	mov	r4,r19
   85dd0:	0085c6c0 	call	85c6c <__sfmoreglue>
   85dd4:	90800015 	stw	r2,0(r18)
   85dd8:	103fde1e 	bne	r2,zero,85d54 <__alt_data_end+0xfffa42d4>
   85ddc:	00800304 	movi	r2,12
   85de0:	98800015 	stw	r2,0(r19)
   85de4:	0005883a 	mov	r2,zero
   85de8:	003ff006 	br	85dac <__alt_data_end+0xfffa432c>

00085dec <_cleanup>:
   85dec:	00800274 	movhi	r2,9
   85df0:	108b6a04 	addi	r2,r2,11688
   85df4:	11000017 	ldw	r4,0(r2)
   85df8:	01400274 	movhi	r5,9
   85dfc:	296a1f04 	addi	r5,r5,-22404
   85e00:	00868081 	jmpi	86808 <_fwalk_reent>

00085e04 <__sinit>:
   85e04:	20800e17 	ldw	r2,56(r4)
   85e08:	10000126 	beq	r2,zero,85e10 <__sinit+0xc>
   85e0c:	f800283a 	ret
   85e10:	0085ac81 	jmpi	85ac8 <__sinit.part.1>

00085e14 <__sfp_lock_acquire>:
   85e14:	f800283a 	ret

00085e18 <__sfp_lock_release>:
   85e18:	f800283a 	ret

00085e1c <__sinit_lock_acquire>:
   85e1c:	f800283a 	ret

00085e20 <__sinit_lock_release>:
   85e20:	f800283a 	ret

00085e24 <__fp_lock_all>:
   85e24:	00800274 	movhi	r2,9
   85e28:	108b6b04 	addi	r2,r2,11692
   85e2c:	11000017 	ldw	r4,0(r2)
   85e30:	01400234 	movhi	r5,8
   85e34:	29571904 	addi	r5,r5,23652
   85e38:	00867441 	jmpi	86744 <_fwalk>

00085e3c <__fp_unlock_all>:
   85e3c:	00800274 	movhi	r2,9
   85e40:	108b6b04 	addi	r2,r2,11692
   85e44:	11000017 	ldw	r4,0(r2)
   85e48:	01400234 	movhi	r5,8
   85e4c:	2956ad04 	addi	r5,r5,23220
   85e50:	00867441 	jmpi	86744 <_fwalk>

00085e54 <_malloc_trim_r>:
   85e54:	defffb04 	addi	sp,sp,-20
   85e58:	dcc00315 	stw	r19,12(sp)
   85e5c:	04c00274 	movhi	r19,9
   85e60:	dc800215 	stw	r18,8(sp)
   85e64:	dc400115 	stw	r17,4(sp)
   85e68:	dc000015 	stw	r16,0(sp)
   85e6c:	dfc00415 	stw	ra,16(sp)
   85e70:	2821883a 	mov	r16,r5
   85e74:	9cc5e604 	addi	r19,r19,6040
   85e78:	2025883a 	mov	r18,r4
   85e7c:	008ed400 	call	8ed40 <__malloc_lock>
   85e80:	98800217 	ldw	r2,8(r19)
   85e84:	14400117 	ldw	r17,4(r2)
   85e88:	00bfff04 	movi	r2,-4
   85e8c:	88a2703a 	and	r17,r17,r2
   85e90:	8c21c83a 	sub	r16,r17,r16
   85e94:	8403fbc4 	addi	r16,r16,4079
   85e98:	8020d33a 	srli	r16,r16,12
   85e9c:	0083ffc4 	movi	r2,4095
   85ea0:	843fffc4 	addi	r16,r16,-1
   85ea4:	8020933a 	slli	r16,r16,12
   85ea8:	1400060e 	bge	r2,r16,85ec4 <_malloc_trim_r+0x70>
   85eac:	000b883a 	mov	r5,zero
   85eb0:	9009883a 	mov	r4,r18
   85eb4:	0088e500 	call	88e50 <_sbrk_r>
   85eb8:	98c00217 	ldw	r3,8(r19)
   85ebc:	1c47883a 	add	r3,r3,r17
   85ec0:	10c00a26 	beq	r2,r3,85eec <_malloc_trim_r+0x98>
   85ec4:	9009883a 	mov	r4,r18
   85ec8:	008ed640 	call	8ed64 <__malloc_unlock>
   85ecc:	0005883a 	mov	r2,zero
   85ed0:	dfc00417 	ldw	ra,16(sp)
   85ed4:	dcc00317 	ldw	r19,12(sp)
   85ed8:	dc800217 	ldw	r18,8(sp)
   85edc:	dc400117 	ldw	r17,4(sp)
   85ee0:	dc000017 	ldw	r16,0(sp)
   85ee4:	dec00504 	addi	sp,sp,20
   85ee8:	f800283a 	ret
   85eec:	040bc83a 	sub	r5,zero,r16
   85ef0:	9009883a 	mov	r4,r18
   85ef4:	0088e500 	call	88e50 <_sbrk_r>
   85ef8:	00ffffc4 	movi	r3,-1
   85efc:	10c00d26 	beq	r2,r3,85f34 <_malloc_trim_r+0xe0>
   85f00:	00c00274 	movhi	r3,9
   85f04:	18d30b04 	addi	r3,r3,19500
   85f08:	18800017 	ldw	r2,0(r3)
   85f0c:	99000217 	ldw	r4,8(r19)
   85f10:	8c23c83a 	sub	r17,r17,r16
   85f14:	8c400054 	ori	r17,r17,1
   85f18:	1421c83a 	sub	r16,r2,r16
   85f1c:	24400115 	stw	r17,4(r4)
   85f20:	9009883a 	mov	r4,r18
   85f24:	1c000015 	stw	r16,0(r3)
   85f28:	008ed640 	call	8ed64 <__malloc_unlock>
   85f2c:	00800044 	movi	r2,1
   85f30:	003fe706 	br	85ed0 <__alt_data_end+0xfffa4450>
   85f34:	000b883a 	mov	r5,zero
   85f38:	9009883a 	mov	r4,r18
   85f3c:	0088e500 	call	88e50 <_sbrk_r>
   85f40:	99000217 	ldw	r4,8(r19)
   85f44:	014003c4 	movi	r5,15
   85f48:	1107c83a 	sub	r3,r2,r4
   85f4c:	28ffdd0e 	bge	r5,r3,85ec4 <__alt_data_end+0xfffa4444>
   85f50:	01400274 	movhi	r5,9
   85f54:	294b6d04 	addi	r5,r5,11700
   85f58:	29400017 	ldw	r5,0(r5)
   85f5c:	18c00054 	ori	r3,r3,1
   85f60:	20c00115 	stw	r3,4(r4)
   85f64:	00c00274 	movhi	r3,9
   85f68:	1145c83a 	sub	r2,r2,r5
   85f6c:	18d30b04 	addi	r3,r3,19500
   85f70:	18800015 	stw	r2,0(r3)
   85f74:	003fd306 	br	85ec4 <__alt_data_end+0xfffa4444>

00085f78 <_free_r>:
   85f78:	28004126 	beq	r5,zero,86080 <_free_r+0x108>
   85f7c:	defffd04 	addi	sp,sp,-12
   85f80:	dc400115 	stw	r17,4(sp)
   85f84:	dc000015 	stw	r16,0(sp)
   85f88:	2023883a 	mov	r17,r4
   85f8c:	2821883a 	mov	r16,r5
   85f90:	dfc00215 	stw	ra,8(sp)
   85f94:	008ed400 	call	8ed40 <__malloc_lock>
   85f98:	81ffff17 	ldw	r7,-4(r16)
   85f9c:	00bfff84 	movi	r2,-2
   85fa0:	01000274 	movhi	r4,9
   85fa4:	81bffe04 	addi	r6,r16,-8
   85fa8:	3884703a 	and	r2,r7,r2
   85fac:	2105e604 	addi	r4,r4,6040
   85fb0:	308b883a 	add	r5,r6,r2
   85fb4:	2a400117 	ldw	r9,4(r5)
   85fb8:	22000217 	ldw	r8,8(r4)
   85fbc:	00ffff04 	movi	r3,-4
   85fc0:	48c6703a 	and	r3,r9,r3
   85fc4:	2a005726 	beq	r5,r8,86124 <_free_r+0x1ac>
   85fc8:	28c00115 	stw	r3,4(r5)
   85fcc:	39c0004c 	andi	r7,r7,1
   85fd0:	3800091e 	bne	r7,zero,85ff8 <_free_r+0x80>
   85fd4:	823ffe17 	ldw	r8,-8(r16)
   85fd8:	22400204 	addi	r9,r4,8
   85fdc:	320dc83a 	sub	r6,r6,r8
   85fe0:	31c00217 	ldw	r7,8(r6)
   85fe4:	1205883a 	add	r2,r2,r8
   85fe8:	3a406526 	beq	r7,r9,86180 <_free_r+0x208>
   85fec:	32000317 	ldw	r8,12(r6)
   85ff0:	3a000315 	stw	r8,12(r7)
   85ff4:	41c00215 	stw	r7,8(r8)
   85ff8:	28cf883a 	add	r7,r5,r3
   85ffc:	39c00117 	ldw	r7,4(r7)
   86000:	39c0004c 	andi	r7,r7,1
   86004:	38003a26 	beq	r7,zero,860f0 <_free_r+0x178>
   86008:	10c00054 	ori	r3,r2,1
   8600c:	30c00115 	stw	r3,4(r6)
   86010:	3087883a 	add	r3,r6,r2
   86014:	18800015 	stw	r2,0(r3)
   86018:	00c07fc4 	movi	r3,511
   8601c:	18801936 	bltu	r3,r2,86084 <_free_r+0x10c>
   86020:	1004d0fa 	srli	r2,r2,3
   86024:	01c00044 	movi	r7,1
   86028:	21400117 	ldw	r5,4(r4)
   8602c:	10c00044 	addi	r3,r2,1
   86030:	18c7883a 	add	r3,r3,r3
   86034:	1005d0ba 	srai	r2,r2,2
   86038:	18c7883a 	add	r3,r3,r3
   8603c:	18c7883a 	add	r3,r3,r3
   86040:	1907883a 	add	r3,r3,r4
   86044:	3884983a 	sll	r2,r7,r2
   86048:	19c00017 	ldw	r7,0(r3)
   8604c:	1a3ffe04 	addi	r8,r3,-8
   86050:	1144b03a 	or	r2,r2,r5
   86054:	32000315 	stw	r8,12(r6)
   86058:	31c00215 	stw	r7,8(r6)
   8605c:	20800115 	stw	r2,4(r4)
   86060:	19800015 	stw	r6,0(r3)
   86064:	39800315 	stw	r6,12(r7)
   86068:	8809883a 	mov	r4,r17
   8606c:	dfc00217 	ldw	ra,8(sp)
   86070:	dc400117 	ldw	r17,4(sp)
   86074:	dc000017 	ldw	r16,0(sp)
   86078:	dec00304 	addi	sp,sp,12
   8607c:	008ed641 	jmpi	8ed64 <__malloc_unlock>
   86080:	f800283a 	ret
   86084:	100ad27a 	srli	r5,r2,9
   86088:	00c00104 	movi	r3,4
   8608c:	19404a36 	bltu	r3,r5,861b8 <_free_r+0x240>
   86090:	100ad1ba 	srli	r5,r2,6
   86094:	28c00e44 	addi	r3,r5,57
   86098:	18c7883a 	add	r3,r3,r3
   8609c:	29400e04 	addi	r5,r5,56
   860a0:	18c7883a 	add	r3,r3,r3
   860a4:	18c7883a 	add	r3,r3,r3
   860a8:	1909883a 	add	r4,r3,r4
   860ac:	20c00017 	ldw	r3,0(r4)
   860b0:	01c00274 	movhi	r7,9
   860b4:	213ffe04 	addi	r4,r4,-8
   860b8:	39c5e604 	addi	r7,r7,6040
   860bc:	20c04426 	beq	r4,r3,861d0 <_free_r+0x258>
   860c0:	01ffff04 	movi	r7,-4
   860c4:	19400117 	ldw	r5,4(r3)
   860c8:	29ca703a 	and	r5,r5,r7
   860cc:	1140022e 	bgeu	r2,r5,860d8 <_free_r+0x160>
   860d0:	18c00217 	ldw	r3,8(r3)
   860d4:	20fffb1e 	bne	r4,r3,860c4 <__alt_data_end+0xfffa4644>
   860d8:	19000317 	ldw	r4,12(r3)
   860dc:	31000315 	stw	r4,12(r6)
   860e0:	30c00215 	stw	r3,8(r6)
   860e4:	21800215 	stw	r6,8(r4)
   860e8:	19800315 	stw	r6,12(r3)
   860ec:	003fde06 	br	86068 <__alt_data_end+0xfffa45e8>
   860f0:	29c00217 	ldw	r7,8(r5)
   860f4:	10c5883a 	add	r2,r2,r3
   860f8:	00c00274 	movhi	r3,9
   860fc:	18c5e804 	addi	r3,r3,6048
   86100:	38c03b26 	beq	r7,r3,861f0 <_free_r+0x278>
   86104:	2a000317 	ldw	r8,12(r5)
   86108:	11400054 	ori	r5,r2,1
   8610c:	3087883a 	add	r3,r6,r2
   86110:	3a000315 	stw	r8,12(r7)
   86114:	41c00215 	stw	r7,8(r8)
   86118:	31400115 	stw	r5,4(r6)
   8611c:	18800015 	stw	r2,0(r3)
   86120:	003fbd06 	br	86018 <__alt_data_end+0xfffa4598>
   86124:	39c0004c 	andi	r7,r7,1
   86128:	10c5883a 	add	r2,r2,r3
   8612c:	3800071e 	bne	r7,zero,8614c <_free_r+0x1d4>
   86130:	81fffe17 	ldw	r7,-8(r16)
   86134:	31cdc83a 	sub	r6,r6,r7
   86138:	30c00317 	ldw	r3,12(r6)
   8613c:	31400217 	ldw	r5,8(r6)
   86140:	11c5883a 	add	r2,r2,r7
   86144:	28c00315 	stw	r3,12(r5)
   86148:	19400215 	stw	r5,8(r3)
   8614c:	10c00054 	ori	r3,r2,1
   86150:	30c00115 	stw	r3,4(r6)
   86154:	00c00274 	movhi	r3,9
   86158:	18cb6e04 	addi	r3,r3,11704
   8615c:	18c00017 	ldw	r3,0(r3)
   86160:	21800215 	stw	r6,8(r4)
   86164:	10ffc036 	bltu	r2,r3,86068 <__alt_data_end+0xfffa45e8>
   86168:	00800274 	movhi	r2,9
   8616c:	1092c304 	addi	r2,r2,19212
   86170:	11400017 	ldw	r5,0(r2)
   86174:	8809883a 	mov	r4,r17
   86178:	0085e540 	call	85e54 <_malloc_trim_r>
   8617c:	003fba06 	br	86068 <__alt_data_end+0xfffa45e8>
   86180:	28c9883a 	add	r4,r5,r3
   86184:	21000117 	ldw	r4,4(r4)
   86188:	2100004c 	andi	r4,r4,1
   8618c:	2000391e 	bne	r4,zero,86274 <_free_r+0x2fc>
   86190:	29c00217 	ldw	r7,8(r5)
   86194:	29000317 	ldw	r4,12(r5)
   86198:	1885883a 	add	r2,r3,r2
   8619c:	10c00054 	ori	r3,r2,1
   861a0:	39000315 	stw	r4,12(r7)
   861a4:	21c00215 	stw	r7,8(r4)
   861a8:	30c00115 	stw	r3,4(r6)
   861ac:	308d883a 	add	r6,r6,r2
   861b0:	30800015 	stw	r2,0(r6)
   861b4:	003fac06 	br	86068 <__alt_data_end+0xfffa45e8>
   861b8:	00c00504 	movi	r3,20
   861bc:	19401536 	bltu	r3,r5,86214 <_free_r+0x29c>
   861c0:	28c01704 	addi	r3,r5,92
   861c4:	18c7883a 	add	r3,r3,r3
   861c8:	294016c4 	addi	r5,r5,91
   861cc:	003fb406 	br	860a0 <__alt_data_end+0xfffa4620>
   861d0:	280bd0ba 	srai	r5,r5,2
   861d4:	00c00044 	movi	r3,1
   861d8:	38800117 	ldw	r2,4(r7)
   861dc:	194a983a 	sll	r5,r3,r5
   861e0:	2007883a 	mov	r3,r4
   861e4:	2884b03a 	or	r2,r5,r2
   861e8:	38800115 	stw	r2,4(r7)
   861ec:	003fbb06 	br	860dc <__alt_data_end+0xfffa465c>
   861f0:	21800515 	stw	r6,20(r4)
   861f4:	21800415 	stw	r6,16(r4)
   861f8:	10c00054 	ori	r3,r2,1
   861fc:	31c00315 	stw	r7,12(r6)
   86200:	31c00215 	stw	r7,8(r6)
   86204:	30c00115 	stw	r3,4(r6)
   86208:	308d883a 	add	r6,r6,r2
   8620c:	30800015 	stw	r2,0(r6)
   86210:	003f9506 	br	86068 <__alt_data_end+0xfffa45e8>
   86214:	00c01504 	movi	r3,84
   86218:	19400536 	bltu	r3,r5,86230 <_free_r+0x2b8>
   8621c:	100ad33a 	srli	r5,r2,12
   86220:	28c01bc4 	addi	r3,r5,111
   86224:	18c7883a 	add	r3,r3,r3
   86228:	29401b84 	addi	r5,r5,110
   8622c:	003f9c06 	br	860a0 <__alt_data_end+0xfffa4620>
   86230:	00c05504 	movi	r3,340
   86234:	19400536 	bltu	r3,r5,8624c <_free_r+0x2d4>
   86238:	100ad3fa 	srli	r5,r2,15
   8623c:	28c01e04 	addi	r3,r5,120
   86240:	18c7883a 	add	r3,r3,r3
   86244:	29401dc4 	addi	r5,r5,119
   86248:	003f9506 	br	860a0 <__alt_data_end+0xfffa4620>
   8624c:	00c15504 	movi	r3,1364
   86250:	19400536 	bltu	r3,r5,86268 <_free_r+0x2f0>
   86254:	100ad4ba 	srli	r5,r2,18
   86258:	28c01f44 	addi	r3,r5,125
   8625c:	18c7883a 	add	r3,r3,r3
   86260:	29401f04 	addi	r5,r5,124
   86264:	003f8e06 	br	860a0 <__alt_data_end+0xfffa4620>
   86268:	00c03f84 	movi	r3,254
   8626c:	01401f84 	movi	r5,126
   86270:	003f8b06 	br	860a0 <__alt_data_end+0xfffa4620>
   86274:	10c00054 	ori	r3,r2,1
   86278:	30c00115 	stw	r3,4(r6)
   8627c:	308d883a 	add	r6,r6,r2
   86280:	30800015 	stw	r2,0(r6)
   86284:	003f7806 	br	86068 <__alt_data_end+0xfffa45e8>

00086288 <__sfvwrite_r>:
   86288:	30800217 	ldw	r2,8(r6)
   8628c:	10006726 	beq	r2,zero,8642c <__sfvwrite_r+0x1a4>
   86290:	28c0030b 	ldhu	r3,12(r5)
   86294:	defff404 	addi	sp,sp,-48
   86298:	dd400715 	stw	r21,28(sp)
   8629c:	dd000615 	stw	r20,24(sp)
   862a0:	dc000215 	stw	r16,8(sp)
   862a4:	dfc00b15 	stw	ra,44(sp)
   862a8:	df000a15 	stw	fp,40(sp)
   862ac:	ddc00915 	stw	r23,36(sp)
   862b0:	dd800815 	stw	r22,32(sp)
   862b4:	dcc00515 	stw	r19,20(sp)
   862b8:	dc800415 	stw	r18,16(sp)
   862bc:	dc400315 	stw	r17,12(sp)
   862c0:	1880020c 	andi	r2,r3,8
   862c4:	2821883a 	mov	r16,r5
   862c8:	202b883a 	mov	r21,r4
   862cc:	3029883a 	mov	r20,r6
   862d0:	10002726 	beq	r2,zero,86370 <__sfvwrite_r+0xe8>
   862d4:	28800417 	ldw	r2,16(r5)
   862d8:	10002526 	beq	r2,zero,86370 <__sfvwrite_r+0xe8>
   862dc:	1880008c 	andi	r2,r3,2
   862e0:	a4400017 	ldw	r17,0(r20)
   862e4:	10002a26 	beq	r2,zero,86390 <__sfvwrite_r+0x108>
   862e8:	05a00034 	movhi	r22,32768
   862ec:	0027883a 	mov	r19,zero
   862f0:	0025883a 	mov	r18,zero
   862f4:	b5bf0004 	addi	r22,r22,-1024
   862f8:	980d883a 	mov	r6,r19
   862fc:	a809883a 	mov	r4,r21
   86300:	90004626 	beq	r18,zero,8641c <__sfvwrite_r+0x194>
   86304:	900f883a 	mov	r7,r18
   86308:	b480022e 	bgeu	r22,r18,86314 <__sfvwrite_r+0x8c>
   8630c:	01e00034 	movhi	r7,32768
   86310:	39ff0004 	addi	r7,r7,-1024
   86314:	80800917 	ldw	r2,36(r16)
   86318:	81400717 	ldw	r5,28(r16)
   8631c:	103ee83a 	callr	r2
   86320:	0080570e 	bge	zero,r2,86480 <__sfvwrite_r+0x1f8>
   86324:	a0c00217 	ldw	r3,8(r20)
   86328:	98a7883a 	add	r19,r19,r2
   8632c:	90a5c83a 	sub	r18,r18,r2
   86330:	1885c83a 	sub	r2,r3,r2
   86334:	a0800215 	stw	r2,8(r20)
   86338:	103fef1e 	bne	r2,zero,862f8 <__alt_data_end+0xfffa4878>
   8633c:	0005883a 	mov	r2,zero
   86340:	dfc00b17 	ldw	ra,44(sp)
   86344:	df000a17 	ldw	fp,40(sp)
   86348:	ddc00917 	ldw	r23,36(sp)
   8634c:	dd800817 	ldw	r22,32(sp)
   86350:	dd400717 	ldw	r21,28(sp)
   86354:	dd000617 	ldw	r20,24(sp)
   86358:	dcc00517 	ldw	r19,20(sp)
   8635c:	dc800417 	ldw	r18,16(sp)
   86360:	dc400317 	ldw	r17,12(sp)
   86364:	dc000217 	ldw	r16,8(sp)
   86368:	dec00c04 	addi	sp,sp,48
   8636c:	f800283a 	ret
   86370:	800b883a 	mov	r5,r16
   86374:	a809883a 	mov	r4,r21
   86378:	0083e300 	call	83e30 <__swsetup_r>
   8637c:	1000eb1e 	bne	r2,zero,8672c <__sfvwrite_r+0x4a4>
   86380:	80c0030b 	ldhu	r3,12(r16)
   86384:	a4400017 	ldw	r17,0(r20)
   86388:	1880008c 	andi	r2,r3,2
   8638c:	103fd61e 	bne	r2,zero,862e8 <__alt_data_end+0xfffa4868>
   86390:	1880004c 	andi	r2,r3,1
   86394:	10003f1e 	bne	r2,zero,86494 <__sfvwrite_r+0x20c>
   86398:	0039883a 	mov	fp,zero
   8639c:	0025883a 	mov	r18,zero
   863a0:	90001a26 	beq	r18,zero,8640c <__sfvwrite_r+0x184>
   863a4:	1880800c 	andi	r2,r3,512
   863a8:	84c00217 	ldw	r19,8(r16)
   863ac:	10002126 	beq	r2,zero,86434 <__sfvwrite_r+0x1ac>
   863b0:	982f883a 	mov	r23,r19
   863b4:	94c09336 	bltu	r18,r19,86604 <__sfvwrite_r+0x37c>
   863b8:	1881200c 	andi	r2,r3,1152
   863bc:	10009e1e 	bne	r2,zero,86638 <__sfvwrite_r+0x3b0>
   863c0:	81000017 	ldw	r4,0(r16)
   863c4:	b80d883a 	mov	r6,r23
   863c8:	e00b883a 	mov	r5,fp
   863cc:	00875f80 	call	875f8 <memmove>
   863d0:	80c00217 	ldw	r3,8(r16)
   863d4:	81000017 	ldw	r4,0(r16)
   863d8:	9005883a 	mov	r2,r18
   863dc:	1ce7c83a 	sub	r19,r3,r19
   863e0:	25cf883a 	add	r7,r4,r23
   863e4:	84c00215 	stw	r19,8(r16)
   863e8:	81c00015 	stw	r7,0(r16)
   863ec:	a0c00217 	ldw	r3,8(r20)
   863f0:	e0b9883a 	add	fp,fp,r2
   863f4:	90a5c83a 	sub	r18,r18,r2
   863f8:	18a7c83a 	sub	r19,r3,r2
   863fc:	a4c00215 	stw	r19,8(r20)
   86400:	983fce26 	beq	r19,zero,8633c <__alt_data_end+0xfffa48bc>
   86404:	80c0030b 	ldhu	r3,12(r16)
   86408:	903fe61e 	bne	r18,zero,863a4 <__alt_data_end+0xfffa4924>
   8640c:	8f000017 	ldw	fp,0(r17)
   86410:	8c800117 	ldw	r18,4(r17)
   86414:	8c400204 	addi	r17,r17,8
   86418:	003fe106 	br	863a0 <__alt_data_end+0xfffa4920>
   8641c:	8cc00017 	ldw	r19,0(r17)
   86420:	8c800117 	ldw	r18,4(r17)
   86424:	8c400204 	addi	r17,r17,8
   86428:	003fb306 	br	862f8 <__alt_data_end+0xfffa4878>
   8642c:	0005883a 	mov	r2,zero
   86430:	f800283a 	ret
   86434:	81000017 	ldw	r4,0(r16)
   86438:	80800417 	ldw	r2,16(r16)
   8643c:	11005736 	bltu	r2,r4,8659c <__sfvwrite_r+0x314>
   86440:	85c00517 	ldw	r23,20(r16)
   86444:	95c05536 	bltu	r18,r23,8659c <__sfvwrite_r+0x314>
   86448:	00a00034 	movhi	r2,32768
   8644c:	10bfffc4 	addi	r2,r2,-1
   86450:	9009883a 	mov	r4,r18
   86454:	1480012e 	bgeu	r2,r18,8645c <__sfvwrite_r+0x1d4>
   86458:	1009883a 	mov	r4,r2
   8645c:	b80b883a 	mov	r5,r23
   86460:	00817080 	call	81708 <__divsi3>
   86464:	15cf383a 	mul	r7,r2,r23
   86468:	81400717 	ldw	r5,28(r16)
   8646c:	80800917 	ldw	r2,36(r16)
   86470:	e00d883a 	mov	r6,fp
   86474:	a809883a 	mov	r4,r21
   86478:	103ee83a 	callr	r2
   8647c:	00bfdb16 	blt	zero,r2,863ec <__alt_data_end+0xfffa496c>
   86480:	8080030b 	ldhu	r2,12(r16)
   86484:	10801014 	ori	r2,r2,64
   86488:	8080030d 	sth	r2,12(r16)
   8648c:	00bfffc4 	movi	r2,-1
   86490:	003fab06 	br	86340 <__alt_data_end+0xfffa48c0>
   86494:	0027883a 	mov	r19,zero
   86498:	0011883a 	mov	r8,zero
   8649c:	0039883a 	mov	fp,zero
   864a0:	0025883a 	mov	r18,zero
   864a4:	90001f26 	beq	r18,zero,86524 <__sfvwrite_r+0x29c>
   864a8:	40005a26 	beq	r8,zero,86614 <__sfvwrite_r+0x38c>
   864ac:	982d883a 	mov	r22,r19
   864b0:	94c0012e 	bgeu	r18,r19,864b8 <__sfvwrite_r+0x230>
   864b4:	902d883a 	mov	r22,r18
   864b8:	81000017 	ldw	r4,0(r16)
   864bc:	80800417 	ldw	r2,16(r16)
   864c0:	b02f883a 	mov	r23,r22
   864c4:	81c00517 	ldw	r7,20(r16)
   864c8:	1100032e 	bgeu	r2,r4,864d8 <__sfvwrite_r+0x250>
   864cc:	80c00217 	ldw	r3,8(r16)
   864d0:	38c7883a 	add	r3,r7,r3
   864d4:	1d801816 	blt	r3,r22,86538 <__sfvwrite_r+0x2b0>
   864d8:	b1c03e16 	blt	r22,r7,865d4 <__sfvwrite_r+0x34c>
   864dc:	80800917 	ldw	r2,36(r16)
   864e0:	81400717 	ldw	r5,28(r16)
   864e4:	e00d883a 	mov	r6,fp
   864e8:	da000115 	stw	r8,4(sp)
   864ec:	a809883a 	mov	r4,r21
   864f0:	103ee83a 	callr	r2
   864f4:	102f883a 	mov	r23,r2
   864f8:	da000117 	ldw	r8,4(sp)
   864fc:	00bfe00e 	bge	zero,r2,86480 <__alt_data_end+0xfffa4a00>
   86500:	9de7c83a 	sub	r19,r19,r23
   86504:	98001f26 	beq	r19,zero,86584 <__sfvwrite_r+0x2fc>
   86508:	a0800217 	ldw	r2,8(r20)
   8650c:	e5f9883a 	add	fp,fp,r23
   86510:	95e5c83a 	sub	r18,r18,r23
   86514:	15efc83a 	sub	r23,r2,r23
   86518:	a5c00215 	stw	r23,8(r20)
   8651c:	b83f8726 	beq	r23,zero,8633c <__alt_data_end+0xfffa48bc>
   86520:	903fe11e 	bne	r18,zero,864a8 <__alt_data_end+0xfffa4a28>
   86524:	8f000017 	ldw	fp,0(r17)
   86528:	8c800117 	ldw	r18,4(r17)
   8652c:	0011883a 	mov	r8,zero
   86530:	8c400204 	addi	r17,r17,8
   86534:	003fdb06 	br	864a4 <__alt_data_end+0xfffa4a24>
   86538:	180d883a 	mov	r6,r3
   8653c:	e00b883a 	mov	r5,fp
   86540:	da000115 	stw	r8,4(sp)
   86544:	d8c00015 	stw	r3,0(sp)
   86548:	00875f80 	call	875f8 <memmove>
   8654c:	d8c00017 	ldw	r3,0(sp)
   86550:	80800017 	ldw	r2,0(r16)
   86554:	800b883a 	mov	r5,r16
   86558:	a809883a 	mov	r4,r21
   8655c:	10c5883a 	add	r2,r2,r3
   86560:	80800015 	stw	r2,0(r16)
   86564:	d8c00015 	stw	r3,0(sp)
   86568:	0085a280 	call	85a28 <_fflush_r>
   8656c:	d8c00017 	ldw	r3,0(sp)
   86570:	da000117 	ldw	r8,4(sp)
   86574:	103fc21e 	bne	r2,zero,86480 <__alt_data_end+0xfffa4a00>
   86578:	182f883a 	mov	r23,r3
   8657c:	9de7c83a 	sub	r19,r19,r23
   86580:	983fe11e 	bne	r19,zero,86508 <__alt_data_end+0xfffa4a88>
   86584:	800b883a 	mov	r5,r16
   86588:	a809883a 	mov	r4,r21
   8658c:	0085a280 	call	85a28 <_fflush_r>
   86590:	103fbb1e 	bne	r2,zero,86480 <__alt_data_end+0xfffa4a00>
   86594:	0011883a 	mov	r8,zero
   86598:	003fdb06 	br	86508 <__alt_data_end+0xfffa4a88>
   8659c:	94c0012e 	bgeu	r18,r19,865a4 <__sfvwrite_r+0x31c>
   865a0:	9027883a 	mov	r19,r18
   865a4:	980d883a 	mov	r6,r19
   865a8:	e00b883a 	mov	r5,fp
   865ac:	00875f80 	call	875f8 <memmove>
   865b0:	80800217 	ldw	r2,8(r16)
   865b4:	80c00017 	ldw	r3,0(r16)
   865b8:	14c5c83a 	sub	r2,r2,r19
   865bc:	1cc7883a 	add	r3,r3,r19
   865c0:	80800215 	stw	r2,8(r16)
   865c4:	80c00015 	stw	r3,0(r16)
   865c8:	10004326 	beq	r2,zero,866d8 <__sfvwrite_r+0x450>
   865cc:	9805883a 	mov	r2,r19
   865d0:	003f8606 	br	863ec <__alt_data_end+0xfffa496c>
   865d4:	b00d883a 	mov	r6,r22
   865d8:	e00b883a 	mov	r5,fp
   865dc:	da000115 	stw	r8,4(sp)
   865e0:	00875f80 	call	875f8 <memmove>
   865e4:	80800217 	ldw	r2,8(r16)
   865e8:	80c00017 	ldw	r3,0(r16)
   865ec:	da000117 	ldw	r8,4(sp)
   865f0:	1585c83a 	sub	r2,r2,r22
   865f4:	1dad883a 	add	r22,r3,r22
   865f8:	80800215 	stw	r2,8(r16)
   865fc:	85800015 	stw	r22,0(r16)
   86600:	003fbf06 	br	86500 <__alt_data_end+0xfffa4a80>
   86604:	81000017 	ldw	r4,0(r16)
   86608:	9027883a 	mov	r19,r18
   8660c:	902f883a 	mov	r23,r18
   86610:	003f6c06 	br	863c4 <__alt_data_end+0xfffa4944>
   86614:	900d883a 	mov	r6,r18
   86618:	01400284 	movi	r5,10
   8661c:	e009883a 	mov	r4,fp
   86620:	00873cc0 	call	873cc <memchr>
   86624:	10003e26 	beq	r2,zero,86720 <__sfvwrite_r+0x498>
   86628:	10800044 	addi	r2,r2,1
   8662c:	1727c83a 	sub	r19,r2,fp
   86630:	02000044 	movi	r8,1
   86634:	003f9d06 	br	864ac <__alt_data_end+0xfffa4a2c>
   86638:	80800517 	ldw	r2,20(r16)
   8663c:	81400417 	ldw	r5,16(r16)
   86640:	81c00017 	ldw	r7,0(r16)
   86644:	10a7883a 	add	r19,r2,r2
   86648:	9885883a 	add	r2,r19,r2
   8664c:	1026d7fa 	srli	r19,r2,31
   86650:	396dc83a 	sub	r22,r7,r5
   86654:	b1000044 	addi	r4,r22,1
   86658:	9885883a 	add	r2,r19,r2
   8665c:	1027d07a 	srai	r19,r2,1
   86660:	2485883a 	add	r2,r4,r18
   86664:	980d883a 	mov	r6,r19
   86668:	9880022e 	bgeu	r19,r2,86674 <__sfvwrite_r+0x3ec>
   8666c:	1027883a 	mov	r19,r2
   86670:	100d883a 	mov	r6,r2
   86674:	18c1000c 	andi	r3,r3,1024
   86678:	18001c26 	beq	r3,zero,866ec <__sfvwrite_r+0x464>
   8667c:	300b883a 	mov	r5,r6
   86680:	a809883a 	mov	r4,r21
   86684:	0086bc00 	call	86bc0 <_malloc_r>
   86688:	102f883a 	mov	r23,r2
   8668c:	10002926 	beq	r2,zero,86734 <__sfvwrite_r+0x4ac>
   86690:	81400417 	ldw	r5,16(r16)
   86694:	b00d883a 	mov	r6,r22
   86698:	1009883a 	mov	r4,r2
   8669c:	00874b00 	call	874b0 <memcpy>
   866a0:	8080030b 	ldhu	r2,12(r16)
   866a4:	00fedfc4 	movi	r3,-1153
   866a8:	10c4703a 	and	r2,r2,r3
   866ac:	10802014 	ori	r2,r2,128
   866b0:	8080030d 	sth	r2,12(r16)
   866b4:	bd89883a 	add	r4,r23,r22
   866b8:	9d8fc83a 	sub	r7,r19,r22
   866bc:	85c00415 	stw	r23,16(r16)
   866c0:	84c00515 	stw	r19,20(r16)
   866c4:	81000015 	stw	r4,0(r16)
   866c8:	9027883a 	mov	r19,r18
   866cc:	81c00215 	stw	r7,8(r16)
   866d0:	902f883a 	mov	r23,r18
   866d4:	003f3b06 	br	863c4 <__alt_data_end+0xfffa4944>
   866d8:	800b883a 	mov	r5,r16
   866dc:	a809883a 	mov	r4,r21
   866e0:	0085a280 	call	85a28 <_fflush_r>
   866e4:	103fb926 	beq	r2,zero,865cc <__alt_data_end+0xfffa4b4c>
   866e8:	003f6506 	br	86480 <__alt_data_end+0xfffa4a00>
   866ec:	a809883a 	mov	r4,r21
   866f0:	00888780 	call	88878 <_realloc_r>
   866f4:	102f883a 	mov	r23,r2
   866f8:	103fee1e 	bne	r2,zero,866b4 <__alt_data_end+0xfffa4c34>
   866fc:	81400417 	ldw	r5,16(r16)
   86700:	a809883a 	mov	r4,r21
   86704:	0085f780 	call	85f78 <_free_r>
   86708:	8080030b 	ldhu	r2,12(r16)
   8670c:	00ffdfc4 	movi	r3,-129
   86710:	1884703a 	and	r2,r3,r2
   86714:	00c00304 	movi	r3,12
   86718:	a8c00015 	stw	r3,0(r21)
   8671c:	003f5906 	br	86484 <__alt_data_end+0xfffa4a04>
   86720:	94c00044 	addi	r19,r18,1
   86724:	02000044 	movi	r8,1
   86728:	003f6006 	br	864ac <__alt_data_end+0xfffa4a2c>
   8672c:	00bfffc4 	movi	r2,-1
   86730:	003f0306 	br	86340 <__alt_data_end+0xfffa48c0>
   86734:	00800304 	movi	r2,12
   86738:	a8800015 	stw	r2,0(r21)
   8673c:	8080030b 	ldhu	r2,12(r16)
   86740:	003f5006 	br	86484 <__alt_data_end+0xfffa4a04>

00086744 <_fwalk>:
   86744:	defff704 	addi	sp,sp,-36
   86748:	dd000415 	stw	r20,16(sp)
   8674c:	dfc00815 	stw	ra,32(sp)
   86750:	ddc00715 	stw	r23,28(sp)
   86754:	dd800615 	stw	r22,24(sp)
   86758:	dd400515 	stw	r21,20(sp)
   8675c:	dcc00315 	stw	r19,12(sp)
   86760:	dc800215 	stw	r18,8(sp)
   86764:	dc400115 	stw	r17,4(sp)
   86768:	dc000015 	stw	r16,0(sp)
   8676c:	2500b804 	addi	r20,r4,736
   86770:	a0002326 	beq	r20,zero,86800 <_fwalk+0xbc>
   86774:	282b883a 	mov	r21,r5
   86778:	002f883a 	mov	r23,zero
   8677c:	05800044 	movi	r22,1
   86780:	04ffffc4 	movi	r19,-1
   86784:	a4400117 	ldw	r17,4(r20)
   86788:	a4800217 	ldw	r18,8(r20)
   8678c:	8c7fffc4 	addi	r17,r17,-1
   86790:	88000d16 	blt	r17,zero,867c8 <_fwalk+0x84>
   86794:	94000304 	addi	r16,r18,12
   86798:	94800384 	addi	r18,r18,14
   8679c:	8080000b 	ldhu	r2,0(r16)
   867a0:	8c7fffc4 	addi	r17,r17,-1
   867a4:	813ffd04 	addi	r4,r16,-12
   867a8:	b080042e 	bgeu	r22,r2,867bc <_fwalk+0x78>
   867ac:	9080000f 	ldh	r2,0(r18)
   867b0:	14c00226 	beq	r2,r19,867bc <_fwalk+0x78>
   867b4:	a83ee83a 	callr	r21
   867b8:	b8aeb03a 	or	r23,r23,r2
   867bc:	84001a04 	addi	r16,r16,104
   867c0:	94801a04 	addi	r18,r18,104
   867c4:	8cfff51e 	bne	r17,r19,8679c <__alt_data_end+0xfffa4d1c>
   867c8:	a5000017 	ldw	r20,0(r20)
   867cc:	a03fed1e 	bne	r20,zero,86784 <__alt_data_end+0xfffa4d04>
   867d0:	b805883a 	mov	r2,r23
   867d4:	dfc00817 	ldw	ra,32(sp)
   867d8:	ddc00717 	ldw	r23,28(sp)
   867dc:	dd800617 	ldw	r22,24(sp)
   867e0:	dd400517 	ldw	r21,20(sp)
   867e4:	dd000417 	ldw	r20,16(sp)
   867e8:	dcc00317 	ldw	r19,12(sp)
   867ec:	dc800217 	ldw	r18,8(sp)
   867f0:	dc400117 	ldw	r17,4(sp)
   867f4:	dc000017 	ldw	r16,0(sp)
   867f8:	dec00904 	addi	sp,sp,36
   867fc:	f800283a 	ret
   86800:	002f883a 	mov	r23,zero
   86804:	003ff206 	br	867d0 <__alt_data_end+0xfffa4d50>

00086808 <_fwalk_reent>:
   86808:	defff704 	addi	sp,sp,-36
   8680c:	dd000415 	stw	r20,16(sp)
   86810:	dfc00815 	stw	ra,32(sp)
   86814:	ddc00715 	stw	r23,28(sp)
   86818:	dd800615 	stw	r22,24(sp)
   8681c:	dd400515 	stw	r21,20(sp)
   86820:	dcc00315 	stw	r19,12(sp)
   86824:	dc800215 	stw	r18,8(sp)
   86828:	dc400115 	stw	r17,4(sp)
   8682c:	dc000015 	stw	r16,0(sp)
   86830:	2500b804 	addi	r20,r4,736
   86834:	a0002326 	beq	r20,zero,868c4 <_fwalk_reent+0xbc>
   86838:	282b883a 	mov	r21,r5
   8683c:	2027883a 	mov	r19,r4
   86840:	002f883a 	mov	r23,zero
   86844:	05800044 	movi	r22,1
   86848:	04bfffc4 	movi	r18,-1
   8684c:	a4400117 	ldw	r17,4(r20)
   86850:	a4000217 	ldw	r16,8(r20)
   86854:	8c7fffc4 	addi	r17,r17,-1
   86858:	88000c16 	blt	r17,zero,8688c <_fwalk_reent+0x84>
   8685c:	84000304 	addi	r16,r16,12
   86860:	8080000b 	ldhu	r2,0(r16)
   86864:	8c7fffc4 	addi	r17,r17,-1
   86868:	817ffd04 	addi	r5,r16,-12
   8686c:	b080052e 	bgeu	r22,r2,86884 <_fwalk_reent+0x7c>
   86870:	8080008f 	ldh	r2,2(r16)
   86874:	9809883a 	mov	r4,r19
   86878:	14800226 	beq	r2,r18,86884 <_fwalk_reent+0x7c>
   8687c:	a83ee83a 	callr	r21
   86880:	b8aeb03a 	or	r23,r23,r2
   86884:	84001a04 	addi	r16,r16,104
   86888:	8cbff51e 	bne	r17,r18,86860 <__alt_data_end+0xfffa4de0>
   8688c:	a5000017 	ldw	r20,0(r20)
   86890:	a03fee1e 	bne	r20,zero,8684c <__alt_data_end+0xfffa4dcc>
   86894:	b805883a 	mov	r2,r23
   86898:	dfc00817 	ldw	ra,32(sp)
   8689c:	ddc00717 	ldw	r23,28(sp)
   868a0:	dd800617 	ldw	r22,24(sp)
   868a4:	dd400517 	ldw	r21,20(sp)
   868a8:	dd000417 	ldw	r20,16(sp)
   868ac:	dcc00317 	ldw	r19,12(sp)
   868b0:	dc800217 	ldw	r18,8(sp)
   868b4:	dc400117 	ldw	r17,4(sp)
   868b8:	dc000017 	ldw	r16,0(sp)
   868bc:	dec00904 	addi	sp,sp,36
   868c0:	f800283a 	ret
   868c4:	002f883a 	mov	r23,zero
   868c8:	003ff206 	br	86894 <__alt_data_end+0xfffa4e14>

000868cc <_gettimeofday_r>:
   868cc:	defffd04 	addi	sp,sp,-12
   868d0:	2805883a 	mov	r2,r5
   868d4:	dc000015 	stw	r16,0(sp)
   868d8:	04000274 	movhi	r16,9
   868dc:	dc400115 	stw	r17,4(sp)
   868e0:	8412bd04 	addi	r16,r16,19188
   868e4:	2023883a 	mov	r17,r4
   868e8:	300b883a 	mov	r5,r6
   868ec:	1009883a 	mov	r4,r2
   868f0:	dfc00215 	stw	ra,8(sp)
   868f4:	80000015 	stw	zero,0(r16)
   868f8:	008e3d40 	call	8e3d4 <gettimeofday>
   868fc:	00ffffc4 	movi	r3,-1
   86900:	10c00526 	beq	r2,r3,86918 <_gettimeofday_r+0x4c>
   86904:	dfc00217 	ldw	ra,8(sp)
   86908:	dc400117 	ldw	r17,4(sp)
   8690c:	dc000017 	ldw	r16,0(sp)
   86910:	dec00304 	addi	sp,sp,12
   86914:	f800283a 	ret
   86918:	80c00017 	ldw	r3,0(r16)
   8691c:	183ff926 	beq	r3,zero,86904 <__alt_data_end+0xfffa4e84>
   86920:	88c00015 	stw	r3,0(r17)
   86924:	003ff706 	br	86904 <__alt_data_end+0xfffa4e84>

00086928 <_setlocale_r>:
   86928:	30001b26 	beq	r6,zero,86998 <_setlocale_r+0x70>
   8692c:	01400274 	movhi	r5,9
   86930:	defffe04 	addi	sp,sp,-8
   86934:	29439904 	addi	r5,r5,3684
   86938:	3009883a 	mov	r4,r6
   8693c:	dc000015 	stw	r16,0(sp)
   86940:	dfc00115 	stw	ra,4(sp)
   86944:	3021883a 	mov	r16,r6
   86948:	0088fe00 	call	88fe0 <strcmp>
   8694c:	1000061e 	bne	r2,zero,86968 <_setlocale_r+0x40>
   86950:	00800274 	movhi	r2,9
   86954:	10839804 	addi	r2,r2,3680
   86958:	dfc00117 	ldw	ra,4(sp)
   8695c:	dc000017 	ldw	r16,0(sp)
   86960:	dec00204 	addi	sp,sp,8
   86964:	f800283a 	ret
   86968:	01400274 	movhi	r5,9
   8696c:	29439804 	addi	r5,r5,3680
   86970:	8009883a 	mov	r4,r16
   86974:	0088fe00 	call	88fe0 <strcmp>
   86978:	103ff526 	beq	r2,zero,86950 <__alt_data_end+0xfffa4ed0>
   8697c:	01400274 	movhi	r5,9
   86980:	29438304 	addi	r5,r5,3596
   86984:	8009883a 	mov	r4,r16
   86988:	0088fe00 	call	88fe0 <strcmp>
   8698c:	103ff026 	beq	r2,zero,86950 <__alt_data_end+0xfffa4ed0>
   86990:	0005883a 	mov	r2,zero
   86994:	003ff006 	br	86958 <__alt_data_end+0xfffa4ed8>
   86998:	00800274 	movhi	r2,9
   8699c:	10839804 	addi	r2,r2,3680
   869a0:	f800283a 	ret

000869a4 <__locale_charset>:
   869a4:	00800274 	movhi	r2,9
   869a8:	1085d004 	addi	r2,r2,5952
   869ac:	f800283a 	ret

000869b0 <__locale_mb_cur_max>:
   869b0:	00800274 	movhi	r2,9
   869b4:	108b6c04 	addi	r2,r2,11696
   869b8:	10800017 	ldw	r2,0(r2)
   869bc:	f800283a 	ret

000869c0 <__locale_msgcharset>:
   869c0:	00800274 	movhi	r2,9
   869c4:	1085c804 	addi	r2,r2,5920
   869c8:	f800283a 	ret

000869cc <__locale_cjk_lang>:
   869cc:	0005883a 	mov	r2,zero
   869d0:	f800283a 	ret

000869d4 <_localeconv_r>:
   869d4:	00800274 	movhi	r2,9
   869d8:	1085d804 	addi	r2,r2,5984
   869dc:	f800283a 	ret

000869e0 <setlocale>:
   869e0:	00800274 	movhi	r2,9
   869e4:	108b6b04 	addi	r2,r2,11692
   869e8:	280d883a 	mov	r6,r5
   869ec:	200b883a 	mov	r5,r4
   869f0:	11000017 	ldw	r4,0(r2)
   869f4:	00869281 	jmpi	86928 <_setlocale_r>

000869f8 <localeconv>:
   869f8:	00800274 	movhi	r2,9
   869fc:	1085d804 	addi	r2,r2,5984
   86a00:	f800283a 	ret

00086a04 <__smakebuf_r>:
   86a04:	2880030b 	ldhu	r2,12(r5)
   86a08:	10c0008c 	andi	r3,r2,2
   86a0c:	1800411e 	bne	r3,zero,86b14 <__smakebuf_r+0x110>
   86a10:	deffec04 	addi	sp,sp,-80
   86a14:	dc000f15 	stw	r16,60(sp)
   86a18:	2821883a 	mov	r16,r5
   86a1c:	2940038f 	ldh	r5,14(r5)
   86a20:	dc401015 	stw	r17,64(sp)
   86a24:	dfc01315 	stw	ra,76(sp)
   86a28:	dcc01215 	stw	r19,72(sp)
   86a2c:	dc801115 	stw	r18,68(sp)
   86a30:	2023883a 	mov	r17,r4
   86a34:	28001c16 	blt	r5,zero,86aa8 <__smakebuf_r+0xa4>
   86a38:	d80d883a 	mov	r6,sp
   86a3c:	008ab880 	call	8ab88 <_fstat_r>
   86a40:	10001816 	blt	r2,zero,86aa4 <__smakebuf_r+0xa0>
   86a44:	d8800117 	ldw	r2,4(sp)
   86a48:	00e00014 	movui	r3,32768
   86a4c:	10bc000c 	andi	r2,r2,61440
   86a50:	14c80020 	cmpeqi	r19,r2,8192
   86a54:	10c03726 	beq	r2,r3,86b34 <__smakebuf_r+0x130>
   86a58:	80c0030b 	ldhu	r3,12(r16)
   86a5c:	18c20014 	ori	r3,r3,2048
   86a60:	80c0030d 	sth	r3,12(r16)
   86a64:	00c80004 	movi	r3,8192
   86a68:	10c0521e 	bne	r2,r3,86bb4 <__smakebuf_r+0x1b0>
   86a6c:	8140038f 	ldh	r5,14(r16)
   86a70:	8809883a 	mov	r4,r17
   86a74:	008abe40 	call	8abe4 <_isatty_r>
   86a78:	10004c26 	beq	r2,zero,86bac <__smakebuf_r+0x1a8>
   86a7c:	8080030b 	ldhu	r2,12(r16)
   86a80:	80c010c4 	addi	r3,r16,67
   86a84:	80c00015 	stw	r3,0(r16)
   86a88:	10800054 	ori	r2,r2,1
   86a8c:	8080030d 	sth	r2,12(r16)
   86a90:	00800044 	movi	r2,1
   86a94:	80c00415 	stw	r3,16(r16)
   86a98:	80800515 	stw	r2,20(r16)
   86a9c:	04810004 	movi	r18,1024
   86aa0:	00000706 	br	86ac0 <__smakebuf_r+0xbc>
   86aa4:	8080030b 	ldhu	r2,12(r16)
   86aa8:	10c0200c 	andi	r3,r2,128
   86aac:	18001f1e 	bne	r3,zero,86b2c <__smakebuf_r+0x128>
   86ab0:	04810004 	movi	r18,1024
   86ab4:	10820014 	ori	r2,r2,2048
   86ab8:	8080030d 	sth	r2,12(r16)
   86abc:	0027883a 	mov	r19,zero
   86ac0:	900b883a 	mov	r5,r18
   86ac4:	8809883a 	mov	r4,r17
   86ac8:	0086bc00 	call	86bc0 <_malloc_r>
   86acc:	10002c26 	beq	r2,zero,86b80 <__smakebuf_r+0x17c>
   86ad0:	80c0030b 	ldhu	r3,12(r16)
   86ad4:	01000234 	movhi	r4,8
   86ad8:	2116af04 	addi	r4,r4,23228
   86adc:	89000f15 	stw	r4,60(r17)
   86ae0:	18c02014 	ori	r3,r3,128
   86ae4:	80c0030d 	sth	r3,12(r16)
   86ae8:	80800015 	stw	r2,0(r16)
   86aec:	80800415 	stw	r2,16(r16)
   86af0:	84800515 	stw	r18,20(r16)
   86af4:	98001a1e 	bne	r19,zero,86b60 <__smakebuf_r+0x15c>
   86af8:	dfc01317 	ldw	ra,76(sp)
   86afc:	dcc01217 	ldw	r19,72(sp)
   86b00:	dc801117 	ldw	r18,68(sp)
   86b04:	dc401017 	ldw	r17,64(sp)
   86b08:	dc000f17 	ldw	r16,60(sp)
   86b0c:	dec01404 	addi	sp,sp,80
   86b10:	f800283a 	ret
   86b14:	288010c4 	addi	r2,r5,67
   86b18:	28800015 	stw	r2,0(r5)
   86b1c:	28800415 	stw	r2,16(r5)
   86b20:	00800044 	movi	r2,1
   86b24:	28800515 	stw	r2,20(r5)
   86b28:	f800283a 	ret
   86b2c:	04801004 	movi	r18,64
   86b30:	003fe006 	br	86ab4 <__alt_data_end+0xfffa5034>
   86b34:	81000a17 	ldw	r4,40(r16)
   86b38:	00c00274 	movhi	r3,9
   86b3c:	18e3df04 	addi	r3,r3,-28804
   86b40:	20ffc51e 	bne	r4,r3,86a58 <__alt_data_end+0xfffa4fd8>
   86b44:	8080030b 	ldhu	r2,12(r16)
   86b48:	04810004 	movi	r18,1024
   86b4c:	84801315 	stw	r18,76(r16)
   86b50:	1484b03a 	or	r2,r2,r18
   86b54:	8080030d 	sth	r2,12(r16)
   86b58:	0027883a 	mov	r19,zero
   86b5c:	003fd806 	br	86ac0 <__alt_data_end+0xfffa5040>
   86b60:	8140038f 	ldh	r5,14(r16)
   86b64:	8809883a 	mov	r4,r17
   86b68:	008abe40 	call	8abe4 <_isatty_r>
   86b6c:	103fe226 	beq	r2,zero,86af8 <__alt_data_end+0xfffa5078>
   86b70:	8080030b 	ldhu	r2,12(r16)
   86b74:	10800054 	ori	r2,r2,1
   86b78:	8080030d 	sth	r2,12(r16)
   86b7c:	003fde06 	br	86af8 <__alt_data_end+0xfffa5078>
   86b80:	8080030b 	ldhu	r2,12(r16)
   86b84:	10c0800c 	andi	r3,r2,512
   86b88:	183fdb1e 	bne	r3,zero,86af8 <__alt_data_end+0xfffa5078>
   86b8c:	10800094 	ori	r2,r2,2
   86b90:	80c010c4 	addi	r3,r16,67
   86b94:	8080030d 	sth	r2,12(r16)
   86b98:	00800044 	movi	r2,1
   86b9c:	80c00015 	stw	r3,0(r16)
   86ba0:	80c00415 	stw	r3,16(r16)
   86ba4:	80800515 	stw	r2,20(r16)
   86ba8:	003fd306 	br	86af8 <__alt_data_end+0xfffa5078>
   86bac:	04810004 	movi	r18,1024
   86bb0:	003fc306 	br	86ac0 <__alt_data_end+0xfffa5040>
   86bb4:	0027883a 	mov	r19,zero
   86bb8:	04810004 	movi	r18,1024
   86bbc:	003fc006 	br	86ac0 <__alt_data_end+0xfffa5040>

00086bc0 <_malloc_r>:
   86bc0:	defff504 	addi	sp,sp,-44
   86bc4:	dc800315 	stw	r18,12(sp)
   86bc8:	dfc00a15 	stw	ra,40(sp)
   86bcc:	df000915 	stw	fp,36(sp)
   86bd0:	ddc00815 	stw	r23,32(sp)
   86bd4:	dd800715 	stw	r22,28(sp)
   86bd8:	dd400615 	stw	r21,24(sp)
   86bdc:	dd000515 	stw	r20,20(sp)
   86be0:	dcc00415 	stw	r19,16(sp)
   86be4:	dc400215 	stw	r17,8(sp)
   86be8:	dc000115 	stw	r16,4(sp)
   86bec:	288002c4 	addi	r2,r5,11
   86bf0:	00c00584 	movi	r3,22
   86bf4:	2025883a 	mov	r18,r4
   86bf8:	18807f2e 	bgeu	r3,r2,86df8 <_malloc_r+0x238>
   86bfc:	047ffe04 	movi	r17,-8
   86c00:	1462703a 	and	r17,r2,r17
   86c04:	8800a316 	blt	r17,zero,86e94 <_malloc_r+0x2d4>
   86c08:	8940a236 	bltu	r17,r5,86e94 <_malloc_r+0x2d4>
   86c0c:	008ed400 	call	8ed40 <__malloc_lock>
   86c10:	00807dc4 	movi	r2,503
   86c14:	1441e92e 	bgeu	r2,r17,873bc <_malloc_r+0x7fc>
   86c18:	8804d27a 	srli	r2,r17,9
   86c1c:	1000a126 	beq	r2,zero,86ea4 <_malloc_r+0x2e4>
   86c20:	00c00104 	movi	r3,4
   86c24:	18811e36 	bltu	r3,r2,870a0 <_malloc_r+0x4e0>
   86c28:	8804d1ba 	srli	r2,r17,6
   86c2c:	12000e44 	addi	r8,r2,57
   86c30:	11c00e04 	addi	r7,r2,56
   86c34:	4209883a 	add	r4,r8,r8
   86c38:	04c00274 	movhi	r19,9
   86c3c:	2109883a 	add	r4,r4,r4
   86c40:	9cc5e604 	addi	r19,r19,6040
   86c44:	2109883a 	add	r4,r4,r4
   86c48:	9909883a 	add	r4,r19,r4
   86c4c:	24000117 	ldw	r16,4(r4)
   86c50:	213ffe04 	addi	r4,r4,-8
   86c54:	24009726 	beq	r4,r16,86eb4 <_malloc_r+0x2f4>
   86c58:	80800117 	ldw	r2,4(r16)
   86c5c:	01bfff04 	movi	r6,-4
   86c60:	014003c4 	movi	r5,15
   86c64:	1184703a 	and	r2,r2,r6
   86c68:	1447c83a 	sub	r3,r2,r17
   86c6c:	28c00716 	blt	r5,r3,86c8c <_malloc_r+0xcc>
   86c70:	1800920e 	bge	r3,zero,86ebc <_malloc_r+0x2fc>
   86c74:	84000317 	ldw	r16,12(r16)
   86c78:	24008e26 	beq	r4,r16,86eb4 <_malloc_r+0x2f4>
   86c7c:	80800117 	ldw	r2,4(r16)
   86c80:	1184703a 	and	r2,r2,r6
   86c84:	1447c83a 	sub	r3,r2,r17
   86c88:	28fff90e 	bge	r5,r3,86c70 <__alt_data_end+0xfffa51f0>
   86c8c:	3809883a 	mov	r4,r7
   86c90:	01800274 	movhi	r6,9
   86c94:	9c000417 	ldw	r16,16(r19)
   86c98:	3185e604 	addi	r6,r6,6040
   86c9c:	32000204 	addi	r8,r6,8
   86ca0:	82013426 	beq	r16,r8,87174 <_malloc_r+0x5b4>
   86ca4:	80c00117 	ldw	r3,4(r16)
   86ca8:	00bfff04 	movi	r2,-4
   86cac:	188e703a 	and	r7,r3,r2
   86cb0:	3c45c83a 	sub	r2,r7,r17
   86cb4:	00c003c4 	movi	r3,15
   86cb8:	18811f16 	blt	r3,r2,87138 <_malloc_r+0x578>
   86cbc:	32000515 	stw	r8,20(r6)
   86cc0:	32000415 	stw	r8,16(r6)
   86cc4:	10007f0e 	bge	r2,zero,86ec4 <_malloc_r+0x304>
   86cc8:	00807fc4 	movi	r2,511
   86ccc:	11c0fd36 	bltu	r2,r7,870c4 <_malloc_r+0x504>
   86cd0:	3806d0fa 	srli	r3,r7,3
   86cd4:	01c00044 	movi	r7,1
   86cd8:	30800117 	ldw	r2,4(r6)
   86cdc:	19400044 	addi	r5,r3,1
   86ce0:	294b883a 	add	r5,r5,r5
   86ce4:	1807d0ba 	srai	r3,r3,2
   86ce8:	294b883a 	add	r5,r5,r5
   86cec:	294b883a 	add	r5,r5,r5
   86cf0:	298b883a 	add	r5,r5,r6
   86cf4:	38c6983a 	sll	r3,r7,r3
   86cf8:	29c00017 	ldw	r7,0(r5)
   86cfc:	2a7ffe04 	addi	r9,r5,-8
   86d00:	1886b03a 	or	r3,r3,r2
   86d04:	82400315 	stw	r9,12(r16)
   86d08:	81c00215 	stw	r7,8(r16)
   86d0c:	30c00115 	stw	r3,4(r6)
   86d10:	2c000015 	stw	r16,0(r5)
   86d14:	3c000315 	stw	r16,12(r7)
   86d18:	2005d0ba 	srai	r2,r4,2
   86d1c:	01400044 	movi	r5,1
   86d20:	288a983a 	sll	r5,r5,r2
   86d24:	19406f36 	bltu	r3,r5,86ee4 <_malloc_r+0x324>
   86d28:	28c4703a 	and	r2,r5,r3
   86d2c:	10000a1e 	bne	r2,zero,86d58 <_malloc_r+0x198>
   86d30:	00bfff04 	movi	r2,-4
   86d34:	294b883a 	add	r5,r5,r5
   86d38:	2088703a 	and	r4,r4,r2
   86d3c:	28c4703a 	and	r2,r5,r3
   86d40:	21000104 	addi	r4,r4,4
   86d44:	1000041e 	bne	r2,zero,86d58 <_malloc_r+0x198>
   86d48:	294b883a 	add	r5,r5,r5
   86d4c:	28c4703a 	and	r2,r5,r3
   86d50:	21000104 	addi	r4,r4,4
   86d54:	103ffc26 	beq	r2,zero,86d48 <__alt_data_end+0xfffa52c8>
   86d58:	02bfff04 	movi	r10,-4
   86d5c:	024003c4 	movi	r9,15
   86d60:	21800044 	addi	r6,r4,1
   86d64:	318d883a 	add	r6,r6,r6
   86d68:	318d883a 	add	r6,r6,r6
   86d6c:	318d883a 	add	r6,r6,r6
   86d70:	998d883a 	add	r6,r19,r6
   86d74:	333ffe04 	addi	r12,r6,-8
   86d78:	2017883a 	mov	r11,r4
   86d7c:	31800104 	addi	r6,r6,4
   86d80:	34000017 	ldw	r16,0(r6)
   86d84:	31fffd04 	addi	r7,r6,-12
   86d88:	81c0041e 	bne	r16,r7,86d9c <_malloc_r+0x1dc>
   86d8c:	0000fb06 	br	8717c <_malloc_r+0x5bc>
   86d90:	1801030e 	bge	r3,zero,871a0 <_malloc_r+0x5e0>
   86d94:	84000317 	ldw	r16,12(r16)
   86d98:	81c0f826 	beq	r16,r7,8717c <_malloc_r+0x5bc>
   86d9c:	80800117 	ldw	r2,4(r16)
   86da0:	1284703a 	and	r2,r2,r10
   86da4:	1447c83a 	sub	r3,r2,r17
   86da8:	48fff90e 	bge	r9,r3,86d90 <__alt_data_end+0xfffa5310>
   86dac:	80800317 	ldw	r2,12(r16)
   86db0:	81000217 	ldw	r4,8(r16)
   86db4:	89400054 	ori	r5,r17,1
   86db8:	81400115 	stw	r5,4(r16)
   86dbc:	20800315 	stw	r2,12(r4)
   86dc0:	11000215 	stw	r4,8(r2)
   86dc4:	8463883a 	add	r17,r16,r17
   86dc8:	9c400515 	stw	r17,20(r19)
   86dcc:	9c400415 	stw	r17,16(r19)
   86dd0:	18800054 	ori	r2,r3,1
   86dd4:	88800115 	stw	r2,4(r17)
   86dd8:	8a000315 	stw	r8,12(r17)
   86ddc:	8a000215 	stw	r8,8(r17)
   86de0:	88e3883a 	add	r17,r17,r3
   86de4:	88c00015 	stw	r3,0(r17)
   86de8:	9009883a 	mov	r4,r18
   86dec:	008ed640 	call	8ed64 <__malloc_unlock>
   86df0:	80800204 	addi	r2,r16,8
   86df4:	00001b06 	br	86e64 <_malloc_r+0x2a4>
   86df8:	04400404 	movi	r17,16
   86dfc:	89402536 	bltu	r17,r5,86e94 <_malloc_r+0x2d4>
   86e00:	008ed400 	call	8ed40 <__malloc_lock>
   86e04:	00800184 	movi	r2,6
   86e08:	01000084 	movi	r4,2
   86e0c:	04c00274 	movhi	r19,9
   86e10:	1085883a 	add	r2,r2,r2
   86e14:	9cc5e604 	addi	r19,r19,6040
   86e18:	1085883a 	add	r2,r2,r2
   86e1c:	9885883a 	add	r2,r19,r2
   86e20:	14000117 	ldw	r16,4(r2)
   86e24:	10fffe04 	addi	r3,r2,-8
   86e28:	80c0d926 	beq	r16,r3,87190 <_malloc_r+0x5d0>
   86e2c:	80c00117 	ldw	r3,4(r16)
   86e30:	81000317 	ldw	r4,12(r16)
   86e34:	00bfff04 	movi	r2,-4
   86e38:	1884703a 	and	r2,r3,r2
   86e3c:	81400217 	ldw	r5,8(r16)
   86e40:	8085883a 	add	r2,r16,r2
   86e44:	10c00117 	ldw	r3,4(r2)
   86e48:	29000315 	stw	r4,12(r5)
   86e4c:	21400215 	stw	r5,8(r4)
   86e50:	18c00054 	ori	r3,r3,1
   86e54:	10c00115 	stw	r3,4(r2)
   86e58:	9009883a 	mov	r4,r18
   86e5c:	008ed640 	call	8ed64 <__malloc_unlock>
   86e60:	80800204 	addi	r2,r16,8
   86e64:	dfc00a17 	ldw	ra,40(sp)
   86e68:	df000917 	ldw	fp,36(sp)
   86e6c:	ddc00817 	ldw	r23,32(sp)
   86e70:	dd800717 	ldw	r22,28(sp)
   86e74:	dd400617 	ldw	r21,24(sp)
   86e78:	dd000517 	ldw	r20,20(sp)
   86e7c:	dcc00417 	ldw	r19,16(sp)
   86e80:	dc800317 	ldw	r18,12(sp)
   86e84:	dc400217 	ldw	r17,8(sp)
   86e88:	dc000117 	ldw	r16,4(sp)
   86e8c:	dec00b04 	addi	sp,sp,44
   86e90:	f800283a 	ret
   86e94:	00800304 	movi	r2,12
   86e98:	90800015 	stw	r2,0(r18)
   86e9c:	0005883a 	mov	r2,zero
   86ea0:	003ff006 	br	86e64 <__alt_data_end+0xfffa53e4>
   86ea4:	01002004 	movi	r4,128
   86ea8:	02001004 	movi	r8,64
   86eac:	01c00fc4 	movi	r7,63
   86eb0:	003f6106 	br	86c38 <__alt_data_end+0xfffa51b8>
   86eb4:	4009883a 	mov	r4,r8
   86eb8:	003f7506 	br	86c90 <__alt_data_end+0xfffa5210>
   86ebc:	81000317 	ldw	r4,12(r16)
   86ec0:	003fde06 	br	86e3c <__alt_data_end+0xfffa53bc>
   86ec4:	81c5883a 	add	r2,r16,r7
   86ec8:	11400117 	ldw	r5,4(r2)
   86ecc:	9009883a 	mov	r4,r18
   86ed0:	29400054 	ori	r5,r5,1
   86ed4:	11400115 	stw	r5,4(r2)
   86ed8:	008ed640 	call	8ed64 <__malloc_unlock>
   86edc:	80800204 	addi	r2,r16,8
   86ee0:	003fe006 	br	86e64 <__alt_data_end+0xfffa53e4>
   86ee4:	9c000217 	ldw	r16,8(r19)
   86ee8:	00bfff04 	movi	r2,-4
   86eec:	85800117 	ldw	r22,4(r16)
   86ef0:	b0ac703a 	and	r22,r22,r2
   86ef4:	b4400336 	bltu	r22,r17,86f04 <_malloc_r+0x344>
   86ef8:	b445c83a 	sub	r2,r22,r17
   86efc:	00c003c4 	movi	r3,15
   86f00:	18805d16 	blt	r3,r2,87078 <_malloc_r+0x4b8>
   86f04:	05c00274 	movhi	r23,9
   86f08:	00800274 	movhi	r2,9
   86f0c:	1092c304 	addi	r2,r2,19212
   86f10:	bdcb6d04 	addi	r23,r23,11700
   86f14:	15400017 	ldw	r21,0(r2)
   86f18:	b8c00017 	ldw	r3,0(r23)
   86f1c:	00bfffc4 	movi	r2,-1
   86f20:	858d883a 	add	r6,r16,r22
   86f24:	8d6b883a 	add	r21,r17,r21
   86f28:	1880ea26 	beq	r3,r2,872d4 <_malloc_r+0x714>
   86f2c:	ad4403c4 	addi	r21,r21,4111
   86f30:	00bc0004 	movi	r2,-4096
   86f34:	a8aa703a 	and	r21,r21,r2
   86f38:	a80b883a 	mov	r5,r21
   86f3c:	9009883a 	mov	r4,r18
   86f40:	d9800015 	stw	r6,0(sp)
   86f44:	0088e500 	call	88e50 <_sbrk_r>
   86f48:	1029883a 	mov	r20,r2
   86f4c:	00bfffc4 	movi	r2,-1
   86f50:	d9800017 	ldw	r6,0(sp)
   86f54:	a080e826 	beq	r20,r2,872f8 <_malloc_r+0x738>
   86f58:	a180a636 	bltu	r20,r6,871f4 <_malloc_r+0x634>
   86f5c:	07000274 	movhi	fp,9
   86f60:	e7130b04 	addi	fp,fp,19500
   86f64:	e0800017 	ldw	r2,0(fp)
   86f68:	a887883a 	add	r3,r21,r2
   86f6c:	e0c00015 	stw	r3,0(fp)
   86f70:	3500e626 	beq	r6,r20,8730c <_malloc_r+0x74c>
   86f74:	b9000017 	ldw	r4,0(r23)
   86f78:	00bfffc4 	movi	r2,-1
   86f7c:	2080ee26 	beq	r4,r2,87338 <_malloc_r+0x778>
   86f80:	a185c83a 	sub	r2,r20,r6
   86f84:	10c5883a 	add	r2,r2,r3
   86f88:	e0800015 	stw	r2,0(fp)
   86f8c:	a0c001cc 	andi	r3,r20,7
   86f90:	1800bc26 	beq	r3,zero,87284 <_malloc_r+0x6c4>
   86f94:	a0e9c83a 	sub	r20,r20,r3
   86f98:	00840204 	movi	r2,4104
   86f9c:	a5000204 	addi	r20,r20,8
   86fa0:	10c7c83a 	sub	r3,r2,r3
   86fa4:	a545883a 	add	r2,r20,r21
   86fa8:	1083ffcc 	andi	r2,r2,4095
   86fac:	18abc83a 	sub	r21,r3,r2
   86fb0:	a80b883a 	mov	r5,r21
   86fb4:	9009883a 	mov	r4,r18
   86fb8:	0088e500 	call	88e50 <_sbrk_r>
   86fbc:	00ffffc4 	movi	r3,-1
   86fc0:	10c0e126 	beq	r2,r3,87348 <_malloc_r+0x788>
   86fc4:	1505c83a 	sub	r2,r2,r20
   86fc8:	1545883a 	add	r2,r2,r21
   86fcc:	10800054 	ori	r2,r2,1
   86fd0:	e0c00017 	ldw	r3,0(fp)
   86fd4:	9d000215 	stw	r20,8(r19)
   86fd8:	a0800115 	stw	r2,4(r20)
   86fdc:	a8c7883a 	add	r3,r21,r3
   86fe0:	e0c00015 	stw	r3,0(fp)
   86fe4:	84c00e26 	beq	r16,r19,87020 <_malloc_r+0x460>
   86fe8:	018003c4 	movi	r6,15
   86fec:	3580a72e 	bgeu	r6,r22,8728c <_malloc_r+0x6cc>
   86ff0:	81400117 	ldw	r5,4(r16)
   86ff4:	013ffe04 	movi	r4,-8
   86ff8:	b0bffd04 	addi	r2,r22,-12
   86ffc:	1104703a 	and	r2,r2,r4
   87000:	2900004c 	andi	r4,r5,1
   87004:	2088b03a 	or	r4,r4,r2
   87008:	81000115 	stw	r4,4(r16)
   8700c:	01400144 	movi	r5,5
   87010:	8089883a 	add	r4,r16,r2
   87014:	21400115 	stw	r5,4(r4)
   87018:	21400215 	stw	r5,8(r4)
   8701c:	3080cd36 	bltu	r6,r2,87354 <_malloc_r+0x794>
   87020:	00800274 	movhi	r2,9
   87024:	1092c204 	addi	r2,r2,19208
   87028:	11000017 	ldw	r4,0(r2)
   8702c:	20c0012e 	bgeu	r4,r3,87034 <_malloc_r+0x474>
   87030:	10c00015 	stw	r3,0(r2)
   87034:	00800274 	movhi	r2,9
   87038:	1092c104 	addi	r2,r2,19204
   8703c:	11000017 	ldw	r4,0(r2)
   87040:	9c000217 	ldw	r16,8(r19)
   87044:	20c0012e 	bgeu	r4,r3,8704c <_malloc_r+0x48c>
   87048:	10c00015 	stw	r3,0(r2)
   8704c:	80c00117 	ldw	r3,4(r16)
   87050:	00bfff04 	movi	r2,-4
   87054:	1886703a 	and	r3,r3,r2
   87058:	1c45c83a 	sub	r2,r3,r17
   8705c:	1c400236 	bltu	r3,r17,87068 <_malloc_r+0x4a8>
   87060:	00c003c4 	movi	r3,15
   87064:	18800416 	blt	r3,r2,87078 <_malloc_r+0x4b8>
   87068:	9009883a 	mov	r4,r18
   8706c:	008ed640 	call	8ed64 <__malloc_unlock>
   87070:	0005883a 	mov	r2,zero
   87074:	003f7b06 	br	86e64 <__alt_data_end+0xfffa53e4>
   87078:	88c00054 	ori	r3,r17,1
   8707c:	80c00115 	stw	r3,4(r16)
   87080:	8463883a 	add	r17,r16,r17
   87084:	10800054 	ori	r2,r2,1
   87088:	9c400215 	stw	r17,8(r19)
   8708c:	88800115 	stw	r2,4(r17)
   87090:	9009883a 	mov	r4,r18
   87094:	008ed640 	call	8ed64 <__malloc_unlock>
   87098:	80800204 	addi	r2,r16,8
   8709c:	003f7106 	br	86e64 <__alt_data_end+0xfffa53e4>
   870a0:	00c00504 	movi	r3,20
   870a4:	18804a2e 	bgeu	r3,r2,871d0 <_malloc_r+0x610>
   870a8:	00c01504 	movi	r3,84
   870ac:	18806e36 	bltu	r3,r2,87268 <_malloc_r+0x6a8>
   870b0:	8804d33a 	srli	r2,r17,12
   870b4:	12001bc4 	addi	r8,r2,111
   870b8:	11c01b84 	addi	r7,r2,110
   870bc:	4209883a 	add	r4,r8,r8
   870c0:	003edd06 	br	86c38 <__alt_data_end+0xfffa51b8>
   870c4:	3804d27a 	srli	r2,r7,9
   870c8:	00c00104 	movi	r3,4
   870cc:	1880442e 	bgeu	r3,r2,871e0 <_malloc_r+0x620>
   870d0:	00c00504 	movi	r3,20
   870d4:	18808136 	bltu	r3,r2,872dc <_malloc_r+0x71c>
   870d8:	11401704 	addi	r5,r2,92
   870dc:	10c016c4 	addi	r3,r2,91
   870e0:	294b883a 	add	r5,r5,r5
   870e4:	294b883a 	add	r5,r5,r5
   870e8:	294b883a 	add	r5,r5,r5
   870ec:	994b883a 	add	r5,r19,r5
   870f0:	28800017 	ldw	r2,0(r5)
   870f4:	01800274 	movhi	r6,9
   870f8:	297ffe04 	addi	r5,r5,-8
   870fc:	3185e604 	addi	r6,r6,6040
   87100:	28806526 	beq	r5,r2,87298 <_malloc_r+0x6d8>
   87104:	01bfff04 	movi	r6,-4
   87108:	10c00117 	ldw	r3,4(r2)
   8710c:	1986703a 	and	r3,r3,r6
   87110:	38c0022e 	bgeu	r7,r3,8711c <_malloc_r+0x55c>
   87114:	10800217 	ldw	r2,8(r2)
   87118:	28bffb1e 	bne	r5,r2,87108 <__alt_data_end+0xfffa5688>
   8711c:	11400317 	ldw	r5,12(r2)
   87120:	98c00117 	ldw	r3,4(r19)
   87124:	81400315 	stw	r5,12(r16)
   87128:	80800215 	stw	r2,8(r16)
   8712c:	2c000215 	stw	r16,8(r5)
   87130:	14000315 	stw	r16,12(r2)
   87134:	003ef806 	br	86d18 <__alt_data_end+0xfffa5298>
   87138:	88c00054 	ori	r3,r17,1
   8713c:	80c00115 	stw	r3,4(r16)
   87140:	8463883a 	add	r17,r16,r17
   87144:	34400515 	stw	r17,20(r6)
   87148:	34400415 	stw	r17,16(r6)
   8714c:	10c00054 	ori	r3,r2,1
   87150:	8a000315 	stw	r8,12(r17)
   87154:	8a000215 	stw	r8,8(r17)
   87158:	88c00115 	stw	r3,4(r17)
   8715c:	88a3883a 	add	r17,r17,r2
   87160:	88800015 	stw	r2,0(r17)
   87164:	9009883a 	mov	r4,r18
   87168:	008ed640 	call	8ed64 <__malloc_unlock>
   8716c:	80800204 	addi	r2,r16,8
   87170:	003f3c06 	br	86e64 <__alt_data_end+0xfffa53e4>
   87174:	30c00117 	ldw	r3,4(r6)
   87178:	003ee706 	br	86d18 <__alt_data_end+0xfffa5298>
   8717c:	5ac00044 	addi	r11,r11,1
   87180:	588000cc 	andi	r2,r11,3
   87184:	31800204 	addi	r6,r6,8
   87188:	103efd1e 	bne	r2,zero,86d80 <__alt_data_end+0xfffa5300>
   8718c:	00002406 	br	87220 <_malloc_r+0x660>
   87190:	14000317 	ldw	r16,12(r2)
   87194:	143f251e 	bne	r2,r16,86e2c <__alt_data_end+0xfffa53ac>
   87198:	21000084 	addi	r4,r4,2
   8719c:	003ebc06 	br	86c90 <__alt_data_end+0xfffa5210>
   871a0:	8085883a 	add	r2,r16,r2
   871a4:	10c00117 	ldw	r3,4(r2)
   871a8:	81000317 	ldw	r4,12(r16)
   871ac:	81400217 	ldw	r5,8(r16)
   871b0:	18c00054 	ori	r3,r3,1
   871b4:	10c00115 	stw	r3,4(r2)
   871b8:	29000315 	stw	r4,12(r5)
   871bc:	21400215 	stw	r5,8(r4)
   871c0:	9009883a 	mov	r4,r18
   871c4:	008ed640 	call	8ed64 <__malloc_unlock>
   871c8:	80800204 	addi	r2,r16,8
   871cc:	003f2506 	br	86e64 <__alt_data_end+0xfffa53e4>
   871d0:	12001704 	addi	r8,r2,92
   871d4:	11c016c4 	addi	r7,r2,91
   871d8:	4209883a 	add	r4,r8,r8
   871dc:	003e9606 	br	86c38 <__alt_data_end+0xfffa51b8>
   871e0:	3804d1ba 	srli	r2,r7,6
   871e4:	11400e44 	addi	r5,r2,57
   871e8:	10c00e04 	addi	r3,r2,56
   871ec:	294b883a 	add	r5,r5,r5
   871f0:	003fbc06 	br	870e4 <__alt_data_end+0xfffa5664>
   871f4:	84ff5926 	beq	r16,r19,86f5c <__alt_data_end+0xfffa54dc>
   871f8:	00800274 	movhi	r2,9
   871fc:	1085e604 	addi	r2,r2,6040
   87200:	14000217 	ldw	r16,8(r2)
   87204:	00bfff04 	movi	r2,-4
   87208:	80c00117 	ldw	r3,4(r16)
   8720c:	1886703a 	and	r3,r3,r2
   87210:	003f9106 	br	87058 <__alt_data_end+0xfffa55d8>
   87214:	60800217 	ldw	r2,8(r12)
   87218:	213fffc4 	addi	r4,r4,-1
   8721c:	1300651e 	bne	r2,r12,873b4 <_malloc_r+0x7f4>
   87220:	208000cc 	andi	r2,r4,3
   87224:	633ffe04 	addi	r12,r12,-8
   87228:	103ffa1e 	bne	r2,zero,87214 <__alt_data_end+0xfffa5794>
   8722c:	98800117 	ldw	r2,4(r19)
   87230:	0146303a 	nor	r3,zero,r5
   87234:	1884703a 	and	r2,r3,r2
   87238:	98800115 	stw	r2,4(r19)
   8723c:	294b883a 	add	r5,r5,r5
   87240:	117f2836 	bltu	r2,r5,86ee4 <__alt_data_end+0xfffa5464>
   87244:	283f2726 	beq	r5,zero,86ee4 <__alt_data_end+0xfffa5464>
   87248:	2886703a 	and	r3,r5,r2
   8724c:	5809883a 	mov	r4,r11
   87250:	183ec31e 	bne	r3,zero,86d60 <__alt_data_end+0xfffa52e0>
   87254:	294b883a 	add	r5,r5,r5
   87258:	2886703a 	and	r3,r5,r2
   8725c:	21000104 	addi	r4,r4,4
   87260:	183ffc26 	beq	r3,zero,87254 <__alt_data_end+0xfffa57d4>
   87264:	003ebe06 	br	86d60 <__alt_data_end+0xfffa52e0>
   87268:	00c05504 	movi	r3,340
   8726c:	18801236 	bltu	r3,r2,872b8 <_malloc_r+0x6f8>
   87270:	8804d3fa 	srli	r2,r17,15
   87274:	12001e04 	addi	r8,r2,120
   87278:	11c01dc4 	addi	r7,r2,119
   8727c:	4209883a 	add	r4,r8,r8
   87280:	003e6d06 	br	86c38 <__alt_data_end+0xfffa51b8>
   87284:	00c40004 	movi	r3,4096
   87288:	003f4606 	br	86fa4 <__alt_data_end+0xfffa5524>
   8728c:	00800044 	movi	r2,1
   87290:	a0800115 	stw	r2,4(r20)
   87294:	003f7406 	br	87068 <__alt_data_end+0xfffa55e8>
   87298:	1805d0ba 	srai	r2,r3,2
   8729c:	01c00044 	movi	r7,1
   872a0:	30c00117 	ldw	r3,4(r6)
   872a4:	388e983a 	sll	r7,r7,r2
   872a8:	2805883a 	mov	r2,r5
   872ac:	38c6b03a 	or	r3,r7,r3
   872b0:	30c00115 	stw	r3,4(r6)
   872b4:	003f9b06 	br	87124 <__alt_data_end+0xfffa56a4>
   872b8:	00c15504 	movi	r3,1364
   872bc:	18801a36 	bltu	r3,r2,87328 <_malloc_r+0x768>
   872c0:	8804d4ba 	srli	r2,r17,18
   872c4:	12001f44 	addi	r8,r2,125
   872c8:	11c01f04 	addi	r7,r2,124
   872cc:	4209883a 	add	r4,r8,r8
   872d0:	003e5906 	br	86c38 <__alt_data_end+0xfffa51b8>
   872d4:	ad400404 	addi	r21,r21,16
   872d8:	003f1706 	br	86f38 <__alt_data_end+0xfffa54b8>
   872dc:	00c01504 	movi	r3,84
   872e0:	18802336 	bltu	r3,r2,87370 <_malloc_r+0x7b0>
   872e4:	3804d33a 	srli	r2,r7,12
   872e8:	11401bc4 	addi	r5,r2,111
   872ec:	10c01b84 	addi	r3,r2,110
   872f0:	294b883a 	add	r5,r5,r5
   872f4:	003f7b06 	br	870e4 <__alt_data_end+0xfffa5664>
   872f8:	9c000217 	ldw	r16,8(r19)
   872fc:	00bfff04 	movi	r2,-4
   87300:	80c00117 	ldw	r3,4(r16)
   87304:	1886703a 	and	r3,r3,r2
   87308:	003f5306 	br	87058 <__alt_data_end+0xfffa55d8>
   8730c:	3083ffcc 	andi	r2,r6,4095
   87310:	103f181e 	bne	r2,zero,86f74 <__alt_data_end+0xfffa54f4>
   87314:	99000217 	ldw	r4,8(r19)
   87318:	b545883a 	add	r2,r22,r21
   8731c:	10800054 	ori	r2,r2,1
   87320:	20800115 	stw	r2,4(r4)
   87324:	003f3e06 	br	87020 <__alt_data_end+0xfffa55a0>
   87328:	01003f84 	movi	r4,254
   8732c:	02001fc4 	movi	r8,127
   87330:	01c01f84 	movi	r7,126
   87334:	003e4006 	br	86c38 <__alt_data_end+0xfffa51b8>
   87338:	00800274 	movhi	r2,9
   8733c:	108b6d04 	addi	r2,r2,11700
   87340:	15000015 	stw	r20,0(r2)
   87344:	003f1106 	br	86f8c <__alt_data_end+0xfffa550c>
   87348:	00800044 	movi	r2,1
   8734c:	002b883a 	mov	r21,zero
   87350:	003f1f06 	br	86fd0 <__alt_data_end+0xfffa5550>
   87354:	81400204 	addi	r5,r16,8
   87358:	9009883a 	mov	r4,r18
   8735c:	0085f780 	call	85f78 <_free_r>
   87360:	00800274 	movhi	r2,9
   87364:	10930b04 	addi	r2,r2,19500
   87368:	10c00017 	ldw	r3,0(r2)
   8736c:	003f2c06 	br	87020 <__alt_data_end+0xfffa55a0>
   87370:	00c05504 	movi	r3,340
   87374:	18800536 	bltu	r3,r2,8738c <_malloc_r+0x7cc>
   87378:	3804d3fa 	srli	r2,r7,15
   8737c:	11401e04 	addi	r5,r2,120
   87380:	10c01dc4 	addi	r3,r2,119
   87384:	294b883a 	add	r5,r5,r5
   87388:	003f5606 	br	870e4 <__alt_data_end+0xfffa5664>
   8738c:	00c15504 	movi	r3,1364
   87390:	18800536 	bltu	r3,r2,873a8 <_malloc_r+0x7e8>
   87394:	3804d4ba 	srli	r2,r7,18
   87398:	11401f44 	addi	r5,r2,125
   8739c:	10c01f04 	addi	r3,r2,124
   873a0:	294b883a 	add	r5,r5,r5
   873a4:	003f4f06 	br	870e4 <__alt_data_end+0xfffa5664>
   873a8:	01403f84 	movi	r5,254
   873ac:	00c01f84 	movi	r3,126
   873b0:	003f4c06 	br	870e4 <__alt_data_end+0xfffa5664>
   873b4:	98800117 	ldw	r2,4(r19)
   873b8:	003fa006 	br	8723c <__alt_data_end+0xfffa57bc>
   873bc:	8808d0fa 	srli	r4,r17,3
   873c0:	20800044 	addi	r2,r4,1
   873c4:	1085883a 	add	r2,r2,r2
   873c8:	003e9006 	br	86e0c <__alt_data_end+0xfffa538c>

000873cc <memchr>:
   873cc:	208000cc 	andi	r2,r4,3
   873d0:	280f883a 	mov	r7,r5
   873d4:	10003426 	beq	r2,zero,874a8 <memchr+0xdc>
   873d8:	30bfffc4 	addi	r2,r6,-1
   873dc:	30001a26 	beq	r6,zero,87448 <memchr+0x7c>
   873e0:	20c00003 	ldbu	r3,0(r4)
   873e4:	29803fcc 	andi	r6,r5,255
   873e8:	30c0051e 	bne	r6,r3,87400 <memchr+0x34>
   873ec:	00001806 	br	87450 <memchr+0x84>
   873f0:	10001526 	beq	r2,zero,87448 <memchr+0x7c>
   873f4:	20c00003 	ldbu	r3,0(r4)
   873f8:	10bfffc4 	addi	r2,r2,-1
   873fc:	30c01426 	beq	r6,r3,87450 <memchr+0x84>
   87400:	21000044 	addi	r4,r4,1
   87404:	20c000cc 	andi	r3,r4,3
   87408:	183ff91e 	bne	r3,zero,873f0 <__alt_data_end+0xfffa5970>
   8740c:	020000c4 	movi	r8,3
   87410:	40801136 	bltu	r8,r2,87458 <memchr+0x8c>
   87414:	10000c26 	beq	r2,zero,87448 <memchr+0x7c>
   87418:	20c00003 	ldbu	r3,0(r4)
   8741c:	29403fcc 	andi	r5,r5,255
   87420:	28c00b26 	beq	r5,r3,87450 <memchr+0x84>
   87424:	20c00044 	addi	r3,r4,1
   87428:	39803fcc 	andi	r6,r7,255
   8742c:	2089883a 	add	r4,r4,r2
   87430:	00000306 	br	87440 <memchr+0x74>
   87434:	18c00044 	addi	r3,r3,1
   87438:	197fffc3 	ldbu	r5,-1(r3)
   8743c:	31400526 	beq	r6,r5,87454 <memchr+0x88>
   87440:	1805883a 	mov	r2,r3
   87444:	20fffb1e 	bne	r4,r3,87434 <__alt_data_end+0xfffa59b4>
   87448:	0005883a 	mov	r2,zero
   8744c:	f800283a 	ret
   87450:	2005883a 	mov	r2,r4
   87454:	f800283a 	ret
   87458:	28c03fcc 	andi	r3,r5,255
   8745c:	1812923a 	slli	r9,r3,8
   87460:	02ffbff4 	movhi	r11,65279
   87464:	02a02074 	movhi	r10,32897
   87468:	48d2b03a 	or	r9,r9,r3
   8746c:	4806943a 	slli	r3,r9,16
   87470:	5affbfc4 	addi	r11,r11,-257
   87474:	52a02004 	addi	r10,r10,-32640
   87478:	48d2b03a 	or	r9,r9,r3
   8747c:	20c00017 	ldw	r3,0(r4)
   87480:	48c6f03a 	xor	r3,r9,r3
   87484:	1acd883a 	add	r6,r3,r11
   87488:	00c6303a 	nor	r3,zero,r3
   8748c:	30c6703a 	and	r3,r6,r3
   87490:	1a86703a 	and	r3,r3,r10
   87494:	183fe01e 	bne	r3,zero,87418 <__alt_data_end+0xfffa5998>
   87498:	10bfff04 	addi	r2,r2,-4
   8749c:	21000104 	addi	r4,r4,4
   874a0:	40bff636 	bltu	r8,r2,8747c <__alt_data_end+0xfffa59fc>
   874a4:	003fdb06 	br	87414 <__alt_data_end+0xfffa5994>
   874a8:	3005883a 	mov	r2,r6
   874ac:	003fd706 	br	8740c <__alt_data_end+0xfffa598c>

000874b0 <memcpy>:
   874b0:	defffd04 	addi	sp,sp,-12
   874b4:	dfc00215 	stw	ra,8(sp)
   874b8:	dc400115 	stw	r17,4(sp)
   874bc:	dc000015 	stw	r16,0(sp)
   874c0:	00c003c4 	movi	r3,15
   874c4:	2005883a 	mov	r2,r4
   874c8:	1980452e 	bgeu	r3,r6,875e0 <memcpy+0x130>
   874cc:	2906b03a 	or	r3,r5,r4
   874d0:	18c000cc 	andi	r3,r3,3
   874d4:	1800441e 	bne	r3,zero,875e8 <memcpy+0x138>
   874d8:	347ffc04 	addi	r17,r6,-16
   874dc:	8822d13a 	srli	r17,r17,4
   874e0:	28c00104 	addi	r3,r5,4
   874e4:	23400104 	addi	r13,r4,4
   874e8:	8820913a 	slli	r16,r17,4
   874ec:	2b000204 	addi	r12,r5,8
   874f0:	22c00204 	addi	r11,r4,8
   874f4:	84000504 	addi	r16,r16,20
   874f8:	2a800304 	addi	r10,r5,12
   874fc:	22400304 	addi	r9,r4,12
   87500:	2c21883a 	add	r16,r5,r16
   87504:	2811883a 	mov	r8,r5
   87508:	200f883a 	mov	r7,r4
   8750c:	41000017 	ldw	r4,0(r8)
   87510:	1fc00017 	ldw	ra,0(r3)
   87514:	63c00017 	ldw	r15,0(r12)
   87518:	39000015 	stw	r4,0(r7)
   8751c:	53800017 	ldw	r14,0(r10)
   87520:	6fc00015 	stw	ra,0(r13)
   87524:	5bc00015 	stw	r15,0(r11)
   87528:	4b800015 	stw	r14,0(r9)
   8752c:	18c00404 	addi	r3,r3,16
   87530:	39c00404 	addi	r7,r7,16
   87534:	42000404 	addi	r8,r8,16
   87538:	6b400404 	addi	r13,r13,16
   8753c:	63000404 	addi	r12,r12,16
   87540:	5ac00404 	addi	r11,r11,16
   87544:	52800404 	addi	r10,r10,16
   87548:	4a400404 	addi	r9,r9,16
   8754c:	1c3fef1e 	bne	r3,r16,8750c <__alt_data_end+0xfffa5a8c>
   87550:	89c00044 	addi	r7,r17,1
   87554:	380e913a 	slli	r7,r7,4
   87558:	310003cc 	andi	r4,r6,15
   8755c:	02c000c4 	movi	r11,3
   87560:	11c7883a 	add	r3,r2,r7
   87564:	29cb883a 	add	r5,r5,r7
   87568:	5900212e 	bgeu	r11,r4,875f0 <memcpy+0x140>
   8756c:	1813883a 	mov	r9,r3
   87570:	2811883a 	mov	r8,r5
   87574:	200f883a 	mov	r7,r4
   87578:	42800017 	ldw	r10,0(r8)
   8757c:	4a400104 	addi	r9,r9,4
   87580:	39ffff04 	addi	r7,r7,-4
   87584:	4abfff15 	stw	r10,-4(r9)
   87588:	42000104 	addi	r8,r8,4
   8758c:	59fffa36 	bltu	r11,r7,87578 <__alt_data_end+0xfffa5af8>
   87590:	213fff04 	addi	r4,r4,-4
   87594:	2008d0ba 	srli	r4,r4,2
   87598:	318000cc 	andi	r6,r6,3
   8759c:	21000044 	addi	r4,r4,1
   875a0:	2109883a 	add	r4,r4,r4
   875a4:	2109883a 	add	r4,r4,r4
   875a8:	1907883a 	add	r3,r3,r4
   875ac:	290b883a 	add	r5,r5,r4
   875b0:	30000626 	beq	r6,zero,875cc <memcpy+0x11c>
   875b4:	198d883a 	add	r6,r3,r6
   875b8:	29c00003 	ldbu	r7,0(r5)
   875bc:	18c00044 	addi	r3,r3,1
   875c0:	29400044 	addi	r5,r5,1
   875c4:	19ffffc5 	stb	r7,-1(r3)
   875c8:	19bffb1e 	bne	r3,r6,875b8 <__alt_data_end+0xfffa5b38>
   875cc:	dfc00217 	ldw	ra,8(sp)
   875d0:	dc400117 	ldw	r17,4(sp)
   875d4:	dc000017 	ldw	r16,0(sp)
   875d8:	dec00304 	addi	sp,sp,12
   875dc:	f800283a 	ret
   875e0:	2007883a 	mov	r3,r4
   875e4:	003ff206 	br	875b0 <__alt_data_end+0xfffa5b30>
   875e8:	2007883a 	mov	r3,r4
   875ec:	003ff106 	br	875b4 <__alt_data_end+0xfffa5b34>
   875f0:	200d883a 	mov	r6,r4
   875f4:	003fee06 	br	875b0 <__alt_data_end+0xfffa5b30>

000875f8 <memmove>:
   875f8:	2005883a 	mov	r2,r4
   875fc:	29000b2e 	bgeu	r5,r4,8762c <memmove+0x34>
   87600:	298f883a 	add	r7,r5,r6
   87604:	21c0092e 	bgeu	r4,r7,8762c <memmove+0x34>
   87608:	2187883a 	add	r3,r4,r6
   8760c:	198bc83a 	sub	r5,r3,r6
   87610:	30004826 	beq	r6,zero,87734 <memmove+0x13c>
   87614:	39ffffc4 	addi	r7,r7,-1
   87618:	39000003 	ldbu	r4,0(r7)
   8761c:	18ffffc4 	addi	r3,r3,-1
   87620:	19000005 	stb	r4,0(r3)
   87624:	28fffb1e 	bne	r5,r3,87614 <__alt_data_end+0xfffa5b94>
   87628:	f800283a 	ret
   8762c:	00c003c4 	movi	r3,15
   87630:	1980412e 	bgeu	r3,r6,87738 <memmove+0x140>
   87634:	2886b03a 	or	r3,r5,r2
   87638:	18c000cc 	andi	r3,r3,3
   8763c:	1800401e 	bne	r3,zero,87740 <memmove+0x148>
   87640:	33fffc04 	addi	r15,r6,-16
   87644:	781ed13a 	srli	r15,r15,4
   87648:	28c00104 	addi	r3,r5,4
   8764c:	13400104 	addi	r13,r2,4
   87650:	781c913a 	slli	r14,r15,4
   87654:	2b000204 	addi	r12,r5,8
   87658:	12c00204 	addi	r11,r2,8
   8765c:	73800504 	addi	r14,r14,20
   87660:	2a800304 	addi	r10,r5,12
   87664:	12400304 	addi	r9,r2,12
   87668:	2b9d883a 	add	r14,r5,r14
   8766c:	2811883a 	mov	r8,r5
   87670:	100f883a 	mov	r7,r2
   87674:	41000017 	ldw	r4,0(r8)
   87678:	39c00404 	addi	r7,r7,16
   8767c:	18c00404 	addi	r3,r3,16
   87680:	393ffc15 	stw	r4,-16(r7)
   87684:	193ffc17 	ldw	r4,-16(r3)
   87688:	6b400404 	addi	r13,r13,16
   8768c:	5ac00404 	addi	r11,r11,16
   87690:	693ffc15 	stw	r4,-16(r13)
   87694:	61000017 	ldw	r4,0(r12)
   87698:	4a400404 	addi	r9,r9,16
   8769c:	42000404 	addi	r8,r8,16
   876a0:	593ffc15 	stw	r4,-16(r11)
   876a4:	51000017 	ldw	r4,0(r10)
   876a8:	63000404 	addi	r12,r12,16
   876ac:	52800404 	addi	r10,r10,16
   876b0:	493ffc15 	stw	r4,-16(r9)
   876b4:	1bbfef1e 	bne	r3,r14,87674 <__alt_data_end+0xfffa5bf4>
   876b8:	79000044 	addi	r4,r15,1
   876bc:	2008913a 	slli	r4,r4,4
   876c0:	328003cc 	andi	r10,r6,15
   876c4:	02c000c4 	movi	r11,3
   876c8:	1107883a 	add	r3,r2,r4
   876cc:	290b883a 	add	r5,r5,r4
   876d0:	5a801e2e 	bgeu	r11,r10,8774c <memmove+0x154>
   876d4:	1813883a 	mov	r9,r3
   876d8:	2811883a 	mov	r8,r5
   876dc:	500f883a 	mov	r7,r10
   876e0:	41000017 	ldw	r4,0(r8)
   876e4:	4a400104 	addi	r9,r9,4
   876e8:	39ffff04 	addi	r7,r7,-4
   876ec:	493fff15 	stw	r4,-4(r9)
   876f0:	42000104 	addi	r8,r8,4
   876f4:	59fffa36 	bltu	r11,r7,876e0 <__alt_data_end+0xfffa5c60>
   876f8:	513fff04 	addi	r4,r10,-4
   876fc:	2008d0ba 	srli	r4,r4,2
   87700:	318000cc 	andi	r6,r6,3
   87704:	21000044 	addi	r4,r4,1
   87708:	2109883a 	add	r4,r4,r4
   8770c:	2109883a 	add	r4,r4,r4
   87710:	1907883a 	add	r3,r3,r4
   87714:	290b883a 	add	r5,r5,r4
   87718:	30000b26 	beq	r6,zero,87748 <memmove+0x150>
   8771c:	198d883a 	add	r6,r3,r6
   87720:	29c00003 	ldbu	r7,0(r5)
   87724:	18c00044 	addi	r3,r3,1
   87728:	29400044 	addi	r5,r5,1
   8772c:	19ffffc5 	stb	r7,-1(r3)
   87730:	19bffb1e 	bne	r3,r6,87720 <__alt_data_end+0xfffa5ca0>
   87734:	f800283a 	ret
   87738:	1007883a 	mov	r3,r2
   8773c:	003ff606 	br	87718 <__alt_data_end+0xfffa5c98>
   87740:	1007883a 	mov	r3,r2
   87744:	003ff506 	br	8771c <__alt_data_end+0xfffa5c9c>
   87748:	f800283a 	ret
   8774c:	500d883a 	mov	r6,r10
   87750:	003ff106 	br	87718 <__alt_data_end+0xfffa5c98>

00087754 <memset>:
   87754:	20c000cc 	andi	r3,r4,3
   87758:	2005883a 	mov	r2,r4
   8775c:	18004426 	beq	r3,zero,87870 <memset+0x11c>
   87760:	31ffffc4 	addi	r7,r6,-1
   87764:	30004026 	beq	r6,zero,87868 <memset+0x114>
   87768:	2813883a 	mov	r9,r5
   8776c:	200d883a 	mov	r6,r4
   87770:	2007883a 	mov	r3,r4
   87774:	00000406 	br	87788 <memset+0x34>
   87778:	3a3fffc4 	addi	r8,r7,-1
   8777c:	31800044 	addi	r6,r6,1
   87780:	38003926 	beq	r7,zero,87868 <memset+0x114>
   87784:	400f883a 	mov	r7,r8
   87788:	18c00044 	addi	r3,r3,1
   8778c:	32400005 	stb	r9,0(r6)
   87790:	1a0000cc 	andi	r8,r3,3
   87794:	403ff81e 	bne	r8,zero,87778 <__alt_data_end+0xfffa5cf8>
   87798:	010000c4 	movi	r4,3
   8779c:	21c02d2e 	bgeu	r4,r7,87854 <memset+0x100>
   877a0:	29003fcc 	andi	r4,r5,255
   877a4:	200c923a 	slli	r6,r4,8
   877a8:	3108b03a 	or	r4,r6,r4
   877ac:	200c943a 	slli	r6,r4,16
   877b0:	218cb03a 	or	r6,r4,r6
   877b4:	010003c4 	movi	r4,15
   877b8:	21c0182e 	bgeu	r4,r7,8781c <memset+0xc8>
   877bc:	3b3ffc04 	addi	r12,r7,-16
   877c0:	6018d13a 	srli	r12,r12,4
   877c4:	1a000104 	addi	r8,r3,4
   877c8:	1ac00204 	addi	r11,r3,8
   877cc:	6008913a 	slli	r4,r12,4
   877d0:	1a800304 	addi	r10,r3,12
   877d4:	1813883a 	mov	r9,r3
   877d8:	21000504 	addi	r4,r4,20
   877dc:	1909883a 	add	r4,r3,r4
   877e0:	49800015 	stw	r6,0(r9)
   877e4:	41800015 	stw	r6,0(r8)
   877e8:	59800015 	stw	r6,0(r11)
   877ec:	51800015 	stw	r6,0(r10)
   877f0:	42000404 	addi	r8,r8,16
   877f4:	4a400404 	addi	r9,r9,16
   877f8:	5ac00404 	addi	r11,r11,16
   877fc:	52800404 	addi	r10,r10,16
   87800:	413ff71e 	bne	r8,r4,877e0 <__alt_data_end+0xfffa5d60>
   87804:	63000044 	addi	r12,r12,1
   87808:	6018913a 	slli	r12,r12,4
   8780c:	39c003cc 	andi	r7,r7,15
   87810:	010000c4 	movi	r4,3
   87814:	1b07883a 	add	r3,r3,r12
   87818:	21c00e2e 	bgeu	r4,r7,87854 <memset+0x100>
   8781c:	1813883a 	mov	r9,r3
   87820:	3811883a 	mov	r8,r7
   87824:	010000c4 	movi	r4,3
   87828:	49800015 	stw	r6,0(r9)
   8782c:	423fff04 	addi	r8,r8,-4
   87830:	4a400104 	addi	r9,r9,4
   87834:	223ffc36 	bltu	r4,r8,87828 <__alt_data_end+0xfffa5da8>
   87838:	393fff04 	addi	r4,r7,-4
   8783c:	2008d0ba 	srli	r4,r4,2
   87840:	39c000cc 	andi	r7,r7,3
   87844:	21000044 	addi	r4,r4,1
   87848:	2109883a 	add	r4,r4,r4
   8784c:	2109883a 	add	r4,r4,r4
   87850:	1907883a 	add	r3,r3,r4
   87854:	38000526 	beq	r7,zero,8786c <memset+0x118>
   87858:	19cf883a 	add	r7,r3,r7
   8785c:	19400005 	stb	r5,0(r3)
   87860:	18c00044 	addi	r3,r3,1
   87864:	38fffd1e 	bne	r7,r3,8785c <__alt_data_end+0xfffa5ddc>
   87868:	f800283a 	ret
   8786c:	f800283a 	ret
   87870:	2007883a 	mov	r3,r4
   87874:	300f883a 	mov	r7,r6
   87878:	003fc706 	br	87798 <__alt_data_end+0xfffa5d18>

0008787c <_Balloc>:
   8787c:	20801317 	ldw	r2,76(r4)
   87880:	defffc04 	addi	sp,sp,-16
   87884:	dc400115 	stw	r17,4(sp)
   87888:	dc000015 	stw	r16,0(sp)
   8788c:	dfc00315 	stw	ra,12(sp)
   87890:	dc800215 	stw	r18,8(sp)
   87894:	2023883a 	mov	r17,r4
   87898:	2821883a 	mov	r16,r5
   8789c:	10000f26 	beq	r2,zero,878dc <_Balloc+0x60>
   878a0:	8407883a 	add	r3,r16,r16
   878a4:	18c7883a 	add	r3,r3,r3
   878a8:	10c7883a 	add	r3,r2,r3
   878ac:	18800017 	ldw	r2,0(r3)
   878b0:	10001126 	beq	r2,zero,878f8 <_Balloc+0x7c>
   878b4:	11000017 	ldw	r4,0(r2)
   878b8:	19000015 	stw	r4,0(r3)
   878bc:	10000415 	stw	zero,16(r2)
   878c0:	10000315 	stw	zero,12(r2)
   878c4:	dfc00317 	ldw	ra,12(sp)
   878c8:	dc800217 	ldw	r18,8(sp)
   878cc:	dc400117 	ldw	r17,4(sp)
   878d0:	dc000017 	ldw	r16,0(sp)
   878d4:	dec00404 	addi	sp,sp,16
   878d8:	f800283a 	ret
   878dc:	01800844 	movi	r6,33
   878e0:	01400104 	movi	r5,4
   878e4:	008a7b80 	call	8a7b8 <_calloc_r>
   878e8:	88801315 	stw	r2,76(r17)
   878ec:	103fec1e 	bne	r2,zero,878a0 <__alt_data_end+0xfffa5e20>
   878f0:	0005883a 	mov	r2,zero
   878f4:	003ff306 	br	878c4 <__alt_data_end+0xfffa5e44>
   878f8:	01400044 	movi	r5,1
   878fc:	2c24983a 	sll	r18,r5,r16
   87900:	8809883a 	mov	r4,r17
   87904:	91800144 	addi	r6,r18,5
   87908:	318d883a 	add	r6,r6,r6
   8790c:	318d883a 	add	r6,r6,r6
   87910:	008a7b80 	call	8a7b8 <_calloc_r>
   87914:	103ff626 	beq	r2,zero,878f0 <__alt_data_end+0xfffa5e70>
   87918:	14000115 	stw	r16,4(r2)
   8791c:	14800215 	stw	r18,8(r2)
   87920:	003fe606 	br	878bc <__alt_data_end+0xfffa5e3c>

00087924 <_Bfree>:
   87924:	28000826 	beq	r5,zero,87948 <_Bfree+0x24>
   87928:	28c00117 	ldw	r3,4(r5)
   8792c:	20801317 	ldw	r2,76(r4)
   87930:	18c7883a 	add	r3,r3,r3
   87934:	18c7883a 	add	r3,r3,r3
   87938:	10c5883a 	add	r2,r2,r3
   8793c:	10c00017 	ldw	r3,0(r2)
   87940:	28c00015 	stw	r3,0(r5)
   87944:	11400015 	stw	r5,0(r2)
   87948:	f800283a 	ret

0008794c <__multadd>:
   8794c:	defffa04 	addi	sp,sp,-24
   87950:	dc800315 	stw	r18,12(sp)
   87954:	dc400215 	stw	r17,8(sp)
   87958:	dc000115 	stw	r16,4(sp)
   8795c:	2823883a 	mov	r17,r5
   87960:	2c000417 	ldw	r16,16(r5)
   87964:	dfc00515 	stw	ra,20(sp)
   87968:	dcc00415 	stw	r19,16(sp)
   8796c:	2025883a 	mov	r18,r4
   87970:	29400504 	addi	r5,r5,20
   87974:	0011883a 	mov	r8,zero
   87978:	28c00017 	ldw	r3,0(r5)
   8797c:	29400104 	addi	r5,r5,4
   87980:	42000044 	addi	r8,r8,1
   87984:	18bfffcc 	andi	r2,r3,65535
   87988:	1185383a 	mul	r2,r2,r6
   8798c:	1806d43a 	srli	r3,r3,16
   87990:	11cf883a 	add	r7,r2,r7
   87994:	3808d43a 	srli	r4,r7,16
   87998:	1987383a 	mul	r3,r3,r6
   8799c:	38bfffcc 	andi	r2,r7,65535
   879a0:	1907883a 	add	r3,r3,r4
   879a4:	1808943a 	slli	r4,r3,16
   879a8:	180ed43a 	srli	r7,r3,16
   879ac:	2085883a 	add	r2,r4,r2
   879b0:	28bfff15 	stw	r2,-4(r5)
   879b4:	443ff016 	blt	r8,r16,87978 <__alt_data_end+0xfffa5ef8>
   879b8:	38000926 	beq	r7,zero,879e0 <__multadd+0x94>
   879bc:	88800217 	ldw	r2,8(r17)
   879c0:	80800f0e 	bge	r16,r2,87a00 <__multadd+0xb4>
   879c4:	80800144 	addi	r2,r16,5
   879c8:	1085883a 	add	r2,r2,r2
   879cc:	1085883a 	add	r2,r2,r2
   879d0:	8885883a 	add	r2,r17,r2
   879d4:	11c00015 	stw	r7,0(r2)
   879d8:	84000044 	addi	r16,r16,1
   879dc:	8c000415 	stw	r16,16(r17)
   879e0:	8805883a 	mov	r2,r17
   879e4:	dfc00517 	ldw	ra,20(sp)
   879e8:	dcc00417 	ldw	r19,16(sp)
   879ec:	dc800317 	ldw	r18,12(sp)
   879f0:	dc400217 	ldw	r17,8(sp)
   879f4:	dc000117 	ldw	r16,4(sp)
   879f8:	dec00604 	addi	sp,sp,24
   879fc:	f800283a 	ret
   87a00:	89400117 	ldw	r5,4(r17)
   87a04:	9009883a 	mov	r4,r18
   87a08:	d9c00015 	stw	r7,0(sp)
   87a0c:	29400044 	addi	r5,r5,1
   87a10:	008787c0 	call	8787c <_Balloc>
   87a14:	89800417 	ldw	r6,16(r17)
   87a18:	89400304 	addi	r5,r17,12
   87a1c:	11000304 	addi	r4,r2,12
   87a20:	31800084 	addi	r6,r6,2
   87a24:	318d883a 	add	r6,r6,r6
   87a28:	318d883a 	add	r6,r6,r6
   87a2c:	1027883a 	mov	r19,r2
   87a30:	00874b00 	call	874b0 <memcpy>
   87a34:	d9c00017 	ldw	r7,0(sp)
   87a38:	88000a26 	beq	r17,zero,87a64 <__multadd+0x118>
   87a3c:	88c00117 	ldw	r3,4(r17)
   87a40:	90801317 	ldw	r2,76(r18)
   87a44:	18c7883a 	add	r3,r3,r3
   87a48:	18c7883a 	add	r3,r3,r3
   87a4c:	10c5883a 	add	r2,r2,r3
   87a50:	10c00017 	ldw	r3,0(r2)
   87a54:	88c00015 	stw	r3,0(r17)
   87a58:	14400015 	stw	r17,0(r2)
   87a5c:	9823883a 	mov	r17,r19
   87a60:	003fd806 	br	879c4 <__alt_data_end+0xfffa5f44>
   87a64:	9823883a 	mov	r17,r19
   87a68:	003fd606 	br	879c4 <__alt_data_end+0xfffa5f44>

00087a6c <__s2b>:
   87a6c:	defff904 	addi	sp,sp,-28
   87a70:	dc400115 	stw	r17,4(sp)
   87a74:	dc000015 	stw	r16,0(sp)
   87a78:	2023883a 	mov	r17,r4
   87a7c:	2821883a 	mov	r16,r5
   87a80:	39000204 	addi	r4,r7,8
   87a84:	01400244 	movi	r5,9
   87a88:	dcc00315 	stw	r19,12(sp)
   87a8c:	dc800215 	stw	r18,8(sp)
   87a90:	dfc00615 	stw	ra,24(sp)
   87a94:	dd400515 	stw	r21,20(sp)
   87a98:	dd000415 	stw	r20,16(sp)
   87a9c:	3825883a 	mov	r18,r7
   87aa0:	3027883a 	mov	r19,r6
   87aa4:	00817080 	call	81708 <__divsi3>
   87aa8:	00c00044 	movi	r3,1
   87aac:	000b883a 	mov	r5,zero
   87ab0:	1880030e 	bge	r3,r2,87ac0 <__s2b+0x54>
   87ab4:	18c7883a 	add	r3,r3,r3
   87ab8:	29400044 	addi	r5,r5,1
   87abc:	18bffd16 	blt	r3,r2,87ab4 <__alt_data_end+0xfffa6034>
   87ac0:	8809883a 	mov	r4,r17
   87ac4:	008787c0 	call	8787c <_Balloc>
   87ac8:	d8c00717 	ldw	r3,28(sp)
   87acc:	10c00515 	stw	r3,20(r2)
   87ad0:	00c00044 	movi	r3,1
   87ad4:	10c00415 	stw	r3,16(r2)
   87ad8:	00c00244 	movi	r3,9
   87adc:	1cc0210e 	bge	r3,r19,87b64 <__s2b+0xf8>
   87ae0:	80eb883a 	add	r21,r16,r3
   87ae4:	a829883a 	mov	r20,r21
   87ae8:	84e1883a 	add	r16,r16,r19
   87aec:	a1c00007 	ldb	r7,0(r20)
   87af0:	01800284 	movi	r6,10
   87af4:	a5000044 	addi	r20,r20,1
   87af8:	100b883a 	mov	r5,r2
   87afc:	39fff404 	addi	r7,r7,-48
   87b00:	8809883a 	mov	r4,r17
   87b04:	008794c0 	call	8794c <__multadd>
   87b08:	a43ff81e 	bne	r20,r16,87aec <__alt_data_end+0xfffa606c>
   87b0c:	ace1883a 	add	r16,r21,r19
   87b10:	843ffe04 	addi	r16,r16,-8
   87b14:	9c800a0e 	bge	r19,r18,87b40 <__s2b+0xd4>
   87b18:	94e5c83a 	sub	r18,r18,r19
   87b1c:	84a5883a 	add	r18,r16,r18
   87b20:	81c00007 	ldb	r7,0(r16)
   87b24:	01800284 	movi	r6,10
   87b28:	84000044 	addi	r16,r16,1
   87b2c:	100b883a 	mov	r5,r2
   87b30:	39fff404 	addi	r7,r7,-48
   87b34:	8809883a 	mov	r4,r17
   87b38:	008794c0 	call	8794c <__multadd>
   87b3c:	84bff81e 	bne	r16,r18,87b20 <__alt_data_end+0xfffa60a0>
   87b40:	dfc00617 	ldw	ra,24(sp)
   87b44:	dd400517 	ldw	r21,20(sp)
   87b48:	dd000417 	ldw	r20,16(sp)
   87b4c:	dcc00317 	ldw	r19,12(sp)
   87b50:	dc800217 	ldw	r18,8(sp)
   87b54:	dc400117 	ldw	r17,4(sp)
   87b58:	dc000017 	ldw	r16,0(sp)
   87b5c:	dec00704 	addi	sp,sp,28
   87b60:	f800283a 	ret
   87b64:	84000284 	addi	r16,r16,10
   87b68:	1827883a 	mov	r19,r3
   87b6c:	003fe906 	br	87b14 <__alt_data_end+0xfffa6094>

00087b70 <__hi0bits>:
   87b70:	20bfffec 	andhi	r2,r4,65535
   87b74:	1000141e 	bne	r2,zero,87bc8 <__hi0bits+0x58>
   87b78:	2008943a 	slli	r4,r4,16
   87b7c:	00800404 	movi	r2,16
   87b80:	20ffc02c 	andhi	r3,r4,65280
   87b84:	1800021e 	bne	r3,zero,87b90 <__hi0bits+0x20>
   87b88:	2008923a 	slli	r4,r4,8
   87b8c:	10800204 	addi	r2,r2,8
   87b90:	20fc002c 	andhi	r3,r4,61440
   87b94:	1800021e 	bne	r3,zero,87ba0 <__hi0bits+0x30>
   87b98:	2008913a 	slli	r4,r4,4
   87b9c:	10800104 	addi	r2,r2,4
   87ba0:	20f0002c 	andhi	r3,r4,49152
   87ba4:	1800031e 	bne	r3,zero,87bb4 <__hi0bits+0x44>
   87ba8:	2109883a 	add	r4,r4,r4
   87bac:	10800084 	addi	r2,r2,2
   87bb0:	2109883a 	add	r4,r4,r4
   87bb4:	20000316 	blt	r4,zero,87bc4 <__hi0bits+0x54>
   87bb8:	2110002c 	andhi	r4,r4,16384
   87bbc:	2000041e 	bne	r4,zero,87bd0 <__hi0bits+0x60>
   87bc0:	00800804 	movi	r2,32
   87bc4:	f800283a 	ret
   87bc8:	0005883a 	mov	r2,zero
   87bcc:	003fec06 	br	87b80 <__alt_data_end+0xfffa6100>
   87bd0:	10800044 	addi	r2,r2,1
   87bd4:	f800283a 	ret

00087bd8 <__lo0bits>:
   87bd8:	20c00017 	ldw	r3,0(r4)
   87bdc:	188001cc 	andi	r2,r3,7
   87be0:	10000826 	beq	r2,zero,87c04 <__lo0bits+0x2c>
   87be4:	1880004c 	andi	r2,r3,1
   87be8:	1000211e 	bne	r2,zero,87c70 <__lo0bits+0x98>
   87bec:	1880008c 	andi	r2,r3,2
   87bf0:	1000211e 	bne	r2,zero,87c78 <__lo0bits+0xa0>
   87bf4:	1806d0ba 	srli	r3,r3,2
   87bf8:	00800084 	movi	r2,2
   87bfc:	20c00015 	stw	r3,0(r4)
   87c00:	f800283a 	ret
   87c04:	18bfffcc 	andi	r2,r3,65535
   87c08:	10001326 	beq	r2,zero,87c58 <__lo0bits+0x80>
   87c0c:	0005883a 	mov	r2,zero
   87c10:	19403fcc 	andi	r5,r3,255
   87c14:	2800021e 	bne	r5,zero,87c20 <__lo0bits+0x48>
   87c18:	1806d23a 	srli	r3,r3,8
   87c1c:	10800204 	addi	r2,r2,8
   87c20:	194003cc 	andi	r5,r3,15
   87c24:	2800021e 	bne	r5,zero,87c30 <__lo0bits+0x58>
   87c28:	1806d13a 	srli	r3,r3,4
   87c2c:	10800104 	addi	r2,r2,4
   87c30:	194000cc 	andi	r5,r3,3
   87c34:	2800021e 	bne	r5,zero,87c40 <__lo0bits+0x68>
   87c38:	1806d0ba 	srli	r3,r3,2
   87c3c:	10800084 	addi	r2,r2,2
   87c40:	1940004c 	andi	r5,r3,1
   87c44:	2800081e 	bne	r5,zero,87c68 <__lo0bits+0x90>
   87c48:	1806d07a 	srli	r3,r3,1
   87c4c:	1800051e 	bne	r3,zero,87c64 <__lo0bits+0x8c>
   87c50:	00800804 	movi	r2,32
   87c54:	f800283a 	ret
   87c58:	1806d43a 	srli	r3,r3,16
   87c5c:	00800404 	movi	r2,16
   87c60:	003feb06 	br	87c10 <__alt_data_end+0xfffa6190>
   87c64:	10800044 	addi	r2,r2,1
   87c68:	20c00015 	stw	r3,0(r4)
   87c6c:	f800283a 	ret
   87c70:	0005883a 	mov	r2,zero
   87c74:	f800283a 	ret
   87c78:	1806d07a 	srli	r3,r3,1
   87c7c:	00800044 	movi	r2,1
   87c80:	20c00015 	stw	r3,0(r4)
   87c84:	f800283a 	ret

00087c88 <__i2b>:
   87c88:	defffd04 	addi	sp,sp,-12
   87c8c:	dc000015 	stw	r16,0(sp)
   87c90:	04000044 	movi	r16,1
   87c94:	dc400115 	stw	r17,4(sp)
   87c98:	2823883a 	mov	r17,r5
   87c9c:	800b883a 	mov	r5,r16
   87ca0:	dfc00215 	stw	ra,8(sp)
   87ca4:	008787c0 	call	8787c <_Balloc>
   87ca8:	14400515 	stw	r17,20(r2)
   87cac:	14000415 	stw	r16,16(r2)
   87cb0:	dfc00217 	ldw	ra,8(sp)
   87cb4:	dc400117 	ldw	r17,4(sp)
   87cb8:	dc000017 	ldw	r16,0(sp)
   87cbc:	dec00304 	addi	sp,sp,12
   87cc0:	f800283a 	ret

00087cc4 <__multiply>:
   87cc4:	defffa04 	addi	sp,sp,-24
   87cc8:	dcc00315 	stw	r19,12(sp)
   87ccc:	dc800215 	stw	r18,8(sp)
   87cd0:	34c00417 	ldw	r19,16(r6)
   87cd4:	2c800417 	ldw	r18,16(r5)
   87cd8:	dd000415 	stw	r20,16(sp)
   87cdc:	dc400115 	stw	r17,4(sp)
   87ce0:	dfc00515 	stw	ra,20(sp)
   87ce4:	dc000015 	stw	r16,0(sp)
   87ce8:	2829883a 	mov	r20,r5
   87cec:	3023883a 	mov	r17,r6
   87cf0:	94c0050e 	bge	r18,r19,87d08 <__multiply+0x44>
   87cf4:	9007883a 	mov	r3,r18
   87cf8:	3029883a 	mov	r20,r6
   87cfc:	9825883a 	mov	r18,r19
   87d00:	2823883a 	mov	r17,r5
   87d04:	1827883a 	mov	r19,r3
   87d08:	a0800217 	ldw	r2,8(r20)
   87d0c:	94e1883a 	add	r16,r18,r19
   87d10:	a1400117 	ldw	r5,4(r20)
   87d14:	1400010e 	bge	r2,r16,87d1c <__multiply+0x58>
   87d18:	29400044 	addi	r5,r5,1
   87d1c:	008787c0 	call	8787c <_Balloc>
   87d20:	8415883a 	add	r10,r16,r16
   87d24:	12c00504 	addi	r11,r2,20
   87d28:	5295883a 	add	r10,r10,r10
   87d2c:	5a95883a 	add	r10,r11,r10
   87d30:	5807883a 	mov	r3,r11
   87d34:	5a80032e 	bgeu	r11,r10,87d44 <__multiply+0x80>
   87d38:	18000015 	stw	zero,0(r3)
   87d3c:	18c00104 	addi	r3,r3,4
   87d40:	1abffd36 	bltu	r3,r10,87d38 <__alt_data_end+0xfffa62b8>
   87d44:	9ce7883a 	add	r19,r19,r19
   87d48:	94a5883a 	add	r18,r18,r18
   87d4c:	89800504 	addi	r6,r17,20
   87d50:	9ce7883a 	add	r19,r19,r19
   87d54:	a3400504 	addi	r13,r20,20
   87d58:	94a5883a 	add	r18,r18,r18
   87d5c:	34d9883a 	add	r12,r6,r19
   87d60:	6c93883a 	add	r9,r13,r18
   87d64:	3300422e 	bgeu	r6,r12,87e70 <__multiply+0x1ac>
   87d68:	37c00017 	ldw	ra,0(r6)
   87d6c:	fbffffcc 	andi	r15,ra,65535
   87d70:	78001b26 	beq	r15,zero,87de0 <__multiply+0x11c>
   87d74:	5811883a 	mov	r8,r11
   87d78:	681d883a 	mov	r14,r13
   87d7c:	000f883a 	mov	r7,zero
   87d80:	71000017 	ldw	r4,0(r14)
   87d84:	40c00017 	ldw	r3,0(r8)
   87d88:	73800104 	addi	r14,r14,4
   87d8c:	217fffcc 	andi	r5,r4,65535
   87d90:	2bcb383a 	mul	r5,r5,r15
   87d94:	2008d43a 	srli	r4,r4,16
   87d98:	1c7fffcc 	andi	r17,r3,65535
   87d9c:	2c4b883a 	add	r5,r5,r17
   87da0:	29cb883a 	add	r5,r5,r7
   87da4:	23c9383a 	mul	r4,r4,r15
   87da8:	1806d43a 	srli	r3,r3,16
   87dac:	280ed43a 	srli	r7,r5,16
   87db0:	297fffcc 	andi	r5,r5,65535
   87db4:	20c7883a 	add	r3,r4,r3
   87db8:	19c7883a 	add	r3,r3,r7
   87dbc:	1808943a 	slli	r4,r3,16
   87dc0:	4023883a 	mov	r17,r8
   87dc4:	180ed43a 	srli	r7,r3,16
   87dc8:	214ab03a 	or	r5,r4,r5
   87dcc:	41400015 	stw	r5,0(r8)
   87dd0:	42000104 	addi	r8,r8,4
   87dd4:	727fea36 	bltu	r14,r9,87d80 <__alt_data_end+0xfffa6300>
   87dd8:	89c00115 	stw	r7,4(r17)
   87ddc:	37c00017 	ldw	ra,0(r6)
   87de0:	f83ed43a 	srli	ra,ra,16
   87de4:	f8001f26 	beq	ra,zero,87e64 <__multiply+0x1a0>
   87de8:	58c00017 	ldw	r3,0(r11)
   87dec:	681d883a 	mov	r14,r13
   87df0:	581f883a 	mov	r15,r11
   87df4:	1811883a 	mov	r8,r3
   87df8:	5825883a 	mov	r18,r11
   87dfc:	000f883a 	mov	r7,zero
   87e00:	00000106 	br	87e08 <__multiply+0x144>
   87e04:	8825883a 	mov	r18,r17
   87e08:	7140000b 	ldhu	r5,0(r14)
   87e0c:	4010d43a 	srli	r8,r8,16
   87e10:	193fffcc 	andi	r4,r3,65535
   87e14:	2fcb383a 	mul	r5,r5,ra
   87e18:	7bc00104 	addi	r15,r15,4
   87e1c:	73800104 	addi	r14,r14,4
   87e20:	2a0b883a 	add	r5,r5,r8
   87e24:	29cb883a 	add	r5,r5,r7
   87e28:	2806943a 	slli	r3,r5,16
   87e2c:	94400104 	addi	r17,r18,4
   87e30:	280ad43a 	srli	r5,r5,16
   87e34:	1908b03a 	or	r4,r3,r4
   87e38:	793fff15 	stw	r4,-4(r15)
   87e3c:	70ffff17 	ldw	r3,-4(r14)
   87e40:	8a000017 	ldw	r8,0(r17)
   87e44:	1806d43a 	srli	r3,r3,16
   87e48:	413fffcc 	andi	r4,r8,65535
   87e4c:	1fc7383a 	mul	r3,r3,ra
   87e50:	1907883a 	add	r3,r3,r4
   87e54:	1947883a 	add	r3,r3,r5
   87e58:	180ed43a 	srli	r7,r3,16
   87e5c:	727fe936 	bltu	r14,r9,87e04 <__alt_data_end+0xfffa6384>
   87e60:	90c00115 	stw	r3,4(r18)
   87e64:	31800104 	addi	r6,r6,4
   87e68:	5ac00104 	addi	r11,r11,4
   87e6c:	333fbe36 	bltu	r6,r12,87d68 <__alt_data_end+0xfffa62e8>
   87e70:	0400090e 	bge	zero,r16,87e98 <__multiply+0x1d4>
   87e74:	50ffff17 	ldw	r3,-4(r10)
   87e78:	52bfff04 	addi	r10,r10,-4
   87e7c:	18000326 	beq	r3,zero,87e8c <__multiply+0x1c8>
   87e80:	00000506 	br	87e98 <__multiply+0x1d4>
   87e84:	50c00017 	ldw	r3,0(r10)
   87e88:	1800031e 	bne	r3,zero,87e98 <__multiply+0x1d4>
   87e8c:	843fffc4 	addi	r16,r16,-1
   87e90:	52bfff04 	addi	r10,r10,-4
   87e94:	803ffb1e 	bne	r16,zero,87e84 <__alt_data_end+0xfffa6404>
   87e98:	14000415 	stw	r16,16(r2)
   87e9c:	dfc00517 	ldw	ra,20(sp)
   87ea0:	dd000417 	ldw	r20,16(sp)
   87ea4:	dcc00317 	ldw	r19,12(sp)
   87ea8:	dc800217 	ldw	r18,8(sp)
   87eac:	dc400117 	ldw	r17,4(sp)
   87eb0:	dc000017 	ldw	r16,0(sp)
   87eb4:	dec00604 	addi	sp,sp,24
   87eb8:	f800283a 	ret

00087ebc <__pow5mult>:
   87ebc:	defffa04 	addi	sp,sp,-24
   87ec0:	dcc00315 	stw	r19,12(sp)
   87ec4:	dc000015 	stw	r16,0(sp)
   87ec8:	dfc00515 	stw	ra,20(sp)
   87ecc:	dd000415 	stw	r20,16(sp)
   87ed0:	dc800215 	stw	r18,8(sp)
   87ed4:	dc400115 	stw	r17,4(sp)
   87ed8:	308000cc 	andi	r2,r6,3
   87edc:	3021883a 	mov	r16,r6
   87ee0:	2027883a 	mov	r19,r4
   87ee4:	10002f1e 	bne	r2,zero,87fa4 <__pow5mult+0xe8>
   87ee8:	2825883a 	mov	r18,r5
   87eec:	8021d0ba 	srai	r16,r16,2
   87ef0:	80001a26 	beq	r16,zero,87f5c <__pow5mult+0xa0>
   87ef4:	9c401217 	ldw	r17,72(r19)
   87ef8:	8800061e 	bne	r17,zero,87f14 <__pow5mult+0x58>
   87efc:	00003406 	br	87fd0 <__pow5mult+0x114>
   87f00:	8021d07a 	srai	r16,r16,1
   87f04:	80001526 	beq	r16,zero,87f5c <__pow5mult+0xa0>
   87f08:	88800017 	ldw	r2,0(r17)
   87f0c:	10001c26 	beq	r2,zero,87f80 <__pow5mult+0xc4>
   87f10:	1023883a 	mov	r17,r2
   87f14:	8080004c 	andi	r2,r16,1
   87f18:	103ff926 	beq	r2,zero,87f00 <__alt_data_end+0xfffa6480>
   87f1c:	880d883a 	mov	r6,r17
   87f20:	900b883a 	mov	r5,r18
   87f24:	9809883a 	mov	r4,r19
   87f28:	0087cc40 	call	87cc4 <__multiply>
   87f2c:	90001b26 	beq	r18,zero,87f9c <__pow5mult+0xe0>
   87f30:	91000117 	ldw	r4,4(r18)
   87f34:	98c01317 	ldw	r3,76(r19)
   87f38:	8021d07a 	srai	r16,r16,1
   87f3c:	2109883a 	add	r4,r4,r4
   87f40:	2109883a 	add	r4,r4,r4
   87f44:	1907883a 	add	r3,r3,r4
   87f48:	19000017 	ldw	r4,0(r3)
   87f4c:	91000015 	stw	r4,0(r18)
   87f50:	1c800015 	stw	r18,0(r3)
   87f54:	1025883a 	mov	r18,r2
   87f58:	803feb1e 	bne	r16,zero,87f08 <__alt_data_end+0xfffa6488>
   87f5c:	9005883a 	mov	r2,r18
   87f60:	dfc00517 	ldw	ra,20(sp)
   87f64:	dd000417 	ldw	r20,16(sp)
   87f68:	dcc00317 	ldw	r19,12(sp)
   87f6c:	dc800217 	ldw	r18,8(sp)
   87f70:	dc400117 	ldw	r17,4(sp)
   87f74:	dc000017 	ldw	r16,0(sp)
   87f78:	dec00604 	addi	sp,sp,24
   87f7c:	f800283a 	ret
   87f80:	880d883a 	mov	r6,r17
   87f84:	880b883a 	mov	r5,r17
   87f88:	9809883a 	mov	r4,r19
   87f8c:	0087cc40 	call	87cc4 <__multiply>
   87f90:	88800015 	stw	r2,0(r17)
   87f94:	10000015 	stw	zero,0(r2)
   87f98:	003fdd06 	br	87f10 <__alt_data_end+0xfffa6490>
   87f9c:	1025883a 	mov	r18,r2
   87fa0:	003fd706 	br	87f00 <__alt_data_end+0xfffa6480>
   87fa4:	10bfffc4 	addi	r2,r2,-1
   87fa8:	1085883a 	add	r2,r2,r2
   87fac:	00c00274 	movhi	r3,9
   87fb0:	18c39c04 	addi	r3,r3,3696
   87fb4:	1085883a 	add	r2,r2,r2
   87fb8:	1885883a 	add	r2,r3,r2
   87fbc:	11800017 	ldw	r6,0(r2)
   87fc0:	000f883a 	mov	r7,zero
   87fc4:	008794c0 	call	8794c <__multadd>
   87fc8:	1025883a 	mov	r18,r2
   87fcc:	003fc706 	br	87eec <__alt_data_end+0xfffa646c>
   87fd0:	05000044 	movi	r20,1
   87fd4:	a00b883a 	mov	r5,r20
   87fd8:	9809883a 	mov	r4,r19
   87fdc:	008787c0 	call	8787c <_Balloc>
   87fe0:	1023883a 	mov	r17,r2
   87fe4:	00809c44 	movi	r2,625
   87fe8:	88800515 	stw	r2,20(r17)
   87fec:	8d000415 	stw	r20,16(r17)
   87ff0:	9c401215 	stw	r17,72(r19)
   87ff4:	88000015 	stw	zero,0(r17)
   87ff8:	003fc606 	br	87f14 <__alt_data_end+0xfffa6494>

00087ffc <__lshift>:
   87ffc:	defff904 	addi	sp,sp,-28
   88000:	dd400515 	stw	r21,20(sp)
   88004:	dcc00315 	stw	r19,12(sp)
   88008:	302bd17a 	srai	r21,r6,5
   8800c:	2cc00417 	ldw	r19,16(r5)
   88010:	28800217 	ldw	r2,8(r5)
   88014:	dd000415 	stw	r20,16(sp)
   88018:	ace7883a 	add	r19,r21,r19
   8801c:	dc800215 	stw	r18,8(sp)
   88020:	dc400115 	stw	r17,4(sp)
   88024:	dc000015 	stw	r16,0(sp)
   88028:	dfc00615 	stw	ra,24(sp)
   8802c:	9c000044 	addi	r16,r19,1
   88030:	2823883a 	mov	r17,r5
   88034:	3029883a 	mov	r20,r6
   88038:	2025883a 	mov	r18,r4
   8803c:	29400117 	ldw	r5,4(r5)
   88040:	1400030e 	bge	r2,r16,88050 <__lshift+0x54>
   88044:	1085883a 	add	r2,r2,r2
   88048:	29400044 	addi	r5,r5,1
   8804c:	143ffd16 	blt	r2,r16,88044 <__alt_data_end+0xfffa65c4>
   88050:	9009883a 	mov	r4,r18
   88054:	008787c0 	call	8787c <_Balloc>
   88058:	10c00504 	addi	r3,r2,20
   8805c:	0540070e 	bge	zero,r21,8807c <__lshift+0x80>
   88060:	ad6b883a 	add	r21,r21,r21
   88064:	ad6b883a 	add	r21,r21,r21
   88068:	1809883a 	mov	r4,r3
   8806c:	1d47883a 	add	r3,r3,r21
   88070:	20000015 	stw	zero,0(r4)
   88074:	21000104 	addi	r4,r4,4
   88078:	193ffd1e 	bne	r3,r4,88070 <__alt_data_end+0xfffa65f0>
   8807c:	8a000417 	ldw	r8,16(r17)
   88080:	89000504 	addi	r4,r17,20
   88084:	a18007cc 	andi	r6,r20,31
   88088:	4211883a 	add	r8,r8,r8
   8808c:	4211883a 	add	r8,r8,r8
   88090:	2211883a 	add	r8,r4,r8
   88094:	30002326 	beq	r6,zero,88124 <__lshift+0x128>
   88098:	02400804 	movi	r9,32
   8809c:	4993c83a 	sub	r9,r9,r6
   880a0:	000b883a 	mov	r5,zero
   880a4:	21c00017 	ldw	r7,0(r4)
   880a8:	1815883a 	mov	r10,r3
   880ac:	18c00104 	addi	r3,r3,4
   880b0:	398e983a 	sll	r7,r7,r6
   880b4:	21000104 	addi	r4,r4,4
   880b8:	394ab03a 	or	r5,r7,r5
   880bc:	197fff15 	stw	r5,-4(r3)
   880c0:	217fff17 	ldw	r5,-4(r4)
   880c4:	2a4ad83a 	srl	r5,r5,r9
   880c8:	223ff636 	bltu	r4,r8,880a4 <__alt_data_end+0xfffa6624>
   880cc:	51400115 	stw	r5,4(r10)
   880d0:	28001a1e 	bne	r5,zero,8813c <__lshift+0x140>
   880d4:	843fffc4 	addi	r16,r16,-1
   880d8:	14000415 	stw	r16,16(r2)
   880dc:	88000826 	beq	r17,zero,88100 <__lshift+0x104>
   880e0:	89000117 	ldw	r4,4(r17)
   880e4:	90c01317 	ldw	r3,76(r18)
   880e8:	2109883a 	add	r4,r4,r4
   880ec:	2109883a 	add	r4,r4,r4
   880f0:	1907883a 	add	r3,r3,r4
   880f4:	19000017 	ldw	r4,0(r3)
   880f8:	89000015 	stw	r4,0(r17)
   880fc:	1c400015 	stw	r17,0(r3)
   88100:	dfc00617 	ldw	ra,24(sp)
   88104:	dd400517 	ldw	r21,20(sp)
   88108:	dd000417 	ldw	r20,16(sp)
   8810c:	dcc00317 	ldw	r19,12(sp)
   88110:	dc800217 	ldw	r18,8(sp)
   88114:	dc400117 	ldw	r17,4(sp)
   88118:	dc000017 	ldw	r16,0(sp)
   8811c:	dec00704 	addi	sp,sp,28
   88120:	f800283a 	ret
   88124:	21400017 	ldw	r5,0(r4)
   88128:	18c00104 	addi	r3,r3,4
   8812c:	21000104 	addi	r4,r4,4
   88130:	197fff15 	stw	r5,-4(r3)
   88134:	223ffb36 	bltu	r4,r8,88124 <__alt_data_end+0xfffa66a4>
   88138:	003fe606 	br	880d4 <__alt_data_end+0xfffa6654>
   8813c:	9c000084 	addi	r16,r19,2
   88140:	003fe406 	br	880d4 <__alt_data_end+0xfffa6654>

00088144 <__mcmp>:
   88144:	20800417 	ldw	r2,16(r4)
   88148:	28c00417 	ldw	r3,16(r5)
   8814c:	10c5c83a 	sub	r2,r2,r3
   88150:	1000111e 	bne	r2,zero,88198 <__mcmp+0x54>
   88154:	18c7883a 	add	r3,r3,r3
   88158:	18c7883a 	add	r3,r3,r3
   8815c:	21000504 	addi	r4,r4,20
   88160:	29400504 	addi	r5,r5,20
   88164:	20c5883a 	add	r2,r4,r3
   88168:	28cb883a 	add	r5,r5,r3
   8816c:	00000106 	br	88174 <__mcmp+0x30>
   88170:	20800a2e 	bgeu	r4,r2,8819c <__mcmp+0x58>
   88174:	10bfff04 	addi	r2,r2,-4
   88178:	297fff04 	addi	r5,r5,-4
   8817c:	11800017 	ldw	r6,0(r2)
   88180:	28c00017 	ldw	r3,0(r5)
   88184:	30fffa26 	beq	r6,r3,88170 <__alt_data_end+0xfffa66f0>
   88188:	30c00236 	bltu	r6,r3,88194 <__mcmp+0x50>
   8818c:	00800044 	movi	r2,1
   88190:	f800283a 	ret
   88194:	00bfffc4 	movi	r2,-1
   88198:	f800283a 	ret
   8819c:	0005883a 	mov	r2,zero
   881a0:	f800283a 	ret

000881a4 <__mdiff>:
   881a4:	28c00417 	ldw	r3,16(r5)
   881a8:	30800417 	ldw	r2,16(r6)
   881ac:	defffa04 	addi	sp,sp,-24
   881b0:	dcc00315 	stw	r19,12(sp)
   881b4:	dc800215 	stw	r18,8(sp)
   881b8:	dfc00515 	stw	ra,20(sp)
   881bc:	dd000415 	stw	r20,16(sp)
   881c0:	dc400115 	stw	r17,4(sp)
   881c4:	dc000015 	stw	r16,0(sp)
   881c8:	1887c83a 	sub	r3,r3,r2
   881cc:	2825883a 	mov	r18,r5
   881d0:	3027883a 	mov	r19,r6
   881d4:	1800141e 	bne	r3,zero,88228 <__mdiff+0x84>
   881d8:	1085883a 	add	r2,r2,r2
   881dc:	1085883a 	add	r2,r2,r2
   881e0:	2a000504 	addi	r8,r5,20
   881e4:	34000504 	addi	r16,r6,20
   881e8:	4087883a 	add	r3,r8,r2
   881ec:	8085883a 	add	r2,r16,r2
   881f0:	00000106 	br	881f8 <__mdiff+0x54>
   881f4:	40c0592e 	bgeu	r8,r3,8835c <__mdiff+0x1b8>
   881f8:	18ffff04 	addi	r3,r3,-4
   881fc:	10bfff04 	addi	r2,r2,-4
   88200:	19c00017 	ldw	r7,0(r3)
   88204:	11400017 	ldw	r5,0(r2)
   88208:	397ffa26 	beq	r7,r5,881f4 <__alt_data_end+0xfffa6774>
   8820c:	3940592e 	bgeu	r7,r5,88374 <__mdiff+0x1d0>
   88210:	9005883a 	mov	r2,r18
   88214:	4023883a 	mov	r17,r8
   88218:	9825883a 	mov	r18,r19
   8821c:	05000044 	movi	r20,1
   88220:	1027883a 	mov	r19,r2
   88224:	00000406 	br	88238 <__mdiff+0x94>
   88228:	18005616 	blt	r3,zero,88384 <__mdiff+0x1e0>
   8822c:	34400504 	addi	r17,r6,20
   88230:	2c000504 	addi	r16,r5,20
   88234:	0029883a 	mov	r20,zero
   88238:	91400117 	ldw	r5,4(r18)
   8823c:	008787c0 	call	8787c <_Balloc>
   88240:	92400417 	ldw	r9,16(r18)
   88244:	9b000417 	ldw	r12,16(r19)
   88248:	12c00504 	addi	r11,r2,20
   8824c:	4a51883a 	add	r8,r9,r9
   88250:	6319883a 	add	r12,r12,r12
   88254:	4211883a 	add	r8,r8,r8
   88258:	6319883a 	add	r12,r12,r12
   8825c:	15000315 	stw	r20,12(r2)
   88260:	8211883a 	add	r8,r16,r8
   88264:	8b19883a 	add	r12,r17,r12
   88268:	0007883a 	mov	r3,zero
   8826c:	81400017 	ldw	r5,0(r16)
   88270:	89c00017 	ldw	r7,0(r17)
   88274:	59800104 	addi	r6,r11,4
   88278:	293fffcc 	andi	r4,r5,65535
   8827c:	20c7883a 	add	r3,r4,r3
   88280:	393fffcc 	andi	r4,r7,65535
   88284:	1909c83a 	sub	r4,r3,r4
   88288:	280ad43a 	srli	r5,r5,16
   8828c:	380ed43a 	srli	r7,r7,16
   88290:	2007d43a 	srai	r3,r4,16
   88294:	213fffcc 	andi	r4,r4,65535
   88298:	29cbc83a 	sub	r5,r5,r7
   8829c:	28c7883a 	add	r3,r5,r3
   882a0:	180a943a 	slli	r5,r3,16
   882a4:	8c400104 	addi	r17,r17,4
   882a8:	84000104 	addi	r16,r16,4
   882ac:	2908b03a 	or	r4,r5,r4
   882b0:	59000015 	stw	r4,0(r11)
   882b4:	1807d43a 	srai	r3,r3,16
   882b8:	3015883a 	mov	r10,r6
   882bc:	3017883a 	mov	r11,r6
   882c0:	8b3fea36 	bltu	r17,r12,8826c <__alt_data_end+0xfffa67ec>
   882c4:	8200162e 	bgeu	r16,r8,88320 <__mdiff+0x17c>
   882c8:	8017883a 	mov	r11,r16
   882cc:	59400017 	ldw	r5,0(r11)
   882d0:	31800104 	addi	r6,r6,4
   882d4:	5ac00104 	addi	r11,r11,4
   882d8:	293fffcc 	andi	r4,r5,65535
   882dc:	20c7883a 	add	r3,r4,r3
   882e0:	280ed43a 	srli	r7,r5,16
   882e4:	180bd43a 	srai	r5,r3,16
   882e8:	193fffcc 	andi	r4,r3,65535
   882ec:	3947883a 	add	r3,r7,r5
   882f0:	180a943a 	slli	r5,r3,16
   882f4:	1807d43a 	srai	r3,r3,16
   882f8:	2908b03a 	or	r4,r5,r4
   882fc:	313fff15 	stw	r4,-4(r6)
   88300:	5a3ff236 	bltu	r11,r8,882cc <__alt_data_end+0xfffa684c>
   88304:	0406303a 	nor	r3,zero,r16
   88308:	1a07883a 	add	r3,r3,r8
   8830c:	1806d0ba 	srli	r3,r3,2
   88310:	18c00044 	addi	r3,r3,1
   88314:	18c7883a 	add	r3,r3,r3
   88318:	18c7883a 	add	r3,r3,r3
   8831c:	50d5883a 	add	r10,r10,r3
   88320:	50ffff04 	addi	r3,r10,-4
   88324:	2000041e 	bne	r4,zero,88338 <__mdiff+0x194>
   88328:	18ffff04 	addi	r3,r3,-4
   8832c:	19000017 	ldw	r4,0(r3)
   88330:	4a7fffc4 	addi	r9,r9,-1
   88334:	203ffc26 	beq	r4,zero,88328 <__alt_data_end+0xfffa68a8>
   88338:	12400415 	stw	r9,16(r2)
   8833c:	dfc00517 	ldw	ra,20(sp)
   88340:	dd000417 	ldw	r20,16(sp)
   88344:	dcc00317 	ldw	r19,12(sp)
   88348:	dc800217 	ldw	r18,8(sp)
   8834c:	dc400117 	ldw	r17,4(sp)
   88350:	dc000017 	ldw	r16,0(sp)
   88354:	dec00604 	addi	sp,sp,24
   88358:	f800283a 	ret
   8835c:	000b883a 	mov	r5,zero
   88360:	008787c0 	call	8787c <_Balloc>
   88364:	00c00044 	movi	r3,1
   88368:	10c00415 	stw	r3,16(r2)
   8836c:	10000515 	stw	zero,20(r2)
   88370:	003ff206 	br	8833c <__alt_data_end+0xfffa68bc>
   88374:	8023883a 	mov	r17,r16
   88378:	0029883a 	mov	r20,zero
   8837c:	4021883a 	mov	r16,r8
   88380:	003fad06 	br	88238 <__alt_data_end+0xfffa67b8>
   88384:	9005883a 	mov	r2,r18
   88388:	94400504 	addi	r17,r18,20
   8838c:	9c000504 	addi	r16,r19,20
   88390:	9825883a 	mov	r18,r19
   88394:	05000044 	movi	r20,1
   88398:	1027883a 	mov	r19,r2
   8839c:	003fa606 	br	88238 <__alt_data_end+0xfffa67b8>

000883a0 <__ulp>:
   883a0:	295ffc2c 	andhi	r5,r5,32752
   883a4:	00bf3034 	movhi	r2,64704
   883a8:	2887883a 	add	r3,r5,r2
   883ac:	00c0020e 	bge	zero,r3,883b8 <__ulp+0x18>
   883b0:	0005883a 	mov	r2,zero
   883b4:	f800283a 	ret
   883b8:	00c7c83a 	sub	r3,zero,r3
   883bc:	1807d53a 	srai	r3,r3,20
   883c0:	008004c4 	movi	r2,19
   883c4:	10c00b0e 	bge	r2,r3,883f4 <__ulp+0x54>
   883c8:	18bffb04 	addi	r2,r3,-20
   883cc:	01000784 	movi	r4,30
   883d0:	0007883a 	mov	r3,zero
   883d4:	20800516 	blt	r4,r2,883ec <__ulp+0x4c>
   883d8:	010007c4 	movi	r4,31
   883dc:	2089c83a 	sub	r4,r4,r2
   883e0:	00800044 	movi	r2,1
   883e4:	1104983a 	sll	r2,r2,r4
   883e8:	f800283a 	ret
   883ec:	00800044 	movi	r2,1
   883f0:	f800283a 	ret
   883f4:	01400234 	movhi	r5,8
   883f8:	28c7d83a 	sra	r3,r5,r3
   883fc:	0005883a 	mov	r2,zero
   88400:	f800283a 	ret

00088404 <__b2d>:
   88404:	defffa04 	addi	sp,sp,-24
   88408:	dc000015 	stw	r16,0(sp)
   8840c:	24000417 	ldw	r16,16(r4)
   88410:	dc400115 	stw	r17,4(sp)
   88414:	24400504 	addi	r17,r4,20
   88418:	8421883a 	add	r16,r16,r16
   8841c:	8421883a 	add	r16,r16,r16
   88420:	8c21883a 	add	r16,r17,r16
   88424:	dc800215 	stw	r18,8(sp)
   88428:	84bfff17 	ldw	r18,-4(r16)
   8842c:	dd000415 	stw	r20,16(sp)
   88430:	dcc00315 	stw	r19,12(sp)
   88434:	9009883a 	mov	r4,r18
   88438:	2829883a 	mov	r20,r5
   8843c:	dfc00515 	stw	ra,20(sp)
   88440:	0087b700 	call	87b70 <__hi0bits>
   88444:	00c00804 	movi	r3,32
   88448:	1889c83a 	sub	r4,r3,r2
   8844c:	a1000015 	stw	r4,0(r20)
   88450:	01000284 	movi	r4,10
   88454:	84ffff04 	addi	r19,r16,-4
   88458:	20801216 	blt	r4,r2,884a4 <__b2d+0xa0>
   8845c:	018002c4 	movi	r6,11
   88460:	308dc83a 	sub	r6,r6,r2
   88464:	9186d83a 	srl	r3,r18,r6
   88468:	18cffc34 	orhi	r3,r3,16368
   8846c:	8cc0212e 	bgeu	r17,r19,884f4 <__b2d+0xf0>
   88470:	813ffe17 	ldw	r4,-8(r16)
   88474:	218cd83a 	srl	r6,r4,r6
   88478:	10800544 	addi	r2,r2,21
   8847c:	9084983a 	sll	r2,r18,r2
   88480:	1184b03a 	or	r2,r2,r6
   88484:	dfc00517 	ldw	ra,20(sp)
   88488:	dd000417 	ldw	r20,16(sp)
   8848c:	dcc00317 	ldw	r19,12(sp)
   88490:	dc800217 	ldw	r18,8(sp)
   88494:	dc400117 	ldw	r17,4(sp)
   88498:	dc000017 	ldw	r16,0(sp)
   8849c:	dec00604 	addi	sp,sp,24
   884a0:	f800283a 	ret
   884a4:	8cc00f2e 	bgeu	r17,r19,884e4 <__b2d+0xe0>
   884a8:	117ffd44 	addi	r5,r2,-11
   884ac:	80bffe17 	ldw	r2,-8(r16)
   884b0:	28000e26 	beq	r5,zero,884ec <__b2d+0xe8>
   884b4:	1949c83a 	sub	r4,r3,r5
   884b8:	9164983a 	sll	r18,r18,r5
   884bc:	1106d83a 	srl	r3,r2,r4
   884c0:	81bffe04 	addi	r6,r16,-8
   884c4:	948ffc34 	orhi	r18,r18,16368
   884c8:	90c6b03a 	or	r3,r18,r3
   884cc:	89800e2e 	bgeu	r17,r6,88508 <__b2d+0x104>
   884d0:	81bffd17 	ldw	r6,-12(r16)
   884d4:	1144983a 	sll	r2,r2,r5
   884d8:	310ad83a 	srl	r5,r6,r4
   884dc:	2884b03a 	or	r2,r5,r2
   884e0:	003fe806 	br	88484 <__alt_data_end+0xfffa6a04>
   884e4:	10bffd44 	addi	r2,r2,-11
   884e8:	1000041e 	bne	r2,zero,884fc <__b2d+0xf8>
   884ec:	90cffc34 	orhi	r3,r18,16368
   884f0:	003fe406 	br	88484 <__alt_data_end+0xfffa6a04>
   884f4:	000d883a 	mov	r6,zero
   884f8:	003fdf06 	br	88478 <__alt_data_end+0xfffa69f8>
   884fc:	90a4983a 	sll	r18,r18,r2
   88500:	0005883a 	mov	r2,zero
   88504:	003ff906 	br	884ec <__alt_data_end+0xfffa6a6c>
   88508:	1144983a 	sll	r2,r2,r5
   8850c:	003fdd06 	br	88484 <__alt_data_end+0xfffa6a04>

00088510 <__d2b>:
   88510:	defff804 	addi	sp,sp,-32
   88514:	dc000215 	stw	r16,8(sp)
   88518:	3021883a 	mov	r16,r6
   8851c:	dc400315 	stw	r17,12(sp)
   88520:	8022907a 	slli	r17,r16,1
   88524:	dd000615 	stw	r20,24(sp)
   88528:	2829883a 	mov	r20,r5
   8852c:	01400044 	movi	r5,1
   88530:	dcc00515 	stw	r19,20(sp)
   88534:	dc800415 	stw	r18,16(sp)
   88538:	dfc00715 	stw	ra,28(sp)
   8853c:	3825883a 	mov	r18,r7
   88540:	8822d57a 	srli	r17,r17,21
   88544:	008787c0 	call	8787c <_Balloc>
   88548:	1027883a 	mov	r19,r2
   8854c:	00800434 	movhi	r2,16
   88550:	10bfffc4 	addi	r2,r2,-1
   88554:	808c703a 	and	r6,r16,r2
   88558:	88000126 	beq	r17,zero,88560 <__d2b+0x50>
   8855c:	31800434 	orhi	r6,r6,16
   88560:	d9800015 	stw	r6,0(sp)
   88564:	a0002426 	beq	r20,zero,885f8 <__d2b+0xe8>
   88568:	d9000104 	addi	r4,sp,4
   8856c:	dd000115 	stw	r20,4(sp)
   88570:	0087bd80 	call	87bd8 <__lo0bits>
   88574:	d8c00017 	ldw	r3,0(sp)
   88578:	10002f1e 	bne	r2,zero,88638 <__d2b+0x128>
   8857c:	d9000117 	ldw	r4,4(sp)
   88580:	99000515 	stw	r4,20(r19)
   88584:	1821003a 	cmpeq	r16,r3,zero
   88588:	01000084 	movi	r4,2
   8858c:	2421c83a 	sub	r16,r4,r16
   88590:	98c00615 	stw	r3,24(r19)
   88594:	9c000415 	stw	r16,16(r19)
   88598:	88001f1e 	bne	r17,zero,88618 <__d2b+0x108>
   8859c:	10bef384 	addi	r2,r2,-1074
   885a0:	90800015 	stw	r2,0(r18)
   885a4:	00900034 	movhi	r2,16384
   885a8:	10bfffc4 	addi	r2,r2,-1
   885ac:	8085883a 	add	r2,r16,r2
   885b0:	1085883a 	add	r2,r2,r2
   885b4:	1085883a 	add	r2,r2,r2
   885b8:	9885883a 	add	r2,r19,r2
   885bc:	11000517 	ldw	r4,20(r2)
   885c0:	8020917a 	slli	r16,r16,5
   885c4:	0087b700 	call	87b70 <__hi0bits>
   885c8:	d8c00817 	ldw	r3,32(sp)
   885cc:	8085c83a 	sub	r2,r16,r2
   885d0:	18800015 	stw	r2,0(r3)
   885d4:	9805883a 	mov	r2,r19
   885d8:	dfc00717 	ldw	ra,28(sp)
   885dc:	dd000617 	ldw	r20,24(sp)
   885e0:	dcc00517 	ldw	r19,20(sp)
   885e4:	dc800417 	ldw	r18,16(sp)
   885e8:	dc400317 	ldw	r17,12(sp)
   885ec:	dc000217 	ldw	r16,8(sp)
   885f0:	dec00804 	addi	sp,sp,32
   885f4:	f800283a 	ret
   885f8:	d809883a 	mov	r4,sp
   885fc:	0087bd80 	call	87bd8 <__lo0bits>
   88600:	d8c00017 	ldw	r3,0(sp)
   88604:	04000044 	movi	r16,1
   88608:	9c000415 	stw	r16,16(r19)
   8860c:	98c00515 	stw	r3,20(r19)
   88610:	10800804 	addi	r2,r2,32
   88614:	883fe126 	beq	r17,zero,8859c <__alt_data_end+0xfffa6b1c>
   88618:	00c00d44 	movi	r3,53
   8861c:	8c7ef344 	addi	r17,r17,-1075
   88620:	88a3883a 	add	r17,r17,r2
   88624:	1885c83a 	sub	r2,r3,r2
   88628:	d8c00817 	ldw	r3,32(sp)
   8862c:	94400015 	stw	r17,0(r18)
   88630:	18800015 	stw	r2,0(r3)
   88634:	003fe706 	br	885d4 <__alt_data_end+0xfffa6b54>
   88638:	01000804 	movi	r4,32
   8863c:	2089c83a 	sub	r4,r4,r2
   88640:	1908983a 	sll	r4,r3,r4
   88644:	d9400117 	ldw	r5,4(sp)
   88648:	1886d83a 	srl	r3,r3,r2
   8864c:	2148b03a 	or	r4,r4,r5
   88650:	99000515 	stw	r4,20(r19)
   88654:	d8c00015 	stw	r3,0(sp)
   88658:	003fca06 	br	88584 <__alt_data_end+0xfffa6b04>

0008865c <__ratio>:
   8865c:	defff904 	addi	sp,sp,-28
   88660:	dc400315 	stw	r17,12(sp)
   88664:	2823883a 	mov	r17,r5
   88668:	d9400104 	addi	r5,sp,4
   8866c:	dfc00615 	stw	ra,24(sp)
   88670:	dcc00515 	stw	r19,20(sp)
   88674:	dc800415 	stw	r18,16(sp)
   88678:	2027883a 	mov	r19,r4
   8867c:	dc000215 	stw	r16,8(sp)
   88680:	00884040 	call	88404 <__b2d>
   88684:	d80b883a 	mov	r5,sp
   88688:	8809883a 	mov	r4,r17
   8868c:	1025883a 	mov	r18,r2
   88690:	1821883a 	mov	r16,r3
   88694:	00884040 	call	88404 <__b2d>
   88698:	8a000417 	ldw	r8,16(r17)
   8869c:	99000417 	ldw	r4,16(r19)
   886a0:	d9400117 	ldw	r5,4(sp)
   886a4:	2209c83a 	sub	r4,r4,r8
   886a8:	2010917a 	slli	r8,r4,5
   886ac:	d9000017 	ldw	r4,0(sp)
   886b0:	2909c83a 	sub	r4,r5,r4
   886b4:	4109883a 	add	r4,r8,r4
   886b8:	01000e0e 	bge	zero,r4,886f4 <__ratio+0x98>
   886bc:	2008953a 	slli	r4,r4,20
   886c0:	2421883a 	add	r16,r4,r16
   886c4:	100d883a 	mov	r6,r2
   886c8:	180f883a 	mov	r7,r3
   886cc:	9009883a 	mov	r4,r18
   886d0:	800b883a 	mov	r5,r16
   886d4:	008c3f40 	call	8c3f4 <__divdf3>
   886d8:	dfc00617 	ldw	ra,24(sp)
   886dc:	dcc00517 	ldw	r19,20(sp)
   886e0:	dc800417 	ldw	r18,16(sp)
   886e4:	dc400317 	ldw	r17,12(sp)
   886e8:	dc000217 	ldw	r16,8(sp)
   886ec:	dec00704 	addi	sp,sp,28
   886f0:	f800283a 	ret
   886f4:	2008953a 	slli	r4,r4,20
   886f8:	1907c83a 	sub	r3,r3,r4
   886fc:	003ff106 	br	886c4 <__alt_data_end+0xfffa6c44>

00088700 <_mprec_log10>:
   88700:	defffe04 	addi	sp,sp,-8
   88704:	dc000015 	stw	r16,0(sp)
   88708:	dfc00115 	stw	ra,4(sp)
   8870c:	008005c4 	movi	r2,23
   88710:	2021883a 	mov	r16,r4
   88714:	11000d0e 	bge	r2,r4,8874c <_mprec_log10+0x4c>
   88718:	0005883a 	mov	r2,zero
   8871c:	00cffc34 	movhi	r3,16368
   88720:	843fffc4 	addi	r16,r16,-1
   88724:	000d883a 	mov	r6,zero
   88728:	01d00934 	movhi	r7,16420
   8872c:	1009883a 	mov	r4,r2
   88730:	180b883a 	mov	r5,r3
   88734:	008cf340 	call	8cf34 <__muldf3>
   88738:	803ff91e 	bne	r16,zero,88720 <__alt_data_end+0xfffa6ca0>
   8873c:	dfc00117 	ldw	ra,4(sp)
   88740:	dc000017 	ldw	r16,0(sp)
   88744:	dec00204 	addi	sp,sp,8
   88748:	f800283a 	ret
   8874c:	202090fa 	slli	r16,r4,3
   88750:	00800274 	movhi	r2,9
   88754:	1083b304 	addi	r2,r2,3788
   88758:	1421883a 	add	r16,r2,r16
   8875c:	80800017 	ldw	r2,0(r16)
   88760:	80c00117 	ldw	r3,4(r16)
   88764:	dfc00117 	ldw	ra,4(sp)
   88768:	dc000017 	ldw	r16,0(sp)
   8876c:	dec00204 	addi	sp,sp,8
   88770:	f800283a 	ret

00088774 <__copybits>:
   88774:	297fffc4 	addi	r5,r5,-1
   88778:	280fd17a 	srai	r7,r5,5
   8877c:	30c00417 	ldw	r3,16(r6)
   88780:	30800504 	addi	r2,r6,20
   88784:	39c00044 	addi	r7,r7,1
   88788:	18c7883a 	add	r3,r3,r3
   8878c:	39cf883a 	add	r7,r7,r7
   88790:	18c7883a 	add	r3,r3,r3
   88794:	39cf883a 	add	r7,r7,r7
   88798:	10c7883a 	add	r3,r2,r3
   8879c:	21cf883a 	add	r7,r4,r7
   887a0:	10c00d2e 	bgeu	r2,r3,887d8 <__copybits+0x64>
   887a4:	200b883a 	mov	r5,r4
   887a8:	12000017 	ldw	r8,0(r2)
   887ac:	29400104 	addi	r5,r5,4
   887b0:	10800104 	addi	r2,r2,4
   887b4:	2a3fff15 	stw	r8,-4(r5)
   887b8:	10fffb36 	bltu	r2,r3,887a8 <__alt_data_end+0xfffa6d28>
   887bc:	1985c83a 	sub	r2,r3,r6
   887c0:	10bffac4 	addi	r2,r2,-21
   887c4:	1004d0ba 	srli	r2,r2,2
   887c8:	10800044 	addi	r2,r2,1
   887cc:	1085883a 	add	r2,r2,r2
   887d0:	1085883a 	add	r2,r2,r2
   887d4:	2089883a 	add	r4,r4,r2
   887d8:	21c0032e 	bgeu	r4,r7,887e8 <__copybits+0x74>
   887dc:	20000015 	stw	zero,0(r4)
   887e0:	21000104 	addi	r4,r4,4
   887e4:	21fffd36 	bltu	r4,r7,887dc <__alt_data_end+0xfffa6d5c>
   887e8:	f800283a 	ret

000887ec <__any_on>:
   887ec:	20c00417 	ldw	r3,16(r4)
   887f0:	2805d17a 	srai	r2,r5,5
   887f4:	21000504 	addi	r4,r4,20
   887f8:	18800d0e 	bge	r3,r2,88830 <__any_on+0x44>
   887fc:	18c7883a 	add	r3,r3,r3
   88800:	18c7883a 	add	r3,r3,r3
   88804:	20c7883a 	add	r3,r4,r3
   88808:	20c0192e 	bgeu	r4,r3,88870 <__any_on+0x84>
   8880c:	18bfff17 	ldw	r2,-4(r3)
   88810:	18ffff04 	addi	r3,r3,-4
   88814:	1000041e 	bne	r2,zero,88828 <__any_on+0x3c>
   88818:	20c0142e 	bgeu	r4,r3,8886c <__any_on+0x80>
   8881c:	18ffff04 	addi	r3,r3,-4
   88820:	19400017 	ldw	r5,0(r3)
   88824:	283ffc26 	beq	r5,zero,88818 <__alt_data_end+0xfffa6d98>
   88828:	00800044 	movi	r2,1
   8882c:	f800283a 	ret
   88830:	10c00a0e 	bge	r2,r3,8885c <__any_on+0x70>
   88834:	1085883a 	add	r2,r2,r2
   88838:	1085883a 	add	r2,r2,r2
   8883c:	294007cc 	andi	r5,r5,31
   88840:	2087883a 	add	r3,r4,r2
   88844:	283ff026 	beq	r5,zero,88808 <__alt_data_end+0xfffa6d88>
   88848:	19800017 	ldw	r6,0(r3)
   8884c:	3144d83a 	srl	r2,r6,r5
   88850:	114a983a 	sll	r5,r2,r5
   88854:	317ff41e 	bne	r6,r5,88828 <__alt_data_end+0xfffa6da8>
   88858:	003feb06 	br	88808 <__alt_data_end+0xfffa6d88>
   8885c:	1085883a 	add	r2,r2,r2
   88860:	1085883a 	add	r2,r2,r2
   88864:	2087883a 	add	r3,r4,r2
   88868:	003fe706 	br	88808 <__alt_data_end+0xfffa6d88>
   8886c:	f800283a 	ret
   88870:	0005883a 	mov	r2,zero
   88874:	f800283a 	ret

00088878 <_realloc_r>:
   88878:	defff604 	addi	sp,sp,-40
   8887c:	dc800215 	stw	r18,8(sp)
   88880:	dfc00915 	stw	ra,36(sp)
   88884:	df000815 	stw	fp,32(sp)
   88888:	ddc00715 	stw	r23,28(sp)
   8888c:	dd800615 	stw	r22,24(sp)
   88890:	dd400515 	stw	r21,20(sp)
   88894:	dd000415 	stw	r20,16(sp)
   88898:	dcc00315 	stw	r19,12(sp)
   8889c:	dc400115 	stw	r17,4(sp)
   888a0:	dc000015 	stw	r16,0(sp)
   888a4:	3025883a 	mov	r18,r6
   888a8:	2800b726 	beq	r5,zero,88b88 <_realloc_r+0x310>
   888ac:	282b883a 	mov	r21,r5
   888b0:	2029883a 	mov	r20,r4
   888b4:	008ed400 	call	8ed40 <__malloc_lock>
   888b8:	a8bfff17 	ldw	r2,-4(r21)
   888bc:	043fff04 	movi	r16,-4
   888c0:	90c002c4 	addi	r3,r18,11
   888c4:	01000584 	movi	r4,22
   888c8:	acfffe04 	addi	r19,r21,-8
   888cc:	1420703a 	and	r16,r2,r16
   888d0:	20c0332e 	bgeu	r4,r3,889a0 <_realloc_r+0x128>
   888d4:	047ffe04 	movi	r17,-8
   888d8:	1c62703a 	and	r17,r3,r17
   888dc:	8807883a 	mov	r3,r17
   888e0:	88005816 	blt	r17,zero,88a44 <_realloc_r+0x1cc>
   888e4:	8c805736 	bltu	r17,r18,88a44 <_realloc_r+0x1cc>
   888e8:	80c0300e 	bge	r16,r3,889ac <_realloc_r+0x134>
   888ec:	07000274 	movhi	fp,9
   888f0:	e705e604 	addi	fp,fp,6040
   888f4:	e1c00217 	ldw	r7,8(fp)
   888f8:	9c09883a 	add	r4,r19,r16
   888fc:	22000117 	ldw	r8,4(r4)
   88900:	21c06326 	beq	r4,r7,88a90 <_realloc_r+0x218>
   88904:	017fff84 	movi	r5,-2
   88908:	414a703a 	and	r5,r8,r5
   8890c:	214b883a 	add	r5,r4,r5
   88910:	29800117 	ldw	r6,4(r5)
   88914:	3180004c 	andi	r6,r6,1
   88918:	30003f26 	beq	r6,zero,88a18 <_realloc_r+0x1a0>
   8891c:	1080004c 	andi	r2,r2,1
   88920:	10008326 	beq	r2,zero,88b30 <_realloc_r+0x2b8>
   88924:	900b883a 	mov	r5,r18
   88928:	a009883a 	mov	r4,r20
   8892c:	0086bc00 	call	86bc0 <_malloc_r>
   88930:	1025883a 	mov	r18,r2
   88934:	10011e26 	beq	r2,zero,88db0 <_realloc_r+0x538>
   88938:	a93fff17 	ldw	r4,-4(r21)
   8893c:	10fffe04 	addi	r3,r2,-8
   88940:	00bfff84 	movi	r2,-2
   88944:	2084703a 	and	r2,r4,r2
   88948:	9885883a 	add	r2,r19,r2
   8894c:	1880ee26 	beq	r3,r2,88d08 <_realloc_r+0x490>
   88950:	81bfff04 	addi	r6,r16,-4
   88954:	00800904 	movi	r2,36
   88958:	1180b836 	bltu	r2,r6,88c3c <_realloc_r+0x3c4>
   8895c:	00c004c4 	movi	r3,19
   88960:	19809636 	bltu	r3,r6,88bbc <_realloc_r+0x344>
   88964:	9005883a 	mov	r2,r18
   88968:	a807883a 	mov	r3,r21
   8896c:	19000017 	ldw	r4,0(r3)
   88970:	11000015 	stw	r4,0(r2)
   88974:	19000117 	ldw	r4,4(r3)
   88978:	11000115 	stw	r4,4(r2)
   8897c:	18c00217 	ldw	r3,8(r3)
   88980:	10c00215 	stw	r3,8(r2)
   88984:	a80b883a 	mov	r5,r21
   88988:	a009883a 	mov	r4,r20
   8898c:	0085f780 	call	85f78 <_free_r>
   88990:	a009883a 	mov	r4,r20
   88994:	008ed640 	call	8ed64 <__malloc_unlock>
   88998:	9005883a 	mov	r2,r18
   8899c:	00001206 	br	889e8 <_realloc_r+0x170>
   889a0:	00c00404 	movi	r3,16
   889a4:	1823883a 	mov	r17,r3
   889a8:	003fce06 	br	888e4 <__alt_data_end+0xfffa6e64>
   889ac:	a825883a 	mov	r18,r21
   889b0:	8445c83a 	sub	r2,r16,r17
   889b4:	00c003c4 	movi	r3,15
   889b8:	18802636 	bltu	r3,r2,88a54 <_realloc_r+0x1dc>
   889bc:	99800117 	ldw	r6,4(r19)
   889c0:	9c07883a 	add	r3,r19,r16
   889c4:	3180004c 	andi	r6,r6,1
   889c8:	3420b03a 	or	r16,r6,r16
   889cc:	9c000115 	stw	r16,4(r19)
   889d0:	18800117 	ldw	r2,4(r3)
   889d4:	10800054 	ori	r2,r2,1
   889d8:	18800115 	stw	r2,4(r3)
   889dc:	a009883a 	mov	r4,r20
   889e0:	008ed640 	call	8ed64 <__malloc_unlock>
   889e4:	9005883a 	mov	r2,r18
   889e8:	dfc00917 	ldw	ra,36(sp)
   889ec:	df000817 	ldw	fp,32(sp)
   889f0:	ddc00717 	ldw	r23,28(sp)
   889f4:	dd800617 	ldw	r22,24(sp)
   889f8:	dd400517 	ldw	r21,20(sp)
   889fc:	dd000417 	ldw	r20,16(sp)
   88a00:	dcc00317 	ldw	r19,12(sp)
   88a04:	dc800217 	ldw	r18,8(sp)
   88a08:	dc400117 	ldw	r17,4(sp)
   88a0c:	dc000017 	ldw	r16,0(sp)
   88a10:	dec00a04 	addi	sp,sp,40
   88a14:	f800283a 	ret
   88a18:	017fff04 	movi	r5,-4
   88a1c:	414a703a 	and	r5,r8,r5
   88a20:	814d883a 	add	r6,r16,r5
   88a24:	30c01f16 	blt	r6,r3,88aa4 <_realloc_r+0x22c>
   88a28:	20800317 	ldw	r2,12(r4)
   88a2c:	20c00217 	ldw	r3,8(r4)
   88a30:	a825883a 	mov	r18,r21
   88a34:	3021883a 	mov	r16,r6
   88a38:	18800315 	stw	r2,12(r3)
   88a3c:	10c00215 	stw	r3,8(r2)
   88a40:	003fdb06 	br	889b0 <__alt_data_end+0xfffa6f30>
   88a44:	00800304 	movi	r2,12
   88a48:	a0800015 	stw	r2,0(r20)
   88a4c:	0005883a 	mov	r2,zero
   88a50:	003fe506 	br	889e8 <__alt_data_end+0xfffa6f68>
   88a54:	98c00117 	ldw	r3,4(r19)
   88a58:	9c4b883a 	add	r5,r19,r17
   88a5c:	11000054 	ori	r4,r2,1
   88a60:	18c0004c 	andi	r3,r3,1
   88a64:	1c62b03a 	or	r17,r3,r17
   88a68:	9c400115 	stw	r17,4(r19)
   88a6c:	29000115 	stw	r4,4(r5)
   88a70:	2885883a 	add	r2,r5,r2
   88a74:	10c00117 	ldw	r3,4(r2)
   88a78:	29400204 	addi	r5,r5,8
   88a7c:	a009883a 	mov	r4,r20
   88a80:	18c00054 	ori	r3,r3,1
   88a84:	10c00115 	stw	r3,4(r2)
   88a88:	0085f780 	call	85f78 <_free_r>
   88a8c:	003fd306 	br	889dc <__alt_data_end+0xfffa6f5c>
   88a90:	017fff04 	movi	r5,-4
   88a94:	414a703a 	and	r5,r8,r5
   88a98:	89800404 	addi	r6,r17,16
   88a9c:	8151883a 	add	r8,r16,r5
   88aa0:	4180590e 	bge	r8,r6,88c08 <_realloc_r+0x390>
   88aa4:	1080004c 	andi	r2,r2,1
   88aa8:	103f9e1e 	bne	r2,zero,88924 <__alt_data_end+0xfffa6ea4>
   88aac:	adbffe17 	ldw	r22,-8(r21)
   88ab0:	00bfff04 	movi	r2,-4
   88ab4:	9dadc83a 	sub	r22,r19,r22
   88ab8:	b1800117 	ldw	r6,4(r22)
   88abc:	3084703a 	and	r2,r6,r2
   88ac0:	20002026 	beq	r4,zero,88b44 <_realloc_r+0x2cc>
   88ac4:	80af883a 	add	r23,r16,r2
   88ac8:	b96f883a 	add	r23,r23,r5
   88acc:	21c05f26 	beq	r4,r7,88c4c <_realloc_r+0x3d4>
   88ad0:	b8c01c16 	blt	r23,r3,88b44 <_realloc_r+0x2cc>
   88ad4:	20800317 	ldw	r2,12(r4)
   88ad8:	20c00217 	ldw	r3,8(r4)
   88adc:	81bfff04 	addi	r6,r16,-4
   88ae0:	01000904 	movi	r4,36
   88ae4:	18800315 	stw	r2,12(r3)
   88ae8:	10c00215 	stw	r3,8(r2)
   88aec:	b0c00217 	ldw	r3,8(r22)
   88af0:	b0800317 	ldw	r2,12(r22)
   88af4:	b4800204 	addi	r18,r22,8
   88af8:	18800315 	stw	r2,12(r3)
   88afc:	10c00215 	stw	r3,8(r2)
   88b00:	21801b36 	bltu	r4,r6,88b70 <_realloc_r+0x2f8>
   88b04:	008004c4 	movi	r2,19
   88b08:	1180352e 	bgeu	r2,r6,88be0 <_realloc_r+0x368>
   88b0c:	a8800017 	ldw	r2,0(r21)
   88b10:	b0800215 	stw	r2,8(r22)
   88b14:	a8800117 	ldw	r2,4(r21)
   88b18:	b0800315 	stw	r2,12(r22)
   88b1c:	008006c4 	movi	r2,27
   88b20:	11807f36 	bltu	r2,r6,88d20 <_realloc_r+0x4a8>
   88b24:	b0800404 	addi	r2,r22,16
   88b28:	ad400204 	addi	r21,r21,8
   88b2c:	00002d06 	br	88be4 <_realloc_r+0x36c>
   88b30:	adbffe17 	ldw	r22,-8(r21)
   88b34:	00bfff04 	movi	r2,-4
   88b38:	9dadc83a 	sub	r22,r19,r22
   88b3c:	b1000117 	ldw	r4,4(r22)
   88b40:	2084703a 	and	r2,r4,r2
   88b44:	b03f7726 	beq	r22,zero,88924 <__alt_data_end+0xfffa6ea4>
   88b48:	80af883a 	add	r23,r16,r2
   88b4c:	b8ff7516 	blt	r23,r3,88924 <__alt_data_end+0xfffa6ea4>
   88b50:	b0800317 	ldw	r2,12(r22)
   88b54:	b0c00217 	ldw	r3,8(r22)
   88b58:	81bfff04 	addi	r6,r16,-4
   88b5c:	01000904 	movi	r4,36
   88b60:	18800315 	stw	r2,12(r3)
   88b64:	10c00215 	stw	r3,8(r2)
   88b68:	b4800204 	addi	r18,r22,8
   88b6c:	21bfe52e 	bgeu	r4,r6,88b04 <__alt_data_end+0xfffa7084>
   88b70:	a80b883a 	mov	r5,r21
   88b74:	9009883a 	mov	r4,r18
   88b78:	00875f80 	call	875f8 <memmove>
   88b7c:	b821883a 	mov	r16,r23
   88b80:	b027883a 	mov	r19,r22
   88b84:	003f8a06 	br	889b0 <__alt_data_end+0xfffa6f30>
   88b88:	300b883a 	mov	r5,r6
   88b8c:	dfc00917 	ldw	ra,36(sp)
   88b90:	df000817 	ldw	fp,32(sp)
   88b94:	ddc00717 	ldw	r23,28(sp)
   88b98:	dd800617 	ldw	r22,24(sp)
   88b9c:	dd400517 	ldw	r21,20(sp)
   88ba0:	dd000417 	ldw	r20,16(sp)
   88ba4:	dcc00317 	ldw	r19,12(sp)
   88ba8:	dc800217 	ldw	r18,8(sp)
   88bac:	dc400117 	ldw	r17,4(sp)
   88bb0:	dc000017 	ldw	r16,0(sp)
   88bb4:	dec00a04 	addi	sp,sp,40
   88bb8:	0086bc01 	jmpi	86bc0 <_malloc_r>
   88bbc:	a8c00017 	ldw	r3,0(r21)
   88bc0:	90c00015 	stw	r3,0(r18)
   88bc4:	a8c00117 	ldw	r3,4(r21)
   88bc8:	90c00115 	stw	r3,4(r18)
   88bcc:	00c006c4 	movi	r3,27
   88bd0:	19804536 	bltu	r3,r6,88ce8 <_realloc_r+0x470>
   88bd4:	90800204 	addi	r2,r18,8
   88bd8:	a8c00204 	addi	r3,r21,8
   88bdc:	003f6306 	br	8896c <__alt_data_end+0xfffa6eec>
   88be0:	9005883a 	mov	r2,r18
   88be4:	a8c00017 	ldw	r3,0(r21)
   88be8:	b821883a 	mov	r16,r23
   88bec:	b027883a 	mov	r19,r22
   88bf0:	10c00015 	stw	r3,0(r2)
   88bf4:	a8c00117 	ldw	r3,4(r21)
   88bf8:	10c00115 	stw	r3,4(r2)
   88bfc:	a8c00217 	ldw	r3,8(r21)
   88c00:	10c00215 	stw	r3,8(r2)
   88c04:	003f6a06 	br	889b0 <__alt_data_end+0xfffa6f30>
   88c08:	9c67883a 	add	r19,r19,r17
   88c0c:	4445c83a 	sub	r2,r8,r17
   88c10:	e4c00215 	stw	r19,8(fp)
   88c14:	10800054 	ori	r2,r2,1
   88c18:	98800115 	stw	r2,4(r19)
   88c1c:	a8bfff17 	ldw	r2,-4(r21)
   88c20:	a009883a 	mov	r4,r20
   88c24:	1080004c 	andi	r2,r2,1
   88c28:	1462b03a 	or	r17,r2,r17
   88c2c:	ac7fff15 	stw	r17,-4(r21)
   88c30:	008ed640 	call	8ed64 <__malloc_unlock>
   88c34:	a805883a 	mov	r2,r21
   88c38:	003f6b06 	br	889e8 <__alt_data_end+0xfffa6f68>
   88c3c:	a80b883a 	mov	r5,r21
   88c40:	9009883a 	mov	r4,r18
   88c44:	00875f80 	call	875f8 <memmove>
   88c48:	003f4e06 	br	88984 <__alt_data_end+0xfffa6f04>
   88c4c:	89000404 	addi	r4,r17,16
   88c50:	b93fbc16 	blt	r23,r4,88b44 <__alt_data_end+0xfffa70c4>
   88c54:	b0800317 	ldw	r2,12(r22)
   88c58:	b0c00217 	ldw	r3,8(r22)
   88c5c:	81bfff04 	addi	r6,r16,-4
   88c60:	01000904 	movi	r4,36
   88c64:	18800315 	stw	r2,12(r3)
   88c68:	10c00215 	stw	r3,8(r2)
   88c6c:	b4800204 	addi	r18,r22,8
   88c70:	21804336 	bltu	r4,r6,88d80 <_realloc_r+0x508>
   88c74:	008004c4 	movi	r2,19
   88c78:	11803f2e 	bgeu	r2,r6,88d78 <_realloc_r+0x500>
   88c7c:	a8800017 	ldw	r2,0(r21)
   88c80:	b0800215 	stw	r2,8(r22)
   88c84:	a8800117 	ldw	r2,4(r21)
   88c88:	b0800315 	stw	r2,12(r22)
   88c8c:	008006c4 	movi	r2,27
   88c90:	11803f36 	bltu	r2,r6,88d90 <_realloc_r+0x518>
   88c94:	b0800404 	addi	r2,r22,16
   88c98:	ad400204 	addi	r21,r21,8
   88c9c:	a8c00017 	ldw	r3,0(r21)
   88ca0:	10c00015 	stw	r3,0(r2)
   88ca4:	a8c00117 	ldw	r3,4(r21)
   88ca8:	10c00115 	stw	r3,4(r2)
   88cac:	a8c00217 	ldw	r3,8(r21)
   88cb0:	10c00215 	stw	r3,8(r2)
   88cb4:	b447883a 	add	r3,r22,r17
   88cb8:	bc45c83a 	sub	r2,r23,r17
   88cbc:	e0c00215 	stw	r3,8(fp)
   88cc0:	10800054 	ori	r2,r2,1
   88cc4:	18800115 	stw	r2,4(r3)
   88cc8:	b0800117 	ldw	r2,4(r22)
   88ccc:	a009883a 	mov	r4,r20
   88cd0:	1080004c 	andi	r2,r2,1
   88cd4:	1462b03a 	or	r17,r2,r17
   88cd8:	b4400115 	stw	r17,4(r22)
   88cdc:	008ed640 	call	8ed64 <__malloc_unlock>
   88ce0:	9005883a 	mov	r2,r18
   88ce4:	003f4006 	br	889e8 <__alt_data_end+0xfffa6f68>
   88ce8:	a8c00217 	ldw	r3,8(r21)
   88cec:	90c00215 	stw	r3,8(r18)
   88cf0:	a8c00317 	ldw	r3,12(r21)
   88cf4:	90c00315 	stw	r3,12(r18)
   88cf8:	30801126 	beq	r6,r2,88d40 <_realloc_r+0x4c8>
   88cfc:	90800404 	addi	r2,r18,16
   88d00:	a8c00404 	addi	r3,r21,16
   88d04:	003f1906 	br	8896c <__alt_data_end+0xfffa6eec>
   88d08:	90ffff17 	ldw	r3,-4(r18)
   88d0c:	00bfff04 	movi	r2,-4
   88d10:	a825883a 	mov	r18,r21
   88d14:	1884703a 	and	r2,r3,r2
   88d18:	80a1883a 	add	r16,r16,r2
   88d1c:	003f2406 	br	889b0 <__alt_data_end+0xfffa6f30>
   88d20:	a8800217 	ldw	r2,8(r21)
   88d24:	b0800415 	stw	r2,16(r22)
   88d28:	a8800317 	ldw	r2,12(r21)
   88d2c:	b0800515 	stw	r2,20(r22)
   88d30:	31000a26 	beq	r6,r4,88d5c <_realloc_r+0x4e4>
   88d34:	b0800604 	addi	r2,r22,24
   88d38:	ad400404 	addi	r21,r21,16
   88d3c:	003fa906 	br	88be4 <__alt_data_end+0xfffa7164>
   88d40:	a9000417 	ldw	r4,16(r21)
   88d44:	90800604 	addi	r2,r18,24
   88d48:	a8c00604 	addi	r3,r21,24
   88d4c:	91000415 	stw	r4,16(r18)
   88d50:	a9000517 	ldw	r4,20(r21)
   88d54:	91000515 	stw	r4,20(r18)
   88d58:	003f0406 	br	8896c <__alt_data_end+0xfffa6eec>
   88d5c:	a8c00417 	ldw	r3,16(r21)
   88d60:	ad400604 	addi	r21,r21,24
   88d64:	b0800804 	addi	r2,r22,32
   88d68:	b0c00615 	stw	r3,24(r22)
   88d6c:	a8ffff17 	ldw	r3,-4(r21)
   88d70:	b0c00715 	stw	r3,28(r22)
   88d74:	003f9b06 	br	88be4 <__alt_data_end+0xfffa7164>
   88d78:	9005883a 	mov	r2,r18
   88d7c:	003fc706 	br	88c9c <__alt_data_end+0xfffa721c>
   88d80:	a80b883a 	mov	r5,r21
   88d84:	9009883a 	mov	r4,r18
   88d88:	00875f80 	call	875f8 <memmove>
   88d8c:	003fc906 	br	88cb4 <__alt_data_end+0xfffa7234>
   88d90:	a8800217 	ldw	r2,8(r21)
   88d94:	b0800415 	stw	r2,16(r22)
   88d98:	a8800317 	ldw	r2,12(r21)
   88d9c:	b0800515 	stw	r2,20(r22)
   88da0:	31000726 	beq	r6,r4,88dc0 <_realloc_r+0x548>
   88da4:	b0800604 	addi	r2,r22,24
   88da8:	ad400404 	addi	r21,r21,16
   88dac:	003fbb06 	br	88c9c <__alt_data_end+0xfffa721c>
   88db0:	a009883a 	mov	r4,r20
   88db4:	008ed640 	call	8ed64 <__malloc_unlock>
   88db8:	0005883a 	mov	r2,zero
   88dbc:	003f0a06 	br	889e8 <__alt_data_end+0xfffa6f68>
   88dc0:	a8c00417 	ldw	r3,16(r21)
   88dc4:	ad400604 	addi	r21,r21,24
   88dc8:	b0800804 	addi	r2,r22,32
   88dcc:	b0c00615 	stw	r3,24(r22)
   88dd0:	a8ffff17 	ldw	r3,-4(r21)
   88dd4:	b0c00715 	stw	r3,28(r22)
   88dd8:	003fb006 	br	88c9c <__alt_data_end+0xfffa721c>

00088ddc <__fpclassifyd>:
   88ddc:	00a00034 	movhi	r2,32768
   88de0:	10bfffc4 	addi	r2,r2,-1
   88de4:	2884703a 	and	r2,r5,r2
   88de8:	10000726 	beq	r2,zero,88e08 <__fpclassifyd+0x2c>
   88dec:	00fffc34 	movhi	r3,65520
   88df0:	019ff834 	movhi	r6,32736
   88df4:	28c7883a 	add	r3,r5,r3
   88df8:	31bfffc4 	addi	r6,r6,-1
   88dfc:	30c00536 	bltu	r6,r3,88e14 <__fpclassifyd+0x38>
   88e00:	00800104 	movi	r2,4
   88e04:	f800283a 	ret
   88e08:	2000021e 	bne	r4,zero,88e14 <__fpclassifyd+0x38>
   88e0c:	00800084 	movi	r2,2
   88e10:	f800283a 	ret
   88e14:	00dffc34 	movhi	r3,32752
   88e18:	019ff834 	movhi	r6,32736
   88e1c:	28cb883a 	add	r5,r5,r3
   88e20:	31bfffc4 	addi	r6,r6,-1
   88e24:	317ff62e 	bgeu	r6,r5,88e00 <__alt_data_end+0xfffa7380>
   88e28:	01400434 	movhi	r5,16
   88e2c:	297fffc4 	addi	r5,r5,-1
   88e30:	28800236 	bltu	r5,r2,88e3c <__fpclassifyd+0x60>
   88e34:	008000c4 	movi	r2,3
   88e38:	f800283a 	ret
   88e3c:	10c00226 	beq	r2,r3,88e48 <__fpclassifyd+0x6c>
   88e40:	0005883a 	mov	r2,zero
   88e44:	f800283a 	ret
   88e48:	2005003a 	cmpeq	r2,r4,zero
   88e4c:	f800283a 	ret

00088e50 <_sbrk_r>:
   88e50:	defffd04 	addi	sp,sp,-12
   88e54:	dc000015 	stw	r16,0(sp)
   88e58:	04000274 	movhi	r16,9
   88e5c:	dc400115 	stw	r17,4(sp)
   88e60:	8412bd04 	addi	r16,r16,19188
   88e64:	2023883a 	mov	r17,r4
   88e68:	2809883a 	mov	r4,r5
   88e6c:	dfc00215 	stw	ra,8(sp)
   88e70:	80000015 	stw	zero,0(r16)
   88e74:	008ef240 	call	8ef24 <sbrk>
   88e78:	00ffffc4 	movi	r3,-1
   88e7c:	10c00526 	beq	r2,r3,88e94 <_sbrk_r+0x44>
   88e80:	dfc00217 	ldw	ra,8(sp)
   88e84:	dc400117 	ldw	r17,4(sp)
   88e88:	dc000017 	ldw	r16,0(sp)
   88e8c:	dec00304 	addi	sp,sp,12
   88e90:	f800283a 	ret
   88e94:	80c00017 	ldw	r3,0(r16)
   88e98:	183ff926 	beq	r3,zero,88e80 <__alt_data_end+0xfffa7400>
   88e9c:	88c00015 	stw	r3,0(r17)
   88ea0:	003ff706 	br	88e80 <__alt_data_end+0xfffa7400>

00088ea4 <__sread>:
   88ea4:	defffe04 	addi	sp,sp,-8
   88ea8:	dc000015 	stw	r16,0(sp)
   88eac:	2821883a 	mov	r16,r5
   88eb0:	2940038f 	ldh	r5,14(r5)
   88eb4:	dfc00115 	stw	ra,4(sp)
   88eb8:	008ac980 	call	8ac98 <_read_r>
   88ebc:	10000716 	blt	r2,zero,88edc <__sread+0x38>
   88ec0:	80c01417 	ldw	r3,80(r16)
   88ec4:	1887883a 	add	r3,r3,r2
   88ec8:	80c01415 	stw	r3,80(r16)
   88ecc:	dfc00117 	ldw	ra,4(sp)
   88ed0:	dc000017 	ldw	r16,0(sp)
   88ed4:	dec00204 	addi	sp,sp,8
   88ed8:	f800283a 	ret
   88edc:	80c0030b 	ldhu	r3,12(r16)
   88ee0:	18fbffcc 	andi	r3,r3,61439
   88ee4:	80c0030d 	sth	r3,12(r16)
   88ee8:	dfc00117 	ldw	ra,4(sp)
   88eec:	dc000017 	ldw	r16,0(sp)
   88ef0:	dec00204 	addi	sp,sp,8
   88ef4:	f800283a 	ret

00088ef8 <__seofread>:
   88ef8:	0005883a 	mov	r2,zero
   88efc:	f800283a 	ret

00088f00 <__swrite>:
   88f00:	2880030b 	ldhu	r2,12(r5)
   88f04:	defffb04 	addi	sp,sp,-20
   88f08:	dcc00315 	stw	r19,12(sp)
   88f0c:	dc800215 	stw	r18,8(sp)
   88f10:	dc400115 	stw	r17,4(sp)
   88f14:	dc000015 	stw	r16,0(sp)
   88f18:	dfc00415 	stw	ra,16(sp)
   88f1c:	10c0400c 	andi	r3,r2,256
   88f20:	2821883a 	mov	r16,r5
   88f24:	2023883a 	mov	r17,r4
   88f28:	3025883a 	mov	r18,r6
   88f2c:	3827883a 	mov	r19,r7
   88f30:	18000526 	beq	r3,zero,88f48 <__swrite+0x48>
   88f34:	2940038f 	ldh	r5,14(r5)
   88f38:	01c00084 	movi	r7,2
   88f3c:	000d883a 	mov	r6,zero
   88f40:	008ac380 	call	8ac38 <_lseek_r>
   88f44:	8080030b 	ldhu	r2,12(r16)
   88f48:	8140038f 	ldh	r5,14(r16)
   88f4c:	10bbffcc 	andi	r2,r2,61439
   88f50:	980f883a 	mov	r7,r19
   88f54:	900d883a 	mov	r6,r18
   88f58:	8809883a 	mov	r4,r17
   88f5c:	8080030d 	sth	r2,12(r16)
   88f60:	dfc00417 	ldw	ra,16(sp)
   88f64:	dcc00317 	ldw	r19,12(sp)
   88f68:	dc800217 	ldw	r18,8(sp)
   88f6c:	dc400117 	ldw	r17,4(sp)
   88f70:	dc000017 	ldw	r16,0(sp)
   88f74:	dec00504 	addi	sp,sp,20
   88f78:	008a7041 	jmpi	8a704 <_write_r>

00088f7c <__sseek>:
   88f7c:	defffe04 	addi	sp,sp,-8
   88f80:	dc000015 	stw	r16,0(sp)
   88f84:	2821883a 	mov	r16,r5
   88f88:	2940038f 	ldh	r5,14(r5)
   88f8c:	dfc00115 	stw	ra,4(sp)
   88f90:	008ac380 	call	8ac38 <_lseek_r>
   88f94:	00ffffc4 	movi	r3,-1
   88f98:	10c00826 	beq	r2,r3,88fbc <__sseek+0x40>
   88f9c:	80c0030b 	ldhu	r3,12(r16)
   88fa0:	80801415 	stw	r2,80(r16)
   88fa4:	18c40014 	ori	r3,r3,4096
   88fa8:	80c0030d 	sth	r3,12(r16)
   88fac:	dfc00117 	ldw	ra,4(sp)
   88fb0:	dc000017 	ldw	r16,0(sp)
   88fb4:	dec00204 	addi	sp,sp,8
   88fb8:	f800283a 	ret
   88fbc:	80c0030b 	ldhu	r3,12(r16)
   88fc0:	18fbffcc 	andi	r3,r3,61439
   88fc4:	80c0030d 	sth	r3,12(r16)
   88fc8:	dfc00117 	ldw	ra,4(sp)
   88fcc:	dc000017 	ldw	r16,0(sp)
   88fd0:	dec00204 	addi	sp,sp,8
   88fd4:	f800283a 	ret

00088fd8 <__sclose>:
   88fd8:	2940038f 	ldh	r5,14(r5)
   88fdc:	008a7641 	jmpi	8a764 <_close_r>

00088fe0 <strcmp>:
   88fe0:	2144b03a 	or	r2,r4,r5
   88fe4:	108000cc 	andi	r2,r2,3
   88fe8:	1000171e 	bne	r2,zero,89048 <strcmp+0x68>
   88fec:	20800017 	ldw	r2,0(r4)
   88ff0:	28c00017 	ldw	r3,0(r5)
   88ff4:	10c0141e 	bne	r2,r3,89048 <strcmp+0x68>
   88ff8:	027fbff4 	movhi	r9,65279
   88ffc:	4a7fbfc4 	addi	r9,r9,-257
   89000:	0086303a 	nor	r3,zero,r2
   89004:	02202074 	movhi	r8,32897
   89008:	1245883a 	add	r2,r2,r9
   8900c:	42202004 	addi	r8,r8,-32640
   89010:	10c4703a 	and	r2,r2,r3
   89014:	1204703a 	and	r2,r2,r8
   89018:	10000226 	beq	r2,zero,89024 <strcmp+0x44>
   8901c:	00002306 	br	890ac <strcmp+0xcc>
   89020:	1000221e 	bne	r2,zero,890ac <strcmp+0xcc>
   89024:	21000104 	addi	r4,r4,4
   89028:	20c00017 	ldw	r3,0(r4)
   8902c:	29400104 	addi	r5,r5,4
   89030:	29800017 	ldw	r6,0(r5)
   89034:	1a4f883a 	add	r7,r3,r9
   89038:	00c4303a 	nor	r2,zero,r3
   8903c:	3884703a 	and	r2,r7,r2
   89040:	1204703a 	and	r2,r2,r8
   89044:	19bff626 	beq	r3,r6,89020 <__alt_data_end+0xfffa75a0>
   89048:	20800003 	ldbu	r2,0(r4)
   8904c:	10c03fcc 	andi	r3,r2,255
   89050:	18c0201c 	xori	r3,r3,128
   89054:	18ffe004 	addi	r3,r3,-128
   89058:	18000c26 	beq	r3,zero,8908c <strcmp+0xac>
   8905c:	29800007 	ldb	r6,0(r5)
   89060:	19800326 	beq	r3,r6,89070 <strcmp+0x90>
   89064:	00001306 	br	890b4 <strcmp+0xd4>
   89068:	29800007 	ldb	r6,0(r5)
   8906c:	11800b1e 	bne	r2,r6,8909c <strcmp+0xbc>
   89070:	21000044 	addi	r4,r4,1
   89074:	20c00003 	ldbu	r3,0(r4)
   89078:	29400044 	addi	r5,r5,1
   8907c:	18803fcc 	andi	r2,r3,255
   89080:	1080201c 	xori	r2,r2,128
   89084:	10bfe004 	addi	r2,r2,-128
   89088:	103ff71e 	bne	r2,zero,89068 <__alt_data_end+0xfffa75e8>
   8908c:	0007883a 	mov	r3,zero
   89090:	28800003 	ldbu	r2,0(r5)
   89094:	1885c83a 	sub	r2,r3,r2
   89098:	f800283a 	ret
   8909c:	28800003 	ldbu	r2,0(r5)
   890a0:	18c03fcc 	andi	r3,r3,255
   890a4:	1885c83a 	sub	r2,r3,r2
   890a8:	f800283a 	ret
   890ac:	0005883a 	mov	r2,zero
   890b0:	f800283a 	ret
   890b4:	10c03fcc 	andi	r3,r2,255
   890b8:	003ff506 	br	89090 <__alt_data_end+0xfffa7610>

000890bc <__sprint_r.part.0>:
   890bc:	28801917 	ldw	r2,100(r5)
   890c0:	defff604 	addi	sp,sp,-40
   890c4:	dd400515 	stw	r21,20(sp)
   890c8:	dfc00915 	stw	ra,36(sp)
   890cc:	df000815 	stw	fp,32(sp)
   890d0:	ddc00715 	stw	r23,28(sp)
   890d4:	dd800615 	stw	r22,24(sp)
   890d8:	dd000415 	stw	r20,16(sp)
   890dc:	dcc00315 	stw	r19,12(sp)
   890e0:	dc800215 	stw	r18,8(sp)
   890e4:	dc400115 	stw	r17,4(sp)
   890e8:	dc000015 	stw	r16,0(sp)
   890ec:	1088000c 	andi	r2,r2,8192
   890f0:	302b883a 	mov	r21,r6
   890f4:	10002e26 	beq	r2,zero,891b0 <__sprint_r.part.0+0xf4>
   890f8:	30800217 	ldw	r2,8(r6)
   890fc:	35800017 	ldw	r22,0(r6)
   89100:	10002926 	beq	r2,zero,891a8 <__sprint_r.part.0+0xec>
   89104:	2827883a 	mov	r19,r5
   89108:	2029883a 	mov	r20,r4
   8910c:	b5c00104 	addi	r23,r22,4
   89110:	04bfffc4 	movi	r18,-1
   89114:	bc400017 	ldw	r17,0(r23)
   89118:	b4000017 	ldw	r16,0(r22)
   8911c:	0039883a 	mov	fp,zero
   89120:	8822d0ba 	srli	r17,r17,2
   89124:	8800031e 	bne	r17,zero,89134 <__sprint_r.part.0+0x78>
   89128:	00001806 	br	8918c <__sprint_r.part.0+0xd0>
   8912c:	84000104 	addi	r16,r16,4
   89130:	8f001526 	beq	r17,fp,89188 <__sprint_r.part.0+0xcc>
   89134:	81400017 	ldw	r5,0(r16)
   89138:	980d883a 	mov	r6,r19
   8913c:	a009883a 	mov	r4,r20
   89140:	008aae40 	call	8aae4 <_fputwc_r>
   89144:	e7000044 	addi	fp,fp,1
   89148:	14bff81e 	bne	r2,r18,8912c <__alt_data_end+0xfffa76ac>
   8914c:	9005883a 	mov	r2,r18
   89150:	a8000215 	stw	zero,8(r21)
   89154:	a8000115 	stw	zero,4(r21)
   89158:	dfc00917 	ldw	ra,36(sp)
   8915c:	df000817 	ldw	fp,32(sp)
   89160:	ddc00717 	ldw	r23,28(sp)
   89164:	dd800617 	ldw	r22,24(sp)
   89168:	dd400517 	ldw	r21,20(sp)
   8916c:	dd000417 	ldw	r20,16(sp)
   89170:	dcc00317 	ldw	r19,12(sp)
   89174:	dc800217 	ldw	r18,8(sp)
   89178:	dc400117 	ldw	r17,4(sp)
   8917c:	dc000017 	ldw	r16,0(sp)
   89180:	dec00a04 	addi	sp,sp,40
   89184:	f800283a 	ret
   89188:	a8800217 	ldw	r2,8(r21)
   8918c:	8c63883a 	add	r17,r17,r17
   89190:	8c63883a 	add	r17,r17,r17
   89194:	1445c83a 	sub	r2,r2,r17
   89198:	a8800215 	stw	r2,8(r21)
   8919c:	b5800204 	addi	r22,r22,8
   891a0:	bdc00204 	addi	r23,r23,8
   891a4:	103fdb1e 	bne	r2,zero,89114 <__alt_data_end+0xfffa7694>
   891a8:	0005883a 	mov	r2,zero
   891ac:	003fe806 	br	89150 <__alt_data_end+0xfffa76d0>
   891b0:	00862880 	call	86288 <__sfvwrite_r>
   891b4:	003fe606 	br	89150 <__alt_data_end+0xfffa76d0>

000891b8 <__sprint_r>:
   891b8:	30c00217 	ldw	r3,8(r6)
   891bc:	18000126 	beq	r3,zero,891c4 <__sprint_r+0xc>
   891c0:	00890bc1 	jmpi	890bc <__sprint_r.part.0>
   891c4:	30000115 	stw	zero,4(r6)
   891c8:	0005883a 	mov	r2,zero
   891cc:	f800283a 	ret

000891d0 <___vfiprintf_internal_r>:
   891d0:	deffc904 	addi	sp,sp,-220
   891d4:	df003515 	stw	fp,212(sp)
   891d8:	dd003115 	stw	r20,196(sp)
   891dc:	dfc03615 	stw	ra,216(sp)
   891e0:	ddc03415 	stw	r23,208(sp)
   891e4:	dd803315 	stw	r22,204(sp)
   891e8:	dd403215 	stw	r21,200(sp)
   891ec:	dcc03015 	stw	r19,192(sp)
   891f0:	dc802f15 	stw	r18,188(sp)
   891f4:	dc402e15 	stw	r17,184(sp)
   891f8:	dc002d15 	stw	r16,180(sp)
   891fc:	d9002015 	stw	r4,128(sp)
   89200:	d9c02215 	stw	r7,136(sp)
   89204:	2829883a 	mov	r20,r5
   89208:	3039883a 	mov	fp,r6
   8920c:	20000226 	beq	r4,zero,89218 <___vfiprintf_internal_r+0x48>
   89210:	20800e17 	ldw	r2,56(r4)
   89214:	1000cf26 	beq	r2,zero,89554 <___vfiprintf_internal_r+0x384>
   89218:	a080030b 	ldhu	r2,12(r20)
   8921c:	10c8000c 	andi	r3,r2,8192
   89220:	1800061e 	bne	r3,zero,8923c <___vfiprintf_internal_r+0x6c>
   89224:	a1001917 	ldw	r4,100(r20)
   89228:	00f7ffc4 	movi	r3,-8193
   8922c:	10880014 	ori	r2,r2,8192
   89230:	20c6703a 	and	r3,r4,r3
   89234:	a080030d 	sth	r2,12(r20)
   89238:	a0c01915 	stw	r3,100(r20)
   8923c:	10c0020c 	andi	r3,r2,8
   89240:	1800a926 	beq	r3,zero,894e8 <___vfiprintf_internal_r+0x318>
   89244:	a0c00417 	ldw	r3,16(r20)
   89248:	1800a726 	beq	r3,zero,894e8 <___vfiprintf_internal_r+0x318>
   8924c:	1080068c 	andi	r2,r2,26
   89250:	00c00284 	movi	r3,10
   89254:	10c0ac26 	beq	r2,r3,89508 <___vfiprintf_internal_r+0x338>
   89258:	da801a04 	addi	r10,sp,104
   8925c:	da801e15 	stw	r10,120(sp)
   89260:	d8801e17 	ldw	r2,120(sp)
   89264:	da8019c4 	addi	r10,sp,103
   89268:	05800274 	movhi	r22,9
   8926c:	05c00274 	movhi	r23,9
   89270:	da801f15 	stw	r10,124(sp)
   89274:	1295c83a 	sub	r10,r2,r10
   89278:	b583e904 	addi	r22,r22,4004
   8927c:	bdc3e504 	addi	r23,r23,3988
   89280:	dec01a15 	stw	sp,104(sp)
   89284:	d8001c15 	stw	zero,112(sp)
   89288:	d8001b15 	stw	zero,108(sp)
   8928c:	d8002615 	stw	zero,152(sp)
   89290:	d8002315 	stw	zero,140(sp)
   89294:	da802715 	stw	r10,156(sp)
   89298:	d811883a 	mov	r8,sp
   8929c:	dd002115 	stw	r20,132(sp)
   892a0:	e021883a 	mov	r16,fp
   892a4:	80800007 	ldb	r2,0(r16)
   892a8:	1003ea26 	beq	r2,zero,8a254 <___vfiprintf_internal_r+0x1084>
   892ac:	00c00944 	movi	r3,37
   892b0:	8025883a 	mov	r18,r16
   892b4:	10c0021e 	bne	r2,r3,892c0 <___vfiprintf_internal_r+0xf0>
   892b8:	00001606 	br	89314 <___vfiprintf_internal_r+0x144>
   892bc:	10c00326 	beq	r2,r3,892cc <___vfiprintf_internal_r+0xfc>
   892c0:	94800044 	addi	r18,r18,1
   892c4:	90800007 	ldb	r2,0(r18)
   892c8:	103ffc1e 	bne	r2,zero,892bc <__alt_data_end+0xfffa783c>
   892cc:	9423c83a 	sub	r17,r18,r16
   892d0:	88001026 	beq	r17,zero,89314 <___vfiprintf_internal_r+0x144>
   892d4:	d8c01c17 	ldw	r3,112(sp)
   892d8:	d8801b17 	ldw	r2,108(sp)
   892dc:	44000015 	stw	r16,0(r8)
   892e0:	88c7883a 	add	r3,r17,r3
   892e4:	10800044 	addi	r2,r2,1
   892e8:	44400115 	stw	r17,4(r8)
   892ec:	d8c01c15 	stw	r3,112(sp)
   892f0:	d8801b15 	stw	r2,108(sp)
   892f4:	010001c4 	movi	r4,7
   892f8:	2080760e 	bge	r4,r2,894d4 <___vfiprintf_internal_r+0x304>
   892fc:	1803821e 	bne	r3,zero,8a108 <___vfiprintf_internal_r+0xf38>
   89300:	da802317 	ldw	r10,140(sp)
   89304:	d8001b15 	stw	zero,108(sp)
   89308:	d811883a 	mov	r8,sp
   8930c:	5455883a 	add	r10,r10,r17
   89310:	da802315 	stw	r10,140(sp)
   89314:	90800007 	ldb	r2,0(r18)
   89318:	10044626 	beq	r2,zero,8a434 <___vfiprintf_internal_r+0x1264>
   8931c:	90c00047 	ldb	r3,1(r18)
   89320:	94000044 	addi	r16,r18,1
   89324:	d8001d85 	stb	zero,118(sp)
   89328:	0009883a 	mov	r4,zero
   8932c:	000f883a 	mov	r7,zero
   89330:	027fffc4 	movi	r9,-1
   89334:	0023883a 	mov	r17,zero
   89338:	0029883a 	mov	r20,zero
   8933c:	01401604 	movi	r5,88
   89340:	01800244 	movi	r6,9
   89344:	03400a84 	movi	r13,42
   89348:	03001b04 	movi	r12,108
   8934c:	84000044 	addi	r16,r16,1
   89350:	18bff804 	addi	r2,r3,-32
   89354:	28827336 	bltu	r5,r2,89d24 <___vfiprintf_internal_r+0xb54>
   89358:	100490ba 	slli	r2,r2,2
   8935c:	02800274 	movhi	r10,9
   89360:	52a4dc04 	addi	r10,r10,-27792
   89364:	1285883a 	add	r2,r2,r10
   89368:	10800017 	ldw	r2,0(r2)
   8936c:	1000683a 	jmp	r2
   89370:	00089a58 	cmpnei	zero,zero,8809
   89374:	00089d24 	muli	zero,zero,8820
   89378:	00089d24 	muli	zero,zero,8820
   8937c:	00089a78 	rdprs	zero,zero,8809
   89380:	00089d24 	muli	zero,zero,8820
   89384:	00089d24 	muli	zero,zero,8820
   89388:	00089d24 	muli	zero,zero,8820
   8938c:	00089d24 	muli	zero,zero,8820
   89390:	00089d24 	muli	zero,zero,8820
   89394:	00089d24 	muli	zero,zero,8820
   89398:	00089c60 	cmpeqi	zero,zero,8817
   8939c:	00089c7c 	xorhi	zero,zero,8817
   893a0:	00089d24 	muli	zero,zero,8820
   893a4:	00089564 	muli	zero,zero,8789
   893a8:	00089c8c 	andi	zero,zero,8818
   893ac:	00089d24 	muli	zero,zero,8820
   893b0:	00089a84 	movi	zero,8810
   893b4:	00089a90 	cmplti	zero,zero,8810
   893b8:	00089a90 	cmplti	zero,zero,8810
   893bc:	00089a90 	cmplti	zero,zero,8810
   893c0:	00089a90 	cmplti	zero,zero,8810
   893c4:	00089a90 	cmplti	zero,zero,8810
   893c8:	00089a90 	cmplti	zero,zero,8810
   893cc:	00089a90 	cmplti	zero,zero,8810
   893d0:	00089a90 	cmplti	zero,zero,8810
   893d4:	00089a90 	cmplti	zero,zero,8810
   893d8:	00089d24 	muli	zero,zero,8820
   893dc:	00089d24 	muli	zero,zero,8820
   893e0:	00089d24 	muli	zero,zero,8820
   893e4:	00089d24 	muli	zero,zero,8820
   893e8:	00089d24 	muli	zero,zero,8820
   893ec:	00089d24 	muli	zero,zero,8820
   893f0:	00089d24 	muli	zero,zero,8820
   893f4:	00089d24 	muli	zero,zero,8820
   893f8:	00089d24 	muli	zero,zero,8820
   893fc:	00089d24 	muli	zero,zero,8820
   89400:	00089abc 	xorhi	zero,zero,8810
   89404:	00089d24 	muli	zero,zero,8820
   89408:	00089d24 	muli	zero,zero,8820
   8940c:	00089d24 	muli	zero,zero,8820
   89410:	00089d24 	muli	zero,zero,8820
   89414:	00089d24 	muli	zero,zero,8820
   89418:	00089d24 	muli	zero,zero,8820
   8941c:	00089d24 	muli	zero,zero,8820
   89420:	00089d24 	muli	zero,zero,8820
   89424:	00089d24 	muli	zero,zero,8820
   89428:	00089d24 	muli	zero,zero,8820
   8942c:	00089af4 	movhi	zero,8811
   89430:	00089d24 	muli	zero,zero,8820
   89434:	00089d24 	muli	zero,zero,8820
   89438:	00089d24 	muli	zero,zero,8820
   8943c:	00089d24 	muli	zero,zero,8820
   89440:	00089d24 	muli	zero,zero,8820
   89444:	00089b4c 	andi	zero,zero,8813
   89448:	00089d24 	muli	zero,zero,8820
   8944c:	00089d24 	muli	zero,zero,8820
   89450:	00089bbc 	xorhi	zero,zero,8814
   89454:	00089d24 	muli	zero,zero,8820
   89458:	00089d24 	muli	zero,zero,8820
   8945c:	00089d24 	muli	zero,zero,8820
   89460:	00089d24 	muli	zero,zero,8820
   89464:	00089d24 	muli	zero,zero,8820
   89468:	00089d24 	muli	zero,zero,8820
   8946c:	00089d24 	muli	zero,zero,8820
   89470:	00089d24 	muli	zero,zero,8820
   89474:	00089d24 	muli	zero,zero,8820
   89478:	00089d24 	muli	zero,zero,8820
   8947c:	00089968 	cmpgeui	zero,zero,8805
   89480:	00089994 	movui	zero,8806
   89484:	00089d24 	muli	zero,zero,8820
   89488:	00089d24 	muli	zero,zero,8820
   8948c:	00089d24 	muli	zero,zero,8820
   89490:	00089ccc 	andi	zero,zero,8819
   89494:	00089994 	movui	zero,8806
   89498:	00089d24 	muli	zero,zero,8820
   8949c:	00089d24 	muli	zero,zero,8820
   894a0:	00089828 	cmpgeui	zero,zero,8800
   894a4:	00089d24 	muli	zero,zero,8820
   894a8:	00089838 	rdprs	zero,zero,8800
   894ac:	00089874 	movhi	zero,8801
   894b0:	00089570 	cmpltui	zero,zero,8789
   894b4:	0008981c 	xori	zero,zero,8800
   894b8:	00089d24 	muli	zero,zero,8820
   894bc:	00089bf8 	rdprs	zero,zero,8815
   894c0:	00089d24 	muli	zero,zero,8820
   894c4:	00089c50 	cmplti	zero,zero,8817
   894c8:	00089d24 	muli	zero,zero,8820
   894cc:	00089d24 	muli	zero,zero,8820
   894d0:	00089914 	movui	zero,8804
   894d4:	42000204 	addi	r8,r8,8
   894d8:	da802317 	ldw	r10,140(sp)
   894dc:	5455883a 	add	r10,r10,r17
   894e0:	da802315 	stw	r10,140(sp)
   894e4:	003f8b06 	br	89314 <__alt_data_end+0xfffa7894>
   894e8:	d9002017 	ldw	r4,128(sp)
   894ec:	a00b883a 	mov	r5,r20
   894f0:	0083e300 	call	83e30 <__swsetup_r>
   894f4:	1003b11e 	bne	r2,zero,8a3bc <___vfiprintf_internal_r+0x11ec>
   894f8:	a080030b 	ldhu	r2,12(r20)
   894fc:	00c00284 	movi	r3,10
   89500:	1080068c 	andi	r2,r2,26
   89504:	10ff541e 	bne	r2,r3,89258 <__alt_data_end+0xfffa77d8>
   89508:	a080038f 	ldh	r2,14(r20)
   8950c:	103f5216 	blt	r2,zero,89258 <__alt_data_end+0xfffa77d8>
   89510:	d9c02217 	ldw	r7,136(sp)
   89514:	d9002017 	ldw	r4,128(sp)
   89518:	e00d883a 	mov	r6,fp
   8951c:	a00b883a 	mov	r5,r20
   89520:	008a6480 	call	8a648 <__sbprintf>
   89524:	dfc03617 	ldw	ra,216(sp)
   89528:	df003517 	ldw	fp,212(sp)
   8952c:	ddc03417 	ldw	r23,208(sp)
   89530:	dd803317 	ldw	r22,204(sp)
   89534:	dd403217 	ldw	r21,200(sp)
   89538:	dd003117 	ldw	r20,196(sp)
   8953c:	dcc03017 	ldw	r19,192(sp)
   89540:	dc802f17 	ldw	r18,188(sp)
   89544:	dc402e17 	ldw	r17,184(sp)
   89548:	dc002d17 	ldw	r16,180(sp)
   8954c:	dec03704 	addi	sp,sp,220
   89550:	f800283a 	ret
   89554:	0085e040 	call	85e04 <__sinit>
   89558:	003f2f06 	br	89218 <__alt_data_end+0xfffa7798>
   8955c:	0463c83a 	sub	r17,zero,r17
   89560:	d8802215 	stw	r2,136(sp)
   89564:	a5000114 	ori	r20,r20,4
   89568:	80c00007 	ldb	r3,0(r16)
   8956c:	003f7706 	br	8934c <__alt_data_end+0xfffa78cc>
   89570:	00800c04 	movi	r2,48
   89574:	da802217 	ldw	r10,136(sp)
   89578:	d8801d05 	stb	r2,116(sp)
   8957c:	00801e04 	movi	r2,120
   89580:	d8801d45 	stb	r2,117(sp)
   89584:	d8001d85 	stb	zero,118(sp)
   89588:	50c00104 	addi	r3,r10,4
   8958c:	54800017 	ldw	r18,0(r10)
   89590:	0027883a 	mov	r19,zero
   89594:	a0800094 	ori	r2,r20,2
   89598:	48030b16 	blt	r9,zero,8a1c8 <___vfiprintf_internal_r+0xff8>
   8959c:	00bfdfc4 	movi	r2,-129
   895a0:	a096703a 	and	r11,r20,r2
   895a4:	d8c02215 	stw	r3,136(sp)
   895a8:	5d000094 	ori	r20,r11,2
   895ac:	90032b1e 	bne	r18,zero,8a25c <___vfiprintf_internal_r+0x108c>
   895b0:	00800274 	movhi	r2,9
   895b4:	10838404 	addi	r2,r2,3600
   895b8:	d8802615 	stw	r2,152(sp)
   895bc:	0039883a 	mov	fp,zero
   895c0:	48017b1e 	bne	r9,zero,89bb0 <___vfiprintf_internal_r+0x9e0>
   895c4:	0013883a 	mov	r9,zero
   895c8:	0027883a 	mov	r19,zero
   895cc:	dd401a04 	addi	r21,sp,104
   895d0:	4825883a 	mov	r18,r9
   895d4:	4cc0010e 	bge	r9,r19,895dc <___vfiprintf_internal_r+0x40c>
   895d8:	9825883a 	mov	r18,r19
   895dc:	e7003fcc 	andi	fp,fp,255
   895e0:	e700201c 	xori	fp,fp,128
   895e4:	e73fe004 	addi	fp,fp,-128
   895e8:	e0000126 	beq	fp,zero,895f0 <___vfiprintf_internal_r+0x420>
   895ec:	94800044 	addi	r18,r18,1
   895f0:	a380008c 	andi	r14,r20,2
   895f4:	70000126 	beq	r14,zero,895fc <___vfiprintf_internal_r+0x42c>
   895f8:	94800084 	addi	r18,r18,2
   895fc:	a700210c 	andi	fp,r20,132
   89600:	e001df1e 	bne	fp,zero,89d80 <___vfiprintf_internal_r+0xbb0>
   89604:	8c87c83a 	sub	r3,r17,r18
   89608:	00c1dd0e 	bge	zero,r3,89d80 <___vfiprintf_internal_r+0xbb0>
   8960c:	01c00404 	movi	r7,16
   89610:	d8801c17 	ldw	r2,112(sp)
   89614:	38c3ad0e 	bge	r7,r3,8a4cc <___vfiprintf_internal_r+0x12fc>
   89618:	02800274 	movhi	r10,9
   8961c:	5283e904 	addi	r10,r10,4004
   89620:	dc002915 	stw	r16,164(sp)
   89624:	d9801b17 	ldw	r6,108(sp)
   89628:	da802415 	stw	r10,144(sp)
   8962c:	03c001c4 	movi	r15,7
   89630:	da402515 	stw	r9,148(sp)
   89634:	db802815 	stw	r14,160(sp)
   89638:	1821883a 	mov	r16,r3
   8963c:	00000506 	br	89654 <___vfiprintf_internal_r+0x484>
   89640:	31400084 	addi	r5,r6,2
   89644:	42000204 	addi	r8,r8,8
   89648:	200d883a 	mov	r6,r4
   8964c:	843ffc04 	addi	r16,r16,-16
   89650:	3c000d0e 	bge	r7,r16,89688 <___vfiprintf_internal_r+0x4b8>
   89654:	10800404 	addi	r2,r2,16
   89658:	31000044 	addi	r4,r6,1
   8965c:	45800015 	stw	r22,0(r8)
   89660:	41c00115 	stw	r7,4(r8)
   89664:	d8801c15 	stw	r2,112(sp)
   89668:	d9001b15 	stw	r4,108(sp)
   8966c:	793ff40e 	bge	r15,r4,89640 <__alt_data_end+0xfffa7bc0>
   89670:	1001b51e 	bne	r2,zero,89d48 <___vfiprintf_internal_r+0xb78>
   89674:	843ffc04 	addi	r16,r16,-16
   89678:	000d883a 	mov	r6,zero
   8967c:	01400044 	movi	r5,1
   89680:	d811883a 	mov	r8,sp
   89684:	3c3ff316 	blt	r7,r16,89654 <__alt_data_end+0xfffa7bd4>
   89688:	8007883a 	mov	r3,r16
   8968c:	da402517 	ldw	r9,148(sp)
   89690:	db802817 	ldw	r14,160(sp)
   89694:	dc002917 	ldw	r16,164(sp)
   89698:	da802417 	ldw	r10,144(sp)
   8969c:	1885883a 	add	r2,r3,r2
   896a0:	40c00115 	stw	r3,4(r8)
   896a4:	42800015 	stw	r10,0(r8)
   896a8:	d8801c15 	stw	r2,112(sp)
   896ac:	d9401b15 	stw	r5,108(sp)
   896b0:	00c001c4 	movi	r3,7
   896b4:	19426016 	blt	r3,r5,8a038 <___vfiprintf_internal_r+0xe68>
   896b8:	d8c01d87 	ldb	r3,118(sp)
   896bc:	42000204 	addi	r8,r8,8
   896c0:	29000044 	addi	r4,r5,1
   896c4:	1801b31e 	bne	r3,zero,89d94 <___vfiprintf_internal_r+0xbc4>
   896c8:	7001c026 	beq	r14,zero,89dcc <___vfiprintf_internal_r+0xbfc>
   896cc:	d8c01d04 	addi	r3,sp,116
   896d0:	10800084 	addi	r2,r2,2
   896d4:	40c00015 	stw	r3,0(r8)
   896d8:	00c00084 	movi	r3,2
   896dc:	40c00115 	stw	r3,4(r8)
   896e0:	d8801c15 	stw	r2,112(sp)
   896e4:	d9001b15 	stw	r4,108(sp)
   896e8:	00c001c4 	movi	r3,7
   896ec:	1902650e 	bge	r3,r4,8a084 <___vfiprintf_internal_r+0xeb4>
   896f0:	10029a1e 	bne	r2,zero,8a15c <___vfiprintf_internal_r+0xf8c>
   896f4:	00c02004 	movi	r3,128
   896f8:	01000044 	movi	r4,1
   896fc:	000b883a 	mov	r5,zero
   89700:	d811883a 	mov	r8,sp
   89704:	e0c1b31e 	bne	fp,r3,89dd4 <___vfiprintf_internal_r+0xc04>
   89708:	8cb9c83a 	sub	fp,r17,r18
   8970c:	0701b10e 	bge	zero,fp,89dd4 <___vfiprintf_internal_r+0xc04>
   89710:	01c00404 	movi	r7,16
   89714:	3f03890e 	bge	r7,fp,8a53c <___vfiprintf_internal_r+0x136c>
   89718:	00c00274 	movhi	r3,9
   8971c:	18c3e504 	addi	r3,r3,3988
   89720:	d8c02415 	stw	r3,144(sp)
   89724:	8007883a 	mov	r3,r16
   89728:	034001c4 	movi	r13,7
   8972c:	e021883a 	mov	r16,fp
   89730:	da402515 	stw	r9,148(sp)
   89734:	1839883a 	mov	fp,r3
   89738:	00000506 	br	89750 <___vfiprintf_internal_r+0x580>
   8973c:	29800084 	addi	r6,r5,2
   89740:	42000204 	addi	r8,r8,8
   89744:	180b883a 	mov	r5,r3
   89748:	843ffc04 	addi	r16,r16,-16
   8974c:	3c000d0e 	bge	r7,r16,89784 <___vfiprintf_internal_r+0x5b4>
   89750:	10800404 	addi	r2,r2,16
   89754:	28c00044 	addi	r3,r5,1
   89758:	45c00015 	stw	r23,0(r8)
   8975c:	41c00115 	stw	r7,4(r8)
   89760:	d8801c15 	stw	r2,112(sp)
   89764:	d8c01b15 	stw	r3,108(sp)
   89768:	68fff40e 	bge	r13,r3,8973c <__alt_data_end+0xfffa7cbc>
   8976c:	1002241e 	bne	r2,zero,8a000 <___vfiprintf_internal_r+0xe30>
   89770:	843ffc04 	addi	r16,r16,-16
   89774:	01800044 	movi	r6,1
   89778:	000b883a 	mov	r5,zero
   8977c:	d811883a 	mov	r8,sp
   89780:	3c3ff316 	blt	r7,r16,89750 <__alt_data_end+0xfffa7cd0>
   89784:	da402517 	ldw	r9,148(sp)
   89788:	e007883a 	mov	r3,fp
   8978c:	8039883a 	mov	fp,r16
   89790:	1821883a 	mov	r16,r3
   89794:	d8c02417 	ldw	r3,144(sp)
   89798:	1705883a 	add	r2,r2,fp
   8979c:	47000115 	stw	fp,4(r8)
   897a0:	40c00015 	stw	r3,0(r8)
   897a4:	d8801c15 	stw	r2,112(sp)
   897a8:	d9801b15 	stw	r6,108(sp)
   897ac:	00c001c4 	movi	r3,7
   897b0:	19827616 	blt	r3,r6,8a18c <___vfiprintf_internal_r+0xfbc>
   897b4:	4cf9c83a 	sub	fp,r9,r19
   897b8:	42000204 	addi	r8,r8,8
   897bc:	31000044 	addi	r4,r6,1
   897c0:	300b883a 	mov	r5,r6
   897c4:	07018516 	blt	zero,fp,89ddc <___vfiprintf_internal_r+0xc0c>
   897c8:	9885883a 	add	r2,r19,r2
   897cc:	45400015 	stw	r21,0(r8)
   897d0:	44c00115 	stw	r19,4(r8)
   897d4:	d8801c15 	stw	r2,112(sp)
   897d8:	d9001b15 	stw	r4,108(sp)
   897dc:	00c001c4 	movi	r3,7
   897e0:	1901dd0e 	bge	r3,r4,89f58 <___vfiprintf_internal_r+0xd88>
   897e4:	1002401e 	bne	r2,zero,8a0e8 <___vfiprintf_internal_r+0xf18>
   897e8:	d8001b15 	stw	zero,108(sp)
   897ec:	a2c0010c 	andi	r11,r20,4
   897f0:	58000226 	beq	r11,zero,897fc <___vfiprintf_internal_r+0x62c>
   897f4:	8ca7c83a 	sub	r19,r17,r18
   897f8:	04c2f216 	blt	zero,r19,8a3c4 <___vfiprintf_internal_r+0x11f4>
   897fc:	8c80010e 	bge	r17,r18,89804 <___vfiprintf_internal_r+0x634>
   89800:	9023883a 	mov	r17,r18
   89804:	da802317 	ldw	r10,140(sp)
   89808:	5455883a 	add	r10,r10,r17
   8980c:	da802315 	stw	r10,140(sp)
   89810:	d8001b15 	stw	zero,108(sp)
   89814:	d811883a 	mov	r8,sp
   89818:	003ea206 	br	892a4 <__alt_data_end+0xfffa7824>
   8981c:	a5000814 	ori	r20,r20,32
   89820:	80c00007 	ldb	r3,0(r16)
   89824:	003ec906 	br	8934c <__alt_data_end+0xfffa78cc>
   89828:	80c00007 	ldb	r3,0(r16)
   8982c:	1b030926 	beq	r3,r12,8a454 <___vfiprintf_internal_r+0x1284>
   89830:	a5000414 	ori	r20,r20,16
   89834:	003ec506 	br	8934c <__alt_data_end+0xfffa78cc>
   89838:	21003fcc 	andi	r4,r4,255
   8983c:	20035e1e 	bne	r4,zero,8a5b8 <___vfiprintf_internal_r+0x13e8>
   89840:	a080080c 	andi	r2,r20,32
   89844:	1002a526 	beq	r2,zero,8a2dc <___vfiprintf_internal_r+0x110c>
   89848:	da802217 	ldw	r10,136(sp)
   8984c:	50800017 	ldw	r2,0(r10)
   89850:	da802317 	ldw	r10,140(sp)
   89854:	5007d7fa 	srai	r3,r10,31
   89858:	da802217 	ldw	r10,136(sp)
   8985c:	10c00115 	stw	r3,4(r2)
   89860:	52800104 	addi	r10,r10,4
   89864:	da802215 	stw	r10,136(sp)
   89868:	da802317 	ldw	r10,140(sp)
   8986c:	12800015 	stw	r10,0(r2)
   89870:	003e8c06 	br	892a4 <__alt_data_end+0xfffa7824>
   89874:	21003fcc 	andi	r4,r4,255
   89878:	2003511e 	bne	r4,zero,8a5c0 <___vfiprintf_internal_r+0x13f0>
   8987c:	a080080c 	andi	r2,r20,32
   89880:	1000a126 	beq	r2,zero,89b08 <___vfiprintf_internal_r+0x938>
   89884:	da802217 	ldw	r10,136(sp)
   89888:	d8001d85 	stb	zero,118(sp)
   8988c:	50800204 	addi	r2,r10,8
   89890:	54800017 	ldw	r18,0(r10)
   89894:	54c00117 	ldw	r19,4(r10)
   89898:	4802b416 	blt	r9,zero,8a36c <___vfiprintf_internal_r+0x119c>
   8989c:	013fdfc4 	movi	r4,-129
   898a0:	94c6b03a 	or	r3,r18,r19
   898a4:	d8802215 	stw	r2,136(sp)
   898a8:	a128703a 	and	r20,r20,r4
   898ac:	1800a226 	beq	r3,zero,89b38 <___vfiprintf_internal_r+0x968>
   898b0:	0039883a 	mov	fp,zero
   898b4:	dd401a04 	addi	r21,sp,104
   898b8:	9006d0fa 	srli	r3,r18,3
   898bc:	9808977a 	slli	r4,r19,29
   898c0:	9826d0fa 	srli	r19,r19,3
   898c4:	948001cc 	andi	r18,r18,7
   898c8:	90800c04 	addi	r2,r18,48
   898cc:	ad7fffc4 	addi	r21,r21,-1
   898d0:	20e4b03a 	or	r18,r4,r3
   898d4:	a8800005 	stb	r2,0(r21)
   898d8:	94c6b03a 	or	r3,r18,r19
   898dc:	183ff61e 	bne	r3,zero,898b8 <__alt_data_end+0xfffa7e38>
   898e0:	a0c0004c 	andi	r3,r20,1
   898e4:	18005926 	beq	r3,zero,89a4c <___vfiprintf_internal_r+0x87c>
   898e8:	10803fcc 	andi	r2,r2,255
   898ec:	1080201c 	xori	r2,r2,128
   898f0:	10bfe004 	addi	r2,r2,-128
   898f4:	00c00c04 	movi	r3,48
   898f8:	10c05426 	beq	r2,r3,89a4c <___vfiprintf_internal_r+0x87c>
   898fc:	da801e17 	ldw	r10,120(sp)
   89900:	a8bfffc4 	addi	r2,r21,-1
   89904:	a8ffffc5 	stb	r3,-1(r21)
   89908:	50a7c83a 	sub	r19,r10,r2
   8990c:	102b883a 	mov	r21,r2
   89910:	003f2f06 	br	895d0 <__alt_data_end+0xfffa7b50>
   89914:	21003fcc 	andi	r4,r4,255
   89918:	2003421e 	bne	r4,zero,8a624 <___vfiprintf_internal_r+0x1454>
   8991c:	00800274 	movhi	r2,9
   89920:	10838404 	addi	r2,r2,3600
   89924:	d8802615 	stw	r2,152(sp)
   89928:	a080080c 	andi	r2,r20,32
   8992c:	1000aa26 	beq	r2,zero,89bd8 <___vfiprintf_internal_r+0xa08>
   89930:	da802217 	ldw	r10,136(sp)
   89934:	54800017 	ldw	r18,0(r10)
   89938:	54c00117 	ldw	r19,4(r10)
   8993c:	52800204 	addi	r10,r10,8
   89940:	da802215 	stw	r10,136(sp)
   89944:	a080004c 	andi	r2,r20,1
   89948:	1001d226 	beq	r2,zero,8a094 <___vfiprintf_internal_r+0xec4>
   8994c:	94c4b03a 	or	r2,r18,r19
   89950:	1002351e 	bne	r2,zero,8a228 <___vfiprintf_internal_r+0x1058>
   89954:	d8001d85 	stb	zero,118(sp)
   89958:	48022216 	blt	r9,zero,8a1e4 <___vfiprintf_internal_r+0x1014>
   8995c:	00bfdfc4 	movi	r2,-129
   89960:	a0a8703a 	and	r20,r20,r2
   89964:	003f1506 	br	895bc <__alt_data_end+0xfffa7b3c>
   89968:	da802217 	ldw	r10,136(sp)
   8996c:	04800044 	movi	r18,1
   89970:	d8001d85 	stb	zero,118(sp)
   89974:	50800017 	ldw	r2,0(r10)
   89978:	52800104 	addi	r10,r10,4
   8997c:	da802215 	stw	r10,136(sp)
   89980:	d8801005 	stb	r2,64(sp)
   89984:	9027883a 	mov	r19,r18
   89988:	dd401004 	addi	r21,sp,64
   8998c:	0013883a 	mov	r9,zero
   89990:	003f1706 	br	895f0 <__alt_data_end+0xfffa7b70>
   89994:	21003fcc 	andi	r4,r4,255
   89998:	2003201e 	bne	r4,zero,8a61c <___vfiprintf_internal_r+0x144c>
   8999c:	a080080c 	andi	r2,r20,32
   899a0:	10004b26 	beq	r2,zero,89ad0 <___vfiprintf_internal_r+0x900>
   899a4:	da802217 	ldw	r10,136(sp)
   899a8:	50800117 	ldw	r2,4(r10)
   899ac:	54800017 	ldw	r18,0(r10)
   899b0:	52800204 	addi	r10,r10,8
   899b4:	da802215 	stw	r10,136(sp)
   899b8:	1027883a 	mov	r19,r2
   899bc:	10022c16 	blt	r2,zero,8a270 <___vfiprintf_internal_r+0x10a0>
   899c0:	df001d83 	ldbu	fp,118(sp)
   899c4:	48007216 	blt	r9,zero,89b90 <___vfiprintf_internal_r+0x9c0>
   899c8:	00ffdfc4 	movi	r3,-129
   899cc:	94c4b03a 	or	r2,r18,r19
   899d0:	a0e8703a 	and	r20,r20,r3
   899d4:	1000cc26 	beq	r2,zero,89d08 <___vfiprintf_internal_r+0xb38>
   899d8:	98021026 	beq	r19,zero,8a21c <___vfiprintf_internal_r+0x104c>
   899dc:	dc402415 	stw	r17,144(sp)
   899e0:	dc002515 	stw	r16,148(sp)
   899e4:	9823883a 	mov	r17,r19
   899e8:	9021883a 	mov	r16,r18
   899ec:	dd401a04 	addi	r21,sp,104
   899f0:	4825883a 	mov	r18,r9
   899f4:	4027883a 	mov	r19,r8
   899f8:	8009883a 	mov	r4,r16
   899fc:	880b883a 	mov	r5,r17
   89a00:	01800284 	movi	r6,10
   89a04:	000f883a 	mov	r7,zero
   89a08:	008b6100 	call	8b610 <__umoddi3>
   89a0c:	10800c04 	addi	r2,r2,48
   89a10:	ad7fffc4 	addi	r21,r21,-1
   89a14:	8009883a 	mov	r4,r16
   89a18:	880b883a 	mov	r5,r17
   89a1c:	a8800005 	stb	r2,0(r21)
   89a20:	01800284 	movi	r6,10
   89a24:	000f883a 	mov	r7,zero
   89a28:	008b0980 	call	8b098 <__udivdi3>
   89a2c:	1021883a 	mov	r16,r2
   89a30:	10c4b03a 	or	r2,r2,r3
   89a34:	1823883a 	mov	r17,r3
   89a38:	103fef1e 	bne	r2,zero,899f8 <__alt_data_end+0xfffa7f78>
   89a3c:	dc402417 	ldw	r17,144(sp)
   89a40:	dc002517 	ldw	r16,148(sp)
   89a44:	9013883a 	mov	r9,r18
   89a48:	9811883a 	mov	r8,r19
   89a4c:	da801e17 	ldw	r10,120(sp)
   89a50:	5567c83a 	sub	r19,r10,r21
   89a54:	003ede06 	br	895d0 <__alt_data_end+0xfffa7b50>
   89a58:	38803fcc 	andi	r2,r7,255
   89a5c:	1080201c 	xori	r2,r2,128
   89a60:	10bfe004 	addi	r2,r2,-128
   89a64:	1002371e 	bne	r2,zero,8a344 <___vfiprintf_internal_r+0x1174>
   89a68:	01000044 	movi	r4,1
   89a6c:	01c00804 	movi	r7,32
   89a70:	80c00007 	ldb	r3,0(r16)
   89a74:	003e3506 	br	8934c <__alt_data_end+0xfffa78cc>
   89a78:	a5000054 	ori	r20,r20,1
   89a7c:	80c00007 	ldb	r3,0(r16)
   89a80:	003e3206 	br	8934c <__alt_data_end+0xfffa78cc>
   89a84:	a5002014 	ori	r20,r20,128
   89a88:	80c00007 	ldb	r3,0(r16)
   89a8c:	003e2f06 	br	8934c <__alt_data_end+0xfffa78cc>
   89a90:	8015883a 	mov	r10,r16
   89a94:	0023883a 	mov	r17,zero
   89a98:	18bff404 	addi	r2,r3,-48
   89a9c:	50c00007 	ldb	r3,0(r10)
   89aa0:	8c4002a4 	muli	r17,r17,10
   89aa4:	84000044 	addi	r16,r16,1
   89aa8:	8015883a 	mov	r10,r16
   89aac:	1463883a 	add	r17,r2,r17
   89ab0:	18bff404 	addi	r2,r3,-48
   89ab4:	30bff92e 	bgeu	r6,r2,89a9c <__alt_data_end+0xfffa801c>
   89ab8:	003e2506 	br	89350 <__alt_data_end+0xfffa78d0>
   89abc:	21003fcc 	andi	r4,r4,255
   89ac0:	2002d41e 	bne	r4,zero,8a614 <___vfiprintf_internal_r+0x1444>
   89ac4:	a5000414 	ori	r20,r20,16
   89ac8:	a080080c 	andi	r2,r20,32
   89acc:	103fb51e 	bne	r2,zero,899a4 <__alt_data_end+0xfffa7f24>
   89ad0:	a080040c 	andi	r2,r20,16
   89ad4:	1001f826 	beq	r2,zero,8a2b8 <___vfiprintf_internal_r+0x10e8>
   89ad8:	da802217 	ldw	r10,136(sp)
   89adc:	54800017 	ldw	r18,0(r10)
   89ae0:	52800104 	addi	r10,r10,4
   89ae4:	da802215 	stw	r10,136(sp)
   89ae8:	9027d7fa 	srai	r19,r18,31
   89aec:	9805883a 	mov	r2,r19
   89af0:	003fb206 	br	899bc <__alt_data_end+0xfffa7f3c>
   89af4:	21003fcc 	andi	r4,r4,255
   89af8:	2002c41e 	bne	r4,zero,8a60c <___vfiprintf_internal_r+0x143c>
   89afc:	a5000414 	ori	r20,r20,16
   89b00:	a080080c 	andi	r2,r20,32
   89b04:	103f5f1e 	bne	r2,zero,89884 <__alt_data_end+0xfffa7e04>
   89b08:	a080040c 	andi	r2,r20,16
   89b0c:	10020f26 	beq	r2,zero,8a34c <___vfiprintf_internal_r+0x117c>
   89b10:	da802217 	ldw	r10,136(sp)
   89b14:	d8001d85 	stb	zero,118(sp)
   89b18:	0027883a 	mov	r19,zero
   89b1c:	50800104 	addi	r2,r10,4
   89b20:	54800017 	ldw	r18,0(r10)
   89b24:	48021116 	blt	r9,zero,8a36c <___vfiprintf_internal_r+0x119c>
   89b28:	00ffdfc4 	movi	r3,-129
   89b2c:	d8802215 	stw	r2,136(sp)
   89b30:	a0e8703a 	and	r20,r20,r3
   89b34:	903f5e1e 	bne	r18,zero,898b0 <__alt_data_end+0xfffa7e30>
   89b38:	0039883a 	mov	fp,zero
   89b3c:	4802a626 	beq	r9,zero,8a5d8 <___vfiprintf_internal_r+0x1408>
   89b40:	0025883a 	mov	r18,zero
   89b44:	0027883a 	mov	r19,zero
   89b48:	003f5a06 	br	898b4 <__alt_data_end+0xfffa7e34>
   89b4c:	21003fcc 	andi	r4,r4,255
   89b50:	20029f1e 	bne	r4,zero,8a5d0 <___vfiprintf_internal_r+0x1400>
   89b54:	a5000414 	ori	r20,r20,16
   89b58:	a080080c 	andi	r2,r20,32
   89b5c:	10005e1e 	bne	r2,zero,89cd8 <___vfiprintf_internal_r+0xb08>
   89b60:	a080040c 	andi	r2,r20,16
   89b64:	1001a21e 	bne	r2,zero,8a1f0 <___vfiprintf_internal_r+0x1020>
   89b68:	a080100c 	andi	r2,r20,64
   89b6c:	d8001d85 	stb	zero,118(sp)
   89b70:	da802217 	ldw	r10,136(sp)
   89b74:	1002231e 	bne	r2,zero,8a404 <___vfiprintf_internal_r+0x1234>
   89b78:	50800104 	addi	r2,r10,4
   89b7c:	54800017 	ldw	r18,0(r10)
   89b80:	0027883a 	mov	r19,zero
   89b84:	4801a00e 	bge	r9,zero,8a208 <___vfiprintf_internal_r+0x1038>
   89b88:	d8802215 	stw	r2,136(sp)
   89b8c:	0039883a 	mov	fp,zero
   89b90:	94c4b03a 	or	r2,r18,r19
   89b94:	103f901e 	bne	r2,zero,899d8 <__alt_data_end+0xfffa7f58>
   89b98:	00800044 	movi	r2,1
   89b9c:	10803fcc 	andi	r2,r2,255
   89ba0:	00c00044 	movi	r3,1
   89ba4:	10c05926 	beq	r2,r3,89d0c <___vfiprintf_internal_r+0xb3c>
   89ba8:	00c00084 	movi	r3,2
   89bac:	10ffe41e 	bne	r2,r3,89b40 <__alt_data_end+0xfffa80c0>
   89bb0:	0025883a 	mov	r18,zero
   89bb4:	0027883a 	mov	r19,zero
   89bb8:	00013d06 	br	8a0b0 <___vfiprintf_internal_r+0xee0>
   89bbc:	21003fcc 	andi	r4,r4,255
   89bc0:	2002811e 	bne	r4,zero,8a5c8 <___vfiprintf_internal_r+0x13f8>
   89bc4:	00800274 	movhi	r2,9
   89bc8:	10837f04 	addi	r2,r2,3580
   89bcc:	d8802615 	stw	r2,152(sp)
   89bd0:	a080080c 	andi	r2,r20,32
   89bd4:	103f561e 	bne	r2,zero,89930 <__alt_data_end+0xfffa7eb0>
   89bd8:	a080040c 	andi	r2,r20,16
   89bdc:	1001d126 	beq	r2,zero,8a324 <___vfiprintf_internal_r+0x1154>
   89be0:	da802217 	ldw	r10,136(sp)
   89be4:	0027883a 	mov	r19,zero
   89be8:	54800017 	ldw	r18,0(r10)
   89bec:	52800104 	addi	r10,r10,4
   89bf0:	da802215 	stw	r10,136(sp)
   89bf4:	003f5306 	br	89944 <__alt_data_end+0xfffa7ec4>
   89bf8:	da802217 	ldw	r10,136(sp)
   89bfc:	d8001d85 	stb	zero,118(sp)
   89c00:	55400017 	ldw	r21,0(r10)
   89c04:	50c00104 	addi	r3,r10,4
   89c08:	a8024226 	beq	r21,zero,8a514 <___vfiprintf_internal_r+0x1344>
   89c0c:	48021816 	blt	r9,zero,8a470 <___vfiprintf_internal_r+0x12a0>
   89c10:	480d883a 	mov	r6,r9
   89c14:	000b883a 	mov	r5,zero
   89c18:	a809883a 	mov	r4,r21
   89c1c:	d8c02a15 	stw	r3,168(sp)
   89c20:	da002b15 	stw	r8,172(sp)
   89c24:	da402c15 	stw	r9,176(sp)
   89c28:	00873cc0 	call	873cc <memchr>
   89c2c:	d8c02a17 	ldw	r3,168(sp)
   89c30:	da002b17 	ldw	r8,172(sp)
   89c34:	da402c17 	ldw	r9,176(sp)
   89c38:	10024826 	beq	r2,zero,8a55c <___vfiprintf_internal_r+0x138c>
   89c3c:	1567c83a 	sub	r19,r2,r21
   89c40:	df001d83 	ldbu	fp,118(sp)
   89c44:	d8c02215 	stw	r3,136(sp)
   89c48:	0013883a 	mov	r9,zero
   89c4c:	003e6006 	br	895d0 <__alt_data_end+0xfffa7b50>
   89c50:	21003fcc 	andi	r4,r4,255
   89c54:	203fc026 	beq	r4,zero,89b58 <__alt_data_end+0xfffa80d8>
   89c58:	d9c01d85 	stb	r7,118(sp)
   89c5c:	003fbe06 	br	89b58 <__alt_data_end+0xfffa80d8>
   89c60:	da802217 	ldw	r10,136(sp)
   89c64:	54400017 	ldw	r17,0(r10)
   89c68:	50800104 	addi	r2,r10,4
   89c6c:	883e3b16 	blt	r17,zero,8955c <__alt_data_end+0xfffa7adc>
   89c70:	d8802215 	stw	r2,136(sp)
   89c74:	80c00007 	ldb	r3,0(r16)
   89c78:	003db406 	br	8934c <__alt_data_end+0xfffa78cc>
   89c7c:	01000044 	movi	r4,1
   89c80:	01c00ac4 	movi	r7,43
   89c84:	80c00007 	ldb	r3,0(r16)
   89c88:	003db006 	br	8934c <__alt_data_end+0xfffa78cc>
   89c8c:	80c00007 	ldb	r3,0(r16)
   89c90:	82800044 	addi	r10,r16,1
   89c94:	1b423c26 	beq	r3,r13,8a588 <___vfiprintf_internal_r+0x13b8>
   89c98:	18bff404 	addi	r2,r3,-48
   89c9c:	0013883a 	mov	r9,zero
   89ca0:	30822b36 	bltu	r6,r2,8a550 <___vfiprintf_internal_r+0x1380>
   89ca4:	50c00007 	ldb	r3,0(r10)
   89ca8:	4a4002a4 	muli	r9,r9,10
   89cac:	54000044 	addi	r16,r10,1
   89cb0:	8015883a 	mov	r10,r16
   89cb4:	4893883a 	add	r9,r9,r2
   89cb8:	18bff404 	addi	r2,r3,-48
   89cbc:	30bff92e 	bgeu	r6,r2,89ca4 <__alt_data_end+0xfffa8224>
   89cc0:	483da30e 	bge	r9,zero,89350 <__alt_data_end+0xfffa78d0>
   89cc4:	027fffc4 	movi	r9,-1
   89cc8:	003da106 	br	89350 <__alt_data_end+0xfffa78d0>
   89ccc:	a5001014 	ori	r20,r20,64
   89cd0:	80c00007 	ldb	r3,0(r16)
   89cd4:	003d9d06 	br	8934c <__alt_data_end+0xfffa78cc>
   89cd8:	da802217 	ldw	r10,136(sp)
   89cdc:	d8001d85 	stb	zero,118(sp)
   89ce0:	50c00204 	addi	r3,r10,8
   89ce4:	54800017 	ldw	r18,0(r10)
   89ce8:	54c00117 	ldw	r19,4(r10)
   89cec:	4801ca16 	blt	r9,zero,8a418 <___vfiprintf_internal_r+0x1248>
   89cf0:	013fdfc4 	movi	r4,-129
   89cf4:	94c4b03a 	or	r2,r18,r19
   89cf8:	d8c02215 	stw	r3,136(sp)
   89cfc:	a128703a 	and	r20,r20,r4
   89d00:	0039883a 	mov	fp,zero
   89d04:	103f341e 	bne	r2,zero,899d8 <__alt_data_end+0xfffa7f58>
   89d08:	483e2e26 	beq	r9,zero,895c4 <__alt_data_end+0xfffa7b44>
   89d0c:	0025883a 	mov	r18,zero
   89d10:	94800c04 	addi	r18,r18,48
   89d14:	dc8019c5 	stb	r18,103(sp)
   89d18:	dcc02717 	ldw	r19,156(sp)
   89d1c:	dd4019c4 	addi	r21,sp,103
   89d20:	003e2b06 	br	895d0 <__alt_data_end+0xfffa7b50>
   89d24:	21003fcc 	andi	r4,r4,255
   89d28:	2002361e 	bne	r4,zero,8a604 <___vfiprintf_internal_r+0x1434>
   89d2c:	1801c126 	beq	r3,zero,8a434 <___vfiprintf_internal_r+0x1264>
   89d30:	04800044 	movi	r18,1
   89d34:	d8c01005 	stb	r3,64(sp)
   89d38:	d8001d85 	stb	zero,118(sp)
   89d3c:	9027883a 	mov	r19,r18
   89d40:	dd401004 	addi	r21,sp,64
   89d44:	003f1106 	br	8998c <__alt_data_end+0xfffa7f0c>
   89d48:	d9402117 	ldw	r5,132(sp)
   89d4c:	d9002017 	ldw	r4,128(sp)
   89d50:	d9801a04 	addi	r6,sp,104
   89d54:	d9c02b15 	stw	r7,172(sp)
   89d58:	dbc02a15 	stw	r15,168(sp)
   89d5c:	00890bc0 	call	890bc <__sprint_r.part.0>
   89d60:	d9c02b17 	ldw	r7,172(sp)
   89d64:	dbc02a17 	ldw	r15,168(sp)
   89d68:	10006d1e 	bne	r2,zero,89f20 <___vfiprintf_internal_r+0xd50>
   89d6c:	d9801b17 	ldw	r6,108(sp)
   89d70:	d8801c17 	ldw	r2,112(sp)
   89d74:	d811883a 	mov	r8,sp
   89d78:	31400044 	addi	r5,r6,1
   89d7c:	003e3306 	br	8964c <__alt_data_end+0xfffa7bcc>
   89d80:	d9401b17 	ldw	r5,108(sp)
   89d84:	d8801c17 	ldw	r2,112(sp)
   89d88:	29000044 	addi	r4,r5,1
   89d8c:	d8c01d87 	ldb	r3,118(sp)
   89d90:	183e4d26 	beq	r3,zero,896c8 <__alt_data_end+0xfffa7c48>
   89d94:	00c00044 	movi	r3,1
   89d98:	d9401d84 	addi	r5,sp,118
   89d9c:	10c5883a 	add	r2,r2,r3
   89da0:	41400015 	stw	r5,0(r8)
   89da4:	40c00115 	stw	r3,4(r8)
   89da8:	d8801c15 	stw	r2,112(sp)
   89dac:	d9001b15 	stw	r4,108(sp)
   89db0:	014001c4 	movi	r5,7
   89db4:	2900a90e 	bge	r5,r4,8a05c <___vfiprintf_internal_r+0xe8c>
   89db8:	1000da1e 	bne	r2,zero,8a124 <___vfiprintf_internal_r+0xf54>
   89dbc:	7000ab1e 	bne	r14,zero,8a06c <___vfiprintf_internal_r+0xe9c>
   89dc0:	000b883a 	mov	r5,zero
   89dc4:	1809883a 	mov	r4,r3
   89dc8:	d811883a 	mov	r8,sp
   89dcc:	00c02004 	movi	r3,128
   89dd0:	e0fe4d26 	beq	fp,r3,89708 <__alt_data_end+0xfffa7c88>
   89dd4:	4cf9c83a 	sub	fp,r9,r19
   89dd8:	073e7b0e 	bge	zero,fp,897c8 <__alt_data_end+0xfffa7d48>
   89ddc:	01c00404 	movi	r7,16
   89de0:	3f01900e 	bge	r7,fp,8a424 <___vfiprintf_internal_r+0x1254>
   89de4:	00c00274 	movhi	r3,9
   89de8:	18c3e504 	addi	r3,r3,3988
   89dec:	d8c02415 	stw	r3,144(sp)
   89df0:	034001c4 	movi	r13,7
   89df4:	00000506 	br	89e0c <___vfiprintf_internal_r+0xc3c>
   89df8:	29000084 	addi	r4,r5,2
   89dfc:	42000204 	addi	r8,r8,8
   89e00:	180b883a 	mov	r5,r3
   89e04:	e73ffc04 	addi	fp,fp,-16
   89e08:	3f000d0e 	bge	r7,fp,89e40 <___vfiprintf_internal_r+0xc70>
   89e0c:	10800404 	addi	r2,r2,16
   89e10:	28c00044 	addi	r3,r5,1
   89e14:	45c00015 	stw	r23,0(r8)
   89e18:	41c00115 	stw	r7,4(r8)
   89e1c:	d8801c15 	stw	r2,112(sp)
   89e20:	d8c01b15 	stw	r3,108(sp)
   89e24:	68fff40e 	bge	r13,r3,89df8 <__alt_data_end+0xfffa8378>
   89e28:	1000101e 	bne	r2,zero,89e6c <___vfiprintf_internal_r+0xc9c>
   89e2c:	e73ffc04 	addi	fp,fp,-16
   89e30:	01000044 	movi	r4,1
   89e34:	000b883a 	mov	r5,zero
   89e38:	d811883a 	mov	r8,sp
   89e3c:	3f3ff316 	blt	r7,fp,89e0c <__alt_data_end+0xfffa838c>
   89e40:	da802417 	ldw	r10,144(sp)
   89e44:	1705883a 	add	r2,r2,fp
   89e48:	47000115 	stw	fp,4(r8)
   89e4c:	42800015 	stw	r10,0(r8)
   89e50:	d8801c15 	stw	r2,112(sp)
   89e54:	d9001b15 	stw	r4,108(sp)
   89e58:	00c001c4 	movi	r3,7
   89e5c:	19003616 	blt	r3,r4,89f38 <___vfiprintf_internal_r+0xd68>
   89e60:	42000204 	addi	r8,r8,8
   89e64:	21000044 	addi	r4,r4,1
   89e68:	003e5706 	br	897c8 <__alt_data_end+0xfffa7d48>
   89e6c:	d9402117 	ldw	r5,132(sp)
   89e70:	d9002017 	ldw	r4,128(sp)
   89e74:	d9801a04 	addi	r6,sp,104
   89e78:	d9c02b15 	stw	r7,172(sp)
   89e7c:	db402a15 	stw	r13,168(sp)
   89e80:	00890bc0 	call	890bc <__sprint_r.part.0>
   89e84:	d9c02b17 	ldw	r7,172(sp)
   89e88:	db402a17 	ldw	r13,168(sp)
   89e8c:	1000241e 	bne	r2,zero,89f20 <___vfiprintf_internal_r+0xd50>
   89e90:	d9401b17 	ldw	r5,108(sp)
   89e94:	d8801c17 	ldw	r2,112(sp)
   89e98:	d811883a 	mov	r8,sp
   89e9c:	29000044 	addi	r4,r5,1
   89ea0:	003fd806 	br	89e04 <__alt_data_end+0xfffa8384>
   89ea4:	d9401b17 	ldw	r5,108(sp)
   89ea8:	00c00274 	movhi	r3,9
   89eac:	18c3e904 	addi	r3,r3,4004
   89eb0:	d8c02415 	stw	r3,144(sp)
   89eb4:	29400044 	addi	r5,r5,1
   89eb8:	d8c02417 	ldw	r3,144(sp)
   89ebc:	14c5883a 	add	r2,r2,r19
   89ec0:	44c00115 	stw	r19,4(r8)
   89ec4:	40c00015 	stw	r3,0(r8)
   89ec8:	d8801c15 	stw	r2,112(sp)
   89ecc:	d9401b15 	stw	r5,108(sp)
   89ed0:	00c001c4 	movi	r3,7
   89ed4:	1940070e 	bge	r3,r5,89ef4 <___vfiprintf_internal_r+0xd24>
   89ed8:	103e4826 	beq	r2,zero,897fc <__alt_data_end+0xfffa7d7c>
   89edc:	d9402117 	ldw	r5,132(sp)
   89ee0:	d9002017 	ldw	r4,128(sp)
   89ee4:	d9801a04 	addi	r6,sp,104
   89ee8:	00890bc0 	call	890bc <__sprint_r.part.0>
   89eec:	10000c1e 	bne	r2,zero,89f20 <___vfiprintf_internal_r+0xd50>
   89ef0:	d8801c17 	ldw	r2,112(sp)
   89ef4:	8c80010e 	bge	r17,r18,89efc <___vfiprintf_internal_r+0xd2c>
   89ef8:	9023883a 	mov	r17,r18
   89efc:	da802317 	ldw	r10,140(sp)
   89f00:	5455883a 	add	r10,r10,r17
   89f04:	da802315 	stw	r10,140(sp)
   89f08:	103e4126 	beq	r2,zero,89810 <__alt_data_end+0xfffa7d90>
   89f0c:	d9402117 	ldw	r5,132(sp)
   89f10:	d9002017 	ldw	r4,128(sp)
   89f14:	d9801a04 	addi	r6,sp,104
   89f18:	00890bc0 	call	890bc <__sprint_r.part.0>
   89f1c:	103e3c26 	beq	r2,zero,89810 <__alt_data_end+0xfffa7d90>
   89f20:	dd002117 	ldw	r20,132(sp)
   89f24:	a080030b 	ldhu	r2,12(r20)
   89f28:	1080100c 	andi	r2,r2,64
   89f2c:	1001231e 	bne	r2,zero,8a3bc <___vfiprintf_internal_r+0x11ec>
   89f30:	d8802317 	ldw	r2,140(sp)
   89f34:	003d7b06 	br	89524 <__alt_data_end+0xfffa7aa4>
   89f38:	1000991e 	bne	r2,zero,8a1a0 <___vfiprintf_internal_r+0xfd0>
   89f3c:	00c00044 	movi	r3,1
   89f40:	9805883a 	mov	r2,r19
   89f44:	dd400015 	stw	r21,0(sp)
   89f48:	dcc00115 	stw	r19,4(sp)
   89f4c:	dcc01c15 	stw	r19,112(sp)
   89f50:	d8c01b15 	stw	r3,108(sp)
   89f54:	d811883a 	mov	r8,sp
   89f58:	42000204 	addi	r8,r8,8
   89f5c:	a2c0010c 	andi	r11,r20,4
   89f60:	583fe426 	beq	r11,zero,89ef4 <__alt_data_end+0xfffa8474>
   89f64:	8ca7c83a 	sub	r19,r17,r18
   89f68:	04ffe20e 	bge	zero,r19,89ef4 <__alt_data_end+0xfffa8474>
   89f6c:	01c00404 	movi	r7,16
   89f70:	3cffcc0e 	bge	r7,r19,89ea4 <__alt_data_end+0xfffa8424>
   89f74:	02800274 	movhi	r10,9
   89f78:	5283e904 	addi	r10,r10,4004
   89f7c:	d9001b17 	ldw	r4,108(sp)
   89f80:	da802415 	stw	r10,144(sp)
   89f84:	382b883a 	mov	r21,r7
   89f88:	050001c4 	movi	r20,7
   89f8c:	df002017 	ldw	fp,128(sp)
   89f90:	00000506 	br	89fa8 <___vfiprintf_internal_r+0xdd8>
   89f94:	21400084 	addi	r5,r4,2
   89f98:	42000204 	addi	r8,r8,8
   89f9c:	1809883a 	mov	r4,r3
   89fa0:	9cfffc04 	addi	r19,r19,-16
   89fa4:	acffc40e 	bge	r21,r19,89eb8 <__alt_data_end+0xfffa8438>
   89fa8:	10800404 	addi	r2,r2,16
   89fac:	20c00044 	addi	r3,r4,1
   89fb0:	45800015 	stw	r22,0(r8)
   89fb4:	45400115 	stw	r21,4(r8)
   89fb8:	d8801c15 	stw	r2,112(sp)
   89fbc:	d8c01b15 	stw	r3,108(sp)
   89fc0:	a0fff40e 	bge	r20,r3,89f94 <__alt_data_end+0xfffa8514>
   89fc4:	1000041e 	bne	r2,zero,89fd8 <___vfiprintf_internal_r+0xe08>
   89fc8:	01400044 	movi	r5,1
   89fcc:	0009883a 	mov	r4,zero
   89fd0:	d811883a 	mov	r8,sp
   89fd4:	003ff206 	br	89fa0 <__alt_data_end+0xfffa8520>
   89fd8:	d9402117 	ldw	r5,132(sp)
   89fdc:	d9801a04 	addi	r6,sp,104
   89fe0:	e009883a 	mov	r4,fp
   89fe4:	00890bc0 	call	890bc <__sprint_r.part.0>
   89fe8:	103fcd1e 	bne	r2,zero,89f20 <__alt_data_end+0xfffa84a0>
   89fec:	d9001b17 	ldw	r4,108(sp)
   89ff0:	d8801c17 	ldw	r2,112(sp)
   89ff4:	d811883a 	mov	r8,sp
   89ff8:	21400044 	addi	r5,r4,1
   89ffc:	003fe806 	br	89fa0 <__alt_data_end+0xfffa8520>
   8a000:	d9402117 	ldw	r5,132(sp)
   8a004:	d9002017 	ldw	r4,128(sp)
   8a008:	d9801a04 	addi	r6,sp,104
   8a00c:	d9c02b15 	stw	r7,172(sp)
   8a010:	db402a15 	stw	r13,168(sp)
   8a014:	00890bc0 	call	890bc <__sprint_r.part.0>
   8a018:	d9c02b17 	ldw	r7,172(sp)
   8a01c:	db402a17 	ldw	r13,168(sp)
   8a020:	103fbf1e 	bne	r2,zero,89f20 <__alt_data_end+0xfffa84a0>
   8a024:	d9401b17 	ldw	r5,108(sp)
   8a028:	d8801c17 	ldw	r2,112(sp)
   8a02c:	d811883a 	mov	r8,sp
   8a030:	29800044 	addi	r6,r5,1
   8a034:	003dc406 	br	89748 <__alt_data_end+0xfffa7cc8>
   8a038:	1000d21e 	bne	r2,zero,8a384 <___vfiprintf_internal_r+0x11b4>
   8a03c:	d8c01d87 	ldb	r3,118(sp)
   8a040:	18009526 	beq	r3,zero,8a298 <___vfiprintf_internal_r+0x10c8>
   8a044:	00800044 	movi	r2,1
   8a048:	d8c01d84 	addi	r3,sp,118
   8a04c:	1009883a 	mov	r4,r2
   8a050:	d8c00015 	stw	r3,0(sp)
   8a054:	d8800115 	stw	r2,4(sp)
   8a058:	d811883a 	mov	r8,sp
   8a05c:	200b883a 	mov	r5,r4
   8a060:	42000204 	addi	r8,r8,8
   8a064:	21000044 	addi	r4,r4,1
   8a068:	003d9706 	br	896c8 <__alt_data_end+0xfffa7c48>
   8a06c:	d9001d04 	addi	r4,sp,116
   8a070:	00800084 	movi	r2,2
   8a074:	d9000015 	stw	r4,0(sp)
   8a078:	d8800115 	stw	r2,4(sp)
   8a07c:	1809883a 	mov	r4,r3
   8a080:	d811883a 	mov	r8,sp
   8a084:	200b883a 	mov	r5,r4
   8a088:	42000204 	addi	r8,r8,8
   8a08c:	21000044 	addi	r4,r4,1
   8a090:	003f4e06 	br	89dcc <__alt_data_end+0xfffa834c>
   8a094:	d8001d85 	stb	zero,118(sp)
   8a098:	48005016 	blt	r9,zero,8a1dc <___vfiprintf_internal_r+0x100c>
   8a09c:	00ffdfc4 	movi	r3,-129
   8a0a0:	94c4b03a 	or	r2,r18,r19
   8a0a4:	a0e8703a 	and	r20,r20,r3
   8a0a8:	103d4426 	beq	r2,zero,895bc <__alt_data_end+0xfffa7b3c>
   8a0ac:	0039883a 	mov	fp,zero
   8a0b0:	d9002617 	ldw	r4,152(sp)
   8a0b4:	dd401a04 	addi	r21,sp,104
   8a0b8:	908003cc 	andi	r2,r18,15
   8a0bc:	9806973a 	slli	r3,r19,28
   8a0c0:	2085883a 	add	r2,r4,r2
   8a0c4:	9024d13a 	srli	r18,r18,4
   8a0c8:	10800003 	ldbu	r2,0(r2)
   8a0cc:	9826d13a 	srli	r19,r19,4
   8a0d0:	ad7fffc4 	addi	r21,r21,-1
   8a0d4:	1ca4b03a 	or	r18,r3,r18
   8a0d8:	a8800005 	stb	r2,0(r21)
   8a0dc:	94c4b03a 	or	r2,r18,r19
   8a0e0:	103ff51e 	bne	r2,zero,8a0b8 <__alt_data_end+0xfffa8638>
   8a0e4:	003e5906 	br	89a4c <__alt_data_end+0xfffa7fcc>
   8a0e8:	d9402117 	ldw	r5,132(sp)
   8a0ec:	d9002017 	ldw	r4,128(sp)
   8a0f0:	d9801a04 	addi	r6,sp,104
   8a0f4:	00890bc0 	call	890bc <__sprint_r.part.0>
   8a0f8:	103f891e 	bne	r2,zero,89f20 <__alt_data_end+0xfffa84a0>
   8a0fc:	d8801c17 	ldw	r2,112(sp)
   8a100:	d811883a 	mov	r8,sp
   8a104:	003f9506 	br	89f5c <__alt_data_end+0xfffa84dc>
   8a108:	d9402117 	ldw	r5,132(sp)
   8a10c:	d9002017 	ldw	r4,128(sp)
   8a110:	d9801a04 	addi	r6,sp,104
   8a114:	00890bc0 	call	890bc <__sprint_r.part.0>
   8a118:	103f811e 	bne	r2,zero,89f20 <__alt_data_end+0xfffa84a0>
   8a11c:	d811883a 	mov	r8,sp
   8a120:	003ced06 	br	894d8 <__alt_data_end+0xfffa7a58>
   8a124:	d9402117 	ldw	r5,132(sp)
   8a128:	d9002017 	ldw	r4,128(sp)
   8a12c:	d9801a04 	addi	r6,sp,104
   8a130:	da402c15 	stw	r9,176(sp)
   8a134:	db802a15 	stw	r14,168(sp)
   8a138:	00890bc0 	call	890bc <__sprint_r.part.0>
   8a13c:	da402c17 	ldw	r9,176(sp)
   8a140:	db802a17 	ldw	r14,168(sp)
   8a144:	103f761e 	bne	r2,zero,89f20 <__alt_data_end+0xfffa84a0>
   8a148:	d9401b17 	ldw	r5,108(sp)
   8a14c:	d8801c17 	ldw	r2,112(sp)
   8a150:	d811883a 	mov	r8,sp
   8a154:	29000044 	addi	r4,r5,1
   8a158:	003d5b06 	br	896c8 <__alt_data_end+0xfffa7c48>
   8a15c:	d9402117 	ldw	r5,132(sp)
   8a160:	d9002017 	ldw	r4,128(sp)
   8a164:	d9801a04 	addi	r6,sp,104
   8a168:	da402c15 	stw	r9,176(sp)
   8a16c:	00890bc0 	call	890bc <__sprint_r.part.0>
   8a170:	da402c17 	ldw	r9,176(sp)
   8a174:	103f6a1e 	bne	r2,zero,89f20 <__alt_data_end+0xfffa84a0>
   8a178:	d9401b17 	ldw	r5,108(sp)
   8a17c:	d8801c17 	ldw	r2,112(sp)
   8a180:	d811883a 	mov	r8,sp
   8a184:	29000044 	addi	r4,r5,1
   8a188:	003f1006 	br	89dcc <__alt_data_end+0xfffa834c>
   8a18c:	1000c31e 	bne	r2,zero,8a49c <___vfiprintf_internal_r+0x12cc>
   8a190:	01000044 	movi	r4,1
   8a194:	000b883a 	mov	r5,zero
   8a198:	d811883a 	mov	r8,sp
   8a19c:	003f0d06 	br	89dd4 <__alt_data_end+0xfffa8354>
   8a1a0:	d9402117 	ldw	r5,132(sp)
   8a1a4:	d9002017 	ldw	r4,128(sp)
   8a1a8:	d9801a04 	addi	r6,sp,104
   8a1ac:	00890bc0 	call	890bc <__sprint_r.part.0>
   8a1b0:	103f5b1e 	bne	r2,zero,89f20 <__alt_data_end+0xfffa84a0>
   8a1b4:	d9001b17 	ldw	r4,108(sp)
   8a1b8:	d8801c17 	ldw	r2,112(sp)
   8a1bc:	d811883a 	mov	r8,sp
   8a1c0:	21000044 	addi	r4,r4,1
   8a1c4:	003d8006 	br	897c8 <__alt_data_end+0xfffa7d48>
   8a1c8:	01000274 	movhi	r4,9
   8a1cc:	21038404 	addi	r4,r4,3600
   8a1d0:	d9002615 	stw	r4,152(sp)
   8a1d4:	d8c02215 	stw	r3,136(sp)
   8a1d8:	1029883a 	mov	r20,r2
   8a1dc:	94c4b03a 	or	r2,r18,r19
   8a1e0:	103fb21e 	bne	r2,zero,8a0ac <__alt_data_end+0xfffa862c>
   8a1e4:	0039883a 	mov	fp,zero
   8a1e8:	00800084 	movi	r2,2
   8a1ec:	003e6b06 	br	89b9c <__alt_data_end+0xfffa811c>
   8a1f0:	da802217 	ldw	r10,136(sp)
   8a1f4:	d8001d85 	stb	zero,118(sp)
   8a1f8:	0027883a 	mov	r19,zero
   8a1fc:	50800104 	addi	r2,r10,4
   8a200:	54800017 	ldw	r18,0(r10)
   8a204:	483e6016 	blt	r9,zero,89b88 <__alt_data_end+0xfffa8108>
   8a208:	00ffdfc4 	movi	r3,-129
   8a20c:	d8802215 	stw	r2,136(sp)
   8a210:	a0e8703a 	and	r20,r20,r3
   8a214:	0039883a 	mov	fp,zero
   8a218:	903ebb26 	beq	r18,zero,89d08 <__alt_data_end+0xfffa8288>
   8a21c:	00800244 	movi	r2,9
   8a220:	14bdee36 	bltu	r2,r18,899dc <__alt_data_end+0xfffa7f5c>
   8a224:	003eba06 	br	89d10 <__alt_data_end+0xfffa8290>
   8a228:	00800c04 	movi	r2,48
   8a22c:	d8c01d45 	stb	r3,117(sp)
   8a230:	d8801d05 	stb	r2,116(sp)
   8a234:	d8001d85 	stb	zero,118(sp)
   8a238:	a0c00094 	ori	r3,r20,2
   8a23c:	4800a916 	blt	r9,zero,8a4e4 <___vfiprintf_internal_r+0x1314>
   8a240:	00bfdfc4 	movi	r2,-129
   8a244:	a096703a 	and	r11,r20,r2
   8a248:	5d000094 	ori	r20,r11,2
   8a24c:	0039883a 	mov	fp,zero
   8a250:	003f9706 	br	8a0b0 <__alt_data_end+0xfffa8630>
   8a254:	8025883a 	mov	r18,r16
   8a258:	003c2e06 	br	89314 <__alt_data_end+0xfffa7894>
   8a25c:	00800274 	movhi	r2,9
   8a260:	10838404 	addi	r2,r2,3600
   8a264:	0039883a 	mov	fp,zero
   8a268:	d8802615 	stw	r2,152(sp)
   8a26c:	003f9006 	br	8a0b0 <__alt_data_end+0xfffa8630>
   8a270:	04a5c83a 	sub	r18,zero,r18
   8a274:	07000b44 	movi	fp,45
   8a278:	9004c03a 	cmpne	r2,r18,zero
   8a27c:	04e7c83a 	sub	r19,zero,r19
   8a280:	df001d85 	stb	fp,118(sp)
   8a284:	98a7c83a 	sub	r19,r19,r2
   8a288:	48009f16 	blt	r9,zero,8a508 <___vfiprintf_internal_r+0x1338>
   8a28c:	00bfdfc4 	movi	r2,-129
   8a290:	a0a8703a 	and	r20,r20,r2
   8a294:	003dd006 	br	899d8 <__alt_data_end+0xfffa7f58>
   8a298:	70004c26 	beq	r14,zero,8a3cc <___vfiprintf_internal_r+0x11fc>
   8a29c:	00800084 	movi	r2,2
   8a2a0:	d8c01d04 	addi	r3,sp,116
   8a2a4:	d8c00015 	stw	r3,0(sp)
   8a2a8:	d8800115 	stw	r2,4(sp)
   8a2ac:	01000044 	movi	r4,1
   8a2b0:	d811883a 	mov	r8,sp
   8a2b4:	003f7306 	br	8a084 <__alt_data_end+0xfffa8604>
   8a2b8:	a080100c 	andi	r2,r20,64
   8a2bc:	da802217 	ldw	r10,136(sp)
   8a2c0:	103e0626 	beq	r2,zero,89adc <__alt_data_end+0xfffa805c>
   8a2c4:	5480000f 	ldh	r18,0(r10)
   8a2c8:	52800104 	addi	r10,r10,4
   8a2cc:	da802215 	stw	r10,136(sp)
   8a2d0:	9027d7fa 	srai	r19,r18,31
   8a2d4:	9805883a 	mov	r2,r19
   8a2d8:	003db806 	br	899bc <__alt_data_end+0xfffa7f3c>
   8a2dc:	a080040c 	andi	r2,r20,16
   8a2e0:	1000091e 	bne	r2,zero,8a308 <___vfiprintf_internal_r+0x1138>
   8a2e4:	a2c0100c 	andi	r11,r20,64
   8a2e8:	58000726 	beq	r11,zero,8a308 <___vfiprintf_internal_r+0x1138>
   8a2ec:	da802217 	ldw	r10,136(sp)
   8a2f0:	50800017 	ldw	r2,0(r10)
   8a2f4:	52800104 	addi	r10,r10,4
   8a2f8:	da802215 	stw	r10,136(sp)
   8a2fc:	da802317 	ldw	r10,140(sp)
   8a300:	1280000d 	sth	r10,0(r2)
   8a304:	003be706 	br	892a4 <__alt_data_end+0xfffa7824>
   8a308:	da802217 	ldw	r10,136(sp)
   8a30c:	50800017 	ldw	r2,0(r10)
   8a310:	52800104 	addi	r10,r10,4
   8a314:	da802215 	stw	r10,136(sp)
   8a318:	da802317 	ldw	r10,140(sp)
   8a31c:	12800015 	stw	r10,0(r2)
   8a320:	003be006 	br	892a4 <__alt_data_end+0xfffa7824>
   8a324:	a080100c 	andi	r2,r20,64
   8a328:	da802217 	ldw	r10,136(sp)
   8a32c:	10003026 	beq	r2,zero,8a3f0 <___vfiprintf_internal_r+0x1220>
   8a330:	5480000b 	ldhu	r18,0(r10)
   8a334:	52800104 	addi	r10,r10,4
   8a338:	0027883a 	mov	r19,zero
   8a33c:	da802215 	stw	r10,136(sp)
   8a340:	003d8006 	br	89944 <__alt_data_end+0xfffa7ec4>
   8a344:	80c00007 	ldb	r3,0(r16)
   8a348:	003c0006 	br	8934c <__alt_data_end+0xfffa78cc>
   8a34c:	a080100c 	andi	r2,r20,64
   8a350:	d8001d85 	stb	zero,118(sp)
   8a354:	da802217 	ldw	r10,136(sp)
   8a358:	1000201e 	bne	r2,zero,8a3dc <___vfiprintf_internal_r+0x120c>
   8a35c:	50800104 	addi	r2,r10,4
   8a360:	54800017 	ldw	r18,0(r10)
   8a364:	0027883a 	mov	r19,zero
   8a368:	483def0e 	bge	r9,zero,89b28 <__alt_data_end+0xfffa80a8>
   8a36c:	94c6b03a 	or	r3,r18,r19
   8a370:	d8802215 	stw	r2,136(sp)
   8a374:	183d4e1e 	bne	r3,zero,898b0 <__alt_data_end+0xfffa7e30>
   8a378:	0039883a 	mov	fp,zero
   8a37c:	0005883a 	mov	r2,zero
   8a380:	003e0606 	br	89b9c <__alt_data_end+0xfffa811c>
   8a384:	d9402117 	ldw	r5,132(sp)
   8a388:	d9002017 	ldw	r4,128(sp)
   8a38c:	d9801a04 	addi	r6,sp,104
   8a390:	da402c15 	stw	r9,176(sp)
   8a394:	db802a15 	stw	r14,168(sp)
   8a398:	00890bc0 	call	890bc <__sprint_r.part.0>
   8a39c:	da402c17 	ldw	r9,176(sp)
   8a3a0:	db802a17 	ldw	r14,168(sp)
   8a3a4:	103ede1e 	bne	r2,zero,89f20 <__alt_data_end+0xfffa84a0>
   8a3a8:	d9401b17 	ldw	r5,108(sp)
   8a3ac:	d8801c17 	ldw	r2,112(sp)
   8a3b0:	d811883a 	mov	r8,sp
   8a3b4:	29000044 	addi	r4,r5,1
   8a3b8:	003e7406 	br	89d8c <__alt_data_end+0xfffa830c>
   8a3bc:	00bfffc4 	movi	r2,-1
   8a3c0:	003c5806 	br	89524 <__alt_data_end+0xfffa7aa4>
   8a3c4:	d811883a 	mov	r8,sp
   8a3c8:	003ee806 	br	89f6c <__alt_data_end+0xfffa84ec>
   8a3cc:	000b883a 	mov	r5,zero
   8a3d0:	01000044 	movi	r4,1
   8a3d4:	d811883a 	mov	r8,sp
   8a3d8:	003e7c06 	br	89dcc <__alt_data_end+0xfffa834c>
   8a3dc:	50800104 	addi	r2,r10,4
   8a3e0:	5480000b 	ldhu	r18,0(r10)
   8a3e4:	0027883a 	mov	r19,zero
   8a3e8:	483dcf0e 	bge	r9,zero,89b28 <__alt_data_end+0xfffa80a8>
   8a3ec:	003fdf06 	br	8a36c <__alt_data_end+0xfffa88ec>
   8a3f0:	54800017 	ldw	r18,0(r10)
   8a3f4:	52800104 	addi	r10,r10,4
   8a3f8:	0027883a 	mov	r19,zero
   8a3fc:	da802215 	stw	r10,136(sp)
   8a400:	003d5006 	br	89944 <__alt_data_end+0xfffa7ec4>
   8a404:	50800104 	addi	r2,r10,4
   8a408:	5480000b 	ldhu	r18,0(r10)
   8a40c:	0027883a 	mov	r19,zero
   8a410:	483f7d0e 	bge	r9,zero,8a208 <__alt_data_end+0xfffa8788>
   8a414:	003ddc06 	br	89b88 <__alt_data_end+0xfffa8108>
   8a418:	d8c02215 	stw	r3,136(sp)
   8a41c:	0039883a 	mov	fp,zero
   8a420:	003ddb06 	br	89b90 <__alt_data_end+0xfffa8110>
   8a424:	02800274 	movhi	r10,9
   8a428:	5283e504 	addi	r10,r10,3988
   8a42c:	da802415 	stw	r10,144(sp)
   8a430:	003e8306 	br	89e40 <__alt_data_end+0xfffa83c0>
   8a434:	d8801c17 	ldw	r2,112(sp)
   8a438:	dd002117 	ldw	r20,132(sp)
   8a43c:	103eb926 	beq	r2,zero,89f24 <__alt_data_end+0xfffa84a4>
   8a440:	d9002017 	ldw	r4,128(sp)
   8a444:	d9801a04 	addi	r6,sp,104
   8a448:	a00b883a 	mov	r5,r20
   8a44c:	00890bc0 	call	890bc <__sprint_r.part.0>
   8a450:	003eb406 	br	89f24 <__alt_data_end+0xfffa84a4>
   8a454:	80c00043 	ldbu	r3,1(r16)
   8a458:	a5000814 	ori	r20,r20,32
   8a45c:	84000044 	addi	r16,r16,1
   8a460:	18c03fcc 	andi	r3,r3,255
   8a464:	18c0201c 	xori	r3,r3,128
   8a468:	18ffe004 	addi	r3,r3,-128
   8a46c:	003bb706 	br	8934c <__alt_data_end+0xfffa78cc>
   8a470:	a809883a 	mov	r4,r21
   8a474:	d8c02a15 	stw	r3,168(sp)
   8a478:	da002b15 	stw	r8,172(sp)
   8a47c:	0081a780 	call	81a78 <strlen>
   8a480:	d8c02a17 	ldw	r3,168(sp)
   8a484:	1027883a 	mov	r19,r2
   8a488:	df001d83 	ldbu	fp,118(sp)
   8a48c:	d8c02215 	stw	r3,136(sp)
   8a490:	0013883a 	mov	r9,zero
   8a494:	da002b17 	ldw	r8,172(sp)
   8a498:	003c4d06 	br	895d0 <__alt_data_end+0xfffa7b50>
   8a49c:	d9402117 	ldw	r5,132(sp)
   8a4a0:	d9002017 	ldw	r4,128(sp)
   8a4a4:	d9801a04 	addi	r6,sp,104
   8a4a8:	da402c15 	stw	r9,176(sp)
   8a4ac:	00890bc0 	call	890bc <__sprint_r.part.0>
   8a4b0:	da402c17 	ldw	r9,176(sp)
   8a4b4:	103e9a1e 	bne	r2,zero,89f20 <__alt_data_end+0xfffa84a0>
   8a4b8:	d9401b17 	ldw	r5,108(sp)
   8a4bc:	d8801c17 	ldw	r2,112(sp)
   8a4c0:	d811883a 	mov	r8,sp
   8a4c4:	29000044 	addi	r4,r5,1
   8a4c8:	003e4206 	br	89dd4 <__alt_data_end+0xfffa8354>
   8a4cc:	d9401b17 	ldw	r5,108(sp)
   8a4d0:	01000274 	movhi	r4,9
   8a4d4:	2103e904 	addi	r4,r4,4004
   8a4d8:	d9002415 	stw	r4,144(sp)
   8a4dc:	29400044 	addi	r5,r5,1
   8a4e0:	003c6d06 	br	89698 <__alt_data_end+0xfffa7c18>
   8a4e4:	0039883a 	mov	fp,zero
   8a4e8:	00800084 	movi	r2,2
   8a4ec:	10803fcc 	andi	r2,r2,255
   8a4f0:	01000044 	movi	r4,1
   8a4f4:	11001e26 	beq	r2,r4,8a570 <___vfiprintf_internal_r+0x13a0>
   8a4f8:	01000084 	movi	r4,2
   8a4fc:	11001e1e 	bne	r2,r4,8a578 <___vfiprintf_internal_r+0x13a8>
   8a500:	1829883a 	mov	r20,r3
   8a504:	003eea06 	br	8a0b0 <__alt_data_end+0xfffa8630>
   8a508:	a007883a 	mov	r3,r20
   8a50c:	00800044 	movi	r2,1
   8a510:	003ff606 	br	8a4ec <__alt_data_end+0xfffa8a6c>
   8a514:	00800184 	movi	r2,6
   8a518:	1240012e 	bgeu	r2,r9,8a520 <___vfiprintf_internal_r+0x1350>
   8a51c:	1013883a 	mov	r9,r2
   8a520:	4827883a 	mov	r19,r9
   8a524:	4825883a 	mov	r18,r9
   8a528:	48001516 	blt	r9,zero,8a580 <___vfiprintf_internal_r+0x13b0>
   8a52c:	05400274 	movhi	r21,9
   8a530:	d8c02215 	stw	r3,136(sp)
   8a534:	ad438904 	addi	r21,r21,3620
   8a538:	003d1406 	br	8998c <__alt_data_end+0xfffa7f0c>
   8a53c:	02800274 	movhi	r10,9
   8a540:	5283e504 	addi	r10,r10,3988
   8a544:	da802415 	stw	r10,144(sp)
   8a548:	200d883a 	mov	r6,r4
   8a54c:	003c9106 	br	89794 <__alt_data_end+0xfffa7d14>
   8a550:	5021883a 	mov	r16,r10
   8a554:	0013883a 	mov	r9,zero
   8a558:	003b7d06 	br	89350 <__alt_data_end+0xfffa78d0>
   8a55c:	4827883a 	mov	r19,r9
   8a560:	df001d83 	ldbu	fp,118(sp)
   8a564:	d8c02215 	stw	r3,136(sp)
   8a568:	0013883a 	mov	r9,zero
   8a56c:	003c1806 	br	895d0 <__alt_data_end+0xfffa7b50>
   8a570:	1829883a 	mov	r20,r3
   8a574:	003d1806 	br	899d8 <__alt_data_end+0xfffa7f58>
   8a578:	1829883a 	mov	r20,r3
   8a57c:	003ccd06 	br	898b4 <__alt_data_end+0xfffa7e34>
   8a580:	0025883a 	mov	r18,zero
   8a584:	003fe906 	br	8a52c <__alt_data_end+0xfffa8aac>
   8a588:	d8802217 	ldw	r2,136(sp)
   8a58c:	80c00043 	ldbu	r3,1(r16)
   8a590:	5021883a 	mov	r16,r10
   8a594:	12400017 	ldw	r9,0(r2)
   8a598:	10800104 	addi	r2,r2,4
   8a59c:	d8802215 	stw	r2,136(sp)
   8a5a0:	483faf0e 	bge	r9,zero,8a460 <__alt_data_end+0xfffa89e0>
   8a5a4:	18c03fcc 	andi	r3,r3,255
   8a5a8:	18c0201c 	xori	r3,r3,128
   8a5ac:	027fffc4 	movi	r9,-1
   8a5b0:	18ffe004 	addi	r3,r3,-128
   8a5b4:	003b6506 	br	8934c <__alt_data_end+0xfffa78cc>
   8a5b8:	d9c01d85 	stb	r7,118(sp)
   8a5bc:	003ca006 	br	89840 <__alt_data_end+0xfffa7dc0>
   8a5c0:	d9c01d85 	stb	r7,118(sp)
   8a5c4:	003cad06 	br	8987c <__alt_data_end+0xfffa7dfc>
   8a5c8:	d9c01d85 	stb	r7,118(sp)
   8a5cc:	003d7d06 	br	89bc4 <__alt_data_end+0xfffa8144>
   8a5d0:	d9c01d85 	stb	r7,118(sp)
   8a5d4:	003d5f06 	br	89b54 <__alt_data_end+0xfffa80d4>
   8a5d8:	a080004c 	andi	r2,r20,1
   8a5dc:	0039883a 	mov	fp,zero
   8a5e0:	10000526 	beq	r2,zero,8a5f8 <___vfiprintf_internal_r+0x1428>
   8a5e4:	00800c04 	movi	r2,48
   8a5e8:	d88019c5 	stb	r2,103(sp)
   8a5ec:	dcc02717 	ldw	r19,156(sp)
   8a5f0:	dd4019c4 	addi	r21,sp,103
   8a5f4:	003bf606 	br	895d0 <__alt_data_end+0xfffa7b50>
   8a5f8:	0027883a 	mov	r19,zero
   8a5fc:	dd401a04 	addi	r21,sp,104
   8a600:	003bf306 	br	895d0 <__alt_data_end+0xfffa7b50>
   8a604:	d9c01d85 	stb	r7,118(sp)
   8a608:	003dc806 	br	89d2c <__alt_data_end+0xfffa82ac>
   8a60c:	d9c01d85 	stb	r7,118(sp)
   8a610:	003d3a06 	br	89afc <__alt_data_end+0xfffa807c>
   8a614:	d9c01d85 	stb	r7,118(sp)
   8a618:	003d2a06 	br	89ac4 <__alt_data_end+0xfffa8044>
   8a61c:	d9c01d85 	stb	r7,118(sp)
   8a620:	003cde06 	br	8999c <__alt_data_end+0xfffa7f1c>
   8a624:	d9c01d85 	stb	r7,118(sp)
   8a628:	003cbc06 	br	8991c <__alt_data_end+0xfffa7e9c>

0008a62c <__vfiprintf_internal>:
   8a62c:	00800274 	movhi	r2,9
   8a630:	108b6b04 	addi	r2,r2,11692
   8a634:	300f883a 	mov	r7,r6
   8a638:	280d883a 	mov	r6,r5
   8a63c:	200b883a 	mov	r5,r4
   8a640:	11000017 	ldw	r4,0(r2)
   8a644:	00891d01 	jmpi	891d0 <___vfiprintf_internal_r>

0008a648 <__sbprintf>:
   8a648:	2880030b 	ldhu	r2,12(r5)
   8a64c:	2ac01917 	ldw	r11,100(r5)
   8a650:	2a80038b 	ldhu	r10,14(r5)
   8a654:	2a400717 	ldw	r9,28(r5)
   8a658:	2a000917 	ldw	r8,36(r5)
   8a65c:	defee204 	addi	sp,sp,-1144
   8a660:	00c10004 	movi	r3,1024
   8a664:	dc011a15 	stw	r16,1128(sp)
   8a668:	10bfff4c 	andi	r2,r2,65533
   8a66c:	2821883a 	mov	r16,r5
   8a670:	d8cb883a 	add	r5,sp,r3
   8a674:	dc811c15 	stw	r18,1136(sp)
   8a678:	dc411b15 	stw	r17,1132(sp)
   8a67c:	dfc11d15 	stw	ra,1140(sp)
   8a680:	2025883a 	mov	r18,r4
   8a684:	d881030d 	sth	r2,1036(sp)
   8a688:	dac11915 	stw	r11,1124(sp)
   8a68c:	da81038d 	sth	r10,1038(sp)
   8a690:	da410715 	stw	r9,1052(sp)
   8a694:	da010915 	stw	r8,1060(sp)
   8a698:	dec10015 	stw	sp,1024(sp)
   8a69c:	dec10415 	stw	sp,1040(sp)
   8a6a0:	d8c10215 	stw	r3,1032(sp)
   8a6a4:	d8c10515 	stw	r3,1044(sp)
   8a6a8:	d8010615 	stw	zero,1048(sp)
   8a6ac:	00891d00 	call	891d0 <___vfiprintf_internal_r>
   8a6b0:	1023883a 	mov	r17,r2
   8a6b4:	10000416 	blt	r2,zero,8a6c8 <__sbprintf+0x80>
   8a6b8:	d9410004 	addi	r5,sp,1024
   8a6bc:	9009883a 	mov	r4,r18
   8a6c0:	0085a280 	call	85a28 <_fflush_r>
   8a6c4:	10000d1e 	bne	r2,zero,8a6fc <__sbprintf+0xb4>
   8a6c8:	d881030b 	ldhu	r2,1036(sp)
   8a6cc:	1080100c 	andi	r2,r2,64
   8a6d0:	10000326 	beq	r2,zero,8a6e0 <__sbprintf+0x98>
   8a6d4:	8080030b 	ldhu	r2,12(r16)
   8a6d8:	10801014 	ori	r2,r2,64
   8a6dc:	8080030d 	sth	r2,12(r16)
   8a6e0:	8805883a 	mov	r2,r17
   8a6e4:	dfc11d17 	ldw	ra,1140(sp)
   8a6e8:	dc811c17 	ldw	r18,1136(sp)
   8a6ec:	dc411b17 	ldw	r17,1132(sp)
   8a6f0:	dc011a17 	ldw	r16,1128(sp)
   8a6f4:	dec11e04 	addi	sp,sp,1144
   8a6f8:	f800283a 	ret
   8a6fc:	047fffc4 	movi	r17,-1
   8a700:	003ff106 	br	8a6c8 <__alt_data_end+0xfffa8c48>

0008a704 <_write_r>:
   8a704:	defffd04 	addi	sp,sp,-12
   8a708:	2805883a 	mov	r2,r5
   8a70c:	dc000015 	stw	r16,0(sp)
   8a710:	04000274 	movhi	r16,9
   8a714:	dc400115 	stw	r17,4(sp)
   8a718:	300b883a 	mov	r5,r6
   8a71c:	8412bd04 	addi	r16,r16,19188
   8a720:	2023883a 	mov	r17,r4
   8a724:	380d883a 	mov	r6,r7
   8a728:	1009883a 	mov	r4,r2
   8a72c:	dfc00215 	stw	ra,8(sp)
   8a730:	80000015 	stw	zero,0(r16)
   8a734:	008f1b40 	call	8f1b4 <write>
   8a738:	00ffffc4 	movi	r3,-1
   8a73c:	10c00526 	beq	r2,r3,8a754 <_write_r+0x50>
   8a740:	dfc00217 	ldw	ra,8(sp)
   8a744:	dc400117 	ldw	r17,4(sp)
   8a748:	dc000017 	ldw	r16,0(sp)
   8a74c:	dec00304 	addi	sp,sp,12
   8a750:	f800283a 	ret
   8a754:	80c00017 	ldw	r3,0(r16)
   8a758:	183ff926 	beq	r3,zero,8a740 <__alt_data_end+0xfffa8cc0>
   8a75c:	88c00015 	stw	r3,0(r17)
   8a760:	003ff706 	br	8a740 <__alt_data_end+0xfffa8cc0>

0008a764 <_close_r>:
   8a764:	defffd04 	addi	sp,sp,-12
   8a768:	dc000015 	stw	r16,0(sp)
   8a76c:	04000274 	movhi	r16,9
   8a770:	dc400115 	stw	r17,4(sp)
   8a774:	8412bd04 	addi	r16,r16,19188
   8a778:	2023883a 	mov	r17,r4
   8a77c:	2809883a 	mov	r4,r5
   8a780:	dfc00215 	stw	ra,8(sp)
   8a784:	80000015 	stw	zero,0(r16)
   8a788:	008e1ec0 	call	8e1ec <close>
   8a78c:	00ffffc4 	movi	r3,-1
   8a790:	10c00526 	beq	r2,r3,8a7a8 <_close_r+0x44>
   8a794:	dfc00217 	ldw	ra,8(sp)
   8a798:	dc400117 	ldw	r17,4(sp)
   8a79c:	dc000017 	ldw	r16,0(sp)
   8a7a0:	dec00304 	addi	sp,sp,12
   8a7a4:	f800283a 	ret
   8a7a8:	80c00017 	ldw	r3,0(r16)
   8a7ac:	183ff926 	beq	r3,zero,8a794 <__alt_data_end+0xfffa8d14>
   8a7b0:	88c00015 	stw	r3,0(r17)
   8a7b4:	003ff706 	br	8a794 <__alt_data_end+0xfffa8d14>

0008a7b8 <_calloc_r>:
   8a7b8:	298b383a 	mul	r5,r5,r6
   8a7bc:	defffe04 	addi	sp,sp,-8
   8a7c0:	dfc00115 	stw	ra,4(sp)
   8a7c4:	dc000015 	stw	r16,0(sp)
   8a7c8:	0086bc00 	call	86bc0 <_malloc_r>
   8a7cc:	10002926 	beq	r2,zero,8a874 <_calloc_r+0xbc>
   8a7d0:	11bfff17 	ldw	r6,-4(r2)
   8a7d4:	1021883a 	mov	r16,r2
   8a7d8:	00bfff04 	movi	r2,-4
   8a7dc:	308c703a 	and	r6,r6,r2
   8a7e0:	00c00904 	movi	r3,36
   8a7e4:	308d883a 	add	r6,r6,r2
   8a7e8:	19801636 	bltu	r3,r6,8a844 <_calloc_r+0x8c>
   8a7ec:	008004c4 	movi	r2,19
   8a7f0:	11800b2e 	bgeu	r2,r6,8a820 <_calloc_r+0x68>
   8a7f4:	80000015 	stw	zero,0(r16)
   8a7f8:	80000115 	stw	zero,4(r16)
   8a7fc:	008006c4 	movi	r2,27
   8a800:	11801a2e 	bgeu	r2,r6,8a86c <_calloc_r+0xb4>
   8a804:	80000215 	stw	zero,8(r16)
   8a808:	80000315 	stw	zero,12(r16)
   8a80c:	30c0151e 	bne	r6,r3,8a864 <_calloc_r+0xac>
   8a810:	80000415 	stw	zero,16(r16)
   8a814:	80800604 	addi	r2,r16,24
   8a818:	80000515 	stw	zero,20(r16)
   8a81c:	00000106 	br	8a824 <_calloc_r+0x6c>
   8a820:	8005883a 	mov	r2,r16
   8a824:	10000015 	stw	zero,0(r2)
   8a828:	10000115 	stw	zero,4(r2)
   8a82c:	10000215 	stw	zero,8(r2)
   8a830:	8005883a 	mov	r2,r16
   8a834:	dfc00117 	ldw	ra,4(sp)
   8a838:	dc000017 	ldw	r16,0(sp)
   8a83c:	dec00204 	addi	sp,sp,8
   8a840:	f800283a 	ret
   8a844:	000b883a 	mov	r5,zero
   8a848:	8009883a 	mov	r4,r16
   8a84c:	00877540 	call	87754 <memset>
   8a850:	8005883a 	mov	r2,r16
   8a854:	dfc00117 	ldw	ra,4(sp)
   8a858:	dc000017 	ldw	r16,0(sp)
   8a85c:	dec00204 	addi	sp,sp,8
   8a860:	f800283a 	ret
   8a864:	80800404 	addi	r2,r16,16
   8a868:	003fee06 	br	8a824 <__alt_data_end+0xfffa8da4>
   8a86c:	80800204 	addi	r2,r16,8
   8a870:	003fec06 	br	8a824 <__alt_data_end+0xfffa8da4>
   8a874:	0005883a 	mov	r2,zero
   8a878:	003fee06 	br	8a834 <__alt_data_end+0xfffa8db4>

0008a87c <_fclose_r>:
   8a87c:	28003926 	beq	r5,zero,8a964 <_fclose_r+0xe8>
   8a880:	defffc04 	addi	sp,sp,-16
   8a884:	dc400115 	stw	r17,4(sp)
   8a888:	dc000015 	stw	r16,0(sp)
   8a88c:	dfc00315 	stw	ra,12(sp)
   8a890:	dc800215 	stw	r18,8(sp)
   8a894:	2023883a 	mov	r17,r4
   8a898:	2821883a 	mov	r16,r5
   8a89c:	20000226 	beq	r4,zero,8a8a8 <_fclose_r+0x2c>
   8a8a0:	20800e17 	ldw	r2,56(r4)
   8a8a4:	10002726 	beq	r2,zero,8a944 <_fclose_r+0xc8>
   8a8a8:	8080030f 	ldh	r2,12(r16)
   8a8ac:	1000071e 	bne	r2,zero,8a8cc <_fclose_r+0x50>
   8a8b0:	0005883a 	mov	r2,zero
   8a8b4:	dfc00317 	ldw	ra,12(sp)
   8a8b8:	dc800217 	ldw	r18,8(sp)
   8a8bc:	dc400117 	ldw	r17,4(sp)
   8a8c0:	dc000017 	ldw	r16,0(sp)
   8a8c4:	dec00404 	addi	sp,sp,16
   8a8c8:	f800283a 	ret
   8a8cc:	800b883a 	mov	r5,r16
   8a8d0:	8809883a 	mov	r4,r17
   8a8d4:	008580c0 	call	8580c <__sflush_r>
   8a8d8:	1025883a 	mov	r18,r2
   8a8dc:	80800b17 	ldw	r2,44(r16)
   8a8e0:	10000426 	beq	r2,zero,8a8f4 <_fclose_r+0x78>
   8a8e4:	81400717 	ldw	r5,28(r16)
   8a8e8:	8809883a 	mov	r4,r17
   8a8ec:	103ee83a 	callr	r2
   8a8f0:	10001616 	blt	r2,zero,8a94c <_fclose_r+0xd0>
   8a8f4:	8080030b 	ldhu	r2,12(r16)
   8a8f8:	1080200c 	andi	r2,r2,128
   8a8fc:	1000151e 	bne	r2,zero,8a954 <_fclose_r+0xd8>
   8a900:	81400c17 	ldw	r5,48(r16)
   8a904:	28000526 	beq	r5,zero,8a91c <_fclose_r+0xa0>
   8a908:	80801004 	addi	r2,r16,64
   8a90c:	28800226 	beq	r5,r2,8a918 <_fclose_r+0x9c>
   8a910:	8809883a 	mov	r4,r17
   8a914:	0085f780 	call	85f78 <_free_r>
   8a918:	80000c15 	stw	zero,48(r16)
   8a91c:	81401117 	ldw	r5,68(r16)
   8a920:	28000326 	beq	r5,zero,8a930 <_fclose_r+0xb4>
   8a924:	8809883a 	mov	r4,r17
   8a928:	0085f780 	call	85f78 <_free_r>
   8a92c:	80001115 	stw	zero,68(r16)
   8a930:	0085e140 	call	85e14 <__sfp_lock_acquire>
   8a934:	8000030d 	sth	zero,12(r16)
   8a938:	0085e180 	call	85e18 <__sfp_lock_release>
   8a93c:	9005883a 	mov	r2,r18
   8a940:	003fdc06 	br	8a8b4 <__alt_data_end+0xfffa8e34>
   8a944:	0085e040 	call	85e04 <__sinit>
   8a948:	003fd706 	br	8a8a8 <__alt_data_end+0xfffa8e28>
   8a94c:	04bfffc4 	movi	r18,-1
   8a950:	003fe806 	br	8a8f4 <__alt_data_end+0xfffa8e74>
   8a954:	81400417 	ldw	r5,16(r16)
   8a958:	8809883a 	mov	r4,r17
   8a95c:	0085f780 	call	85f78 <_free_r>
   8a960:	003fe706 	br	8a900 <__alt_data_end+0xfffa8e80>
   8a964:	0005883a 	mov	r2,zero
   8a968:	f800283a 	ret

0008a96c <fclose>:
   8a96c:	00800274 	movhi	r2,9
   8a970:	108b6b04 	addi	r2,r2,11692
   8a974:	200b883a 	mov	r5,r4
   8a978:	11000017 	ldw	r4,0(r2)
   8a97c:	008a87c1 	jmpi	8a87c <_fclose_r>

0008a980 <__fputwc>:
   8a980:	defff804 	addi	sp,sp,-32
   8a984:	dcc00415 	stw	r19,16(sp)
   8a988:	dc800315 	stw	r18,12(sp)
   8a98c:	dc000115 	stw	r16,4(sp)
   8a990:	dfc00715 	stw	ra,28(sp)
   8a994:	dd400615 	stw	r21,24(sp)
   8a998:	dd000515 	stw	r20,20(sp)
   8a99c:	dc400215 	stw	r17,8(sp)
   8a9a0:	2027883a 	mov	r19,r4
   8a9a4:	2825883a 	mov	r18,r5
   8a9a8:	3021883a 	mov	r16,r6
   8a9ac:	00869b00 	call	869b0 <__locale_mb_cur_max>
   8a9b0:	00c00044 	movi	r3,1
   8a9b4:	10c03e26 	beq	r2,r3,8aab0 <__fputwc+0x130>
   8a9b8:	81c01704 	addi	r7,r16,92
   8a9bc:	900d883a 	mov	r6,r18
   8a9c0:	d80b883a 	mov	r5,sp
   8a9c4:	9809883a 	mov	r4,r19
   8a9c8:	008ae500 	call	8ae50 <_wcrtomb_r>
   8a9cc:	1029883a 	mov	r20,r2
   8a9d0:	00bfffc4 	movi	r2,-1
   8a9d4:	a0802026 	beq	r20,r2,8aa58 <__fputwc+0xd8>
   8a9d8:	d9400003 	ldbu	r5,0(sp)
   8a9dc:	a0001c26 	beq	r20,zero,8aa50 <__fputwc+0xd0>
   8a9e0:	0023883a 	mov	r17,zero
   8a9e4:	05400284 	movi	r21,10
   8a9e8:	00000906 	br	8aa10 <__fputwc+0x90>
   8a9ec:	80800017 	ldw	r2,0(r16)
   8a9f0:	11400005 	stb	r5,0(r2)
   8a9f4:	80c00017 	ldw	r3,0(r16)
   8a9f8:	18c00044 	addi	r3,r3,1
   8a9fc:	80c00015 	stw	r3,0(r16)
   8aa00:	8c400044 	addi	r17,r17,1
   8aa04:	dc45883a 	add	r2,sp,r17
   8aa08:	8d00112e 	bgeu	r17,r20,8aa50 <__fputwc+0xd0>
   8aa0c:	11400003 	ldbu	r5,0(r2)
   8aa10:	80c00217 	ldw	r3,8(r16)
   8aa14:	18ffffc4 	addi	r3,r3,-1
   8aa18:	80c00215 	stw	r3,8(r16)
   8aa1c:	183ff30e 	bge	r3,zero,8a9ec <__alt_data_end+0xfffa8f6c>
   8aa20:	80800617 	ldw	r2,24(r16)
   8aa24:	18801916 	blt	r3,r2,8aa8c <__fputwc+0x10c>
   8aa28:	80800017 	ldw	r2,0(r16)
   8aa2c:	11400005 	stb	r5,0(r2)
   8aa30:	80800017 	ldw	r2,0(r16)
   8aa34:	10c00003 	ldbu	r3,0(r2)
   8aa38:	10800044 	addi	r2,r2,1
   8aa3c:	1d402326 	beq	r3,r21,8aacc <__fputwc+0x14c>
   8aa40:	80800015 	stw	r2,0(r16)
   8aa44:	8c400044 	addi	r17,r17,1
   8aa48:	dc45883a 	add	r2,sp,r17
   8aa4c:	8d3fef36 	bltu	r17,r20,8aa0c <__alt_data_end+0xfffa8f8c>
   8aa50:	9005883a 	mov	r2,r18
   8aa54:	00000406 	br	8aa68 <__fputwc+0xe8>
   8aa58:	80c0030b 	ldhu	r3,12(r16)
   8aa5c:	a005883a 	mov	r2,r20
   8aa60:	18c01014 	ori	r3,r3,64
   8aa64:	80c0030d 	sth	r3,12(r16)
   8aa68:	dfc00717 	ldw	ra,28(sp)
   8aa6c:	dd400617 	ldw	r21,24(sp)
   8aa70:	dd000517 	ldw	r20,20(sp)
   8aa74:	dcc00417 	ldw	r19,16(sp)
   8aa78:	dc800317 	ldw	r18,12(sp)
   8aa7c:	dc400217 	ldw	r17,8(sp)
   8aa80:	dc000117 	ldw	r16,4(sp)
   8aa84:	dec00804 	addi	sp,sp,32
   8aa88:	f800283a 	ret
   8aa8c:	800d883a 	mov	r6,r16
   8aa90:	29403fcc 	andi	r5,r5,255
   8aa94:	9809883a 	mov	r4,r19
   8aa98:	008acf80 	call	8acf8 <__swbuf_r>
   8aa9c:	10bfffe0 	cmpeqi	r2,r2,-1
   8aaa0:	10803fcc 	andi	r2,r2,255
   8aaa4:	103fd626 	beq	r2,zero,8aa00 <__alt_data_end+0xfffa8f80>
   8aaa8:	00bfffc4 	movi	r2,-1
   8aaac:	003fee06 	br	8aa68 <__alt_data_end+0xfffa8fe8>
   8aab0:	90ffffc4 	addi	r3,r18,-1
   8aab4:	01003f84 	movi	r4,254
   8aab8:	20ffbf36 	bltu	r4,r3,8a9b8 <__alt_data_end+0xfffa8f38>
   8aabc:	900b883a 	mov	r5,r18
   8aac0:	dc800005 	stb	r18,0(sp)
   8aac4:	1029883a 	mov	r20,r2
   8aac8:	003fc506 	br	8a9e0 <__alt_data_end+0xfffa8f60>
   8aacc:	800d883a 	mov	r6,r16
   8aad0:	a80b883a 	mov	r5,r21
   8aad4:	9809883a 	mov	r4,r19
   8aad8:	008acf80 	call	8acf8 <__swbuf_r>
   8aadc:	10bfffe0 	cmpeqi	r2,r2,-1
   8aae0:	003fef06 	br	8aaa0 <__alt_data_end+0xfffa9020>

0008aae4 <_fputwc_r>:
   8aae4:	3080030b 	ldhu	r2,12(r6)
   8aae8:	10c8000c 	andi	r3,r2,8192
   8aaec:	1800051e 	bne	r3,zero,8ab04 <_fputwc_r+0x20>
   8aaf0:	30c01917 	ldw	r3,100(r6)
   8aaf4:	10880014 	ori	r2,r2,8192
   8aaf8:	3080030d 	sth	r2,12(r6)
   8aafc:	18880014 	ori	r2,r3,8192
   8ab00:	30801915 	stw	r2,100(r6)
   8ab04:	008a9801 	jmpi	8a980 <__fputwc>

0008ab08 <fputwc>:
   8ab08:	00800274 	movhi	r2,9
   8ab0c:	defffc04 	addi	sp,sp,-16
   8ab10:	108b6b04 	addi	r2,r2,11692
   8ab14:	dc000115 	stw	r16,4(sp)
   8ab18:	14000017 	ldw	r16,0(r2)
   8ab1c:	dc400215 	stw	r17,8(sp)
   8ab20:	dfc00315 	stw	ra,12(sp)
   8ab24:	2023883a 	mov	r17,r4
   8ab28:	80000226 	beq	r16,zero,8ab34 <fputwc+0x2c>
   8ab2c:	80800e17 	ldw	r2,56(r16)
   8ab30:	10001026 	beq	r2,zero,8ab74 <fputwc+0x6c>
   8ab34:	2880030b 	ldhu	r2,12(r5)
   8ab38:	10c8000c 	andi	r3,r2,8192
   8ab3c:	1800051e 	bne	r3,zero,8ab54 <fputwc+0x4c>
   8ab40:	28c01917 	ldw	r3,100(r5)
   8ab44:	10880014 	ori	r2,r2,8192
   8ab48:	2880030d 	sth	r2,12(r5)
   8ab4c:	18880014 	ori	r2,r3,8192
   8ab50:	28801915 	stw	r2,100(r5)
   8ab54:	280d883a 	mov	r6,r5
   8ab58:	8009883a 	mov	r4,r16
   8ab5c:	880b883a 	mov	r5,r17
   8ab60:	dfc00317 	ldw	ra,12(sp)
   8ab64:	dc400217 	ldw	r17,8(sp)
   8ab68:	dc000117 	ldw	r16,4(sp)
   8ab6c:	dec00404 	addi	sp,sp,16
   8ab70:	008a9801 	jmpi	8a980 <__fputwc>
   8ab74:	8009883a 	mov	r4,r16
   8ab78:	d9400015 	stw	r5,0(sp)
   8ab7c:	0085e040 	call	85e04 <__sinit>
   8ab80:	d9400017 	ldw	r5,0(sp)
   8ab84:	003feb06 	br	8ab34 <__alt_data_end+0xfffa90b4>

0008ab88 <_fstat_r>:
   8ab88:	defffd04 	addi	sp,sp,-12
   8ab8c:	2805883a 	mov	r2,r5
   8ab90:	dc000015 	stw	r16,0(sp)
   8ab94:	04000274 	movhi	r16,9
   8ab98:	dc400115 	stw	r17,4(sp)
   8ab9c:	8412bd04 	addi	r16,r16,19188
   8aba0:	2023883a 	mov	r17,r4
   8aba4:	300b883a 	mov	r5,r6
   8aba8:	1009883a 	mov	r4,r2
   8abac:	dfc00215 	stw	ra,8(sp)
   8abb0:	80000015 	stw	zero,0(r16)
   8abb4:	008e3240 	call	8e324 <fstat>
   8abb8:	00ffffc4 	movi	r3,-1
   8abbc:	10c00526 	beq	r2,r3,8abd4 <_fstat_r+0x4c>
   8abc0:	dfc00217 	ldw	ra,8(sp)
   8abc4:	dc400117 	ldw	r17,4(sp)
   8abc8:	dc000017 	ldw	r16,0(sp)
   8abcc:	dec00304 	addi	sp,sp,12
   8abd0:	f800283a 	ret
   8abd4:	80c00017 	ldw	r3,0(r16)
   8abd8:	183ff926 	beq	r3,zero,8abc0 <__alt_data_end+0xfffa9140>
   8abdc:	88c00015 	stw	r3,0(r17)
   8abe0:	003ff706 	br	8abc0 <__alt_data_end+0xfffa9140>

0008abe4 <_isatty_r>:
   8abe4:	defffd04 	addi	sp,sp,-12
   8abe8:	dc000015 	stw	r16,0(sp)
   8abec:	04000274 	movhi	r16,9
   8abf0:	dc400115 	stw	r17,4(sp)
   8abf4:	8412bd04 	addi	r16,r16,19188
   8abf8:	2023883a 	mov	r17,r4
   8abfc:	2809883a 	mov	r4,r5
   8ac00:	dfc00215 	stw	ra,8(sp)
   8ac04:	80000015 	stw	zero,0(r16)
   8ac08:	008ea240 	call	8ea24 <isatty>
   8ac0c:	00ffffc4 	movi	r3,-1
   8ac10:	10c00526 	beq	r2,r3,8ac28 <_isatty_r+0x44>
   8ac14:	dfc00217 	ldw	ra,8(sp)
   8ac18:	dc400117 	ldw	r17,4(sp)
   8ac1c:	dc000017 	ldw	r16,0(sp)
   8ac20:	dec00304 	addi	sp,sp,12
   8ac24:	f800283a 	ret
   8ac28:	80c00017 	ldw	r3,0(r16)
   8ac2c:	183ff926 	beq	r3,zero,8ac14 <__alt_data_end+0xfffa9194>
   8ac30:	88c00015 	stw	r3,0(r17)
   8ac34:	003ff706 	br	8ac14 <__alt_data_end+0xfffa9194>

0008ac38 <_lseek_r>:
   8ac38:	defffd04 	addi	sp,sp,-12
   8ac3c:	2805883a 	mov	r2,r5
   8ac40:	dc000015 	stw	r16,0(sp)
   8ac44:	04000274 	movhi	r16,9
   8ac48:	dc400115 	stw	r17,4(sp)
   8ac4c:	300b883a 	mov	r5,r6
   8ac50:	8412bd04 	addi	r16,r16,19188
   8ac54:	2023883a 	mov	r17,r4
   8ac58:	380d883a 	mov	r6,r7
   8ac5c:	1009883a 	mov	r4,r2
   8ac60:	dfc00215 	stw	ra,8(sp)
   8ac64:	80000015 	stw	zero,0(r16)
   8ac68:	008ebf00 	call	8ebf0 <lseek>
   8ac6c:	00ffffc4 	movi	r3,-1
   8ac70:	10c00526 	beq	r2,r3,8ac88 <_lseek_r+0x50>
   8ac74:	dfc00217 	ldw	ra,8(sp)
   8ac78:	dc400117 	ldw	r17,4(sp)
   8ac7c:	dc000017 	ldw	r16,0(sp)
   8ac80:	dec00304 	addi	sp,sp,12
   8ac84:	f800283a 	ret
   8ac88:	80c00017 	ldw	r3,0(r16)
   8ac8c:	183ff926 	beq	r3,zero,8ac74 <__alt_data_end+0xfffa91f4>
   8ac90:	88c00015 	stw	r3,0(r17)
   8ac94:	003ff706 	br	8ac74 <__alt_data_end+0xfffa91f4>

0008ac98 <_read_r>:
   8ac98:	defffd04 	addi	sp,sp,-12
   8ac9c:	2805883a 	mov	r2,r5
   8aca0:	dc000015 	stw	r16,0(sp)
   8aca4:	04000274 	movhi	r16,9
   8aca8:	dc400115 	stw	r17,4(sp)
   8acac:	300b883a 	mov	r5,r6
   8acb0:	8412bd04 	addi	r16,r16,19188
   8acb4:	2023883a 	mov	r17,r4
   8acb8:	380d883a 	mov	r6,r7
   8acbc:	1009883a 	mov	r4,r2
   8acc0:	dfc00215 	stw	ra,8(sp)
   8acc4:	80000015 	stw	zero,0(r16)
   8acc8:	008edc40 	call	8edc4 <read>
   8accc:	00ffffc4 	movi	r3,-1
   8acd0:	10c00526 	beq	r2,r3,8ace8 <_read_r+0x50>
   8acd4:	dfc00217 	ldw	ra,8(sp)
   8acd8:	dc400117 	ldw	r17,4(sp)
   8acdc:	dc000017 	ldw	r16,0(sp)
   8ace0:	dec00304 	addi	sp,sp,12
   8ace4:	f800283a 	ret
   8ace8:	80c00017 	ldw	r3,0(r16)
   8acec:	183ff926 	beq	r3,zero,8acd4 <__alt_data_end+0xfffa9254>
   8acf0:	88c00015 	stw	r3,0(r17)
   8acf4:	003ff706 	br	8acd4 <__alt_data_end+0xfffa9254>

0008acf8 <__swbuf_r>:
   8acf8:	defffb04 	addi	sp,sp,-20
   8acfc:	dcc00315 	stw	r19,12(sp)
   8ad00:	dc800215 	stw	r18,8(sp)
   8ad04:	dc000015 	stw	r16,0(sp)
   8ad08:	dfc00415 	stw	ra,16(sp)
   8ad0c:	dc400115 	stw	r17,4(sp)
   8ad10:	2025883a 	mov	r18,r4
   8ad14:	2827883a 	mov	r19,r5
   8ad18:	3021883a 	mov	r16,r6
   8ad1c:	20000226 	beq	r4,zero,8ad28 <__swbuf_r+0x30>
   8ad20:	20800e17 	ldw	r2,56(r4)
   8ad24:	10004226 	beq	r2,zero,8ae30 <__swbuf_r+0x138>
   8ad28:	80800617 	ldw	r2,24(r16)
   8ad2c:	8100030b 	ldhu	r4,12(r16)
   8ad30:	80800215 	stw	r2,8(r16)
   8ad34:	2080020c 	andi	r2,r4,8
   8ad38:	10003626 	beq	r2,zero,8ae14 <__swbuf_r+0x11c>
   8ad3c:	80c00417 	ldw	r3,16(r16)
   8ad40:	18003426 	beq	r3,zero,8ae14 <__swbuf_r+0x11c>
   8ad44:	2088000c 	andi	r2,r4,8192
   8ad48:	9c403fcc 	andi	r17,r19,255
   8ad4c:	10001a26 	beq	r2,zero,8adb8 <__swbuf_r+0xc0>
   8ad50:	80800017 	ldw	r2,0(r16)
   8ad54:	81000517 	ldw	r4,20(r16)
   8ad58:	10c7c83a 	sub	r3,r2,r3
   8ad5c:	1900200e 	bge	r3,r4,8ade0 <__swbuf_r+0xe8>
   8ad60:	18c00044 	addi	r3,r3,1
   8ad64:	81000217 	ldw	r4,8(r16)
   8ad68:	11400044 	addi	r5,r2,1
   8ad6c:	81400015 	stw	r5,0(r16)
   8ad70:	213fffc4 	addi	r4,r4,-1
   8ad74:	81000215 	stw	r4,8(r16)
   8ad78:	14c00005 	stb	r19,0(r2)
   8ad7c:	80800517 	ldw	r2,20(r16)
   8ad80:	10c01e26 	beq	r2,r3,8adfc <__swbuf_r+0x104>
   8ad84:	8080030b 	ldhu	r2,12(r16)
   8ad88:	1080004c 	andi	r2,r2,1
   8ad8c:	10000226 	beq	r2,zero,8ad98 <__swbuf_r+0xa0>
   8ad90:	00800284 	movi	r2,10
   8ad94:	88801926 	beq	r17,r2,8adfc <__swbuf_r+0x104>
   8ad98:	8805883a 	mov	r2,r17
   8ad9c:	dfc00417 	ldw	ra,16(sp)
   8ada0:	dcc00317 	ldw	r19,12(sp)
   8ada4:	dc800217 	ldw	r18,8(sp)
   8ada8:	dc400117 	ldw	r17,4(sp)
   8adac:	dc000017 	ldw	r16,0(sp)
   8adb0:	dec00504 	addi	sp,sp,20
   8adb4:	f800283a 	ret
   8adb8:	81401917 	ldw	r5,100(r16)
   8adbc:	00b7ffc4 	movi	r2,-8193
   8adc0:	21080014 	ori	r4,r4,8192
   8adc4:	2884703a 	and	r2,r5,r2
   8adc8:	80801915 	stw	r2,100(r16)
   8adcc:	80800017 	ldw	r2,0(r16)
   8add0:	8100030d 	sth	r4,12(r16)
   8add4:	81000517 	ldw	r4,20(r16)
   8add8:	10c7c83a 	sub	r3,r2,r3
   8addc:	193fe016 	blt	r3,r4,8ad60 <__alt_data_end+0xfffa92e0>
   8ade0:	800b883a 	mov	r5,r16
   8ade4:	9009883a 	mov	r4,r18
   8ade8:	0085a280 	call	85a28 <_fflush_r>
   8adec:	1000071e 	bne	r2,zero,8ae0c <__swbuf_r+0x114>
   8adf0:	80800017 	ldw	r2,0(r16)
   8adf4:	00c00044 	movi	r3,1
   8adf8:	003fda06 	br	8ad64 <__alt_data_end+0xfffa92e4>
   8adfc:	800b883a 	mov	r5,r16
   8ae00:	9009883a 	mov	r4,r18
   8ae04:	0085a280 	call	85a28 <_fflush_r>
   8ae08:	103fe326 	beq	r2,zero,8ad98 <__alt_data_end+0xfffa9318>
   8ae0c:	00bfffc4 	movi	r2,-1
   8ae10:	003fe206 	br	8ad9c <__alt_data_end+0xfffa931c>
   8ae14:	800b883a 	mov	r5,r16
   8ae18:	9009883a 	mov	r4,r18
   8ae1c:	0083e300 	call	83e30 <__swsetup_r>
   8ae20:	103ffa1e 	bne	r2,zero,8ae0c <__alt_data_end+0xfffa938c>
   8ae24:	8100030b 	ldhu	r4,12(r16)
   8ae28:	80c00417 	ldw	r3,16(r16)
   8ae2c:	003fc506 	br	8ad44 <__alt_data_end+0xfffa92c4>
   8ae30:	0085e040 	call	85e04 <__sinit>
   8ae34:	003fbc06 	br	8ad28 <__alt_data_end+0xfffa92a8>

0008ae38 <__swbuf>:
   8ae38:	00800274 	movhi	r2,9
   8ae3c:	108b6b04 	addi	r2,r2,11692
   8ae40:	280d883a 	mov	r6,r5
   8ae44:	200b883a 	mov	r5,r4
   8ae48:	11000017 	ldw	r4,0(r2)
   8ae4c:	008acf81 	jmpi	8acf8 <__swbuf_r>

0008ae50 <_wcrtomb_r>:
   8ae50:	defff604 	addi	sp,sp,-40
   8ae54:	00800274 	movhi	r2,9
   8ae58:	dc800815 	stw	r18,32(sp)
   8ae5c:	dc400715 	stw	r17,28(sp)
   8ae60:	dc000615 	stw	r16,24(sp)
   8ae64:	108b6f04 	addi	r2,r2,11708
   8ae68:	dfc00915 	stw	ra,36(sp)
   8ae6c:	2021883a 	mov	r16,r4
   8ae70:	3823883a 	mov	r17,r7
   8ae74:	14800017 	ldw	r18,0(r2)
   8ae78:	28001426 	beq	r5,zero,8aecc <_wcrtomb_r+0x7c>
   8ae7c:	d9400415 	stw	r5,16(sp)
   8ae80:	d9800515 	stw	r6,20(sp)
   8ae84:	00869a40 	call	869a4 <__locale_charset>
   8ae88:	d9800517 	ldw	r6,20(sp)
   8ae8c:	d9400417 	ldw	r5,16(sp)
   8ae90:	100f883a 	mov	r7,r2
   8ae94:	dc400015 	stw	r17,0(sp)
   8ae98:	8009883a 	mov	r4,r16
   8ae9c:	903ee83a 	callr	r18
   8aea0:	00ffffc4 	movi	r3,-1
   8aea4:	10c0031e 	bne	r2,r3,8aeb4 <_wcrtomb_r+0x64>
   8aea8:	88000015 	stw	zero,0(r17)
   8aeac:	00c02284 	movi	r3,138
   8aeb0:	80c00015 	stw	r3,0(r16)
   8aeb4:	dfc00917 	ldw	ra,36(sp)
   8aeb8:	dc800817 	ldw	r18,32(sp)
   8aebc:	dc400717 	ldw	r17,28(sp)
   8aec0:	dc000617 	ldw	r16,24(sp)
   8aec4:	dec00a04 	addi	sp,sp,40
   8aec8:	f800283a 	ret
   8aecc:	00869a40 	call	869a4 <__locale_charset>
   8aed0:	100f883a 	mov	r7,r2
   8aed4:	dc400015 	stw	r17,0(sp)
   8aed8:	000d883a 	mov	r6,zero
   8aedc:	d9400104 	addi	r5,sp,4
   8aee0:	8009883a 	mov	r4,r16
   8aee4:	903ee83a 	callr	r18
   8aee8:	003fed06 	br	8aea0 <__alt_data_end+0xfffa9420>

0008aeec <wcrtomb>:
   8aeec:	defff604 	addi	sp,sp,-40
   8aef0:	00800274 	movhi	r2,9
   8aef4:	dc800615 	stw	r18,24(sp)
   8aef8:	dc400515 	stw	r17,20(sp)
   8aefc:	108b6b04 	addi	r2,r2,11692
   8af00:	dfc00915 	stw	ra,36(sp)
   8af04:	dd000815 	stw	r20,32(sp)
   8af08:	dcc00715 	stw	r19,28(sp)
   8af0c:	dc000415 	stw	r16,16(sp)
   8af10:	3025883a 	mov	r18,r6
   8af14:	14400017 	ldw	r17,0(r2)
   8af18:	20001926 	beq	r4,zero,8af80 <wcrtomb+0x94>
   8af1c:	00800274 	movhi	r2,9
   8af20:	108b6f04 	addi	r2,r2,11708
   8af24:	15000017 	ldw	r20,0(r2)
   8af28:	2021883a 	mov	r16,r4
   8af2c:	2827883a 	mov	r19,r5
   8af30:	00869a40 	call	869a4 <__locale_charset>
   8af34:	100f883a 	mov	r7,r2
   8af38:	dc800015 	stw	r18,0(sp)
   8af3c:	980d883a 	mov	r6,r19
   8af40:	800b883a 	mov	r5,r16
   8af44:	8809883a 	mov	r4,r17
   8af48:	a03ee83a 	callr	r20
   8af4c:	00ffffc4 	movi	r3,-1
   8af50:	10c0031e 	bne	r2,r3,8af60 <wcrtomb+0x74>
   8af54:	90000015 	stw	zero,0(r18)
   8af58:	00c02284 	movi	r3,138
   8af5c:	88c00015 	stw	r3,0(r17)
   8af60:	dfc00917 	ldw	ra,36(sp)
   8af64:	dd000817 	ldw	r20,32(sp)
   8af68:	dcc00717 	ldw	r19,28(sp)
   8af6c:	dc800617 	ldw	r18,24(sp)
   8af70:	dc400517 	ldw	r17,20(sp)
   8af74:	dc000417 	ldw	r16,16(sp)
   8af78:	dec00a04 	addi	sp,sp,40
   8af7c:	f800283a 	ret
   8af80:	00800274 	movhi	r2,9
   8af84:	108b6f04 	addi	r2,r2,11708
   8af88:	14000017 	ldw	r16,0(r2)
   8af8c:	00869a40 	call	869a4 <__locale_charset>
   8af90:	100f883a 	mov	r7,r2
   8af94:	dc800015 	stw	r18,0(sp)
   8af98:	000d883a 	mov	r6,zero
   8af9c:	d9400104 	addi	r5,sp,4
   8afa0:	8809883a 	mov	r4,r17
   8afa4:	803ee83a 	callr	r16
   8afa8:	003fe806 	br	8af4c <__alt_data_end+0xfffa94cc>

0008afac <__ascii_wctomb>:
   8afac:	28000526 	beq	r5,zero,8afc4 <__ascii_wctomb+0x18>
   8afb0:	00803fc4 	movi	r2,255
   8afb4:	11800536 	bltu	r2,r6,8afcc <__ascii_wctomb+0x20>
   8afb8:	29800005 	stb	r6,0(r5)
   8afbc:	00800044 	movi	r2,1
   8afc0:	f800283a 	ret
   8afc4:	0005883a 	mov	r2,zero
   8afc8:	f800283a 	ret
   8afcc:	00802284 	movi	r2,138
   8afd0:	20800015 	stw	r2,0(r4)
   8afd4:	00bfffc4 	movi	r2,-1
   8afd8:	f800283a 	ret

0008afdc <_wctomb_r>:
   8afdc:	00800274 	movhi	r2,9
   8afe0:	defff904 	addi	sp,sp,-28
   8afe4:	108b6f04 	addi	r2,r2,11708
   8afe8:	dfc00615 	stw	ra,24(sp)
   8afec:	dc400515 	stw	r17,20(sp)
   8aff0:	dc000415 	stw	r16,16(sp)
   8aff4:	3823883a 	mov	r17,r7
   8aff8:	14000017 	ldw	r16,0(r2)
   8affc:	d9000115 	stw	r4,4(sp)
   8b000:	d9400215 	stw	r5,8(sp)
   8b004:	d9800315 	stw	r6,12(sp)
   8b008:	00869a40 	call	869a4 <__locale_charset>
   8b00c:	d9800317 	ldw	r6,12(sp)
   8b010:	d9400217 	ldw	r5,8(sp)
   8b014:	d9000117 	ldw	r4,4(sp)
   8b018:	100f883a 	mov	r7,r2
   8b01c:	dc400015 	stw	r17,0(sp)
   8b020:	803ee83a 	callr	r16
   8b024:	dfc00617 	ldw	ra,24(sp)
   8b028:	dc400517 	ldw	r17,20(sp)
   8b02c:	dc000417 	ldw	r16,16(sp)
   8b030:	dec00704 	addi	sp,sp,28
   8b034:	f800283a 	ret

0008b038 <__muldi3>:
   8b038:	223fffcc 	andi	r8,r4,65535
   8b03c:	2006d43a 	srli	r3,r4,16
   8b040:	32bfffcc 	andi	r10,r6,65535
   8b044:	3012d43a 	srli	r9,r6,16
   8b048:	4297383a 	mul	r11,r8,r10
   8b04c:	1a95383a 	mul	r10,r3,r10
   8b050:	4251383a 	mul	r8,r8,r9
   8b054:	5804d43a 	srli	r2,r11,16
   8b058:	4291883a 	add	r8,r8,r10
   8b05c:	1205883a 	add	r2,r2,r8
   8b060:	1a51383a 	mul	r8,r3,r9
   8b064:	1280022e 	bgeu	r2,r10,8b070 <__muldi3+0x38>
   8b068:	00c00074 	movhi	r3,1
   8b06c:	40d1883a 	add	r8,r8,r3
   8b070:	1006d43a 	srli	r3,r2,16
   8b074:	21cf383a 	mul	r7,r4,r7
   8b078:	314b383a 	mul	r5,r6,r5
   8b07c:	1004943a 	slli	r2,r2,16
   8b080:	1a11883a 	add	r8,r3,r8
   8b084:	5affffcc 	andi	r11,r11,65535
   8b088:	3947883a 	add	r3,r7,r5
   8b08c:	12c5883a 	add	r2,r2,r11
   8b090:	1a07883a 	add	r3,r3,r8
   8b094:	f800283a 	ret

0008b098 <__udivdi3>:
   8b098:	defff504 	addi	sp,sp,-44
   8b09c:	dcc00415 	stw	r19,16(sp)
   8b0a0:	dc000115 	stw	r16,4(sp)
   8b0a4:	dfc00a15 	stw	ra,40(sp)
   8b0a8:	df000915 	stw	fp,36(sp)
   8b0ac:	ddc00815 	stw	r23,32(sp)
   8b0b0:	dd800715 	stw	r22,28(sp)
   8b0b4:	dd400615 	stw	r21,24(sp)
   8b0b8:	dd000515 	stw	r20,20(sp)
   8b0bc:	dc800315 	stw	r18,12(sp)
   8b0c0:	dc400215 	stw	r17,8(sp)
   8b0c4:	2027883a 	mov	r19,r4
   8b0c8:	2821883a 	mov	r16,r5
   8b0cc:	3800411e 	bne	r7,zero,8b1d4 <__udivdi3+0x13c>
   8b0d0:	3023883a 	mov	r17,r6
   8b0d4:	2025883a 	mov	r18,r4
   8b0d8:	2980522e 	bgeu	r5,r6,8b224 <__udivdi3+0x18c>
   8b0dc:	00bfffd4 	movui	r2,65535
   8b0e0:	282d883a 	mov	r22,r5
   8b0e4:	1180a836 	bltu	r2,r6,8b388 <__udivdi3+0x2f0>
   8b0e8:	00803fc4 	movi	r2,255
   8b0ec:	1185803a 	cmpltu	r2,r2,r6
   8b0f0:	100490fa 	slli	r2,r2,3
   8b0f4:	3086d83a 	srl	r3,r6,r2
   8b0f8:	01000274 	movhi	r4,9
   8b0fc:	2103ed04 	addi	r4,r4,4020
   8b100:	20c7883a 	add	r3,r4,r3
   8b104:	18c00003 	ldbu	r3,0(r3)
   8b108:	1885883a 	add	r2,r3,r2
   8b10c:	00c00804 	movi	r3,32
   8b110:	1887c83a 	sub	r3,r3,r2
   8b114:	18000526 	beq	r3,zero,8b12c <__udivdi3+0x94>
   8b118:	80e0983a 	sll	r16,r16,r3
   8b11c:	9884d83a 	srl	r2,r19,r2
   8b120:	30e2983a 	sll	r17,r6,r3
   8b124:	98e4983a 	sll	r18,r19,r3
   8b128:	142cb03a 	or	r22,r2,r16
   8b12c:	882ad43a 	srli	r21,r17,16
   8b130:	b009883a 	mov	r4,r22
   8b134:	8d3fffcc 	andi	r20,r17,65535
   8b138:	a80b883a 	mov	r5,r21
   8b13c:	00818640 	call	81864 <__umodsi3>
   8b140:	b009883a 	mov	r4,r22
   8b144:	a80b883a 	mov	r5,r21
   8b148:	1027883a 	mov	r19,r2
   8b14c:	00818000 	call	81800 <__udivsi3>
   8b150:	102d883a 	mov	r22,r2
   8b154:	9826943a 	slli	r19,r19,16
   8b158:	9004d43a 	srli	r2,r18,16
   8b15c:	a5a1383a 	mul	r16,r20,r22
   8b160:	14c4b03a 	or	r2,r2,r19
   8b164:	1400052e 	bgeu	r2,r16,8b17c <__udivdi3+0xe4>
   8b168:	1445883a 	add	r2,r2,r17
   8b16c:	b0ffffc4 	addi	r3,r22,-1
   8b170:	14400136 	bltu	r2,r17,8b178 <__udivdi3+0xe0>
   8b174:	14012336 	bltu	r2,r16,8b604 <__udivdi3+0x56c>
   8b178:	182d883a 	mov	r22,r3
   8b17c:	1421c83a 	sub	r16,r2,r16
   8b180:	a80b883a 	mov	r5,r21
   8b184:	8009883a 	mov	r4,r16
   8b188:	00818640 	call	81864 <__umodsi3>
   8b18c:	1027883a 	mov	r19,r2
   8b190:	a80b883a 	mov	r5,r21
   8b194:	8009883a 	mov	r4,r16
   8b198:	00818000 	call	81800 <__udivsi3>
   8b19c:	9826943a 	slli	r19,r19,16
   8b1a0:	a0a9383a 	mul	r20,r20,r2
   8b1a4:	94bfffcc 	andi	r18,r18,65535
   8b1a8:	94e4b03a 	or	r18,r18,r19
   8b1ac:	9500052e 	bgeu	r18,r20,8b1c4 <__udivdi3+0x12c>
   8b1b0:	8ca5883a 	add	r18,r17,r18
   8b1b4:	10ffffc4 	addi	r3,r2,-1
   8b1b8:	9440f136 	bltu	r18,r17,8b580 <__udivdi3+0x4e8>
   8b1bc:	9500f02e 	bgeu	r18,r20,8b580 <__udivdi3+0x4e8>
   8b1c0:	10bfff84 	addi	r2,r2,-2
   8b1c4:	b00c943a 	slli	r6,r22,16
   8b1c8:	0007883a 	mov	r3,zero
   8b1cc:	3084b03a 	or	r2,r6,r2
   8b1d0:	00005906 	br	8b338 <__udivdi3+0x2a0>
   8b1d4:	29c05636 	bltu	r5,r7,8b330 <__udivdi3+0x298>
   8b1d8:	00bfffd4 	movui	r2,65535
   8b1dc:	11c0622e 	bgeu	r2,r7,8b368 <__udivdi3+0x2d0>
   8b1e0:	00804034 	movhi	r2,256
   8b1e4:	10bfffc4 	addi	r2,r2,-1
   8b1e8:	11c0ee36 	bltu	r2,r7,8b5a4 <__udivdi3+0x50c>
   8b1ec:	00800404 	movi	r2,16
   8b1f0:	3886d83a 	srl	r3,r7,r2
   8b1f4:	01000274 	movhi	r4,9
   8b1f8:	2103ed04 	addi	r4,r4,4020
   8b1fc:	20c7883a 	add	r3,r4,r3
   8b200:	18c00003 	ldbu	r3,0(r3)
   8b204:	05400804 	movi	r21,32
   8b208:	1885883a 	add	r2,r3,r2
   8b20c:	a8abc83a 	sub	r21,r21,r2
   8b210:	a800621e 	bne	r21,zero,8b39c <__udivdi3+0x304>
   8b214:	3c00e936 	bltu	r7,r16,8b5bc <__udivdi3+0x524>
   8b218:	9985403a 	cmpgeu	r2,r19,r6
   8b21c:	0007883a 	mov	r3,zero
   8b220:	00004506 	br	8b338 <__udivdi3+0x2a0>
   8b224:	3000041e 	bne	r6,zero,8b238 <__udivdi3+0x1a0>
   8b228:	000b883a 	mov	r5,zero
   8b22c:	01000044 	movi	r4,1
   8b230:	00818000 	call	81800 <__udivsi3>
   8b234:	1023883a 	mov	r17,r2
   8b238:	00bfffd4 	movui	r2,65535
   8b23c:	14404e2e 	bgeu	r2,r17,8b378 <__udivdi3+0x2e0>
   8b240:	00804034 	movhi	r2,256
   8b244:	10bfffc4 	addi	r2,r2,-1
   8b248:	1440d836 	bltu	r2,r17,8b5ac <__udivdi3+0x514>
   8b24c:	00800404 	movi	r2,16
   8b250:	8886d83a 	srl	r3,r17,r2
   8b254:	01000274 	movhi	r4,9
   8b258:	2103ed04 	addi	r4,r4,4020
   8b25c:	20c7883a 	add	r3,r4,r3
   8b260:	18c00003 	ldbu	r3,0(r3)
   8b264:	1885883a 	add	r2,r3,r2
   8b268:	00c00804 	movi	r3,32
   8b26c:	1887c83a 	sub	r3,r3,r2
   8b270:	18008f1e 	bne	r3,zero,8b4b0 <__udivdi3+0x418>
   8b274:	882ad43a 	srli	r21,r17,16
   8b278:	8461c83a 	sub	r16,r16,r17
   8b27c:	8d3fffcc 	andi	r20,r17,65535
   8b280:	00c00044 	movi	r3,1
   8b284:	8009883a 	mov	r4,r16
   8b288:	a80b883a 	mov	r5,r21
   8b28c:	d8c00015 	stw	r3,0(sp)
   8b290:	00818640 	call	81864 <__umodsi3>
   8b294:	8009883a 	mov	r4,r16
   8b298:	a80b883a 	mov	r5,r21
   8b29c:	1027883a 	mov	r19,r2
   8b2a0:	00818000 	call	81800 <__udivsi3>
   8b2a4:	9826943a 	slli	r19,r19,16
   8b2a8:	9008d43a 	srli	r4,r18,16
   8b2ac:	1521383a 	mul	r16,r2,r20
   8b2b0:	102d883a 	mov	r22,r2
   8b2b4:	24c8b03a 	or	r4,r4,r19
   8b2b8:	d8c00017 	ldw	r3,0(sp)
   8b2bc:	2400052e 	bgeu	r4,r16,8b2d4 <__udivdi3+0x23c>
   8b2c0:	2449883a 	add	r4,r4,r17
   8b2c4:	b0bfffc4 	addi	r2,r22,-1
   8b2c8:	24400136 	bltu	r4,r17,8b2d0 <__udivdi3+0x238>
   8b2cc:	2400ca36 	bltu	r4,r16,8b5f8 <__udivdi3+0x560>
   8b2d0:	102d883a 	mov	r22,r2
   8b2d4:	2421c83a 	sub	r16,r4,r16
   8b2d8:	a80b883a 	mov	r5,r21
   8b2dc:	8009883a 	mov	r4,r16
   8b2e0:	d8c00015 	stw	r3,0(sp)
   8b2e4:	00818640 	call	81864 <__umodsi3>
   8b2e8:	1027883a 	mov	r19,r2
   8b2ec:	a80b883a 	mov	r5,r21
   8b2f0:	8009883a 	mov	r4,r16
   8b2f4:	00818000 	call	81800 <__udivsi3>
   8b2f8:	9826943a 	slli	r19,r19,16
   8b2fc:	1529383a 	mul	r20,r2,r20
   8b300:	94bfffcc 	andi	r18,r18,65535
   8b304:	94e4b03a 	or	r18,r18,r19
   8b308:	d8c00017 	ldw	r3,0(sp)
   8b30c:	9500052e 	bgeu	r18,r20,8b324 <__udivdi3+0x28c>
   8b310:	8ca5883a 	add	r18,r17,r18
   8b314:	113fffc4 	addi	r4,r2,-1
   8b318:	94409736 	bltu	r18,r17,8b578 <__udivdi3+0x4e0>
   8b31c:	9500962e 	bgeu	r18,r20,8b578 <__udivdi3+0x4e0>
   8b320:	10bfff84 	addi	r2,r2,-2
   8b324:	b00c943a 	slli	r6,r22,16
   8b328:	3084b03a 	or	r2,r6,r2
   8b32c:	00000206 	br	8b338 <__udivdi3+0x2a0>
   8b330:	0007883a 	mov	r3,zero
   8b334:	0005883a 	mov	r2,zero
   8b338:	dfc00a17 	ldw	ra,40(sp)
   8b33c:	df000917 	ldw	fp,36(sp)
   8b340:	ddc00817 	ldw	r23,32(sp)
   8b344:	dd800717 	ldw	r22,28(sp)
   8b348:	dd400617 	ldw	r21,24(sp)
   8b34c:	dd000517 	ldw	r20,20(sp)
   8b350:	dcc00417 	ldw	r19,16(sp)
   8b354:	dc800317 	ldw	r18,12(sp)
   8b358:	dc400217 	ldw	r17,8(sp)
   8b35c:	dc000117 	ldw	r16,4(sp)
   8b360:	dec00b04 	addi	sp,sp,44
   8b364:	f800283a 	ret
   8b368:	00803fc4 	movi	r2,255
   8b36c:	11c5803a 	cmpltu	r2,r2,r7
   8b370:	100490fa 	slli	r2,r2,3
   8b374:	003f9e06 	br	8b1f0 <__alt_data_end+0xfffa9770>
   8b378:	00803fc4 	movi	r2,255
   8b37c:	1445803a 	cmpltu	r2,r2,r17
   8b380:	100490fa 	slli	r2,r2,3
   8b384:	003fb206 	br	8b250 <__alt_data_end+0xfffa97d0>
   8b388:	00804034 	movhi	r2,256
   8b38c:	10bfffc4 	addi	r2,r2,-1
   8b390:	11808836 	bltu	r2,r6,8b5b4 <__udivdi3+0x51c>
   8b394:	00800404 	movi	r2,16
   8b398:	003f5606 	br	8b0f4 <__alt_data_end+0xfffa9674>
   8b39c:	30aed83a 	srl	r23,r6,r2
   8b3a0:	3d4e983a 	sll	r7,r7,r21
   8b3a4:	80acd83a 	srl	r22,r16,r2
   8b3a8:	9884d83a 	srl	r2,r19,r2
   8b3ac:	3deeb03a 	or	r23,r7,r23
   8b3b0:	b824d43a 	srli	r18,r23,16
   8b3b4:	8560983a 	sll	r16,r16,r21
   8b3b8:	b009883a 	mov	r4,r22
   8b3bc:	900b883a 	mov	r5,r18
   8b3c0:	3568983a 	sll	r20,r6,r21
   8b3c4:	1420b03a 	or	r16,r2,r16
   8b3c8:	00818640 	call	81864 <__umodsi3>
   8b3cc:	b009883a 	mov	r4,r22
   8b3d0:	900b883a 	mov	r5,r18
   8b3d4:	1023883a 	mov	r17,r2
   8b3d8:	00818000 	call	81800 <__udivsi3>
   8b3dc:	8808943a 	slli	r4,r17,16
   8b3e0:	bf3fffcc 	andi	fp,r23,65535
   8b3e4:	8006d43a 	srli	r3,r16,16
   8b3e8:	e0a3383a 	mul	r17,fp,r2
   8b3ec:	100d883a 	mov	r6,r2
   8b3f0:	1906b03a 	or	r3,r3,r4
   8b3f4:	1c40042e 	bgeu	r3,r17,8b408 <__udivdi3+0x370>
   8b3f8:	1dc7883a 	add	r3,r3,r23
   8b3fc:	10bfffc4 	addi	r2,r2,-1
   8b400:	1dc0752e 	bgeu	r3,r23,8b5d8 <__udivdi3+0x540>
   8b404:	100d883a 	mov	r6,r2
   8b408:	1c63c83a 	sub	r17,r3,r17
   8b40c:	900b883a 	mov	r5,r18
   8b410:	8809883a 	mov	r4,r17
   8b414:	d9800015 	stw	r6,0(sp)
   8b418:	00818640 	call	81864 <__umodsi3>
   8b41c:	102d883a 	mov	r22,r2
   8b420:	8809883a 	mov	r4,r17
   8b424:	900b883a 	mov	r5,r18
   8b428:	00818000 	call	81800 <__udivsi3>
   8b42c:	b02c943a 	slli	r22,r22,16
   8b430:	e089383a 	mul	r4,fp,r2
   8b434:	843fffcc 	andi	r16,r16,65535
   8b438:	85a0b03a 	or	r16,r16,r22
   8b43c:	d9800017 	ldw	r6,0(sp)
   8b440:	8100042e 	bgeu	r16,r4,8b454 <__udivdi3+0x3bc>
   8b444:	85e1883a 	add	r16,r16,r23
   8b448:	10ffffc4 	addi	r3,r2,-1
   8b44c:	85c05e2e 	bgeu	r16,r23,8b5c8 <__udivdi3+0x530>
   8b450:	1805883a 	mov	r2,r3
   8b454:	300c943a 	slli	r6,r6,16
   8b458:	a17fffcc 	andi	r5,r20,65535
   8b45c:	a028d43a 	srli	r20,r20,16
   8b460:	3084b03a 	or	r2,r6,r2
   8b464:	10ffffcc 	andi	r3,r2,65535
   8b468:	100cd43a 	srli	r6,r2,16
   8b46c:	194f383a 	mul	r7,r3,r5
   8b470:	1d07383a 	mul	r3,r3,r20
   8b474:	314b383a 	mul	r5,r6,r5
   8b478:	3810d43a 	srli	r8,r7,16
   8b47c:	8121c83a 	sub	r16,r16,r4
   8b480:	1947883a 	add	r3,r3,r5
   8b484:	40c7883a 	add	r3,r8,r3
   8b488:	350d383a 	mul	r6,r6,r20
   8b48c:	1940022e 	bgeu	r3,r5,8b498 <__udivdi3+0x400>
   8b490:	01000074 	movhi	r4,1
   8b494:	310d883a 	add	r6,r6,r4
   8b498:	1828d43a 	srli	r20,r3,16
   8b49c:	a18d883a 	add	r6,r20,r6
   8b4a0:	81803e36 	bltu	r16,r6,8b59c <__udivdi3+0x504>
   8b4a4:	81803826 	beq	r16,r6,8b588 <__udivdi3+0x4f0>
   8b4a8:	0007883a 	mov	r3,zero
   8b4ac:	003fa206 	br	8b338 <__alt_data_end+0xfffa98b8>
   8b4b0:	88e2983a 	sll	r17,r17,r3
   8b4b4:	80a8d83a 	srl	r20,r16,r2
   8b4b8:	80e0983a 	sll	r16,r16,r3
   8b4bc:	882ad43a 	srli	r21,r17,16
   8b4c0:	9884d83a 	srl	r2,r19,r2
   8b4c4:	a009883a 	mov	r4,r20
   8b4c8:	a80b883a 	mov	r5,r21
   8b4cc:	142eb03a 	or	r23,r2,r16
   8b4d0:	98e4983a 	sll	r18,r19,r3
   8b4d4:	00818640 	call	81864 <__umodsi3>
   8b4d8:	a009883a 	mov	r4,r20
   8b4dc:	a80b883a 	mov	r5,r21
   8b4e0:	1021883a 	mov	r16,r2
   8b4e4:	00818000 	call	81800 <__udivsi3>
   8b4e8:	1039883a 	mov	fp,r2
   8b4ec:	8d3fffcc 	andi	r20,r17,65535
   8b4f0:	8020943a 	slli	r16,r16,16
   8b4f4:	b804d43a 	srli	r2,r23,16
   8b4f8:	a72d383a 	mul	r22,r20,fp
   8b4fc:	1404b03a 	or	r2,r2,r16
   8b500:	1580062e 	bgeu	r2,r22,8b51c <__udivdi3+0x484>
   8b504:	1445883a 	add	r2,r2,r17
   8b508:	e0ffffc4 	addi	r3,fp,-1
   8b50c:	14403836 	bltu	r2,r17,8b5f0 <__udivdi3+0x558>
   8b510:	1580372e 	bgeu	r2,r22,8b5f0 <__udivdi3+0x558>
   8b514:	e73fff84 	addi	fp,fp,-2
   8b518:	1445883a 	add	r2,r2,r17
   8b51c:	15adc83a 	sub	r22,r2,r22
   8b520:	a80b883a 	mov	r5,r21
   8b524:	b009883a 	mov	r4,r22
   8b528:	00818640 	call	81864 <__umodsi3>
   8b52c:	1027883a 	mov	r19,r2
   8b530:	b009883a 	mov	r4,r22
   8b534:	a80b883a 	mov	r5,r21
   8b538:	00818000 	call	81800 <__udivsi3>
   8b53c:	9826943a 	slli	r19,r19,16
   8b540:	a0a1383a 	mul	r16,r20,r2
   8b544:	b93fffcc 	andi	r4,r23,65535
   8b548:	24c8b03a 	or	r4,r4,r19
   8b54c:	2400062e 	bgeu	r4,r16,8b568 <__udivdi3+0x4d0>
   8b550:	2449883a 	add	r4,r4,r17
   8b554:	10ffffc4 	addi	r3,r2,-1
   8b558:	24402336 	bltu	r4,r17,8b5e8 <__udivdi3+0x550>
   8b55c:	2400222e 	bgeu	r4,r16,8b5e8 <__udivdi3+0x550>
   8b560:	10bfff84 	addi	r2,r2,-2
   8b564:	2449883a 	add	r4,r4,r17
   8b568:	e038943a 	slli	fp,fp,16
   8b56c:	2421c83a 	sub	r16,r4,r16
   8b570:	e086b03a 	or	r3,fp,r2
   8b574:	003f4306 	br	8b284 <__alt_data_end+0xfffa9804>
   8b578:	2005883a 	mov	r2,r4
   8b57c:	003f6906 	br	8b324 <__alt_data_end+0xfffa98a4>
   8b580:	1805883a 	mov	r2,r3
   8b584:	003f0f06 	br	8b1c4 <__alt_data_end+0xfffa9744>
   8b588:	1806943a 	slli	r3,r3,16
   8b58c:	9d66983a 	sll	r19,r19,r21
   8b590:	39ffffcc 	andi	r7,r7,65535
   8b594:	19c7883a 	add	r3,r3,r7
   8b598:	98ffc32e 	bgeu	r19,r3,8b4a8 <__alt_data_end+0xfffa9a28>
   8b59c:	10bfffc4 	addi	r2,r2,-1
   8b5a0:	003fc106 	br	8b4a8 <__alt_data_end+0xfffa9a28>
   8b5a4:	00800604 	movi	r2,24
   8b5a8:	003f1106 	br	8b1f0 <__alt_data_end+0xfffa9770>
   8b5ac:	00800604 	movi	r2,24
   8b5b0:	003f2706 	br	8b250 <__alt_data_end+0xfffa97d0>
   8b5b4:	00800604 	movi	r2,24
   8b5b8:	003ece06 	br	8b0f4 <__alt_data_end+0xfffa9674>
   8b5bc:	0007883a 	mov	r3,zero
   8b5c0:	00800044 	movi	r2,1
   8b5c4:	003f5c06 	br	8b338 <__alt_data_end+0xfffa98b8>
   8b5c8:	813fa12e 	bgeu	r16,r4,8b450 <__alt_data_end+0xfffa99d0>
   8b5cc:	10bfff84 	addi	r2,r2,-2
   8b5d0:	85e1883a 	add	r16,r16,r23
   8b5d4:	003f9f06 	br	8b454 <__alt_data_end+0xfffa99d4>
   8b5d8:	1c7f8a2e 	bgeu	r3,r17,8b404 <__alt_data_end+0xfffa9984>
   8b5dc:	31bfff84 	addi	r6,r6,-2
   8b5e0:	1dc7883a 	add	r3,r3,r23
   8b5e4:	003f8806 	br	8b408 <__alt_data_end+0xfffa9988>
   8b5e8:	1805883a 	mov	r2,r3
   8b5ec:	003fde06 	br	8b568 <__alt_data_end+0xfffa9ae8>
   8b5f0:	1839883a 	mov	fp,r3
   8b5f4:	003fc906 	br	8b51c <__alt_data_end+0xfffa9a9c>
   8b5f8:	b5bfff84 	addi	r22,r22,-2
   8b5fc:	2449883a 	add	r4,r4,r17
   8b600:	003f3406 	br	8b2d4 <__alt_data_end+0xfffa9854>
   8b604:	b5bfff84 	addi	r22,r22,-2
   8b608:	1445883a 	add	r2,r2,r17
   8b60c:	003edb06 	br	8b17c <__alt_data_end+0xfffa96fc>

0008b610 <__umoddi3>:
   8b610:	defff404 	addi	sp,sp,-48
   8b614:	df000a15 	stw	fp,40(sp)
   8b618:	dc400315 	stw	r17,12(sp)
   8b61c:	dc000215 	stw	r16,8(sp)
   8b620:	dfc00b15 	stw	ra,44(sp)
   8b624:	ddc00915 	stw	r23,36(sp)
   8b628:	dd800815 	stw	r22,32(sp)
   8b62c:	dd400715 	stw	r21,28(sp)
   8b630:	dd000615 	stw	r20,24(sp)
   8b634:	dcc00515 	stw	r19,20(sp)
   8b638:	dc800415 	stw	r18,16(sp)
   8b63c:	2021883a 	mov	r16,r4
   8b640:	2823883a 	mov	r17,r5
   8b644:	2839883a 	mov	fp,r5
   8b648:	38003c1e 	bne	r7,zero,8b73c <__umoddi3+0x12c>
   8b64c:	3027883a 	mov	r19,r6
   8b650:	2029883a 	mov	r20,r4
   8b654:	2980512e 	bgeu	r5,r6,8b79c <__umoddi3+0x18c>
   8b658:	00bfffd4 	movui	r2,65535
   8b65c:	11809a36 	bltu	r2,r6,8b8c8 <__umoddi3+0x2b8>
   8b660:	01003fc4 	movi	r4,255
   8b664:	2189803a 	cmpltu	r4,r4,r6
   8b668:	200890fa 	slli	r4,r4,3
   8b66c:	3104d83a 	srl	r2,r6,r4
   8b670:	00c00274 	movhi	r3,9
   8b674:	18c3ed04 	addi	r3,r3,4020
   8b678:	1885883a 	add	r2,r3,r2
   8b67c:	10c00003 	ldbu	r3,0(r2)
   8b680:	00800804 	movi	r2,32
   8b684:	1909883a 	add	r4,r3,r4
   8b688:	1125c83a 	sub	r18,r2,r4
   8b68c:	90000526 	beq	r18,zero,8b6a4 <__umoddi3+0x94>
   8b690:	8ca2983a 	sll	r17,r17,r18
   8b694:	8108d83a 	srl	r4,r16,r4
   8b698:	34a6983a 	sll	r19,r6,r18
   8b69c:	84a8983a 	sll	r20,r16,r18
   8b6a0:	2478b03a 	or	fp,r4,r17
   8b6a4:	982ed43a 	srli	r23,r19,16
   8b6a8:	e009883a 	mov	r4,fp
   8b6ac:	9dbfffcc 	andi	r22,r19,65535
   8b6b0:	b80b883a 	mov	r5,r23
   8b6b4:	00818640 	call	81864 <__umodsi3>
   8b6b8:	e009883a 	mov	r4,fp
   8b6bc:	b80b883a 	mov	r5,r23
   8b6c0:	102b883a 	mov	r21,r2
   8b6c4:	00818000 	call	81800 <__udivsi3>
   8b6c8:	a806943a 	slli	r3,r21,16
   8b6cc:	a008d43a 	srli	r4,r20,16
   8b6d0:	b085383a 	mul	r2,r22,r2
   8b6d4:	20c8b03a 	or	r4,r4,r3
   8b6d8:	2080032e 	bgeu	r4,r2,8b6e8 <__umoddi3+0xd8>
   8b6dc:	24c9883a 	add	r4,r4,r19
   8b6e0:	24c00136 	bltu	r4,r19,8b6e8 <__umoddi3+0xd8>
   8b6e4:	20811036 	bltu	r4,r2,8bb28 <__umoddi3+0x518>
   8b6e8:	20abc83a 	sub	r21,r4,r2
   8b6ec:	b80b883a 	mov	r5,r23
   8b6f0:	a809883a 	mov	r4,r21
   8b6f4:	00818640 	call	81864 <__umodsi3>
   8b6f8:	1023883a 	mov	r17,r2
   8b6fc:	b80b883a 	mov	r5,r23
   8b700:	a809883a 	mov	r4,r21
   8b704:	00818000 	call	81800 <__udivsi3>
   8b708:	8822943a 	slli	r17,r17,16
   8b70c:	b085383a 	mul	r2,r22,r2
   8b710:	a0ffffcc 	andi	r3,r20,65535
   8b714:	1c46b03a 	or	r3,r3,r17
   8b718:	1880042e 	bgeu	r3,r2,8b72c <__umoddi3+0x11c>
   8b71c:	1cc7883a 	add	r3,r3,r19
   8b720:	1cc00236 	bltu	r3,r19,8b72c <__umoddi3+0x11c>
   8b724:	1880012e 	bgeu	r3,r2,8b72c <__umoddi3+0x11c>
   8b728:	1cc7883a 	add	r3,r3,r19
   8b72c:	1885c83a 	sub	r2,r3,r2
   8b730:	1484d83a 	srl	r2,r2,r18
   8b734:	0007883a 	mov	r3,zero
   8b738:	00004f06 	br	8b878 <__umoddi3+0x268>
   8b73c:	29c04c36 	bltu	r5,r7,8b870 <__umoddi3+0x260>
   8b740:	00bfffd4 	movui	r2,65535
   8b744:	11c0582e 	bgeu	r2,r7,8b8a8 <__umoddi3+0x298>
   8b748:	00804034 	movhi	r2,256
   8b74c:	10bfffc4 	addi	r2,r2,-1
   8b750:	11c0e736 	bltu	r2,r7,8baf0 <__umoddi3+0x4e0>
   8b754:	01000404 	movi	r4,16
   8b758:	3904d83a 	srl	r2,r7,r4
   8b75c:	00c00274 	movhi	r3,9
   8b760:	18c3ed04 	addi	r3,r3,4020
   8b764:	1885883a 	add	r2,r3,r2
   8b768:	14c00003 	ldbu	r19,0(r2)
   8b76c:	00c00804 	movi	r3,32
   8b770:	9927883a 	add	r19,r19,r4
   8b774:	1ce9c83a 	sub	r20,r3,r19
   8b778:	a000581e 	bne	r20,zero,8b8dc <__umoddi3+0x2cc>
   8b77c:	3c400136 	bltu	r7,r17,8b784 <__umoddi3+0x174>
   8b780:	8180eb36 	bltu	r16,r6,8bb30 <__umoddi3+0x520>
   8b784:	8185c83a 	sub	r2,r16,r6
   8b788:	89e3c83a 	sub	r17,r17,r7
   8b78c:	8089803a 	cmpltu	r4,r16,r2
   8b790:	8939c83a 	sub	fp,r17,r4
   8b794:	e007883a 	mov	r3,fp
   8b798:	00003706 	br	8b878 <__umoddi3+0x268>
   8b79c:	3000041e 	bne	r6,zero,8b7b0 <__umoddi3+0x1a0>
   8b7a0:	000b883a 	mov	r5,zero
   8b7a4:	01000044 	movi	r4,1
   8b7a8:	00818000 	call	81800 <__udivsi3>
   8b7ac:	1027883a 	mov	r19,r2
   8b7b0:	00bfffd4 	movui	r2,65535
   8b7b4:	14c0402e 	bgeu	r2,r19,8b8b8 <__umoddi3+0x2a8>
   8b7b8:	00804034 	movhi	r2,256
   8b7bc:	10bfffc4 	addi	r2,r2,-1
   8b7c0:	14c0cd36 	bltu	r2,r19,8baf8 <__umoddi3+0x4e8>
   8b7c4:	00800404 	movi	r2,16
   8b7c8:	9886d83a 	srl	r3,r19,r2
   8b7cc:	01000274 	movhi	r4,9
   8b7d0:	2103ed04 	addi	r4,r4,4020
   8b7d4:	20c7883a 	add	r3,r4,r3
   8b7d8:	18c00003 	ldbu	r3,0(r3)
   8b7dc:	1887883a 	add	r3,r3,r2
   8b7e0:	00800804 	movi	r2,32
   8b7e4:	10e5c83a 	sub	r18,r2,r3
   8b7e8:	9000901e 	bne	r18,zero,8ba2c <__umoddi3+0x41c>
   8b7ec:	982cd43a 	srli	r22,r19,16
   8b7f0:	8ce3c83a 	sub	r17,r17,r19
   8b7f4:	9d7fffcc 	andi	r21,r19,65535
   8b7f8:	b00b883a 	mov	r5,r22
   8b7fc:	8809883a 	mov	r4,r17
   8b800:	00818640 	call	81864 <__umodsi3>
   8b804:	8809883a 	mov	r4,r17
   8b808:	b00b883a 	mov	r5,r22
   8b80c:	1021883a 	mov	r16,r2
   8b810:	00818000 	call	81800 <__udivsi3>
   8b814:	8006943a 	slli	r3,r16,16
   8b818:	a008d43a 	srli	r4,r20,16
   8b81c:	1545383a 	mul	r2,r2,r21
   8b820:	20c8b03a 	or	r4,r4,r3
   8b824:	2080042e 	bgeu	r4,r2,8b838 <__umoddi3+0x228>
   8b828:	24c9883a 	add	r4,r4,r19
   8b82c:	24c00236 	bltu	r4,r19,8b838 <__umoddi3+0x228>
   8b830:	2080012e 	bgeu	r4,r2,8b838 <__umoddi3+0x228>
   8b834:	24c9883a 	add	r4,r4,r19
   8b838:	20a1c83a 	sub	r16,r4,r2
   8b83c:	b00b883a 	mov	r5,r22
   8b840:	8009883a 	mov	r4,r16
   8b844:	00818640 	call	81864 <__umodsi3>
   8b848:	1023883a 	mov	r17,r2
   8b84c:	b00b883a 	mov	r5,r22
   8b850:	8009883a 	mov	r4,r16
   8b854:	00818000 	call	81800 <__udivsi3>
   8b858:	8822943a 	slli	r17,r17,16
   8b85c:	1545383a 	mul	r2,r2,r21
   8b860:	a53fffcc 	andi	r20,r20,65535
   8b864:	a446b03a 	or	r3,r20,r17
   8b868:	18bfb02e 	bgeu	r3,r2,8b72c <__alt_data_end+0xfffa9cac>
   8b86c:	003fab06 	br	8b71c <__alt_data_end+0xfffa9c9c>
   8b870:	2005883a 	mov	r2,r4
   8b874:	2807883a 	mov	r3,r5
   8b878:	dfc00b17 	ldw	ra,44(sp)
   8b87c:	df000a17 	ldw	fp,40(sp)
   8b880:	ddc00917 	ldw	r23,36(sp)
   8b884:	dd800817 	ldw	r22,32(sp)
   8b888:	dd400717 	ldw	r21,28(sp)
   8b88c:	dd000617 	ldw	r20,24(sp)
   8b890:	dcc00517 	ldw	r19,20(sp)
   8b894:	dc800417 	ldw	r18,16(sp)
   8b898:	dc400317 	ldw	r17,12(sp)
   8b89c:	dc000217 	ldw	r16,8(sp)
   8b8a0:	dec00c04 	addi	sp,sp,48
   8b8a4:	f800283a 	ret
   8b8a8:	04c03fc4 	movi	r19,255
   8b8ac:	99c9803a 	cmpltu	r4,r19,r7
   8b8b0:	200890fa 	slli	r4,r4,3
   8b8b4:	003fa806 	br	8b758 <__alt_data_end+0xfffa9cd8>
   8b8b8:	00803fc4 	movi	r2,255
   8b8bc:	14c5803a 	cmpltu	r2,r2,r19
   8b8c0:	100490fa 	slli	r2,r2,3
   8b8c4:	003fc006 	br	8b7c8 <__alt_data_end+0xfffa9d48>
   8b8c8:	00804034 	movhi	r2,256
   8b8cc:	10bfffc4 	addi	r2,r2,-1
   8b8d0:	11808b36 	bltu	r2,r6,8bb00 <__umoddi3+0x4f0>
   8b8d4:	01000404 	movi	r4,16
   8b8d8:	003f6406 	br	8b66c <__alt_data_end+0xfffa9bec>
   8b8dc:	34c4d83a 	srl	r2,r6,r19
   8b8e0:	3d0e983a 	sll	r7,r7,r20
   8b8e4:	8cf8d83a 	srl	fp,r17,r19
   8b8e8:	8d10983a 	sll	r8,r17,r20
   8b8ec:	38aab03a 	or	r21,r7,r2
   8b8f0:	a82cd43a 	srli	r22,r21,16
   8b8f4:	84e2d83a 	srl	r17,r16,r19
   8b8f8:	e009883a 	mov	r4,fp
   8b8fc:	b00b883a 	mov	r5,r22
   8b900:	8a22b03a 	or	r17,r17,r8
   8b904:	3524983a 	sll	r18,r6,r20
   8b908:	00818640 	call	81864 <__umodsi3>
   8b90c:	e009883a 	mov	r4,fp
   8b910:	b00b883a 	mov	r5,r22
   8b914:	102f883a 	mov	r23,r2
   8b918:	00818000 	call	81800 <__udivsi3>
   8b91c:	100d883a 	mov	r6,r2
   8b920:	b808943a 	slli	r4,r23,16
   8b924:	aa3fffcc 	andi	r8,r21,65535
   8b928:	8804d43a 	srli	r2,r17,16
   8b92c:	41af383a 	mul	r23,r8,r6
   8b930:	8520983a 	sll	r16,r16,r20
   8b934:	1104b03a 	or	r2,r2,r4
   8b938:	15c0042e 	bgeu	r2,r23,8b94c <__umoddi3+0x33c>
   8b93c:	1545883a 	add	r2,r2,r21
   8b940:	30ffffc4 	addi	r3,r6,-1
   8b944:	1540742e 	bgeu	r2,r21,8bb18 <__umoddi3+0x508>
   8b948:	180d883a 	mov	r6,r3
   8b94c:	15efc83a 	sub	r23,r2,r23
   8b950:	b00b883a 	mov	r5,r22
   8b954:	b809883a 	mov	r4,r23
   8b958:	d9800115 	stw	r6,4(sp)
   8b95c:	da000015 	stw	r8,0(sp)
   8b960:	00818640 	call	81864 <__umodsi3>
   8b964:	b00b883a 	mov	r5,r22
   8b968:	b809883a 	mov	r4,r23
   8b96c:	1039883a 	mov	fp,r2
   8b970:	00818000 	call	81800 <__udivsi3>
   8b974:	da000017 	ldw	r8,0(sp)
   8b978:	e038943a 	slli	fp,fp,16
   8b97c:	100b883a 	mov	r5,r2
   8b980:	4089383a 	mul	r4,r8,r2
   8b984:	8a3fffcc 	andi	r8,r17,65535
   8b988:	4710b03a 	or	r8,r8,fp
   8b98c:	d9800117 	ldw	r6,4(sp)
   8b990:	4100042e 	bgeu	r8,r4,8b9a4 <__umoddi3+0x394>
   8b994:	4551883a 	add	r8,r8,r21
   8b998:	10bfffc4 	addi	r2,r2,-1
   8b99c:	45405a2e 	bgeu	r8,r21,8bb08 <__umoddi3+0x4f8>
   8b9a0:	100b883a 	mov	r5,r2
   8b9a4:	300c943a 	slli	r6,r6,16
   8b9a8:	91ffffcc 	andi	r7,r18,65535
   8b9ac:	9004d43a 	srli	r2,r18,16
   8b9b0:	314cb03a 	or	r6,r6,r5
   8b9b4:	317fffcc 	andi	r5,r6,65535
   8b9b8:	300cd43a 	srli	r6,r6,16
   8b9bc:	29d3383a 	mul	r9,r5,r7
   8b9c0:	288b383a 	mul	r5,r5,r2
   8b9c4:	31cf383a 	mul	r7,r6,r7
   8b9c8:	4806d43a 	srli	r3,r9,16
   8b9cc:	4111c83a 	sub	r8,r8,r4
   8b9d0:	29cb883a 	add	r5,r5,r7
   8b9d4:	194b883a 	add	r5,r3,r5
   8b9d8:	3085383a 	mul	r2,r6,r2
   8b9dc:	29c0022e 	bgeu	r5,r7,8b9e8 <__umoddi3+0x3d8>
   8b9e0:	00c00074 	movhi	r3,1
   8b9e4:	10c5883a 	add	r2,r2,r3
   8b9e8:	2808d43a 	srli	r4,r5,16
   8b9ec:	280a943a 	slli	r5,r5,16
   8b9f0:	4a7fffcc 	andi	r9,r9,65535
   8b9f4:	2085883a 	add	r2,r4,r2
   8b9f8:	2a4b883a 	add	r5,r5,r9
   8b9fc:	40803636 	bltu	r8,r2,8bad8 <__umoddi3+0x4c8>
   8ba00:	40804d26 	beq	r8,r2,8bb38 <__umoddi3+0x528>
   8ba04:	4089c83a 	sub	r4,r8,r2
   8ba08:	280f883a 	mov	r7,r5
   8ba0c:	81cfc83a 	sub	r7,r16,r7
   8ba10:	81c7803a 	cmpltu	r3,r16,r7
   8ba14:	20c7c83a 	sub	r3,r4,r3
   8ba18:	1cc4983a 	sll	r2,r3,r19
   8ba1c:	3d0ed83a 	srl	r7,r7,r20
   8ba20:	1d06d83a 	srl	r3,r3,r20
   8ba24:	11c4b03a 	or	r2,r2,r7
   8ba28:	003f9306 	br	8b878 <__alt_data_end+0xfffa9df8>
   8ba2c:	9ca6983a 	sll	r19,r19,r18
   8ba30:	88e8d83a 	srl	r20,r17,r3
   8ba34:	80c4d83a 	srl	r2,r16,r3
   8ba38:	982cd43a 	srli	r22,r19,16
   8ba3c:	8ca2983a 	sll	r17,r17,r18
   8ba40:	a009883a 	mov	r4,r20
   8ba44:	b00b883a 	mov	r5,r22
   8ba48:	1478b03a 	or	fp,r2,r17
   8ba4c:	00818640 	call	81864 <__umodsi3>
   8ba50:	a009883a 	mov	r4,r20
   8ba54:	b00b883a 	mov	r5,r22
   8ba58:	1023883a 	mov	r17,r2
   8ba5c:	00818000 	call	81800 <__udivsi3>
   8ba60:	9d7fffcc 	andi	r21,r19,65535
   8ba64:	880a943a 	slli	r5,r17,16
   8ba68:	e008d43a 	srli	r4,fp,16
   8ba6c:	a885383a 	mul	r2,r21,r2
   8ba70:	84a8983a 	sll	r20,r16,r18
   8ba74:	2148b03a 	or	r4,r4,r5
   8ba78:	2080042e 	bgeu	r4,r2,8ba8c <__umoddi3+0x47c>
   8ba7c:	24c9883a 	add	r4,r4,r19
   8ba80:	24c00236 	bltu	r4,r19,8ba8c <__umoddi3+0x47c>
   8ba84:	2080012e 	bgeu	r4,r2,8ba8c <__umoddi3+0x47c>
   8ba88:	24c9883a 	add	r4,r4,r19
   8ba8c:	20a3c83a 	sub	r17,r4,r2
   8ba90:	b00b883a 	mov	r5,r22
   8ba94:	8809883a 	mov	r4,r17
   8ba98:	00818640 	call	81864 <__umodsi3>
   8ba9c:	102f883a 	mov	r23,r2
   8baa0:	8809883a 	mov	r4,r17
   8baa4:	b00b883a 	mov	r5,r22
   8baa8:	00818000 	call	81800 <__udivsi3>
   8baac:	b82e943a 	slli	r23,r23,16
   8bab0:	a885383a 	mul	r2,r21,r2
   8bab4:	e13fffcc 	andi	r4,fp,65535
   8bab8:	25c8b03a 	or	r4,r4,r23
   8babc:	2080042e 	bgeu	r4,r2,8bad0 <__umoddi3+0x4c0>
   8bac0:	24c9883a 	add	r4,r4,r19
   8bac4:	24c00236 	bltu	r4,r19,8bad0 <__umoddi3+0x4c0>
   8bac8:	2080012e 	bgeu	r4,r2,8bad0 <__umoddi3+0x4c0>
   8bacc:	24c9883a 	add	r4,r4,r19
   8bad0:	20a3c83a 	sub	r17,r4,r2
   8bad4:	003f4806 	br	8b7f8 <__alt_data_end+0xfffa9d78>
   8bad8:	2c8fc83a 	sub	r7,r5,r18
   8badc:	1545c83a 	sub	r2,r2,r21
   8bae0:	29cb803a 	cmpltu	r5,r5,r7
   8bae4:	1145c83a 	sub	r2,r2,r5
   8bae8:	4089c83a 	sub	r4,r8,r2
   8baec:	003fc706 	br	8ba0c <__alt_data_end+0xfffa9f8c>
   8baf0:	01000604 	movi	r4,24
   8baf4:	003f1806 	br	8b758 <__alt_data_end+0xfffa9cd8>
   8baf8:	00800604 	movi	r2,24
   8bafc:	003f3206 	br	8b7c8 <__alt_data_end+0xfffa9d48>
   8bb00:	01000604 	movi	r4,24
   8bb04:	003ed906 	br	8b66c <__alt_data_end+0xfffa9bec>
   8bb08:	413fa52e 	bgeu	r8,r4,8b9a0 <__alt_data_end+0xfffa9f20>
   8bb0c:	297fff84 	addi	r5,r5,-2
   8bb10:	4551883a 	add	r8,r8,r21
   8bb14:	003fa306 	br	8b9a4 <__alt_data_end+0xfffa9f24>
   8bb18:	15ff8b2e 	bgeu	r2,r23,8b948 <__alt_data_end+0xfffa9ec8>
   8bb1c:	31bfff84 	addi	r6,r6,-2
   8bb20:	1545883a 	add	r2,r2,r21
   8bb24:	003f8906 	br	8b94c <__alt_data_end+0xfffa9ecc>
   8bb28:	24c9883a 	add	r4,r4,r19
   8bb2c:	003eee06 	br	8b6e8 <__alt_data_end+0xfffa9c68>
   8bb30:	8005883a 	mov	r2,r16
   8bb34:	003f1706 	br	8b794 <__alt_data_end+0xfffa9d14>
   8bb38:	817fe736 	bltu	r16,r5,8bad8 <__alt_data_end+0xfffaa058>
   8bb3c:	280f883a 	mov	r7,r5
   8bb40:	0009883a 	mov	r4,zero
   8bb44:	003fb106 	br	8ba0c <__alt_data_end+0xfffa9f8c>

0008bb48 <__adddf3>:
   8bb48:	02c00434 	movhi	r11,16
   8bb4c:	5affffc4 	addi	r11,r11,-1
   8bb50:	2806d7fa 	srli	r3,r5,31
   8bb54:	2ad4703a 	and	r10,r5,r11
   8bb58:	3ad2703a 	and	r9,r7,r11
   8bb5c:	3804d53a 	srli	r2,r7,20
   8bb60:	3018d77a 	srli	r12,r6,29
   8bb64:	280ad53a 	srli	r5,r5,20
   8bb68:	501490fa 	slli	r10,r10,3
   8bb6c:	2010d77a 	srli	r8,r4,29
   8bb70:	481290fa 	slli	r9,r9,3
   8bb74:	380ed7fa 	srli	r7,r7,31
   8bb78:	defffb04 	addi	sp,sp,-20
   8bb7c:	dc800215 	stw	r18,8(sp)
   8bb80:	dc400115 	stw	r17,4(sp)
   8bb84:	dc000015 	stw	r16,0(sp)
   8bb88:	dfc00415 	stw	ra,16(sp)
   8bb8c:	dcc00315 	stw	r19,12(sp)
   8bb90:	1c803fcc 	andi	r18,r3,255
   8bb94:	2c01ffcc 	andi	r16,r5,2047
   8bb98:	5210b03a 	or	r8,r10,r8
   8bb9c:	202290fa 	slli	r17,r4,3
   8bba0:	1081ffcc 	andi	r2,r2,2047
   8bba4:	4b12b03a 	or	r9,r9,r12
   8bba8:	300c90fa 	slli	r6,r6,3
   8bbac:	91c07526 	beq	r18,r7,8bd84 <__adddf3+0x23c>
   8bbb0:	8087c83a 	sub	r3,r16,r2
   8bbb4:	00c0ab0e 	bge	zero,r3,8be64 <__adddf3+0x31c>
   8bbb8:	10002a1e 	bne	r2,zero,8bc64 <__adddf3+0x11c>
   8bbbc:	4984b03a 	or	r2,r9,r6
   8bbc0:	1000961e 	bne	r2,zero,8be1c <__adddf3+0x2d4>
   8bbc4:	888001cc 	andi	r2,r17,7
   8bbc8:	10000726 	beq	r2,zero,8bbe8 <__adddf3+0xa0>
   8bbcc:	888003cc 	andi	r2,r17,15
   8bbd0:	00c00104 	movi	r3,4
   8bbd4:	10c00426 	beq	r2,r3,8bbe8 <__adddf3+0xa0>
   8bbd8:	88c7883a 	add	r3,r17,r3
   8bbdc:	1c63803a 	cmpltu	r17,r3,r17
   8bbe0:	4451883a 	add	r8,r8,r17
   8bbe4:	1823883a 	mov	r17,r3
   8bbe8:	4080202c 	andhi	r2,r8,128
   8bbec:	10005926 	beq	r2,zero,8bd54 <__adddf3+0x20c>
   8bbf0:	84000044 	addi	r16,r16,1
   8bbf4:	0081ffc4 	movi	r2,2047
   8bbf8:	8080ba26 	beq	r16,r2,8bee4 <__adddf3+0x39c>
   8bbfc:	00bfe034 	movhi	r2,65408
   8bc00:	10bfffc4 	addi	r2,r2,-1
   8bc04:	4090703a 	and	r8,r8,r2
   8bc08:	4004977a 	slli	r2,r8,29
   8bc0c:	4010927a 	slli	r8,r8,9
   8bc10:	8822d0fa 	srli	r17,r17,3
   8bc14:	8401ffcc 	andi	r16,r16,2047
   8bc18:	4010d33a 	srli	r8,r8,12
   8bc1c:	9007883a 	mov	r3,r18
   8bc20:	1444b03a 	or	r2,r2,r17
   8bc24:	8401ffcc 	andi	r16,r16,2047
   8bc28:	8020953a 	slli	r16,r16,20
   8bc2c:	18c03fcc 	andi	r3,r3,255
   8bc30:	01000434 	movhi	r4,16
   8bc34:	213fffc4 	addi	r4,r4,-1
   8bc38:	180697fa 	slli	r3,r3,31
   8bc3c:	4110703a 	and	r8,r8,r4
   8bc40:	4410b03a 	or	r8,r8,r16
   8bc44:	40c6b03a 	or	r3,r8,r3
   8bc48:	dfc00417 	ldw	ra,16(sp)
   8bc4c:	dcc00317 	ldw	r19,12(sp)
   8bc50:	dc800217 	ldw	r18,8(sp)
   8bc54:	dc400117 	ldw	r17,4(sp)
   8bc58:	dc000017 	ldw	r16,0(sp)
   8bc5c:	dec00504 	addi	sp,sp,20
   8bc60:	f800283a 	ret
   8bc64:	0081ffc4 	movi	r2,2047
   8bc68:	80bfd626 	beq	r16,r2,8bbc4 <__alt_data_end+0xfffaa144>
   8bc6c:	4a402034 	orhi	r9,r9,128
   8bc70:	00800e04 	movi	r2,56
   8bc74:	10c09f16 	blt	r2,r3,8bef4 <__adddf3+0x3ac>
   8bc78:	008007c4 	movi	r2,31
   8bc7c:	10c0c216 	blt	r2,r3,8bf88 <__adddf3+0x440>
   8bc80:	00800804 	movi	r2,32
   8bc84:	10c5c83a 	sub	r2,r2,r3
   8bc88:	488a983a 	sll	r5,r9,r2
   8bc8c:	30c8d83a 	srl	r4,r6,r3
   8bc90:	3084983a 	sll	r2,r6,r2
   8bc94:	48c6d83a 	srl	r3,r9,r3
   8bc98:	290cb03a 	or	r6,r5,r4
   8bc9c:	1004c03a 	cmpne	r2,r2,zero
   8bca0:	308cb03a 	or	r6,r6,r2
   8bca4:	898dc83a 	sub	r6,r17,r6
   8bca8:	89a3803a 	cmpltu	r17,r17,r6
   8bcac:	40d1c83a 	sub	r8,r8,r3
   8bcb0:	4451c83a 	sub	r8,r8,r17
   8bcb4:	3023883a 	mov	r17,r6
   8bcb8:	4080202c 	andhi	r2,r8,128
   8bcbc:	10002326 	beq	r2,zero,8bd4c <__adddf3+0x204>
   8bcc0:	04c02034 	movhi	r19,128
   8bcc4:	9cffffc4 	addi	r19,r19,-1
   8bcc8:	44e6703a 	and	r19,r8,r19
   8bccc:	98007626 	beq	r19,zero,8bea8 <__adddf3+0x360>
   8bcd0:	9809883a 	mov	r4,r19
   8bcd4:	008e14c0 	call	8e14c <__clzsi2>
   8bcd8:	10fffe04 	addi	r3,r2,-8
   8bcdc:	010007c4 	movi	r4,31
   8bce0:	20c07716 	blt	r4,r3,8bec0 <__adddf3+0x378>
   8bce4:	00800804 	movi	r2,32
   8bce8:	10c5c83a 	sub	r2,r2,r3
   8bcec:	8884d83a 	srl	r2,r17,r2
   8bcf0:	98d0983a 	sll	r8,r19,r3
   8bcf4:	88e2983a 	sll	r17,r17,r3
   8bcf8:	1204b03a 	or	r2,r2,r8
   8bcfc:	1c007416 	blt	r3,r16,8bed0 <__adddf3+0x388>
   8bd00:	1c21c83a 	sub	r16,r3,r16
   8bd04:	82000044 	addi	r8,r16,1
   8bd08:	00c007c4 	movi	r3,31
   8bd0c:	1a009116 	blt	r3,r8,8bf54 <__adddf3+0x40c>
   8bd10:	00c00804 	movi	r3,32
   8bd14:	1a07c83a 	sub	r3,r3,r8
   8bd18:	8a08d83a 	srl	r4,r17,r8
   8bd1c:	88e2983a 	sll	r17,r17,r3
   8bd20:	10c6983a 	sll	r3,r2,r3
   8bd24:	1210d83a 	srl	r8,r2,r8
   8bd28:	8804c03a 	cmpne	r2,r17,zero
   8bd2c:	1906b03a 	or	r3,r3,r4
   8bd30:	18a2b03a 	or	r17,r3,r2
   8bd34:	0021883a 	mov	r16,zero
   8bd38:	003fa206 	br	8bbc4 <__alt_data_end+0xfffaa144>
   8bd3c:	1890b03a 	or	r8,r3,r2
   8bd40:	40017d26 	beq	r8,zero,8c338 <__adddf3+0x7f0>
   8bd44:	1011883a 	mov	r8,r2
   8bd48:	1823883a 	mov	r17,r3
   8bd4c:	888001cc 	andi	r2,r17,7
   8bd50:	103f9e1e 	bne	r2,zero,8bbcc <__alt_data_end+0xfffaa14c>
   8bd54:	4004977a 	slli	r2,r8,29
   8bd58:	8822d0fa 	srli	r17,r17,3
   8bd5c:	4010d0fa 	srli	r8,r8,3
   8bd60:	9007883a 	mov	r3,r18
   8bd64:	1444b03a 	or	r2,r2,r17
   8bd68:	0101ffc4 	movi	r4,2047
   8bd6c:	81002426 	beq	r16,r4,8be00 <__adddf3+0x2b8>
   8bd70:	8120703a 	and	r16,r16,r4
   8bd74:	01000434 	movhi	r4,16
   8bd78:	213fffc4 	addi	r4,r4,-1
   8bd7c:	4110703a 	and	r8,r8,r4
   8bd80:	003fa806 	br	8bc24 <__alt_data_end+0xfffaa1a4>
   8bd84:	8089c83a 	sub	r4,r16,r2
   8bd88:	01005e0e 	bge	zero,r4,8bf04 <__adddf3+0x3bc>
   8bd8c:	10002b26 	beq	r2,zero,8be3c <__adddf3+0x2f4>
   8bd90:	0081ffc4 	movi	r2,2047
   8bd94:	80bf8b26 	beq	r16,r2,8bbc4 <__alt_data_end+0xfffaa144>
   8bd98:	4a402034 	orhi	r9,r9,128
   8bd9c:	00800e04 	movi	r2,56
   8bda0:	1100a40e 	bge	r2,r4,8c034 <__adddf3+0x4ec>
   8bda4:	498cb03a 	or	r6,r9,r6
   8bda8:	300ac03a 	cmpne	r5,r6,zero
   8bdac:	0013883a 	mov	r9,zero
   8bdb0:	2c4b883a 	add	r5,r5,r17
   8bdb4:	2c63803a 	cmpltu	r17,r5,r17
   8bdb8:	4a11883a 	add	r8,r9,r8
   8bdbc:	8a11883a 	add	r8,r17,r8
   8bdc0:	2823883a 	mov	r17,r5
   8bdc4:	4080202c 	andhi	r2,r8,128
   8bdc8:	103fe026 	beq	r2,zero,8bd4c <__alt_data_end+0xfffaa2cc>
   8bdcc:	84000044 	addi	r16,r16,1
   8bdd0:	0081ffc4 	movi	r2,2047
   8bdd4:	8080d226 	beq	r16,r2,8c120 <__adddf3+0x5d8>
   8bdd8:	00bfe034 	movhi	r2,65408
   8bddc:	10bfffc4 	addi	r2,r2,-1
   8bde0:	4090703a 	and	r8,r8,r2
   8bde4:	880ad07a 	srli	r5,r17,1
   8bde8:	400897fa 	slli	r4,r8,31
   8bdec:	88c0004c 	andi	r3,r17,1
   8bdf0:	28e2b03a 	or	r17,r5,r3
   8bdf4:	4010d07a 	srli	r8,r8,1
   8bdf8:	2462b03a 	or	r17,r4,r17
   8bdfc:	003f7106 	br	8bbc4 <__alt_data_end+0xfffaa144>
   8be00:	4088b03a 	or	r4,r8,r2
   8be04:	20014526 	beq	r4,zero,8c31c <__adddf3+0x7d4>
   8be08:	01000434 	movhi	r4,16
   8be0c:	42000234 	orhi	r8,r8,8
   8be10:	213fffc4 	addi	r4,r4,-1
   8be14:	4110703a 	and	r8,r8,r4
   8be18:	003f8206 	br	8bc24 <__alt_data_end+0xfffaa1a4>
   8be1c:	18ffffc4 	addi	r3,r3,-1
   8be20:	1800491e 	bne	r3,zero,8bf48 <__adddf3+0x400>
   8be24:	898bc83a 	sub	r5,r17,r6
   8be28:	8963803a 	cmpltu	r17,r17,r5
   8be2c:	4251c83a 	sub	r8,r8,r9
   8be30:	4451c83a 	sub	r8,r8,r17
   8be34:	2823883a 	mov	r17,r5
   8be38:	003f9f06 	br	8bcb8 <__alt_data_end+0xfffaa238>
   8be3c:	4984b03a 	or	r2,r9,r6
   8be40:	103f6026 	beq	r2,zero,8bbc4 <__alt_data_end+0xfffaa144>
   8be44:	213fffc4 	addi	r4,r4,-1
   8be48:	2000931e 	bne	r4,zero,8c098 <__adddf3+0x550>
   8be4c:	898d883a 	add	r6,r17,r6
   8be50:	3463803a 	cmpltu	r17,r6,r17
   8be54:	4251883a 	add	r8,r8,r9
   8be58:	8a11883a 	add	r8,r17,r8
   8be5c:	3023883a 	mov	r17,r6
   8be60:	003fd806 	br	8bdc4 <__alt_data_end+0xfffaa344>
   8be64:	1800541e 	bne	r3,zero,8bfb8 <__adddf3+0x470>
   8be68:	80800044 	addi	r2,r16,1
   8be6c:	1081ffcc 	andi	r2,r2,2047
   8be70:	00c00044 	movi	r3,1
   8be74:	1880a00e 	bge	r3,r2,8c0f8 <__adddf3+0x5b0>
   8be78:	8989c83a 	sub	r4,r17,r6
   8be7c:	8905803a 	cmpltu	r2,r17,r4
   8be80:	4267c83a 	sub	r19,r8,r9
   8be84:	98a7c83a 	sub	r19,r19,r2
   8be88:	9880202c 	andhi	r2,r19,128
   8be8c:	10006326 	beq	r2,zero,8c01c <__adddf3+0x4d4>
   8be90:	3463c83a 	sub	r17,r6,r17
   8be94:	4a07c83a 	sub	r3,r9,r8
   8be98:	344d803a 	cmpltu	r6,r6,r17
   8be9c:	19a7c83a 	sub	r19,r3,r6
   8bea0:	3825883a 	mov	r18,r7
   8bea4:	983f8a1e 	bne	r19,zero,8bcd0 <__alt_data_end+0xfffaa250>
   8bea8:	8809883a 	mov	r4,r17
   8beac:	008e14c0 	call	8e14c <__clzsi2>
   8beb0:	10800804 	addi	r2,r2,32
   8beb4:	10fffe04 	addi	r3,r2,-8
   8beb8:	010007c4 	movi	r4,31
   8bebc:	20ff890e 	bge	r4,r3,8bce4 <__alt_data_end+0xfffaa264>
   8bec0:	10bff604 	addi	r2,r2,-40
   8bec4:	8884983a 	sll	r2,r17,r2
   8bec8:	0023883a 	mov	r17,zero
   8becc:	1c3f8c0e 	bge	r3,r16,8bd00 <__alt_data_end+0xfffaa280>
   8bed0:	023fe034 	movhi	r8,65408
   8bed4:	423fffc4 	addi	r8,r8,-1
   8bed8:	80e1c83a 	sub	r16,r16,r3
   8bedc:	1210703a 	and	r8,r2,r8
   8bee0:	003f3806 	br	8bbc4 <__alt_data_end+0xfffaa144>
   8bee4:	9007883a 	mov	r3,r18
   8bee8:	0011883a 	mov	r8,zero
   8beec:	0005883a 	mov	r2,zero
   8bef0:	003f4c06 	br	8bc24 <__alt_data_end+0xfffaa1a4>
   8bef4:	498cb03a 	or	r6,r9,r6
   8bef8:	300cc03a 	cmpne	r6,r6,zero
   8befc:	0007883a 	mov	r3,zero
   8bf00:	003f6806 	br	8bca4 <__alt_data_end+0xfffaa224>
   8bf04:	20009c1e 	bne	r4,zero,8c178 <__adddf3+0x630>
   8bf08:	80800044 	addi	r2,r16,1
   8bf0c:	1141ffcc 	andi	r5,r2,2047
   8bf10:	01000044 	movi	r4,1
   8bf14:	2140670e 	bge	r4,r5,8c0b4 <__adddf3+0x56c>
   8bf18:	0101ffc4 	movi	r4,2047
   8bf1c:	11007f26 	beq	r2,r4,8c11c <__adddf3+0x5d4>
   8bf20:	898d883a 	add	r6,r17,r6
   8bf24:	4247883a 	add	r3,r8,r9
   8bf28:	3451803a 	cmpltu	r8,r6,r17
   8bf2c:	40d1883a 	add	r8,r8,r3
   8bf30:	402297fa 	slli	r17,r8,31
   8bf34:	300cd07a 	srli	r6,r6,1
   8bf38:	4010d07a 	srli	r8,r8,1
   8bf3c:	1021883a 	mov	r16,r2
   8bf40:	89a2b03a 	or	r17,r17,r6
   8bf44:	003f1f06 	br	8bbc4 <__alt_data_end+0xfffaa144>
   8bf48:	0081ffc4 	movi	r2,2047
   8bf4c:	80bf481e 	bne	r16,r2,8bc70 <__alt_data_end+0xfffaa1f0>
   8bf50:	003f1c06 	br	8bbc4 <__alt_data_end+0xfffaa144>
   8bf54:	843ff844 	addi	r16,r16,-31
   8bf58:	01000804 	movi	r4,32
   8bf5c:	1406d83a 	srl	r3,r2,r16
   8bf60:	41005026 	beq	r8,r4,8c0a4 <__adddf3+0x55c>
   8bf64:	01001004 	movi	r4,64
   8bf68:	2211c83a 	sub	r8,r4,r8
   8bf6c:	1204983a 	sll	r2,r2,r8
   8bf70:	88a2b03a 	or	r17,r17,r2
   8bf74:	8822c03a 	cmpne	r17,r17,zero
   8bf78:	1c62b03a 	or	r17,r3,r17
   8bf7c:	0011883a 	mov	r8,zero
   8bf80:	0021883a 	mov	r16,zero
   8bf84:	003f7106 	br	8bd4c <__alt_data_end+0xfffaa2cc>
   8bf88:	193ff804 	addi	r4,r3,-32
   8bf8c:	00800804 	movi	r2,32
   8bf90:	4908d83a 	srl	r4,r9,r4
   8bf94:	18804526 	beq	r3,r2,8c0ac <__adddf3+0x564>
   8bf98:	00801004 	movi	r2,64
   8bf9c:	10c5c83a 	sub	r2,r2,r3
   8bfa0:	4886983a 	sll	r3,r9,r2
   8bfa4:	198cb03a 	or	r6,r3,r6
   8bfa8:	300cc03a 	cmpne	r6,r6,zero
   8bfac:	218cb03a 	or	r6,r4,r6
   8bfb0:	0007883a 	mov	r3,zero
   8bfb4:	003f3b06 	br	8bca4 <__alt_data_end+0xfffaa224>
   8bfb8:	80002a26 	beq	r16,zero,8c064 <__adddf3+0x51c>
   8bfbc:	0101ffc4 	movi	r4,2047
   8bfc0:	11006826 	beq	r2,r4,8c164 <__adddf3+0x61c>
   8bfc4:	00c7c83a 	sub	r3,zero,r3
   8bfc8:	42002034 	orhi	r8,r8,128
   8bfcc:	01000e04 	movi	r4,56
   8bfd0:	20c07c16 	blt	r4,r3,8c1c4 <__adddf3+0x67c>
   8bfd4:	010007c4 	movi	r4,31
   8bfd8:	20c0da16 	blt	r4,r3,8c344 <__adddf3+0x7fc>
   8bfdc:	01000804 	movi	r4,32
   8bfe0:	20c9c83a 	sub	r4,r4,r3
   8bfe4:	4114983a 	sll	r10,r8,r4
   8bfe8:	88cad83a 	srl	r5,r17,r3
   8bfec:	8908983a 	sll	r4,r17,r4
   8bff0:	40c6d83a 	srl	r3,r8,r3
   8bff4:	5162b03a 	or	r17,r10,r5
   8bff8:	2008c03a 	cmpne	r4,r4,zero
   8bffc:	8922b03a 	or	r17,r17,r4
   8c000:	3463c83a 	sub	r17,r6,r17
   8c004:	48c7c83a 	sub	r3,r9,r3
   8c008:	344d803a 	cmpltu	r6,r6,r17
   8c00c:	1991c83a 	sub	r8,r3,r6
   8c010:	1021883a 	mov	r16,r2
   8c014:	3825883a 	mov	r18,r7
   8c018:	003f2706 	br	8bcb8 <__alt_data_end+0xfffaa238>
   8c01c:	24d0b03a 	or	r8,r4,r19
   8c020:	40001b1e 	bne	r8,zero,8c090 <__adddf3+0x548>
   8c024:	0005883a 	mov	r2,zero
   8c028:	0007883a 	mov	r3,zero
   8c02c:	0021883a 	mov	r16,zero
   8c030:	003f4d06 	br	8bd68 <__alt_data_end+0xfffaa2e8>
   8c034:	008007c4 	movi	r2,31
   8c038:	11003c16 	blt	r2,r4,8c12c <__adddf3+0x5e4>
   8c03c:	00800804 	movi	r2,32
   8c040:	1105c83a 	sub	r2,r2,r4
   8c044:	488e983a 	sll	r7,r9,r2
   8c048:	310ad83a 	srl	r5,r6,r4
   8c04c:	3084983a 	sll	r2,r6,r2
   8c050:	4912d83a 	srl	r9,r9,r4
   8c054:	394ab03a 	or	r5,r7,r5
   8c058:	1004c03a 	cmpne	r2,r2,zero
   8c05c:	288ab03a 	or	r5,r5,r2
   8c060:	003f5306 	br	8bdb0 <__alt_data_end+0xfffaa330>
   8c064:	4448b03a 	or	r4,r8,r17
   8c068:	20003e26 	beq	r4,zero,8c164 <__adddf3+0x61c>
   8c06c:	00c6303a 	nor	r3,zero,r3
   8c070:	18003a1e 	bne	r3,zero,8c15c <__adddf3+0x614>
   8c074:	3463c83a 	sub	r17,r6,r17
   8c078:	4a07c83a 	sub	r3,r9,r8
   8c07c:	344d803a 	cmpltu	r6,r6,r17
   8c080:	1991c83a 	sub	r8,r3,r6
   8c084:	1021883a 	mov	r16,r2
   8c088:	3825883a 	mov	r18,r7
   8c08c:	003f0a06 	br	8bcb8 <__alt_data_end+0xfffaa238>
   8c090:	2023883a 	mov	r17,r4
   8c094:	003f0d06 	br	8bccc <__alt_data_end+0xfffaa24c>
   8c098:	0081ffc4 	movi	r2,2047
   8c09c:	80bf3f1e 	bne	r16,r2,8bd9c <__alt_data_end+0xfffaa31c>
   8c0a0:	003ec806 	br	8bbc4 <__alt_data_end+0xfffaa144>
   8c0a4:	0005883a 	mov	r2,zero
   8c0a8:	003fb106 	br	8bf70 <__alt_data_end+0xfffaa4f0>
   8c0ac:	0007883a 	mov	r3,zero
   8c0b0:	003fbc06 	br	8bfa4 <__alt_data_end+0xfffaa524>
   8c0b4:	4444b03a 	or	r2,r8,r17
   8c0b8:	8000871e 	bne	r16,zero,8c2d8 <__adddf3+0x790>
   8c0bc:	1000ba26 	beq	r2,zero,8c3a8 <__adddf3+0x860>
   8c0c0:	4984b03a 	or	r2,r9,r6
   8c0c4:	103ebf26 	beq	r2,zero,8bbc4 <__alt_data_end+0xfffaa144>
   8c0c8:	8985883a 	add	r2,r17,r6
   8c0cc:	4247883a 	add	r3,r8,r9
   8c0d0:	1451803a 	cmpltu	r8,r2,r17
   8c0d4:	40d1883a 	add	r8,r8,r3
   8c0d8:	40c0202c 	andhi	r3,r8,128
   8c0dc:	1023883a 	mov	r17,r2
   8c0e0:	183f1a26 	beq	r3,zero,8bd4c <__alt_data_end+0xfffaa2cc>
   8c0e4:	00bfe034 	movhi	r2,65408
   8c0e8:	10bfffc4 	addi	r2,r2,-1
   8c0ec:	2021883a 	mov	r16,r4
   8c0f0:	4090703a 	and	r8,r8,r2
   8c0f4:	003eb306 	br	8bbc4 <__alt_data_end+0xfffaa144>
   8c0f8:	4444b03a 	or	r2,r8,r17
   8c0fc:	8000291e 	bne	r16,zero,8c1a4 <__adddf3+0x65c>
   8c100:	10004b1e 	bne	r2,zero,8c230 <__adddf3+0x6e8>
   8c104:	4990b03a 	or	r8,r9,r6
   8c108:	40008b26 	beq	r8,zero,8c338 <__adddf3+0x7f0>
   8c10c:	4811883a 	mov	r8,r9
   8c110:	3023883a 	mov	r17,r6
   8c114:	3825883a 	mov	r18,r7
   8c118:	003eaa06 	br	8bbc4 <__alt_data_end+0xfffaa144>
   8c11c:	1021883a 	mov	r16,r2
   8c120:	0011883a 	mov	r8,zero
   8c124:	0005883a 	mov	r2,zero
   8c128:	003f0f06 	br	8bd68 <__alt_data_end+0xfffaa2e8>
   8c12c:	217ff804 	addi	r5,r4,-32
   8c130:	00800804 	movi	r2,32
   8c134:	494ad83a 	srl	r5,r9,r5
   8c138:	20807d26 	beq	r4,r2,8c330 <__adddf3+0x7e8>
   8c13c:	00801004 	movi	r2,64
   8c140:	1109c83a 	sub	r4,r2,r4
   8c144:	4912983a 	sll	r9,r9,r4
   8c148:	498cb03a 	or	r6,r9,r6
   8c14c:	300cc03a 	cmpne	r6,r6,zero
   8c150:	298ab03a 	or	r5,r5,r6
   8c154:	0013883a 	mov	r9,zero
   8c158:	003f1506 	br	8bdb0 <__alt_data_end+0xfffaa330>
   8c15c:	0101ffc4 	movi	r4,2047
   8c160:	113f9a1e 	bne	r2,r4,8bfcc <__alt_data_end+0xfffaa54c>
   8c164:	4811883a 	mov	r8,r9
   8c168:	3023883a 	mov	r17,r6
   8c16c:	1021883a 	mov	r16,r2
   8c170:	3825883a 	mov	r18,r7
   8c174:	003e9306 	br	8bbc4 <__alt_data_end+0xfffaa144>
   8c178:	8000161e 	bne	r16,zero,8c1d4 <__adddf3+0x68c>
   8c17c:	444ab03a 	or	r5,r8,r17
   8c180:	28005126 	beq	r5,zero,8c2c8 <__adddf3+0x780>
   8c184:	0108303a 	nor	r4,zero,r4
   8c188:	20004d1e 	bne	r4,zero,8c2c0 <__adddf3+0x778>
   8c18c:	89a3883a 	add	r17,r17,r6
   8c190:	4253883a 	add	r9,r8,r9
   8c194:	898d803a 	cmpltu	r6,r17,r6
   8c198:	3251883a 	add	r8,r6,r9
   8c19c:	1021883a 	mov	r16,r2
   8c1a0:	003f0806 	br	8bdc4 <__alt_data_end+0xfffaa344>
   8c1a4:	1000301e 	bne	r2,zero,8c268 <__adddf3+0x720>
   8c1a8:	4984b03a 	or	r2,r9,r6
   8c1ac:	10007126 	beq	r2,zero,8c374 <__adddf3+0x82c>
   8c1b0:	4811883a 	mov	r8,r9
   8c1b4:	3023883a 	mov	r17,r6
   8c1b8:	3825883a 	mov	r18,r7
   8c1bc:	0401ffc4 	movi	r16,2047
   8c1c0:	003e8006 	br	8bbc4 <__alt_data_end+0xfffaa144>
   8c1c4:	4462b03a 	or	r17,r8,r17
   8c1c8:	8822c03a 	cmpne	r17,r17,zero
   8c1cc:	0007883a 	mov	r3,zero
   8c1d0:	003f8b06 	br	8c000 <__alt_data_end+0xfffaa580>
   8c1d4:	0141ffc4 	movi	r5,2047
   8c1d8:	11403b26 	beq	r2,r5,8c2c8 <__adddf3+0x780>
   8c1dc:	0109c83a 	sub	r4,zero,r4
   8c1e0:	42002034 	orhi	r8,r8,128
   8c1e4:	01400e04 	movi	r5,56
   8c1e8:	29006716 	blt	r5,r4,8c388 <__adddf3+0x840>
   8c1ec:	014007c4 	movi	r5,31
   8c1f0:	29007016 	blt	r5,r4,8c3b4 <__adddf3+0x86c>
   8c1f4:	01400804 	movi	r5,32
   8c1f8:	290bc83a 	sub	r5,r5,r4
   8c1fc:	4154983a 	sll	r10,r8,r5
   8c200:	890ed83a 	srl	r7,r17,r4
   8c204:	894a983a 	sll	r5,r17,r5
   8c208:	4108d83a 	srl	r4,r8,r4
   8c20c:	51e2b03a 	or	r17,r10,r7
   8c210:	280ac03a 	cmpne	r5,r5,zero
   8c214:	8962b03a 	or	r17,r17,r5
   8c218:	89a3883a 	add	r17,r17,r6
   8c21c:	2253883a 	add	r9,r4,r9
   8c220:	898d803a 	cmpltu	r6,r17,r6
   8c224:	3251883a 	add	r8,r6,r9
   8c228:	1021883a 	mov	r16,r2
   8c22c:	003ee506 	br	8bdc4 <__alt_data_end+0xfffaa344>
   8c230:	4984b03a 	or	r2,r9,r6
   8c234:	103e6326 	beq	r2,zero,8bbc4 <__alt_data_end+0xfffaa144>
   8c238:	8987c83a 	sub	r3,r17,r6
   8c23c:	88c9803a 	cmpltu	r4,r17,r3
   8c240:	4245c83a 	sub	r2,r8,r9
   8c244:	1105c83a 	sub	r2,r2,r4
   8c248:	1100202c 	andhi	r4,r2,128
   8c24c:	203ebb26 	beq	r4,zero,8bd3c <__alt_data_end+0xfffaa2bc>
   8c250:	3463c83a 	sub	r17,r6,r17
   8c254:	4a07c83a 	sub	r3,r9,r8
   8c258:	344d803a 	cmpltu	r6,r6,r17
   8c25c:	1991c83a 	sub	r8,r3,r6
   8c260:	3825883a 	mov	r18,r7
   8c264:	003e5706 	br	8bbc4 <__alt_data_end+0xfffaa144>
   8c268:	4984b03a 	or	r2,r9,r6
   8c26c:	10002e26 	beq	r2,zero,8c328 <__adddf3+0x7e0>
   8c270:	4004d0fa 	srli	r2,r8,3
   8c274:	8822d0fa 	srli	r17,r17,3
   8c278:	4010977a 	slli	r8,r8,29
   8c27c:	10c0022c 	andhi	r3,r2,8
   8c280:	4462b03a 	or	r17,r8,r17
   8c284:	18000826 	beq	r3,zero,8c2a8 <__adddf3+0x760>
   8c288:	4808d0fa 	srli	r4,r9,3
   8c28c:	20c0022c 	andhi	r3,r4,8
   8c290:	1800051e 	bne	r3,zero,8c2a8 <__adddf3+0x760>
   8c294:	300cd0fa 	srli	r6,r6,3
   8c298:	4806977a 	slli	r3,r9,29
   8c29c:	2005883a 	mov	r2,r4
   8c2a0:	3825883a 	mov	r18,r7
   8c2a4:	19a2b03a 	or	r17,r3,r6
   8c2a8:	8810d77a 	srli	r8,r17,29
   8c2ac:	100490fa 	slli	r2,r2,3
   8c2b0:	882290fa 	slli	r17,r17,3
   8c2b4:	0401ffc4 	movi	r16,2047
   8c2b8:	4090b03a 	or	r8,r8,r2
   8c2bc:	003e4106 	br	8bbc4 <__alt_data_end+0xfffaa144>
   8c2c0:	0141ffc4 	movi	r5,2047
   8c2c4:	117fc71e 	bne	r2,r5,8c1e4 <__alt_data_end+0xfffaa764>
   8c2c8:	4811883a 	mov	r8,r9
   8c2cc:	3023883a 	mov	r17,r6
   8c2d0:	1021883a 	mov	r16,r2
   8c2d4:	003e3b06 	br	8bbc4 <__alt_data_end+0xfffaa144>
   8c2d8:	10002f26 	beq	r2,zero,8c398 <__adddf3+0x850>
   8c2dc:	4984b03a 	or	r2,r9,r6
   8c2e0:	10001126 	beq	r2,zero,8c328 <__adddf3+0x7e0>
   8c2e4:	4004d0fa 	srli	r2,r8,3
   8c2e8:	8822d0fa 	srli	r17,r17,3
   8c2ec:	4010977a 	slli	r8,r8,29
   8c2f0:	10c0022c 	andhi	r3,r2,8
   8c2f4:	4462b03a 	or	r17,r8,r17
   8c2f8:	183feb26 	beq	r3,zero,8c2a8 <__alt_data_end+0xfffaa828>
   8c2fc:	4808d0fa 	srli	r4,r9,3
   8c300:	20c0022c 	andhi	r3,r4,8
   8c304:	183fe81e 	bne	r3,zero,8c2a8 <__alt_data_end+0xfffaa828>
   8c308:	300cd0fa 	srli	r6,r6,3
   8c30c:	4806977a 	slli	r3,r9,29
   8c310:	2005883a 	mov	r2,r4
   8c314:	19a2b03a 	or	r17,r3,r6
   8c318:	003fe306 	br	8c2a8 <__alt_data_end+0xfffaa828>
   8c31c:	0011883a 	mov	r8,zero
   8c320:	0005883a 	mov	r2,zero
   8c324:	003e3f06 	br	8bc24 <__alt_data_end+0xfffaa1a4>
   8c328:	0401ffc4 	movi	r16,2047
   8c32c:	003e2506 	br	8bbc4 <__alt_data_end+0xfffaa144>
   8c330:	0013883a 	mov	r9,zero
   8c334:	003f8406 	br	8c148 <__alt_data_end+0xfffaa6c8>
   8c338:	0005883a 	mov	r2,zero
   8c33c:	0007883a 	mov	r3,zero
   8c340:	003e8906 	br	8bd68 <__alt_data_end+0xfffaa2e8>
   8c344:	197ff804 	addi	r5,r3,-32
   8c348:	01000804 	movi	r4,32
   8c34c:	414ad83a 	srl	r5,r8,r5
   8c350:	19002426 	beq	r3,r4,8c3e4 <__adddf3+0x89c>
   8c354:	01001004 	movi	r4,64
   8c358:	20c7c83a 	sub	r3,r4,r3
   8c35c:	40c6983a 	sll	r3,r8,r3
   8c360:	1c46b03a 	or	r3,r3,r17
   8c364:	1806c03a 	cmpne	r3,r3,zero
   8c368:	28e2b03a 	or	r17,r5,r3
   8c36c:	0007883a 	mov	r3,zero
   8c370:	003f2306 	br	8c000 <__alt_data_end+0xfffaa580>
   8c374:	0007883a 	mov	r3,zero
   8c378:	5811883a 	mov	r8,r11
   8c37c:	00bfffc4 	movi	r2,-1
   8c380:	0401ffc4 	movi	r16,2047
   8c384:	003e7806 	br	8bd68 <__alt_data_end+0xfffaa2e8>
   8c388:	4462b03a 	or	r17,r8,r17
   8c38c:	8822c03a 	cmpne	r17,r17,zero
   8c390:	0009883a 	mov	r4,zero
   8c394:	003fa006 	br	8c218 <__alt_data_end+0xfffaa798>
   8c398:	4811883a 	mov	r8,r9
   8c39c:	3023883a 	mov	r17,r6
   8c3a0:	0401ffc4 	movi	r16,2047
   8c3a4:	003e0706 	br	8bbc4 <__alt_data_end+0xfffaa144>
   8c3a8:	4811883a 	mov	r8,r9
   8c3ac:	3023883a 	mov	r17,r6
   8c3b0:	003e0406 	br	8bbc4 <__alt_data_end+0xfffaa144>
   8c3b4:	21fff804 	addi	r7,r4,-32
   8c3b8:	01400804 	movi	r5,32
   8c3bc:	41ced83a 	srl	r7,r8,r7
   8c3c0:	21400a26 	beq	r4,r5,8c3ec <__adddf3+0x8a4>
   8c3c4:	01401004 	movi	r5,64
   8c3c8:	2909c83a 	sub	r4,r5,r4
   8c3cc:	4108983a 	sll	r4,r8,r4
   8c3d0:	2448b03a 	or	r4,r4,r17
   8c3d4:	2008c03a 	cmpne	r4,r4,zero
   8c3d8:	3922b03a 	or	r17,r7,r4
   8c3dc:	0009883a 	mov	r4,zero
   8c3e0:	003f8d06 	br	8c218 <__alt_data_end+0xfffaa798>
   8c3e4:	0007883a 	mov	r3,zero
   8c3e8:	003fdd06 	br	8c360 <__alt_data_end+0xfffaa8e0>
   8c3ec:	0009883a 	mov	r4,zero
   8c3f0:	003ff706 	br	8c3d0 <__alt_data_end+0xfffaa950>

0008c3f4 <__divdf3>:
   8c3f4:	defff204 	addi	sp,sp,-56
   8c3f8:	dd400915 	stw	r21,36(sp)
   8c3fc:	282ad53a 	srli	r21,r5,20
   8c400:	dd000815 	stw	r20,32(sp)
   8c404:	2828d7fa 	srli	r20,r5,31
   8c408:	dc000415 	stw	r16,16(sp)
   8c40c:	04000434 	movhi	r16,16
   8c410:	df000c15 	stw	fp,48(sp)
   8c414:	843fffc4 	addi	r16,r16,-1
   8c418:	dfc00d15 	stw	ra,52(sp)
   8c41c:	ddc00b15 	stw	r23,44(sp)
   8c420:	dd800a15 	stw	r22,40(sp)
   8c424:	dcc00715 	stw	r19,28(sp)
   8c428:	dc800615 	stw	r18,24(sp)
   8c42c:	dc400515 	stw	r17,20(sp)
   8c430:	ad41ffcc 	andi	r21,r21,2047
   8c434:	2c20703a 	and	r16,r5,r16
   8c438:	a7003fcc 	andi	fp,r20,255
   8c43c:	a8006126 	beq	r21,zero,8c5c4 <__divdf3+0x1d0>
   8c440:	0081ffc4 	movi	r2,2047
   8c444:	2025883a 	mov	r18,r4
   8c448:	a8803726 	beq	r21,r2,8c528 <__divdf3+0x134>
   8c44c:	80800434 	orhi	r2,r16,16
   8c450:	100490fa 	slli	r2,r2,3
   8c454:	2020d77a 	srli	r16,r4,29
   8c458:	202490fa 	slli	r18,r4,3
   8c45c:	ad7f0044 	addi	r21,r21,-1023
   8c460:	80a0b03a 	or	r16,r16,r2
   8c464:	0027883a 	mov	r19,zero
   8c468:	0013883a 	mov	r9,zero
   8c46c:	3804d53a 	srli	r2,r7,20
   8c470:	382cd7fa 	srli	r22,r7,31
   8c474:	04400434 	movhi	r17,16
   8c478:	8c7fffc4 	addi	r17,r17,-1
   8c47c:	1081ffcc 	andi	r2,r2,2047
   8c480:	3011883a 	mov	r8,r6
   8c484:	3c62703a 	and	r17,r7,r17
   8c488:	b5c03fcc 	andi	r23,r22,255
   8c48c:	10006c26 	beq	r2,zero,8c640 <__divdf3+0x24c>
   8c490:	00c1ffc4 	movi	r3,2047
   8c494:	10c06426 	beq	r2,r3,8c628 <__divdf3+0x234>
   8c498:	88c00434 	orhi	r3,r17,16
   8c49c:	180690fa 	slli	r3,r3,3
   8c4a0:	3022d77a 	srli	r17,r6,29
   8c4a4:	301090fa 	slli	r8,r6,3
   8c4a8:	10bf0044 	addi	r2,r2,-1023
   8c4ac:	88e2b03a 	or	r17,r17,r3
   8c4b0:	000f883a 	mov	r7,zero
   8c4b4:	a58cf03a 	xor	r6,r20,r22
   8c4b8:	3cc8b03a 	or	r4,r7,r19
   8c4bc:	a8abc83a 	sub	r21,r21,r2
   8c4c0:	008003c4 	movi	r2,15
   8c4c4:	3007883a 	mov	r3,r6
   8c4c8:	34c03fcc 	andi	r19,r6,255
   8c4cc:	11009036 	bltu	r2,r4,8c710 <__divdf3+0x31c>
   8c4d0:	200890ba 	slli	r4,r4,2
   8c4d4:	00800274 	movhi	r2,9
   8c4d8:	10b13a04 	addi	r2,r2,-15128
   8c4dc:	2089883a 	add	r4,r4,r2
   8c4e0:	20800017 	ldw	r2,0(r4)
   8c4e4:	1000683a 	jmp	r2
   8c4e8:	0008c710 	cmplti	zero,zero,8988
   8c4ec:	0008c560 	cmpeqi	zero,zero,8981
   8c4f0:	0008c700 	call	8c70 <__reset-0x77390>
   8c4f4:	0008c554 	movui	zero,8981
   8c4f8:	0008c700 	call	8c70 <__reset-0x77390>
   8c4fc:	0008c6d4 	movui	zero,8987
   8c500:	0008c700 	call	8c70 <__reset-0x77390>
   8c504:	0008c554 	movui	zero,8981
   8c508:	0008c560 	cmpeqi	zero,zero,8981
   8c50c:	0008c560 	cmpeqi	zero,zero,8981
   8c510:	0008c6d4 	movui	zero,8987
   8c514:	0008c554 	movui	zero,8981
   8c518:	0008c544 	movi	zero,8981
   8c51c:	0008c544 	movi	zero,8981
   8c520:	0008c544 	movi	zero,8981
   8c524:	0008c9f4 	movhi	zero,8999
   8c528:	2404b03a 	or	r2,r4,r16
   8c52c:	1000661e 	bne	r2,zero,8c6c8 <__divdf3+0x2d4>
   8c530:	04c00204 	movi	r19,8
   8c534:	0021883a 	mov	r16,zero
   8c538:	0025883a 	mov	r18,zero
   8c53c:	02400084 	movi	r9,2
   8c540:	003fca06 	br	8c46c <__alt_data_end+0xfffaa9ec>
   8c544:	8023883a 	mov	r17,r16
   8c548:	9011883a 	mov	r8,r18
   8c54c:	e02f883a 	mov	r23,fp
   8c550:	480f883a 	mov	r7,r9
   8c554:	00800084 	movi	r2,2
   8c558:	3881311e 	bne	r7,r2,8ca20 <__divdf3+0x62c>
   8c55c:	b827883a 	mov	r19,r23
   8c560:	98c0004c 	andi	r3,r19,1
   8c564:	0081ffc4 	movi	r2,2047
   8c568:	000b883a 	mov	r5,zero
   8c56c:	0025883a 	mov	r18,zero
   8c570:	1004953a 	slli	r2,r2,20
   8c574:	18c03fcc 	andi	r3,r3,255
   8c578:	04400434 	movhi	r17,16
   8c57c:	8c7fffc4 	addi	r17,r17,-1
   8c580:	180697fa 	slli	r3,r3,31
   8c584:	2c4a703a 	and	r5,r5,r17
   8c588:	288ab03a 	or	r5,r5,r2
   8c58c:	28c6b03a 	or	r3,r5,r3
   8c590:	9005883a 	mov	r2,r18
   8c594:	dfc00d17 	ldw	ra,52(sp)
   8c598:	df000c17 	ldw	fp,48(sp)
   8c59c:	ddc00b17 	ldw	r23,44(sp)
   8c5a0:	dd800a17 	ldw	r22,40(sp)
   8c5a4:	dd400917 	ldw	r21,36(sp)
   8c5a8:	dd000817 	ldw	r20,32(sp)
   8c5ac:	dcc00717 	ldw	r19,28(sp)
   8c5b0:	dc800617 	ldw	r18,24(sp)
   8c5b4:	dc400517 	ldw	r17,20(sp)
   8c5b8:	dc000417 	ldw	r16,16(sp)
   8c5bc:	dec00e04 	addi	sp,sp,56
   8c5c0:	f800283a 	ret
   8c5c4:	2404b03a 	or	r2,r4,r16
   8c5c8:	2027883a 	mov	r19,r4
   8c5cc:	10003926 	beq	r2,zero,8c6b4 <__divdf3+0x2c0>
   8c5d0:	80012e26 	beq	r16,zero,8ca8c <__divdf3+0x698>
   8c5d4:	8009883a 	mov	r4,r16
   8c5d8:	d9800315 	stw	r6,12(sp)
   8c5dc:	d9c00215 	stw	r7,8(sp)
   8c5e0:	008e14c0 	call	8e14c <__clzsi2>
   8c5e4:	d9800317 	ldw	r6,12(sp)
   8c5e8:	d9c00217 	ldw	r7,8(sp)
   8c5ec:	113ffd44 	addi	r4,r2,-11
   8c5f0:	00c00704 	movi	r3,28
   8c5f4:	19012116 	blt	r3,r4,8ca7c <__divdf3+0x688>
   8c5f8:	00c00744 	movi	r3,29
   8c5fc:	147ffe04 	addi	r17,r2,-8
   8c600:	1907c83a 	sub	r3,r3,r4
   8c604:	8460983a 	sll	r16,r16,r17
   8c608:	98c6d83a 	srl	r3,r19,r3
   8c60c:	9c64983a 	sll	r18,r19,r17
   8c610:	1c20b03a 	or	r16,r3,r16
   8c614:	1080fcc4 	addi	r2,r2,1011
   8c618:	00abc83a 	sub	r21,zero,r2
   8c61c:	0027883a 	mov	r19,zero
   8c620:	0013883a 	mov	r9,zero
   8c624:	003f9106 	br	8c46c <__alt_data_end+0xfffaa9ec>
   8c628:	3446b03a 	or	r3,r6,r17
   8c62c:	18001f1e 	bne	r3,zero,8c6ac <__divdf3+0x2b8>
   8c630:	0023883a 	mov	r17,zero
   8c634:	0011883a 	mov	r8,zero
   8c638:	01c00084 	movi	r7,2
   8c63c:	003f9d06 	br	8c4b4 <__alt_data_end+0xfffaaa34>
   8c640:	3446b03a 	or	r3,r6,r17
   8c644:	18001526 	beq	r3,zero,8c69c <__divdf3+0x2a8>
   8c648:	88011b26 	beq	r17,zero,8cab8 <__divdf3+0x6c4>
   8c64c:	8809883a 	mov	r4,r17
   8c650:	d9800315 	stw	r6,12(sp)
   8c654:	da400115 	stw	r9,4(sp)
   8c658:	008e14c0 	call	8e14c <__clzsi2>
   8c65c:	d9800317 	ldw	r6,12(sp)
   8c660:	da400117 	ldw	r9,4(sp)
   8c664:	113ffd44 	addi	r4,r2,-11
   8c668:	00c00704 	movi	r3,28
   8c66c:	19010e16 	blt	r3,r4,8caa8 <__divdf3+0x6b4>
   8c670:	00c00744 	movi	r3,29
   8c674:	123ffe04 	addi	r8,r2,-8
   8c678:	1907c83a 	sub	r3,r3,r4
   8c67c:	8a22983a 	sll	r17,r17,r8
   8c680:	30c6d83a 	srl	r3,r6,r3
   8c684:	3210983a 	sll	r8,r6,r8
   8c688:	1c62b03a 	or	r17,r3,r17
   8c68c:	1080fcc4 	addi	r2,r2,1011
   8c690:	0085c83a 	sub	r2,zero,r2
   8c694:	000f883a 	mov	r7,zero
   8c698:	003f8606 	br	8c4b4 <__alt_data_end+0xfffaaa34>
   8c69c:	0023883a 	mov	r17,zero
   8c6a0:	0011883a 	mov	r8,zero
   8c6a4:	01c00044 	movi	r7,1
   8c6a8:	003f8206 	br	8c4b4 <__alt_data_end+0xfffaaa34>
   8c6ac:	01c000c4 	movi	r7,3
   8c6b0:	003f8006 	br	8c4b4 <__alt_data_end+0xfffaaa34>
   8c6b4:	04c00104 	movi	r19,4
   8c6b8:	0021883a 	mov	r16,zero
   8c6bc:	0025883a 	mov	r18,zero
   8c6c0:	02400044 	movi	r9,1
   8c6c4:	003f6906 	br	8c46c <__alt_data_end+0xfffaa9ec>
   8c6c8:	04c00304 	movi	r19,12
   8c6cc:	024000c4 	movi	r9,3
   8c6d0:	003f6606 	br	8c46c <__alt_data_end+0xfffaa9ec>
   8c6d4:	01400434 	movhi	r5,16
   8c6d8:	0007883a 	mov	r3,zero
   8c6dc:	297fffc4 	addi	r5,r5,-1
   8c6e0:	04bfffc4 	movi	r18,-1
   8c6e4:	0081ffc4 	movi	r2,2047
   8c6e8:	003fa106 	br	8c570 <__alt_data_end+0xfffaaaf0>
   8c6ec:	00c00044 	movi	r3,1
   8c6f0:	1887c83a 	sub	r3,r3,r2
   8c6f4:	01000e04 	movi	r4,56
   8c6f8:	20c1210e 	bge	r4,r3,8cb80 <__divdf3+0x78c>
   8c6fc:	98c0004c 	andi	r3,r19,1
   8c700:	0005883a 	mov	r2,zero
   8c704:	000b883a 	mov	r5,zero
   8c708:	0025883a 	mov	r18,zero
   8c70c:	003f9806 	br	8c570 <__alt_data_end+0xfffaaaf0>
   8c710:	8c00fd36 	bltu	r17,r16,8cb08 <__divdf3+0x714>
   8c714:	8440fb26 	beq	r16,r17,8cb04 <__divdf3+0x710>
   8c718:	8007883a 	mov	r3,r16
   8c71c:	ad7fffc4 	addi	r21,r21,-1
   8c720:	0021883a 	mov	r16,zero
   8c724:	4004d63a 	srli	r2,r8,24
   8c728:	8822923a 	slli	r17,r17,8
   8c72c:	1809883a 	mov	r4,r3
   8c730:	402c923a 	slli	r22,r8,8
   8c734:	88b8b03a 	or	fp,r17,r2
   8c738:	e028d43a 	srli	r20,fp,16
   8c73c:	d8c00015 	stw	r3,0(sp)
   8c740:	e5ffffcc 	andi	r23,fp,65535
   8c744:	a00b883a 	mov	r5,r20
   8c748:	00818000 	call	81800 <__udivsi3>
   8c74c:	d8c00017 	ldw	r3,0(sp)
   8c750:	a00b883a 	mov	r5,r20
   8c754:	d8800315 	stw	r2,12(sp)
   8c758:	1809883a 	mov	r4,r3
   8c75c:	00818640 	call	81864 <__umodsi3>
   8c760:	d9800317 	ldw	r6,12(sp)
   8c764:	1006943a 	slli	r3,r2,16
   8c768:	9004d43a 	srli	r2,r18,16
   8c76c:	b9a3383a 	mul	r17,r23,r6
   8c770:	10c4b03a 	or	r2,r2,r3
   8c774:	1440062e 	bgeu	r2,r17,8c790 <__divdf3+0x39c>
   8c778:	1705883a 	add	r2,r2,fp
   8c77c:	30ffffc4 	addi	r3,r6,-1
   8c780:	1700ee36 	bltu	r2,fp,8cb3c <__divdf3+0x748>
   8c784:	1440ed2e 	bgeu	r2,r17,8cb3c <__divdf3+0x748>
   8c788:	31bfff84 	addi	r6,r6,-2
   8c78c:	1705883a 	add	r2,r2,fp
   8c790:	1463c83a 	sub	r17,r2,r17
   8c794:	a00b883a 	mov	r5,r20
   8c798:	8809883a 	mov	r4,r17
   8c79c:	d9800315 	stw	r6,12(sp)
   8c7a0:	00818000 	call	81800 <__udivsi3>
   8c7a4:	a00b883a 	mov	r5,r20
   8c7a8:	8809883a 	mov	r4,r17
   8c7ac:	d8800215 	stw	r2,8(sp)
   8c7b0:	00818640 	call	81864 <__umodsi3>
   8c7b4:	d9c00217 	ldw	r7,8(sp)
   8c7b8:	1004943a 	slli	r2,r2,16
   8c7bc:	94bfffcc 	andi	r18,r18,65535
   8c7c0:	b9d1383a 	mul	r8,r23,r7
   8c7c4:	90a4b03a 	or	r18,r18,r2
   8c7c8:	d9800317 	ldw	r6,12(sp)
   8c7cc:	9200062e 	bgeu	r18,r8,8c7e8 <__divdf3+0x3f4>
   8c7d0:	9725883a 	add	r18,r18,fp
   8c7d4:	38bfffc4 	addi	r2,r7,-1
   8c7d8:	9700d636 	bltu	r18,fp,8cb34 <__divdf3+0x740>
   8c7dc:	9200d52e 	bgeu	r18,r8,8cb34 <__divdf3+0x740>
   8c7e0:	39ffff84 	addi	r7,r7,-2
   8c7e4:	9725883a 	add	r18,r18,fp
   8c7e8:	3004943a 	slli	r2,r6,16
   8c7ec:	b012d43a 	srli	r9,r22,16
   8c7f0:	b1bfffcc 	andi	r6,r22,65535
   8c7f4:	11e2b03a 	or	r17,r2,r7
   8c7f8:	8806d43a 	srli	r3,r17,16
   8c7fc:	893fffcc 	andi	r4,r17,65535
   8c800:	218b383a 	mul	r5,r4,r6
   8c804:	30c5383a 	mul	r2,r6,r3
   8c808:	2249383a 	mul	r4,r4,r9
   8c80c:	280ed43a 	srli	r7,r5,16
   8c810:	9225c83a 	sub	r18,r18,r8
   8c814:	2089883a 	add	r4,r4,r2
   8c818:	3909883a 	add	r4,r7,r4
   8c81c:	1a47383a 	mul	r3,r3,r9
   8c820:	2080022e 	bgeu	r4,r2,8c82c <__divdf3+0x438>
   8c824:	00800074 	movhi	r2,1
   8c828:	1887883a 	add	r3,r3,r2
   8c82c:	2004d43a 	srli	r2,r4,16
   8c830:	2008943a 	slli	r4,r4,16
   8c834:	297fffcc 	andi	r5,r5,65535
   8c838:	10c7883a 	add	r3,r2,r3
   8c83c:	2149883a 	add	r4,r4,r5
   8c840:	90c0a536 	bltu	r18,r3,8cad8 <__divdf3+0x6e4>
   8c844:	90c0bf26 	beq	r18,r3,8cb44 <__divdf3+0x750>
   8c848:	90c7c83a 	sub	r3,r18,r3
   8c84c:	810fc83a 	sub	r7,r16,r4
   8c850:	81e5803a 	cmpltu	r18,r16,r7
   8c854:	1ca5c83a 	sub	r18,r3,r18
   8c858:	e480c126 	beq	fp,r18,8cb60 <__divdf3+0x76c>
   8c85c:	a00b883a 	mov	r5,r20
   8c860:	9009883a 	mov	r4,r18
   8c864:	d9800315 	stw	r6,12(sp)
   8c868:	d9c00215 	stw	r7,8(sp)
   8c86c:	da400115 	stw	r9,4(sp)
   8c870:	00818000 	call	81800 <__udivsi3>
   8c874:	a00b883a 	mov	r5,r20
   8c878:	9009883a 	mov	r4,r18
   8c87c:	d8800015 	stw	r2,0(sp)
   8c880:	00818640 	call	81864 <__umodsi3>
   8c884:	d9c00217 	ldw	r7,8(sp)
   8c888:	da000017 	ldw	r8,0(sp)
   8c88c:	1006943a 	slli	r3,r2,16
   8c890:	3804d43a 	srli	r2,r7,16
   8c894:	ba21383a 	mul	r16,r23,r8
   8c898:	d9800317 	ldw	r6,12(sp)
   8c89c:	10c4b03a 	or	r2,r2,r3
   8c8a0:	da400117 	ldw	r9,4(sp)
   8c8a4:	1400062e 	bgeu	r2,r16,8c8c0 <__divdf3+0x4cc>
   8c8a8:	1705883a 	add	r2,r2,fp
   8c8ac:	40ffffc4 	addi	r3,r8,-1
   8c8b0:	1700ad36 	bltu	r2,fp,8cb68 <__divdf3+0x774>
   8c8b4:	1400ac2e 	bgeu	r2,r16,8cb68 <__divdf3+0x774>
   8c8b8:	423fff84 	addi	r8,r8,-2
   8c8bc:	1705883a 	add	r2,r2,fp
   8c8c0:	1421c83a 	sub	r16,r2,r16
   8c8c4:	a00b883a 	mov	r5,r20
   8c8c8:	8009883a 	mov	r4,r16
   8c8cc:	d9800315 	stw	r6,12(sp)
   8c8d0:	d9c00215 	stw	r7,8(sp)
   8c8d4:	da000015 	stw	r8,0(sp)
   8c8d8:	da400115 	stw	r9,4(sp)
   8c8dc:	00818000 	call	81800 <__udivsi3>
   8c8e0:	8009883a 	mov	r4,r16
   8c8e4:	a00b883a 	mov	r5,r20
   8c8e8:	1025883a 	mov	r18,r2
   8c8ec:	00818640 	call	81864 <__umodsi3>
   8c8f0:	d9c00217 	ldw	r7,8(sp)
   8c8f4:	1004943a 	slli	r2,r2,16
   8c8f8:	bcaf383a 	mul	r23,r23,r18
   8c8fc:	393fffcc 	andi	r4,r7,65535
   8c900:	2088b03a 	or	r4,r4,r2
   8c904:	d9800317 	ldw	r6,12(sp)
   8c908:	da000017 	ldw	r8,0(sp)
   8c90c:	da400117 	ldw	r9,4(sp)
   8c910:	25c0062e 	bgeu	r4,r23,8c92c <__divdf3+0x538>
   8c914:	2709883a 	add	r4,r4,fp
   8c918:	90bfffc4 	addi	r2,r18,-1
   8c91c:	27009436 	bltu	r4,fp,8cb70 <__divdf3+0x77c>
   8c920:	25c0932e 	bgeu	r4,r23,8cb70 <__divdf3+0x77c>
   8c924:	94bfff84 	addi	r18,r18,-2
   8c928:	2709883a 	add	r4,r4,fp
   8c92c:	4004943a 	slli	r2,r8,16
   8c930:	25efc83a 	sub	r23,r4,r23
   8c934:	1490b03a 	or	r8,r2,r18
   8c938:	4008d43a 	srli	r4,r8,16
   8c93c:	40ffffcc 	andi	r3,r8,65535
   8c940:	30c5383a 	mul	r2,r6,r3
   8c944:	1a47383a 	mul	r3,r3,r9
   8c948:	310d383a 	mul	r6,r6,r4
   8c94c:	100ad43a 	srli	r5,r2,16
   8c950:	4913383a 	mul	r9,r9,r4
   8c954:	1987883a 	add	r3,r3,r6
   8c958:	28c7883a 	add	r3,r5,r3
   8c95c:	1980022e 	bgeu	r3,r6,8c968 <__divdf3+0x574>
   8c960:	01000074 	movhi	r4,1
   8c964:	4913883a 	add	r9,r9,r4
   8c968:	1808d43a 	srli	r4,r3,16
   8c96c:	1806943a 	slli	r3,r3,16
   8c970:	10bfffcc 	andi	r2,r2,65535
   8c974:	2253883a 	add	r9,r4,r9
   8c978:	1887883a 	add	r3,r3,r2
   8c97c:	ba403836 	bltu	r23,r9,8ca60 <__divdf3+0x66c>
   8c980:	ba403626 	beq	r23,r9,8ca5c <__divdf3+0x668>
   8c984:	42000054 	ori	r8,r8,1
   8c988:	a880ffc4 	addi	r2,r21,1023
   8c98c:	00bf570e 	bge	zero,r2,8c6ec <__alt_data_end+0xfffaac6c>
   8c990:	40c001cc 	andi	r3,r8,7
   8c994:	18000726 	beq	r3,zero,8c9b4 <__divdf3+0x5c0>
   8c998:	40c003cc 	andi	r3,r8,15
   8c99c:	01000104 	movi	r4,4
   8c9a0:	19000426 	beq	r3,r4,8c9b4 <__divdf3+0x5c0>
   8c9a4:	4107883a 	add	r3,r8,r4
   8c9a8:	1a11803a 	cmpltu	r8,r3,r8
   8c9ac:	8a23883a 	add	r17,r17,r8
   8c9b0:	1811883a 	mov	r8,r3
   8c9b4:	88c0402c 	andhi	r3,r17,256
   8c9b8:	18000426 	beq	r3,zero,8c9cc <__divdf3+0x5d8>
   8c9bc:	00ffc034 	movhi	r3,65280
   8c9c0:	18ffffc4 	addi	r3,r3,-1
   8c9c4:	a8810004 	addi	r2,r21,1024
   8c9c8:	88e2703a 	and	r17,r17,r3
   8c9cc:	00c1ff84 	movi	r3,2046
   8c9d0:	18bee316 	blt	r3,r2,8c560 <__alt_data_end+0xfffaaae0>
   8c9d4:	8824977a 	slli	r18,r17,29
   8c9d8:	4010d0fa 	srli	r8,r8,3
   8c9dc:	8822927a 	slli	r17,r17,9
   8c9e0:	1081ffcc 	andi	r2,r2,2047
   8c9e4:	9224b03a 	or	r18,r18,r8
   8c9e8:	880ad33a 	srli	r5,r17,12
   8c9ec:	98c0004c 	andi	r3,r19,1
   8c9f0:	003edf06 	br	8c570 <__alt_data_end+0xfffaaaf0>
   8c9f4:	8080022c 	andhi	r2,r16,8
   8c9f8:	10001226 	beq	r2,zero,8ca44 <__divdf3+0x650>
   8c9fc:	8880022c 	andhi	r2,r17,8
   8ca00:	1000101e 	bne	r2,zero,8ca44 <__divdf3+0x650>
   8ca04:	00800434 	movhi	r2,16
   8ca08:	89400234 	orhi	r5,r17,8
   8ca0c:	10bfffc4 	addi	r2,r2,-1
   8ca10:	b007883a 	mov	r3,r22
   8ca14:	288a703a 	and	r5,r5,r2
   8ca18:	4025883a 	mov	r18,r8
   8ca1c:	003f3106 	br	8c6e4 <__alt_data_end+0xfffaac64>
   8ca20:	008000c4 	movi	r2,3
   8ca24:	3880a626 	beq	r7,r2,8ccc0 <__divdf3+0x8cc>
   8ca28:	00800044 	movi	r2,1
   8ca2c:	3880521e 	bne	r7,r2,8cb78 <__divdf3+0x784>
   8ca30:	b807883a 	mov	r3,r23
   8ca34:	0005883a 	mov	r2,zero
   8ca38:	000b883a 	mov	r5,zero
   8ca3c:	0025883a 	mov	r18,zero
   8ca40:	003ecb06 	br	8c570 <__alt_data_end+0xfffaaaf0>
   8ca44:	00800434 	movhi	r2,16
   8ca48:	81400234 	orhi	r5,r16,8
   8ca4c:	10bfffc4 	addi	r2,r2,-1
   8ca50:	a007883a 	mov	r3,r20
   8ca54:	288a703a 	and	r5,r5,r2
   8ca58:	003f2206 	br	8c6e4 <__alt_data_end+0xfffaac64>
   8ca5c:	183fca26 	beq	r3,zero,8c988 <__alt_data_end+0xfffaaf08>
   8ca60:	e5ef883a 	add	r23,fp,r23
   8ca64:	40bfffc4 	addi	r2,r8,-1
   8ca68:	bf00392e 	bgeu	r23,fp,8cb50 <__divdf3+0x75c>
   8ca6c:	1011883a 	mov	r8,r2
   8ca70:	ba7fc41e 	bne	r23,r9,8c984 <__alt_data_end+0xfffaaf04>
   8ca74:	b0ffc31e 	bne	r22,r3,8c984 <__alt_data_end+0xfffaaf04>
   8ca78:	003fc306 	br	8c988 <__alt_data_end+0xfffaaf08>
   8ca7c:	143ff604 	addi	r16,r2,-40
   8ca80:	9c20983a 	sll	r16,r19,r16
   8ca84:	0025883a 	mov	r18,zero
   8ca88:	003ee206 	br	8c614 <__alt_data_end+0xfffaab94>
   8ca8c:	d9800315 	stw	r6,12(sp)
   8ca90:	d9c00215 	stw	r7,8(sp)
   8ca94:	008e14c0 	call	8e14c <__clzsi2>
   8ca98:	10800804 	addi	r2,r2,32
   8ca9c:	d9c00217 	ldw	r7,8(sp)
   8caa0:	d9800317 	ldw	r6,12(sp)
   8caa4:	003ed106 	br	8c5ec <__alt_data_end+0xfffaab6c>
   8caa8:	147ff604 	addi	r17,r2,-40
   8caac:	3462983a 	sll	r17,r6,r17
   8cab0:	0011883a 	mov	r8,zero
   8cab4:	003ef506 	br	8c68c <__alt_data_end+0xfffaac0c>
   8cab8:	3009883a 	mov	r4,r6
   8cabc:	d9800315 	stw	r6,12(sp)
   8cac0:	da400115 	stw	r9,4(sp)
   8cac4:	008e14c0 	call	8e14c <__clzsi2>
   8cac8:	10800804 	addi	r2,r2,32
   8cacc:	da400117 	ldw	r9,4(sp)
   8cad0:	d9800317 	ldw	r6,12(sp)
   8cad4:	003ee306 	br	8c664 <__alt_data_end+0xfffaabe4>
   8cad8:	85a1883a 	add	r16,r16,r22
   8cadc:	8585803a 	cmpltu	r2,r16,r22
   8cae0:	1705883a 	add	r2,r2,fp
   8cae4:	14a5883a 	add	r18,r2,r18
   8cae8:	88bfffc4 	addi	r2,r17,-1
   8caec:	e4800c2e 	bgeu	fp,r18,8cb20 <__divdf3+0x72c>
   8caf0:	90c03e36 	bltu	r18,r3,8cbec <__divdf3+0x7f8>
   8caf4:	1c806926 	beq	r3,r18,8cc9c <__divdf3+0x8a8>
   8caf8:	90c7c83a 	sub	r3,r18,r3
   8cafc:	1023883a 	mov	r17,r2
   8cb00:	003f5206 	br	8c84c <__alt_data_end+0xfffaadcc>
   8cb04:	923f0436 	bltu	r18,r8,8c718 <__alt_data_end+0xfffaac98>
   8cb08:	800897fa 	slli	r4,r16,31
   8cb0c:	9004d07a 	srli	r2,r18,1
   8cb10:	8006d07a 	srli	r3,r16,1
   8cb14:	902097fa 	slli	r16,r18,31
   8cb18:	20a4b03a 	or	r18,r4,r2
   8cb1c:	003f0106 	br	8c724 <__alt_data_end+0xfffaaca4>
   8cb20:	e4bff51e 	bne	fp,r18,8caf8 <__alt_data_end+0xfffab078>
   8cb24:	85bff22e 	bgeu	r16,r22,8caf0 <__alt_data_end+0xfffab070>
   8cb28:	e0c7c83a 	sub	r3,fp,r3
   8cb2c:	1023883a 	mov	r17,r2
   8cb30:	003f4606 	br	8c84c <__alt_data_end+0xfffaadcc>
   8cb34:	100f883a 	mov	r7,r2
   8cb38:	003f2b06 	br	8c7e8 <__alt_data_end+0xfffaad68>
   8cb3c:	180d883a 	mov	r6,r3
   8cb40:	003f1306 	br	8c790 <__alt_data_end+0xfffaad10>
   8cb44:	813fe436 	bltu	r16,r4,8cad8 <__alt_data_end+0xfffab058>
   8cb48:	0007883a 	mov	r3,zero
   8cb4c:	003f3f06 	br	8c84c <__alt_data_end+0xfffaadcc>
   8cb50:	ba402c36 	bltu	r23,r9,8cc04 <__divdf3+0x810>
   8cb54:	4dc05426 	beq	r9,r23,8cca8 <__divdf3+0x8b4>
   8cb58:	1011883a 	mov	r8,r2
   8cb5c:	003f8906 	br	8c984 <__alt_data_end+0xfffaaf04>
   8cb60:	023fffc4 	movi	r8,-1
   8cb64:	003f8806 	br	8c988 <__alt_data_end+0xfffaaf08>
   8cb68:	1811883a 	mov	r8,r3
   8cb6c:	003f5406 	br	8c8c0 <__alt_data_end+0xfffaae40>
   8cb70:	1025883a 	mov	r18,r2
   8cb74:	003f6d06 	br	8c92c <__alt_data_end+0xfffaaeac>
   8cb78:	b827883a 	mov	r19,r23
   8cb7c:	003f8206 	br	8c988 <__alt_data_end+0xfffaaf08>
   8cb80:	010007c4 	movi	r4,31
   8cb84:	20c02616 	blt	r4,r3,8cc20 <__divdf3+0x82c>
   8cb88:	00800804 	movi	r2,32
   8cb8c:	10c5c83a 	sub	r2,r2,r3
   8cb90:	888a983a 	sll	r5,r17,r2
   8cb94:	40c8d83a 	srl	r4,r8,r3
   8cb98:	4084983a 	sll	r2,r8,r2
   8cb9c:	88e2d83a 	srl	r17,r17,r3
   8cba0:	2906b03a 	or	r3,r5,r4
   8cba4:	1004c03a 	cmpne	r2,r2,zero
   8cba8:	1886b03a 	or	r3,r3,r2
   8cbac:	188001cc 	andi	r2,r3,7
   8cbb0:	10000726 	beq	r2,zero,8cbd0 <__divdf3+0x7dc>
   8cbb4:	188003cc 	andi	r2,r3,15
   8cbb8:	01000104 	movi	r4,4
   8cbbc:	11000426 	beq	r2,r4,8cbd0 <__divdf3+0x7dc>
   8cbc0:	1805883a 	mov	r2,r3
   8cbc4:	10c00104 	addi	r3,r2,4
   8cbc8:	1885803a 	cmpltu	r2,r3,r2
   8cbcc:	88a3883a 	add	r17,r17,r2
   8cbd0:	8880202c 	andhi	r2,r17,128
   8cbd4:	10002726 	beq	r2,zero,8cc74 <__divdf3+0x880>
   8cbd8:	98c0004c 	andi	r3,r19,1
   8cbdc:	00800044 	movi	r2,1
   8cbe0:	000b883a 	mov	r5,zero
   8cbe4:	0025883a 	mov	r18,zero
   8cbe8:	003e6106 	br	8c570 <__alt_data_end+0xfffaaaf0>
   8cbec:	85a1883a 	add	r16,r16,r22
   8cbf0:	8585803a 	cmpltu	r2,r16,r22
   8cbf4:	1705883a 	add	r2,r2,fp
   8cbf8:	14a5883a 	add	r18,r2,r18
   8cbfc:	8c7fff84 	addi	r17,r17,-2
   8cc00:	003f1106 	br	8c848 <__alt_data_end+0xfffaadc8>
   8cc04:	b589883a 	add	r4,r22,r22
   8cc08:	25ad803a 	cmpltu	r22,r4,r22
   8cc0c:	b739883a 	add	fp,r22,fp
   8cc10:	40bfff84 	addi	r2,r8,-2
   8cc14:	bf2f883a 	add	r23,r23,fp
   8cc18:	202d883a 	mov	r22,r4
   8cc1c:	003f9306 	br	8ca6c <__alt_data_end+0xfffaafec>
   8cc20:	013ff844 	movi	r4,-31
   8cc24:	2085c83a 	sub	r2,r4,r2
   8cc28:	8888d83a 	srl	r4,r17,r2
   8cc2c:	00800804 	movi	r2,32
   8cc30:	18802126 	beq	r3,r2,8ccb8 <__divdf3+0x8c4>
   8cc34:	00801004 	movi	r2,64
   8cc38:	10c5c83a 	sub	r2,r2,r3
   8cc3c:	8884983a 	sll	r2,r17,r2
   8cc40:	1204b03a 	or	r2,r2,r8
   8cc44:	1004c03a 	cmpne	r2,r2,zero
   8cc48:	2084b03a 	or	r2,r4,r2
   8cc4c:	144001cc 	andi	r17,r2,7
   8cc50:	88000d1e 	bne	r17,zero,8cc88 <__divdf3+0x894>
   8cc54:	000b883a 	mov	r5,zero
   8cc58:	1024d0fa 	srli	r18,r2,3
   8cc5c:	98c0004c 	andi	r3,r19,1
   8cc60:	0005883a 	mov	r2,zero
   8cc64:	9464b03a 	or	r18,r18,r17
   8cc68:	003e4106 	br	8c570 <__alt_data_end+0xfffaaaf0>
   8cc6c:	1007883a 	mov	r3,r2
   8cc70:	0023883a 	mov	r17,zero
   8cc74:	880a927a 	slli	r5,r17,9
   8cc78:	1805883a 	mov	r2,r3
   8cc7c:	8822977a 	slli	r17,r17,29
   8cc80:	280ad33a 	srli	r5,r5,12
   8cc84:	003ff406 	br	8cc58 <__alt_data_end+0xfffab1d8>
   8cc88:	10c003cc 	andi	r3,r2,15
   8cc8c:	01000104 	movi	r4,4
   8cc90:	193ff626 	beq	r3,r4,8cc6c <__alt_data_end+0xfffab1ec>
   8cc94:	0023883a 	mov	r17,zero
   8cc98:	003fca06 	br	8cbc4 <__alt_data_end+0xfffab144>
   8cc9c:	813fd336 	bltu	r16,r4,8cbec <__alt_data_end+0xfffab16c>
   8cca0:	1023883a 	mov	r17,r2
   8cca4:	003fa806 	br	8cb48 <__alt_data_end+0xfffab0c8>
   8cca8:	b0ffd636 	bltu	r22,r3,8cc04 <__alt_data_end+0xfffab184>
   8ccac:	1011883a 	mov	r8,r2
   8ccb0:	b0ff341e 	bne	r22,r3,8c984 <__alt_data_end+0xfffaaf04>
   8ccb4:	003f3406 	br	8c988 <__alt_data_end+0xfffaaf08>
   8ccb8:	0005883a 	mov	r2,zero
   8ccbc:	003fe006 	br	8cc40 <__alt_data_end+0xfffab1c0>
   8ccc0:	00800434 	movhi	r2,16
   8ccc4:	89400234 	orhi	r5,r17,8
   8ccc8:	10bfffc4 	addi	r2,r2,-1
   8cccc:	b807883a 	mov	r3,r23
   8ccd0:	288a703a 	and	r5,r5,r2
   8ccd4:	4025883a 	mov	r18,r8
   8ccd8:	003e8206 	br	8c6e4 <__alt_data_end+0xfffaac64>

0008ccdc <__eqdf2>:
   8ccdc:	2804d53a 	srli	r2,r5,20
   8cce0:	3806d53a 	srli	r3,r7,20
   8cce4:	02000434 	movhi	r8,16
   8cce8:	423fffc4 	addi	r8,r8,-1
   8ccec:	1081ffcc 	andi	r2,r2,2047
   8ccf0:	0281ffc4 	movi	r10,2047
   8ccf4:	2a12703a 	and	r9,r5,r8
   8ccf8:	18c1ffcc 	andi	r3,r3,2047
   8ccfc:	3a10703a 	and	r8,r7,r8
   8cd00:	280ad7fa 	srli	r5,r5,31
   8cd04:	380ed7fa 	srli	r7,r7,31
   8cd08:	12801026 	beq	r2,r10,8cd4c <__eqdf2+0x70>
   8cd0c:	0281ffc4 	movi	r10,2047
   8cd10:	1a800a26 	beq	r3,r10,8cd3c <__eqdf2+0x60>
   8cd14:	10c00226 	beq	r2,r3,8cd20 <__eqdf2+0x44>
   8cd18:	00800044 	movi	r2,1
   8cd1c:	f800283a 	ret
   8cd20:	4a3ffd1e 	bne	r9,r8,8cd18 <__alt_data_end+0xfffab298>
   8cd24:	21bffc1e 	bne	r4,r6,8cd18 <__alt_data_end+0xfffab298>
   8cd28:	29c00c26 	beq	r5,r7,8cd5c <__eqdf2+0x80>
   8cd2c:	103ffa1e 	bne	r2,zero,8cd18 <__alt_data_end+0xfffab298>
   8cd30:	2244b03a 	or	r2,r4,r9
   8cd34:	1004c03a 	cmpne	r2,r2,zero
   8cd38:	f800283a 	ret
   8cd3c:	3214b03a 	or	r10,r6,r8
   8cd40:	503ff426 	beq	r10,zero,8cd14 <__alt_data_end+0xfffab294>
   8cd44:	00800044 	movi	r2,1
   8cd48:	f800283a 	ret
   8cd4c:	2254b03a 	or	r10,r4,r9
   8cd50:	503fee26 	beq	r10,zero,8cd0c <__alt_data_end+0xfffab28c>
   8cd54:	00800044 	movi	r2,1
   8cd58:	f800283a 	ret
   8cd5c:	0005883a 	mov	r2,zero
   8cd60:	f800283a 	ret

0008cd64 <__gedf2>:
   8cd64:	2804d53a 	srli	r2,r5,20
   8cd68:	3806d53a 	srli	r3,r7,20
   8cd6c:	02000434 	movhi	r8,16
   8cd70:	423fffc4 	addi	r8,r8,-1
   8cd74:	1081ffcc 	andi	r2,r2,2047
   8cd78:	0241ffc4 	movi	r9,2047
   8cd7c:	2a14703a 	and	r10,r5,r8
   8cd80:	18c1ffcc 	andi	r3,r3,2047
   8cd84:	3a10703a 	and	r8,r7,r8
   8cd88:	280ad7fa 	srli	r5,r5,31
   8cd8c:	380ed7fa 	srli	r7,r7,31
   8cd90:	12401d26 	beq	r2,r9,8ce08 <__gedf2+0xa4>
   8cd94:	0241ffc4 	movi	r9,2047
   8cd98:	1a401226 	beq	r3,r9,8cde4 <__gedf2+0x80>
   8cd9c:	1000081e 	bne	r2,zero,8cdc0 <__gedf2+0x5c>
   8cda0:	2296b03a 	or	r11,r4,r10
   8cda4:	5813003a 	cmpeq	r9,r11,zero
   8cda8:	1800091e 	bne	r3,zero,8cdd0 <__gedf2+0x6c>
   8cdac:	3218b03a 	or	r12,r6,r8
   8cdb0:	6000071e 	bne	r12,zero,8cdd0 <__gedf2+0x6c>
   8cdb4:	0005883a 	mov	r2,zero
   8cdb8:	5800101e 	bne	r11,zero,8cdfc <__gedf2+0x98>
   8cdbc:	f800283a 	ret
   8cdc0:	18000c1e 	bne	r3,zero,8cdf4 <__gedf2+0x90>
   8cdc4:	3212b03a 	or	r9,r6,r8
   8cdc8:	48000c26 	beq	r9,zero,8cdfc <__gedf2+0x98>
   8cdcc:	0013883a 	mov	r9,zero
   8cdd0:	39c03fcc 	andi	r7,r7,255
   8cdd4:	48000826 	beq	r9,zero,8cdf8 <__gedf2+0x94>
   8cdd8:	38000926 	beq	r7,zero,8ce00 <__gedf2+0x9c>
   8cddc:	00800044 	movi	r2,1
   8cde0:	f800283a 	ret
   8cde4:	3212b03a 	or	r9,r6,r8
   8cde8:	483fec26 	beq	r9,zero,8cd9c <__alt_data_end+0xfffab31c>
   8cdec:	00bfff84 	movi	r2,-2
   8cdf0:	f800283a 	ret
   8cdf4:	39c03fcc 	andi	r7,r7,255
   8cdf8:	29c00626 	beq	r5,r7,8ce14 <__gedf2+0xb0>
   8cdfc:	283ff726 	beq	r5,zero,8cddc <__alt_data_end+0xfffab35c>
   8ce00:	00bfffc4 	movi	r2,-1
   8ce04:	f800283a 	ret
   8ce08:	2292b03a 	or	r9,r4,r10
   8ce0c:	483fe126 	beq	r9,zero,8cd94 <__alt_data_end+0xfffab314>
   8ce10:	003ff606 	br	8cdec <__alt_data_end+0xfffab36c>
   8ce14:	18bff916 	blt	r3,r2,8cdfc <__alt_data_end+0xfffab37c>
   8ce18:	10c00316 	blt	r2,r3,8ce28 <__gedf2+0xc4>
   8ce1c:	42bff736 	bltu	r8,r10,8cdfc <__alt_data_end+0xfffab37c>
   8ce20:	52000326 	beq	r10,r8,8ce30 <__gedf2+0xcc>
   8ce24:	5200042e 	bgeu	r10,r8,8ce38 <__gedf2+0xd4>
   8ce28:	283fec1e 	bne	r5,zero,8cddc <__alt_data_end+0xfffab35c>
   8ce2c:	003ff406 	br	8ce00 <__alt_data_end+0xfffab380>
   8ce30:	313ff236 	bltu	r6,r4,8cdfc <__alt_data_end+0xfffab37c>
   8ce34:	21bffc36 	bltu	r4,r6,8ce28 <__alt_data_end+0xfffab3a8>
   8ce38:	0005883a 	mov	r2,zero
   8ce3c:	f800283a 	ret

0008ce40 <__ledf2>:
   8ce40:	2804d53a 	srli	r2,r5,20
   8ce44:	3810d53a 	srli	r8,r7,20
   8ce48:	00c00434 	movhi	r3,16
   8ce4c:	18ffffc4 	addi	r3,r3,-1
   8ce50:	1081ffcc 	andi	r2,r2,2047
   8ce54:	0241ffc4 	movi	r9,2047
   8ce58:	28d4703a 	and	r10,r5,r3
   8ce5c:	4201ffcc 	andi	r8,r8,2047
   8ce60:	38c6703a 	and	r3,r7,r3
   8ce64:	280ad7fa 	srli	r5,r5,31
   8ce68:	380ed7fa 	srli	r7,r7,31
   8ce6c:	12401f26 	beq	r2,r9,8ceec <__ledf2+0xac>
   8ce70:	0241ffc4 	movi	r9,2047
   8ce74:	42401426 	beq	r8,r9,8cec8 <__ledf2+0x88>
   8ce78:	1000091e 	bne	r2,zero,8cea0 <__ledf2+0x60>
   8ce7c:	2296b03a 	or	r11,r4,r10
   8ce80:	5813003a 	cmpeq	r9,r11,zero
   8ce84:	29403fcc 	andi	r5,r5,255
   8ce88:	40000a1e 	bne	r8,zero,8ceb4 <__ledf2+0x74>
   8ce8c:	30d8b03a 	or	r12,r6,r3
   8ce90:	6000081e 	bne	r12,zero,8ceb4 <__ledf2+0x74>
   8ce94:	0005883a 	mov	r2,zero
   8ce98:	5800111e 	bne	r11,zero,8cee0 <__ledf2+0xa0>
   8ce9c:	f800283a 	ret
   8cea0:	29403fcc 	andi	r5,r5,255
   8cea4:	40000c1e 	bne	r8,zero,8ced8 <__ledf2+0x98>
   8cea8:	30d2b03a 	or	r9,r6,r3
   8ceac:	48000c26 	beq	r9,zero,8cee0 <__ledf2+0xa0>
   8ceb0:	0013883a 	mov	r9,zero
   8ceb4:	39c03fcc 	andi	r7,r7,255
   8ceb8:	48000826 	beq	r9,zero,8cedc <__ledf2+0x9c>
   8cebc:	38001126 	beq	r7,zero,8cf04 <__ledf2+0xc4>
   8cec0:	00800044 	movi	r2,1
   8cec4:	f800283a 	ret
   8cec8:	30d2b03a 	or	r9,r6,r3
   8cecc:	483fea26 	beq	r9,zero,8ce78 <__alt_data_end+0xfffab3f8>
   8ced0:	00800084 	movi	r2,2
   8ced4:	f800283a 	ret
   8ced8:	39c03fcc 	andi	r7,r7,255
   8cedc:	39400726 	beq	r7,r5,8cefc <__ledf2+0xbc>
   8cee0:	2800081e 	bne	r5,zero,8cf04 <__ledf2+0xc4>
   8cee4:	00800044 	movi	r2,1
   8cee8:	f800283a 	ret
   8ceec:	2292b03a 	or	r9,r4,r10
   8cef0:	483fdf26 	beq	r9,zero,8ce70 <__alt_data_end+0xfffab3f0>
   8cef4:	00800084 	movi	r2,2
   8cef8:	f800283a 	ret
   8cefc:	4080030e 	bge	r8,r2,8cf0c <__ledf2+0xcc>
   8cf00:	383fef26 	beq	r7,zero,8cec0 <__alt_data_end+0xfffab440>
   8cf04:	00bfffc4 	movi	r2,-1
   8cf08:	f800283a 	ret
   8cf0c:	123feb16 	blt	r2,r8,8cebc <__alt_data_end+0xfffab43c>
   8cf10:	1abff336 	bltu	r3,r10,8cee0 <__alt_data_end+0xfffab460>
   8cf14:	50c00326 	beq	r10,r3,8cf24 <__ledf2+0xe4>
   8cf18:	50c0042e 	bgeu	r10,r3,8cf2c <__ledf2+0xec>
   8cf1c:	283fe81e 	bne	r5,zero,8cec0 <__alt_data_end+0xfffab440>
   8cf20:	003ff806 	br	8cf04 <__alt_data_end+0xfffab484>
   8cf24:	313fee36 	bltu	r6,r4,8cee0 <__alt_data_end+0xfffab460>
   8cf28:	21bffc36 	bltu	r4,r6,8cf1c <__alt_data_end+0xfffab49c>
   8cf2c:	0005883a 	mov	r2,zero
   8cf30:	f800283a 	ret

0008cf34 <__muldf3>:
   8cf34:	defff304 	addi	sp,sp,-52
   8cf38:	2804d53a 	srli	r2,r5,20
   8cf3c:	dd800915 	stw	r22,36(sp)
   8cf40:	282cd7fa 	srli	r22,r5,31
   8cf44:	dc000315 	stw	r16,12(sp)
   8cf48:	04000434 	movhi	r16,16
   8cf4c:	dd400815 	stw	r21,32(sp)
   8cf50:	dc800515 	stw	r18,20(sp)
   8cf54:	843fffc4 	addi	r16,r16,-1
   8cf58:	dfc00c15 	stw	ra,48(sp)
   8cf5c:	df000b15 	stw	fp,44(sp)
   8cf60:	ddc00a15 	stw	r23,40(sp)
   8cf64:	dd000715 	stw	r20,28(sp)
   8cf68:	dcc00615 	stw	r19,24(sp)
   8cf6c:	dc400415 	stw	r17,16(sp)
   8cf70:	1481ffcc 	andi	r18,r2,2047
   8cf74:	2c20703a 	and	r16,r5,r16
   8cf78:	b02b883a 	mov	r21,r22
   8cf7c:	b2403fcc 	andi	r9,r22,255
   8cf80:	90006026 	beq	r18,zero,8d104 <__muldf3+0x1d0>
   8cf84:	0081ffc4 	movi	r2,2047
   8cf88:	2029883a 	mov	r20,r4
   8cf8c:	90803626 	beq	r18,r2,8d068 <__muldf3+0x134>
   8cf90:	80800434 	orhi	r2,r16,16
   8cf94:	100490fa 	slli	r2,r2,3
   8cf98:	2020d77a 	srli	r16,r4,29
   8cf9c:	202890fa 	slli	r20,r4,3
   8cfa0:	94bf0044 	addi	r18,r18,-1023
   8cfa4:	80a0b03a 	or	r16,r16,r2
   8cfa8:	0027883a 	mov	r19,zero
   8cfac:	0039883a 	mov	fp,zero
   8cfb0:	3804d53a 	srli	r2,r7,20
   8cfb4:	382ed7fa 	srli	r23,r7,31
   8cfb8:	04400434 	movhi	r17,16
   8cfbc:	8c7fffc4 	addi	r17,r17,-1
   8cfc0:	1081ffcc 	andi	r2,r2,2047
   8cfc4:	3011883a 	mov	r8,r6
   8cfc8:	3c62703a 	and	r17,r7,r17
   8cfcc:	ba803fcc 	andi	r10,r23,255
   8cfd0:	10006d26 	beq	r2,zero,8d188 <__muldf3+0x254>
   8cfd4:	00c1ffc4 	movi	r3,2047
   8cfd8:	10c06526 	beq	r2,r3,8d170 <__muldf3+0x23c>
   8cfdc:	88c00434 	orhi	r3,r17,16
   8cfe0:	180690fa 	slli	r3,r3,3
   8cfe4:	3022d77a 	srli	r17,r6,29
   8cfe8:	301090fa 	slli	r8,r6,3
   8cfec:	10bf0044 	addi	r2,r2,-1023
   8cff0:	88e2b03a 	or	r17,r17,r3
   8cff4:	000b883a 	mov	r5,zero
   8cff8:	9085883a 	add	r2,r18,r2
   8cffc:	2cc8b03a 	or	r4,r5,r19
   8d000:	00c003c4 	movi	r3,15
   8d004:	bdacf03a 	xor	r22,r23,r22
   8d008:	12c00044 	addi	r11,r2,1
   8d00c:	19009936 	bltu	r3,r4,8d274 <__muldf3+0x340>
   8d010:	200890ba 	slli	r4,r4,2
   8d014:	00c00274 	movhi	r3,9
   8d018:	18f40a04 	addi	r3,r3,-12248
   8d01c:	20c9883a 	add	r4,r4,r3
   8d020:	20c00017 	ldw	r3,0(r4)
   8d024:	1800683a 	jmp	r3
   8d028:	0008d274 	movhi	zero,9033
   8d02c:	0008d088 	cmpgei	zero,zero,9026
   8d030:	0008d088 	cmpgei	zero,zero,9026
   8d034:	0008d084 	movi	zero,9026
   8d038:	0008d250 	cmplti	zero,zero,9033
   8d03c:	0008d250 	cmplti	zero,zero,9033
   8d040:	0008d238 	rdprs	zero,zero,9032
   8d044:	0008d084 	movi	zero,9026
   8d048:	0008d250 	cmplti	zero,zero,9033
   8d04c:	0008d238 	rdprs	zero,zero,9032
   8d050:	0008d250 	cmplti	zero,zero,9033
   8d054:	0008d084 	movi	zero,9026
   8d058:	0008d260 	cmpeqi	zero,zero,9033
   8d05c:	0008d260 	cmpeqi	zero,zero,9033
   8d060:	0008d260 	cmpeqi	zero,zero,9033
   8d064:	0008d47c 	xorhi	zero,zero,9041
   8d068:	2404b03a 	or	r2,r4,r16
   8d06c:	10006f1e 	bne	r2,zero,8d22c <__muldf3+0x2f8>
   8d070:	04c00204 	movi	r19,8
   8d074:	0021883a 	mov	r16,zero
   8d078:	0029883a 	mov	r20,zero
   8d07c:	07000084 	movi	fp,2
   8d080:	003fcb06 	br	8cfb0 <__alt_data_end+0xfffab530>
   8d084:	502d883a 	mov	r22,r10
   8d088:	00800084 	movi	r2,2
   8d08c:	28805726 	beq	r5,r2,8d1ec <__muldf3+0x2b8>
   8d090:	008000c4 	movi	r2,3
   8d094:	28816626 	beq	r5,r2,8d630 <__muldf3+0x6fc>
   8d098:	00800044 	movi	r2,1
   8d09c:	2881411e 	bne	r5,r2,8d5a4 <__muldf3+0x670>
   8d0a0:	b02b883a 	mov	r21,r22
   8d0a4:	0005883a 	mov	r2,zero
   8d0a8:	000b883a 	mov	r5,zero
   8d0ac:	0029883a 	mov	r20,zero
   8d0b0:	1004953a 	slli	r2,r2,20
   8d0b4:	a8c03fcc 	andi	r3,r21,255
   8d0b8:	04400434 	movhi	r17,16
   8d0bc:	8c7fffc4 	addi	r17,r17,-1
   8d0c0:	180697fa 	slli	r3,r3,31
   8d0c4:	2c4a703a 	and	r5,r5,r17
   8d0c8:	288ab03a 	or	r5,r5,r2
   8d0cc:	28c6b03a 	or	r3,r5,r3
   8d0d0:	a005883a 	mov	r2,r20
   8d0d4:	dfc00c17 	ldw	ra,48(sp)
   8d0d8:	df000b17 	ldw	fp,44(sp)
   8d0dc:	ddc00a17 	ldw	r23,40(sp)
   8d0e0:	dd800917 	ldw	r22,36(sp)
   8d0e4:	dd400817 	ldw	r21,32(sp)
   8d0e8:	dd000717 	ldw	r20,28(sp)
   8d0ec:	dcc00617 	ldw	r19,24(sp)
   8d0f0:	dc800517 	ldw	r18,20(sp)
   8d0f4:	dc400417 	ldw	r17,16(sp)
   8d0f8:	dc000317 	ldw	r16,12(sp)
   8d0fc:	dec00d04 	addi	sp,sp,52
   8d100:	f800283a 	ret
   8d104:	2404b03a 	or	r2,r4,r16
   8d108:	2027883a 	mov	r19,r4
   8d10c:	10004226 	beq	r2,zero,8d218 <__muldf3+0x2e4>
   8d110:	8000fc26 	beq	r16,zero,8d504 <__muldf3+0x5d0>
   8d114:	8009883a 	mov	r4,r16
   8d118:	d9800215 	stw	r6,8(sp)
   8d11c:	d9c00015 	stw	r7,0(sp)
   8d120:	da400115 	stw	r9,4(sp)
   8d124:	008e14c0 	call	8e14c <__clzsi2>
   8d128:	d9800217 	ldw	r6,8(sp)
   8d12c:	d9c00017 	ldw	r7,0(sp)
   8d130:	da400117 	ldw	r9,4(sp)
   8d134:	113ffd44 	addi	r4,r2,-11
   8d138:	00c00704 	movi	r3,28
   8d13c:	1900ed16 	blt	r3,r4,8d4f4 <__muldf3+0x5c0>
   8d140:	00c00744 	movi	r3,29
   8d144:	147ffe04 	addi	r17,r2,-8
   8d148:	1907c83a 	sub	r3,r3,r4
   8d14c:	8460983a 	sll	r16,r16,r17
   8d150:	98c6d83a 	srl	r3,r19,r3
   8d154:	9c68983a 	sll	r20,r19,r17
   8d158:	1c20b03a 	or	r16,r3,r16
   8d15c:	1080fcc4 	addi	r2,r2,1011
   8d160:	00a5c83a 	sub	r18,zero,r2
   8d164:	0027883a 	mov	r19,zero
   8d168:	0039883a 	mov	fp,zero
   8d16c:	003f9006 	br	8cfb0 <__alt_data_end+0xfffab530>
   8d170:	3446b03a 	or	r3,r6,r17
   8d174:	1800261e 	bne	r3,zero,8d210 <__muldf3+0x2dc>
   8d178:	0023883a 	mov	r17,zero
   8d17c:	0011883a 	mov	r8,zero
   8d180:	01400084 	movi	r5,2
   8d184:	003f9c06 	br	8cff8 <__alt_data_end+0xfffab578>
   8d188:	3446b03a 	or	r3,r6,r17
   8d18c:	18001c26 	beq	r3,zero,8d200 <__muldf3+0x2cc>
   8d190:	8800ce26 	beq	r17,zero,8d4cc <__muldf3+0x598>
   8d194:	8809883a 	mov	r4,r17
   8d198:	d9800215 	stw	r6,8(sp)
   8d19c:	da400115 	stw	r9,4(sp)
   8d1a0:	da800015 	stw	r10,0(sp)
   8d1a4:	008e14c0 	call	8e14c <__clzsi2>
   8d1a8:	d9800217 	ldw	r6,8(sp)
   8d1ac:	da400117 	ldw	r9,4(sp)
   8d1b0:	da800017 	ldw	r10,0(sp)
   8d1b4:	113ffd44 	addi	r4,r2,-11
   8d1b8:	00c00704 	movi	r3,28
   8d1bc:	1900bf16 	blt	r3,r4,8d4bc <__muldf3+0x588>
   8d1c0:	00c00744 	movi	r3,29
   8d1c4:	123ffe04 	addi	r8,r2,-8
   8d1c8:	1907c83a 	sub	r3,r3,r4
   8d1cc:	8a22983a 	sll	r17,r17,r8
   8d1d0:	30c6d83a 	srl	r3,r6,r3
   8d1d4:	3210983a 	sll	r8,r6,r8
   8d1d8:	1c62b03a 	or	r17,r3,r17
   8d1dc:	1080fcc4 	addi	r2,r2,1011
   8d1e0:	0085c83a 	sub	r2,zero,r2
   8d1e4:	000b883a 	mov	r5,zero
   8d1e8:	003f8306 	br	8cff8 <__alt_data_end+0xfffab578>
   8d1ec:	b02b883a 	mov	r21,r22
   8d1f0:	0081ffc4 	movi	r2,2047
   8d1f4:	000b883a 	mov	r5,zero
   8d1f8:	0029883a 	mov	r20,zero
   8d1fc:	003fac06 	br	8d0b0 <__alt_data_end+0xfffab630>
   8d200:	0023883a 	mov	r17,zero
   8d204:	0011883a 	mov	r8,zero
   8d208:	01400044 	movi	r5,1
   8d20c:	003f7a06 	br	8cff8 <__alt_data_end+0xfffab578>
   8d210:	014000c4 	movi	r5,3
   8d214:	003f7806 	br	8cff8 <__alt_data_end+0xfffab578>
   8d218:	04c00104 	movi	r19,4
   8d21c:	0021883a 	mov	r16,zero
   8d220:	0029883a 	mov	r20,zero
   8d224:	07000044 	movi	fp,1
   8d228:	003f6106 	br	8cfb0 <__alt_data_end+0xfffab530>
   8d22c:	04c00304 	movi	r19,12
   8d230:	070000c4 	movi	fp,3
   8d234:	003f5e06 	br	8cfb0 <__alt_data_end+0xfffab530>
   8d238:	01400434 	movhi	r5,16
   8d23c:	002b883a 	mov	r21,zero
   8d240:	297fffc4 	addi	r5,r5,-1
   8d244:	053fffc4 	movi	r20,-1
   8d248:	0081ffc4 	movi	r2,2047
   8d24c:	003f9806 	br	8d0b0 <__alt_data_end+0xfffab630>
   8d250:	8023883a 	mov	r17,r16
   8d254:	a011883a 	mov	r8,r20
   8d258:	e00b883a 	mov	r5,fp
   8d25c:	003f8a06 	br	8d088 <__alt_data_end+0xfffab608>
   8d260:	8023883a 	mov	r17,r16
   8d264:	a011883a 	mov	r8,r20
   8d268:	482d883a 	mov	r22,r9
   8d26c:	e00b883a 	mov	r5,fp
   8d270:	003f8506 	br	8d088 <__alt_data_end+0xfffab608>
   8d274:	a00ad43a 	srli	r5,r20,16
   8d278:	401ad43a 	srli	r13,r8,16
   8d27c:	a53fffcc 	andi	r20,r20,65535
   8d280:	423fffcc 	andi	r8,r8,65535
   8d284:	4519383a 	mul	r12,r8,r20
   8d288:	4147383a 	mul	r3,r8,r5
   8d28c:	6d09383a 	mul	r4,r13,r20
   8d290:	600cd43a 	srli	r6,r12,16
   8d294:	2b5d383a 	mul	r14,r5,r13
   8d298:	20c9883a 	add	r4,r4,r3
   8d29c:	310d883a 	add	r6,r6,r4
   8d2a0:	30c0022e 	bgeu	r6,r3,8d2ac <__muldf3+0x378>
   8d2a4:	00c00074 	movhi	r3,1
   8d2a8:	70dd883a 	add	r14,r14,r3
   8d2ac:	8826d43a 	srli	r19,r17,16
   8d2b0:	8bffffcc 	andi	r15,r17,65535
   8d2b4:	7d23383a 	mul	r17,r15,r20
   8d2b8:	7949383a 	mul	r4,r15,r5
   8d2bc:	9d29383a 	mul	r20,r19,r20
   8d2c0:	8814d43a 	srli	r10,r17,16
   8d2c4:	3012943a 	slli	r9,r6,16
   8d2c8:	a129883a 	add	r20,r20,r4
   8d2cc:	633fffcc 	andi	r12,r12,65535
   8d2d0:	5515883a 	add	r10,r10,r20
   8d2d4:	3006d43a 	srli	r3,r6,16
   8d2d8:	4b13883a 	add	r9,r9,r12
   8d2dc:	2ccb383a 	mul	r5,r5,r19
   8d2e0:	5100022e 	bgeu	r10,r4,8d2ec <__muldf3+0x3b8>
   8d2e4:	01000074 	movhi	r4,1
   8d2e8:	290b883a 	add	r5,r5,r4
   8d2ec:	802ad43a 	srli	r21,r16,16
   8d2f0:	843fffcc 	andi	r16,r16,65535
   8d2f4:	440d383a 	mul	r6,r8,r16
   8d2f8:	4565383a 	mul	r18,r8,r21
   8d2fc:	8349383a 	mul	r4,r16,r13
   8d300:	500e943a 	slli	r7,r10,16
   8d304:	3010d43a 	srli	r8,r6,16
   8d308:	5028d43a 	srli	r20,r10,16
   8d30c:	2489883a 	add	r4,r4,r18
   8d310:	8abfffcc 	andi	r10,r17,65535
   8d314:	3a95883a 	add	r10,r7,r10
   8d318:	4119883a 	add	r12,r8,r4
   8d31c:	a169883a 	add	r20,r20,r5
   8d320:	1a87883a 	add	r3,r3,r10
   8d324:	6d5b383a 	mul	r13,r13,r21
   8d328:	6480022e 	bgeu	r12,r18,8d334 <__muldf3+0x400>
   8d32c:	01000074 	movhi	r4,1
   8d330:	691b883a 	add	r13,r13,r4
   8d334:	7c25383a 	mul	r18,r15,r16
   8d338:	7d4b383a 	mul	r5,r15,r21
   8d33c:	84cf383a 	mul	r7,r16,r19
   8d340:	901ed43a 	srli	r15,r18,16
   8d344:	6008d43a 	srli	r4,r12,16
   8d348:	6010943a 	slli	r8,r12,16
   8d34c:	394f883a 	add	r7,r7,r5
   8d350:	333fffcc 	andi	r12,r6,65535
   8d354:	79df883a 	add	r15,r15,r7
   8d358:	235b883a 	add	r13,r4,r13
   8d35c:	9d63383a 	mul	r17,r19,r21
   8d360:	4309883a 	add	r4,r8,r12
   8d364:	7940022e 	bgeu	r15,r5,8d370 <__muldf3+0x43c>
   8d368:	01400074 	movhi	r5,1
   8d36c:	8963883a 	add	r17,r17,r5
   8d370:	780a943a 	slli	r5,r15,16
   8d374:	91bfffcc 	andi	r6,r18,65535
   8d378:	70c7883a 	add	r3,r14,r3
   8d37c:	298d883a 	add	r6,r5,r6
   8d380:	1a8f803a 	cmpltu	r7,r3,r10
   8d384:	350b883a 	add	r5,r6,r20
   8d388:	20c7883a 	add	r3,r4,r3
   8d38c:	3955883a 	add	r10,r7,r5
   8d390:	1909803a 	cmpltu	r4,r3,r4
   8d394:	6a91883a 	add	r8,r13,r10
   8d398:	780cd43a 	srli	r6,r15,16
   8d39c:	2219883a 	add	r12,r4,r8
   8d3a0:	2d0b803a 	cmpltu	r5,r5,r20
   8d3a4:	51cf803a 	cmpltu	r7,r10,r7
   8d3a8:	29ceb03a 	or	r7,r5,r7
   8d3ac:	4351803a 	cmpltu	r8,r8,r13
   8d3b0:	610b803a 	cmpltu	r5,r12,r4
   8d3b4:	4148b03a 	or	r4,r8,r5
   8d3b8:	398f883a 	add	r7,r7,r6
   8d3bc:	3909883a 	add	r4,r7,r4
   8d3c0:	1810927a 	slli	r8,r3,9
   8d3c4:	2449883a 	add	r4,r4,r17
   8d3c8:	2008927a 	slli	r4,r4,9
   8d3cc:	6022d5fa 	srli	r17,r12,23
   8d3d0:	1806d5fa 	srli	r3,r3,23
   8d3d4:	4252b03a 	or	r9,r8,r9
   8d3d8:	600a927a 	slli	r5,r12,9
   8d3dc:	4810c03a 	cmpne	r8,r9,zero
   8d3e0:	2462b03a 	or	r17,r4,r17
   8d3e4:	40c6b03a 	or	r3,r8,r3
   8d3e8:	8900402c 	andhi	r4,r17,256
   8d3ec:	1950b03a 	or	r8,r3,r5
   8d3f0:	20000726 	beq	r4,zero,8d410 <__muldf3+0x4dc>
   8d3f4:	4006d07a 	srli	r3,r8,1
   8d3f8:	880497fa 	slli	r2,r17,31
   8d3fc:	4200004c 	andi	r8,r8,1
   8d400:	8822d07a 	srli	r17,r17,1
   8d404:	1a10b03a 	or	r8,r3,r8
   8d408:	1210b03a 	or	r8,r2,r8
   8d40c:	5805883a 	mov	r2,r11
   8d410:	1140ffc4 	addi	r5,r2,1023
   8d414:	0140440e 	bge	zero,r5,8d528 <__muldf3+0x5f4>
   8d418:	40c001cc 	andi	r3,r8,7
   8d41c:	18000726 	beq	r3,zero,8d43c <__muldf3+0x508>
   8d420:	40c003cc 	andi	r3,r8,15
   8d424:	01000104 	movi	r4,4
   8d428:	19000426 	beq	r3,r4,8d43c <__muldf3+0x508>
   8d42c:	4107883a 	add	r3,r8,r4
   8d430:	1a11803a 	cmpltu	r8,r3,r8
   8d434:	8a23883a 	add	r17,r17,r8
   8d438:	1811883a 	mov	r8,r3
   8d43c:	88c0402c 	andhi	r3,r17,256
   8d440:	18000426 	beq	r3,zero,8d454 <__muldf3+0x520>
   8d444:	11410004 	addi	r5,r2,1024
   8d448:	00bfc034 	movhi	r2,65280
   8d44c:	10bfffc4 	addi	r2,r2,-1
   8d450:	88a2703a 	and	r17,r17,r2
   8d454:	0081ff84 	movi	r2,2046
   8d458:	117f6416 	blt	r2,r5,8d1ec <__alt_data_end+0xfffab76c>
   8d45c:	8828977a 	slli	r20,r17,29
   8d460:	4010d0fa 	srli	r8,r8,3
   8d464:	8822927a 	slli	r17,r17,9
   8d468:	2881ffcc 	andi	r2,r5,2047
   8d46c:	a228b03a 	or	r20,r20,r8
   8d470:	880ad33a 	srli	r5,r17,12
   8d474:	b02b883a 	mov	r21,r22
   8d478:	003f0d06 	br	8d0b0 <__alt_data_end+0xfffab630>
   8d47c:	8080022c 	andhi	r2,r16,8
   8d480:	10000926 	beq	r2,zero,8d4a8 <__muldf3+0x574>
   8d484:	8880022c 	andhi	r2,r17,8
   8d488:	1000071e 	bne	r2,zero,8d4a8 <__muldf3+0x574>
   8d48c:	00800434 	movhi	r2,16
   8d490:	89400234 	orhi	r5,r17,8
   8d494:	10bfffc4 	addi	r2,r2,-1
   8d498:	b82b883a 	mov	r21,r23
   8d49c:	288a703a 	and	r5,r5,r2
   8d4a0:	4029883a 	mov	r20,r8
   8d4a4:	003f6806 	br	8d248 <__alt_data_end+0xfffab7c8>
   8d4a8:	00800434 	movhi	r2,16
   8d4ac:	81400234 	orhi	r5,r16,8
   8d4b0:	10bfffc4 	addi	r2,r2,-1
   8d4b4:	288a703a 	and	r5,r5,r2
   8d4b8:	003f6306 	br	8d248 <__alt_data_end+0xfffab7c8>
   8d4bc:	147ff604 	addi	r17,r2,-40
   8d4c0:	3462983a 	sll	r17,r6,r17
   8d4c4:	0011883a 	mov	r8,zero
   8d4c8:	003f4406 	br	8d1dc <__alt_data_end+0xfffab75c>
   8d4cc:	3009883a 	mov	r4,r6
   8d4d0:	d9800215 	stw	r6,8(sp)
   8d4d4:	da400115 	stw	r9,4(sp)
   8d4d8:	da800015 	stw	r10,0(sp)
   8d4dc:	008e14c0 	call	8e14c <__clzsi2>
   8d4e0:	10800804 	addi	r2,r2,32
   8d4e4:	da800017 	ldw	r10,0(sp)
   8d4e8:	da400117 	ldw	r9,4(sp)
   8d4ec:	d9800217 	ldw	r6,8(sp)
   8d4f0:	003f3006 	br	8d1b4 <__alt_data_end+0xfffab734>
   8d4f4:	143ff604 	addi	r16,r2,-40
   8d4f8:	9c20983a 	sll	r16,r19,r16
   8d4fc:	0029883a 	mov	r20,zero
   8d500:	003f1606 	br	8d15c <__alt_data_end+0xfffab6dc>
   8d504:	d9800215 	stw	r6,8(sp)
   8d508:	d9c00015 	stw	r7,0(sp)
   8d50c:	da400115 	stw	r9,4(sp)
   8d510:	008e14c0 	call	8e14c <__clzsi2>
   8d514:	10800804 	addi	r2,r2,32
   8d518:	da400117 	ldw	r9,4(sp)
   8d51c:	d9c00017 	ldw	r7,0(sp)
   8d520:	d9800217 	ldw	r6,8(sp)
   8d524:	003f0306 	br	8d134 <__alt_data_end+0xfffab6b4>
   8d528:	00c00044 	movi	r3,1
   8d52c:	1947c83a 	sub	r3,r3,r5
   8d530:	00800e04 	movi	r2,56
   8d534:	10feda16 	blt	r2,r3,8d0a0 <__alt_data_end+0xfffab620>
   8d538:	008007c4 	movi	r2,31
   8d53c:	10c01b16 	blt	r2,r3,8d5ac <__muldf3+0x678>
   8d540:	00800804 	movi	r2,32
   8d544:	10c5c83a 	sub	r2,r2,r3
   8d548:	888a983a 	sll	r5,r17,r2
   8d54c:	40c8d83a 	srl	r4,r8,r3
   8d550:	4084983a 	sll	r2,r8,r2
   8d554:	88e2d83a 	srl	r17,r17,r3
   8d558:	2906b03a 	or	r3,r5,r4
   8d55c:	1004c03a 	cmpne	r2,r2,zero
   8d560:	1886b03a 	or	r3,r3,r2
   8d564:	188001cc 	andi	r2,r3,7
   8d568:	10000726 	beq	r2,zero,8d588 <__muldf3+0x654>
   8d56c:	188003cc 	andi	r2,r3,15
   8d570:	01000104 	movi	r4,4
   8d574:	11000426 	beq	r2,r4,8d588 <__muldf3+0x654>
   8d578:	1805883a 	mov	r2,r3
   8d57c:	10c00104 	addi	r3,r2,4
   8d580:	1885803a 	cmpltu	r2,r3,r2
   8d584:	88a3883a 	add	r17,r17,r2
   8d588:	8880202c 	andhi	r2,r17,128
   8d58c:	10001c26 	beq	r2,zero,8d600 <__muldf3+0x6cc>
   8d590:	b02b883a 	mov	r21,r22
   8d594:	00800044 	movi	r2,1
   8d598:	000b883a 	mov	r5,zero
   8d59c:	0029883a 	mov	r20,zero
   8d5a0:	003ec306 	br	8d0b0 <__alt_data_end+0xfffab630>
   8d5a4:	5805883a 	mov	r2,r11
   8d5a8:	003f9906 	br	8d410 <__alt_data_end+0xfffab990>
   8d5ac:	00bff844 	movi	r2,-31
   8d5b0:	1145c83a 	sub	r2,r2,r5
   8d5b4:	8888d83a 	srl	r4,r17,r2
   8d5b8:	00800804 	movi	r2,32
   8d5bc:	18801a26 	beq	r3,r2,8d628 <__muldf3+0x6f4>
   8d5c0:	00801004 	movi	r2,64
   8d5c4:	10c5c83a 	sub	r2,r2,r3
   8d5c8:	8884983a 	sll	r2,r17,r2
   8d5cc:	1204b03a 	or	r2,r2,r8
   8d5d0:	1004c03a 	cmpne	r2,r2,zero
   8d5d4:	2084b03a 	or	r2,r4,r2
   8d5d8:	144001cc 	andi	r17,r2,7
   8d5dc:	88000d1e 	bne	r17,zero,8d614 <__muldf3+0x6e0>
   8d5e0:	000b883a 	mov	r5,zero
   8d5e4:	1028d0fa 	srli	r20,r2,3
   8d5e8:	b02b883a 	mov	r21,r22
   8d5ec:	0005883a 	mov	r2,zero
   8d5f0:	a468b03a 	or	r20,r20,r17
   8d5f4:	003eae06 	br	8d0b0 <__alt_data_end+0xfffab630>
   8d5f8:	1007883a 	mov	r3,r2
   8d5fc:	0023883a 	mov	r17,zero
   8d600:	880a927a 	slli	r5,r17,9
   8d604:	1805883a 	mov	r2,r3
   8d608:	8822977a 	slli	r17,r17,29
   8d60c:	280ad33a 	srli	r5,r5,12
   8d610:	003ff406 	br	8d5e4 <__alt_data_end+0xfffabb64>
   8d614:	10c003cc 	andi	r3,r2,15
   8d618:	01000104 	movi	r4,4
   8d61c:	193ff626 	beq	r3,r4,8d5f8 <__alt_data_end+0xfffabb78>
   8d620:	0023883a 	mov	r17,zero
   8d624:	003fd506 	br	8d57c <__alt_data_end+0xfffabafc>
   8d628:	0005883a 	mov	r2,zero
   8d62c:	003fe706 	br	8d5cc <__alt_data_end+0xfffabb4c>
   8d630:	00800434 	movhi	r2,16
   8d634:	89400234 	orhi	r5,r17,8
   8d638:	10bfffc4 	addi	r2,r2,-1
   8d63c:	b02b883a 	mov	r21,r22
   8d640:	288a703a 	and	r5,r5,r2
   8d644:	4029883a 	mov	r20,r8
   8d648:	003eff06 	br	8d248 <__alt_data_end+0xfffab7c8>

0008d64c <__subdf3>:
   8d64c:	02000434 	movhi	r8,16
   8d650:	423fffc4 	addi	r8,r8,-1
   8d654:	defffb04 	addi	sp,sp,-20
   8d658:	2a14703a 	and	r10,r5,r8
   8d65c:	3812d53a 	srli	r9,r7,20
   8d660:	3a10703a 	and	r8,r7,r8
   8d664:	2006d77a 	srli	r3,r4,29
   8d668:	3004d77a 	srli	r2,r6,29
   8d66c:	dc000015 	stw	r16,0(sp)
   8d670:	501490fa 	slli	r10,r10,3
   8d674:	2820d53a 	srli	r16,r5,20
   8d678:	401090fa 	slli	r8,r8,3
   8d67c:	dc800215 	stw	r18,8(sp)
   8d680:	dc400115 	stw	r17,4(sp)
   8d684:	dfc00415 	stw	ra,16(sp)
   8d688:	202290fa 	slli	r17,r4,3
   8d68c:	dcc00315 	stw	r19,12(sp)
   8d690:	4a41ffcc 	andi	r9,r9,2047
   8d694:	0101ffc4 	movi	r4,2047
   8d698:	2824d7fa 	srli	r18,r5,31
   8d69c:	8401ffcc 	andi	r16,r16,2047
   8d6a0:	50c6b03a 	or	r3,r10,r3
   8d6a4:	380ed7fa 	srli	r7,r7,31
   8d6a8:	408ab03a 	or	r5,r8,r2
   8d6ac:	300c90fa 	slli	r6,r6,3
   8d6b0:	49009626 	beq	r9,r4,8d90c <__subdf3+0x2c0>
   8d6b4:	39c0005c 	xori	r7,r7,1
   8d6b8:	8245c83a 	sub	r2,r16,r9
   8d6bc:	3c807426 	beq	r7,r18,8d890 <__subdf3+0x244>
   8d6c0:	0080af0e 	bge	zero,r2,8d980 <__subdf3+0x334>
   8d6c4:	48002a1e 	bne	r9,zero,8d770 <__subdf3+0x124>
   8d6c8:	2988b03a 	or	r4,r5,r6
   8d6cc:	20009a1e 	bne	r4,zero,8d938 <__subdf3+0x2ec>
   8d6d0:	888001cc 	andi	r2,r17,7
   8d6d4:	10000726 	beq	r2,zero,8d6f4 <__subdf3+0xa8>
   8d6d8:	888003cc 	andi	r2,r17,15
   8d6dc:	01000104 	movi	r4,4
   8d6e0:	11000426 	beq	r2,r4,8d6f4 <__subdf3+0xa8>
   8d6e4:	890b883a 	add	r5,r17,r4
   8d6e8:	2c63803a 	cmpltu	r17,r5,r17
   8d6ec:	1c47883a 	add	r3,r3,r17
   8d6f0:	2823883a 	mov	r17,r5
   8d6f4:	1880202c 	andhi	r2,r3,128
   8d6f8:	10005926 	beq	r2,zero,8d860 <__subdf3+0x214>
   8d6fc:	84000044 	addi	r16,r16,1
   8d700:	0081ffc4 	movi	r2,2047
   8d704:	8080be26 	beq	r16,r2,8da00 <__subdf3+0x3b4>
   8d708:	017fe034 	movhi	r5,65408
   8d70c:	297fffc4 	addi	r5,r5,-1
   8d710:	1946703a 	and	r3,r3,r5
   8d714:	1804977a 	slli	r2,r3,29
   8d718:	1806927a 	slli	r3,r3,9
   8d71c:	8822d0fa 	srli	r17,r17,3
   8d720:	8401ffcc 	andi	r16,r16,2047
   8d724:	180ad33a 	srli	r5,r3,12
   8d728:	9100004c 	andi	r4,r18,1
   8d72c:	1444b03a 	or	r2,r2,r17
   8d730:	80c1ffcc 	andi	r3,r16,2047
   8d734:	1820953a 	slli	r16,r3,20
   8d738:	20c03fcc 	andi	r3,r4,255
   8d73c:	180897fa 	slli	r4,r3,31
   8d740:	00c00434 	movhi	r3,16
   8d744:	18ffffc4 	addi	r3,r3,-1
   8d748:	28c6703a 	and	r3,r5,r3
   8d74c:	1c06b03a 	or	r3,r3,r16
   8d750:	1906b03a 	or	r3,r3,r4
   8d754:	dfc00417 	ldw	ra,16(sp)
   8d758:	dcc00317 	ldw	r19,12(sp)
   8d75c:	dc800217 	ldw	r18,8(sp)
   8d760:	dc400117 	ldw	r17,4(sp)
   8d764:	dc000017 	ldw	r16,0(sp)
   8d768:	dec00504 	addi	sp,sp,20
   8d76c:	f800283a 	ret
   8d770:	0101ffc4 	movi	r4,2047
   8d774:	813fd626 	beq	r16,r4,8d6d0 <__alt_data_end+0xfffabc50>
   8d778:	29402034 	orhi	r5,r5,128
   8d77c:	01000e04 	movi	r4,56
   8d780:	2080a316 	blt	r4,r2,8da10 <__subdf3+0x3c4>
   8d784:	010007c4 	movi	r4,31
   8d788:	2080c616 	blt	r4,r2,8daa4 <__subdf3+0x458>
   8d78c:	01000804 	movi	r4,32
   8d790:	2089c83a 	sub	r4,r4,r2
   8d794:	2910983a 	sll	r8,r5,r4
   8d798:	308ed83a 	srl	r7,r6,r2
   8d79c:	3108983a 	sll	r4,r6,r4
   8d7a0:	2884d83a 	srl	r2,r5,r2
   8d7a4:	41ccb03a 	or	r6,r8,r7
   8d7a8:	2008c03a 	cmpne	r4,r4,zero
   8d7ac:	310cb03a 	or	r6,r6,r4
   8d7b0:	898dc83a 	sub	r6,r17,r6
   8d7b4:	89a3803a 	cmpltu	r17,r17,r6
   8d7b8:	1887c83a 	sub	r3,r3,r2
   8d7bc:	1c47c83a 	sub	r3,r3,r17
   8d7c0:	3023883a 	mov	r17,r6
   8d7c4:	1880202c 	andhi	r2,r3,128
   8d7c8:	10002326 	beq	r2,zero,8d858 <__subdf3+0x20c>
   8d7cc:	04c02034 	movhi	r19,128
   8d7d0:	9cffffc4 	addi	r19,r19,-1
   8d7d4:	1ce6703a 	and	r19,r3,r19
   8d7d8:	98007a26 	beq	r19,zero,8d9c4 <__subdf3+0x378>
   8d7dc:	9809883a 	mov	r4,r19
   8d7e0:	008e14c0 	call	8e14c <__clzsi2>
   8d7e4:	113ffe04 	addi	r4,r2,-8
   8d7e8:	00c007c4 	movi	r3,31
   8d7ec:	19007b16 	blt	r3,r4,8d9dc <__subdf3+0x390>
   8d7f0:	00800804 	movi	r2,32
   8d7f4:	1105c83a 	sub	r2,r2,r4
   8d7f8:	8884d83a 	srl	r2,r17,r2
   8d7fc:	9906983a 	sll	r3,r19,r4
   8d800:	8922983a 	sll	r17,r17,r4
   8d804:	10c4b03a 	or	r2,r2,r3
   8d808:	24007816 	blt	r4,r16,8d9ec <__subdf3+0x3a0>
   8d80c:	2421c83a 	sub	r16,r4,r16
   8d810:	80c00044 	addi	r3,r16,1
   8d814:	010007c4 	movi	r4,31
   8d818:	20c09516 	blt	r4,r3,8da70 <__subdf3+0x424>
   8d81c:	01400804 	movi	r5,32
   8d820:	28cbc83a 	sub	r5,r5,r3
   8d824:	88c8d83a 	srl	r4,r17,r3
   8d828:	8962983a 	sll	r17,r17,r5
   8d82c:	114a983a 	sll	r5,r2,r5
   8d830:	10c6d83a 	srl	r3,r2,r3
   8d834:	8804c03a 	cmpne	r2,r17,zero
   8d838:	290ab03a 	or	r5,r5,r4
   8d83c:	28a2b03a 	or	r17,r5,r2
   8d840:	0021883a 	mov	r16,zero
   8d844:	003fa206 	br	8d6d0 <__alt_data_end+0xfffabc50>
   8d848:	2090b03a 	or	r8,r4,r2
   8d84c:	40018e26 	beq	r8,zero,8de88 <__subdf3+0x83c>
   8d850:	1007883a 	mov	r3,r2
   8d854:	2023883a 	mov	r17,r4
   8d858:	888001cc 	andi	r2,r17,7
   8d85c:	103f9e1e 	bne	r2,zero,8d6d8 <__alt_data_end+0xfffabc58>
   8d860:	1804977a 	slli	r2,r3,29
   8d864:	8822d0fa 	srli	r17,r17,3
   8d868:	1810d0fa 	srli	r8,r3,3
   8d86c:	9100004c 	andi	r4,r18,1
   8d870:	1444b03a 	or	r2,r2,r17
   8d874:	00c1ffc4 	movi	r3,2047
   8d878:	80c02826 	beq	r16,r3,8d91c <__subdf3+0x2d0>
   8d87c:	01400434 	movhi	r5,16
   8d880:	297fffc4 	addi	r5,r5,-1
   8d884:	80e0703a 	and	r16,r16,r3
   8d888:	414a703a 	and	r5,r8,r5
   8d88c:	003fa806 	br	8d730 <__alt_data_end+0xfffabcb0>
   8d890:	0080630e 	bge	zero,r2,8da20 <__subdf3+0x3d4>
   8d894:	48003026 	beq	r9,zero,8d958 <__subdf3+0x30c>
   8d898:	0101ffc4 	movi	r4,2047
   8d89c:	813f8c26 	beq	r16,r4,8d6d0 <__alt_data_end+0xfffabc50>
   8d8a0:	29402034 	orhi	r5,r5,128
   8d8a4:	01000e04 	movi	r4,56
   8d8a8:	2080a90e 	bge	r4,r2,8db50 <__subdf3+0x504>
   8d8ac:	298cb03a 	or	r6,r5,r6
   8d8b0:	3012c03a 	cmpne	r9,r6,zero
   8d8b4:	0005883a 	mov	r2,zero
   8d8b8:	4c53883a 	add	r9,r9,r17
   8d8bc:	4c63803a 	cmpltu	r17,r9,r17
   8d8c0:	10c7883a 	add	r3,r2,r3
   8d8c4:	88c7883a 	add	r3,r17,r3
   8d8c8:	4823883a 	mov	r17,r9
   8d8cc:	1880202c 	andhi	r2,r3,128
   8d8d0:	1000d026 	beq	r2,zero,8dc14 <__subdf3+0x5c8>
   8d8d4:	84000044 	addi	r16,r16,1
   8d8d8:	0081ffc4 	movi	r2,2047
   8d8dc:	8080fe26 	beq	r16,r2,8dcd8 <__subdf3+0x68c>
   8d8e0:	00bfe034 	movhi	r2,65408
   8d8e4:	10bfffc4 	addi	r2,r2,-1
   8d8e8:	1886703a 	and	r3,r3,r2
   8d8ec:	880ad07a 	srli	r5,r17,1
   8d8f0:	180497fa 	slli	r2,r3,31
   8d8f4:	8900004c 	andi	r4,r17,1
   8d8f8:	2922b03a 	or	r17,r5,r4
   8d8fc:	1806d07a 	srli	r3,r3,1
   8d900:	1462b03a 	or	r17,r2,r17
   8d904:	3825883a 	mov	r18,r7
   8d908:	003f7106 	br	8d6d0 <__alt_data_end+0xfffabc50>
   8d90c:	2984b03a 	or	r2,r5,r6
   8d910:	103f6826 	beq	r2,zero,8d6b4 <__alt_data_end+0xfffabc34>
   8d914:	39c03fcc 	andi	r7,r7,255
   8d918:	003f6706 	br	8d6b8 <__alt_data_end+0xfffabc38>
   8d91c:	4086b03a 	or	r3,r8,r2
   8d920:	18015226 	beq	r3,zero,8de6c <__subdf3+0x820>
   8d924:	00c00434 	movhi	r3,16
   8d928:	41400234 	orhi	r5,r8,8
   8d92c:	18ffffc4 	addi	r3,r3,-1
   8d930:	28ca703a 	and	r5,r5,r3
   8d934:	003f7e06 	br	8d730 <__alt_data_end+0xfffabcb0>
   8d938:	10bfffc4 	addi	r2,r2,-1
   8d93c:	1000491e 	bne	r2,zero,8da64 <__subdf3+0x418>
   8d940:	898fc83a 	sub	r7,r17,r6
   8d944:	89e3803a 	cmpltu	r17,r17,r7
   8d948:	1947c83a 	sub	r3,r3,r5
   8d94c:	1c47c83a 	sub	r3,r3,r17
   8d950:	3823883a 	mov	r17,r7
   8d954:	003f9b06 	br	8d7c4 <__alt_data_end+0xfffabd44>
   8d958:	2988b03a 	or	r4,r5,r6
   8d95c:	203f5c26 	beq	r4,zero,8d6d0 <__alt_data_end+0xfffabc50>
   8d960:	10bfffc4 	addi	r2,r2,-1
   8d964:	1000931e 	bne	r2,zero,8dbb4 <__subdf3+0x568>
   8d968:	898d883a 	add	r6,r17,r6
   8d96c:	3463803a 	cmpltu	r17,r6,r17
   8d970:	1947883a 	add	r3,r3,r5
   8d974:	88c7883a 	add	r3,r17,r3
   8d978:	3023883a 	mov	r17,r6
   8d97c:	003fd306 	br	8d8cc <__alt_data_end+0xfffabe4c>
   8d980:	1000541e 	bne	r2,zero,8dad4 <__subdf3+0x488>
   8d984:	80800044 	addi	r2,r16,1
   8d988:	1081ffcc 	andi	r2,r2,2047
   8d98c:	01000044 	movi	r4,1
   8d990:	2080a20e 	bge	r4,r2,8dc1c <__subdf3+0x5d0>
   8d994:	8989c83a 	sub	r4,r17,r6
   8d998:	8905803a 	cmpltu	r2,r17,r4
   8d99c:	1967c83a 	sub	r19,r3,r5
   8d9a0:	98a7c83a 	sub	r19,r19,r2
   8d9a4:	9880202c 	andhi	r2,r19,128
   8d9a8:	10006326 	beq	r2,zero,8db38 <__subdf3+0x4ec>
   8d9ac:	3463c83a 	sub	r17,r6,r17
   8d9b0:	28c7c83a 	sub	r3,r5,r3
   8d9b4:	344d803a 	cmpltu	r6,r6,r17
   8d9b8:	19a7c83a 	sub	r19,r3,r6
   8d9bc:	3825883a 	mov	r18,r7
   8d9c0:	983f861e 	bne	r19,zero,8d7dc <__alt_data_end+0xfffabd5c>
   8d9c4:	8809883a 	mov	r4,r17
   8d9c8:	008e14c0 	call	8e14c <__clzsi2>
   8d9cc:	10800804 	addi	r2,r2,32
   8d9d0:	113ffe04 	addi	r4,r2,-8
   8d9d4:	00c007c4 	movi	r3,31
   8d9d8:	193f850e 	bge	r3,r4,8d7f0 <__alt_data_end+0xfffabd70>
   8d9dc:	10bff604 	addi	r2,r2,-40
   8d9e0:	8884983a 	sll	r2,r17,r2
   8d9e4:	0023883a 	mov	r17,zero
   8d9e8:	243f880e 	bge	r4,r16,8d80c <__alt_data_end+0xfffabd8c>
   8d9ec:	00ffe034 	movhi	r3,65408
   8d9f0:	18ffffc4 	addi	r3,r3,-1
   8d9f4:	8121c83a 	sub	r16,r16,r4
   8d9f8:	10c6703a 	and	r3,r2,r3
   8d9fc:	003f3406 	br	8d6d0 <__alt_data_end+0xfffabc50>
   8da00:	9100004c 	andi	r4,r18,1
   8da04:	000b883a 	mov	r5,zero
   8da08:	0005883a 	mov	r2,zero
   8da0c:	003f4806 	br	8d730 <__alt_data_end+0xfffabcb0>
   8da10:	298cb03a 	or	r6,r5,r6
   8da14:	300cc03a 	cmpne	r6,r6,zero
   8da18:	0005883a 	mov	r2,zero
   8da1c:	003f6406 	br	8d7b0 <__alt_data_end+0xfffabd30>
   8da20:	10009a1e 	bne	r2,zero,8dc8c <__subdf3+0x640>
   8da24:	82400044 	addi	r9,r16,1
   8da28:	4881ffcc 	andi	r2,r9,2047
   8da2c:	02800044 	movi	r10,1
   8da30:	5080670e 	bge	r10,r2,8dbd0 <__subdf3+0x584>
   8da34:	0081ffc4 	movi	r2,2047
   8da38:	4880af26 	beq	r9,r2,8dcf8 <__subdf3+0x6ac>
   8da3c:	898d883a 	add	r6,r17,r6
   8da40:	1945883a 	add	r2,r3,r5
   8da44:	3447803a 	cmpltu	r3,r6,r17
   8da48:	1887883a 	add	r3,r3,r2
   8da4c:	182297fa 	slli	r17,r3,31
   8da50:	300cd07a 	srli	r6,r6,1
   8da54:	1806d07a 	srli	r3,r3,1
   8da58:	4821883a 	mov	r16,r9
   8da5c:	89a2b03a 	or	r17,r17,r6
   8da60:	003f1b06 	br	8d6d0 <__alt_data_end+0xfffabc50>
   8da64:	0101ffc4 	movi	r4,2047
   8da68:	813f441e 	bne	r16,r4,8d77c <__alt_data_end+0xfffabcfc>
   8da6c:	003f1806 	br	8d6d0 <__alt_data_end+0xfffabc50>
   8da70:	843ff844 	addi	r16,r16,-31
   8da74:	01400804 	movi	r5,32
   8da78:	1408d83a 	srl	r4,r2,r16
   8da7c:	19405026 	beq	r3,r5,8dbc0 <__subdf3+0x574>
   8da80:	01401004 	movi	r5,64
   8da84:	28c7c83a 	sub	r3,r5,r3
   8da88:	10c4983a 	sll	r2,r2,r3
   8da8c:	88a2b03a 	or	r17,r17,r2
   8da90:	8822c03a 	cmpne	r17,r17,zero
   8da94:	2462b03a 	or	r17,r4,r17
   8da98:	0007883a 	mov	r3,zero
   8da9c:	0021883a 	mov	r16,zero
   8daa0:	003f6d06 	br	8d858 <__alt_data_end+0xfffabdd8>
   8daa4:	11fff804 	addi	r7,r2,-32
   8daa8:	01000804 	movi	r4,32
   8daac:	29ced83a 	srl	r7,r5,r7
   8dab0:	11004526 	beq	r2,r4,8dbc8 <__subdf3+0x57c>
   8dab4:	01001004 	movi	r4,64
   8dab8:	2089c83a 	sub	r4,r4,r2
   8dabc:	2904983a 	sll	r2,r5,r4
   8dac0:	118cb03a 	or	r6,r2,r6
   8dac4:	300cc03a 	cmpne	r6,r6,zero
   8dac8:	398cb03a 	or	r6,r7,r6
   8dacc:	0005883a 	mov	r2,zero
   8dad0:	003f3706 	br	8d7b0 <__alt_data_end+0xfffabd30>
   8dad4:	80002a26 	beq	r16,zero,8db80 <__subdf3+0x534>
   8dad8:	0101ffc4 	movi	r4,2047
   8dadc:	49006626 	beq	r9,r4,8dc78 <__subdf3+0x62c>
   8dae0:	0085c83a 	sub	r2,zero,r2
   8dae4:	18c02034 	orhi	r3,r3,128
   8dae8:	01000e04 	movi	r4,56
   8daec:	20807e16 	blt	r4,r2,8dce8 <__subdf3+0x69c>
   8daf0:	010007c4 	movi	r4,31
   8daf4:	2080e716 	blt	r4,r2,8de94 <__subdf3+0x848>
   8daf8:	01000804 	movi	r4,32
   8dafc:	2089c83a 	sub	r4,r4,r2
   8db00:	1914983a 	sll	r10,r3,r4
   8db04:	8890d83a 	srl	r8,r17,r2
   8db08:	8908983a 	sll	r4,r17,r4
   8db0c:	1884d83a 	srl	r2,r3,r2
   8db10:	5222b03a 	or	r17,r10,r8
   8db14:	2006c03a 	cmpne	r3,r4,zero
   8db18:	88e2b03a 	or	r17,r17,r3
   8db1c:	3463c83a 	sub	r17,r6,r17
   8db20:	2885c83a 	sub	r2,r5,r2
   8db24:	344d803a 	cmpltu	r6,r6,r17
   8db28:	1187c83a 	sub	r3,r2,r6
   8db2c:	4821883a 	mov	r16,r9
   8db30:	3825883a 	mov	r18,r7
   8db34:	003f2306 	br	8d7c4 <__alt_data_end+0xfffabd44>
   8db38:	24d0b03a 	or	r8,r4,r19
   8db3c:	40001b1e 	bne	r8,zero,8dbac <__subdf3+0x560>
   8db40:	0005883a 	mov	r2,zero
   8db44:	0009883a 	mov	r4,zero
   8db48:	0021883a 	mov	r16,zero
   8db4c:	003f4906 	br	8d874 <__alt_data_end+0xfffabdf4>
   8db50:	010007c4 	movi	r4,31
   8db54:	20803a16 	blt	r4,r2,8dc40 <__subdf3+0x5f4>
   8db58:	01000804 	movi	r4,32
   8db5c:	2089c83a 	sub	r4,r4,r2
   8db60:	2912983a 	sll	r9,r5,r4
   8db64:	3090d83a 	srl	r8,r6,r2
   8db68:	3108983a 	sll	r4,r6,r4
   8db6c:	2884d83a 	srl	r2,r5,r2
   8db70:	4a12b03a 	or	r9,r9,r8
   8db74:	2008c03a 	cmpne	r4,r4,zero
   8db78:	4912b03a 	or	r9,r9,r4
   8db7c:	003f4e06 	br	8d8b8 <__alt_data_end+0xfffabe38>
   8db80:	1c48b03a 	or	r4,r3,r17
   8db84:	20003c26 	beq	r4,zero,8dc78 <__subdf3+0x62c>
   8db88:	0084303a 	nor	r2,zero,r2
   8db8c:	1000381e 	bne	r2,zero,8dc70 <__subdf3+0x624>
   8db90:	3463c83a 	sub	r17,r6,r17
   8db94:	28c5c83a 	sub	r2,r5,r3
   8db98:	344d803a 	cmpltu	r6,r6,r17
   8db9c:	1187c83a 	sub	r3,r2,r6
   8dba0:	4821883a 	mov	r16,r9
   8dba4:	3825883a 	mov	r18,r7
   8dba8:	003f0606 	br	8d7c4 <__alt_data_end+0xfffabd44>
   8dbac:	2023883a 	mov	r17,r4
   8dbb0:	003f0906 	br	8d7d8 <__alt_data_end+0xfffabd58>
   8dbb4:	0101ffc4 	movi	r4,2047
   8dbb8:	813f3a1e 	bne	r16,r4,8d8a4 <__alt_data_end+0xfffabe24>
   8dbbc:	003ec406 	br	8d6d0 <__alt_data_end+0xfffabc50>
   8dbc0:	0005883a 	mov	r2,zero
   8dbc4:	003fb106 	br	8da8c <__alt_data_end+0xfffac00c>
   8dbc8:	0005883a 	mov	r2,zero
   8dbcc:	003fbc06 	br	8dac0 <__alt_data_end+0xfffac040>
   8dbd0:	1c44b03a 	or	r2,r3,r17
   8dbd4:	80008e1e 	bne	r16,zero,8de10 <__subdf3+0x7c4>
   8dbd8:	1000c826 	beq	r2,zero,8defc <__subdf3+0x8b0>
   8dbdc:	2984b03a 	or	r2,r5,r6
   8dbe0:	103ebb26 	beq	r2,zero,8d6d0 <__alt_data_end+0xfffabc50>
   8dbe4:	8989883a 	add	r4,r17,r6
   8dbe8:	1945883a 	add	r2,r3,r5
   8dbec:	2447803a 	cmpltu	r3,r4,r17
   8dbf0:	1887883a 	add	r3,r3,r2
   8dbf4:	1880202c 	andhi	r2,r3,128
   8dbf8:	2023883a 	mov	r17,r4
   8dbfc:	103f1626 	beq	r2,zero,8d858 <__alt_data_end+0xfffabdd8>
   8dc00:	00bfe034 	movhi	r2,65408
   8dc04:	10bfffc4 	addi	r2,r2,-1
   8dc08:	5021883a 	mov	r16,r10
   8dc0c:	1886703a 	and	r3,r3,r2
   8dc10:	003eaf06 	br	8d6d0 <__alt_data_end+0xfffabc50>
   8dc14:	3825883a 	mov	r18,r7
   8dc18:	003f0f06 	br	8d858 <__alt_data_end+0xfffabdd8>
   8dc1c:	1c44b03a 	or	r2,r3,r17
   8dc20:	8000251e 	bne	r16,zero,8dcb8 <__subdf3+0x66c>
   8dc24:	1000661e 	bne	r2,zero,8ddc0 <__subdf3+0x774>
   8dc28:	2990b03a 	or	r8,r5,r6
   8dc2c:	40009626 	beq	r8,zero,8de88 <__subdf3+0x83c>
   8dc30:	2807883a 	mov	r3,r5
   8dc34:	3023883a 	mov	r17,r6
   8dc38:	3825883a 	mov	r18,r7
   8dc3c:	003ea406 	br	8d6d0 <__alt_data_end+0xfffabc50>
   8dc40:	127ff804 	addi	r9,r2,-32
   8dc44:	01000804 	movi	r4,32
   8dc48:	2a52d83a 	srl	r9,r5,r9
   8dc4c:	11008c26 	beq	r2,r4,8de80 <__subdf3+0x834>
   8dc50:	01001004 	movi	r4,64
   8dc54:	2085c83a 	sub	r2,r4,r2
   8dc58:	2884983a 	sll	r2,r5,r2
   8dc5c:	118cb03a 	or	r6,r2,r6
   8dc60:	300cc03a 	cmpne	r6,r6,zero
   8dc64:	4992b03a 	or	r9,r9,r6
   8dc68:	0005883a 	mov	r2,zero
   8dc6c:	003f1206 	br	8d8b8 <__alt_data_end+0xfffabe38>
   8dc70:	0101ffc4 	movi	r4,2047
   8dc74:	493f9c1e 	bne	r9,r4,8dae8 <__alt_data_end+0xfffac068>
   8dc78:	2807883a 	mov	r3,r5
   8dc7c:	3023883a 	mov	r17,r6
   8dc80:	4821883a 	mov	r16,r9
   8dc84:	3825883a 	mov	r18,r7
   8dc88:	003e9106 	br	8d6d0 <__alt_data_end+0xfffabc50>
   8dc8c:	80001f1e 	bne	r16,zero,8dd0c <__subdf3+0x6c0>
   8dc90:	1c48b03a 	or	r4,r3,r17
   8dc94:	20005a26 	beq	r4,zero,8de00 <__subdf3+0x7b4>
   8dc98:	0084303a 	nor	r2,zero,r2
   8dc9c:	1000561e 	bne	r2,zero,8ddf8 <__subdf3+0x7ac>
   8dca0:	89a3883a 	add	r17,r17,r6
   8dca4:	1945883a 	add	r2,r3,r5
   8dca8:	898d803a 	cmpltu	r6,r17,r6
   8dcac:	3087883a 	add	r3,r6,r2
   8dcb0:	4821883a 	mov	r16,r9
   8dcb4:	003f0506 	br	8d8cc <__alt_data_end+0xfffabe4c>
   8dcb8:	10002b1e 	bne	r2,zero,8dd68 <__subdf3+0x71c>
   8dcbc:	2984b03a 	or	r2,r5,r6
   8dcc0:	10008026 	beq	r2,zero,8dec4 <__subdf3+0x878>
   8dcc4:	2807883a 	mov	r3,r5
   8dcc8:	3023883a 	mov	r17,r6
   8dccc:	3825883a 	mov	r18,r7
   8dcd0:	0401ffc4 	movi	r16,2047
   8dcd4:	003e7e06 	br	8d6d0 <__alt_data_end+0xfffabc50>
   8dcd8:	3809883a 	mov	r4,r7
   8dcdc:	0011883a 	mov	r8,zero
   8dce0:	0005883a 	mov	r2,zero
   8dce4:	003ee306 	br	8d874 <__alt_data_end+0xfffabdf4>
   8dce8:	1c62b03a 	or	r17,r3,r17
   8dcec:	8822c03a 	cmpne	r17,r17,zero
   8dcf0:	0005883a 	mov	r2,zero
   8dcf4:	003f8906 	br	8db1c <__alt_data_end+0xfffac09c>
   8dcf8:	3809883a 	mov	r4,r7
   8dcfc:	4821883a 	mov	r16,r9
   8dd00:	0011883a 	mov	r8,zero
   8dd04:	0005883a 	mov	r2,zero
   8dd08:	003eda06 	br	8d874 <__alt_data_end+0xfffabdf4>
   8dd0c:	0101ffc4 	movi	r4,2047
   8dd10:	49003b26 	beq	r9,r4,8de00 <__subdf3+0x7b4>
   8dd14:	0085c83a 	sub	r2,zero,r2
   8dd18:	18c02034 	orhi	r3,r3,128
   8dd1c:	01000e04 	movi	r4,56
   8dd20:	20806e16 	blt	r4,r2,8dedc <__subdf3+0x890>
   8dd24:	010007c4 	movi	r4,31
   8dd28:	20807716 	blt	r4,r2,8df08 <__subdf3+0x8bc>
   8dd2c:	01000804 	movi	r4,32
   8dd30:	2089c83a 	sub	r4,r4,r2
   8dd34:	1914983a 	sll	r10,r3,r4
   8dd38:	8890d83a 	srl	r8,r17,r2
   8dd3c:	8908983a 	sll	r4,r17,r4
   8dd40:	1884d83a 	srl	r2,r3,r2
   8dd44:	5222b03a 	or	r17,r10,r8
   8dd48:	2006c03a 	cmpne	r3,r4,zero
   8dd4c:	88e2b03a 	or	r17,r17,r3
   8dd50:	89a3883a 	add	r17,r17,r6
   8dd54:	1145883a 	add	r2,r2,r5
   8dd58:	898d803a 	cmpltu	r6,r17,r6
   8dd5c:	3087883a 	add	r3,r6,r2
   8dd60:	4821883a 	mov	r16,r9
   8dd64:	003ed906 	br	8d8cc <__alt_data_end+0xfffabe4c>
   8dd68:	2984b03a 	or	r2,r5,r6
   8dd6c:	10004226 	beq	r2,zero,8de78 <__subdf3+0x82c>
   8dd70:	1808d0fa 	srli	r4,r3,3
   8dd74:	8822d0fa 	srli	r17,r17,3
   8dd78:	1806977a 	slli	r3,r3,29
   8dd7c:	2080022c 	andhi	r2,r4,8
   8dd80:	1c62b03a 	or	r17,r3,r17
   8dd84:	10000826 	beq	r2,zero,8dda8 <__subdf3+0x75c>
   8dd88:	2812d0fa 	srli	r9,r5,3
   8dd8c:	4880022c 	andhi	r2,r9,8
   8dd90:	1000051e 	bne	r2,zero,8dda8 <__subdf3+0x75c>
   8dd94:	300cd0fa 	srli	r6,r6,3
   8dd98:	2804977a 	slli	r2,r5,29
   8dd9c:	4809883a 	mov	r4,r9
   8dda0:	3825883a 	mov	r18,r7
   8dda4:	11a2b03a 	or	r17,r2,r6
   8dda8:	8806d77a 	srli	r3,r17,29
   8ddac:	200890fa 	slli	r4,r4,3
   8ddb0:	882290fa 	slli	r17,r17,3
   8ddb4:	0401ffc4 	movi	r16,2047
   8ddb8:	1906b03a 	or	r3,r3,r4
   8ddbc:	003e4406 	br	8d6d0 <__alt_data_end+0xfffabc50>
   8ddc0:	2984b03a 	or	r2,r5,r6
   8ddc4:	103e4226 	beq	r2,zero,8d6d0 <__alt_data_end+0xfffabc50>
   8ddc8:	8989c83a 	sub	r4,r17,r6
   8ddcc:	8911803a 	cmpltu	r8,r17,r4
   8ddd0:	1945c83a 	sub	r2,r3,r5
   8ddd4:	1205c83a 	sub	r2,r2,r8
   8ddd8:	1200202c 	andhi	r8,r2,128
   8dddc:	403e9a26 	beq	r8,zero,8d848 <__alt_data_end+0xfffabdc8>
   8dde0:	3463c83a 	sub	r17,r6,r17
   8dde4:	28c5c83a 	sub	r2,r5,r3
   8dde8:	344d803a 	cmpltu	r6,r6,r17
   8ddec:	1187c83a 	sub	r3,r2,r6
   8ddf0:	3825883a 	mov	r18,r7
   8ddf4:	003e3606 	br	8d6d0 <__alt_data_end+0xfffabc50>
   8ddf8:	0101ffc4 	movi	r4,2047
   8ddfc:	493fc71e 	bne	r9,r4,8dd1c <__alt_data_end+0xfffac29c>
   8de00:	2807883a 	mov	r3,r5
   8de04:	3023883a 	mov	r17,r6
   8de08:	4821883a 	mov	r16,r9
   8de0c:	003e3006 	br	8d6d0 <__alt_data_end+0xfffabc50>
   8de10:	10003626 	beq	r2,zero,8deec <__subdf3+0x8a0>
   8de14:	2984b03a 	or	r2,r5,r6
   8de18:	10001726 	beq	r2,zero,8de78 <__subdf3+0x82c>
   8de1c:	1808d0fa 	srli	r4,r3,3
   8de20:	8822d0fa 	srli	r17,r17,3
   8de24:	1806977a 	slli	r3,r3,29
   8de28:	2080022c 	andhi	r2,r4,8
   8de2c:	1c62b03a 	or	r17,r3,r17
   8de30:	10000726 	beq	r2,zero,8de50 <__subdf3+0x804>
   8de34:	2812d0fa 	srli	r9,r5,3
   8de38:	4880022c 	andhi	r2,r9,8
   8de3c:	1000041e 	bne	r2,zero,8de50 <__subdf3+0x804>
   8de40:	300cd0fa 	srli	r6,r6,3
   8de44:	2804977a 	slli	r2,r5,29
   8de48:	4809883a 	mov	r4,r9
   8de4c:	11a2b03a 	or	r17,r2,r6
   8de50:	8806d77a 	srli	r3,r17,29
   8de54:	200890fa 	slli	r4,r4,3
   8de58:	882290fa 	slli	r17,r17,3
   8de5c:	3825883a 	mov	r18,r7
   8de60:	1906b03a 	or	r3,r3,r4
   8de64:	0401ffc4 	movi	r16,2047
   8de68:	003e1906 	br	8d6d0 <__alt_data_end+0xfffabc50>
   8de6c:	000b883a 	mov	r5,zero
   8de70:	0005883a 	mov	r2,zero
   8de74:	003e2e06 	br	8d730 <__alt_data_end+0xfffabcb0>
   8de78:	0401ffc4 	movi	r16,2047
   8de7c:	003e1406 	br	8d6d0 <__alt_data_end+0xfffabc50>
   8de80:	0005883a 	mov	r2,zero
   8de84:	003f7506 	br	8dc5c <__alt_data_end+0xfffac1dc>
   8de88:	0005883a 	mov	r2,zero
   8de8c:	0009883a 	mov	r4,zero
   8de90:	003e7806 	br	8d874 <__alt_data_end+0xfffabdf4>
   8de94:	123ff804 	addi	r8,r2,-32
   8de98:	01000804 	movi	r4,32
   8de9c:	1a10d83a 	srl	r8,r3,r8
   8dea0:	11002526 	beq	r2,r4,8df38 <__subdf3+0x8ec>
   8dea4:	01001004 	movi	r4,64
   8dea8:	2085c83a 	sub	r2,r4,r2
   8deac:	1884983a 	sll	r2,r3,r2
   8deb0:	1444b03a 	or	r2,r2,r17
   8deb4:	1004c03a 	cmpne	r2,r2,zero
   8deb8:	40a2b03a 	or	r17,r8,r2
   8debc:	0005883a 	mov	r2,zero
   8dec0:	003f1606 	br	8db1c <__alt_data_end+0xfffac09c>
   8dec4:	02000434 	movhi	r8,16
   8dec8:	0009883a 	mov	r4,zero
   8decc:	423fffc4 	addi	r8,r8,-1
   8ded0:	00bfffc4 	movi	r2,-1
   8ded4:	0401ffc4 	movi	r16,2047
   8ded8:	003e6606 	br	8d874 <__alt_data_end+0xfffabdf4>
   8dedc:	1c62b03a 	or	r17,r3,r17
   8dee0:	8822c03a 	cmpne	r17,r17,zero
   8dee4:	0005883a 	mov	r2,zero
   8dee8:	003f9906 	br	8dd50 <__alt_data_end+0xfffac2d0>
   8deec:	2807883a 	mov	r3,r5
   8def0:	3023883a 	mov	r17,r6
   8def4:	0401ffc4 	movi	r16,2047
   8def8:	003df506 	br	8d6d0 <__alt_data_end+0xfffabc50>
   8defc:	2807883a 	mov	r3,r5
   8df00:	3023883a 	mov	r17,r6
   8df04:	003df206 	br	8d6d0 <__alt_data_end+0xfffabc50>
   8df08:	123ff804 	addi	r8,r2,-32
   8df0c:	01000804 	movi	r4,32
   8df10:	1a10d83a 	srl	r8,r3,r8
   8df14:	11000a26 	beq	r2,r4,8df40 <__subdf3+0x8f4>
   8df18:	01001004 	movi	r4,64
   8df1c:	2085c83a 	sub	r2,r4,r2
   8df20:	1884983a 	sll	r2,r3,r2
   8df24:	1444b03a 	or	r2,r2,r17
   8df28:	1004c03a 	cmpne	r2,r2,zero
   8df2c:	40a2b03a 	or	r17,r8,r2
   8df30:	0005883a 	mov	r2,zero
   8df34:	003f8606 	br	8dd50 <__alt_data_end+0xfffac2d0>
   8df38:	0005883a 	mov	r2,zero
   8df3c:	003fdc06 	br	8deb0 <__alt_data_end+0xfffac430>
   8df40:	0005883a 	mov	r2,zero
   8df44:	003ff706 	br	8df24 <__alt_data_end+0xfffac4a4>

0008df48 <__fixdfsi>:
   8df48:	280cd53a 	srli	r6,r5,20
   8df4c:	00c00434 	movhi	r3,16
   8df50:	18ffffc4 	addi	r3,r3,-1
   8df54:	3181ffcc 	andi	r6,r6,2047
   8df58:	01c0ff84 	movi	r7,1022
   8df5c:	28c6703a 	and	r3,r5,r3
   8df60:	280ad7fa 	srli	r5,r5,31
   8df64:	3980120e 	bge	r7,r6,8dfb0 <__fixdfsi+0x68>
   8df68:	00810744 	movi	r2,1053
   8df6c:	11800c16 	blt	r2,r6,8dfa0 <__fixdfsi+0x58>
   8df70:	00810cc4 	movi	r2,1075
   8df74:	1185c83a 	sub	r2,r2,r6
   8df78:	01c007c4 	movi	r7,31
   8df7c:	18c00434 	orhi	r3,r3,16
   8df80:	38800d16 	blt	r7,r2,8dfb8 <__fixdfsi+0x70>
   8df84:	31befb44 	addi	r6,r6,-1043
   8df88:	2084d83a 	srl	r2,r4,r2
   8df8c:	1986983a 	sll	r3,r3,r6
   8df90:	1884b03a 	or	r2,r3,r2
   8df94:	28000726 	beq	r5,zero,8dfb4 <__fixdfsi+0x6c>
   8df98:	0085c83a 	sub	r2,zero,r2
   8df9c:	f800283a 	ret
   8dfa0:	00a00034 	movhi	r2,32768
   8dfa4:	10bfffc4 	addi	r2,r2,-1
   8dfa8:	2885883a 	add	r2,r5,r2
   8dfac:	f800283a 	ret
   8dfb0:	0005883a 	mov	r2,zero
   8dfb4:	f800283a 	ret
   8dfb8:	008104c4 	movi	r2,1043
   8dfbc:	1185c83a 	sub	r2,r2,r6
   8dfc0:	1884d83a 	srl	r2,r3,r2
   8dfc4:	003ff306 	br	8df94 <__alt_data_end+0xfffac514>

0008dfc8 <__floatsidf>:
   8dfc8:	defffd04 	addi	sp,sp,-12
   8dfcc:	dfc00215 	stw	ra,8(sp)
   8dfd0:	dc400115 	stw	r17,4(sp)
   8dfd4:	dc000015 	stw	r16,0(sp)
   8dfd8:	20002b26 	beq	r4,zero,8e088 <__floatsidf+0xc0>
   8dfdc:	2023883a 	mov	r17,r4
   8dfe0:	2020d7fa 	srli	r16,r4,31
   8dfe4:	20002d16 	blt	r4,zero,8e09c <__floatsidf+0xd4>
   8dfe8:	8809883a 	mov	r4,r17
   8dfec:	008e14c0 	call	8e14c <__clzsi2>
   8dff0:	01410784 	movi	r5,1054
   8dff4:	288bc83a 	sub	r5,r5,r2
   8dff8:	01010cc4 	movi	r4,1075
   8dffc:	2149c83a 	sub	r4,r4,r5
   8e000:	00c007c4 	movi	r3,31
   8e004:	1900160e 	bge	r3,r4,8e060 <__floatsidf+0x98>
   8e008:	00c104c4 	movi	r3,1043
   8e00c:	1947c83a 	sub	r3,r3,r5
   8e010:	88c6983a 	sll	r3,r17,r3
   8e014:	00800434 	movhi	r2,16
   8e018:	10bfffc4 	addi	r2,r2,-1
   8e01c:	1886703a 	and	r3,r3,r2
   8e020:	2941ffcc 	andi	r5,r5,2047
   8e024:	800d883a 	mov	r6,r16
   8e028:	0005883a 	mov	r2,zero
   8e02c:	280a953a 	slli	r5,r5,20
   8e030:	31803fcc 	andi	r6,r6,255
   8e034:	01000434 	movhi	r4,16
   8e038:	300c97fa 	slli	r6,r6,31
   8e03c:	213fffc4 	addi	r4,r4,-1
   8e040:	1906703a 	and	r3,r3,r4
   8e044:	1946b03a 	or	r3,r3,r5
   8e048:	1986b03a 	or	r3,r3,r6
   8e04c:	dfc00217 	ldw	ra,8(sp)
   8e050:	dc400117 	ldw	r17,4(sp)
   8e054:	dc000017 	ldw	r16,0(sp)
   8e058:	dec00304 	addi	sp,sp,12
   8e05c:	f800283a 	ret
   8e060:	00c002c4 	movi	r3,11
   8e064:	1887c83a 	sub	r3,r3,r2
   8e068:	88c6d83a 	srl	r3,r17,r3
   8e06c:	8904983a 	sll	r2,r17,r4
   8e070:	01000434 	movhi	r4,16
   8e074:	213fffc4 	addi	r4,r4,-1
   8e078:	2941ffcc 	andi	r5,r5,2047
   8e07c:	1906703a 	and	r3,r3,r4
   8e080:	800d883a 	mov	r6,r16
   8e084:	003fe906 	br	8e02c <__alt_data_end+0xfffac5ac>
   8e088:	000d883a 	mov	r6,zero
   8e08c:	000b883a 	mov	r5,zero
   8e090:	0007883a 	mov	r3,zero
   8e094:	0005883a 	mov	r2,zero
   8e098:	003fe406 	br	8e02c <__alt_data_end+0xfffac5ac>
   8e09c:	0123c83a 	sub	r17,zero,r4
   8e0a0:	003fd106 	br	8dfe8 <__alt_data_end+0xfffac568>

0008e0a4 <__floatunsidf>:
   8e0a4:	defffe04 	addi	sp,sp,-8
   8e0a8:	dc000015 	stw	r16,0(sp)
   8e0ac:	dfc00115 	stw	ra,4(sp)
   8e0b0:	2021883a 	mov	r16,r4
   8e0b4:	20002226 	beq	r4,zero,8e140 <__floatunsidf+0x9c>
   8e0b8:	008e14c0 	call	8e14c <__clzsi2>
   8e0bc:	01010784 	movi	r4,1054
   8e0c0:	2089c83a 	sub	r4,r4,r2
   8e0c4:	01810cc4 	movi	r6,1075
   8e0c8:	310dc83a 	sub	r6,r6,r4
   8e0cc:	00c007c4 	movi	r3,31
   8e0d0:	1980120e 	bge	r3,r6,8e11c <__floatunsidf+0x78>
   8e0d4:	00c104c4 	movi	r3,1043
   8e0d8:	1907c83a 	sub	r3,r3,r4
   8e0dc:	80ca983a 	sll	r5,r16,r3
   8e0e0:	00800434 	movhi	r2,16
   8e0e4:	10bfffc4 	addi	r2,r2,-1
   8e0e8:	2101ffcc 	andi	r4,r4,2047
   8e0ec:	0021883a 	mov	r16,zero
   8e0f0:	288a703a 	and	r5,r5,r2
   8e0f4:	2008953a 	slli	r4,r4,20
   8e0f8:	00c00434 	movhi	r3,16
   8e0fc:	18ffffc4 	addi	r3,r3,-1
   8e100:	28c6703a 	and	r3,r5,r3
   8e104:	8005883a 	mov	r2,r16
   8e108:	1906b03a 	or	r3,r3,r4
   8e10c:	dfc00117 	ldw	ra,4(sp)
   8e110:	dc000017 	ldw	r16,0(sp)
   8e114:	dec00204 	addi	sp,sp,8
   8e118:	f800283a 	ret
   8e11c:	00c002c4 	movi	r3,11
   8e120:	188bc83a 	sub	r5,r3,r2
   8e124:	814ad83a 	srl	r5,r16,r5
   8e128:	00c00434 	movhi	r3,16
   8e12c:	18ffffc4 	addi	r3,r3,-1
   8e130:	81a0983a 	sll	r16,r16,r6
   8e134:	2101ffcc 	andi	r4,r4,2047
   8e138:	28ca703a 	and	r5,r5,r3
   8e13c:	003fed06 	br	8e0f4 <__alt_data_end+0xfffac674>
   8e140:	0009883a 	mov	r4,zero
   8e144:	000b883a 	mov	r5,zero
   8e148:	003fea06 	br	8e0f4 <__alt_data_end+0xfffac674>

0008e14c <__clzsi2>:
   8e14c:	00bfffd4 	movui	r2,65535
   8e150:	11000536 	bltu	r2,r4,8e168 <__clzsi2+0x1c>
   8e154:	00803fc4 	movi	r2,255
   8e158:	11000f36 	bltu	r2,r4,8e198 <__clzsi2+0x4c>
   8e15c:	00800804 	movi	r2,32
   8e160:	0007883a 	mov	r3,zero
   8e164:	00000506 	br	8e17c <__clzsi2+0x30>
   8e168:	00804034 	movhi	r2,256
   8e16c:	10bfffc4 	addi	r2,r2,-1
   8e170:	11000c2e 	bgeu	r2,r4,8e1a4 <__clzsi2+0x58>
   8e174:	00800204 	movi	r2,8
   8e178:	00c00604 	movi	r3,24
   8e17c:	20c8d83a 	srl	r4,r4,r3
   8e180:	00c00274 	movhi	r3,9
   8e184:	18c3ed04 	addi	r3,r3,4020
   8e188:	1909883a 	add	r4,r3,r4
   8e18c:	20c00003 	ldbu	r3,0(r4)
   8e190:	10c5c83a 	sub	r2,r2,r3
   8e194:	f800283a 	ret
   8e198:	00800604 	movi	r2,24
   8e19c:	00c00204 	movi	r3,8
   8e1a0:	003ff606 	br	8e17c <__alt_data_end+0xfffac6fc>
   8e1a4:	00800404 	movi	r2,16
   8e1a8:	1007883a 	mov	r3,r2
   8e1ac:	003ff306 	br	8e17c <__alt_data_end+0xfffac6fc>

0008e1b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e1b0:	defffe04 	addi	sp,sp,-8
   8e1b4:	dfc00115 	stw	ra,4(sp)
   8e1b8:	df000015 	stw	fp,0(sp)
   8e1bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e1c0:	d0a00b17 	ldw	r2,-32724(gp)
   8e1c4:	10000326 	beq	r2,zero,8e1d4 <alt_get_errno+0x24>
   8e1c8:	d0a00b17 	ldw	r2,-32724(gp)
   8e1cc:	103ee83a 	callr	r2
   8e1d0:	00000106 	br	8e1d8 <alt_get_errno+0x28>
   8e1d4:	d0a75304 	addi	r2,gp,-25268
}
   8e1d8:	e037883a 	mov	sp,fp
   8e1dc:	dfc00117 	ldw	ra,4(sp)
   8e1e0:	df000017 	ldw	fp,0(sp)
   8e1e4:	dec00204 	addi	sp,sp,8
   8e1e8:	f800283a 	ret

0008e1ec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8e1ec:	defffb04 	addi	sp,sp,-20
   8e1f0:	dfc00415 	stw	ra,16(sp)
   8e1f4:	df000315 	stw	fp,12(sp)
   8e1f8:	df000304 	addi	fp,sp,12
   8e1fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8e200:	e0bfff17 	ldw	r2,-4(fp)
   8e204:	10000616 	blt	r2,zero,8e220 <close+0x34>
   8e208:	e0bfff17 	ldw	r2,-4(fp)
   8e20c:	10c00324 	muli	r3,r2,12
   8e210:	00800274 	movhi	r2,9
   8e214:	1086f204 	addi	r2,r2,7112
   8e218:	1885883a 	add	r2,r3,r2
   8e21c:	00000106 	br	8e224 <close+0x38>
   8e220:	0005883a 	mov	r2,zero
   8e224:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   8e228:	e0bffd17 	ldw	r2,-12(fp)
   8e22c:	10001926 	beq	r2,zero,8e294 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8e230:	e0bffd17 	ldw	r2,-12(fp)
   8e234:	10800017 	ldw	r2,0(r2)
   8e238:	10800417 	ldw	r2,16(r2)
   8e23c:	10000626 	beq	r2,zero,8e258 <close+0x6c>
   8e240:	e0bffd17 	ldw	r2,-12(fp)
   8e244:	10800017 	ldw	r2,0(r2)
   8e248:	10800417 	ldw	r2,16(r2)
   8e24c:	e13ffd17 	ldw	r4,-12(fp)
   8e250:	103ee83a 	callr	r2
   8e254:	00000106 	br	8e25c <close+0x70>
   8e258:	0005883a 	mov	r2,zero
   8e25c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8e260:	e13fff17 	ldw	r4,-4(fp)
   8e264:	008eec00 	call	8eec0 <alt_release_fd>
    if (rval < 0)
   8e268:	e0bffe17 	ldw	r2,-8(fp)
   8e26c:	1000070e 	bge	r2,zero,8e28c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   8e270:	008e1b00 	call	8e1b0 <alt_get_errno>
   8e274:	1007883a 	mov	r3,r2
   8e278:	e0bffe17 	ldw	r2,-8(fp)
   8e27c:	0085c83a 	sub	r2,zero,r2
   8e280:	18800015 	stw	r2,0(r3)
      return -1;
   8e284:	00bfffc4 	movi	r2,-1
   8e288:	00000706 	br	8e2a8 <close+0xbc>
    }
    return 0;
   8e28c:	0005883a 	mov	r2,zero
   8e290:	00000506 	br	8e2a8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e294:	008e1b00 	call	8e1b0 <alt_get_errno>
   8e298:	1007883a 	mov	r3,r2
   8e29c:	00801444 	movi	r2,81
   8e2a0:	18800015 	stw	r2,0(r3)
    return -1;
   8e2a4:	00bfffc4 	movi	r2,-1
  }
}
   8e2a8:	e037883a 	mov	sp,fp
   8e2ac:	dfc00117 	ldw	ra,4(sp)
   8e2b0:	df000017 	ldw	fp,0(sp)
   8e2b4:	dec00204 	addi	sp,sp,8
   8e2b8:	f800283a 	ret

0008e2bc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8e2bc:	defffc04 	addi	sp,sp,-16
   8e2c0:	df000315 	stw	fp,12(sp)
   8e2c4:	df000304 	addi	fp,sp,12
   8e2c8:	e13ffd15 	stw	r4,-12(fp)
   8e2cc:	e17ffe15 	stw	r5,-8(fp)
   8e2d0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8e2d4:	e0bfff17 	ldw	r2,-4(fp)
}
   8e2d8:	e037883a 	mov	sp,fp
   8e2dc:	df000017 	ldw	fp,0(sp)
   8e2e0:	dec00104 	addi	sp,sp,4
   8e2e4:	f800283a 	ret

0008e2e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e2e8:	defffe04 	addi	sp,sp,-8
   8e2ec:	dfc00115 	stw	ra,4(sp)
   8e2f0:	df000015 	stw	fp,0(sp)
   8e2f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e2f8:	d0a00b17 	ldw	r2,-32724(gp)
   8e2fc:	10000326 	beq	r2,zero,8e30c <alt_get_errno+0x24>
   8e300:	d0a00b17 	ldw	r2,-32724(gp)
   8e304:	103ee83a 	callr	r2
   8e308:	00000106 	br	8e310 <alt_get_errno+0x28>
   8e30c:	d0a75304 	addi	r2,gp,-25268
}
   8e310:	e037883a 	mov	sp,fp
   8e314:	dfc00117 	ldw	ra,4(sp)
   8e318:	df000017 	ldw	fp,0(sp)
   8e31c:	dec00204 	addi	sp,sp,8
   8e320:	f800283a 	ret

0008e324 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8e324:	defffb04 	addi	sp,sp,-20
   8e328:	dfc00415 	stw	ra,16(sp)
   8e32c:	df000315 	stw	fp,12(sp)
   8e330:	df000304 	addi	fp,sp,12
   8e334:	e13ffe15 	stw	r4,-8(fp)
   8e338:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e33c:	e0bffe17 	ldw	r2,-8(fp)
   8e340:	10000616 	blt	r2,zero,8e35c <fstat+0x38>
   8e344:	e0bffe17 	ldw	r2,-8(fp)
   8e348:	10c00324 	muli	r3,r2,12
   8e34c:	00800274 	movhi	r2,9
   8e350:	1086f204 	addi	r2,r2,7112
   8e354:	1885883a 	add	r2,r3,r2
   8e358:	00000106 	br	8e360 <fstat+0x3c>
   8e35c:	0005883a 	mov	r2,zero
   8e360:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   8e364:	e0bffd17 	ldw	r2,-12(fp)
   8e368:	10001026 	beq	r2,zero,8e3ac <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8e36c:	e0bffd17 	ldw	r2,-12(fp)
   8e370:	10800017 	ldw	r2,0(r2)
   8e374:	10800817 	ldw	r2,32(r2)
   8e378:	10000726 	beq	r2,zero,8e398 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   8e37c:	e0bffd17 	ldw	r2,-12(fp)
   8e380:	10800017 	ldw	r2,0(r2)
   8e384:	10800817 	ldw	r2,32(r2)
   8e388:	e17fff17 	ldw	r5,-4(fp)
   8e38c:	e13ffd17 	ldw	r4,-12(fp)
   8e390:	103ee83a 	callr	r2
   8e394:	00000a06 	br	8e3c0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8e398:	e0bfff17 	ldw	r2,-4(fp)
   8e39c:	00c80004 	movi	r3,8192
   8e3a0:	10c00115 	stw	r3,4(r2)
      return 0;
   8e3a4:	0005883a 	mov	r2,zero
   8e3a8:	00000506 	br	8e3c0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e3ac:	008e2e80 	call	8e2e8 <alt_get_errno>
   8e3b0:	1007883a 	mov	r3,r2
   8e3b4:	00801444 	movi	r2,81
   8e3b8:	18800015 	stw	r2,0(r3)
    return -1;
   8e3bc:	00bfffc4 	movi	r2,-1
  }
}
   8e3c0:	e037883a 	mov	sp,fp
   8e3c4:	dfc00117 	ldw	ra,4(sp)
   8e3c8:	df000017 	ldw	fp,0(sp)
   8e3cc:	dec00204 	addi	sp,sp,8
   8e3d0:	f800283a 	ret

0008e3d4 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
   8e3d4:	defff404 	addi	sp,sp,-48
   8e3d8:	dfc00b15 	stw	ra,44(sp)
   8e3dc:	df000a15 	stw	fp,40(sp)
   8e3e0:	dd000915 	stw	r20,36(sp)
   8e3e4:	dcc00815 	stw	r19,32(sp)
   8e3e8:	dc800715 	stw	r18,28(sp)
   8e3ec:	dc400615 	stw	r17,24(sp)
   8e3f0:	dc000515 	stw	r16,20(sp)
   8e3f4:	df000a04 	addi	fp,sp,40
   8e3f8:	e13ff915 	stw	r4,-28(fp)
   8e3fc:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
   8e400:	e0bffa17 	ldw	r2,-24(fp)
   8e404:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8e408:	d0a76317 	ldw	r2,-25204(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
   8e40c:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8e410:	d0a76217 	ldw	r2,-25208(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
   8e414:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
   8e418:	e0bff817 	ldw	r2,-32(fp)
   8e41c:	10005f26 	beq	r2,zero,8e59c <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   8e420:	d0a75c17 	ldw	r2,-25232(gp)
   8e424:	1029883a 	mov	r20,r2
   8e428:	e17ff817 	ldw	r5,-32(fp)
   8e42c:	e13ff717 	ldw	r4,-36(fp)
   8e430:	00818000 	call	81800 <__udivsi3>
   8e434:	a085883a 	add	r2,r20,r2
   8e438:	1007883a 	mov	r3,r2
   8e43c:	e0bff917 	ldw	r2,-28(fp)
   8e440:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
   8e444:	d0a75d17 	ldw	r2,-25228(gp)
   8e448:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
   8e44c:	e0bff717 	ldw	r2,-36(fp)
   8e450:	1021883a 	mov	r16,r2
   8e454:	0023883a 	mov	r17,zero
   8e458:	e17ff817 	ldw	r5,-32(fp)
   8e45c:	010003f4 	movhi	r4,15
   8e460:	21109004 	addi	r4,r4,16960
   8e464:	00818000 	call	81800 <__udivsi3>
   8e468:	1025883a 	mov	r18,r2
   8e46c:	0027883a 	mov	r19,zero
   8e470:	900d883a 	mov	r6,r18
   8e474:	980f883a 	mov	r7,r19
   8e478:	8009883a 	mov	r4,r16
   8e47c:	880b883a 	mov	r5,r17
   8e480:	008b0380 	call	8b038 <__muldi3>
   8e484:	1009883a 	mov	r4,r2
   8e488:	180b883a 	mov	r5,r3
   8e48c:	2005883a 	mov	r2,r4
   8e490:	2807883a 	mov	r3,r5
   8e494:	018003f4 	movhi	r6,15
   8e498:	31909004 	addi	r6,r6,16960
   8e49c:	000f883a 	mov	r7,zero
   8e4a0:	1009883a 	mov	r4,r2
   8e4a4:	180b883a 	mov	r5,r3
   8e4a8:	008b6100 	call	8b610 <__umoddi3>
   8e4ac:	1009883a 	mov	r4,r2
   8e4b0:	180b883a 	mov	r5,r3
   8e4b4:	2005883a 	mov	r2,r4
   8e4b8:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
   8e4bc:	a085883a 	add	r2,r20,r2
   8e4c0:	1007883a 	mov	r3,r2
   8e4c4:	e0bff917 	ldw	r2,-28(fp)
   8e4c8:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   8e4cc:	00001406 	br	8e520 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
   8e4d0:	e0bff917 	ldw	r2,-28(fp)
   8e4d4:	10800017 	ldw	r2,0(r2)
   8e4d8:	00800516 	blt	zero,r2,8e4f0 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
   8e4dc:	e0bff917 	ldw	r2,-28(fp)
   8e4e0:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
   8e4e4:	e0bff917 	ldw	r2,-28(fp)
   8e4e8:	10000115 	stw	zero,4(r2)
          break;
   8e4ec:	00000f06 	br	8e52c <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
   8e4f0:	e0bff917 	ldw	r2,-28(fp)
   8e4f4:	10800017 	ldw	r2,0(r2)
   8e4f8:	10ffffc4 	addi	r3,r2,-1
   8e4fc:	e0bff917 	ldw	r2,-28(fp)
   8e500:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
   8e504:	e0bff917 	ldw	r2,-28(fp)
   8e508:	10c00117 	ldw	r3,4(r2)
   8e50c:	008003f4 	movhi	r2,15
   8e510:	10909004 	addi	r2,r2,16960
   8e514:	1887883a 	add	r3,r3,r2
   8e518:	e0bff917 	ldw	r2,-28(fp)
   8e51c:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   8e520:	e0bff917 	ldw	r2,-28(fp)
   8e524:	10800117 	ldw	r2,4(r2)
   8e528:	103fe916 	blt	r2,zero,8e4d0 <__alt_data_end+0xfffaca50>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   8e52c:	00000c06 	br	8e560 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
   8e530:	e0bff917 	ldw	r2,-28(fp)
   8e534:	10800017 	ldw	r2,0(r2)
   8e538:	10c00044 	addi	r3,r2,1
   8e53c:	e0bff917 	ldw	r2,-28(fp)
   8e540:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
   8e544:	e0bff917 	ldw	r2,-28(fp)
   8e548:	10c00117 	ldw	r3,4(r2)
   8e54c:	00bffc74 	movhi	r2,65521
   8e550:	10af7004 	addi	r2,r2,-16960
   8e554:	1887883a 	add	r3,r3,r2
   8e558:	e0bff917 	ldw	r2,-28(fp)
   8e55c:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   8e560:	e0bff917 	ldw	r2,-28(fp)
   8e564:	10c00117 	ldw	r3,4(r2)
   8e568:	008003f4 	movhi	r2,15
   8e56c:	10908fc4 	addi	r2,r2,16959
   8e570:	10ffef16 	blt	r2,r3,8e530 <__alt_data_end+0xfffacab0>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
   8e574:	e0bff617 	ldw	r2,-40(fp)
   8e578:	10000626 	beq	r2,zero,8e594 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
   8e57c:	d0e75a17 	ldw	r3,-25240(gp)
   8e580:	e0bff617 	ldw	r2,-40(fp)
   8e584:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
   8e588:	d0e75b17 	ldw	r3,-25236(gp)
   8e58c:	e0bff617 	ldw	r2,-40(fp)
   8e590:	10c00115 	stw	r3,4(r2)
    }

    return 0;
   8e594:	0005883a 	mov	r2,zero
   8e598:	00000106 	br	8e5a0 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
   8e59c:	00bfde84 	movi	r2,-134
}
   8e5a0:	e6fffb04 	addi	sp,fp,-20
   8e5a4:	dfc00617 	ldw	ra,24(sp)
   8e5a8:	df000517 	ldw	fp,20(sp)
   8e5ac:	dd000417 	ldw	r20,16(sp)
   8e5b0:	dcc00317 	ldw	r19,12(sp)
   8e5b4:	dc800217 	ldw	r18,8(sp)
   8e5b8:	dc400117 	ldw	r17,4(sp)
   8e5bc:	dc000017 	ldw	r16,0(sp)
   8e5c0:	dec00704 	addi	sp,sp,28
   8e5c4:	f800283a 	ret

0008e5c8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8e5c8:	defff904 	addi	sp,sp,-28
   8e5cc:	dfc00615 	stw	ra,24(sp)
   8e5d0:	df000515 	stw	fp,20(sp)
   8e5d4:	df000504 	addi	fp,sp,20
   8e5d8:	e13ffc15 	stw	r4,-16(fp)
   8e5dc:	e17ffd15 	stw	r5,-12(fp)
   8e5e0:	e1bffe15 	stw	r6,-8(fp)
   8e5e4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8e5e8:	e0800217 	ldw	r2,8(fp)
   8e5ec:	d8800015 	stw	r2,0(sp)
   8e5f0:	e1ffff17 	ldw	r7,-4(fp)
   8e5f4:	e1bffe17 	ldw	r6,-8(fp)
   8e5f8:	e17ffd17 	ldw	r5,-12(fp)
   8e5fc:	e13ffc17 	ldw	r4,-16(fp)
   8e600:	008e7780 	call	8e778 <alt_iic_isr_register>
}  
   8e604:	e037883a 	mov	sp,fp
   8e608:	dfc00117 	ldw	ra,4(sp)
   8e60c:	df000017 	ldw	fp,0(sp)
   8e610:	dec00204 	addi	sp,sp,8
   8e614:	f800283a 	ret

0008e618 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8e618:	defff904 	addi	sp,sp,-28
   8e61c:	df000615 	stw	fp,24(sp)
   8e620:	df000604 	addi	fp,sp,24
   8e624:	e13ffe15 	stw	r4,-8(fp)
   8e628:	e17fff15 	stw	r5,-4(fp)
   8e62c:	e0bfff17 	ldw	r2,-4(fp)
   8e630:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e634:	0005303a 	rdctl	r2,status
   8e638:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e63c:	e0fffb17 	ldw	r3,-20(fp)
   8e640:	00bfff84 	movi	r2,-2
   8e644:	1884703a 	and	r2,r3,r2
   8e648:	1001703a 	wrctl	status,r2
  
  return context;
   8e64c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8e650:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   8e654:	00c00044 	movi	r3,1
   8e658:	e0bffa17 	ldw	r2,-24(fp)
   8e65c:	1884983a 	sll	r2,r3,r2
   8e660:	1007883a 	mov	r3,r2
   8e664:	d0a75e17 	ldw	r2,-25224(gp)
   8e668:	1884b03a 	or	r2,r3,r2
   8e66c:	d0a75e15 	stw	r2,-25224(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8e670:	d0a75e17 	ldw	r2,-25224(gp)
   8e674:	100170fa 	wrctl	ienable,r2
   8e678:	e0bffc17 	ldw	r2,-16(fp)
   8e67c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e680:	e0bffd17 	ldw	r2,-12(fp)
   8e684:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8e688:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   8e68c:	0001883a 	nop
}
   8e690:	e037883a 	mov	sp,fp
   8e694:	df000017 	ldw	fp,0(sp)
   8e698:	dec00104 	addi	sp,sp,4
   8e69c:	f800283a 	ret

0008e6a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8e6a0:	defff904 	addi	sp,sp,-28
   8e6a4:	df000615 	stw	fp,24(sp)
   8e6a8:	df000604 	addi	fp,sp,24
   8e6ac:	e13ffe15 	stw	r4,-8(fp)
   8e6b0:	e17fff15 	stw	r5,-4(fp)
   8e6b4:	e0bfff17 	ldw	r2,-4(fp)
   8e6b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e6bc:	0005303a 	rdctl	r2,status
   8e6c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e6c4:	e0fffb17 	ldw	r3,-20(fp)
   8e6c8:	00bfff84 	movi	r2,-2
   8e6cc:	1884703a 	and	r2,r3,r2
   8e6d0:	1001703a 	wrctl	status,r2
  
  return context;
   8e6d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8e6d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   8e6dc:	00c00044 	movi	r3,1
   8e6e0:	e0bffa17 	ldw	r2,-24(fp)
   8e6e4:	1884983a 	sll	r2,r3,r2
   8e6e8:	0084303a 	nor	r2,zero,r2
   8e6ec:	1007883a 	mov	r3,r2
   8e6f0:	d0a75e17 	ldw	r2,-25224(gp)
   8e6f4:	1884703a 	and	r2,r3,r2
   8e6f8:	d0a75e15 	stw	r2,-25224(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8e6fc:	d0a75e17 	ldw	r2,-25224(gp)
   8e700:	100170fa 	wrctl	ienable,r2
   8e704:	e0bffc17 	ldw	r2,-16(fp)
   8e708:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e70c:	e0bffd17 	ldw	r2,-12(fp)
   8e710:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8e714:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   8e718:	0001883a 	nop
}
   8e71c:	e037883a 	mov	sp,fp
   8e720:	df000017 	ldw	fp,0(sp)
   8e724:	dec00104 	addi	sp,sp,4
   8e728:	f800283a 	ret

0008e72c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8e72c:	defffc04 	addi	sp,sp,-16
   8e730:	df000315 	stw	fp,12(sp)
   8e734:	df000304 	addi	fp,sp,12
   8e738:	e13ffe15 	stw	r4,-8(fp)
   8e73c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8e740:	000530fa 	rdctl	r2,ienable
   8e744:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8e748:	00c00044 	movi	r3,1
   8e74c:	e0bfff17 	ldw	r2,-4(fp)
   8e750:	1884983a 	sll	r2,r3,r2
   8e754:	1007883a 	mov	r3,r2
   8e758:	e0bffd17 	ldw	r2,-12(fp)
   8e75c:	1884703a 	and	r2,r3,r2
   8e760:	1004c03a 	cmpne	r2,r2,zero
   8e764:	10803fcc 	andi	r2,r2,255
}
   8e768:	e037883a 	mov	sp,fp
   8e76c:	df000017 	ldw	fp,0(sp)
   8e770:	dec00104 	addi	sp,sp,4
   8e774:	f800283a 	ret

0008e778 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8e778:	defff504 	addi	sp,sp,-44
   8e77c:	dfc00a15 	stw	ra,40(sp)
   8e780:	df000915 	stw	fp,36(sp)
   8e784:	df000904 	addi	fp,sp,36
   8e788:	e13ffc15 	stw	r4,-16(fp)
   8e78c:	e17ffd15 	stw	r5,-12(fp)
   8e790:	e1bffe15 	stw	r6,-8(fp)
   8e794:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   8e798:	00bffa84 	movi	r2,-22
   8e79c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8e7a0:	e0bffd17 	ldw	r2,-12(fp)
   8e7a4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8e7a8:	e0bff817 	ldw	r2,-32(fp)
   8e7ac:	10800808 	cmpgei	r2,r2,32
   8e7b0:	1000271e 	bne	r2,zero,8e850 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e7b4:	0005303a 	rdctl	r2,status
   8e7b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e7bc:	e0fffb17 	ldw	r3,-20(fp)
   8e7c0:	00bfff84 	movi	r2,-2
   8e7c4:	1884703a 	and	r2,r3,r2
   8e7c8:	1001703a 	wrctl	status,r2
  
  return context;
   8e7cc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8e7d0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   8e7d4:	00800274 	movhi	r2,9
   8e7d8:	10931504 	addi	r2,r2,19540
   8e7dc:	e0fff817 	ldw	r3,-32(fp)
   8e7e0:	180690fa 	slli	r3,r3,3
   8e7e4:	10c5883a 	add	r2,r2,r3
   8e7e8:	e0fffe17 	ldw	r3,-8(fp)
   8e7ec:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   8e7f0:	00800274 	movhi	r2,9
   8e7f4:	10931504 	addi	r2,r2,19540
   8e7f8:	e0fff817 	ldw	r3,-32(fp)
   8e7fc:	180690fa 	slli	r3,r3,3
   8e800:	10c5883a 	add	r2,r2,r3
   8e804:	10800104 	addi	r2,r2,4
   8e808:	e0ffff17 	ldw	r3,-4(fp)
   8e80c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8e810:	e0bffe17 	ldw	r2,-8(fp)
   8e814:	10000526 	beq	r2,zero,8e82c <alt_iic_isr_register+0xb4>
   8e818:	e0bff817 	ldw	r2,-32(fp)
   8e81c:	100b883a 	mov	r5,r2
   8e820:	e13ffc17 	ldw	r4,-16(fp)
   8e824:	008e6180 	call	8e618 <alt_ic_irq_enable>
   8e828:	00000406 	br	8e83c <alt_iic_isr_register+0xc4>
   8e82c:	e0bff817 	ldw	r2,-32(fp)
   8e830:	100b883a 	mov	r5,r2
   8e834:	e13ffc17 	ldw	r4,-16(fp)
   8e838:	008e6a00 	call	8e6a0 <alt_ic_irq_disable>
   8e83c:	e0bff715 	stw	r2,-36(fp)
   8e840:	e0bffa17 	ldw	r2,-24(fp)
   8e844:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e848:	e0bff917 	ldw	r2,-28(fp)
   8e84c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8e850:	e0bff717 	ldw	r2,-36(fp)
}
   8e854:	e037883a 	mov	sp,fp
   8e858:	dfc00117 	ldw	ra,4(sp)
   8e85c:	df000017 	ldw	fp,0(sp)
   8e860:	dec00204 	addi	sp,sp,8
   8e864:	f800283a 	ret

0008e868 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   8e868:	defff004 	addi	sp,sp,-64
   8e86c:	df000f15 	stw	fp,60(sp)
   8e870:	df000f04 	addi	fp,sp,60
   8e874:	e13ffd15 	stw	r4,-12(fp)
   8e878:	e17ffe15 	stw	r5,-8(fp)
   8e87c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   8e880:	00bffa84 	movi	r2,-22
   8e884:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8e888:	e0bffd17 	ldw	r2,-12(fp)
   8e88c:	10800828 	cmpgeui	r2,r2,32
   8e890:	1000501e 	bne	r2,zero,8e9d4 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e894:	0005303a 	rdctl	r2,status
   8e898:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e89c:	e0fff617 	ldw	r3,-40(fp)
   8e8a0:	00bfff84 	movi	r2,-2
   8e8a4:	1884703a 	and	r2,r3,r2
   8e8a8:	1001703a 	wrctl	status,r2
  
  return context;
   8e8ac:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   8e8b0:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   8e8b4:	00800274 	movhi	r2,9
   8e8b8:	10931504 	addi	r2,r2,19540
   8e8bc:	e0fffd17 	ldw	r3,-12(fp)
   8e8c0:	180690fa 	slli	r3,r3,3
   8e8c4:	10c5883a 	add	r2,r2,r3
   8e8c8:	e0ffff17 	ldw	r3,-4(fp)
   8e8cc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   8e8d0:	00800274 	movhi	r2,9
   8e8d4:	10931504 	addi	r2,r2,19540
   8e8d8:	e0fffd17 	ldw	r3,-12(fp)
   8e8dc:	180690fa 	slli	r3,r3,3
   8e8e0:	10c5883a 	add	r2,r2,r3
   8e8e4:	10800104 	addi	r2,r2,4
   8e8e8:	e0fffe17 	ldw	r3,-8(fp)
   8e8ec:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   8e8f0:	e0bfff17 	ldw	r2,-4(fp)
   8e8f4:	10001926 	beq	r2,zero,8e95c <alt_irq_register+0xf4>
   8e8f8:	e0bffd17 	ldw	r2,-12(fp)
   8e8fc:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e900:	0005303a 	rdctl	r2,status
   8e904:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e908:	e0fff717 	ldw	r3,-36(fp)
   8e90c:	00bfff84 	movi	r2,-2
   8e910:	1884703a 	and	r2,r3,r2
   8e914:	1001703a 	wrctl	status,r2
  
  return context;
   8e918:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8e91c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   8e920:	00c00044 	movi	r3,1
   8e924:	e0bff217 	ldw	r2,-56(fp)
   8e928:	1884983a 	sll	r2,r3,r2
   8e92c:	1007883a 	mov	r3,r2
   8e930:	d0a75e17 	ldw	r2,-25224(gp)
   8e934:	1884b03a 	or	r2,r3,r2
   8e938:	d0a75e15 	stw	r2,-25224(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8e93c:	d0a75e17 	ldw	r2,-25224(gp)
   8e940:	100170fa 	wrctl	ienable,r2
   8e944:	e0bff817 	ldw	r2,-32(fp)
   8e948:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e94c:	e0bff917 	ldw	r2,-28(fp)
   8e950:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8e954:	0005883a 	mov	r2,zero
   8e958:	00001906 	br	8e9c0 <alt_irq_register+0x158>
   8e95c:	e0bffd17 	ldw	r2,-12(fp)
   8e960:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e964:	0005303a 	rdctl	r2,status
   8e968:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e96c:	e0fffa17 	ldw	r3,-24(fp)
   8e970:	00bfff84 	movi	r2,-2
   8e974:	1884703a 	and	r2,r3,r2
   8e978:	1001703a 	wrctl	status,r2
  
  return context;
   8e97c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8e980:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   8e984:	00c00044 	movi	r3,1
   8e988:	e0bff417 	ldw	r2,-48(fp)
   8e98c:	1884983a 	sll	r2,r3,r2
   8e990:	0084303a 	nor	r2,zero,r2
   8e994:	1007883a 	mov	r3,r2
   8e998:	d0a75e17 	ldw	r2,-25224(gp)
   8e99c:	1884703a 	and	r2,r3,r2
   8e9a0:	d0a75e15 	stw	r2,-25224(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8e9a4:	d0a75e17 	ldw	r2,-25224(gp)
   8e9a8:	100170fa 	wrctl	ienable,r2
   8e9ac:	e0bffb17 	ldw	r2,-20(fp)
   8e9b0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e9b4:	e0bffc17 	ldw	r2,-16(fp)
   8e9b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8e9bc:	0005883a 	mov	r2,zero
   8e9c0:	e0bff115 	stw	r2,-60(fp)
   8e9c4:	e0bff317 	ldw	r2,-52(fp)
   8e9c8:	e0bff515 	stw	r2,-44(fp)
   8e9cc:	e0bff517 	ldw	r2,-44(fp)
   8e9d0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   8e9d4:	e0bff117 	ldw	r2,-60(fp)
}
   8e9d8:	e037883a 	mov	sp,fp
   8e9dc:	df000017 	ldw	fp,0(sp)
   8e9e0:	dec00104 	addi	sp,sp,4
   8e9e4:	f800283a 	ret

0008e9e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e9e8:	defffe04 	addi	sp,sp,-8
   8e9ec:	dfc00115 	stw	ra,4(sp)
   8e9f0:	df000015 	stw	fp,0(sp)
   8e9f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e9f8:	d0a00b17 	ldw	r2,-32724(gp)
   8e9fc:	10000326 	beq	r2,zero,8ea0c <alt_get_errno+0x24>
   8ea00:	d0a00b17 	ldw	r2,-32724(gp)
   8ea04:	103ee83a 	callr	r2
   8ea08:	00000106 	br	8ea10 <alt_get_errno+0x28>
   8ea0c:	d0a75304 	addi	r2,gp,-25268
}
   8ea10:	e037883a 	mov	sp,fp
   8ea14:	dfc00117 	ldw	ra,4(sp)
   8ea18:	df000017 	ldw	fp,0(sp)
   8ea1c:	dec00204 	addi	sp,sp,8
   8ea20:	f800283a 	ret

0008ea24 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8ea24:	deffed04 	addi	sp,sp,-76
   8ea28:	dfc01215 	stw	ra,72(sp)
   8ea2c:	df001115 	stw	fp,68(sp)
   8ea30:	df001104 	addi	fp,sp,68
   8ea34:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ea38:	e0bfff17 	ldw	r2,-4(fp)
   8ea3c:	10000616 	blt	r2,zero,8ea58 <isatty+0x34>
   8ea40:	e0bfff17 	ldw	r2,-4(fp)
   8ea44:	10c00324 	muli	r3,r2,12
   8ea48:	00800274 	movhi	r2,9
   8ea4c:	1086f204 	addi	r2,r2,7112
   8ea50:	1885883a 	add	r2,r3,r2
   8ea54:	00000106 	br	8ea5c <isatty+0x38>
   8ea58:	0005883a 	mov	r2,zero
   8ea5c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   8ea60:	e0bfef17 	ldw	r2,-68(fp)
   8ea64:	10000e26 	beq	r2,zero,8eaa0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8ea68:	e0bfef17 	ldw	r2,-68(fp)
   8ea6c:	10800017 	ldw	r2,0(r2)
   8ea70:	10800817 	ldw	r2,32(r2)
   8ea74:	1000021e 	bne	r2,zero,8ea80 <isatty+0x5c>
    {
      return 1;
   8ea78:	00800044 	movi	r2,1
   8ea7c:	00000d06 	br	8eab4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8ea80:	e0bff004 	addi	r2,fp,-64
   8ea84:	100b883a 	mov	r5,r2
   8ea88:	e13fff17 	ldw	r4,-4(fp)
   8ea8c:	008e3240 	call	8e324 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8ea90:	e0bff117 	ldw	r2,-60(fp)
   8ea94:	10880020 	cmpeqi	r2,r2,8192
   8ea98:	10803fcc 	andi	r2,r2,255
   8ea9c:	00000506 	br	8eab4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8eaa0:	008e9e80 	call	8e9e8 <alt_get_errno>
   8eaa4:	1007883a 	mov	r3,r2
   8eaa8:	00801444 	movi	r2,81
   8eaac:	18800015 	stw	r2,0(r3)
    return 0;
   8eab0:	0005883a 	mov	r2,zero
  }
}
   8eab4:	e037883a 	mov	sp,fp
   8eab8:	dfc00117 	ldw	ra,4(sp)
   8eabc:	df000017 	ldw	fp,0(sp)
   8eac0:	dec00204 	addi	sp,sp,8
   8eac4:	f800283a 	ret

0008eac8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8eac8:	defffc04 	addi	sp,sp,-16
   8eacc:	df000315 	stw	fp,12(sp)
   8ead0:	df000304 	addi	fp,sp,12
   8ead4:	e13ffd15 	stw	r4,-12(fp)
   8ead8:	e17ffe15 	stw	r5,-8(fp)
   8eadc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8eae0:	e0fffe17 	ldw	r3,-8(fp)
   8eae4:	e0bffd17 	ldw	r2,-12(fp)
   8eae8:	18800c26 	beq	r3,r2,8eb1c <alt_load_section+0x54>
  {
    while( to != end )
   8eaec:	00000806 	br	8eb10 <alt_load_section+0x48>
    {
      *to++ = *from++;
   8eaf0:	e0bffe17 	ldw	r2,-8(fp)
   8eaf4:	10c00104 	addi	r3,r2,4
   8eaf8:	e0fffe15 	stw	r3,-8(fp)
   8eafc:	e0fffd17 	ldw	r3,-12(fp)
   8eb00:	19000104 	addi	r4,r3,4
   8eb04:	e13ffd15 	stw	r4,-12(fp)
   8eb08:	18c00017 	ldw	r3,0(r3)
   8eb0c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8eb10:	e0fffe17 	ldw	r3,-8(fp)
   8eb14:	e0bfff17 	ldw	r2,-4(fp)
   8eb18:	18bff51e 	bne	r3,r2,8eaf0 <__alt_data_end+0xfffad070>
    {
      *to++ = *from++;
    }
  }
}
   8eb1c:	0001883a 	nop
   8eb20:	e037883a 	mov	sp,fp
   8eb24:	df000017 	ldw	fp,0(sp)
   8eb28:	dec00104 	addi	sp,sp,4
   8eb2c:	f800283a 	ret

0008eb30 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8eb30:	defffe04 	addi	sp,sp,-8
   8eb34:	dfc00115 	stw	ra,4(sp)
   8eb38:	df000015 	stw	fp,0(sp)
   8eb3c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8eb40:	01800274 	movhi	r6,9
   8eb44:	318b7a04 	addi	r6,r6,11752
   8eb48:	01400274 	movhi	r5,9
   8eb4c:	29443804 	addi	r5,r5,4320
   8eb50:	01000274 	movhi	r4,9
   8eb54:	210b7a04 	addi	r4,r4,11752
   8eb58:	008eac80 	call	8eac8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8eb5c:	01800234 	movhi	r6,8
   8eb60:	31809104 	addi	r6,r6,580
   8eb64:	01400234 	movhi	r5,8
   8eb68:	29400804 	addi	r5,r5,32
   8eb6c:	01000234 	movhi	r4,8
   8eb70:	21000804 	addi	r4,r4,32
   8eb74:	008eac80 	call	8eac8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8eb78:	01800274 	movhi	r6,9
   8eb7c:	31843804 	addi	r6,r6,4320
   8eb80:	01400274 	movhi	r5,9
   8eb84:	29433504 	addi	r5,r5,3284
   8eb88:	01000274 	movhi	r4,9
   8eb8c:	21033504 	addi	r4,r4,3284
   8eb90:	008eac80 	call	8eac8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8eb94:	00900040 	call	90004 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8eb98:	00901ec0 	call	901ec <alt_icache_flush_all>
}
   8eb9c:	0001883a 	nop
   8eba0:	e037883a 	mov	sp,fp
   8eba4:	dfc00117 	ldw	ra,4(sp)
   8eba8:	df000017 	ldw	fp,0(sp)
   8ebac:	dec00204 	addi	sp,sp,8
   8ebb0:	f800283a 	ret

0008ebb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ebb4:	defffe04 	addi	sp,sp,-8
   8ebb8:	dfc00115 	stw	ra,4(sp)
   8ebbc:	df000015 	stw	fp,0(sp)
   8ebc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8ebc4:	d0a00b17 	ldw	r2,-32724(gp)
   8ebc8:	10000326 	beq	r2,zero,8ebd8 <alt_get_errno+0x24>
   8ebcc:	d0a00b17 	ldw	r2,-32724(gp)
   8ebd0:	103ee83a 	callr	r2
   8ebd4:	00000106 	br	8ebdc <alt_get_errno+0x28>
   8ebd8:	d0a75304 	addi	r2,gp,-25268
}
   8ebdc:	e037883a 	mov	sp,fp
   8ebe0:	dfc00117 	ldw	ra,4(sp)
   8ebe4:	df000017 	ldw	fp,0(sp)
   8ebe8:	dec00204 	addi	sp,sp,8
   8ebec:	f800283a 	ret

0008ebf0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8ebf0:	defff904 	addi	sp,sp,-28
   8ebf4:	dfc00615 	stw	ra,24(sp)
   8ebf8:	df000515 	stw	fp,20(sp)
   8ebfc:	df000504 	addi	fp,sp,20
   8ec00:	e13ffd15 	stw	r4,-12(fp)
   8ec04:	e17ffe15 	stw	r5,-8(fp)
   8ec08:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8ec0c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ec10:	e0bffd17 	ldw	r2,-12(fp)
   8ec14:	10000616 	blt	r2,zero,8ec30 <lseek+0x40>
   8ec18:	e0bffd17 	ldw	r2,-12(fp)
   8ec1c:	10c00324 	muli	r3,r2,12
   8ec20:	00800274 	movhi	r2,9
   8ec24:	1086f204 	addi	r2,r2,7112
   8ec28:	1885883a 	add	r2,r3,r2
   8ec2c:	00000106 	br	8ec34 <lseek+0x44>
   8ec30:	0005883a 	mov	r2,zero
   8ec34:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   8ec38:	e0bffc17 	ldw	r2,-16(fp)
   8ec3c:	10001026 	beq	r2,zero,8ec80 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8ec40:	e0bffc17 	ldw	r2,-16(fp)
   8ec44:	10800017 	ldw	r2,0(r2)
   8ec48:	10800717 	ldw	r2,28(r2)
   8ec4c:	10000926 	beq	r2,zero,8ec74 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8ec50:	e0bffc17 	ldw	r2,-16(fp)
   8ec54:	10800017 	ldw	r2,0(r2)
   8ec58:	10800717 	ldw	r2,28(r2)
   8ec5c:	e1bfff17 	ldw	r6,-4(fp)
   8ec60:	e17ffe17 	ldw	r5,-8(fp)
   8ec64:	e13ffc17 	ldw	r4,-16(fp)
   8ec68:	103ee83a 	callr	r2
   8ec6c:	e0bffb15 	stw	r2,-20(fp)
   8ec70:	00000506 	br	8ec88 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8ec74:	00bfde84 	movi	r2,-134
   8ec78:	e0bffb15 	stw	r2,-20(fp)
   8ec7c:	00000206 	br	8ec88 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   8ec80:	00bfebc4 	movi	r2,-81
   8ec84:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   8ec88:	e0bffb17 	ldw	r2,-20(fp)
   8ec8c:	1000070e 	bge	r2,zero,8ecac <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   8ec90:	008ebb40 	call	8ebb4 <alt_get_errno>
   8ec94:	1007883a 	mov	r3,r2
   8ec98:	e0bffb17 	ldw	r2,-20(fp)
   8ec9c:	0085c83a 	sub	r2,zero,r2
   8eca0:	18800015 	stw	r2,0(r3)
    rc = -1;
   8eca4:	00bfffc4 	movi	r2,-1
   8eca8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   8ecac:	e0bffb17 	ldw	r2,-20(fp)
}
   8ecb0:	e037883a 	mov	sp,fp
   8ecb4:	dfc00117 	ldw	ra,4(sp)
   8ecb8:	df000017 	ldw	fp,0(sp)
   8ecbc:	dec00204 	addi	sp,sp,8
   8ecc0:	f800283a 	ret

0008ecc4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8ecc4:	defffd04 	addi	sp,sp,-12
   8ecc8:	dfc00215 	stw	ra,8(sp)
   8eccc:	df000115 	stw	fp,4(sp)
   8ecd0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8ecd4:	0009883a 	mov	r4,zero
   8ecd8:	008f2e00 	call	8f2e0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8ecdc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8ece0:	008f3180 	call	8f318 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8ece4:	01800274 	movhi	r6,9
   8ece8:	31843004 	addi	r6,r6,4288
   8ecec:	01400274 	movhi	r5,9
   8ecf0:	29443004 	addi	r5,r5,4288
   8ecf4:	01000274 	movhi	r4,9
   8ecf8:	21043004 	addi	r4,r4,4288
   8ecfc:	00903800 	call	90380 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8ed00:	009012c0 	call	9012c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8ed04:	01000274 	movhi	r4,9
   8ed08:	21006304 	addi	r4,r4,396
   8ed0c:	00909400 	call	90940 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8ed10:	d0a75f17 	ldw	r2,-25220(gp)
   8ed14:	d0e76017 	ldw	r3,-25216(gp)
   8ed18:	d1276117 	ldw	r4,-25212(gp)
   8ed1c:	200d883a 	mov	r6,r4
   8ed20:	180b883a 	mov	r5,r3
   8ed24:	1009883a 	mov	r4,r2
   8ed28:	00809540 	call	80954 <main>
   8ed2c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8ed30:	01000044 	movi	r4,1
   8ed34:	008e1ec0 	call	8e1ec <close>
  exit (result);
   8ed38:	e13fff17 	ldw	r4,-4(fp)
   8ed3c:	00909540 	call	90954 <exit>

0008ed40 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8ed40:	defffe04 	addi	sp,sp,-8
   8ed44:	df000115 	stw	fp,4(sp)
   8ed48:	df000104 	addi	fp,sp,4
   8ed4c:	e13fff15 	stw	r4,-4(fp)
}
   8ed50:	0001883a 	nop
   8ed54:	e037883a 	mov	sp,fp
   8ed58:	df000017 	ldw	fp,0(sp)
   8ed5c:	dec00104 	addi	sp,sp,4
   8ed60:	f800283a 	ret

0008ed64 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8ed64:	defffe04 	addi	sp,sp,-8
   8ed68:	df000115 	stw	fp,4(sp)
   8ed6c:	df000104 	addi	fp,sp,4
   8ed70:	e13fff15 	stw	r4,-4(fp)
}
   8ed74:	0001883a 	nop
   8ed78:	e037883a 	mov	sp,fp
   8ed7c:	df000017 	ldw	fp,0(sp)
   8ed80:	dec00104 	addi	sp,sp,4
   8ed84:	f800283a 	ret

0008ed88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8ed88:	defffe04 	addi	sp,sp,-8
   8ed8c:	dfc00115 	stw	ra,4(sp)
   8ed90:	df000015 	stw	fp,0(sp)
   8ed94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8ed98:	d0a00b17 	ldw	r2,-32724(gp)
   8ed9c:	10000326 	beq	r2,zero,8edac <alt_get_errno+0x24>
   8eda0:	d0a00b17 	ldw	r2,-32724(gp)
   8eda4:	103ee83a 	callr	r2
   8eda8:	00000106 	br	8edb0 <alt_get_errno+0x28>
   8edac:	d0a75304 	addi	r2,gp,-25268
}
   8edb0:	e037883a 	mov	sp,fp
   8edb4:	dfc00117 	ldw	ra,4(sp)
   8edb8:	df000017 	ldw	fp,0(sp)
   8edbc:	dec00204 	addi	sp,sp,8
   8edc0:	f800283a 	ret

0008edc4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8edc4:	defff904 	addi	sp,sp,-28
   8edc8:	dfc00615 	stw	ra,24(sp)
   8edcc:	df000515 	stw	fp,20(sp)
   8edd0:	df000504 	addi	fp,sp,20
   8edd4:	e13ffd15 	stw	r4,-12(fp)
   8edd8:	e17ffe15 	stw	r5,-8(fp)
   8eddc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ede0:	e0bffd17 	ldw	r2,-12(fp)
   8ede4:	10000616 	blt	r2,zero,8ee00 <read+0x3c>
   8ede8:	e0bffd17 	ldw	r2,-12(fp)
   8edec:	10c00324 	muli	r3,r2,12
   8edf0:	00800274 	movhi	r2,9
   8edf4:	1086f204 	addi	r2,r2,7112
   8edf8:	1885883a 	add	r2,r3,r2
   8edfc:	00000106 	br	8ee04 <read+0x40>
   8ee00:	0005883a 	mov	r2,zero
   8ee04:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8ee08:	e0bffb17 	ldw	r2,-20(fp)
   8ee0c:	10002226 	beq	r2,zero,8ee98 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8ee10:	e0bffb17 	ldw	r2,-20(fp)
   8ee14:	10800217 	ldw	r2,8(r2)
   8ee18:	108000cc 	andi	r2,r2,3
   8ee1c:	10800060 	cmpeqi	r2,r2,1
   8ee20:	1000181e 	bne	r2,zero,8ee84 <read+0xc0>
        (fd->dev->read))
   8ee24:	e0bffb17 	ldw	r2,-20(fp)
   8ee28:	10800017 	ldw	r2,0(r2)
   8ee2c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8ee30:	10001426 	beq	r2,zero,8ee84 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8ee34:	e0bffb17 	ldw	r2,-20(fp)
   8ee38:	10800017 	ldw	r2,0(r2)
   8ee3c:	10800517 	ldw	r2,20(r2)
   8ee40:	e0ffff17 	ldw	r3,-4(fp)
   8ee44:	180d883a 	mov	r6,r3
   8ee48:	e17ffe17 	ldw	r5,-8(fp)
   8ee4c:	e13ffb17 	ldw	r4,-20(fp)
   8ee50:	103ee83a 	callr	r2
   8ee54:	e0bffc15 	stw	r2,-16(fp)
   8ee58:	e0bffc17 	ldw	r2,-16(fp)
   8ee5c:	1000070e 	bge	r2,zero,8ee7c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   8ee60:	008ed880 	call	8ed88 <alt_get_errno>
   8ee64:	1007883a 	mov	r3,r2
   8ee68:	e0bffc17 	ldw	r2,-16(fp)
   8ee6c:	0085c83a 	sub	r2,zero,r2
   8ee70:	18800015 	stw	r2,0(r3)
          return -1;
   8ee74:	00bfffc4 	movi	r2,-1
   8ee78:	00000c06 	br	8eeac <read+0xe8>
        }
        return rval;
   8ee7c:	e0bffc17 	ldw	r2,-16(fp)
   8ee80:	00000a06 	br	8eeac <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8ee84:	008ed880 	call	8ed88 <alt_get_errno>
   8ee88:	1007883a 	mov	r3,r2
   8ee8c:	00800344 	movi	r2,13
   8ee90:	18800015 	stw	r2,0(r3)
   8ee94:	00000406 	br	8eea8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8ee98:	008ed880 	call	8ed88 <alt_get_errno>
   8ee9c:	1007883a 	mov	r3,r2
   8eea0:	00801444 	movi	r2,81
   8eea4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8eea8:	00bfffc4 	movi	r2,-1
}
   8eeac:	e037883a 	mov	sp,fp
   8eeb0:	dfc00117 	ldw	ra,4(sp)
   8eeb4:	df000017 	ldw	fp,0(sp)
   8eeb8:	dec00204 	addi	sp,sp,8
   8eebc:	f800283a 	ret

0008eec0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8eec0:	defffe04 	addi	sp,sp,-8
   8eec4:	df000115 	stw	fp,4(sp)
   8eec8:	df000104 	addi	fp,sp,4
   8eecc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8eed0:	e0bfff17 	ldw	r2,-4(fp)
   8eed4:	108000d0 	cmplti	r2,r2,3
   8eed8:	10000d1e 	bne	r2,zero,8ef10 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   8eedc:	00800274 	movhi	r2,9
   8eee0:	1086f204 	addi	r2,r2,7112
   8eee4:	e0ffff17 	ldw	r3,-4(fp)
   8eee8:	18c00324 	muli	r3,r3,12
   8eeec:	10c5883a 	add	r2,r2,r3
   8eef0:	10800204 	addi	r2,r2,8
   8eef4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8eef8:	00800274 	movhi	r2,9
   8eefc:	1086f204 	addi	r2,r2,7112
   8ef00:	e0ffff17 	ldw	r3,-4(fp)
   8ef04:	18c00324 	muli	r3,r3,12
   8ef08:	10c5883a 	add	r2,r2,r3
   8ef0c:	10000015 	stw	zero,0(r2)
  }
}
   8ef10:	0001883a 	nop
   8ef14:	e037883a 	mov	sp,fp
   8ef18:	df000017 	ldw	fp,0(sp)
   8ef1c:	dec00104 	addi	sp,sp,4
   8ef20:	f800283a 	ret

0008ef24 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8ef24:	defff904 	addi	sp,sp,-28
   8ef28:	df000615 	stw	fp,24(sp)
   8ef2c:	df000604 	addi	fp,sp,24
   8ef30:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ef34:	0005303a 	rdctl	r2,status
   8ef38:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ef3c:	e0fffe17 	ldw	r3,-8(fp)
   8ef40:	00bfff84 	movi	r2,-2
   8ef44:	1884703a 	and	r2,r3,r2
   8ef48:	1001703a 	wrctl	status,r2
  
  return context;
   8ef4c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8ef50:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8ef54:	d0a00d17 	ldw	r2,-32716(gp)
   8ef58:	10c000c4 	addi	r3,r2,3
   8ef5c:	00bfff04 	movi	r2,-4
   8ef60:	1884703a 	and	r2,r3,r2
   8ef64:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8ef68:	d0e00d17 	ldw	r3,-32716(gp)
   8ef6c:	e0bfff17 	ldw	r2,-4(fp)
   8ef70:	1887883a 	add	r3,r3,r2
   8ef74:	008003b4 	movhi	r2,14
   8ef78:	1086a004 	addi	r2,r2,6784
   8ef7c:	10c0062e 	bgeu	r2,r3,8ef98 <sbrk+0x74>
   8ef80:	e0bffb17 	ldw	r2,-20(fp)
   8ef84:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ef88:	e0bffa17 	ldw	r2,-24(fp)
   8ef8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8ef90:	00bfffc4 	movi	r2,-1
   8ef94:	00000b06 	br	8efc4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   8ef98:	d0a00d17 	ldw	r2,-32716(gp)
   8ef9c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   8efa0:	d0e00d17 	ldw	r3,-32716(gp)
   8efa4:	e0bfff17 	ldw	r2,-4(fp)
   8efa8:	1885883a 	add	r2,r3,r2
   8efac:	d0a00d15 	stw	r2,-32716(gp)
   8efb0:	e0bffb17 	ldw	r2,-20(fp)
   8efb4:	e0bffc15 	stw	r2,-16(fp)
   8efb8:	e0bffc17 	ldw	r2,-16(fp)
   8efbc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8efc0:	e0bffd17 	ldw	r2,-12(fp)
} 
   8efc4:	e037883a 	mov	sp,fp
   8efc8:	df000017 	ldw	fp,0(sp)
   8efcc:	dec00104 	addi	sp,sp,4
   8efd0:	f800283a 	ret

0008efd4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8efd4:	defffa04 	addi	sp,sp,-24
   8efd8:	df000515 	stw	fp,20(sp)
   8efdc:	df000504 	addi	fp,sp,20
   8efe0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8efe4:	0005303a 	rdctl	r2,status
   8efe8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8efec:	e0fffc17 	ldw	r3,-16(fp)
   8eff0:	00bfff84 	movi	r2,-2
   8eff4:	1884703a 	and	r2,r3,r2
   8eff8:	1001703a 	wrctl	status,r2
  
  return context;
   8effc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8f000:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   8f004:	e0bfff17 	ldw	r2,-4(fp)
   8f008:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8f00c:	e0bffd17 	ldw	r2,-12(fp)
   8f010:	10800017 	ldw	r2,0(r2)
   8f014:	e0fffd17 	ldw	r3,-12(fp)
   8f018:	18c00117 	ldw	r3,4(r3)
   8f01c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   8f020:	e0bffd17 	ldw	r2,-12(fp)
   8f024:	10800117 	ldw	r2,4(r2)
   8f028:	e0fffd17 	ldw	r3,-12(fp)
   8f02c:	18c00017 	ldw	r3,0(r3)
   8f030:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8f034:	e0bffd17 	ldw	r2,-12(fp)
   8f038:	e0fffd17 	ldw	r3,-12(fp)
   8f03c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   8f040:	e0bffd17 	ldw	r2,-12(fp)
   8f044:	e0fffd17 	ldw	r3,-12(fp)
   8f048:	10c00015 	stw	r3,0(r2)
   8f04c:	e0bffb17 	ldw	r2,-20(fp)
   8f050:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f054:	e0bffe17 	ldw	r2,-8(fp)
   8f058:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8f05c:	0001883a 	nop
   8f060:	e037883a 	mov	sp,fp
   8f064:	df000017 	ldw	fp,0(sp)
   8f068:	dec00104 	addi	sp,sp,4
   8f06c:	f800283a 	ret

0008f070 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8f070:	defffb04 	addi	sp,sp,-20
   8f074:	dfc00415 	stw	ra,16(sp)
   8f078:	df000315 	stw	fp,12(sp)
   8f07c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8f080:	d0a00e17 	ldw	r2,-32712(gp)
   8f084:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8f088:	d0a76317 	ldw	r2,-25204(gp)
   8f08c:	10800044 	addi	r2,r2,1
   8f090:	d0a76315 	stw	r2,-25204(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8f094:	00002e06 	br	8f150 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   8f098:	e0bffd17 	ldw	r2,-12(fp)
   8f09c:	10800017 	ldw	r2,0(r2)
   8f0a0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8f0a4:	e0bffd17 	ldw	r2,-12(fp)
   8f0a8:	10800403 	ldbu	r2,16(r2)
   8f0ac:	10803fcc 	andi	r2,r2,255
   8f0b0:	10000426 	beq	r2,zero,8f0c4 <alt_tick+0x54>
   8f0b4:	d0a76317 	ldw	r2,-25204(gp)
   8f0b8:	1000021e 	bne	r2,zero,8f0c4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   8f0bc:	e0bffd17 	ldw	r2,-12(fp)
   8f0c0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8f0c4:	e0bffd17 	ldw	r2,-12(fp)
   8f0c8:	10800217 	ldw	r2,8(r2)
   8f0cc:	d0e76317 	ldw	r3,-25204(gp)
   8f0d0:	18801d36 	bltu	r3,r2,8f148 <alt_tick+0xd8>
   8f0d4:	e0bffd17 	ldw	r2,-12(fp)
   8f0d8:	10800403 	ldbu	r2,16(r2)
   8f0dc:	10803fcc 	andi	r2,r2,255
   8f0e0:	1000191e 	bne	r2,zero,8f148 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   8f0e4:	e0bffd17 	ldw	r2,-12(fp)
   8f0e8:	10800317 	ldw	r2,12(r2)
   8f0ec:	e0fffd17 	ldw	r3,-12(fp)
   8f0f0:	18c00517 	ldw	r3,20(r3)
   8f0f4:	1809883a 	mov	r4,r3
   8f0f8:	103ee83a 	callr	r2
   8f0fc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8f100:	e0bfff17 	ldw	r2,-4(fp)
   8f104:	1000031e 	bne	r2,zero,8f114 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   8f108:	e13ffd17 	ldw	r4,-12(fp)
   8f10c:	008efd40 	call	8efd4 <alt_alarm_stop>
   8f110:	00000d06 	br	8f148 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   8f114:	e0bffd17 	ldw	r2,-12(fp)
   8f118:	10c00217 	ldw	r3,8(r2)
   8f11c:	e0bfff17 	ldw	r2,-4(fp)
   8f120:	1887883a 	add	r3,r3,r2
   8f124:	e0bffd17 	ldw	r2,-12(fp)
   8f128:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8f12c:	e0bffd17 	ldw	r2,-12(fp)
   8f130:	10c00217 	ldw	r3,8(r2)
   8f134:	d0a76317 	ldw	r2,-25204(gp)
   8f138:	1880032e 	bgeu	r3,r2,8f148 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   8f13c:	e0bffd17 	ldw	r2,-12(fp)
   8f140:	00c00044 	movi	r3,1
   8f144:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   8f148:	e0bffe17 	ldw	r2,-8(fp)
   8f14c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8f150:	e0fffd17 	ldw	r3,-12(fp)
   8f154:	d0a00e04 	addi	r2,gp,-32712
   8f158:	18bfcf1e 	bne	r3,r2,8f098 <__alt_data_end+0xfffad618>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   8f15c:	0001883a 	nop
}
   8f160:	0001883a 	nop
   8f164:	e037883a 	mov	sp,fp
   8f168:	dfc00117 	ldw	ra,4(sp)
   8f16c:	df000017 	ldw	fp,0(sp)
   8f170:	dec00204 	addi	sp,sp,8
   8f174:	f800283a 	ret

0008f178 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8f178:	defffe04 	addi	sp,sp,-8
   8f17c:	dfc00115 	stw	ra,4(sp)
   8f180:	df000015 	stw	fp,0(sp)
   8f184:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8f188:	d0a00b17 	ldw	r2,-32724(gp)
   8f18c:	10000326 	beq	r2,zero,8f19c <alt_get_errno+0x24>
   8f190:	d0a00b17 	ldw	r2,-32724(gp)
   8f194:	103ee83a 	callr	r2
   8f198:	00000106 	br	8f1a0 <alt_get_errno+0x28>
   8f19c:	d0a75304 	addi	r2,gp,-25268
}
   8f1a0:	e037883a 	mov	sp,fp
   8f1a4:	dfc00117 	ldw	ra,4(sp)
   8f1a8:	df000017 	ldw	fp,0(sp)
   8f1ac:	dec00204 	addi	sp,sp,8
   8f1b0:	f800283a 	ret

0008f1b4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8f1b4:	defff904 	addi	sp,sp,-28
   8f1b8:	dfc00615 	stw	ra,24(sp)
   8f1bc:	df000515 	stw	fp,20(sp)
   8f1c0:	df000504 	addi	fp,sp,20
   8f1c4:	e13ffd15 	stw	r4,-12(fp)
   8f1c8:	e17ffe15 	stw	r5,-8(fp)
   8f1cc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8f1d0:	e0bffd17 	ldw	r2,-12(fp)
   8f1d4:	10000616 	blt	r2,zero,8f1f0 <write+0x3c>
   8f1d8:	e0bffd17 	ldw	r2,-12(fp)
   8f1dc:	10c00324 	muli	r3,r2,12
   8f1e0:	00800274 	movhi	r2,9
   8f1e4:	1086f204 	addi	r2,r2,7112
   8f1e8:	1885883a 	add	r2,r3,r2
   8f1ec:	00000106 	br	8f1f4 <write+0x40>
   8f1f0:	0005883a 	mov	r2,zero
   8f1f4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8f1f8:	e0bffb17 	ldw	r2,-20(fp)
   8f1fc:	10002126 	beq	r2,zero,8f284 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8f200:	e0bffb17 	ldw	r2,-20(fp)
   8f204:	10800217 	ldw	r2,8(r2)
   8f208:	108000cc 	andi	r2,r2,3
   8f20c:	10001826 	beq	r2,zero,8f270 <write+0xbc>
   8f210:	e0bffb17 	ldw	r2,-20(fp)
   8f214:	10800017 	ldw	r2,0(r2)
   8f218:	10800617 	ldw	r2,24(r2)
   8f21c:	10001426 	beq	r2,zero,8f270 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8f220:	e0bffb17 	ldw	r2,-20(fp)
   8f224:	10800017 	ldw	r2,0(r2)
   8f228:	10800617 	ldw	r2,24(r2)
   8f22c:	e0ffff17 	ldw	r3,-4(fp)
   8f230:	180d883a 	mov	r6,r3
   8f234:	e17ffe17 	ldw	r5,-8(fp)
   8f238:	e13ffb17 	ldw	r4,-20(fp)
   8f23c:	103ee83a 	callr	r2
   8f240:	e0bffc15 	stw	r2,-16(fp)
   8f244:	e0bffc17 	ldw	r2,-16(fp)
   8f248:	1000070e 	bge	r2,zero,8f268 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   8f24c:	008f1780 	call	8f178 <alt_get_errno>
   8f250:	1007883a 	mov	r3,r2
   8f254:	e0bffc17 	ldw	r2,-16(fp)
   8f258:	0085c83a 	sub	r2,zero,r2
   8f25c:	18800015 	stw	r2,0(r3)
        return -1;
   8f260:	00bfffc4 	movi	r2,-1
   8f264:	00000c06 	br	8f298 <write+0xe4>
      }
      return rval;
   8f268:	e0bffc17 	ldw	r2,-16(fp)
   8f26c:	00000a06 	br	8f298 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8f270:	008f1780 	call	8f178 <alt_get_errno>
   8f274:	1007883a 	mov	r3,r2
   8f278:	00800344 	movi	r2,13
   8f27c:	18800015 	stw	r2,0(r3)
   8f280:	00000406 	br	8f294 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8f284:	008f1780 	call	8f178 <alt_get_errno>
   8f288:	1007883a 	mov	r3,r2
   8f28c:	00801444 	movi	r2,81
   8f290:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8f294:	00bfffc4 	movi	r2,-1
}
   8f298:	e037883a 	mov	sp,fp
   8f29c:	dfc00117 	ldw	ra,4(sp)
   8f2a0:	df000017 	ldw	fp,0(sp)
   8f2a4:	dec00204 	addi	sp,sp,8
   8f2a8:	f800283a 	ret

0008f2ac <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8f2ac:	defffd04 	addi	sp,sp,-12
   8f2b0:	dfc00215 	stw	ra,8(sp)
   8f2b4:	df000115 	stw	fp,4(sp)
   8f2b8:	df000104 	addi	fp,sp,4
   8f2bc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8f2c0:	d1600804 	addi	r5,gp,-32736
   8f2c4:	e13fff17 	ldw	r4,-4(fp)
   8f2c8:	00900880 	call	90088 <alt_dev_llist_insert>
}
   8f2cc:	e037883a 	mov	sp,fp
   8f2d0:	dfc00117 	ldw	ra,4(sp)
   8f2d4:	df000017 	ldw	fp,0(sp)
   8f2d8:	dec00204 	addi	sp,sp,8
   8f2dc:	f800283a 	ret

0008f2e0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8f2e0:	defffd04 	addi	sp,sp,-12
   8f2e4:	dfc00215 	stw	ra,8(sp)
   8f2e8:	df000115 	stw	fp,4(sp)
   8f2ec:	df000104 	addi	fp,sp,4
   8f2f0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   8f2f4:	00906500 	call	90650 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8f2f8:	00800044 	movi	r2,1
   8f2fc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8f300:	0001883a 	nop
   8f304:	e037883a 	mov	sp,fp
   8f308:	dfc00117 	ldw	ra,4(sp)
   8f30c:	df000017 	ldw	fp,0(sp)
   8f310:	dec00204 	addi	sp,sp,8
   8f314:	f800283a 	ret

0008f318 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8f318:	defffe04 	addi	sp,sp,-8
   8f31c:	dfc00115 	stw	ra,4(sp)
   8f320:	df000015 	stw	fp,0(sp)
   8f324:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   8f328:	01c0fa04 	movi	r7,1000
   8f32c:	000d883a 	mov	r6,zero
   8f330:	000b883a 	mov	r5,zero
   8f334:	01000434 	movhi	r4,16
   8f338:	21040004 	addi	r4,r4,4096
   8f33c:	008fe5c0 	call	8fe5c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   8f340:	01800044 	movi	r6,1
   8f344:	000b883a 	mov	r5,zero
   8f348:	01000274 	movhi	r4,9
   8f34c:	21075c04 	addi	r4,r4,7536
   8f350:	008f4e00 	call	8f4e0 <altera_avalon_jtag_uart_init>
   8f354:	01000274 	movhi	r4,9
   8f358:	21075204 	addi	r4,r4,7496
   8f35c:	008f2ac0 	call	8f2ac <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   8f360:	0001883a 	nop
}
   8f364:	0001883a 	nop
   8f368:	e037883a 	mov	sp,fp
   8f36c:	dfc00117 	ldw	ra,4(sp)
   8f370:	df000017 	ldw	fp,0(sp)
   8f374:	dec00204 	addi	sp,sp,8
   8f378:	f800283a 	ret

0008f37c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8f37c:	defffa04 	addi	sp,sp,-24
   8f380:	dfc00515 	stw	ra,20(sp)
   8f384:	df000415 	stw	fp,16(sp)
   8f388:	df000404 	addi	fp,sp,16
   8f38c:	e13ffd15 	stw	r4,-12(fp)
   8f390:	e17ffe15 	stw	r5,-8(fp)
   8f394:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8f398:	e0bffd17 	ldw	r2,-12(fp)
   8f39c:	10800017 	ldw	r2,0(r2)
   8f3a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8f3a4:	e0bffc17 	ldw	r2,-16(fp)
   8f3a8:	10c00a04 	addi	r3,r2,40
   8f3ac:	e0bffd17 	ldw	r2,-12(fp)
   8f3b0:	10800217 	ldw	r2,8(r2)
   8f3b4:	100f883a 	mov	r7,r2
   8f3b8:	e1bfff17 	ldw	r6,-4(fp)
   8f3bc:	e17ffe17 	ldw	r5,-8(fp)
   8f3c0:	1809883a 	mov	r4,r3
   8f3c4:	008f9a40 	call	8f9a4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8f3c8:	e037883a 	mov	sp,fp
   8f3cc:	dfc00117 	ldw	ra,4(sp)
   8f3d0:	df000017 	ldw	fp,0(sp)
   8f3d4:	dec00204 	addi	sp,sp,8
   8f3d8:	f800283a 	ret

0008f3dc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8f3dc:	defffa04 	addi	sp,sp,-24
   8f3e0:	dfc00515 	stw	ra,20(sp)
   8f3e4:	df000415 	stw	fp,16(sp)
   8f3e8:	df000404 	addi	fp,sp,16
   8f3ec:	e13ffd15 	stw	r4,-12(fp)
   8f3f0:	e17ffe15 	stw	r5,-8(fp)
   8f3f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8f3f8:	e0bffd17 	ldw	r2,-12(fp)
   8f3fc:	10800017 	ldw	r2,0(r2)
   8f400:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8f404:	e0bffc17 	ldw	r2,-16(fp)
   8f408:	10c00a04 	addi	r3,r2,40
   8f40c:	e0bffd17 	ldw	r2,-12(fp)
   8f410:	10800217 	ldw	r2,8(r2)
   8f414:	100f883a 	mov	r7,r2
   8f418:	e1bfff17 	ldw	r6,-4(fp)
   8f41c:	e17ffe17 	ldw	r5,-8(fp)
   8f420:	1809883a 	mov	r4,r3
   8f424:	008fbc00 	call	8fbc0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8f428:	e037883a 	mov	sp,fp
   8f42c:	dfc00117 	ldw	ra,4(sp)
   8f430:	df000017 	ldw	fp,0(sp)
   8f434:	dec00204 	addi	sp,sp,8
   8f438:	f800283a 	ret

0008f43c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8f43c:	defffc04 	addi	sp,sp,-16
   8f440:	dfc00315 	stw	ra,12(sp)
   8f444:	df000215 	stw	fp,8(sp)
   8f448:	df000204 	addi	fp,sp,8
   8f44c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8f450:	e0bfff17 	ldw	r2,-4(fp)
   8f454:	10800017 	ldw	r2,0(r2)
   8f458:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8f45c:	e0bffe17 	ldw	r2,-8(fp)
   8f460:	10c00a04 	addi	r3,r2,40
   8f464:	e0bfff17 	ldw	r2,-4(fp)
   8f468:	10800217 	ldw	r2,8(r2)
   8f46c:	100b883a 	mov	r5,r2
   8f470:	1809883a 	mov	r4,r3
   8f474:	008f84c0 	call	8f84c <altera_avalon_jtag_uart_close>
}
   8f478:	e037883a 	mov	sp,fp
   8f47c:	dfc00117 	ldw	ra,4(sp)
   8f480:	df000017 	ldw	fp,0(sp)
   8f484:	dec00204 	addi	sp,sp,8
   8f488:	f800283a 	ret

0008f48c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8f48c:	defffa04 	addi	sp,sp,-24
   8f490:	dfc00515 	stw	ra,20(sp)
   8f494:	df000415 	stw	fp,16(sp)
   8f498:	df000404 	addi	fp,sp,16
   8f49c:	e13ffd15 	stw	r4,-12(fp)
   8f4a0:	e17ffe15 	stw	r5,-8(fp)
   8f4a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8f4a8:	e0bffd17 	ldw	r2,-12(fp)
   8f4ac:	10800017 	ldw	r2,0(r2)
   8f4b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8f4b4:	e0bffc17 	ldw	r2,-16(fp)
   8f4b8:	10800a04 	addi	r2,r2,40
   8f4bc:	e1bfff17 	ldw	r6,-4(fp)
   8f4c0:	e17ffe17 	ldw	r5,-8(fp)
   8f4c4:	1009883a 	mov	r4,r2
   8f4c8:	008f8b40 	call	8f8b4 <altera_avalon_jtag_uart_ioctl>
}
   8f4cc:	e037883a 	mov	sp,fp
   8f4d0:	dfc00117 	ldw	ra,4(sp)
   8f4d4:	df000017 	ldw	fp,0(sp)
   8f4d8:	dec00204 	addi	sp,sp,8
   8f4dc:	f800283a 	ret

0008f4e0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8f4e0:	defffa04 	addi	sp,sp,-24
   8f4e4:	dfc00515 	stw	ra,20(sp)
   8f4e8:	df000415 	stw	fp,16(sp)
   8f4ec:	df000404 	addi	fp,sp,16
   8f4f0:	e13ffd15 	stw	r4,-12(fp)
   8f4f4:	e17ffe15 	stw	r5,-8(fp)
   8f4f8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f4fc:	e0bffd17 	ldw	r2,-12(fp)
   8f500:	00c00044 	movi	r3,1
   8f504:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8f508:	e0bffd17 	ldw	r2,-12(fp)
   8f50c:	10800017 	ldw	r2,0(r2)
   8f510:	10800104 	addi	r2,r2,4
   8f514:	1007883a 	mov	r3,r2
   8f518:	e0bffd17 	ldw	r2,-12(fp)
   8f51c:	10800817 	ldw	r2,32(r2)
   8f520:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8f524:	e0bffe17 	ldw	r2,-8(fp)
   8f528:	e0ffff17 	ldw	r3,-4(fp)
   8f52c:	d8000015 	stw	zero,0(sp)
   8f530:	e1fffd17 	ldw	r7,-12(fp)
   8f534:	01800274 	movhi	r6,9
   8f538:	31bd6804 	addi	r6,r6,-2656
   8f53c:	180b883a 	mov	r5,r3
   8f540:	1009883a 	mov	r4,r2
   8f544:	008e5c80 	call	8e5c8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8f548:	e0bffd17 	ldw	r2,-12(fp)
   8f54c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8f550:	e0bffd17 	ldw	r2,-12(fp)
   8f554:	10800204 	addi	r2,r2,8
   8f558:	d0e76217 	ldw	r3,-25208(gp)
   8f55c:	e1fffd17 	ldw	r7,-12(fp)
   8f560:	01800274 	movhi	r6,9
   8f564:	31bdeb04 	addi	r6,r6,-2132
   8f568:	180b883a 	mov	r5,r3
   8f56c:	1009883a 	mov	r4,r2
   8f570:	008fed80 	call	8fed8 <alt_alarm_start>
   8f574:	1000040e 	bge	r2,zero,8f588 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8f578:	e0fffd17 	ldw	r3,-12(fp)
   8f57c:	00a00034 	movhi	r2,32768
   8f580:	10bfffc4 	addi	r2,r2,-1
   8f584:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8f588:	0001883a 	nop
   8f58c:	e037883a 	mov	sp,fp
   8f590:	dfc00117 	ldw	ra,4(sp)
   8f594:	df000017 	ldw	fp,0(sp)
   8f598:	dec00204 	addi	sp,sp,8
   8f59c:	f800283a 	ret

0008f5a0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8f5a0:	defff804 	addi	sp,sp,-32
   8f5a4:	df000715 	stw	fp,28(sp)
   8f5a8:	df000704 	addi	fp,sp,28
   8f5ac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8f5b0:	e0bfff17 	ldw	r2,-4(fp)
   8f5b4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   8f5b8:	e0bffb17 	ldw	r2,-20(fp)
   8f5bc:	10800017 	ldw	r2,0(r2)
   8f5c0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f5c4:	e0bffc17 	ldw	r2,-16(fp)
   8f5c8:	10800104 	addi	r2,r2,4
   8f5cc:	10800037 	ldwio	r2,0(r2)
   8f5d0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8f5d4:	e0bffd17 	ldw	r2,-12(fp)
   8f5d8:	1080c00c 	andi	r2,r2,768
   8f5dc:	10006d26 	beq	r2,zero,8f794 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8f5e0:	e0bffd17 	ldw	r2,-12(fp)
   8f5e4:	1080400c 	andi	r2,r2,256
   8f5e8:	10003526 	beq	r2,zero,8f6c0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8f5ec:	00800074 	movhi	r2,1
   8f5f0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f5f4:	e0bffb17 	ldw	r2,-20(fp)
   8f5f8:	10800a17 	ldw	r2,40(r2)
   8f5fc:	10800044 	addi	r2,r2,1
   8f600:	1081ffcc 	andi	r2,r2,2047
   8f604:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   8f608:	e0bffb17 	ldw	r2,-20(fp)
   8f60c:	10c00b17 	ldw	r3,44(r2)
   8f610:	e0bffe17 	ldw	r2,-8(fp)
   8f614:	18801526 	beq	r3,r2,8f66c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8f618:	e0bffc17 	ldw	r2,-16(fp)
   8f61c:	10800037 	ldwio	r2,0(r2)
   8f620:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8f624:	e0bff917 	ldw	r2,-28(fp)
   8f628:	10a0000c 	andi	r2,r2,32768
   8f62c:	10001126 	beq	r2,zero,8f674 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8f630:	e0bffb17 	ldw	r2,-20(fp)
   8f634:	10800a17 	ldw	r2,40(r2)
   8f638:	e0fff917 	ldw	r3,-28(fp)
   8f63c:	1809883a 	mov	r4,r3
   8f640:	e0fffb17 	ldw	r3,-20(fp)
   8f644:	1885883a 	add	r2,r3,r2
   8f648:	10800e04 	addi	r2,r2,56
   8f64c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f650:	e0bffb17 	ldw	r2,-20(fp)
   8f654:	10800a17 	ldw	r2,40(r2)
   8f658:	10800044 	addi	r2,r2,1
   8f65c:	10c1ffcc 	andi	r3,r2,2047
   8f660:	e0bffb17 	ldw	r2,-20(fp)
   8f664:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8f668:	003fe206 	br	8f5f4 <__alt_data_end+0xfffadb74>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   8f66c:	0001883a 	nop
   8f670:	00000106 	br	8f678 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   8f674:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8f678:	e0bff917 	ldw	r2,-28(fp)
   8f67c:	10bfffec 	andhi	r2,r2,65535
   8f680:	10000f26 	beq	r2,zero,8f6c0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f684:	e0bffb17 	ldw	r2,-20(fp)
   8f688:	10c00817 	ldw	r3,32(r2)
   8f68c:	00bfff84 	movi	r2,-2
   8f690:	1886703a 	and	r3,r3,r2
   8f694:	e0bffb17 	ldw	r2,-20(fp)
   8f698:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8f69c:	e0bffc17 	ldw	r2,-16(fp)
   8f6a0:	10800104 	addi	r2,r2,4
   8f6a4:	1007883a 	mov	r3,r2
   8f6a8:	e0bffb17 	ldw	r2,-20(fp)
   8f6ac:	10800817 	ldw	r2,32(r2)
   8f6b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f6b4:	e0bffc17 	ldw	r2,-16(fp)
   8f6b8:	10800104 	addi	r2,r2,4
   8f6bc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8f6c0:	e0bffd17 	ldw	r2,-12(fp)
   8f6c4:	1080800c 	andi	r2,r2,512
   8f6c8:	103fbe26 	beq	r2,zero,8f5c4 <__alt_data_end+0xfffadb44>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8f6cc:	e0bffd17 	ldw	r2,-12(fp)
   8f6d0:	1004d43a 	srli	r2,r2,16
   8f6d4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8f6d8:	00001406 	br	8f72c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8f6dc:	e0bffc17 	ldw	r2,-16(fp)
   8f6e0:	e0fffb17 	ldw	r3,-20(fp)
   8f6e4:	18c00d17 	ldw	r3,52(r3)
   8f6e8:	e13ffb17 	ldw	r4,-20(fp)
   8f6ec:	20c7883a 	add	r3,r4,r3
   8f6f0:	18c20e04 	addi	r3,r3,2104
   8f6f4:	18c00003 	ldbu	r3,0(r3)
   8f6f8:	18c03fcc 	andi	r3,r3,255
   8f6fc:	18c0201c 	xori	r3,r3,128
   8f700:	18ffe004 	addi	r3,r3,-128
   8f704:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f708:	e0bffb17 	ldw	r2,-20(fp)
   8f70c:	10800d17 	ldw	r2,52(r2)
   8f710:	10800044 	addi	r2,r2,1
   8f714:	10c1ffcc 	andi	r3,r2,2047
   8f718:	e0bffb17 	ldw	r2,-20(fp)
   8f71c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8f720:	e0bffa17 	ldw	r2,-24(fp)
   8f724:	10bfffc4 	addi	r2,r2,-1
   8f728:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8f72c:	e0bffa17 	ldw	r2,-24(fp)
   8f730:	10000526 	beq	r2,zero,8f748 <altera_avalon_jtag_uart_irq+0x1a8>
   8f734:	e0bffb17 	ldw	r2,-20(fp)
   8f738:	10c00d17 	ldw	r3,52(r2)
   8f73c:	e0bffb17 	ldw	r2,-20(fp)
   8f740:	10800c17 	ldw	r2,48(r2)
   8f744:	18bfe51e 	bne	r3,r2,8f6dc <__alt_data_end+0xfffadc5c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8f748:	e0bffa17 	ldw	r2,-24(fp)
   8f74c:	103f9d26 	beq	r2,zero,8f5c4 <__alt_data_end+0xfffadb44>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8f750:	e0bffb17 	ldw	r2,-20(fp)
   8f754:	10c00817 	ldw	r3,32(r2)
   8f758:	00bfff44 	movi	r2,-3
   8f75c:	1886703a 	and	r3,r3,r2
   8f760:	e0bffb17 	ldw	r2,-20(fp)
   8f764:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8f768:	e0bffb17 	ldw	r2,-20(fp)
   8f76c:	10800017 	ldw	r2,0(r2)
   8f770:	10800104 	addi	r2,r2,4
   8f774:	1007883a 	mov	r3,r2
   8f778:	e0bffb17 	ldw	r2,-20(fp)
   8f77c:	10800817 	ldw	r2,32(r2)
   8f780:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f784:	e0bffc17 	ldw	r2,-16(fp)
   8f788:	10800104 	addi	r2,r2,4
   8f78c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8f790:	003f8c06 	br	8f5c4 <__alt_data_end+0xfffadb44>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   8f794:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   8f798:	0001883a 	nop
   8f79c:	e037883a 	mov	sp,fp
   8f7a0:	df000017 	ldw	fp,0(sp)
   8f7a4:	dec00104 	addi	sp,sp,4
   8f7a8:	f800283a 	ret

0008f7ac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8f7ac:	defff804 	addi	sp,sp,-32
   8f7b0:	df000715 	stw	fp,28(sp)
   8f7b4:	df000704 	addi	fp,sp,28
   8f7b8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8f7bc:	e0bffb17 	ldw	r2,-20(fp)
   8f7c0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8f7c4:	e0bff917 	ldw	r2,-28(fp)
   8f7c8:	10800017 	ldw	r2,0(r2)
   8f7cc:	10800104 	addi	r2,r2,4
   8f7d0:	10800037 	ldwio	r2,0(r2)
   8f7d4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8f7d8:	e0bffa17 	ldw	r2,-24(fp)
   8f7dc:	1081000c 	andi	r2,r2,1024
   8f7e0:	10000b26 	beq	r2,zero,8f810 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8f7e4:	e0bff917 	ldw	r2,-28(fp)
   8f7e8:	10800017 	ldw	r2,0(r2)
   8f7ec:	10800104 	addi	r2,r2,4
   8f7f0:	1007883a 	mov	r3,r2
   8f7f4:	e0bff917 	ldw	r2,-28(fp)
   8f7f8:	10800817 	ldw	r2,32(r2)
   8f7fc:	10810014 	ori	r2,r2,1024
   8f800:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   8f804:	e0bff917 	ldw	r2,-28(fp)
   8f808:	10000915 	stw	zero,36(r2)
   8f80c:	00000a06 	br	8f838 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8f810:	e0bff917 	ldw	r2,-28(fp)
   8f814:	10c00917 	ldw	r3,36(r2)
   8f818:	00a00034 	movhi	r2,32768
   8f81c:	10bfff04 	addi	r2,r2,-4
   8f820:	10c00536 	bltu	r2,r3,8f838 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   8f824:	e0bff917 	ldw	r2,-28(fp)
   8f828:	10800917 	ldw	r2,36(r2)
   8f82c:	10c00044 	addi	r3,r2,1
   8f830:	e0bff917 	ldw	r2,-28(fp)
   8f834:	10c00915 	stw	r3,36(r2)
   8f838:	d0a76217 	ldw	r2,-25208(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8f83c:	e037883a 	mov	sp,fp
   8f840:	df000017 	ldw	fp,0(sp)
   8f844:	dec00104 	addi	sp,sp,4
   8f848:	f800283a 	ret

0008f84c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8f84c:	defffd04 	addi	sp,sp,-12
   8f850:	df000215 	stw	fp,8(sp)
   8f854:	df000204 	addi	fp,sp,8
   8f858:	e13ffe15 	stw	r4,-8(fp)
   8f85c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8f860:	00000506 	br	8f878 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   8f864:	e0bfff17 	ldw	r2,-4(fp)
   8f868:	1090000c 	andi	r2,r2,16384
   8f86c:	10000226 	beq	r2,zero,8f878 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   8f870:	00bffd44 	movi	r2,-11
   8f874:	00000b06 	br	8f8a4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8f878:	e0bffe17 	ldw	r2,-8(fp)
   8f87c:	10c00d17 	ldw	r3,52(r2)
   8f880:	e0bffe17 	ldw	r2,-8(fp)
   8f884:	10800c17 	ldw	r2,48(r2)
   8f888:	18800526 	beq	r3,r2,8f8a0 <altera_avalon_jtag_uart_close+0x54>
   8f88c:	e0bffe17 	ldw	r2,-8(fp)
   8f890:	10c00917 	ldw	r3,36(r2)
   8f894:	e0bffe17 	ldw	r2,-8(fp)
   8f898:	10800117 	ldw	r2,4(r2)
   8f89c:	18bff136 	bltu	r3,r2,8f864 <__alt_data_end+0xfffadde4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8f8a0:	0005883a 	mov	r2,zero
}
   8f8a4:	e037883a 	mov	sp,fp
   8f8a8:	df000017 	ldw	fp,0(sp)
   8f8ac:	dec00104 	addi	sp,sp,4
   8f8b0:	f800283a 	ret

0008f8b4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8f8b4:	defffa04 	addi	sp,sp,-24
   8f8b8:	df000515 	stw	fp,20(sp)
   8f8bc:	df000504 	addi	fp,sp,20
   8f8c0:	e13ffd15 	stw	r4,-12(fp)
   8f8c4:	e17ffe15 	stw	r5,-8(fp)
   8f8c8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   8f8cc:	00bff9c4 	movi	r2,-25
   8f8d0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   8f8d4:	e0bffe17 	ldw	r2,-8(fp)
   8f8d8:	10da8060 	cmpeqi	r3,r2,27137
   8f8dc:	1800031e 	bne	r3,zero,8f8ec <altera_avalon_jtag_uart_ioctl+0x38>
   8f8e0:	109a80a0 	cmpeqi	r2,r2,27138
   8f8e4:	1000181e 	bne	r2,zero,8f948 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   8f8e8:	00002906 	br	8f990 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8f8ec:	e0bffd17 	ldw	r2,-12(fp)
   8f8f0:	10c00117 	ldw	r3,4(r2)
   8f8f4:	00a00034 	movhi	r2,32768
   8f8f8:	10bfffc4 	addi	r2,r2,-1
   8f8fc:	18802126 	beq	r3,r2,8f984 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   8f900:	e0bfff17 	ldw	r2,-4(fp)
   8f904:	10800017 	ldw	r2,0(r2)
   8f908:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8f90c:	e0bffc17 	ldw	r2,-16(fp)
   8f910:	10800090 	cmplti	r2,r2,2
   8f914:	1000061e 	bne	r2,zero,8f930 <altera_avalon_jtag_uart_ioctl+0x7c>
   8f918:	e0fffc17 	ldw	r3,-16(fp)
   8f91c:	00a00034 	movhi	r2,32768
   8f920:	10bfffc4 	addi	r2,r2,-1
   8f924:	18800226 	beq	r3,r2,8f930 <altera_avalon_jtag_uart_ioctl+0x7c>
   8f928:	e0bffc17 	ldw	r2,-16(fp)
   8f92c:	00000206 	br	8f938 <altera_avalon_jtag_uart_ioctl+0x84>
   8f930:	00a00034 	movhi	r2,32768
   8f934:	10bfff84 	addi	r2,r2,-2
   8f938:	e0fffd17 	ldw	r3,-12(fp)
   8f93c:	18800115 	stw	r2,4(r3)
      rc = 0;
   8f940:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8f944:	00000f06 	br	8f984 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8f948:	e0bffd17 	ldw	r2,-12(fp)
   8f94c:	10c00117 	ldw	r3,4(r2)
   8f950:	00a00034 	movhi	r2,32768
   8f954:	10bfffc4 	addi	r2,r2,-1
   8f958:	18800c26 	beq	r3,r2,8f98c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8f95c:	e0bffd17 	ldw	r2,-12(fp)
   8f960:	10c00917 	ldw	r3,36(r2)
   8f964:	e0bffd17 	ldw	r2,-12(fp)
   8f968:	10800117 	ldw	r2,4(r2)
   8f96c:	1885803a 	cmpltu	r2,r3,r2
   8f970:	10c03fcc 	andi	r3,r2,255
   8f974:	e0bfff17 	ldw	r2,-4(fp)
   8f978:	10c00015 	stw	r3,0(r2)
      rc = 0;
   8f97c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8f980:	00000206 	br	8f98c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   8f984:	0001883a 	nop
   8f988:	00000106 	br	8f990 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   8f98c:	0001883a 	nop

  default:
    break;
  }

  return rc;
   8f990:	e0bffb17 	ldw	r2,-20(fp)
}
   8f994:	e037883a 	mov	sp,fp
   8f998:	df000017 	ldw	fp,0(sp)
   8f99c:	dec00104 	addi	sp,sp,4
   8f9a0:	f800283a 	ret

0008f9a4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8f9a4:	defff304 	addi	sp,sp,-52
   8f9a8:	dfc00c15 	stw	ra,48(sp)
   8f9ac:	df000b15 	stw	fp,44(sp)
   8f9b0:	df000b04 	addi	fp,sp,44
   8f9b4:	e13ffc15 	stw	r4,-16(fp)
   8f9b8:	e17ffd15 	stw	r5,-12(fp)
   8f9bc:	e1bffe15 	stw	r6,-8(fp)
   8f9c0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   8f9c4:	e0bffd17 	ldw	r2,-12(fp)
   8f9c8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8f9cc:	00004706 	br	8faec <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8f9d0:	e0bffc17 	ldw	r2,-16(fp)
   8f9d4:	10800a17 	ldw	r2,40(r2)
   8f9d8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8f9dc:	e0bffc17 	ldw	r2,-16(fp)
   8f9e0:	10800b17 	ldw	r2,44(r2)
   8f9e4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   8f9e8:	e0fff717 	ldw	r3,-36(fp)
   8f9ec:	e0bff817 	ldw	r2,-32(fp)
   8f9f0:	18800536 	bltu	r3,r2,8fa08 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8f9f4:	e0fff717 	ldw	r3,-36(fp)
   8f9f8:	e0bff817 	ldw	r2,-32(fp)
   8f9fc:	1885c83a 	sub	r2,r3,r2
   8fa00:	e0bff615 	stw	r2,-40(fp)
   8fa04:	00000406 	br	8fa18 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8fa08:	00c20004 	movi	r3,2048
   8fa0c:	e0bff817 	ldw	r2,-32(fp)
   8fa10:	1885c83a 	sub	r2,r3,r2
   8fa14:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8fa18:	e0bff617 	ldw	r2,-40(fp)
   8fa1c:	10001e26 	beq	r2,zero,8fa98 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   8fa20:	e0fffe17 	ldw	r3,-8(fp)
   8fa24:	e0bff617 	ldw	r2,-40(fp)
   8fa28:	1880022e 	bgeu	r3,r2,8fa34 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   8fa2c:	e0bffe17 	ldw	r2,-8(fp)
   8fa30:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8fa34:	e0bffc17 	ldw	r2,-16(fp)
   8fa38:	10c00e04 	addi	r3,r2,56
   8fa3c:	e0bff817 	ldw	r2,-32(fp)
   8fa40:	1885883a 	add	r2,r3,r2
   8fa44:	e1bff617 	ldw	r6,-40(fp)
   8fa48:	100b883a 	mov	r5,r2
   8fa4c:	e13ff517 	ldw	r4,-44(fp)
   8fa50:	00874b00 	call	874b0 <memcpy>
      ptr   += n;
   8fa54:	e0fff517 	ldw	r3,-44(fp)
   8fa58:	e0bff617 	ldw	r2,-40(fp)
   8fa5c:	1885883a 	add	r2,r3,r2
   8fa60:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   8fa64:	e0fffe17 	ldw	r3,-8(fp)
   8fa68:	e0bff617 	ldw	r2,-40(fp)
   8fa6c:	1885c83a 	sub	r2,r3,r2
   8fa70:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8fa74:	e0fff817 	ldw	r3,-32(fp)
   8fa78:	e0bff617 	ldw	r2,-40(fp)
   8fa7c:	1885883a 	add	r2,r3,r2
   8fa80:	10c1ffcc 	andi	r3,r2,2047
   8fa84:	e0bffc17 	ldw	r2,-16(fp)
   8fa88:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8fa8c:	e0bffe17 	ldw	r2,-8(fp)
   8fa90:	00bfcf16 	blt	zero,r2,8f9d0 <__alt_data_end+0xfffadf50>
   8fa94:	00000106 	br	8fa9c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   8fa98:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   8fa9c:	e0fff517 	ldw	r3,-44(fp)
   8faa0:	e0bffd17 	ldw	r2,-12(fp)
   8faa4:	1880141e 	bne	r3,r2,8faf8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8faa8:	e0bfff17 	ldw	r2,-4(fp)
   8faac:	1090000c 	andi	r2,r2,16384
   8fab0:	1000131e 	bne	r2,zero,8fb00 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8fab4:	0001883a 	nop
   8fab8:	e0bffc17 	ldw	r2,-16(fp)
   8fabc:	10c00a17 	ldw	r3,40(r2)
   8fac0:	e0bff717 	ldw	r2,-36(fp)
   8fac4:	1880051e 	bne	r3,r2,8fadc <altera_avalon_jtag_uart_read+0x138>
   8fac8:	e0bffc17 	ldw	r2,-16(fp)
   8facc:	10c00917 	ldw	r3,36(r2)
   8fad0:	e0bffc17 	ldw	r2,-16(fp)
   8fad4:	10800117 	ldw	r2,4(r2)
   8fad8:	18bff736 	bltu	r3,r2,8fab8 <__alt_data_end+0xfffae038>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8fadc:	e0bffc17 	ldw	r2,-16(fp)
   8fae0:	10c00a17 	ldw	r3,40(r2)
   8fae4:	e0bff717 	ldw	r2,-36(fp)
   8fae8:	18800726 	beq	r3,r2,8fb08 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8faec:	e0bffe17 	ldw	r2,-8(fp)
   8faf0:	00bfb716 	blt	zero,r2,8f9d0 <__alt_data_end+0xfffadf50>
   8faf4:	00000506 	br	8fb0c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   8faf8:	0001883a 	nop
   8fafc:	00000306 	br	8fb0c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   8fb00:	0001883a 	nop
   8fb04:	00000106 	br	8fb0c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   8fb08:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8fb0c:	e0fff517 	ldw	r3,-44(fp)
   8fb10:	e0bffd17 	ldw	r2,-12(fp)
   8fb14:	18801826 	beq	r3,r2,8fb78 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fb18:	0005303a 	rdctl	r2,status
   8fb1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8fb20:	e0fffb17 	ldw	r3,-20(fp)
   8fb24:	00bfff84 	movi	r2,-2
   8fb28:	1884703a 	and	r2,r3,r2
   8fb2c:	1001703a 	wrctl	status,r2
  
  return context;
   8fb30:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8fb34:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8fb38:	e0bffc17 	ldw	r2,-16(fp)
   8fb3c:	10800817 	ldw	r2,32(r2)
   8fb40:	10c00054 	ori	r3,r2,1
   8fb44:	e0bffc17 	ldw	r2,-16(fp)
   8fb48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8fb4c:	e0bffc17 	ldw	r2,-16(fp)
   8fb50:	10800017 	ldw	r2,0(r2)
   8fb54:	10800104 	addi	r2,r2,4
   8fb58:	1007883a 	mov	r3,r2
   8fb5c:	e0bffc17 	ldw	r2,-16(fp)
   8fb60:	10800817 	ldw	r2,32(r2)
   8fb64:	18800035 	stwio	r2,0(r3)
   8fb68:	e0bffa17 	ldw	r2,-24(fp)
   8fb6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fb70:	e0bff917 	ldw	r2,-28(fp)
   8fb74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8fb78:	e0fff517 	ldw	r3,-44(fp)
   8fb7c:	e0bffd17 	ldw	r2,-12(fp)
   8fb80:	18800426 	beq	r3,r2,8fb94 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   8fb84:	e0fff517 	ldw	r3,-44(fp)
   8fb88:	e0bffd17 	ldw	r2,-12(fp)
   8fb8c:	1885c83a 	sub	r2,r3,r2
   8fb90:	00000606 	br	8fbac <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   8fb94:	e0bfff17 	ldw	r2,-4(fp)
   8fb98:	1090000c 	andi	r2,r2,16384
   8fb9c:	10000226 	beq	r2,zero,8fba8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8fba0:	00bffd44 	movi	r2,-11
   8fba4:	00000106 	br	8fbac <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   8fba8:	00bffec4 	movi	r2,-5
}
   8fbac:	e037883a 	mov	sp,fp
   8fbb0:	dfc00117 	ldw	ra,4(sp)
   8fbb4:	df000017 	ldw	fp,0(sp)
   8fbb8:	dec00204 	addi	sp,sp,8
   8fbbc:	f800283a 	ret

0008fbc0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8fbc0:	defff304 	addi	sp,sp,-52
   8fbc4:	dfc00c15 	stw	ra,48(sp)
   8fbc8:	df000b15 	stw	fp,44(sp)
   8fbcc:	df000b04 	addi	fp,sp,44
   8fbd0:	e13ffc15 	stw	r4,-16(fp)
   8fbd4:	e17ffd15 	stw	r5,-12(fp)
   8fbd8:	e1bffe15 	stw	r6,-8(fp)
   8fbdc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8fbe0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8fbe4:	e0bffd17 	ldw	r2,-12(fp)
   8fbe8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8fbec:	00003706 	br	8fccc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8fbf0:	e0bffc17 	ldw	r2,-16(fp)
   8fbf4:	10800c17 	ldw	r2,48(r2)
   8fbf8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   8fbfc:	e0bffc17 	ldw	r2,-16(fp)
   8fc00:	10800d17 	ldw	r2,52(r2)
   8fc04:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   8fc08:	e0fff917 	ldw	r3,-28(fp)
   8fc0c:	e0bff517 	ldw	r2,-44(fp)
   8fc10:	1880062e 	bgeu	r3,r2,8fc2c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8fc14:	e0fff517 	ldw	r3,-44(fp)
   8fc18:	e0bff917 	ldw	r2,-28(fp)
   8fc1c:	1885c83a 	sub	r2,r3,r2
   8fc20:	10bfffc4 	addi	r2,r2,-1
   8fc24:	e0bff615 	stw	r2,-40(fp)
   8fc28:	00000b06 	br	8fc58 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   8fc2c:	e0bff517 	ldw	r2,-44(fp)
   8fc30:	10000526 	beq	r2,zero,8fc48 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8fc34:	00c20004 	movi	r3,2048
   8fc38:	e0bff917 	ldw	r2,-28(fp)
   8fc3c:	1885c83a 	sub	r2,r3,r2
   8fc40:	e0bff615 	stw	r2,-40(fp)
   8fc44:	00000406 	br	8fc58 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8fc48:	00c1ffc4 	movi	r3,2047
   8fc4c:	e0bff917 	ldw	r2,-28(fp)
   8fc50:	1885c83a 	sub	r2,r3,r2
   8fc54:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8fc58:	e0bff617 	ldw	r2,-40(fp)
   8fc5c:	10001e26 	beq	r2,zero,8fcd8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   8fc60:	e0fffe17 	ldw	r3,-8(fp)
   8fc64:	e0bff617 	ldw	r2,-40(fp)
   8fc68:	1880022e 	bgeu	r3,r2,8fc74 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   8fc6c:	e0bffe17 	ldw	r2,-8(fp)
   8fc70:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8fc74:	e0bffc17 	ldw	r2,-16(fp)
   8fc78:	10c20e04 	addi	r3,r2,2104
   8fc7c:	e0bff917 	ldw	r2,-28(fp)
   8fc80:	1885883a 	add	r2,r3,r2
   8fc84:	e1bff617 	ldw	r6,-40(fp)
   8fc88:	e17ffd17 	ldw	r5,-12(fp)
   8fc8c:	1009883a 	mov	r4,r2
   8fc90:	00874b00 	call	874b0 <memcpy>
      ptr   += n;
   8fc94:	e0fffd17 	ldw	r3,-12(fp)
   8fc98:	e0bff617 	ldw	r2,-40(fp)
   8fc9c:	1885883a 	add	r2,r3,r2
   8fca0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   8fca4:	e0fffe17 	ldw	r3,-8(fp)
   8fca8:	e0bff617 	ldw	r2,-40(fp)
   8fcac:	1885c83a 	sub	r2,r3,r2
   8fcb0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8fcb4:	e0fff917 	ldw	r3,-28(fp)
   8fcb8:	e0bff617 	ldw	r2,-40(fp)
   8fcbc:	1885883a 	add	r2,r3,r2
   8fcc0:	10c1ffcc 	andi	r3,r2,2047
   8fcc4:	e0bffc17 	ldw	r2,-16(fp)
   8fcc8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8fccc:	e0bffe17 	ldw	r2,-8(fp)
   8fcd0:	00bfc716 	blt	zero,r2,8fbf0 <__alt_data_end+0xfffae170>
   8fcd4:	00000106 	br	8fcdc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   8fcd8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fcdc:	0005303a 	rdctl	r2,status
   8fce0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8fce4:	e0fffb17 	ldw	r3,-20(fp)
   8fce8:	00bfff84 	movi	r2,-2
   8fcec:	1884703a 	and	r2,r3,r2
   8fcf0:	1001703a 	wrctl	status,r2
  
  return context;
   8fcf4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8fcf8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8fcfc:	e0bffc17 	ldw	r2,-16(fp)
   8fd00:	10800817 	ldw	r2,32(r2)
   8fd04:	10c00094 	ori	r3,r2,2
   8fd08:	e0bffc17 	ldw	r2,-16(fp)
   8fd0c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8fd10:	e0bffc17 	ldw	r2,-16(fp)
   8fd14:	10800017 	ldw	r2,0(r2)
   8fd18:	10800104 	addi	r2,r2,4
   8fd1c:	1007883a 	mov	r3,r2
   8fd20:	e0bffc17 	ldw	r2,-16(fp)
   8fd24:	10800817 	ldw	r2,32(r2)
   8fd28:	18800035 	stwio	r2,0(r3)
   8fd2c:	e0bffa17 	ldw	r2,-24(fp)
   8fd30:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fd34:	e0bff817 	ldw	r2,-32(fp)
   8fd38:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8fd3c:	e0bffe17 	ldw	r2,-8(fp)
   8fd40:	0080100e 	bge	zero,r2,8fd84 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   8fd44:	e0bfff17 	ldw	r2,-4(fp)
   8fd48:	1090000c 	andi	r2,r2,16384
   8fd4c:	1000101e 	bne	r2,zero,8fd90 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8fd50:	0001883a 	nop
   8fd54:	e0bffc17 	ldw	r2,-16(fp)
   8fd58:	10c00d17 	ldw	r3,52(r2)
   8fd5c:	e0bff517 	ldw	r2,-44(fp)
   8fd60:	1880051e 	bne	r3,r2,8fd78 <altera_avalon_jtag_uart_write+0x1b8>
   8fd64:	e0bffc17 	ldw	r2,-16(fp)
   8fd68:	10c00917 	ldw	r3,36(r2)
   8fd6c:	e0bffc17 	ldw	r2,-16(fp)
   8fd70:	10800117 	ldw	r2,4(r2)
   8fd74:	18bff736 	bltu	r3,r2,8fd54 <__alt_data_end+0xfffae2d4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   8fd78:	e0bffc17 	ldw	r2,-16(fp)
   8fd7c:	10800917 	ldw	r2,36(r2)
   8fd80:	1000051e 	bne	r2,zero,8fd98 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   8fd84:	e0bffe17 	ldw	r2,-8(fp)
   8fd88:	00bfd016 	blt	zero,r2,8fccc <__alt_data_end+0xfffae24c>
   8fd8c:	00000306 	br	8fd9c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   8fd90:	0001883a 	nop
   8fd94:	00000106 	br	8fd9c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   8fd98:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8fd9c:	e0fffd17 	ldw	r3,-12(fp)
   8fda0:	e0bff717 	ldw	r2,-36(fp)
   8fda4:	18800426 	beq	r3,r2,8fdb8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   8fda8:	e0fffd17 	ldw	r3,-12(fp)
   8fdac:	e0bff717 	ldw	r2,-36(fp)
   8fdb0:	1885c83a 	sub	r2,r3,r2
   8fdb4:	00000606 	br	8fdd0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   8fdb8:	e0bfff17 	ldw	r2,-4(fp)
   8fdbc:	1090000c 	andi	r2,r2,16384
   8fdc0:	10000226 	beq	r2,zero,8fdcc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   8fdc4:	00bffd44 	movi	r2,-11
   8fdc8:	00000106 	br	8fdd0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8fdcc:	00bffec4 	movi	r2,-5
}
   8fdd0:	e037883a 	mov	sp,fp
   8fdd4:	dfc00117 	ldw	ra,4(sp)
   8fdd8:	df000017 	ldw	fp,0(sp)
   8fddc:	dec00204 	addi	sp,sp,8
   8fde0:	f800283a 	ret

0008fde4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   8fde4:	defffa04 	addi	sp,sp,-24
   8fde8:	dfc00515 	stw	ra,20(sp)
   8fdec:	df000415 	stw	fp,16(sp)
   8fdf0:	df000404 	addi	fp,sp,16
   8fdf4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   8fdf8:	0007883a 	mov	r3,zero
   8fdfc:	e0bfff17 	ldw	r2,-4(fp)
   8fe00:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   8fe04:	e0bfff17 	ldw	r2,-4(fp)
   8fe08:	10800104 	addi	r2,r2,4
   8fe0c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fe10:	0005303a 	rdctl	r2,status
   8fe14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8fe18:	e0fffd17 	ldw	r3,-12(fp)
   8fe1c:	00bfff84 	movi	r2,-2
   8fe20:	1884703a 	and	r2,r3,r2
   8fe24:	1001703a 	wrctl	status,r2
  
  return context;
   8fe28:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   8fe2c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   8fe30:	008f0700 	call	8f070 <alt_tick>
   8fe34:	e0bffc17 	ldw	r2,-16(fp)
   8fe38:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fe3c:	e0bffe17 	ldw	r2,-8(fp)
   8fe40:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   8fe44:	0001883a 	nop
   8fe48:	e037883a 	mov	sp,fp
   8fe4c:	dfc00117 	ldw	ra,4(sp)
   8fe50:	df000017 	ldw	fp,0(sp)
   8fe54:	dec00204 	addi	sp,sp,8
   8fe58:	f800283a 	ret

0008fe5c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   8fe5c:	defff804 	addi	sp,sp,-32
   8fe60:	dfc00715 	stw	ra,28(sp)
   8fe64:	df000615 	stw	fp,24(sp)
   8fe68:	df000604 	addi	fp,sp,24
   8fe6c:	e13ffc15 	stw	r4,-16(fp)
   8fe70:	e17ffd15 	stw	r5,-12(fp)
   8fe74:	e1bffe15 	stw	r6,-8(fp)
   8fe78:	e1ffff15 	stw	r7,-4(fp)
   8fe7c:	e0bfff17 	ldw	r2,-4(fp)
   8fe80:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   8fe84:	d0a76217 	ldw	r2,-25208(gp)
   8fe88:	1000021e 	bne	r2,zero,8fe94 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   8fe8c:	e0bffb17 	ldw	r2,-20(fp)
   8fe90:	d0a76215 	stw	r2,-25208(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   8fe94:	e0bffc17 	ldw	r2,-16(fp)
   8fe98:	10800104 	addi	r2,r2,4
   8fe9c:	00c001c4 	movi	r3,7
   8fea0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   8fea4:	d8000015 	stw	zero,0(sp)
   8fea8:	e1fffc17 	ldw	r7,-16(fp)
   8feac:	01800274 	movhi	r6,9
   8feb0:	31bf7904 	addi	r6,r6,-540
   8feb4:	e17ffe17 	ldw	r5,-8(fp)
   8feb8:	e13ffd17 	ldw	r4,-12(fp)
   8febc:	008e5c80 	call	8e5c8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   8fec0:	0001883a 	nop
   8fec4:	e037883a 	mov	sp,fp
   8fec8:	dfc00117 	ldw	ra,4(sp)
   8fecc:	df000017 	ldw	fp,0(sp)
   8fed0:	dec00204 	addi	sp,sp,8
   8fed4:	f800283a 	ret

0008fed8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8fed8:	defff504 	addi	sp,sp,-44
   8fedc:	df000a15 	stw	fp,40(sp)
   8fee0:	df000a04 	addi	fp,sp,40
   8fee4:	e13ffc15 	stw	r4,-16(fp)
   8fee8:	e17ffd15 	stw	r5,-12(fp)
   8feec:	e1bffe15 	stw	r6,-8(fp)
   8fef0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8fef4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8fef8:	d0a76217 	ldw	r2,-25208(gp)
  
  if (alt_ticks_per_second ())
   8fefc:	10003c26 	beq	r2,zero,8fff0 <alt_alarm_start+0x118>
  {
    if (alarm)
   8ff00:	e0bffc17 	ldw	r2,-16(fp)
   8ff04:	10003826 	beq	r2,zero,8ffe8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   8ff08:	e0bffc17 	ldw	r2,-16(fp)
   8ff0c:	e0fffe17 	ldw	r3,-8(fp)
   8ff10:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   8ff14:	e0bffc17 	ldw	r2,-16(fp)
   8ff18:	e0ffff17 	ldw	r3,-4(fp)
   8ff1c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ff20:	0005303a 	rdctl	r2,status
   8ff24:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ff28:	e0fff917 	ldw	r3,-28(fp)
   8ff2c:	00bfff84 	movi	r2,-2
   8ff30:	1884703a 	and	r2,r3,r2
   8ff34:	1001703a 	wrctl	status,r2
  
  return context;
   8ff38:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   8ff3c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8ff40:	d0a76317 	ldw	r2,-25204(gp)
      
      current_nticks = alt_nticks();
   8ff44:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8ff48:	e0fffd17 	ldw	r3,-12(fp)
   8ff4c:	e0bff617 	ldw	r2,-40(fp)
   8ff50:	1885883a 	add	r2,r3,r2
   8ff54:	10c00044 	addi	r3,r2,1
   8ff58:	e0bffc17 	ldw	r2,-16(fp)
   8ff5c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8ff60:	e0bffc17 	ldw	r2,-16(fp)
   8ff64:	10c00217 	ldw	r3,8(r2)
   8ff68:	e0bff617 	ldw	r2,-40(fp)
   8ff6c:	1880042e 	bgeu	r3,r2,8ff80 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   8ff70:	e0bffc17 	ldw	r2,-16(fp)
   8ff74:	00c00044 	movi	r3,1
   8ff78:	10c00405 	stb	r3,16(r2)
   8ff7c:	00000206 	br	8ff88 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   8ff80:	e0bffc17 	ldw	r2,-16(fp)
   8ff84:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8ff88:	e0bffc17 	ldw	r2,-16(fp)
   8ff8c:	d0e00e04 	addi	r3,gp,-32712
   8ff90:	e0fffa15 	stw	r3,-24(fp)
   8ff94:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8ff98:	e0bffb17 	ldw	r2,-20(fp)
   8ff9c:	e0fffa17 	ldw	r3,-24(fp)
   8ffa0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8ffa4:	e0bffa17 	ldw	r2,-24(fp)
   8ffa8:	10c00017 	ldw	r3,0(r2)
   8ffac:	e0bffb17 	ldw	r2,-20(fp)
   8ffb0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8ffb4:	e0bffa17 	ldw	r2,-24(fp)
   8ffb8:	10800017 	ldw	r2,0(r2)
   8ffbc:	e0fffb17 	ldw	r3,-20(fp)
   8ffc0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8ffc4:	e0bffa17 	ldw	r2,-24(fp)
   8ffc8:	e0fffb17 	ldw	r3,-20(fp)
   8ffcc:	10c00015 	stw	r3,0(r2)
   8ffd0:	e0bff817 	ldw	r2,-32(fp)
   8ffd4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ffd8:	e0bff717 	ldw	r2,-36(fp)
   8ffdc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8ffe0:	0005883a 	mov	r2,zero
   8ffe4:	00000306 	br	8fff4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   8ffe8:	00bffa84 	movi	r2,-22
   8ffec:	00000106 	br	8fff4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   8fff0:	00bfde84 	movi	r2,-134
  }
}
   8fff4:	e037883a 	mov	sp,fp
   8fff8:	df000017 	ldw	fp,0(sp)
   8fffc:	dec00104 	addi	sp,sp,4
   90000:	f800283a 	ret

00090004 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   90004:	defffe04 	addi	sp,sp,-8
   90008:	df000115 	stw	fp,4(sp)
   9000c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   90010:	e03fff15 	stw	zero,-4(fp)
   90014:	00000506 	br	9002c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   90018:	e0bfff17 	ldw	r2,-4(fp)
   9001c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   90020:	e0bfff17 	ldw	r2,-4(fp)
   90024:	10800804 	addi	r2,r2,32
   90028:	e0bfff15 	stw	r2,-4(fp)
   9002c:	e0bfff17 	ldw	r2,-4(fp)
   90030:	10820030 	cmpltui	r2,r2,2048
   90034:	103ff81e 	bne	r2,zero,90018 <__alt_data_end+0xfffae598>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   90038:	0001883a 	nop
   9003c:	e037883a 	mov	sp,fp
   90040:	df000017 	ldw	fp,0(sp)
   90044:	dec00104 	addi	sp,sp,4
   90048:	f800283a 	ret

0009004c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9004c:	defffe04 	addi	sp,sp,-8
   90050:	dfc00115 	stw	ra,4(sp)
   90054:	df000015 	stw	fp,0(sp)
   90058:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9005c:	d0a00b17 	ldw	r2,-32724(gp)
   90060:	10000326 	beq	r2,zero,90070 <alt_get_errno+0x24>
   90064:	d0a00b17 	ldw	r2,-32724(gp)
   90068:	103ee83a 	callr	r2
   9006c:	00000106 	br	90074 <alt_get_errno+0x28>
   90070:	d0a75304 	addi	r2,gp,-25268
}
   90074:	e037883a 	mov	sp,fp
   90078:	dfc00117 	ldw	ra,4(sp)
   9007c:	df000017 	ldw	fp,0(sp)
   90080:	dec00204 	addi	sp,sp,8
   90084:	f800283a 	ret

00090088 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   90088:	defffa04 	addi	sp,sp,-24
   9008c:	dfc00515 	stw	ra,20(sp)
   90090:	df000415 	stw	fp,16(sp)
   90094:	df000404 	addi	fp,sp,16
   90098:	e13ffe15 	stw	r4,-8(fp)
   9009c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   900a0:	e0bffe17 	ldw	r2,-8(fp)
   900a4:	10000326 	beq	r2,zero,900b4 <alt_dev_llist_insert+0x2c>
   900a8:	e0bffe17 	ldw	r2,-8(fp)
   900ac:	10800217 	ldw	r2,8(r2)
   900b0:	1000061e 	bne	r2,zero,900cc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   900b4:	009004c0 	call	9004c <alt_get_errno>
   900b8:	1007883a 	mov	r3,r2
   900bc:	00800584 	movi	r2,22
   900c0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   900c4:	00bffa84 	movi	r2,-22
   900c8:	00001306 	br	90118 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   900cc:	e0bffe17 	ldw	r2,-8(fp)
   900d0:	e0ffff17 	ldw	r3,-4(fp)
   900d4:	e0fffc15 	stw	r3,-16(fp)
   900d8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   900dc:	e0bffd17 	ldw	r2,-12(fp)
   900e0:	e0fffc17 	ldw	r3,-16(fp)
   900e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   900e8:	e0bffc17 	ldw	r2,-16(fp)
   900ec:	10c00017 	ldw	r3,0(r2)
   900f0:	e0bffd17 	ldw	r2,-12(fp)
   900f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   900f8:	e0bffc17 	ldw	r2,-16(fp)
   900fc:	10800017 	ldw	r2,0(r2)
   90100:	e0fffd17 	ldw	r3,-12(fp)
   90104:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   90108:	e0bffc17 	ldw	r2,-16(fp)
   9010c:	e0fffd17 	ldw	r3,-12(fp)
   90110:	10c00015 	stw	r3,0(r2)

  return 0;  
   90114:	0005883a 	mov	r2,zero
}
   90118:	e037883a 	mov	sp,fp
   9011c:	dfc00117 	ldw	ra,4(sp)
   90120:	df000017 	ldw	fp,0(sp)
   90124:	dec00204 	addi	sp,sp,8
   90128:	f800283a 	ret

0009012c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   9012c:	defffd04 	addi	sp,sp,-12
   90130:	dfc00215 	stw	ra,8(sp)
   90134:	df000115 	stw	fp,4(sp)
   90138:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   9013c:	00800274 	movhi	r2,9
   90140:	10833404 	addi	r2,r2,3280
   90144:	e0bfff15 	stw	r2,-4(fp)
   90148:	00000606 	br	90164 <_do_ctors+0x38>
        (*ctor) (); 
   9014c:	e0bfff17 	ldw	r2,-4(fp)
   90150:	10800017 	ldw	r2,0(r2)
   90154:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   90158:	e0bfff17 	ldw	r2,-4(fp)
   9015c:	10bfff04 	addi	r2,r2,-4
   90160:	e0bfff15 	stw	r2,-4(fp)
   90164:	e0ffff17 	ldw	r3,-4(fp)
   90168:	00800274 	movhi	r2,9
   9016c:	10833504 	addi	r2,r2,3284
   90170:	18bff62e 	bgeu	r3,r2,9014c <__alt_data_end+0xfffae6cc>
        (*ctor) (); 
}
   90174:	0001883a 	nop
   90178:	e037883a 	mov	sp,fp
   9017c:	dfc00117 	ldw	ra,4(sp)
   90180:	df000017 	ldw	fp,0(sp)
   90184:	dec00204 	addi	sp,sp,8
   90188:	f800283a 	ret

0009018c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   9018c:	defffd04 	addi	sp,sp,-12
   90190:	dfc00215 	stw	ra,8(sp)
   90194:	df000115 	stw	fp,4(sp)
   90198:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   9019c:	00800274 	movhi	r2,9
   901a0:	10833404 	addi	r2,r2,3280
   901a4:	e0bfff15 	stw	r2,-4(fp)
   901a8:	00000606 	br	901c4 <_do_dtors+0x38>
        (*dtor) (); 
   901ac:	e0bfff17 	ldw	r2,-4(fp)
   901b0:	10800017 	ldw	r2,0(r2)
   901b4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   901b8:	e0bfff17 	ldw	r2,-4(fp)
   901bc:	10bfff04 	addi	r2,r2,-4
   901c0:	e0bfff15 	stw	r2,-4(fp)
   901c4:	e0ffff17 	ldw	r3,-4(fp)
   901c8:	00800274 	movhi	r2,9
   901cc:	10833504 	addi	r2,r2,3284
   901d0:	18bff62e 	bgeu	r3,r2,901ac <__alt_data_end+0xfffae72c>
        (*dtor) (); 
}
   901d4:	0001883a 	nop
   901d8:	e037883a 	mov	sp,fp
   901dc:	dfc00117 	ldw	ra,4(sp)
   901e0:	df000017 	ldw	fp,0(sp)
   901e4:	dec00204 	addi	sp,sp,8
   901e8:	f800283a 	ret

000901ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   901ec:	defffe04 	addi	sp,sp,-8
   901f0:	dfc00115 	stw	ra,4(sp)
   901f4:	df000015 	stw	fp,0(sp)
   901f8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   901fc:	01440004 	movi	r5,4096
   90200:	0009883a 	mov	r4,zero
   90204:	00908b00 	call	908b0 <alt_icache_flush>
#endif
}
   90208:	0001883a 	nop
   9020c:	e037883a 	mov	sp,fp
   90210:	dfc00117 	ldw	ra,4(sp)
   90214:	df000017 	ldw	fp,0(sp)
   90218:	dec00204 	addi	sp,sp,8
   9021c:	f800283a 	ret

00090220 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   90220:	defffe04 	addi	sp,sp,-8
   90224:	df000115 	stw	fp,4(sp)
   90228:	df000104 	addi	fp,sp,4
   9022c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   90230:	e0bfff17 	ldw	r2,-4(fp)
   90234:	10bffe84 	addi	r2,r2,-6
   90238:	10c00428 	cmpgeui	r3,r2,16
   9023c:	18001a1e 	bne	r3,zero,902a8 <alt_exception_cause_generated_bad_addr+0x88>
   90240:	100690ba 	slli	r3,r2,2
   90244:	00800274 	movhi	r2,9
   90248:	10809604 	addi	r2,r2,600
   9024c:	1885883a 	add	r2,r3,r2
   90250:	10800017 	ldw	r2,0(r2)
   90254:	1000683a 	jmp	r2
   90258:	00090298 	cmpnei	zero,zero,9226
   9025c:	00090298 	cmpnei	zero,zero,9226
   90260:	000902a8 	cmpgeui	zero,zero,9226
   90264:	000902a8 	cmpgeui	zero,zero,9226
   90268:	000902a8 	cmpgeui	zero,zero,9226
   9026c:	00090298 	cmpnei	zero,zero,9226
   90270:	000902a0 	cmpeqi	zero,zero,9226
   90274:	000902a8 	cmpgeui	zero,zero,9226
   90278:	00090298 	cmpnei	zero,zero,9226
   9027c:	00090298 	cmpnei	zero,zero,9226
   90280:	000902a8 	cmpgeui	zero,zero,9226
   90284:	00090298 	cmpnei	zero,zero,9226
   90288:	000902a0 	cmpeqi	zero,zero,9226
   9028c:	000902a8 	cmpgeui	zero,zero,9226
   90290:	000902a8 	cmpgeui	zero,zero,9226
   90294:	00090298 	cmpnei	zero,zero,9226
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   90298:	00800044 	movi	r2,1
   9029c:	00000306 	br	902ac <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   902a0:	0005883a 	mov	r2,zero
   902a4:	00000106 	br	902ac <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   902a8:	0005883a 	mov	r2,zero
  }
}
   902ac:	e037883a 	mov	sp,fp
   902b0:	df000017 	ldw	fp,0(sp)
   902b4:	dec00104 	addi	sp,sp,4
   902b8:	f800283a 	ret

000902bc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   902bc:	defff904 	addi	sp,sp,-28
   902c0:	dfc00615 	stw	ra,24(sp)
   902c4:	df000515 	stw	fp,20(sp)
   902c8:	df000504 	addi	fp,sp,20
   902cc:	e13ffc15 	stw	r4,-16(fp)
   902d0:	e17ffd15 	stw	r5,-12(fp)
   902d4:	e1bffe15 	stw	r6,-8(fp)
   902d8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   902dc:	e1bfff17 	ldw	r6,-4(fp)
   902e0:	e17ffe17 	ldw	r5,-8(fp)
   902e4:	e13ffd17 	ldw	r4,-12(fp)
   902e8:	00904fc0 	call	904fc <open>
   902ec:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   902f0:	e0bffb17 	ldw	r2,-20(fp)
   902f4:	10001c16 	blt	r2,zero,90368 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   902f8:	00800274 	movhi	r2,9
   902fc:	1086f204 	addi	r2,r2,7112
   90300:	e0fffb17 	ldw	r3,-20(fp)
   90304:	18c00324 	muli	r3,r3,12
   90308:	10c5883a 	add	r2,r2,r3
   9030c:	10c00017 	ldw	r3,0(r2)
   90310:	e0bffc17 	ldw	r2,-16(fp)
   90314:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   90318:	00800274 	movhi	r2,9
   9031c:	1086f204 	addi	r2,r2,7112
   90320:	e0fffb17 	ldw	r3,-20(fp)
   90324:	18c00324 	muli	r3,r3,12
   90328:	10c5883a 	add	r2,r2,r3
   9032c:	10800104 	addi	r2,r2,4
   90330:	10c00017 	ldw	r3,0(r2)
   90334:	e0bffc17 	ldw	r2,-16(fp)
   90338:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   9033c:	00800274 	movhi	r2,9
   90340:	1086f204 	addi	r2,r2,7112
   90344:	e0fffb17 	ldw	r3,-20(fp)
   90348:	18c00324 	muli	r3,r3,12
   9034c:	10c5883a 	add	r2,r2,r3
   90350:	10800204 	addi	r2,r2,8
   90354:	10c00017 	ldw	r3,0(r2)
   90358:	e0bffc17 	ldw	r2,-16(fp)
   9035c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   90360:	e13ffb17 	ldw	r4,-20(fp)
   90364:	008eec00 	call	8eec0 <alt_release_fd>
  }
} 
   90368:	0001883a 	nop
   9036c:	e037883a 	mov	sp,fp
   90370:	dfc00117 	ldw	ra,4(sp)
   90374:	df000017 	ldw	fp,0(sp)
   90378:	dec00204 	addi	sp,sp,8
   9037c:	f800283a 	ret

00090380 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   90380:	defffb04 	addi	sp,sp,-20
   90384:	dfc00415 	stw	ra,16(sp)
   90388:	df000315 	stw	fp,12(sp)
   9038c:	df000304 	addi	fp,sp,12
   90390:	e13ffd15 	stw	r4,-12(fp)
   90394:	e17ffe15 	stw	r5,-8(fp)
   90398:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   9039c:	01c07fc4 	movi	r7,511
   903a0:	01800044 	movi	r6,1
   903a4:	e17ffd17 	ldw	r5,-12(fp)
   903a8:	01000274 	movhi	r4,9
   903ac:	2106f504 	addi	r4,r4,7124
   903b0:	00902bc0 	call	902bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   903b4:	01c07fc4 	movi	r7,511
   903b8:	000d883a 	mov	r6,zero
   903bc:	e17ffe17 	ldw	r5,-8(fp)
   903c0:	01000274 	movhi	r4,9
   903c4:	2106f204 	addi	r4,r4,7112
   903c8:	00902bc0 	call	902bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   903cc:	01c07fc4 	movi	r7,511
   903d0:	01800044 	movi	r6,1
   903d4:	e17fff17 	ldw	r5,-4(fp)
   903d8:	01000274 	movhi	r4,9
   903dc:	2106f804 	addi	r4,r4,7136
   903e0:	00902bc0 	call	902bc <alt_open_fd>
}  
   903e4:	0001883a 	nop
   903e8:	e037883a 	mov	sp,fp
   903ec:	dfc00117 	ldw	ra,4(sp)
   903f0:	df000017 	ldw	fp,0(sp)
   903f4:	dec00204 	addi	sp,sp,8
   903f8:	f800283a 	ret

000903fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   903fc:	defffe04 	addi	sp,sp,-8
   90400:	dfc00115 	stw	ra,4(sp)
   90404:	df000015 	stw	fp,0(sp)
   90408:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9040c:	d0a00b17 	ldw	r2,-32724(gp)
   90410:	10000326 	beq	r2,zero,90420 <alt_get_errno+0x24>
   90414:	d0a00b17 	ldw	r2,-32724(gp)
   90418:	103ee83a 	callr	r2
   9041c:	00000106 	br	90424 <alt_get_errno+0x28>
   90420:	d0a75304 	addi	r2,gp,-25268
}
   90424:	e037883a 	mov	sp,fp
   90428:	dfc00117 	ldw	ra,4(sp)
   9042c:	df000017 	ldw	fp,0(sp)
   90430:	dec00204 	addi	sp,sp,8
   90434:	f800283a 	ret

00090438 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   90438:	defffd04 	addi	sp,sp,-12
   9043c:	df000215 	stw	fp,8(sp)
   90440:	df000204 	addi	fp,sp,8
   90444:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   90448:	e0bfff17 	ldw	r2,-4(fp)
   9044c:	10800217 	ldw	r2,8(r2)
   90450:	10d00034 	orhi	r3,r2,16384
   90454:	e0bfff17 	ldw	r2,-4(fp)
   90458:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9045c:	e03ffe15 	stw	zero,-8(fp)
   90460:	00001d06 	br	904d8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   90464:	00800274 	movhi	r2,9
   90468:	1086f204 	addi	r2,r2,7112
   9046c:	e0fffe17 	ldw	r3,-8(fp)
   90470:	18c00324 	muli	r3,r3,12
   90474:	10c5883a 	add	r2,r2,r3
   90478:	10c00017 	ldw	r3,0(r2)
   9047c:	e0bfff17 	ldw	r2,-4(fp)
   90480:	10800017 	ldw	r2,0(r2)
   90484:	1880111e 	bne	r3,r2,904cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   90488:	00800274 	movhi	r2,9
   9048c:	1086f204 	addi	r2,r2,7112
   90490:	e0fffe17 	ldw	r3,-8(fp)
   90494:	18c00324 	muli	r3,r3,12
   90498:	10c5883a 	add	r2,r2,r3
   9049c:	10800204 	addi	r2,r2,8
   904a0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   904a4:	1000090e 	bge	r2,zero,904cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   904a8:	e0bffe17 	ldw	r2,-8(fp)
   904ac:	10c00324 	muli	r3,r2,12
   904b0:	00800274 	movhi	r2,9
   904b4:	1086f204 	addi	r2,r2,7112
   904b8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   904bc:	e0bfff17 	ldw	r2,-4(fp)
   904c0:	18800226 	beq	r3,r2,904cc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   904c4:	00bffcc4 	movi	r2,-13
   904c8:	00000806 	br	904ec <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   904cc:	e0bffe17 	ldw	r2,-8(fp)
   904d0:	10800044 	addi	r2,r2,1
   904d4:	e0bffe15 	stw	r2,-8(fp)
   904d8:	d0a00a17 	ldw	r2,-32728(gp)
   904dc:	1007883a 	mov	r3,r2
   904e0:	e0bffe17 	ldw	r2,-8(fp)
   904e4:	18bfdf2e 	bgeu	r3,r2,90464 <__alt_data_end+0xfffae9e4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   904e8:	0005883a 	mov	r2,zero
}
   904ec:	e037883a 	mov	sp,fp
   904f0:	df000017 	ldw	fp,0(sp)
   904f4:	dec00104 	addi	sp,sp,4
   904f8:	f800283a 	ret

000904fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   904fc:	defff604 	addi	sp,sp,-40
   90500:	dfc00915 	stw	ra,36(sp)
   90504:	df000815 	stw	fp,32(sp)
   90508:	df000804 	addi	fp,sp,32
   9050c:	e13ffd15 	stw	r4,-12(fp)
   90510:	e17ffe15 	stw	r5,-8(fp)
   90514:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   90518:	00bfffc4 	movi	r2,-1
   9051c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   90520:	00bffb44 	movi	r2,-19
   90524:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   90528:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   9052c:	d1600804 	addi	r5,gp,-32736
   90530:	e13ffd17 	ldw	r4,-12(fp)
   90534:	00906740 	call	90674 <alt_find_dev>
   90538:	e0bff815 	stw	r2,-32(fp)
   9053c:	e0bff817 	ldw	r2,-32(fp)
   90540:	1000051e 	bne	r2,zero,90558 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   90544:	e13ffd17 	ldw	r4,-12(fp)
   90548:	00907040 	call	90704 <alt_find_file>
   9054c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   90550:	00800044 	movi	r2,1
   90554:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   90558:	e0bff817 	ldw	r2,-32(fp)
   9055c:	10002926 	beq	r2,zero,90604 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   90560:	e13ff817 	ldw	r4,-32(fp)
   90564:	009080c0 	call	9080c <alt_get_fd>
   90568:	e0bff915 	stw	r2,-28(fp)
   9056c:	e0bff917 	ldw	r2,-28(fp)
   90570:	1000030e 	bge	r2,zero,90580 <open+0x84>
    {
      status = index;
   90574:	e0bff917 	ldw	r2,-28(fp)
   90578:	e0bffa15 	stw	r2,-24(fp)
   9057c:	00002306 	br	9060c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   90580:	e0bff917 	ldw	r2,-28(fp)
   90584:	10c00324 	muli	r3,r2,12
   90588:	00800274 	movhi	r2,9
   9058c:	1086f204 	addi	r2,r2,7112
   90590:	1885883a 	add	r2,r3,r2
   90594:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   90598:	e0fffe17 	ldw	r3,-8(fp)
   9059c:	00900034 	movhi	r2,16384
   905a0:	10bfffc4 	addi	r2,r2,-1
   905a4:	1886703a 	and	r3,r3,r2
   905a8:	e0bffc17 	ldw	r2,-16(fp)
   905ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   905b0:	e0bffb17 	ldw	r2,-20(fp)
   905b4:	1000051e 	bne	r2,zero,905cc <open+0xd0>
   905b8:	e13ffc17 	ldw	r4,-16(fp)
   905bc:	00904380 	call	90438 <alt_file_locked>
   905c0:	e0bffa15 	stw	r2,-24(fp)
   905c4:	e0bffa17 	ldw	r2,-24(fp)
   905c8:	10001016 	blt	r2,zero,9060c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   905cc:	e0bff817 	ldw	r2,-32(fp)
   905d0:	10800317 	ldw	r2,12(r2)
   905d4:	10000826 	beq	r2,zero,905f8 <open+0xfc>
   905d8:	e0bff817 	ldw	r2,-32(fp)
   905dc:	10800317 	ldw	r2,12(r2)
   905e0:	e1ffff17 	ldw	r7,-4(fp)
   905e4:	e1bffe17 	ldw	r6,-8(fp)
   905e8:	e17ffd17 	ldw	r5,-12(fp)
   905ec:	e13ffc17 	ldw	r4,-16(fp)
   905f0:	103ee83a 	callr	r2
   905f4:	00000106 	br	905fc <open+0x100>
   905f8:	0005883a 	mov	r2,zero
   905fc:	e0bffa15 	stw	r2,-24(fp)
   90600:	00000206 	br	9060c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   90604:	00bffb44 	movi	r2,-19
   90608:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   9060c:	e0bffa17 	ldw	r2,-24(fp)
   90610:	1000090e 	bge	r2,zero,90638 <open+0x13c>
  {
    alt_release_fd (index);  
   90614:	e13ff917 	ldw	r4,-28(fp)
   90618:	008eec00 	call	8eec0 <alt_release_fd>
    ALT_ERRNO = -status;
   9061c:	00903fc0 	call	903fc <alt_get_errno>
   90620:	1007883a 	mov	r3,r2
   90624:	e0bffa17 	ldw	r2,-24(fp)
   90628:	0085c83a 	sub	r2,zero,r2
   9062c:	18800015 	stw	r2,0(r3)
    return -1;
   90630:	00bfffc4 	movi	r2,-1
   90634:	00000106 	br	9063c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   90638:	e0bff917 	ldw	r2,-28(fp)
}
   9063c:	e037883a 	mov	sp,fp
   90640:	dfc00117 	ldw	ra,4(sp)
   90644:	df000017 	ldw	fp,0(sp)
   90648:	dec00204 	addi	sp,sp,8
   9064c:	f800283a 	ret

00090650 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   90650:	deffff04 	addi	sp,sp,-4
   90654:	df000015 	stw	fp,0(sp)
   90658:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   9065c:	000170fa 	wrctl	ienable,zero
}
   90660:	0001883a 	nop
   90664:	e037883a 	mov	sp,fp
   90668:	df000017 	ldw	fp,0(sp)
   9066c:	dec00104 	addi	sp,sp,4
   90670:	f800283a 	ret

00090674 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   90674:	defffa04 	addi	sp,sp,-24
   90678:	dfc00515 	stw	ra,20(sp)
   9067c:	df000415 	stw	fp,16(sp)
   90680:	df000404 	addi	fp,sp,16
   90684:	e13ffe15 	stw	r4,-8(fp)
   90688:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   9068c:	e0bfff17 	ldw	r2,-4(fp)
   90690:	10800017 	ldw	r2,0(r2)
   90694:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   90698:	e13ffe17 	ldw	r4,-8(fp)
   9069c:	0081a780 	call	81a78 <strlen>
   906a0:	10800044 	addi	r2,r2,1
   906a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   906a8:	00000d06 	br	906e0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   906ac:	e0bffc17 	ldw	r2,-16(fp)
   906b0:	10800217 	ldw	r2,8(r2)
   906b4:	e0fffd17 	ldw	r3,-12(fp)
   906b8:	180d883a 	mov	r6,r3
   906bc:	e17ffe17 	ldw	r5,-8(fp)
   906c0:	1009883a 	mov	r4,r2
   906c4:	009098c0 	call	9098c <memcmp>
   906c8:	1000021e 	bne	r2,zero,906d4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   906cc:	e0bffc17 	ldw	r2,-16(fp)
   906d0:	00000706 	br	906f0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   906d4:	e0bffc17 	ldw	r2,-16(fp)
   906d8:	10800017 	ldw	r2,0(r2)
   906dc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   906e0:	e0fffc17 	ldw	r3,-16(fp)
   906e4:	e0bfff17 	ldw	r2,-4(fp)
   906e8:	18bff01e 	bne	r3,r2,906ac <__alt_data_end+0xfffaec2c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   906ec:	0005883a 	mov	r2,zero
}
   906f0:	e037883a 	mov	sp,fp
   906f4:	dfc00117 	ldw	ra,4(sp)
   906f8:	df000017 	ldw	fp,0(sp)
   906fc:	dec00204 	addi	sp,sp,8
   90700:	f800283a 	ret

00090704 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   90704:	defffb04 	addi	sp,sp,-20
   90708:	dfc00415 	stw	ra,16(sp)
   9070c:	df000315 	stw	fp,12(sp)
   90710:	df000304 	addi	fp,sp,12
   90714:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   90718:	d0a00617 	ldw	r2,-32744(gp)
   9071c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   90720:	00003106 	br	907e8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   90724:	e0bffd17 	ldw	r2,-12(fp)
   90728:	10800217 	ldw	r2,8(r2)
   9072c:	1009883a 	mov	r4,r2
   90730:	0081a780 	call	81a78 <strlen>
   90734:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   90738:	e0bffd17 	ldw	r2,-12(fp)
   9073c:	10c00217 	ldw	r3,8(r2)
   90740:	e0bffe17 	ldw	r2,-8(fp)
   90744:	10bfffc4 	addi	r2,r2,-1
   90748:	1885883a 	add	r2,r3,r2
   9074c:	10800003 	ldbu	r2,0(r2)
   90750:	10803fcc 	andi	r2,r2,255
   90754:	1080201c 	xori	r2,r2,128
   90758:	10bfe004 	addi	r2,r2,-128
   9075c:	10800bd8 	cmpnei	r2,r2,47
   90760:	1000031e 	bne	r2,zero,90770 <alt_find_file+0x6c>
    {
      len -= 1;
   90764:	e0bffe17 	ldw	r2,-8(fp)
   90768:	10bfffc4 	addi	r2,r2,-1
   9076c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   90770:	e0bffe17 	ldw	r2,-8(fp)
   90774:	e0ffff17 	ldw	r3,-4(fp)
   90778:	1885883a 	add	r2,r3,r2
   9077c:	10800003 	ldbu	r2,0(r2)
   90780:	10803fcc 	andi	r2,r2,255
   90784:	1080201c 	xori	r2,r2,128
   90788:	10bfe004 	addi	r2,r2,-128
   9078c:	10800be0 	cmpeqi	r2,r2,47
   90790:	1000081e 	bne	r2,zero,907b4 <alt_find_file+0xb0>
   90794:	e0bffe17 	ldw	r2,-8(fp)
   90798:	e0ffff17 	ldw	r3,-4(fp)
   9079c:	1885883a 	add	r2,r3,r2
   907a0:	10800003 	ldbu	r2,0(r2)
   907a4:	10803fcc 	andi	r2,r2,255
   907a8:	1080201c 	xori	r2,r2,128
   907ac:	10bfe004 	addi	r2,r2,-128
   907b0:	10000a1e 	bne	r2,zero,907dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   907b4:	e0bffd17 	ldw	r2,-12(fp)
   907b8:	10800217 	ldw	r2,8(r2)
   907bc:	e0fffe17 	ldw	r3,-8(fp)
   907c0:	180d883a 	mov	r6,r3
   907c4:	e17fff17 	ldw	r5,-4(fp)
   907c8:	1009883a 	mov	r4,r2
   907cc:	009098c0 	call	9098c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   907d0:	1000021e 	bne	r2,zero,907dc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   907d4:	e0bffd17 	ldw	r2,-12(fp)
   907d8:	00000706 	br	907f8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   907dc:	e0bffd17 	ldw	r2,-12(fp)
   907e0:	10800017 	ldw	r2,0(r2)
   907e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   907e8:	e0fffd17 	ldw	r3,-12(fp)
   907ec:	d0a00604 	addi	r2,gp,-32744
   907f0:	18bfcc1e 	bne	r3,r2,90724 <__alt_data_end+0xfffaeca4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   907f4:	0005883a 	mov	r2,zero
}
   907f8:	e037883a 	mov	sp,fp
   907fc:	dfc00117 	ldw	ra,4(sp)
   90800:	df000017 	ldw	fp,0(sp)
   90804:	dec00204 	addi	sp,sp,8
   90808:	f800283a 	ret

0009080c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   9080c:	defffc04 	addi	sp,sp,-16
   90810:	df000315 	stw	fp,12(sp)
   90814:	df000304 	addi	fp,sp,12
   90818:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   9081c:	00bffa04 	movi	r2,-24
   90820:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   90824:	e03ffd15 	stw	zero,-12(fp)
   90828:	00001906 	br	90890 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   9082c:	00800274 	movhi	r2,9
   90830:	1086f204 	addi	r2,r2,7112
   90834:	e0fffd17 	ldw	r3,-12(fp)
   90838:	18c00324 	muli	r3,r3,12
   9083c:	10c5883a 	add	r2,r2,r3
   90840:	10800017 	ldw	r2,0(r2)
   90844:	10000f1e 	bne	r2,zero,90884 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   90848:	00800274 	movhi	r2,9
   9084c:	1086f204 	addi	r2,r2,7112
   90850:	e0fffd17 	ldw	r3,-12(fp)
   90854:	18c00324 	muli	r3,r3,12
   90858:	10c5883a 	add	r2,r2,r3
   9085c:	e0ffff17 	ldw	r3,-4(fp)
   90860:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   90864:	d0e00a17 	ldw	r3,-32728(gp)
   90868:	e0bffd17 	ldw	r2,-12(fp)
   9086c:	1880020e 	bge	r3,r2,90878 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   90870:	e0bffd17 	ldw	r2,-12(fp)
   90874:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   90878:	e0bffd17 	ldw	r2,-12(fp)
   9087c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   90880:	00000606 	br	9089c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   90884:	e0bffd17 	ldw	r2,-12(fp)
   90888:	10800044 	addi	r2,r2,1
   9088c:	e0bffd15 	stw	r2,-12(fp)
   90890:	e0bffd17 	ldw	r2,-12(fp)
   90894:	10800810 	cmplti	r2,r2,32
   90898:	103fe41e 	bne	r2,zero,9082c <__alt_data_end+0xfffaedac>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   9089c:	e0bffe17 	ldw	r2,-8(fp)
}
   908a0:	e037883a 	mov	sp,fp
   908a4:	df000017 	ldw	fp,0(sp)
   908a8:	dec00104 	addi	sp,sp,4
   908ac:	f800283a 	ret

000908b0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   908b0:	defffb04 	addi	sp,sp,-20
   908b4:	df000415 	stw	fp,16(sp)
   908b8:	df000404 	addi	fp,sp,16
   908bc:	e13ffe15 	stw	r4,-8(fp)
   908c0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   908c4:	e0bfff17 	ldw	r2,-4(fp)
   908c8:	10840070 	cmpltui	r2,r2,4097
   908cc:	1000021e 	bne	r2,zero,908d8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   908d0:	00840004 	movi	r2,4096
   908d4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   908d8:	e0fffe17 	ldw	r3,-8(fp)
   908dc:	e0bfff17 	ldw	r2,-4(fp)
   908e0:	1885883a 	add	r2,r3,r2
   908e4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   908e8:	e0bffe17 	ldw	r2,-8(fp)
   908ec:	e0bffc15 	stw	r2,-16(fp)
   908f0:	00000506 	br	90908 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   908f4:	e0bffc17 	ldw	r2,-16(fp)
   908f8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   908fc:	e0bffc17 	ldw	r2,-16(fp)
   90900:	10800804 	addi	r2,r2,32
   90904:	e0bffc15 	stw	r2,-16(fp)
   90908:	e0fffc17 	ldw	r3,-16(fp)
   9090c:	e0bffd17 	ldw	r2,-12(fp)
   90910:	18bff836 	bltu	r3,r2,908f4 <__alt_data_end+0xfffaee74>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   90914:	e0bffe17 	ldw	r2,-8(fp)
   90918:	108007cc 	andi	r2,r2,31
   9091c:	10000226 	beq	r2,zero,90928 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   90920:	e0bffc17 	ldw	r2,-16(fp)
   90924:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   90928:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   9092c:	0001883a 	nop
   90930:	e037883a 	mov	sp,fp
   90934:	df000017 	ldw	fp,0(sp)
   90938:	dec00104 	addi	sp,sp,4
   9093c:	f800283a 	ret

00090940 <atexit>:
   90940:	200b883a 	mov	r5,r4
   90944:	000f883a 	mov	r7,zero
   90948:	000d883a 	mov	r6,zero
   9094c:	0009883a 	mov	r4,zero
   90950:	0090a081 	jmpi	90a08 <__register_exitproc>

00090954 <exit>:
   90954:	defffe04 	addi	sp,sp,-8
   90958:	000b883a 	mov	r5,zero
   9095c:	dc000015 	stw	r16,0(sp)
   90960:	dfc00115 	stw	ra,4(sp)
   90964:	2021883a 	mov	r16,r4
   90968:	0090b200 	call	90b20 <__call_exitprocs>
   9096c:	00800274 	movhi	r2,9
   90970:	108b6a04 	addi	r2,r2,11688
   90974:	11000017 	ldw	r4,0(r2)
   90978:	20800f17 	ldw	r2,60(r4)
   9097c:	10000126 	beq	r2,zero,90984 <exit+0x30>
   90980:	103ee83a 	callr	r2
   90984:	8009883a 	mov	r4,r16
   90988:	0090ca00 	call	90ca0 <_exit>

0009098c <memcmp>:
   9098c:	01c000c4 	movi	r7,3
   90990:	3980192e 	bgeu	r7,r6,909f8 <memcmp+0x6c>
   90994:	2144b03a 	or	r2,r4,r5
   90998:	11c4703a 	and	r2,r2,r7
   9099c:	10000f26 	beq	r2,zero,909dc <memcmp+0x50>
   909a0:	20800003 	ldbu	r2,0(r4)
   909a4:	28c00003 	ldbu	r3,0(r5)
   909a8:	10c0151e 	bne	r2,r3,90a00 <memcmp+0x74>
   909ac:	31bfff84 	addi	r6,r6,-2
   909b0:	01ffffc4 	movi	r7,-1
   909b4:	00000406 	br	909c8 <memcmp+0x3c>
   909b8:	20800003 	ldbu	r2,0(r4)
   909bc:	28c00003 	ldbu	r3,0(r5)
   909c0:	31bfffc4 	addi	r6,r6,-1
   909c4:	10c00e1e 	bne	r2,r3,90a00 <memcmp+0x74>
   909c8:	21000044 	addi	r4,r4,1
   909cc:	29400044 	addi	r5,r5,1
   909d0:	31fff91e 	bne	r6,r7,909b8 <__alt_data_end+0xfffaef38>
   909d4:	0005883a 	mov	r2,zero
   909d8:	f800283a 	ret
   909dc:	20c00017 	ldw	r3,0(r4)
   909e0:	28800017 	ldw	r2,0(r5)
   909e4:	18bfee1e 	bne	r3,r2,909a0 <__alt_data_end+0xfffaef20>
   909e8:	31bfff04 	addi	r6,r6,-4
   909ec:	21000104 	addi	r4,r4,4
   909f0:	29400104 	addi	r5,r5,4
   909f4:	39bff936 	bltu	r7,r6,909dc <__alt_data_end+0xfffaef5c>
   909f8:	303fe91e 	bne	r6,zero,909a0 <__alt_data_end+0xfffaef20>
   909fc:	003ff506 	br	909d4 <__alt_data_end+0xfffaef54>
   90a00:	10c5c83a 	sub	r2,r2,r3
   90a04:	f800283a 	ret

00090a08 <__register_exitproc>:
   90a08:	defffa04 	addi	sp,sp,-24
   90a0c:	dc000315 	stw	r16,12(sp)
   90a10:	04000274 	movhi	r16,9
   90a14:	840b6a04 	addi	r16,r16,11688
   90a18:	80c00017 	ldw	r3,0(r16)
   90a1c:	dc400415 	stw	r17,16(sp)
   90a20:	dfc00515 	stw	ra,20(sp)
   90a24:	18805217 	ldw	r2,328(r3)
   90a28:	2023883a 	mov	r17,r4
   90a2c:	10003726 	beq	r2,zero,90b0c <__register_exitproc+0x104>
   90a30:	10c00117 	ldw	r3,4(r2)
   90a34:	010007c4 	movi	r4,31
   90a38:	20c00e16 	blt	r4,r3,90a74 <__register_exitproc+0x6c>
   90a3c:	1a000044 	addi	r8,r3,1
   90a40:	8800221e 	bne	r17,zero,90acc <__register_exitproc+0xc4>
   90a44:	18c00084 	addi	r3,r3,2
   90a48:	18c7883a 	add	r3,r3,r3
   90a4c:	18c7883a 	add	r3,r3,r3
   90a50:	12000115 	stw	r8,4(r2)
   90a54:	10c7883a 	add	r3,r2,r3
   90a58:	19400015 	stw	r5,0(r3)
   90a5c:	0005883a 	mov	r2,zero
   90a60:	dfc00517 	ldw	ra,20(sp)
   90a64:	dc400417 	ldw	r17,16(sp)
   90a68:	dc000317 	ldw	r16,12(sp)
   90a6c:	dec00604 	addi	sp,sp,24
   90a70:	f800283a 	ret
   90a74:	00800034 	movhi	r2,0
   90a78:	10800004 	addi	r2,r2,0
   90a7c:	10002626 	beq	r2,zero,90b18 <__register_exitproc+0x110>
   90a80:	01006404 	movi	r4,400
   90a84:	d9400015 	stw	r5,0(sp)
   90a88:	d9800115 	stw	r6,4(sp)
   90a8c:	d9c00215 	stw	r7,8(sp)
   90a90:	00000000 	call	0 <__reset-0x80000>
   90a94:	d9400017 	ldw	r5,0(sp)
   90a98:	d9800117 	ldw	r6,4(sp)
   90a9c:	d9c00217 	ldw	r7,8(sp)
   90aa0:	10001d26 	beq	r2,zero,90b18 <__register_exitproc+0x110>
   90aa4:	81000017 	ldw	r4,0(r16)
   90aa8:	10000115 	stw	zero,4(r2)
   90aac:	02000044 	movi	r8,1
   90ab0:	22405217 	ldw	r9,328(r4)
   90ab4:	0007883a 	mov	r3,zero
   90ab8:	12400015 	stw	r9,0(r2)
   90abc:	20805215 	stw	r2,328(r4)
   90ac0:	10006215 	stw	zero,392(r2)
   90ac4:	10006315 	stw	zero,396(r2)
   90ac8:	883fde26 	beq	r17,zero,90a44 <__alt_data_end+0xfffaefc4>
   90acc:	18c9883a 	add	r4,r3,r3
   90ad0:	2109883a 	add	r4,r4,r4
   90ad4:	1109883a 	add	r4,r2,r4
   90ad8:	21802215 	stw	r6,136(r4)
   90adc:	01800044 	movi	r6,1
   90ae0:	12406217 	ldw	r9,392(r2)
   90ae4:	30cc983a 	sll	r6,r6,r3
   90ae8:	4992b03a 	or	r9,r9,r6
   90aec:	12406215 	stw	r9,392(r2)
   90af0:	21c04215 	stw	r7,264(r4)
   90af4:	01000084 	movi	r4,2
   90af8:	893fd21e 	bne	r17,r4,90a44 <__alt_data_end+0xfffaefc4>
   90afc:	11006317 	ldw	r4,396(r2)
   90b00:	218cb03a 	or	r6,r4,r6
   90b04:	11806315 	stw	r6,396(r2)
   90b08:	003fce06 	br	90a44 <__alt_data_end+0xfffaefc4>
   90b0c:	18805304 	addi	r2,r3,332
   90b10:	18805215 	stw	r2,328(r3)
   90b14:	003fc606 	br	90a30 <__alt_data_end+0xfffaefb0>
   90b18:	00bfffc4 	movi	r2,-1
   90b1c:	003fd006 	br	90a60 <__alt_data_end+0xfffaefe0>

00090b20 <__call_exitprocs>:
   90b20:	defff504 	addi	sp,sp,-44
   90b24:	df000915 	stw	fp,36(sp)
   90b28:	dd400615 	stw	r21,24(sp)
   90b2c:	dc800315 	stw	r18,12(sp)
   90b30:	dfc00a15 	stw	ra,40(sp)
   90b34:	ddc00815 	stw	r23,32(sp)
   90b38:	dd800715 	stw	r22,28(sp)
   90b3c:	dd000515 	stw	r20,20(sp)
   90b40:	dcc00415 	stw	r19,16(sp)
   90b44:	dc400215 	stw	r17,8(sp)
   90b48:	dc000115 	stw	r16,4(sp)
   90b4c:	d9000015 	stw	r4,0(sp)
   90b50:	2839883a 	mov	fp,r5
   90b54:	04800044 	movi	r18,1
   90b58:	057fffc4 	movi	r21,-1
   90b5c:	00800274 	movhi	r2,9
   90b60:	108b6a04 	addi	r2,r2,11688
   90b64:	12000017 	ldw	r8,0(r2)
   90b68:	45005217 	ldw	r20,328(r8)
   90b6c:	44c05204 	addi	r19,r8,328
   90b70:	a0001c26 	beq	r20,zero,90be4 <__call_exitprocs+0xc4>
   90b74:	a0800117 	ldw	r2,4(r20)
   90b78:	15ffffc4 	addi	r23,r2,-1
   90b7c:	b8000d16 	blt	r23,zero,90bb4 <__call_exitprocs+0x94>
   90b80:	14000044 	addi	r16,r2,1
   90b84:	8421883a 	add	r16,r16,r16
   90b88:	8421883a 	add	r16,r16,r16
   90b8c:	84402004 	addi	r17,r16,128
   90b90:	a463883a 	add	r17,r20,r17
   90b94:	a421883a 	add	r16,r20,r16
   90b98:	e0001e26 	beq	fp,zero,90c14 <__call_exitprocs+0xf4>
   90b9c:	80804017 	ldw	r2,256(r16)
   90ba0:	e0801c26 	beq	fp,r2,90c14 <__call_exitprocs+0xf4>
   90ba4:	bdffffc4 	addi	r23,r23,-1
   90ba8:	843fff04 	addi	r16,r16,-4
   90bac:	8c7fff04 	addi	r17,r17,-4
   90bb0:	bd7ff91e 	bne	r23,r21,90b98 <__alt_data_end+0xfffaf118>
   90bb4:	00800034 	movhi	r2,0
   90bb8:	10800004 	addi	r2,r2,0
   90bbc:	10000926 	beq	r2,zero,90be4 <__call_exitprocs+0xc4>
   90bc0:	a0800117 	ldw	r2,4(r20)
   90bc4:	1000301e 	bne	r2,zero,90c88 <__call_exitprocs+0x168>
   90bc8:	a0800017 	ldw	r2,0(r20)
   90bcc:	10003226 	beq	r2,zero,90c98 <__call_exitprocs+0x178>
   90bd0:	a009883a 	mov	r4,r20
   90bd4:	98800015 	stw	r2,0(r19)
   90bd8:	00000000 	call	0 <__reset-0x80000>
   90bdc:	9d000017 	ldw	r20,0(r19)
   90be0:	a03fe41e 	bne	r20,zero,90b74 <__alt_data_end+0xfffaf0f4>
   90be4:	dfc00a17 	ldw	ra,40(sp)
   90be8:	df000917 	ldw	fp,36(sp)
   90bec:	ddc00817 	ldw	r23,32(sp)
   90bf0:	dd800717 	ldw	r22,28(sp)
   90bf4:	dd400617 	ldw	r21,24(sp)
   90bf8:	dd000517 	ldw	r20,20(sp)
   90bfc:	dcc00417 	ldw	r19,16(sp)
   90c00:	dc800317 	ldw	r18,12(sp)
   90c04:	dc400217 	ldw	r17,8(sp)
   90c08:	dc000117 	ldw	r16,4(sp)
   90c0c:	dec00b04 	addi	sp,sp,44
   90c10:	f800283a 	ret
   90c14:	a0800117 	ldw	r2,4(r20)
   90c18:	80c00017 	ldw	r3,0(r16)
   90c1c:	10bfffc4 	addi	r2,r2,-1
   90c20:	15c01426 	beq	r2,r23,90c74 <__call_exitprocs+0x154>
   90c24:	80000015 	stw	zero,0(r16)
   90c28:	183fde26 	beq	r3,zero,90ba4 <__alt_data_end+0xfffaf124>
   90c2c:	95c8983a 	sll	r4,r18,r23
   90c30:	a0806217 	ldw	r2,392(r20)
   90c34:	a5800117 	ldw	r22,4(r20)
   90c38:	2084703a 	and	r2,r4,r2
   90c3c:	10000b26 	beq	r2,zero,90c6c <__call_exitprocs+0x14c>
   90c40:	a0806317 	ldw	r2,396(r20)
   90c44:	2088703a 	and	r4,r4,r2
   90c48:	20000c1e 	bne	r4,zero,90c7c <__call_exitprocs+0x15c>
   90c4c:	89400017 	ldw	r5,0(r17)
   90c50:	d9000017 	ldw	r4,0(sp)
   90c54:	183ee83a 	callr	r3
   90c58:	a0800117 	ldw	r2,4(r20)
   90c5c:	15bfbf1e 	bne	r2,r22,90b5c <__alt_data_end+0xfffaf0dc>
   90c60:	98800017 	ldw	r2,0(r19)
   90c64:	153fcf26 	beq	r2,r20,90ba4 <__alt_data_end+0xfffaf124>
   90c68:	003fbc06 	br	90b5c <__alt_data_end+0xfffaf0dc>
   90c6c:	183ee83a 	callr	r3
   90c70:	003ff906 	br	90c58 <__alt_data_end+0xfffaf1d8>
   90c74:	a5c00115 	stw	r23,4(r20)
   90c78:	003feb06 	br	90c28 <__alt_data_end+0xfffaf1a8>
   90c7c:	89000017 	ldw	r4,0(r17)
   90c80:	183ee83a 	callr	r3
   90c84:	003ff406 	br	90c58 <__alt_data_end+0xfffaf1d8>
   90c88:	a0800017 	ldw	r2,0(r20)
   90c8c:	a027883a 	mov	r19,r20
   90c90:	1029883a 	mov	r20,r2
   90c94:	003fb606 	br	90b70 <__alt_data_end+0xfffaf0f0>
   90c98:	0005883a 	mov	r2,zero
   90c9c:	003ffb06 	br	90c8c <__alt_data_end+0xfffaf20c>

00090ca0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   90ca0:	defffd04 	addi	sp,sp,-12
   90ca4:	df000215 	stw	fp,8(sp)
   90ca8:	df000204 	addi	fp,sp,8
   90cac:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   90cb0:	0001883a 	nop
   90cb4:	e0bfff17 	ldw	r2,-4(fp)
   90cb8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   90cbc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   90cc0:	10000226 	beq	r2,zero,90ccc <_exit+0x2c>
    ALT_SIM_FAIL();
   90cc4:	002af070 	cmpltui	zero,zero,43969
   90cc8:	00000106 	br	90cd0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   90ccc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   90cd0:	003fff06 	br	90cd0 <__alt_data_end+0xfffaf250>
