
pacman_soft_1.elf:     file format elf32-littlenios2
pacman_soft_1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080244

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00010d64 memsz 0x00010d64 flags r-x
    LOAD off    0x00011d84 vaddr 0x00090d84 paddr 0x00092924 align 2**12
         filesz 0x00001ba0 memsz 0x00001ba0 flags rw-
    LOAD off    0x000144c4 vaddr 0x000944c4 paddr 0x000944c4 align 2**12
         filesz 0x00000000 memsz 0x00000228 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000106f0  00080244  00080244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000450  00090934  00090934  00011934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ba0  00090d84  00092924  00011d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000228  000944c4  000944c4  000144c4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  000946ec  000946ec  00013924  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013924  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000fe0  00000000  00000000  00013948  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000260c3  00000000  00000000  00014928  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009bf2  00000000  00000000  0003a9eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c010  00000000  00000000  000445dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000246c  00000000  00000000  000505f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003c66  00000000  00000000  00052a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017a63  00000000  00000000  000566c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006e128  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001910  00000000  00000000  0006e158  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00073032  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00073035  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007303f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00073040  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00073041  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00073045  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00073049  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0007304d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00073056  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0007305f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  00073068  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001e  00000000  00000000  00073071  2**0
                  CONTENTS, READONLY
 29 .jdi          0000677d  00000000  00000000  0007308f  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000aaac7  00000000  00000000  0007980c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080244 l    d  .text	00000000 .text
00090934 l    d  .rodata	00000000 .rodata
00090d84 l    d  .rwdata	00000000 .rwdata
000944c4 l    d  .bss	00000000 .bss
000946ec l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../pacman_soft_1_bsp//obj/HAL/src/crt0.o
0008028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 background.c
00090d84 l     O .rwdata	0000003c background
00094510 l     O .bss	0000003c foodLayer
00000000 l    df *ABS*	00000000 general.c
00000000 l    df *ABS*	00000000 main.c
00090dc0 l     O .rwdata	0000003c background
0009454c l     O .bss	0000003c foodLayer
00080668 l     F .text	0000007c refresh_position_interrupt_handler
000806e4 l     F .text	00000048 left_button_interrupt_handler
0008072c l     F .text	00000048 up_button_interrupt_handler
00080774 l     F .text	00000048 down_button_interrupt_handler
000807bc l     F .text	00000048 right_button_interrupt_handler
00000000 l    df *ABS*	00000000 refresh_position.c
00090dfc l     O .rwdata	0000003c background
00094588 l     O .bss	0000003c foodLayer
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
00090ad2 l     O .rodata	00000010 zeroes.4404
000839d4 l     F .text	000000bc __sbprintf
00090ae2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00083be4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00085714 l     F .text	00000008 __fp_unlock
00085728 l     F .text	0000019c __sinit.part.1
000858c4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
00090e38 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0009127c l     O .rwdata	00000020 lc_ctype_charset
0009125c l     O .rwdata	00000020 lc_message_charset
0009129c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00090b14 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00088d1c l     F .text	000000fc __sprint_r.part.0
00090c48 l     O .rodata	00000010 blanks.4348
00090c38 l     O .rodata	00000010 zeroes.4349
0008a2a8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0008de10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0008df1c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008df48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0008e648 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0008e728 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0008e814 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0008e9e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00092918 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0008edd8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008ef0c l     F .text	00000034 alt_dev_reg
00091884 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008f200 l     F .text	0000020c altera_avalon_jtag_uart_irq
0008f40c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0008fa44 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008fcac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008ff1c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0009005c l     F .text	0000003c alt_get_errno
00090098 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00080290 g     F .text	000000a4 set_background_in_memory
0009450c g     O .bss	00000004 alt_instruction_exception_handler
00088360 g     F .text	00000074 _mprec_log10
0008844c g     F .text	0000008c __any_on
0008a844 g     F .text	00000054 _isatty_r
00090b20 g     O .rodata	00000028 __mprec_tinytens
0008e924 g     F .text	0000007c alt_main
00081588 g     F .text	000000c0 _puts_r
000945ec g     O .bss	00000100 alt_irq
0008a898 g     F .text	00000060 _lseek_r
00092924 g       *ABS*	00000000 __flash_rwdata_start
0008c93c g     F .text	00000088 .hidden __eqdf2
0008652c g     F .text	0000005c _gettimeofday_r
00080b98 g     F .text	00000090 init_position
000946ec g       *ABS*	00000000 __alt_heap_start
0008154c g     F .text	0000003c printf
0008aab0 g     F .text	0000009c _wcrtomb_r
00088bdc g     F .text	0000005c __sseek
00085a64 g     F .text	00000010 __sinit
0008a958 g     F .text	00000140 __swbuf_r
00086588 g     F .text	0000007c _setlocale_r
000858cc g     F .text	00000068 __sfmoreglue
0008e9c4 g     F .text	00000024 __malloc_unlock
00087258 g     F .text	0000015c memmove
00085a4c g     F .text	00000018 _cleanup
000874dc g     F .text	000000a8 _Balloc
0008c9c4 g     F .text	000000dc .hidden __gtdf2
000902b0 g     F .text	00000024 altera_nios2_gen2_irq_init
00080000 g     F .entry	0000001c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
0008a7e8 g     F .text	0000005c _fstat_r
000944c8 g     O .bss	00000004 errno
00088b58 g     F .text	00000008 __seofread
000944fc g     O .bss	00000004 alt_argv
0009a8e4 g       *ABS*	00000000 _gp
00091704 g     O .rwdata	00000180 alt_fd_list
000902d4 g     F .text	00000090 alt_find_dev
00087110 g     F .text	00000148 memcpy
0008571c g     F .text	0000000c _cleanup_r
0008dc28 g     F .text	000000dc .hidden __floatsidf
0008ffe0 g     F .text	0000007c alt_io_redirect
0008caa0 g     F .text	000000f4 .hidden __ltdf2
00090934 g       *ABS*	00000000 __DTOR_END__
00081264 g     F .text	00000104 randomDirection
00081648 g     F .text	00000014 puts
0008fe80 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00088a3c g     F .text	00000074 __fpclassifyd
000882bc g     F .text	000000a4 __ratio
0008a28c g     F .text	0000001c __vfiprintf_internal
0008f604 g     F .text	0000021c altera_avalon_jtag_uart_read
0008151c g     F .text	00000030 _printf_r
00081460 g     F .text	00000064 .hidden __udivsi3
0008e684 g     F .text	000000a4 isatty
00090b70 g     O .rodata	000000c8 __mprec_tens
00086604 g     F .text	0000000c __locale_charset
000944e4 g     O .bss	00000008 alt_timezone
00090510 g     F .text	00000090 alt_icache_flush
000944e0 g     O .bss	00000004 __malloc_top_pad
000928ec g     O .rwdata	00000004 __mb_cur_max
00086634 g     F .text	0000000c _localeconv_r
000878e8 g     F .text	0000003c __i2b
00085ee8 g     F .text	000004bc __sfvwrite_r
00088ab0 g     F .text	00000054 _sbrk_r
0008a8f8 g     F .text	00000060 _read_r
0009290c g     O .rwdata	00000004 alt_max_fd
0008a4dc g     F .text	000000f0 _fclose_r
000856e4 g     F .text	00000030 fflush
000944dc g     O .bss	00000004 __malloc_max_sbrked_mem
0008e4c8 g     F .text	00000180 alt_irq_register
0008b7a8 g     F .text	000008ac .hidden __adddf3
00088064 g     F .text	0000010c __b2d
0008b270 g     F .text	00000538 .hidden __umoddi3
0008e850 g     F .text	000000d4 lseek
000928e4 g     O .rwdata	00000004 _global_impure_ptr
000884d8 g     F .text	00000564 _realloc_r
000946ec g       *ABS*	00000000 __bss_end
0008e3d8 g     F .text	000000f0 alt_iic_isr_register
0008ecd0 g     F .text	00000108 alt_tick
0008acf8 g     F .text	00000578 .hidden __udivdi3
0008a744 g     F .text	00000024 _fputwc_r
00090b48 g     O .rodata	00000028 __mprec_bigtens
000876cc g     F .text	00000104 __s2b
0008dd04 g     F .text	000000a8 .hidden __floatunsidf
00087da4 g     F .text	00000060 __mcmp
00085a84 g     F .text	00000018 __fp_lock_all
0008e38c g     F .text	0000004c alt_ic_irq_enabled
0008ec34 g     F .text	0000009c alt_alarm_stop
000944f4 g     O .bss	00000004 alt_irq_active
00080ad0 g     F .text	00000084 compute_byte_packet
000800fc g     F .exceptions	000000d4 alt_irq_handler
000916dc g     O .rwdata	00000028 alt_dev_null
0008fc64 g     F .text	00000048 alt_dcache_flush_all
000877d0 g     F .text	00000068 __hi0bits
0008dba8 g     F .text	00000080 .hidden __fixdfsi
000805d4 g     F .text	00000094 get_block_with_coordinates
00092924 g       *ABS*	00000000 __ram_rwdata_end
00092904 g     O .rwdata	00000008 alt_dev_list
000944c4 g     O .bss	00000002 score
0008ee14 g     F .text	000000f8 write
00090d84 g       *ABS*	00000000 __ram_rodata_end
0008df84 g     F .text	000000b0 fstat
0008caa0 g     F .text	000000f4 .hidden __ledf2
00087b1c g     F .text	00000140 __pow5mult
00088e30 g     F .text	0000145c ___vfiprintf_internal_r
000944d4 g     O .bss	00000004 __nlocale_changed
000814c4 g     F .text	00000058 .hidden __umodsi3
000946ec g       *ABS*	00000000 end
0008f140 g     F .text	000000c0 altera_avalon_jtag_uart_init
000801d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00090934 g       *ABS*	00000000 __CTOR_LIST__
000cbaf0 g       *ABS*	00000000 __alt_stack_pointer
0008fabc g     F .text	0000007c alt_avalon_timer_sc_init
0008ddac g     F .text	00000064 .hidden __clzsi2
0008f820 g     F .text	00000224 altera_avalon_jtag_uart_write
00085a74 g     F .text	00000004 __sfp_lock_acquire
0008702c g     F .text	000000e4 memchr
000817c0 g     F .text	000021f8 ___vfprintf_internal_r
00085bd8 g     F .text	00000310 _free_r
00086610 g     F .text	00000010 __locale_mb_cur_max
00090780 g     F .text	00000180 __call_exitprocs
000944d0 g     O .bss	00000004 __mlocale_changed
000928f0 g     O .rwdata	00000004 __malloc_sbrk_base
00080244 g     F .text	0000004c _start
00094504 g     O .bss	00000004 _alt_tick_rate
00081674 g     F .text	00000064 rand
00087c5c g     F .text	00000148 __lshift
00094508 g     O .bss	00000004 _alt_nticks
0008ea24 g     F .text	000000fc read
0008ef78 g     F .text	00000064 alt_sys_init
00090668 g     F .text	00000118 __register_exitproc
00087924 g     F .text	000001f8 __multiply
0008f4ac g     F .text	00000068 altera_avalon_jtag_uart_close
00090d84 g       *ABS*	00000000 __ram_rwdata_start
00090934 g       *ABS*	00000000 __ram_rodata_start
000945c4 g     O .bss	00000028 __malloc_current_mallinfo
00088170 g     F .text	0000014c __d2b
0008efdc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0009046c g     F .text	000000a4 alt_get_fd
0008a3c4 g     F .text	00000054 _close_r
00080468 g     F .text	0000016c refresh_food_layer
000905ec g     F .text	0000007c memcmp
0008f09c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000946ec g       *ABS*	00000000 __alt_stack_base
0008f0ec g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00083a90 g     F .text	00000154 __swsetup_r
0008c054 g     F .text	000008e8 .hidden __divdf3
00085934 g     F .text	00000118 __sfp
000883d4 g     F .text	00000078 __copybits
000912d4 g     O .rwdata	00000408 __malloc_av_
00085a80 g     F .text	00000004 __sinit_lock_release
0008cb94 g     F .text	00000718 .hidden __muldf3
00088b04 g     F .text	00000054 __sread
00090364 g     F .text	00000108 alt_find_file
0008fce8 g     F .text	000000a4 alt_dev_llist_insert
0008e9a0 g     F .text	00000024 __malloc_lock
0008eb84 g     F .text	000000b0 sbrk
00085688 g     F .text	0000005c _fflush_r
0008a418 g     F .text	000000c4 _calloc_r
0008e034 g     F .text	000001f4 gettimeofday
00080c28 g     F .text	0000024c compute_collision
000944c4 g       *ABS*	00000000 __bss_start
000873b4 g     F .text	00000128 memset
00080804 g     F .text	000002cc main
00094500 g     O .bss	00000004 alt_envp
000944d8 g     O .bss	00000004 __malloc_max_total_mem
0008f03c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008aa98 g     F .text	00000018 __swbuf
0008165c g     F .text	00000018 srand
00088c38 g     F .text	00000008 __sclose
000cbaf0 g       *ABS*	00000000 __alt_heap_limit
0008a5cc g     F .text	00000014 fclose
00083de4 g     F .text	00001688 _dtoa_r
00086820 g     F .text	0000080c _malloc_r
0008ac0c g     F .text	00000030 __ascii_wctomb
00081770 g     F .text	00000050 time
00092910 g     O .rwdata	00000004 alt_errno
000863a4 g     F .text	000000c4 _fwalk
00081368 g     F .text	00000084 .hidden __divsi3
00085ab4 g     F .text	00000124 _malloc_trim_r
00090934 g       *ABS*	00000000 __CTOR_END__
00080b54 g     F .text	00000044 initCollision
00088c40 g     F .text	000000dc strcmp
00090934 g       *ABS*	00000000 __flash_rodata_start
00090934 g       *ABS*	00000000 __DTOR_LIST__
0008c93c g     F .text	00000088 .hidden __nedf2
0008ef40 g     F .text	00000038 alt_irq_init
0008eb20 g     F .text	00000064 alt_release_fd
00090c58 g     O .rodata	00000100 .hidden __clz_tab
000944cc g     O .bss	00000004 _PathLocale
000905a0 g     F .text	00000014 atexit
0008a364 g     F .text	00000060 _write_r
00086640 g     F .text	00000018 setlocale
000928e8 g     O .rwdata	00000004 _impure_ptr
000944f8 g     O .bss	00000004 alt_argc
0008546c g     F .text	0000021c __sflush_r
0008fdec g     F .text	00000060 _do_dtors
0008662c g     F .text	00000008 __locale_cjk_lang
00080020 g       .exceptions	00000000 alt_irq_entry
00088000 g     F .text	00000064 __ulp
00085a9c g     F .text	00000018 __fp_unlock_all
000928fc g     O .rwdata	00000008 alt_fs_list
000944ec g     O .bss	00000008 alt_resettime
00080020 g       *ABS*	00000000 __ram_exceptions_start
00086658 g     F .text	0000000c localeconv
00080e74 g     F .text	00000240 refresh_position
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00080334 g     F .text	00000090 init_foodLayer
0008e228 g     F .text	00000050 alt_ic_isr_register
00092924 g       *ABS*	00000000 _edata
000946ec g       *ABS*	00000000 _end
0008a5e0 g     F .text	00000164 __fputwc
00080244 g       *ABS*	00000000 __ram_exceptions_end
0008f514 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0008e300 g     F .text	0000008c alt_ic_irq_disable
00088b60 g     F .text	0000007c __swrite
000928f4 g     O .rwdata	00000004 __malloc_trim_threshold
00086620 g     F .text	0000000c __locale_msgcharset
000905b4 g     F .text	00000038 exit
00086468 g     F .text	000000c4 _fwalk_reent
00087e04 g     F .text	000001fc __mdiff
000813ec g     F .text	00000074 .hidden __modsi3
000cbaf0 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00085a78 g     F .text	00000004 __sfp_lock_release
000803c4 g     F .text	000000a4 set_foodLayer_in_memory
00090900 g     F .text	00000034 _exit
0008fb38 g     F .text	0000012c alt_alarm_start
0008ac98 g     F .text	00000060 .hidden __muldi3
00086664 g     F .text	000001bc __smakebuf_r
000816d8 g     F .text	00000098 strlen
0009015c g     F .text	00000154 open
0008c9c4 g     F .text	000000dc .hidden __gedf2
000928f8 g     O .rwdata	00000004 __wctomb
00088e18 g     F .text	00000018 __sprint_r
0008fe4c g     F .text	00000034 alt_icache_flush_all
00092914 g     O .rwdata	00000004 alt_priority_mask
0008e278 g     F .text	00000088 alt_ic_irq_enable
000839b8 g     F .text	0000001c __vfprintf_internal
0008ac3c g     F .text	0000005c _wctomb_r
0008d2ac g     F .text	000008fc .hidden __subdf3
00087838 g     F .text	000000b0 __lo0bits
0009291c g     O .rwdata	00000008 alt_alarm_list
0008fd8c g     F .text	00000060 _do_ctors
0008ab4c g     F .text	000000c0 wcrtomb
0008de4c g     F .text	000000d0 close
000810b4 g     F .text	000001b0 refresh_position_keepGoing
0008e790 g     F .text	00000084 alt_load
0008a768 g     F .text	00000080 fputwc
00085a7c g     F .text	00000004 __sinit_lock_acquire
000875ac g     F .text	00000120 __multadd
00087584 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__alt_data_end+0xfffb4514>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08409114 	ori	at,at,580
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__reset-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   8008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801d00 	call	801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800274 	movhi	r2,9
   80140:	10917b04 	addi	r2,r2,17900
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800274 	movhi	r2,9
   80158:	10917b04 	addi	r2,r2,17900
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <__alt_data_end+0xfffb463c>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <__alt_data_end+0xfffb4630>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	0001883a 	nop
   801bc:	e037883a 	mov	sp,fp
   801c0:	dfc00117 	ldw	ra,4(sp)
   801c4:	df000017 	ldw	fp,0(sp)
   801c8:	dec00204 	addi	sp,sp,8
   801cc:	f800283a 	ret

000801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801d0:	defffb04 	addi	sp,sp,-20
   801d4:	dfc00415 	stw	ra,16(sp)
   801d8:	df000315 	stw	fp,12(sp)
   801dc:	df000304 	addi	fp,sp,12
   801e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   801e4:	000531fa 	rdctl	r2,exception
   801e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   801ec:	e0bffd17 	ldw	r2,-12(fp)
   801f0:	10801f0c 	andi	r2,r2,124
   801f4:	1004d0ba 	srli	r2,r2,2
   801f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   801fc:	0005333a 	rdctl	r2,badaddr
   80200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   80204:	d0a70a17 	ldw	r2,-25560(gp)
   80208:	10000726 	beq	r2,zero,80228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   8020c:	d0a70a17 	ldw	r2,-25560(gp)
   80210:	e0fffd17 	ldw	r3,-12(fp)
   80214:	e1bffe17 	ldw	r6,-8(fp)
   80218:	e17fff17 	ldw	r5,-4(fp)
   8021c:	1809883a 	mov	r4,r3
   80220:	103ee83a 	callr	r2
   80224:	00000206 	br	80230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   8022c:	0005883a 	mov	r2,zero
}
   80230:	e037883a 	mov	sp,fp
   80234:	dfc00117 	ldw	ra,4(sp)
   80238:	df000017 	ldw	fp,0(sp)
   8023c:	dec00204 	addi	sp,sp,8
   80240:	f800283a 	ret

Disassembly of section .text:

00080244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   80244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   80248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   8024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   80250:	00bffd16 	blt	zero,r2,80248 <__alt_data_end+0xfffb4758>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80254:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   80258:	deeebc14 	ori	sp,sp,47856
    movhi gp, %hi(_gp)
   8025c:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   80260:	d6aa3914 	ori	gp,gp,43236
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80264:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   80268:	10913114 	ori	r2,r2,17604

    movhi r3, %hi(__bss_end)
   8026c:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   80270:	18d1bb14 	ori	r3,r3,18156

    beq r2, r3, 1f
   80274:	10c00326 	beq	r2,r3,80284 <_start+0x40>

0:
    stw zero, (r2)
   80278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   8027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80280:	10fffd36 	bltu	r2,r3,80278 <__alt_data_end+0xfffb4788>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80284:	008e7900 	call	8e790 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80288:	008e9240 	call	8e924 <alt_main>

0008028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   8028c:	003fff06 	br	8028c <__alt_data_end+0xfffb479c>

00080290 <set_background_in_memory>:


#include "background.h"

void set_background_in_memory(alt_u32 background[15])
{
   80290:	defffd04 	addi	sp,sp,-12
   80294:	df000215 	stw	fp,8(sp)
   80298:	df000204 	addi	fp,sp,8
   8029c:	e13fff15 	stw	r4,-4(fp)
	for(int i=0; i<16; i++){
   802a0:	e03ffe15 	stw	zero,-8(fp)
   802a4:	00001b06 	br	80314 <set_background_in_memory+0x84>
		IOWR_32DIRECT(BACKGROUND_DATA_BASE, 0, background[i]);
   802a8:	e0bffe17 	ldw	r2,-8(fp)
   802ac:	1085883a 	add	r2,r2,r2
   802b0:	1085883a 	add	r2,r2,r2
   802b4:	1007883a 	mov	r3,r2
   802b8:	e0bfff17 	ldw	r2,-4(fp)
   802bc:	10c5883a 	add	r2,r2,r3
   802c0:	10800017 	ldw	r2,0(r2)
   802c4:	1007883a 	mov	r3,r2
   802c8:	00800434 	movhi	r2,16
   802cc:	10842404 	addi	r2,r2,4240
   802d0:	10c00035 	stwio	r3,0(r2)
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b00000 + i);
   802d4:	00800434 	movhi	r2,16
   802d8:	10842004 	addi	r2,r2,4224
   802dc:	e0fffe03 	ldbu	r3,-8(fp)
   802e0:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b10000 + i);
   802e4:	e0bffe17 	ldw	r2,-8(fp)
   802e8:	10c00404 	addi	r3,r2,16
   802ec:	00800434 	movhi	r2,16
   802f0:	10842004 	addi	r2,r2,4224
   802f4:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b00000 + i);
   802f8:	00800434 	movhi	r2,16
   802fc:	10842004 	addi	r2,r2,4224
   80300:	e0fffe03 	ldbu	r3,-8(fp)
   80304:	10c00025 	stbio	r3,0(r2)

#include "background.h"

void set_background_in_memory(alt_u32 background[15])
{
	for(int i=0; i<16; i++){
   80308:	e0bffe17 	ldw	r2,-8(fp)
   8030c:	10800044 	addi	r2,r2,1
   80310:	e0bffe15 	stw	r2,-8(fp)
   80314:	e0bffe17 	ldw	r2,-8(fp)
   80318:	10800410 	cmplti	r2,r2,16
   8031c:	103fe21e 	bne	r2,zero,802a8 <__alt_data_end+0xfffb47b8>
		IOWR_32DIRECT(BACKGROUND_DATA_BASE, 0, background[i]);
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b00000 + i);
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b10000 + i);
		IOWR_8DIRECT(BACKGROUND_WR_BASE, 0, 0b00000 + i);
	}
}
   80320:	0001883a 	nop
   80324:	e037883a 	mov	sp,fp
   80328:	df000017 	ldw	fp,0(sp)
   8032c:	dec00104 	addi	sp,sp,4
   80330:	f800283a 	ret

00080334 <init_foodLayer>:

void init_foodLayer(alt_u32 background[15], alt_32 foodLayer[15], alt_u8 sizeY)
{
   80334:	defffb04 	addi	sp,sp,-20
   80338:	df000415 	stw	fp,16(sp)
   8033c:	df000404 	addi	fp,sp,16
   80340:	e13ffd15 	stw	r4,-12(fp)
   80344:	e17ffe15 	stw	r5,-8(fp)
   80348:	3005883a 	mov	r2,r6
   8034c:	e0bfff05 	stb	r2,-4(fp)
	for(int i=0; i<sizeY; i++){
   80350:	e03ffc15 	stw	zero,-16(fp)
   80354:	00001306 	br	803a4 <init_foodLayer+0x70>
		foodLayer[i] = 1-background[i];
   80358:	e0bffc17 	ldw	r2,-16(fp)
   8035c:	1085883a 	add	r2,r2,r2
   80360:	1085883a 	add	r2,r2,r2
   80364:	1007883a 	mov	r3,r2
   80368:	e0bffe17 	ldw	r2,-8(fp)
   8036c:	10c7883a 	add	r3,r2,r3
   80370:	e0bffc17 	ldw	r2,-16(fp)
   80374:	1085883a 	add	r2,r2,r2
   80378:	1085883a 	add	r2,r2,r2
   8037c:	1009883a 	mov	r4,r2
   80380:	e0bffd17 	ldw	r2,-12(fp)
   80384:	1105883a 	add	r2,r2,r4
   80388:	10800017 	ldw	r2,0(r2)
   8038c:	01000044 	movi	r4,1
   80390:	2085c83a 	sub	r2,r4,r2
   80394:	18800015 	stw	r2,0(r3)
	}
}

void init_foodLayer(alt_u32 background[15], alt_32 foodLayer[15], alt_u8 sizeY)
{
	for(int i=0; i<sizeY; i++){
   80398:	e0bffc17 	ldw	r2,-16(fp)
   8039c:	10800044 	addi	r2,r2,1
   803a0:	e0bffc15 	stw	r2,-16(fp)
   803a4:	e0bfff03 	ldbu	r2,-4(fp)
   803a8:	e0fffc17 	ldw	r3,-16(fp)
   803ac:	18bfea16 	blt	r3,r2,80358 <__alt_data_end+0xfffb4868>
		foodLayer[i] = 1-background[i];
	}
}
   803b0:	0001883a 	nop
   803b4:	e037883a 	mov	sp,fp
   803b8:	df000017 	ldw	fp,0(sp)
   803bc:	dec00104 	addi	sp,sp,4
   803c0:	f800283a 	ret

000803c4 <set_foodLayer_in_memory>:


void set_foodLayer_in_memory(alt_u32 foodLayer[15])
{
   803c4:	defffd04 	addi	sp,sp,-12
   803c8:	df000215 	stw	fp,8(sp)
   803cc:	df000204 	addi	fp,sp,8
   803d0:	e13fff15 	stw	r4,-4(fp)
	for(int i=0; i<16; i++){
   803d4:	e03ffe15 	stw	zero,-8(fp)
   803d8:	00001b06 	br	80448 <set_foodLayer_in_memory+0x84>
		IOWR_32DIRECT(FOOD_LAYER_DATA_BASE, 0, foodLayer[i]);
   803dc:	e0bffe17 	ldw	r2,-8(fp)
   803e0:	1085883a 	add	r2,r2,r2
   803e4:	1085883a 	add	r2,r2,r2
   803e8:	1007883a 	mov	r3,r2
   803ec:	e0bfff17 	ldw	r2,-4(fp)
   803f0:	10c5883a 	add	r2,r2,r3
   803f4:	10800017 	ldw	r2,0(r2)
   803f8:	1007883a 	mov	r3,r2
   803fc:	00800434 	movhi	r2,16
   80400:	10840c04 	addi	r2,r2,4144
   80404:	10c00035 	stwio	r3,0(r2)
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b00000 + i);
   80408:	00800434 	movhi	r2,16
   8040c:	10840804 	addi	r2,r2,4128
   80410:	e0fffe03 	ldbu	r3,-8(fp)
   80414:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b10000 + i);
   80418:	e0bffe17 	ldw	r2,-8(fp)
   8041c:	10c00404 	addi	r3,r2,16
   80420:	00800434 	movhi	r2,16
   80424:	10840804 	addi	r2,r2,4128
   80428:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b00000 + i);
   8042c:	00800434 	movhi	r2,16
   80430:	10840804 	addi	r2,r2,4128
   80434:	e0fffe03 	ldbu	r3,-8(fp)
   80438:	10c00025 	stbio	r3,0(r2)
}


void set_foodLayer_in_memory(alt_u32 foodLayer[15])
{
	for(int i=0; i<16; i++){
   8043c:	e0bffe17 	ldw	r2,-8(fp)
   80440:	10800044 	addi	r2,r2,1
   80444:	e0bffe15 	stw	r2,-8(fp)
   80448:	e0bffe17 	ldw	r2,-8(fp)
   8044c:	10800410 	cmplti	r2,r2,16
   80450:	103fe21e 	bne	r2,zero,803dc <__alt_data_end+0xfffb48ec>
		IOWR_32DIRECT(FOOD_LAYER_DATA_BASE, 0, foodLayer[i]);
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b00000 + i);
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b10000 + i);
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b00000 + i);
	}
}
   80454:	0001883a 	nop
   80458:	e037883a 	mov	sp,fp
   8045c:	df000017 	ldw	fp,0(sp)
   80460:	dec00104 	addi	sp,sp,4
   80464:	f800283a 	ret

00080468 <refresh_food_layer>:

void refresh_food_layer(position* charPosition, alt_u32 foodLayer[15], alt_u16* score)
{
   80468:	defff804 	addi	sp,sp,-32
   8046c:	dfc00715 	stw	ra,28(sp)
   80470:	df000615 	stw	fp,24(sp)
   80474:	df000604 	addi	fp,sp,24
   80478:	e13ffd15 	stw	r4,-12(fp)
   8047c:	e17ffe15 	stw	r5,-8(fp)
   80480:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 middlePosX = (charPosition->positionX + 30);
   80484:	e0bffd17 	ldw	r2,-12(fp)
   80488:	10800117 	ldw	r2,4(r2)
   8048c:	10800784 	addi	r2,r2,30
   80490:	e0bffa15 	stw	r2,-24(fp)
	alt_u32 middlePosY = (charPosition->positionY + 30);
   80494:	e0bffd17 	ldw	r2,-12(fp)
   80498:	10800217 	ldw	r2,8(r2)
   8049c:	10800784 	addi	r2,r2,30
   804a0:	e0bffb15 	stw	r2,-20(fp)


	alt_u16 blockX = middlePosX / 60;
   804a4:	e0bffa17 	ldw	r2,-24(fp)
   804a8:	01400f04 	movi	r5,60
   804ac:	1009883a 	mov	r4,r2
   804b0:	00814600 	call	81460 <__udivsi3>
   804b4:	e0bffc0d 	sth	r2,-16(fp)
	alt_u16 blockY = middlePosY / 60;
   804b8:	e0bffb17 	ldw	r2,-20(fp)
   804bc:	01400f04 	movi	r5,60
   804c0:	1009883a 	mov	r4,r2
   804c4:	00814600 	call	81460 <__udivsi3>
   804c8:	e0bffc8d 	sth	r2,-14(fp)
	if (get_block_with_coordinates(middlePosX, middlePosY, foodLayer) == 1){
   804cc:	e1bffe17 	ldw	r6,-8(fp)
   804d0:	e17ffb17 	ldw	r5,-20(fp)
   804d4:	e13ffa17 	ldw	r4,-24(fp)
   804d8:	00805d40 	call	805d4 <get_block_with_coordinates>
   804dc:	10803fcc 	andi	r2,r2,255
   804e0:	10800058 	cmpnei	r2,r2,1
   804e4:	1000351e 	bne	r2,zero,805bc <refresh_food_layer+0x154>
		foodLayer[blockY] &= (~(1<<(8+blockX)));
   804e8:	e0bffc8b 	ldhu	r2,-14(fp)
   804ec:	1085883a 	add	r2,r2,r2
   804f0:	1085883a 	add	r2,r2,r2
   804f4:	1007883a 	mov	r3,r2
   804f8:	e0bffe17 	ldw	r2,-8(fp)
   804fc:	10c7883a 	add	r3,r2,r3
   80500:	e0bffc8b 	ldhu	r2,-14(fp)
   80504:	1085883a 	add	r2,r2,r2
   80508:	1085883a 	add	r2,r2,r2
   8050c:	1009883a 	mov	r4,r2
   80510:	e0bffe17 	ldw	r2,-8(fp)
   80514:	1105883a 	add	r2,r2,r4
   80518:	10800017 	ldw	r2,0(r2)
   8051c:	e13ffc0b 	ldhu	r4,-16(fp)
   80520:	21000204 	addi	r4,r4,8
   80524:	01400044 	movi	r5,1
   80528:	2908983a 	sll	r4,r5,r4
   8052c:	0108303a 	nor	r4,zero,r4
   80530:	1104703a 	and	r2,r2,r4
   80534:	18800015 	stw	r2,0(r3)
		IOWR_32DIRECT(FOOD_LAYER_DATA_BASE, 0, foodLayer[blockY]);
   80538:	e0bffc8b 	ldhu	r2,-14(fp)
   8053c:	1085883a 	add	r2,r2,r2
   80540:	1085883a 	add	r2,r2,r2
   80544:	1007883a 	mov	r3,r2
   80548:	e0bffe17 	ldw	r2,-8(fp)
   8054c:	10c5883a 	add	r2,r2,r3
   80550:	10800017 	ldw	r2,0(r2)
   80554:	1007883a 	mov	r3,r2
   80558:	00800434 	movhi	r2,16
   8055c:	10840c04 	addi	r2,r2,4144
   80560:	10c00035 	stwio	r3,0(r2)
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b00000 + blockY);
   80564:	e0fffc8b 	ldhu	r3,-14(fp)
   80568:	00800434 	movhi	r2,16
   8056c:	10840804 	addi	r2,r2,4128
   80570:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b10000 + blockY);
   80574:	e0bffc8b 	ldhu	r2,-14(fp)
   80578:	10c00404 	addi	r3,r2,16
   8057c:	00800434 	movhi	r2,16
   80580:	10840804 	addi	r2,r2,4128
   80584:	10c00025 	stbio	r3,0(r2)
		IOWR_8DIRECT(FOOD_LAYER_WR_BASE, 0, 0b00000 + blockY);
   80588:	e0fffc8b 	ldhu	r3,-14(fp)
   8058c:	00800434 	movhi	r2,16
   80590:	10840804 	addi	r2,r2,4128
   80594:	10c00025 	stbio	r3,0(r2)
		printf("foo");
   80598:	01000274 	movhi	r4,9
   8059c:	21024d04 	addi	r4,r4,2356
   805a0:	008154c0 	call	8154c <printf>
		*score = *score+1;
   805a4:	e0bfff17 	ldw	r2,-4(fp)
   805a8:	1080000b 	ldhu	r2,0(r2)
   805ac:	10800044 	addi	r2,r2,1
   805b0:	1007883a 	mov	r3,r2
   805b4:	e0bfff17 	ldw	r2,-4(fp)
   805b8:	10c0000d 	sth	r3,0(r2)
	}
}
   805bc:	0001883a 	nop
   805c0:	e037883a 	mov	sp,fp
   805c4:	dfc00117 	ldw	ra,4(sp)
   805c8:	df000017 	ldw	fp,0(sp)
   805cc:	dec00204 	addi	sp,sp,8
   805d0:	f800283a 	ret

000805d4 <get_block_with_coordinates>:
 */

#include "general.h"


alt_u8 get_block_with_coordinates(alt_u32 positionX, alt_u32 positionY, alt_u32 layer[]){
   805d4:	defffa04 	addi	sp,sp,-24
   805d8:	dfc00515 	stw	ra,20(sp)
   805dc:	df000415 	stw	fp,16(sp)
   805e0:	df000404 	addi	fp,sp,16
   805e4:	e13ffd15 	stw	r4,-12(fp)
   805e8:	e17ffe15 	stw	r5,-8(fp)
   805ec:	e1bfff15 	stw	r6,-4(fp)
	alt_u16 blockX = positionX / 60;
   805f0:	e0bffd17 	ldw	r2,-12(fp)
   805f4:	01400f04 	movi	r5,60
   805f8:	1009883a 	mov	r4,r2
   805fc:	00814600 	call	81460 <__udivsi3>
   80600:	e0bffc0d 	sth	r2,-16(fp)
	alt_u16 blockY = positionY / 60;
   80604:	e0bffe17 	ldw	r2,-8(fp)
   80608:	01400f04 	movi	r5,60
   8060c:	1009883a 	mov	r4,r2
   80610:	00814600 	call	81460 <__udivsi3>
   80614:	e0bffc8d 	sth	r2,-14(fp)
	return ((layer[blockY] & 1<<(8+blockX))>>(8+blockX));
   80618:	e0bffc8b 	ldhu	r2,-14(fp)
   8061c:	1085883a 	add	r2,r2,r2
   80620:	1085883a 	add	r2,r2,r2
   80624:	1007883a 	mov	r3,r2
   80628:	e0bfff17 	ldw	r2,-4(fp)
   8062c:	10c5883a 	add	r2,r2,r3
   80630:	10800017 	ldw	r2,0(r2)
   80634:	e0fffc0b 	ldhu	r3,-16(fp)
   80638:	18c00204 	addi	r3,r3,8
   8063c:	01000044 	movi	r4,1
   80640:	20c6983a 	sll	r3,r4,r3
   80644:	10c6703a 	and	r3,r2,r3
   80648:	e0bffc0b 	ldhu	r2,-16(fp)
   8064c:	10800204 	addi	r2,r2,8
   80650:	1884d83a 	srl	r2,r3,r2
}
   80654:	e037883a 	mov	sp,fp
   80658:	dfc00117 	ldw	ra,4(sp)
   8065c:	df000017 	ldw	fp,0(sp)
   80660:	dec00204 	addi	sp,sp,8
   80664:	f800283a 	ret

00080668 <refresh_position_interrupt_handler>:

static void refresh_position_interrupt_handler(void* context)
/* interrupt handler : this function is called each time a new frame is build (60Hz)
 * it calls *refresh_position()* function and ensures the char doesn't go out of the frame.
*/
{
   80668:	defffc04 	addi	sp,sp,-16
   8066c:	dfc00315 	stw	ra,12(sp)
   80670:	df000215 	stw	fp,8(sp)
   80674:	df000204 	addi	fp,sp,8
   80678:	e13fff15 	stw	r4,-4(fp)
	position* p_pacmanPosition = (position*) context;
   8067c:	e0bfff17 	ldw	r2,-4(fp)
   80680:	e0bffe15 	stw	r2,-8(fp)
	refresh_position(p_pacmanPosition, 0);
   80684:	000b883a 	mov	r5,zero
   80688:	e13ffe17 	ldw	r4,-8(fp)
   8068c:	0080e740 	call	80e74 <refresh_position>
	refresh_food_layer(p_pacmanPosition, foodLayer, &score);
   80690:	d1a6f804 	addi	r6,gp,-25632
   80694:	01400274 	movhi	r5,9
   80698:	29515304 	addi	r5,r5,17740
   8069c:	e13ffe17 	ldw	r4,-8(fp)
   806a0:	00804680 	call	80468 <refresh_food_layer>
	IOWR_32DIRECT(POSITION_BASE, 0, p_pacmanPosition->bytePacket);
   806a4:	e0bffe17 	ldw	r2,-8(fp)
   806a8:	10800517 	ldw	r2,20(r2)
   806ac:	1007883a 	mov	r3,r2
   806b0:	00800434 	movhi	r2,16
   806b4:	10842c04 	addi	r2,r2,4272
   806b8:	10c00035 	stwio	r3,0(r2)
	IOWR(REFRESH_BASE,3,0xf);
   806bc:	00c003c4 	movi	r3,15
   806c0:	00800434 	movhi	r2,16
   806c4:	10842b04 	addi	r2,r2,4268
   806c8:	10c00035 	stwio	r3,0(r2)
}
   806cc:	0001883a 	nop
   806d0:	e037883a 	mov	sp,fp
   806d4:	dfc00117 	ldw	ra,4(sp)
   806d8:	df000017 	ldw	fp,0(sp)
   806dc:	dec00204 	addi	sp,sp,8
   806e0:	f800283a 	ret

000806e4 <left_button_interrupt_handler>:

static void left_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the left button direction is pressed */
{
   806e4:	defffd04 	addi	sp,sp,-12
   806e8:	df000215 	stw	fp,8(sp)
   806ec:	df000204 	addi	fp,sp,8
   806f0:	e13fff15 	stw	r4,-4(fp)
	position* p_pacmanPosition = (position*) context;
   806f4:	e0bfff17 	ldw	r2,-4(fp)
   806f8:	e0bffe15 	stw	r2,-8(fp)
	p_pacmanPosition->directionControl = LEFT;
   806fc:	e0bffe17 	ldw	r2,-8(fp)
   80700:	00c00104 	movi	r3,4
   80704:	10c00715 	stw	r3,28(r2)
	IOWR(LEFT_BUTTON_BASE,3,0xf);
   80708:	00c003c4 	movi	r3,15
   8070c:	00800434 	movhi	r2,16
   80710:	10841f04 	addi	r2,r2,4220
   80714:	10c00035 	stwio	r3,0(r2)
}
   80718:	0001883a 	nop
   8071c:	e037883a 	mov	sp,fp
   80720:	df000017 	ldw	fp,0(sp)
   80724:	dec00104 	addi	sp,sp,4
   80728:	f800283a 	ret

0008072c <up_button_interrupt_handler>:

static void up_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the up button direction is pressed */
{
   8072c:	defffd04 	addi	sp,sp,-12
   80730:	df000215 	stw	fp,8(sp)
   80734:	df000204 	addi	fp,sp,8
   80738:	e13fff15 	stw	r4,-4(fp)
	position* p_pacmanPosition = (position*) context;
   8073c:	e0bfff17 	ldw	r2,-4(fp)
   80740:	e0bffe15 	stw	r2,-8(fp)
	p_pacmanPosition->directionControl = DOWN;
   80744:	e0bffe17 	ldw	r2,-8(fp)
   80748:	00c000c4 	movi	r3,3
   8074c:	10c00715 	stw	r3,28(r2)
	IOWR(UP_BUTTON_BASE,3,0xf);
   80750:	00c003c4 	movi	r3,15
   80754:	00800434 	movhi	r2,16
   80758:	10841b04 	addi	r2,r2,4204
   8075c:	10c00035 	stwio	r3,0(r2)
}
   80760:	0001883a 	nop
   80764:	e037883a 	mov	sp,fp
   80768:	df000017 	ldw	fp,0(sp)
   8076c:	dec00104 	addi	sp,sp,4
   80770:	f800283a 	ret

00080774 <down_button_interrupt_handler>:

static void down_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the down button direction is pressed */
{
   80774:	defffd04 	addi	sp,sp,-12
   80778:	df000215 	stw	fp,8(sp)
   8077c:	df000204 	addi	fp,sp,8
   80780:	e13fff15 	stw	r4,-4(fp)
	position* p_pacmanPosition = (position*) context;
   80784:	e0bfff17 	ldw	r2,-4(fp)
   80788:	e0bffe15 	stw	r2,-8(fp)
	p_pacmanPosition->directionControl = UP;
   8078c:	e0bffe17 	ldw	r2,-8(fp)
   80790:	00c00044 	movi	r3,1
   80794:	10c00715 	stw	r3,28(r2)
	IOWR(DOWN_BUTTON_BASE,3,0xf);
   80798:	00c003c4 	movi	r3,15
   8079c:	00800434 	movhi	r2,16
   807a0:	10841704 	addi	r2,r2,4188
   807a4:	10c00035 	stwio	r3,0(r2)
}
   807a8:	0001883a 	nop
   807ac:	e037883a 	mov	sp,fp
   807b0:	df000017 	ldw	fp,0(sp)
   807b4:	dec00104 	addi	sp,sp,4
   807b8:	f800283a 	ret

000807bc <right_button_interrupt_handler>:

static void right_button_interrupt_handler(void* context)
/* interrupt handler : this function is called each time the right button direction is pressed */
{
   807bc:	defffd04 	addi	sp,sp,-12
   807c0:	df000215 	stw	fp,8(sp)
   807c4:	df000204 	addi	fp,sp,8
   807c8:	e13fff15 	stw	r4,-4(fp)
	position* p_pacmanPosition = (position*) context;
   807cc:	e0bfff17 	ldw	r2,-4(fp)
   807d0:	e0bffe15 	stw	r2,-8(fp)
	p_pacmanPosition->directionControl = RIGHT;
   807d4:	e0bffe17 	ldw	r2,-8(fp)
   807d8:	00c00084 	movi	r3,2
   807dc:	10c00715 	stw	r3,28(r2)
	IOWR(RIGHT_BUTTON_BASE,3,0xf);
   807e0:	00c003c4 	movi	r3,15
   807e4:	00800434 	movhi	r2,16
   807e8:	10841304 	addi	r2,r2,4172
   807ec:	10c00035 	stwio	r3,0(r2)
}
   807f0:	0001883a 	nop
   807f4:	e037883a 	mov	sp,fp
   807f8:	df000017 	ldw	fp,0(sp)
   807fc:	dec00104 	addi	sp,sp,4
   80800:	f800283a 	ret

00080804 <main>:

int main()
{
   80804:	defff304 	addi	sp,sp,-52
   80808:	dfc00c15 	stw	ra,48(sp)
   8080c:	df000b15 	stw	fp,44(sp)
   80810:	df000b04 	addi	fp,sp,44
	set_background_in_memory(background);
   80814:	01000274 	movhi	r4,9
   80818:	21037004 	addi	r4,r4,3520
   8081c:	00802900 	call	80290 <set_background_in_memory>
	init_foodLayer(background, foodLayer, 15);
   80820:	018003c4 	movi	r6,15
   80824:	01400274 	movhi	r5,9
   80828:	29515304 	addi	r5,r5,17740
   8082c:	01000274 	movhi	r4,9
   80830:	21037004 	addi	r4,r4,3520
   80834:	00803340 	call	80334 <init_foodLayer>
	set_foodLayer_in_memory(foodLayer);
   80838:	01000274 	movhi	r4,9
   8083c:	21115304 	addi	r4,r4,17740
   80840:	00803c40 	call	803c4 <set_foodLayer_in_memory>

	position pacmanPosition;
	init_position(&pacmanPosition, 0, 60, 60, ACTIVE, SOUTH);
   80844:	e0fff804 	addi	r3,fp,-32
   80848:	008000c4 	movi	r2,3
   8084c:	d8800115 	stw	r2,4(sp)
   80850:	00800044 	movi	r2,1
   80854:	d8800015 	stw	r2,0(sp)
   80858:	01c00f04 	movi	r7,60
   8085c:	01800f04 	movi	r6,60
   80860:	000b883a 	mov	r5,zero
   80864:	1809883a 	mov	r4,r3
   80868:	0080b980 	call	80b98 <init_position>
	compute_collision(&pacmanPosition);
   8086c:	e0bff804 	addi	r2,fp,-32
   80870:	1009883a 	mov	r4,r2
   80874:	0080c280 	call	80c28 <compute_collision>

	printf("Hello from Nios II!\n");
   80878:	01000274 	movhi	r4,9
   8087c:	21024e04 	addi	r4,r4,2360
   80880:	00816480 	call	81648 <puts>

	//IRQ initialization
	IOWR(REFRESH_BASE,2,0xf); //enable interrupt
   80884:	00c003c4 	movi	r3,15
   80888:	00800434 	movhi	r2,16
   8088c:	10842a04 	addi	r2,r2,4264
   80890:	10c00035 	stwio	r3,0(r2)
	IOWR(REFRESH_BASE,3,0xf); //clear edge register
   80894:	00c003c4 	movi	r3,15
   80898:	00800434 	movhi	r2,16
   8089c:	10842b04 	addi	r2,r2,4268
   808a0:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(REFRESH_IRQ,(void*)&pacmanPosition,refresh_position_interrupt_handler);
   808a4:	e0bff804 	addi	r2,fp,-32
   808a8:	01800234 	movhi	r6,8
   808ac:	31819a04 	addi	r6,r6,1640
   808b0:	100b883a 	mov	r5,r2
   808b4:	010000c4 	movi	r4,3
   808b8:	008e4c80 	call	8e4c8 <alt_irq_register>
	printf("Refresh IRQ : ");
   808bc:	01000274 	movhi	r4,9
   808c0:	21025304 	addi	r4,r4,2380
   808c4:	008154c0 	call	8154c <printf>
	printf("alt_ic_irq_enabled : %lu \n", alt_ic_irq_enabled(REFRESH_IRQ_INTERRUPT_CONTROLLER_ID, REFRESH_IRQ));
   808c8:	014000c4 	movi	r5,3
   808cc:	0009883a 	mov	r4,zero
   808d0:	008e38c0 	call	8e38c <alt_ic_irq_enabled>
   808d4:	100b883a 	mov	r5,r2
   808d8:	01000274 	movhi	r4,9
   808dc:	21025704 	addi	r4,r4,2396
   808e0:	008154c0 	call	8154c <printf>

	//Left button IRQ initialization
	IOWR(LEFT_BUTTON_BASE,2,0xf); //enable interrupt
   808e4:	00c003c4 	movi	r3,15
   808e8:	00800434 	movhi	r2,16
   808ec:	10841e04 	addi	r2,r2,4216
   808f0:	10c00035 	stwio	r3,0(r2)
	IOWR(LEFT_BUTTON_BASE,3,0xf); //clear edge register
   808f4:	00c003c4 	movi	r3,15
   808f8:	00800434 	movhi	r2,16
   808fc:	10841f04 	addi	r2,r2,4220
   80900:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(LEFT_BUTTON_IRQ,(void*)&pacmanPosition,left_button_interrupt_handler);
   80904:	e0bff804 	addi	r2,fp,-32
   80908:	01800234 	movhi	r6,8
   8090c:	3181b904 	addi	r6,r6,1764
   80910:	100b883a 	mov	r5,r2
   80914:	01000104 	movi	r4,4
   80918:	008e4c80 	call	8e4c8 <alt_irq_register>
	printf("Left button IRQ : ");
   8091c:	01000274 	movhi	r4,9
   80920:	21025e04 	addi	r4,r4,2424
   80924:	008154c0 	call	8154c <printf>
	printf("left_button_irq_enabled : %lu \n", alt_ic_irq_enabled(LEFT_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID, LEFT_BUTTON_IRQ));
   80928:	01400104 	movi	r5,4
   8092c:	0009883a 	mov	r4,zero
   80930:	008e38c0 	call	8e38c <alt_ic_irq_enabled>
   80934:	100b883a 	mov	r5,r2
   80938:	01000274 	movhi	r4,9
   8093c:	21026304 	addi	r4,r4,2444
   80940:	008154c0 	call	8154c <printf>

	//Up button IRQ initialization
	IOWR(UP_BUTTON_BASE,2,0xf); //enable interrupt
   80944:	00c003c4 	movi	r3,15
   80948:	00800434 	movhi	r2,16
   8094c:	10841a04 	addi	r2,r2,4200
   80950:	10c00035 	stwio	r3,0(r2)
	IOWR(UP_BUTTON_BASE,3,0xf); //clear edge register
   80954:	00c003c4 	movi	r3,15
   80958:	00800434 	movhi	r2,16
   8095c:	10841b04 	addi	r2,r2,4204
   80960:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(UP_BUTTON_IRQ,(void*)&pacmanPosition,up_button_interrupt_handler);
   80964:	e0bff804 	addi	r2,fp,-32
   80968:	01800234 	movhi	r6,8
   8096c:	3181cb04 	addi	r6,r6,1836
   80970:	100b883a 	mov	r5,r2
   80974:	01000144 	movi	r4,5
   80978:	008e4c80 	call	8e4c8 <alt_irq_register>
	printf("Up button IRQ : ");
   8097c:	01000274 	movhi	r4,9
   80980:	21026b04 	addi	r4,r4,2476
   80984:	008154c0 	call	8154c <printf>
	printf("up_button_irq_enabled : %lu \n", alt_ic_irq_enabled(UP_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID, UP_BUTTON_IRQ));
   80988:	01400144 	movi	r5,5
   8098c:	0009883a 	mov	r4,zero
   80990:	008e38c0 	call	8e38c <alt_ic_irq_enabled>
   80994:	100b883a 	mov	r5,r2
   80998:	01000274 	movhi	r4,9
   8099c:	21027004 	addi	r4,r4,2496
   809a0:	008154c0 	call	8154c <printf>

	//Down button IRQ initialization
	IOWR(DOWN_BUTTON_BASE,2,0xf); //enable interrupt
   809a4:	00c003c4 	movi	r3,15
   809a8:	00800434 	movhi	r2,16
   809ac:	10841604 	addi	r2,r2,4184
   809b0:	10c00035 	stwio	r3,0(r2)
	IOWR(DOWN_BUTTON_BASE,3,0xf); //clear edge register
   809b4:	00c003c4 	movi	r3,15
   809b8:	00800434 	movhi	r2,16
   809bc:	10841704 	addi	r2,r2,4188
   809c0:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(DOWN_BUTTON_IRQ,(void*)&pacmanPosition,down_button_interrupt_handler);
   809c4:	e0bff804 	addi	r2,fp,-32
   809c8:	01800234 	movhi	r6,8
   809cc:	3181dd04 	addi	r6,r6,1908
   809d0:	100b883a 	mov	r5,r2
   809d4:	01000184 	movi	r4,6
   809d8:	008e4c80 	call	8e4c8 <alt_irq_register>
	printf("Down button IRQ : ");
   809dc:	01000274 	movhi	r4,9
   809e0:	21027804 	addi	r4,r4,2528
   809e4:	008154c0 	call	8154c <printf>
	printf("down_button_irq_enabled : %lu \n", alt_ic_irq_enabled(DOWN_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID, DOWN_BUTTON_IRQ));
   809e8:	01400184 	movi	r5,6
   809ec:	0009883a 	mov	r4,zero
   809f0:	008e38c0 	call	8e38c <alt_ic_irq_enabled>
   809f4:	100b883a 	mov	r5,r2
   809f8:	01000274 	movhi	r4,9
   809fc:	21027d04 	addi	r4,r4,2548
   80a00:	008154c0 	call	8154c <printf>

	//Right button IRQ initialization
	IOWR(RIGHT_BUTTON_BASE,2,0xf); //enable interrupt
   80a04:	00c003c4 	movi	r3,15
   80a08:	00800434 	movhi	r2,16
   80a0c:	10841204 	addi	r2,r2,4168
   80a10:	10c00035 	stwio	r3,0(r2)
	IOWR(RIGHT_BUTTON_BASE,3,0xf); //clear edge register
   80a14:	00c003c4 	movi	r3,15
   80a18:	00800434 	movhi	r2,16
   80a1c:	10841304 	addi	r2,r2,4172
   80a20:	10c00035 	stwio	r3,0(r2)
	alt_irq_register(RIGHT_BUTTON_IRQ,(void*)&pacmanPosition,right_button_interrupt_handler);
   80a24:	e0bff804 	addi	r2,fp,-32
   80a28:	01800234 	movhi	r6,8
   80a2c:	3181ef04 	addi	r6,r6,1980
   80a30:	100b883a 	mov	r5,r2
   80a34:	010001c4 	movi	r4,7
   80a38:	008e4c80 	call	8e4c8 <alt_irq_register>
	printf("Right button IRQ : ");
   80a3c:	01000274 	movhi	r4,9
   80a40:	21028504 	addi	r4,r4,2580
   80a44:	008154c0 	call	8154c <printf>
	printf("right_button_irq_enabled : %lu \n", alt_ic_irq_enabled(RIGHT_BUTTON_IRQ_INTERRUPT_CONTROLLER_ID, RIGHT_BUTTON_IRQ));
   80a48:	014001c4 	movi	r5,7
   80a4c:	0009883a 	mov	r4,zero
   80a50:	008e38c0 	call	8e38c <alt_ic_irq_enabled>
   80a54:	100b883a 	mov	r5,r2
   80a58:	01000274 	movhi	r4,9
   80a5c:	21028a04 	addi	r4,r4,2600
   80a60:	008154c0 	call	8154c <printf>

	printf("%lu\n", background[1]);
   80a64:	00800274 	movhi	r2,9
   80a68:	10837004 	addi	r2,r2,3520
   80a6c:	10800117 	ldw	r2,4(r2)
   80a70:	100b883a 	mov	r5,r2
   80a74:	01000274 	movhi	r4,9
   80a78:	21029304 	addi	r4,r4,2636
   80a7c:	008154c0 	call	8154c <printf>

	long whileCounter = 0;
   80a80:	e03ff715 	stw	zero,-36(fp)
	while(1)
	{
		whileCounter++;
   80a84:	e0bff717 	ldw	r2,-36(fp)
   80a88:	10800044 	addi	r2,r2,1
   80a8c:	e0bff715 	stw	r2,-36(fp)
		if (whileCounter > 500000){
   80a90:	e0fff717 	ldw	r3,-36(fp)
   80a94:	00800234 	movhi	r2,8
   80a98:	10a84804 	addi	r2,r2,-24288
   80a9c:	10fff90e 	bge	r2,r3,80a84 <__alt_data_end+0xfffb4f94>
			printf("directionControl : %u, orientation : %u , Score : %u\n",
					pacmanPosition.directionControl,
   80aa0:	e0bfff17 	ldw	r2,-4(fp)
					pacmanPosition.orientation,
   80aa4:	e0fffc17 	ldw	r3,-16(fp)
	long whileCounter = 0;
	while(1)
	{
		whileCounter++;
		if (whileCounter > 500000){
			printf("directionControl : %u, orientation : %u , Score : %u\n",
   80aa8:	d126f80b 	ldhu	r4,-25632(gp)
   80aac:	213fffcc 	andi	r4,r4,65535
   80ab0:	200f883a 	mov	r7,r4
   80ab4:	180d883a 	mov	r6,r3
   80ab8:	100b883a 	mov	r5,r2
   80abc:	01000274 	movhi	r4,9
   80ac0:	21029504 	addi	r4,r4,2644
   80ac4:	008154c0 	call	8154c <printf>
					pacmanPosition.directionControl,
					pacmanPosition.orientation,
					score
			);
			whileCounter = 0;
   80ac8:	e03ff715 	stw	zero,-36(fp)
		}
	}
   80acc:	003fed06 	br	80a84 <__alt_data_end+0xfffb4f94>

00080ad0 <compute_byte_packet>:
#define MOVEMENT_STEP 5

void compute_byte_packet(position* charPosition)
//computes the binary data sent to the logic given the other arguments (position, orientation,...)
//contained in the structure position
{
   80ad0:	defffe04 	addi	sp,sp,-8
   80ad4:	df000115 	stw	fp,4(sp)
   80ad8:	df000104 	addi	fp,sp,4
   80adc:	e13fff15 	stw	r4,-4(fp)
	charPosition->bytePacket = (charPosition->charId << 29) + (charPosition->positionX << 17 ) + (charPosition->positionY << 5) + (charPosition->state << 2) + (charPosition->orientation );
   80ae0:	e0bfff17 	ldw	r2,-4(fp)
   80ae4:	10800003 	ldbu	r2,0(r2)
   80ae8:	10803fcc 	andi	r2,r2,255
   80aec:	1004977a 	slli	r2,r2,29
   80af0:	1007883a 	mov	r3,r2
   80af4:	e0bfff17 	ldw	r2,-4(fp)
   80af8:	10800117 	ldw	r2,4(r2)
   80afc:	1004947a 	slli	r2,r2,17
   80b00:	1887883a 	add	r3,r3,r2
   80b04:	e0bfff17 	ldw	r2,-4(fp)
   80b08:	10800217 	ldw	r2,8(r2)
   80b0c:	1004917a 	slli	r2,r2,5
   80b10:	1887883a 	add	r3,r3,r2
   80b14:	e0bfff17 	ldw	r2,-4(fp)
   80b18:	10800303 	ldbu	r2,12(r2)
   80b1c:	10803fcc 	andi	r2,r2,255
   80b20:	1085883a 	add	r2,r2,r2
   80b24:	1085883a 	add	r2,r2,r2
   80b28:	1887883a 	add	r3,r3,r2
   80b2c:	e0bfff17 	ldw	r2,-4(fp)
   80b30:	10800417 	ldw	r2,16(r2)
   80b34:	1887883a 	add	r3,r3,r2
   80b38:	e0bfff17 	ldw	r2,-4(fp)
   80b3c:	10c00515 	stw	r3,20(r2)
}
   80b40:	0001883a 	nop
   80b44:	e037883a 	mov	sp,fp
   80b48:	df000017 	ldw	fp,0(sp)
   80b4c:	dec00104 	addi	sp,sp,4
   80b50:	f800283a 	ret

00080b54 <initCollision>:

void initCollision(position* charPosition){
   80b54:	defffe04 	addi	sp,sp,-8
   80b58:	df000115 	stw	fp,4(sp)
   80b5c:	df000104 	addi	fp,sp,4
   80b60:	e13fff15 	stw	r4,-4(fp)
	charPosition->collision.north = 0;
   80b64:	e0bfff17 	ldw	r2,-4(fp)
   80b68:	10000605 	stb	zero,24(r2)
	charPosition->collision.east = 0;
   80b6c:	e0bfff17 	ldw	r2,-4(fp)
   80b70:	10000645 	stb	zero,25(r2)
	charPosition->collision.south = 0;
   80b74:	e0bfff17 	ldw	r2,-4(fp)
   80b78:	10000685 	stb	zero,26(r2)
	charPosition->collision.west = 0;
   80b7c:	e0bfff17 	ldw	r2,-4(fp)
   80b80:	100006c5 	stb	zero,27(r2)
}
   80b84:	0001883a 	nop
   80b88:	e037883a 	mov	sp,fp
   80b8c:	df000017 	ldw	fp,0(sp)
   80b90:	dec00104 	addi	sp,sp,4
   80b94:	f800283a 	ret

00080b98 <init_position>:

void init_position(position* charPosition, alt_u8 charId, alt_u32 positionX, alt_u32 positionY, alt_u8 state, orientation orientation)
//initialize the charPosition with the given arguments
{
   80b98:	defff904 	addi	sp,sp,-28
   80b9c:	dfc00615 	stw	ra,24(sp)
   80ba0:	df000515 	stw	fp,20(sp)
   80ba4:	df000504 	addi	fp,sp,20
   80ba8:	e13ffb15 	stw	r4,-20(fp)
   80bac:	2807883a 	mov	r3,r5
   80bb0:	e1bffd15 	stw	r6,-12(fp)
   80bb4:	e1fffe15 	stw	r7,-8(fp)
   80bb8:	e0800217 	ldw	r2,8(fp)
   80bbc:	e0fffc05 	stb	r3,-16(fp)
   80bc0:	e0bfff05 	stb	r2,-4(fp)
	charPosition->charId = charId ;
   80bc4:	e0bffb17 	ldw	r2,-20(fp)
   80bc8:	e0fffc03 	ldbu	r3,-16(fp)
   80bcc:	10c00005 	stb	r3,0(r2)
	charPosition->positionX = positionX ;
   80bd0:	e0bffb17 	ldw	r2,-20(fp)
   80bd4:	e0fffd17 	ldw	r3,-12(fp)
   80bd8:	10c00115 	stw	r3,4(r2)
	charPosition->positionY = positionY ;
   80bdc:	e0bffb17 	ldw	r2,-20(fp)
   80be0:	e0fffe17 	ldw	r3,-8(fp)
   80be4:	10c00215 	stw	r3,8(r2)
	charPosition->state = state ;
   80be8:	e0bffb17 	ldw	r2,-20(fp)
   80bec:	e0ffff03 	ldbu	r3,-4(fp)
   80bf0:	10c00305 	stb	r3,12(r2)
	charPosition->orientation = orientation ;
   80bf4:	e0bffb17 	ldw	r2,-20(fp)
   80bf8:	e0c00317 	ldw	r3,12(fp)
   80bfc:	10c00415 	stw	r3,16(r2)
	initCollision(charPosition);
   80c00:	e13ffb17 	ldw	r4,-20(fp)
   80c04:	0080b540 	call	80b54 <initCollision>
	compute_byte_packet(charPosition);
   80c08:	e13ffb17 	ldw	r4,-20(fp)
   80c0c:	0080ad00 	call	80ad0 <compute_byte_packet>
}
   80c10:	0001883a 	nop
   80c14:	e037883a 	mov	sp,fp
   80c18:	dfc00117 	ldw	ra,4(sp)
   80c1c:	df000017 	ldw	fp,0(sp)
   80c20:	dec00204 	addi	sp,sp,8
   80c24:	f800283a 	ret

00080c28 <compute_collision>:

void compute_collision(position* charPosition){
   80c28:	defffd04 	addi	sp,sp,-12
   80c2c:	dfc00215 	stw	ra,8(sp)
   80c30:	df000115 	stw	fp,4(sp)
   80c34:	df000104 	addi	fp,sp,4
   80c38:	e13fff15 	stw	r4,-4(fp)
	charPosition->collision.north = 1 -
		(int)
		(
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY - 1, background) 	== 0)
   80c3c:	e0bfff17 	ldw	r2,-4(fp)
   80c40:	10c00117 	ldw	r3,4(r2)
   80c44:	e0bfff17 	ldw	r2,-4(fp)
   80c48:	10800217 	ldw	r2,8(r2)
   80c4c:	10bfffc4 	addi	r2,r2,-1
   80c50:	01800274 	movhi	r6,9
   80c54:	31837f04 	addi	r6,r6,3580
   80c58:	100b883a 	mov	r5,r2
   80c5c:	1809883a 	mov	r4,r3
   80c60:	00805d40 	call	805d4 <get_block_with_coordinates>
	compute_byte_packet(charPosition);
}

void compute_collision(position* charPosition){
	charPosition->collision.north = 1 -
		(int)
   80c64:	10803fcc 	andi	r2,r2,255
   80c68:	10000f1e 	bne	r2,zero,80ca8 <compute_collision+0x80>
		(
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY - 1, background) 	== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY - 1, background) 	== 0)
   80c6c:	e0bfff17 	ldw	r2,-4(fp)
   80c70:	10800117 	ldw	r2,4(r2)
   80c74:	10c00ec4 	addi	r3,r2,59
   80c78:	e0bfff17 	ldw	r2,-4(fp)
   80c7c:	10800217 	ldw	r2,8(r2)
   80c80:	10bfffc4 	addi	r2,r2,-1
   80c84:	01800274 	movhi	r6,9
   80c88:	31837f04 	addi	r6,r6,3580
   80c8c:	100b883a 	mov	r5,r2
   80c90:	1809883a 	mov	r4,r3
   80c94:	00805d40 	call	805d4 <get_block_with_coordinates>
	compute_byte_packet(charPosition);
}

void compute_collision(position* charPosition){
	charPosition->collision.north = 1 -
		(int)
   80c98:	10803fcc 	andi	r2,r2,255
   80c9c:	1000021e 	bne	r2,zero,80ca8 <compute_collision+0x80>
   80ca0:	00800044 	movi	r2,1
   80ca4:	00000106 	br	80cac <compute_collision+0x84>
   80ca8:	0005883a 	mov	r2,zero
	initCollision(charPosition);
	compute_byte_packet(charPosition);
}

void compute_collision(position* charPosition){
	charPosition->collision.north = 1 -
   80cac:	1007883a 	mov	r3,r2
   80cb0:	00800044 	movi	r2,1
   80cb4:	10c5c83a 	sub	r2,r2,r3
   80cb8:	1007883a 	mov	r3,r2
   80cbc:	e0bfff17 	ldw	r2,-4(fp)
   80cc0:	10c00605 	stb	r3,24(r2)
		);

	charPosition->collision.east = 1 -
		(int)
		(
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY, background) 		== 0)
   80cc4:	e0bfff17 	ldw	r2,-4(fp)
   80cc8:	10800117 	ldw	r2,4(r2)
   80ccc:	10c00f04 	addi	r3,r2,60
   80cd0:	e0bfff17 	ldw	r2,-4(fp)
   80cd4:	10800217 	ldw	r2,8(r2)
   80cd8:	01800274 	movhi	r6,9
   80cdc:	31837f04 	addi	r6,r6,3580
   80ce0:	100b883a 	mov	r5,r2
   80ce4:	1809883a 	mov	r4,r3
   80ce8:	00805d40 	call	805d4 <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY - 1, background) 	== 0)
		);

	charPosition->collision.east = 1 -
		(int)
   80cec:	10803fcc 	andi	r2,r2,255
   80cf0:	10000f1e 	bne	r2,zero,80d30 <compute_collision+0x108>
		(
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY, background) 		== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY + 59, background) 	== 0)
   80cf4:	e0bfff17 	ldw	r2,-4(fp)
   80cf8:	10800117 	ldw	r2,4(r2)
   80cfc:	10c00f04 	addi	r3,r2,60
   80d00:	e0bfff17 	ldw	r2,-4(fp)
   80d04:	10800217 	ldw	r2,8(r2)
   80d08:	10800ec4 	addi	r2,r2,59
   80d0c:	01800274 	movhi	r6,9
   80d10:	31837f04 	addi	r6,r6,3580
   80d14:	100b883a 	mov	r5,r2
   80d18:	1809883a 	mov	r4,r3
   80d1c:	00805d40 	call	805d4 <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY - 1, background) 	== 0)
		);

	charPosition->collision.east = 1 -
		(int)
   80d20:	10803fcc 	andi	r2,r2,255
   80d24:	1000021e 	bne	r2,zero,80d30 <compute_collision+0x108>
   80d28:	00800044 	movi	r2,1
   80d2c:	00000106 	br	80d34 <compute_collision+0x10c>
   80d30:	0005883a 	mov	r2,zero
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY - 1, background) 	== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY - 1, background) 	== 0)
		);

	charPosition->collision.east = 1 -
   80d34:	1007883a 	mov	r3,r2
   80d38:	00800044 	movi	r2,1
   80d3c:	10c5c83a 	sub	r2,r2,r3
   80d40:	1007883a 	mov	r3,r2
   80d44:	e0bfff17 	ldw	r2,-4(fp)
   80d48:	10c00645 	stb	r3,25(r2)
		);

	charPosition->collision.south = 1 -
		(int)
		(
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY + 60, background) 	== 0)
   80d4c:	e0bfff17 	ldw	r2,-4(fp)
   80d50:	10c00117 	ldw	r3,4(r2)
   80d54:	e0bfff17 	ldw	r2,-4(fp)
   80d58:	10800217 	ldw	r2,8(r2)
   80d5c:	10800f04 	addi	r2,r2,60
   80d60:	01800274 	movhi	r6,9
   80d64:	31837f04 	addi	r6,r6,3580
   80d68:	100b883a 	mov	r5,r2
   80d6c:	1809883a 	mov	r4,r3
   80d70:	00805d40 	call	805d4 <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY + 59, background) 	== 0)
		);

	charPosition->collision.south = 1 -
		(int)
   80d74:	10803fcc 	andi	r2,r2,255
   80d78:	10000f1e 	bne	r2,zero,80db8 <compute_collision+0x190>
		(
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY + 60, background) 	== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY + 60, background) 	== 0)
   80d7c:	e0bfff17 	ldw	r2,-4(fp)
   80d80:	10800117 	ldw	r2,4(r2)
   80d84:	10c00ec4 	addi	r3,r2,59
   80d88:	e0bfff17 	ldw	r2,-4(fp)
   80d8c:	10800217 	ldw	r2,8(r2)
   80d90:	10800f04 	addi	r2,r2,60
   80d94:	01800274 	movhi	r6,9
   80d98:	31837f04 	addi	r6,r6,3580
   80d9c:	100b883a 	mov	r5,r2
   80da0:	1809883a 	mov	r4,r3
   80da4:	00805d40 	call	805d4 <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY + 59, background) 	== 0)
		);

	charPosition->collision.south = 1 -
		(int)
   80da8:	10803fcc 	andi	r2,r2,255
   80dac:	1000021e 	bne	r2,zero,80db8 <compute_collision+0x190>
   80db0:	00800044 	movi	r2,1
   80db4:	00000106 	br	80dbc <compute_collision+0x194>
   80db8:	0005883a 	mov	r2,zero
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY, background) 		== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 60, 	charPosition->positionY + 59, background) 	== 0)
		);

	charPosition->collision.south = 1 -
   80dbc:	1007883a 	mov	r3,r2
   80dc0:	00800044 	movi	r2,1
   80dc4:	10c5c83a 	sub	r2,r2,r3
   80dc8:	1007883a 	mov	r3,r2
   80dcc:	e0bfff17 	ldw	r2,-4(fp)
   80dd0:	10c00685 	stb	r3,26(r2)
		);

	charPosition->collision.west = 1 -
		(int)
		(
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY, background) 		== 0)
   80dd4:	e0bfff17 	ldw	r2,-4(fp)
   80dd8:	10800117 	ldw	r2,4(r2)
   80ddc:	10ffffc4 	addi	r3,r2,-1
   80de0:	e0bfff17 	ldw	r2,-4(fp)
   80de4:	10800217 	ldw	r2,8(r2)
   80de8:	01800274 	movhi	r6,9
   80dec:	31837f04 	addi	r6,r6,3580
   80df0:	100b883a 	mov	r5,r2
   80df4:	1809883a 	mov	r4,r3
   80df8:	00805d40 	call	805d4 <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY + 60, background) 	== 0)
		);

	charPosition->collision.west = 1 -
		(int)
   80dfc:	10803fcc 	andi	r2,r2,255
   80e00:	10000f1e 	bne	r2,zero,80e40 <compute_collision+0x218>
		(
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY, background) 		== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY + 59, background) 	== 0)
   80e04:	e0bfff17 	ldw	r2,-4(fp)
   80e08:	10800117 	ldw	r2,4(r2)
   80e0c:	10ffffc4 	addi	r3,r2,-1
   80e10:	e0bfff17 	ldw	r2,-4(fp)
   80e14:	10800217 	ldw	r2,8(r2)
   80e18:	10800ec4 	addi	r2,r2,59
   80e1c:	01800274 	movhi	r6,9
   80e20:	31837f04 	addi	r6,r6,3580
   80e24:	100b883a 	mov	r5,r2
   80e28:	1809883a 	mov	r4,r3
   80e2c:	00805d40 	call	805d4 <get_block_with_coordinates>
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY + 60, background) 	== 0)
		);

	charPosition->collision.west = 1 -
		(int)
   80e30:	10803fcc 	andi	r2,r2,255
   80e34:	1000021e 	bne	r2,zero,80e40 <compute_collision+0x218>
   80e38:	00800044 	movi	r2,1
   80e3c:	00000106 	br	80e44 <compute_collision+0x21c>
   80e40:	0005883a 	mov	r2,zero
			(get_block_with_coordinates(charPosition->positionX, 		charPosition->positionY + 60, background) 	== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX + 59, 	charPosition->positionY + 60, background) 	== 0)
		);

	charPosition->collision.west = 1 -
   80e44:	1007883a 	mov	r3,r2
   80e48:	00800044 	movi	r2,1
   80e4c:	10c5c83a 	sub	r2,r2,r3
   80e50:	1007883a 	mov	r3,r2
   80e54:	e0bfff17 	ldw	r2,-4(fp)
   80e58:	10c006c5 	stb	r3,27(r2)
		(
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY, background) 		== 0)
			&& 
			(get_block_with_coordinates(charPosition->positionX - 1, 	charPosition->positionY + 59, background) 	== 0)
		);
}
   80e5c:	0001883a 	nop
   80e60:	e037883a 	mov	sp,fp
   80e64:	dfc00117 	ldw	ra,4(sp)
   80e68:	df000017 	ldw	fp,0(sp)
   80e6c:	dec00204 	addi	sp,sp,8
   80e70:	f800283a 	ret

00080e74 <refresh_position>:
void refresh_position(position* charPosition, alt_u8 autoMode)
/*this function computes the new position of the pacman given :
 * - the orientation
 * - the collisions around the character
 */
{
   80e74:	defffa04 	addi	sp,sp,-24
   80e78:	dfc00515 	stw	ra,20(sp)
   80e7c:	df000415 	stw	fp,16(sp)
   80e80:	df000404 	addi	fp,sp,16
   80e84:	e13ffe15 	stw	r4,-8(fp)
   80e88:	2805883a 	mov	r2,r5
   80e8c:	e0bfff05 	stb	r2,-4(fp)
	compute_collision(charPosition);
   80e90:	e13ffe17 	ldw	r4,-8(fp)
   80e94:	0080c280 	call	80c28 <compute_collision>
	alt_u16 step = MOVEMENT_STEP;
   80e98:	00800144 	movi	r2,5
   80e9c:	e0bffc0d 	sth	r2,-16(fp)
	
	srand((unsigned int)time(NULL) + charPosition->positionX);
   80ea0:	0009883a 	mov	r4,zero
   80ea4:	00817700 	call	81770 <time>
   80ea8:	1007883a 	mov	r3,r2
   80eac:	e0bffe17 	ldw	r2,-8(fp)
   80eb0:	10800117 	ldw	r2,4(r2)
   80eb4:	1885883a 	add	r2,r3,r2
   80eb8:	1009883a 	mov	r4,r2
   80ebc:	008165c0 	call	8165c <srand>
	int randomOrientation = rand() % 5;
   80ec0:	00816740 	call	81674 <rand>
   80ec4:	01400144 	movi	r5,5
   80ec8:	1009883a 	mov	r4,r2
   80ecc:	00813ec0 	call	813ec <__modsi3>
   80ed0:	e0bffd15 	stw	r2,-12(fp)

	switch(charPosition->directionControl)
   80ed4:	e0bffe17 	ldw	r2,-8(fp)
   80ed8:	10800717 	ldw	r2,28(r2)
   80edc:	10c000a0 	cmpeqi	r3,r2,2
   80ee0:	1800211e 	bne	r3,zero,80f68 <refresh_position+0xf4>
   80ee4:	10c000e8 	cmpgeui	r3,r2,3
   80ee8:	1800031e 	bne	r3,zero,80ef8 <refresh_position+0x84>
   80eec:	10800060 	cmpeqi	r2,r2,1
   80ef0:	1000061e 	bne	r2,zero,80f0c <refresh_position+0x98>
   80ef4:	00006006 	br	81078 <refresh_position+0x204>
   80ef8:	10c000e0 	cmpeqi	r3,r2,3
   80efc:	1800311e 	bne	r3,zero,80fc4 <refresh_position+0x150>
   80f00:	10800120 	cmpeqi	r2,r2,4
   80f04:	1000461e 	bne	r2,zero,81020 <refresh_position+0x1ac>
   80f08:	00005b06 	br	81078 <refresh_position+0x204>
	{
		case UP:
			if(charPosition->collision.north == 0){
   80f0c:	e0bffe17 	ldw	r2,-8(fp)
   80f10:	10800603 	ldbu	r2,24(r2)
   80f14:	10803fcc 	andi	r2,r2,255
   80f18:	10000c1e 	bne	r2,zero,80f4c <refresh_position+0xd8>
				charPosition->orientation = NORTH;
   80f1c:	e0bffe17 	ldw	r2,-8(fp)
   80f20:	00c00044 	movi	r3,1
   80f24:	10c00415 	stw	r3,16(r2)
				charPosition->positionY = charPosition->positionY - step;
   80f28:	e0bffe17 	ldw	r2,-8(fp)
   80f2c:	10c00217 	ldw	r3,8(r2)
   80f30:	e0bffc0b 	ldhu	r2,-16(fp)
   80f34:	1887c83a 	sub	r3,r3,r2
   80f38:	e0bffe17 	ldw	r2,-8(fp)
   80f3c:	10c00215 	stw	r3,8(r2)
				charPosition->directionControl = NONE;
   80f40:	e0bffe17 	ldw	r2,-8(fp)
   80f44:	10000715 	stw	zero,28(r2)
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
			}
		break;
   80f48:	00005206 	br	81094 <refresh_position+0x220>
			if(charPosition->collision.north == 0){
				charPosition->orientation = NORTH;
				charPosition->positionY = charPosition->positionY - step;
				charPosition->directionControl = NONE;
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
   80f4c:	e0bffc0b 	ldhu	r2,-16(fp)
   80f50:	e0ffff03 	ldbu	r3,-4(fp)
   80f54:	180d883a 	mov	r6,r3
   80f58:	100b883a 	mov	r5,r2
   80f5c:	e13ffe17 	ldw	r4,-8(fp)
   80f60:	00810b40 	call	810b4 <refresh_position_keepGoing>
			}
		break;
   80f64:	00004b06 	br	81094 <refresh_position+0x220>
		case RIGHT:
			if(charPosition->collision.east == 0){
   80f68:	e0bffe17 	ldw	r2,-8(fp)
   80f6c:	10800643 	ldbu	r2,25(r2)
   80f70:	10803fcc 	andi	r2,r2,255
   80f74:	10000c1e 	bne	r2,zero,80fa8 <refresh_position+0x134>
				charPosition->orientation = EAST;
   80f78:	e0bffe17 	ldw	r2,-8(fp)
   80f7c:	00c00084 	movi	r3,2
   80f80:	10c00415 	stw	r3,16(r2)
				charPosition->positionX = charPosition->positionX + step;
   80f84:	e0bffe17 	ldw	r2,-8(fp)
   80f88:	10c00117 	ldw	r3,4(r2)
   80f8c:	e0bffc0b 	ldhu	r2,-16(fp)
   80f90:	1887883a 	add	r3,r3,r2
   80f94:	e0bffe17 	ldw	r2,-8(fp)
   80f98:	10c00115 	stw	r3,4(r2)
				charPosition->directionControl = NONE;
   80f9c:	e0bffe17 	ldw	r2,-8(fp)
   80fa0:	10000715 	stw	zero,28(r2)
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
			}
		break;
   80fa4:	00003b06 	br	81094 <refresh_position+0x220>
			if(charPosition->collision.east == 0){
				charPosition->orientation = EAST;
				charPosition->positionX = charPosition->positionX + step;
				charPosition->directionControl = NONE;
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
   80fa8:	e0bffc0b 	ldhu	r2,-16(fp)
   80fac:	e0ffff03 	ldbu	r3,-4(fp)
   80fb0:	180d883a 	mov	r6,r3
   80fb4:	100b883a 	mov	r5,r2
   80fb8:	e13ffe17 	ldw	r4,-8(fp)
   80fbc:	00810b40 	call	810b4 <refresh_position_keepGoing>
			}
		break;
   80fc0:	00003406 	br	81094 <refresh_position+0x220>
		case DOWN:
			if(charPosition->collision.south == 0){
   80fc4:	e0bffe17 	ldw	r2,-8(fp)
   80fc8:	10800683 	ldbu	r2,26(r2)
   80fcc:	10803fcc 	andi	r2,r2,255
   80fd0:	10000c1e 	bne	r2,zero,81004 <refresh_position+0x190>
				charPosition->orientation = SOUTH;
   80fd4:	e0bffe17 	ldw	r2,-8(fp)
   80fd8:	00c000c4 	movi	r3,3
   80fdc:	10c00415 	stw	r3,16(r2)
				charPosition->positionY = charPosition->positionY + step;
   80fe0:	e0bffe17 	ldw	r2,-8(fp)
   80fe4:	10c00217 	ldw	r3,8(r2)
   80fe8:	e0bffc0b 	ldhu	r2,-16(fp)
   80fec:	1887883a 	add	r3,r3,r2
   80ff0:	e0bffe17 	ldw	r2,-8(fp)
   80ff4:	10c00215 	stw	r3,8(r2)
				charPosition->directionControl = NONE;
   80ff8:	e0bffe17 	ldw	r2,-8(fp)
   80ffc:	10000715 	stw	zero,28(r2)
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
			}
		break;
   81000:	00002406 	br	81094 <refresh_position+0x220>
			if(charPosition->collision.south == 0){
				charPosition->orientation = SOUTH;
				charPosition->positionY = charPosition->positionY + step;
				charPosition->directionControl = NONE;
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
   81004:	e0bffc0b 	ldhu	r2,-16(fp)
   81008:	e0ffff03 	ldbu	r3,-4(fp)
   8100c:	180d883a 	mov	r6,r3
   81010:	100b883a 	mov	r5,r2
   81014:	e13ffe17 	ldw	r4,-8(fp)
   81018:	00810b40 	call	810b4 <refresh_position_keepGoing>
			}
		break;
   8101c:	00001d06 	br	81094 <refresh_position+0x220>
		case LEFT:
			if(charPosition->collision.west == 0){
   81020:	e0bffe17 	ldw	r2,-8(fp)
   81024:	108006c3 	ldbu	r2,27(r2)
   81028:	10803fcc 	andi	r2,r2,255
   8102c:	10000b1e 	bne	r2,zero,8105c <refresh_position+0x1e8>
				charPosition->orientation = WEST;
   81030:	e0bffe17 	ldw	r2,-8(fp)
   81034:	10000415 	stw	zero,16(r2)
				charPosition->positionX = charPosition->positionX - step;
   81038:	e0bffe17 	ldw	r2,-8(fp)
   8103c:	10c00117 	ldw	r3,4(r2)
   81040:	e0bffc0b 	ldhu	r2,-16(fp)
   81044:	1887c83a 	sub	r3,r3,r2
   81048:	e0bffe17 	ldw	r2,-8(fp)
   8104c:	10c00115 	stw	r3,4(r2)
				charPosition->directionControl = NONE;
   81050:	e0bffe17 	ldw	r2,-8(fp)
   81054:	10000715 	stw	zero,28(r2)
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
			}
		break;
   81058:	00000e06 	br	81094 <refresh_position+0x220>
			if(charPosition->collision.west == 0){
				charPosition->orientation = WEST;
				charPosition->positionX = charPosition->positionX - step;
				charPosition->directionControl = NONE;
			} else {
				refresh_position_keepGoing(charPosition, step, autoMode);
   8105c:	e0bffc0b 	ldhu	r2,-16(fp)
   81060:	e0ffff03 	ldbu	r3,-4(fp)
   81064:	180d883a 	mov	r6,r3
   81068:	100b883a 	mov	r5,r2
   8106c:	e13ffe17 	ldw	r4,-8(fp)
   81070:	00810b40 	call	810b4 <refresh_position_keepGoing>
			}
		break;
   81074:	00000706 	br	81094 <refresh_position+0x220>
		default :
			refresh_position_keepGoing(charPosition, step, autoMode);
   81078:	e0bffc0b 	ldhu	r2,-16(fp)
   8107c:	e0ffff03 	ldbu	r3,-4(fp)
   81080:	180d883a 	mov	r6,r3
   81084:	100b883a 	mov	r5,r2
   81088:	e13ffe17 	ldw	r4,-8(fp)
   8108c:	00810b40 	call	810b4 <refresh_position_keepGoing>
		break;
   81090:	0001883a 	nop
	}
	compute_byte_packet(charPosition);
   81094:	e13ffe17 	ldw	r4,-8(fp)
   81098:	0080ad00 	call	80ad0 <compute_byte_packet>
}
   8109c:	0001883a 	nop
   810a0:	e037883a 	mov	sp,fp
   810a4:	dfc00117 	ldw	ra,4(sp)
   810a8:	df000017 	ldw	fp,0(sp)
   810ac:	dec00204 	addi	sp,sp,8
   810b0:	f800283a 	ret

000810b4 <refresh_position_keepGoing>:

void refresh_position_keepGoing(position* charPosition, alt_u16 step, alt_u8 autoMode){
   810b4:	defffb04 	addi	sp,sp,-20
   810b8:	dfc00415 	stw	ra,16(sp)
   810bc:	df000315 	stw	fp,12(sp)
   810c0:	df000304 	addi	fp,sp,12
   810c4:	e13ffd15 	stw	r4,-12(fp)
   810c8:	2807883a 	mov	r3,r5
   810cc:	3005883a 	mov	r2,r6
   810d0:	e0fffe0d 	sth	r3,-8(fp)
   810d4:	e0bfff05 	stb	r2,-4(fp)
	switch(charPosition->orientation)
   810d8:	e0bffd17 	ldw	r2,-12(fp)
   810dc:	10800417 	ldw	r2,16(r2)
   810e0:	10c00060 	cmpeqi	r3,r2,1
   810e4:	1800061e 	bne	r3,zero,81100 <refresh_position_keepGoing+0x4c>
   810e8:	00803e2e 	bgeu	zero,r2,811e4 <refresh_position_keepGoing+0x130>
   810ec:	10c000a0 	cmpeqi	r3,r2,2
   810f0:	1800161e 	bne	r3,zero,8114c <refresh_position_keepGoing+0x98>
   810f4:	108000e0 	cmpeqi	r2,r2,3
   810f8:	1000271e 	bne	r2,zero,81198 <refresh_position_keepGoing+0xe4>
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
	}
}
   810fc:	00005306 	br	8124c <refresh_position_keepGoing+0x198>

void refresh_position_keepGoing(position* charPosition, alt_u16 step, alt_u8 autoMode){
	switch(charPosition->orientation)
	{
		case NORTH :
			if (charPosition->collision.north == 0){
   81100:	e0bffd17 	ldw	r2,-12(fp)
   81104:	10800603 	ldbu	r2,24(r2)
   81108:	10803fcc 	andi	r2,r2,255
   8110c:	1000071e 	bne	r2,zero,8112c <refresh_position_keepGoing+0x78>
				charPosition->positionY = charPosition->positionY - step;	
   81110:	e0bffd17 	ldw	r2,-12(fp)
   81114:	10c00217 	ldw	r3,8(r2)
   81118:	e0bffe0b 	ldhu	r2,-8(fp)
   8111c:	1887c83a 	sub	r3,r3,r2
   81120:	e0bffd17 	ldw	r2,-12(fp)
   81124:	10c00215 	stw	r3,8(r2)
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   81128:	00004106 	br	81230 <refresh_position_keepGoing+0x17c>
	switch(charPosition->orientation)
	{
		case NORTH :
			if (charPosition->collision.north == 0){
				charPosition->positionY = charPosition->positionY - step;	
			} else if (autoMode == 1) {
   8112c:	e0bfff03 	ldbu	r2,-4(fp)
   81130:	10800058 	cmpnei	r2,r2,1
   81134:	10003e1e 	bne	r2,zero,81230 <refresh_position_keepGoing+0x17c>
				randomDirection(charPosition, step);
   81138:	e0bffe0b 	ldhu	r2,-8(fp)
   8113c:	100b883a 	mov	r5,r2
   81140:	e13ffd17 	ldw	r4,-12(fp)
   81144:	00812640 	call	81264 <randomDirection>
			} 
		break;
   81148:	00003906 	br	81230 <refresh_position_keepGoing+0x17c>
		case EAST :
			if (charPosition->collision.east == 0){
   8114c:	e0bffd17 	ldw	r2,-12(fp)
   81150:	10800643 	ldbu	r2,25(r2)
   81154:	10803fcc 	andi	r2,r2,255
   81158:	1000071e 	bne	r2,zero,81178 <refresh_position_keepGoing+0xc4>
				charPosition->positionX = charPosition->positionX + step;
   8115c:	e0bffd17 	ldw	r2,-12(fp)
   81160:	10c00117 	ldw	r3,4(r2)
   81164:	e0bffe0b 	ldhu	r2,-8(fp)
   81168:	1887883a 	add	r3,r3,r2
   8116c:	e0bffd17 	ldw	r2,-12(fp)
   81170:	10c00115 	stw	r3,4(r2)
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   81174:	00003006 	br	81238 <refresh_position_keepGoing+0x184>
			} 
		break;
		case EAST :
			if (charPosition->collision.east == 0){
				charPosition->positionX = charPosition->positionX + step;
			} else if (autoMode == 1) {
   81178:	e0bfff03 	ldbu	r2,-4(fp)
   8117c:	10800058 	cmpnei	r2,r2,1
   81180:	10002d1e 	bne	r2,zero,81238 <refresh_position_keepGoing+0x184>
				randomDirection(charPosition, step);
   81184:	e0bffe0b 	ldhu	r2,-8(fp)
   81188:	100b883a 	mov	r5,r2
   8118c:	e13ffd17 	ldw	r4,-12(fp)
   81190:	00812640 	call	81264 <randomDirection>
			} 
		break;
   81194:	00002806 	br	81238 <refresh_position_keepGoing+0x184>
		case SOUTH :
			if (charPosition->collision.south == 0){
   81198:	e0bffd17 	ldw	r2,-12(fp)
   8119c:	10800683 	ldbu	r2,26(r2)
   811a0:	10803fcc 	andi	r2,r2,255
   811a4:	1000071e 	bne	r2,zero,811c4 <refresh_position_keepGoing+0x110>
				charPosition->positionY = charPosition->positionY + step;
   811a8:	e0bffd17 	ldw	r2,-12(fp)
   811ac:	10c00217 	ldw	r3,8(r2)
   811b0:	e0bffe0b 	ldhu	r2,-8(fp)
   811b4:	1887883a 	add	r3,r3,r2
   811b8:	e0bffd17 	ldw	r2,-12(fp)
   811bc:	10c00215 	stw	r3,8(r2)
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   811c0:	00001f06 	br	81240 <refresh_position_keepGoing+0x18c>
			} 
		break;
		case SOUTH :
			if (charPosition->collision.south == 0){
				charPosition->positionY = charPosition->positionY + step;
			} else if (autoMode == 1) {
   811c4:	e0bfff03 	ldbu	r2,-4(fp)
   811c8:	10800058 	cmpnei	r2,r2,1
   811cc:	10001c1e 	bne	r2,zero,81240 <refresh_position_keepGoing+0x18c>
				randomDirection(charPosition, step);
   811d0:	e0bffe0b 	ldhu	r2,-8(fp)
   811d4:	100b883a 	mov	r5,r2
   811d8:	e13ffd17 	ldw	r4,-12(fp)
   811dc:	00812640 	call	81264 <randomDirection>
			} 
		break;
   811e0:	00001706 	br	81240 <refresh_position_keepGoing+0x18c>
		case WEST :
			if (charPosition->collision.west == 0){
   811e4:	e0bffd17 	ldw	r2,-12(fp)
   811e8:	108006c3 	ldbu	r2,27(r2)
   811ec:	10803fcc 	andi	r2,r2,255
   811f0:	1000071e 	bne	r2,zero,81210 <refresh_position_keepGoing+0x15c>
				charPosition->positionX = charPosition->positionX - step;
   811f4:	e0bffd17 	ldw	r2,-12(fp)
   811f8:	10c00117 	ldw	r3,4(r2)
   811fc:	e0bffe0b 	ldhu	r2,-8(fp)
   81200:	1887c83a 	sub	r3,r3,r2
   81204:	e0bffd17 	ldw	r2,-12(fp)
   81208:	10c00115 	stw	r3,4(r2)
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   8120c:	00000e06 	br	81248 <refresh_position_keepGoing+0x194>
			} 
		break;
		case WEST :
			if (charPosition->collision.west == 0){
				charPosition->positionX = charPosition->positionX - step;
			} else if (autoMode == 1) {
   81210:	e0bfff03 	ldbu	r2,-4(fp)
   81214:	10800058 	cmpnei	r2,r2,1
   81218:	10000b1e 	bne	r2,zero,81248 <refresh_position_keepGoing+0x194>
				randomDirection(charPosition, step);
   8121c:	e0bffe0b 	ldhu	r2,-8(fp)
   81220:	100b883a 	mov	r5,r2
   81224:	e13ffd17 	ldw	r4,-12(fp)
   81228:	00812640 	call	81264 <randomDirection>
			} 
		break;
   8122c:	00000606 	br	81248 <refresh_position_keepGoing+0x194>
			if (charPosition->collision.north == 0){
				charPosition->positionY = charPosition->positionY - step;	
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   81230:	0001883a 	nop
   81234:	00000506 	br	8124c <refresh_position_keepGoing+0x198>
			if (charPosition->collision.east == 0){
				charPosition->positionX = charPosition->positionX + step;
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   81238:	0001883a 	nop
   8123c:	00000306 	br	8124c <refresh_position_keepGoing+0x198>
			if (charPosition->collision.south == 0){
				charPosition->positionY = charPosition->positionY + step;
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   81240:	0001883a 	nop
   81244:	00000106 	br	8124c <refresh_position_keepGoing+0x198>
			if (charPosition->collision.west == 0){
				charPosition->positionX = charPosition->positionX - step;
			} else if (autoMode == 1) {
				randomDirection(charPosition, step);
			} 
		break;
   81248:	0001883a 	nop
	}
}
   8124c:	0001883a 	nop
   81250:	e037883a 	mov	sp,fp
   81254:	dfc00117 	ldw	ra,4(sp)
   81258:	df000017 	ldw	fp,0(sp)
   8125c:	dec00204 	addi	sp,sp,8
   81260:	f800283a 	ret

00081264 <randomDirection>:

//this function should be removed once the button controls are working
void randomDirection(position* charPosition, alt_u16 step){
   81264:	defffd04 	addi	sp,sp,-12
   81268:	df000215 	stw	fp,8(sp)
   8126c:	df000204 	addi	fp,sp,8
   81270:	e13ffe15 	stw	r4,-8(fp)
   81274:	2805883a 	mov	r2,r5
   81278:	e0bfff0d 	sth	r2,-4(fp)
	if (charPosition->collision.north == 0){
   8127c:	e0bffe17 	ldw	r2,-8(fp)
   81280:	10800603 	ldbu	r2,24(r2)
   81284:	10803fcc 	andi	r2,r2,255
   81288:	10000a1e 	bne	r2,zero,812b4 <randomDirection+0x50>
		charPosition->orientation = NORTH;
   8128c:	e0bffe17 	ldw	r2,-8(fp)
   81290:	00c00044 	movi	r3,1
   81294:	10c00415 	stw	r3,16(r2)
		charPosition->positionY = charPosition->positionY - step;				
   81298:	e0bffe17 	ldw	r2,-8(fp)
   8129c:	10c00217 	ldw	r3,8(r2)
   812a0:	e0bfff0b 	ldhu	r2,-4(fp)
   812a4:	1887c83a 	sub	r3,r3,r2
   812a8:	e0bffe17 	ldw	r2,-8(fp)
   812ac:	10c00215 	stw	r3,8(r2)
	}	
	else if (charPosition->collision.west == 0){
		charPosition->orientation = WEST;
		charPosition->positionX = charPosition->positionX - step;		
	}
}
   812b0:	00002806 	br	81354 <randomDirection+0xf0>
void randomDirection(position* charPosition, alt_u16 step){
	if (charPosition->collision.north == 0){
		charPosition->orientation = NORTH;
		charPosition->positionY = charPosition->positionY - step;				
	}	
	else if (charPosition->collision.east == 0){	
   812b4:	e0bffe17 	ldw	r2,-8(fp)
   812b8:	10800643 	ldbu	r2,25(r2)
   812bc:	10803fcc 	andi	r2,r2,255
   812c0:	10000a1e 	bne	r2,zero,812ec <randomDirection+0x88>
		charPosition->orientation = EAST;
   812c4:	e0bffe17 	ldw	r2,-8(fp)
   812c8:	00c00084 	movi	r3,2
   812cc:	10c00415 	stw	r3,16(r2)
		charPosition->positionX = charPosition->positionX + step;		
   812d0:	e0bffe17 	ldw	r2,-8(fp)
   812d4:	10c00117 	ldw	r3,4(r2)
   812d8:	e0bfff0b 	ldhu	r2,-4(fp)
   812dc:	1887883a 	add	r3,r3,r2
   812e0:	e0bffe17 	ldw	r2,-8(fp)
   812e4:	10c00115 	stw	r3,4(r2)
	}	
	else if (charPosition->collision.west == 0){
		charPosition->orientation = WEST;
		charPosition->positionX = charPosition->positionX - step;		
	}
}
   812e8:	00001a06 	br	81354 <randomDirection+0xf0>
	}	
	else if (charPosition->collision.east == 0){	
		charPosition->orientation = EAST;
		charPosition->positionX = charPosition->positionX + step;		
	}	
	else if (charPosition->collision.south == 0){
   812ec:	e0bffe17 	ldw	r2,-8(fp)
   812f0:	10800683 	ldbu	r2,26(r2)
   812f4:	10803fcc 	andi	r2,r2,255
   812f8:	10000a1e 	bne	r2,zero,81324 <randomDirection+0xc0>
		charPosition->orientation = SOUTH;
   812fc:	e0bffe17 	ldw	r2,-8(fp)
   81300:	00c000c4 	movi	r3,3
   81304:	10c00415 	stw	r3,16(r2)
		charPosition->positionY = charPosition->positionY + step;				
   81308:	e0bffe17 	ldw	r2,-8(fp)
   8130c:	10c00217 	ldw	r3,8(r2)
   81310:	e0bfff0b 	ldhu	r2,-4(fp)
   81314:	1887883a 	add	r3,r3,r2
   81318:	e0bffe17 	ldw	r2,-8(fp)
   8131c:	10c00215 	stw	r3,8(r2)
	}	
	else if (charPosition->collision.west == 0){
		charPosition->orientation = WEST;
		charPosition->positionX = charPosition->positionX - step;		
	}
}
   81320:	00000c06 	br	81354 <randomDirection+0xf0>
	}	
	else if (charPosition->collision.south == 0){
		charPosition->orientation = SOUTH;
		charPosition->positionY = charPosition->positionY + step;				
	}	
	else if (charPosition->collision.west == 0){
   81324:	e0bffe17 	ldw	r2,-8(fp)
   81328:	108006c3 	ldbu	r2,27(r2)
   8132c:	10803fcc 	andi	r2,r2,255
   81330:	1000081e 	bne	r2,zero,81354 <randomDirection+0xf0>
		charPosition->orientation = WEST;
   81334:	e0bffe17 	ldw	r2,-8(fp)
   81338:	10000415 	stw	zero,16(r2)
		charPosition->positionX = charPosition->positionX - step;		
   8133c:	e0bffe17 	ldw	r2,-8(fp)
   81340:	10c00117 	ldw	r3,4(r2)
   81344:	e0bfff0b 	ldhu	r2,-4(fp)
   81348:	1887c83a 	sub	r3,r3,r2
   8134c:	e0bffe17 	ldw	r2,-8(fp)
   81350:	10c00115 	stw	r3,4(r2)
	}
}
   81354:	0001883a 	nop
   81358:	e037883a 	mov	sp,fp
   8135c:	df000017 	ldw	fp,0(sp)
   81360:	dec00104 	addi	sp,sp,4
   81364:	f800283a 	ret

00081368 <__divsi3>:
   81368:	20001b16 	blt	r4,zero,813d8 <__divsi3+0x70>
   8136c:	000f883a 	mov	r7,zero
   81370:	28001616 	blt	r5,zero,813cc <__divsi3+0x64>
   81374:	200d883a 	mov	r6,r4
   81378:	29001a2e 	bgeu	r5,r4,813e4 <__divsi3+0x7c>
   8137c:	00800804 	movi	r2,32
   81380:	00c00044 	movi	r3,1
   81384:	00000106 	br	8138c <__divsi3+0x24>
   81388:	10000d26 	beq	r2,zero,813c0 <__divsi3+0x58>
   8138c:	294b883a 	add	r5,r5,r5
   81390:	10bfffc4 	addi	r2,r2,-1
   81394:	18c7883a 	add	r3,r3,r3
   81398:	293ffb36 	bltu	r5,r4,81388 <__alt_data_end+0xfffb5898>
   8139c:	0005883a 	mov	r2,zero
   813a0:	18000726 	beq	r3,zero,813c0 <__divsi3+0x58>
   813a4:	0005883a 	mov	r2,zero
   813a8:	31400236 	bltu	r6,r5,813b4 <__divsi3+0x4c>
   813ac:	314dc83a 	sub	r6,r6,r5
   813b0:	10c4b03a 	or	r2,r2,r3
   813b4:	1806d07a 	srli	r3,r3,1
   813b8:	280ad07a 	srli	r5,r5,1
   813bc:	183ffa1e 	bne	r3,zero,813a8 <__alt_data_end+0xfffb58b8>
   813c0:	38000126 	beq	r7,zero,813c8 <__divsi3+0x60>
   813c4:	0085c83a 	sub	r2,zero,r2
   813c8:	f800283a 	ret
   813cc:	014bc83a 	sub	r5,zero,r5
   813d0:	39c0005c 	xori	r7,r7,1
   813d4:	003fe706 	br	81374 <__alt_data_end+0xfffb5884>
   813d8:	0109c83a 	sub	r4,zero,r4
   813dc:	01c00044 	movi	r7,1
   813e0:	003fe306 	br	81370 <__alt_data_end+0xfffb5880>
   813e4:	00c00044 	movi	r3,1
   813e8:	003fee06 	br	813a4 <__alt_data_end+0xfffb58b4>

000813ec <__modsi3>:
   813ec:	20001716 	blt	r4,zero,8144c <__modsi3+0x60>
   813f0:	000f883a 	mov	r7,zero
   813f4:	2005883a 	mov	r2,r4
   813f8:	28001216 	blt	r5,zero,81444 <__modsi3+0x58>
   813fc:	2900162e 	bgeu	r5,r4,81458 <__modsi3+0x6c>
   81400:	01800804 	movi	r6,32
   81404:	00c00044 	movi	r3,1
   81408:	00000106 	br	81410 <__modsi3+0x24>
   8140c:	30000a26 	beq	r6,zero,81438 <__modsi3+0x4c>
   81410:	294b883a 	add	r5,r5,r5
   81414:	31bfffc4 	addi	r6,r6,-1
   81418:	18c7883a 	add	r3,r3,r3
   8141c:	293ffb36 	bltu	r5,r4,8140c <__alt_data_end+0xfffb591c>
   81420:	18000526 	beq	r3,zero,81438 <__modsi3+0x4c>
   81424:	1806d07a 	srli	r3,r3,1
   81428:	11400136 	bltu	r2,r5,81430 <__modsi3+0x44>
   8142c:	1145c83a 	sub	r2,r2,r5
   81430:	280ad07a 	srli	r5,r5,1
   81434:	183ffb1e 	bne	r3,zero,81424 <__alt_data_end+0xfffb5934>
   81438:	38000126 	beq	r7,zero,81440 <__modsi3+0x54>
   8143c:	0085c83a 	sub	r2,zero,r2
   81440:	f800283a 	ret
   81444:	014bc83a 	sub	r5,zero,r5
   81448:	003fec06 	br	813fc <__alt_data_end+0xfffb590c>
   8144c:	0109c83a 	sub	r4,zero,r4
   81450:	01c00044 	movi	r7,1
   81454:	003fe706 	br	813f4 <__alt_data_end+0xfffb5904>
   81458:	00c00044 	movi	r3,1
   8145c:	003ff106 	br	81424 <__alt_data_end+0xfffb5934>

00081460 <__udivsi3>:
   81460:	200d883a 	mov	r6,r4
   81464:	2900152e 	bgeu	r5,r4,814bc <__udivsi3+0x5c>
   81468:	28001416 	blt	r5,zero,814bc <__udivsi3+0x5c>
   8146c:	00800804 	movi	r2,32
   81470:	00c00044 	movi	r3,1
   81474:	00000206 	br	81480 <__udivsi3+0x20>
   81478:	10000e26 	beq	r2,zero,814b4 <__udivsi3+0x54>
   8147c:	28000516 	blt	r5,zero,81494 <__udivsi3+0x34>
   81480:	294b883a 	add	r5,r5,r5
   81484:	10bfffc4 	addi	r2,r2,-1
   81488:	18c7883a 	add	r3,r3,r3
   8148c:	293ffa36 	bltu	r5,r4,81478 <__alt_data_end+0xfffb5988>
   81490:	18000826 	beq	r3,zero,814b4 <__udivsi3+0x54>
   81494:	0005883a 	mov	r2,zero
   81498:	31400236 	bltu	r6,r5,814a4 <__udivsi3+0x44>
   8149c:	314dc83a 	sub	r6,r6,r5
   814a0:	10c4b03a 	or	r2,r2,r3
   814a4:	1806d07a 	srli	r3,r3,1
   814a8:	280ad07a 	srli	r5,r5,1
   814ac:	183ffa1e 	bne	r3,zero,81498 <__alt_data_end+0xfffb59a8>
   814b0:	f800283a 	ret
   814b4:	0005883a 	mov	r2,zero
   814b8:	f800283a 	ret
   814bc:	00c00044 	movi	r3,1
   814c0:	003ff406 	br	81494 <__alt_data_end+0xfffb59a4>

000814c4 <__umodsi3>:
   814c4:	2005883a 	mov	r2,r4
   814c8:	2900122e 	bgeu	r5,r4,81514 <__umodsi3+0x50>
   814cc:	28001116 	blt	r5,zero,81514 <__umodsi3+0x50>
   814d0:	01800804 	movi	r6,32
   814d4:	00c00044 	movi	r3,1
   814d8:	00000206 	br	814e4 <__umodsi3+0x20>
   814dc:	30000c26 	beq	r6,zero,81510 <__umodsi3+0x4c>
   814e0:	28000516 	blt	r5,zero,814f8 <__umodsi3+0x34>
   814e4:	294b883a 	add	r5,r5,r5
   814e8:	31bfffc4 	addi	r6,r6,-1
   814ec:	18c7883a 	add	r3,r3,r3
   814f0:	293ffa36 	bltu	r5,r4,814dc <__alt_data_end+0xfffb59ec>
   814f4:	18000626 	beq	r3,zero,81510 <__umodsi3+0x4c>
   814f8:	1806d07a 	srli	r3,r3,1
   814fc:	11400136 	bltu	r2,r5,81504 <__umodsi3+0x40>
   81500:	1145c83a 	sub	r2,r2,r5
   81504:	280ad07a 	srli	r5,r5,1
   81508:	183ffb1e 	bne	r3,zero,814f8 <__alt_data_end+0xfffb5a08>
   8150c:	f800283a 	ret
   81510:	f800283a 	ret
   81514:	00c00044 	movi	r3,1
   81518:	003ff706 	br	814f8 <__alt_data_end+0xfffb5a08>

0008151c <_printf_r>:
   8151c:	defffd04 	addi	sp,sp,-12
   81520:	2805883a 	mov	r2,r5
   81524:	dfc00015 	stw	ra,0(sp)
   81528:	d9800115 	stw	r6,4(sp)
   8152c:	d9c00215 	stw	r7,8(sp)
   81530:	21400217 	ldw	r5,8(r4)
   81534:	d9c00104 	addi	r7,sp,4
   81538:	100d883a 	mov	r6,r2
   8153c:	00817c00 	call	817c0 <___vfprintf_internal_r>
   81540:	dfc00017 	ldw	ra,0(sp)
   81544:	dec00304 	addi	sp,sp,12
   81548:	f800283a 	ret

0008154c <printf>:
   8154c:	defffc04 	addi	sp,sp,-16
   81550:	dfc00015 	stw	ra,0(sp)
   81554:	d9400115 	stw	r5,4(sp)
   81558:	d9800215 	stw	r6,8(sp)
   8155c:	d9c00315 	stw	r7,12(sp)
   81560:	00800274 	movhi	r2,9
   81564:	108a3a04 	addi	r2,r2,10472
   81568:	10800017 	ldw	r2,0(r2)
   8156c:	200b883a 	mov	r5,r4
   81570:	d9800104 	addi	r6,sp,4
   81574:	11000217 	ldw	r4,8(r2)
   81578:	00839b80 	call	839b8 <__vfprintf_internal>
   8157c:	dfc00017 	ldw	ra,0(sp)
   81580:	dec00404 	addi	sp,sp,16
   81584:	f800283a 	ret

00081588 <_puts_r>:
   81588:	defff604 	addi	sp,sp,-40
   8158c:	dc000715 	stw	r16,28(sp)
   81590:	2021883a 	mov	r16,r4
   81594:	2809883a 	mov	r4,r5
   81598:	dc400815 	stw	r17,32(sp)
   8159c:	dfc00915 	stw	ra,36(sp)
   815a0:	2823883a 	mov	r17,r5
   815a4:	00816d80 	call	816d8 <strlen>
   815a8:	10c00044 	addi	r3,r2,1
   815ac:	d8800115 	stw	r2,4(sp)
   815b0:	00800274 	movhi	r2,9
   815b4:	1082a304 	addi	r2,r2,2700
   815b8:	d8800215 	stw	r2,8(sp)
   815bc:	00800044 	movi	r2,1
   815c0:	d8800315 	stw	r2,12(sp)
   815c4:	00800084 	movi	r2,2
   815c8:	dc400015 	stw	r17,0(sp)
   815cc:	d8c00615 	stw	r3,24(sp)
   815d0:	dec00415 	stw	sp,16(sp)
   815d4:	d8800515 	stw	r2,20(sp)
   815d8:	80000226 	beq	r16,zero,815e4 <_puts_r+0x5c>
   815dc:	80800e17 	ldw	r2,56(r16)
   815e0:	10001426 	beq	r2,zero,81634 <_puts_r+0xac>
   815e4:	81400217 	ldw	r5,8(r16)
   815e8:	2880030b 	ldhu	r2,12(r5)
   815ec:	10c8000c 	andi	r3,r2,8192
   815f0:	1800061e 	bne	r3,zero,8160c <_puts_r+0x84>
   815f4:	29001917 	ldw	r4,100(r5)
   815f8:	00f7ffc4 	movi	r3,-8193
   815fc:	10880014 	ori	r2,r2,8192
   81600:	20c6703a 	and	r3,r4,r3
   81604:	2880030d 	sth	r2,12(r5)
   81608:	28c01915 	stw	r3,100(r5)
   8160c:	d9800404 	addi	r6,sp,16
   81610:	8009883a 	mov	r4,r16
   81614:	0085ee80 	call	85ee8 <__sfvwrite_r>
   81618:	1000091e 	bne	r2,zero,81640 <_puts_r+0xb8>
   8161c:	00800284 	movi	r2,10
   81620:	dfc00917 	ldw	ra,36(sp)
   81624:	dc400817 	ldw	r17,32(sp)
   81628:	dc000717 	ldw	r16,28(sp)
   8162c:	dec00a04 	addi	sp,sp,40
   81630:	f800283a 	ret
   81634:	8009883a 	mov	r4,r16
   81638:	0085a640 	call	85a64 <__sinit>
   8163c:	003fe906 	br	815e4 <__alt_data_end+0xfffb5af4>
   81640:	00bfffc4 	movi	r2,-1
   81644:	003ff606 	br	81620 <__alt_data_end+0xfffb5b30>

00081648 <puts>:
   81648:	00800274 	movhi	r2,9
   8164c:	108a3a04 	addi	r2,r2,10472
   81650:	200b883a 	mov	r5,r4
   81654:	11000017 	ldw	r4,0(r2)
   81658:	00815881 	jmpi	81588 <_puts_r>

0008165c <srand>:
   8165c:	00800274 	movhi	r2,9
   81660:	108a3a04 	addi	r2,r2,10472
   81664:	10800017 	ldw	r2,0(r2)
   81668:	11002915 	stw	r4,164(r2)
   8166c:	10002a15 	stw	zero,168(r2)
   81670:	f800283a 	ret

00081674 <rand>:
   81674:	00800274 	movhi	r2,9
   81678:	defffe04 	addi	sp,sp,-8
   8167c:	108a3a04 	addi	r2,r2,10472
   81680:	dc000015 	stw	r16,0(sp)
   81684:	14000017 	ldw	r16,0(r2)
   81688:	dfc00115 	stw	ra,4(sp)
   8168c:	01932574 	movhi	r6,19605
   81690:	81002917 	ldw	r4,164(r16)
   81694:	81402a17 	ldw	r5,168(r16)
   81698:	01d614b4 	movhi	r7,22610
   8169c:	319fcb44 	addi	r6,r6,32557
   816a0:	39fd0b44 	addi	r7,r7,-3027
   816a4:	008ac980 	call	8ac98 <__muldi3>
   816a8:	11000044 	addi	r4,r2,1
   816ac:	2085803a 	cmpltu	r2,r4,r2
   816b0:	10c7883a 	add	r3,r2,r3
   816b4:	00a00034 	movhi	r2,32768
   816b8:	10bfffc4 	addi	r2,r2,-1
   816bc:	1884703a 	and	r2,r3,r2
   816c0:	81002915 	stw	r4,164(r16)
   816c4:	80c02a15 	stw	r3,168(r16)
   816c8:	dfc00117 	ldw	ra,4(sp)
   816cc:	dc000017 	ldw	r16,0(sp)
   816d0:	dec00204 	addi	sp,sp,8
   816d4:	f800283a 	ret

000816d8 <strlen>:
   816d8:	208000cc 	andi	r2,r4,3
   816dc:	10002026 	beq	r2,zero,81760 <strlen+0x88>
   816e0:	20800007 	ldb	r2,0(r4)
   816e4:	10002026 	beq	r2,zero,81768 <strlen+0x90>
   816e8:	2005883a 	mov	r2,r4
   816ec:	00000206 	br	816f8 <strlen+0x20>
   816f0:	10c00007 	ldb	r3,0(r2)
   816f4:	18001826 	beq	r3,zero,81758 <strlen+0x80>
   816f8:	10800044 	addi	r2,r2,1
   816fc:	10c000cc 	andi	r3,r2,3
   81700:	183ffb1e 	bne	r3,zero,816f0 <__alt_data_end+0xfffb5c00>
   81704:	10c00017 	ldw	r3,0(r2)
   81708:	01ffbff4 	movhi	r7,65279
   8170c:	39ffbfc4 	addi	r7,r7,-257
   81710:	00ca303a 	nor	r5,zero,r3
   81714:	01a02074 	movhi	r6,32897
   81718:	19c7883a 	add	r3,r3,r7
   8171c:	31a02004 	addi	r6,r6,-32640
   81720:	1946703a 	and	r3,r3,r5
   81724:	1986703a 	and	r3,r3,r6
   81728:	1800091e 	bne	r3,zero,81750 <strlen+0x78>
   8172c:	10800104 	addi	r2,r2,4
   81730:	10c00017 	ldw	r3,0(r2)
   81734:	19cb883a 	add	r5,r3,r7
   81738:	00c6303a 	nor	r3,zero,r3
   8173c:	28c6703a 	and	r3,r5,r3
   81740:	1986703a 	and	r3,r3,r6
   81744:	183ff926 	beq	r3,zero,8172c <__alt_data_end+0xfffb5c3c>
   81748:	00000106 	br	81750 <strlen+0x78>
   8174c:	10800044 	addi	r2,r2,1
   81750:	10c00007 	ldb	r3,0(r2)
   81754:	183ffd1e 	bne	r3,zero,8174c <__alt_data_end+0xfffb5c5c>
   81758:	1105c83a 	sub	r2,r2,r4
   8175c:	f800283a 	ret
   81760:	2005883a 	mov	r2,r4
   81764:	003fe706 	br	81704 <__alt_data_end+0xfffb5c14>
   81768:	0005883a 	mov	r2,zero
   8176c:	f800283a 	ret

00081770 <time>:
   81770:	00800274 	movhi	r2,9
   81774:	defffc04 	addi	sp,sp,-16
   81778:	108a3a04 	addi	r2,r2,10472
   8177c:	dc000215 	stw	r16,8(sp)
   81780:	2021883a 	mov	r16,r4
   81784:	11000017 	ldw	r4,0(r2)
   81788:	000d883a 	mov	r6,zero
   8178c:	d80b883a 	mov	r5,sp
   81790:	dfc00315 	stw	ra,12(sp)
   81794:	008652c0 	call	8652c <_gettimeofday_r>
   81798:	10000716 	blt	r2,zero,817b8 <time+0x48>
   8179c:	d8800017 	ldw	r2,0(sp)
   817a0:	80000126 	beq	r16,zero,817a8 <time+0x38>
   817a4:	80800015 	stw	r2,0(r16)
   817a8:	dfc00317 	ldw	ra,12(sp)
   817ac:	dc000217 	ldw	r16,8(sp)
   817b0:	dec00404 	addi	sp,sp,16
   817b4:	f800283a 	ret
   817b8:	00bfffc4 	movi	r2,-1
   817bc:	003ffa06 	br	817a8 <__alt_data_end+0xfffb5cb8>

000817c0 <___vfprintf_internal_r>:
   817c0:	deffb804 	addi	sp,sp,-288
   817c4:	dfc04715 	stw	ra,284(sp)
   817c8:	ddc04515 	stw	r23,276(sp)
   817cc:	dd404315 	stw	r21,268(sp)
   817d0:	d9002c15 	stw	r4,176(sp)
   817d4:	282f883a 	mov	r23,r5
   817d8:	302b883a 	mov	r21,r6
   817dc:	d9c02d15 	stw	r7,180(sp)
   817e0:	df004615 	stw	fp,280(sp)
   817e4:	dd804415 	stw	r22,272(sp)
   817e8:	dd004215 	stw	r20,264(sp)
   817ec:	dcc04115 	stw	r19,260(sp)
   817f0:	dc804015 	stw	r18,256(sp)
   817f4:	dc403f15 	stw	r17,252(sp)
   817f8:	dc003e15 	stw	r16,248(sp)
   817fc:	00866340 	call	86634 <_localeconv_r>
   81800:	10800017 	ldw	r2,0(r2)
   81804:	1009883a 	mov	r4,r2
   81808:	d8803415 	stw	r2,208(sp)
   8180c:	00816d80 	call	816d8 <strlen>
   81810:	d8803715 	stw	r2,220(sp)
   81814:	d8802c17 	ldw	r2,176(sp)
   81818:	10000226 	beq	r2,zero,81824 <___vfprintf_internal_r+0x64>
   8181c:	10800e17 	ldw	r2,56(r2)
   81820:	1000f926 	beq	r2,zero,81c08 <___vfprintf_internal_r+0x448>
   81824:	b880030b 	ldhu	r2,12(r23)
   81828:	10c8000c 	andi	r3,r2,8192
   8182c:	1800061e 	bne	r3,zero,81848 <___vfprintf_internal_r+0x88>
   81830:	b9001917 	ldw	r4,100(r23)
   81834:	00f7ffc4 	movi	r3,-8193
   81838:	10880014 	ori	r2,r2,8192
   8183c:	20c6703a 	and	r3,r4,r3
   81840:	b880030d 	sth	r2,12(r23)
   81844:	b8c01915 	stw	r3,100(r23)
   81848:	10c0020c 	andi	r3,r2,8
   8184c:	1800c126 	beq	r3,zero,81b54 <___vfprintf_internal_r+0x394>
   81850:	b8c00417 	ldw	r3,16(r23)
   81854:	1800bf26 	beq	r3,zero,81b54 <___vfprintf_internal_r+0x394>
   81858:	1080068c 	andi	r2,r2,26
   8185c:	00c00284 	movi	r3,10
   81860:	10c0c426 	beq	r2,r3,81b74 <___vfprintf_internal_r+0x3b4>
   81864:	d8c00404 	addi	r3,sp,16
   81868:	05000274 	movhi	r20,9
   8186c:	d9001e04 	addi	r4,sp,120
   81870:	a502b484 	addi	r20,r20,2770
   81874:	d8c01e15 	stw	r3,120(sp)
   81878:	d8002015 	stw	zero,128(sp)
   8187c:	d8001f15 	stw	zero,124(sp)
   81880:	d8003315 	stw	zero,204(sp)
   81884:	d8003615 	stw	zero,216(sp)
   81888:	d8003815 	stw	zero,224(sp)
   8188c:	1811883a 	mov	r8,r3
   81890:	d8003915 	stw	zero,228(sp)
   81894:	d8003a15 	stw	zero,232(sp)
   81898:	d8002f15 	stw	zero,188(sp)
   8189c:	d9002815 	stw	r4,160(sp)
   818a0:	a8800007 	ldb	r2,0(r21)
   818a4:	10027b26 	beq	r2,zero,82294 <___vfprintf_internal_r+0xad4>
   818a8:	00c00944 	movi	r3,37
   818ac:	a821883a 	mov	r16,r21
   818b0:	10c0021e 	bne	r2,r3,818bc <___vfprintf_internal_r+0xfc>
   818b4:	00001406 	br	81908 <___vfprintf_internal_r+0x148>
   818b8:	10c00326 	beq	r2,r3,818c8 <___vfprintf_internal_r+0x108>
   818bc:	84000044 	addi	r16,r16,1
   818c0:	80800007 	ldb	r2,0(r16)
   818c4:	103ffc1e 	bne	r2,zero,818b8 <__alt_data_end+0xfffb5dc8>
   818c8:	8563c83a 	sub	r17,r16,r21
   818cc:	88000e26 	beq	r17,zero,81908 <___vfprintf_internal_r+0x148>
   818d0:	d8c02017 	ldw	r3,128(sp)
   818d4:	d8801f17 	ldw	r2,124(sp)
   818d8:	45400015 	stw	r21,0(r8)
   818dc:	1c47883a 	add	r3,r3,r17
   818e0:	10800044 	addi	r2,r2,1
   818e4:	d8c02015 	stw	r3,128(sp)
   818e8:	44400115 	stw	r17,4(r8)
   818ec:	d8801f15 	stw	r2,124(sp)
   818f0:	00c001c4 	movi	r3,7
   818f4:	1880a716 	blt	r3,r2,81b94 <___vfprintf_internal_r+0x3d4>
   818f8:	42000204 	addi	r8,r8,8
   818fc:	d9402f17 	ldw	r5,188(sp)
   81900:	2c4b883a 	add	r5,r5,r17
   81904:	d9402f15 	stw	r5,188(sp)
   81908:	80800007 	ldb	r2,0(r16)
   8190c:	1000a826 	beq	r2,zero,81bb0 <___vfprintf_internal_r+0x3f0>
   81910:	84400047 	ldb	r17,1(r16)
   81914:	00bfffc4 	movi	r2,-1
   81918:	85400044 	addi	r21,r16,1
   8191c:	d8002785 	stb	zero,158(sp)
   81920:	0007883a 	mov	r3,zero
   81924:	000f883a 	mov	r7,zero
   81928:	d8802915 	stw	r2,164(sp)
   8192c:	d8003115 	stw	zero,196(sp)
   81930:	0025883a 	mov	r18,zero
   81934:	01401604 	movi	r5,88
   81938:	01800244 	movi	r6,9
   8193c:	02800a84 	movi	r10,42
   81940:	02401b04 	movi	r9,108
   81944:	ad400044 	addi	r21,r21,1
   81948:	88bff804 	addi	r2,r17,-32
   8194c:	28830436 	bltu	r5,r2,82560 <___vfprintf_internal_r+0xda0>
   81950:	100490ba 	slli	r2,r2,2
   81954:	01000234 	movhi	r4,8
   81958:	21065a04 	addi	r4,r4,6504
   8195c:	1105883a 	add	r2,r2,r4
   81960:	10800017 	ldw	r2,0(r2)
   81964:	1000683a 	jmp	r2
   81968:	00082480 	call	8248 <__reset-0x77db8>
   8196c:	00082560 	cmpeqi	zero,zero,8341
   81970:	00082560 	cmpeqi	zero,zero,8341
   81974:	000824a0 	cmpeqi	zero,zero,8338
   81978:	00082560 	cmpeqi	zero,zero,8341
   8197c:	00082560 	cmpeqi	zero,zero,8341
   81980:	00082560 	cmpeqi	zero,zero,8341
   81984:	00082560 	cmpeqi	zero,zero,8341
   81988:	00082560 	cmpeqi	zero,zero,8341
   8198c:	00082560 	cmpeqi	zero,zero,8341
   81990:	00081c14 	movui	zero,8304
   81994:	000823bc 	xorhi	zero,zero,8334
   81998:	00082560 	cmpeqi	zero,zero,8341
   8199c:	00081adc 	xori	zero,zero,8299
   819a0:	00081c3c 	xorhi	zero,zero,8304
   819a4:	00082560 	cmpeqi	zero,zero,8341
   819a8:	00081c7c 	xorhi	zero,zero,8305
   819ac:	00081c88 	cmpgei	zero,zero,8306
   819b0:	00081c88 	cmpgei	zero,zero,8306
   819b4:	00081c88 	cmpgei	zero,zero,8306
   819b8:	00081c88 	cmpgei	zero,zero,8306
   819bc:	00081c88 	cmpgei	zero,zero,8306
   819c0:	00081c88 	cmpgei	zero,zero,8306
   819c4:	00081c88 	cmpgei	zero,zero,8306
   819c8:	00081c88 	cmpgei	zero,zero,8306
   819cc:	00081c88 	cmpgei	zero,zero,8306
   819d0:	00082560 	cmpeqi	zero,zero,8341
   819d4:	00082560 	cmpeqi	zero,zero,8341
   819d8:	00082560 	cmpeqi	zero,zero,8341
   819dc:	00082560 	cmpeqi	zero,zero,8341
   819e0:	00082560 	cmpeqi	zero,zero,8341
   819e4:	00082560 	cmpeqi	zero,zero,8341
   819e8:	00082560 	cmpeqi	zero,zero,8341
   819ec:	00082560 	cmpeqi	zero,zero,8341
   819f0:	00082560 	cmpeqi	zero,zero,8341
   819f4:	00082560 	cmpeqi	zero,zero,8341
   819f8:	00081cbc 	xorhi	zero,zero,8306
   819fc:	00081d78 	rdprs	zero,zero,8309
   81a00:	00082560 	cmpeqi	zero,zero,8341
   81a04:	00081d78 	rdprs	zero,zero,8309
   81a08:	00082560 	cmpeqi	zero,zero,8341
   81a0c:	00082560 	cmpeqi	zero,zero,8341
   81a10:	00082560 	cmpeqi	zero,zero,8341
   81a14:	00082560 	cmpeqi	zero,zero,8341
   81a18:	00081e18 	cmpnei	zero,zero,8312
   81a1c:	00082560 	cmpeqi	zero,zero,8341
   81a20:	00082560 	cmpeqi	zero,zero,8341
   81a24:	00081e24 	muli	zero,zero,8312
   81a28:	00082560 	cmpeqi	zero,zero,8341
   81a2c:	00082560 	cmpeqi	zero,zero,8341
   81a30:	00082560 	cmpeqi	zero,zero,8341
   81a34:	00082560 	cmpeqi	zero,zero,8341
   81a38:	00082560 	cmpeqi	zero,zero,8341
   81a3c:	0008229c 	xori	zero,zero,8330
   81a40:	00082560 	cmpeqi	zero,zero,8341
   81a44:	00082560 	cmpeqi	zero,zero,8341
   81a48:	000822fc 	xorhi	zero,zero,8331
   81a4c:	00082560 	cmpeqi	zero,zero,8341
   81a50:	00082560 	cmpeqi	zero,zero,8341
   81a54:	00082560 	cmpeqi	zero,zero,8341
   81a58:	00082560 	cmpeqi	zero,zero,8341
   81a5c:	00082560 	cmpeqi	zero,zero,8341
   81a60:	00082560 	cmpeqi	zero,zero,8341
   81a64:	00082560 	cmpeqi	zero,zero,8341
   81a68:	00082560 	cmpeqi	zero,zero,8341
   81a6c:	00082560 	cmpeqi	zero,zero,8341
   81a70:	00082560 	cmpeqi	zero,zero,8341
   81a74:	0008250c 	andi	zero,zero,8340
   81a78:	000824ac 	andhi	zero,zero,8338
   81a7c:	00081d78 	rdprs	zero,zero,8309
   81a80:	00081d78 	rdprs	zero,zero,8309
   81a84:	00081d78 	rdprs	zero,zero,8309
   81a88:	000824bc 	xorhi	zero,zero,8338
   81a8c:	000824ac 	andhi	zero,zero,8338
   81a90:	00082560 	cmpeqi	zero,zero,8341
   81a94:	00082560 	cmpeqi	zero,zero,8341
   81a98:	000824c8 	cmpgei	zero,zero,8339
   81a9c:	00082560 	cmpeqi	zero,zero,8341
   81aa0:	000824d8 	cmpnei	zero,zero,8339
   81aa4:	000823ac 	andhi	zero,zero,8334
   81aa8:	00081ae8 	cmpgeui	zero,zero,8299
   81aac:	000823cc 	andi	zero,zero,8335
   81ab0:	00082560 	cmpeqi	zero,zero,8341
   81ab4:	000823d8 	cmpnei	zero,zero,8335
   81ab8:	00082560 	cmpeqi	zero,zero,8341
   81abc:	00082434 	movhi	zero,8336
   81ac0:	00082560 	cmpeqi	zero,zero,8341
   81ac4:	00082560 	cmpeqi	zero,zero,8341
   81ac8:	00082444 	movi	zero,8337
   81acc:	d9003117 	ldw	r4,196(sp)
   81ad0:	d8802d15 	stw	r2,180(sp)
   81ad4:	0109c83a 	sub	r4,zero,r4
   81ad8:	d9003115 	stw	r4,196(sp)
   81adc:	94800114 	ori	r18,r18,4
   81ae0:	ac400007 	ldb	r17,0(r21)
   81ae4:	003f9706 	br	81944 <__alt_data_end+0xfffb5e54>
   81ae8:	00800c04 	movi	r2,48
   81aec:	d9002d17 	ldw	r4,180(sp)
   81af0:	d9402917 	ldw	r5,164(sp)
   81af4:	d8802705 	stb	r2,156(sp)
   81af8:	00801e04 	movi	r2,120
   81afc:	d8802745 	stb	r2,157(sp)
   81b00:	d8002785 	stb	zero,158(sp)
   81b04:	20c00104 	addi	r3,r4,4
   81b08:	24c00017 	ldw	r19,0(r4)
   81b0c:	002d883a 	mov	r22,zero
   81b10:	90800094 	ori	r2,r18,2
   81b14:	28029a16 	blt	r5,zero,82580 <___vfprintf_internal_r+0xdc0>
   81b18:	00bfdfc4 	movi	r2,-129
   81b1c:	90a4703a 	and	r18,r18,r2
   81b20:	d8c02d15 	stw	r3,180(sp)
   81b24:	94800094 	ori	r18,r18,2
   81b28:	9802871e 	bne	r19,zero,82548 <___vfprintf_internal_r+0xd88>
   81b2c:	00800274 	movhi	r2,9
   81b30:	1082ad04 	addi	r2,r2,2740
   81b34:	d8803915 	stw	r2,228(sp)
   81b38:	04401e04 	movi	r17,120
   81b3c:	d8802917 	ldw	r2,164(sp)
   81b40:	0039883a 	mov	fp,zero
   81b44:	1001e926 	beq	r2,zero,822ec <___vfprintf_internal_r+0xb2c>
   81b48:	0027883a 	mov	r19,zero
   81b4c:	002d883a 	mov	r22,zero
   81b50:	00020506 	br	82368 <___vfprintf_internal_r+0xba8>
   81b54:	d9002c17 	ldw	r4,176(sp)
   81b58:	b80b883a 	mov	r5,r23
   81b5c:	0083a900 	call	83a90 <__swsetup_r>
   81b60:	1005ac1e 	bne	r2,zero,83214 <___vfprintf_internal_r+0x1a54>
   81b64:	b880030b 	ldhu	r2,12(r23)
   81b68:	00c00284 	movi	r3,10
   81b6c:	1080068c 	andi	r2,r2,26
   81b70:	10ff3c1e 	bne	r2,r3,81864 <__alt_data_end+0xfffb5d74>
   81b74:	b880038f 	ldh	r2,14(r23)
   81b78:	103f3a16 	blt	r2,zero,81864 <__alt_data_end+0xfffb5d74>
   81b7c:	d9c02d17 	ldw	r7,180(sp)
   81b80:	d9002c17 	ldw	r4,176(sp)
   81b84:	a80d883a 	mov	r6,r21
   81b88:	b80b883a 	mov	r5,r23
   81b8c:	00839d40 	call	839d4 <__sbprintf>
   81b90:	00001106 	br	81bd8 <___vfprintf_internal_r+0x418>
   81b94:	d9002c17 	ldw	r4,176(sp)
   81b98:	d9801e04 	addi	r6,sp,120
   81b9c:	b80b883a 	mov	r5,r23
   81ba0:	0088e180 	call	88e18 <__sprint_r>
   81ba4:	1000081e 	bne	r2,zero,81bc8 <___vfprintf_internal_r+0x408>
   81ba8:	da000404 	addi	r8,sp,16
   81bac:	003f5306 	br	818fc <__alt_data_end+0xfffb5e0c>
   81bb0:	d8802017 	ldw	r2,128(sp)
   81bb4:	10000426 	beq	r2,zero,81bc8 <___vfprintf_internal_r+0x408>
   81bb8:	d9002c17 	ldw	r4,176(sp)
   81bbc:	d9801e04 	addi	r6,sp,120
   81bc0:	b80b883a 	mov	r5,r23
   81bc4:	0088e180 	call	88e18 <__sprint_r>
   81bc8:	b880030b 	ldhu	r2,12(r23)
   81bcc:	1080100c 	andi	r2,r2,64
   81bd0:	1005901e 	bne	r2,zero,83214 <___vfprintf_internal_r+0x1a54>
   81bd4:	d8802f17 	ldw	r2,188(sp)
   81bd8:	dfc04717 	ldw	ra,284(sp)
   81bdc:	df004617 	ldw	fp,280(sp)
   81be0:	ddc04517 	ldw	r23,276(sp)
   81be4:	dd804417 	ldw	r22,272(sp)
   81be8:	dd404317 	ldw	r21,268(sp)
   81bec:	dd004217 	ldw	r20,264(sp)
   81bf0:	dcc04117 	ldw	r19,260(sp)
   81bf4:	dc804017 	ldw	r18,256(sp)
   81bf8:	dc403f17 	ldw	r17,252(sp)
   81bfc:	dc003e17 	ldw	r16,248(sp)
   81c00:	dec04804 	addi	sp,sp,288
   81c04:	f800283a 	ret
   81c08:	d9002c17 	ldw	r4,176(sp)
   81c0c:	0085a640 	call	85a64 <__sinit>
   81c10:	003f0406 	br	81824 <__alt_data_end+0xfffb5d34>
   81c14:	d8802d17 	ldw	r2,180(sp)
   81c18:	d9002d17 	ldw	r4,180(sp)
   81c1c:	10800017 	ldw	r2,0(r2)
   81c20:	d8803115 	stw	r2,196(sp)
   81c24:	20800104 	addi	r2,r4,4
   81c28:	d9003117 	ldw	r4,196(sp)
   81c2c:	203fa716 	blt	r4,zero,81acc <__alt_data_end+0xfffb5fdc>
   81c30:	d8802d15 	stw	r2,180(sp)
   81c34:	ac400007 	ldb	r17,0(r21)
   81c38:	003f4206 	br	81944 <__alt_data_end+0xfffb5e54>
   81c3c:	ac400007 	ldb	r17,0(r21)
   81c40:	aac00044 	addi	r11,r21,1
   81c44:	8a872826 	beq	r17,r10,838e8 <___vfprintf_internal_r+0x2128>
   81c48:	88bff404 	addi	r2,r17,-48
   81c4c:	0009883a 	mov	r4,zero
   81c50:	30867d36 	bltu	r6,r2,83648 <___vfprintf_internal_r+0x1e88>
   81c54:	5c400007 	ldb	r17,0(r11)
   81c58:	210002a4 	muli	r4,r4,10
   81c5c:	5d400044 	addi	r21,r11,1
   81c60:	a817883a 	mov	r11,r21
   81c64:	2089883a 	add	r4,r4,r2
   81c68:	88bff404 	addi	r2,r17,-48
   81c6c:	30bff92e 	bgeu	r6,r2,81c54 <__alt_data_end+0xfffb6164>
   81c70:	2005c916 	blt	r4,zero,83398 <___vfprintf_internal_r+0x1bd8>
   81c74:	d9002915 	stw	r4,164(sp)
   81c78:	003f3306 	br	81948 <__alt_data_end+0xfffb5e58>
   81c7c:	94802014 	ori	r18,r18,128
   81c80:	ac400007 	ldb	r17,0(r21)
   81c84:	003f2f06 	br	81944 <__alt_data_end+0xfffb5e54>
   81c88:	a809883a 	mov	r4,r21
   81c8c:	d8003115 	stw	zero,196(sp)
   81c90:	88bff404 	addi	r2,r17,-48
   81c94:	0017883a 	mov	r11,zero
   81c98:	24400007 	ldb	r17,0(r4)
   81c9c:	5ac002a4 	muli	r11,r11,10
   81ca0:	ad400044 	addi	r21,r21,1
   81ca4:	a809883a 	mov	r4,r21
   81ca8:	12d7883a 	add	r11,r2,r11
   81cac:	88bff404 	addi	r2,r17,-48
   81cb0:	30bff92e 	bgeu	r6,r2,81c98 <__alt_data_end+0xfffb61a8>
   81cb4:	dac03115 	stw	r11,196(sp)
   81cb8:	003f2306 	br	81948 <__alt_data_end+0xfffb5e58>
   81cbc:	18c03fcc 	andi	r3,r3,255
   81cc0:	18072b1e 	bne	r3,zero,83970 <___vfprintf_internal_r+0x21b0>
   81cc4:	94800414 	ori	r18,r18,16
   81cc8:	9080080c 	andi	r2,r18,32
   81ccc:	10037b26 	beq	r2,zero,82abc <___vfprintf_internal_r+0x12fc>
   81cd0:	d9402d17 	ldw	r5,180(sp)
   81cd4:	28800117 	ldw	r2,4(r5)
   81cd8:	2cc00017 	ldw	r19,0(r5)
   81cdc:	29400204 	addi	r5,r5,8
   81ce0:	d9402d15 	stw	r5,180(sp)
   81ce4:	102d883a 	mov	r22,r2
   81ce8:	10044b16 	blt	r2,zero,82e18 <___vfprintf_internal_r+0x1658>
   81cec:	d9402917 	ldw	r5,164(sp)
   81cf0:	df002783 	ldbu	fp,158(sp)
   81cf4:	2803bc16 	blt	r5,zero,82be8 <___vfprintf_internal_r+0x1428>
   81cf8:	00ffdfc4 	movi	r3,-129
   81cfc:	9d84b03a 	or	r2,r19,r22
   81d00:	90e4703a 	and	r18,r18,r3
   81d04:	10017726 	beq	r2,zero,822e4 <___vfprintf_internal_r+0xb24>
   81d08:	b0038326 	beq	r22,zero,82b18 <___vfprintf_internal_r+0x1358>
   81d0c:	dc402a15 	stw	r17,168(sp)
   81d10:	dc001e04 	addi	r16,sp,120
   81d14:	b023883a 	mov	r17,r22
   81d18:	402d883a 	mov	r22,r8
   81d1c:	9809883a 	mov	r4,r19
   81d20:	880b883a 	mov	r5,r17
   81d24:	01800284 	movi	r6,10
   81d28:	000f883a 	mov	r7,zero
   81d2c:	008b2700 	call	8b270 <__umoddi3>
   81d30:	10800c04 	addi	r2,r2,48
   81d34:	843fffc4 	addi	r16,r16,-1
   81d38:	9809883a 	mov	r4,r19
   81d3c:	880b883a 	mov	r5,r17
   81d40:	80800005 	stb	r2,0(r16)
   81d44:	01800284 	movi	r6,10
   81d48:	000f883a 	mov	r7,zero
   81d4c:	008acf80 	call	8acf8 <__udivdi3>
   81d50:	1027883a 	mov	r19,r2
   81d54:	10c4b03a 	or	r2,r2,r3
   81d58:	1823883a 	mov	r17,r3
   81d5c:	103fef1e 	bne	r2,zero,81d1c <__alt_data_end+0xfffb622c>
   81d60:	d8c02817 	ldw	r3,160(sp)
   81d64:	dc402a17 	ldw	r17,168(sp)
   81d68:	b011883a 	mov	r8,r22
   81d6c:	1c07c83a 	sub	r3,r3,r16
   81d70:	d8c02e15 	stw	r3,184(sp)
   81d74:	00005906 	br	81edc <___vfprintf_internal_r+0x71c>
   81d78:	18c03fcc 	andi	r3,r3,255
   81d7c:	1806fa1e 	bne	r3,zero,83968 <___vfprintf_internal_r+0x21a8>
   81d80:	9080020c 	andi	r2,r18,8
   81d84:	10048a26 	beq	r2,zero,82fb0 <___vfprintf_internal_r+0x17f0>
   81d88:	d8c02d17 	ldw	r3,180(sp)
   81d8c:	d9002d17 	ldw	r4,180(sp)
   81d90:	d9402d17 	ldw	r5,180(sp)
   81d94:	18c00017 	ldw	r3,0(r3)
   81d98:	21000117 	ldw	r4,4(r4)
   81d9c:	29400204 	addi	r5,r5,8
   81da0:	d8c03615 	stw	r3,216(sp)
   81da4:	d9003815 	stw	r4,224(sp)
   81da8:	d9402d15 	stw	r5,180(sp)
   81dac:	d9003617 	ldw	r4,216(sp)
   81db0:	d9403817 	ldw	r5,224(sp)
   81db4:	da003d15 	stw	r8,244(sp)
   81db8:	04000044 	movi	r16,1
   81dbc:	0088a3c0 	call	88a3c <__fpclassifyd>
   81dc0:	da003d17 	ldw	r8,244(sp)
   81dc4:	14041f1e 	bne	r2,r16,82e44 <___vfprintf_internal_r+0x1684>
   81dc8:	d9003617 	ldw	r4,216(sp)
   81dcc:	d9403817 	ldw	r5,224(sp)
   81dd0:	000d883a 	mov	r6,zero
   81dd4:	000f883a 	mov	r7,zero
   81dd8:	008caa00 	call	8caa0 <__ledf2>
   81ddc:	da003d17 	ldw	r8,244(sp)
   81de0:	1005be16 	blt	r2,zero,834dc <___vfprintf_internal_r+0x1d1c>
   81de4:	df002783 	ldbu	fp,158(sp)
   81de8:	008011c4 	movi	r2,71
   81dec:	1445330e 	bge	r2,r17,832bc <___vfprintf_internal_r+0x1afc>
   81df0:	04000274 	movhi	r16,9
   81df4:	8402a504 	addi	r16,r16,2708
   81df8:	00c000c4 	movi	r3,3
   81dfc:	00bfdfc4 	movi	r2,-129
   81e00:	d8c02a15 	stw	r3,168(sp)
   81e04:	90a4703a 	and	r18,r18,r2
   81e08:	d8c02e15 	stw	r3,184(sp)
   81e0c:	d8002915 	stw	zero,164(sp)
   81e10:	d8003215 	stw	zero,200(sp)
   81e14:	00003706 	br	81ef4 <___vfprintf_internal_r+0x734>
   81e18:	94800214 	ori	r18,r18,8
   81e1c:	ac400007 	ldb	r17,0(r21)
   81e20:	003ec806 	br	81944 <__alt_data_end+0xfffb5e54>
   81e24:	18c03fcc 	andi	r3,r3,255
   81e28:	1806db1e 	bne	r3,zero,83998 <___vfprintf_internal_r+0x21d8>
   81e2c:	94800414 	ori	r18,r18,16
   81e30:	9080080c 	andi	r2,r18,32
   81e34:	1002d826 	beq	r2,zero,82998 <___vfprintf_internal_r+0x11d8>
   81e38:	d9402d17 	ldw	r5,180(sp)
   81e3c:	d8c02917 	ldw	r3,164(sp)
   81e40:	d8002785 	stb	zero,158(sp)
   81e44:	28800204 	addi	r2,r5,8
   81e48:	2cc00017 	ldw	r19,0(r5)
   81e4c:	2d800117 	ldw	r22,4(r5)
   81e50:	18048f16 	blt	r3,zero,83090 <___vfprintf_internal_r+0x18d0>
   81e54:	013fdfc4 	movi	r4,-129
   81e58:	9d86b03a 	or	r3,r19,r22
   81e5c:	d8802d15 	stw	r2,180(sp)
   81e60:	9124703a 	and	r18,r18,r4
   81e64:	1802d91e 	bne	r3,zero,829cc <___vfprintf_internal_r+0x120c>
   81e68:	d8c02917 	ldw	r3,164(sp)
   81e6c:	0039883a 	mov	fp,zero
   81e70:	1805c326 	beq	r3,zero,83580 <___vfprintf_internal_r+0x1dc0>
   81e74:	0027883a 	mov	r19,zero
   81e78:	002d883a 	mov	r22,zero
   81e7c:	dc001e04 	addi	r16,sp,120
   81e80:	9806d0fa 	srli	r3,r19,3
   81e84:	b008977a 	slli	r4,r22,29
   81e88:	b02cd0fa 	srli	r22,r22,3
   81e8c:	9cc001cc 	andi	r19,r19,7
   81e90:	98800c04 	addi	r2,r19,48
   81e94:	843fffc4 	addi	r16,r16,-1
   81e98:	20e6b03a 	or	r19,r4,r3
   81e9c:	80800005 	stb	r2,0(r16)
   81ea0:	9d86b03a 	or	r3,r19,r22
   81ea4:	183ff61e 	bne	r3,zero,81e80 <__alt_data_end+0xfffb6390>
   81ea8:	90c0004c 	andi	r3,r18,1
   81eac:	18013b26 	beq	r3,zero,8239c <___vfprintf_internal_r+0xbdc>
   81eb0:	10803fcc 	andi	r2,r2,255
   81eb4:	1080201c 	xori	r2,r2,128
   81eb8:	10bfe004 	addi	r2,r2,-128
   81ebc:	00c00c04 	movi	r3,48
   81ec0:	10c13626 	beq	r2,r3,8239c <___vfprintf_internal_r+0xbdc>
   81ec4:	80ffffc5 	stb	r3,-1(r16)
   81ec8:	d8c02817 	ldw	r3,160(sp)
   81ecc:	80bfffc4 	addi	r2,r16,-1
   81ed0:	1021883a 	mov	r16,r2
   81ed4:	1887c83a 	sub	r3,r3,r2
   81ed8:	d8c02e15 	stw	r3,184(sp)
   81edc:	d8802e17 	ldw	r2,184(sp)
   81ee0:	d9002917 	ldw	r4,164(sp)
   81ee4:	1100010e 	bge	r2,r4,81eec <___vfprintf_internal_r+0x72c>
   81ee8:	2005883a 	mov	r2,r4
   81eec:	d8802a15 	stw	r2,168(sp)
   81ef0:	d8003215 	stw	zero,200(sp)
   81ef4:	e7003fcc 	andi	fp,fp,255
   81ef8:	e700201c 	xori	fp,fp,128
   81efc:	e73fe004 	addi	fp,fp,-128
   81f00:	e0000326 	beq	fp,zero,81f10 <___vfprintf_internal_r+0x750>
   81f04:	d8c02a17 	ldw	r3,168(sp)
   81f08:	18c00044 	addi	r3,r3,1
   81f0c:	d8c02a15 	stw	r3,168(sp)
   81f10:	90c0008c 	andi	r3,r18,2
   81f14:	d8c02b15 	stw	r3,172(sp)
   81f18:	18000326 	beq	r3,zero,81f28 <___vfprintf_internal_r+0x768>
   81f1c:	d8c02a17 	ldw	r3,168(sp)
   81f20:	18c00084 	addi	r3,r3,2
   81f24:	d8c02a15 	stw	r3,168(sp)
   81f28:	90c0210c 	andi	r3,r18,132
   81f2c:	d8c03015 	stw	r3,192(sp)
   81f30:	1801a31e 	bne	r3,zero,825c0 <___vfprintf_internal_r+0xe00>
   81f34:	d9003117 	ldw	r4,196(sp)
   81f38:	d8c02a17 	ldw	r3,168(sp)
   81f3c:	20e7c83a 	sub	r19,r4,r3
   81f40:	04c19f0e 	bge	zero,r19,825c0 <___vfprintf_internal_r+0xe00>
   81f44:	02400404 	movi	r9,16
   81f48:	d8c02017 	ldw	r3,128(sp)
   81f4c:	d8801f17 	ldw	r2,124(sp)
   81f50:	4cc50d0e 	bge	r9,r19,83388 <___vfprintf_internal_r+0x1bc8>
   81f54:	01400274 	movhi	r5,9
   81f58:	2942b884 	addi	r5,r5,2786
   81f5c:	dc403b15 	stw	r17,236(sp)
   81f60:	d9403515 	stw	r5,212(sp)
   81f64:	9823883a 	mov	r17,r19
   81f68:	482d883a 	mov	r22,r9
   81f6c:	9027883a 	mov	r19,r18
   81f70:	070001c4 	movi	fp,7
   81f74:	8025883a 	mov	r18,r16
   81f78:	dc002c17 	ldw	r16,176(sp)
   81f7c:	00000306 	br	81f8c <___vfprintf_internal_r+0x7cc>
   81f80:	8c7ffc04 	addi	r17,r17,-16
   81f84:	42000204 	addi	r8,r8,8
   81f88:	b440130e 	bge	r22,r17,81fd8 <___vfprintf_internal_r+0x818>
   81f8c:	01000274 	movhi	r4,9
   81f90:	18c00404 	addi	r3,r3,16
   81f94:	10800044 	addi	r2,r2,1
   81f98:	2102b884 	addi	r4,r4,2786
   81f9c:	41000015 	stw	r4,0(r8)
   81fa0:	45800115 	stw	r22,4(r8)
   81fa4:	d8c02015 	stw	r3,128(sp)
   81fa8:	d8801f15 	stw	r2,124(sp)
   81fac:	e0bff40e 	bge	fp,r2,81f80 <__alt_data_end+0xfffb6490>
   81fb0:	d9801e04 	addi	r6,sp,120
   81fb4:	b80b883a 	mov	r5,r23
   81fb8:	8009883a 	mov	r4,r16
   81fbc:	0088e180 	call	88e18 <__sprint_r>
   81fc0:	103f011e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   81fc4:	8c7ffc04 	addi	r17,r17,-16
   81fc8:	d8c02017 	ldw	r3,128(sp)
   81fcc:	d8801f17 	ldw	r2,124(sp)
   81fd0:	da000404 	addi	r8,sp,16
   81fd4:	b47fed16 	blt	r22,r17,81f8c <__alt_data_end+0xfffb649c>
   81fd8:	9021883a 	mov	r16,r18
   81fdc:	9825883a 	mov	r18,r19
   81fe0:	8827883a 	mov	r19,r17
   81fe4:	dc403b17 	ldw	r17,236(sp)
   81fe8:	d9403517 	ldw	r5,212(sp)
   81fec:	98c7883a 	add	r3,r19,r3
   81ff0:	10800044 	addi	r2,r2,1
   81ff4:	41400015 	stw	r5,0(r8)
   81ff8:	44c00115 	stw	r19,4(r8)
   81ffc:	d8c02015 	stw	r3,128(sp)
   82000:	d8801f15 	stw	r2,124(sp)
   82004:	010001c4 	movi	r4,7
   82008:	2082a316 	blt	r4,r2,82a98 <___vfprintf_internal_r+0x12d8>
   8200c:	df002787 	ldb	fp,158(sp)
   82010:	42000204 	addi	r8,r8,8
   82014:	e0000c26 	beq	fp,zero,82048 <___vfprintf_internal_r+0x888>
   82018:	d8801f17 	ldw	r2,124(sp)
   8201c:	d9002784 	addi	r4,sp,158
   82020:	18c00044 	addi	r3,r3,1
   82024:	10800044 	addi	r2,r2,1
   82028:	41000015 	stw	r4,0(r8)
   8202c:	01000044 	movi	r4,1
   82030:	41000115 	stw	r4,4(r8)
   82034:	d8c02015 	stw	r3,128(sp)
   82038:	d8801f15 	stw	r2,124(sp)
   8203c:	010001c4 	movi	r4,7
   82040:	20823c16 	blt	r4,r2,82934 <___vfprintf_internal_r+0x1174>
   82044:	42000204 	addi	r8,r8,8
   82048:	d8802b17 	ldw	r2,172(sp)
   8204c:	10000c26 	beq	r2,zero,82080 <___vfprintf_internal_r+0x8c0>
   82050:	d8801f17 	ldw	r2,124(sp)
   82054:	d9002704 	addi	r4,sp,156
   82058:	18c00084 	addi	r3,r3,2
   8205c:	10800044 	addi	r2,r2,1
   82060:	41000015 	stw	r4,0(r8)
   82064:	01000084 	movi	r4,2
   82068:	41000115 	stw	r4,4(r8)
   8206c:	d8c02015 	stw	r3,128(sp)
   82070:	d8801f15 	stw	r2,124(sp)
   82074:	010001c4 	movi	r4,7
   82078:	20823616 	blt	r4,r2,82954 <___vfprintf_internal_r+0x1194>
   8207c:	42000204 	addi	r8,r8,8
   82080:	d9003017 	ldw	r4,192(sp)
   82084:	00802004 	movi	r2,128
   82088:	20819926 	beq	r4,r2,826f0 <___vfprintf_internal_r+0xf30>
   8208c:	d9402917 	ldw	r5,164(sp)
   82090:	d8802e17 	ldw	r2,184(sp)
   82094:	28adc83a 	sub	r22,r5,r2
   82098:	0580310e 	bge	zero,r22,82160 <___vfprintf_internal_r+0x9a0>
   8209c:	07000404 	movi	fp,16
   820a0:	d8801f17 	ldw	r2,124(sp)
   820a4:	e584140e 	bge	fp,r22,830f8 <___vfprintf_internal_r+0x1938>
   820a8:	01400274 	movhi	r5,9
   820ac:	2942b484 	addi	r5,r5,2770
   820b0:	dc402915 	stw	r17,164(sp)
   820b4:	d9402b15 	stw	r5,172(sp)
   820b8:	b023883a 	mov	r17,r22
   820bc:	04c001c4 	movi	r19,7
   820c0:	a82d883a 	mov	r22,r21
   820c4:	902b883a 	mov	r21,r18
   820c8:	8025883a 	mov	r18,r16
   820cc:	dc002c17 	ldw	r16,176(sp)
   820d0:	00000306 	br	820e0 <___vfprintf_internal_r+0x920>
   820d4:	8c7ffc04 	addi	r17,r17,-16
   820d8:	42000204 	addi	r8,r8,8
   820dc:	e440110e 	bge	fp,r17,82124 <___vfprintf_internal_r+0x964>
   820e0:	18c00404 	addi	r3,r3,16
   820e4:	10800044 	addi	r2,r2,1
   820e8:	45000015 	stw	r20,0(r8)
   820ec:	47000115 	stw	fp,4(r8)
   820f0:	d8c02015 	stw	r3,128(sp)
   820f4:	d8801f15 	stw	r2,124(sp)
   820f8:	98bff60e 	bge	r19,r2,820d4 <__alt_data_end+0xfffb65e4>
   820fc:	d9801e04 	addi	r6,sp,120
   82100:	b80b883a 	mov	r5,r23
   82104:	8009883a 	mov	r4,r16
   82108:	0088e180 	call	88e18 <__sprint_r>
   8210c:	103eae1e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   82110:	8c7ffc04 	addi	r17,r17,-16
   82114:	d8c02017 	ldw	r3,128(sp)
   82118:	d8801f17 	ldw	r2,124(sp)
   8211c:	da000404 	addi	r8,sp,16
   82120:	e47fef16 	blt	fp,r17,820e0 <__alt_data_end+0xfffb65f0>
   82124:	9021883a 	mov	r16,r18
   82128:	a825883a 	mov	r18,r21
   8212c:	b02b883a 	mov	r21,r22
   82130:	882d883a 	mov	r22,r17
   82134:	dc402917 	ldw	r17,164(sp)
   82138:	d9002b17 	ldw	r4,172(sp)
   8213c:	1d87883a 	add	r3,r3,r22
   82140:	10800044 	addi	r2,r2,1
   82144:	41000015 	stw	r4,0(r8)
   82148:	45800115 	stw	r22,4(r8)
   8214c:	d8c02015 	stw	r3,128(sp)
   82150:	d8801f15 	stw	r2,124(sp)
   82154:	010001c4 	movi	r4,7
   82158:	2081ee16 	blt	r4,r2,82914 <___vfprintf_internal_r+0x1154>
   8215c:	42000204 	addi	r8,r8,8
   82160:	9080400c 	andi	r2,r18,256
   82164:	1001181e 	bne	r2,zero,825c8 <___vfprintf_internal_r+0xe08>
   82168:	d9402e17 	ldw	r5,184(sp)
   8216c:	d8801f17 	ldw	r2,124(sp)
   82170:	44000015 	stw	r16,0(r8)
   82174:	1947883a 	add	r3,r3,r5
   82178:	10800044 	addi	r2,r2,1
   8217c:	41400115 	stw	r5,4(r8)
   82180:	d8c02015 	stw	r3,128(sp)
   82184:	d8801f15 	stw	r2,124(sp)
   82188:	010001c4 	movi	r4,7
   8218c:	2081d316 	blt	r4,r2,828dc <___vfprintf_internal_r+0x111c>
   82190:	42000204 	addi	r8,r8,8
   82194:	9480010c 	andi	r18,r18,4
   82198:	90003226 	beq	r18,zero,82264 <___vfprintf_internal_r+0xaa4>
   8219c:	d9403117 	ldw	r5,196(sp)
   821a0:	d8802a17 	ldw	r2,168(sp)
   821a4:	28a1c83a 	sub	r16,r5,r2
   821a8:	04002e0e 	bge	zero,r16,82264 <___vfprintf_internal_r+0xaa4>
   821ac:	04400404 	movi	r17,16
   821b0:	d8801f17 	ldw	r2,124(sp)
   821b4:	8c04a20e 	bge	r17,r16,83440 <___vfprintf_internal_r+0x1c80>
   821b8:	01400274 	movhi	r5,9
   821bc:	2942b884 	addi	r5,r5,2786
   821c0:	d9403515 	stw	r5,212(sp)
   821c4:	048001c4 	movi	r18,7
   821c8:	dcc02c17 	ldw	r19,176(sp)
   821cc:	00000306 	br	821dc <___vfprintf_internal_r+0xa1c>
   821d0:	843ffc04 	addi	r16,r16,-16
   821d4:	42000204 	addi	r8,r8,8
   821d8:	8c00130e 	bge	r17,r16,82228 <___vfprintf_internal_r+0xa68>
   821dc:	01000274 	movhi	r4,9
   821e0:	18c00404 	addi	r3,r3,16
   821e4:	10800044 	addi	r2,r2,1
   821e8:	2102b884 	addi	r4,r4,2786
   821ec:	41000015 	stw	r4,0(r8)
   821f0:	44400115 	stw	r17,4(r8)
   821f4:	d8c02015 	stw	r3,128(sp)
   821f8:	d8801f15 	stw	r2,124(sp)
   821fc:	90bff40e 	bge	r18,r2,821d0 <__alt_data_end+0xfffb66e0>
   82200:	d9801e04 	addi	r6,sp,120
   82204:	b80b883a 	mov	r5,r23
   82208:	9809883a 	mov	r4,r19
   8220c:	0088e180 	call	88e18 <__sprint_r>
   82210:	103e6d1e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   82214:	843ffc04 	addi	r16,r16,-16
   82218:	d8c02017 	ldw	r3,128(sp)
   8221c:	d8801f17 	ldw	r2,124(sp)
   82220:	da000404 	addi	r8,sp,16
   82224:	8c3fed16 	blt	r17,r16,821dc <__alt_data_end+0xfffb66ec>
   82228:	d9403517 	ldw	r5,212(sp)
   8222c:	1c07883a 	add	r3,r3,r16
   82230:	10800044 	addi	r2,r2,1
   82234:	41400015 	stw	r5,0(r8)
   82238:	44000115 	stw	r16,4(r8)
   8223c:	d8c02015 	stw	r3,128(sp)
   82240:	d8801f15 	stw	r2,124(sp)
   82244:	010001c4 	movi	r4,7
   82248:	2080060e 	bge	r4,r2,82264 <___vfprintf_internal_r+0xaa4>
   8224c:	d9002c17 	ldw	r4,176(sp)
   82250:	d9801e04 	addi	r6,sp,120
   82254:	b80b883a 	mov	r5,r23
   82258:	0088e180 	call	88e18 <__sprint_r>
   8225c:	103e5a1e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   82260:	d8c02017 	ldw	r3,128(sp)
   82264:	d8803117 	ldw	r2,196(sp)
   82268:	d9002a17 	ldw	r4,168(sp)
   8226c:	1100010e 	bge	r2,r4,82274 <___vfprintf_internal_r+0xab4>
   82270:	2005883a 	mov	r2,r4
   82274:	d9402f17 	ldw	r5,188(sp)
   82278:	288b883a 	add	r5,r5,r2
   8227c:	d9402f15 	stw	r5,188(sp)
   82280:	18019e1e 	bne	r3,zero,828fc <___vfprintf_internal_r+0x113c>
   82284:	a8800007 	ldb	r2,0(r21)
   82288:	d8001f15 	stw	zero,124(sp)
   8228c:	da000404 	addi	r8,sp,16
   82290:	103d851e 	bne	r2,zero,818a8 <__alt_data_end+0xfffb5db8>
   82294:	a821883a 	mov	r16,r21
   82298:	003d9b06 	br	81908 <__alt_data_end+0xfffb5e18>
   8229c:	18c03fcc 	andi	r3,r3,255
   822a0:	1805c11e 	bne	r3,zero,839a8 <___vfprintf_internal_r+0x21e8>
   822a4:	94800414 	ori	r18,r18,16
   822a8:	9080080c 	andi	r2,r18,32
   822ac:	10020c26 	beq	r2,zero,82ae0 <___vfprintf_internal_r+0x1320>
   822b0:	d8802d17 	ldw	r2,180(sp)
   822b4:	d9002917 	ldw	r4,164(sp)
   822b8:	d8002785 	stb	zero,158(sp)
   822bc:	10c00204 	addi	r3,r2,8
   822c0:	14c00017 	ldw	r19,0(r2)
   822c4:	15800117 	ldw	r22,4(r2)
   822c8:	20040f16 	blt	r4,zero,83308 <___vfprintf_internal_r+0x1b48>
   822cc:	013fdfc4 	movi	r4,-129
   822d0:	9d84b03a 	or	r2,r19,r22
   822d4:	d8c02d15 	stw	r3,180(sp)
   822d8:	9124703a 	and	r18,r18,r4
   822dc:	0039883a 	mov	fp,zero
   822e0:	103e891e 	bne	r2,zero,81d08 <__alt_data_end+0xfffb6218>
   822e4:	d9002917 	ldw	r4,164(sp)
   822e8:	2002c11e 	bne	r4,zero,82df0 <___vfprintf_internal_r+0x1630>
   822ec:	d8002915 	stw	zero,164(sp)
   822f0:	d8002e15 	stw	zero,184(sp)
   822f4:	dc001e04 	addi	r16,sp,120
   822f8:	003ef806 	br	81edc <__alt_data_end+0xfffb63ec>
   822fc:	18c03fcc 	andi	r3,r3,255
   82300:	18059d1e 	bne	r3,zero,83978 <___vfprintf_internal_r+0x21b8>
   82304:	01400274 	movhi	r5,9
   82308:	2942a804 	addi	r5,r5,2720
   8230c:	d9403915 	stw	r5,228(sp)
   82310:	9080080c 	andi	r2,r18,32
   82314:	10005226 	beq	r2,zero,82460 <___vfprintf_internal_r+0xca0>
   82318:	d8802d17 	ldw	r2,180(sp)
   8231c:	14c00017 	ldw	r19,0(r2)
   82320:	15800117 	ldw	r22,4(r2)
   82324:	10800204 	addi	r2,r2,8
   82328:	d8802d15 	stw	r2,180(sp)
   8232c:	9080004c 	andi	r2,r18,1
   82330:	10019026 	beq	r2,zero,82974 <___vfprintf_internal_r+0x11b4>
   82334:	9d84b03a 	or	r2,r19,r22
   82338:	10036926 	beq	r2,zero,830e0 <___vfprintf_internal_r+0x1920>
   8233c:	d8c02917 	ldw	r3,164(sp)
   82340:	00800c04 	movi	r2,48
   82344:	d8802705 	stb	r2,156(sp)
   82348:	dc402745 	stb	r17,157(sp)
   8234c:	d8002785 	stb	zero,158(sp)
   82350:	90800094 	ori	r2,r18,2
   82354:	18045d16 	blt	r3,zero,834cc <___vfprintf_internal_r+0x1d0c>
   82358:	00bfdfc4 	movi	r2,-129
   8235c:	90a4703a 	and	r18,r18,r2
   82360:	94800094 	ori	r18,r18,2
   82364:	0039883a 	mov	fp,zero
   82368:	d9003917 	ldw	r4,228(sp)
   8236c:	dc001e04 	addi	r16,sp,120
   82370:	988003cc 	andi	r2,r19,15
   82374:	b006973a 	slli	r3,r22,28
   82378:	2085883a 	add	r2,r4,r2
   8237c:	9826d13a 	srli	r19,r19,4
   82380:	10800003 	ldbu	r2,0(r2)
   82384:	b02cd13a 	srli	r22,r22,4
   82388:	843fffc4 	addi	r16,r16,-1
   8238c:	1ce6b03a 	or	r19,r3,r19
   82390:	80800005 	stb	r2,0(r16)
   82394:	9d84b03a 	or	r2,r19,r22
   82398:	103ff51e 	bne	r2,zero,82370 <__alt_data_end+0xfffb6880>
   8239c:	d8c02817 	ldw	r3,160(sp)
   823a0:	1c07c83a 	sub	r3,r3,r16
   823a4:	d8c02e15 	stw	r3,184(sp)
   823a8:	003ecc06 	br	81edc <__alt_data_end+0xfffb63ec>
   823ac:	18c03fcc 	andi	r3,r3,255
   823b0:	183e9f26 	beq	r3,zero,81e30 <__alt_data_end+0xfffb6340>
   823b4:	d9c02785 	stb	r7,158(sp)
   823b8:	003e9d06 	br	81e30 <__alt_data_end+0xfffb6340>
   823bc:	00c00044 	movi	r3,1
   823c0:	01c00ac4 	movi	r7,43
   823c4:	ac400007 	ldb	r17,0(r21)
   823c8:	003d5e06 	br	81944 <__alt_data_end+0xfffb5e54>
   823cc:	94800814 	ori	r18,r18,32
   823d0:	ac400007 	ldb	r17,0(r21)
   823d4:	003d5b06 	br	81944 <__alt_data_end+0xfffb5e54>
   823d8:	d8c02d17 	ldw	r3,180(sp)
   823dc:	d8002785 	stb	zero,158(sp)
   823e0:	1c000017 	ldw	r16,0(r3)
   823e4:	1cc00104 	addi	r19,r3,4
   823e8:	80041926 	beq	r16,zero,83450 <___vfprintf_internal_r+0x1c90>
   823ec:	d9002917 	ldw	r4,164(sp)
   823f0:	2003d016 	blt	r4,zero,83334 <___vfprintf_internal_r+0x1b74>
   823f4:	200d883a 	mov	r6,r4
   823f8:	000b883a 	mov	r5,zero
   823fc:	8009883a 	mov	r4,r16
   82400:	da003d15 	stw	r8,244(sp)
   82404:	008702c0 	call	8702c <memchr>
   82408:	da003d17 	ldw	r8,244(sp)
   8240c:	10045426 	beq	r2,zero,83560 <___vfprintf_internal_r+0x1da0>
   82410:	1405c83a 	sub	r2,r2,r16
   82414:	d8802e15 	stw	r2,184(sp)
   82418:	1003cc16 	blt	r2,zero,8334c <___vfprintf_internal_r+0x1b8c>
   8241c:	df002783 	ldbu	fp,158(sp)
   82420:	d8802a15 	stw	r2,168(sp)
   82424:	dcc02d15 	stw	r19,180(sp)
   82428:	d8002915 	stw	zero,164(sp)
   8242c:	d8003215 	stw	zero,200(sp)
   82430:	003eb006 	br	81ef4 <__alt_data_end+0xfffb6404>
   82434:	18c03fcc 	andi	r3,r3,255
   82438:	183f9b26 	beq	r3,zero,822a8 <__alt_data_end+0xfffb67b8>
   8243c:	d9c02785 	stb	r7,158(sp)
   82440:	003f9906 	br	822a8 <__alt_data_end+0xfffb67b8>
   82444:	18c03fcc 	andi	r3,r3,255
   82448:	1805551e 	bne	r3,zero,839a0 <___vfprintf_internal_r+0x21e0>
   8244c:	01400274 	movhi	r5,9
   82450:	2942ad04 	addi	r5,r5,2740
   82454:	d9403915 	stw	r5,228(sp)
   82458:	9080080c 	andi	r2,r18,32
   8245c:	103fae1e 	bne	r2,zero,82318 <__alt_data_end+0xfffb6828>
   82460:	9080040c 	andi	r2,r18,16
   82464:	1002de26 	beq	r2,zero,82fe0 <___vfprintf_internal_r+0x1820>
   82468:	d8c02d17 	ldw	r3,180(sp)
   8246c:	002d883a 	mov	r22,zero
   82470:	1cc00017 	ldw	r19,0(r3)
   82474:	18c00104 	addi	r3,r3,4
   82478:	d8c02d15 	stw	r3,180(sp)
   8247c:	003fab06 	br	8232c <__alt_data_end+0xfffb683c>
   82480:	38803fcc 	andi	r2,r7,255
   82484:	1080201c 	xori	r2,r2,128
   82488:	10bfe004 	addi	r2,r2,-128
   8248c:	1002d21e 	bne	r2,zero,82fd8 <___vfprintf_internal_r+0x1818>
   82490:	00c00044 	movi	r3,1
   82494:	01c00804 	movi	r7,32
   82498:	ac400007 	ldb	r17,0(r21)
   8249c:	003d2906 	br	81944 <__alt_data_end+0xfffb5e54>
   824a0:	94800054 	ori	r18,r18,1
   824a4:	ac400007 	ldb	r17,0(r21)
   824a8:	003d2606 	br	81944 <__alt_data_end+0xfffb5e54>
   824ac:	18c03fcc 	andi	r3,r3,255
   824b0:	183e0526 	beq	r3,zero,81cc8 <__alt_data_end+0xfffb61d8>
   824b4:	d9c02785 	stb	r7,158(sp)
   824b8:	003e0306 	br	81cc8 <__alt_data_end+0xfffb61d8>
   824bc:	94801014 	ori	r18,r18,64
   824c0:	ac400007 	ldb	r17,0(r21)
   824c4:	003d1f06 	br	81944 <__alt_data_end+0xfffb5e54>
   824c8:	ac400007 	ldb	r17,0(r21)
   824cc:	8a438726 	beq	r17,r9,832ec <___vfprintf_internal_r+0x1b2c>
   824d0:	94800414 	ori	r18,r18,16
   824d4:	003d1b06 	br	81944 <__alt_data_end+0xfffb5e54>
   824d8:	18c03fcc 	andi	r3,r3,255
   824dc:	1805341e 	bne	r3,zero,839b0 <___vfprintf_internal_r+0x21f0>
   824e0:	9080080c 	andi	r2,r18,32
   824e4:	1002cd26 	beq	r2,zero,8301c <___vfprintf_internal_r+0x185c>
   824e8:	d9402d17 	ldw	r5,180(sp)
   824ec:	d9002f17 	ldw	r4,188(sp)
   824f0:	28800017 	ldw	r2,0(r5)
   824f4:	2007d7fa 	srai	r3,r4,31
   824f8:	29400104 	addi	r5,r5,4
   824fc:	d9402d15 	stw	r5,180(sp)
   82500:	11000015 	stw	r4,0(r2)
   82504:	10c00115 	stw	r3,4(r2)
   82508:	003ce506 	br	818a0 <__alt_data_end+0xfffb5db0>
   8250c:	d8c02d17 	ldw	r3,180(sp)
   82510:	d9002d17 	ldw	r4,180(sp)
   82514:	d8002785 	stb	zero,158(sp)
   82518:	18800017 	ldw	r2,0(r3)
   8251c:	21000104 	addi	r4,r4,4
   82520:	00c00044 	movi	r3,1
   82524:	d8c02a15 	stw	r3,168(sp)
   82528:	d8801405 	stb	r2,80(sp)
   8252c:	d9002d15 	stw	r4,180(sp)
   82530:	d8c02e15 	stw	r3,184(sp)
   82534:	d8002915 	stw	zero,164(sp)
   82538:	d8003215 	stw	zero,200(sp)
   8253c:	dc001404 	addi	r16,sp,80
   82540:	0039883a 	mov	fp,zero
   82544:	003e7206 	br	81f10 <__alt_data_end+0xfffb6420>
   82548:	01000274 	movhi	r4,9
   8254c:	2102ad04 	addi	r4,r4,2740
   82550:	0039883a 	mov	fp,zero
   82554:	d9003915 	stw	r4,228(sp)
   82558:	04401e04 	movi	r17,120
   8255c:	003f8206 	br	82368 <__alt_data_end+0xfffb6878>
   82560:	18c03fcc 	andi	r3,r3,255
   82564:	1805061e 	bne	r3,zero,83980 <___vfprintf_internal_r+0x21c0>
   82568:	883d9126 	beq	r17,zero,81bb0 <__alt_data_end+0xfffb60c0>
   8256c:	00c00044 	movi	r3,1
   82570:	d8c02a15 	stw	r3,168(sp)
   82574:	dc401405 	stb	r17,80(sp)
   82578:	d8002785 	stb	zero,158(sp)
   8257c:	003fec06 	br	82530 <__alt_data_end+0xfffb6a40>
   82580:	01400274 	movhi	r5,9
   82584:	2942ad04 	addi	r5,r5,2740
   82588:	d9403915 	stw	r5,228(sp)
   8258c:	d8c02d15 	stw	r3,180(sp)
   82590:	1025883a 	mov	r18,r2
   82594:	04401e04 	movi	r17,120
   82598:	9d84b03a 	or	r2,r19,r22
   8259c:	1000fc1e 	bne	r2,zero,82990 <___vfprintf_internal_r+0x11d0>
   825a0:	0039883a 	mov	fp,zero
   825a4:	00800084 	movi	r2,2
   825a8:	10803fcc 	andi	r2,r2,255
   825ac:	00c00044 	movi	r3,1
   825b0:	10c20f26 	beq	r2,r3,82df0 <___vfprintf_internal_r+0x1630>
   825b4:	00c00084 	movi	r3,2
   825b8:	10fd6326 	beq	r2,r3,81b48 <__alt_data_end+0xfffb6058>
   825bc:	003e2d06 	br	81e74 <__alt_data_end+0xfffb6384>
   825c0:	d8c02017 	ldw	r3,128(sp)
   825c4:	003e9306 	br	82014 <__alt_data_end+0xfffb6524>
   825c8:	00801944 	movi	r2,101
   825cc:	14407e0e 	bge	r2,r17,827c8 <___vfprintf_internal_r+0x1008>
   825d0:	d9003617 	ldw	r4,216(sp)
   825d4:	d9403817 	ldw	r5,224(sp)
   825d8:	000d883a 	mov	r6,zero
   825dc:	000f883a 	mov	r7,zero
   825e0:	d8c03c15 	stw	r3,240(sp)
   825e4:	da003d15 	stw	r8,244(sp)
   825e8:	008c93c0 	call	8c93c <__eqdf2>
   825ec:	d8c03c17 	ldw	r3,240(sp)
   825f0:	da003d17 	ldw	r8,244(sp)
   825f4:	1000f71e 	bne	r2,zero,829d4 <___vfprintf_internal_r+0x1214>
   825f8:	d8801f17 	ldw	r2,124(sp)
   825fc:	01000274 	movhi	r4,9
   82600:	2102b404 	addi	r4,r4,2768
   82604:	18c00044 	addi	r3,r3,1
   82608:	10800044 	addi	r2,r2,1
   8260c:	41000015 	stw	r4,0(r8)
   82610:	01000044 	movi	r4,1
   82614:	41000115 	stw	r4,4(r8)
   82618:	d8c02015 	stw	r3,128(sp)
   8261c:	d8801f15 	stw	r2,124(sp)
   82620:	010001c4 	movi	r4,7
   82624:	2082b816 	blt	r4,r2,83108 <___vfprintf_internal_r+0x1948>
   82628:	42000204 	addi	r8,r8,8
   8262c:	d8802617 	ldw	r2,152(sp)
   82630:	d9403317 	ldw	r5,204(sp)
   82634:	11400216 	blt	r2,r5,82640 <___vfprintf_internal_r+0xe80>
   82638:	9080004c 	andi	r2,r18,1
   8263c:	103ed526 	beq	r2,zero,82194 <__alt_data_end+0xfffb66a4>
   82640:	d8803717 	ldw	r2,220(sp)
   82644:	d9003417 	ldw	r4,208(sp)
   82648:	d9403717 	ldw	r5,220(sp)
   8264c:	1887883a 	add	r3,r3,r2
   82650:	d8801f17 	ldw	r2,124(sp)
   82654:	41000015 	stw	r4,0(r8)
   82658:	41400115 	stw	r5,4(r8)
   8265c:	10800044 	addi	r2,r2,1
   82660:	d8c02015 	stw	r3,128(sp)
   82664:	d8801f15 	stw	r2,124(sp)
   82668:	010001c4 	movi	r4,7
   8266c:	20832916 	blt	r4,r2,83314 <___vfprintf_internal_r+0x1b54>
   82670:	42000204 	addi	r8,r8,8
   82674:	d8803317 	ldw	r2,204(sp)
   82678:	143fffc4 	addi	r16,r2,-1
   8267c:	043ec50e 	bge	zero,r16,82194 <__alt_data_end+0xfffb66a4>
   82680:	04400404 	movi	r17,16
   82684:	d8801f17 	ldw	r2,124(sp)
   82688:	8c00880e 	bge	r17,r16,828ac <___vfprintf_internal_r+0x10ec>
   8268c:	01400274 	movhi	r5,9
   82690:	2942b484 	addi	r5,r5,2770
   82694:	d9402b15 	stw	r5,172(sp)
   82698:	058001c4 	movi	r22,7
   8269c:	dcc02c17 	ldw	r19,176(sp)
   826a0:	00000306 	br	826b0 <___vfprintf_internal_r+0xef0>
   826a4:	42000204 	addi	r8,r8,8
   826a8:	843ffc04 	addi	r16,r16,-16
   826ac:	8c00820e 	bge	r17,r16,828b8 <___vfprintf_internal_r+0x10f8>
   826b0:	18c00404 	addi	r3,r3,16
   826b4:	10800044 	addi	r2,r2,1
   826b8:	45000015 	stw	r20,0(r8)
   826bc:	44400115 	stw	r17,4(r8)
   826c0:	d8c02015 	stw	r3,128(sp)
   826c4:	d8801f15 	stw	r2,124(sp)
   826c8:	b0bff60e 	bge	r22,r2,826a4 <__alt_data_end+0xfffb6bb4>
   826cc:	d9801e04 	addi	r6,sp,120
   826d0:	b80b883a 	mov	r5,r23
   826d4:	9809883a 	mov	r4,r19
   826d8:	0088e180 	call	88e18 <__sprint_r>
   826dc:	103d3a1e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   826e0:	d8c02017 	ldw	r3,128(sp)
   826e4:	d8801f17 	ldw	r2,124(sp)
   826e8:	da000404 	addi	r8,sp,16
   826ec:	003fee06 	br	826a8 <__alt_data_end+0xfffb6bb8>
   826f0:	d9403117 	ldw	r5,196(sp)
   826f4:	d8802a17 	ldw	r2,168(sp)
   826f8:	28adc83a 	sub	r22,r5,r2
   826fc:	05be630e 	bge	zero,r22,8208c <__alt_data_end+0xfffb659c>
   82700:	07000404 	movi	fp,16
   82704:	d8801f17 	ldw	r2,124(sp)
   82708:	e5838f0e 	bge	fp,r22,83548 <___vfprintf_internal_r+0x1d88>
   8270c:	01400274 	movhi	r5,9
   82710:	2942b484 	addi	r5,r5,2770
   82714:	dc403015 	stw	r17,192(sp)
   82718:	d9402b15 	stw	r5,172(sp)
   8271c:	b023883a 	mov	r17,r22
   82720:	04c001c4 	movi	r19,7
   82724:	a82d883a 	mov	r22,r21
   82728:	902b883a 	mov	r21,r18
   8272c:	8025883a 	mov	r18,r16
   82730:	dc002c17 	ldw	r16,176(sp)
   82734:	00000306 	br	82744 <___vfprintf_internal_r+0xf84>
   82738:	8c7ffc04 	addi	r17,r17,-16
   8273c:	42000204 	addi	r8,r8,8
   82740:	e440110e 	bge	fp,r17,82788 <___vfprintf_internal_r+0xfc8>
   82744:	18c00404 	addi	r3,r3,16
   82748:	10800044 	addi	r2,r2,1
   8274c:	45000015 	stw	r20,0(r8)
   82750:	47000115 	stw	fp,4(r8)
   82754:	d8c02015 	stw	r3,128(sp)
   82758:	d8801f15 	stw	r2,124(sp)
   8275c:	98bff60e 	bge	r19,r2,82738 <__alt_data_end+0xfffb6c48>
   82760:	d9801e04 	addi	r6,sp,120
   82764:	b80b883a 	mov	r5,r23
   82768:	8009883a 	mov	r4,r16
   8276c:	0088e180 	call	88e18 <__sprint_r>
   82770:	103d151e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   82774:	8c7ffc04 	addi	r17,r17,-16
   82778:	d8c02017 	ldw	r3,128(sp)
   8277c:	d8801f17 	ldw	r2,124(sp)
   82780:	da000404 	addi	r8,sp,16
   82784:	e47fef16 	blt	fp,r17,82744 <__alt_data_end+0xfffb6c54>
   82788:	9021883a 	mov	r16,r18
   8278c:	a825883a 	mov	r18,r21
   82790:	b02b883a 	mov	r21,r22
   82794:	882d883a 	mov	r22,r17
   82798:	dc403017 	ldw	r17,192(sp)
   8279c:	d9002b17 	ldw	r4,172(sp)
   827a0:	1d87883a 	add	r3,r3,r22
   827a4:	10800044 	addi	r2,r2,1
   827a8:	41000015 	stw	r4,0(r8)
   827ac:	45800115 	stw	r22,4(r8)
   827b0:	d8c02015 	stw	r3,128(sp)
   827b4:	d8801f15 	stw	r2,124(sp)
   827b8:	010001c4 	movi	r4,7
   827bc:	20818e16 	blt	r4,r2,82df8 <___vfprintf_internal_r+0x1638>
   827c0:	42000204 	addi	r8,r8,8
   827c4:	003e3106 	br	8208c <__alt_data_end+0xfffb659c>
   827c8:	d9403317 	ldw	r5,204(sp)
   827cc:	00800044 	movi	r2,1
   827d0:	18c00044 	addi	r3,r3,1
   827d4:	1141530e 	bge	r2,r5,82d24 <___vfprintf_internal_r+0x1564>
   827d8:	dc401f17 	ldw	r17,124(sp)
   827dc:	00800044 	movi	r2,1
   827e0:	40800115 	stw	r2,4(r8)
   827e4:	8c400044 	addi	r17,r17,1
   827e8:	44000015 	stw	r16,0(r8)
   827ec:	d8c02015 	stw	r3,128(sp)
   827f0:	dc401f15 	stw	r17,124(sp)
   827f4:	008001c4 	movi	r2,7
   827f8:	14416b16 	blt	r2,r17,82da8 <___vfprintf_internal_r+0x15e8>
   827fc:	42000204 	addi	r8,r8,8
   82800:	d8803717 	ldw	r2,220(sp)
   82804:	d9003417 	ldw	r4,208(sp)
   82808:	8c400044 	addi	r17,r17,1
   8280c:	10c7883a 	add	r3,r2,r3
   82810:	40800115 	stw	r2,4(r8)
   82814:	41000015 	stw	r4,0(r8)
   82818:	d8c02015 	stw	r3,128(sp)
   8281c:	dc401f15 	stw	r17,124(sp)
   82820:	008001c4 	movi	r2,7
   82824:	14416916 	blt	r2,r17,82dcc <___vfprintf_internal_r+0x160c>
   82828:	45800204 	addi	r22,r8,8
   8282c:	d9003617 	ldw	r4,216(sp)
   82830:	d9403817 	ldw	r5,224(sp)
   82834:	000d883a 	mov	r6,zero
   82838:	000f883a 	mov	r7,zero
   8283c:	d8c03c15 	stw	r3,240(sp)
   82840:	008c93c0 	call	8c93c <__eqdf2>
   82844:	d8c03c17 	ldw	r3,240(sp)
   82848:	1000bc26 	beq	r2,zero,82b3c <___vfprintf_internal_r+0x137c>
   8284c:	d9403317 	ldw	r5,204(sp)
   82850:	84000044 	addi	r16,r16,1
   82854:	8c400044 	addi	r17,r17,1
   82858:	28bfffc4 	addi	r2,r5,-1
   8285c:	1887883a 	add	r3,r3,r2
   82860:	b0800115 	stw	r2,4(r22)
   82864:	b4000015 	stw	r16,0(r22)
   82868:	d8c02015 	stw	r3,128(sp)
   8286c:	dc401f15 	stw	r17,124(sp)
   82870:	008001c4 	movi	r2,7
   82874:	14414316 	blt	r2,r17,82d84 <___vfprintf_internal_r+0x15c4>
   82878:	b5800204 	addi	r22,r22,8
   8287c:	d9003a17 	ldw	r4,232(sp)
   82880:	df0022c4 	addi	fp,sp,139
   82884:	8c400044 	addi	r17,r17,1
   82888:	20c7883a 	add	r3,r4,r3
   8288c:	b7000015 	stw	fp,0(r22)
   82890:	b1000115 	stw	r4,4(r22)
   82894:	d8c02015 	stw	r3,128(sp)
   82898:	dc401f15 	stw	r17,124(sp)
   8289c:	008001c4 	movi	r2,7
   828a0:	14400e16 	blt	r2,r17,828dc <___vfprintf_internal_r+0x111c>
   828a4:	b2000204 	addi	r8,r22,8
   828a8:	003e3a06 	br	82194 <__alt_data_end+0xfffb66a4>
   828ac:	01000274 	movhi	r4,9
   828b0:	2102b484 	addi	r4,r4,2770
   828b4:	d9002b15 	stw	r4,172(sp)
   828b8:	d9002b17 	ldw	r4,172(sp)
   828bc:	1c07883a 	add	r3,r3,r16
   828c0:	44000115 	stw	r16,4(r8)
   828c4:	41000015 	stw	r4,0(r8)
   828c8:	10800044 	addi	r2,r2,1
   828cc:	d8c02015 	stw	r3,128(sp)
   828d0:	d8801f15 	stw	r2,124(sp)
   828d4:	010001c4 	movi	r4,7
   828d8:	20be2d0e 	bge	r4,r2,82190 <__alt_data_end+0xfffb66a0>
   828dc:	d9002c17 	ldw	r4,176(sp)
   828e0:	d9801e04 	addi	r6,sp,120
   828e4:	b80b883a 	mov	r5,r23
   828e8:	0088e180 	call	88e18 <__sprint_r>
   828ec:	103cb61e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   828f0:	d8c02017 	ldw	r3,128(sp)
   828f4:	da000404 	addi	r8,sp,16
   828f8:	003e2606 	br	82194 <__alt_data_end+0xfffb66a4>
   828fc:	d9002c17 	ldw	r4,176(sp)
   82900:	d9801e04 	addi	r6,sp,120
   82904:	b80b883a 	mov	r5,r23
   82908:	0088e180 	call	88e18 <__sprint_r>
   8290c:	103e5d26 	beq	r2,zero,82284 <__alt_data_end+0xfffb6794>
   82910:	003cad06 	br	81bc8 <__alt_data_end+0xfffb60d8>
   82914:	d9002c17 	ldw	r4,176(sp)
   82918:	d9801e04 	addi	r6,sp,120
   8291c:	b80b883a 	mov	r5,r23
   82920:	0088e180 	call	88e18 <__sprint_r>
   82924:	103ca81e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   82928:	d8c02017 	ldw	r3,128(sp)
   8292c:	da000404 	addi	r8,sp,16
   82930:	003e0b06 	br	82160 <__alt_data_end+0xfffb6670>
   82934:	d9002c17 	ldw	r4,176(sp)
   82938:	d9801e04 	addi	r6,sp,120
   8293c:	b80b883a 	mov	r5,r23
   82940:	0088e180 	call	88e18 <__sprint_r>
   82944:	103ca01e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   82948:	d8c02017 	ldw	r3,128(sp)
   8294c:	da000404 	addi	r8,sp,16
   82950:	003dbd06 	br	82048 <__alt_data_end+0xfffb6558>
   82954:	d9002c17 	ldw	r4,176(sp)
   82958:	d9801e04 	addi	r6,sp,120
   8295c:	b80b883a 	mov	r5,r23
   82960:	0088e180 	call	88e18 <__sprint_r>
   82964:	103c981e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   82968:	d8c02017 	ldw	r3,128(sp)
   8296c:	da000404 	addi	r8,sp,16
   82970:	003dc306 	br	82080 <__alt_data_end+0xfffb6590>
   82974:	d8802917 	ldw	r2,164(sp)
   82978:	d8002785 	stb	zero,158(sp)
   8297c:	103f0616 	blt	r2,zero,82598 <__alt_data_end+0xfffb6aa8>
   82980:	00ffdfc4 	movi	r3,-129
   82984:	9d84b03a 	or	r2,r19,r22
   82988:	90e4703a 	and	r18,r18,r3
   8298c:	103c6b26 	beq	r2,zero,81b3c <__alt_data_end+0xfffb604c>
   82990:	0039883a 	mov	fp,zero
   82994:	003e7406 	br	82368 <__alt_data_end+0xfffb6878>
   82998:	9080040c 	andi	r2,r18,16
   8299c:	1001b326 	beq	r2,zero,8306c <___vfprintf_internal_r+0x18ac>
   829a0:	d9002d17 	ldw	r4,180(sp)
   829a4:	d9402917 	ldw	r5,164(sp)
   829a8:	d8002785 	stb	zero,158(sp)
   829ac:	20800104 	addi	r2,r4,4
   829b0:	24c00017 	ldw	r19,0(r4)
   829b4:	002d883a 	mov	r22,zero
   829b8:	2801b516 	blt	r5,zero,83090 <___vfprintf_internal_r+0x18d0>
   829bc:	00ffdfc4 	movi	r3,-129
   829c0:	d8802d15 	stw	r2,180(sp)
   829c4:	90e4703a 	and	r18,r18,r3
   829c8:	983d2726 	beq	r19,zero,81e68 <__alt_data_end+0xfffb6378>
   829cc:	0039883a 	mov	fp,zero
   829d0:	003d2a06 	br	81e7c <__alt_data_end+0xfffb638c>
   829d4:	dc402617 	ldw	r17,152(sp)
   829d8:	0441d30e 	bge	zero,r17,83128 <___vfprintf_internal_r+0x1968>
   829dc:	dc403217 	ldw	r17,200(sp)
   829e0:	d8803317 	ldw	r2,204(sp)
   829e4:	1440010e 	bge	r2,r17,829ec <___vfprintf_internal_r+0x122c>
   829e8:	1023883a 	mov	r17,r2
   829ec:	04400a0e 	bge	zero,r17,82a18 <___vfprintf_internal_r+0x1258>
   829f0:	d8801f17 	ldw	r2,124(sp)
   829f4:	1c47883a 	add	r3,r3,r17
   829f8:	44000015 	stw	r16,0(r8)
   829fc:	10800044 	addi	r2,r2,1
   82a00:	44400115 	stw	r17,4(r8)
   82a04:	d8c02015 	stw	r3,128(sp)
   82a08:	d8801f15 	stw	r2,124(sp)
   82a0c:	010001c4 	movi	r4,7
   82a10:	20826516 	blt	r4,r2,833a8 <___vfprintf_internal_r+0x1be8>
   82a14:	42000204 	addi	r8,r8,8
   82a18:	88026116 	blt	r17,zero,833a0 <___vfprintf_internal_r+0x1be0>
   82a1c:	d9003217 	ldw	r4,200(sp)
   82a20:	2463c83a 	sub	r17,r4,r17
   82a24:	04407b0e 	bge	zero,r17,82c14 <___vfprintf_internal_r+0x1454>
   82a28:	05800404 	movi	r22,16
   82a2c:	d8801f17 	ldw	r2,124(sp)
   82a30:	b4419d0e 	bge	r22,r17,830a8 <___vfprintf_internal_r+0x18e8>
   82a34:	01000274 	movhi	r4,9
   82a38:	2102b484 	addi	r4,r4,2770
   82a3c:	d9002b15 	stw	r4,172(sp)
   82a40:	070001c4 	movi	fp,7
   82a44:	dcc02c17 	ldw	r19,176(sp)
   82a48:	00000306 	br	82a58 <___vfprintf_internal_r+0x1298>
   82a4c:	42000204 	addi	r8,r8,8
   82a50:	8c7ffc04 	addi	r17,r17,-16
   82a54:	b441970e 	bge	r22,r17,830b4 <___vfprintf_internal_r+0x18f4>
   82a58:	18c00404 	addi	r3,r3,16
   82a5c:	10800044 	addi	r2,r2,1
   82a60:	45000015 	stw	r20,0(r8)
   82a64:	45800115 	stw	r22,4(r8)
   82a68:	d8c02015 	stw	r3,128(sp)
   82a6c:	d8801f15 	stw	r2,124(sp)
   82a70:	e0bff60e 	bge	fp,r2,82a4c <__alt_data_end+0xfffb6f5c>
   82a74:	d9801e04 	addi	r6,sp,120
   82a78:	b80b883a 	mov	r5,r23
   82a7c:	9809883a 	mov	r4,r19
   82a80:	0088e180 	call	88e18 <__sprint_r>
   82a84:	103c501e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   82a88:	d8c02017 	ldw	r3,128(sp)
   82a8c:	d8801f17 	ldw	r2,124(sp)
   82a90:	da000404 	addi	r8,sp,16
   82a94:	003fee06 	br	82a50 <__alt_data_end+0xfffb6f60>
   82a98:	d9002c17 	ldw	r4,176(sp)
   82a9c:	d9801e04 	addi	r6,sp,120
   82aa0:	b80b883a 	mov	r5,r23
   82aa4:	0088e180 	call	88e18 <__sprint_r>
   82aa8:	103c471e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   82aac:	d8c02017 	ldw	r3,128(sp)
   82ab0:	df002787 	ldb	fp,158(sp)
   82ab4:	da000404 	addi	r8,sp,16
   82ab8:	003d5606 	br	82014 <__alt_data_end+0xfffb6524>
   82abc:	9080040c 	andi	r2,r18,16
   82ac0:	10016126 	beq	r2,zero,83048 <___vfprintf_internal_r+0x1888>
   82ac4:	d8802d17 	ldw	r2,180(sp)
   82ac8:	14c00017 	ldw	r19,0(r2)
   82acc:	10800104 	addi	r2,r2,4
   82ad0:	d8802d15 	stw	r2,180(sp)
   82ad4:	982dd7fa 	srai	r22,r19,31
   82ad8:	b005883a 	mov	r2,r22
   82adc:	003c8206 	br	81ce8 <__alt_data_end+0xfffb61f8>
   82ae0:	9080040c 	andi	r2,r18,16
   82ae4:	10003526 	beq	r2,zero,82bbc <___vfprintf_internal_r+0x13fc>
   82ae8:	d9402d17 	ldw	r5,180(sp)
   82aec:	d8c02917 	ldw	r3,164(sp)
   82af0:	d8002785 	stb	zero,158(sp)
   82af4:	28800104 	addi	r2,r5,4
   82af8:	2cc00017 	ldw	r19,0(r5)
   82afc:	002d883a 	mov	r22,zero
   82b00:	18003716 	blt	r3,zero,82be0 <___vfprintf_internal_r+0x1420>
   82b04:	00ffdfc4 	movi	r3,-129
   82b08:	d8802d15 	stw	r2,180(sp)
   82b0c:	90e4703a 	and	r18,r18,r3
   82b10:	0039883a 	mov	fp,zero
   82b14:	983df326 	beq	r19,zero,822e4 <__alt_data_end+0xfffb67f4>
   82b18:	00800244 	movi	r2,9
   82b1c:	14fc7b36 	bltu	r2,r19,81d0c <__alt_data_end+0xfffb621c>
   82b20:	d8c02817 	ldw	r3,160(sp)
   82b24:	dc001dc4 	addi	r16,sp,119
   82b28:	9cc00c04 	addi	r19,r19,48
   82b2c:	1c07c83a 	sub	r3,r3,r16
   82b30:	dcc01dc5 	stb	r19,119(sp)
   82b34:	d8c02e15 	stw	r3,184(sp)
   82b38:	003ce806 	br	81edc <__alt_data_end+0xfffb63ec>
   82b3c:	d8803317 	ldw	r2,204(sp)
   82b40:	143fffc4 	addi	r16,r2,-1
   82b44:	043f4d0e 	bge	zero,r16,8287c <__alt_data_end+0xfffb6d8c>
   82b48:	07000404 	movi	fp,16
   82b4c:	e400810e 	bge	fp,r16,82d54 <___vfprintf_internal_r+0x1594>
   82b50:	01400274 	movhi	r5,9
   82b54:	2942b484 	addi	r5,r5,2770
   82b58:	d9402b15 	stw	r5,172(sp)
   82b5c:	01c001c4 	movi	r7,7
   82b60:	dcc02c17 	ldw	r19,176(sp)
   82b64:	00000306 	br	82b74 <___vfprintf_internal_r+0x13b4>
   82b68:	b5800204 	addi	r22,r22,8
   82b6c:	843ffc04 	addi	r16,r16,-16
   82b70:	e4007b0e 	bge	fp,r16,82d60 <___vfprintf_internal_r+0x15a0>
   82b74:	18c00404 	addi	r3,r3,16
   82b78:	8c400044 	addi	r17,r17,1
   82b7c:	b5000015 	stw	r20,0(r22)
   82b80:	b7000115 	stw	fp,4(r22)
   82b84:	d8c02015 	stw	r3,128(sp)
   82b88:	dc401f15 	stw	r17,124(sp)
   82b8c:	3c7ff60e 	bge	r7,r17,82b68 <__alt_data_end+0xfffb7078>
   82b90:	d9801e04 	addi	r6,sp,120
   82b94:	b80b883a 	mov	r5,r23
   82b98:	9809883a 	mov	r4,r19
   82b9c:	d9c03c15 	stw	r7,240(sp)
   82ba0:	0088e180 	call	88e18 <__sprint_r>
   82ba4:	d9c03c17 	ldw	r7,240(sp)
   82ba8:	103c071e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   82bac:	d8c02017 	ldw	r3,128(sp)
   82bb0:	dc401f17 	ldw	r17,124(sp)
   82bb4:	dd800404 	addi	r22,sp,16
   82bb8:	003fec06 	br	82b6c <__alt_data_end+0xfffb707c>
   82bbc:	9080100c 	andi	r2,r18,64
   82bc0:	d8002785 	stb	zero,158(sp)
   82bc4:	10010e26 	beq	r2,zero,83000 <___vfprintf_internal_r+0x1840>
   82bc8:	d9002d17 	ldw	r4,180(sp)
   82bcc:	d9402917 	ldw	r5,164(sp)
   82bd0:	002d883a 	mov	r22,zero
   82bd4:	20800104 	addi	r2,r4,4
   82bd8:	24c0000b 	ldhu	r19,0(r4)
   82bdc:	283fc90e 	bge	r5,zero,82b04 <__alt_data_end+0xfffb7014>
   82be0:	d8802d15 	stw	r2,180(sp)
   82be4:	0039883a 	mov	fp,zero
   82be8:	9d84b03a 	or	r2,r19,r22
   82bec:	103c461e 	bne	r2,zero,81d08 <__alt_data_end+0xfffb6218>
   82bf0:	00800044 	movi	r2,1
   82bf4:	003e6c06 	br	825a8 <__alt_data_end+0xfffb6ab8>
   82bf8:	d9002c17 	ldw	r4,176(sp)
   82bfc:	d9801e04 	addi	r6,sp,120
   82c00:	b80b883a 	mov	r5,r23
   82c04:	0088e180 	call	88e18 <__sprint_r>
   82c08:	103bef1e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   82c0c:	d8c02017 	ldw	r3,128(sp)
   82c10:	da000404 	addi	r8,sp,16
   82c14:	d9003217 	ldw	r4,200(sp)
   82c18:	d8802617 	ldw	r2,152(sp)
   82c1c:	d9403317 	ldw	r5,204(sp)
   82c20:	8123883a 	add	r17,r16,r4
   82c24:	11400216 	blt	r2,r5,82c30 <___vfprintf_internal_r+0x1470>
   82c28:	9100004c 	andi	r4,r18,1
   82c2c:	20000d26 	beq	r4,zero,82c64 <___vfprintf_internal_r+0x14a4>
   82c30:	d9003717 	ldw	r4,220(sp)
   82c34:	d9403417 	ldw	r5,208(sp)
   82c38:	1907883a 	add	r3,r3,r4
   82c3c:	d9001f17 	ldw	r4,124(sp)
   82c40:	41400015 	stw	r5,0(r8)
   82c44:	d9403717 	ldw	r5,220(sp)
   82c48:	21000044 	addi	r4,r4,1
   82c4c:	d8c02015 	stw	r3,128(sp)
   82c50:	41400115 	stw	r5,4(r8)
   82c54:	d9001f15 	stw	r4,124(sp)
   82c58:	014001c4 	movi	r5,7
   82c5c:	2901e816 	blt	r5,r4,83400 <___vfprintf_internal_r+0x1c40>
   82c60:	42000204 	addi	r8,r8,8
   82c64:	d9003317 	ldw	r4,204(sp)
   82c68:	8121883a 	add	r16,r16,r4
   82c6c:	2085c83a 	sub	r2,r4,r2
   82c70:	8461c83a 	sub	r16,r16,r17
   82c74:	1400010e 	bge	r2,r16,82c7c <___vfprintf_internal_r+0x14bc>
   82c78:	1021883a 	mov	r16,r2
   82c7c:	04000a0e 	bge	zero,r16,82ca8 <___vfprintf_internal_r+0x14e8>
   82c80:	d9001f17 	ldw	r4,124(sp)
   82c84:	1c07883a 	add	r3,r3,r16
   82c88:	44400015 	stw	r17,0(r8)
   82c8c:	21000044 	addi	r4,r4,1
   82c90:	44000115 	stw	r16,4(r8)
   82c94:	d8c02015 	stw	r3,128(sp)
   82c98:	d9001f15 	stw	r4,124(sp)
   82c9c:	014001c4 	movi	r5,7
   82ca0:	2901fb16 	blt	r5,r4,83490 <___vfprintf_internal_r+0x1cd0>
   82ca4:	42000204 	addi	r8,r8,8
   82ca8:	8001f716 	blt	r16,zero,83488 <___vfprintf_internal_r+0x1cc8>
   82cac:	1421c83a 	sub	r16,r2,r16
   82cb0:	043d380e 	bge	zero,r16,82194 <__alt_data_end+0xfffb66a4>
   82cb4:	04400404 	movi	r17,16
   82cb8:	d8801f17 	ldw	r2,124(sp)
   82cbc:	8c3efb0e 	bge	r17,r16,828ac <__alt_data_end+0xfffb6dbc>
   82cc0:	01400274 	movhi	r5,9
   82cc4:	2942b484 	addi	r5,r5,2770
   82cc8:	d9402b15 	stw	r5,172(sp)
   82ccc:	058001c4 	movi	r22,7
   82cd0:	dcc02c17 	ldw	r19,176(sp)
   82cd4:	00000306 	br	82ce4 <___vfprintf_internal_r+0x1524>
   82cd8:	42000204 	addi	r8,r8,8
   82cdc:	843ffc04 	addi	r16,r16,-16
   82ce0:	8c3ef50e 	bge	r17,r16,828b8 <__alt_data_end+0xfffb6dc8>
   82ce4:	18c00404 	addi	r3,r3,16
   82ce8:	10800044 	addi	r2,r2,1
   82cec:	45000015 	stw	r20,0(r8)
   82cf0:	44400115 	stw	r17,4(r8)
   82cf4:	d8c02015 	stw	r3,128(sp)
   82cf8:	d8801f15 	stw	r2,124(sp)
   82cfc:	b0bff60e 	bge	r22,r2,82cd8 <__alt_data_end+0xfffb71e8>
   82d00:	d9801e04 	addi	r6,sp,120
   82d04:	b80b883a 	mov	r5,r23
   82d08:	9809883a 	mov	r4,r19
   82d0c:	0088e180 	call	88e18 <__sprint_r>
   82d10:	103bad1e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   82d14:	d8c02017 	ldw	r3,128(sp)
   82d18:	d8801f17 	ldw	r2,124(sp)
   82d1c:	da000404 	addi	r8,sp,16
   82d20:	003fee06 	br	82cdc <__alt_data_end+0xfffb71ec>
   82d24:	9088703a 	and	r4,r18,r2
   82d28:	203eab1e 	bne	r4,zero,827d8 <__alt_data_end+0xfffb6ce8>
   82d2c:	dc401f17 	ldw	r17,124(sp)
   82d30:	40800115 	stw	r2,4(r8)
   82d34:	44000015 	stw	r16,0(r8)
   82d38:	8c400044 	addi	r17,r17,1
   82d3c:	d8c02015 	stw	r3,128(sp)
   82d40:	dc401f15 	stw	r17,124(sp)
   82d44:	008001c4 	movi	r2,7
   82d48:	14400e16 	blt	r2,r17,82d84 <___vfprintf_internal_r+0x15c4>
   82d4c:	45800204 	addi	r22,r8,8
   82d50:	003eca06 	br	8287c <__alt_data_end+0xfffb6d8c>
   82d54:	01000274 	movhi	r4,9
   82d58:	2102b484 	addi	r4,r4,2770
   82d5c:	d9002b15 	stw	r4,172(sp)
   82d60:	d8802b17 	ldw	r2,172(sp)
   82d64:	1c07883a 	add	r3,r3,r16
   82d68:	8c400044 	addi	r17,r17,1
   82d6c:	b0800015 	stw	r2,0(r22)
   82d70:	b4000115 	stw	r16,4(r22)
   82d74:	d8c02015 	stw	r3,128(sp)
   82d78:	dc401f15 	stw	r17,124(sp)
   82d7c:	008001c4 	movi	r2,7
   82d80:	147ebd0e 	bge	r2,r17,82878 <__alt_data_end+0xfffb6d88>
   82d84:	d9002c17 	ldw	r4,176(sp)
   82d88:	d9801e04 	addi	r6,sp,120
   82d8c:	b80b883a 	mov	r5,r23
   82d90:	0088e180 	call	88e18 <__sprint_r>
   82d94:	103b8c1e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   82d98:	d8c02017 	ldw	r3,128(sp)
   82d9c:	dc401f17 	ldw	r17,124(sp)
   82da0:	dd800404 	addi	r22,sp,16
   82da4:	003eb506 	br	8287c <__alt_data_end+0xfffb6d8c>
   82da8:	d9002c17 	ldw	r4,176(sp)
   82dac:	d9801e04 	addi	r6,sp,120
   82db0:	b80b883a 	mov	r5,r23
   82db4:	0088e180 	call	88e18 <__sprint_r>
   82db8:	103b831e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   82dbc:	d8c02017 	ldw	r3,128(sp)
   82dc0:	dc401f17 	ldw	r17,124(sp)
   82dc4:	da000404 	addi	r8,sp,16
   82dc8:	003e8d06 	br	82800 <__alt_data_end+0xfffb6d10>
   82dcc:	d9002c17 	ldw	r4,176(sp)
   82dd0:	d9801e04 	addi	r6,sp,120
   82dd4:	b80b883a 	mov	r5,r23
   82dd8:	0088e180 	call	88e18 <__sprint_r>
   82ddc:	103b7a1e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   82de0:	d8c02017 	ldw	r3,128(sp)
   82de4:	dc401f17 	ldw	r17,124(sp)
   82de8:	dd800404 	addi	r22,sp,16
   82dec:	003e8f06 	br	8282c <__alt_data_end+0xfffb6d3c>
   82df0:	0027883a 	mov	r19,zero
   82df4:	003f4a06 	br	82b20 <__alt_data_end+0xfffb7030>
   82df8:	d9002c17 	ldw	r4,176(sp)
   82dfc:	d9801e04 	addi	r6,sp,120
   82e00:	b80b883a 	mov	r5,r23
   82e04:	0088e180 	call	88e18 <__sprint_r>
   82e08:	103b6f1e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   82e0c:	d8c02017 	ldw	r3,128(sp)
   82e10:	da000404 	addi	r8,sp,16
   82e14:	003c9d06 	br	8208c <__alt_data_end+0xfffb659c>
   82e18:	04e7c83a 	sub	r19,zero,r19
   82e1c:	9804c03a 	cmpne	r2,r19,zero
   82e20:	05adc83a 	sub	r22,zero,r22
   82e24:	b0adc83a 	sub	r22,r22,r2
   82e28:	d8802917 	ldw	r2,164(sp)
   82e2c:	07000b44 	movi	fp,45
   82e30:	df002785 	stb	fp,158(sp)
   82e34:	10017b16 	blt	r2,zero,83424 <___vfprintf_internal_r+0x1c64>
   82e38:	00bfdfc4 	movi	r2,-129
   82e3c:	90a4703a 	and	r18,r18,r2
   82e40:	003bb106 	br	81d08 <__alt_data_end+0xfffb6218>
   82e44:	d9003617 	ldw	r4,216(sp)
   82e48:	d9403817 	ldw	r5,224(sp)
   82e4c:	da003d15 	stw	r8,244(sp)
   82e50:	0088a3c0 	call	88a3c <__fpclassifyd>
   82e54:	da003d17 	ldw	r8,244(sp)
   82e58:	1000f026 	beq	r2,zero,8321c <___vfprintf_internal_r+0x1a5c>
   82e5c:	d9002917 	ldw	r4,164(sp)
   82e60:	05bff7c4 	movi	r22,-33
   82e64:	00bfffc4 	movi	r2,-1
   82e68:	8dac703a 	and	r22,r17,r22
   82e6c:	20820026 	beq	r4,r2,83670 <___vfprintf_internal_r+0x1eb0>
   82e70:	008011c4 	movi	r2,71
   82e74:	b081f726 	beq	r22,r2,83654 <___vfprintf_internal_r+0x1e94>
   82e78:	d9003817 	ldw	r4,224(sp)
   82e7c:	90c04014 	ori	r3,r18,256
   82e80:	d8c02b15 	stw	r3,172(sp)
   82e84:	20021516 	blt	r4,zero,836dc <___vfprintf_internal_r+0x1f1c>
   82e88:	dcc03817 	ldw	r19,224(sp)
   82e8c:	d8002a05 	stb	zero,168(sp)
   82e90:	00801984 	movi	r2,102
   82e94:	8881f926 	beq	r17,r2,8367c <___vfprintf_internal_r+0x1ebc>
   82e98:	00801184 	movi	r2,70
   82e9c:	88821c26 	beq	r17,r2,83710 <___vfprintf_internal_r+0x1f50>
   82ea0:	00801144 	movi	r2,69
   82ea4:	b081ef26 	beq	r22,r2,83664 <___vfprintf_internal_r+0x1ea4>
   82ea8:	d8c02917 	ldw	r3,164(sp)
   82eac:	d8802104 	addi	r2,sp,132
   82eb0:	d8800315 	stw	r2,12(sp)
   82eb4:	d9403617 	ldw	r5,216(sp)
   82eb8:	d8802504 	addi	r2,sp,148
   82ebc:	d9002c17 	ldw	r4,176(sp)
   82ec0:	d8800215 	stw	r2,8(sp)
   82ec4:	d8802604 	addi	r2,sp,152
   82ec8:	d8c00015 	stw	r3,0(sp)
   82ecc:	d8800115 	stw	r2,4(sp)
   82ed0:	01c00084 	movi	r7,2
   82ed4:	980d883a 	mov	r6,r19
   82ed8:	d8c03c15 	stw	r3,240(sp)
   82edc:	da003d15 	stw	r8,244(sp)
   82ee0:	0083de40 	call	83de4 <_dtoa_r>
   82ee4:	1021883a 	mov	r16,r2
   82ee8:	008019c4 	movi	r2,103
   82eec:	d8c03c17 	ldw	r3,240(sp)
   82ef0:	da003d17 	ldw	r8,244(sp)
   82ef4:	88817126 	beq	r17,r2,834bc <___vfprintf_internal_r+0x1cfc>
   82ef8:	008011c4 	movi	r2,71
   82efc:	88829226 	beq	r17,r2,83948 <___vfprintf_internal_r+0x2188>
   82f00:	80f9883a 	add	fp,r16,r3
   82f04:	d9003617 	ldw	r4,216(sp)
   82f08:	000d883a 	mov	r6,zero
   82f0c:	000f883a 	mov	r7,zero
   82f10:	980b883a 	mov	r5,r19
   82f14:	da003d15 	stw	r8,244(sp)
   82f18:	008c93c0 	call	8c93c <__eqdf2>
   82f1c:	da003d17 	ldw	r8,244(sp)
   82f20:	10018d26 	beq	r2,zero,83558 <___vfprintf_internal_r+0x1d98>
   82f24:	d8802117 	ldw	r2,132(sp)
   82f28:	1700062e 	bgeu	r2,fp,82f44 <___vfprintf_internal_r+0x1784>
   82f2c:	01000c04 	movi	r4,48
   82f30:	10c00044 	addi	r3,r2,1
   82f34:	d8c02115 	stw	r3,132(sp)
   82f38:	11000005 	stb	r4,0(r2)
   82f3c:	d8802117 	ldw	r2,132(sp)
   82f40:	173ffb36 	bltu	r2,fp,82f30 <__alt_data_end+0xfffb7440>
   82f44:	1405c83a 	sub	r2,r2,r16
   82f48:	d8803315 	stw	r2,204(sp)
   82f4c:	008011c4 	movi	r2,71
   82f50:	b0817626 	beq	r22,r2,8352c <___vfprintf_internal_r+0x1d6c>
   82f54:	00801944 	movi	r2,101
   82f58:	1442810e 	bge	r2,r17,83960 <___vfprintf_internal_r+0x21a0>
   82f5c:	d8c02617 	ldw	r3,152(sp)
   82f60:	00801984 	movi	r2,102
   82f64:	d8c03215 	stw	r3,200(sp)
   82f68:	8881fe26 	beq	r17,r2,83764 <___vfprintf_internal_r+0x1fa4>
   82f6c:	d8c03217 	ldw	r3,200(sp)
   82f70:	d9003317 	ldw	r4,204(sp)
   82f74:	1901dd16 	blt	r3,r4,836ec <___vfprintf_internal_r+0x1f2c>
   82f78:	9480004c 	andi	r18,r18,1
   82f7c:	90022b1e 	bne	r18,zero,8382c <___vfprintf_internal_r+0x206c>
   82f80:	1805883a 	mov	r2,r3
   82f84:	18028016 	blt	r3,zero,83988 <___vfprintf_internal_r+0x21c8>
   82f88:	d8c03217 	ldw	r3,200(sp)
   82f8c:	044019c4 	movi	r17,103
   82f90:	d8c02e15 	stw	r3,184(sp)
   82f94:	df002a07 	ldb	fp,168(sp)
   82f98:	e001531e 	bne	fp,zero,834e8 <___vfprintf_internal_r+0x1d28>
   82f9c:	df002783 	ldbu	fp,158(sp)
   82fa0:	d8802a15 	stw	r2,168(sp)
   82fa4:	dc802b17 	ldw	r18,172(sp)
   82fa8:	d8002915 	stw	zero,164(sp)
   82fac:	003bd106 	br	81ef4 <__alt_data_end+0xfffb6404>
   82fb0:	d8802d17 	ldw	r2,180(sp)
   82fb4:	d8c02d17 	ldw	r3,180(sp)
   82fb8:	d9002d17 	ldw	r4,180(sp)
   82fbc:	10800017 	ldw	r2,0(r2)
   82fc0:	18c00117 	ldw	r3,4(r3)
   82fc4:	21000204 	addi	r4,r4,8
   82fc8:	d8803615 	stw	r2,216(sp)
   82fcc:	d8c03815 	stw	r3,224(sp)
   82fd0:	d9002d15 	stw	r4,180(sp)
   82fd4:	003b7506 	br	81dac <__alt_data_end+0xfffb62bc>
   82fd8:	ac400007 	ldb	r17,0(r21)
   82fdc:	003a5906 	br	81944 <__alt_data_end+0xfffb5e54>
   82fe0:	9080100c 	andi	r2,r18,64
   82fe4:	1000a826 	beq	r2,zero,83288 <___vfprintf_internal_r+0x1ac8>
   82fe8:	d9002d17 	ldw	r4,180(sp)
   82fec:	002d883a 	mov	r22,zero
   82ff0:	24c0000b 	ldhu	r19,0(r4)
   82ff4:	21000104 	addi	r4,r4,4
   82ff8:	d9002d15 	stw	r4,180(sp)
   82ffc:	003ccb06 	br	8232c <__alt_data_end+0xfffb683c>
   83000:	d8c02d17 	ldw	r3,180(sp)
   83004:	d9002917 	ldw	r4,164(sp)
   83008:	002d883a 	mov	r22,zero
   8300c:	18800104 	addi	r2,r3,4
   83010:	1cc00017 	ldw	r19,0(r3)
   83014:	203ebb0e 	bge	r4,zero,82b04 <__alt_data_end+0xfffb7014>
   83018:	003ef106 	br	82be0 <__alt_data_end+0xfffb70f0>
   8301c:	9080040c 	andi	r2,r18,16
   83020:	1000921e 	bne	r2,zero,8326c <___vfprintf_internal_r+0x1aac>
   83024:	9480100c 	andi	r18,r18,64
   83028:	90013926 	beq	r18,zero,83510 <___vfprintf_internal_r+0x1d50>
   8302c:	d9002d17 	ldw	r4,180(sp)
   83030:	d9402f17 	ldw	r5,188(sp)
   83034:	20800017 	ldw	r2,0(r4)
   83038:	21000104 	addi	r4,r4,4
   8303c:	d9002d15 	stw	r4,180(sp)
   83040:	1140000d 	sth	r5,0(r2)
   83044:	003a1606 	br	818a0 <__alt_data_end+0xfffb5db0>
   83048:	9080100c 	andi	r2,r18,64
   8304c:	10008026 	beq	r2,zero,83250 <___vfprintf_internal_r+0x1a90>
   83050:	d8c02d17 	ldw	r3,180(sp)
   83054:	1cc0000f 	ldh	r19,0(r3)
   83058:	18c00104 	addi	r3,r3,4
   8305c:	d8c02d15 	stw	r3,180(sp)
   83060:	982dd7fa 	srai	r22,r19,31
   83064:	b005883a 	mov	r2,r22
   83068:	003b1f06 	br	81ce8 <__alt_data_end+0xfffb61f8>
   8306c:	9080100c 	andi	r2,r18,64
   83070:	d8002785 	stb	zero,158(sp)
   83074:	10008a1e 	bne	r2,zero,832a0 <___vfprintf_internal_r+0x1ae0>
   83078:	d9402d17 	ldw	r5,180(sp)
   8307c:	d8c02917 	ldw	r3,164(sp)
   83080:	002d883a 	mov	r22,zero
   83084:	28800104 	addi	r2,r5,4
   83088:	2cc00017 	ldw	r19,0(r5)
   8308c:	183e4b0e 	bge	r3,zero,829bc <__alt_data_end+0xfffb6ecc>
   83090:	9d86b03a 	or	r3,r19,r22
   83094:	d8802d15 	stw	r2,180(sp)
   83098:	183e4c1e 	bne	r3,zero,829cc <__alt_data_end+0xfffb6edc>
   8309c:	0039883a 	mov	fp,zero
   830a0:	0005883a 	mov	r2,zero
   830a4:	003d4006 	br	825a8 <__alt_data_end+0xfffb6ab8>
   830a8:	01400274 	movhi	r5,9
   830ac:	2942b484 	addi	r5,r5,2770
   830b0:	d9402b15 	stw	r5,172(sp)
   830b4:	d9402b17 	ldw	r5,172(sp)
   830b8:	1c47883a 	add	r3,r3,r17
   830bc:	10800044 	addi	r2,r2,1
   830c0:	41400015 	stw	r5,0(r8)
   830c4:	44400115 	stw	r17,4(r8)
   830c8:	d8c02015 	stw	r3,128(sp)
   830cc:	d8801f15 	stw	r2,124(sp)
   830d0:	010001c4 	movi	r4,7
   830d4:	20bec816 	blt	r4,r2,82bf8 <__alt_data_end+0xfffb7108>
   830d8:	42000204 	addi	r8,r8,8
   830dc:	003ecd06 	br	82c14 <__alt_data_end+0xfffb7124>
   830e0:	d9002917 	ldw	r4,164(sp)
   830e4:	d8002785 	stb	zero,158(sp)
   830e8:	203d2d16 	blt	r4,zero,825a0 <__alt_data_end+0xfffb6ab0>
   830ec:	00bfdfc4 	movi	r2,-129
   830f0:	90a4703a 	and	r18,r18,r2
   830f4:	003a9106 	br	81b3c <__alt_data_end+0xfffb604c>
   830f8:	01000274 	movhi	r4,9
   830fc:	2102b484 	addi	r4,r4,2770
   83100:	d9002b15 	stw	r4,172(sp)
   83104:	003c0c06 	br	82138 <__alt_data_end+0xfffb6648>
   83108:	d9002c17 	ldw	r4,176(sp)
   8310c:	d9801e04 	addi	r6,sp,120
   83110:	b80b883a 	mov	r5,r23
   83114:	0088e180 	call	88e18 <__sprint_r>
   83118:	103aab1e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   8311c:	d8c02017 	ldw	r3,128(sp)
   83120:	da000404 	addi	r8,sp,16
   83124:	003d4106 	br	8262c <__alt_data_end+0xfffb6b3c>
   83128:	d8801f17 	ldw	r2,124(sp)
   8312c:	01400274 	movhi	r5,9
   83130:	01000044 	movi	r4,1
   83134:	18c00044 	addi	r3,r3,1
   83138:	10800044 	addi	r2,r2,1
   8313c:	2942b404 	addi	r5,r5,2768
   83140:	41000115 	stw	r4,4(r8)
   83144:	41400015 	stw	r5,0(r8)
   83148:	d8c02015 	stw	r3,128(sp)
   8314c:	d8801f15 	stw	r2,124(sp)
   83150:	010001c4 	movi	r4,7
   83154:	20805c16 	blt	r4,r2,832c8 <___vfprintf_internal_r+0x1b08>
   83158:	42000204 	addi	r8,r8,8
   8315c:	8800041e 	bne	r17,zero,83170 <___vfprintf_internal_r+0x19b0>
   83160:	d8803317 	ldw	r2,204(sp)
   83164:	1000021e 	bne	r2,zero,83170 <___vfprintf_internal_r+0x19b0>
   83168:	9080004c 	andi	r2,r18,1
   8316c:	103c0926 	beq	r2,zero,82194 <__alt_data_end+0xfffb66a4>
   83170:	d9003717 	ldw	r4,220(sp)
   83174:	d8801f17 	ldw	r2,124(sp)
   83178:	d9403417 	ldw	r5,208(sp)
   8317c:	20c7883a 	add	r3,r4,r3
   83180:	10800044 	addi	r2,r2,1
   83184:	41000115 	stw	r4,4(r8)
   83188:	41400015 	stw	r5,0(r8)
   8318c:	d8c02015 	stw	r3,128(sp)
   83190:	d8801f15 	stw	r2,124(sp)
   83194:	010001c4 	movi	r4,7
   83198:	20812116 	blt	r4,r2,83620 <___vfprintf_internal_r+0x1e60>
   8319c:	42000204 	addi	r8,r8,8
   831a0:	0463c83a 	sub	r17,zero,r17
   831a4:	0440730e 	bge	zero,r17,83374 <___vfprintf_internal_r+0x1bb4>
   831a8:	05800404 	movi	r22,16
   831ac:	b440860e 	bge	r22,r17,833c8 <___vfprintf_internal_r+0x1c08>
   831b0:	01400274 	movhi	r5,9
   831b4:	2942b484 	addi	r5,r5,2770
   831b8:	d9402b15 	stw	r5,172(sp)
   831bc:	070001c4 	movi	fp,7
   831c0:	dcc02c17 	ldw	r19,176(sp)
   831c4:	00000306 	br	831d4 <___vfprintf_internal_r+0x1a14>
   831c8:	42000204 	addi	r8,r8,8
   831cc:	8c7ffc04 	addi	r17,r17,-16
   831d0:	b440800e 	bge	r22,r17,833d4 <___vfprintf_internal_r+0x1c14>
   831d4:	18c00404 	addi	r3,r3,16
   831d8:	10800044 	addi	r2,r2,1
   831dc:	45000015 	stw	r20,0(r8)
   831e0:	45800115 	stw	r22,4(r8)
   831e4:	d8c02015 	stw	r3,128(sp)
   831e8:	d8801f15 	stw	r2,124(sp)
   831ec:	e0bff60e 	bge	fp,r2,831c8 <__alt_data_end+0xfffb76d8>
   831f0:	d9801e04 	addi	r6,sp,120
   831f4:	b80b883a 	mov	r5,r23
   831f8:	9809883a 	mov	r4,r19
   831fc:	0088e180 	call	88e18 <__sprint_r>
   83200:	103a711e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   83204:	d8c02017 	ldw	r3,128(sp)
   83208:	d8801f17 	ldw	r2,124(sp)
   8320c:	da000404 	addi	r8,sp,16
   83210:	003fee06 	br	831cc <__alt_data_end+0xfffb76dc>
   83214:	00bfffc4 	movi	r2,-1
   83218:	003a6f06 	br	81bd8 <__alt_data_end+0xfffb60e8>
   8321c:	008011c4 	movi	r2,71
   83220:	1440b816 	blt	r2,r17,83504 <___vfprintf_internal_r+0x1d44>
   83224:	04000274 	movhi	r16,9
   83228:	8402a604 	addi	r16,r16,2712
   8322c:	00c000c4 	movi	r3,3
   83230:	00bfdfc4 	movi	r2,-129
   83234:	d8c02a15 	stw	r3,168(sp)
   83238:	90a4703a 	and	r18,r18,r2
   8323c:	df002783 	ldbu	fp,158(sp)
   83240:	d8c02e15 	stw	r3,184(sp)
   83244:	d8002915 	stw	zero,164(sp)
   83248:	d8003215 	stw	zero,200(sp)
   8324c:	003b2906 	br	81ef4 <__alt_data_end+0xfffb6404>
   83250:	d9002d17 	ldw	r4,180(sp)
   83254:	24c00017 	ldw	r19,0(r4)
   83258:	21000104 	addi	r4,r4,4
   8325c:	d9002d15 	stw	r4,180(sp)
   83260:	982dd7fa 	srai	r22,r19,31
   83264:	b005883a 	mov	r2,r22
   83268:	003a9f06 	br	81ce8 <__alt_data_end+0xfffb61f8>
   8326c:	d9402d17 	ldw	r5,180(sp)
   83270:	d8c02f17 	ldw	r3,188(sp)
   83274:	28800017 	ldw	r2,0(r5)
   83278:	29400104 	addi	r5,r5,4
   8327c:	d9402d15 	stw	r5,180(sp)
   83280:	10c00015 	stw	r3,0(r2)
   83284:	00398606 	br	818a0 <__alt_data_end+0xfffb5db0>
   83288:	d9402d17 	ldw	r5,180(sp)
   8328c:	002d883a 	mov	r22,zero
   83290:	2cc00017 	ldw	r19,0(r5)
   83294:	29400104 	addi	r5,r5,4
   83298:	d9402d15 	stw	r5,180(sp)
   8329c:	003c2306 	br	8232c <__alt_data_end+0xfffb683c>
   832a0:	d8c02d17 	ldw	r3,180(sp)
   832a4:	d9002917 	ldw	r4,164(sp)
   832a8:	002d883a 	mov	r22,zero
   832ac:	18800104 	addi	r2,r3,4
   832b0:	1cc0000b 	ldhu	r19,0(r3)
   832b4:	203dc10e 	bge	r4,zero,829bc <__alt_data_end+0xfffb6ecc>
   832b8:	003f7506 	br	83090 <__alt_data_end+0xfffb75a0>
   832bc:	04000274 	movhi	r16,9
   832c0:	8402a404 	addi	r16,r16,2704
   832c4:	003acc06 	br	81df8 <__alt_data_end+0xfffb6308>
   832c8:	d9002c17 	ldw	r4,176(sp)
   832cc:	d9801e04 	addi	r6,sp,120
   832d0:	b80b883a 	mov	r5,r23
   832d4:	0088e180 	call	88e18 <__sprint_r>
   832d8:	103a3b1e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   832dc:	dc402617 	ldw	r17,152(sp)
   832e0:	d8c02017 	ldw	r3,128(sp)
   832e4:	da000404 	addi	r8,sp,16
   832e8:	003f9c06 	br	8315c <__alt_data_end+0xfffb766c>
   832ec:	ac400043 	ldbu	r17,1(r21)
   832f0:	94800814 	ori	r18,r18,32
   832f4:	ad400044 	addi	r21,r21,1
   832f8:	8c403fcc 	andi	r17,r17,255
   832fc:	8c40201c 	xori	r17,r17,128
   83300:	8c7fe004 	addi	r17,r17,-128
   83304:	00398f06 	br	81944 <__alt_data_end+0xfffb5e54>
   83308:	d8c02d15 	stw	r3,180(sp)
   8330c:	0039883a 	mov	fp,zero
   83310:	003e3506 	br	82be8 <__alt_data_end+0xfffb70f8>
   83314:	d9002c17 	ldw	r4,176(sp)
   83318:	d9801e04 	addi	r6,sp,120
   8331c:	b80b883a 	mov	r5,r23
   83320:	0088e180 	call	88e18 <__sprint_r>
   83324:	103a281e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   83328:	d8c02017 	ldw	r3,128(sp)
   8332c:	da000404 	addi	r8,sp,16
   83330:	003cd006 	br	82674 <__alt_data_end+0xfffb6b84>
   83334:	8009883a 	mov	r4,r16
   83338:	da003d15 	stw	r8,244(sp)
   8333c:	00816d80 	call	816d8 <strlen>
   83340:	d8802e15 	stw	r2,184(sp)
   83344:	da003d17 	ldw	r8,244(sp)
   83348:	103c340e 	bge	r2,zero,8241c <__alt_data_end+0xfffb692c>
   8334c:	0005883a 	mov	r2,zero
   83350:	003c3206 	br	8241c <__alt_data_end+0xfffb692c>
   83354:	d9002c17 	ldw	r4,176(sp)
   83358:	d9801e04 	addi	r6,sp,120
   8335c:	b80b883a 	mov	r5,r23
   83360:	0088e180 	call	88e18 <__sprint_r>
   83364:	103a181e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   83368:	d8c02017 	ldw	r3,128(sp)
   8336c:	d8801f17 	ldw	r2,124(sp)
   83370:	da000404 	addi	r8,sp,16
   83374:	d9403317 	ldw	r5,204(sp)
   83378:	10800044 	addi	r2,r2,1
   8337c:	44000015 	stw	r16,0(r8)
   83380:	28c7883a 	add	r3,r5,r3
   83384:	003b7d06 	br	8217c <__alt_data_end+0xfffb668c>
   83388:	01000274 	movhi	r4,9
   8338c:	2102b884 	addi	r4,r4,2786
   83390:	d9003515 	stw	r4,212(sp)
   83394:	003b1406 	br	81fe8 <__alt_data_end+0xfffb64f8>
   83398:	013fffc4 	movi	r4,-1
   8339c:	003a3506 	br	81c74 <__alt_data_end+0xfffb6184>
   833a0:	0023883a 	mov	r17,zero
   833a4:	003d9d06 	br	82a1c <__alt_data_end+0xfffb6f2c>
   833a8:	d9002c17 	ldw	r4,176(sp)
   833ac:	d9801e04 	addi	r6,sp,120
   833b0:	b80b883a 	mov	r5,r23
   833b4:	0088e180 	call	88e18 <__sprint_r>
   833b8:	103a031e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   833bc:	d8c02017 	ldw	r3,128(sp)
   833c0:	da000404 	addi	r8,sp,16
   833c4:	003d9406 	br	82a18 <__alt_data_end+0xfffb6f28>
   833c8:	01000274 	movhi	r4,9
   833cc:	2102b484 	addi	r4,r4,2770
   833d0:	d9002b15 	stw	r4,172(sp)
   833d4:	d9002b17 	ldw	r4,172(sp)
   833d8:	1c47883a 	add	r3,r3,r17
   833dc:	10800044 	addi	r2,r2,1
   833e0:	41000015 	stw	r4,0(r8)
   833e4:	44400115 	stw	r17,4(r8)
   833e8:	d8c02015 	stw	r3,128(sp)
   833ec:	d8801f15 	stw	r2,124(sp)
   833f0:	010001c4 	movi	r4,7
   833f4:	20bfd716 	blt	r4,r2,83354 <__alt_data_end+0xfffb7864>
   833f8:	42000204 	addi	r8,r8,8
   833fc:	003fdd06 	br	83374 <__alt_data_end+0xfffb7884>
   83400:	d9002c17 	ldw	r4,176(sp)
   83404:	d9801e04 	addi	r6,sp,120
   83408:	b80b883a 	mov	r5,r23
   8340c:	0088e180 	call	88e18 <__sprint_r>
   83410:	1039ed1e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   83414:	d8802617 	ldw	r2,152(sp)
   83418:	d8c02017 	ldw	r3,128(sp)
   8341c:	da000404 	addi	r8,sp,16
   83420:	003e1006 	br	82c64 <__alt_data_end+0xfffb7174>
   83424:	00800044 	movi	r2,1
   83428:	10803fcc 	andi	r2,r2,255
   8342c:	00c00044 	movi	r3,1
   83430:	10fa3526 	beq	r2,r3,81d08 <__alt_data_end+0xfffb6218>
   83434:	00c00084 	movi	r3,2
   83438:	10fbcb26 	beq	r2,r3,82368 <__alt_data_end+0xfffb6878>
   8343c:	003a8f06 	br	81e7c <__alt_data_end+0xfffb638c>
   83440:	01000274 	movhi	r4,9
   83444:	2102b884 	addi	r4,r4,2786
   83448:	d9003515 	stw	r4,212(sp)
   8344c:	003b7606 	br	82228 <__alt_data_end+0xfffb6738>
   83450:	d8802917 	ldw	r2,164(sp)
   83454:	00c00184 	movi	r3,6
   83458:	1880012e 	bgeu	r3,r2,83460 <___vfprintf_internal_r+0x1ca0>
   8345c:	1805883a 	mov	r2,r3
   83460:	d8802e15 	stw	r2,184(sp)
   83464:	1000ef16 	blt	r2,zero,83824 <___vfprintf_internal_r+0x2064>
   83468:	04000274 	movhi	r16,9
   8346c:	d8802a15 	stw	r2,168(sp)
   83470:	dcc02d15 	stw	r19,180(sp)
   83474:	d8002915 	stw	zero,164(sp)
   83478:	d8003215 	stw	zero,200(sp)
   8347c:	8402b204 	addi	r16,r16,2760
   83480:	0039883a 	mov	fp,zero
   83484:	003aa206 	br	81f10 <__alt_data_end+0xfffb6420>
   83488:	0021883a 	mov	r16,zero
   8348c:	003e0706 	br	82cac <__alt_data_end+0xfffb71bc>
   83490:	d9002c17 	ldw	r4,176(sp)
   83494:	d9801e04 	addi	r6,sp,120
   83498:	b80b883a 	mov	r5,r23
   8349c:	0088e180 	call	88e18 <__sprint_r>
   834a0:	1039c91e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   834a4:	d8802617 	ldw	r2,152(sp)
   834a8:	d9403317 	ldw	r5,204(sp)
   834ac:	d8c02017 	ldw	r3,128(sp)
   834b0:	da000404 	addi	r8,sp,16
   834b4:	2885c83a 	sub	r2,r5,r2
   834b8:	003dfb06 	br	82ca8 <__alt_data_end+0xfffb71b8>
   834bc:	9080004c 	andi	r2,r18,1
   834c0:	103e8f1e 	bne	r2,zero,82f00 <__alt_data_end+0xfffb7410>
   834c4:	d8802117 	ldw	r2,132(sp)
   834c8:	003e9e06 	br	82f44 <__alt_data_end+0xfffb7454>
   834cc:	1025883a 	mov	r18,r2
   834d0:	0039883a 	mov	fp,zero
   834d4:	00800084 	movi	r2,2
   834d8:	003fd306 	br	83428 <__alt_data_end+0xfffb7938>
   834dc:	07000b44 	movi	fp,45
   834e0:	df002785 	stb	fp,158(sp)
   834e4:	003a4006 	br	81de8 <__alt_data_end+0xfffb62f8>
   834e8:	00c00b44 	movi	r3,45
   834ec:	d8c02785 	stb	r3,158(sp)
   834f0:	d8802a15 	stw	r2,168(sp)
   834f4:	dc802b17 	ldw	r18,172(sp)
   834f8:	d8002915 	stw	zero,164(sp)
   834fc:	07000b44 	movi	fp,45
   83500:	003a8006 	br	81f04 <__alt_data_end+0xfffb6414>
   83504:	04000274 	movhi	r16,9
   83508:	8402a704 	addi	r16,r16,2716
   8350c:	003f4706 	br	8322c <__alt_data_end+0xfffb773c>
   83510:	d8c02d17 	ldw	r3,180(sp)
   83514:	d9002f17 	ldw	r4,188(sp)
   83518:	18800017 	ldw	r2,0(r3)
   8351c:	18c00104 	addi	r3,r3,4
   83520:	d8c02d15 	stw	r3,180(sp)
   83524:	11000015 	stw	r4,0(r2)
   83528:	0038dd06 	br	818a0 <__alt_data_end+0xfffb5db0>
   8352c:	dd802617 	ldw	r22,152(sp)
   83530:	00bfff44 	movi	r2,-3
   83534:	b0801c16 	blt	r22,r2,835a8 <___vfprintf_internal_r+0x1de8>
   83538:	d9402917 	ldw	r5,164(sp)
   8353c:	2d801a16 	blt	r5,r22,835a8 <___vfprintf_internal_r+0x1de8>
   83540:	dd803215 	stw	r22,200(sp)
   83544:	003e8906 	br	82f6c <__alt_data_end+0xfffb747c>
   83548:	01000274 	movhi	r4,9
   8354c:	2102b484 	addi	r4,r4,2770
   83550:	d9002b15 	stw	r4,172(sp)
   83554:	003c9106 	br	8279c <__alt_data_end+0xfffb6cac>
   83558:	e005883a 	mov	r2,fp
   8355c:	003e7906 	br	82f44 <__alt_data_end+0xfffb7454>
   83560:	d9402917 	ldw	r5,164(sp)
   83564:	df002783 	ldbu	fp,158(sp)
   83568:	dcc02d15 	stw	r19,180(sp)
   8356c:	d9402a15 	stw	r5,168(sp)
   83570:	d9402e15 	stw	r5,184(sp)
   83574:	d8002915 	stw	zero,164(sp)
   83578:	d8003215 	stw	zero,200(sp)
   8357c:	003a5d06 	br	81ef4 <__alt_data_end+0xfffb6404>
   83580:	9080004c 	andi	r2,r18,1
   83584:	0039883a 	mov	fp,zero
   83588:	10000426 	beq	r2,zero,8359c <___vfprintf_internal_r+0x1ddc>
   8358c:	00800c04 	movi	r2,48
   83590:	dc001dc4 	addi	r16,sp,119
   83594:	d8801dc5 	stb	r2,119(sp)
   83598:	003b8006 	br	8239c <__alt_data_end+0xfffb68ac>
   8359c:	d8002e15 	stw	zero,184(sp)
   835a0:	dc001e04 	addi	r16,sp,120
   835a4:	003a4d06 	br	81edc <__alt_data_end+0xfffb63ec>
   835a8:	8c7fff84 	addi	r17,r17,-2
   835ac:	b5bfffc4 	addi	r22,r22,-1
   835b0:	dd802615 	stw	r22,152(sp)
   835b4:	dc4022c5 	stb	r17,139(sp)
   835b8:	b000bf16 	blt	r22,zero,838b8 <___vfprintf_internal_r+0x20f8>
   835bc:	00800ac4 	movi	r2,43
   835c0:	d8802305 	stb	r2,140(sp)
   835c4:	00800244 	movi	r2,9
   835c8:	15807016 	blt	r2,r22,8378c <___vfprintf_internal_r+0x1fcc>
   835cc:	00800c04 	movi	r2,48
   835d0:	b5800c04 	addi	r22,r22,48
   835d4:	d8802345 	stb	r2,141(sp)
   835d8:	dd802385 	stb	r22,142(sp)
   835dc:	d88023c4 	addi	r2,sp,143
   835e0:	df0022c4 	addi	fp,sp,139
   835e4:	d8c03317 	ldw	r3,204(sp)
   835e8:	1739c83a 	sub	fp,r2,fp
   835ec:	d9003317 	ldw	r4,204(sp)
   835f0:	e0c7883a 	add	r3,fp,r3
   835f4:	df003a15 	stw	fp,232(sp)
   835f8:	d8c02e15 	stw	r3,184(sp)
   835fc:	00800044 	movi	r2,1
   83600:	1100b30e 	bge	r2,r4,838d0 <___vfprintf_internal_r+0x2110>
   83604:	d8c02e17 	ldw	r3,184(sp)
   83608:	18c00044 	addi	r3,r3,1
   8360c:	d8c02e15 	stw	r3,184(sp)
   83610:	1805883a 	mov	r2,r3
   83614:	1800ac16 	blt	r3,zero,838c8 <___vfprintf_internal_r+0x2108>
   83618:	d8003215 	stw	zero,200(sp)
   8361c:	003e5d06 	br	82f94 <__alt_data_end+0xfffb74a4>
   83620:	d9002c17 	ldw	r4,176(sp)
   83624:	d9801e04 	addi	r6,sp,120
   83628:	b80b883a 	mov	r5,r23
   8362c:	0088e180 	call	88e18 <__sprint_r>
   83630:	1039651e 	bne	r2,zero,81bc8 <__alt_data_end+0xfffb60d8>
   83634:	dc402617 	ldw	r17,152(sp)
   83638:	d8c02017 	ldw	r3,128(sp)
   8363c:	d8801f17 	ldw	r2,124(sp)
   83640:	da000404 	addi	r8,sp,16
   83644:	003ed606 	br	831a0 <__alt_data_end+0xfffb76b0>
   83648:	582b883a 	mov	r21,r11
   8364c:	d8002915 	stw	zero,164(sp)
   83650:	0038bd06 	br	81948 <__alt_data_end+0xfffb5e58>
   83654:	d8802917 	ldw	r2,164(sp)
   83658:	103e071e 	bne	r2,zero,82e78 <__alt_data_end+0xfffb7388>
   8365c:	dc002915 	stw	r16,164(sp)
   83660:	003e0506 	br	82e78 <__alt_data_end+0xfffb7388>
   83664:	d9002917 	ldw	r4,164(sp)
   83668:	20c00044 	addi	r3,r4,1
   8366c:	003e0f06 	br	82eac <__alt_data_end+0xfffb73bc>
   83670:	01400184 	movi	r5,6
   83674:	d9402915 	stw	r5,164(sp)
   83678:	003dff06 	br	82e78 <__alt_data_end+0xfffb7388>
   8367c:	d8802104 	addi	r2,sp,132
   83680:	d8800315 	stw	r2,12(sp)
   83684:	d8802504 	addi	r2,sp,148
   83688:	d8800215 	stw	r2,8(sp)
   8368c:	d8802604 	addi	r2,sp,152
   83690:	d8800115 	stw	r2,4(sp)
   83694:	d8802917 	ldw	r2,164(sp)
   83698:	d9403617 	ldw	r5,216(sp)
   8369c:	d9002c17 	ldw	r4,176(sp)
   836a0:	d8800015 	stw	r2,0(sp)
   836a4:	01c000c4 	movi	r7,3
   836a8:	980d883a 	mov	r6,r19
   836ac:	da003d15 	stw	r8,244(sp)
   836b0:	0083de40 	call	83de4 <_dtoa_r>
   836b4:	d8c02917 	ldw	r3,164(sp)
   836b8:	da003d17 	ldw	r8,244(sp)
   836bc:	1021883a 	mov	r16,r2
   836c0:	10f9883a 	add	fp,r2,r3
   836c4:	81000007 	ldb	r4,0(r16)
   836c8:	00800c04 	movi	r2,48
   836cc:	20805e26 	beq	r4,r2,83848 <___vfprintf_internal_r+0x2088>
   836d0:	d8c02617 	ldw	r3,152(sp)
   836d4:	e0f9883a 	add	fp,fp,r3
   836d8:	003e0a06 	br	82f04 <__alt_data_end+0xfffb7414>
   836dc:	00c00b44 	movi	r3,45
   836e0:	24e0003c 	xorhi	r19,r4,32768
   836e4:	d8c02a05 	stb	r3,168(sp)
   836e8:	003de906 	br	82e90 <__alt_data_end+0xfffb73a0>
   836ec:	d8c03217 	ldw	r3,200(sp)
   836f0:	00c07a0e 	bge	zero,r3,838dc <___vfprintf_internal_r+0x211c>
   836f4:	00800044 	movi	r2,1
   836f8:	d9003317 	ldw	r4,204(sp)
   836fc:	1105883a 	add	r2,r2,r4
   83700:	d8802e15 	stw	r2,184(sp)
   83704:	10004e16 	blt	r2,zero,83840 <___vfprintf_internal_r+0x2080>
   83708:	044019c4 	movi	r17,103
   8370c:	003e2106 	br	82f94 <__alt_data_end+0xfffb74a4>
   83710:	d9002917 	ldw	r4,164(sp)
   83714:	d8802104 	addi	r2,sp,132
   83718:	d8800315 	stw	r2,12(sp)
   8371c:	d9000015 	stw	r4,0(sp)
   83720:	d8802504 	addi	r2,sp,148
   83724:	d9403617 	ldw	r5,216(sp)
   83728:	d9002c17 	ldw	r4,176(sp)
   8372c:	d8800215 	stw	r2,8(sp)
   83730:	d8802604 	addi	r2,sp,152
   83734:	d8800115 	stw	r2,4(sp)
   83738:	01c000c4 	movi	r7,3
   8373c:	980d883a 	mov	r6,r19
   83740:	da003d15 	stw	r8,244(sp)
   83744:	0083de40 	call	83de4 <_dtoa_r>
   83748:	d8c02917 	ldw	r3,164(sp)
   8374c:	da003d17 	ldw	r8,244(sp)
   83750:	1021883a 	mov	r16,r2
   83754:	00801184 	movi	r2,70
   83758:	80f9883a 	add	fp,r16,r3
   8375c:	88bfd926 	beq	r17,r2,836c4 <__alt_data_end+0xfffb7bd4>
   83760:	003de806 	br	82f04 <__alt_data_end+0xfffb7414>
   83764:	d9002917 	ldw	r4,164(sp)
   83768:	00c04d0e 	bge	zero,r3,838a0 <___vfprintf_internal_r+0x20e0>
   8376c:	2000441e 	bne	r4,zero,83880 <___vfprintf_internal_r+0x20c0>
   83770:	9480004c 	andi	r18,r18,1
   83774:	9000421e 	bne	r18,zero,83880 <___vfprintf_internal_r+0x20c0>
   83778:	1805883a 	mov	r2,r3
   8377c:	18007016 	blt	r3,zero,83940 <___vfprintf_internal_r+0x2180>
   83780:	d8c03217 	ldw	r3,200(sp)
   83784:	d8c02e15 	stw	r3,184(sp)
   83788:	003e0206 	br	82f94 <__alt_data_end+0xfffb74a4>
   8378c:	df0022c4 	addi	fp,sp,139
   83790:	dc002915 	stw	r16,164(sp)
   83794:	4027883a 	mov	r19,r8
   83798:	e021883a 	mov	r16,fp
   8379c:	b009883a 	mov	r4,r22
   837a0:	01400284 	movi	r5,10
   837a4:	00813ec0 	call	813ec <__modsi3>
   837a8:	10800c04 	addi	r2,r2,48
   837ac:	843fffc4 	addi	r16,r16,-1
   837b0:	b009883a 	mov	r4,r22
   837b4:	01400284 	movi	r5,10
   837b8:	80800005 	stb	r2,0(r16)
   837bc:	00813680 	call	81368 <__divsi3>
   837c0:	102d883a 	mov	r22,r2
   837c4:	00800244 	movi	r2,9
   837c8:	15bff416 	blt	r2,r22,8379c <__alt_data_end+0xfffb7cac>
   837cc:	9811883a 	mov	r8,r19
   837d0:	b0800c04 	addi	r2,r22,48
   837d4:	8027883a 	mov	r19,r16
   837d8:	997fffc4 	addi	r5,r19,-1
   837dc:	98bfffc5 	stb	r2,-1(r19)
   837e0:	dc002917 	ldw	r16,164(sp)
   837e4:	2f006a2e 	bgeu	r5,fp,83990 <___vfprintf_internal_r+0x21d0>
   837e8:	d9c02384 	addi	r7,sp,142
   837ec:	3ccfc83a 	sub	r7,r7,r19
   837f0:	d9002344 	addi	r4,sp,141
   837f4:	e1cf883a 	add	r7,fp,r7
   837f8:	00000106 	br	83800 <___vfprintf_internal_r+0x2040>
   837fc:	28800003 	ldbu	r2,0(r5)
   83800:	20800005 	stb	r2,0(r4)
   83804:	21000044 	addi	r4,r4,1
   83808:	29400044 	addi	r5,r5,1
   8380c:	393ffb1e 	bne	r7,r4,837fc <__alt_data_end+0xfffb7d0c>
   83810:	d8802304 	addi	r2,sp,140
   83814:	14c5c83a 	sub	r2,r2,r19
   83818:	d8c02344 	addi	r3,sp,141
   8381c:	1885883a 	add	r2,r3,r2
   83820:	003f7006 	br	835e4 <__alt_data_end+0xfffb7af4>
   83824:	0005883a 	mov	r2,zero
   83828:	003f0f06 	br	83468 <__alt_data_end+0xfffb7978>
   8382c:	d8c03217 	ldw	r3,200(sp)
   83830:	18c00044 	addi	r3,r3,1
   83834:	d8c02e15 	stw	r3,184(sp)
   83838:	1805883a 	mov	r2,r3
   8383c:	183fb20e 	bge	r3,zero,83708 <__alt_data_end+0xfffb7c18>
   83840:	0005883a 	mov	r2,zero
   83844:	003fb006 	br	83708 <__alt_data_end+0xfffb7c18>
   83848:	d9003617 	ldw	r4,216(sp)
   8384c:	000d883a 	mov	r6,zero
   83850:	000f883a 	mov	r7,zero
   83854:	980b883a 	mov	r5,r19
   83858:	d8c03c15 	stw	r3,240(sp)
   8385c:	da003d15 	stw	r8,244(sp)
   83860:	008c93c0 	call	8c93c <__eqdf2>
   83864:	d8c03c17 	ldw	r3,240(sp)
   83868:	da003d17 	ldw	r8,244(sp)
   8386c:	103f9826 	beq	r2,zero,836d0 <__alt_data_end+0xfffb7be0>
   83870:	00800044 	movi	r2,1
   83874:	10c7c83a 	sub	r3,r2,r3
   83878:	d8c02615 	stw	r3,152(sp)
   8387c:	003f9506 	br	836d4 <__alt_data_end+0xfffb7be4>
   83880:	d9002917 	ldw	r4,164(sp)
   83884:	d8c03217 	ldw	r3,200(sp)
   83888:	20800044 	addi	r2,r4,1
   8388c:	1885883a 	add	r2,r3,r2
   83890:	d8802e15 	stw	r2,184(sp)
   83894:	103dbf0e 	bge	r2,zero,82f94 <__alt_data_end+0xfffb74a4>
   83898:	0005883a 	mov	r2,zero
   8389c:	003dbd06 	br	82f94 <__alt_data_end+0xfffb74a4>
   838a0:	2000211e 	bne	r4,zero,83928 <___vfprintf_internal_r+0x2168>
   838a4:	9480004c 	andi	r18,r18,1
   838a8:	90001f1e 	bne	r18,zero,83928 <___vfprintf_internal_r+0x2168>
   838ac:	00800044 	movi	r2,1
   838b0:	d8802e15 	stw	r2,184(sp)
   838b4:	003db706 	br	82f94 <__alt_data_end+0xfffb74a4>
   838b8:	00800b44 	movi	r2,45
   838bc:	05adc83a 	sub	r22,zero,r22
   838c0:	d8802305 	stb	r2,140(sp)
   838c4:	003f3f06 	br	835c4 <__alt_data_end+0xfffb7ad4>
   838c8:	0005883a 	mov	r2,zero
   838cc:	003f5206 	br	83618 <__alt_data_end+0xfffb7b28>
   838d0:	90a4703a 	and	r18,r18,r2
   838d4:	903f4e26 	beq	r18,zero,83610 <__alt_data_end+0xfffb7b20>
   838d8:	003f4a06 	br	83604 <__alt_data_end+0xfffb7b14>
   838dc:	00800084 	movi	r2,2
   838e0:	10c5c83a 	sub	r2,r2,r3
   838e4:	003f8406 	br	836f8 <__alt_data_end+0xfffb7c08>
   838e8:	d8802d17 	ldw	r2,180(sp)
   838ec:	d9002d17 	ldw	r4,180(sp)
   838f0:	ac400043 	ldbu	r17,1(r21)
   838f4:	10800017 	ldw	r2,0(r2)
   838f8:	582b883a 	mov	r21,r11
   838fc:	d8802915 	stw	r2,164(sp)
   83900:	20800104 	addi	r2,r4,4
   83904:	d9002917 	ldw	r4,164(sp)
   83908:	d8802d15 	stw	r2,180(sp)
   8390c:	203e7a0e 	bge	r4,zero,832f8 <__alt_data_end+0xfffb7808>
   83910:	8c403fcc 	andi	r17,r17,255
   83914:	00bfffc4 	movi	r2,-1
   83918:	8c40201c 	xori	r17,r17,128
   8391c:	d8802915 	stw	r2,164(sp)
   83920:	8c7fe004 	addi	r17,r17,-128
   83924:	00380706 	br	81944 <__alt_data_end+0xfffb5e54>
   83928:	d8c02917 	ldw	r3,164(sp)
   8392c:	18c00084 	addi	r3,r3,2
   83930:	d8c02e15 	stw	r3,184(sp)
   83934:	1805883a 	mov	r2,r3
   83938:	183d960e 	bge	r3,zero,82f94 <__alt_data_end+0xfffb74a4>
   8393c:	003fd606 	br	83898 <__alt_data_end+0xfffb7da8>
   83940:	0005883a 	mov	r2,zero
   83944:	003f8e06 	br	83780 <__alt_data_end+0xfffb7c90>
   83948:	9080004c 	andi	r2,r18,1
   8394c:	103f811e 	bne	r2,zero,83754 <__alt_data_end+0xfffb7c64>
   83950:	d8802117 	ldw	r2,132(sp)
   83954:	1405c83a 	sub	r2,r2,r16
   83958:	d8803315 	stw	r2,204(sp)
   8395c:	b47ef326 	beq	r22,r17,8352c <__alt_data_end+0xfffb7a3c>
   83960:	dd802617 	ldw	r22,152(sp)
   83964:	003f1106 	br	835ac <__alt_data_end+0xfffb7abc>
   83968:	d9c02785 	stb	r7,158(sp)
   8396c:	00390406 	br	81d80 <__alt_data_end+0xfffb6290>
   83970:	d9c02785 	stb	r7,158(sp)
   83974:	0038d306 	br	81cc4 <__alt_data_end+0xfffb61d4>
   83978:	d9c02785 	stb	r7,158(sp)
   8397c:	003a6106 	br	82304 <__alt_data_end+0xfffb6814>
   83980:	d9c02785 	stb	r7,158(sp)
   83984:	003af806 	br	82568 <__alt_data_end+0xfffb6a78>
   83988:	0005883a 	mov	r2,zero
   8398c:	003d7e06 	br	82f88 <__alt_data_end+0xfffb7498>
   83990:	d8802344 	addi	r2,sp,141
   83994:	003f1306 	br	835e4 <__alt_data_end+0xfffb7af4>
   83998:	d9c02785 	stb	r7,158(sp)
   8399c:	00392306 	br	81e2c <__alt_data_end+0xfffb633c>
   839a0:	d9c02785 	stb	r7,158(sp)
   839a4:	003aa906 	br	8244c <__alt_data_end+0xfffb695c>
   839a8:	d9c02785 	stb	r7,158(sp)
   839ac:	003a3d06 	br	822a4 <__alt_data_end+0xfffb67b4>
   839b0:	d9c02785 	stb	r7,158(sp)
   839b4:	003aca06 	br	824e0 <__alt_data_end+0xfffb69f0>

000839b8 <__vfprintf_internal>:
   839b8:	00800274 	movhi	r2,9
   839bc:	108a3a04 	addi	r2,r2,10472
   839c0:	300f883a 	mov	r7,r6
   839c4:	280d883a 	mov	r6,r5
   839c8:	200b883a 	mov	r5,r4
   839cc:	11000017 	ldw	r4,0(r2)
   839d0:	00817c01 	jmpi	817c0 <___vfprintf_internal_r>

000839d4 <__sbprintf>:
   839d4:	2880030b 	ldhu	r2,12(r5)
   839d8:	2ac01917 	ldw	r11,100(r5)
   839dc:	2a80038b 	ldhu	r10,14(r5)
   839e0:	2a400717 	ldw	r9,28(r5)
   839e4:	2a000917 	ldw	r8,36(r5)
   839e8:	defee204 	addi	sp,sp,-1144
   839ec:	00c10004 	movi	r3,1024
   839f0:	dc011a15 	stw	r16,1128(sp)
   839f4:	10bfff4c 	andi	r2,r2,65533
   839f8:	2821883a 	mov	r16,r5
   839fc:	d8cb883a 	add	r5,sp,r3
   83a00:	dc811c15 	stw	r18,1136(sp)
   83a04:	dc411b15 	stw	r17,1132(sp)
   83a08:	dfc11d15 	stw	ra,1140(sp)
   83a0c:	2025883a 	mov	r18,r4
   83a10:	d881030d 	sth	r2,1036(sp)
   83a14:	dac11915 	stw	r11,1124(sp)
   83a18:	da81038d 	sth	r10,1038(sp)
   83a1c:	da410715 	stw	r9,1052(sp)
   83a20:	da010915 	stw	r8,1060(sp)
   83a24:	dec10015 	stw	sp,1024(sp)
   83a28:	dec10415 	stw	sp,1040(sp)
   83a2c:	d8c10215 	stw	r3,1032(sp)
   83a30:	d8c10515 	stw	r3,1044(sp)
   83a34:	d8010615 	stw	zero,1048(sp)
   83a38:	00817c00 	call	817c0 <___vfprintf_internal_r>
   83a3c:	1023883a 	mov	r17,r2
   83a40:	10000416 	blt	r2,zero,83a54 <__sbprintf+0x80>
   83a44:	d9410004 	addi	r5,sp,1024
   83a48:	9009883a 	mov	r4,r18
   83a4c:	00856880 	call	85688 <_fflush_r>
   83a50:	10000d1e 	bne	r2,zero,83a88 <__sbprintf+0xb4>
   83a54:	d881030b 	ldhu	r2,1036(sp)
   83a58:	1080100c 	andi	r2,r2,64
   83a5c:	10000326 	beq	r2,zero,83a6c <__sbprintf+0x98>
   83a60:	8080030b 	ldhu	r2,12(r16)
   83a64:	10801014 	ori	r2,r2,64
   83a68:	8080030d 	sth	r2,12(r16)
   83a6c:	8805883a 	mov	r2,r17
   83a70:	dfc11d17 	ldw	ra,1140(sp)
   83a74:	dc811c17 	ldw	r18,1136(sp)
   83a78:	dc411b17 	ldw	r17,1132(sp)
   83a7c:	dc011a17 	ldw	r16,1128(sp)
   83a80:	dec11e04 	addi	sp,sp,1144
   83a84:	f800283a 	ret
   83a88:	047fffc4 	movi	r17,-1
   83a8c:	003ff106 	br	83a54 <__alt_data_end+0xfffb7f64>

00083a90 <__swsetup_r>:
   83a90:	00800274 	movhi	r2,9
   83a94:	defffd04 	addi	sp,sp,-12
   83a98:	108a3a04 	addi	r2,r2,10472
   83a9c:	dc400115 	stw	r17,4(sp)
   83aa0:	2023883a 	mov	r17,r4
   83aa4:	11000017 	ldw	r4,0(r2)
   83aa8:	dc000015 	stw	r16,0(sp)
   83aac:	dfc00215 	stw	ra,8(sp)
   83ab0:	2821883a 	mov	r16,r5
   83ab4:	20000226 	beq	r4,zero,83ac0 <__swsetup_r+0x30>
   83ab8:	20800e17 	ldw	r2,56(r4)
   83abc:	10003126 	beq	r2,zero,83b84 <__swsetup_r+0xf4>
   83ac0:	8080030b 	ldhu	r2,12(r16)
   83ac4:	10c0020c 	andi	r3,r2,8
   83ac8:	1009883a 	mov	r4,r2
   83acc:	18000f26 	beq	r3,zero,83b0c <__swsetup_r+0x7c>
   83ad0:	80c00417 	ldw	r3,16(r16)
   83ad4:	18001526 	beq	r3,zero,83b2c <__swsetup_r+0x9c>
   83ad8:	1100004c 	andi	r4,r2,1
   83adc:	20001c1e 	bne	r4,zero,83b50 <__swsetup_r+0xc0>
   83ae0:	1080008c 	andi	r2,r2,2
   83ae4:	1000291e 	bne	r2,zero,83b8c <__swsetup_r+0xfc>
   83ae8:	80800517 	ldw	r2,20(r16)
   83aec:	80800215 	stw	r2,8(r16)
   83af0:	18001c26 	beq	r3,zero,83b64 <__swsetup_r+0xd4>
   83af4:	0005883a 	mov	r2,zero
   83af8:	dfc00217 	ldw	ra,8(sp)
   83afc:	dc400117 	ldw	r17,4(sp)
   83b00:	dc000017 	ldw	r16,0(sp)
   83b04:	dec00304 	addi	sp,sp,12
   83b08:	f800283a 	ret
   83b0c:	2080040c 	andi	r2,r4,16
   83b10:	10002e26 	beq	r2,zero,83bcc <__swsetup_r+0x13c>
   83b14:	2080010c 	andi	r2,r4,4
   83b18:	10001e1e 	bne	r2,zero,83b94 <__swsetup_r+0x104>
   83b1c:	80c00417 	ldw	r3,16(r16)
   83b20:	20800214 	ori	r2,r4,8
   83b24:	8080030d 	sth	r2,12(r16)
   83b28:	183feb1e 	bne	r3,zero,83ad8 <__alt_data_end+0xfffb7fe8>
   83b2c:	1100a00c 	andi	r4,r2,640
   83b30:	01408004 	movi	r5,512
   83b34:	217fe826 	beq	r4,r5,83ad8 <__alt_data_end+0xfffb7fe8>
   83b38:	800b883a 	mov	r5,r16
   83b3c:	8809883a 	mov	r4,r17
   83b40:	00866640 	call	86664 <__smakebuf_r>
   83b44:	8080030b 	ldhu	r2,12(r16)
   83b48:	80c00417 	ldw	r3,16(r16)
   83b4c:	003fe206 	br	83ad8 <__alt_data_end+0xfffb7fe8>
   83b50:	80800517 	ldw	r2,20(r16)
   83b54:	80000215 	stw	zero,8(r16)
   83b58:	0085c83a 	sub	r2,zero,r2
   83b5c:	80800615 	stw	r2,24(r16)
   83b60:	183fe41e 	bne	r3,zero,83af4 <__alt_data_end+0xfffb8004>
   83b64:	80c0030b 	ldhu	r3,12(r16)
   83b68:	0005883a 	mov	r2,zero
   83b6c:	1900200c 	andi	r4,r3,128
   83b70:	203fe126 	beq	r4,zero,83af8 <__alt_data_end+0xfffb8008>
   83b74:	18c01014 	ori	r3,r3,64
   83b78:	80c0030d 	sth	r3,12(r16)
   83b7c:	00bfffc4 	movi	r2,-1
   83b80:	003fdd06 	br	83af8 <__alt_data_end+0xfffb8008>
   83b84:	0085a640 	call	85a64 <__sinit>
   83b88:	003fcd06 	br	83ac0 <__alt_data_end+0xfffb7fd0>
   83b8c:	0005883a 	mov	r2,zero
   83b90:	003fd606 	br	83aec <__alt_data_end+0xfffb7ffc>
   83b94:	81400c17 	ldw	r5,48(r16)
   83b98:	28000626 	beq	r5,zero,83bb4 <__swsetup_r+0x124>
   83b9c:	80801004 	addi	r2,r16,64
   83ba0:	28800326 	beq	r5,r2,83bb0 <__swsetup_r+0x120>
   83ba4:	8809883a 	mov	r4,r17
   83ba8:	0085bd80 	call	85bd8 <_free_r>
   83bac:	8100030b 	ldhu	r4,12(r16)
   83bb0:	80000c15 	stw	zero,48(r16)
   83bb4:	80c00417 	ldw	r3,16(r16)
   83bb8:	00bff6c4 	movi	r2,-37
   83bbc:	1108703a 	and	r4,r2,r4
   83bc0:	80000115 	stw	zero,4(r16)
   83bc4:	80c00015 	stw	r3,0(r16)
   83bc8:	003fd506 	br	83b20 <__alt_data_end+0xfffb8030>
   83bcc:	00800244 	movi	r2,9
   83bd0:	88800015 	stw	r2,0(r17)
   83bd4:	20801014 	ori	r2,r4,64
   83bd8:	8080030d 	sth	r2,12(r16)
   83bdc:	00bfffc4 	movi	r2,-1
   83be0:	003fc506 	br	83af8 <__alt_data_end+0xfffb8008>

00083be4 <quorem>:
   83be4:	defff704 	addi	sp,sp,-36
   83be8:	dc800215 	stw	r18,8(sp)
   83bec:	20800417 	ldw	r2,16(r4)
   83bf0:	2c800417 	ldw	r18,16(r5)
   83bf4:	dfc00815 	stw	ra,32(sp)
   83bf8:	ddc00715 	stw	r23,28(sp)
   83bfc:	dd800615 	stw	r22,24(sp)
   83c00:	dd400515 	stw	r21,20(sp)
   83c04:	dd000415 	stw	r20,16(sp)
   83c08:	dcc00315 	stw	r19,12(sp)
   83c0c:	dc400115 	stw	r17,4(sp)
   83c10:	dc000015 	stw	r16,0(sp)
   83c14:	14807116 	blt	r2,r18,83ddc <quorem+0x1f8>
   83c18:	94bfffc4 	addi	r18,r18,-1
   83c1c:	94ad883a 	add	r22,r18,r18
   83c20:	b5ad883a 	add	r22,r22,r22
   83c24:	2c400504 	addi	r17,r5,20
   83c28:	8da9883a 	add	r20,r17,r22
   83c2c:	25400504 	addi	r21,r4,20
   83c30:	282f883a 	mov	r23,r5
   83c34:	adad883a 	add	r22,r21,r22
   83c38:	a1400017 	ldw	r5,0(r20)
   83c3c:	2021883a 	mov	r16,r4
   83c40:	b1000017 	ldw	r4,0(r22)
   83c44:	29400044 	addi	r5,r5,1
   83c48:	00814600 	call	81460 <__udivsi3>
   83c4c:	1027883a 	mov	r19,r2
   83c50:	10002c26 	beq	r2,zero,83d04 <quorem+0x120>
   83c54:	a813883a 	mov	r9,r21
   83c58:	880b883a 	mov	r5,r17
   83c5c:	0009883a 	mov	r4,zero
   83c60:	000d883a 	mov	r6,zero
   83c64:	2a000017 	ldw	r8,0(r5)
   83c68:	49c00017 	ldw	r7,0(r9)
   83c6c:	29400104 	addi	r5,r5,4
   83c70:	40bfffcc 	andi	r2,r8,65535
   83c74:	14c5383a 	mul	r2,r2,r19
   83c78:	4010d43a 	srli	r8,r8,16
   83c7c:	38ffffcc 	andi	r3,r7,65535
   83c80:	1105883a 	add	r2,r2,r4
   83c84:	1008d43a 	srli	r4,r2,16
   83c88:	44d1383a 	mul	r8,r8,r19
   83c8c:	198d883a 	add	r6,r3,r6
   83c90:	10ffffcc 	andi	r3,r2,65535
   83c94:	30c7c83a 	sub	r3,r6,r3
   83c98:	380ed43a 	srli	r7,r7,16
   83c9c:	4105883a 	add	r2,r8,r4
   83ca0:	180dd43a 	srai	r6,r3,16
   83ca4:	113fffcc 	andi	r4,r2,65535
   83ca8:	390fc83a 	sub	r7,r7,r4
   83cac:	398d883a 	add	r6,r7,r6
   83cb0:	300e943a 	slli	r7,r6,16
   83cb4:	18ffffcc 	andi	r3,r3,65535
   83cb8:	1008d43a 	srli	r4,r2,16
   83cbc:	38ceb03a 	or	r7,r7,r3
   83cc0:	49c00015 	stw	r7,0(r9)
   83cc4:	300dd43a 	srai	r6,r6,16
   83cc8:	4a400104 	addi	r9,r9,4
   83ccc:	a17fe52e 	bgeu	r20,r5,83c64 <__alt_data_end+0xfffb8174>
   83cd0:	b0800017 	ldw	r2,0(r22)
   83cd4:	10000b1e 	bne	r2,zero,83d04 <quorem+0x120>
   83cd8:	b0bfff04 	addi	r2,r22,-4
   83cdc:	a880082e 	bgeu	r21,r2,83d00 <quorem+0x11c>
   83ce0:	b0ffff17 	ldw	r3,-4(r22)
   83ce4:	18000326 	beq	r3,zero,83cf4 <quorem+0x110>
   83ce8:	00000506 	br	83d00 <quorem+0x11c>
   83cec:	10c00017 	ldw	r3,0(r2)
   83cf0:	1800031e 	bne	r3,zero,83d00 <quorem+0x11c>
   83cf4:	10bfff04 	addi	r2,r2,-4
   83cf8:	94bfffc4 	addi	r18,r18,-1
   83cfc:	a8bffb36 	bltu	r21,r2,83cec <__alt_data_end+0xfffb81fc>
   83d00:	84800415 	stw	r18,16(r16)
   83d04:	b80b883a 	mov	r5,r23
   83d08:	8009883a 	mov	r4,r16
   83d0c:	0087da40 	call	87da4 <__mcmp>
   83d10:	10002616 	blt	r2,zero,83dac <quorem+0x1c8>
   83d14:	9cc00044 	addi	r19,r19,1
   83d18:	a805883a 	mov	r2,r21
   83d1c:	000b883a 	mov	r5,zero
   83d20:	11000017 	ldw	r4,0(r2)
   83d24:	89800017 	ldw	r6,0(r17)
   83d28:	10800104 	addi	r2,r2,4
   83d2c:	20ffffcc 	andi	r3,r4,65535
   83d30:	194b883a 	add	r5,r3,r5
   83d34:	30ffffcc 	andi	r3,r6,65535
   83d38:	28c7c83a 	sub	r3,r5,r3
   83d3c:	300cd43a 	srli	r6,r6,16
   83d40:	2008d43a 	srli	r4,r4,16
   83d44:	180bd43a 	srai	r5,r3,16
   83d48:	18ffffcc 	andi	r3,r3,65535
   83d4c:	2189c83a 	sub	r4,r4,r6
   83d50:	2149883a 	add	r4,r4,r5
   83d54:	200c943a 	slli	r6,r4,16
   83d58:	8c400104 	addi	r17,r17,4
   83d5c:	200bd43a 	srai	r5,r4,16
   83d60:	30c6b03a 	or	r3,r6,r3
   83d64:	10ffff15 	stw	r3,-4(r2)
   83d68:	a47fed2e 	bgeu	r20,r17,83d20 <__alt_data_end+0xfffb8230>
   83d6c:	9485883a 	add	r2,r18,r18
   83d70:	1085883a 	add	r2,r2,r2
   83d74:	a887883a 	add	r3,r21,r2
   83d78:	18800017 	ldw	r2,0(r3)
   83d7c:	10000b1e 	bne	r2,zero,83dac <quorem+0x1c8>
   83d80:	18bfff04 	addi	r2,r3,-4
   83d84:	a880082e 	bgeu	r21,r2,83da8 <quorem+0x1c4>
   83d88:	18ffff17 	ldw	r3,-4(r3)
   83d8c:	18000326 	beq	r3,zero,83d9c <quorem+0x1b8>
   83d90:	00000506 	br	83da8 <quorem+0x1c4>
   83d94:	10c00017 	ldw	r3,0(r2)
   83d98:	1800031e 	bne	r3,zero,83da8 <quorem+0x1c4>
   83d9c:	10bfff04 	addi	r2,r2,-4
   83da0:	94bfffc4 	addi	r18,r18,-1
   83da4:	a8bffb36 	bltu	r21,r2,83d94 <__alt_data_end+0xfffb82a4>
   83da8:	84800415 	stw	r18,16(r16)
   83dac:	9805883a 	mov	r2,r19
   83db0:	dfc00817 	ldw	ra,32(sp)
   83db4:	ddc00717 	ldw	r23,28(sp)
   83db8:	dd800617 	ldw	r22,24(sp)
   83dbc:	dd400517 	ldw	r21,20(sp)
   83dc0:	dd000417 	ldw	r20,16(sp)
   83dc4:	dcc00317 	ldw	r19,12(sp)
   83dc8:	dc800217 	ldw	r18,8(sp)
   83dcc:	dc400117 	ldw	r17,4(sp)
   83dd0:	dc000017 	ldw	r16,0(sp)
   83dd4:	dec00904 	addi	sp,sp,36
   83dd8:	f800283a 	ret
   83ddc:	0005883a 	mov	r2,zero
   83de0:	003ff306 	br	83db0 <__alt_data_end+0xfffb82c0>

00083de4 <_dtoa_r>:
   83de4:	20801017 	ldw	r2,64(r4)
   83de8:	deffde04 	addi	sp,sp,-136
   83dec:	df002015 	stw	fp,128(sp)
   83df0:	dcc01b15 	stw	r19,108(sp)
   83df4:	dc801a15 	stw	r18,104(sp)
   83df8:	dc401915 	stw	r17,100(sp)
   83dfc:	dc001815 	stw	r16,96(sp)
   83e00:	dfc02115 	stw	ra,132(sp)
   83e04:	ddc01f15 	stw	r23,124(sp)
   83e08:	dd801e15 	stw	r22,120(sp)
   83e0c:	dd401d15 	stw	r21,116(sp)
   83e10:	dd001c15 	stw	r20,112(sp)
   83e14:	d9c00315 	stw	r7,12(sp)
   83e18:	2039883a 	mov	fp,r4
   83e1c:	3023883a 	mov	r17,r6
   83e20:	2825883a 	mov	r18,r5
   83e24:	dc002417 	ldw	r16,144(sp)
   83e28:	3027883a 	mov	r19,r6
   83e2c:	10000826 	beq	r2,zero,83e50 <_dtoa_r+0x6c>
   83e30:	21801117 	ldw	r6,68(r4)
   83e34:	00c00044 	movi	r3,1
   83e38:	100b883a 	mov	r5,r2
   83e3c:	1986983a 	sll	r3,r3,r6
   83e40:	11800115 	stw	r6,4(r2)
   83e44:	10c00215 	stw	r3,8(r2)
   83e48:	00875840 	call	87584 <_Bfree>
   83e4c:	e0001015 	stw	zero,64(fp)
   83e50:	88002e16 	blt	r17,zero,83f0c <_dtoa_r+0x128>
   83e54:	80000015 	stw	zero,0(r16)
   83e58:	889ffc2c 	andhi	r2,r17,32752
   83e5c:	00dffc34 	movhi	r3,32752
   83e60:	10c01c26 	beq	r2,r3,83ed4 <_dtoa_r+0xf0>
   83e64:	000d883a 	mov	r6,zero
   83e68:	000f883a 	mov	r7,zero
   83e6c:	9009883a 	mov	r4,r18
   83e70:	980b883a 	mov	r5,r19
   83e74:	008c93c0 	call	8c93c <__eqdf2>
   83e78:	10002b1e 	bne	r2,zero,83f28 <_dtoa_r+0x144>
   83e7c:	d9c02317 	ldw	r7,140(sp)
   83e80:	00800044 	movi	r2,1
   83e84:	38800015 	stw	r2,0(r7)
   83e88:	d8802517 	ldw	r2,148(sp)
   83e8c:	10019e26 	beq	r2,zero,84508 <_dtoa_r+0x724>
   83e90:	d8c02517 	ldw	r3,148(sp)
   83e94:	00800274 	movhi	r2,9
   83e98:	1082b444 	addi	r2,r2,2769
   83e9c:	18800015 	stw	r2,0(r3)
   83ea0:	10bfffc4 	addi	r2,r2,-1
   83ea4:	dfc02117 	ldw	ra,132(sp)
   83ea8:	df002017 	ldw	fp,128(sp)
   83eac:	ddc01f17 	ldw	r23,124(sp)
   83eb0:	dd801e17 	ldw	r22,120(sp)
   83eb4:	dd401d17 	ldw	r21,116(sp)
   83eb8:	dd001c17 	ldw	r20,112(sp)
   83ebc:	dcc01b17 	ldw	r19,108(sp)
   83ec0:	dc801a17 	ldw	r18,104(sp)
   83ec4:	dc401917 	ldw	r17,100(sp)
   83ec8:	dc001817 	ldw	r16,96(sp)
   83ecc:	dec02204 	addi	sp,sp,136
   83ed0:	f800283a 	ret
   83ed4:	d8c02317 	ldw	r3,140(sp)
   83ed8:	0089c3c4 	movi	r2,9999
   83edc:	18800015 	stw	r2,0(r3)
   83ee0:	90017726 	beq	r18,zero,844c0 <_dtoa_r+0x6dc>
   83ee4:	00800274 	movhi	r2,9
   83ee8:	1082c004 	addi	r2,r2,2816
   83eec:	d9002517 	ldw	r4,148(sp)
   83ef0:	203fec26 	beq	r4,zero,83ea4 <__alt_data_end+0xfffb83b4>
   83ef4:	10c000c7 	ldb	r3,3(r2)
   83ef8:	1801781e 	bne	r3,zero,844dc <_dtoa_r+0x6f8>
   83efc:	10c000c4 	addi	r3,r2,3
   83f00:	d9802517 	ldw	r6,148(sp)
   83f04:	30c00015 	stw	r3,0(r6)
   83f08:	003fe606 	br	83ea4 <__alt_data_end+0xfffb83b4>
   83f0c:	04e00034 	movhi	r19,32768
   83f10:	9cffffc4 	addi	r19,r19,-1
   83f14:	00800044 	movi	r2,1
   83f18:	8ce6703a 	and	r19,r17,r19
   83f1c:	80800015 	stw	r2,0(r16)
   83f20:	9823883a 	mov	r17,r19
   83f24:	003fcc06 	br	83e58 <__alt_data_end+0xfffb8368>
   83f28:	d8800204 	addi	r2,sp,8
   83f2c:	d8800015 	stw	r2,0(sp)
   83f30:	d9c00104 	addi	r7,sp,4
   83f34:	900b883a 	mov	r5,r18
   83f38:	980d883a 	mov	r6,r19
   83f3c:	e009883a 	mov	r4,fp
   83f40:	8820d53a 	srli	r16,r17,20
   83f44:	00881700 	call	88170 <__d2b>
   83f48:	d8800915 	stw	r2,36(sp)
   83f4c:	8001651e 	bne	r16,zero,844e4 <_dtoa_r+0x700>
   83f50:	dd800217 	ldw	r22,8(sp)
   83f54:	dc000117 	ldw	r16,4(sp)
   83f58:	00800804 	movi	r2,32
   83f5c:	b421883a 	add	r16,r22,r16
   83f60:	80c10c84 	addi	r3,r16,1074
   83f64:	10c2d10e 	bge	r2,r3,84aac <_dtoa_r+0xcc8>
   83f68:	00801004 	movi	r2,64
   83f6c:	81010484 	addi	r4,r16,1042
   83f70:	10c7c83a 	sub	r3,r2,r3
   83f74:	9108d83a 	srl	r4,r18,r4
   83f78:	88e2983a 	sll	r17,r17,r3
   83f7c:	2448b03a 	or	r4,r4,r17
   83f80:	008dd040 	call	8dd04 <__floatunsidf>
   83f84:	017f8434 	movhi	r5,65040
   83f88:	01800044 	movi	r6,1
   83f8c:	1009883a 	mov	r4,r2
   83f90:	194b883a 	add	r5,r3,r5
   83f94:	843fffc4 	addi	r16,r16,-1
   83f98:	d9801115 	stw	r6,68(sp)
   83f9c:	000d883a 	mov	r6,zero
   83fa0:	01cffe34 	movhi	r7,16376
   83fa4:	008d2ac0 	call	8d2ac <__subdf3>
   83fa8:	0198dbf4 	movhi	r6,25455
   83fac:	01cff4f4 	movhi	r7,16339
   83fb0:	3190d844 	addi	r6,r6,17249
   83fb4:	39e1e9c4 	addi	r7,r7,-30809
   83fb8:	1009883a 	mov	r4,r2
   83fbc:	180b883a 	mov	r5,r3
   83fc0:	008cb940 	call	8cb94 <__muldf3>
   83fc4:	01a2d874 	movhi	r6,35681
   83fc8:	01cff1f4 	movhi	r7,16327
   83fcc:	31b22cc4 	addi	r6,r6,-14157
   83fd0:	39e28a04 	addi	r7,r7,-30168
   83fd4:	180b883a 	mov	r5,r3
   83fd8:	1009883a 	mov	r4,r2
   83fdc:	008b7a80 	call	8b7a8 <__adddf3>
   83fe0:	8009883a 	mov	r4,r16
   83fe4:	1029883a 	mov	r20,r2
   83fe8:	1823883a 	mov	r17,r3
   83fec:	008dc280 	call	8dc28 <__floatsidf>
   83ff0:	019427f4 	movhi	r6,20639
   83ff4:	01cff4f4 	movhi	r7,16339
   83ff8:	319e7ec4 	addi	r6,r6,31227
   83ffc:	39d104c4 	addi	r7,r7,17427
   84000:	1009883a 	mov	r4,r2
   84004:	180b883a 	mov	r5,r3
   84008:	008cb940 	call	8cb94 <__muldf3>
   8400c:	100d883a 	mov	r6,r2
   84010:	180f883a 	mov	r7,r3
   84014:	a009883a 	mov	r4,r20
   84018:	880b883a 	mov	r5,r17
   8401c:	008b7a80 	call	8b7a8 <__adddf3>
   84020:	1009883a 	mov	r4,r2
   84024:	180b883a 	mov	r5,r3
   84028:	1029883a 	mov	r20,r2
   8402c:	1823883a 	mov	r17,r3
   84030:	008dba80 	call	8dba8 <__fixdfsi>
   84034:	000d883a 	mov	r6,zero
   84038:	000f883a 	mov	r7,zero
   8403c:	a009883a 	mov	r4,r20
   84040:	880b883a 	mov	r5,r17
   84044:	d8800515 	stw	r2,20(sp)
   84048:	008caa00 	call	8caa0 <__ledf2>
   8404c:	10028716 	blt	r2,zero,84a6c <_dtoa_r+0xc88>
   84050:	d8c00517 	ldw	r3,20(sp)
   84054:	00800584 	movi	r2,22
   84058:	10c27536 	bltu	r2,r3,84a30 <_dtoa_r+0xc4c>
   8405c:	180490fa 	slli	r2,r3,3
   84060:	00c00274 	movhi	r3,9
   84064:	18c2dc04 	addi	r3,r3,2928
   84068:	1885883a 	add	r2,r3,r2
   8406c:	11000017 	ldw	r4,0(r2)
   84070:	11400117 	ldw	r5,4(r2)
   84074:	900d883a 	mov	r6,r18
   84078:	980f883a 	mov	r7,r19
   8407c:	008c9c40 	call	8c9c4 <__gedf2>
   84080:	00828d0e 	bge	zero,r2,84ab8 <_dtoa_r+0xcd4>
   84084:	d9000517 	ldw	r4,20(sp)
   84088:	d8000e15 	stw	zero,56(sp)
   8408c:	213fffc4 	addi	r4,r4,-1
   84090:	d9000515 	stw	r4,20(sp)
   84094:	b42dc83a 	sub	r22,r22,r16
   84098:	b5bfffc4 	addi	r22,r22,-1
   8409c:	b0026f16 	blt	r22,zero,84a5c <_dtoa_r+0xc78>
   840a0:	d8000815 	stw	zero,32(sp)
   840a4:	d9c00517 	ldw	r7,20(sp)
   840a8:	38026416 	blt	r7,zero,84a3c <_dtoa_r+0xc58>
   840ac:	b1ed883a 	add	r22,r22,r7
   840b0:	d9c00d15 	stw	r7,52(sp)
   840b4:	d8000a15 	stw	zero,40(sp)
   840b8:	d9800317 	ldw	r6,12(sp)
   840bc:	00800244 	movi	r2,9
   840c0:	11811436 	bltu	r2,r6,84514 <_dtoa_r+0x730>
   840c4:	00800144 	movi	r2,5
   840c8:	1184e10e 	bge	r2,r6,85450 <_dtoa_r+0x166c>
   840cc:	31bfff04 	addi	r6,r6,-4
   840d0:	d9800315 	stw	r6,12(sp)
   840d4:	0023883a 	mov	r17,zero
   840d8:	d9800317 	ldw	r6,12(sp)
   840dc:	008000c4 	movi	r2,3
   840e0:	30836726 	beq	r6,r2,84e80 <_dtoa_r+0x109c>
   840e4:	1183410e 	bge	r2,r6,84dec <_dtoa_r+0x1008>
   840e8:	d9c00317 	ldw	r7,12(sp)
   840ec:	00800104 	movi	r2,4
   840f0:	38827c26 	beq	r7,r2,84ae4 <_dtoa_r+0xd00>
   840f4:	00800144 	movi	r2,5
   840f8:	3884c41e 	bne	r7,r2,8540c <_dtoa_r+0x1628>
   840fc:	00800044 	movi	r2,1
   84100:	d8800b15 	stw	r2,44(sp)
   84104:	d8c00517 	ldw	r3,20(sp)
   84108:	d9002217 	ldw	r4,136(sp)
   8410c:	1907883a 	add	r3,r3,r4
   84110:	19800044 	addi	r6,r3,1
   84114:	d8c00c15 	stw	r3,48(sp)
   84118:	d9800615 	stw	r6,24(sp)
   8411c:	0183a40e 	bge	zero,r6,84fb0 <_dtoa_r+0x11cc>
   84120:	d9800617 	ldw	r6,24(sp)
   84124:	3021883a 	mov	r16,r6
   84128:	e0001115 	stw	zero,68(fp)
   8412c:	008005c4 	movi	r2,23
   84130:	1184c92e 	bgeu	r2,r6,85458 <_dtoa_r+0x1674>
   84134:	00c00044 	movi	r3,1
   84138:	00800104 	movi	r2,4
   8413c:	1085883a 	add	r2,r2,r2
   84140:	11000504 	addi	r4,r2,20
   84144:	180b883a 	mov	r5,r3
   84148:	18c00044 	addi	r3,r3,1
   8414c:	313ffb2e 	bgeu	r6,r4,8413c <__alt_data_end+0xfffb864c>
   84150:	e1401115 	stw	r5,68(fp)
   84154:	e009883a 	mov	r4,fp
   84158:	00874dc0 	call	874dc <_Balloc>
   8415c:	d8800715 	stw	r2,28(sp)
   84160:	e0801015 	stw	r2,64(fp)
   84164:	00800384 	movi	r2,14
   84168:	1400f736 	bltu	r2,r16,84548 <_dtoa_r+0x764>
   8416c:	8800f626 	beq	r17,zero,84548 <_dtoa_r+0x764>
   84170:	d9c00517 	ldw	r7,20(sp)
   84174:	01c39a0e 	bge	zero,r7,84fe0 <_dtoa_r+0x11fc>
   84178:	388003cc 	andi	r2,r7,15
   8417c:	100490fa 	slli	r2,r2,3
   84180:	382bd13a 	srai	r21,r7,4
   84184:	00c00274 	movhi	r3,9
   84188:	18c2dc04 	addi	r3,r3,2928
   8418c:	1885883a 	add	r2,r3,r2
   84190:	a8c0040c 	andi	r3,r21,16
   84194:	12400017 	ldw	r9,0(r2)
   84198:	12000117 	ldw	r8,4(r2)
   8419c:	18037926 	beq	r3,zero,84f84 <_dtoa_r+0x11a0>
   841a0:	00800274 	movhi	r2,9
   841a4:	1082d204 	addi	r2,r2,2888
   841a8:	11800817 	ldw	r6,32(r2)
   841ac:	11c00917 	ldw	r7,36(r2)
   841b0:	9009883a 	mov	r4,r18
   841b4:	980b883a 	mov	r5,r19
   841b8:	da001715 	stw	r8,92(sp)
   841bc:	da401615 	stw	r9,88(sp)
   841c0:	008c0540 	call	8c054 <__divdf3>
   841c4:	da001717 	ldw	r8,92(sp)
   841c8:	da401617 	ldw	r9,88(sp)
   841cc:	ad4003cc 	andi	r21,r21,15
   841d0:	040000c4 	movi	r16,3
   841d4:	1023883a 	mov	r17,r2
   841d8:	1829883a 	mov	r20,r3
   841dc:	a8001126 	beq	r21,zero,84224 <_dtoa_r+0x440>
   841e0:	05c00274 	movhi	r23,9
   841e4:	bdc2d204 	addi	r23,r23,2888
   841e8:	4805883a 	mov	r2,r9
   841ec:	4007883a 	mov	r3,r8
   841f0:	a980004c 	andi	r6,r21,1
   841f4:	1009883a 	mov	r4,r2
   841f8:	a82bd07a 	srai	r21,r21,1
   841fc:	180b883a 	mov	r5,r3
   84200:	30000426 	beq	r6,zero,84214 <_dtoa_r+0x430>
   84204:	b9800017 	ldw	r6,0(r23)
   84208:	b9c00117 	ldw	r7,4(r23)
   8420c:	84000044 	addi	r16,r16,1
   84210:	008cb940 	call	8cb94 <__muldf3>
   84214:	bdc00204 	addi	r23,r23,8
   84218:	a83ff51e 	bne	r21,zero,841f0 <__alt_data_end+0xfffb8700>
   8421c:	1013883a 	mov	r9,r2
   84220:	1811883a 	mov	r8,r3
   84224:	480d883a 	mov	r6,r9
   84228:	400f883a 	mov	r7,r8
   8422c:	8809883a 	mov	r4,r17
   84230:	a00b883a 	mov	r5,r20
   84234:	008c0540 	call	8c054 <__divdf3>
   84238:	d8800f15 	stw	r2,60(sp)
   8423c:	d8c01015 	stw	r3,64(sp)
   84240:	d8c00e17 	ldw	r3,56(sp)
   84244:	18000626 	beq	r3,zero,84260 <_dtoa_r+0x47c>
   84248:	d9000f17 	ldw	r4,60(sp)
   8424c:	d9401017 	ldw	r5,64(sp)
   84250:	000d883a 	mov	r6,zero
   84254:	01cffc34 	movhi	r7,16368
   84258:	008caa00 	call	8caa0 <__ledf2>
   8425c:	10040b16 	blt	r2,zero,8528c <_dtoa_r+0x14a8>
   84260:	8009883a 	mov	r4,r16
   84264:	008dc280 	call	8dc28 <__floatsidf>
   84268:	d9800f17 	ldw	r6,60(sp)
   8426c:	d9c01017 	ldw	r7,64(sp)
   84270:	1009883a 	mov	r4,r2
   84274:	180b883a 	mov	r5,r3
   84278:	008cb940 	call	8cb94 <__muldf3>
   8427c:	000d883a 	mov	r6,zero
   84280:	01d00734 	movhi	r7,16412
   84284:	1009883a 	mov	r4,r2
   84288:	180b883a 	mov	r5,r3
   8428c:	008b7a80 	call	8b7a8 <__adddf3>
   84290:	1021883a 	mov	r16,r2
   84294:	d8800617 	ldw	r2,24(sp)
   84298:	047f3034 	movhi	r17,64704
   8429c:	1c63883a 	add	r17,r3,r17
   842a0:	10031826 	beq	r2,zero,84f04 <_dtoa_r+0x1120>
   842a4:	d8c00517 	ldw	r3,20(sp)
   842a8:	db000617 	ldw	r12,24(sp)
   842ac:	d8c01315 	stw	r3,76(sp)
   842b0:	d9000b17 	ldw	r4,44(sp)
   842b4:	20038f26 	beq	r4,zero,850f4 <_dtoa_r+0x1310>
   842b8:	60bfffc4 	addi	r2,r12,-1
   842bc:	100490fa 	slli	r2,r2,3
   842c0:	00c00274 	movhi	r3,9
   842c4:	18c2dc04 	addi	r3,r3,2928
   842c8:	1885883a 	add	r2,r3,r2
   842cc:	11800017 	ldw	r6,0(r2)
   842d0:	11c00117 	ldw	r7,4(r2)
   842d4:	d8800717 	ldw	r2,28(sp)
   842d8:	0009883a 	mov	r4,zero
   842dc:	014ff834 	movhi	r5,16352
   842e0:	db001615 	stw	r12,88(sp)
   842e4:	15c00044 	addi	r23,r2,1
   842e8:	008c0540 	call	8c054 <__divdf3>
   842ec:	800d883a 	mov	r6,r16
   842f0:	880f883a 	mov	r7,r17
   842f4:	1009883a 	mov	r4,r2
   842f8:	180b883a 	mov	r5,r3
   842fc:	008d2ac0 	call	8d2ac <__subdf3>
   84300:	d9401017 	ldw	r5,64(sp)
   84304:	d9000f17 	ldw	r4,60(sp)
   84308:	102b883a 	mov	r21,r2
   8430c:	d8c01215 	stw	r3,72(sp)
   84310:	008dba80 	call	8dba8 <__fixdfsi>
   84314:	1009883a 	mov	r4,r2
   84318:	1029883a 	mov	r20,r2
   8431c:	008dc280 	call	8dc28 <__floatsidf>
   84320:	d9000f17 	ldw	r4,60(sp)
   84324:	d9401017 	ldw	r5,64(sp)
   84328:	100d883a 	mov	r6,r2
   8432c:	180f883a 	mov	r7,r3
   84330:	008d2ac0 	call	8d2ac <__subdf3>
   84334:	1823883a 	mov	r17,r3
   84338:	d8c00717 	ldw	r3,28(sp)
   8433c:	d9401217 	ldw	r5,72(sp)
   84340:	a2000c04 	addi	r8,r20,48
   84344:	1021883a 	mov	r16,r2
   84348:	1a000005 	stb	r8,0(r3)
   8434c:	800d883a 	mov	r6,r16
   84350:	880f883a 	mov	r7,r17
   84354:	a809883a 	mov	r4,r21
   84358:	4029883a 	mov	r20,r8
   8435c:	008c9c40 	call	8c9c4 <__gedf2>
   84360:	00841d16 	blt	zero,r2,853d8 <_dtoa_r+0x15f4>
   84364:	800d883a 	mov	r6,r16
   84368:	880f883a 	mov	r7,r17
   8436c:	0009883a 	mov	r4,zero
   84370:	014ffc34 	movhi	r5,16368
   84374:	008d2ac0 	call	8d2ac <__subdf3>
   84378:	d9401217 	ldw	r5,72(sp)
   8437c:	100d883a 	mov	r6,r2
   84380:	180f883a 	mov	r7,r3
   84384:	a809883a 	mov	r4,r21
   84388:	008c9c40 	call	8c9c4 <__gedf2>
   8438c:	db001617 	ldw	r12,88(sp)
   84390:	00840e16 	blt	zero,r2,853cc <_dtoa_r+0x15e8>
   84394:	00800044 	movi	r2,1
   84398:	13006b0e 	bge	r2,r12,84548 <_dtoa_r+0x764>
   8439c:	d9000717 	ldw	r4,28(sp)
   843a0:	dd800f15 	stw	r22,60(sp)
   843a4:	dcc01015 	stw	r19,64(sp)
   843a8:	2319883a 	add	r12,r4,r12
   843ac:	dcc01217 	ldw	r19,72(sp)
   843b0:	602d883a 	mov	r22,r12
   843b4:	dc801215 	stw	r18,72(sp)
   843b8:	b825883a 	mov	r18,r23
   843bc:	00000906 	br	843e4 <_dtoa_r+0x600>
   843c0:	008d2ac0 	call	8d2ac <__subdf3>
   843c4:	a80d883a 	mov	r6,r21
   843c8:	980f883a 	mov	r7,r19
   843cc:	1009883a 	mov	r4,r2
   843d0:	180b883a 	mov	r5,r3
   843d4:	008caa00 	call	8caa0 <__ledf2>
   843d8:	1003e816 	blt	r2,zero,8537c <_dtoa_r+0x1598>
   843dc:	b825883a 	mov	r18,r23
   843e0:	bd83e926 	beq	r23,r22,85388 <_dtoa_r+0x15a4>
   843e4:	a809883a 	mov	r4,r21
   843e8:	980b883a 	mov	r5,r19
   843ec:	000d883a 	mov	r6,zero
   843f0:	01d00934 	movhi	r7,16420
   843f4:	008cb940 	call	8cb94 <__muldf3>
   843f8:	000d883a 	mov	r6,zero
   843fc:	01d00934 	movhi	r7,16420
   84400:	8009883a 	mov	r4,r16
   84404:	880b883a 	mov	r5,r17
   84408:	102b883a 	mov	r21,r2
   8440c:	1827883a 	mov	r19,r3
   84410:	008cb940 	call	8cb94 <__muldf3>
   84414:	180b883a 	mov	r5,r3
   84418:	1009883a 	mov	r4,r2
   8441c:	1821883a 	mov	r16,r3
   84420:	1023883a 	mov	r17,r2
   84424:	008dba80 	call	8dba8 <__fixdfsi>
   84428:	1009883a 	mov	r4,r2
   8442c:	1029883a 	mov	r20,r2
   84430:	008dc280 	call	8dc28 <__floatsidf>
   84434:	8809883a 	mov	r4,r17
   84438:	800b883a 	mov	r5,r16
   8443c:	100d883a 	mov	r6,r2
   84440:	180f883a 	mov	r7,r3
   84444:	008d2ac0 	call	8d2ac <__subdf3>
   84448:	a5000c04 	addi	r20,r20,48
   8444c:	a80d883a 	mov	r6,r21
   84450:	980f883a 	mov	r7,r19
   84454:	1009883a 	mov	r4,r2
   84458:	180b883a 	mov	r5,r3
   8445c:	95000005 	stb	r20,0(r18)
   84460:	1021883a 	mov	r16,r2
   84464:	1823883a 	mov	r17,r3
   84468:	008caa00 	call	8caa0 <__ledf2>
   8446c:	bdc00044 	addi	r23,r23,1
   84470:	800d883a 	mov	r6,r16
   84474:	880f883a 	mov	r7,r17
   84478:	0009883a 	mov	r4,zero
   8447c:	014ffc34 	movhi	r5,16368
   84480:	103fcf0e 	bge	r2,zero,843c0 <__alt_data_end+0xfffb88d0>
   84484:	d8c01317 	ldw	r3,76(sp)
   84488:	d8c00515 	stw	r3,20(sp)
   8448c:	d9400917 	ldw	r5,36(sp)
   84490:	e009883a 	mov	r4,fp
   84494:	00875840 	call	87584 <_Bfree>
   84498:	d9000517 	ldw	r4,20(sp)
   8449c:	d9802317 	ldw	r6,140(sp)
   844a0:	d9c02517 	ldw	r7,148(sp)
   844a4:	b8000005 	stb	zero,0(r23)
   844a8:	20800044 	addi	r2,r4,1
   844ac:	30800015 	stw	r2,0(r6)
   844b0:	3802aa26 	beq	r7,zero,84f5c <_dtoa_r+0x1178>
   844b4:	3dc00015 	stw	r23,0(r7)
   844b8:	d8800717 	ldw	r2,28(sp)
   844bc:	003e7906 	br	83ea4 <__alt_data_end+0xfffb83b4>
   844c0:	00800434 	movhi	r2,16
   844c4:	10bfffc4 	addi	r2,r2,-1
   844c8:	88a2703a 	and	r17,r17,r2
   844cc:	883e851e 	bne	r17,zero,83ee4 <__alt_data_end+0xfffb83f4>
   844d0:	00800274 	movhi	r2,9
   844d4:	1082bd04 	addi	r2,r2,2804
   844d8:	003e8406 	br	83eec <__alt_data_end+0xfffb83fc>
   844dc:	10c00204 	addi	r3,r2,8
   844e0:	003e8706 	br	83f00 <__alt_data_end+0xfffb8410>
   844e4:	01400434 	movhi	r5,16
   844e8:	297fffc4 	addi	r5,r5,-1
   844ec:	994a703a 	and	r5,r19,r5
   844f0:	9009883a 	mov	r4,r18
   844f4:	843f0044 	addi	r16,r16,-1023
   844f8:	294ffc34 	orhi	r5,r5,16368
   844fc:	dd800217 	ldw	r22,8(sp)
   84500:	d8001115 	stw	zero,68(sp)
   84504:	003ea506 	br	83f9c <__alt_data_end+0xfffb84ac>
   84508:	00800274 	movhi	r2,9
   8450c:	1082b404 	addi	r2,r2,2768
   84510:	003e6406 	br	83ea4 <__alt_data_end+0xfffb83b4>
   84514:	e0001115 	stw	zero,68(fp)
   84518:	000b883a 	mov	r5,zero
   8451c:	e009883a 	mov	r4,fp
   84520:	00874dc0 	call	874dc <_Balloc>
   84524:	01bfffc4 	movi	r6,-1
   84528:	01c00044 	movi	r7,1
   8452c:	d8800715 	stw	r2,28(sp)
   84530:	d9800c15 	stw	r6,48(sp)
   84534:	e0801015 	stw	r2,64(fp)
   84538:	d8000315 	stw	zero,12(sp)
   8453c:	d9c00b15 	stw	r7,44(sp)
   84540:	d9800615 	stw	r6,24(sp)
   84544:	d8002215 	stw	zero,136(sp)
   84548:	d8800117 	ldw	r2,4(sp)
   8454c:	10008916 	blt	r2,zero,84774 <_dtoa_r+0x990>
   84550:	d9000517 	ldw	r4,20(sp)
   84554:	00c00384 	movi	r3,14
   84558:	19008616 	blt	r3,r4,84774 <_dtoa_r+0x990>
   8455c:	200490fa 	slli	r2,r4,3
   84560:	00c00274 	movhi	r3,9
   84564:	d9802217 	ldw	r6,136(sp)
   84568:	18c2dc04 	addi	r3,r3,2928
   8456c:	1885883a 	add	r2,r3,r2
   84570:	14000017 	ldw	r16,0(r2)
   84574:	14400117 	ldw	r17,4(r2)
   84578:	30016316 	blt	r6,zero,84b08 <_dtoa_r+0xd24>
   8457c:	800d883a 	mov	r6,r16
   84580:	880f883a 	mov	r7,r17
   84584:	9009883a 	mov	r4,r18
   84588:	980b883a 	mov	r5,r19
   8458c:	008c0540 	call	8c054 <__divdf3>
   84590:	180b883a 	mov	r5,r3
   84594:	1009883a 	mov	r4,r2
   84598:	008dba80 	call	8dba8 <__fixdfsi>
   8459c:	1009883a 	mov	r4,r2
   845a0:	102b883a 	mov	r21,r2
   845a4:	008dc280 	call	8dc28 <__floatsidf>
   845a8:	800d883a 	mov	r6,r16
   845ac:	880f883a 	mov	r7,r17
   845b0:	1009883a 	mov	r4,r2
   845b4:	180b883a 	mov	r5,r3
   845b8:	008cb940 	call	8cb94 <__muldf3>
   845bc:	100d883a 	mov	r6,r2
   845c0:	180f883a 	mov	r7,r3
   845c4:	9009883a 	mov	r4,r18
   845c8:	980b883a 	mov	r5,r19
   845cc:	008d2ac0 	call	8d2ac <__subdf3>
   845d0:	d9c00717 	ldw	r7,28(sp)
   845d4:	1009883a 	mov	r4,r2
   845d8:	a8800c04 	addi	r2,r21,48
   845dc:	38800005 	stb	r2,0(r7)
   845e0:	3dc00044 	addi	r23,r7,1
   845e4:	d9c00617 	ldw	r7,24(sp)
   845e8:	01800044 	movi	r6,1
   845ec:	180b883a 	mov	r5,r3
   845f0:	2005883a 	mov	r2,r4
   845f4:	39803826 	beq	r7,r6,846d8 <_dtoa_r+0x8f4>
   845f8:	000d883a 	mov	r6,zero
   845fc:	01d00934 	movhi	r7,16420
   84600:	008cb940 	call	8cb94 <__muldf3>
   84604:	000d883a 	mov	r6,zero
   84608:	000f883a 	mov	r7,zero
   8460c:	1009883a 	mov	r4,r2
   84610:	180b883a 	mov	r5,r3
   84614:	1025883a 	mov	r18,r2
   84618:	1827883a 	mov	r19,r3
   8461c:	008c93c0 	call	8c93c <__eqdf2>
   84620:	103f9a26 	beq	r2,zero,8448c <__alt_data_end+0xfffb899c>
   84624:	d9c00617 	ldw	r7,24(sp)
   84628:	d8c00717 	ldw	r3,28(sp)
   8462c:	b829883a 	mov	r20,r23
   84630:	38bfffc4 	addi	r2,r7,-1
   84634:	18ad883a 	add	r22,r3,r2
   84638:	00000a06 	br	84664 <_dtoa_r+0x880>
   8463c:	008cb940 	call	8cb94 <__muldf3>
   84640:	000d883a 	mov	r6,zero
   84644:	000f883a 	mov	r7,zero
   84648:	1009883a 	mov	r4,r2
   8464c:	180b883a 	mov	r5,r3
   84650:	1025883a 	mov	r18,r2
   84654:	1827883a 	mov	r19,r3
   84658:	b829883a 	mov	r20,r23
   8465c:	008c93c0 	call	8c93c <__eqdf2>
   84660:	103f8a26 	beq	r2,zero,8448c <__alt_data_end+0xfffb899c>
   84664:	800d883a 	mov	r6,r16
   84668:	880f883a 	mov	r7,r17
   8466c:	9009883a 	mov	r4,r18
   84670:	980b883a 	mov	r5,r19
   84674:	008c0540 	call	8c054 <__divdf3>
   84678:	180b883a 	mov	r5,r3
   8467c:	1009883a 	mov	r4,r2
   84680:	008dba80 	call	8dba8 <__fixdfsi>
   84684:	1009883a 	mov	r4,r2
   84688:	102b883a 	mov	r21,r2
   8468c:	008dc280 	call	8dc28 <__floatsidf>
   84690:	800d883a 	mov	r6,r16
   84694:	880f883a 	mov	r7,r17
   84698:	1009883a 	mov	r4,r2
   8469c:	180b883a 	mov	r5,r3
   846a0:	008cb940 	call	8cb94 <__muldf3>
   846a4:	100d883a 	mov	r6,r2
   846a8:	180f883a 	mov	r7,r3
   846ac:	9009883a 	mov	r4,r18
   846b0:	980b883a 	mov	r5,r19
   846b4:	008d2ac0 	call	8d2ac <__subdf3>
   846b8:	aa000c04 	addi	r8,r21,48
   846bc:	a2000005 	stb	r8,0(r20)
   846c0:	000d883a 	mov	r6,zero
   846c4:	01d00934 	movhi	r7,16420
   846c8:	1009883a 	mov	r4,r2
   846cc:	180b883a 	mov	r5,r3
   846d0:	a5c00044 	addi	r23,r20,1
   846d4:	b53fd91e 	bne	r22,r20,8463c <__alt_data_end+0xfffb8b4c>
   846d8:	100d883a 	mov	r6,r2
   846dc:	180f883a 	mov	r7,r3
   846e0:	1009883a 	mov	r4,r2
   846e4:	180b883a 	mov	r5,r3
   846e8:	008b7a80 	call	8b7a8 <__adddf3>
   846ec:	100d883a 	mov	r6,r2
   846f0:	180f883a 	mov	r7,r3
   846f4:	8009883a 	mov	r4,r16
   846f8:	880b883a 	mov	r5,r17
   846fc:	1027883a 	mov	r19,r2
   84700:	1825883a 	mov	r18,r3
   84704:	008caa00 	call	8caa0 <__ledf2>
   84708:	10000816 	blt	r2,zero,8472c <_dtoa_r+0x948>
   8470c:	980d883a 	mov	r6,r19
   84710:	900f883a 	mov	r7,r18
   84714:	8009883a 	mov	r4,r16
   84718:	880b883a 	mov	r5,r17
   8471c:	008c93c0 	call	8c93c <__eqdf2>
   84720:	103f5a1e 	bne	r2,zero,8448c <__alt_data_end+0xfffb899c>
   84724:	ad40004c 	andi	r21,r21,1
   84728:	a83f5826 	beq	r21,zero,8448c <__alt_data_end+0xfffb899c>
   8472c:	bd3fffc3 	ldbu	r20,-1(r23)
   84730:	b8bfffc4 	addi	r2,r23,-1
   84734:	1007883a 	mov	r3,r2
   84738:	01400e44 	movi	r5,57
   8473c:	d9800717 	ldw	r6,28(sp)
   84740:	00000506 	br	84758 <_dtoa_r+0x974>
   84744:	18ffffc4 	addi	r3,r3,-1
   84748:	11824726 	beq	r2,r6,85068 <_dtoa_r+0x1284>
   8474c:	1d000003 	ldbu	r20,0(r3)
   84750:	102f883a 	mov	r23,r2
   84754:	10bfffc4 	addi	r2,r2,-1
   84758:	a1003fcc 	andi	r4,r20,255
   8475c:	2100201c 	xori	r4,r4,128
   84760:	213fe004 	addi	r4,r4,-128
   84764:	217ff726 	beq	r4,r5,84744 <__alt_data_end+0xfffb8c54>
   84768:	a2000044 	addi	r8,r20,1
   8476c:	12000005 	stb	r8,0(r2)
   84770:	003f4606 	br	8448c <__alt_data_end+0xfffb899c>
   84774:	d9000b17 	ldw	r4,44(sp)
   84778:	2000c826 	beq	r4,zero,84a9c <_dtoa_r+0xcb8>
   8477c:	d9800317 	ldw	r6,12(sp)
   84780:	00c00044 	movi	r3,1
   84784:	1980f90e 	bge	r3,r6,84b6c <_dtoa_r+0xd88>
   84788:	d8800617 	ldw	r2,24(sp)
   8478c:	d8c00a17 	ldw	r3,40(sp)
   84790:	157fffc4 	addi	r21,r2,-1
   84794:	1d41f316 	blt	r3,r21,84f64 <_dtoa_r+0x1180>
   84798:	1d6bc83a 	sub	r21,r3,r21
   8479c:	d9c00617 	ldw	r7,24(sp)
   847a0:	3802aa16 	blt	r7,zero,8524c <_dtoa_r+0x1468>
   847a4:	dd000817 	ldw	r20,32(sp)
   847a8:	d8800617 	ldw	r2,24(sp)
   847ac:	d8c00817 	ldw	r3,32(sp)
   847b0:	01400044 	movi	r5,1
   847b4:	e009883a 	mov	r4,fp
   847b8:	1887883a 	add	r3,r3,r2
   847bc:	d8c00815 	stw	r3,32(sp)
   847c0:	b0ad883a 	add	r22,r22,r2
   847c4:	00878e80 	call	878e8 <__i2b>
   847c8:	1023883a 	mov	r17,r2
   847cc:	a0000826 	beq	r20,zero,847f0 <_dtoa_r+0xa0c>
   847d0:	0580070e 	bge	zero,r22,847f0 <_dtoa_r+0xa0c>
   847d4:	a005883a 	mov	r2,r20
   847d8:	b500b916 	blt	r22,r20,84ac0 <_dtoa_r+0xcdc>
   847dc:	d9000817 	ldw	r4,32(sp)
   847e0:	a0a9c83a 	sub	r20,r20,r2
   847e4:	b0adc83a 	sub	r22,r22,r2
   847e8:	2089c83a 	sub	r4,r4,r2
   847ec:	d9000815 	stw	r4,32(sp)
   847f0:	d9800a17 	ldw	r6,40(sp)
   847f4:	0181810e 	bge	zero,r6,84dfc <_dtoa_r+0x1018>
   847f8:	d9c00b17 	ldw	r7,44(sp)
   847fc:	3800b326 	beq	r7,zero,84acc <_dtoa_r+0xce8>
   84800:	a800b226 	beq	r21,zero,84acc <_dtoa_r+0xce8>
   84804:	880b883a 	mov	r5,r17
   84808:	a80d883a 	mov	r6,r21
   8480c:	e009883a 	mov	r4,fp
   84810:	0087b1c0 	call	87b1c <__pow5mult>
   84814:	d9800917 	ldw	r6,36(sp)
   84818:	100b883a 	mov	r5,r2
   8481c:	e009883a 	mov	r4,fp
   84820:	1023883a 	mov	r17,r2
   84824:	00879240 	call	87924 <__multiply>
   84828:	1021883a 	mov	r16,r2
   8482c:	d8800a17 	ldw	r2,40(sp)
   84830:	d9400917 	ldw	r5,36(sp)
   84834:	e009883a 	mov	r4,fp
   84838:	1545c83a 	sub	r2,r2,r21
   8483c:	d8800a15 	stw	r2,40(sp)
   84840:	00875840 	call	87584 <_Bfree>
   84844:	d8c00a17 	ldw	r3,40(sp)
   84848:	18009f1e 	bne	r3,zero,84ac8 <_dtoa_r+0xce4>
   8484c:	05c00044 	movi	r23,1
   84850:	e009883a 	mov	r4,fp
   84854:	b80b883a 	mov	r5,r23
   84858:	00878e80 	call	878e8 <__i2b>
   8485c:	d9000d17 	ldw	r4,52(sp)
   84860:	102b883a 	mov	r21,r2
   84864:	2000ce26 	beq	r4,zero,84ba0 <_dtoa_r+0xdbc>
   84868:	200d883a 	mov	r6,r4
   8486c:	100b883a 	mov	r5,r2
   84870:	e009883a 	mov	r4,fp
   84874:	0087b1c0 	call	87b1c <__pow5mult>
   84878:	d9800317 	ldw	r6,12(sp)
   8487c:	102b883a 	mov	r21,r2
   84880:	b981810e 	bge	r23,r6,84e88 <_dtoa_r+0x10a4>
   84884:	0027883a 	mov	r19,zero
   84888:	a8800417 	ldw	r2,16(r21)
   8488c:	05c00804 	movi	r23,32
   84890:	10800104 	addi	r2,r2,4
   84894:	1085883a 	add	r2,r2,r2
   84898:	1085883a 	add	r2,r2,r2
   8489c:	a885883a 	add	r2,r21,r2
   848a0:	11000017 	ldw	r4,0(r2)
   848a4:	00877d00 	call	877d0 <__hi0bits>
   848a8:	b885c83a 	sub	r2,r23,r2
   848ac:	1585883a 	add	r2,r2,r22
   848b0:	108007cc 	andi	r2,r2,31
   848b4:	1000b326 	beq	r2,zero,84b84 <_dtoa_r+0xda0>
   848b8:	00c00804 	movi	r3,32
   848bc:	1887c83a 	sub	r3,r3,r2
   848c0:	01000104 	movi	r4,4
   848c4:	20c2cd0e 	bge	r4,r3,853fc <_dtoa_r+0x1618>
   848c8:	00c00704 	movi	r3,28
   848cc:	1885c83a 	sub	r2,r3,r2
   848d0:	d8c00817 	ldw	r3,32(sp)
   848d4:	a0a9883a 	add	r20,r20,r2
   848d8:	b0ad883a 	add	r22,r22,r2
   848dc:	1887883a 	add	r3,r3,r2
   848e0:	d8c00815 	stw	r3,32(sp)
   848e4:	d9800817 	ldw	r6,32(sp)
   848e8:	0180040e 	bge	zero,r6,848fc <_dtoa_r+0xb18>
   848ec:	800b883a 	mov	r5,r16
   848f0:	e009883a 	mov	r4,fp
   848f4:	0087c5c0 	call	87c5c <__lshift>
   848f8:	1021883a 	mov	r16,r2
   848fc:	0580050e 	bge	zero,r22,84914 <_dtoa_r+0xb30>
   84900:	a80b883a 	mov	r5,r21
   84904:	b00d883a 	mov	r6,r22
   84908:	e009883a 	mov	r4,fp
   8490c:	0087c5c0 	call	87c5c <__lshift>
   84910:	102b883a 	mov	r21,r2
   84914:	d9c00e17 	ldw	r7,56(sp)
   84918:	3801211e 	bne	r7,zero,84da0 <_dtoa_r+0xfbc>
   8491c:	d9800617 	ldw	r6,24(sp)
   84920:	0181380e 	bge	zero,r6,84e04 <_dtoa_r+0x1020>
   84924:	d8c00b17 	ldw	r3,44(sp)
   84928:	1800ab1e 	bne	r3,zero,84bd8 <_dtoa_r+0xdf4>
   8492c:	dc800717 	ldw	r18,28(sp)
   84930:	dcc00617 	ldw	r19,24(sp)
   84934:	9029883a 	mov	r20,r18
   84938:	00000206 	br	84944 <_dtoa_r+0xb60>
   8493c:	00875ac0 	call	875ac <__multadd>
   84940:	1021883a 	mov	r16,r2
   84944:	a80b883a 	mov	r5,r21
   84948:	8009883a 	mov	r4,r16
   8494c:	0083be40 	call	83be4 <quorem>
   84950:	10800c04 	addi	r2,r2,48
   84954:	90800005 	stb	r2,0(r18)
   84958:	94800044 	addi	r18,r18,1
   8495c:	9507c83a 	sub	r3,r18,r20
   84960:	000f883a 	mov	r7,zero
   84964:	01800284 	movi	r6,10
   84968:	800b883a 	mov	r5,r16
   8496c:	e009883a 	mov	r4,fp
   84970:	1cfff216 	blt	r3,r19,8493c <__alt_data_end+0xfffb8e4c>
   84974:	1011883a 	mov	r8,r2
   84978:	d8800617 	ldw	r2,24(sp)
   8497c:	0082370e 	bge	zero,r2,8525c <_dtoa_r+0x1478>
   84980:	d9000717 	ldw	r4,28(sp)
   84984:	0025883a 	mov	r18,zero
   84988:	20af883a 	add	r23,r4,r2
   8498c:	01800044 	movi	r6,1
   84990:	800b883a 	mov	r5,r16
   84994:	e009883a 	mov	r4,fp
   84998:	da001715 	stw	r8,92(sp)
   8499c:	0087c5c0 	call	87c5c <__lshift>
   849a0:	a80b883a 	mov	r5,r21
   849a4:	1009883a 	mov	r4,r2
   849a8:	d8800915 	stw	r2,36(sp)
   849ac:	0087da40 	call	87da4 <__mcmp>
   849b0:	da001717 	ldw	r8,92(sp)
   849b4:	0081800e 	bge	zero,r2,84fb8 <_dtoa_r+0x11d4>
   849b8:	b93fffc3 	ldbu	r4,-1(r23)
   849bc:	b8bfffc4 	addi	r2,r23,-1
   849c0:	1007883a 	mov	r3,r2
   849c4:	01800e44 	movi	r6,57
   849c8:	d9c00717 	ldw	r7,28(sp)
   849cc:	00000506 	br	849e4 <_dtoa_r+0xc00>
   849d0:	18ffffc4 	addi	r3,r3,-1
   849d4:	11c12326 	beq	r2,r7,84e64 <_dtoa_r+0x1080>
   849d8:	19000003 	ldbu	r4,0(r3)
   849dc:	102f883a 	mov	r23,r2
   849e0:	10bfffc4 	addi	r2,r2,-1
   849e4:	21403fcc 	andi	r5,r4,255
   849e8:	2940201c 	xori	r5,r5,128
   849ec:	297fe004 	addi	r5,r5,-128
   849f0:	29bff726 	beq	r5,r6,849d0 <__alt_data_end+0xfffb8ee0>
   849f4:	21000044 	addi	r4,r4,1
   849f8:	11000005 	stb	r4,0(r2)
   849fc:	a80b883a 	mov	r5,r21
   84a00:	e009883a 	mov	r4,fp
   84a04:	00875840 	call	87584 <_Bfree>
   84a08:	883ea026 	beq	r17,zero,8448c <__alt_data_end+0xfffb899c>
   84a0c:	90000426 	beq	r18,zero,84a20 <_dtoa_r+0xc3c>
   84a10:	94400326 	beq	r18,r17,84a20 <_dtoa_r+0xc3c>
   84a14:	900b883a 	mov	r5,r18
   84a18:	e009883a 	mov	r4,fp
   84a1c:	00875840 	call	87584 <_Bfree>
   84a20:	880b883a 	mov	r5,r17
   84a24:	e009883a 	mov	r4,fp
   84a28:	00875840 	call	87584 <_Bfree>
   84a2c:	003e9706 	br	8448c <__alt_data_end+0xfffb899c>
   84a30:	01800044 	movi	r6,1
   84a34:	d9800e15 	stw	r6,56(sp)
   84a38:	003d9606 	br	84094 <__alt_data_end+0xfffb85a4>
   84a3c:	d8800817 	ldw	r2,32(sp)
   84a40:	d8c00517 	ldw	r3,20(sp)
   84a44:	d8000d15 	stw	zero,52(sp)
   84a48:	10c5c83a 	sub	r2,r2,r3
   84a4c:	00c9c83a 	sub	r4,zero,r3
   84a50:	d8800815 	stw	r2,32(sp)
   84a54:	d9000a15 	stw	r4,40(sp)
   84a58:	003d9706 	br	840b8 <__alt_data_end+0xfffb85c8>
   84a5c:	05adc83a 	sub	r22,zero,r22
   84a60:	dd800815 	stw	r22,32(sp)
   84a64:	002d883a 	mov	r22,zero
   84a68:	003d8e06 	br	840a4 <__alt_data_end+0xfffb85b4>
   84a6c:	d9000517 	ldw	r4,20(sp)
   84a70:	008dc280 	call	8dc28 <__floatsidf>
   84a74:	100d883a 	mov	r6,r2
   84a78:	180f883a 	mov	r7,r3
   84a7c:	a009883a 	mov	r4,r20
   84a80:	880b883a 	mov	r5,r17
   84a84:	008c93c0 	call	8c93c <__eqdf2>
   84a88:	103d7126 	beq	r2,zero,84050 <__alt_data_end+0xfffb8560>
   84a8c:	d9c00517 	ldw	r7,20(sp)
   84a90:	39ffffc4 	addi	r7,r7,-1
   84a94:	d9c00515 	stw	r7,20(sp)
   84a98:	003d6d06 	br	84050 <__alt_data_end+0xfffb8560>
   84a9c:	dd400a17 	ldw	r21,40(sp)
   84aa0:	dd000817 	ldw	r20,32(sp)
   84aa4:	0023883a 	mov	r17,zero
   84aa8:	003f4806 	br	847cc <__alt_data_end+0xfffb8cdc>
   84aac:	10e3c83a 	sub	r17,r2,r3
   84ab0:	9448983a 	sll	r4,r18,r17
   84ab4:	003d3206 	br	83f80 <__alt_data_end+0xfffb8490>
   84ab8:	d8000e15 	stw	zero,56(sp)
   84abc:	003d7506 	br	84094 <__alt_data_end+0xfffb85a4>
   84ac0:	b005883a 	mov	r2,r22
   84ac4:	003f4506 	br	847dc <__alt_data_end+0xfffb8cec>
   84ac8:	dc000915 	stw	r16,36(sp)
   84acc:	d9800a17 	ldw	r6,40(sp)
   84ad0:	d9400917 	ldw	r5,36(sp)
   84ad4:	e009883a 	mov	r4,fp
   84ad8:	0087b1c0 	call	87b1c <__pow5mult>
   84adc:	1021883a 	mov	r16,r2
   84ae0:	003f5a06 	br	8484c <__alt_data_end+0xfffb8d5c>
   84ae4:	01c00044 	movi	r7,1
   84ae8:	d9c00b15 	stw	r7,44(sp)
   84aec:	d8802217 	ldw	r2,136(sp)
   84af0:	0081280e 	bge	zero,r2,84f94 <_dtoa_r+0x11b0>
   84af4:	100d883a 	mov	r6,r2
   84af8:	1021883a 	mov	r16,r2
   84afc:	d8800c15 	stw	r2,48(sp)
   84b00:	d8800615 	stw	r2,24(sp)
   84b04:	003d8806 	br	84128 <__alt_data_end+0xfffb8638>
   84b08:	d8800617 	ldw	r2,24(sp)
   84b0c:	00be9b16 	blt	zero,r2,8457c <__alt_data_end+0xfffb8a8c>
   84b10:	10010f1e 	bne	r2,zero,84f50 <_dtoa_r+0x116c>
   84b14:	880b883a 	mov	r5,r17
   84b18:	000d883a 	mov	r6,zero
   84b1c:	01d00534 	movhi	r7,16404
   84b20:	8009883a 	mov	r4,r16
   84b24:	008cb940 	call	8cb94 <__muldf3>
   84b28:	900d883a 	mov	r6,r18
   84b2c:	980f883a 	mov	r7,r19
   84b30:	1009883a 	mov	r4,r2
   84b34:	180b883a 	mov	r5,r3
   84b38:	008c9c40 	call	8c9c4 <__gedf2>
   84b3c:	002b883a 	mov	r21,zero
   84b40:	0023883a 	mov	r17,zero
   84b44:	1000bf16 	blt	r2,zero,84e44 <_dtoa_r+0x1060>
   84b48:	d9802217 	ldw	r6,136(sp)
   84b4c:	ddc00717 	ldw	r23,28(sp)
   84b50:	018c303a 	nor	r6,zero,r6
   84b54:	d9800515 	stw	r6,20(sp)
   84b58:	a80b883a 	mov	r5,r21
   84b5c:	e009883a 	mov	r4,fp
   84b60:	00875840 	call	87584 <_Bfree>
   84b64:	883e4926 	beq	r17,zero,8448c <__alt_data_end+0xfffb899c>
   84b68:	003fad06 	br	84a20 <__alt_data_end+0xfffb8f30>
   84b6c:	d9c01117 	ldw	r7,68(sp)
   84b70:	3801bc26 	beq	r7,zero,85264 <_dtoa_r+0x1480>
   84b74:	10810cc4 	addi	r2,r2,1075
   84b78:	dd400a17 	ldw	r21,40(sp)
   84b7c:	dd000817 	ldw	r20,32(sp)
   84b80:	003f0a06 	br	847ac <__alt_data_end+0xfffb8cbc>
   84b84:	00800704 	movi	r2,28
   84b88:	d9000817 	ldw	r4,32(sp)
   84b8c:	a0a9883a 	add	r20,r20,r2
   84b90:	b0ad883a 	add	r22,r22,r2
   84b94:	2089883a 	add	r4,r4,r2
   84b98:	d9000815 	stw	r4,32(sp)
   84b9c:	003f5106 	br	848e4 <__alt_data_end+0xfffb8df4>
   84ba0:	d8c00317 	ldw	r3,12(sp)
   84ba4:	b8c1fc0e 	bge	r23,r3,85398 <_dtoa_r+0x15b4>
   84ba8:	0027883a 	mov	r19,zero
   84bac:	b805883a 	mov	r2,r23
   84bb0:	003f3e06 	br	848ac <__alt_data_end+0xfffb8dbc>
   84bb4:	880b883a 	mov	r5,r17
   84bb8:	e009883a 	mov	r4,fp
   84bbc:	000f883a 	mov	r7,zero
   84bc0:	01800284 	movi	r6,10
   84bc4:	00875ac0 	call	875ac <__multadd>
   84bc8:	d9000c17 	ldw	r4,48(sp)
   84bcc:	1023883a 	mov	r17,r2
   84bd0:	0102040e 	bge	zero,r4,853e4 <_dtoa_r+0x1600>
   84bd4:	d9000615 	stw	r4,24(sp)
   84bd8:	0500050e 	bge	zero,r20,84bf0 <_dtoa_r+0xe0c>
   84bdc:	880b883a 	mov	r5,r17
   84be0:	a00d883a 	mov	r6,r20
   84be4:	e009883a 	mov	r4,fp
   84be8:	0087c5c0 	call	87c5c <__lshift>
   84bec:	1023883a 	mov	r17,r2
   84bf0:	9801241e 	bne	r19,zero,85084 <_dtoa_r+0x12a0>
   84bf4:	8829883a 	mov	r20,r17
   84bf8:	d9000617 	ldw	r4,24(sp)
   84bfc:	dcc00717 	ldw	r19,28(sp)
   84c00:	9480004c 	andi	r18,r18,1
   84c04:	20bfffc4 	addi	r2,r4,-1
   84c08:	9885883a 	add	r2,r19,r2
   84c0c:	d8800415 	stw	r2,16(sp)
   84c10:	dc800615 	stw	r18,24(sp)
   84c14:	a80b883a 	mov	r5,r21
   84c18:	8009883a 	mov	r4,r16
   84c1c:	0083be40 	call	83be4 <quorem>
   84c20:	880b883a 	mov	r5,r17
   84c24:	8009883a 	mov	r4,r16
   84c28:	102f883a 	mov	r23,r2
   84c2c:	0087da40 	call	87da4 <__mcmp>
   84c30:	a80b883a 	mov	r5,r21
   84c34:	a00d883a 	mov	r6,r20
   84c38:	e009883a 	mov	r4,fp
   84c3c:	102d883a 	mov	r22,r2
   84c40:	0087e040 	call	87e04 <__mdiff>
   84c44:	1007883a 	mov	r3,r2
   84c48:	10800317 	ldw	r2,12(r2)
   84c4c:	bc800c04 	addi	r18,r23,48
   84c50:	180b883a 	mov	r5,r3
   84c54:	10004e1e 	bne	r2,zero,84d90 <_dtoa_r+0xfac>
   84c58:	8009883a 	mov	r4,r16
   84c5c:	d8c01615 	stw	r3,88(sp)
   84c60:	0087da40 	call	87da4 <__mcmp>
   84c64:	d8c01617 	ldw	r3,88(sp)
   84c68:	e009883a 	mov	r4,fp
   84c6c:	d8801615 	stw	r2,88(sp)
   84c70:	180b883a 	mov	r5,r3
   84c74:	00875840 	call	87584 <_Bfree>
   84c78:	d8801617 	ldw	r2,88(sp)
   84c7c:	1000041e 	bne	r2,zero,84c90 <_dtoa_r+0xeac>
   84c80:	d9800317 	ldw	r6,12(sp)
   84c84:	3000021e 	bne	r6,zero,84c90 <_dtoa_r+0xeac>
   84c88:	d8c00617 	ldw	r3,24(sp)
   84c8c:	18003726 	beq	r3,zero,84d6c <_dtoa_r+0xf88>
   84c90:	b0002016 	blt	r22,zero,84d14 <_dtoa_r+0xf30>
   84c94:	b000041e 	bne	r22,zero,84ca8 <_dtoa_r+0xec4>
   84c98:	d9000317 	ldw	r4,12(sp)
   84c9c:	2000021e 	bne	r4,zero,84ca8 <_dtoa_r+0xec4>
   84ca0:	d8c00617 	ldw	r3,24(sp)
   84ca4:	18001b26 	beq	r3,zero,84d14 <_dtoa_r+0xf30>
   84ca8:	00810716 	blt	zero,r2,850c8 <_dtoa_r+0x12e4>
   84cac:	d8c00417 	ldw	r3,16(sp)
   84cb0:	9d800044 	addi	r22,r19,1
   84cb4:	9c800005 	stb	r18,0(r19)
   84cb8:	b02f883a 	mov	r23,r22
   84cbc:	98c10626 	beq	r19,r3,850d8 <_dtoa_r+0x12f4>
   84cc0:	800b883a 	mov	r5,r16
   84cc4:	000f883a 	mov	r7,zero
   84cc8:	01800284 	movi	r6,10
   84ccc:	e009883a 	mov	r4,fp
   84cd0:	00875ac0 	call	875ac <__multadd>
   84cd4:	1021883a 	mov	r16,r2
   84cd8:	000f883a 	mov	r7,zero
   84cdc:	01800284 	movi	r6,10
   84ce0:	880b883a 	mov	r5,r17
   84ce4:	e009883a 	mov	r4,fp
   84ce8:	8d002526 	beq	r17,r20,84d80 <_dtoa_r+0xf9c>
   84cec:	00875ac0 	call	875ac <__multadd>
   84cf0:	a00b883a 	mov	r5,r20
   84cf4:	000f883a 	mov	r7,zero
   84cf8:	01800284 	movi	r6,10
   84cfc:	e009883a 	mov	r4,fp
   84d00:	1023883a 	mov	r17,r2
   84d04:	00875ac0 	call	875ac <__multadd>
   84d08:	1029883a 	mov	r20,r2
   84d0c:	b027883a 	mov	r19,r22
   84d10:	003fc006 	br	84c14 <__alt_data_end+0xfffb9124>
   84d14:	9011883a 	mov	r8,r18
   84d18:	00800e0e 	bge	zero,r2,84d54 <_dtoa_r+0xf70>
   84d1c:	800b883a 	mov	r5,r16
   84d20:	01800044 	movi	r6,1
   84d24:	e009883a 	mov	r4,fp
   84d28:	da001715 	stw	r8,92(sp)
   84d2c:	0087c5c0 	call	87c5c <__lshift>
   84d30:	a80b883a 	mov	r5,r21
   84d34:	1009883a 	mov	r4,r2
   84d38:	1021883a 	mov	r16,r2
   84d3c:	0087da40 	call	87da4 <__mcmp>
   84d40:	da001717 	ldw	r8,92(sp)
   84d44:	0081960e 	bge	zero,r2,853a0 <_dtoa_r+0x15bc>
   84d48:	00800e44 	movi	r2,57
   84d4c:	40817026 	beq	r8,r2,85310 <_dtoa_r+0x152c>
   84d50:	ba000c44 	addi	r8,r23,49
   84d54:	8825883a 	mov	r18,r17
   84d58:	9dc00044 	addi	r23,r19,1
   84d5c:	9a000005 	stb	r8,0(r19)
   84d60:	a023883a 	mov	r17,r20
   84d64:	dc000915 	stw	r16,36(sp)
   84d68:	003f2406 	br	849fc <__alt_data_end+0xfffb8f0c>
   84d6c:	00800e44 	movi	r2,57
   84d70:	9011883a 	mov	r8,r18
   84d74:	90816626 	beq	r18,r2,85310 <_dtoa_r+0x152c>
   84d78:	05bff516 	blt	zero,r22,84d50 <__alt_data_end+0xfffb9260>
   84d7c:	003ff506 	br	84d54 <__alt_data_end+0xfffb9264>
   84d80:	00875ac0 	call	875ac <__multadd>
   84d84:	1023883a 	mov	r17,r2
   84d88:	1029883a 	mov	r20,r2
   84d8c:	003fdf06 	br	84d0c <__alt_data_end+0xfffb921c>
   84d90:	e009883a 	mov	r4,fp
   84d94:	00875840 	call	87584 <_Bfree>
   84d98:	00800044 	movi	r2,1
   84d9c:	003fbc06 	br	84c90 <__alt_data_end+0xfffb91a0>
   84da0:	a80b883a 	mov	r5,r21
   84da4:	8009883a 	mov	r4,r16
   84da8:	0087da40 	call	87da4 <__mcmp>
   84dac:	103edb0e 	bge	r2,zero,8491c <__alt_data_end+0xfffb8e2c>
   84db0:	800b883a 	mov	r5,r16
   84db4:	000f883a 	mov	r7,zero
   84db8:	01800284 	movi	r6,10
   84dbc:	e009883a 	mov	r4,fp
   84dc0:	00875ac0 	call	875ac <__multadd>
   84dc4:	1021883a 	mov	r16,r2
   84dc8:	d8800517 	ldw	r2,20(sp)
   84dcc:	d8c00b17 	ldw	r3,44(sp)
   84dd0:	10bfffc4 	addi	r2,r2,-1
   84dd4:	d8800515 	stw	r2,20(sp)
   84dd8:	183f761e 	bne	r3,zero,84bb4 <__alt_data_end+0xfffb90c4>
   84ddc:	d9000c17 	ldw	r4,48(sp)
   84de0:	0101730e 	bge	zero,r4,853b0 <_dtoa_r+0x15cc>
   84de4:	d9000615 	stw	r4,24(sp)
   84de8:	003ed006 	br	8492c <__alt_data_end+0xfffb8e3c>
   84dec:	00800084 	movi	r2,2
   84df0:	3081861e 	bne	r6,r2,8540c <_dtoa_r+0x1628>
   84df4:	d8000b15 	stw	zero,44(sp)
   84df8:	003f3c06 	br	84aec <__alt_data_end+0xfffb8ffc>
   84dfc:	dc000917 	ldw	r16,36(sp)
   84e00:	003e9206 	br	8484c <__alt_data_end+0xfffb8d5c>
   84e04:	d9c00317 	ldw	r7,12(sp)
   84e08:	00800084 	movi	r2,2
   84e0c:	11fec50e 	bge	r2,r7,84924 <__alt_data_end+0xfffb8e34>
   84e10:	d9000617 	ldw	r4,24(sp)
   84e14:	20013c1e 	bne	r4,zero,85308 <_dtoa_r+0x1524>
   84e18:	a80b883a 	mov	r5,r21
   84e1c:	000f883a 	mov	r7,zero
   84e20:	01800144 	movi	r6,5
   84e24:	e009883a 	mov	r4,fp
   84e28:	00875ac0 	call	875ac <__multadd>
   84e2c:	100b883a 	mov	r5,r2
   84e30:	8009883a 	mov	r4,r16
   84e34:	102b883a 	mov	r21,r2
   84e38:	0087da40 	call	87da4 <__mcmp>
   84e3c:	dc000915 	stw	r16,36(sp)
   84e40:	00bf410e 	bge	zero,r2,84b48 <__alt_data_end+0xfffb9058>
   84e44:	d9c00717 	ldw	r7,28(sp)
   84e48:	00800c44 	movi	r2,49
   84e4c:	38800005 	stb	r2,0(r7)
   84e50:	d8800517 	ldw	r2,20(sp)
   84e54:	3dc00044 	addi	r23,r7,1
   84e58:	10800044 	addi	r2,r2,1
   84e5c:	d8800515 	stw	r2,20(sp)
   84e60:	003f3d06 	br	84b58 <__alt_data_end+0xfffb9068>
   84e64:	d9800517 	ldw	r6,20(sp)
   84e68:	d9c00717 	ldw	r7,28(sp)
   84e6c:	00800c44 	movi	r2,49
   84e70:	31800044 	addi	r6,r6,1
   84e74:	d9800515 	stw	r6,20(sp)
   84e78:	38800005 	stb	r2,0(r7)
   84e7c:	003edf06 	br	849fc <__alt_data_end+0xfffb8f0c>
   84e80:	d8000b15 	stw	zero,44(sp)
   84e84:	003c9f06 	br	84104 <__alt_data_end+0xfffb8614>
   84e88:	903e7e1e 	bne	r18,zero,84884 <__alt_data_end+0xfffb8d94>
   84e8c:	00800434 	movhi	r2,16
   84e90:	10bfffc4 	addi	r2,r2,-1
   84e94:	9884703a 	and	r2,r19,r2
   84e98:	1000ea1e 	bne	r2,zero,85244 <_dtoa_r+0x1460>
   84e9c:	9cdffc2c 	andhi	r19,r19,32752
   84ea0:	9800e826 	beq	r19,zero,85244 <_dtoa_r+0x1460>
   84ea4:	d9c00817 	ldw	r7,32(sp)
   84ea8:	b5800044 	addi	r22,r22,1
   84eac:	04c00044 	movi	r19,1
   84eb0:	39c00044 	addi	r7,r7,1
   84eb4:	d9c00815 	stw	r7,32(sp)
   84eb8:	d8800d17 	ldw	r2,52(sp)
   84ebc:	103e721e 	bne	r2,zero,84888 <__alt_data_end+0xfffb8d98>
   84ec0:	00800044 	movi	r2,1
   84ec4:	003e7906 	br	848ac <__alt_data_end+0xfffb8dbc>
   84ec8:	8009883a 	mov	r4,r16
   84ecc:	008dc280 	call	8dc28 <__floatsidf>
   84ed0:	d9800f17 	ldw	r6,60(sp)
   84ed4:	d9c01017 	ldw	r7,64(sp)
   84ed8:	1009883a 	mov	r4,r2
   84edc:	180b883a 	mov	r5,r3
   84ee0:	008cb940 	call	8cb94 <__muldf3>
   84ee4:	000d883a 	mov	r6,zero
   84ee8:	01d00734 	movhi	r7,16412
   84eec:	1009883a 	mov	r4,r2
   84ef0:	180b883a 	mov	r5,r3
   84ef4:	008b7a80 	call	8b7a8 <__adddf3>
   84ef8:	047f3034 	movhi	r17,64704
   84efc:	1021883a 	mov	r16,r2
   84f00:	1c63883a 	add	r17,r3,r17
   84f04:	d9000f17 	ldw	r4,60(sp)
   84f08:	d9401017 	ldw	r5,64(sp)
   84f0c:	000d883a 	mov	r6,zero
   84f10:	01d00534 	movhi	r7,16404
   84f14:	008d2ac0 	call	8d2ac <__subdf3>
   84f18:	800d883a 	mov	r6,r16
   84f1c:	880f883a 	mov	r7,r17
   84f20:	1009883a 	mov	r4,r2
   84f24:	180b883a 	mov	r5,r3
   84f28:	102b883a 	mov	r21,r2
   84f2c:	1829883a 	mov	r20,r3
   84f30:	008c9c40 	call	8c9c4 <__gedf2>
   84f34:	00806c16 	blt	zero,r2,850e8 <_dtoa_r+0x1304>
   84f38:	89e0003c 	xorhi	r7,r17,32768
   84f3c:	800d883a 	mov	r6,r16
   84f40:	a809883a 	mov	r4,r21
   84f44:	a00b883a 	mov	r5,r20
   84f48:	008caa00 	call	8caa0 <__ledf2>
   84f4c:	103d7e0e 	bge	r2,zero,84548 <__alt_data_end+0xfffb8a58>
   84f50:	002b883a 	mov	r21,zero
   84f54:	0023883a 	mov	r17,zero
   84f58:	003efb06 	br	84b48 <__alt_data_end+0xfffb9058>
   84f5c:	d8800717 	ldw	r2,28(sp)
   84f60:	003bd006 	br	83ea4 <__alt_data_end+0xfffb83b4>
   84f64:	d9000a17 	ldw	r4,40(sp)
   84f68:	d9800d17 	ldw	r6,52(sp)
   84f6c:	dd400a15 	stw	r21,40(sp)
   84f70:	a905c83a 	sub	r2,r21,r4
   84f74:	308d883a 	add	r6,r6,r2
   84f78:	d9800d15 	stw	r6,52(sp)
   84f7c:	002b883a 	mov	r21,zero
   84f80:	003e0606 	br	8479c <__alt_data_end+0xfffb8cac>
   84f84:	9023883a 	mov	r17,r18
   84f88:	9829883a 	mov	r20,r19
   84f8c:	04000084 	movi	r16,2
   84f90:	003c9206 	br	841dc <__alt_data_end+0xfffb86ec>
   84f94:	04000044 	movi	r16,1
   84f98:	dc000c15 	stw	r16,48(sp)
   84f9c:	dc000615 	stw	r16,24(sp)
   84fa0:	dc002215 	stw	r16,136(sp)
   84fa4:	e0001115 	stw	zero,68(fp)
   84fa8:	000b883a 	mov	r5,zero
   84fac:	003c6906 	br	84154 <__alt_data_end+0xfffb8664>
   84fb0:	3021883a 	mov	r16,r6
   84fb4:	003ffb06 	br	84fa4 <__alt_data_end+0xfffb94b4>
   84fb8:	1000021e 	bne	r2,zero,84fc4 <_dtoa_r+0x11e0>
   84fbc:	4200004c 	andi	r8,r8,1
   84fc0:	403e7d1e 	bne	r8,zero,849b8 <__alt_data_end+0xfffb8ec8>
   84fc4:	01000c04 	movi	r4,48
   84fc8:	00000106 	br	84fd0 <_dtoa_r+0x11ec>
   84fcc:	102f883a 	mov	r23,r2
   84fd0:	b8bfffc4 	addi	r2,r23,-1
   84fd4:	10c00007 	ldb	r3,0(r2)
   84fd8:	193ffc26 	beq	r3,r4,84fcc <__alt_data_end+0xfffb94dc>
   84fdc:	003e8706 	br	849fc <__alt_data_end+0xfffb8f0c>
   84fe0:	d8800517 	ldw	r2,20(sp)
   84fe4:	00a3c83a 	sub	r17,zero,r2
   84fe8:	8800a426 	beq	r17,zero,8527c <_dtoa_r+0x1498>
   84fec:	888003cc 	andi	r2,r17,15
   84ff0:	100490fa 	slli	r2,r2,3
   84ff4:	00c00274 	movhi	r3,9
   84ff8:	18c2dc04 	addi	r3,r3,2928
   84ffc:	1885883a 	add	r2,r3,r2
   85000:	11800017 	ldw	r6,0(r2)
   85004:	11c00117 	ldw	r7,4(r2)
   85008:	9009883a 	mov	r4,r18
   8500c:	980b883a 	mov	r5,r19
   85010:	8823d13a 	srai	r17,r17,4
   85014:	008cb940 	call	8cb94 <__muldf3>
   85018:	d8800f15 	stw	r2,60(sp)
   8501c:	d8c01015 	stw	r3,64(sp)
   85020:	8800e826 	beq	r17,zero,853c4 <_dtoa_r+0x15e0>
   85024:	05000274 	movhi	r20,9
   85028:	a502d204 	addi	r20,r20,2888
   8502c:	04000084 	movi	r16,2
   85030:	8980004c 	andi	r6,r17,1
   85034:	1009883a 	mov	r4,r2
   85038:	8823d07a 	srai	r17,r17,1
   8503c:	180b883a 	mov	r5,r3
   85040:	30000426 	beq	r6,zero,85054 <_dtoa_r+0x1270>
   85044:	a1800017 	ldw	r6,0(r20)
   85048:	a1c00117 	ldw	r7,4(r20)
   8504c:	84000044 	addi	r16,r16,1
   85050:	008cb940 	call	8cb94 <__muldf3>
   85054:	a5000204 	addi	r20,r20,8
   85058:	883ff51e 	bne	r17,zero,85030 <__alt_data_end+0xfffb9540>
   8505c:	d8800f15 	stw	r2,60(sp)
   85060:	d8c01015 	stw	r3,64(sp)
   85064:	003c7606 	br	84240 <__alt_data_end+0xfffb8750>
   85068:	00c00c04 	movi	r3,48
   8506c:	10c00005 	stb	r3,0(r2)
   85070:	d8c00517 	ldw	r3,20(sp)
   85074:	bd3fffc3 	ldbu	r20,-1(r23)
   85078:	18c00044 	addi	r3,r3,1
   8507c:	d8c00515 	stw	r3,20(sp)
   85080:	003db906 	br	84768 <__alt_data_end+0xfffb8c78>
   85084:	89400117 	ldw	r5,4(r17)
   85088:	e009883a 	mov	r4,fp
   8508c:	00874dc0 	call	874dc <_Balloc>
   85090:	89800417 	ldw	r6,16(r17)
   85094:	89400304 	addi	r5,r17,12
   85098:	11000304 	addi	r4,r2,12
   8509c:	31800084 	addi	r6,r6,2
   850a0:	318d883a 	add	r6,r6,r6
   850a4:	318d883a 	add	r6,r6,r6
   850a8:	1027883a 	mov	r19,r2
   850ac:	00871100 	call	87110 <memcpy>
   850b0:	01800044 	movi	r6,1
   850b4:	980b883a 	mov	r5,r19
   850b8:	e009883a 	mov	r4,fp
   850bc:	0087c5c0 	call	87c5c <__lshift>
   850c0:	1029883a 	mov	r20,r2
   850c4:	003ecc06 	br	84bf8 <__alt_data_end+0xfffb9108>
   850c8:	00800e44 	movi	r2,57
   850cc:	90809026 	beq	r18,r2,85310 <_dtoa_r+0x152c>
   850d0:	92000044 	addi	r8,r18,1
   850d4:	003f1f06 	br	84d54 <__alt_data_end+0xfffb9264>
   850d8:	9011883a 	mov	r8,r18
   850dc:	8825883a 	mov	r18,r17
   850e0:	a023883a 	mov	r17,r20
   850e4:	003e2906 	br	8498c <__alt_data_end+0xfffb8e9c>
   850e8:	002b883a 	mov	r21,zero
   850ec:	0023883a 	mov	r17,zero
   850f0:	003f5406 	br	84e44 <__alt_data_end+0xfffb9354>
   850f4:	61bfffc4 	addi	r6,r12,-1
   850f8:	300490fa 	slli	r2,r6,3
   850fc:	00c00274 	movhi	r3,9
   85100:	18c2dc04 	addi	r3,r3,2928
   85104:	1885883a 	add	r2,r3,r2
   85108:	11000017 	ldw	r4,0(r2)
   8510c:	11400117 	ldw	r5,4(r2)
   85110:	d8800717 	ldw	r2,28(sp)
   85114:	880f883a 	mov	r7,r17
   85118:	d9801215 	stw	r6,72(sp)
   8511c:	800d883a 	mov	r6,r16
   85120:	db001615 	stw	r12,88(sp)
   85124:	15c00044 	addi	r23,r2,1
   85128:	008cb940 	call	8cb94 <__muldf3>
   8512c:	d9401017 	ldw	r5,64(sp)
   85130:	d9000f17 	ldw	r4,60(sp)
   85134:	d8c01515 	stw	r3,84(sp)
   85138:	d8801415 	stw	r2,80(sp)
   8513c:	008dba80 	call	8dba8 <__fixdfsi>
   85140:	1009883a 	mov	r4,r2
   85144:	1021883a 	mov	r16,r2
   85148:	008dc280 	call	8dc28 <__floatsidf>
   8514c:	d9000f17 	ldw	r4,60(sp)
   85150:	d9401017 	ldw	r5,64(sp)
   85154:	100d883a 	mov	r6,r2
   85158:	180f883a 	mov	r7,r3
   8515c:	008d2ac0 	call	8d2ac <__subdf3>
   85160:	1829883a 	mov	r20,r3
   85164:	d8c00717 	ldw	r3,28(sp)
   85168:	84000c04 	addi	r16,r16,48
   8516c:	1023883a 	mov	r17,r2
   85170:	1c000005 	stb	r16,0(r3)
   85174:	db001617 	ldw	r12,88(sp)
   85178:	00800044 	movi	r2,1
   8517c:	60802226 	beq	r12,r2,85208 <_dtoa_r+0x1424>
   85180:	d9c00717 	ldw	r7,28(sp)
   85184:	8805883a 	mov	r2,r17
   85188:	b82b883a 	mov	r21,r23
   8518c:	3b19883a 	add	r12,r7,r12
   85190:	6023883a 	mov	r17,r12
   85194:	a007883a 	mov	r3,r20
   85198:	dc800f15 	stw	r18,60(sp)
   8519c:	000d883a 	mov	r6,zero
   851a0:	01d00934 	movhi	r7,16420
   851a4:	1009883a 	mov	r4,r2
   851a8:	180b883a 	mov	r5,r3
   851ac:	008cb940 	call	8cb94 <__muldf3>
   851b0:	180b883a 	mov	r5,r3
   851b4:	1009883a 	mov	r4,r2
   851b8:	1829883a 	mov	r20,r3
   851bc:	1025883a 	mov	r18,r2
   851c0:	008dba80 	call	8dba8 <__fixdfsi>
   851c4:	1009883a 	mov	r4,r2
   851c8:	1021883a 	mov	r16,r2
   851cc:	008dc280 	call	8dc28 <__floatsidf>
   851d0:	100d883a 	mov	r6,r2
   851d4:	180f883a 	mov	r7,r3
   851d8:	9009883a 	mov	r4,r18
   851dc:	a00b883a 	mov	r5,r20
   851e0:	84000c04 	addi	r16,r16,48
   851e4:	008d2ac0 	call	8d2ac <__subdf3>
   851e8:	ad400044 	addi	r21,r21,1
   851ec:	ac3fffc5 	stb	r16,-1(r21)
   851f0:	ac7fea1e 	bne	r21,r17,8519c <__alt_data_end+0xfffb96ac>
   851f4:	1023883a 	mov	r17,r2
   851f8:	d8801217 	ldw	r2,72(sp)
   851fc:	dc800f17 	ldw	r18,60(sp)
   85200:	1829883a 	mov	r20,r3
   85204:	b8af883a 	add	r23,r23,r2
   85208:	d9001417 	ldw	r4,80(sp)
   8520c:	d9401517 	ldw	r5,84(sp)
   85210:	000d883a 	mov	r6,zero
   85214:	01cff834 	movhi	r7,16352
   85218:	008b7a80 	call	8b7a8 <__adddf3>
   8521c:	880d883a 	mov	r6,r17
   85220:	a00f883a 	mov	r7,r20
   85224:	1009883a 	mov	r4,r2
   85228:	180b883a 	mov	r5,r3
   8522c:	008caa00 	call	8caa0 <__ledf2>
   85230:	10003e0e 	bge	r2,zero,8532c <_dtoa_r+0x1548>
   85234:	d9001317 	ldw	r4,76(sp)
   85238:	bd3fffc3 	ldbu	r20,-1(r23)
   8523c:	d9000515 	stw	r4,20(sp)
   85240:	003d3b06 	br	84730 <__alt_data_end+0xfffb8c40>
   85244:	0027883a 	mov	r19,zero
   85248:	003f1b06 	br	84eb8 <__alt_data_end+0xfffb93c8>
   8524c:	d8800817 	ldw	r2,32(sp)
   85250:	11e9c83a 	sub	r20,r2,r7
   85254:	0005883a 	mov	r2,zero
   85258:	003d5406 	br	847ac <__alt_data_end+0xfffb8cbc>
   8525c:	00800044 	movi	r2,1
   85260:	003dc706 	br	84980 <__alt_data_end+0xfffb8e90>
   85264:	d8c00217 	ldw	r3,8(sp)
   85268:	00800d84 	movi	r2,54
   8526c:	dd400a17 	ldw	r21,40(sp)
   85270:	10c5c83a 	sub	r2,r2,r3
   85274:	dd000817 	ldw	r20,32(sp)
   85278:	003d4c06 	br	847ac <__alt_data_end+0xfffb8cbc>
   8527c:	dc800f15 	stw	r18,60(sp)
   85280:	dcc01015 	stw	r19,64(sp)
   85284:	04000084 	movi	r16,2
   85288:	003bed06 	br	84240 <__alt_data_end+0xfffb8750>
   8528c:	d9000617 	ldw	r4,24(sp)
   85290:	203f0d26 	beq	r4,zero,84ec8 <__alt_data_end+0xfffb93d8>
   85294:	d9800c17 	ldw	r6,48(sp)
   85298:	01bcab0e 	bge	zero,r6,84548 <__alt_data_end+0xfffb8a58>
   8529c:	d9401017 	ldw	r5,64(sp)
   852a0:	d9000f17 	ldw	r4,60(sp)
   852a4:	000d883a 	mov	r6,zero
   852a8:	01d00934 	movhi	r7,16420
   852ac:	008cb940 	call	8cb94 <__muldf3>
   852b0:	81000044 	addi	r4,r16,1
   852b4:	d8800f15 	stw	r2,60(sp)
   852b8:	d8c01015 	stw	r3,64(sp)
   852bc:	008dc280 	call	8dc28 <__floatsidf>
   852c0:	d9800f17 	ldw	r6,60(sp)
   852c4:	d9c01017 	ldw	r7,64(sp)
   852c8:	1009883a 	mov	r4,r2
   852cc:	180b883a 	mov	r5,r3
   852d0:	008cb940 	call	8cb94 <__muldf3>
   852d4:	01d00734 	movhi	r7,16412
   852d8:	000d883a 	mov	r6,zero
   852dc:	1009883a 	mov	r4,r2
   852e0:	180b883a 	mov	r5,r3
   852e4:	008b7a80 	call	8b7a8 <__adddf3>
   852e8:	d9c00517 	ldw	r7,20(sp)
   852ec:	047f3034 	movhi	r17,64704
   852f0:	1021883a 	mov	r16,r2
   852f4:	39ffffc4 	addi	r7,r7,-1
   852f8:	d9c01315 	stw	r7,76(sp)
   852fc:	1c63883a 	add	r17,r3,r17
   85300:	db000c17 	ldw	r12,48(sp)
   85304:	003bea06 	br	842b0 <__alt_data_end+0xfffb87c0>
   85308:	dc000915 	stw	r16,36(sp)
   8530c:	003e0e06 	br	84b48 <__alt_data_end+0xfffb9058>
   85310:	01000e44 	movi	r4,57
   85314:	8825883a 	mov	r18,r17
   85318:	9dc00044 	addi	r23,r19,1
   8531c:	99000005 	stb	r4,0(r19)
   85320:	a023883a 	mov	r17,r20
   85324:	dc000915 	stw	r16,36(sp)
   85328:	003da406 	br	849bc <__alt_data_end+0xfffb8ecc>
   8532c:	d9801417 	ldw	r6,80(sp)
   85330:	d9c01517 	ldw	r7,84(sp)
   85334:	0009883a 	mov	r4,zero
   85338:	014ff834 	movhi	r5,16352
   8533c:	008d2ac0 	call	8d2ac <__subdf3>
   85340:	880d883a 	mov	r6,r17
   85344:	a00f883a 	mov	r7,r20
   85348:	1009883a 	mov	r4,r2
   8534c:	180b883a 	mov	r5,r3
   85350:	008c9c40 	call	8c9c4 <__gedf2>
   85354:	00bc7c0e 	bge	zero,r2,84548 <__alt_data_end+0xfffb8a58>
   85358:	01000c04 	movi	r4,48
   8535c:	00000106 	br	85364 <_dtoa_r+0x1580>
   85360:	102f883a 	mov	r23,r2
   85364:	b8bfffc4 	addi	r2,r23,-1
   85368:	10c00007 	ldb	r3,0(r2)
   8536c:	193ffc26 	beq	r3,r4,85360 <__alt_data_end+0xfffb9870>
   85370:	d9801317 	ldw	r6,76(sp)
   85374:	d9800515 	stw	r6,20(sp)
   85378:	003c4406 	br	8448c <__alt_data_end+0xfffb899c>
   8537c:	d9801317 	ldw	r6,76(sp)
   85380:	d9800515 	stw	r6,20(sp)
   85384:	003cea06 	br	84730 <__alt_data_end+0xfffb8c40>
   85388:	dd800f17 	ldw	r22,60(sp)
   8538c:	dcc01017 	ldw	r19,64(sp)
   85390:	dc801217 	ldw	r18,72(sp)
   85394:	003c6c06 	br	84548 <__alt_data_end+0xfffb8a58>
   85398:	903e031e 	bne	r18,zero,84ba8 <__alt_data_end+0xfffb90b8>
   8539c:	003ebb06 	br	84e8c <__alt_data_end+0xfffb939c>
   853a0:	103e6c1e 	bne	r2,zero,84d54 <__alt_data_end+0xfffb9264>
   853a4:	4080004c 	andi	r2,r8,1
   853a8:	103e6a26 	beq	r2,zero,84d54 <__alt_data_end+0xfffb9264>
   853ac:	003e6606 	br	84d48 <__alt_data_end+0xfffb9258>
   853b0:	d8c00317 	ldw	r3,12(sp)
   853b4:	00800084 	movi	r2,2
   853b8:	10c02916 	blt	r2,r3,85460 <_dtoa_r+0x167c>
   853bc:	d9000c17 	ldw	r4,48(sp)
   853c0:	003e8806 	br	84de4 <__alt_data_end+0xfffb92f4>
   853c4:	04000084 	movi	r16,2
   853c8:	003b9d06 	br	84240 <__alt_data_end+0xfffb8750>
   853cc:	d9001317 	ldw	r4,76(sp)
   853d0:	d9000515 	stw	r4,20(sp)
   853d4:	003cd606 	br	84730 <__alt_data_end+0xfffb8c40>
   853d8:	d8801317 	ldw	r2,76(sp)
   853dc:	d8800515 	stw	r2,20(sp)
   853e0:	003c2a06 	br	8448c <__alt_data_end+0xfffb899c>
   853e4:	d9800317 	ldw	r6,12(sp)
   853e8:	00800084 	movi	r2,2
   853ec:	11801516 	blt	r2,r6,85444 <_dtoa_r+0x1660>
   853f0:	d9c00c17 	ldw	r7,48(sp)
   853f4:	d9c00615 	stw	r7,24(sp)
   853f8:	003df706 	br	84bd8 <__alt_data_end+0xfffb90e8>
   853fc:	193d3926 	beq	r3,r4,848e4 <__alt_data_end+0xfffb8df4>
   85400:	00c00f04 	movi	r3,60
   85404:	1885c83a 	sub	r2,r3,r2
   85408:	003ddf06 	br	84b88 <__alt_data_end+0xfffb9098>
   8540c:	e009883a 	mov	r4,fp
   85410:	e0001115 	stw	zero,68(fp)
   85414:	000b883a 	mov	r5,zero
   85418:	00874dc0 	call	874dc <_Balloc>
   8541c:	d8800715 	stw	r2,28(sp)
   85420:	d8c00717 	ldw	r3,28(sp)
   85424:	00bfffc4 	movi	r2,-1
   85428:	01000044 	movi	r4,1
   8542c:	d8800c15 	stw	r2,48(sp)
   85430:	e0c01015 	stw	r3,64(fp)
   85434:	d9000b15 	stw	r4,44(sp)
   85438:	d8800615 	stw	r2,24(sp)
   8543c:	d8002215 	stw	zero,136(sp)
   85440:	003c4106 	br	84548 <__alt_data_end+0xfffb8a58>
   85444:	d8c00c17 	ldw	r3,48(sp)
   85448:	d8c00615 	stw	r3,24(sp)
   8544c:	003e7006 	br	84e10 <__alt_data_end+0xfffb9320>
   85450:	04400044 	movi	r17,1
   85454:	003b2006 	br	840d8 <__alt_data_end+0xfffb85e8>
   85458:	000b883a 	mov	r5,zero
   8545c:	003b3d06 	br	84154 <__alt_data_end+0xfffb8664>
   85460:	d8800c17 	ldw	r2,48(sp)
   85464:	d8800615 	stw	r2,24(sp)
   85468:	003e6906 	br	84e10 <__alt_data_end+0xfffb9320>

0008546c <__sflush_r>:
   8546c:	2880030b 	ldhu	r2,12(r5)
   85470:	defffb04 	addi	sp,sp,-20
   85474:	dcc00315 	stw	r19,12(sp)
   85478:	dc400115 	stw	r17,4(sp)
   8547c:	dfc00415 	stw	ra,16(sp)
   85480:	dc800215 	stw	r18,8(sp)
   85484:	dc000015 	stw	r16,0(sp)
   85488:	10c0020c 	andi	r3,r2,8
   8548c:	2823883a 	mov	r17,r5
   85490:	2027883a 	mov	r19,r4
   85494:	1800311e 	bne	r3,zero,8555c <__sflush_r+0xf0>
   85498:	28c00117 	ldw	r3,4(r5)
   8549c:	10820014 	ori	r2,r2,2048
   854a0:	2880030d 	sth	r2,12(r5)
   854a4:	00c04b0e 	bge	zero,r3,855d4 <__sflush_r+0x168>
   854a8:	8a000a17 	ldw	r8,40(r17)
   854ac:	40002326 	beq	r8,zero,8553c <__sflush_r+0xd0>
   854b0:	9c000017 	ldw	r16,0(r19)
   854b4:	10c4000c 	andi	r3,r2,4096
   854b8:	98000015 	stw	zero,0(r19)
   854bc:	18004826 	beq	r3,zero,855e0 <__sflush_r+0x174>
   854c0:	89801417 	ldw	r6,80(r17)
   854c4:	10c0010c 	andi	r3,r2,4
   854c8:	18000626 	beq	r3,zero,854e4 <__sflush_r+0x78>
   854cc:	88c00117 	ldw	r3,4(r17)
   854d0:	88800c17 	ldw	r2,48(r17)
   854d4:	30cdc83a 	sub	r6,r6,r3
   854d8:	10000226 	beq	r2,zero,854e4 <__sflush_r+0x78>
   854dc:	88800f17 	ldw	r2,60(r17)
   854e0:	308dc83a 	sub	r6,r6,r2
   854e4:	89400717 	ldw	r5,28(r17)
   854e8:	000f883a 	mov	r7,zero
   854ec:	9809883a 	mov	r4,r19
   854f0:	403ee83a 	callr	r8
   854f4:	00ffffc4 	movi	r3,-1
   854f8:	10c04426 	beq	r2,r3,8560c <__sflush_r+0x1a0>
   854fc:	88c0030b 	ldhu	r3,12(r17)
   85500:	89000417 	ldw	r4,16(r17)
   85504:	88000115 	stw	zero,4(r17)
   85508:	197dffcc 	andi	r5,r3,63487
   8550c:	8940030d 	sth	r5,12(r17)
   85510:	89000015 	stw	r4,0(r17)
   85514:	18c4000c 	andi	r3,r3,4096
   85518:	18002c1e 	bne	r3,zero,855cc <__sflush_r+0x160>
   8551c:	89400c17 	ldw	r5,48(r17)
   85520:	9c000015 	stw	r16,0(r19)
   85524:	28000526 	beq	r5,zero,8553c <__sflush_r+0xd0>
   85528:	88801004 	addi	r2,r17,64
   8552c:	28800226 	beq	r5,r2,85538 <__sflush_r+0xcc>
   85530:	9809883a 	mov	r4,r19
   85534:	0085bd80 	call	85bd8 <_free_r>
   85538:	88000c15 	stw	zero,48(r17)
   8553c:	0005883a 	mov	r2,zero
   85540:	dfc00417 	ldw	ra,16(sp)
   85544:	dcc00317 	ldw	r19,12(sp)
   85548:	dc800217 	ldw	r18,8(sp)
   8554c:	dc400117 	ldw	r17,4(sp)
   85550:	dc000017 	ldw	r16,0(sp)
   85554:	dec00504 	addi	sp,sp,20
   85558:	f800283a 	ret
   8555c:	2c800417 	ldw	r18,16(r5)
   85560:	903ff626 	beq	r18,zero,8553c <__alt_data_end+0xfffb9a4c>
   85564:	2c000017 	ldw	r16,0(r5)
   85568:	108000cc 	andi	r2,r2,3
   8556c:	2c800015 	stw	r18,0(r5)
   85570:	84a1c83a 	sub	r16,r16,r18
   85574:	1000131e 	bne	r2,zero,855c4 <__sflush_r+0x158>
   85578:	28800517 	ldw	r2,20(r5)
   8557c:	88800215 	stw	r2,8(r17)
   85580:	04000316 	blt	zero,r16,85590 <__sflush_r+0x124>
   85584:	003fed06 	br	8553c <__alt_data_end+0xfffb9a4c>
   85588:	90a5883a 	add	r18,r18,r2
   8558c:	043feb0e 	bge	zero,r16,8553c <__alt_data_end+0xfffb9a4c>
   85590:	88800917 	ldw	r2,36(r17)
   85594:	89400717 	ldw	r5,28(r17)
   85598:	800f883a 	mov	r7,r16
   8559c:	900d883a 	mov	r6,r18
   855a0:	9809883a 	mov	r4,r19
   855a4:	103ee83a 	callr	r2
   855a8:	80a1c83a 	sub	r16,r16,r2
   855ac:	00bff616 	blt	zero,r2,85588 <__alt_data_end+0xfffb9a98>
   855b0:	88c0030b 	ldhu	r3,12(r17)
   855b4:	00bfffc4 	movi	r2,-1
   855b8:	18c01014 	ori	r3,r3,64
   855bc:	88c0030d 	sth	r3,12(r17)
   855c0:	003fdf06 	br	85540 <__alt_data_end+0xfffb9a50>
   855c4:	0005883a 	mov	r2,zero
   855c8:	003fec06 	br	8557c <__alt_data_end+0xfffb9a8c>
   855cc:	88801415 	stw	r2,80(r17)
   855d0:	003fd206 	br	8551c <__alt_data_end+0xfffb9a2c>
   855d4:	28c00f17 	ldw	r3,60(r5)
   855d8:	00ffb316 	blt	zero,r3,854a8 <__alt_data_end+0xfffb99b8>
   855dc:	003fd706 	br	8553c <__alt_data_end+0xfffb9a4c>
   855e0:	89400717 	ldw	r5,28(r17)
   855e4:	000d883a 	mov	r6,zero
   855e8:	01c00044 	movi	r7,1
   855ec:	9809883a 	mov	r4,r19
   855f0:	403ee83a 	callr	r8
   855f4:	100d883a 	mov	r6,r2
   855f8:	00bfffc4 	movi	r2,-1
   855fc:	30801426 	beq	r6,r2,85650 <__sflush_r+0x1e4>
   85600:	8880030b 	ldhu	r2,12(r17)
   85604:	8a000a17 	ldw	r8,40(r17)
   85608:	003fae06 	br	854c4 <__alt_data_end+0xfffb99d4>
   8560c:	98c00017 	ldw	r3,0(r19)
   85610:	183fba26 	beq	r3,zero,854fc <__alt_data_end+0xfffb9a0c>
   85614:	01000744 	movi	r4,29
   85618:	19000626 	beq	r3,r4,85634 <__sflush_r+0x1c8>
   8561c:	01000584 	movi	r4,22
   85620:	19000426 	beq	r3,r4,85634 <__sflush_r+0x1c8>
   85624:	88c0030b 	ldhu	r3,12(r17)
   85628:	18c01014 	ori	r3,r3,64
   8562c:	88c0030d 	sth	r3,12(r17)
   85630:	003fc306 	br	85540 <__alt_data_end+0xfffb9a50>
   85634:	8880030b 	ldhu	r2,12(r17)
   85638:	88c00417 	ldw	r3,16(r17)
   8563c:	88000115 	stw	zero,4(r17)
   85640:	10bdffcc 	andi	r2,r2,63487
   85644:	8880030d 	sth	r2,12(r17)
   85648:	88c00015 	stw	r3,0(r17)
   8564c:	003fb306 	br	8551c <__alt_data_end+0xfffb9a2c>
   85650:	98800017 	ldw	r2,0(r19)
   85654:	103fea26 	beq	r2,zero,85600 <__alt_data_end+0xfffb9b10>
   85658:	00c00744 	movi	r3,29
   8565c:	10c00226 	beq	r2,r3,85668 <__sflush_r+0x1fc>
   85660:	00c00584 	movi	r3,22
   85664:	10c0031e 	bne	r2,r3,85674 <__sflush_r+0x208>
   85668:	9c000015 	stw	r16,0(r19)
   8566c:	0005883a 	mov	r2,zero
   85670:	003fb306 	br	85540 <__alt_data_end+0xfffb9a50>
   85674:	88c0030b 	ldhu	r3,12(r17)
   85678:	3005883a 	mov	r2,r6
   8567c:	18c01014 	ori	r3,r3,64
   85680:	88c0030d 	sth	r3,12(r17)
   85684:	003fae06 	br	85540 <__alt_data_end+0xfffb9a50>

00085688 <_fflush_r>:
   85688:	defffd04 	addi	sp,sp,-12
   8568c:	dc000115 	stw	r16,4(sp)
   85690:	dfc00215 	stw	ra,8(sp)
   85694:	2021883a 	mov	r16,r4
   85698:	20000226 	beq	r4,zero,856a4 <_fflush_r+0x1c>
   8569c:	20800e17 	ldw	r2,56(r4)
   856a0:	10000c26 	beq	r2,zero,856d4 <_fflush_r+0x4c>
   856a4:	2880030f 	ldh	r2,12(r5)
   856a8:	1000051e 	bne	r2,zero,856c0 <_fflush_r+0x38>
   856ac:	0005883a 	mov	r2,zero
   856b0:	dfc00217 	ldw	ra,8(sp)
   856b4:	dc000117 	ldw	r16,4(sp)
   856b8:	dec00304 	addi	sp,sp,12
   856bc:	f800283a 	ret
   856c0:	8009883a 	mov	r4,r16
   856c4:	dfc00217 	ldw	ra,8(sp)
   856c8:	dc000117 	ldw	r16,4(sp)
   856cc:	dec00304 	addi	sp,sp,12
   856d0:	008546c1 	jmpi	8546c <__sflush_r>
   856d4:	d9400015 	stw	r5,0(sp)
   856d8:	0085a640 	call	85a64 <__sinit>
   856dc:	d9400017 	ldw	r5,0(sp)
   856e0:	003ff006 	br	856a4 <__alt_data_end+0xfffb9bb4>

000856e4 <fflush>:
   856e4:	20000526 	beq	r4,zero,856fc <fflush+0x18>
   856e8:	00800274 	movhi	r2,9
   856ec:	108a3a04 	addi	r2,r2,10472
   856f0:	200b883a 	mov	r5,r4
   856f4:	11000017 	ldw	r4,0(r2)
   856f8:	00856881 	jmpi	85688 <_fflush_r>
   856fc:	00800274 	movhi	r2,9
   85700:	108a3904 	addi	r2,r2,10468
   85704:	11000017 	ldw	r4,0(r2)
   85708:	01400234 	movhi	r5,8
   8570c:	2955a204 	addi	r5,r5,22152
   85710:	00864681 	jmpi	86468 <_fwalk_reent>

00085714 <__fp_unlock>:
   85714:	0005883a 	mov	r2,zero
   85718:	f800283a 	ret

0008571c <_cleanup_r>:
   8571c:	01400274 	movhi	r5,9
   85720:	29693704 	addi	r5,r5,-23332
   85724:	00864681 	jmpi	86468 <_fwalk_reent>

00085728 <__sinit.part.1>:
   85728:	defff704 	addi	sp,sp,-36
   8572c:	00c00234 	movhi	r3,8
   85730:	dfc00815 	stw	ra,32(sp)
   85734:	ddc00715 	stw	r23,28(sp)
   85738:	dd800615 	stw	r22,24(sp)
   8573c:	dd400515 	stw	r21,20(sp)
   85740:	dd000415 	stw	r20,16(sp)
   85744:	dcc00315 	stw	r19,12(sp)
   85748:	dc800215 	stw	r18,8(sp)
   8574c:	dc400115 	stw	r17,4(sp)
   85750:	dc000015 	stw	r16,0(sp)
   85754:	18d5c704 	addi	r3,r3,22300
   85758:	24000117 	ldw	r16,4(r4)
   8575c:	20c00f15 	stw	r3,60(r4)
   85760:	2080bb04 	addi	r2,r4,748
   85764:	00c000c4 	movi	r3,3
   85768:	20c0b915 	stw	r3,740(r4)
   8576c:	2080ba15 	stw	r2,744(r4)
   85770:	2000b815 	stw	zero,736(r4)
   85774:	05c00204 	movi	r23,8
   85778:	00800104 	movi	r2,4
   8577c:	2025883a 	mov	r18,r4
   85780:	b80d883a 	mov	r6,r23
   85784:	81001704 	addi	r4,r16,92
   85788:	000b883a 	mov	r5,zero
   8578c:	80000015 	stw	zero,0(r16)
   85790:	80000115 	stw	zero,4(r16)
   85794:	80000215 	stw	zero,8(r16)
   85798:	8080030d 	sth	r2,12(r16)
   8579c:	80001915 	stw	zero,100(r16)
   857a0:	8000038d 	sth	zero,14(r16)
   857a4:	80000415 	stw	zero,16(r16)
   857a8:	80000515 	stw	zero,20(r16)
   857ac:	80000615 	stw	zero,24(r16)
   857b0:	00873b40 	call	873b4 <memset>
   857b4:	05800274 	movhi	r22,9
   857b8:	94400217 	ldw	r17,8(r18)
   857bc:	05400274 	movhi	r21,9
   857c0:	05000274 	movhi	r20,9
   857c4:	04c00274 	movhi	r19,9
   857c8:	b5a2c104 	addi	r22,r22,-29948
   857cc:	ad62d804 	addi	r21,r21,-29856
   857d0:	a522f704 	addi	r20,r20,-29732
   857d4:	9ce30e04 	addi	r19,r19,-29640
   857d8:	85800815 	stw	r22,32(r16)
   857dc:	85400915 	stw	r21,36(r16)
   857e0:	85000a15 	stw	r20,40(r16)
   857e4:	84c00b15 	stw	r19,44(r16)
   857e8:	84000715 	stw	r16,28(r16)
   857ec:	00800284 	movi	r2,10
   857f0:	8880030d 	sth	r2,12(r17)
   857f4:	00800044 	movi	r2,1
   857f8:	b80d883a 	mov	r6,r23
   857fc:	89001704 	addi	r4,r17,92
   85800:	000b883a 	mov	r5,zero
   85804:	88000015 	stw	zero,0(r17)
   85808:	88000115 	stw	zero,4(r17)
   8580c:	88000215 	stw	zero,8(r17)
   85810:	88001915 	stw	zero,100(r17)
   85814:	8880038d 	sth	r2,14(r17)
   85818:	88000415 	stw	zero,16(r17)
   8581c:	88000515 	stw	zero,20(r17)
   85820:	88000615 	stw	zero,24(r17)
   85824:	00873b40 	call	873b4 <memset>
   85828:	94000317 	ldw	r16,12(r18)
   8582c:	00800484 	movi	r2,18
   85830:	8c400715 	stw	r17,28(r17)
   85834:	8d800815 	stw	r22,32(r17)
   85838:	8d400915 	stw	r21,36(r17)
   8583c:	8d000a15 	stw	r20,40(r17)
   85840:	8cc00b15 	stw	r19,44(r17)
   85844:	8080030d 	sth	r2,12(r16)
   85848:	00800084 	movi	r2,2
   8584c:	80000015 	stw	zero,0(r16)
   85850:	80000115 	stw	zero,4(r16)
   85854:	80000215 	stw	zero,8(r16)
   85858:	80001915 	stw	zero,100(r16)
   8585c:	8080038d 	sth	r2,14(r16)
   85860:	80000415 	stw	zero,16(r16)
   85864:	80000515 	stw	zero,20(r16)
   85868:	80000615 	stw	zero,24(r16)
   8586c:	b80d883a 	mov	r6,r23
   85870:	000b883a 	mov	r5,zero
   85874:	81001704 	addi	r4,r16,92
   85878:	00873b40 	call	873b4 <memset>
   8587c:	00800044 	movi	r2,1
   85880:	84000715 	stw	r16,28(r16)
   85884:	85800815 	stw	r22,32(r16)
   85888:	85400915 	stw	r21,36(r16)
   8588c:	85000a15 	stw	r20,40(r16)
   85890:	84c00b15 	stw	r19,44(r16)
   85894:	90800e15 	stw	r2,56(r18)
   85898:	dfc00817 	ldw	ra,32(sp)
   8589c:	ddc00717 	ldw	r23,28(sp)
   858a0:	dd800617 	ldw	r22,24(sp)
   858a4:	dd400517 	ldw	r21,20(sp)
   858a8:	dd000417 	ldw	r20,16(sp)
   858ac:	dcc00317 	ldw	r19,12(sp)
   858b0:	dc800217 	ldw	r18,8(sp)
   858b4:	dc400117 	ldw	r17,4(sp)
   858b8:	dc000017 	ldw	r16,0(sp)
   858bc:	dec00904 	addi	sp,sp,36
   858c0:	f800283a 	ret

000858c4 <__fp_lock>:
   858c4:	0005883a 	mov	r2,zero
   858c8:	f800283a 	ret

000858cc <__sfmoreglue>:
   858cc:	defffc04 	addi	sp,sp,-16
   858d0:	dc400115 	stw	r17,4(sp)
   858d4:	2c7fffc4 	addi	r17,r5,-1
   858d8:	8c401a24 	muli	r17,r17,104
   858dc:	dc800215 	stw	r18,8(sp)
   858e0:	2825883a 	mov	r18,r5
   858e4:	89401d04 	addi	r5,r17,116
   858e8:	dc000015 	stw	r16,0(sp)
   858ec:	dfc00315 	stw	ra,12(sp)
   858f0:	00868200 	call	86820 <_malloc_r>
   858f4:	1021883a 	mov	r16,r2
   858f8:	10000726 	beq	r2,zero,85918 <__sfmoreglue+0x4c>
   858fc:	11000304 	addi	r4,r2,12
   85900:	10000015 	stw	zero,0(r2)
   85904:	14800115 	stw	r18,4(r2)
   85908:	11000215 	stw	r4,8(r2)
   8590c:	89801a04 	addi	r6,r17,104
   85910:	000b883a 	mov	r5,zero
   85914:	00873b40 	call	873b4 <memset>
   85918:	8005883a 	mov	r2,r16
   8591c:	dfc00317 	ldw	ra,12(sp)
   85920:	dc800217 	ldw	r18,8(sp)
   85924:	dc400117 	ldw	r17,4(sp)
   85928:	dc000017 	ldw	r16,0(sp)
   8592c:	dec00404 	addi	sp,sp,16
   85930:	f800283a 	ret

00085934 <__sfp>:
   85934:	defffb04 	addi	sp,sp,-20
   85938:	dc000015 	stw	r16,0(sp)
   8593c:	04000274 	movhi	r16,9
   85940:	840a3904 	addi	r16,r16,10468
   85944:	dcc00315 	stw	r19,12(sp)
   85948:	2027883a 	mov	r19,r4
   8594c:	81000017 	ldw	r4,0(r16)
   85950:	dfc00415 	stw	ra,16(sp)
   85954:	dc800215 	stw	r18,8(sp)
   85958:	20800e17 	ldw	r2,56(r4)
   8595c:	dc400115 	stw	r17,4(sp)
   85960:	1000021e 	bne	r2,zero,8596c <__sfp+0x38>
   85964:	00857280 	call	85728 <__sinit.part.1>
   85968:	81000017 	ldw	r4,0(r16)
   8596c:	2480b804 	addi	r18,r4,736
   85970:	047fffc4 	movi	r17,-1
   85974:	91000117 	ldw	r4,4(r18)
   85978:	94000217 	ldw	r16,8(r18)
   8597c:	213fffc4 	addi	r4,r4,-1
   85980:	20000a16 	blt	r4,zero,859ac <__sfp+0x78>
   85984:	8080030f 	ldh	r2,12(r16)
   85988:	10000c26 	beq	r2,zero,859bc <__sfp+0x88>
   8598c:	80c01d04 	addi	r3,r16,116
   85990:	00000206 	br	8599c <__sfp+0x68>
   85994:	18bfe60f 	ldh	r2,-104(r3)
   85998:	10000826 	beq	r2,zero,859bc <__sfp+0x88>
   8599c:	213fffc4 	addi	r4,r4,-1
   859a0:	1c3ffd04 	addi	r16,r3,-12
   859a4:	18c01a04 	addi	r3,r3,104
   859a8:	247ffa1e 	bne	r4,r17,85994 <__alt_data_end+0xfffb9ea4>
   859ac:	90800017 	ldw	r2,0(r18)
   859b0:	10001d26 	beq	r2,zero,85a28 <__sfp+0xf4>
   859b4:	1025883a 	mov	r18,r2
   859b8:	003fee06 	br	85974 <__alt_data_end+0xfffb9e84>
   859bc:	00bfffc4 	movi	r2,-1
   859c0:	8080038d 	sth	r2,14(r16)
   859c4:	00800044 	movi	r2,1
   859c8:	8080030d 	sth	r2,12(r16)
   859cc:	80001915 	stw	zero,100(r16)
   859d0:	80000015 	stw	zero,0(r16)
   859d4:	80000215 	stw	zero,8(r16)
   859d8:	80000115 	stw	zero,4(r16)
   859dc:	80000415 	stw	zero,16(r16)
   859e0:	80000515 	stw	zero,20(r16)
   859e4:	80000615 	stw	zero,24(r16)
   859e8:	01800204 	movi	r6,8
   859ec:	000b883a 	mov	r5,zero
   859f0:	81001704 	addi	r4,r16,92
   859f4:	00873b40 	call	873b4 <memset>
   859f8:	8005883a 	mov	r2,r16
   859fc:	80000c15 	stw	zero,48(r16)
   85a00:	80000d15 	stw	zero,52(r16)
   85a04:	80001115 	stw	zero,68(r16)
   85a08:	80001215 	stw	zero,72(r16)
   85a0c:	dfc00417 	ldw	ra,16(sp)
   85a10:	dcc00317 	ldw	r19,12(sp)
   85a14:	dc800217 	ldw	r18,8(sp)
   85a18:	dc400117 	ldw	r17,4(sp)
   85a1c:	dc000017 	ldw	r16,0(sp)
   85a20:	dec00504 	addi	sp,sp,20
   85a24:	f800283a 	ret
   85a28:	01400104 	movi	r5,4
   85a2c:	9809883a 	mov	r4,r19
   85a30:	00858cc0 	call	858cc <__sfmoreglue>
   85a34:	90800015 	stw	r2,0(r18)
   85a38:	103fde1e 	bne	r2,zero,859b4 <__alt_data_end+0xfffb9ec4>
   85a3c:	00800304 	movi	r2,12
   85a40:	98800015 	stw	r2,0(r19)
   85a44:	0005883a 	mov	r2,zero
   85a48:	003ff006 	br	85a0c <__alt_data_end+0xfffb9f1c>

00085a4c <_cleanup>:
   85a4c:	00800274 	movhi	r2,9
   85a50:	108a3904 	addi	r2,r2,10468
   85a54:	11000017 	ldw	r4,0(r2)
   85a58:	01400274 	movhi	r5,9
   85a5c:	29693704 	addi	r5,r5,-23332
   85a60:	00864681 	jmpi	86468 <_fwalk_reent>

00085a64 <__sinit>:
   85a64:	20800e17 	ldw	r2,56(r4)
   85a68:	10000126 	beq	r2,zero,85a70 <__sinit+0xc>
   85a6c:	f800283a 	ret
   85a70:	00857281 	jmpi	85728 <__sinit.part.1>

00085a74 <__sfp_lock_acquire>:
   85a74:	f800283a 	ret

00085a78 <__sfp_lock_release>:
   85a78:	f800283a 	ret

00085a7c <__sinit_lock_acquire>:
   85a7c:	f800283a 	ret

00085a80 <__sinit_lock_release>:
   85a80:	f800283a 	ret

00085a84 <__fp_lock_all>:
   85a84:	00800274 	movhi	r2,9
   85a88:	108a3a04 	addi	r2,r2,10472
   85a8c:	11000017 	ldw	r4,0(r2)
   85a90:	01400234 	movhi	r5,8
   85a94:	29563104 	addi	r5,r5,22724
   85a98:	00863a41 	jmpi	863a4 <_fwalk>

00085a9c <__fp_unlock_all>:
   85a9c:	00800274 	movhi	r2,9
   85aa0:	108a3a04 	addi	r2,r2,10472
   85aa4:	11000017 	ldw	r4,0(r2)
   85aa8:	01400234 	movhi	r5,8
   85aac:	2955c504 	addi	r5,r5,22292
   85ab0:	00863a41 	jmpi	863a4 <_fwalk>

00085ab4 <_malloc_trim_r>:
   85ab4:	defffb04 	addi	sp,sp,-20
   85ab8:	dcc00315 	stw	r19,12(sp)
   85abc:	04c00274 	movhi	r19,9
   85ac0:	dc800215 	stw	r18,8(sp)
   85ac4:	dc400115 	stw	r17,4(sp)
   85ac8:	dc000015 	stw	r16,0(sp)
   85acc:	dfc00415 	stw	ra,16(sp)
   85ad0:	2821883a 	mov	r16,r5
   85ad4:	9cc4b504 	addi	r19,r19,4820
   85ad8:	2025883a 	mov	r18,r4
   85adc:	008e9a00 	call	8e9a0 <__malloc_lock>
   85ae0:	98800217 	ldw	r2,8(r19)
   85ae4:	14400117 	ldw	r17,4(r2)
   85ae8:	00bfff04 	movi	r2,-4
   85aec:	88a2703a 	and	r17,r17,r2
   85af0:	8c21c83a 	sub	r16,r17,r16
   85af4:	8403fbc4 	addi	r16,r16,4079
   85af8:	8020d33a 	srli	r16,r16,12
   85afc:	0083ffc4 	movi	r2,4095
   85b00:	843fffc4 	addi	r16,r16,-1
   85b04:	8020933a 	slli	r16,r16,12
   85b08:	1400060e 	bge	r2,r16,85b24 <_malloc_trim_r+0x70>
   85b0c:	000b883a 	mov	r5,zero
   85b10:	9009883a 	mov	r4,r18
   85b14:	0088ab00 	call	88ab0 <_sbrk_r>
   85b18:	98c00217 	ldw	r3,8(r19)
   85b1c:	1c47883a 	add	r3,r3,r17
   85b20:	10c00a26 	beq	r2,r3,85b4c <_malloc_trim_r+0x98>
   85b24:	9009883a 	mov	r4,r18
   85b28:	008e9c40 	call	8e9c4 <__malloc_unlock>
   85b2c:	0005883a 	mov	r2,zero
   85b30:	dfc00417 	ldw	ra,16(sp)
   85b34:	dcc00317 	ldw	r19,12(sp)
   85b38:	dc800217 	ldw	r18,8(sp)
   85b3c:	dc400117 	ldw	r17,4(sp)
   85b40:	dc000017 	ldw	r16,0(sp)
   85b44:	dec00504 	addi	sp,sp,20
   85b48:	f800283a 	ret
   85b4c:	040bc83a 	sub	r5,zero,r16
   85b50:	9009883a 	mov	r4,r18
   85b54:	0088ab00 	call	88ab0 <_sbrk_r>
   85b58:	00ffffc4 	movi	r3,-1
   85b5c:	10c00d26 	beq	r2,r3,85b94 <_malloc_trim_r+0xe0>
   85b60:	00c00274 	movhi	r3,9
   85b64:	18d17104 	addi	r3,r3,17860
   85b68:	18800017 	ldw	r2,0(r3)
   85b6c:	99000217 	ldw	r4,8(r19)
   85b70:	8c23c83a 	sub	r17,r17,r16
   85b74:	8c400054 	ori	r17,r17,1
   85b78:	1421c83a 	sub	r16,r2,r16
   85b7c:	24400115 	stw	r17,4(r4)
   85b80:	9009883a 	mov	r4,r18
   85b84:	1c000015 	stw	r16,0(r3)
   85b88:	008e9c40 	call	8e9c4 <__malloc_unlock>
   85b8c:	00800044 	movi	r2,1
   85b90:	003fe706 	br	85b30 <__alt_data_end+0xfffba040>
   85b94:	000b883a 	mov	r5,zero
   85b98:	9009883a 	mov	r4,r18
   85b9c:	0088ab00 	call	88ab0 <_sbrk_r>
   85ba0:	99000217 	ldw	r4,8(r19)
   85ba4:	014003c4 	movi	r5,15
   85ba8:	1107c83a 	sub	r3,r2,r4
   85bac:	28ffdd0e 	bge	r5,r3,85b24 <__alt_data_end+0xfffba034>
   85bb0:	01400274 	movhi	r5,9
   85bb4:	294a3c04 	addi	r5,r5,10480
   85bb8:	29400017 	ldw	r5,0(r5)
   85bbc:	18c00054 	ori	r3,r3,1
   85bc0:	20c00115 	stw	r3,4(r4)
   85bc4:	00c00274 	movhi	r3,9
   85bc8:	1145c83a 	sub	r2,r2,r5
   85bcc:	18d17104 	addi	r3,r3,17860
   85bd0:	18800015 	stw	r2,0(r3)
   85bd4:	003fd306 	br	85b24 <__alt_data_end+0xfffba034>

00085bd8 <_free_r>:
   85bd8:	28004126 	beq	r5,zero,85ce0 <_free_r+0x108>
   85bdc:	defffd04 	addi	sp,sp,-12
   85be0:	dc400115 	stw	r17,4(sp)
   85be4:	dc000015 	stw	r16,0(sp)
   85be8:	2023883a 	mov	r17,r4
   85bec:	2821883a 	mov	r16,r5
   85bf0:	dfc00215 	stw	ra,8(sp)
   85bf4:	008e9a00 	call	8e9a0 <__malloc_lock>
   85bf8:	81ffff17 	ldw	r7,-4(r16)
   85bfc:	00bfff84 	movi	r2,-2
   85c00:	01000274 	movhi	r4,9
   85c04:	81bffe04 	addi	r6,r16,-8
   85c08:	3884703a 	and	r2,r7,r2
   85c0c:	2104b504 	addi	r4,r4,4820
   85c10:	308b883a 	add	r5,r6,r2
   85c14:	2a400117 	ldw	r9,4(r5)
   85c18:	22000217 	ldw	r8,8(r4)
   85c1c:	00ffff04 	movi	r3,-4
   85c20:	48c6703a 	and	r3,r9,r3
   85c24:	2a005726 	beq	r5,r8,85d84 <_free_r+0x1ac>
   85c28:	28c00115 	stw	r3,4(r5)
   85c2c:	39c0004c 	andi	r7,r7,1
   85c30:	3800091e 	bne	r7,zero,85c58 <_free_r+0x80>
   85c34:	823ffe17 	ldw	r8,-8(r16)
   85c38:	22400204 	addi	r9,r4,8
   85c3c:	320dc83a 	sub	r6,r6,r8
   85c40:	31c00217 	ldw	r7,8(r6)
   85c44:	1205883a 	add	r2,r2,r8
   85c48:	3a406526 	beq	r7,r9,85de0 <_free_r+0x208>
   85c4c:	32000317 	ldw	r8,12(r6)
   85c50:	3a000315 	stw	r8,12(r7)
   85c54:	41c00215 	stw	r7,8(r8)
   85c58:	28cf883a 	add	r7,r5,r3
   85c5c:	39c00117 	ldw	r7,4(r7)
   85c60:	39c0004c 	andi	r7,r7,1
   85c64:	38003a26 	beq	r7,zero,85d50 <_free_r+0x178>
   85c68:	10c00054 	ori	r3,r2,1
   85c6c:	30c00115 	stw	r3,4(r6)
   85c70:	3087883a 	add	r3,r6,r2
   85c74:	18800015 	stw	r2,0(r3)
   85c78:	00c07fc4 	movi	r3,511
   85c7c:	18801936 	bltu	r3,r2,85ce4 <_free_r+0x10c>
   85c80:	1004d0fa 	srli	r2,r2,3
   85c84:	01c00044 	movi	r7,1
   85c88:	21400117 	ldw	r5,4(r4)
   85c8c:	10c00044 	addi	r3,r2,1
   85c90:	18c7883a 	add	r3,r3,r3
   85c94:	1005d0ba 	srai	r2,r2,2
   85c98:	18c7883a 	add	r3,r3,r3
   85c9c:	18c7883a 	add	r3,r3,r3
   85ca0:	1907883a 	add	r3,r3,r4
   85ca4:	3884983a 	sll	r2,r7,r2
   85ca8:	19c00017 	ldw	r7,0(r3)
   85cac:	1a3ffe04 	addi	r8,r3,-8
   85cb0:	1144b03a 	or	r2,r2,r5
   85cb4:	32000315 	stw	r8,12(r6)
   85cb8:	31c00215 	stw	r7,8(r6)
   85cbc:	20800115 	stw	r2,4(r4)
   85cc0:	19800015 	stw	r6,0(r3)
   85cc4:	39800315 	stw	r6,12(r7)
   85cc8:	8809883a 	mov	r4,r17
   85ccc:	dfc00217 	ldw	ra,8(sp)
   85cd0:	dc400117 	ldw	r17,4(sp)
   85cd4:	dc000017 	ldw	r16,0(sp)
   85cd8:	dec00304 	addi	sp,sp,12
   85cdc:	008e9c41 	jmpi	8e9c4 <__malloc_unlock>
   85ce0:	f800283a 	ret
   85ce4:	100ad27a 	srli	r5,r2,9
   85ce8:	00c00104 	movi	r3,4
   85cec:	19404a36 	bltu	r3,r5,85e18 <_free_r+0x240>
   85cf0:	100ad1ba 	srli	r5,r2,6
   85cf4:	28c00e44 	addi	r3,r5,57
   85cf8:	18c7883a 	add	r3,r3,r3
   85cfc:	29400e04 	addi	r5,r5,56
   85d00:	18c7883a 	add	r3,r3,r3
   85d04:	18c7883a 	add	r3,r3,r3
   85d08:	1909883a 	add	r4,r3,r4
   85d0c:	20c00017 	ldw	r3,0(r4)
   85d10:	01c00274 	movhi	r7,9
   85d14:	213ffe04 	addi	r4,r4,-8
   85d18:	39c4b504 	addi	r7,r7,4820
   85d1c:	20c04426 	beq	r4,r3,85e30 <_free_r+0x258>
   85d20:	01ffff04 	movi	r7,-4
   85d24:	19400117 	ldw	r5,4(r3)
   85d28:	29ca703a 	and	r5,r5,r7
   85d2c:	1140022e 	bgeu	r2,r5,85d38 <_free_r+0x160>
   85d30:	18c00217 	ldw	r3,8(r3)
   85d34:	20fffb1e 	bne	r4,r3,85d24 <__alt_data_end+0xfffba234>
   85d38:	19000317 	ldw	r4,12(r3)
   85d3c:	31000315 	stw	r4,12(r6)
   85d40:	30c00215 	stw	r3,8(r6)
   85d44:	21800215 	stw	r6,8(r4)
   85d48:	19800315 	stw	r6,12(r3)
   85d4c:	003fde06 	br	85cc8 <__alt_data_end+0xfffba1d8>
   85d50:	29c00217 	ldw	r7,8(r5)
   85d54:	10c5883a 	add	r2,r2,r3
   85d58:	00c00274 	movhi	r3,9
   85d5c:	18c4b704 	addi	r3,r3,4828
   85d60:	38c03b26 	beq	r7,r3,85e50 <_free_r+0x278>
   85d64:	2a000317 	ldw	r8,12(r5)
   85d68:	11400054 	ori	r5,r2,1
   85d6c:	3087883a 	add	r3,r6,r2
   85d70:	3a000315 	stw	r8,12(r7)
   85d74:	41c00215 	stw	r7,8(r8)
   85d78:	31400115 	stw	r5,4(r6)
   85d7c:	18800015 	stw	r2,0(r3)
   85d80:	003fbd06 	br	85c78 <__alt_data_end+0xfffba188>
   85d84:	39c0004c 	andi	r7,r7,1
   85d88:	10c5883a 	add	r2,r2,r3
   85d8c:	3800071e 	bne	r7,zero,85dac <_free_r+0x1d4>
   85d90:	81fffe17 	ldw	r7,-8(r16)
   85d94:	31cdc83a 	sub	r6,r6,r7
   85d98:	30c00317 	ldw	r3,12(r6)
   85d9c:	31400217 	ldw	r5,8(r6)
   85da0:	11c5883a 	add	r2,r2,r7
   85da4:	28c00315 	stw	r3,12(r5)
   85da8:	19400215 	stw	r5,8(r3)
   85dac:	10c00054 	ori	r3,r2,1
   85db0:	30c00115 	stw	r3,4(r6)
   85db4:	00c00274 	movhi	r3,9
   85db8:	18ca3d04 	addi	r3,r3,10484
   85dbc:	18c00017 	ldw	r3,0(r3)
   85dc0:	21800215 	stw	r6,8(r4)
   85dc4:	10ffc036 	bltu	r2,r3,85cc8 <__alt_data_end+0xfffba1d8>
   85dc8:	00800274 	movhi	r2,9
   85dcc:	10913804 	addi	r2,r2,17632
   85dd0:	11400017 	ldw	r5,0(r2)
   85dd4:	8809883a 	mov	r4,r17
   85dd8:	0085ab40 	call	85ab4 <_malloc_trim_r>
   85ddc:	003fba06 	br	85cc8 <__alt_data_end+0xfffba1d8>
   85de0:	28c9883a 	add	r4,r5,r3
   85de4:	21000117 	ldw	r4,4(r4)
   85de8:	2100004c 	andi	r4,r4,1
   85dec:	2000391e 	bne	r4,zero,85ed4 <_free_r+0x2fc>
   85df0:	29c00217 	ldw	r7,8(r5)
   85df4:	29000317 	ldw	r4,12(r5)
   85df8:	1885883a 	add	r2,r3,r2
   85dfc:	10c00054 	ori	r3,r2,1
   85e00:	39000315 	stw	r4,12(r7)
   85e04:	21c00215 	stw	r7,8(r4)
   85e08:	30c00115 	stw	r3,4(r6)
   85e0c:	308d883a 	add	r6,r6,r2
   85e10:	30800015 	stw	r2,0(r6)
   85e14:	003fac06 	br	85cc8 <__alt_data_end+0xfffba1d8>
   85e18:	00c00504 	movi	r3,20
   85e1c:	19401536 	bltu	r3,r5,85e74 <_free_r+0x29c>
   85e20:	28c01704 	addi	r3,r5,92
   85e24:	18c7883a 	add	r3,r3,r3
   85e28:	294016c4 	addi	r5,r5,91
   85e2c:	003fb406 	br	85d00 <__alt_data_end+0xfffba210>
   85e30:	280bd0ba 	srai	r5,r5,2
   85e34:	00c00044 	movi	r3,1
   85e38:	38800117 	ldw	r2,4(r7)
   85e3c:	194a983a 	sll	r5,r3,r5
   85e40:	2007883a 	mov	r3,r4
   85e44:	2884b03a 	or	r2,r5,r2
   85e48:	38800115 	stw	r2,4(r7)
   85e4c:	003fbb06 	br	85d3c <__alt_data_end+0xfffba24c>
   85e50:	21800515 	stw	r6,20(r4)
   85e54:	21800415 	stw	r6,16(r4)
   85e58:	10c00054 	ori	r3,r2,1
   85e5c:	31c00315 	stw	r7,12(r6)
   85e60:	31c00215 	stw	r7,8(r6)
   85e64:	30c00115 	stw	r3,4(r6)
   85e68:	308d883a 	add	r6,r6,r2
   85e6c:	30800015 	stw	r2,0(r6)
   85e70:	003f9506 	br	85cc8 <__alt_data_end+0xfffba1d8>
   85e74:	00c01504 	movi	r3,84
   85e78:	19400536 	bltu	r3,r5,85e90 <_free_r+0x2b8>
   85e7c:	100ad33a 	srli	r5,r2,12
   85e80:	28c01bc4 	addi	r3,r5,111
   85e84:	18c7883a 	add	r3,r3,r3
   85e88:	29401b84 	addi	r5,r5,110
   85e8c:	003f9c06 	br	85d00 <__alt_data_end+0xfffba210>
   85e90:	00c05504 	movi	r3,340
   85e94:	19400536 	bltu	r3,r5,85eac <_free_r+0x2d4>
   85e98:	100ad3fa 	srli	r5,r2,15
   85e9c:	28c01e04 	addi	r3,r5,120
   85ea0:	18c7883a 	add	r3,r3,r3
   85ea4:	29401dc4 	addi	r5,r5,119
   85ea8:	003f9506 	br	85d00 <__alt_data_end+0xfffba210>
   85eac:	00c15504 	movi	r3,1364
   85eb0:	19400536 	bltu	r3,r5,85ec8 <_free_r+0x2f0>
   85eb4:	100ad4ba 	srli	r5,r2,18
   85eb8:	28c01f44 	addi	r3,r5,125
   85ebc:	18c7883a 	add	r3,r3,r3
   85ec0:	29401f04 	addi	r5,r5,124
   85ec4:	003f8e06 	br	85d00 <__alt_data_end+0xfffba210>
   85ec8:	00c03f84 	movi	r3,254
   85ecc:	01401f84 	movi	r5,126
   85ed0:	003f8b06 	br	85d00 <__alt_data_end+0xfffba210>
   85ed4:	10c00054 	ori	r3,r2,1
   85ed8:	30c00115 	stw	r3,4(r6)
   85edc:	308d883a 	add	r6,r6,r2
   85ee0:	30800015 	stw	r2,0(r6)
   85ee4:	003f7806 	br	85cc8 <__alt_data_end+0xfffba1d8>

00085ee8 <__sfvwrite_r>:
   85ee8:	30800217 	ldw	r2,8(r6)
   85eec:	10006726 	beq	r2,zero,8608c <__sfvwrite_r+0x1a4>
   85ef0:	28c0030b 	ldhu	r3,12(r5)
   85ef4:	defff404 	addi	sp,sp,-48
   85ef8:	dd400715 	stw	r21,28(sp)
   85efc:	dd000615 	stw	r20,24(sp)
   85f00:	dc000215 	stw	r16,8(sp)
   85f04:	dfc00b15 	stw	ra,44(sp)
   85f08:	df000a15 	stw	fp,40(sp)
   85f0c:	ddc00915 	stw	r23,36(sp)
   85f10:	dd800815 	stw	r22,32(sp)
   85f14:	dcc00515 	stw	r19,20(sp)
   85f18:	dc800415 	stw	r18,16(sp)
   85f1c:	dc400315 	stw	r17,12(sp)
   85f20:	1880020c 	andi	r2,r3,8
   85f24:	2821883a 	mov	r16,r5
   85f28:	202b883a 	mov	r21,r4
   85f2c:	3029883a 	mov	r20,r6
   85f30:	10002726 	beq	r2,zero,85fd0 <__sfvwrite_r+0xe8>
   85f34:	28800417 	ldw	r2,16(r5)
   85f38:	10002526 	beq	r2,zero,85fd0 <__sfvwrite_r+0xe8>
   85f3c:	1880008c 	andi	r2,r3,2
   85f40:	a4400017 	ldw	r17,0(r20)
   85f44:	10002a26 	beq	r2,zero,85ff0 <__sfvwrite_r+0x108>
   85f48:	05a00034 	movhi	r22,32768
   85f4c:	0027883a 	mov	r19,zero
   85f50:	0025883a 	mov	r18,zero
   85f54:	b5bf0004 	addi	r22,r22,-1024
   85f58:	980d883a 	mov	r6,r19
   85f5c:	a809883a 	mov	r4,r21
   85f60:	90004626 	beq	r18,zero,8607c <__sfvwrite_r+0x194>
   85f64:	900f883a 	mov	r7,r18
   85f68:	b480022e 	bgeu	r22,r18,85f74 <__sfvwrite_r+0x8c>
   85f6c:	01e00034 	movhi	r7,32768
   85f70:	39ff0004 	addi	r7,r7,-1024
   85f74:	80800917 	ldw	r2,36(r16)
   85f78:	81400717 	ldw	r5,28(r16)
   85f7c:	103ee83a 	callr	r2
   85f80:	0080570e 	bge	zero,r2,860e0 <__sfvwrite_r+0x1f8>
   85f84:	a0c00217 	ldw	r3,8(r20)
   85f88:	98a7883a 	add	r19,r19,r2
   85f8c:	90a5c83a 	sub	r18,r18,r2
   85f90:	1885c83a 	sub	r2,r3,r2
   85f94:	a0800215 	stw	r2,8(r20)
   85f98:	103fef1e 	bne	r2,zero,85f58 <__alt_data_end+0xfffba468>
   85f9c:	0005883a 	mov	r2,zero
   85fa0:	dfc00b17 	ldw	ra,44(sp)
   85fa4:	df000a17 	ldw	fp,40(sp)
   85fa8:	ddc00917 	ldw	r23,36(sp)
   85fac:	dd800817 	ldw	r22,32(sp)
   85fb0:	dd400717 	ldw	r21,28(sp)
   85fb4:	dd000617 	ldw	r20,24(sp)
   85fb8:	dcc00517 	ldw	r19,20(sp)
   85fbc:	dc800417 	ldw	r18,16(sp)
   85fc0:	dc400317 	ldw	r17,12(sp)
   85fc4:	dc000217 	ldw	r16,8(sp)
   85fc8:	dec00c04 	addi	sp,sp,48
   85fcc:	f800283a 	ret
   85fd0:	800b883a 	mov	r5,r16
   85fd4:	a809883a 	mov	r4,r21
   85fd8:	0083a900 	call	83a90 <__swsetup_r>
   85fdc:	1000eb1e 	bne	r2,zero,8638c <__sfvwrite_r+0x4a4>
   85fe0:	80c0030b 	ldhu	r3,12(r16)
   85fe4:	a4400017 	ldw	r17,0(r20)
   85fe8:	1880008c 	andi	r2,r3,2
   85fec:	103fd61e 	bne	r2,zero,85f48 <__alt_data_end+0xfffba458>
   85ff0:	1880004c 	andi	r2,r3,1
   85ff4:	10003f1e 	bne	r2,zero,860f4 <__sfvwrite_r+0x20c>
   85ff8:	0039883a 	mov	fp,zero
   85ffc:	0025883a 	mov	r18,zero
   86000:	90001a26 	beq	r18,zero,8606c <__sfvwrite_r+0x184>
   86004:	1880800c 	andi	r2,r3,512
   86008:	84c00217 	ldw	r19,8(r16)
   8600c:	10002126 	beq	r2,zero,86094 <__sfvwrite_r+0x1ac>
   86010:	982f883a 	mov	r23,r19
   86014:	94c09336 	bltu	r18,r19,86264 <__sfvwrite_r+0x37c>
   86018:	1881200c 	andi	r2,r3,1152
   8601c:	10009e1e 	bne	r2,zero,86298 <__sfvwrite_r+0x3b0>
   86020:	81000017 	ldw	r4,0(r16)
   86024:	b80d883a 	mov	r6,r23
   86028:	e00b883a 	mov	r5,fp
   8602c:	00872580 	call	87258 <memmove>
   86030:	80c00217 	ldw	r3,8(r16)
   86034:	81000017 	ldw	r4,0(r16)
   86038:	9005883a 	mov	r2,r18
   8603c:	1ce7c83a 	sub	r19,r3,r19
   86040:	25cf883a 	add	r7,r4,r23
   86044:	84c00215 	stw	r19,8(r16)
   86048:	81c00015 	stw	r7,0(r16)
   8604c:	a0c00217 	ldw	r3,8(r20)
   86050:	e0b9883a 	add	fp,fp,r2
   86054:	90a5c83a 	sub	r18,r18,r2
   86058:	18a7c83a 	sub	r19,r3,r2
   8605c:	a4c00215 	stw	r19,8(r20)
   86060:	983fce26 	beq	r19,zero,85f9c <__alt_data_end+0xfffba4ac>
   86064:	80c0030b 	ldhu	r3,12(r16)
   86068:	903fe61e 	bne	r18,zero,86004 <__alt_data_end+0xfffba514>
   8606c:	8f000017 	ldw	fp,0(r17)
   86070:	8c800117 	ldw	r18,4(r17)
   86074:	8c400204 	addi	r17,r17,8
   86078:	003fe106 	br	86000 <__alt_data_end+0xfffba510>
   8607c:	8cc00017 	ldw	r19,0(r17)
   86080:	8c800117 	ldw	r18,4(r17)
   86084:	8c400204 	addi	r17,r17,8
   86088:	003fb306 	br	85f58 <__alt_data_end+0xfffba468>
   8608c:	0005883a 	mov	r2,zero
   86090:	f800283a 	ret
   86094:	81000017 	ldw	r4,0(r16)
   86098:	80800417 	ldw	r2,16(r16)
   8609c:	11005736 	bltu	r2,r4,861fc <__sfvwrite_r+0x314>
   860a0:	85c00517 	ldw	r23,20(r16)
   860a4:	95c05536 	bltu	r18,r23,861fc <__sfvwrite_r+0x314>
   860a8:	00a00034 	movhi	r2,32768
   860ac:	10bfffc4 	addi	r2,r2,-1
   860b0:	9009883a 	mov	r4,r18
   860b4:	1480012e 	bgeu	r2,r18,860bc <__sfvwrite_r+0x1d4>
   860b8:	1009883a 	mov	r4,r2
   860bc:	b80b883a 	mov	r5,r23
   860c0:	00813680 	call	81368 <__divsi3>
   860c4:	15cf383a 	mul	r7,r2,r23
   860c8:	81400717 	ldw	r5,28(r16)
   860cc:	80800917 	ldw	r2,36(r16)
   860d0:	e00d883a 	mov	r6,fp
   860d4:	a809883a 	mov	r4,r21
   860d8:	103ee83a 	callr	r2
   860dc:	00bfdb16 	blt	zero,r2,8604c <__alt_data_end+0xfffba55c>
   860e0:	8080030b 	ldhu	r2,12(r16)
   860e4:	10801014 	ori	r2,r2,64
   860e8:	8080030d 	sth	r2,12(r16)
   860ec:	00bfffc4 	movi	r2,-1
   860f0:	003fab06 	br	85fa0 <__alt_data_end+0xfffba4b0>
   860f4:	0027883a 	mov	r19,zero
   860f8:	0011883a 	mov	r8,zero
   860fc:	0039883a 	mov	fp,zero
   86100:	0025883a 	mov	r18,zero
   86104:	90001f26 	beq	r18,zero,86184 <__sfvwrite_r+0x29c>
   86108:	40005a26 	beq	r8,zero,86274 <__sfvwrite_r+0x38c>
   8610c:	982d883a 	mov	r22,r19
   86110:	94c0012e 	bgeu	r18,r19,86118 <__sfvwrite_r+0x230>
   86114:	902d883a 	mov	r22,r18
   86118:	81000017 	ldw	r4,0(r16)
   8611c:	80800417 	ldw	r2,16(r16)
   86120:	b02f883a 	mov	r23,r22
   86124:	81c00517 	ldw	r7,20(r16)
   86128:	1100032e 	bgeu	r2,r4,86138 <__sfvwrite_r+0x250>
   8612c:	80c00217 	ldw	r3,8(r16)
   86130:	38c7883a 	add	r3,r7,r3
   86134:	1d801816 	blt	r3,r22,86198 <__sfvwrite_r+0x2b0>
   86138:	b1c03e16 	blt	r22,r7,86234 <__sfvwrite_r+0x34c>
   8613c:	80800917 	ldw	r2,36(r16)
   86140:	81400717 	ldw	r5,28(r16)
   86144:	e00d883a 	mov	r6,fp
   86148:	da000115 	stw	r8,4(sp)
   8614c:	a809883a 	mov	r4,r21
   86150:	103ee83a 	callr	r2
   86154:	102f883a 	mov	r23,r2
   86158:	da000117 	ldw	r8,4(sp)
   8615c:	00bfe00e 	bge	zero,r2,860e0 <__alt_data_end+0xfffba5f0>
   86160:	9de7c83a 	sub	r19,r19,r23
   86164:	98001f26 	beq	r19,zero,861e4 <__sfvwrite_r+0x2fc>
   86168:	a0800217 	ldw	r2,8(r20)
   8616c:	e5f9883a 	add	fp,fp,r23
   86170:	95e5c83a 	sub	r18,r18,r23
   86174:	15efc83a 	sub	r23,r2,r23
   86178:	a5c00215 	stw	r23,8(r20)
   8617c:	b83f8726 	beq	r23,zero,85f9c <__alt_data_end+0xfffba4ac>
   86180:	903fe11e 	bne	r18,zero,86108 <__alt_data_end+0xfffba618>
   86184:	8f000017 	ldw	fp,0(r17)
   86188:	8c800117 	ldw	r18,4(r17)
   8618c:	0011883a 	mov	r8,zero
   86190:	8c400204 	addi	r17,r17,8
   86194:	003fdb06 	br	86104 <__alt_data_end+0xfffba614>
   86198:	180d883a 	mov	r6,r3
   8619c:	e00b883a 	mov	r5,fp
   861a0:	da000115 	stw	r8,4(sp)
   861a4:	d8c00015 	stw	r3,0(sp)
   861a8:	00872580 	call	87258 <memmove>
   861ac:	d8c00017 	ldw	r3,0(sp)
   861b0:	80800017 	ldw	r2,0(r16)
   861b4:	800b883a 	mov	r5,r16
   861b8:	a809883a 	mov	r4,r21
   861bc:	10c5883a 	add	r2,r2,r3
   861c0:	80800015 	stw	r2,0(r16)
   861c4:	d8c00015 	stw	r3,0(sp)
   861c8:	00856880 	call	85688 <_fflush_r>
   861cc:	d8c00017 	ldw	r3,0(sp)
   861d0:	da000117 	ldw	r8,4(sp)
   861d4:	103fc21e 	bne	r2,zero,860e0 <__alt_data_end+0xfffba5f0>
   861d8:	182f883a 	mov	r23,r3
   861dc:	9de7c83a 	sub	r19,r19,r23
   861e0:	983fe11e 	bne	r19,zero,86168 <__alt_data_end+0xfffba678>
   861e4:	800b883a 	mov	r5,r16
   861e8:	a809883a 	mov	r4,r21
   861ec:	00856880 	call	85688 <_fflush_r>
   861f0:	103fbb1e 	bne	r2,zero,860e0 <__alt_data_end+0xfffba5f0>
   861f4:	0011883a 	mov	r8,zero
   861f8:	003fdb06 	br	86168 <__alt_data_end+0xfffba678>
   861fc:	94c0012e 	bgeu	r18,r19,86204 <__sfvwrite_r+0x31c>
   86200:	9027883a 	mov	r19,r18
   86204:	980d883a 	mov	r6,r19
   86208:	e00b883a 	mov	r5,fp
   8620c:	00872580 	call	87258 <memmove>
   86210:	80800217 	ldw	r2,8(r16)
   86214:	80c00017 	ldw	r3,0(r16)
   86218:	14c5c83a 	sub	r2,r2,r19
   8621c:	1cc7883a 	add	r3,r3,r19
   86220:	80800215 	stw	r2,8(r16)
   86224:	80c00015 	stw	r3,0(r16)
   86228:	10004326 	beq	r2,zero,86338 <__sfvwrite_r+0x450>
   8622c:	9805883a 	mov	r2,r19
   86230:	003f8606 	br	8604c <__alt_data_end+0xfffba55c>
   86234:	b00d883a 	mov	r6,r22
   86238:	e00b883a 	mov	r5,fp
   8623c:	da000115 	stw	r8,4(sp)
   86240:	00872580 	call	87258 <memmove>
   86244:	80800217 	ldw	r2,8(r16)
   86248:	80c00017 	ldw	r3,0(r16)
   8624c:	da000117 	ldw	r8,4(sp)
   86250:	1585c83a 	sub	r2,r2,r22
   86254:	1dad883a 	add	r22,r3,r22
   86258:	80800215 	stw	r2,8(r16)
   8625c:	85800015 	stw	r22,0(r16)
   86260:	003fbf06 	br	86160 <__alt_data_end+0xfffba670>
   86264:	81000017 	ldw	r4,0(r16)
   86268:	9027883a 	mov	r19,r18
   8626c:	902f883a 	mov	r23,r18
   86270:	003f6c06 	br	86024 <__alt_data_end+0xfffba534>
   86274:	900d883a 	mov	r6,r18
   86278:	01400284 	movi	r5,10
   8627c:	e009883a 	mov	r4,fp
   86280:	008702c0 	call	8702c <memchr>
   86284:	10003e26 	beq	r2,zero,86380 <__sfvwrite_r+0x498>
   86288:	10800044 	addi	r2,r2,1
   8628c:	1727c83a 	sub	r19,r2,fp
   86290:	02000044 	movi	r8,1
   86294:	003f9d06 	br	8610c <__alt_data_end+0xfffba61c>
   86298:	80800517 	ldw	r2,20(r16)
   8629c:	81400417 	ldw	r5,16(r16)
   862a0:	81c00017 	ldw	r7,0(r16)
   862a4:	10a7883a 	add	r19,r2,r2
   862a8:	9885883a 	add	r2,r19,r2
   862ac:	1026d7fa 	srli	r19,r2,31
   862b0:	396dc83a 	sub	r22,r7,r5
   862b4:	b1000044 	addi	r4,r22,1
   862b8:	9885883a 	add	r2,r19,r2
   862bc:	1027d07a 	srai	r19,r2,1
   862c0:	2485883a 	add	r2,r4,r18
   862c4:	980d883a 	mov	r6,r19
   862c8:	9880022e 	bgeu	r19,r2,862d4 <__sfvwrite_r+0x3ec>
   862cc:	1027883a 	mov	r19,r2
   862d0:	100d883a 	mov	r6,r2
   862d4:	18c1000c 	andi	r3,r3,1024
   862d8:	18001c26 	beq	r3,zero,8634c <__sfvwrite_r+0x464>
   862dc:	300b883a 	mov	r5,r6
   862e0:	a809883a 	mov	r4,r21
   862e4:	00868200 	call	86820 <_malloc_r>
   862e8:	102f883a 	mov	r23,r2
   862ec:	10002926 	beq	r2,zero,86394 <__sfvwrite_r+0x4ac>
   862f0:	81400417 	ldw	r5,16(r16)
   862f4:	b00d883a 	mov	r6,r22
   862f8:	1009883a 	mov	r4,r2
   862fc:	00871100 	call	87110 <memcpy>
   86300:	8080030b 	ldhu	r2,12(r16)
   86304:	00fedfc4 	movi	r3,-1153
   86308:	10c4703a 	and	r2,r2,r3
   8630c:	10802014 	ori	r2,r2,128
   86310:	8080030d 	sth	r2,12(r16)
   86314:	bd89883a 	add	r4,r23,r22
   86318:	9d8fc83a 	sub	r7,r19,r22
   8631c:	85c00415 	stw	r23,16(r16)
   86320:	84c00515 	stw	r19,20(r16)
   86324:	81000015 	stw	r4,0(r16)
   86328:	9027883a 	mov	r19,r18
   8632c:	81c00215 	stw	r7,8(r16)
   86330:	902f883a 	mov	r23,r18
   86334:	003f3b06 	br	86024 <__alt_data_end+0xfffba534>
   86338:	800b883a 	mov	r5,r16
   8633c:	a809883a 	mov	r4,r21
   86340:	00856880 	call	85688 <_fflush_r>
   86344:	103fb926 	beq	r2,zero,8622c <__alt_data_end+0xfffba73c>
   86348:	003f6506 	br	860e0 <__alt_data_end+0xfffba5f0>
   8634c:	a809883a 	mov	r4,r21
   86350:	00884d80 	call	884d8 <_realloc_r>
   86354:	102f883a 	mov	r23,r2
   86358:	103fee1e 	bne	r2,zero,86314 <__alt_data_end+0xfffba824>
   8635c:	81400417 	ldw	r5,16(r16)
   86360:	a809883a 	mov	r4,r21
   86364:	0085bd80 	call	85bd8 <_free_r>
   86368:	8080030b 	ldhu	r2,12(r16)
   8636c:	00ffdfc4 	movi	r3,-129
   86370:	1884703a 	and	r2,r3,r2
   86374:	00c00304 	movi	r3,12
   86378:	a8c00015 	stw	r3,0(r21)
   8637c:	003f5906 	br	860e4 <__alt_data_end+0xfffba5f4>
   86380:	94c00044 	addi	r19,r18,1
   86384:	02000044 	movi	r8,1
   86388:	003f6006 	br	8610c <__alt_data_end+0xfffba61c>
   8638c:	00bfffc4 	movi	r2,-1
   86390:	003f0306 	br	85fa0 <__alt_data_end+0xfffba4b0>
   86394:	00800304 	movi	r2,12
   86398:	a8800015 	stw	r2,0(r21)
   8639c:	8080030b 	ldhu	r2,12(r16)
   863a0:	003f5006 	br	860e4 <__alt_data_end+0xfffba5f4>

000863a4 <_fwalk>:
   863a4:	defff704 	addi	sp,sp,-36
   863a8:	dd000415 	stw	r20,16(sp)
   863ac:	dfc00815 	stw	ra,32(sp)
   863b0:	ddc00715 	stw	r23,28(sp)
   863b4:	dd800615 	stw	r22,24(sp)
   863b8:	dd400515 	stw	r21,20(sp)
   863bc:	dcc00315 	stw	r19,12(sp)
   863c0:	dc800215 	stw	r18,8(sp)
   863c4:	dc400115 	stw	r17,4(sp)
   863c8:	dc000015 	stw	r16,0(sp)
   863cc:	2500b804 	addi	r20,r4,736
   863d0:	a0002326 	beq	r20,zero,86460 <_fwalk+0xbc>
   863d4:	282b883a 	mov	r21,r5
   863d8:	002f883a 	mov	r23,zero
   863dc:	05800044 	movi	r22,1
   863e0:	04ffffc4 	movi	r19,-1
   863e4:	a4400117 	ldw	r17,4(r20)
   863e8:	a4800217 	ldw	r18,8(r20)
   863ec:	8c7fffc4 	addi	r17,r17,-1
   863f0:	88000d16 	blt	r17,zero,86428 <_fwalk+0x84>
   863f4:	94000304 	addi	r16,r18,12
   863f8:	94800384 	addi	r18,r18,14
   863fc:	8080000b 	ldhu	r2,0(r16)
   86400:	8c7fffc4 	addi	r17,r17,-1
   86404:	813ffd04 	addi	r4,r16,-12
   86408:	b080042e 	bgeu	r22,r2,8641c <_fwalk+0x78>
   8640c:	9080000f 	ldh	r2,0(r18)
   86410:	14c00226 	beq	r2,r19,8641c <_fwalk+0x78>
   86414:	a83ee83a 	callr	r21
   86418:	b8aeb03a 	or	r23,r23,r2
   8641c:	84001a04 	addi	r16,r16,104
   86420:	94801a04 	addi	r18,r18,104
   86424:	8cfff51e 	bne	r17,r19,863fc <__alt_data_end+0xfffba90c>
   86428:	a5000017 	ldw	r20,0(r20)
   8642c:	a03fed1e 	bne	r20,zero,863e4 <__alt_data_end+0xfffba8f4>
   86430:	b805883a 	mov	r2,r23
   86434:	dfc00817 	ldw	ra,32(sp)
   86438:	ddc00717 	ldw	r23,28(sp)
   8643c:	dd800617 	ldw	r22,24(sp)
   86440:	dd400517 	ldw	r21,20(sp)
   86444:	dd000417 	ldw	r20,16(sp)
   86448:	dcc00317 	ldw	r19,12(sp)
   8644c:	dc800217 	ldw	r18,8(sp)
   86450:	dc400117 	ldw	r17,4(sp)
   86454:	dc000017 	ldw	r16,0(sp)
   86458:	dec00904 	addi	sp,sp,36
   8645c:	f800283a 	ret
   86460:	002f883a 	mov	r23,zero
   86464:	003ff206 	br	86430 <__alt_data_end+0xfffba940>

00086468 <_fwalk_reent>:
   86468:	defff704 	addi	sp,sp,-36
   8646c:	dd000415 	stw	r20,16(sp)
   86470:	dfc00815 	stw	ra,32(sp)
   86474:	ddc00715 	stw	r23,28(sp)
   86478:	dd800615 	stw	r22,24(sp)
   8647c:	dd400515 	stw	r21,20(sp)
   86480:	dcc00315 	stw	r19,12(sp)
   86484:	dc800215 	stw	r18,8(sp)
   86488:	dc400115 	stw	r17,4(sp)
   8648c:	dc000015 	stw	r16,0(sp)
   86490:	2500b804 	addi	r20,r4,736
   86494:	a0002326 	beq	r20,zero,86524 <_fwalk_reent+0xbc>
   86498:	282b883a 	mov	r21,r5
   8649c:	2027883a 	mov	r19,r4
   864a0:	002f883a 	mov	r23,zero
   864a4:	05800044 	movi	r22,1
   864a8:	04bfffc4 	movi	r18,-1
   864ac:	a4400117 	ldw	r17,4(r20)
   864b0:	a4000217 	ldw	r16,8(r20)
   864b4:	8c7fffc4 	addi	r17,r17,-1
   864b8:	88000c16 	blt	r17,zero,864ec <_fwalk_reent+0x84>
   864bc:	84000304 	addi	r16,r16,12
   864c0:	8080000b 	ldhu	r2,0(r16)
   864c4:	8c7fffc4 	addi	r17,r17,-1
   864c8:	817ffd04 	addi	r5,r16,-12
   864cc:	b080052e 	bgeu	r22,r2,864e4 <_fwalk_reent+0x7c>
   864d0:	8080008f 	ldh	r2,2(r16)
   864d4:	9809883a 	mov	r4,r19
   864d8:	14800226 	beq	r2,r18,864e4 <_fwalk_reent+0x7c>
   864dc:	a83ee83a 	callr	r21
   864e0:	b8aeb03a 	or	r23,r23,r2
   864e4:	84001a04 	addi	r16,r16,104
   864e8:	8cbff51e 	bne	r17,r18,864c0 <__alt_data_end+0xfffba9d0>
   864ec:	a5000017 	ldw	r20,0(r20)
   864f0:	a03fee1e 	bne	r20,zero,864ac <__alt_data_end+0xfffba9bc>
   864f4:	b805883a 	mov	r2,r23
   864f8:	dfc00817 	ldw	ra,32(sp)
   864fc:	ddc00717 	ldw	r23,28(sp)
   86500:	dd800617 	ldw	r22,24(sp)
   86504:	dd400517 	ldw	r21,20(sp)
   86508:	dd000417 	ldw	r20,16(sp)
   8650c:	dcc00317 	ldw	r19,12(sp)
   86510:	dc800217 	ldw	r18,8(sp)
   86514:	dc400117 	ldw	r17,4(sp)
   86518:	dc000017 	ldw	r16,0(sp)
   8651c:	dec00904 	addi	sp,sp,36
   86520:	f800283a 	ret
   86524:	002f883a 	mov	r23,zero
   86528:	003ff206 	br	864f4 <__alt_data_end+0xfffbaa04>

0008652c <_gettimeofday_r>:
   8652c:	defffd04 	addi	sp,sp,-12
   86530:	2805883a 	mov	r2,r5
   86534:	dc000015 	stw	r16,0(sp)
   86538:	04000274 	movhi	r16,9
   8653c:	dc400115 	stw	r17,4(sp)
   86540:	84113204 	addi	r16,r16,17608
   86544:	2023883a 	mov	r17,r4
   86548:	300b883a 	mov	r5,r6
   8654c:	1009883a 	mov	r4,r2
   86550:	dfc00215 	stw	ra,8(sp)
   86554:	80000015 	stw	zero,0(r16)
   86558:	008e0340 	call	8e034 <gettimeofday>
   8655c:	00ffffc4 	movi	r3,-1
   86560:	10c00526 	beq	r2,r3,86578 <_gettimeofday_r+0x4c>
   86564:	dfc00217 	ldw	ra,8(sp)
   86568:	dc400117 	ldw	r17,4(sp)
   8656c:	dc000017 	ldw	r16,0(sp)
   86570:	dec00304 	addi	sp,sp,12
   86574:	f800283a 	ret
   86578:	80c00017 	ldw	r3,0(r16)
   8657c:	183ff926 	beq	r3,zero,86564 <__alt_data_end+0xfffbaa74>
   86580:	88c00015 	stw	r3,0(r17)
   86584:	003ff706 	br	86564 <__alt_data_end+0xfffbaa74>

00086588 <_setlocale_r>:
   86588:	30001b26 	beq	r6,zero,865f8 <_setlocale_r+0x70>
   8658c:	01400274 	movhi	r5,9
   86590:	defffe04 	addi	sp,sp,-8
   86594:	2942c204 	addi	r5,r5,2824
   86598:	3009883a 	mov	r4,r6
   8659c:	dc000015 	stw	r16,0(sp)
   865a0:	dfc00115 	stw	ra,4(sp)
   865a4:	3021883a 	mov	r16,r6
   865a8:	0088c400 	call	88c40 <strcmp>
   865ac:	1000061e 	bne	r2,zero,865c8 <_setlocale_r+0x40>
   865b0:	00800274 	movhi	r2,9
   865b4:	1082c104 	addi	r2,r2,2820
   865b8:	dfc00117 	ldw	ra,4(sp)
   865bc:	dc000017 	ldw	r16,0(sp)
   865c0:	dec00204 	addi	sp,sp,8
   865c4:	f800283a 	ret
   865c8:	01400274 	movhi	r5,9
   865cc:	2942c104 	addi	r5,r5,2820
   865d0:	8009883a 	mov	r4,r16
   865d4:	0088c400 	call	88c40 <strcmp>
   865d8:	103ff526 	beq	r2,zero,865b0 <__alt_data_end+0xfffbaac0>
   865dc:	01400274 	movhi	r5,9
   865e0:	2942ac04 	addi	r5,r5,2736
   865e4:	8009883a 	mov	r4,r16
   865e8:	0088c400 	call	88c40 <strcmp>
   865ec:	103ff026 	beq	r2,zero,865b0 <__alt_data_end+0xfffbaac0>
   865f0:	0005883a 	mov	r2,zero
   865f4:	003ff006 	br	865b8 <__alt_data_end+0xfffbaac8>
   865f8:	00800274 	movhi	r2,9
   865fc:	1082c104 	addi	r2,r2,2820
   86600:	f800283a 	ret

00086604 <__locale_charset>:
   86604:	00800274 	movhi	r2,9
   86608:	10849f04 	addi	r2,r2,4732
   8660c:	f800283a 	ret

00086610 <__locale_mb_cur_max>:
   86610:	00800274 	movhi	r2,9
   86614:	108a3b04 	addi	r2,r2,10476
   86618:	10800017 	ldw	r2,0(r2)
   8661c:	f800283a 	ret

00086620 <__locale_msgcharset>:
   86620:	00800274 	movhi	r2,9
   86624:	10849704 	addi	r2,r2,4700
   86628:	f800283a 	ret

0008662c <__locale_cjk_lang>:
   8662c:	0005883a 	mov	r2,zero
   86630:	f800283a 	ret

00086634 <_localeconv_r>:
   86634:	00800274 	movhi	r2,9
   86638:	1084a704 	addi	r2,r2,4764
   8663c:	f800283a 	ret

00086640 <setlocale>:
   86640:	00800274 	movhi	r2,9
   86644:	108a3a04 	addi	r2,r2,10472
   86648:	280d883a 	mov	r6,r5
   8664c:	200b883a 	mov	r5,r4
   86650:	11000017 	ldw	r4,0(r2)
   86654:	00865881 	jmpi	86588 <_setlocale_r>

00086658 <localeconv>:
   86658:	00800274 	movhi	r2,9
   8665c:	1084a704 	addi	r2,r2,4764
   86660:	f800283a 	ret

00086664 <__smakebuf_r>:
   86664:	2880030b 	ldhu	r2,12(r5)
   86668:	10c0008c 	andi	r3,r2,2
   8666c:	1800411e 	bne	r3,zero,86774 <__smakebuf_r+0x110>
   86670:	deffec04 	addi	sp,sp,-80
   86674:	dc000f15 	stw	r16,60(sp)
   86678:	2821883a 	mov	r16,r5
   8667c:	2940038f 	ldh	r5,14(r5)
   86680:	dc401015 	stw	r17,64(sp)
   86684:	dfc01315 	stw	ra,76(sp)
   86688:	dcc01215 	stw	r19,72(sp)
   8668c:	dc801115 	stw	r18,68(sp)
   86690:	2023883a 	mov	r17,r4
   86694:	28001c16 	blt	r5,zero,86708 <__smakebuf_r+0xa4>
   86698:	d80d883a 	mov	r6,sp
   8669c:	008a7e80 	call	8a7e8 <_fstat_r>
   866a0:	10001816 	blt	r2,zero,86704 <__smakebuf_r+0xa0>
   866a4:	d8800117 	ldw	r2,4(sp)
   866a8:	00e00014 	movui	r3,32768
   866ac:	10bc000c 	andi	r2,r2,61440
   866b0:	14c80020 	cmpeqi	r19,r2,8192
   866b4:	10c03726 	beq	r2,r3,86794 <__smakebuf_r+0x130>
   866b8:	80c0030b 	ldhu	r3,12(r16)
   866bc:	18c20014 	ori	r3,r3,2048
   866c0:	80c0030d 	sth	r3,12(r16)
   866c4:	00c80004 	movi	r3,8192
   866c8:	10c0521e 	bne	r2,r3,86814 <__smakebuf_r+0x1b0>
   866cc:	8140038f 	ldh	r5,14(r16)
   866d0:	8809883a 	mov	r4,r17
   866d4:	008a8440 	call	8a844 <_isatty_r>
   866d8:	10004c26 	beq	r2,zero,8680c <__smakebuf_r+0x1a8>
   866dc:	8080030b 	ldhu	r2,12(r16)
   866e0:	80c010c4 	addi	r3,r16,67
   866e4:	80c00015 	stw	r3,0(r16)
   866e8:	10800054 	ori	r2,r2,1
   866ec:	8080030d 	sth	r2,12(r16)
   866f0:	00800044 	movi	r2,1
   866f4:	80c00415 	stw	r3,16(r16)
   866f8:	80800515 	stw	r2,20(r16)
   866fc:	04810004 	movi	r18,1024
   86700:	00000706 	br	86720 <__smakebuf_r+0xbc>
   86704:	8080030b 	ldhu	r2,12(r16)
   86708:	10c0200c 	andi	r3,r2,128
   8670c:	18001f1e 	bne	r3,zero,8678c <__smakebuf_r+0x128>
   86710:	04810004 	movi	r18,1024
   86714:	10820014 	ori	r2,r2,2048
   86718:	8080030d 	sth	r2,12(r16)
   8671c:	0027883a 	mov	r19,zero
   86720:	900b883a 	mov	r5,r18
   86724:	8809883a 	mov	r4,r17
   86728:	00868200 	call	86820 <_malloc_r>
   8672c:	10002c26 	beq	r2,zero,867e0 <__smakebuf_r+0x17c>
   86730:	80c0030b 	ldhu	r3,12(r16)
   86734:	01000234 	movhi	r4,8
   86738:	2115c704 	addi	r4,r4,22300
   8673c:	89000f15 	stw	r4,60(r17)
   86740:	18c02014 	ori	r3,r3,128
   86744:	80c0030d 	sth	r3,12(r16)
   86748:	80800015 	stw	r2,0(r16)
   8674c:	80800415 	stw	r2,16(r16)
   86750:	84800515 	stw	r18,20(r16)
   86754:	98001a1e 	bne	r19,zero,867c0 <__smakebuf_r+0x15c>
   86758:	dfc01317 	ldw	ra,76(sp)
   8675c:	dcc01217 	ldw	r19,72(sp)
   86760:	dc801117 	ldw	r18,68(sp)
   86764:	dc401017 	ldw	r17,64(sp)
   86768:	dc000f17 	ldw	r16,60(sp)
   8676c:	dec01404 	addi	sp,sp,80
   86770:	f800283a 	ret
   86774:	288010c4 	addi	r2,r5,67
   86778:	28800015 	stw	r2,0(r5)
   8677c:	28800415 	stw	r2,16(r5)
   86780:	00800044 	movi	r2,1
   86784:	28800515 	stw	r2,20(r5)
   86788:	f800283a 	ret
   8678c:	04801004 	movi	r18,64
   86790:	003fe006 	br	86714 <__alt_data_end+0xfffbac24>
   86794:	81000a17 	ldw	r4,40(r16)
   86798:	00c00274 	movhi	r3,9
   8679c:	18e2f704 	addi	r3,r3,-29732
   867a0:	20ffc51e 	bne	r4,r3,866b8 <__alt_data_end+0xfffbabc8>
   867a4:	8080030b 	ldhu	r2,12(r16)
   867a8:	04810004 	movi	r18,1024
   867ac:	84801315 	stw	r18,76(r16)
   867b0:	1484b03a 	or	r2,r2,r18
   867b4:	8080030d 	sth	r2,12(r16)
   867b8:	0027883a 	mov	r19,zero
   867bc:	003fd806 	br	86720 <__alt_data_end+0xfffbac30>
   867c0:	8140038f 	ldh	r5,14(r16)
   867c4:	8809883a 	mov	r4,r17
   867c8:	008a8440 	call	8a844 <_isatty_r>
   867cc:	103fe226 	beq	r2,zero,86758 <__alt_data_end+0xfffbac68>
   867d0:	8080030b 	ldhu	r2,12(r16)
   867d4:	10800054 	ori	r2,r2,1
   867d8:	8080030d 	sth	r2,12(r16)
   867dc:	003fde06 	br	86758 <__alt_data_end+0xfffbac68>
   867e0:	8080030b 	ldhu	r2,12(r16)
   867e4:	10c0800c 	andi	r3,r2,512
   867e8:	183fdb1e 	bne	r3,zero,86758 <__alt_data_end+0xfffbac68>
   867ec:	10800094 	ori	r2,r2,2
   867f0:	80c010c4 	addi	r3,r16,67
   867f4:	8080030d 	sth	r2,12(r16)
   867f8:	00800044 	movi	r2,1
   867fc:	80c00015 	stw	r3,0(r16)
   86800:	80c00415 	stw	r3,16(r16)
   86804:	80800515 	stw	r2,20(r16)
   86808:	003fd306 	br	86758 <__alt_data_end+0xfffbac68>
   8680c:	04810004 	movi	r18,1024
   86810:	003fc306 	br	86720 <__alt_data_end+0xfffbac30>
   86814:	0027883a 	mov	r19,zero
   86818:	04810004 	movi	r18,1024
   8681c:	003fc006 	br	86720 <__alt_data_end+0xfffbac30>

00086820 <_malloc_r>:
   86820:	defff504 	addi	sp,sp,-44
   86824:	dc800315 	stw	r18,12(sp)
   86828:	dfc00a15 	stw	ra,40(sp)
   8682c:	df000915 	stw	fp,36(sp)
   86830:	ddc00815 	stw	r23,32(sp)
   86834:	dd800715 	stw	r22,28(sp)
   86838:	dd400615 	stw	r21,24(sp)
   8683c:	dd000515 	stw	r20,20(sp)
   86840:	dcc00415 	stw	r19,16(sp)
   86844:	dc400215 	stw	r17,8(sp)
   86848:	dc000115 	stw	r16,4(sp)
   8684c:	288002c4 	addi	r2,r5,11
   86850:	00c00584 	movi	r3,22
   86854:	2025883a 	mov	r18,r4
   86858:	18807f2e 	bgeu	r3,r2,86a58 <_malloc_r+0x238>
   8685c:	047ffe04 	movi	r17,-8
   86860:	1462703a 	and	r17,r2,r17
   86864:	8800a316 	blt	r17,zero,86af4 <_malloc_r+0x2d4>
   86868:	8940a236 	bltu	r17,r5,86af4 <_malloc_r+0x2d4>
   8686c:	008e9a00 	call	8e9a0 <__malloc_lock>
   86870:	00807dc4 	movi	r2,503
   86874:	1441e92e 	bgeu	r2,r17,8701c <_malloc_r+0x7fc>
   86878:	8804d27a 	srli	r2,r17,9
   8687c:	1000a126 	beq	r2,zero,86b04 <_malloc_r+0x2e4>
   86880:	00c00104 	movi	r3,4
   86884:	18811e36 	bltu	r3,r2,86d00 <_malloc_r+0x4e0>
   86888:	8804d1ba 	srli	r2,r17,6
   8688c:	12000e44 	addi	r8,r2,57
   86890:	11c00e04 	addi	r7,r2,56
   86894:	4209883a 	add	r4,r8,r8
   86898:	04c00274 	movhi	r19,9
   8689c:	2109883a 	add	r4,r4,r4
   868a0:	9cc4b504 	addi	r19,r19,4820
   868a4:	2109883a 	add	r4,r4,r4
   868a8:	9909883a 	add	r4,r19,r4
   868ac:	24000117 	ldw	r16,4(r4)
   868b0:	213ffe04 	addi	r4,r4,-8
   868b4:	24009726 	beq	r4,r16,86b14 <_malloc_r+0x2f4>
   868b8:	80800117 	ldw	r2,4(r16)
   868bc:	01bfff04 	movi	r6,-4
   868c0:	014003c4 	movi	r5,15
   868c4:	1184703a 	and	r2,r2,r6
   868c8:	1447c83a 	sub	r3,r2,r17
   868cc:	28c00716 	blt	r5,r3,868ec <_malloc_r+0xcc>
   868d0:	1800920e 	bge	r3,zero,86b1c <_malloc_r+0x2fc>
   868d4:	84000317 	ldw	r16,12(r16)
   868d8:	24008e26 	beq	r4,r16,86b14 <_malloc_r+0x2f4>
   868dc:	80800117 	ldw	r2,4(r16)
   868e0:	1184703a 	and	r2,r2,r6
   868e4:	1447c83a 	sub	r3,r2,r17
   868e8:	28fff90e 	bge	r5,r3,868d0 <__alt_data_end+0xfffbade0>
   868ec:	3809883a 	mov	r4,r7
   868f0:	01800274 	movhi	r6,9
   868f4:	9c000417 	ldw	r16,16(r19)
   868f8:	3184b504 	addi	r6,r6,4820
   868fc:	32000204 	addi	r8,r6,8
   86900:	82013426 	beq	r16,r8,86dd4 <_malloc_r+0x5b4>
   86904:	80c00117 	ldw	r3,4(r16)
   86908:	00bfff04 	movi	r2,-4
   8690c:	188e703a 	and	r7,r3,r2
   86910:	3c45c83a 	sub	r2,r7,r17
   86914:	00c003c4 	movi	r3,15
   86918:	18811f16 	blt	r3,r2,86d98 <_malloc_r+0x578>
   8691c:	32000515 	stw	r8,20(r6)
   86920:	32000415 	stw	r8,16(r6)
   86924:	10007f0e 	bge	r2,zero,86b24 <_malloc_r+0x304>
   86928:	00807fc4 	movi	r2,511
   8692c:	11c0fd36 	bltu	r2,r7,86d24 <_malloc_r+0x504>
   86930:	3806d0fa 	srli	r3,r7,3
   86934:	01c00044 	movi	r7,1
   86938:	30800117 	ldw	r2,4(r6)
   8693c:	19400044 	addi	r5,r3,1
   86940:	294b883a 	add	r5,r5,r5
   86944:	1807d0ba 	srai	r3,r3,2
   86948:	294b883a 	add	r5,r5,r5
   8694c:	294b883a 	add	r5,r5,r5
   86950:	298b883a 	add	r5,r5,r6
   86954:	38c6983a 	sll	r3,r7,r3
   86958:	29c00017 	ldw	r7,0(r5)
   8695c:	2a7ffe04 	addi	r9,r5,-8
   86960:	1886b03a 	or	r3,r3,r2
   86964:	82400315 	stw	r9,12(r16)
   86968:	81c00215 	stw	r7,8(r16)
   8696c:	30c00115 	stw	r3,4(r6)
   86970:	2c000015 	stw	r16,0(r5)
   86974:	3c000315 	stw	r16,12(r7)
   86978:	2005d0ba 	srai	r2,r4,2
   8697c:	01400044 	movi	r5,1
   86980:	288a983a 	sll	r5,r5,r2
   86984:	19406f36 	bltu	r3,r5,86b44 <_malloc_r+0x324>
   86988:	28c4703a 	and	r2,r5,r3
   8698c:	10000a1e 	bne	r2,zero,869b8 <_malloc_r+0x198>
   86990:	00bfff04 	movi	r2,-4
   86994:	294b883a 	add	r5,r5,r5
   86998:	2088703a 	and	r4,r4,r2
   8699c:	28c4703a 	and	r2,r5,r3
   869a0:	21000104 	addi	r4,r4,4
   869a4:	1000041e 	bne	r2,zero,869b8 <_malloc_r+0x198>
   869a8:	294b883a 	add	r5,r5,r5
   869ac:	28c4703a 	and	r2,r5,r3
   869b0:	21000104 	addi	r4,r4,4
   869b4:	103ffc26 	beq	r2,zero,869a8 <__alt_data_end+0xfffbaeb8>
   869b8:	02bfff04 	movi	r10,-4
   869bc:	024003c4 	movi	r9,15
   869c0:	21800044 	addi	r6,r4,1
   869c4:	318d883a 	add	r6,r6,r6
   869c8:	318d883a 	add	r6,r6,r6
   869cc:	318d883a 	add	r6,r6,r6
   869d0:	998d883a 	add	r6,r19,r6
   869d4:	333ffe04 	addi	r12,r6,-8
   869d8:	2017883a 	mov	r11,r4
   869dc:	31800104 	addi	r6,r6,4
   869e0:	34000017 	ldw	r16,0(r6)
   869e4:	31fffd04 	addi	r7,r6,-12
   869e8:	81c0041e 	bne	r16,r7,869fc <_malloc_r+0x1dc>
   869ec:	0000fb06 	br	86ddc <_malloc_r+0x5bc>
   869f0:	1801030e 	bge	r3,zero,86e00 <_malloc_r+0x5e0>
   869f4:	84000317 	ldw	r16,12(r16)
   869f8:	81c0f826 	beq	r16,r7,86ddc <_malloc_r+0x5bc>
   869fc:	80800117 	ldw	r2,4(r16)
   86a00:	1284703a 	and	r2,r2,r10
   86a04:	1447c83a 	sub	r3,r2,r17
   86a08:	48fff90e 	bge	r9,r3,869f0 <__alt_data_end+0xfffbaf00>
   86a0c:	80800317 	ldw	r2,12(r16)
   86a10:	81000217 	ldw	r4,8(r16)
   86a14:	89400054 	ori	r5,r17,1
   86a18:	81400115 	stw	r5,4(r16)
   86a1c:	20800315 	stw	r2,12(r4)
   86a20:	11000215 	stw	r4,8(r2)
   86a24:	8463883a 	add	r17,r16,r17
   86a28:	9c400515 	stw	r17,20(r19)
   86a2c:	9c400415 	stw	r17,16(r19)
   86a30:	18800054 	ori	r2,r3,1
   86a34:	88800115 	stw	r2,4(r17)
   86a38:	8a000315 	stw	r8,12(r17)
   86a3c:	8a000215 	stw	r8,8(r17)
   86a40:	88e3883a 	add	r17,r17,r3
   86a44:	88c00015 	stw	r3,0(r17)
   86a48:	9009883a 	mov	r4,r18
   86a4c:	008e9c40 	call	8e9c4 <__malloc_unlock>
   86a50:	80800204 	addi	r2,r16,8
   86a54:	00001b06 	br	86ac4 <_malloc_r+0x2a4>
   86a58:	04400404 	movi	r17,16
   86a5c:	89402536 	bltu	r17,r5,86af4 <_malloc_r+0x2d4>
   86a60:	008e9a00 	call	8e9a0 <__malloc_lock>
   86a64:	00800184 	movi	r2,6
   86a68:	01000084 	movi	r4,2
   86a6c:	04c00274 	movhi	r19,9
   86a70:	1085883a 	add	r2,r2,r2
   86a74:	9cc4b504 	addi	r19,r19,4820
   86a78:	1085883a 	add	r2,r2,r2
   86a7c:	9885883a 	add	r2,r19,r2
   86a80:	14000117 	ldw	r16,4(r2)
   86a84:	10fffe04 	addi	r3,r2,-8
   86a88:	80c0d926 	beq	r16,r3,86df0 <_malloc_r+0x5d0>
   86a8c:	80c00117 	ldw	r3,4(r16)
   86a90:	81000317 	ldw	r4,12(r16)
   86a94:	00bfff04 	movi	r2,-4
   86a98:	1884703a 	and	r2,r3,r2
   86a9c:	81400217 	ldw	r5,8(r16)
   86aa0:	8085883a 	add	r2,r16,r2
   86aa4:	10c00117 	ldw	r3,4(r2)
   86aa8:	29000315 	stw	r4,12(r5)
   86aac:	21400215 	stw	r5,8(r4)
   86ab0:	18c00054 	ori	r3,r3,1
   86ab4:	10c00115 	stw	r3,4(r2)
   86ab8:	9009883a 	mov	r4,r18
   86abc:	008e9c40 	call	8e9c4 <__malloc_unlock>
   86ac0:	80800204 	addi	r2,r16,8
   86ac4:	dfc00a17 	ldw	ra,40(sp)
   86ac8:	df000917 	ldw	fp,36(sp)
   86acc:	ddc00817 	ldw	r23,32(sp)
   86ad0:	dd800717 	ldw	r22,28(sp)
   86ad4:	dd400617 	ldw	r21,24(sp)
   86ad8:	dd000517 	ldw	r20,20(sp)
   86adc:	dcc00417 	ldw	r19,16(sp)
   86ae0:	dc800317 	ldw	r18,12(sp)
   86ae4:	dc400217 	ldw	r17,8(sp)
   86ae8:	dc000117 	ldw	r16,4(sp)
   86aec:	dec00b04 	addi	sp,sp,44
   86af0:	f800283a 	ret
   86af4:	00800304 	movi	r2,12
   86af8:	90800015 	stw	r2,0(r18)
   86afc:	0005883a 	mov	r2,zero
   86b00:	003ff006 	br	86ac4 <__alt_data_end+0xfffbafd4>
   86b04:	01002004 	movi	r4,128
   86b08:	02001004 	movi	r8,64
   86b0c:	01c00fc4 	movi	r7,63
   86b10:	003f6106 	br	86898 <__alt_data_end+0xfffbada8>
   86b14:	4009883a 	mov	r4,r8
   86b18:	003f7506 	br	868f0 <__alt_data_end+0xfffbae00>
   86b1c:	81000317 	ldw	r4,12(r16)
   86b20:	003fde06 	br	86a9c <__alt_data_end+0xfffbafac>
   86b24:	81c5883a 	add	r2,r16,r7
   86b28:	11400117 	ldw	r5,4(r2)
   86b2c:	9009883a 	mov	r4,r18
   86b30:	29400054 	ori	r5,r5,1
   86b34:	11400115 	stw	r5,4(r2)
   86b38:	008e9c40 	call	8e9c4 <__malloc_unlock>
   86b3c:	80800204 	addi	r2,r16,8
   86b40:	003fe006 	br	86ac4 <__alt_data_end+0xfffbafd4>
   86b44:	9c000217 	ldw	r16,8(r19)
   86b48:	00bfff04 	movi	r2,-4
   86b4c:	85800117 	ldw	r22,4(r16)
   86b50:	b0ac703a 	and	r22,r22,r2
   86b54:	b4400336 	bltu	r22,r17,86b64 <_malloc_r+0x344>
   86b58:	b445c83a 	sub	r2,r22,r17
   86b5c:	00c003c4 	movi	r3,15
   86b60:	18805d16 	blt	r3,r2,86cd8 <_malloc_r+0x4b8>
   86b64:	05c00274 	movhi	r23,9
   86b68:	00800274 	movhi	r2,9
   86b6c:	10913804 	addi	r2,r2,17632
   86b70:	bdca3c04 	addi	r23,r23,10480
   86b74:	15400017 	ldw	r21,0(r2)
   86b78:	b8c00017 	ldw	r3,0(r23)
   86b7c:	00bfffc4 	movi	r2,-1
   86b80:	858d883a 	add	r6,r16,r22
   86b84:	8d6b883a 	add	r21,r17,r21
   86b88:	1880ea26 	beq	r3,r2,86f34 <_malloc_r+0x714>
   86b8c:	ad4403c4 	addi	r21,r21,4111
   86b90:	00bc0004 	movi	r2,-4096
   86b94:	a8aa703a 	and	r21,r21,r2
   86b98:	a80b883a 	mov	r5,r21
   86b9c:	9009883a 	mov	r4,r18
   86ba0:	d9800015 	stw	r6,0(sp)
   86ba4:	0088ab00 	call	88ab0 <_sbrk_r>
   86ba8:	1029883a 	mov	r20,r2
   86bac:	00bfffc4 	movi	r2,-1
   86bb0:	d9800017 	ldw	r6,0(sp)
   86bb4:	a080e826 	beq	r20,r2,86f58 <_malloc_r+0x738>
   86bb8:	a180a636 	bltu	r20,r6,86e54 <_malloc_r+0x634>
   86bbc:	07000274 	movhi	fp,9
   86bc0:	e7117104 	addi	fp,fp,17860
   86bc4:	e0800017 	ldw	r2,0(fp)
   86bc8:	a887883a 	add	r3,r21,r2
   86bcc:	e0c00015 	stw	r3,0(fp)
   86bd0:	3500e626 	beq	r6,r20,86f6c <_malloc_r+0x74c>
   86bd4:	b9000017 	ldw	r4,0(r23)
   86bd8:	00bfffc4 	movi	r2,-1
   86bdc:	2080ee26 	beq	r4,r2,86f98 <_malloc_r+0x778>
   86be0:	a185c83a 	sub	r2,r20,r6
   86be4:	10c5883a 	add	r2,r2,r3
   86be8:	e0800015 	stw	r2,0(fp)
   86bec:	a0c001cc 	andi	r3,r20,7
   86bf0:	1800bc26 	beq	r3,zero,86ee4 <_malloc_r+0x6c4>
   86bf4:	a0e9c83a 	sub	r20,r20,r3
   86bf8:	00840204 	movi	r2,4104
   86bfc:	a5000204 	addi	r20,r20,8
   86c00:	10c7c83a 	sub	r3,r2,r3
   86c04:	a545883a 	add	r2,r20,r21
   86c08:	1083ffcc 	andi	r2,r2,4095
   86c0c:	18abc83a 	sub	r21,r3,r2
   86c10:	a80b883a 	mov	r5,r21
   86c14:	9009883a 	mov	r4,r18
   86c18:	0088ab00 	call	88ab0 <_sbrk_r>
   86c1c:	00ffffc4 	movi	r3,-1
   86c20:	10c0e126 	beq	r2,r3,86fa8 <_malloc_r+0x788>
   86c24:	1505c83a 	sub	r2,r2,r20
   86c28:	1545883a 	add	r2,r2,r21
   86c2c:	10800054 	ori	r2,r2,1
   86c30:	e0c00017 	ldw	r3,0(fp)
   86c34:	9d000215 	stw	r20,8(r19)
   86c38:	a0800115 	stw	r2,4(r20)
   86c3c:	a8c7883a 	add	r3,r21,r3
   86c40:	e0c00015 	stw	r3,0(fp)
   86c44:	84c00e26 	beq	r16,r19,86c80 <_malloc_r+0x460>
   86c48:	018003c4 	movi	r6,15
   86c4c:	3580a72e 	bgeu	r6,r22,86eec <_malloc_r+0x6cc>
   86c50:	81400117 	ldw	r5,4(r16)
   86c54:	013ffe04 	movi	r4,-8
   86c58:	b0bffd04 	addi	r2,r22,-12
   86c5c:	1104703a 	and	r2,r2,r4
   86c60:	2900004c 	andi	r4,r5,1
   86c64:	2088b03a 	or	r4,r4,r2
   86c68:	81000115 	stw	r4,4(r16)
   86c6c:	01400144 	movi	r5,5
   86c70:	8089883a 	add	r4,r16,r2
   86c74:	21400115 	stw	r5,4(r4)
   86c78:	21400215 	stw	r5,8(r4)
   86c7c:	3080cd36 	bltu	r6,r2,86fb4 <_malloc_r+0x794>
   86c80:	00800274 	movhi	r2,9
   86c84:	10913704 	addi	r2,r2,17628
   86c88:	11000017 	ldw	r4,0(r2)
   86c8c:	20c0012e 	bgeu	r4,r3,86c94 <_malloc_r+0x474>
   86c90:	10c00015 	stw	r3,0(r2)
   86c94:	00800274 	movhi	r2,9
   86c98:	10913604 	addi	r2,r2,17624
   86c9c:	11000017 	ldw	r4,0(r2)
   86ca0:	9c000217 	ldw	r16,8(r19)
   86ca4:	20c0012e 	bgeu	r4,r3,86cac <_malloc_r+0x48c>
   86ca8:	10c00015 	stw	r3,0(r2)
   86cac:	80c00117 	ldw	r3,4(r16)
   86cb0:	00bfff04 	movi	r2,-4
   86cb4:	1886703a 	and	r3,r3,r2
   86cb8:	1c45c83a 	sub	r2,r3,r17
   86cbc:	1c400236 	bltu	r3,r17,86cc8 <_malloc_r+0x4a8>
   86cc0:	00c003c4 	movi	r3,15
   86cc4:	18800416 	blt	r3,r2,86cd8 <_malloc_r+0x4b8>
   86cc8:	9009883a 	mov	r4,r18
   86ccc:	008e9c40 	call	8e9c4 <__malloc_unlock>
   86cd0:	0005883a 	mov	r2,zero
   86cd4:	003f7b06 	br	86ac4 <__alt_data_end+0xfffbafd4>
   86cd8:	88c00054 	ori	r3,r17,1
   86cdc:	80c00115 	stw	r3,4(r16)
   86ce0:	8463883a 	add	r17,r16,r17
   86ce4:	10800054 	ori	r2,r2,1
   86ce8:	9c400215 	stw	r17,8(r19)
   86cec:	88800115 	stw	r2,4(r17)
   86cf0:	9009883a 	mov	r4,r18
   86cf4:	008e9c40 	call	8e9c4 <__malloc_unlock>
   86cf8:	80800204 	addi	r2,r16,8
   86cfc:	003f7106 	br	86ac4 <__alt_data_end+0xfffbafd4>
   86d00:	00c00504 	movi	r3,20
   86d04:	18804a2e 	bgeu	r3,r2,86e30 <_malloc_r+0x610>
   86d08:	00c01504 	movi	r3,84
   86d0c:	18806e36 	bltu	r3,r2,86ec8 <_malloc_r+0x6a8>
   86d10:	8804d33a 	srli	r2,r17,12
   86d14:	12001bc4 	addi	r8,r2,111
   86d18:	11c01b84 	addi	r7,r2,110
   86d1c:	4209883a 	add	r4,r8,r8
   86d20:	003edd06 	br	86898 <__alt_data_end+0xfffbada8>
   86d24:	3804d27a 	srli	r2,r7,9
   86d28:	00c00104 	movi	r3,4
   86d2c:	1880442e 	bgeu	r3,r2,86e40 <_malloc_r+0x620>
   86d30:	00c00504 	movi	r3,20
   86d34:	18808136 	bltu	r3,r2,86f3c <_malloc_r+0x71c>
   86d38:	11401704 	addi	r5,r2,92
   86d3c:	10c016c4 	addi	r3,r2,91
   86d40:	294b883a 	add	r5,r5,r5
   86d44:	294b883a 	add	r5,r5,r5
   86d48:	294b883a 	add	r5,r5,r5
   86d4c:	994b883a 	add	r5,r19,r5
   86d50:	28800017 	ldw	r2,0(r5)
   86d54:	01800274 	movhi	r6,9
   86d58:	297ffe04 	addi	r5,r5,-8
   86d5c:	3184b504 	addi	r6,r6,4820
   86d60:	28806526 	beq	r5,r2,86ef8 <_malloc_r+0x6d8>
   86d64:	01bfff04 	movi	r6,-4
   86d68:	10c00117 	ldw	r3,4(r2)
   86d6c:	1986703a 	and	r3,r3,r6
   86d70:	38c0022e 	bgeu	r7,r3,86d7c <_malloc_r+0x55c>
   86d74:	10800217 	ldw	r2,8(r2)
   86d78:	28bffb1e 	bne	r5,r2,86d68 <__alt_data_end+0xfffbb278>
   86d7c:	11400317 	ldw	r5,12(r2)
   86d80:	98c00117 	ldw	r3,4(r19)
   86d84:	81400315 	stw	r5,12(r16)
   86d88:	80800215 	stw	r2,8(r16)
   86d8c:	2c000215 	stw	r16,8(r5)
   86d90:	14000315 	stw	r16,12(r2)
   86d94:	003ef806 	br	86978 <__alt_data_end+0xfffbae88>
   86d98:	88c00054 	ori	r3,r17,1
   86d9c:	80c00115 	stw	r3,4(r16)
   86da0:	8463883a 	add	r17,r16,r17
   86da4:	34400515 	stw	r17,20(r6)
   86da8:	34400415 	stw	r17,16(r6)
   86dac:	10c00054 	ori	r3,r2,1
   86db0:	8a000315 	stw	r8,12(r17)
   86db4:	8a000215 	stw	r8,8(r17)
   86db8:	88c00115 	stw	r3,4(r17)
   86dbc:	88a3883a 	add	r17,r17,r2
   86dc0:	88800015 	stw	r2,0(r17)
   86dc4:	9009883a 	mov	r4,r18
   86dc8:	008e9c40 	call	8e9c4 <__malloc_unlock>
   86dcc:	80800204 	addi	r2,r16,8
   86dd0:	003f3c06 	br	86ac4 <__alt_data_end+0xfffbafd4>
   86dd4:	30c00117 	ldw	r3,4(r6)
   86dd8:	003ee706 	br	86978 <__alt_data_end+0xfffbae88>
   86ddc:	5ac00044 	addi	r11,r11,1
   86de0:	588000cc 	andi	r2,r11,3
   86de4:	31800204 	addi	r6,r6,8
   86de8:	103efd1e 	bne	r2,zero,869e0 <__alt_data_end+0xfffbaef0>
   86dec:	00002406 	br	86e80 <_malloc_r+0x660>
   86df0:	14000317 	ldw	r16,12(r2)
   86df4:	143f251e 	bne	r2,r16,86a8c <__alt_data_end+0xfffbaf9c>
   86df8:	21000084 	addi	r4,r4,2
   86dfc:	003ebc06 	br	868f0 <__alt_data_end+0xfffbae00>
   86e00:	8085883a 	add	r2,r16,r2
   86e04:	10c00117 	ldw	r3,4(r2)
   86e08:	81000317 	ldw	r4,12(r16)
   86e0c:	81400217 	ldw	r5,8(r16)
   86e10:	18c00054 	ori	r3,r3,1
   86e14:	10c00115 	stw	r3,4(r2)
   86e18:	29000315 	stw	r4,12(r5)
   86e1c:	21400215 	stw	r5,8(r4)
   86e20:	9009883a 	mov	r4,r18
   86e24:	008e9c40 	call	8e9c4 <__malloc_unlock>
   86e28:	80800204 	addi	r2,r16,8
   86e2c:	003f2506 	br	86ac4 <__alt_data_end+0xfffbafd4>
   86e30:	12001704 	addi	r8,r2,92
   86e34:	11c016c4 	addi	r7,r2,91
   86e38:	4209883a 	add	r4,r8,r8
   86e3c:	003e9606 	br	86898 <__alt_data_end+0xfffbada8>
   86e40:	3804d1ba 	srli	r2,r7,6
   86e44:	11400e44 	addi	r5,r2,57
   86e48:	10c00e04 	addi	r3,r2,56
   86e4c:	294b883a 	add	r5,r5,r5
   86e50:	003fbc06 	br	86d44 <__alt_data_end+0xfffbb254>
   86e54:	84ff5926 	beq	r16,r19,86bbc <__alt_data_end+0xfffbb0cc>
   86e58:	00800274 	movhi	r2,9
   86e5c:	1084b504 	addi	r2,r2,4820
   86e60:	14000217 	ldw	r16,8(r2)
   86e64:	00bfff04 	movi	r2,-4
   86e68:	80c00117 	ldw	r3,4(r16)
   86e6c:	1886703a 	and	r3,r3,r2
   86e70:	003f9106 	br	86cb8 <__alt_data_end+0xfffbb1c8>
   86e74:	60800217 	ldw	r2,8(r12)
   86e78:	213fffc4 	addi	r4,r4,-1
   86e7c:	1300651e 	bne	r2,r12,87014 <_malloc_r+0x7f4>
   86e80:	208000cc 	andi	r2,r4,3
   86e84:	633ffe04 	addi	r12,r12,-8
   86e88:	103ffa1e 	bne	r2,zero,86e74 <__alt_data_end+0xfffbb384>
   86e8c:	98800117 	ldw	r2,4(r19)
   86e90:	0146303a 	nor	r3,zero,r5
   86e94:	1884703a 	and	r2,r3,r2
   86e98:	98800115 	stw	r2,4(r19)
   86e9c:	294b883a 	add	r5,r5,r5
   86ea0:	117f2836 	bltu	r2,r5,86b44 <__alt_data_end+0xfffbb054>
   86ea4:	283f2726 	beq	r5,zero,86b44 <__alt_data_end+0xfffbb054>
   86ea8:	2886703a 	and	r3,r5,r2
   86eac:	5809883a 	mov	r4,r11
   86eb0:	183ec31e 	bne	r3,zero,869c0 <__alt_data_end+0xfffbaed0>
   86eb4:	294b883a 	add	r5,r5,r5
   86eb8:	2886703a 	and	r3,r5,r2
   86ebc:	21000104 	addi	r4,r4,4
   86ec0:	183ffc26 	beq	r3,zero,86eb4 <__alt_data_end+0xfffbb3c4>
   86ec4:	003ebe06 	br	869c0 <__alt_data_end+0xfffbaed0>
   86ec8:	00c05504 	movi	r3,340
   86ecc:	18801236 	bltu	r3,r2,86f18 <_malloc_r+0x6f8>
   86ed0:	8804d3fa 	srli	r2,r17,15
   86ed4:	12001e04 	addi	r8,r2,120
   86ed8:	11c01dc4 	addi	r7,r2,119
   86edc:	4209883a 	add	r4,r8,r8
   86ee0:	003e6d06 	br	86898 <__alt_data_end+0xfffbada8>
   86ee4:	00c40004 	movi	r3,4096
   86ee8:	003f4606 	br	86c04 <__alt_data_end+0xfffbb114>
   86eec:	00800044 	movi	r2,1
   86ef0:	a0800115 	stw	r2,4(r20)
   86ef4:	003f7406 	br	86cc8 <__alt_data_end+0xfffbb1d8>
   86ef8:	1805d0ba 	srai	r2,r3,2
   86efc:	01c00044 	movi	r7,1
   86f00:	30c00117 	ldw	r3,4(r6)
   86f04:	388e983a 	sll	r7,r7,r2
   86f08:	2805883a 	mov	r2,r5
   86f0c:	38c6b03a 	or	r3,r7,r3
   86f10:	30c00115 	stw	r3,4(r6)
   86f14:	003f9b06 	br	86d84 <__alt_data_end+0xfffbb294>
   86f18:	00c15504 	movi	r3,1364
   86f1c:	18801a36 	bltu	r3,r2,86f88 <_malloc_r+0x768>
   86f20:	8804d4ba 	srli	r2,r17,18
   86f24:	12001f44 	addi	r8,r2,125
   86f28:	11c01f04 	addi	r7,r2,124
   86f2c:	4209883a 	add	r4,r8,r8
   86f30:	003e5906 	br	86898 <__alt_data_end+0xfffbada8>
   86f34:	ad400404 	addi	r21,r21,16
   86f38:	003f1706 	br	86b98 <__alt_data_end+0xfffbb0a8>
   86f3c:	00c01504 	movi	r3,84
   86f40:	18802336 	bltu	r3,r2,86fd0 <_malloc_r+0x7b0>
   86f44:	3804d33a 	srli	r2,r7,12
   86f48:	11401bc4 	addi	r5,r2,111
   86f4c:	10c01b84 	addi	r3,r2,110
   86f50:	294b883a 	add	r5,r5,r5
   86f54:	003f7b06 	br	86d44 <__alt_data_end+0xfffbb254>
   86f58:	9c000217 	ldw	r16,8(r19)
   86f5c:	00bfff04 	movi	r2,-4
   86f60:	80c00117 	ldw	r3,4(r16)
   86f64:	1886703a 	and	r3,r3,r2
   86f68:	003f5306 	br	86cb8 <__alt_data_end+0xfffbb1c8>
   86f6c:	3083ffcc 	andi	r2,r6,4095
   86f70:	103f181e 	bne	r2,zero,86bd4 <__alt_data_end+0xfffbb0e4>
   86f74:	99000217 	ldw	r4,8(r19)
   86f78:	b545883a 	add	r2,r22,r21
   86f7c:	10800054 	ori	r2,r2,1
   86f80:	20800115 	stw	r2,4(r4)
   86f84:	003f3e06 	br	86c80 <__alt_data_end+0xfffbb190>
   86f88:	01003f84 	movi	r4,254
   86f8c:	02001fc4 	movi	r8,127
   86f90:	01c01f84 	movi	r7,126
   86f94:	003e4006 	br	86898 <__alt_data_end+0xfffbada8>
   86f98:	00800274 	movhi	r2,9
   86f9c:	108a3c04 	addi	r2,r2,10480
   86fa0:	15000015 	stw	r20,0(r2)
   86fa4:	003f1106 	br	86bec <__alt_data_end+0xfffbb0fc>
   86fa8:	00800044 	movi	r2,1
   86fac:	002b883a 	mov	r21,zero
   86fb0:	003f1f06 	br	86c30 <__alt_data_end+0xfffbb140>
   86fb4:	81400204 	addi	r5,r16,8
   86fb8:	9009883a 	mov	r4,r18
   86fbc:	0085bd80 	call	85bd8 <_free_r>
   86fc0:	00800274 	movhi	r2,9
   86fc4:	10917104 	addi	r2,r2,17860
   86fc8:	10c00017 	ldw	r3,0(r2)
   86fcc:	003f2c06 	br	86c80 <__alt_data_end+0xfffbb190>
   86fd0:	00c05504 	movi	r3,340
   86fd4:	18800536 	bltu	r3,r2,86fec <_malloc_r+0x7cc>
   86fd8:	3804d3fa 	srli	r2,r7,15
   86fdc:	11401e04 	addi	r5,r2,120
   86fe0:	10c01dc4 	addi	r3,r2,119
   86fe4:	294b883a 	add	r5,r5,r5
   86fe8:	003f5606 	br	86d44 <__alt_data_end+0xfffbb254>
   86fec:	00c15504 	movi	r3,1364
   86ff0:	18800536 	bltu	r3,r2,87008 <_malloc_r+0x7e8>
   86ff4:	3804d4ba 	srli	r2,r7,18
   86ff8:	11401f44 	addi	r5,r2,125
   86ffc:	10c01f04 	addi	r3,r2,124
   87000:	294b883a 	add	r5,r5,r5
   87004:	003f4f06 	br	86d44 <__alt_data_end+0xfffbb254>
   87008:	01403f84 	movi	r5,254
   8700c:	00c01f84 	movi	r3,126
   87010:	003f4c06 	br	86d44 <__alt_data_end+0xfffbb254>
   87014:	98800117 	ldw	r2,4(r19)
   87018:	003fa006 	br	86e9c <__alt_data_end+0xfffbb3ac>
   8701c:	8808d0fa 	srli	r4,r17,3
   87020:	20800044 	addi	r2,r4,1
   87024:	1085883a 	add	r2,r2,r2
   87028:	003e9006 	br	86a6c <__alt_data_end+0xfffbaf7c>

0008702c <memchr>:
   8702c:	208000cc 	andi	r2,r4,3
   87030:	280f883a 	mov	r7,r5
   87034:	10003426 	beq	r2,zero,87108 <memchr+0xdc>
   87038:	30bfffc4 	addi	r2,r6,-1
   8703c:	30001a26 	beq	r6,zero,870a8 <memchr+0x7c>
   87040:	20c00003 	ldbu	r3,0(r4)
   87044:	29803fcc 	andi	r6,r5,255
   87048:	30c0051e 	bne	r6,r3,87060 <memchr+0x34>
   8704c:	00001806 	br	870b0 <memchr+0x84>
   87050:	10001526 	beq	r2,zero,870a8 <memchr+0x7c>
   87054:	20c00003 	ldbu	r3,0(r4)
   87058:	10bfffc4 	addi	r2,r2,-1
   8705c:	30c01426 	beq	r6,r3,870b0 <memchr+0x84>
   87060:	21000044 	addi	r4,r4,1
   87064:	20c000cc 	andi	r3,r4,3
   87068:	183ff91e 	bne	r3,zero,87050 <__alt_data_end+0xfffbb560>
   8706c:	020000c4 	movi	r8,3
   87070:	40801136 	bltu	r8,r2,870b8 <memchr+0x8c>
   87074:	10000c26 	beq	r2,zero,870a8 <memchr+0x7c>
   87078:	20c00003 	ldbu	r3,0(r4)
   8707c:	29403fcc 	andi	r5,r5,255
   87080:	28c00b26 	beq	r5,r3,870b0 <memchr+0x84>
   87084:	20c00044 	addi	r3,r4,1
   87088:	39803fcc 	andi	r6,r7,255
   8708c:	2089883a 	add	r4,r4,r2
   87090:	00000306 	br	870a0 <memchr+0x74>
   87094:	18c00044 	addi	r3,r3,1
   87098:	197fffc3 	ldbu	r5,-1(r3)
   8709c:	31400526 	beq	r6,r5,870b4 <memchr+0x88>
   870a0:	1805883a 	mov	r2,r3
   870a4:	20fffb1e 	bne	r4,r3,87094 <__alt_data_end+0xfffbb5a4>
   870a8:	0005883a 	mov	r2,zero
   870ac:	f800283a 	ret
   870b0:	2005883a 	mov	r2,r4
   870b4:	f800283a 	ret
   870b8:	28c03fcc 	andi	r3,r5,255
   870bc:	1812923a 	slli	r9,r3,8
   870c0:	02ffbff4 	movhi	r11,65279
   870c4:	02a02074 	movhi	r10,32897
   870c8:	48d2b03a 	or	r9,r9,r3
   870cc:	4806943a 	slli	r3,r9,16
   870d0:	5affbfc4 	addi	r11,r11,-257
   870d4:	52a02004 	addi	r10,r10,-32640
   870d8:	48d2b03a 	or	r9,r9,r3
   870dc:	20c00017 	ldw	r3,0(r4)
   870e0:	48c6f03a 	xor	r3,r9,r3
   870e4:	1acd883a 	add	r6,r3,r11
   870e8:	00c6303a 	nor	r3,zero,r3
   870ec:	30c6703a 	and	r3,r6,r3
   870f0:	1a86703a 	and	r3,r3,r10
   870f4:	183fe01e 	bne	r3,zero,87078 <__alt_data_end+0xfffbb588>
   870f8:	10bfff04 	addi	r2,r2,-4
   870fc:	21000104 	addi	r4,r4,4
   87100:	40bff636 	bltu	r8,r2,870dc <__alt_data_end+0xfffbb5ec>
   87104:	003fdb06 	br	87074 <__alt_data_end+0xfffbb584>
   87108:	3005883a 	mov	r2,r6
   8710c:	003fd706 	br	8706c <__alt_data_end+0xfffbb57c>

00087110 <memcpy>:
   87110:	defffd04 	addi	sp,sp,-12
   87114:	dfc00215 	stw	ra,8(sp)
   87118:	dc400115 	stw	r17,4(sp)
   8711c:	dc000015 	stw	r16,0(sp)
   87120:	00c003c4 	movi	r3,15
   87124:	2005883a 	mov	r2,r4
   87128:	1980452e 	bgeu	r3,r6,87240 <memcpy+0x130>
   8712c:	2906b03a 	or	r3,r5,r4
   87130:	18c000cc 	andi	r3,r3,3
   87134:	1800441e 	bne	r3,zero,87248 <memcpy+0x138>
   87138:	347ffc04 	addi	r17,r6,-16
   8713c:	8822d13a 	srli	r17,r17,4
   87140:	28c00104 	addi	r3,r5,4
   87144:	23400104 	addi	r13,r4,4
   87148:	8820913a 	slli	r16,r17,4
   8714c:	2b000204 	addi	r12,r5,8
   87150:	22c00204 	addi	r11,r4,8
   87154:	84000504 	addi	r16,r16,20
   87158:	2a800304 	addi	r10,r5,12
   8715c:	22400304 	addi	r9,r4,12
   87160:	2c21883a 	add	r16,r5,r16
   87164:	2811883a 	mov	r8,r5
   87168:	200f883a 	mov	r7,r4
   8716c:	41000017 	ldw	r4,0(r8)
   87170:	1fc00017 	ldw	ra,0(r3)
   87174:	63c00017 	ldw	r15,0(r12)
   87178:	39000015 	stw	r4,0(r7)
   8717c:	53800017 	ldw	r14,0(r10)
   87180:	6fc00015 	stw	ra,0(r13)
   87184:	5bc00015 	stw	r15,0(r11)
   87188:	4b800015 	stw	r14,0(r9)
   8718c:	18c00404 	addi	r3,r3,16
   87190:	39c00404 	addi	r7,r7,16
   87194:	42000404 	addi	r8,r8,16
   87198:	6b400404 	addi	r13,r13,16
   8719c:	63000404 	addi	r12,r12,16
   871a0:	5ac00404 	addi	r11,r11,16
   871a4:	52800404 	addi	r10,r10,16
   871a8:	4a400404 	addi	r9,r9,16
   871ac:	1c3fef1e 	bne	r3,r16,8716c <__alt_data_end+0xfffbb67c>
   871b0:	89c00044 	addi	r7,r17,1
   871b4:	380e913a 	slli	r7,r7,4
   871b8:	310003cc 	andi	r4,r6,15
   871bc:	02c000c4 	movi	r11,3
   871c0:	11c7883a 	add	r3,r2,r7
   871c4:	29cb883a 	add	r5,r5,r7
   871c8:	5900212e 	bgeu	r11,r4,87250 <memcpy+0x140>
   871cc:	1813883a 	mov	r9,r3
   871d0:	2811883a 	mov	r8,r5
   871d4:	200f883a 	mov	r7,r4
   871d8:	42800017 	ldw	r10,0(r8)
   871dc:	4a400104 	addi	r9,r9,4
   871e0:	39ffff04 	addi	r7,r7,-4
   871e4:	4abfff15 	stw	r10,-4(r9)
   871e8:	42000104 	addi	r8,r8,4
   871ec:	59fffa36 	bltu	r11,r7,871d8 <__alt_data_end+0xfffbb6e8>
   871f0:	213fff04 	addi	r4,r4,-4
   871f4:	2008d0ba 	srli	r4,r4,2
   871f8:	318000cc 	andi	r6,r6,3
   871fc:	21000044 	addi	r4,r4,1
   87200:	2109883a 	add	r4,r4,r4
   87204:	2109883a 	add	r4,r4,r4
   87208:	1907883a 	add	r3,r3,r4
   8720c:	290b883a 	add	r5,r5,r4
   87210:	30000626 	beq	r6,zero,8722c <memcpy+0x11c>
   87214:	198d883a 	add	r6,r3,r6
   87218:	29c00003 	ldbu	r7,0(r5)
   8721c:	18c00044 	addi	r3,r3,1
   87220:	29400044 	addi	r5,r5,1
   87224:	19ffffc5 	stb	r7,-1(r3)
   87228:	19bffb1e 	bne	r3,r6,87218 <__alt_data_end+0xfffbb728>
   8722c:	dfc00217 	ldw	ra,8(sp)
   87230:	dc400117 	ldw	r17,4(sp)
   87234:	dc000017 	ldw	r16,0(sp)
   87238:	dec00304 	addi	sp,sp,12
   8723c:	f800283a 	ret
   87240:	2007883a 	mov	r3,r4
   87244:	003ff206 	br	87210 <__alt_data_end+0xfffbb720>
   87248:	2007883a 	mov	r3,r4
   8724c:	003ff106 	br	87214 <__alt_data_end+0xfffbb724>
   87250:	200d883a 	mov	r6,r4
   87254:	003fee06 	br	87210 <__alt_data_end+0xfffbb720>

00087258 <memmove>:
   87258:	2005883a 	mov	r2,r4
   8725c:	29000b2e 	bgeu	r5,r4,8728c <memmove+0x34>
   87260:	298f883a 	add	r7,r5,r6
   87264:	21c0092e 	bgeu	r4,r7,8728c <memmove+0x34>
   87268:	2187883a 	add	r3,r4,r6
   8726c:	198bc83a 	sub	r5,r3,r6
   87270:	30004826 	beq	r6,zero,87394 <memmove+0x13c>
   87274:	39ffffc4 	addi	r7,r7,-1
   87278:	39000003 	ldbu	r4,0(r7)
   8727c:	18ffffc4 	addi	r3,r3,-1
   87280:	19000005 	stb	r4,0(r3)
   87284:	28fffb1e 	bne	r5,r3,87274 <__alt_data_end+0xfffbb784>
   87288:	f800283a 	ret
   8728c:	00c003c4 	movi	r3,15
   87290:	1980412e 	bgeu	r3,r6,87398 <memmove+0x140>
   87294:	2886b03a 	or	r3,r5,r2
   87298:	18c000cc 	andi	r3,r3,3
   8729c:	1800401e 	bne	r3,zero,873a0 <memmove+0x148>
   872a0:	33fffc04 	addi	r15,r6,-16
   872a4:	781ed13a 	srli	r15,r15,4
   872a8:	28c00104 	addi	r3,r5,4
   872ac:	13400104 	addi	r13,r2,4
   872b0:	781c913a 	slli	r14,r15,4
   872b4:	2b000204 	addi	r12,r5,8
   872b8:	12c00204 	addi	r11,r2,8
   872bc:	73800504 	addi	r14,r14,20
   872c0:	2a800304 	addi	r10,r5,12
   872c4:	12400304 	addi	r9,r2,12
   872c8:	2b9d883a 	add	r14,r5,r14
   872cc:	2811883a 	mov	r8,r5
   872d0:	100f883a 	mov	r7,r2
   872d4:	41000017 	ldw	r4,0(r8)
   872d8:	39c00404 	addi	r7,r7,16
   872dc:	18c00404 	addi	r3,r3,16
   872e0:	393ffc15 	stw	r4,-16(r7)
   872e4:	193ffc17 	ldw	r4,-16(r3)
   872e8:	6b400404 	addi	r13,r13,16
   872ec:	5ac00404 	addi	r11,r11,16
   872f0:	693ffc15 	stw	r4,-16(r13)
   872f4:	61000017 	ldw	r4,0(r12)
   872f8:	4a400404 	addi	r9,r9,16
   872fc:	42000404 	addi	r8,r8,16
   87300:	593ffc15 	stw	r4,-16(r11)
   87304:	51000017 	ldw	r4,0(r10)
   87308:	63000404 	addi	r12,r12,16
   8730c:	52800404 	addi	r10,r10,16
   87310:	493ffc15 	stw	r4,-16(r9)
   87314:	1bbfef1e 	bne	r3,r14,872d4 <__alt_data_end+0xfffbb7e4>
   87318:	79000044 	addi	r4,r15,1
   8731c:	2008913a 	slli	r4,r4,4
   87320:	328003cc 	andi	r10,r6,15
   87324:	02c000c4 	movi	r11,3
   87328:	1107883a 	add	r3,r2,r4
   8732c:	290b883a 	add	r5,r5,r4
   87330:	5a801e2e 	bgeu	r11,r10,873ac <memmove+0x154>
   87334:	1813883a 	mov	r9,r3
   87338:	2811883a 	mov	r8,r5
   8733c:	500f883a 	mov	r7,r10
   87340:	41000017 	ldw	r4,0(r8)
   87344:	4a400104 	addi	r9,r9,4
   87348:	39ffff04 	addi	r7,r7,-4
   8734c:	493fff15 	stw	r4,-4(r9)
   87350:	42000104 	addi	r8,r8,4
   87354:	59fffa36 	bltu	r11,r7,87340 <__alt_data_end+0xfffbb850>
   87358:	513fff04 	addi	r4,r10,-4
   8735c:	2008d0ba 	srli	r4,r4,2
   87360:	318000cc 	andi	r6,r6,3
   87364:	21000044 	addi	r4,r4,1
   87368:	2109883a 	add	r4,r4,r4
   8736c:	2109883a 	add	r4,r4,r4
   87370:	1907883a 	add	r3,r3,r4
   87374:	290b883a 	add	r5,r5,r4
   87378:	30000b26 	beq	r6,zero,873a8 <memmove+0x150>
   8737c:	198d883a 	add	r6,r3,r6
   87380:	29c00003 	ldbu	r7,0(r5)
   87384:	18c00044 	addi	r3,r3,1
   87388:	29400044 	addi	r5,r5,1
   8738c:	19ffffc5 	stb	r7,-1(r3)
   87390:	19bffb1e 	bne	r3,r6,87380 <__alt_data_end+0xfffbb890>
   87394:	f800283a 	ret
   87398:	1007883a 	mov	r3,r2
   8739c:	003ff606 	br	87378 <__alt_data_end+0xfffbb888>
   873a0:	1007883a 	mov	r3,r2
   873a4:	003ff506 	br	8737c <__alt_data_end+0xfffbb88c>
   873a8:	f800283a 	ret
   873ac:	500d883a 	mov	r6,r10
   873b0:	003ff106 	br	87378 <__alt_data_end+0xfffbb888>

000873b4 <memset>:
   873b4:	20c000cc 	andi	r3,r4,3
   873b8:	2005883a 	mov	r2,r4
   873bc:	18004426 	beq	r3,zero,874d0 <memset+0x11c>
   873c0:	31ffffc4 	addi	r7,r6,-1
   873c4:	30004026 	beq	r6,zero,874c8 <memset+0x114>
   873c8:	2813883a 	mov	r9,r5
   873cc:	200d883a 	mov	r6,r4
   873d0:	2007883a 	mov	r3,r4
   873d4:	00000406 	br	873e8 <memset+0x34>
   873d8:	3a3fffc4 	addi	r8,r7,-1
   873dc:	31800044 	addi	r6,r6,1
   873e0:	38003926 	beq	r7,zero,874c8 <memset+0x114>
   873e4:	400f883a 	mov	r7,r8
   873e8:	18c00044 	addi	r3,r3,1
   873ec:	32400005 	stb	r9,0(r6)
   873f0:	1a0000cc 	andi	r8,r3,3
   873f4:	403ff81e 	bne	r8,zero,873d8 <__alt_data_end+0xfffbb8e8>
   873f8:	010000c4 	movi	r4,3
   873fc:	21c02d2e 	bgeu	r4,r7,874b4 <memset+0x100>
   87400:	29003fcc 	andi	r4,r5,255
   87404:	200c923a 	slli	r6,r4,8
   87408:	3108b03a 	or	r4,r6,r4
   8740c:	200c943a 	slli	r6,r4,16
   87410:	218cb03a 	or	r6,r4,r6
   87414:	010003c4 	movi	r4,15
   87418:	21c0182e 	bgeu	r4,r7,8747c <memset+0xc8>
   8741c:	3b3ffc04 	addi	r12,r7,-16
   87420:	6018d13a 	srli	r12,r12,4
   87424:	1a000104 	addi	r8,r3,4
   87428:	1ac00204 	addi	r11,r3,8
   8742c:	6008913a 	slli	r4,r12,4
   87430:	1a800304 	addi	r10,r3,12
   87434:	1813883a 	mov	r9,r3
   87438:	21000504 	addi	r4,r4,20
   8743c:	1909883a 	add	r4,r3,r4
   87440:	49800015 	stw	r6,0(r9)
   87444:	41800015 	stw	r6,0(r8)
   87448:	59800015 	stw	r6,0(r11)
   8744c:	51800015 	stw	r6,0(r10)
   87450:	42000404 	addi	r8,r8,16
   87454:	4a400404 	addi	r9,r9,16
   87458:	5ac00404 	addi	r11,r11,16
   8745c:	52800404 	addi	r10,r10,16
   87460:	413ff71e 	bne	r8,r4,87440 <__alt_data_end+0xfffbb950>
   87464:	63000044 	addi	r12,r12,1
   87468:	6018913a 	slli	r12,r12,4
   8746c:	39c003cc 	andi	r7,r7,15
   87470:	010000c4 	movi	r4,3
   87474:	1b07883a 	add	r3,r3,r12
   87478:	21c00e2e 	bgeu	r4,r7,874b4 <memset+0x100>
   8747c:	1813883a 	mov	r9,r3
   87480:	3811883a 	mov	r8,r7
   87484:	010000c4 	movi	r4,3
   87488:	49800015 	stw	r6,0(r9)
   8748c:	423fff04 	addi	r8,r8,-4
   87490:	4a400104 	addi	r9,r9,4
   87494:	223ffc36 	bltu	r4,r8,87488 <__alt_data_end+0xfffbb998>
   87498:	393fff04 	addi	r4,r7,-4
   8749c:	2008d0ba 	srli	r4,r4,2
   874a0:	39c000cc 	andi	r7,r7,3
   874a4:	21000044 	addi	r4,r4,1
   874a8:	2109883a 	add	r4,r4,r4
   874ac:	2109883a 	add	r4,r4,r4
   874b0:	1907883a 	add	r3,r3,r4
   874b4:	38000526 	beq	r7,zero,874cc <memset+0x118>
   874b8:	19cf883a 	add	r7,r3,r7
   874bc:	19400005 	stb	r5,0(r3)
   874c0:	18c00044 	addi	r3,r3,1
   874c4:	38fffd1e 	bne	r7,r3,874bc <__alt_data_end+0xfffbb9cc>
   874c8:	f800283a 	ret
   874cc:	f800283a 	ret
   874d0:	2007883a 	mov	r3,r4
   874d4:	300f883a 	mov	r7,r6
   874d8:	003fc706 	br	873f8 <__alt_data_end+0xfffbb908>

000874dc <_Balloc>:
   874dc:	20801317 	ldw	r2,76(r4)
   874e0:	defffc04 	addi	sp,sp,-16
   874e4:	dc400115 	stw	r17,4(sp)
   874e8:	dc000015 	stw	r16,0(sp)
   874ec:	dfc00315 	stw	ra,12(sp)
   874f0:	dc800215 	stw	r18,8(sp)
   874f4:	2023883a 	mov	r17,r4
   874f8:	2821883a 	mov	r16,r5
   874fc:	10000f26 	beq	r2,zero,8753c <_Balloc+0x60>
   87500:	8407883a 	add	r3,r16,r16
   87504:	18c7883a 	add	r3,r3,r3
   87508:	10c7883a 	add	r3,r2,r3
   8750c:	18800017 	ldw	r2,0(r3)
   87510:	10001126 	beq	r2,zero,87558 <_Balloc+0x7c>
   87514:	11000017 	ldw	r4,0(r2)
   87518:	19000015 	stw	r4,0(r3)
   8751c:	10000415 	stw	zero,16(r2)
   87520:	10000315 	stw	zero,12(r2)
   87524:	dfc00317 	ldw	ra,12(sp)
   87528:	dc800217 	ldw	r18,8(sp)
   8752c:	dc400117 	ldw	r17,4(sp)
   87530:	dc000017 	ldw	r16,0(sp)
   87534:	dec00404 	addi	sp,sp,16
   87538:	f800283a 	ret
   8753c:	01800844 	movi	r6,33
   87540:	01400104 	movi	r5,4
   87544:	008a4180 	call	8a418 <_calloc_r>
   87548:	88801315 	stw	r2,76(r17)
   8754c:	103fec1e 	bne	r2,zero,87500 <__alt_data_end+0xfffbba10>
   87550:	0005883a 	mov	r2,zero
   87554:	003ff306 	br	87524 <__alt_data_end+0xfffbba34>
   87558:	01400044 	movi	r5,1
   8755c:	2c24983a 	sll	r18,r5,r16
   87560:	8809883a 	mov	r4,r17
   87564:	91800144 	addi	r6,r18,5
   87568:	318d883a 	add	r6,r6,r6
   8756c:	318d883a 	add	r6,r6,r6
   87570:	008a4180 	call	8a418 <_calloc_r>
   87574:	103ff626 	beq	r2,zero,87550 <__alt_data_end+0xfffbba60>
   87578:	14000115 	stw	r16,4(r2)
   8757c:	14800215 	stw	r18,8(r2)
   87580:	003fe606 	br	8751c <__alt_data_end+0xfffbba2c>

00087584 <_Bfree>:
   87584:	28000826 	beq	r5,zero,875a8 <_Bfree+0x24>
   87588:	28c00117 	ldw	r3,4(r5)
   8758c:	20801317 	ldw	r2,76(r4)
   87590:	18c7883a 	add	r3,r3,r3
   87594:	18c7883a 	add	r3,r3,r3
   87598:	10c5883a 	add	r2,r2,r3
   8759c:	10c00017 	ldw	r3,0(r2)
   875a0:	28c00015 	stw	r3,0(r5)
   875a4:	11400015 	stw	r5,0(r2)
   875a8:	f800283a 	ret

000875ac <__multadd>:
   875ac:	defffa04 	addi	sp,sp,-24
   875b0:	dc800315 	stw	r18,12(sp)
   875b4:	dc400215 	stw	r17,8(sp)
   875b8:	dc000115 	stw	r16,4(sp)
   875bc:	2823883a 	mov	r17,r5
   875c0:	2c000417 	ldw	r16,16(r5)
   875c4:	dfc00515 	stw	ra,20(sp)
   875c8:	dcc00415 	stw	r19,16(sp)
   875cc:	2025883a 	mov	r18,r4
   875d0:	29400504 	addi	r5,r5,20
   875d4:	0011883a 	mov	r8,zero
   875d8:	28c00017 	ldw	r3,0(r5)
   875dc:	29400104 	addi	r5,r5,4
   875e0:	42000044 	addi	r8,r8,1
   875e4:	18bfffcc 	andi	r2,r3,65535
   875e8:	1185383a 	mul	r2,r2,r6
   875ec:	1806d43a 	srli	r3,r3,16
   875f0:	11cf883a 	add	r7,r2,r7
   875f4:	3808d43a 	srli	r4,r7,16
   875f8:	1987383a 	mul	r3,r3,r6
   875fc:	38bfffcc 	andi	r2,r7,65535
   87600:	1907883a 	add	r3,r3,r4
   87604:	1808943a 	slli	r4,r3,16
   87608:	180ed43a 	srli	r7,r3,16
   8760c:	2085883a 	add	r2,r4,r2
   87610:	28bfff15 	stw	r2,-4(r5)
   87614:	443ff016 	blt	r8,r16,875d8 <__alt_data_end+0xfffbbae8>
   87618:	38000926 	beq	r7,zero,87640 <__multadd+0x94>
   8761c:	88800217 	ldw	r2,8(r17)
   87620:	80800f0e 	bge	r16,r2,87660 <__multadd+0xb4>
   87624:	80800144 	addi	r2,r16,5
   87628:	1085883a 	add	r2,r2,r2
   8762c:	1085883a 	add	r2,r2,r2
   87630:	8885883a 	add	r2,r17,r2
   87634:	11c00015 	stw	r7,0(r2)
   87638:	84000044 	addi	r16,r16,1
   8763c:	8c000415 	stw	r16,16(r17)
   87640:	8805883a 	mov	r2,r17
   87644:	dfc00517 	ldw	ra,20(sp)
   87648:	dcc00417 	ldw	r19,16(sp)
   8764c:	dc800317 	ldw	r18,12(sp)
   87650:	dc400217 	ldw	r17,8(sp)
   87654:	dc000117 	ldw	r16,4(sp)
   87658:	dec00604 	addi	sp,sp,24
   8765c:	f800283a 	ret
   87660:	89400117 	ldw	r5,4(r17)
   87664:	9009883a 	mov	r4,r18
   87668:	d9c00015 	stw	r7,0(sp)
   8766c:	29400044 	addi	r5,r5,1
   87670:	00874dc0 	call	874dc <_Balloc>
   87674:	89800417 	ldw	r6,16(r17)
   87678:	89400304 	addi	r5,r17,12
   8767c:	11000304 	addi	r4,r2,12
   87680:	31800084 	addi	r6,r6,2
   87684:	318d883a 	add	r6,r6,r6
   87688:	318d883a 	add	r6,r6,r6
   8768c:	1027883a 	mov	r19,r2
   87690:	00871100 	call	87110 <memcpy>
   87694:	d9c00017 	ldw	r7,0(sp)
   87698:	88000a26 	beq	r17,zero,876c4 <__multadd+0x118>
   8769c:	88c00117 	ldw	r3,4(r17)
   876a0:	90801317 	ldw	r2,76(r18)
   876a4:	18c7883a 	add	r3,r3,r3
   876a8:	18c7883a 	add	r3,r3,r3
   876ac:	10c5883a 	add	r2,r2,r3
   876b0:	10c00017 	ldw	r3,0(r2)
   876b4:	88c00015 	stw	r3,0(r17)
   876b8:	14400015 	stw	r17,0(r2)
   876bc:	9823883a 	mov	r17,r19
   876c0:	003fd806 	br	87624 <__alt_data_end+0xfffbbb34>
   876c4:	9823883a 	mov	r17,r19
   876c8:	003fd606 	br	87624 <__alt_data_end+0xfffbbb34>

000876cc <__s2b>:
   876cc:	defff904 	addi	sp,sp,-28
   876d0:	dc400115 	stw	r17,4(sp)
   876d4:	dc000015 	stw	r16,0(sp)
   876d8:	2023883a 	mov	r17,r4
   876dc:	2821883a 	mov	r16,r5
   876e0:	39000204 	addi	r4,r7,8
   876e4:	01400244 	movi	r5,9
   876e8:	dcc00315 	stw	r19,12(sp)
   876ec:	dc800215 	stw	r18,8(sp)
   876f0:	dfc00615 	stw	ra,24(sp)
   876f4:	dd400515 	stw	r21,20(sp)
   876f8:	dd000415 	stw	r20,16(sp)
   876fc:	3825883a 	mov	r18,r7
   87700:	3027883a 	mov	r19,r6
   87704:	00813680 	call	81368 <__divsi3>
   87708:	00c00044 	movi	r3,1
   8770c:	000b883a 	mov	r5,zero
   87710:	1880030e 	bge	r3,r2,87720 <__s2b+0x54>
   87714:	18c7883a 	add	r3,r3,r3
   87718:	29400044 	addi	r5,r5,1
   8771c:	18bffd16 	blt	r3,r2,87714 <__alt_data_end+0xfffbbc24>
   87720:	8809883a 	mov	r4,r17
   87724:	00874dc0 	call	874dc <_Balloc>
   87728:	d8c00717 	ldw	r3,28(sp)
   8772c:	10c00515 	stw	r3,20(r2)
   87730:	00c00044 	movi	r3,1
   87734:	10c00415 	stw	r3,16(r2)
   87738:	00c00244 	movi	r3,9
   8773c:	1cc0210e 	bge	r3,r19,877c4 <__s2b+0xf8>
   87740:	80eb883a 	add	r21,r16,r3
   87744:	a829883a 	mov	r20,r21
   87748:	84e1883a 	add	r16,r16,r19
   8774c:	a1c00007 	ldb	r7,0(r20)
   87750:	01800284 	movi	r6,10
   87754:	a5000044 	addi	r20,r20,1
   87758:	100b883a 	mov	r5,r2
   8775c:	39fff404 	addi	r7,r7,-48
   87760:	8809883a 	mov	r4,r17
   87764:	00875ac0 	call	875ac <__multadd>
   87768:	a43ff81e 	bne	r20,r16,8774c <__alt_data_end+0xfffbbc5c>
   8776c:	ace1883a 	add	r16,r21,r19
   87770:	843ffe04 	addi	r16,r16,-8
   87774:	9c800a0e 	bge	r19,r18,877a0 <__s2b+0xd4>
   87778:	94e5c83a 	sub	r18,r18,r19
   8777c:	84a5883a 	add	r18,r16,r18
   87780:	81c00007 	ldb	r7,0(r16)
   87784:	01800284 	movi	r6,10
   87788:	84000044 	addi	r16,r16,1
   8778c:	100b883a 	mov	r5,r2
   87790:	39fff404 	addi	r7,r7,-48
   87794:	8809883a 	mov	r4,r17
   87798:	00875ac0 	call	875ac <__multadd>
   8779c:	84bff81e 	bne	r16,r18,87780 <__alt_data_end+0xfffbbc90>
   877a0:	dfc00617 	ldw	ra,24(sp)
   877a4:	dd400517 	ldw	r21,20(sp)
   877a8:	dd000417 	ldw	r20,16(sp)
   877ac:	dcc00317 	ldw	r19,12(sp)
   877b0:	dc800217 	ldw	r18,8(sp)
   877b4:	dc400117 	ldw	r17,4(sp)
   877b8:	dc000017 	ldw	r16,0(sp)
   877bc:	dec00704 	addi	sp,sp,28
   877c0:	f800283a 	ret
   877c4:	84000284 	addi	r16,r16,10
   877c8:	1827883a 	mov	r19,r3
   877cc:	003fe906 	br	87774 <__alt_data_end+0xfffbbc84>

000877d0 <__hi0bits>:
   877d0:	20bfffec 	andhi	r2,r4,65535
   877d4:	1000141e 	bne	r2,zero,87828 <__hi0bits+0x58>
   877d8:	2008943a 	slli	r4,r4,16
   877dc:	00800404 	movi	r2,16
   877e0:	20ffc02c 	andhi	r3,r4,65280
   877e4:	1800021e 	bne	r3,zero,877f0 <__hi0bits+0x20>
   877e8:	2008923a 	slli	r4,r4,8
   877ec:	10800204 	addi	r2,r2,8
   877f0:	20fc002c 	andhi	r3,r4,61440
   877f4:	1800021e 	bne	r3,zero,87800 <__hi0bits+0x30>
   877f8:	2008913a 	slli	r4,r4,4
   877fc:	10800104 	addi	r2,r2,4
   87800:	20f0002c 	andhi	r3,r4,49152
   87804:	1800031e 	bne	r3,zero,87814 <__hi0bits+0x44>
   87808:	2109883a 	add	r4,r4,r4
   8780c:	10800084 	addi	r2,r2,2
   87810:	2109883a 	add	r4,r4,r4
   87814:	20000316 	blt	r4,zero,87824 <__hi0bits+0x54>
   87818:	2110002c 	andhi	r4,r4,16384
   8781c:	2000041e 	bne	r4,zero,87830 <__hi0bits+0x60>
   87820:	00800804 	movi	r2,32
   87824:	f800283a 	ret
   87828:	0005883a 	mov	r2,zero
   8782c:	003fec06 	br	877e0 <__alt_data_end+0xfffbbcf0>
   87830:	10800044 	addi	r2,r2,1
   87834:	f800283a 	ret

00087838 <__lo0bits>:
   87838:	20c00017 	ldw	r3,0(r4)
   8783c:	188001cc 	andi	r2,r3,7
   87840:	10000826 	beq	r2,zero,87864 <__lo0bits+0x2c>
   87844:	1880004c 	andi	r2,r3,1
   87848:	1000211e 	bne	r2,zero,878d0 <__lo0bits+0x98>
   8784c:	1880008c 	andi	r2,r3,2
   87850:	1000211e 	bne	r2,zero,878d8 <__lo0bits+0xa0>
   87854:	1806d0ba 	srli	r3,r3,2
   87858:	00800084 	movi	r2,2
   8785c:	20c00015 	stw	r3,0(r4)
   87860:	f800283a 	ret
   87864:	18bfffcc 	andi	r2,r3,65535
   87868:	10001326 	beq	r2,zero,878b8 <__lo0bits+0x80>
   8786c:	0005883a 	mov	r2,zero
   87870:	19403fcc 	andi	r5,r3,255
   87874:	2800021e 	bne	r5,zero,87880 <__lo0bits+0x48>
   87878:	1806d23a 	srli	r3,r3,8
   8787c:	10800204 	addi	r2,r2,8
   87880:	194003cc 	andi	r5,r3,15
   87884:	2800021e 	bne	r5,zero,87890 <__lo0bits+0x58>
   87888:	1806d13a 	srli	r3,r3,4
   8788c:	10800104 	addi	r2,r2,4
   87890:	194000cc 	andi	r5,r3,3
   87894:	2800021e 	bne	r5,zero,878a0 <__lo0bits+0x68>
   87898:	1806d0ba 	srli	r3,r3,2
   8789c:	10800084 	addi	r2,r2,2
   878a0:	1940004c 	andi	r5,r3,1
   878a4:	2800081e 	bne	r5,zero,878c8 <__lo0bits+0x90>
   878a8:	1806d07a 	srli	r3,r3,1
   878ac:	1800051e 	bne	r3,zero,878c4 <__lo0bits+0x8c>
   878b0:	00800804 	movi	r2,32
   878b4:	f800283a 	ret
   878b8:	1806d43a 	srli	r3,r3,16
   878bc:	00800404 	movi	r2,16
   878c0:	003feb06 	br	87870 <__alt_data_end+0xfffbbd80>
   878c4:	10800044 	addi	r2,r2,1
   878c8:	20c00015 	stw	r3,0(r4)
   878cc:	f800283a 	ret
   878d0:	0005883a 	mov	r2,zero
   878d4:	f800283a 	ret
   878d8:	1806d07a 	srli	r3,r3,1
   878dc:	00800044 	movi	r2,1
   878e0:	20c00015 	stw	r3,0(r4)
   878e4:	f800283a 	ret

000878e8 <__i2b>:
   878e8:	defffd04 	addi	sp,sp,-12
   878ec:	dc000015 	stw	r16,0(sp)
   878f0:	04000044 	movi	r16,1
   878f4:	dc400115 	stw	r17,4(sp)
   878f8:	2823883a 	mov	r17,r5
   878fc:	800b883a 	mov	r5,r16
   87900:	dfc00215 	stw	ra,8(sp)
   87904:	00874dc0 	call	874dc <_Balloc>
   87908:	14400515 	stw	r17,20(r2)
   8790c:	14000415 	stw	r16,16(r2)
   87910:	dfc00217 	ldw	ra,8(sp)
   87914:	dc400117 	ldw	r17,4(sp)
   87918:	dc000017 	ldw	r16,0(sp)
   8791c:	dec00304 	addi	sp,sp,12
   87920:	f800283a 	ret

00087924 <__multiply>:
   87924:	defffa04 	addi	sp,sp,-24
   87928:	dcc00315 	stw	r19,12(sp)
   8792c:	dc800215 	stw	r18,8(sp)
   87930:	34c00417 	ldw	r19,16(r6)
   87934:	2c800417 	ldw	r18,16(r5)
   87938:	dd000415 	stw	r20,16(sp)
   8793c:	dc400115 	stw	r17,4(sp)
   87940:	dfc00515 	stw	ra,20(sp)
   87944:	dc000015 	stw	r16,0(sp)
   87948:	2829883a 	mov	r20,r5
   8794c:	3023883a 	mov	r17,r6
   87950:	94c0050e 	bge	r18,r19,87968 <__multiply+0x44>
   87954:	9007883a 	mov	r3,r18
   87958:	3029883a 	mov	r20,r6
   8795c:	9825883a 	mov	r18,r19
   87960:	2823883a 	mov	r17,r5
   87964:	1827883a 	mov	r19,r3
   87968:	a0800217 	ldw	r2,8(r20)
   8796c:	94e1883a 	add	r16,r18,r19
   87970:	a1400117 	ldw	r5,4(r20)
   87974:	1400010e 	bge	r2,r16,8797c <__multiply+0x58>
   87978:	29400044 	addi	r5,r5,1
   8797c:	00874dc0 	call	874dc <_Balloc>
   87980:	8415883a 	add	r10,r16,r16
   87984:	12c00504 	addi	r11,r2,20
   87988:	5295883a 	add	r10,r10,r10
   8798c:	5a95883a 	add	r10,r11,r10
   87990:	5807883a 	mov	r3,r11
   87994:	5a80032e 	bgeu	r11,r10,879a4 <__multiply+0x80>
   87998:	18000015 	stw	zero,0(r3)
   8799c:	18c00104 	addi	r3,r3,4
   879a0:	1abffd36 	bltu	r3,r10,87998 <__alt_data_end+0xfffbbea8>
   879a4:	9ce7883a 	add	r19,r19,r19
   879a8:	94a5883a 	add	r18,r18,r18
   879ac:	89800504 	addi	r6,r17,20
   879b0:	9ce7883a 	add	r19,r19,r19
   879b4:	a3400504 	addi	r13,r20,20
   879b8:	94a5883a 	add	r18,r18,r18
   879bc:	34d9883a 	add	r12,r6,r19
   879c0:	6c93883a 	add	r9,r13,r18
   879c4:	3300422e 	bgeu	r6,r12,87ad0 <__multiply+0x1ac>
   879c8:	37c00017 	ldw	ra,0(r6)
   879cc:	fbffffcc 	andi	r15,ra,65535
   879d0:	78001b26 	beq	r15,zero,87a40 <__multiply+0x11c>
   879d4:	5811883a 	mov	r8,r11
   879d8:	681d883a 	mov	r14,r13
   879dc:	000f883a 	mov	r7,zero
   879e0:	71000017 	ldw	r4,0(r14)
   879e4:	40c00017 	ldw	r3,0(r8)
   879e8:	73800104 	addi	r14,r14,4
   879ec:	217fffcc 	andi	r5,r4,65535
   879f0:	2bcb383a 	mul	r5,r5,r15
   879f4:	2008d43a 	srli	r4,r4,16
   879f8:	1c7fffcc 	andi	r17,r3,65535
   879fc:	2c4b883a 	add	r5,r5,r17
   87a00:	29cb883a 	add	r5,r5,r7
   87a04:	23c9383a 	mul	r4,r4,r15
   87a08:	1806d43a 	srli	r3,r3,16
   87a0c:	280ed43a 	srli	r7,r5,16
   87a10:	297fffcc 	andi	r5,r5,65535
   87a14:	20c7883a 	add	r3,r4,r3
   87a18:	19c7883a 	add	r3,r3,r7
   87a1c:	1808943a 	slli	r4,r3,16
   87a20:	4023883a 	mov	r17,r8
   87a24:	180ed43a 	srli	r7,r3,16
   87a28:	214ab03a 	or	r5,r4,r5
   87a2c:	41400015 	stw	r5,0(r8)
   87a30:	42000104 	addi	r8,r8,4
   87a34:	727fea36 	bltu	r14,r9,879e0 <__alt_data_end+0xfffbbef0>
   87a38:	89c00115 	stw	r7,4(r17)
   87a3c:	37c00017 	ldw	ra,0(r6)
   87a40:	f83ed43a 	srli	ra,ra,16
   87a44:	f8001f26 	beq	ra,zero,87ac4 <__multiply+0x1a0>
   87a48:	58c00017 	ldw	r3,0(r11)
   87a4c:	681d883a 	mov	r14,r13
   87a50:	581f883a 	mov	r15,r11
   87a54:	1811883a 	mov	r8,r3
   87a58:	5825883a 	mov	r18,r11
   87a5c:	000f883a 	mov	r7,zero
   87a60:	00000106 	br	87a68 <__multiply+0x144>
   87a64:	8825883a 	mov	r18,r17
   87a68:	7140000b 	ldhu	r5,0(r14)
   87a6c:	4010d43a 	srli	r8,r8,16
   87a70:	193fffcc 	andi	r4,r3,65535
   87a74:	2fcb383a 	mul	r5,r5,ra
   87a78:	7bc00104 	addi	r15,r15,4
   87a7c:	73800104 	addi	r14,r14,4
   87a80:	2a0b883a 	add	r5,r5,r8
   87a84:	29cb883a 	add	r5,r5,r7
   87a88:	2806943a 	slli	r3,r5,16
   87a8c:	94400104 	addi	r17,r18,4
   87a90:	280ad43a 	srli	r5,r5,16
   87a94:	1908b03a 	or	r4,r3,r4
   87a98:	793fff15 	stw	r4,-4(r15)
   87a9c:	70ffff17 	ldw	r3,-4(r14)
   87aa0:	8a000017 	ldw	r8,0(r17)
   87aa4:	1806d43a 	srli	r3,r3,16
   87aa8:	413fffcc 	andi	r4,r8,65535
   87aac:	1fc7383a 	mul	r3,r3,ra
   87ab0:	1907883a 	add	r3,r3,r4
   87ab4:	1947883a 	add	r3,r3,r5
   87ab8:	180ed43a 	srli	r7,r3,16
   87abc:	727fe936 	bltu	r14,r9,87a64 <__alt_data_end+0xfffbbf74>
   87ac0:	90c00115 	stw	r3,4(r18)
   87ac4:	31800104 	addi	r6,r6,4
   87ac8:	5ac00104 	addi	r11,r11,4
   87acc:	333fbe36 	bltu	r6,r12,879c8 <__alt_data_end+0xfffbbed8>
   87ad0:	0400090e 	bge	zero,r16,87af8 <__multiply+0x1d4>
   87ad4:	50ffff17 	ldw	r3,-4(r10)
   87ad8:	52bfff04 	addi	r10,r10,-4
   87adc:	18000326 	beq	r3,zero,87aec <__multiply+0x1c8>
   87ae0:	00000506 	br	87af8 <__multiply+0x1d4>
   87ae4:	50c00017 	ldw	r3,0(r10)
   87ae8:	1800031e 	bne	r3,zero,87af8 <__multiply+0x1d4>
   87aec:	843fffc4 	addi	r16,r16,-1
   87af0:	52bfff04 	addi	r10,r10,-4
   87af4:	803ffb1e 	bne	r16,zero,87ae4 <__alt_data_end+0xfffbbff4>
   87af8:	14000415 	stw	r16,16(r2)
   87afc:	dfc00517 	ldw	ra,20(sp)
   87b00:	dd000417 	ldw	r20,16(sp)
   87b04:	dcc00317 	ldw	r19,12(sp)
   87b08:	dc800217 	ldw	r18,8(sp)
   87b0c:	dc400117 	ldw	r17,4(sp)
   87b10:	dc000017 	ldw	r16,0(sp)
   87b14:	dec00604 	addi	sp,sp,24
   87b18:	f800283a 	ret

00087b1c <__pow5mult>:
   87b1c:	defffa04 	addi	sp,sp,-24
   87b20:	dcc00315 	stw	r19,12(sp)
   87b24:	dc000015 	stw	r16,0(sp)
   87b28:	dfc00515 	stw	ra,20(sp)
   87b2c:	dd000415 	stw	r20,16(sp)
   87b30:	dc800215 	stw	r18,8(sp)
   87b34:	dc400115 	stw	r17,4(sp)
   87b38:	308000cc 	andi	r2,r6,3
   87b3c:	3021883a 	mov	r16,r6
   87b40:	2027883a 	mov	r19,r4
   87b44:	10002f1e 	bne	r2,zero,87c04 <__pow5mult+0xe8>
   87b48:	2825883a 	mov	r18,r5
   87b4c:	8021d0ba 	srai	r16,r16,2
   87b50:	80001a26 	beq	r16,zero,87bbc <__pow5mult+0xa0>
   87b54:	9c401217 	ldw	r17,72(r19)
   87b58:	8800061e 	bne	r17,zero,87b74 <__pow5mult+0x58>
   87b5c:	00003406 	br	87c30 <__pow5mult+0x114>
   87b60:	8021d07a 	srai	r16,r16,1
   87b64:	80001526 	beq	r16,zero,87bbc <__pow5mult+0xa0>
   87b68:	88800017 	ldw	r2,0(r17)
   87b6c:	10001c26 	beq	r2,zero,87be0 <__pow5mult+0xc4>
   87b70:	1023883a 	mov	r17,r2
   87b74:	8080004c 	andi	r2,r16,1
   87b78:	103ff926 	beq	r2,zero,87b60 <__alt_data_end+0xfffbc070>
   87b7c:	880d883a 	mov	r6,r17
   87b80:	900b883a 	mov	r5,r18
   87b84:	9809883a 	mov	r4,r19
   87b88:	00879240 	call	87924 <__multiply>
   87b8c:	90001b26 	beq	r18,zero,87bfc <__pow5mult+0xe0>
   87b90:	91000117 	ldw	r4,4(r18)
   87b94:	98c01317 	ldw	r3,76(r19)
   87b98:	8021d07a 	srai	r16,r16,1
   87b9c:	2109883a 	add	r4,r4,r4
   87ba0:	2109883a 	add	r4,r4,r4
   87ba4:	1907883a 	add	r3,r3,r4
   87ba8:	19000017 	ldw	r4,0(r3)
   87bac:	91000015 	stw	r4,0(r18)
   87bb0:	1c800015 	stw	r18,0(r3)
   87bb4:	1025883a 	mov	r18,r2
   87bb8:	803feb1e 	bne	r16,zero,87b68 <__alt_data_end+0xfffbc078>
   87bbc:	9005883a 	mov	r2,r18
   87bc0:	dfc00517 	ldw	ra,20(sp)
   87bc4:	dd000417 	ldw	r20,16(sp)
   87bc8:	dcc00317 	ldw	r19,12(sp)
   87bcc:	dc800217 	ldw	r18,8(sp)
   87bd0:	dc400117 	ldw	r17,4(sp)
   87bd4:	dc000017 	ldw	r16,0(sp)
   87bd8:	dec00604 	addi	sp,sp,24
   87bdc:	f800283a 	ret
   87be0:	880d883a 	mov	r6,r17
   87be4:	880b883a 	mov	r5,r17
   87be8:	9809883a 	mov	r4,r19
   87bec:	00879240 	call	87924 <__multiply>
   87bf0:	88800015 	stw	r2,0(r17)
   87bf4:	10000015 	stw	zero,0(r2)
   87bf8:	003fdd06 	br	87b70 <__alt_data_end+0xfffbc080>
   87bfc:	1025883a 	mov	r18,r2
   87c00:	003fd706 	br	87b60 <__alt_data_end+0xfffbc070>
   87c04:	10bfffc4 	addi	r2,r2,-1
   87c08:	1085883a 	add	r2,r2,r2
   87c0c:	00c00274 	movhi	r3,9
   87c10:	18c2c504 	addi	r3,r3,2836
   87c14:	1085883a 	add	r2,r2,r2
   87c18:	1885883a 	add	r2,r3,r2
   87c1c:	11800017 	ldw	r6,0(r2)
   87c20:	000f883a 	mov	r7,zero
   87c24:	00875ac0 	call	875ac <__multadd>
   87c28:	1025883a 	mov	r18,r2
   87c2c:	003fc706 	br	87b4c <__alt_data_end+0xfffbc05c>
   87c30:	05000044 	movi	r20,1
   87c34:	a00b883a 	mov	r5,r20
   87c38:	9809883a 	mov	r4,r19
   87c3c:	00874dc0 	call	874dc <_Balloc>
   87c40:	1023883a 	mov	r17,r2
   87c44:	00809c44 	movi	r2,625
   87c48:	88800515 	stw	r2,20(r17)
   87c4c:	8d000415 	stw	r20,16(r17)
   87c50:	9c401215 	stw	r17,72(r19)
   87c54:	88000015 	stw	zero,0(r17)
   87c58:	003fc606 	br	87b74 <__alt_data_end+0xfffbc084>

00087c5c <__lshift>:
   87c5c:	defff904 	addi	sp,sp,-28
   87c60:	dd400515 	stw	r21,20(sp)
   87c64:	dcc00315 	stw	r19,12(sp)
   87c68:	302bd17a 	srai	r21,r6,5
   87c6c:	2cc00417 	ldw	r19,16(r5)
   87c70:	28800217 	ldw	r2,8(r5)
   87c74:	dd000415 	stw	r20,16(sp)
   87c78:	ace7883a 	add	r19,r21,r19
   87c7c:	dc800215 	stw	r18,8(sp)
   87c80:	dc400115 	stw	r17,4(sp)
   87c84:	dc000015 	stw	r16,0(sp)
   87c88:	dfc00615 	stw	ra,24(sp)
   87c8c:	9c000044 	addi	r16,r19,1
   87c90:	2823883a 	mov	r17,r5
   87c94:	3029883a 	mov	r20,r6
   87c98:	2025883a 	mov	r18,r4
   87c9c:	29400117 	ldw	r5,4(r5)
   87ca0:	1400030e 	bge	r2,r16,87cb0 <__lshift+0x54>
   87ca4:	1085883a 	add	r2,r2,r2
   87ca8:	29400044 	addi	r5,r5,1
   87cac:	143ffd16 	blt	r2,r16,87ca4 <__alt_data_end+0xfffbc1b4>
   87cb0:	9009883a 	mov	r4,r18
   87cb4:	00874dc0 	call	874dc <_Balloc>
   87cb8:	10c00504 	addi	r3,r2,20
   87cbc:	0540070e 	bge	zero,r21,87cdc <__lshift+0x80>
   87cc0:	ad6b883a 	add	r21,r21,r21
   87cc4:	ad6b883a 	add	r21,r21,r21
   87cc8:	1809883a 	mov	r4,r3
   87ccc:	1d47883a 	add	r3,r3,r21
   87cd0:	20000015 	stw	zero,0(r4)
   87cd4:	21000104 	addi	r4,r4,4
   87cd8:	193ffd1e 	bne	r3,r4,87cd0 <__alt_data_end+0xfffbc1e0>
   87cdc:	8a000417 	ldw	r8,16(r17)
   87ce0:	89000504 	addi	r4,r17,20
   87ce4:	a18007cc 	andi	r6,r20,31
   87ce8:	4211883a 	add	r8,r8,r8
   87cec:	4211883a 	add	r8,r8,r8
   87cf0:	2211883a 	add	r8,r4,r8
   87cf4:	30002326 	beq	r6,zero,87d84 <__lshift+0x128>
   87cf8:	02400804 	movi	r9,32
   87cfc:	4993c83a 	sub	r9,r9,r6
   87d00:	000b883a 	mov	r5,zero
   87d04:	21c00017 	ldw	r7,0(r4)
   87d08:	1815883a 	mov	r10,r3
   87d0c:	18c00104 	addi	r3,r3,4
   87d10:	398e983a 	sll	r7,r7,r6
   87d14:	21000104 	addi	r4,r4,4
   87d18:	394ab03a 	or	r5,r7,r5
   87d1c:	197fff15 	stw	r5,-4(r3)
   87d20:	217fff17 	ldw	r5,-4(r4)
   87d24:	2a4ad83a 	srl	r5,r5,r9
   87d28:	223ff636 	bltu	r4,r8,87d04 <__alt_data_end+0xfffbc214>
   87d2c:	51400115 	stw	r5,4(r10)
   87d30:	28001a1e 	bne	r5,zero,87d9c <__lshift+0x140>
   87d34:	843fffc4 	addi	r16,r16,-1
   87d38:	14000415 	stw	r16,16(r2)
   87d3c:	88000826 	beq	r17,zero,87d60 <__lshift+0x104>
   87d40:	89000117 	ldw	r4,4(r17)
   87d44:	90c01317 	ldw	r3,76(r18)
   87d48:	2109883a 	add	r4,r4,r4
   87d4c:	2109883a 	add	r4,r4,r4
   87d50:	1907883a 	add	r3,r3,r4
   87d54:	19000017 	ldw	r4,0(r3)
   87d58:	89000015 	stw	r4,0(r17)
   87d5c:	1c400015 	stw	r17,0(r3)
   87d60:	dfc00617 	ldw	ra,24(sp)
   87d64:	dd400517 	ldw	r21,20(sp)
   87d68:	dd000417 	ldw	r20,16(sp)
   87d6c:	dcc00317 	ldw	r19,12(sp)
   87d70:	dc800217 	ldw	r18,8(sp)
   87d74:	dc400117 	ldw	r17,4(sp)
   87d78:	dc000017 	ldw	r16,0(sp)
   87d7c:	dec00704 	addi	sp,sp,28
   87d80:	f800283a 	ret
   87d84:	21400017 	ldw	r5,0(r4)
   87d88:	18c00104 	addi	r3,r3,4
   87d8c:	21000104 	addi	r4,r4,4
   87d90:	197fff15 	stw	r5,-4(r3)
   87d94:	223ffb36 	bltu	r4,r8,87d84 <__alt_data_end+0xfffbc294>
   87d98:	003fe606 	br	87d34 <__alt_data_end+0xfffbc244>
   87d9c:	9c000084 	addi	r16,r19,2
   87da0:	003fe406 	br	87d34 <__alt_data_end+0xfffbc244>

00087da4 <__mcmp>:
   87da4:	20800417 	ldw	r2,16(r4)
   87da8:	28c00417 	ldw	r3,16(r5)
   87dac:	10c5c83a 	sub	r2,r2,r3
   87db0:	1000111e 	bne	r2,zero,87df8 <__mcmp+0x54>
   87db4:	18c7883a 	add	r3,r3,r3
   87db8:	18c7883a 	add	r3,r3,r3
   87dbc:	21000504 	addi	r4,r4,20
   87dc0:	29400504 	addi	r5,r5,20
   87dc4:	20c5883a 	add	r2,r4,r3
   87dc8:	28cb883a 	add	r5,r5,r3
   87dcc:	00000106 	br	87dd4 <__mcmp+0x30>
   87dd0:	20800a2e 	bgeu	r4,r2,87dfc <__mcmp+0x58>
   87dd4:	10bfff04 	addi	r2,r2,-4
   87dd8:	297fff04 	addi	r5,r5,-4
   87ddc:	11800017 	ldw	r6,0(r2)
   87de0:	28c00017 	ldw	r3,0(r5)
   87de4:	30fffa26 	beq	r6,r3,87dd0 <__alt_data_end+0xfffbc2e0>
   87de8:	30c00236 	bltu	r6,r3,87df4 <__mcmp+0x50>
   87dec:	00800044 	movi	r2,1
   87df0:	f800283a 	ret
   87df4:	00bfffc4 	movi	r2,-1
   87df8:	f800283a 	ret
   87dfc:	0005883a 	mov	r2,zero
   87e00:	f800283a 	ret

00087e04 <__mdiff>:
   87e04:	28c00417 	ldw	r3,16(r5)
   87e08:	30800417 	ldw	r2,16(r6)
   87e0c:	defffa04 	addi	sp,sp,-24
   87e10:	dcc00315 	stw	r19,12(sp)
   87e14:	dc800215 	stw	r18,8(sp)
   87e18:	dfc00515 	stw	ra,20(sp)
   87e1c:	dd000415 	stw	r20,16(sp)
   87e20:	dc400115 	stw	r17,4(sp)
   87e24:	dc000015 	stw	r16,0(sp)
   87e28:	1887c83a 	sub	r3,r3,r2
   87e2c:	2825883a 	mov	r18,r5
   87e30:	3027883a 	mov	r19,r6
   87e34:	1800141e 	bne	r3,zero,87e88 <__mdiff+0x84>
   87e38:	1085883a 	add	r2,r2,r2
   87e3c:	1085883a 	add	r2,r2,r2
   87e40:	2a000504 	addi	r8,r5,20
   87e44:	34000504 	addi	r16,r6,20
   87e48:	4087883a 	add	r3,r8,r2
   87e4c:	8085883a 	add	r2,r16,r2
   87e50:	00000106 	br	87e58 <__mdiff+0x54>
   87e54:	40c0592e 	bgeu	r8,r3,87fbc <__mdiff+0x1b8>
   87e58:	18ffff04 	addi	r3,r3,-4
   87e5c:	10bfff04 	addi	r2,r2,-4
   87e60:	19c00017 	ldw	r7,0(r3)
   87e64:	11400017 	ldw	r5,0(r2)
   87e68:	397ffa26 	beq	r7,r5,87e54 <__alt_data_end+0xfffbc364>
   87e6c:	3940592e 	bgeu	r7,r5,87fd4 <__mdiff+0x1d0>
   87e70:	9005883a 	mov	r2,r18
   87e74:	4023883a 	mov	r17,r8
   87e78:	9825883a 	mov	r18,r19
   87e7c:	05000044 	movi	r20,1
   87e80:	1027883a 	mov	r19,r2
   87e84:	00000406 	br	87e98 <__mdiff+0x94>
   87e88:	18005616 	blt	r3,zero,87fe4 <__mdiff+0x1e0>
   87e8c:	34400504 	addi	r17,r6,20
   87e90:	2c000504 	addi	r16,r5,20
   87e94:	0029883a 	mov	r20,zero
   87e98:	91400117 	ldw	r5,4(r18)
   87e9c:	00874dc0 	call	874dc <_Balloc>
   87ea0:	92400417 	ldw	r9,16(r18)
   87ea4:	9b000417 	ldw	r12,16(r19)
   87ea8:	12c00504 	addi	r11,r2,20
   87eac:	4a51883a 	add	r8,r9,r9
   87eb0:	6319883a 	add	r12,r12,r12
   87eb4:	4211883a 	add	r8,r8,r8
   87eb8:	6319883a 	add	r12,r12,r12
   87ebc:	15000315 	stw	r20,12(r2)
   87ec0:	8211883a 	add	r8,r16,r8
   87ec4:	8b19883a 	add	r12,r17,r12
   87ec8:	0007883a 	mov	r3,zero
   87ecc:	81400017 	ldw	r5,0(r16)
   87ed0:	89c00017 	ldw	r7,0(r17)
   87ed4:	59800104 	addi	r6,r11,4
   87ed8:	293fffcc 	andi	r4,r5,65535
   87edc:	20c7883a 	add	r3,r4,r3
   87ee0:	393fffcc 	andi	r4,r7,65535
   87ee4:	1909c83a 	sub	r4,r3,r4
   87ee8:	280ad43a 	srli	r5,r5,16
   87eec:	380ed43a 	srli	r7,r7,16
   87ef0:	2007d43a 	srai	r3,r4,16
   87ef4:	213fffcc 	andi	r4,r4,65535
   87ef8:	29cbc83a 	sub	r5,r5,r7
   87efc:	28c7883a 	add	r3,r5,r3
   87f00:	180a943a 	slli	r5,r3,16
   87f04:	8c400104 	addi	r17,r17,4
   87f08:	84000104 	addi	r16,r16,4
   87f0c:	2908b03a 	or	r4,r5,r4
   87f10:	59000015 	stw	r4,0(r11)
   87f14:	1807d43a 	srai	r3,r3,16
   87f18:	3015883a 	mov	r10,r6
   87f1c:	3017883a 	mov	r11,r6
   87f20:	8b3fea36 	bltu	r17,r12,87ecc <__alt_data_end+0xfffbc3dc>
   87f24:	8200162e 	bgeu	r16,r8,87f80 <__mdiff+0x17c>
   87f28:	8017883a 	mov	r11,r16
   87f2c:	59400017 	ldw	r5,0(r11)
   87f30:	31800104 	addi	r6,r6,4
   87f34:	5ac00104 	addi	r11,r11,4
   87f38:	293fffcc 	andi	r4,r5,65535
   87f3c:	20c7883a 	add	r3,r4,r3
   87f40:	280ed43a 	srli	r7,r5,16
   87f44:	180bd43a 	srai	r5,r3,16
   87f48:	193fffcc 	andi	r4,r3,65535
   87f4c:	3947883a 	add	r3,r7,r5
   87f50:	180a943a 	slli	r5,r3,16
   87f54:	1807d43a 	srai	r3,r3,16
   87f58:	2908b03a 	or	r4,r5,r4
   87f5c:	313fff15 	stw	r4,-4(r6)
   87f60:	5a3ff236 	bltu	r11,r8,87f2c <__alt_data_end+0xfffbc43c>
   87f64:	0406303a 	nor	r3,zero,r16
   87f68:	1a07883a 	add	r3,r3,r8
   87f6c:	1806d0ba 	srli	r3,r3,2
   87f70:	18c00044 	addi	r3,r3,1
   87f74:	18c7883a 	add	r3,r3,r3
   87f78:	18c7883a 	add	r3,r3,r3
   87f7c:	50d5883a 	add	r10,r10,r3
   87f80:	50ffff04 	addi	r3,r10,-4
   87f84:	2000041e 	bne	r4,zero,87f98 <__mdiff+0x194>
   87f88:	18ffff04 	addi	r3,r3,-4
   87f8c:	19000017 	ldw	r4,0(r3)
   87f90:	4a7fffc4 	addi	r9,r9,-1
   87f94:	203ffc26 	beq	r4,zero,87f88 <__alt_data_end+0xfffbc498>
   87f98:	12400415 	stw	r9,16(r2)
   87f9c:	dfc00517 	ldw	ra,20(sp)
   87fa0:	dd000417 	ldw	r20,16(sp)
   87fa4:	dcc00317 	ldw	r19,12(sp)
   87fa8:	dc800217 	ldw	r18,8(sp)
   87fac:	dc400117 	ldw	r17,4(sp)
   87fb0:	dc000017 	ldw	r16,0(sp)
   87fb4:	dec00604 	addi	sp,sp,24
   87fb8:	f800283a 	ret
   87fbc:	000b883a 	mov	r5,zero
   87fc0:	00874dc0 	call	874dc <_Balloc>
   87fc4:	00c00044 	movi	r3,1
   87fc8:	10c00415 	stw	r3,16(r2)
   87fcc:	10000515 	stw	zero,20(r2)
   87fd0:	003ff206 	br	87f9c <__alt_data_end+0xfffbc4ac>
   87fd4:	8023883a 	mov	r17,r16
   87fd8:	0029883a 	mov	r20,zero
   87fdc:	4021883a 	mov	r16,r8
   87fe0:	003fad06 	br	87e98 <__alt_data_end+0xfffbc3a8>
   87fe4:	9005883a 	mov	r2,r18
   87fe8:	94400504 	addi	r17,r18,20
   87fec:	9c000504 	addi	r16,r19,20
   87ff0:	9825883a 	mov	r18,r19
   87ff4:	05000044 	movi	r20,1
   87ff8:	1027883a 	mov	r19,r2
   87ffc:	003fa606 	br	87e98 <__alt_data_end+0xfffbc3a8>

00088000 <__ulp>:
   88000:	295ffc2c 	andhi	r5,r5,32752
   88004:	00bf3034 	movhi	r2,64704
   88008:	2887883a 	add	r3,r5,r2
   8800c:	00c0020e 	bge	zero,r3,88018 <__ulp+0x18>
   88010:	0005883a 	mov	r2,zero
   88014:	f800283a 	ret
   88018:	00c7c83a 	sub	r3,zero,r3
   8801c:	1807d53a 	srai	r3,r3,20
   88020:	008004c4 	movi	r2,19
   88024:	10c00b0e 	bge	r2,r3,88054 <__ulp+0x54>
   88028:	18bffb04 	addi	r2,r3,-20
   8802c:	01000784 	movi	r4,30
   88030:	0007883a 	mov	r3,zero
   88034:	20800516 	blt	r4,r2,8804c <__ulp+0x4c>
   88038:	010007c4 	movi	r4,31
   8803c:	2089c83a 	sub	r4,r4,r2
   88040:	00800044 	movi	r2,1
   88044:	1104983a 	sll	r2,r2,r4
   88048:	f800283a 	ret
   8804c:	00800044 	movi	r2,1
   88050:	f800283a 	ret
   88054:	01400234 	movhi	r5,8
   88058:	28c7d83a 	sra	r3,r5,r3
   8805c:	0005883a 	mov	r2,zero
   88060:	f800283a 	ret

00088064 <__b2d>:
   88064:	defffa04 	addi	sp,sp,-24
   88068:	dc000015 	stw	r16,0(sp)
   8806c:	24000417 	ldw	r16,16(r4)
   88070:	dc400115 	stw	r17,4(sp)
   88074:	24400504 	addi	r17,r4,20
   88078:	8421883a 	add	r16,r16,r16
   8807c:	8421883a 	add	r16,r16,r16
   88080:	8c21883a 	add	r16,r17,r16
   88084:	dc800215 	stw	r18,8(sp)
   88088:	84bfff17 	ldw	r18,-4(r16)
   8808c:	dd000415 	stw	r20,16(sp)
   88090:	dcc00315 	stw	r19,12(sp)
   88094:	9009883a 	mov	r4,r18
   88098:	2829883a 	mov	r20,r5
   8809c:	dfc00515 	stw	ra,20(sp)
   880a0:	00877d00 	call	877d0 <__hi0bits>
   880a4:	00c00804 	movi	r3,32
   880a8:	1889c83a 	sub	r4,r3,r2
   880ac:	a1000015 	stw	r4,0(r20)
   880b0:	01000284 	movi	r4,10
   880b4:	84ffff04 	addi	r19,r16,-4
   880b8:	20801216 	blt	r4,r2,88104 <__b2d+0xa0>
   880bc:	018002c4 	movi	r6,11
   880c0:	308dc83a 	sub	r6,r6,r2
   880c4:	9186d83a 	srl	r3,r18,r6
   880c8:	18cffc34 	orhi	r3,r3,16368
   880cc:	8cc0212e 	bgeu	r17,r19,88154 <__b2d+0xf0>
   880d0:	813ffe17 	ldw	r4,-8(r16)
   880d4:	218cd83a 	srl	r6,r4,r6
   880d8:	10800544 	addi	r2,r2,21
   880dc:	9084983a 	sll	r2,r18,r2
   880e0:	1184b03a 	or	r2,r2,r6
   880e4:	dfc00517 	ldw	ra,20(sp)
   880e8:	dd000417 	ldw	r20,16(sp)
   880ec:	dcc00317 	ldw	r19,12(sp)
   880f0:	dc800217 	ldw	r18,8(sp)
   880f4:	dc400117 	ldw	r17,4(sp)
   880f8:	dc000017 	ldw	r16,0(sp)
   880fc:	dec00604 	addi	sp,sp,24
   88100:	f800283a 	ret
   88104:	8cc00f2e 	bgeu	r17,r19,88144 <__b2d+0xe0>
   88108:	117ffd44 	addi	r5,r2,-11
   8810c:	80bffe17 	ldw	r2,-8(r16)
   88110:	28000e26 	beq	r5,zero,8814c <__b2d+0xe8>
   88114:	1949c83a 	sub	r4,r3,r5
   88118:	9164983a 	sll	r18,r18,r5
   8811c:	1106d83a 	srl	r3,r2,r4
   88120:	81bffe04 	addi	r6,r16,-8
   88124:	948ffc34 	orhi	r18,r18,16368
   88128:	90c6b03a 	or	r3,r18,r3
   8812c:	89800e2e 	bgeu	r17,r6,88168 <__b2d+0x104>
   88130:	81bffd17 	ldw	r6,-12(r16)
   88134:	1144983a 	sll	r2,r2,r5
   88138:	310ad83a 	srl	r5,r6,r4
   8813c:	2884b03a 	or	r2,r5,r2
   88140:	003fe806 	br	880e4 <__alt_data_end+0xfffbc5f4>
   88144:	10bffd44 	addi	r2,r2,-11
   88148:	1000041e 	bne	r2,zero,8815c <__b2d+0xf8>
   8814c:	90cffc34 	orhi	r3,r18,16368
   88150:	003fe406 	br	880e4 <__alt_data_end+0xfffbc5f4>
   88154:	000d883a 	mov	r6,zero
   88158:	003fdf06 	br	880d8 <__alt_data_end+0xfffbc5e8>
   8815c:	90a4983a 	sll	r18,r18,r2
   88160:	0005883a 	mov	r2,zero
   88164:	003ff906 	br	8814c <__alt_data_end+0xfffbc65c>
   88168:	1144983a 	sll	r2,r2,r5
   8816c:	003fdd06 	br	880e4 <__alt_data_end+0xfffbc5f4>

00088170 <__d2b>:
   88170:	defff804 	addi	sp,sp,-32
   88174:	dc000215 	stw	r16,8(sp)
   88178:	3021883a 	mov	r16,r6
   8817c:	dc400315 	stw	r17,12(sp)
   88180:	8022907a 	slli	r17,r16,1
   88184:	dd000615 	stw	r20,24(sp)
   88188:	2829883a 	mov	r20,r5
   8818c:	01400044 	movi	r5,1
   88190:	dcc00515 	stw	r19,20(sp)
   88194:	dc800415 	stw	r18,16(sp)
   88198:	dfc00715 	stw	ra,28(sp)
   8819c:	3825883a 	mov	r18,r7
   881a0:	8822d57a 	srli	r17,r17,21
   881a4:	00874dc0 	call	874dc <_Balloc>
   881a8:	1027883a 	mov	r19,r2
   881ac:	00800434 	movhi	r2,16
   881b0:	10bfffc4 	addi	r2,r2,-1
   881b4:	808c703a 	and	r6,r16,r2
   881b8:	88000126 	beq	r17,zero,881c0 <__d2b+0x50>
   881bc:	31800434 	orhi	r6,r6,16
   881c0:	d9800015 	stw	r6,0(sp)
   881c4:	a0002426 	beq	r20,zero,88258 <__d2b+0xe8>
   881c8:	d9000104 	addi	r4,sp,4
   881cc:	dd000115 	stw	r20,4(sp)
   881d0:	00878380 	call	87838 <__lo0bits>
   881d4:	d8c00017 	ldw	r3,0(sp)
   881d8:	10002f1e 	bne	r2,zero,88298 <__d2b+0x128>
   881dc:	d9000117 	ldw	r4,4(sp)
   881e0:	99000515 	stw	r4,20(r19)
   881e4:	1821003a 	cmpeq	r16,r3,zero
   881e8:	01000084 	movi	r4,2
   881ec:	2421c83a 	sub	r16,r4,r16
   881f0:	98c00615 	stw	r3,24(r19)
   881f4:	9c000415 	stw	r16,16(r19)
   881f8:	88001f1e 	bne	r17,zero,88278 <__d2b+0x108>
   881fc:	10bef384 	addi	r2,r2,-1074
   88200:	90800015 	stw	r2,0(r18)
   88204:	00900034 	movhi	r2,16384
   88208:	10bfffc4 	addi	r2,r2,-1
   8820c:	8085883a 	add	r2,r16,r2
   88210:	1085883a 	add	r2,r2,r2
   88214:	1085883a 	add	r2,r2,r2
   88218:	9885883a 	add	r2,r19,r2
   8821c:	11000517 	ldw	r4,20(r2)
   88220:	8020917a 	slli	r16,r16,5
   88224:	00877d00 	call	877d0 <__hi0bits>
   88228:	d8c00817 	ldw	r3,32(sp)
   8822c:	8085c83a 	sub	r2,r16,r2
   88230:	18800015 	stw	r2,0(r3)
   88234:	9805883a 	mov	r2,r19
   88238:	dfc00717 	ldw	ra,28(sp)
   8823c:	dd000617 	ldw	r20,24(sp)
   88240:	dcc00517 	ldw	r19,20(sp)
   88244:	dc800417 	ldw	r18,16(sp)
   88248:	dc400317 	ldw	r17,12(sp)
   8824c:	dc000217 	ldw	r16,8(sp)
   88250:	dec00804 	addi	sp,sp,32
   88254:	f800283a 	ret
   88258:	d809883a 	mov	r4,sp
   8825c:	00878380 	call	87838 <__lo0bits>
   88260:	d8c00017 	ldw	r3,0(sp)
   88264:	04000044 	movi	r16,1
   88268:	9c000415 	stw	r16,16(r19)
   8826c:	98c00515 	stw	r3,20(r19)
   88270:	10800804 	addi	r2,r2,32
   88274:	883fe126 	beq	r17,zero,881fc <__alt_data_end+0xfffbc70c>
   88278:	00c00d44 	movi	r3,53
   8827c:	8c7ef344 	addi	r17,r17,-1075
   88280:	88a3883a 	add	r17,r17,r2
   88284:	1885c83a 	sub	r2,r3,r2
   88288:	d8c00817 	ldw	r3,32(sp)
   8828c:	94400015 	stw	r17,0(r18)
   88290:	18800015 	stw	r2,0(r3)
   88294:	003fe706 	br	88234 <__alt_data_end+0xfffbc744>
   88298:	01000804 	movi	r4,32
   8829c:	2089c83a 	sub	r4,r4,r2
   882a0:	1908983a 	sll	r4,r3,r4
   882a4:	d9400117 	ldw	r5,4(sp)
   882a8:	1886d83a 	srl	r3,r3,r2
   882ac:	2148b03a 	or	r4,r4,r5
   882b0:	99000515 	stw	r4,20(r19)
   882b4:	d8c00015 	stw	r3,0(sp)
   882b8:	003fca06 	br	881e4 <__alt_data_end+0xfffbc6f4>

000882bc <__ratio>:
   882bc:	defff904 	addi	sp,sp,-28
   882c0:	dc400315 	stw	r17,12(sp)
   882c4:	2823883a 	mov	r17,r5
   882c8:	d9400104 	addi	r5,sp,4
   882cc:	dfc00615 	stw	ra,24(sp)
   882d0:	dcc00515 	stw	r19,20(sp)
   882d4:	dc800415 	stw	r18,16(sp)
   882d8:	2027883a 	mov	r19,r4
   882dc:	dc000215 	stw	r16,8(sp)
   882e0:	00880640 	call	88064 <__b2d>
   882e4:	d80b883a 	mov	r5,sp
   882e8:	8809883a 	mov	r4,r17
   882ec:	1025883a 	mov	r18,r2
   882f0:	1821883a 	mov	r16,r3
   882f4:	00880640 	call	88064 <__b2d>
   882f8:	8a000417 	ldw	r8,16(r17)
   882fc:	99000417 	ldw	r4,16(r19)
   88300:	d9400117 	ldw	r5,4(sp)
   88304:	2209c83a 	sub	r4,r4,r8
   88308:	2010917a 	slli	r8,r4,5
   8830c:	d9000017 	ldw	r4,0(sp)
   88310:	2909c83a 	sub	r4,r5,r4
   88314:	4109883a 	add	r4,r8,r4
   88318:	01000e0e 	bge	zero,r4,88354 <__ratio+0x98>
   8831c:	2008953a 	slli	r4,r4,20
   88320:	2421883a 	add	r16,r4,r16
   88324:	100d883a 	mov	r6,r2
   88328:	180f883a 	mov	r7,r3
   8832c:	9009883a 	mov	r4,r18
   88330:	800b883a 	mov	r5,r16
   88334:	008c0540 	call	8c054 <__divdf3>
   88338:	dfc00617 	ldw	ra,24(sp)
   8833c:	dcc00517 	ldw	r19,20(sp)
   88340:	dc800417 	ldw	r18,16(sp)
   88344:	dc400317 	ldw	r17,12(sp)
   88348:	dc000217 	ldw	r16,8(sp)
   8834c:	dec00704 	addi	sp,sp,28
   88350:	f800283a 	ret
   88354:	2008953a 	slli	r4,r4,20
   88358:	1907c83a 	sub	r3,r3,r4
   8835c:	003ff106 	br	88324 <__alt_data_end+0xfffbc834>

00088360 <_mprec_log10>:
   88360:	defffe04 	addi	sp,sp,-8
   88364:	dc000015 	stw	r16,0(sp)
   88368:	dfc00115 	stw	ra,4(sp)
   8836c:	008005c4 	movi	r2,23
   88370:	2021883a 	mov	r16,r4
   88374:	11000d0e 	bge	r2,r4,883ac <_mprec_log10+0x4c>
   88378:	0005883a 	mov	r2,zero
   8837c:	00cffc34 	movhi	r3,16368
   88380:	843fffc4 	addi	r16,r16,-1
   88384:	000d883a 	mov	r6,zero
   88388:	01d00934 	movhi	r7,16420
   8838c:	1009883a 	mov	r4,r2
   88390:	180b883a 	mov	r5,r3
   88394:	008cb940 	call	8cb94 <__muldf3>
   88398:	803ff91e 	bne	r16,zero,88380 <__alt_data_end+0xfffbc890>
   8839c:	dfc00117 	ldw	ra,4(sp)
   883a0:	dc000017 	ldw	r16,0(sp)
   883a4:	dec00204 	addi	sp,sp,8
   883a8:	f800283a 	ret
   883ac:	202090fa 	slli	r16,r4,3
   883b0:	00800274 	movhi	r2,9
   883b4:	1082dc04 	addi	r2,r2,2928
   883b8:	1421883a 	add	r16,r2,r16
   883bc:	80800017 	ldw	r2,0(r16)
   883c0:	80c00117 	ldw	r3,4(r16)
   883c4:	dfc00117 	ldw	ra,4(sp)
   883c8:	dc000017 	ldw	r16,0(sp)
   883cc:	dec00204 	addi	sp,sp,8
   883d0:	f800283a 	ret

000883d4 <__copybits>:
   883d4:	297fffc4 	addi	r5,r5,-1
   883d8:	280fd17a 	srai	r7,r5,5
   883dc:	30c00417 	ldw	r3,16(r6)
   883e0:	30800504 	addi	r2,r6,20
   883e4:	39c00044 	addi	r7,r7,1
   883e8:	18c7883a 	add	r3,r3,r3
   883ec:	39cf883a 	add	r7,r7,r7
   883f0:	18c7883a 	add	r3,r3,r3
   883f4:	39cf883a 	add	r7,r7,r7
   883f8:	10c7883a 	add	r3,r2,r3
   883fc:	21cf883a 	add	r7,r4,r7
   88400:	10c00d2e 	bgeu	r2,r3,88438 <__copybits+0x64>
   88404:	200b883a 	mov	r5,r4
   88408:	12000017 	ldw	r8,0(r2)
   8840c:	29400104 	addi	r5,r5,4
   88410:	10800104 	addi	r2,r2,4
   88414:	2a3fff15 	stw	r8,-4(r5)
   88418:	10fffb36 	bltu	r2,r3,88408 <__alt_data_end+0xfffbc918>
   8841c:	1985c83a 	sub	r2,r3,r6
   88420:	10bffac4 	addi	r2,r2,-21
   88424:	1004d0ba 	srli	r2,r2,2
   88428:	10800044 	addi	r2,r2,1
   8842c:	1085883a 	add	r2,r2,r2
   88430:	1085883a 	add	r2,r2,r2
   88434:	2089883a 	add	r4,r4,r2
   88438:	21c0032e 	bgeu	r4,r7,88448 <__copybits+0x74>
   8843c:	20000015 	stw	zero,0(r4)
   88440:	21000104 	addi	r4,r4,4
   88444:	21fffd36 	bltu	r4,r7,8843c <__alt_data_end+0xfffbc94c>
   88448:	f800283a 	ret

0008844c <__any_on>:
   8844c:	20c00417 	ldw	r3,16(r4)
   88450:	2805d17a 	srai	r2,r5,5
   88454:	21000504 	addi	r4,r4,20
   88458:	18800d0e 	bge	r3,r2,88490 <__any_on+0x44>
   8845c:	18c7883a 	add	r3,r3,r3
   88460:	18c7883a 	add	r3,r3,r3
   88464:	20c7883a 	add	r3,r4,r3
   88468:	20c0192e 	bgeu	r4,r3,884d0 <__any_on+0x84>
   8846c:	18bfff17 	ldw	r2,-4(r3)
   88470:	18ffff04 	addi	r3,r3,-4
   88474:	1000041e 	bne	r2,zero,88488 <__any_on+0x3c>
   88478:	20c0142e 	bgeu	r4,r3,884cc <__any_on+0x80>
   8847c:	18ffff04 	addi	r3,r3,-4
   88480:	19400017 	ldw	r5,0(r3)
   88484:	283ffc26 	beq	r5,zero,88478 <__alt_data_end+0xfffbc988>
   88488:	00800044 	movi	r2,1
   8848c:	f800283a 	ret
   88490:	10c00a0e 	bge	r2,r3,884bc <__any_on+0x70>
   88494:	1085883a 	add	r2,r2,r2
   88498:	1085883a 	add	r2,r2,r2
   8849c:	294007cc 	andi	r5,r5,31
   884a0:	2087883a 	add	r3,r4,r2
   884a4:	283ff026 	beq	r5,zero,88468 <__alt_data_end+0xfffbc978>
   884a8:	19800017 	ldw	r6,0(r3)
   884ac:	3144d83a 	srl	r2,r6,r5
   884b0:	114a983a 	sll	r5,r2,r5
   884b4:	317ff41e 	bne	r6,r5,88488 <__alt_data_end+0xfffbc998>
   884b8:	003feb06 	br	88468 <__alt_data_end+0xfffbc978>
   884bc:	1085883a 	add	r2,r2,r2
   884c0:	1085883a 	add	r2,r2,r2
   884c4:	2087883a 	add	r3,r4,r2
   884c8:	003fe706 	br	88468 <__alt_data_end+0xfffbc978>
   884cc:	f800283a 	ret
   884d0:	0005883a 	mov	r2,zero
   884d4:	f800283a 	ret

000884d8 <_realloc_r>:
   884d8:	defff604 	addi	sp,sp,-40
   884dc:	dc800215 	stw	r18,8(sp)
   884e0:	dfc00915 	stw	ra,36(sp)
   884e4:	df000815 	stw	fp,32(sp)
   884e8:	ddc00715 	stw	r23,28(sp)
   884ec:	dd800615 	stw	r22,24(sp)
   884f0:	dd400515 	stw	r21,20(sp)
   884f4:	dd000415 	stw	r20,16(sp)
   884f8:	dcc00315 	stw	r19,12(sp)
   884fc:	dc400115 	stw	r17,4(sp)
   88500:	dc000015 	stw	r16,0(sp)
   88504:	3025883a 	mov	r18,r6
   88508:	2800b726 	beq	r5,zero,887e8 <_realloc_r+0x310>
   8850c:	282b883a 	mov	r21,r5
   88510:	2029883a 	mov	r20,r4
   88514:	008e9a00 	call	8e9a0 <__malloc_lock>
   88518:	a8bfff17 	ldw	r2,-4(r21)
   8851c:	043fff04 	movi	r16,-4
   88520:	90c002c4 	addi	r3,r18,11
   88524:	01000584 	movi	r4,22
   88528:	acfffe04 	addi	r19,r21,-8
   8852c:	1420703a 	and	r16,r2,r16
   88530:	20c0332e 	bgeu	r4,r3,88600 <_realloc_r+0x128>
   88534:	047ffe04 	movi	r17,-8
   88538:	1c62703a 	and	r17,r3,r17
   8853c:	8807883a 	mov	r3,r17
   88540:	88005816 	blt	r17,zero,886a4 <_realloc_r+0x1cc>
   88544:	8c805736 	bltu	r17,r18,886a4 <_realloc_r+0x1cc>
   88548:	80c0300e 	bge	r16,r3,8860c <_realloc_r+0x134>
   8854c:	07000274 	movhi	fp,9
   88550:	e704b504 	addi	fp,fp,4820
   88554:	e1c00217 	ldw	r7,8(fp)
   88558:	9c09883a 	add	r4,r19,r16
   8855c:	22000117 	ldw	r8,4(r4)
   88560:	21c06326 	beq	r4,r7,886f0 <_realloc_r+0x218>
   88564:	017fff84 	movi	r5,-2
   88568:	414a703a 	and	r5,r8,r5
   8856c:	214b883a 	add	r5,r4,r5
   88570:	29800117 	ldw	r6,4(r5)
   88574:	3180004c 	andi	r6,r6,1
   88578:	30003f26 	beq	r6,zero,88678 <_realloc_r+0x1a0>
   8857c:	1080004c 	andi	r2,r2,1
   88580:	10008326 	beq	r2,zero,88790 <_realloc_r+0x2b8>
   88584:	900b883a 	mov	r5,r18
   88588:	a009883a 	mov	r4,r20
   8858c:	00868200 	call	86820 <_malloc_r>
   88590:	1025883a 	mov	r18,r2
   88594:	10011e26 	beq	r2,zero,88a10 <_realloc_r+0x538>
   88598:	a93fff17 	ldw	r4,-4(r21)
   8859c:	10fffe04 	addi	r3,r2,-8
   885a0:	00bfff84 	movi	r2,-2
   885a4:	2084703a 	and	r2,r4,r2
   885a8:	9885883a 	add	r2,r19,r2
   885ac:	1880ee26 	beq	r3,r2,88968 <_realloc_r+0x490>
   885b0:	81bfff04 	addi	r6,r16,-4
   885b4:	00800904 	movi	r2,36
   885b8:	1180b836 	bltu	r2,r6,8889c <_realloc_r+0x3c4>
   885bc:	00c004c4 	movi	r3,19
   885c0:	19809636 	bltu	r3,r6,8881c <_realloc_r+0x344>
   885c4:	9005883a 	mov	r2,r18
   885c8:	a807883a 	mov	r3,r21
   885cc:	19000017 	ldw	r4,0(r3)
   885d0:	11000015 	stw	r4,0(r2)
   885d4:	19000117 	ldw	r4,4(r3)
   885d8:	11000115 	stw	r4,4(r2)
   885dc:	18c00217 	ldw	r3,8(r3)
   885e0:	10c00215 	stw	r3,8(r2)
   885e4:	a80b883a 	mov	r5,r21
   885e8:	a009883a 	mov	r4,r20
   885ec:	0085bd80 	call	85bd8 <_free_r>
   885f0:	a009883a 	mov	r4,r20
   885f4:	008e9c40 	call	8e9c4 <__malloc_unlock>
   885f8:	9005883a 	mov	r2,r18
   885fc:	00001206 	br	88648 <_realloc_r+0x170>
   88600:	00c00404 	movi	r3,16
   88604:	1823883a 	mov	r17,r3
   88608:	003fce06 	br	88544 <__alt_data_end+0xfffbca54>
   8860c:	a825883a 	mov	r18,r21
   88610:	8445c83a 	sub	r2,r16,r17
   88614:	00c003c4 	movi	r3,15
   88618:	18802636 	bltu	r3,r2,886b4 <_realloc_r+0x1dc>
   8861c:	99800117 	ldw	r6,4(r19)
   88620:	9c07883a 	add	r3,r19,r16
   88624:	3180004c 	andi	r6,r6,1
   88628:	3420b03a 	or	r16,r6,r16
   8862c:	9c000115 	stw	r16,4(r19)
   88630:	18800117 	ldw	r2,4(r3)
   88634:	10800054 	ori	r2,r2,1
   88638:	18800115 	stw	r2,4(r3)
   8863c:	a009883a 	mov	r4,r20
   88640:	008e9c40 	call	8e9c4 <__malloc_unlock>
   88644:	9005883a 	mov	r2,r18
   88648:	dfc00917 	ldw	ra,36(sp)
   8864c:	df000817 	ldw	fp,32(sp)
   88650:	ddc00717 	ldw	r23,28(sp)
   88654:	dd800617 	ldw	r22,24(sp)
   88658:	dd400517 	ldw	r21,20(sp)
   8865c:	dd000417 	ldw	r20,16(sp)
   88660:	dcc00317 	ldw	r19,12(sp)
   88664:	dc800217 	ldw	r18,8(sp)
   88668:	dc400117 	ldw	r17,4(sp)
   8866c:	dc000017 	ldw	r16,0(sp)
   88670:	dec00a04 	addi	sp,sp,40
   88674:	f800283a 	ret
   88678:	017fff04 	movi	r5,-4
   8867c:	414a703a 	and	r5,r8,r5
   88680:	814d883a 	add	r6,r16,r5
   88684:	30c01f16 	blt	r6,r3,88704 <_realloc_r+0x22c>
   88688:	20800317 	ldw	r2,12(r4)
   8868c:	20c00217 	ldw	r3,8(r4)
   88690:	a825883a 	mov	r18,r21
   88694:	3021883a 	mov	r16,r6
   88698:	18800315 	stw	r2,12(r3)
   8869c:	10c00215 	stw	r3,8(r2)
   886a0:	003fdb06 	br	88610 <__alt_data_end+0xfffbcb20>
   886a4:	00800304 	movi	r2,12
   886a8:	a0800015 	stw	r2,0(r20)
   886ac:	0005883a 	mov	r2,zero
   886b0:	003fe506 	br	88648 <__alt_data_end+0xfffbcb58>
   886b4:	98c00117 	ldw	r3,4(r19)
   886b8:	9c4b883a 	add	r5,r19,r17
   886bc:	11000054 	ori	r4,r2,1
   886c0:	18c0004c 	andi	r3,r3,1
   886c4:	1c62b03a 	or	r17,r3,r17
   886c8:	9c400115 	stw	r17,4(r19)
   886cc:	29000115 	stw	r4,4(r5)
   886d0:	2885883a 	add	r2,r5,r2
   886d4:	10c00117 	ldw	r3,4(r2)
   886d8:	29400204 	addi	r5,r5,8
   886dc:	a009883a 	mov	r4,r20
   886e0:	18c00054 	ori	r3,r3,1
   886e4:	10c00115 	stw	r3,4(r2)
   886e8:	0085bd80 	call	85bd8 <_free_r>
   886ec:	003fd306 	br	8863c <__alt_data_end+0xfffbcb4c>
   886f0:	017fff04 	movi	r5,-4
   886f4:	414a703a 	and	r5,r8,r5
   886f8:	89800404 	addi	r6,r17,16
   886fc:	8151883a 	add	r8,r16,r5
   88700:	4180590e 	bge	r8,r6,88868 <_realloc_r+0x390>
   88704:	1080004c 	andi	r2,r2,1
   88708:	103f9e1e 	bne	r2,zero,88584 <__alt_data_end+0xfffbca94>
   8870c:	adbffe17 	ldw	r22,-8(r21)
   88710:	00bfff04 	movi	r2,-4
   88714:	9dadc83a 	sub	r22,r19,r22
   88718:	b1800117 	ldw	r6,4(r22)
   8871c:	3084703a 	and	r2,r6,r2
   88720:	20002026 	beq	r4,zero,887a4 <_realloc_r+0x2cc>
   88724:	80af883a 	add	r23,r16,r2
   88728:	b96f883a 	add	r23,r23,r5
   8872c:	21c05f26 	beq	r4,r7,888ac <_realloc_r+0x3d4>
   88730:	b8c01c16 	blt	r23,r3,887a4 <_realloc_r+0x2cc>
   88734:	20800317 	ldw	r2,12(r4)
   88738:	20c00217 	ldw	r3,8(r4)
   8873c:	81bfff04 	addi	r6,r16,-4
   88740:	01000904 	movi	r4,36
   88744:	18800315 	stw	r2,12(r3)
   88748:	10c00215 	stw	r3,8(r2)
   8874c:	b0c00217 	ldw	r3,8(r22)
   88750:	b0800317 	ldw	r2,12(r22)
   88754:	b4800204 	addi	r18,r22,8
   88758:	18800315 	stw	r2,12(r3)
   8875c:	10c00215 	stw	r3,8(r2)
   88760:	21801b36 	bltu	r4,r6,887d0 <_realloc_r+0x2f8>
   88764:	008004c4 	movi	r2,19
   88768:	1180352e 	bgeu	r2,r6,88840 <_realloc_r+0x368>
   8876c:	a8800017 	ldw	r2,0(r21)
   88770:	b0800215 	stw	r2,8(r22)
   88774:	a8800117 	ldw	r2,4(r21)
   88778:	b0800315 	stw	r2,12(r22)
   8877c:	008006c4 	movi	r2,27
   88780:	11807f36 	bltu	r2,r6,88980 <_realloc_r+0x4a8>
   88784:	b0800404 	addi	r2,r22,16
   88788:	ad400204 	addi	r21,r21,8
   8878c:	00002d06 	br	88844 <_realloc_r+0x36c>
   88790:	adbffe17 	ldw	r22,-8(r21)
   88794:	00bfff04 	movi	r2,-4
   88798:	9dadc83a 	sub	r22,r19,r22
   8879c:	b1000117 	ldw	r4,4(r22)
   887a0:	2084703a 	and	r2,r4,r2
   887a4:	b03f7726 	beq	r22,zero,88584 <__alt_data_end+0xfffbca94>
   887a8:	80af883a 	add	r23,r16,r2
   887ac:	b8ff7516 	blt	r23,r3,88584 <__alt_data_end+0xfffbca94>
   887b0:	b0800317 	ldw	r2,12(r22)
   887b4:	b0c00217 	ldw	r3,8(r22)
   887b8:	81bfff04 	addi	r6,r16,-4
   887bc:	01000904 	movi	r4,36
   887c0:	18800315 	stw	r2,12(r3)
   887c4:	10c00215 	stw	r3,8(r2)
   887c8:	b4800204 	addi	r18,r22,8
   887cc:	21bfe52e 	bgeu	r4,r6,88764 <__alt_data_end+0xfffbcc74>
   887d0:	a80b883a 	mov	r5,r21
   887d4:	9009883a 	mov	r4,r18
   887d8:	00872580 	call	87258 <memmove>
   887dc:	b821883a 	mov	r16,r23
   887e0:	b027883a 	mov	r19,r22
   887e4:	003f8a06 	br	88610 <__alt_data_end+0xfffbcb20>
   887e8:	300b883a 	mov	r5,r6
   887ec:	dfc00917 	ldw	ra,36(sp)
   887f0:	df000817 	ldw	fp,32(sp)
   887f4:	ddc00717 	ldw	r23,28(sp)
   887f8:	dd800617 	ldw	r22,24(sp)
   887fc:	dd400517 	ldw	r21,20(sp)
   88800:	dd000417 	ldw	r20,16(sp)
   88804:	dcc00317 	ldw	r19,12(sp)
   88808:	dc800217 	ldw	r18,8(sp)
   8880c:	dc400117 	ldw	r17,4(sp)
   88810:	dc000017 	ldw	r16,0(sp)
   88814:	dec00a04 	addi	sp,sp,40
   88818:	00868201 	jmpi	86820 <_malloc_r>
   8881c:	a8c00017 	ldw	r3,0(r21)
   88820:	90c00015 	stw	r3,0(r18)
   88824:	a8c00117 	ldw	r3,4(r21)
   88828:	90c00115 	stw	r3,4(r18)
   8882c:	00c006c4 	movi	r3,27
   88830:	19804536 	bltu	r3,r6,88948 <_realloc_r+0x470>
   88834:	90800204 	addi	r2,r18,8
   88838:	a8c00204 	addi	r3,r21,8
   8883c:	003f6306 	br	885cc <__alt_data_end+0xfffbcadc>
   88840:	9005883a 	mov	r2,r18
   88844:	a8c00017 	ldw	r3,0(r21)
   88848:	b821883a 	mov	r16,r23
   8884c:	b027883a 	mov	r19,r22
   88850:	10c00015 	stw	r3,0(r2)
   88854:	a8c00117 	ldw	r3,4(r21)
   88858:	10c00115 	stw	r3,4(r2)
   8885c:	a8c00217 	ldw	r3,8(r21)
   88860:	10c00215 	stw	r3,8(r2)
   88864:	003f6a06 	br	88610 <__alt_data_end+0xfffbcb20>
   88868:	9c67883a 	add	r19,r19,r17
   8886c:	4445c83a 	sub	r2,r8,r17
   88870:	e4c00215 	stw	r19,8(fp)
   88874:	10800054 	ori	r2,r2,1
   88878:	98800115 	stw	r2,4(r19)
   8887c:	a8bfff17 	ldw	r2,-4(r21)
   88880:	a009883a 	mov	r4,r20
   88884:	1080004c 	andi	r2,r2,1
   88888:	1462b03a 	or	r17,r2,r17
   8888c:	ac7fff15 	stw	r17,-4(r21)
   88890:	008e9c40 	call	8e9c4 <__malloc_unlock>
   88894:	a805883a 	mov	r2,r21
   88898:	003f6b06 	br	88648 <__alt_data_end+0xfffbcb58>
   8889c:	a80b883a 	mov	r5,r21
   888a0:	9009883a 	mov	r4,r18
   888a4:	00872580 	call	87258 <memmove>
   888a8:	003f4e06 	br	885e4 <__alt_data_end+0xfffbcaf4>
   888ac:	89000404 	addi	r4,r17,16
   888b0:	b93fbc16 	blt	r23,r4,887a4 <__alt_data_end+0xfffbccb4>
   888b4:	b0800317 	ldw	r2,12(r22)
   888b8:	b0c00217 	ldw	r3,8(r22)
   888bc:	81bfff04 	addi	r6,r16,-4
   888c0:	01000904 	movi	r4,36
   888c4:	18800315 	stw	r2,12(r3)
   888c8:	10c00215 	stw	r3,8(r2)
   888cc:	b4800204 	addi	r18,r22,8
   888d0:	21804336 	bltu	r4,r6,889e0 <_realloc_r+0x508>
   888d4:	008004c4 	movi	r2,19
   888d8:	11803f2e 	bgeu	r2,r6,889d8 <_realloc_r+0x500>
   888dc:	a8800017 	ldw	r2,0(r21)
   888e0:	b0800215 	stw	r2,8(r22)
   888e4:	a8800117 	ldw	r2,4(r21)
   888e8:	b0800315 	stw	r2,12(r22)
   888ec:	008006c4 	movi	r2,27
   888f0:	11803f36 	bltu	r2,r6,889f0 <_realloc_r+0x518>
   888f4:	b0800404 	addi	r2,r22,16
   888f8:	ad400204 	addi	r21,r21,8
   888fc:	a8c00017 	ldw	r3,0(r21)
   88900:	10c00015 	stw	r3,0(r2)
   88904:	a8c00117 	ldw	r3,4(r21)
   88908:	10c00115 	stw	r3,4(r2)
   8890c:	a8c00217 	ldw	r3,8(r21)
   88910:	10c00215 	stw	r3,8(r2)
   88914:	b447883a 	add	r3,r22,r17
   88918:	bc45c83a 	sub	r2,r23,r17
   8891c:	e0c00215 	stw	r3,8(fp)
   88920:	10800054 	ori	r2,r2,1
   88924:	18800115 	stw	r2,4(r3)
   88928:	b0800117 	ldw	r2,4(r22)
   8892c:	a009883a 	mov	r4,r20
   88930:	1080004c 	andi	r2,r2,1
   88934:	1462b03a 	or	r17,r2,r17
   88938:	b4400115 	stw	r17,4(r22)
   8893c:	008e9c40 	call	8e9c4 <__malloc_unlock>
   88940:	9005883a 	mov	r2,r18
   88944:	003f4006 	br	88648 <__alt_data_end+0xfffbcb58>
   88948:	a8c00217 	ldw	r3,8(r21)
   8894c:	90c00215 	stw	r3,8(r18)
   88950:	a8c00317 	ldw	r3,12(r21)
   88954:	90c00315 	stw	r3,12(r18)
   88958:	30801126 	beq	r6,r2,889a0 <_realloc_r+0x4c8>
   8895c:	90800404 	addi	r2,r18,16
   88960:	a8c00404 	addi	r3,r21,16
   88964:	003f1906 	br	885cc <__alt_data_end+0xfffbcadc>
   88968:	90ffff17 	ldw	r3,-4(r18)
   8896c:	00bfff04 	movi	r2,-4
   88970:	a825883a 	mov	r18,r21
   88974:	1884703a 	and	r2,r3,r2
   88978:	80a1883a 	add	r16,r16,r2
   8897c:	003f2406 	br	88610 <__alt_data_end+0xfffbcb20>
   88980:	a8800217 	ldw	r2,8(r21)
   88984:	b0800415 	stw	r2,16(r22)
   88988:	a8800317 	ldw	r2,12(r21)
   8898c:	b0800515 	stw	r2,20(r22)
   88990:	31000a26 	beq	r6,r4,889bc <_realloc_r+0x4e4>
   88994:	b0800604 	addi	r2,r22,24
   88998:	ad400404 	addi	r21,r21,16
   8899c:	003fa906 	br	88844 <__alt_data_end+0xfffbcd54>
   889a0:	a9000417 	ldw	r4,16(r21)
   889a4:	90800604 	addi	r2,r18,24
   889a8:	a8c00604 	addi	r3,r21,24
   889ac:	91000415 	stw	r4,16(r18)
   889b0:	a9000517 	ldw	r4,20(r21)
   889b4:	91000515 	stw	r4,20(r18)
   889b8:	003f0406 	br	885cc <__alt_data_end+0xfffbcadc>
   889bc:	a8c00417 	ldw	r3,16(r21)
   889c0:	ad400604 	addi	r21,r21,24
   889c4:	b0800804 	addi	r2,r22,32
   889c8:	b0c00615 	stw	r3,24(r22)
   889cc:	a8ffff17 	ldw	r3,-4(r21)
   889d0:	b0c00715 	stw	r3,28(r22)
   889d4:	003f9b06 	br	88844 <__alt_data_end+0xfffbcd54>
   889d8:	9005883a 	mov	r2,r18
   889dc:	003fc706 	br	888fc <__alt_data_end+0xfffbce0c>
   889e0:	a80b883a 	mov	r5,r21
   889e4:	9009883a 	mov	r4,r18
   889e8:	00872580 	call	87258 <memmove>
   889ec:	003fc906 	br	88914 <__alt_data_end+0xfffbce24>
   889f0:	a8800217 	ldw	r2,8(r21)
   889f4:	b0800415 	stw	r2,16(r22)
   889f8:	a8800317 	ldw	r2,12(r21)
   889fc:	b0800515 	stw	r2,20(r22)
   88a00:	31000726 	beq	r6,r4,88a20 <_realloc_r+0x548>
   88a04:	b0800604 	addi	r2,r22,24
   88a08:	ad400404 	addi	r21,r21,16
   88a0c:	003fbb06 	br	888fc <__alt_data_end+0xfffbce0c>
   88a10:	a009883a 	mov	r4,r20
   88a14:	008e9c40 	call	8e9c4 <__malloc_unlock>
   88a18:	0005883a 	mov	r2,zero
   88a1c:	003f0a06 	br	88648 <__alt_data_end+0xfffbcb58>
   88a20:	a8c00417 	ldw	r3,16(r21)
   88a24:	ad400604 	addi	r21,r21,24
   88a28:	b0800804 	addi	r2,r22,32
   88a2c:	b0c00615 	stw	r3,24(r22)
   88a30:	a8ffff17 	ldw	r3,-4(r21)
   88a34:	b0c00715 	stw	r3,28(r22)
   88a38:	003fb006 	br	888fc <__alt_data_end+0xfffbce0c>

00088a3c <__fpclassifyd>:
   88a3c:	00a00034 	movhi	r2,32768
   88a40:	10bfffc4 	addi	r2,r2,-1
   88a44:	2884703a 	and	r2,r5,r2
   88a48:	10000726 	beq	r2,zero,88a68 <__fpclassifyd+0x2c>
   88a4c:	00fffc34 	movhi	r3,65520
   88a50:	019ff834 	movhi	r6,32736
   88a54:	28c7883a 	add	r3,r5,r3
   88a58:	31bfffc4 	addi	r6,r6,-1
   88a5c:	30c00536 	bltu	r6,r3,88a74 <__fpclassifyd+0x38>
   88a60:	00800104 	movi	r2,4
   88a64:	f800283a 	ret
   88a68:	2000021e 	bne	r4,zero,88a74 <__fpclassifyd+0x38>
   88a6c:	00800084 	movi	r2,2
   88a70:	f800283a 	ret
   88a74:	00dffc34 	movhi	r3,32752
   88a78:	019ff834 	movhi	r6,32736
   88a7c:	28cb883a 	add	r5,r5,r3
   88a80:	31bfffc4 	addi	r6,r6,-1
   88a84:	317ff62e 	bgeu	r6,r5,88a60 <__alt_data_end+0xfffbcf70>
   88a88:	01400434 	movhi	r5,16
   88a8c:	297fffc4 	addi	r5,r5,-1
   88a90:	28800236 	bltu	r5,r2,88a9c <__fpclassifyd+0x60>
   88a94:	008000c4 	movi	r2,3
   88a98:	f800283a 	ret
   88a9c:	10c00226 	beq	r2,r3,88aa8 <__fpclassifyd+0x6c>
   88aa0:	0005883a 	mov	r2,zero
   88aa4:	f800283a 	ret
   88aa8:	2005003a 	cmpeq	r2,r4,zero
   88aac:	f800283a 	ret

00088ab0 <_sbrk_r>:
   88ab0:	defffd04 	addi	sp,sp,-12
   88ab4:	dc000015 	stw	r16,0(sp)
   88ab8:	04000274 	movhi	r16,9
   88abc:	dc400115 	stw	r17,4(sp)
   88ac0:	84113204 	addi	r16,r16,17608
   88ac4:	2023883a 	mov	r17,r4
   88ac8:	2809883a 	mov	r4,r5
   88acc:	dfc00215 	stw	ra,8(sp)
   88ad0:	80000015 	stw	zero,0(r16)
   88ad4:	008eb840 	call	8eb84 <sbrk>
   88ad8:	00ffffc4 	movi	r3,-1
   88adc:	10c00526 	beq	r2,r3,88af4 <_sbrk_r+0x44>
   88ae0:	dfc00217 	ldw	ra,8(sp)
   88ae4:	dc400117 	ldw	r17,4(sp)
   88ae8:	dc000017 	ldw	r16,0(sp)
   88aec:	dec00304 	addi	sp,sp,12
   88af0:	f800283a 	ret
   88af4:	80c00017 	ldw	r3,0(r16)
   88af8:	183ff926 	beq	r3,zero,88ae0 <__alt_data_end+0xfffbcff0>
   88afc:	88c00015 	stw	r3,0(r17)
   88b00:	003ff706 	br	88ae0 <__alt_data_end+0xfffbcff0>

00088b04 <__sread>:
   88b04:	defffe04 	addi	sp,sp,-8
   88b08:	dc000015 	stw	r16,0(sp)
   88b0c:	2821883a 	mov	r16,r5
   88b10:	2940038f 	ldh	r5,14(r5)
   88b14:	dfc00115 	stw	ra,4(sp)
   88b18:	008a8f80 	call	8a8f8 <_read_r>
   88b1c:	10000716 	blt	r2,zero,88b3c <__sread+0x38>
   88b20:	80c01417 	ldw	r3,80(r16)
   88b24:	1887883a 	add	r3,r3,r2
   88b28:	80c01415 	stw	r3,80(r16)
   88b2c:	dfc00117 	ldw	ra,4(sp)
   88b30:	dc000017 	ldw	r16,0(sp)
   88b34:	dec00204 	addi	sp,sp,8
   88b38:	f800283a 	ret
   88b3c:	80c0030b 	ldhu	r3,12(r16)
   88b40:	18fbffcc 	andi	r3,r3,61439
   88b44:	80c0030d 	sth	r3,12(r16)
   88b48:	dfc00117 	ldw	ra,4(sp)
   88b4c:	dc000017 	ldw	r16,0(sp)
   88b50:	dec00204 	addi	sp,sp,8
   88b54:	f800283a 	ret

00088b58 <__seofread>:
   88b58:	0005883a 	mov	r2,zero
   88b5c:	f800283a 	ret

00088b60 <__swrite>:
   88b60:	2880030b 	ldhu	r2,12(r5)
   88b64:	defffb04 	addi	sp,sp,-20
   88b68:	dcc00315 	stw	r19,12(sp)
   88b6c:	dc800215 	stw	r18,8(sp)
   88b70:	dc400115 	stw	r17,4(sp)
   88b74:	dc000015 	stw	r16,0(sp)
   88b78:	dfc00415 	stw	ra,16(sp)
   88b7c:	10c0400c 	andi	r3,r2,256
   88b80:	2821883a 	mov	r16,r5
   88b84:	2023883a 	mov	r17,r4
   88b88:	3025883a 	mov	r18,r6
   88b8c:	3827883a 	mov	r19,r7
   88b90:	18000526 	beq	r3,zero,88ba8 <__swrite+0x48>
   88b94:	2940038f 	ldh	r5,14(r5)
   88b98:	01c00084 	movi	r7,2
   88b9c:	000d883a 	mov	r6,zero
   88ba0:	008a8980 	call	8a898 <_lseek_r>
   88ba4:	8080030b 	ldhu	r2,12(r16)
   88ba8:	8140038f 	ldh	r5,14(r16)
   88bac:	10bbffcc 	andi	r2,r2,61439
   88bb0:	980f883a 	mov	r7,r19
   88bb4:	900d883a 	mov	r6,r18
   88bb8:	8809883a 	mov	r4,r17
   88bbc:	8080030d 	sth	r2,12(r16)
   88bc0:	dfc00417 	ldw	ra,16(sp)
   88bc4:	dcc00317 	ldw	r19,12(sp)
   88bc8:	dc800217 	ldw	r18,8(sp)
   88bcc:	dc400117 	ldw	r17,4(sp)
   88bd0:	dc000017 	ldw	r16,0(sp)
   88bd4:	dec00504 	addi	sp,sp,20
   88bd8:	008a3641 	jmpi	8a364 <_write_r>

00088bdc <__sseek>:
   88bdc:	defffe04 	addi	sp,sp,-8
   88be0:	dc000015 	stw	r16,0(sp)
   88be4:	2821883a 	mov	r16,r5
   88be8:	2940038f 	ldh	r5,14(r5)
   88bec:	dfc00115 	stw	ra,4(sp)
   88bf0:	008a8980 	call	8a898 <_lseek_r>
   88bf4:	00ffffc4 	movi	r3,-1
   88bf8:	10c00826 	beq	r2,r3,88c1c <__sseek+0x40>
   88bfc:	80c0030b 	ldhu	r3,12(r16)
   88c00:	80801415 	stw	r2,80(r16)
   88c04:	18c40014 	ori	r3,r3,4096
   88c08:	80c0030d 	sth	r3,12(r16)
   88c0c:	dfc00117 	ldw	ra,4(sp)
   88c10:	dc000017 	ldw	r16,0(sp)
   88c14:	dec00204 	addi	sp,sp,8
   88c18:	f800283a 	ret
   88c1c:	80c0030b 	ldhu	r3,12(r16)
   88c20:	18fbffcc 	andi	r3,r3,61439
   88c24:	80c0030d 	sth	r3,12(r16)
   88c28:	dfc00117 	ldw	ra,4(sp)
   88c2c:	dc000017 	ldw	r16,0(sp)
   88c30:	dec00204 	addi	sp,sp,8
   88c34:	f800283a 	ret

00088c38 <__sclose>:
   88c38:	2940038f 	ldh	r5,14(r5)
   88c3c:	008a3c41 	jmpi	8a3c4 <_close_r>

00088c40 <strcmp>:
   88c40:	2144b03a 	or	r2,r4,r5
   88c44:	108000cc 	andi	r2,r2,3
   88c48:	1000171e 	bne	r2,zero,88ca8 <strcmp+0x68>
   88c4c:	20800017 	ldw	r2,0(r4)
   88c50:	28c00017 	ldw	r3,0(r5)
   88c54:	10c0141e 	bne	r2,r3,88ca8 <strcmp+0x68>
   88c58:	027fbff4 	movhi	r9,65279
   88c5c:	4a7fbfc4 	addi	r9,r9,-257
   88c60:	0086303a 	nor	r3,zero,r2
   88c64:	02202074 	movhi	r8,32897
   88c68:	1245883a 	add	r2,r2,r9
   88c6c:	42202004 	addi	r8,r8,-32640
   88c70:	10c4703a 	and	r2,r2,r3
   88c74:	1204703a 	and	r2,r2,r8
   88c78:	10000226 	beq	r2,zero,88c84 <strcmp+0x44>
   88c7c:	00002306 	br	88d0c <strcmp+0xcc>
   88c80:	1000221e 	bne	r2,zero,88d0c <strcmp+0xcc>
   88c84:	21000104 	addi	r4,r4,4
   88c88:	20c00017 	ldw	r3,0(r4)
   88c8c:	29400104 	addi	r5,r5,4
   88c90:	29800017 	ldw	r6,0(r5)
   88c94:	1a4f883a 	add	r7,r3,r9
   88c98:	00c4303a 	nor	r2,zero,r3
   88c9c:	3884703a 	and	r2,r7,r2
   88ca0:	1204703a 	and	r2,r2,r8
   88ca4:	19bff626 	beq	r3,r6,88c80 <__alt_data_end+0xfffbd190>
   88ca8:	20800003 	ldbu	r2,0(r4)
   88cac:	10c03fcc 	andi	r3,r2,255
   88cb0:	18c0201c 	xori	r3,r3,128
   88cb4:	18ffe004 	addi	r3,r3,-128
   88cb8:	18000c26 	beq	r3,zero,88cec <strcmp+0xac>
   88cbc:	29800007 	ldb	r6,0(r5)
   88cc0:	19800326 	beq	r3,r6,88cd0 <strcmp+0x90>
   88cc4:	00001306 	br	88d14 <strcmp+0xd4>
   88cc8:	29800007 	ldb	r6,0(r5)
   88ccc:	11800b1e 	bne	r2,r6,88cfc <strcmp+0xbc>
   88cd0:	21000044 	addi	r4,r4,1
   88cd4:	20c00003 	ldbu	r3,0(r4)
   88cd8:	29400044 	addi	r5,r5,1
   88cdc:	18803fcc 	andi	r2,r3,255
   88ce0:	1080201c 	xori	r2,r2,128
   88ce4:	10bfe004 	addi	r2,r2,-128
   88ce8:	103ff71e 	bne	r2,zero,88cc8 <__alt_data_end+0xfffbd1d8>
   88cec:	0007883a 	mov	r3,zero
   88cf0:	28800003 	ldbu	r2,0(r5)
   88cf4:	1885c83a 	sub	r2,r3,r2
   88cf8:	f800283a 	ret
   88cfc:	28800003 	ldbu	r2,0(r5)
   88d00:	18c03fcc 	andi	r3,r3,255
   88d04:	1885c83a 	sub	r2,r3,r2
   88d08:	f800283a 	ret
   88d0c:	0005883a 	mov	r2,zero
   88d10:	f800283a 	ret
   88d14:	10c03fcc 	andi	r3,r2,255
   88d18:	003ff506 	br	88cf0 <__alt_data_end+0xfffbd200>

00088d1c <__sprint_r.part.0>:
   88d1c:	28801917 	ldw	r2,100(r5)
   88d20:	defff604 	addi	sp,sp,-40
   88d24:	dd400515 	stw	r21,20(sp)
   88d28:	dfc00915 	stw	ra,36(sp)
   88d2c:	df000815 	stw	fp,32(sp)
   88d30:	ddc00715 	stw	r23,28(sp)
   88d34:	dd800615 	stw	r22,24(sp)
   88d38:	dd000415 	stw	r20,16(sp)
   88d3c:	dcc00315 	stw	r19,12(sp)
   88d40:	dc800215 	stw	r18,8(sp)
   88d44:	dc400115 	stw	r17,4(sp)
   88d48:	dc000015 	stw	r16,0(sp)
   88d4c:	1088000c 	andi	r2,r2,8192
   88d50:	302b883a 	mov	r21,r6
   88d54:	10002e26 	beq	r2,zero,88e10 <__sprint_r.part.0+0xf4>
   88d58:	30800217 	ldw	r2,8(r6)
   88d5c:	35800017 	ldw	r22,0(r6)
   88d60:	10002926 	beq	r2,zero,88e08 <__sprint_r.part.0+0xec>
   88d64:	2827883a 	mov	r19,r5
   88d68:	2029883a 	mov	r20,r4
   88d6c:	b5c00104 	addi	r23,r22,4
   88d70:	04bfffc4 	movi	r18,-1
   88d74:	bc400017 	ldw	r17,0(r23)
   88d78:	b4000017 	ldw	r16,0(r22)
   88d7c:	0039883a 	mov	fp,zero
   88d80:	8822d0ba 	srli	r17,r17,2
   88d84:	8800031e 	bne	r17,zero,88d94 <__sprint_r.part.0+0x78>
   88d88:	00001806 	br	88dec <__sprint_r.part.0+0xd0>
   88d8c:	84000104 	addi	r16,r16,4
   88d90:	8f001526 	beq	r17,fp,88de8 <__sprint_r.part.0+0xcc>
   88d94:	81400017 	ldw	r5,0(r16)
   88d98:	980d883a 	mov	r6,r19
   88d9c:	a009883a 	mov	r4,r20
   88da0:	008a7440 	call	8a744 <_fputwc_r>
   88da4:	e7000044 	addi	fp,fp,1
   88da8:	14bff81e 	bne	r2,r18,88d8c <__alt_data_end+0xfffbd29c>
   88dac:	9005883a 	mov	r2,r18
   88db0:	a8000215 	stw	zero,8(r21)
   88db4:	a8000115 	stw	zero,4(r21)
   88db8:	dfc00917 	ldw	ra,36(sp)
   88dbc:	df000817 	ldw	fp,32(sp)
   88dc0:	ddc00717 	ldw	r23,28(sp)
   88dc4:	dd800617 	ldw	r22,24(sp)
   88dc8:	dd400517 	ldw	r21,20(sp)
   88dcc:	dd000417 	ldw	r20,16(sp)
   88dd0:	dcc00317 	ldw	r19,12(sp)
   88dd4:	dc800217 	ldw	r18,8(sp)
   88dd8:	dc400117 	ldw	r17,4(sp)
   88ddc:	dc000017 	ldw	r16,0(sp)
   88de0:	dec00a04 	addi	sp,sp,40
   88de4:	f800283a 	ret
   88de8:	a8800217 	ldw	r2,8(r21)
   88dec:	8c63883a 	add	r17,r17,r17
   88df0:	8c63883a 	add	r17,r17,r17
   88df4:	1445c83a 	sub	r2,r2,r17
   88df8:	a8800215 	stw	r2,8(r21)
   88dfc:	b5800204 	addi	r22,r22,8
   88e00:	bdc00204 	addi	r23,r23,8
   88e04:	103fdb1e 	bne	r2,zero,88d74 <__alt_data_end+0xfffbd284>
   88e08:	0005883a 	mov	r2,zero
   88e0c:	003fe806 	br	88db0 <__alt_data_end+0xfffbd2c0>
   88e10:	0085ee80 	call	85ee8 <__sfvwrite_r>
   88e14:	003fe606 	br	88db0 <__alt_data_end+0xfffbd2c0>

00088e18 <__sprint_r>:
   88e18:	30c00217 	ldw	r3,8(r6)
   88e1c:	18000126 	beq	r3,zero,88e24 <__sprint_r+0xc>
   88e20:	0088d1c1 	jmpi	88d1c <__sprint_r.part.0>
   88e24:	30000115 	stw	zero,4(r6)
   88e28:	0005883a 	mov	r2,zero
   88e2c:	f800283a 	ret

00088e30 <___vfiprintf_internal_r>:
   88e30:	deffc904 	addi	sp,sp,-220
   88e34:	df003515 	stw	fp,212(sp)
   88e38:	dd003115 	stw	r20,196(sp)
   88e3c:	dfc03615 	stw	ra,216(sp)
   88e40:	ddc03415 	stw	r23,208(sp)
   88e44:	dd803315 	stw	r22,204(sp)
   88e48:	dd403215 	stw	r21,200(sp)
   88e4c:	dcc03015 	stw	r19,192(sp)
   88e50:	dc802f15 	stw	r18,188(sp)
   88e54:	dc402e15 	stw	r17,184(sp)
   88e58:	dc002d15 	stw	r16,180(sp)
   88e5c:	d9002015 	stw	r4,128(sp)
   88e60:	d9c02215 	stw	r7,136(sp)
   88e64:	2829883a 	mov	r20,r5
   88e68:	3039883a 	mov	fp,r6
   88e6c:	20000226 	beq	r4,zero,88e78 <___vfiprintf_internal_r+0x48>
   88e70:	20800e17 	ldw	r2,56(r4)
   88e74:	1000cf26 	beq	r2,zero,891b4 <___vfiprintf_internal_r+0x384>
   88e78:	a080030b 	ldhu	r2,12(r20)
   88e7c:	10c8000c 	andi	r3,r2,8192
   88e80:	1800061e 	bne	r3,zero,88e9c <___vfiprintf_internal_r+0x6c>
   88e84:	a1001917 	ldw	r4,100(r20)
   88e88:	00f7ffc4 	movi	r3,-8193
   88e8c:	10880014 	ori	r2,r2,8192
   88e90:	20c6703a 	and	r3,r4,r3
   88e94:	a080030d 	sth	r2,12(r20)
   88e98:	a0c01915 	stw	r3,100(r20)
   88e9c:	10c0020c 	andi	r3,r2,8
   88ea0:	1800a926 	beq	r3,zero,89148 <___vfiprintf_internal_r+0x318>
   88ea4:	a0c00417 	ldw	r3,16(r20)
   88ea8:	1800a726 	beq	r3,zero,89148 <___vfiprintf_internal_r+0x318>
   88eac:	1080068c 	andi	r2,r2,26
   88eb0:	00c00284 	movi	r3,10
   88eb4:	10c0ac26 	beq	r2,r3,89168 <___vfiprintf_internal_r+0x338>
   88eb8:	da801a04 	addi	r10,sp,104
   88ebc:	da801e15 	stw	r10,120(sp)
   88ec0:	d8801e17 	ldw	r2,120(sp)
   88ec4:	da8019c4 	addi	r10,sp,103
   88ec8:	05800274 	movhi	r22,9
   88ecc:	05c00274 	movhi	r23,9
   88ed0:	da801f15 	stw	r10,124(sp)
   88ed4:	1295c83a 	sub	r10,r2,r10
   88ed8:	b5831204 	addi	r22,r22,3144
   88edc:	bdc30e04 	addi	r23,r23,3128
   88ee0:	dec01a15 	stw	sp,104(sp)
   88ee4:	d8001c15 	stw	zero,112(sp)
   88ee8:	d8001b15 	stw	zero,108(sp)
   88eec:	d8002615 	stw	zero,152(sp)
   88ef0:	d8002315 	stw	zero,140(sp)
   88ef4:	da802715 	stw	r10,156(sp)
   88ef8:	d811883a 	mov	r8,sp
   88efc:	dd002115 	stw	r20,132(sp)
   88f00:	e021883a 	mov	r16,fp
   88f04:	80800007 	ldb	r2,0(r16)
   88f08:	1003ea26 	beq	r2,zero,89eb4 <___vfiprintf_internal_r+0x1084>
   88f0c:	00c00944 	movi	r3,37
   88f10:	8025883a 	mov	r18,r16
   88f14:	10c0021e 	bne	r2,r3,88f20 <___vfiprintf_internal_r+0xf0>
   88f18:	00001606 	br	88f74 <___vfiprintf_internal_r+0x144>
   88f1c:	10c00326 	beq	r2,r3,88f2c <___vfiprintf_internal_r+0xfc>
   88f20:	94800044 	addi	r18,r18,1
   88f24:	90800007 	ldb	r2,0(r18)
   88f28:	103ffc1e 	bne	r2,zero,88f1c <__alt_data_end+0xfffbd42c>
   88f2c:	9423c83a 	sub	r17,r18,r16
   88f30:	88001026 	beq	r17,zero,88f74 <___vfiprintf_internal_r+0x144>
   88f34:	d8c01c17 	ldw	r3,112(sp)
   88f38:	d8801b17 	ldw	r2,108(sp)
   88f3c:	44000015 	stw	r16,0(r8)
   88f40:	88c7883a 	add	r3,r17,r3
   88f44:	10800044 	addi	r2,r2,1
   88f48:	44400115 	stw	r17,4(r8)
   88f4c:	d8c01c15 	stw	r3,112(sp)
   88f50:	d8801b15 	stw	r2,108(sp)
   88f54:	010001c4 	movi	r4,7
   88f58:	2080760e 	bge	r4,r2,89134 <___vfiprintf_internal_r+0x304>
   88f5c:	1803821e 	bne	r3,zero,89d68 <___vfiprintf_internal_r+0xf38>
   88f60:	da802317 	ldw	r10,140(sp)
   88f64:	d8001b15 	stw	zero,108(sp)
   88f68:	d811883a 	mov	r8,sp
   88f6c:	5455883a 	add	r10,r10,r17
   88f70:	da802315 	stw	r10,140(sp)
   88f74:	90800007 	ldb	r2,0(r18)
   88f78:	10044626 	beq	r2,zero,8a094 <___vfiprintf_internal_r+0x1264>
   88f7c:	90c00047 	ldb	r3,1(r18)
   88f80:	94000044 	addi	r16,r18,1
   88f84:	d8001d85 	stb	zero,118(sp)
   88f88:	0009883a 	mov	r4,zero
   88f8c:	000f883a 	mov	r7,zero
   88f90:	027fffc4 	movi	r9,-1
   88f94:	0023883a 	mov	r17,zero
   88f98:	0029883a 	mov	r20,zero
   88f9c:	01401604 	movi	r5,88
   88fa0:	01800244 	movi	r6,9
   88fa4:	03400a84 	movi	r13,42
   88fa8:	03001b04 	movi	r12,108
   88fac:	84000044 	addi	r16,r16,1
   88fb0:	18bff804 	addi	r2,r3,-32
   88fb4:	28827336 	bltu	r5,r2,89984 <___vfiprintf_internal_r+0xb54>
   88fb8:	100490ba 	slli	r2,r2,2
   88fbc:	02800274 	movhi	r10,9
   88fc0:	52a3f404 	addi	r10,r10,-28720
   88fc4:	1285883a 	add	r2,r2,r10
   88fc8:	10800017 	ldw	r2,0(r2)
   88fcc:	1000683a 	jmp	r2
   88fd0:	000896b8 	rdprs	zero,zero,8794
   88fd4:	00089984 	movi	zero,8806
   88fd8:	00089984 	movi	zero,8806
   88fdc:	000896d8 	cmpnei	zero,zero,8795
   88fe0:	00089984 	movi	zero,8806
   88fe4:	00089984 	movi	zero,8806
   88fe8:	00089984 	movi	zero,8806
   88fec:	00089984 	movi	zero,8806
   88ff0:	00089984 	movi	zero,8806
   88ff4:	00089984 	movi	zero,8806
   88ff8:	000898c0 	call	898c <__reset-0x77674>
   88ffc:	000898dc 	xori	zero,zero,8803
   89000:	00089984 	movi	zero,8806
   89004:	000891c4 	movi	zero,8775
   89008:	000898ec 	andhi	zero,zero,8803
   8900c:	00089984 	movi	zero,8806
   89010:	000896e4 	muli	zero,zero,8795
   89014:	000896f0 	cmpltui	zero,zero,8795
   89018:	000896f0 	cmpltui	zero,zero,8795
   8901c:	000896f0 	cmpltui	zero,zero,8795
   89020:	000896f0 	cmpltui	zero,zero,8795
   89024:	000896f0 	cmpltui	zero,zero,8795
   89028:	000896f0 	cmpltui	zero,zero,8795
   8902c:	000896f0 	cmpltui	zero,zero,8795
   89030:	000896f0 	cmpltui	zero,zero,8795
   89034:	000896f0 	cmpltui	zero,zero,8795
   89038:	00089984 	movi	zero,8806
   8903c:	00089984 	movi	zero,8806
   89040:	00089984 	movi	zero,8806
   89044:	00089984 	movi	zero,8806
   89048:	00089984 	movi	zero,8806
   8904c:	00089984 	movi	zero,8806
   89050:	00089984 	movi	zero,8806
   89054:	00089984 	movi	zero,8806
   89058:	00089984 	movi	zero,8806
   8905c:	00089984 	movi	zero,8806
   89060:	0008971c 	xori	zero,zero,8796
   89064:	00089984 	movi	zero,8806
   89068:	00089984 	movi	zero,8806
   8906c:	00089984 	movi	zero,8806
   89070:	00089984 	movi	zero,8806
   89074:	00089984 	movi	zero,8806
   89078:	00089984 	movi	zero,8806
   8907c:	00089984 	movi	zero,8806
   89080:	00089984 	movi	zero,8806
   89084:	00089984 	movi	zero,8806
   89088:	00089984 	movi	zero,8806
   8908c:	00089754 	movui	zero,8797
   89090:	00089984 	movi	zero,8806
   89094:	00089984 	movi	zero,8806
   89098:	00089984 	movi	zero,8806
   8909c:	00089984 	movi	zero,8806
   890a0:	00089984 	movi	zero,8806
   890a4:	000897ac 	andhi	zero,zero,8798
   890a8:	00089984 	movi	zero,8806
   890ac:	00089984 	movi	zero,8806
   890b0:	0008981c 	xori	zero,zero,8800
   890b4:	00089984 	movi	zero,8806
   890b8:	00089984 	movi	zero,8806
   890bc:	00089984 	movi	zero,8806
   890c0:	00089984 	movi	zero,8806
   890c4:	00089984 	movi	zero,8806
   890c8:	00089984 	movi	zero,8806
   890cc:	00089984 	movi	zero,8806
   890d0:	00089984 	movi	zero,8806
   890d4:	00089984 	movi	zero,8806
   890d8:	00089984 	movi	zero,8806
   890dc:	000895c8 	cmpgei	zero,zero,8791
   890e0:	000895f4 	movhi	zero,8791
   890e4:	00089984 	movi	zero,8806
   890e8:	00089984 	movi	zero,8806
   890ec:	00089984 	movi	zero,8806
   890f0:	0008992c 	andhi	zero,zero,8804
   890f4:	000895f4 	movhi	zero,8791
   890f8:	00089984 	movi	zero,8806
   890fc:	00089984 	movi	zero,8806
   89100:	00089488 	cmpgei	zero,zero,8786
   89104:	00089984 	movi	zero,8806
   89108:	00089498 	cmpnei	zero,zero,8786
   8910c:	000894d4 	movui	zero,8787
   89110:	000891d0 	cmplti	zero,zero,8775
   89114:	0008947c 	xorhi	zero,zero,8785
   89118:	00089984 	movi	zero,8806
   8911c:	00089858 	cmpnei	zero,zero,8801
   89120:	00089984 	movi	zero,8806
   89124:	000898b0 	cmpltui	zero,zero,8802
   89128:	00089984 	movi	zero,8806
   8912c:	00089984 	movi	zero,8806
   89130:	00089574 	movhi	zero,8789
   89134:	42000204 	addi	r8,r8,8
   89138:	da802317 	ldw	r10,140(sp)
   8913c:	5455883a 	add	r10,r10,r17
   89140:	da802315 	stw	r10,140(sp)
   89144:	003f8b06 	br	88f74 <__alt_data_end+0xfffbd484>
   89148:	d9002017 	ldw	r4,128(sp)
   8914c:	a00b883a 	mov	r5,r20
   89150:	0083a900 	call	83a90 <__swsetup_r>
   89154:	1003b11e 	bne	r2,zero,8a01c <___vfiprintf_internal_r+0x11ec>
   89158:	a080030b 	ldhu	r2,12(r20)
   8915c:	00c00284 	movi	r3,10
   89160:	1080068c 	andi	r2,r2,26
   89164:	10ff541e 	bne	r2,r3,88eb8 <__alt_data_end+0xfffbd3c8>
   89168:	a080038f 	ldh	r2,14(r20)
   8916c:	103f5216 	blt	r2,zero,88eb8 <__alt_data_end+0xfffbd3c8>
   89170:	d9c02217 	ldw	r7,136(sp)
   89174:	d9002017 	ldw	r4,128(sp)
   89178:	e00d883a 	mov	r6,fp
   8917c:	a00b883a 	mov	r5,r20
   89180:	008a2a80 	call	8a2a8 <__sbprintf>
   89184:	dfc03617 	ldw	ra,216(sp)
   89188:	df003517 	ldw	fp,212(sp)
   8918c:	ddc03417 	ldw	r23,208(sp)
   89190:	dd803317 	ldw	r22,204(sp)
   89194:	dd403217 	ldw	r21,200(sp)
   89198:	dd003117 	ldw	r20,196(sp)
   8919c:	dcc03017 	ldw	r19,192(sp)
   891a0:	dc802f17 	ldw	r18,188(sp)
   891a4:	dc402e17 	ldw	r17,184(sp)
   891a8:	dc002d17 	ldw	r16,180(sp)
   891ac:	dec03704 	addi	sp,sp,220
   891b0:	f800283a 	ret
   891b4:	0085a640 	call	85a64 <__sinit>
   891b8:	003f2f06 	br	88e78 <__alt_data_end+0xfffbd388>
   891bc:	0463c83a 	sub	r17,zero,r17
   891c0:	d8802215 	stw	r2,136(sp)
   891c4:	a5000114 	ori	r20,r20,4
   891c8:	80c00007 	ldb	r3,0(r16)
   891cc:	003f7706 	br	88fac <__alt_data_end+0xfffbd4bc>
   891d0:	00800c04 	movi	r2,48
   891d4:	da802217 	ldw	r10,136(sp)
   891d8:	d8801d05 	stb	r2,116(sp)
   891dc:	00801e04 	movi	r2,120
   891e0:	d8801d45 	stb	r2,117(sp)
   891e4:	d8001d85 	stb	zero,118(sp)
   891e8:	50c00104 	addi	r3,r10,4
   891ec:	54800017 	ldw	r18,0(r10)
   891f0:	0027883a 	mov	r19,zero
   891f4:	a0800094 	ori	r2,r20,2
   891f8:	48030b16 	blt	r9,zero,89e28 <___vfiprintf_internal_r+0xff8>
   891fc:	00bfdfc4 	movi	r2,-129
   89200:	a096703a 	and	r11,r20,r2
   89204:	d8c02215 	stw	r3,136(sp)
   89208:	5d000094 	ori	r20,r11,2
   8920c:	90032b1e 	bne	r18,zero,89ebc <___vfiprintf_internal_r+0x108c>
   89210:	00800274 	movhi	r2,9
   89214:	1082ad04 	addi	r2,r2,2740
   89218:	d8802615 	stw	r2,152(sp)
   8921c:	0039883a 	mov	fp,zero
   89220:	48017b1e 	bne	r9,zero,89810 <___vfiprintf_internal_r+0x9e0>
   89224:	0013883a 	mov	r9,zero
   89228:	0027883a 	mov	r19,zero
   8922c:	dd401a04 	addi	r21,sp,104
   89230:	4825883a 	mov	r18,r9
   89234:	4cc0010e 	bge	r9,r19,8923c <___vfiprintf_internal_r+0x40c>
   89238:	9825883a 	mov	r18,r19
   8923c:	e7003fcc 	andi	fp,fp,255
   89240:	e700201c 	xori	fp,fp,128
   89244:	e73fe004 	addi	fp,fp,-128
   89248:	e0000126 	beq	fp,zero,89250 <___vfiprintf_internal_r+0x420>
   8924c:	94800044 	addi	r18,r18,1
   89250:	a380008c 	andi	r14,r20,2
   89254:	70000126 	beq	r14,zero,8925c <___vfiprintf_internal_r+0x42c>
   89258:	94800084 	addi	r18,r18,2
   8925c:	a700210c 	andi	fp,r20,132
   89260:	e001df1e 	bne	fp,zero,899e0 <___vfiprintf_internal_r+0xbb0>
   89264:	8c87c83a 	sub	r3,r17,r18
   89268:	00c1dd0e 	bge	zero,r3,899e0 <___vfiprintf_internal_r+0xbb0>
   8926c:	01c00404 	movi	r7,16
   89270:	d8801c17 	ldw	r2,112(sp)
   89274:	38c3ad0e 	bge	r7,r3,8a12c <___vfiprintf_internal_r+0x12fc>
   89278:	02800274 	movhi	r10,9
   8927c:	52831204 	addi	r10,r10,3144
   89280:	dc002915 	stw	r16,164(sp)
   89284:	d9801b17 	ldw	r6,108(sp)
   89288:	da802415 	stw	r10,144(sp)
   8928c:	03c001c4 	movi	r15,7
   89290:	da402515 	stw	r9,148(sp)
   89294:	db802815 	stw	r14,160(sp)
   89298:	1821883a 	mov	r16,r3
   8929c:	00000506 	br	892b4 <___vfiprintf_internal_r+0x484>
   892a0:	31400084 	addi	r5,r6,2
   892a4:	42000204 	addi	r8,r8,8
   892a8:	200d883a 	mov	r6,r4
   892ac:	843ffc04 	addi	r16,r16,-16
   892b0:	3c000d0e 	bge	r7,r16,892e8 <___vfiprintf_internal_r+0x4b8>
   892b4:	10800404 	addi	r2,r2,16
   892b8:	31000044 	addi	r4,r6,1
   892bc:	45800015 	stw	r22,0(r8)
   892c0:	41c00115 	stw	r7,4(r8)
   892c4:	d8801c15 	stw	r2,112(sp)
   892c8:	d9001b15 	stw	r4,108(sp)
   892cc:	793ff40e 	bge	r15,r4,892a0 <__alt_data_end+0xfffbd7b0>
   892d0:	1001b51e 	bne	r2,zero,899a8 <___vfiprintf_internal_r+0xb78>
   892d4:	843ffc04 	addi	r16,r16,-16
   892d8:	000d883a 	mov	r6,zero
   892dc:	01400044 	movi	r5,1
   892e0:	d811883a 	mov	r8,sp
   892e4:	3c3ff316 	blt	r7,r16,892b4 <__alt_data_end+0xfffbd7c4>
   892e8:	8007883a 	mov	r3,r16
   892ec:	da402517 	ldw	r9,148(sp)
   892f0:	db802817 	ldw	r14,160(sp)
   892f4:	dc002917 	ldw	r16,164(sp)
   892f8:	da802417 	ldw	r10,144(sp)
   892fc:	1885883a 	add	r2,r3,r2
   89300:	40c00115 	stw	r3,4(r8)
   89304:	42800015 	stw	r10,0(r8)
   89308:	d8801c15 	stw	r2,112(sp)
   8930c:	d9401b15 	stw	r5,108(sp)
   89310:	00c001c4 	movi	r3,7
   89314:	19426016 	blt	r3,r5,89c98 <___vfiprintf_internal_r+0xe68>
   89318:	d8c01d87 	ldb	r3,118(sp)
   8931c:	42000204 	addi	r8,r8,8
   89320:	29000044 	addi	r4,r5,1
   89324:	1801b31e 	bne	r3,zero,899f4 <___vfiprintf_internal_r+0xbc4>
   89328:	7001c026 	beq	r14,zero,89a2c <___vfiprintf_internal_r+0xbfc>
   8932c:	d8c01d04 	addi	r3,sp,116
   89330:	10800084 	addi	r2,r2,2
   89334:	40c00015 	stw	r3,0(r8)
   89338:	00c00084 	movi	r3,2
   8933c:	40c00115 	stw	r3,4(r8)
   89340:	d8801c15 	stw	r2,112(sp)
   89344:	d9001b15 	stw	r4,108(sp)
   89348:	00c001c4 	movi	r3,7
   8934c:	1902650e 	bge	r3,r4,89ce4 <___vfiprintf_internal_r+0xeb4>
   89350:	10029a1e 	bne	r2,zero,89dbc <___vfiprintf_internal_r+0xf8c>
   89354:	00c02004 	movi	r3,128
   89358:	01000044 	movi	r4,1
   8935c:	000b883a 	mov	r5,zero
   89360:	d811883a 	mov	r8,sp
   89364:	e0c1b31e 	bne	fp,r3,89a34 <___vfiprintf_internal_r+0xc04>
   89368:	8cb9c83a 	sub	fp,r17,r18
   8936c:	0701b10e 	bge	zero,fp,89a34 <___vfiprintf_internal_r+0xc04>
   89370:	01c00404 	movi	r7,16
   89374:	3f03890e 	bge	r7,fp,8a19c <___vfiprintf_internal_r+0x136c>
   89378:	00c00274 	movhi	r3,9
   8937c:	18c30e04 	addi	r3,r3,3128
   89380:	d8c02415 	stw	r3,144(sp)
   89384:	8007883a 	mov	r3,r16
   89388:	034001c4 	movi	r13,7
   8938c:	e021883a 	mov	r16,fp
   89390:	da402515 	stw	r9,148(sp)
   89394:	1839883a 	mov	fp,r3
   89398:	00000506 	br	893b0 <___vfiprintf_internal_r+0x580>
   8939c:	29800084 	addi	r6,r5,2
   893a0:	42000204 	addi	r8,r8,8
   893a4:	180b883a 	mov	r5,r3
   893a8:	843ffc04 	addi	r16,r16,-16
   893ac:	3c000d0e 	bge	r7,r16,893e4 <___vfiprintf_internal_r+0x5b4>
   893b0:	10800404 	addi	r2,r2,16
   893b4:	28c00044 	addi	r3,r5,1
   893b8:	45c00015 	stw	r23,0(r8)
   893bc:	41c00115 	stw	r7,4(r8)
   893c0:	d8801c15 	stw	r2,112(sp)
   893c4:	d8c01b15 	stw	r3,108(sp)
   893c8:	68fff40e 	bge	r13,r3,8939c <__alt_data_end+0xfffbd8ac>
   893cc:	1002241e 	bne	r2,zero,89c60 <___vfiprintf_internal_r+0xe30>
   893d0:	843ffc04 	addi	r16,r16,-16
   893d4:	01800044 	movi	r6,1
   893d8:	000b883a 	mov	r5,zero
   893dc:	d811883a 	mov	r8,sp
   893e0:	3c3ff316 	blt	r7,r16,893b0 <__alt_data_end+0xfffbd8c0>
   893e4:	da402517 	ldw	r9,148(sp)
   893e8:	e007883a 	mov	r3,fp
   893ec:	8039883a 	mov	fp,r16
   893f0:	1821883a 	mov	r16,r3
   893f4:	d8c02417 	ldw	r3,144(sp)
   893f8:	1705883a 	add	r2,r2,fp
   893fc:	47000115 	stw	fp,4(r8)
   89400:	40c00015 	stw	r3,0(r8)
   89404:	d8801c15 	stw	r2,112(sp)
   89408:	d9801b15 	stw	r6,108(sp)
   8940c:	00c001c4 	movi	r3,7
   89410:	19827616 	blt	r3,r6,89dec <___vfiprintf_internal_r+0xfbc>
   89414:	4cf9c83a 	sub	fp,r9,r19
   89418:	42000204 	addi	r8,r8,8
   8941c:	31000044 	addi	r4,r6,1
   89420:	300b883a 	mov	r5,r6
   89424:	07018516 	blt	zero,fp,89a3c <___vfiprintf_internal_r+0xc0c>
   89428:	9885883a 	add	r2,r19,r2
   8942c:	45400015 	stw	r21,0(r8)
   89430:	44c00115 	stw	r19,4(r8)
   89434:	d8801c15 	stw	r2,112(sp)
   89438:	d9001b15 	stw	r4,108(sp)
   8943c:	00c001c4 	movi	r3,7
   89440:	1901dd0e 	bge	r3,r4,89bb8 <___vfiprintf_internal_r+0xd88>
   89444:	1002401e 	bne	r2,zero,89d48 <___vfiprintf_internal_r+0xf18>
   89448:	d8001b15 	stw	zero,108(sp)
   8944c:	a2c0010c 	andi	r11,r20,4
   89450:	58000226 	beq	r11,zero,8945c <___vfiprintf_internal_r+0x62c>
   89454:	8ca7c83a 	sub	r19,r17,r18
   89458:	04c2f216 	blt	zero,r19,8a024 <___vfiprintf_internal_r+0x11f4>
   8945c:	8c80010e 	bge	r17,r18,89464 <___vfiprintf_internal_r+0x634>
   89460:	9023883a 	mov	r17,r18
   89464:	da802317 	ldw	r10,140(sp)
   89468:	5455883a 	add	r10,r10,r17
   8946c:	da802315 	stw	r10,140(sp)
   89470:	d8001b15 	stw	zero,108(sp)
   89474:	d811883a 	mov	r8,sp
   89478:	003ea206 	br	88f04 <__alt_data_end+0xfffbd414>
   8947c:	a5000814 	ori	r20,r20,32
   89480:	80c00007 	ldb	r3,0(r16)
   89484:	003ec906 	br	88fac <__alt_data_end+0xfffbd4bc>
   89488:	80c00007 	ldb	r3,0(r16)
   8948c:	1b030926 	beq	r3,r12,8a0b4 <___vfiprintf_internal_r+0x1284>
   89490:	a5000414 	ori	r20,r20,16
   89494:	003ec506 	br	88fac <__alt_data_end+0xfffbd4bc>
   89498:	21003fcc 	andi	r4,r4,255
   8949c:	20035e1e 	bne	r4,zero,8a218 <___vfiprintf_internal_r+0x13e8>
   894a0:	a080080c 	andi	r2,r20,32
   894a4:	1002a526 	beq	r2,zero,89f3c <___vfiprintf_internal_r+0x110c>
   894a8:	da802217 	ldw	r10,136(sp)
   894ac:	50800017 	ldw	r2,0(r10)
   894b0:	da802317 	ldw	r10,140(sp)
   894b4:	5007d7fa 	srai	r3,r10,31
   894b8:	da802217 	ldw	r10,136(sp)
   894bc:	10c00115 	stw	r3,4(r2)
   894c0:	52800104 	addi	r10,r10,4
   894c4:	da802215 	stw	r10,136(sp)
   894c8:	da802317 	ldw	r10,140(sp)
   894cc:	12800015 	stw	r10,0(r2)
   894d0:	003e8c06 	br	88f04 <__alt_data_end+0xfffbd414>
   894d4:	21003fcc 	andi	r4,r4,255
   894d8:	2003511e 	bne	r4,zero,8a220 <___vfiprintf_internal_r+0x13f0>
   894dc:	a080080c 	andi	r2,r20,32
   894e0:	1000a126 	beq	r2,zero,89768 <___vfiprintf_internal_r+0x938>
   894e4:	da802217 	ldw	r10,136(sp)
   894e8:	d8001d85 	stb	zero,118(sp)
   894ec:	50800204 	addi	r2,r10,8
   894f0:	54800017 	ldw	r18,0(r10)
   894f4:	54c00117 	ldw	r19,4(r10)
   894f8:	4802b416 	blt	r9,zero,89fcc <___vfiprintf_internal_r+0x119c>
   894fc:	013fdfc4 	movi	r4,-129
   89500:	94c6b03a 	or	r3,r18,r19
   89504:	d8802215 	stw	r2,136(sp)
   89508:	a128703a 	and	r20,r20,r4
   8950c:	1800a226 	beq	r3,zero,89798 <___vfiprintf_internal_r+0x968>
   89510:	0039883a 	mov	fp,zero
   89514:	dd401a04 	addi	r21,sp,104
   89518:	9006d0fa 	srli	r3,r18,3
   8951c:	9808977a 	slli	r4,r19,29
   89520:	9826d0fa 	srli	r19,r19,3
   89524:	948001cc 	andi	r18,r18,7
   89528:	90800c04 	addi	r2,r18,48
   8952c:	ad7fffc4 	addi	r21,r21,-1
   89530:	20e4b03a 	or	r18,r4,r3
   89534:	a8800005 	stb	r2,0(r21)
   89538:	94c6b03a 	or	r3,r18,r19
   8953c:	183ff61e 	bne	r3,zero,89518 <__alt_data_end+0xfffbda28>
   89540:	a0c0004c 	andi	r3,r20,1
   89544:	18005926 	beq	r3,zero,896ac <___vfiprintf_internal_r+0x87c>
   89548:	10803fcc 	andi	r2,r2,255
   8954c:	1080201c 	xori	r2,r2,128
   89550:	10bfe004 	addi	r2,r2,-128
   89554:	00c00c04 	movi	r3,48
   89558:	10c05426 	beq	r2,r3,896ac <___vfiprintf_internal_r+0x87c>
   8955c:	da801e17 	ldw	r10,120(sp)
   89560:	a8bfffc4 	addi	r2,r21,-1
   89564:	a8ffffc5 	stb	r3,-1(r21)
   89568:	50a7c83a 	sub	r19,r10,r2
   8956c:	102b883a 	mov	r21,r2
   89570:	003f2f06 	br	89230 <__alt_data_end+0xfffbd740>
   89574:	21003fcc 	andi	r4,r4,255
   89578:	2003421e 	bne	r4,zero,8a284 <___vfiprintf_internal_r+0x1454>
   8957c:	00800274 	movhi	r2,9
   89580:	1082ad04 	addi	r2,r2,2740
   89584:	d8802615 	stw	r2,152(sp)
   89588:	a080080c 	andi	r2,r20,32
   8958c:	1000aa26 	beq	r2,zero,89838 <___vfiprintf_internal_r+0xa08>
   89590:	da802217 	ldw	r10,136(sp)
   89594:	54800017 	ldw	r18,0(r10)
   89598:	54c00117 	ldw	r19,4(r10)
   8959c:	52800204 	addi	r10,r10,8
   895a0:	da802215 	stw	r10,136(sp)
   895a4:	a080004c 	andi	r2,r20,1
   895a8:	1001d226 	beq	r2,zero,89cf4 <___vfiprintf_internal_r+0xec4>
   895ac:	94c4b03a 	or	r2,r18,r19
   895b0:	1002351e 	bne	r2,zero,89e88 <___vfiprintf_internal_r+0x1058>
   895b4:	d8001d85 	stb	zero,118(sp)
   895b8:	48022216 	blt	r9,zero,89e44 <___vfiprintf_internal_r+0x1014>
   895bc:	00bfdfc4 	movi	r2,-129
   895c0:	a0a8703a 	and	r20,r20,r2
   895c4:	003f1506 	br	8921c <__alt_data_end+0xfffbd72c>
   895c8:	da802217 	ldw	r10,136(sp)
   895cc:	04800044 	movi	r18,1
   895d0:	d8001d85 	stb	zero,118(sp)
   895d4:	50800017 	ldw	r2,0(r10)
   895d8:	52800104 	addi	r10,r10,4
   895dc:	da802215 	stw	r10,136(sp)
   895e0:	d8801005 	stb	r2,64(sp)
   895e4:	9027883a 	mov	r19,r18
   895e8:	dd401004 	addi	r21,sp,64
   895ec:	0013883a 	mov	r9,zero
   895f0:	003f1706 	br	89250 <__alt_data_end+0xfffbd760>
   895f4:	21003fcc 	andi	r4,r4,255
   895f8:	2003201e 	bne	r4,zero,8a27c <___vfiprintf_internal_r+0x144c>
   895fc:	a080080c 	andi	r2,r20,32
   89600:	10004b26 	beq	r2,zero,89730 <___vfiprintf_internal_r+0x900>
   89604:	da802217 	ldw	r10,136(sp)
   89608:	50800117 	ldw	r2,4(r10)
   8960c:	54800017 	ldw	r18,0(r10)
   89610:	52800204 	addi	r10,r10,8
   89614:	da802215 	stw	r10,136(sp)
   89618:	1027883a 	mov	r19,r2
   8961c:	10022c16 	blt	r2,zero,89ed0 <___vfiprintf_internal_r+0x10a0>
   89620:	df001d83 	ldbu	fp,118(sp)
   89624:	48007216 	blt	r9,zero,897f0 <___vfiprintf_internal_r+0x9c0>
   89628:	00ffdfc4 	movi	r3,-129
   8962c:	94c4b03a 	or	r2,r18,r19
   89630:	a0e8703a 	and	r20,r20,r3
   89634:	1000cc26 	beq	r2,zero,89968 <___vfiprintf_internal_r+0xb38>
   89638:	98021026 	beq	r19,zero,89e7c <___vfiprintf_internal_r+0x104c>
   8963c:	dc402415 	stw	r17,144(sp)
   89640:	dc002515 	stw	r16,148(sp)
   89644:	9823883a 	mov	r17,r19
   89648:	9021883a 	mov	r16,r18
   8964c:	dd401a04 	addi	r21,sp,104
   89650:	4825883a 	mov	r18,r9
   89654:	4027883a 	mov	r19,r8
   89658:	8009883a 	mov	r4,r16
   8965c:	880b883a 	mov	r5,r17
   89660:	01800284 	movi	r6,10
   89664:	000f883a 	mov	r7,zero
   89668:	008b2700 	call	8b270 <__umoddi3>
   8966c:	10800c04 	addi	r2,r2,48
   89670:	ad7fffc4 	addi	r21,r21,-1
   89674:	8009883a 	mov	r4,r16
   89678:	880b883a 	mov	r5,r17
   8967c:	a8800005 	stb	r2,0(r21)
   89680:	01800284 	movi	r6,10
   89684:	000f883a 	mov	r7,zero
   89688:	008acf80 	call	8acf8 <__udivdi3>
   8968c:	1021883a 	mov	r16,r2
   89690:	10c4b03a 	or	r2,r2,r3
   89694:	1823883a 	mov	r17,r3
   89698:	103fef1e 	bne	r2,zero,89658 <__alt_data_end+0xfffbdb68>
   8969c:	dc402417 	ldw	r17,144(sp)
   896a0:	dc002517 	ldw	r16,148(sp)
   896a4:	9013883a 	mov	r9,r18
   896a8:	9811883a 	mov	r8,r19
   896ac:	da801e17 	ldw	r10,120(sp)
   896b0:	5567c83a 	sub	r19,r10,r21
   896b4:	003ede06 	br	89230 <__alt_data_end+0xfffbd740>
   896b8:	38803fcc 	andi	r2,r7,255
   896bc:	1080201c 	xori	r2,r2,128
   896c0:	10bfe004 	addi	r2,r2,-128
   896c4:	1002371e 	bne	r2,zero,89fa4 <___vfiprintf_internal_r+0x1174>
   896c8:	01000044 	movi	r4,1
   896cc:	01c00804 	movi	r7,32
   896d0:	80c00007 	ldb	r3,0(r16)
   896d4:	003e3506 	br	88fac <__alt_data_end+0xfffbd4bc>
   896d8:	a5000054 	ori	r20,r20,1
   896dc:	80c00007 	ldb	r3,0(r16)
   896e0:	003e3206 	br	88fac <__alt_data_end+0xfffbd4bc>
   896e4:	a5002014 	ori	r20,r20,128
   896e8:	80c00007 	ldb	r3,0(r16)
   896ec:	003e2f06 	br	88fac <__alt_data_end+0xfffbd4bc>
   896f0:	8015883a 	mov	r10,r16
   896f4:	0023883a 	mov	r17,zero
   896f8:	18bff404 	addi	r2,r3,-48
   896fc:	50c00007 	ldb	r3,0(r10)
   89700:	8c4002a4 	muli	r17,r17,10
   89704:	84000044 	addi	r16,r16,1
   89708:	8015883a 	mov	r10,r16
   8970c:	1463883a 	add	r17,r2,r17
   89710:	18bff404 	addi	r2,r3,-48
   89714:	30bff92e 	bgeu	r6,r2,896fc <__alt_data_end+0xfffbdc0c>
   89718:	003e2506 	br	88fb0 <__alt_data_end+0xfffbd4c0>
   8971c:	21003fcc 	andi	r4,r4,255
   89720:	2002d41e 	bne	r4,zero,8a274 <___vfiprintf_internal_r+0x1444>
   89724:	a5000414 	ori	r20,r20,16
   89728:	a080080c 	andi	r2,r20,32
   8972c:	103fb51e 	bne	r2,zero,89604 <__alt_data_end+0xfffbdb14>
   89730:	a080040c 	andi	r2,r20,16
   89734:	1001f826 	beq	r2,zero,89f18 <___vfiprintf_internal_r+0x10e8>
   89738:	da802217 	ldw	r10,136(sp)
   8973c:	54800017 	ldw	r18,0(r10)
   89740:	52800104 	addi	r10,r10,4
   89744:	da802215 	stw	r10,136(sp)
   89748:	9027d7fa 	srai	r19,r18,31
   8974c:	9805883a 	mov	r2,r19
   89750:	003fb206 	br	8961c <__alt_data_end+0xfffbdb2c>
   89754:	21003fcc 	andi	r4,r4,255
   89758:	2002c41e 	bne	r4,zero,8a26c <___vfiprintf_internal_r+0x143c>
   8975c:	a5000414 	ori	r20,r20,16
   89760:	a080080c 	andi	r2,r20,32
   89764:	103f5f1e 	bne	r2,zero,894e4 <__alt_data_end+0xfffbd9f4>
   89768:	a080040c 	andi	r2,r20,16
   8976c:	10020f26 	beq	r2,zero,89fac <___vfiprintf_internal_r+0x117c>
   89770:	da802217 	ldw	r10,136(sp)
   89774:	d8001d85 	stb	zero,118(sp)
   89778:	0027883a 	mov	r19,zero
   8977c:	50800104 	addi	r2,r10,4
   89780:	54800017 	ldw	r18,0(r10)
   89784:	48021116 	blt	r9,zero,89fcc <___vfiprintf_internal_r+0x119c>
   89788:	00ffdfc4 	movi	r3,-129
   8978c:	d8802215 	stw	r2,136(sp)
   89790:	a0e8703a 	and	r20,r20,r3
   89794:	903f5e1e 	bne	r18,zero,89510 <__alt_data_end+0xfffbda20>
   89798:	0039883a 	mov	fp,zero
   8979c:	4802a626 	beq	r9,zero,8a238 <___vfiprintf_internal_r+0x1408>
   897a0:	0025883a 	mov	r18,zero
   897a4:	0027883a 	mov	r19,zero
   897a8:	003f5a06 	br	89514 <__alt_data_end+0xfffbda24>
   897ac:	21003fcc 	andi	r4,r4,255
   897b0:	20029f1e 	bne	r4,zero,8a230 <___vfiprintf_internal_r+0x1400>
   897b4:	a5000414 	ori	r20,r20,16
   897b8:	a080080c 	andi	r2,r20,32
   897bc:	10005e1e 	bne	r2,zero,89938 <___vfiprintf_internal_r+0xb08>
   897c0:	a080040c 	andi	r2,r20,16
   897c4:	1001a21e 	bne	r2,zero,89e50 <___vfiprintf_internal_r+0x1020>
   897c8:	a080100c 	andi	r2,r20,64
   897cc:	d8001d85 	stb	zero,118(sp)
   897d0:	da802217 	ldw	r10,136(sp)
   897d4:	1002231e 	bne	r2,zero,8a064 <___vfiprintf_internal_r+0x1234>
   897d8:	50800104 	addi	r2,r10,4
   897dc:	54800017 	ldw	r18,0(r10)
   897e0:	0027883a 	mov	r19,zero
   897e4:	4801a00e 	bge	r9,zero,89e68 <___vfiprintf_internal_r+0x1038>
   897e8:	d8802215 	stw	r2,136(sp)
   897ec:	0039883a 	mov	fp,zero
   897f0:	94c4b03a 	or	r2,r18,r19
   897f4:	103f901e 	bne	r2,zero,89638 <__alt_data_end+0xfffbdb48>
   897f8:	00800044 	movi	r2,1
   897fc:	10803fcc 	andi	r2,r2,255
   89800:	00c00044 	movi	r3,1
   89804:	10c05926 	beq	r2,r3,8996c <___vfiprintf_internal_r+0xb3c>
   89808:	00c00084 	movi	r3,2
   8980c:	10ffe41e 	bne	r2,r3,897a0 <__alt_data_end+0xfffbdcb0>
   89810:	0025883a 	mov	r18,zero
   89814:	0027883a 	mov	r19,zero
   89818:	00013d06 	br	89d10 <___vfiprintf_internal_r+0xee0>
   8981c:	21003fcc 	andi	r4,r4,255
   89820:	2002811e 	bne	r4,zero,8a228 <___vfiprintf_internal_r+0x13f8>
   89824:	00800274 	movhi	r2,9
   89828:	1082a804 	addi	r2,r2,2720
   8982c:	d8802615 	stw	r2,152(sp)
   89830:	a080080c 	andi	r2,r20,32
   89834:	103f561e 	bne	r2,zero,89590 <__alt_data_end+0xfffbdaa0>
   89838:	a080040c 	andi	r2,r20,16
   8983c:	1001d126 	beq	r2,zero,89f84 <___vfiprintf_internal_r+0x1154>
   89840:	da802217 	ldw	r10,136(sp)
   89844:	0027883a 	mov	r19,zero
   89848:	54800017 	ldw	r18,0(r10)
   8984c:	52800104 	addi	r10,r10,4
   89850:	da802215 	stw	r10,136(sp)
   89854:	003f5306 	br	895a4 <__alt_data_end+0xfffbdab4>
   89858:	da802217 	ldw	r10,136(sp)
   8985c:	d8001d85 	stb	zero,118(sp)
   89860:	55400017 	ldw	r21,0(r10)
   89864:	50c00104 	addi	r3,r10,4
   89868:	a8024226 	beq	r21,zero,8a174 <___vfiprintf_internal_r+0x1344>
   8986c:	48021816 	blt	r9,zero,8a0d0 <___vfiprintf_internal_r+0x12a0>
   89870:	480d883a 	mov	r6,r9
   89874:	000b883a 	mov	r5,zero
   89878:	a809883a 	mov	r4,r21
   8987c:	d8c02a15 	stw	r3,168(sp)
   89880:	da002b15 	stw	r8,172(sp)
   89884:	da402c15 	stw	r9,176(sp)
   89888:	008702c0 	call	8702c <memchr>
   8988c:	d8c02a17 	ldw	r3,168(sp)
   89890:	da002b17 	ldw	r8,172(sp)
   89894:	da402c17 	ldw	r9,176(sp)
   89898:	10024826 	beq	r2,zero,8a1bc <___vfiprintf_internal_r+0x138c>
   8989c:	1567c83a 	sub	r19,r2,r21
   898a0:	df001d83 	ldbu	fp,118(sp)
   898a4:	d8c02215 	stw	r3,136(sp)
   898a8:	0013883a 	mov	r9,zero
   898ac:	003e6006 	br	89230 <__alt_data_end+0xfffbd740>
   898b0:	21003fcc 	andi	r4,r4,255
   898b4:	203fc026 	beq	r4,zero,897b8 <__alt_data_end+0xfffbdcc8>
   898b8:	d9c01d85 	stb	r7,118(sp)
   898bc:	003fbe06 	br	897b8 <__alt_data_end+0xfffbdcc8>
   898c0:	da802217 	ldw	r10,136(sp)
   898c4:	54400017 	ldw	r17,0(r10)
   898c8:	50800104 	addi	r2,r10,4
   898cc:	883e3b16 	blt	r17,zero,891bc <__alt_data_end+0xfffbd6cc>
   898d0:	d8802215 	stw	r2,136(sp)
   898d4:	80c00007 	ldb	r3,0(r16)
   898d8:	003db406 	br	88fac <__alt_data_end+0xfffbd4bc>
   898dc:	01000044 	movi	r4,1
   898e0:	01c00ac4 	movi	r7,43
   898e4:	80c00007 	ldb	r3,0(r16)
   898e8:	003db006 	br	88fac <__alt_data_end+0xfffbd4bc>
   898ec:	80c00007 	ldb	r3,0(r16)
   898f0:	82800044 	addi	r10,r16,1
   898f4:	1b423c26 	beq	r3,r13,8a1e8 <___vfiprintf_internal_r+0x13b8>
   898f8:	18bff404 	addi	r2,r3,-48
   898fc:	0013883a 	mov	r9,zero
   89900:	30822b36 	bltu	r6,r2,8a1b0 <___vfiprintf_internal_r+0x1380>
   89904:	50c00007 	ldb	r3,0(r10)
   89908:	4a4002a4 	muli	r9,r9,10
   8990c:	54000044 	addi	r16,r10,1
   89910:	8015883a 	mov	r10,r16
   89914:	4893883a 	add	r9,r9,r2
   89918:	18bff404 	addi	r2,r3,-48
   8991c:	30bff92e 	bgeu	r6,r2,89904 <__alt_data_end+0xfffbde14>
   89920:	483da30e 	bge	r9,zero,88fb0 <__alt_data_end+0xfffbd4c0>
   89924:	027fffc4 	movi	r9,-1
   89928:	003da106 	br	88fb0 <__alt_data_end+0xfffbd4c0>
   8992c:	a5001014 	ori	r20,r20,64
   89930:	80c00007 	ldb	r3,0(r16)
   89934:	003d9d06 	br	88fac <__alt_data_end+0xfffbd4bc>
   89938:	da802217 	ldw	r10,136(sp)
   8993c:	d8001d85 	stb	zero,118(sp)
   89940:	50c00204 	addi	r3,r10,8
   89944:	54800017 	ldw	r18,0(r10)
   89948:	54c00117 	ldw	r19,4(r10)
   8994c:	4801ca16 	blt	r9,zero,8a078 <___vfiprintf_internal_r+0x1248>
   89950:	013fdfc4 	movi	r4,-129
   89954:	94c4b03a 	or	r2,r18,r19
   89958:	d8c02215 	stw	r3,136(sp)
   8995c:	a128703a 	and	r20,r20,r4
   89960:	0039883a 	mov	fp,zero
   89964:	103f341e 	bne	r2,zero,89638 <__alt_data_end+0xfffbdb48>
   89968:	483e2e26 	beq	r9,zero,89224 <__alt_data_end+0xfffbd734>
   8996c:	0025883a 	mov	r18,zero
   89970:	94800c04 	addi	r18,r18,48
   89974:	dc8019c5 	stb	r18,103(sp)
   89978:	dcc02717 	ldw	r19,156(sp)
   8997c:	dd4019c4 	addi	r21,sp,103
   89980:	003e2b06 	br	89230 <__alt_data_end+0xfffbd740>
   89984:	21003fcc 	andi	r4,r4,255
   89988:	2002361e 	bne	r4,zero,8a264 <___vfiprintf_internal_r+0x1434>
   8998c:	1801c126 	beq	r3,zero,8a094 <___vfiprintf_internal_r+0x1264>
   89990:	04800044 	movi	r18,1
   89994:	d8c01005 	stb	r3,64(sp)
   89998:	d8001d85 	stb	zero,118(sp)
   8999c:	9027883a 	mov	r19,r18
   899a0:	dd401004 	addi	r21,sp,64
   899a4:	003f1106 	br	895ec <__alt_data_end+0xfffbdafc>
   899a8:	d9402117 	ldw	r5,132(sp)
   899ac:	d9002017 	ldw	r4,128(sp)
   899b0:	d9801a04 	addi	r6,sp,104
   899b4:	d9c02b15 	stw	r7,172(sp)
   899b8:	dbc02a15 	stw	r15,168(sp)
   899bc:	0088d1c0 	call	88d1c <__sprint_r.part.0>
   899c0:	d9c02b17 	ldw	r7,172(sp)
   899c4:	dbc02a17 	ldw	r15,168(sp)
   899c8:	10006d1e 	bne	r2,zero,89b80 <___vfiprintf_internal_r+0xd50>
   899cc:	d9801b17 	ldw	r6,108(sp)
   899d0:	d8801c17 	ldw	r2,112(sp)
   899d4:	d811883a 	mov	r8,sp
   899d8:	31400044 	addi	r5,r6,1
   899dc:	003e3306 	br	892ac <__alt_data_end+0xfffbd7bc>
   899e0:	d9401b17 	ldw	r5,108(sp)
   899e4:	d8801c17 	ldw	r2,112(sp)
   899e8:	29000044 	addi	r4,r5,1
   899ec:	d8c01d87 	ldb	r3,118(sp)
   899f0:	183e4d26 	beq	r3,zero,89328 <__alt_data_end+0xfffbd838>
   899f4:	00c00044 	movi	r3,1
   899f8:	d9401d84 	addi	r5,sp,118
   899fc:	10c5883a 	add	r2,r2,r3
   89a00:	41400015 	stw	r5,0(r8)
   89a04:	40c00115 	stw	r3,4(r8)
   89a08:	d8801c15 	stw	r2,112(sp)
   89a0c:	d9001b15 	stw	r4,108(sp)
   89a10:	014001c4 	movi	r5,7
   89a14:	2900a90e 	bge	r5,r4,89cbc <___vfiprintf_internal_r+0xe8c>
   89a18:	1000da1e 	bne	r2,zero,89d84 <___vfiprintf_internal_r+0xf54>
   89a1c:	7000ab1e 	bne	r14,zero,89ccc <___vfiprintf_internal_r+0xe9c>
   89a20:	000b883a 	mov	r5,zero
   89a24:	1809883a 	mov	r4,r3
   89a28:	d811883a 	mov	r8,sp
   89a2c:	00c02004 	movi	r3,128
   89a30:	e0fe4d26 	beq	fp,r3,89368 <__alt_data_end+0xfffbd878>
   89a34:	4cf9c83a 	sub	fp,r9,r19
   89a38:	073e7b0e 	bge	zero,fp,89428 <__alt_data_end+0xfffbd938>
   89a3c:	01c00404 	movi	r7,16
   89a40:	3f01900e 	bge	r7,fp,8a084 <___vfiprintf_internal_r+0x1254>
   89a44:	00c00274 	movhi	r3,9
   89a48:	18c30e04 	addi	r3,r3,3128
   89a4c:	d8c02415 	stw	r3,144(sp)
   89a50:	034001c4 	movi	r13,7
   89a54:	00000506 	br	89a6c <___vfiprintf_internal_r+0xc3c>
   89a58:	29000084 	addi	r4,r5,2
   89a5c:	42000204 	addi	r8,r8,8
   89a60:	180b883a 	mov	r5,r3
   89a64:	e73ffc04 	addi	fp,fp,-16
   89a68:	3f000d0e 	bge	r7,fp,89aa0 <___vfiprintf_internal_r+0xc70>
   89a6c:	10800404 	addi	r2,r2,16
   89a70:	28c00044 	addi	r3,r5,1
   89a74:	45c00015 	stw	r23,0(r8)
   89a78:	41c00115 	stw	r7,4(r8)
   89a7c:	d8801c15 	stw	r2,112(sp)
   89a80:	d8c01b15 	stw	r3,108(sp)
   89a84:	68fff40e 	bge	r13,r3,89a58 <__alt_data_end+0xfffbdf68>
   89a88:	1000101e 	bne	r2,zero,89acc <___vfiprintf_internal_r+0xc9c>
   89a8c:	e73ffc04 	addi	fp,fp,-16
   89a90:	01000044 	movi	r4,1
   89a94:	000b883a 	mov	r5,zero
   89a98:	d811883a 	mov	r8,sp
   89a9c:	3f3ff316 	blt	r7,fp,89a6c <__alt_data_end+0xfffbdf7c>
   89aa0:	da802417 	ldw	r10,144(sp)
   89aa4:	1705883a 	add	r2,r2,fp
   89aa8:	47000115 	stw	fp,4(r8)
   89aac:	42800015 	stw	r10,0(r8)
   89ab0:	d8801c15 	stw	r2,112(sp)
   89ab4:	d9001b15 	stw	r4,108(sp)
   89ab8:	00c001c4 	movi	r3,7
   89abc:	19003616 	blt	r3,r4,89b98 <___vfiprintf_internal_r+0xd68>
   89ac0:	42000204 	addi	r8,r8,8
   89ac4:	21000044 	addi	r4,r4,1
   89ac8:	003e5706 	br	89428 <__alt_data_end+0xfffbd938>
   89acc:	d9402117 	ldw	r5,132(sp)
   89ad0:	d9002017 	ldw	r4,128(sp)
   89ad4:	d9801a04 	addi	r6,sp,104
   89ad8:	d9c02b15 	stw	r7,172(sp)
   89adc:	db402a15 	stw	r13,168(sp)
   89ae0:	0088d1c0 	call	88d1c <__sprint_r.part.0>
   89ae4:	d9c02b17 	ldw	r7,172(sp)
   89ae8:	db402a17 	ldw	r13,168(sp)
   89aec:	1000241e 	bne	r2,zero,89b80 <___vfiprintf_internal_r+0xd50>
   89af0:	d9401b17 	ldw	r5,108(sp)
   89af4:	d8801c17 	ldw	r2,112(sp)
   89af8:	d811883a 	mov	r8,sp
   89afc:	29000044 	addi	r4,r5,1
   89b00:	003fd806 	br	89a64 <__alt_data_end+0xfffbdf74>
   89b04:	d9401b17 	ldw	r5,108(sp)
   89b08:	00c00274 	movhi	r3,9
   89b0c:	18c31204 	addi	r3,r3,3144
   89b10:	d8c02415 	stw	r3,144(sp)
   89b14:	29400044 	addi	r5,r5,1
   89b18:	d8c02417 	ldw	r3,144(sp)
   89b1c:	14c5883a 	add	r2,r2,r19
   89b20:	44c00115 	stw	r19,4(r8)
   89b24:	40c00015 	stw	r3,0(r8)
   89b28:	d8801c15 	stw	r2,112(sp)
   89b2c:	d9401b15 	stw	r5,108(sp)
   89b30:	00c001c4 	movi	r3,7
   89b34:	1940070e 	bge	r3,r5,89b54 <___vfiprintf_internal_r+0xd24>
   89b38:	103e4826 	beq	r2,zero,8945c <__alt_data_end+0xfffbd96c>
   89b3c:	d9402117 	ldw	r5,132(sp)
   89b40:	d9002017 	ldw	r4,128(sp)
   89b44:	d9801a04 	addi	r6,sp,104
   89b48:	0088d1c0 	call	88d1c <__sprint_r.part.0>
   89b4c:	10000c1e 	bne	r2,zero,89b80 <___vfiprintf_internal_r+0xd50>
   89b50:	d8801c17 	ldw	r2,112(sp)
   89b54:	8c80010e 	bge	r17,r18,89b5c <___vfiprintf_internal_r+0xd2c>
   89b58:	9023883a 	mov	r17,r18
   89b5c:	da802317 	ldw	r10,140(sp)
   89b60:	5455883a 	add	r10,r10,r17
   89b64:	da802315 	stw	r10,140(sp)
   89b68:	103e4126 	beq	r2,zero,89470 <__alt_data_end+0xfffbd980>
   89b6c:	d9402117 	ldw	r5,132(sp)
   89b70:	d9002017 	ldw	r4,128(sp)
   89b74:	d9801a04 	addi	r6,sp,104
   89b78:	0088d1c0 	call	88d1c <__sprint_r.part.0>
   89b7c:	103e3c26 	beq	r2,zero,89470 <__alt_data_end+0xfffbd980>
   89b80:	dd002117 	ldw	r20,132(sp)
   89b84:	a080030b 	ldhu	r2,12(r20)
   89b88:	1080100c 	andi	r2,r2,64
   89b8c:	1001231e 	bne	r2,zero,8a01c <___vfiprintf_internal_r+0x11ec>
   89b90:	d8802317 	ldw	r2,140(sp)
   89b94:	003d7b06 	br	89184 <__alt_data_end+0xfffbd694>
   89b98:	1000991e 	bne	r2,zero,89e00 <___vfiprintf_internal_r+0xfd0>
   89b9c:	00c00044 	movi	r3,1
   89ba0:	9805883a 	mov	r2,r19
   89ba4:	dd400015 	stw	r21,0(sp)
   89ba8:	dcc00115 	stw	r19,4(sp)
   89bac:	dcc01c15 	stw	r19,112(sp)
   89bb0:	d8c01b15 	stw	r3,108(sp)
   89bb4:	d811883a 	mov	r8,sp
   89bb8:	42000204 	addi	r8,r8,8
   89bbc:	a2c0010c 	andi	r11,r20,4
   89bc0:	583fe426 	beq	r11,zero,89b54 <__alt_data_end+0xfffbe064>
   89bc4:	8ca7c83a 	sub	r19,r17,r18
   89bc8:	04ffe20e 	bge	zero,r19,89b54 <__alt_data_end+0xfffbe064>
   89bcc:	01c00404 	movi	r7,16
   89bd0:	3cffcc0e 	bge	r7,r19,89b04 <__alt_data_end+0xfffbe014>
   89bd4:	02800274 	movhi	r10,9
   89bd8:	52831204 	addi	r10,r10,3144
   89bdc:	d9001b17 	ldw	r4,108(sp)
   89be0:	da802415 	stw	r10,144(sp)
   89be4:	382b883a 	mov	r21,r7
   89be8:	050001c4 	movi	r20,7
   89bec:	df002017 	ldw	fp,128(sp)
   89bf0:	00000506 	br	89c08 <___vfiprintf_internal_r+0xdd8>
   89bf4:	21400084 	addi	r5,r4,2
   89bf8:	42000204 	addi	r8,r8,8
   89bfc:	1809883a 	mov	r4,r3
   89c00:	9cfffc04 	addi	r19,r19,-16
   89c04:	acffc40e 	bge	r21,r19,89b18 <__alt_data_end+0xfffbe028>
   89c08:	10800404 	addi	r2,r2,16
   89c0c:	20c00044 	addi	r3,r4,1
   89c10:	45800015 	stw	r22,0(r8)
   89c14:	45400115 	stw	r21,4(r8)
   89c18:	d8801c15 	stw	r2,112(sp)
   89c1c:	d8c01b15 	stw	r3,108(sp)
   89c20:	a0fff40e 	bge	r20,r3,89bf4 <__alt_data_end+0xfffbe104>
   89c24:	1000041e 	bne	r2,zero,89c38 <___vfiprintf_internal_r+0xe08>
   89c28:	01400044 	movi	r5,1
   89c2c:	0009883a 	mov	r4,zero
   89c30:	d811883a 	mov	r8,sp
   89c34:	003ff206 	br	89c00 <__alt_data_end+0xfffbe110>
   89c38:	d9402117 	ldw	r5,132(sp)
   89c3c:	d9801a04 	addi	r6,sp,104
   89c40:	e009883a 	mov	r4,fp
   89c44:	0088d1c0 	call	88d1c <__sprint_r.part.0>
   89c48:	103fcd1e 	bne	r2,zero,89b80 <__alt_data_end+0xfffbe090>
   89c4c:	d9001b17 	ldw	r4,108(sp)
   89c50:	d8801c17 	ldw	r2,112(sp)
   89c54:	d811883a 	mov	r8,sp
   89c58:	21400044 	addi	r5,r4,1
   89c5c:	003fe806 	br	89c00 <__alt_data_end+0xfffbe110>
   89c60:	d9402117 	ldw	r5,132(sp)
   89c64:	d9002017 	ldw	r4,128(sp)
   89c68:	d9801a04 	addi	r6,sp,104
   89c6c:	d9c02b15 	stw	r7,172(sp)
   89c70:	db402a15 	stw	r13,168(sp)
   89c74:	0088d1c0 	call	88d1c <__sprint_r.part.0>
   89c78:	d9c02b17 	ldw	r7,172(sp)
   89c7c:	db402a17 	ldw	r13,168(sp)
   89c80:	103fbf1e 	bne	r2,zero,89b80 <__alt_data_end+0xfffbe090>
   89c84:	d9401b17 	ldw	r5,108(sp)
   89c88:	d8801c17 	ldw	r2,112(sp)
   89c8c:	d811883a 	mov	r8,sp
   89c90:	29800044 	addi	r6,r5,1
   89c94:	003dc406 	br	893a8 <__alt_data_end+0xfffbd8b8>
   89c98:	1000d21e 	bne	r2,zero,89fe4 <___vfiprintf_internal_r+0x11b4>
   89c9c:	d8c01d87 	ldb	r3,118(sp)
   89ca0:	18009526 	beq	r3,zero,89ef8 <___vfiprintf_internal_r+0x10c8>
   89ca4:	00800044 	movi	r2,1
   89ca8:	d8c01d84 	addi	r3,sp,118
   89cac:	1009883a 	mov	r4,r2
   89cb0:	d8c00015 	stw	r3,0(sp)
   89cb4:	d8800115 	stw	r2,4(sp)
   89cb8:	d811883a 	mov	r8,sp
   89cbc:	200b883a 	mov	r5,r4
   89cc0:	42000204 	addi	r8,r8,8
   89cc4:	21000044 	addi	r4,r4,1
   89cc8:	003d9706 	br	89328 <__alt_data_end+0xfffbd838>
   89ccc:	d9001d04 	addi	r4,sp,116
   89cd0:	00800084 	movi	r2,2
   89cd4:	d9000015 	stw	r4,0(sp)
   89cd8:	d8800115 	stw	r2,4(sp)
   89cdc:	1809883a 	mov	r4,r3
   89ce0:	d811883a 	mov	r8,sp
   89ce4:	200b883a 	mov	r5,r4
   89ce8:	42000204 	addi	r8,r8,8
   89cec:	21000044 	addi	r4,r4,1
   89cf0:	003f4e06 	br	89a2c <__alt_data_end+0xfffbdf3c>
   89cf4:	d8001d85 	stb	zero,118(sp)
   89cf8:	48005016 	blt	r9,zero,89e3c <___vfiprintf_internal_r+0x100c>
   89cfc:	00ffdfc4 	movi	r3,-129
   89d00:	94c4b03a 	or	r2,r18,r19
   89d04:	a0e8703a 	and	r20,r20,r3
   89d08:	103d4426 	beq	r2,zero,8921c <__alt_data_end+0xfffbd72c>
   89d0c:	0039883a 	mov	fp,zero
   89d10:	d9002617 	ldw	r4,152(sp)
   89d14:	dd401a04 	addi	r21,sp,104
   89d18:	908003cc 	andi	r2,r18,15
   89d1c:	9806973a 	slli	r3,r19,28
   89d20:	2085883a 	add	r2,r4,r2
   89d24:	9024d13a 	srli	r18,r18,4
   89d28:	10800003 	ldbu	r2,0(r2)
   89d2c:	9826d13a 	srli	r19,r19,4
   89d30:	ad7fffc4 	addi	r21,r21,-1
   89d34:	1ca4b03a 	or	r18,r3,r18
   89d38:	a8800005 	stb	r2,0(r21)
   89d3c:	94c4b03a 	or	r2,r18,r19
   89d40:	103ff51e 	bne	r2,zero,89d18 <__alt_data_end+0xfffbe228>
   89d44:	003e5906 	br	896ac <__alt_data_end+0xfffbdbbc>
   89d48:	d9402117 	ldw	r5,132(sp)
   89d4c:	d9002017 	ldw	r4,128(sp)
   89d50:	d9801a04 	addi	r6,sp,104
   89d54:	0088d1c0 	call	88d1c <__sprint_r.part.0>
   89d58:	103f891e 	bne	r2,zero,89b80 <__alt_data_end+0xfffbe090>
   89d5c:	d8801c17 	ldw	r2,112(sp)
   89d60:	d811883a 	mov	r8,sp
   89d64:	003f9506 	br	89bbc <__alt_data_end+0xfffbe0cc>
   89d68:	d9402117 	ldw	r5,132(sp)
   89d6c:	d9002017 	ldw	r4,128(sp)
   89d70:	d9801a04 	addi	r6,sp,104
   89d74:	0088d1c0 	call	88d1c <__sprint_r.part.0>
   89d78:	103f811e 	bne	r2,zero,89b80 <__alt_data_end+0xfffbe090>
   89d7c:	d811883a 	mov	r8,sp
   89d80:	003ced06 	br	89138 <__alt_data_end+0xfffbd648>
   89d84:	d9402117 	ldw	r5,132(sp)
   89d88:	d9002017 	ldw	r4,128(sp)
   89d8c:	d9801a04 	addi	r6,sp,104
   89d90:	da402c15 	stw	r9,176(sp)
   89d94:	db802a15 	stw	r14,168(sp)
   89d98:	0088d1c0 	call	88d1c <__sprint_r.part.0>
   89d9c:	da402c17 	ldw	r9,176(sp)
   89da0:	db802a17 	ldw	r14,168(sp)
   89da4:	103f761e 	bne	r2,zero,89b80 <__alt_data_end+0xfffbe090>
   89da8:	d9401b17 	ldw	r5,108(sp)
   89dac:	d8801c17 	ldw	r2,112(sp)
   89db0:	d811883a 	mov	r8,sp
   89db4:	29000044 	addi	r4,r5,1
   89db8:	003d5b06 	br	89328 <__alt_data_end+0xfffbd838>
   89dbc:	d9402117 	ldw	r5,132(sp)
   89dc0:	d9002017 	ldw	r4,128(sp)
   89dc4:	d9801a04 	addi	r6,sp,104
   89dc8:	da402c15 	stw	r9,176(sp)
   89dcc:	0088d1c0 	call	88d1c <__sprint_r.part.0>
   89dd0:	da402c17 	ldw	r9,176(sp)
   89dd4:	103f6a1e 	bne	r2,zero,89b80 <__alt_data_end+0xfffbe090>
   89dd8:	d9401b17 	ldw	r5,108(sp)
   89ddc:	d8801c17 	ldw	r2,112(sp)
   89de0:	d811883a 	mov	r8,sp
   89de4:	29000044 	addi	r4,r5,1
   89de8:	003f1006 	br	89a2c <__alt_data_end+0xfffbdf3c>
   89dec:	1000c31e 	bne	r2,zero,8a0fc <___vfiprintf_internal_r+0x12cc>
   89df0:	01000044 	movi	r4,1
   89df4:	000b883a 	mov	r5,zero
   89df8:	d811883a 	mov	r8,sp
   89dfc:	003f0d06 	br	89a34 <__alt_data_end+0xfffbdf44>
   89e00:	d9402117 	ldw	r5,132(sp)
   89e04:	d9002017 	ldw	r4,128(sp)
   89e08:	d9801a04 	addi	r6,sp,104
   89e0c:	0088d1c0 	call	88d1c <__sprint_r.part.0>
   89e10:	103f5b1e 	bne	r2,zero,89b80 <__alt_data_end+0xfffbe090>
   89e14:	d9001b17 	ldw	r4,108(sp)
   89e18:	d8801c17 	ldw	r2,112(sp)
   89e1c:	d811883a 	mov	r8,sp
   89e20:	21000044 	addi	r4,r4,1
   89e24:	003d8006 	br	89428 <__alt_data_end+0xfffbd938>
   89e28:	01000274 	movhi	r4,9
   89e2c:	2102ad04 	addi	r4,r4,2740
   89e30:	d9002615 	stw	r4,152(sp)
   89e34:	d8c02215 	stw	r3,136(sp)
   89e38:	1029883a 	mov	r20,r2
   89e3c:	94c4b03a 	or	r2,r18,r19
   89e40:	103fb21e 	bne	r2,zero,89d0c <__alt_data_end+0xfffbe21c>
   89e44:	0039883a 	mov	fp,zero
   89e48:	00800084 	movi	r2,2
   89e4c:	003e6b06 	br	897fc <__alt_data_end+0xfffbdd0c>
   89e50:	da802217 	ldw	r10,136(sp)
   89e54:	d8001d85 	stb	zero,118(sp)
   89e58:	0027883a 	mov	r19,zero
   89e5c:	50800104 	addi	r2,r10,4
   89e60:	54800017 	ldw	r18,0(r10)
   89e64:	483e6016 	blt	r9,zero,897e8 <__alt_data_end+0xfffbdcf8>
   89e68:	00ffdfc4 	movi	r3,-129
   89e6c:	d8802215 	stw	r2,136(sp)
   89e70:	a0e8703a 	and	r20,r20,r3
   89e74:	0039883a 	mov	fp,zero
   89e78:	903ebb26 	beq	r18,zero,89968 <__alt_data_end+0xfffbde78>
   89e7c:	00800244 	movi	r2,9
   89e80:	14bdee36 	bltu	r2,r18,8963c <__alt_data_end+0xfffbdb4c>
   89e84:	003eba06 	br	89970 <__alt_data_end+0xfffbde80>
   89e88:	00800c04 	movi	r2,48
   89e8c:	d8c01d45 	stb	r3,117(sp)
   89e90:	d8801d05 	stb	r2,116(sp)
   89e94:	d8001d85 	stb	zero,118(sp)
   89e98:	a0c00094 	ori	r3,r20,2
   89e9c:	4800a916 	blt	r9,zero,8a144 <___vfiprintf_internal_r+0x1314>
   89ea0:	00bfdfc4 	movi	r2,-129
   89ea4:	a096703a 	and	r11,r20,r2
   89ea8:	5d000094 	ori	r20,r11,2
   89eac:	0039883a 	mov	fp,zero
   89eb0:	003f9706 	br	89d10 <__alt_data_end+0xfffbe220>
   89eb4:	8025883a 	mov	r18,r16
   89eb8:	003c2e06 	br	88f74 <__alt_data_end+0xfffbd484>
   89ebc:	00800274 	movhi	r2,9
   89ec0:	1082ad04 	addi	r2,r2,2740
   89ec4:	0039883a 	mov	fp,zero
   89ec8:	d8802615 	stw	r2,152(sp)
   89ecc:	003f9006 	br	89d10 <__alt_data_end+0xfffbe220>
   89ed0:	04a5c83a 	sub	r18,zero,r18
   89ed4:	07000b44 	movi	fp,45
   89ed8:	9004c03a 	cmpne	r2,r18,zero
   89edc:	04e7c83a 	sub	r19,zero,r19
   89ee0:	df001d85 	stb	fp,118(sp)
   89ee4:	98a7c83a 	sub	r19,r19,r2
   89ee8:	48009f16 	blt	r9,zero,8a168 <___vfiprintf_internal_r+0x1338>
   89eec:	00bfdfc4 	movi	r2,-129
   89ef0:	a0a8703a 	and	r20,r20,r2
   89ef4:	003dd006 	br	89638 <__alt_data_end+0xfffbdb48>
   89ef8:	70004c26 	beq	r14,zero,8a02c <___vfiprintf_internal_r+0x11fc>
   89efc:	00800084 	movi	r2,2
   89f00:	d8c01d04 	addi	r3,sp,116
   89f04:	d8c00015 	stw	r3,0(sp)
   89f08:	d8800115 	stw	r2,4(sp)
   89f0c:	01000044 	movi	r4,1
   89f10:	d811883a 	mov	r8,sp
   89f14:	003f7306 	br	89ce4 <__alt_data_end+0xfffbe1f4>
   89f18:	a080100c 	andi	r2,r20,64
   89f1c:	da802217 	ldw	r10,136(sp)
   89f20:	103e0626 	beq	r2,zero,8973c <__alt_data_end+0xfffbdc4c>
   89f24:	5480000f 	ldh	r18,0(r10)
   89f28:	52800104 	addi	r10,r10,4
   89f2c:	da802215 	stw	r10,136(sp)
   89f30:	9027d7fa 	srai	r19,r18,31
   89f34:	9805883a 	mov	r2,r19
   89f38:	003db806 	br	8961c <__alt_data_end+0xfffbdb2c>
   89f3c:	a080040c 	andi	r2,r20,16
   89f40:	1000091e 	bne	r2,zero,89f68 <___vfiprintf_internal_r+0x1138>
   89f44:	a2c0100c 	andi	r11,r20,64
   89f48:	58000726 	beq	r11,zero,89f68 <___vfiprintf_internal_r+0x1138>
   89f4c:	da802217 	ldw	r10,136(sp)
   89f50:	50800017 	ldw	r2,0(r10)
   89f54:	52800104 	addi	r10,r10,4
   89f58:	da802215 	stw	r10,136(sp)
   89f5c:	da802317 	ldw	r10,140(sp)
   89f60:	1280000d 	sth	r10,0(r2)
   89f64:	003be706 	br	88f04 <__alt_data_end+0xfffbd414>
   89f68:	da802217 	ldw	r10,136(sp)
   89f6c:	50800017 	ldw	r2,0(r10)
   89f70:	52800104 	addi	r10,r10,4
   89f74:	da802215 	stw	r10,136(sp)
   89f78:	da802317 	ldw	r10,140(sp)
   89f7c:	12800015 	stw	r10,0(r2)
   89f80:	003be006 	br	88f04 <__alt_data_end+0xfffbd414>
   89f84:	a080100c 	andi	r2,r20,64
   89f88:	da802217 	ldw	r10,136(sp)
   89f8c:	10003026 	beq	r2,zero,8a050 <___vfiprintf_internal_r+0x1220>
   89f90:	5480000b 	ldhu	r18,0(r10)
   89f94:	52800104 	addi	r10,r10,4
   89f98:	0027883a 	mov	r19,zero
   89f9c:	da802215 	stw	r10,136(sp)
   89fa0:	003d8006 	br	895a4 <__alt_data_end+0xfffbdab4>
   89fa4:	80c00007 	ldb	r3,0(r16)
   89fa8:	003c0006 	br	88fac <__alt_data_end+0xfffbd4bc>
   89fac:	a080100c 	andi	r2,r20,64
   89fb0:	d8001d85 	stb	zero,118(sp)
   89fb4:	da802217 	ldw	r10,136(sp)
   89fb8:	1000201e 	bne	r2,zero,8a03c <___vfiprintf_internal_r+0x120c>
   89fbc:	50800104 	addi	r2,r10,4
   89fc0:	54800017 	ldw	r18,0(r10)
   89fc4:	0027883a 	mov	r19,zero
   89fc8:	483def0e 	bge	r9,zero,89788 <__alt_data_end+0xfffbdc98>
   89fcc:	94c6b03a 	or	r3,r18,r19
   89fd0:	d8802215 	stw	r2,136(sp)
   89fd4:	183d4e1e 	bne	r3,zero,89510 <__alt_data_end+0xfffbda20>
   89fd8:	0039883a 	mov	fp,zero
   89fdc:	0005883a 	mov	r2,zero
   89fe0:	003e0606 	br	897fc <__alt_data_end+0xfffbdd0c>
   89fe4:	d9402117 	ldw	r5,132(sp)
   89fe8:	d9002017 	ldw	r4,128(sp)
   89fec:	d9801a04 	addi	r6,sp,104
   89ff0:	da402c15 	stw	r9,176(sp)
   89ff4:	db802a15 	stw	r14,168(sp)
   89ff8:	0088d1c0 	call	88d1c <__sprint_r.part.0>
   89ffc:	da402c17 	ldw	r9,176(sp)
   8a000:	db802a17 	ldw	r14,168(sp)
   8a004:	103ede1e 	bne	r2,zero,89b80 <__alt_data_end+0xfffbe090>
   8a008:	d9401b17 	ldw	r5,108(sp)
   8a00c:	d8801c17 	ldw	r2,112(sp)
   8a010:	d811883a 	mov	r8,sp
   8a014:	29000044 	addi	r4,r5,1
   8a018:	003e7406 	br	899ec <__alt_data_end+0xfffbdefc>
   8a01c:	00bfffc4 	movi	r2,-1
   8a020:	003c5806 	br	89184 <__alt_data_end+0xfffbd694>
   8a024:	d811883a 	mov	r8,sp
   8a028:	003ee806 	br	89bcc <__alt_data_end+0xfffbe0dc>
   8a02c:	000b883a 	mov	r5,zero
   8a030:	01000044 	movi	r4,1
   8a034:	d811883a 	mov	r8,sp
   8a038:	003e7c06 	br	89a2c <__alt_data_end+0xfffbdf3c>
   8a03c:	50800104 	addi	r2,r10,4
   8a040:	5480000b 	ldhu	r18,0(r10)
   8a044:	0027883a 	mov	r19,zero
   8a048:	483dcf0e 	bge	r9,zero,89788 <__alt_data_end+0xfffbdc98>
   8a04c:	003fdf06 	br	89fcc <__alt_data_end+0xfffbe4dc>
   8a050:	54800017 	ldw	r18,0(r10)
   8a054:	52800104 	addi	r10,r10,4
   8a058:	0027883a 	mov	r19,zero
   8a05c:	da802215 	stw	r10,136(sp)
   8a060:	003d5006 	br	895a4 <__alt_data_end+0xfffbdab4>
   8a064:	50800104 	addi	r2,r10,4
   8a068:	5480000b 	ldhu	r18,0(r10)
   8a06c:	0027883a 	mov	r19,zero
   8a070:	483f7d0e 	bge	r9,zero,89e68 <__alt_data_end+0xfffbe378>
   8a074:	003ddc06 	br	897e8 <__alt_data_end+0xfffbdcf8>
   8a078:	d8c02215 	stw	r3,136(sp)
   8a07c:	0039883a 	mov	fp,zero
   8a080:	003ddb06 	br	897f0 <__alt_data_end+0xfffbdd00>
   8a084:	02800274 	movhi	r10,9
   8a088:	52830e04 	addi	r10,r10,3128
   8a08c:	da802415 	stw	r10,144(sp)
   8a090:	003e8306 	br	89aa0 <__alt_data_end+0xfffbdfb0>
   8a094:	d8801c17 	ldw	r2,112(sp)
   8a098:	dd002117 	ldw	r20,132(sp)
   8a09c:	103eb926 	beq	r2,zero,89b84 <__alt_data_end+0xfffbe094>
   8a0a0:	d9002017 	ldw	r4,128(sp)
   8a0a4:	d9801a04 	addi	r6,sp,104
   8a0a8:	a00b883a 	mov	r5,r20
   8a0ac:	0088d1c0 	call	88d1c <__sprint_r.part.0>
   8a0b0:	003eb406 	br	89b84 <__alt_data_end+0xfffbe094>
   8a0b4:	80c00043 	ldbu	r3,1(r16)
   8a0b8:	a5000814 	ori	r20,r20,32
   8a0bc:	84000044 	addi	r16,r16,1
   8a0c0:	18c03fcc 	andi	r3,r3,255
   8a0c4:	18c0201c 	xori	r3,r3,128
   8a0c8:	18ffe004 	addi	r3,r3,-128
   8a0cc:	003bb706 	br	88fac <__alt_data_end+0xfffbd4bc>
   8a0d0:	a809883a 	mov	r4,r21
   8a0d4:	d8c02a15 	stw	r3,168(sp)
   8a0d8:	da002b15 	stw	r8,172(sp)
   8a0dc:	00816d80 	call	816d8 <strlen>
   8a0e0:	d8c02a17 	ldw	r3,168(sp)
   8a0e4:	1027883a 	mov	r19,r2
   8a0e8:	df001d83 	ldbu	fp,118(sp)
   8a0ec:	d8c02215 	stw	r3,136(sp)
   8a0f0:	0013883a 	mov	r9,zero
   8a0f4:	da002b17 	ldw	r8,172(sp)
   8a0f8:	003c4d06 	br	89230 <__alt_data_end+0xfffbd740>
   8a0fc:	d9402117 	ldw	r5,132(sp)
   8a100:	d9002017 	ldw	r4,128(sp)
   8a104:	d9801a04 	addi	r6,sp,104
   8a108:	da402c15 	stw	r9,176(sp)
   8a10c:	0088d1c0 	call	88d1c <__sprint_r.part.0>
   8a110:	da402c17 	ldw	r9,176(sp)
   8a114:	103e9a1e 	bne	r2,zero,89b80 <__alt_data_end+0xfffbe090>
   8a118:	d9401b17 	ldw	r5,108(sp)
   8a11c:	d8801c17 	ldw	r2,112(sp)
   8a120:	d811883a 	mov	r8,sp
   8a124:	29000044 	addi	r4,r5,1
   8a128:	003e4206 	br	89a34 <__alt_data_end+0xfffbdf44>
   8a12c:	d9401b17 	ldw	r5,108(sp)
   8a130:	01000274 	movhi	r4,9
   8a134:	21031204 	addi	r4,r4,3144
   8a138:	d9002415 	stw	r4,144(sp)
   8a13c:	29400044 	addi	r5,r5,1
   8a140:	003c6d06 	br	892f8 <__alt_data_end+0xfffbd808>
   8a144:	0039883a 	mov	fp,zero
   8a148:	00800084 	movi	r2,2
   8a14c:	10803fcc 	andi	r2,r2,255
   8a150:	01000044 	movi	r4,1
   8a154:	11001e26 	beq	r2,r4,8a1d0 <___vfiprintf_internal_r+0x13a0>
   8a158:	01000084 	movi	r4,2
   8a15c:	11001e1e 	bne	r2,r4,8a1d8 <___vfiprintf_internal_r+0x13a8>
   8a160:	1829883a 	mov	r20,r3
   8a164:	003eea06 	br	89d10 <__alt_data_end+0xfffbe220>
   8a168:	a007883a 	mov	r3,r20
   8a16c:	00800044 	movi	r2,1
   8a170:	003ff606 	br	8a14c <__alt_data_end+0xfffbe65c>
   8a174:	00800184 	movi	r2,6
   8a178:	1240012e 	bgeu	r2,r9,8a180 <___vfiprintf_internal_r+0x1350>
   8a17c:	1013883a 	mov	r9,r2
   8a180:	4827883a 	mov	r19,r9
   8a184:	4825883a 	mov	r18,r9
   8a188:	48001516 	blt	r9,zero,8a1e0 <___vfiprintf_internal_r+0x13b0>
   8a18c:	05400274 	movhi	r21,9
   8a190:	d8c02215 	stw	r3,136(sp)
   8a194:	ad42b204 	addi	r21,r21,2760
   8a198:	003d1406 	br	895ec <__alt_data_end+0xfffbdafc>
   8a19c:	02800274 	movhi	r10,9
   8a1a0:	52830e04 	addi	r10,r10,3128
   8a1a4:	da802415 	stw	r10,144(sp)
   8a1a8:	200d883a 	mov	r6,r4
   8a1ac:	003c9106 	br	893f4 <__alt_data_end+0xfffbd904>
   8a1b0:	5021883a 	mov	r16,r10
   8a1b4:	0013883a 	mov	r9,zero
   8a1b8:	003b7d06 	br	88fb0 <__alt_data_end+0xfffbd4c0>
   8a1bc:	4827883a 	mov	r19,r9
   8a1c0:	df001d83 	ldbu	fp,118(sp)
   8a1c4:	d8c02215 	stw	r3,136(sp)
   8a1c8:	0013883a 	mov	r9,zero
   8a1cc:	003c1806 	br	89230 <__alt_data_end+0xfffbd740>
   8a1d0:	1829883a 	mov	r20,r3
   8a1d4:	003d1806 	br	89638 <__alt_data_end+0xfffbdb48>
   8a1d8:	1829883a 	mov	r20,r3
   8a1dc:	003ccd06 	br	89514 <__alt_data_end+0xfffbda24>
   8a1e0:	0025883a 	mov	r18,zero
   8a1e4:	003fe906 	br	8a18c <__alt_data_end+0xfffbe69c>
   8a1e8:	d8802217 	ldw	r2,136(sp)
   8a1ec:	80c00043 	ldbu	r3,1(r16)
   8a1f0:	5021883a 	mov	r16,r10
   8a1f4:	12400017 	ldw	r9,0(r2)
   8a1f8:	10800104 	addi	r2,r2,4
   8a1fc:	d8802215 	stw	r2,136(sp)
   8a200:	483faf0e 	bge	r9,zero,8a0c0 <__alt_data_end+0xfffbe5d0>
   8a204:	18c03fcc 	andi	r3,r3,255
   8a208:	18c0201c 	xori	r3,r3,128
   8a20c:	027fffc4 	movi	r9,-1
   8a210:	18ffe004 	addi	r3,r3,-128
   8a214:	003b6506 	br	88fac <__alt_data_end+0xfffbd4bc>
   8a218:	d9c01d85 	stb	r7,118(sp)
   8a21c:	003ca006 	br	894a0 <__alt_data_end+0xfffbd9b0>
   8a220:	d9c01d85 	stb	r7,118(sp)
   8a224:	003cad06 	br	894dc <__alt_data_end+0xfffbd9ec>
   8a228:	d9c01d85 	stb	r7,118(sp)
   8a22c:	003d7d06 	br	89824 <__alt_data_end+0xfffbdd34>
   8a230:	d9c01d85 	stb	r7,118(sp)
   8a234:	003d5f06 	br	897b4 <__alt_data_end+0xfffbdcc4>
   8a238:	a080004c 	andi	r2,r20,1
   8a23c:	0039883a 	mov	fp,zero
   8a240:	10000526 	beq	r2,zero,8a258 <___vfiprintf_internal_r+0x1428>
   8a244:	00800c04 	movi	r2,48
   8a248:	d88019c5 	stb	r2,103(sp)
   8a24c:	dcc02717 	ldw	r19,156(sp)
   8a250:	dd4019c4 	addi	r21,sp,103
   8a254:	003bf606 	br	89230 <__alt_data_end+0xfffbd740>
   8a258:	0027883a 	mov	r19,zero
   8a25c:	dd401a04 	addi	r21,sp,104
   8a260:	003bf306 	br	89230 <__alt_data_end+0xfffbd740>
   8a264:	d9c01d85 	stb	r7,118(sp)
   8a268:	003dc806 	br	8998c <__alt_data_end+0xfffbde9c>
   8a26c:	d9c01d85 	stb	r7,118(sp)
   8a270:	003d3a06 	br	8975c <__alt_data_end+0xfffbdc6c>
   8a274:	d9c01d85 	stb	r7,118(sp)
   8a278:	003d2a06 	br	89724 <__alt_data_end+0xfffbdc34>
   8a27c:	d9c01d85 	stb	r7,118(sp)
   8a280:	003cde06 	br	895fc <__alt_data_end+0xfffbdb0c>
   8a284:	d9c01d85 	stb	r7,118(sp)
   8a288:	003cbc06 	br	8957c <__alt_data_end+0xfffbda8c>

0008a28c <__vfiprintf_internal>:
   8a28c:	00800274 	movhi	r2,9
   8a290:	108a3a04 	addi	r2,r2,10472
   8a294:	300f883a 	mov	r7,r6
   8a298:	280d883a 	mov	r6,r5
   8a29c:	200b883a 	mov	r5,r4
   8a2a0:	11000017 	ldw	r4,0(r2)
   8a2a4:	0088e301 	jmpi	88e30 <___vfiprintf_internal_r>

0008a2a8 <__sbprintf>:
   8a2a8:	2880030b 	ldhu	r2,12(r5)
   8a2ac:	2ac01917 	ldw	r11,100(r5)
   8a2b0:	2a80038b 	ldhu	r10,14(r5)
   8a2b4:	2a400717 	ldw	r9,28(r5)
   8a2b8:	2a000917 	ldw	r8,36(r5)
   8a2bc:	defee204 	addi	sp,sp,-1144
   8a2c0:	00c10004 	movi	r3,1024
   8a2c4:	dc011a15 	stw	r16,1128(sp)
   8a2c8:	10bfff4c 	andi	r2,r2,65533
   8a2cc:	2821883a 	mov	r16,r5
   8a2d0:	d8cb883a 	add	r5,sp,r3
   8a2d4:	dc811c15 	stw	r18,1136(sp)
   8a2d8:	dc411b15 	stw	r17,1132(sp)
   8a2dc:	dfc11d15 	stw	ra,1140(sp)
   8a2e0:	2025883a 	mov	r18,r4
   8a2e4:	d881030d 	sth	r2,1036(sp)
   8a2e8:	dac11915 	stw	r11,1124(sp)
   8a2ec:	da81038d 	sth	r10,1038(sp)
   8a2f0:	da410715 	stw	r9,1052(sp)
   8a2f4:	da010915 	stw	r8,1060(sp)
   8a2f8:	dec10015 	stw	sp,1024(sp)
   8a2fc:	dec10415 	stw	sp,1040(sp)
   8a300:	d8c10215 	stw	r3,1032(sp)
   8a304:	d8c10515 	stw	r3,1044(sp)
   8a308:	d8010615 	stw	zero,1048(sp)
   8a30c:	0088e300 	call	88e30 <___vfiprintf_internal_r>
   8a310:	1023883a 	mov	r17,r2
   8a314:	10000416 	blt	r2,zero,8a328 <__sbprintf+0x80>
   8a318:	d9410004 	addi	r5,sp,1024
   8a31c:	9009883a 	mov	r4,r18
   8a320:	00856880 	call	85688 <_fflush_r>
   8a324:	10000d1e 	bne	r2,zero,8a35c <__sbprintf+0xb4>
   8a328:	d881030b 	ldhu	r2,1036(sp)
   8a32c:	1080100c 	andi	r2,r2,64
   8a330:	10000326 	beq	r2,zero,8a340 <__sbprintf+0x98>
   8a334:	8080030b 	ldhu	r2,12(r16)
   8a338:	10801014 	ori	r2,r2,64
   8a33c:	8080030d 	sth	r2,12(r16)
   8a340:	8805883a 	mov	r2,r17
   8a344:	dfc11d17 	ldw	ra,1140(sp)
   8a348:	dc811c17 	ldw	r18,1136(sp)
   8a34c:	dc411b17 	ldw	r17,1132(sp)
   8a350:	dc011a17 	ldw	r16,1128(sp)
   8a354:	dec11e04 	addi	sp,sp,1144
   8a358:	f800283a 	ret
   8a35c:	047fffc4 	movi	r17,-1
   8a360:	003ff106 	br	8a328 <__alt_data_end+0xfffbe838>

0008a364 <_write_r>:
   8a364:	defffd04 	addi	sp,sp,-12
   8a368:	2805883a 	mov	r2,r5
   8a36c:	dc000015 	stw	r16,0(sp)
   8a370:	04000274 	movhi	r16,9
   8a374:	dc400115 	stw	r17,4(sp)
   8a378:	300b883a 	mov	r5,r6
   8a37c:	84113204 	addi	r16,r16,17608
   8a380:	2023883a 	mov	r17,r4
   8a384:	380d883a 	mov	r6,r7
   8a388:	1009883a 	mov	r4,r2
   8a38c:	dfc00215 	stw	ra,8(sp)
   8a390:	80000015 	stw	zero,0(r16)
   8a394:	008ee140 	call	8ee14 <write>
   8a398:	00ffffc4 	movi	r3,-1
   8a39c:	10c00526 	beq	r2,r3,8a3b4 <_write_r+0x50>
   8a3a0:	dfc00217 	ldw	ra,8(sp)
   8a3a4:	dc400117 	ldw	r17,4(sp)
   8a3a8:	dc000017 	ldw	r16,0(sp)
   8a3ac:	dec00304 	addi	sp,sp,12
   8a3b0:	f800283a 	ret
   8a3b4:	80c00017 	ldw	r3,0(r16)
   8a3b8:	183ff926 	beq	r3,zero,8a3a0 <__alt_data_end+0xfffbe8b0>
   8a3bc:	88c00015 	stw	r3,0(r17)
   8a3c0:	003ff706 	br	8a3a0 <__alt_data_end+0xfffbe8b0>

0008a3c4 <_close_r>:
   8a3c4:	defffd04 	addi	sp,sp,-12
   8a3c8:	dc000015 	stw	r16,0(sp)
   8a3cc:	04000274 	movhi	r16,9
   8a3d0:	dc400115 	stw	r17,4(sp)
   8a3d4:	84113204 	addi	r16,r16,17608
   8a3d8:	2023883a 	mov	r17,r4
   8a3dc:	2809883a 	mov	r4,r5
   8a3e0:	dfc00215 	stw	ra,8(sp)
   8a3e4:	80000015 	stw	zero,0(r16)
   8a3e8:	008de4c0 	call	8de4c <close>
   8a3ec:	00ffffc4 	movi	r3,-1
   8a3f0:	10c00526 	beq	r2,r3,8a408 <_close_r+0x44>
   8a3f4:	dfc00217 	ldw	ra,8(sp)
   8a3f8:	dc400117 	ldw	r17,4(sp)
   8a3fc:	dc000017 	ldw	r16,0(sp)
   8a400:	dec00304 	addi	sp,sp,12
   8a404:	f800283a 	ret
   8a408:	80c00017 	ldw	r3,0(r16)
   8a40c:	183ff926 	beq	r3,zero,8a3f4 <__alt_data_end+0xfffbe904>
   8a410:	88c00015 	stw	r3,0(r17)
   8a414:	003ff706 	br	8a3f4 <__alt_data_end+0xfffbe904>

0008a418 <_calloc_r>:
   8a418:	298b383a 	mul	r5,r5,r6
   8a41c:	defffe04 	addi	sp,sp,-8
   8a420:	dfc00115 	stw	ra,4(sp)
   8a424:	dc000015 	stw	r16,0(sp)
   8a428:	00868200 	call	86820 <_malloc_r>
   8a42c:	10002926 	beq	r2,zero,8a4d4 <_calloc_r+0xbc>
   8a430:	11bfff17 	ldw	r6,-4(r2)
   8a434:	1021883a 	mov	r16,r2
   8a438:	00bfff04 	movi	r2,-4
   8a43c:	308c703a 	and	r6,r6,r2
   8a440:	00c00904 	movi	r3,36
   8a444:	308d883a 	add	r6,r6,r2
   8a448:	19801636 	bltu	r3,r6,8a4a4 <_calloc_r+0x8c>
   8a44c:	008004c4 	movi	r2,19
   8a450:	11800b2e 	bgeu	r2,r6,8a480 <_calloc_r+0x68>
   8a454:	80000015 	stw	zero,0(r16)
   8a458:	80000115 	stw	zero,4(r16)
   8a45c:	008006c4 	movi	r2,27
   8a460:	11801a2e 	bgeu	r2,r6,8a4cc <_calloc_r+0xb4>
   8a464:	80000215 	stw	zero,8(r16)
   8a468:	80000315 	stw	zero,12(r16)
   8a46c:	30c0151e 	bne	r6,r3,8a4c4 <_calloc_r+0xac>
   8a470:	80000415 	stw	zero,16(r16)
   8a474:	80800604 	addi	r2,r16,24
   8a478:	80000515 	stw	zero,20(r16)
   8a47c:	00000106 	br	8a484 <_calloc_r+0x6c>
   8a480:	8005883a 	mov	r2,r16
   8a484:	10000015 	stw	zero,0(r2)
   8a488:	10000115 	stw	zero,4(r2)
   8a48c:	10000215 	stw	zero,8(r2)
   8a490:	8005883a 	mov	r2,r16
   8a494:	dfc00117 	ldw	ra,4(sp)
   8a498:	dc000017 	ldw	r16,0(sp)
   8a49c:	dec00204 	addi	sp,sp,8
   8a4a0:	f800283a 	ret
   8a4a4:	000b883a 	mov	r5,zero
   8a4a8:	8009883a 	mov	r4,r16
   8a4ac:	00873b40 	call	873b4 <memset>
   8a4b0:	8005883a 	mov	r2,r16
   8a4b4:	dfc00117 	ldw	ra,4(sp)
   8a4b8:	dc000017 	ldw	r16,0(sp)
   8a4bc:	dec00204 	addi	sp,sp,8
   8a4c0:	f800283a 	ret
   8a4c4:	80800404 	addi	r2,r16,16
   8a4c8:	003fee06 	br	8a484 <__alt_data_end+0xfffbe994>
   8a4cc:	80800204 	addi	r2,r16,8
   8a4d0:	003fec06 	br	8a484 <__alt_data_end+0xfffbe994>
   8a4d4:	0005883a 	mov	r2,zero
   8a4d8:	003fee06 	br	8a494 <__alt_data_end+0xfffbe9a4>

0008a4dc <_fclose_r>:
   8a4dc:	28003926 	beq	r5,zero,8a5c4 <_fclose_r+0xe8>
   8a4e0:	defffc04 	addi	sp,sp,-16
   8a4e4:	dc400115 	stw	r17,4(sp)
   8a4e8:	dc000015 	stw	r16,0(sp)
   8a4ec:	dfc00315 	stw	ra,12(sp)
   8a4f0:	dc800215 	stw	r18,8(sp)
   8a4f4:	2023883a 	mov	r17,r4
   8a4f8:	2821883a 	mov	r16,r5
   8a4fc:	20000226 	beq	r4,zero,8a508 <_fclose_r+0x2c>
   8a500:	20800e17 	ldw	r2,56(r4)
   8a504:	10002726 	beq	r2,zero,8a5a4 <_fclose_r+0xc8>
   8a508:	8080030f 	ldh	r2,12(r16)
   8a50c:	1000071e 	bne	r2,zero,8a52c <_fclose_r+0x50>
   8a510:	0005883a 	mov	r2,zero
   8a514:	dfc00317 	ldw	ra,12(sp)
   8a518:	dc800217 	ldw	r18,8(sp)
   8a51c:	dc400117 	ldw	r17,4(sp)
   8a520:	dc000017 	ldw	r16,0(sp)
   8a524:	dec00404 	addi	sp,sp,16
   8a528:	f800283a 	ret
   8a52c:	800b883a 	mov	r5,r16
   8a530:	8809883a 	mov	r4,r17
   8a534:	008546c0 	call	8546c <__sflush_r>
   8a538:	1025883a 	mov	r18,r2
   8a53c:	80800b17 	ldw	r2,44(r16)
   8a540:	10000426 	beq	r2,zero,8a554 <_fclose_r+0x78>
   8a544:	81400717 	ldw	r5,28(r16)
   8a548:	8809883a 	mov	r4,r17
   8a54c:	103ee83a 	callr	r2
   8a550:	10001616 	blt	r2,zero,8a5ac <_fclose_r+0xd0>
   8a554:	8080030b 	ldhu	r2,12(r16)
   8a558:	1080200c 	andi	r2,r2,128
   8a55c:	1000151e 	bne	r2,zero,8a5b4 <_fclose_r+0xd8>
   8a560:	81400c17 	ldw	r5,48(r16)
   8a564:	28000526 	beq	r5,zero,8a57c <_fclose_r+0xa0>
   8a568:	80801004 	addi	r2,r16,64
   8a56c:	28800226 	beq	r5,r2,8a578 <_fclose_r+0x9c>
   8a570:	8809883a 	mov	r4,r17
   8a574:	0085bd80 	call	85bd8 <_free_r>
   8a578:	80000c15 	stw	zero,48(r16)
   8a57c:	81401117 	ldw	r5,68(r16)
   8a580:	28000326 	beq	r5,zero,8a590 <_fclose_r+0xb4>
   8a584:	8809883a 	mov	r4,r17
   8a588:	0085bd80 	call	85bd8 <_free_r>
   8a58c:	80001115 	stw	zero,68(r16)
   8a590:	0085a740 	call	85a74 <__sfp_lock_acquire>
   8a594:	8000030d 	sth	zero,12(r16)
   8a598:	0085a780 	call	85a78 <__sfp_lock_release>
   8a59c:	9005883a 	mov	r2,r18
   8a5a0:	003fdc06 	br	8a514 <__alt_data_end+0xfffbea24>
   8a5a4:	0085a640 	call	85a64 <__sinit>
   8a5a8:	003fd706 	br	8a508 <__alt_data_end+0xfffbea18>
   8a5ac:	04bfffc4 	movi	r18,-1
   8a5b0:	003fe806 	br	8a554 <__alt_data_end+0xfffbea64>
   8a5b4:	81400417 	ldw	r5,16(r16)
   8a5b8:	8809883a 	mov	r4,r17
   8a5bc:	0085bd80 	call	85bd8 <_free_r>
   8a5c0:	003fe706 	br	8a560 <__alt_data_end+0xfffbea70>
   8a5c4:	0005883a 	mov	r2,zero
   8a5c8:	f800283a 	ret

0008a5cc <fclose>:
   8a5cc:	00800274 	movhi	r2,9
   8a5d0:	108a3a04 	addi	r2,r2,10472
   8a5d4:	200b883a 	mov	r5,r4
   8a5d8:	11000017 	ldw	r4,0(r2)
   8a5dc:	008a4dc1 	jmpi	8a4dc <_fclose_r>

0008a5e0 <__fputwc>:
   8a5e0:	defff804 	addi	sp,sp,-32
   8a5e4:	dcc00415 	stw	r19,16(sp)
   8a5e8:	dc800315 	stw	r18,12(sp)
   8a5ec:	dc000115 	stw	r16,4(sp)
   8a5f0:	dfc00715 	stw	ra,28(sp)
   8a5f4:	dd400615 	stw	r21,24(sp)
   8a5f8:	dd000515 	stw	r20,20(sp)
   8a5fc:	dc400215 	stw	r17,8(sp)
   8a600:	2027883a 	mov	r19,r4
   8a604:	2825883a 	mov	r18,r5
   8a608:	3021883a 	mov	r16,r6
   8a60c:	00866100 	call	86610 <__locale_mb_cur_max>
   8a610:	00c00044 	movi	r3,1
   8a614:	10c03e26 	beq	r2,r3,8a710 <__fputwc+0x130>
   8a618:	81c01704 	addi	r7,r16,92
   8a61c:	900d883a 	mov	r6,r18
   8a620:	d80b883a 	mov	r5,sp
   8a624:	9809883a 	mov	r4,r19
   8a628:	008aab00 	call	8aab0 <_wcrtomb_r>
   8a62c:	1029883a 	mov	r20,r2
   8a630:	00bfffc4 	movi	r2,-1
   8a634:	a0802026 	beq	r20,r2,8a6b8 <__fputwc+0xd8>
   8a638:	d9400003 	ldbu	r5,0(sp)
   8a63c:	a0001c26 	beq	r20,zero,8a6b0 <__fputwc+0xd0>
   8a640:	0023883a 	mov	r17,zero
   8a644:	05400284 	movi	r21,10
   8a648:	00000906 	br	8a670 <__fputwc+0x90>
   8a64c:	80800017 	ldw	r2,0(r16)
   8a650:	11400005 	stb	r5,0(r2)
   8a654:	80c00017 	ldw	r3,0(r16)
   8a658:	18c00044 	addi	r3,r3,1
   8a65c:	80c00015 	stw	r3,0(r16)
   8a660:	8c400044 	addi	r17,r17,1
   8a664:	dc45883a 	add	r2,sp,r17
   8a668:	8d00112e 	bgeu	r17,r20,8a6b0 <__fputwc+0xd0>
   8a66c:	11400003 	ldbu	r5,0(r2)
   8a670:	80c00217 	ldw	r3,8(r16)
   8a674:	18ffffc4 	addi	r3,r3,-1
   8a678:	80c00215 	stw	r3,8(r16)
   8a67c:	183ff30e 	bge	r3,zero,8a64c <__alt_data_end+0xfffbeb5c>
   8a680:	80800617 	ldw	r2,24(r16)
   8a684:	18801916 	blt	r3,r2,8a6ec <__fputwc+0x10c>
   8a688:	80800017 	ldw	r2,0(r16)
   8a68c:	11400005 	stb	r5,0(r2)
   8a690:	80800017 	ldw	r2,0(r16)
   8a694:	10c00003 	ldbu	r3,0(r2)
   8a698:	10800044 	addi	r2,r2,1
   8a69c:	1d402326 	beq	r3,r21,8a72c <__fputwc+0x14c>
   8a6a0:	80800015 	stw	r2,0(r16)
   8a6a4:	8c400044 	addi	r17,r17,1
   8a6a8:	dc45883a 	add	r2,sp,r17
   8a6ac:	8d3fef36 	bltu	r17,r20,8a66c <__alt_data_end+0xfffbeb7c>
   8a6b0:	9005883a 	mov	r2,r18
   8a6b4:	00000406 	br	8a6c8 <__fputwc+0xe8>
   8a6b8:	80c0030b 	ldhu	r3,12(r16)
   8a6bc:	a005883a 	mov	r2,r20
   8a6c0:	18c01014 	ori	r3,r3,64
   8a6c4:	80c0030d 	sth	r3,12(r16)
   8a6c8:	dfc00717 	ldw	ra,28(sp)
   8a6cc:	dd400617 	ldw	r21,24(sp)
   8a6d0:	dd000517 	ldw	r20,20(sp)
   8a6d4:	dcc00417 	ldw	r19,16(sp)
   8a6d8:	dc800317 	ldw	r18,12(sp)
   8a6dc:	dc400217 	ldw	r17,8(sp)
   8a6e0:	dc000117 	ldw	r16,4(sp)
   8a6e4:	dec00804 	addi	sp,sp,32
   8a6e8:	f800283a 	ret
   8a6ec:	800d883a 	mov	r6,r16
   8a6f0:	29403fcc 	andi	r5,r5,255
   8a6f4:	9809883a 	mov	r4,r19
   8a6f8:	008a9580 	call	8a958 <__swbuf_r>
   8a6fc:	10bfffe0 	cmpeqi	r2,r2,-1
   8a700:	10803fcc 	andi	r2,r2,255
   8a704:	103fd626 	beq	r2,zero,8a660 <__alt_data_end+0xfffbeb70>
   8a708:	00bfffc4 	movi	r2,-1
   8a70c:	003fee06 	br	8a6c8 <__alt_data_end+0xfffbebd8>
   8a710:	90ffffc4 	addi	r3,r18,-1
   8a714:	01003f84 	movi	r4,254
   8a718:	20ffbf36 	bltu	r4,r3,8a618 <__alt_data_end+0xfffbeb28>
   8a71c:	900b883a 	mov	r5,r18
   8a720:	dc800005 	stb	r18,0(sp)
   8a724:	1029883a 	mov	r20,r2
   8a728:	003fc506 	br	8a640 <__alt_data_end+0xfffbeb50>
   8a72c:	800d883a 	mov	r6,r16
   8a730:	a80b883a 	mov	r5,r21
   8a734:	9809883a 	mov	r4,r19
   8a738:	008a9580 	call	8a958 <__swbuf_r>
   8a73c:	10bfffe0 	cmpeqi	r2,r2,-1
   8a740:	003fef06 	br	8a700 <__alt_data_end+0xfffbec10>

0008a744 <_fputwc_r>:
   8a744:	3080030b 	ldhu	r2,12(r6)
   8a748:	10c8000c 	andi	r3,r2,8192
   8a74c:	1800051e 	bne	r3,zero,8a764 <_fputwc_r+0x20>
   8a750:	30c01917 	ldw	r3,100(r6)
   8a754:	10880014 	ori	r2,r2,8192
   8a758:	3080030d 	sth	r2,12(r6)
   8a75c:	18880014 	ori	r2,r3,8192
   8a760:	30801915 	stw	r2,100(r6)
   8a764:	008a5e01 	jmpi	8a5e0 <__fputwc>

0008a768 <fputwc>:
   8a768:	00800274 	movhi	r2,9
   8a76c:	defffc04 	addi	sp,sp,-16
   8a770:	108a3a04 	addi	r2,r2,10472
   8a774:	dc000115 	stw	r16,4(sp)
   8a778:	14000017 	ldw	r16,0(r2)
   8a77c:	dc400215 	stw	r17,8(sp)
   8a780:	dfc00315 	stw	ra,12(sp)
   8a784:	2023883a 	mov	r17,r4
   8a788:	80000226 	beq	r16,zero,8a794 <fputwc+0x2c>
   8a78c:	80800e17 	ldw	r2,56(r16)
   8a790:	10001026 	beq	r2,zero,8a7d4 <fputwc+0x6c>
   8a794:	2880030b 	ldhu	r2,12(r5)
   8a798:	10c8000c 	andi	r3,r2,8192
   8a79c:	1800051e 	bne	r3,zero,8a7b4 <fputwc+0x4c>
   8a7a0:	28c01917 	ldw	r3,100(r5)
   8a7a4:	10880014 	ori	r2,r2,8192
   8a7a8:	2880030d 	sth	r2,12(r5)
   8a7ac:	18880014 	ori	r2,r3,8192
   8a7b0:	28801915 	stw	r2,100(r5)
   8a7b4:	280d883a 	mov	r6,r5
   8a7b8:	8009883a 	mov	r4,r16
   8a7bc:	880b883a 	mov	r5,r17
   8a7c0:	dfc00317 	ldw	ra,12(sp)
   8a7c4:	dc400217 	ldw	r17,8(sp)
   8a7c8:	dc000117 	ldw	r16,4(sp)
   8a7cc:	dec00404 	addi	sp,sp,16
   8a7d0:	008a5e01 	jmpi	8a5e0 <__fputwc>
   8a7d4:	8009883a 	mov	r4,r16
   8a7d8:	d9400015 	stw	r5,0(sp)
   8a7dc:	0085a640 	call	85a64 <__sinit>
   8a7e0:	d9400017 	ldw	r5,0(sp)
   8a7e4:	003feb06 	br	8a794 <__alt_data_end+0xfffbeca4>

0008a7e8 <_fstat_r>:
   8a7e8:	defffd04 	addi	sp,sp,-12
   8a7ec:	2805883a 	mov	r2,r5
   8a7f0:	dc000015 	stw	r16,0(sp)
   8a7f4:	04000274 	movhi	r16,9
   8a7f8:	dc400115 	stw	r17,4(sp)
   8a7fc:	84113204 	addi	r16,r16,17608
   8a800:	2023883a 	mov	r17,r4
   8a804:	300b883a 	mov	r5,r6
   8a808:	1009883a 	mov	r4,r2
   8a80c:	dfc00215 	stw	ra,8(sp)
   8a810:	80000015 	stw	zero,0(r16)
   8a814:	008df840 	call	8df84 <fstat>
   8a818:	00ffffc4 	movi	r3,-1
   8a81c:	10c00526 	beq	r2,r3,8a834 <_fstat_r+0x4c>
   8a820:	dfc00217 	ldw	ra,8(sp)
   8a824:	dc400117 	ldw	r17,4(sp)
   8a828:	dc000017 	ldw	r16,0(sp)
   8a82c:	dec00304 	addi	sp,sp,12
   8a830:	f800283a 	ret
   8a834:	80c00017 	ldw	r3,0(r16)
   8a838:	183ff926 	beq	r3,zero,8a820 <__alt_data_end+0xfffbed30>
   8a83c:	88c00015 	stw	r3,0(r17)
   8a840:	003ff706 	br	8a820 <__alt_data_end+0xfffbed30>

0008a844 <_isatty_r>:
   8a844:	defffd04 	addi	sp,sp,-12
   8a848:	dc000015 	stw	r16,0(sp)
   8a84c:	04000274 	movhi	r16,9
   8a850:	dc400115 	stw	r17,4(sp)
   8a854:	84113204 	addi	r16,r16,17608
   8a858:	2023883a 	mov	r17,r4
   8a85c:	2809883a 	mov	r4,r5
   8a860:	dfc00215 	stw	ra,8(sp)
   8a864:	80000015 	stw	zero,0(r16)
   8a868:	008e6840 	call	8e684 <isatty>
   8a86c:	00ffffc4 	movi	r3,-1
   8a870:	10c00526 	beq	r2,r3,8a888 <_isatty_r+0x44>
   8a874:	dfc00217 	ldw	ra,8(sp)
   8a878:	dc400117 	ldw	r17,4(sp)
   8a87c:	dc000017 	ldw	r16,0(sp)
   8a880:	dec00304 	addi	sp,sp,12
   8a884:	f800283a 	ret
   8a888:	80c00017 	ldw	r3,0(r16)
   8a88c:	183ff926 	beq	r3,zero,8a874 <__alt_data_end+0xfffbed84>
   8a890:	88c00015 	stw	r3,0(r17)
   8a894:	003ff706 	br	8a874 <__alt_data_end+0xfffbed84>

0008a898 <_lseek_r>:
   8a898:	defffd04 	addi	sp,sp,-12
   8a89c:	2805883a 	mov	r2,r5
   8a8a0:	dc000015 	stw	r16,0(sp)
   8a8a4:	04000274 	movhi	r16,9
   8a8a8:	dc400115 	stw	r17,4(sp)
   8a8ac:	300b883a 	mov	r5,r6
   8a8b0:	84113204 	addi	r16,r16,17608
   8a8b4:	2023883a 	mov	r17,r4
   8a8b8:	380d883a 	mov	r6,r7
   8a8bc:	1009883a 	mov	r4,r2
   8a8c0:	dfc00215 	stw	ra,8(sp)
   8a8c4:	80000015 	stw	zero,0(r16)
   8a8c8:	008e8500 	call	8e850 <lseek>
   8a8cc:	00ffffc4 	movi	r3,-1
   8a8d0:	10c00526 	beq	r2,r3,8a8e8 <_lseek_r+0x50>
   8a8d4:	dfc00217 	ldw	ra,8(sp)
   8a8d8:	dc400117 	ldw	r17,4(sp)
   8a8dc:	dc000017 	ldw	r16,0(sp)
   8a8e0:	dec00304 	addi	sp,sp,12
   8a8e4:	f800283a 	ret
   8a8e8:	80c00017 	ldw	r3,0(r16)
   8a8ec:	183ff926 	beq	r3,zero,8a8d4 <__alt_data_end+0xfffbede4>
   8a8f0:	88c00015 	stw	r3,0(r17)
   8a8f4:	003ff706 	br	8a8d4 <__alt_data_end+0xfffbede4>

0008a8f8 <_read_r>:
   8a8f8:	defffd04 	addi	sp,sp,-12
   8a8fc:	2805883a 	mov	r2,r5
   8a900:	dc000015 	stw	r16,0(sp)
   8a904:	04000274 	movhi	r16,9
   8a908:	dc400115 	stw	r17,4(sp)
   8a90c:	300b883a 	mov	r5,r6
   8a910:	84113204 	addi	r16,r16,17608
   8a914:	2023883a 	mov	r17,r4
   8a918:	380d883a 	mov	r6,r7
   8a91c:	1009883a 	mov	r4,r2
   8a920:	dfc00215 	stw	ra,8(sp)
   8a924:	80000015 	stw	zero,0(r16)
   8a928:	008ea240 	call	8ea24 <read>
   8a92c:	00ffffc4 	movi	r3,-1
   8a930:	10c00526 	beq	r2,r3,8a948 <_read_r+0x50>
   8a934:	dfc00217 	ldw	ra,8(sp)
   8a938:	dc400117 	ldw	r17,4(sp)
   8a93c:	dc000017 	ldw	r16,0(sp)
   8a940:	dec00304 	addi	sp,sp,12
   8a944:	f800283a 	ret
   8a948:	80c00017 	ldw	r3,0(r16)
   8a94c:	183ff926 	beq	r3,zero,8a934 <__alt_data_end+0xfffbee44>
   8a950:	88c00015 	stw	r3,0(r17)
   8a954:	003ff706 	br	8a934 <__alt_data_end+0xfffbee44>

0008a958 <__swbuf_r>:
   8a958:	defffb04 	addi	sp,sp,-20
   8a95c:	dcc00315 	stw	r19,12(sp)
   8a960:	dc800215 	stw	r18,8(sp)
   8a964:	dc000015 	stw	r16,0(sp)
   8a968:	dfc00415 	stw	ra,16(sp)
   8a96c:	dc400115 	stw	r17,4(sp)
   8a970:	2025883a 	mov	r18,r4
   8a974:	2827883a 	mov	r19,r5
   8a978:	3021883a 	mov	r16,r6
   8a97c:	20000226 	beq	r4,zero,8a988 <__swbuf_r+0x30>
   8a980:	20800e17 	ldw	r2,56(r4)
   8a984:	10004226 	beq	r2,zero,8aa90 <__swbuf_r+0x138>
   8a988:	80800617 	ldw	r2,24(r16)
   8a98c:	8100030b 	ldhu	r4,12(r16)
   8a990:	80800215 	stw	r2,8(r16)
   8a994:	2080020c 	andi	r2,r4,8
   8a998:	10003626 	beq	r2,zero,8aa74 <__swbuf_r+0x11c>
   8a99c:	80c00417 	ldw	r3,16(r16)
   8a9a0:	18003426 	beq	r3,zero,8aa74 <__swbuf_r+0x11c>
   8a9a4:	2088000c 	andi	r2,r4,8192
   8a9a8:	9c403fcc 	andi	r17,r19,255
   8a9ac:	10001a26 	beq	r2,zero,8aa18 <__swbuf_r+0xc0>
   8a9b0:	80800017 	ldw	r2,0(r16)
   8a9b4:	81000517 	ldw	r4,20(r16)
   8a9b8:	10c7c83a 	sub	r3,r2,r3
   8a9bc:	1900200e 	bge	r3,r4,8aa40 <__swbuf_r+0xe8>
   8a9c0:	18c00044 	addi	r3,r3,1
   8a9c4:	81000217 	ldw	r4,8(r16)
   8a9c8:	11400044 	addi	r5,r2,1
   8a9cc:	81400015 	stw	r5,0(r16)
   8a9d0:	213fffc4 	addi	r4,r4,-1
   8a9d4:	81000215 	stw	r4,8(r16)
   8a9d8:	14c00005 	stb	r19,0(r2)
   8a9dc:	80800517 	ldw	r2,20(r16)
   8a9e0:	10c01e26 	beq	r2,r3,8aa5c <__swbuf_r+0x104>
   8a9e4:	8080030b 	ldhu	r2,12(r16)
   8a9e8:	1080004c 	andi	r2,r2,1
   8a9ec:	10000226 	beq	r2,zero,8a9f8 <__swbuf_r+0xa0>
   8a9f0:	00800284 	movi	r2,10
   8a9f4:	88801926 	beq	r17,r2,8aa5c <__swbuf_r+0x104>
   8a9f8:	8805883a 	mov	r2,r17
   8a9fc:	dfc00417 	ldw	ra,16(sp)
   8aa00:	dcc00317 	ldw	r19,12(sp)
   8aa04:	dc800217 	ldw	r18,8(sp)
   8aa08:	dc400117 	ldw	r17,4(sp)
   8aa0c:	dc000017 	ldw	r16,0(sp)
   8aa10:	dec00504 	addi	sp,sp,20
   8aa14:	f800283a 	ret
   8aa18:	81401917 	ldw	r5,100(r16)
   8aa1c:	00b7ffc4 	movi	r2,-8193
   8aa20:	21080014 	ori	r4,r4,8192
   8aa24:	2884703a 	and	r2,r5,r2
   8aa28:	80801915 	stw	r2,100(r16)
   8aa2c:	80800017 	ldw	r2,0(r16)
   8aa30:	8100030d 	sth	r4,12(r16)
   8aa34:	81000517 	ldw	r4,20(r16)
   8aa38:	10c7c83a 	sub	r3,r2,r3
   8aa3c:	193fe016 	blt	r3,r4,8a9c0 <__alt_data_end+0xfffbeed0>
   8aa40:	800b883a 	mov	r5,r16
   8aa44:	9009883a 	mov	r4,r18
   8aa48:	00856880 	call	85688 <_fflush_r>
   8aa4c:	1000071e 	bne	r2,zero,8aa6c <__swbuf_r+0x114>
   8aa50:	80800017 	ldw	r2,0(r16)
   8aa54:	00c00044 	movi	r3,1
   8aa58:	003fda06 	br	8a9c4 <__alt_data_end+0xfffbeed4>
   8aa5c:	800b883a 	mov	r5,r16
   8aa60:	9009883a 	mov	r4,r18
   8aa64:	00856880 	call	85688 <_fflush_r>
   8aa68:	103fe326 	beq	r2,zero,8a9f8 <__alt_data_end+0xfffbef08>
   8aa6c:	00bfffc4 	movi	r2,-1
   8aa70:	003fe206 	br	8a9fc <__alt_data_end+0xfffbef0c>
   8aa74:	800b883a 	mov	r5,r16
   8aa78:	9009883a 	mov	r4,r18
   8aa7c:	0083a900 	call	83a90 <__swsetup_r>
   8aa80:	103ffa1e 	bne	r2,zero,8aa6c <__alt_data_end+0xfffbef7c>
   8aa84:	8100030b 	ldhu	r4,12(r16)
   8aa88:	80c00417 	ldw	r3,16(r16)
   8aa8c:	003fc506 	br	8a9a4 <__alt_data_end+0xfffbeeb4>
   8aa90:	0085a640 	call	85a64 <__sinit>
   8aa94:	003fbc06 	br	8a988 <__alt_data_end+0xfffbee98>

0008aa98 <__swbuf>:
   8aa98:	00800274 	movhi	r2,9
   8aa9c:	108a3a04 	addi	r2,r2,10472
   8aaa0:	280d883a 	mov	r6,r5
   8aaa4:	200b883a 	mov	r5,r4
   8aaa8:	11000017 	ldw	r4,0(r2)
   8aaac:	008a9581 	jmpi	8a958 <__swbuf_r>

0008aab0 <_wcrtomb_r>:
   8aab0:	defff604 	addi	sp,sp,-40
   8aab4:	00800274 	movhi	r2,9
   8aab8:	dc800815 	stw	r18,32(sp)
   8aabc:	dc400715 	stw	r17,28(sp)
   8aac0:	dc000615 	stw	r16,24(sp)
   8aac4:	108a3e04 	addi	r2,r2,10488
   8aac8:	dfc00915 	stw	ra,36(sp)
   8aacc:	2021883a 	mov	r16,r4
   8aad0:	3823883a 	mov	r17,r7
   8aad4:	14800017 	ldw	r18,0(r2)
   8aad8:	28001426 	beq	r5,zero,8ab2c <_wcrtomb_r+0x7c>
   8aadc:	d9400415 	stw	r5,16(sp)
   8aae0:	d9800515 	stw	r6,20(sp)
   8aae4:	00866040 	call	86604 <__locale_charset>
   8aae8:	d9800517 	ldw	r6,20(sp)
   8aaec:	d9400417 	ldw	r5,16(sp)
   8aaf0:	100f883a 	mov	r7,r2
   8aaf4:	dc400015 	stw	r17,0(sp)
   8aaf8:	8009883a 	mov	r4,r16
   8aafc:	903ee83a 	callr	r18
   8ab00:	00ffffc4 	movi	r3,-1
   8ab04:	10c0031e 	bne	r2,r3,8ab14 <_wcrtomb_r+0x64>
   8ab08:	88000015 	stw	zero,0(r17)
   8ab0c:	00c02284 	movi	r3,138
   8ab10:	80c00015 	stw	r3,0(r16)
   8ab14:	dfc00917 	ldw	ra,36(sp)
   8ab18:	dc800817 	ldw	r18,32(sp)
   8ab1c:	dc400717 	ldw	r17,28(sp)
   8ab20:	dc000617 	ldw	r16,24(sp)
   8ab24:	dec00a04 	addi	sp,sp,40
   8ab28:	f800283a 	ret
   8ab2c:	00866040 	call	86604 <__locale_charset>
   8ab30:	100f883a 	mov	r7,r2
   8ab34:	dc400015 	stw	r17,0(sp)
   8ab38:	000d883a 	mov	r6,zero
   8ab3c:	d9400104 	addi	r5,sp,4
   8ab40:	8009883a 	mov	r4,r16
   8ab44:	903ee83a 	callr	r18
   8ab48:	003fed06 	br	8ab00 <__alt_data_end+0xfffbf010>

0008ab4c <wcrtomb>:
   8ab4c:	defff604 	addi	sp,sp,-40
   8ab50:	00800274 	movhi	r2,9
   8ab54:	dc800615 	stw	r18,24(sp)
   8ab58:	dc400515 	stw	r17,20(sp)
   8ab5c:	108a3a04 	addi	r2,r2,10472
   8ab60:	dfc00915 	stw	ra,36(sp)
   8ab64:	dd000815 	stw	r20,32(sp)
   8ab68:	dcc00715 	stw	r19,28(sp)
   8ab6c:	dc000415 	stw	r16,16(sp)
   8ab70:	3025883a 	mov	r18,r6
   8ab74:	14400017 	ldw	r17,0(r2)
   8ab78:	20001926 	beq	r4,zero,8abe0 <wcrtomb+0x94>
   8ab7c:	00800274 	movhi	r2,9
   8ab80:	108a3e04 	addi	r2,r2,10488
   8ab84:	15000017 	ldw	r20,0(r2)
   8ab88:	2021883a 	mov	r16,r4
   8ab8c:	2827883a 	mov	r19,r5
   8ab90:	00866040 	call	86604 <__locale_charset>
   8ab94:	100f883a 	mov	r7,r2
   8ab98:	dc800015 	stw	r18,0(sp)
   8ab9c:	980d883a 	mov	r6,r19
   8aba0:	800b883a 	mov	r5,r16
   8aba4:	8809883a 	mov	r4,r17
   8aba8:	a03ee83a 	callr	r20
   8abac:	00ffffc4 	movi	r3,-1
   8abb0:	10c0031e 	bne	r2,r3,8abc0 <wcrtomb+0x74>
   8abb4:	90000015 	stw	zero,0(r18)
   8abb8:	00c02284 	movi	r3,138
   8abbc:	88c00015 	stw	r3,0(r17)
   8abc0:	dfc00917 	ldw	ra,36(sp)
   8abc4:	dd000817 	ldw	r20,32(sp)
   8abc8:	dcc00717 	ldw	r19,28(sp)
   8abcc:	dc800617 	ldw	r18,24(sp)
   8abd0:	dc400517 	ldw	r17,20(sp)
   8abd4:	dc000417 	ldw	r16,16(sp)
   8abd8:	dec00a04 	addi	sp,sp,40
   8abdc:	f800283a 	ret
   8abe0:	00800274 	movhi	r2,9
   8abe4:	108a3e04 	addi	r2,r2,10488
   8abe8:	14000017 	ldw	r16,0(r2)
   8abec:	00866040 	call	86604 <__locale_charset>
   8abf0:	100f883a 	mov	r7,r2
   8abf4:	dc800015 	stw	r18,0(sp)
   8abf8:	000d883a 	mov	r6,zero
   8abfc:	d9400104 	addi	r5,sp,4
   8ac00:	8809883a 	mov	r4,r17
   8ac04:	803ee83a 	callr	r16
   8ac08:	003fe806 	br	8abac <__alt_data_end+0xfffbf0bc>

0008ac0c <__ascii_wctomb>:
   8ac0c:	28000526 	beq	r5,zero,8ac24 <__ascii_wctomb+0x18>
   8ac10:	00803fc4 	movi	r2,255
   8ac14:	11800536 	bltu	r2,r6,8ac2c <__ascii_wctomb+0x20>
   8ac18:	29800005 	stb	r6,0(r5)
   8ac1c:	00800044 	movi	r2,1
   8ac20:	f800283a 	ret
   8ac24:	0005883a 	mov	r2,zero
   8ac28:	f800283a 	ret
   8ac2c:	00802284 	movi	r2,138
   8ac30:	20800015 	stw	r2,0(r4)
   8ac34:	00bfffc4 	movi	r2,-1
   8ac38:	f800283a 	ret

0008ac3c <_wctomb_r>:
   8ac3c:	00800274 	movhi	r2,9
   8ac40:	defff904 	addi	sp,sp,-28
   8ac44:	108a3e04 	addi	r2,r2,10488
   8ac48:	dfc00615 	stw	ra,24(sp)
   8ac4c:	dc400515 	stw	r17,20(sp)
   8ac50:	dc000415 	stw	r16,16(sp)
   8ac54:	3823883a 	mov	r17,r7
   8ac58:	14000017 	ldw	r16,0(r2)
   8ac5c:	d9000115 	stw	r4,4(sp)
   8ac60:	d9400215 	stw	r5,8(sp)
   8ac64:	d9800315 	stw	r6,12(sp)
   8ac68:	00866040 	call	86604 <__locale_charset>
   8ac6c:	d9800317 	ldw	r6,12(sp)
   8ac70:	d9400217 	ldw	r5,8(sp)
   8ac74:	d9000117 	ldw	r4,4(sp)
   8ac78:	100f883a 	mov	r7,r2
   8ac7c:	dc400015 	stw	r17,0(sp)
   8ac80:	803ee83a 	callr	r16
   8ac84:	dfc00617 	ldw	ra,24(sp)
   8ac88:	dc400517 	ldw	r17,20(sp)
   8ac8c:	dc000417 	ldw	r16,16(sp)
   8ac90:	dec00704 	addi	sp,sp,28
   8ac94:	f800283a 	ret

0008ac98 <__muldi3>:
   8ac98:	223fffcc 	andi	r8,r4,65535
   8ac9c:	2006d43a 	srli	r3,r4,16
   8aca0:	32bfffcc 	andi	r10,r6,65535
   8aca4:	3012d43a 	srli	r9,r6,16
   8aca8:	4297383a 	mul	r11,r8,r10
   8acac:	1a95383a 	mul	r10,r3,r10
   8acb0:	4251383a 	mul	r8,r8,r9
   8acb4:	5804d43a 	srli	r2,r11,16
   8acb8:	4291883a 	add	r8,r8,r10
   8acbc:	1205883a 	add	r2,r2,r8
   8acc0:	1a51383a 	mul	r8,r3,r9
   8acc4:	1280022e 	bgeu	r2,r10,8acd0 <__muldi3+0x38>
   8acc8:	00c00074 	movhi	r3,1
   8accc:	40d1883a 	add	r8,r8,r3
   8acd0:	1006d43a 	srli	r3,r2,16
   8acd4:	21cf383a 	mul	r7,r4,r7
   8acd8:	314b383a 	mul	r5,r6,r5
   8acdc:	1004943a 	slli	r2,r2,16
   8ace0:	1a11883a 	add	r8,r3,r8
   8ace4:	5affffcc 	andi	r11,r11,65535
   8ace8:	3947883a 	add	r3,r7,r5
   8acec:	12c5883a 	add	r2,r2,r11
   8acf0:	1a07883a 	add	r3,r3,r8
   8acf4:	f800283a 	ret

0008acf8 <__udivdi3>:
   8acf8:	defff504 	addi	sp,sp,-44
   8acfc:	dcc00415 	stw	r19,16(sp)
   8ad00:	dc000115 	stw	r16,4(sp)
   8ad04:	dfc00a15 	stw	ra,40(sp)
   8ad08:	df000915 	stw	fp,36(sp)
   8ad0c:	ddc00815 	stw	r23,32(sp)
   8ad10:	dd800715 	stw	r22,28(sp)
   8ad14:	dd400615 	stw	r21,24(sp)
   8ad18:	dd000515 	stw	r20,20(sp)
   8ad1c:	dc800315 	stw	r18,12(sp)
   8ad20:	dc400215 	stw	r17,8(sp)
   8ad24:	2027883a 	mov	r19,r4
   8ad28:	2821883a 	mov	r16,r5
   8ad2c:	3800411e 	bne	r7,zero,8ae34 <__udivdi3+0x13c>
   8ad30:	3023883a 	mov	r17,r6
   8ad34:	2025883a 	mov	r18,r4
   8ad38:	2980522e 	bgeu	r5,r6,8ae84 <__udivdi3+0x18c>
   8ad3c:	00bfffd4 	movui	r2,65535
   8ad40:	282d883a 	mov	r22,r5
   8ad44:	1180a836 	bltu	r2,r6,8afe8 <__udivdi3+0x2f0>
   8ad48:	00803fc4 	movi	r2,255
   8ad4c:	1185803a 	cmpltu	r2,r2,r6
   8ad50:	100490fa 	slli	r2,r2,3
   8ad54:	3086d83a 	srl	r3,r6,r2
   8ad58:	01000274 	movhi	r4,9
   8ad5c:	21031604 	addi	r4,r4,3160
   8ad60:	20c7883a 	add	r3,r4,r3
   8ad64:	18c00003 	ldbu	r3,0(r3)
   8ad68:	1885883a 	add	r2,r3,r2
   8ad6c:	00c00804 	movi	r3,32
   8ad70:	1887c83a 	sub	r3,r3,r2
   8ad74:	18000526 	beq	r3,zero,8ad8c <__udivdi3+0x94>
   8ad78:	80e0983a 	sll	r16,r16,r3
   8ad7c:	9884d83a 	srl	r2,r19,r2
   8ad80:	30e2983a 	sll	r17,r6,r3
   8ad84:	98e4983a 	sll	r18,r19,r3
   8ad88:	142cb03a 	or	r22,r2,r16
   8ad8c:	882ad43a 	srli	r21,r17,16
   8ad90:	b009883a 	mov	r4,r22
   8ad94:	8d3fffcc 	andi	r20,r17,65535
   8ad98:	a80b883a 	mov	r5,r21
   8ad9c:	00814c40 	call	814c4 <__umodsi3>
   8ada0:	b009883a 	mov	r4,r22
   8ada4:	a80b883a 	mov	r5,r21
   8ada8:	1027883a 	mov	r19,r2
   8adac:	00814600 	call	81460 <__udivsi3>
   8adb0:	102d883a 	mov	r22,r2
   8adb4:	9826943a 	slli	r19,r19,16
   8adb8:	9004d43a 	srli	r2,r18,16
   8adbc:	a5a1383a 	mul	r16,r20,r22
   8adc0:	14c4b03a 	or	r2,r2,r19
   8adc4:	1400052e 	bgeu	r2,r16,8addc <__udivdi3+0xe4>
   8adc8:	1445883a 	add	r2,r2,r17
   8adcc:	b0ffffc4 	addi	r3,r22,-1
   8add0:	14400136 	bltu	r2,r17,8add8 <__udivdi3+0xe0>
   8add4:	14012336 	bltu	r2,r16,8b264 <__udivdi3+0x56c>
   8add8:	182d883a 	mov	r22,r3
   8addc:	1421c83a 	sub	r16,r2,r16
   8ade0:	a80b883a 	mov	r5,r21
   8ade4:	8009883a 	mov	r4,r16
   8ade8:	00814c40 	call	814c4 <__umodsi3>
   8adec:	1027883a 	mov	r19,r2
   8adf0:	a80b883a 	mov	r5,r21
   8adf4:	8009883a 	mov	r4,r16
   8adf8:	00814600 	call	81460 <__udivsi3>
   8adfc:	9826943a 	slli	r19,r19,16
   8ae00:	a0a9383a 	mul	r20,r20,r2
   8ae04:	94bfffcc 	andi	r18,r18,65535
   8ae08:	94e4b03a 	or	r18,r18,r19
   8ae0c:	9500052e 	bgeu	r18,r20,8ae24 <__udivdi3+0x12c>
   8ae10:	8ca5883a 	add	r18,r17,r18
   8ae14:	10ffffc4 	addi	r3,r2,-1
   8ae18:	9440f136 	bltu	r18,r17,8b1e0 <__udivdi3+0x4e8>
   8ae1c:	9500f02e 	bgeu	r18,r20,8b1e0 <__udivdi3+0x4e8>
   8ae20:	10bfff84 	addi	r2,r2,-2
   8ae24:	b00c943a 	slli	r6,r22,16
   8ae28:	0007883a 	mov	r3,zero
   8ae2c:	3084b03a 	or	r2,r6,r2
   8ae30:	00005906 	br	8af98 <__udivdi3+0x2a0>
   8ae34:	29c05636 	bltu	r5,r7,8af90 <__udivdi3+0x298>
   8ae38:	00bfffd4 	movui	r2,65535
   8ae3c:	11c0622e 	bgeu	r2,r7,8afc8 <__udivdi3+0x2d0>
   8ae40:	00804034 	movhi	r2,256
   8ae44:	10bfffc4 	addi	r2,r2,-1
   8ae48:	11c0ee36 	bltu	r2,r7,8b204 <__udivdi3+0x50c>
   8ae4c:	00800404 	movi	r2,16
   8ae50:	3886d83a 	srl	r3,r7,r2
   8ae54:	01000274 	movhi	r4,9
   8ae58:	21031604 	addi	r4,r4,3160
   8ae5c:	20c7883a 	add	r3,r4,r3
   8ae60:	18c00003 	ldbu	r3,0(r3)
   8ae64:	05400804 	movi	r21,32
   8ae68:	1885883a 	add	r2,r3,r2
   8ae6c:	a8abc83a 	sub	r21,r21,r2
   8ae70:	a800621e 	bne	r21,zero,8affc <__udivdi3+0x304>
   8ae74:	3c00e936 	bltu	r7,r16,8b21c <__udivdi3+0x524>
   8ae78:	9985403a 	cmpgeu	r2,r19,r6
   8ae7c:	0007883a 	mov	r3,zero
   8ae80:	00004506 	br	8af98 <__udivdi3+0x2a0>
   8ae84:	3000041e 	bne	r6,zero,8ae98 <__udivdi3+0x1a0>
   8ae88:	000b883a 	mov	r5,zero
   8ae8c:	01000044 	movi	r4,1
   8ae90:	00814600 	call	81460 <__udivsi3>
   8ae94:	1023883a 	mov	r17,r2
   8ae98:	00bfffd4 	movui	r2,65535
   8ae9c:	14404e2e 	bgeu	r2,r17,8afd8 <__udivdi3+0x2e0>
   8aea0:	00804034 	movhi	r2,256
   8aea4:	10bfffc4 	addi	r2,r2,-1
   8aea8:	1440d836 	bltu	r2,r17,8b20c <__udivdi3+0x514>
   8aeac:	00800404 	movi	r2,16
   8aeb0:	8886d83a 	srl	r3,r17,r2
   8aeb4:	01000274 	movhi	r4,9
   8aeb8:	21031604 	addi	r4,r4,3160
   8aebc:	20c7883a 	add	r3,r4,r3
   8aec0:	18c00003 	ldbu	r3,0(r3)
   8aec4:	1885883a 	add	r2,r3,r2
   8aec8:	00c00804 	movi	r3,32
   8aecc:	1887c83a 	sub	r3,r3,r2
   8aed0:	18008f1e 	bne	r3,zero,8b110 <__udivdi3+0x418>
   8aed4:	882ad43a 	srli	r21,r17,16
   8aed8:	8461c83a 	sub	r16,r16,r17
   8aedc:	8d3fffcc 	andi	r20,r17,65535
   8aee0:	00c00044 	movi	r3,1
   8aee4:	8009883a 	mov	r4,r16
   8aee8:	a80b883a 	mov	r5,r21
   8aeec:	d8c00015 	stw	r3,0(sp)
   8aef0:	00814c40 	call	814c4 <__umodsi3>
   8aef4:	8009883a 	mov	r4,r16
   8aef8:	a80b883a 	mov	r5,r21
   8aefc:	1027883a 	mov	r19,r2
   8af00:	00814600 	call	81460 <__udivsi3>
   8af04:	9826943a 	slli	r19,r19,16
   8af08:	9008d43a 	srli	r4,r18,16
   8af0c:	1521383a 	mul	r16,r2,r20
   8af10:	102d883a 	mov	r22,r2
   8af14:	24c8b03a 	or	r4,r4,r19
   8af18:	d8c00017 	ldw	r3,0(sp)
   8af1c:	2400052e 	bgeu	r4,r16,8af34 <__udivdi3+0x23c>
   8af20:	2449883a 	add	r4,r4,r17
   8af24:	b0bfffc4 	addi	r2,r22,-1
   8af28:	24400136 	bltu	r4,r17,8af30 <__udivdi3+0x238>
   8af2c:	2400ca36 	bltu	r4,r16,8b258 <__udivdi3+0x560>
   8af30:	102d883a 	mov	r22,r2
   8af34:	2421c83a 	sub	r16,r4,r16
   8af38:	a80b883a 	mov	r5,r21
   8af3c:	8009883a 	mov	r4,r16
   8af40:	d8c00015 	stw	r3,0(sp)
   8af44:	00814c40 	call	814c4 <__umodsi3>
   8af48:	1027883a 	mov	r19,r2
   8af4c:	a80b883a 	mov	r5,r21
   8af50:	8009883a 	mov	r4,r16
   8af54:	00814600 	call	81460 <__udivsi3>
   8af58:	9826943a 	slli	r19,r19,16
   8af5c:	1529383a 	mul	r20,r2,r20
   8af60:	94bfffcc 	andi	r18,r18,65535
   8af64:	94e4b03a 	or	r18,r18,r19
   8af68:	d8c00017 	ldw	r3,0(sp)
   8af6c:	9500052e 	bgeu	r18,r20,8af84 <__udivdi3+0x28c>
   8af70:	8ca5883a 	add	r18,r17,r18
   8af74:	113fffc4 	addi	r4,r2,-1
   8af78:	94409736 	bltu	r18,r17,8b1d8 <__udivdi3+0x4e0>
   8af7c:	9500962e 	bgeu	r18,r20,8b1d8 <__udivdi3+0x4e0>
   8af80:	10bfff84 	addi	r2,r2,-2
   8af84:	b00c943a 	slli	r6,r22,16
   8af88:	3084b03a 	or	r2,r6,r2
   8af8c:	00000206 	br	8af98 <__udivdi3+0x2a0>
   8af90:	0007883a 	mov	r3,zero
   8af94:	0005883a 	mov	r2,zero
   8af98:	dfc00a17 	ldw	ra,40(sp)
   8af9c:	df000917 	ldw	fp,36(sp)
   8afa0:	ddc00817 	ldw	r23,32(sp)
   8afa4:	dd800717 	ldw	r22,28(sp)
   8afa8:	dd400617 	ldw	r21,24(sp)
   8afac:	dd000517 	ldw	r20,20(sp)
   8afb0:	dcc00417 	ldw	r19,16(sp)
   8afb4:	dc800317 	ldw	r18,12(sp)
   8afb8:	dc400217 	ldw	r17,8(sp)
   8afbc:	dc000117 	ldw	r16,4(sp)
   8afc0:	dec00b04 	addi	sp,sp,44
   8afc4:	f800283a 	ret
   8afc8:	00803fc4 	movi	r2,255
   8afcc:	11c5803a 	cmpltu	r2,r2,r7
   8afd0:	100490fa 	slli	r2,r2,3
   8afd4:	003f9e06 	br	8ae50 <__alt_data_end+0xfffbf360>
   8afd8:	00803fc4 	movi	r2,255
   8afdc:	1445803a 	cmpltu	r2,r2,r17
   8afe0:	100490fa 	slli	r2,r2,3
   8afe4:	003fb206 	br	8aeb0 <__alt_data_end+0xfffbf3c0>
   8afe8:	00804034 	movhi	r2,256
   8afec:	10bfffc4 	addi	r2,r2,-1
   8aff0:	11808836 	bltu	r2,r6,8b214 <__udivdi3+0x51c>
   8aff4:	00800404 	movi	r2,16
   8aff8:	003f5606 	br	8ad54 <__alt_data_end+0xfffbf264>
   8affc:	30aed83a 	srl	r23,r6,r2
   8b000:	3d4e983a 	sll	r7,r7,r21
   8b004:	80acd83a 	srl	r22,r16,r2
   8b008:	9884d83a 	srl	r2,r19,r2
   8b00c:	3deeb03a 	or	r23,r7,r23
   8b010:	b824d43a 	srli	r18,r23,16
   8b014:	8560983a 	sll	r16,r16,r21
   8b018:	b009883a 	mov	r4,r22
   8b01c:	900b883a 	mov	r5,r18
   8b020:	3568983a 	sll	r20,r6,r21
   8b024:	1420b03a 	or	r16,r2,r16
   8b028:	00814c40 	call	814c4 <__umodsi3>
   8b02c:	b009883a 	mov	r4,r22
   8b030:	900b883a 	mov	r5,r18
   8b034:	1023883a 	mov	r17,r2
   8b038:	00814600 	call	81460 <__udivsi3>
   8b03c:	8808943a 	slli	r4,r17,16
   8b040:	bf3fffcc 	andi	fp,r23,65535
   8b044:	8006d43a 	srli	r3,r16,16
   8b048:	e0a3383a 	mul	r17,fp,r2
   8b04c:	100d883a 	mov	r6,r2
   8b050:	1906b03a 	or	r3,r3,r4
   8b054:	1c40042e 	bgeu	r3,r17,8b068 <__udivdi3+0x370>
   8b058:	1dc7883a 	add	r3,r3,r23
   8b05c:	10bfffc4 	addi	r2,r2,-1
   8b060:	1dc0752e 	bgeu	r3,r23,8b238 <__udivdi3+0x540>
   8b064:	100d883a 	mov	r6,r2
   8b068:	1c63c83a 	sub	r17,r3,r17
   8b06c:	900b883a 	mov	r5,r18
   8b070:	8809883a 	mov	r4,r17
   8b074:	d9800015 	stw	r6,0(sp)
   8b078:	00814c40 	call	814c4 <__umodsi3>
   8b07c:	102d883a 	mov	r22,r2
   8b080:	8809883a 	mov	r4,r17
   8b084:	900b883a 	mov	r5,r18
   8b088:	00814600 	call	81460 <__udivsi3>
   8b08c:	b02c943a 	slli	r22,r22,16
   8b090:	e089383a 	mul	r4,fp,r2
   8b094:	843fffcc 	andi	r16,r16,65535
   8b098:	85a0b03a 	or	r16,r16,r22
   8b09c:	d9800017 	ldw	r6,0(sp)
   8b0a0:	8100042e 	bgeu	r16,r4,8b0b4 <__udivdi3+0x3bc>
   8b0a4:	85e1883a 	add	r16,r16,r23
   8b0a8:	10ffffc4 	addi	r3,r2,-1
   8b0ac:	85c05e2e 	bgeu	r16,r23,8b228 <__udivdi3+0x530>
   8b0b0:	1805883a 	mov	r2,r3
   8b0b4:	300c943a 	slli	r6,r6,16
   8b0b8:	a17fffcc 	andi	r5,r20,65535
   8b0bc:	a028d43a 	srli	r20,r20,16
   8b0c0:	3084b03a 	or	r2,r6,r2
   8b0c4:	10ffffcc 	andi	r3,r2,65535
   8b0c8:	100cd43a 	srli	r6,r2,16
   8b0cc:	194f383a 	mul	r7,r3,r5
   8b0d0:	1d07383a 	mul	r3,r3,r20
   8b0d4:	314b383a 	mul	r5,r6,r5
   8b0d8:	3810d43a 	srli	r8,r7,16
   8b0dc:	8121c83a 	sub	r16,r16,r4
   8b0e0:	1947883a 	add	r3,r3,r5
   8b0e4:	40c7883a 	add	r3,r8,r3
   8b0e8:	350d383a 	mul	r6,r6,r20
   8b0ec:	1940022e 	bgeu	r3,r5,8b0f8 <__udivdi3+0x400>
   8b0f0:	01000074 	movhi	r4,1
   8b0f4:	310d883a 	add	r6,r6,r4
   8b0f8:	1828d43a 	srli	r20,r3,16
   8b0fc:	a18d883a 	add	r6,r20,r6
   8b100:	81803e36 	bltu	r16,r6,8b1fc <__udivdi3+0x504>
   8b104:	81803826 	beq	r16,r6,8b1e8 <__udivdi3+0x4f0>
   8b108:	0007883a 	mov	r3,zero
   8b10c:	003fa206 	br	8af98 <__alt_data_end+0xfffbf4a8>
   8b110:	88e2983a 	sll	r17,r17,r3
   8b114:	80a8d83a 	srl	r20,r16,r2
   8b118:	80e0983a 	sll	r16,r16,r3
   8b11c:	882ad43a 	srli	r21,r17,16
   8b120:	9884d83a 	srl	r2,r19,r2
   8b124:	a009883a 	mov	r4,r20
   8b128:	a80b883a 	mov	r5,r21
   8b12c:	142eb03a 	or	r23,r2,r16
   8b130:	98e4983a 	sll	r18,r19,r3
   8b134:	00814c40 	call	814c4 <__umodsi3>
   8b138:	a009883a 	mov	r4,r20
   8b13c:	a80b883a 	mov	r5,r21
   8b140:	1021883a 	mov	r16,r2
   8b144:	00814600 	call	81460 <__udivsi3>
   8b148:	1039883a 	mov	fp,r2
   8b14c:	8d3fffcc 	andi	r20,r17,65535
   8b150:	8020943a 	slli	r16,r16,16
   8b154:	b804d43a 	srli	r2,r23,16
   8b158:	a72d383a 	mul	r22,r20,fp
   8b15c:	1404b03a 	or	r2,r2,r16
   8b160:	1580062e 	bgeu	r2,r22,8b17c <__udivdi3+0x484>
   8b164:	1445883a 	add	r2,r2,r17
   8b168:	e0ffffc4 	addi	r3,fp,-1
   8b16c:	14403836 	bltu	r2,r17,8b250 <__udivdi3+0x558>
   8b170:	1580372e 	bgeu	r2,r22,8b250 <__udivdi3+0x558>
   8b174:	e73fff84 	addi	fp,fp,-2
   8b178:	1445883a 	add	r2,r2,r17
   8b17c:	15adc83a 	sub	r22,r2,r22
   8b180:	a80b883a 	mov	r5,r21
   8b184:	b009883a 	mov	r4,r22
   8b188:	00814c40 	call	814c4 <__umodsi3>
   8b18c:	1027883a 	mov	r19,r2
   8b190:	b009883a 	mov	r4,r22
   8b194:	a80b883a 	mov	r5,r21
   8b198:	00814600 	call	81460 <__udivsi3>
   8b19c:	9826943a 	slli	r19,r19,16
   8b1a0:	a0a1383a 	mul	r16,r20,r2
   8b1a4:	b93fffcc 	andi	r4,r23,65535
   8b1a8:	24c8b03a 	or	r4,r4,r19
   8b1ac:	2400062e 	bgeu	r4,r16,8b1c8 <__udivdi3+0x4d0>
   8b1b0:	2449883a 	add	r4,r4,r17
   8b1b4:	10ffffc4 	addi	r3,r2,-1
   8b1b8:	24402336 	bltu	r4,r17,8b248 <__udivdi3+0x550>
   8b1bc:	2400222e 	bgeu	r4,r16,8b248 <__udivdi3+0x550>
   8b1c0:	10bfff84 	addi	r2,r2,-2
   8b1c4:	2449883a 	add	r4,r4,r17
   8b1c8:	e038943a 	slli	fp,fp,16
   8b1cc:	2421c83a 	sub	r16,r4,r16
   8b1d0:	e086b03a 	or	r3,fp,r2
   8b1d4:	003f4306 	br	8aee4 <__alt_data_end+0xfffbf3f4>
   8b1d8:	2005883a 	mov	r2,r4
   8b1dc:	003f6906 	br	8af84 <__alt_data_end+0xfffbf494>
   8b1e0:	1805883a 	mov	r2,r3
   8b1e4:	003f0f06 	br	8ae24 <__alt_data_end+0xfffbf334>
   8b1e8:	1806943a 	slli	r3,r3,16
   8b1ec:	9d66983a 	sll	r19,r19,r21
   8b1f0:	39ffffcc 	andi	r7,r7,65535
   8b1f4:	19c7883a 	add	r3,r3,r7
   8b1f8:	98ffc32e 	bgeu	r19,r3,8b108 <__alt_data_end+0xfffbf618>
   8b1fc:	10bfffc4 	addi	r2,r2,-1
   8b200:	003fc106 	br	8b108 <__alt_data_end+0xfffbf618>
   8b204:	00800604 	movi	r2,24
   8b208:	003f1106 	br	8ae50 <__alt_data_end+0xfffbf360>
   8b20c:	00800604 	movi	r2,24
   8b210:	003f2706 	br	8aeb0 <__alt_data_end+0xfffbf3c0>
   8b214:	00800604 	movi	r2,24
   8b218:	003ece06 	br	8ad54 <__alt_data_end+0xfffbf264>
   8b21c:	0007883a 	mov	r3,zero
   8b220:	00800044 	movi	r2,1
   8b224:	003f5c06 	br	8af98 <__alt_data_end+0xfffbf4a8>
   8b228:	813fa12e 	bgeu	r16,r4,8b0b0 <__alt_data_end+0xfffbf5c0>
   8b22c:	10bfff84 	addi	r2,r2,-2
   8b230:	85e1883a 	add	r16,r16,r23
   8b234:	003f9f06 	br	8b0b4 <__alt_data_end+0xfffbf5c4>
   8b238:	1c7f8a2e 	bgeu	r3,r17,8b064 <__alt_data_end+0xfffbf574>
   8b23c:	31bfff84 	addi	r6,r6,-2
   8b240:	1dc7883a 	add	r3,r3,r23
   8b244:	003f8806 	br	8b068 <__alt_data_end+0xfffbf578>
   8b248:	1805883a 	mov	r2,r3
   8b24c:	003fde06 	br	8b1c8 <__alt_data_end+0xfffbf6d8>
   8b250:	1839883a 	mov	fp,r3
   8b254:	003fc906 	br	8b17c <__alt_data_end+0xfffbf68c>
   8b258:	b5bfff84 	addi	r22,r22,-2
   8b25c:	2449883a 	add	r4,r4,r17
   8b260:	003f3406 	br	8af34 <__alt_data_end+0xfffbf444>
   8b264:	b5bfff84 	addi	r22,r22,-2
   8b268:	1445883a 	add	r2,r2,r17
   8b26c:	003edb06 	br	8addc <__alt_data_end+0xfffbf2ec>

0008b270 <__umoddi3>:
   8b270:	defff404 	addi	sp,sp,-48
   8b274:	df000a15 	stw	fp,40(sp)
   8b278:	dc400315 	stw	r17,12(sp)
   8b27c:	dc000215 	stw	r16,8(sp)
   8b280:	dfc00b15 	stw	ra,44(sp)
   8b284:	ddc00915 	stw	r23,36(sp)
   8b288:	dd800815 	stw	r22,32(sp)
   8b28c:	dd400715 	stw	r21,28(sp)
   8b290:	dd000615 	stw	r20,24(sp)
   8b294:	dcc00515 	stw	r19,20(sp)
   8b298:	dc800415 	stw	r18,16(sp)
   8b29c:	2021883a 	mov	r16,r4
   8b2a0:	2823883a 	mov	r17,r5
   8b2a4:	2839883a 	mov	fp,r5
   8b2a8:	38003c1e 	bne	r7,zero,8b39c <__umoddi3+0x12c>
   8b2ac:	3027883a 	mov	r19,r6
   8b2b0:	2029883a 	mov	r20,r4
   8b2b4:	2980512e 	bgeu	r5,r6,8b3fc <__umoddi3+0x18c>
   8b2b8:	00bfffd4 	movui	r2,65535
   8b2bc:	11809a36 	bltu	r2,r6,8b528 <__umoddi3+0x2b8>
   8b2c0:	01003fc4 	movi	r4,255
   8b2c4:	2189803a 	cmpltu	r4,r4,r6
   8b2c8:	200890fa 	slli	r4,r4,3
   8b2cc:	3104d83a 	srl	r2,r6,r4
   8b2d0:	00c00274 	movhi	r3,9
   8b2d4:	18c31604 	addi	r3,r3,3160
   8b2d8:	1885883a 	add	r2,r3,r2
   8b2dc:	10c00003 	ldbu	r3,0(r2)
   8b2e0:	00800804 	movi	r2,32
   8b2e4:	1909883a 	add	r4,r3,r4
   8b2e8:	1125c83a 	sub	r18,r2,r4
   8b2ec:	90000526 	beq	r18,zero,8b304 <__umoddi3+0x94>
   8b2f0:	8ca2983a 	sll	r17,r17,r18
   8b2f4:	8108d83a 	srl	r4,r16,r4
   8b2f8:	34a6983a 	sll	r19,r6,r18
   8b2fc:	84a8983a 	sll	r20,r16,r18
   8b300:	2478b03a 	or	fp,r4,r17
   8b304:	982ed43a 	srli	r23,r19,16
   8b308:	e009883a 	mov	r4,fp
   8b30c:	9dbfffcc 	andi	r22,r19,65535
   8b310:	b80b883a 	mov	r5,r23
   8b314:	00814c40 	call	814c4 <__umodsi3>
   8b318:	e009883a 	mov	r4,fp
   8b31c:	b80b883a 	mov	r5,r23
   8b320:	102b883a 	mov	r21,r2
   8b324:	00814600 	call	81460 <__udivsi3>
   8b328:	a806943a 	slli	r3,r21,16
   8b32c:	a008d43a 	srli	r4,r20,16
   8b330:	b085383a 	mul	r2,r22,r2
   8b334:	20c8b03a 	or	r4,r4,r3
   8b338:	2080032e 	bgeu	r4,r2,8b348 <__umoddi3+0xd8>
   8b33c:	24c9883a 	add	r4,r4,r19
   8b340:	24c00136 	bltu	r4,r19,8b348 <__umoddi3+0xd8>
   8b344:	20811036 	bltu	r4,r2,8b788 <__umoddi3+0x518>
   8b348:	20abc83a 	sub	r21,r4,r2
   8b34c:	b80b883a 	mov	r5,r23
   8b350:	a809883a 	mov	r4,r21
   8b354:	00814c40 	call	814c4 <__umodsi3>
   8b358:	1023883a 	mov	r17,r2
   8b35c:	b80b883a 	mov	r5,r23
   8b360:	a809883a 	mov	r4,r21
   8b364:	00814600 	call	81460 <__udivsi3>
   8b368:	8822943a 	slli	r17,r17,16
   8b36c:	b085383a 	mul	r2,r22,r2
   8b370:	a0ffffcc 	andi	r3,r20,65535
   8b374:	1c46b03a 	or	r3,r3,r17
   8b378:	1880042e 	bgeu	r3,r2,8b38c <__umoddi3+0x11c>
   8b37c:	1cc7883a 	add	r3,r3,r19
   8b380:	1cc00236 	bltu	r3,r19,8b38c <__umoddi3+0x11c>
   8b384:	1880012e 	bgeu	r3,r2,8b38c <__umoddi3+0x11c>
   8b388:	1cc7883a 	add	r3,r3,r19
   8b38c:	1885c83a 	sub	r2,r3,r2
   8b390:	1484d83a 	srl	r2,r2,r18
   8b394:	0007883a 	mov	r3,zero
   8b398:	00004f06 	br	8b4d8 <__umoddi3+0x268>
   8b39c:	29c04c36 	bltu	r5,r7,8b4d0 <__umoddi3+0x260>
   8b3a0:	00bfffd4 	movui	r2,65535
   8b3a4:	11c0582e 	bgeu	r2,r7,8b508 <__umoddi3+0x298>
   8b3a8:	00804034 	movhi	r2,256
   8b3ac:	10bfffc4 	addi	r2,r2,-1
   8b3b0:	11c0e736 	bltu	r2,r7,8b750 <__umoddi3+0x4e0>
   8b3b4:	01000404 	movi	r4,16
   8b3b8:	3904d83a 	srl	r2,r7,r4
   8b3bc:	00c00274 	movhi	r3,9
   8b3c0:	18c31604 	addi	r3,r3,3160
   8b3c4:	1885883a 	add	r2,r3,r2
   8b3c8:	14c00003 	ldbu	r19,0(r2)
   8b3cc:	00c00804 	movi	r3,32
   8b3d0:	9927883a 	add	r19,r19,r4
   8b3d4:	1ce9c83a 	sub	r20,r3,r19
   8b3d8:	a000581e 	bne	r20,zero,8b53c <__umoddi3+0x2cc>
   8b3dc:	3c400136 	bltu	r7,r17,8b3e4 <__umoddi3+0x174>
   8b3e0:	8180eb36 	bltu	r16,r6,8b790 <__umoddi3+0x520>
   8b3e4:	8185c83a 	sub	r2,r16,r6
   8b3e8:	89e3c83a 	sub	r17,r17,r7
   8b3ec:	8089803a 	cmpltu	r4,r16,r2
   8b3f0:	8939c83a 	sub	fp,r17,r4
   8b3f4:	e007883a 	mov	r3,fp
   8b3f8:	00003706 	br	8b4d8 <__umoddi3+0x268>
   8b3fc:	3000041e 	bne	r6,zero,8b410 <__umoddi3+0x1a0>
   8b400:	000b883a 	mov	r5,zero
   8b404:	01000044 	movi	r4,1
   8b408:	00814600 	call	81460 <__udivsi3>
   8b40c:	1027883a 	mov	r19,r2
   8b410:	00bfffd4 	movui	r2,65535
   8b414:	14c0402e 	bgeu	r2,r19,8b518 <__umoddi3+0x2a8>
   8b418:	00804034 	movhi	r2,256
   8b41c:	10bfffc4 	addi	r2,r2,-1
   8b420:	14c0cd36 	bltu	r2,r19,8b758 <__umoddi3+0x4e8>
   8b424:	00800404 	movi	r2,16
   8b428:	9886d83a 	srl	r3,r19,r2
   8b42c:	01000274 	movhi	r4,9
   8b430:	21031604 	addi	r4,r4,3160
   8b434:	20c7883a 	add	r3,r4,r3
   8b438:	18c00003 	ldbu	r3,0(r3)
   8b43c:	1887883a 	add	r3,r3,r2
   8b440:	00800804 	movi	r2,32
   8b444:	10e5c83a 	sub	r18,r2,r3
   8b448:	9000901e 	bne	r18,zero,8b68c <__umoddi3+0x41c>
   8b44c:	982cd43a 	srli	r22,r19,16
   8b450:	8ce3c83a 	sub	r17,r17,r19
   8b454:	9d7fffcc 	andi	r21,r19,65535
   8b458:	b00b883a 	mov	r5,r22
   8b45c:	8809883a 	mov	r4,r17
   8b460:	00814c40 	call	814c4 <__umodsi3>
   8b464:	8809883a 	mov	r4,r17
   8b468:	b00b883a 	mov	r5,r22
   8b46c:	1021883a 	mov	r16,r2
   8b470:	00814600 	call	81460 <__udivsi3>
   8b474:	8006943a 	slli	r3,r16,16
   8b478:	a008d43a 	srli	r4,r20,16
   8b47c:	1545383a 	mul	r2,r2,r21
   8b480:	20c8b03a 	or	r4,r4,r3
   8b484:	2080042e 	bgeu	r4,r2,8b498 <__umoddi3+0x228>
   8b488:	24c9883a 	add	r4,r4,r19
   8b48c:	24c00236 	bltu	r4,r19,8b498 <__umoddi3+0x228>
   8b490:	2080012e 	bgeu	r4,r2,8b498 <__umoddi3+0x228>
   8b494:	24c9883a 	add	r4,r4,r19
   8b498:	20a1c83a 	sub	r16,r4,r2
   8b49c:	b00b883a 	mov	r5,r22
   8b4a0:	8009883a 	mov	r4,r16
   8b4a4:	00814c40 	call	814c4 <__umodsi3>
   8b4a8:	1023883a 	mov	r17,r2
   8b4ac:	b00b883a 	mov	r5,r22
   8b4b0:	8009883a 	mov	r4,r16
   8b4b4:	00814600 	call	81460 <__udivsi3>
   8b4b8:	8822943a 	slli	r17,r17,16
   8b4bc:	1545383a 	mul	r2,r2,r21
   8b4c0:	a53fffcc 	andi	r20,r20,65535
   8b4c4:	a446b03a 	or	r3,r20,r17
   8b4c8:	18bfb02e 	bgeu	r3,r2,8b38c <__alt_data_end+0xfffbf89c>
   8b4cc:	003fab06 	br	8b37c <__alt_data_end+0xfffbf88c>
   8b4d0:	2005883a 	mov	r2,r4
   8b4d4:	2807883a 	mov	r3,r5
   8b4d8:	dfc00b17 	ldw	ra,44(sp)
   8b4dc:	df000a17 	ldw	fp,40(sp)
   8b4e0:	ddc00917 	ldw	r23,36(sp)
   8b4e4:	dd800817 	ldw	r22,32(sp)
   8b4e8:	dd400717 	ldw	r21,28(sp)
   8b4ec:	dd000617 	ldw	r20,24(sp)
   8b4f0:	dcc00517 	ldw	r19,20(sp)
   8b4f4:	dc800417 	ldw	r18,16(sp)
   8b4f8:	dc400317 	ldw	r17,12(sp)
   8b4fc:	dc000217 	ldw	r16,8(sp)
   8b500:	dec00c04 	addi	sp,sp,48
   8b504:	f800283a 	ret
   8b508:	04c03fc4 	movi	r19,255
   8b50c:	99c9803a 	cmpltu	r4,r19,r7
   8b510:	200890fa 	slli	r4,r4,3
   8b514:	003fa806 	br	8b3b8 <__alt_data_end+0xfffbf8c8>
   8b518:	00803fc4 	movi	r2,255
   8b51c:	14c5803a 	cmpltu	r2,r2,r19
   8b520:	100490fa 	slli	r2,r2,3
   8b524:	003fc006 	br	8b428 <__alt_data_end+0xfffbf938>
   8b528:	00804034 	movhi	r2,256
   8b52c:	10bfffc4 	addi	r2,r2,-1
   8b530:	11808b36 	bltu	r2,r6,8b760 <__umoddi3+0x4f0>
   8b534:	01000404 	movi	r4,16
   8b538:	003f6406 	br	8b2cc <__alt_data_end+0xfffbf7dc>
   8b53c:	34c4d83a 	srl	r2,r6,r19
   8b540:	3d0e983a 	sll	r7,r7,r20
   8b544:	8cf8d83a 	srl	fp,r17,r19
   8b548:	8d10983a 	sll	r8,r17,r20
   8b54c:	38aab03a 	or	r21,r7,r2
   8b550:	a82cd43a 	srli	r22,r21,16
   8b554:	84e2d83a 	srl	r17,r16,r19
   8b558:	e009883a 	mov	r4,fp
   8b55c:	b00b883a 	mov	r5,r22
   8b560:	8a22b03a 	or	r17,r17,r8
   8b564:	3524983a 	sll	r18,r6,r20
   8b568:	00814c40 	call	814c4 <__umodsi3>
   8b56c:	e009883a 	mov	r4,fp
   8b570:	b00b883a 	mov	r5,r22
   8b574:	102f883a 	mov	r23,r2
   8b578:	00814600 	call	81460 <__udivsi3>
   8b57c:	100d883a 	mov	r6,r2
   8b580:	b808943a 	slli	r4,r23,16
   8b584:	aa3fffcc 	andi	r8,r21,65535
   8b588:	8804d43a 	srli	r2,r17,16
   8b58c:	41af383a 	mul	r23,r8,r6
   8b590:	8520983a 	sll	r16,r16,r20
   8b594:	1104b03a 	or	r2,r2,r4
   8b598:	15c0042e 	bgeu	r2,r23,8b5ac <__umoddi3+0x33c>
   8b59c:	1545883a 	add	r2,r2,r21
   8b5a0:	30ffffc4 	addi	r3,r6,-1
   8b5a4:	1540742e 	bgeu	r2,r21,8b778 <__umoddi3+0x508>
   8b5a8:	180d883a 	mov	r6,r3
   8b5ac:	15efc83a 	sub	r23,r2,r23
   8b5b0:	b00b883a 	mov	r5,r22
   8b5b4:	b809883a 	mov	r4,r23
   8b5b8:	d9800115 	stw	r6,4(sp)
   8b5bc:	da000015 	stw	r8,0(sp)
   8b5c0:	00814c40 	call	814c4 <__umodsi3>
   8b5c4:	b00b883a 	mov	r5,r22
   8b5c8:	b809883a 	mov	r4,r23
   8b5cc:	1039883a 	mov	fp,r2
   8b5d0:	00814600 	call	81460 <__udivsi3>
   8b5d4:	da000017 	ldw	r8,0(sp)
   8b5d8:	e038943a 	slli	fp,fp,16
   8b5dc:	100b883a 	mov	r5,r2
   8b5e0:	4089383a 	mul	r4,r8,r2
   8b5e4:	8a3fffcc 	andi	r8,r17,65535
   8b5e8:	4710b03a 	or	r8,r8,fp
   8b5ec:	d9800117 	ldw	r6,4(sp)
   8b5f0:	4100042e 	bgeu	r8,r4,8b604 <__umoddi3+0x394>
   8b5f4:	4551883a 	add	r8,r8,r21
   8b5f8:	10bfffc4 	addi	r2,r2,-1
   8b5fc:	45405a2e 	bgeu	r8,r21,8b768 <__umoddi3+0x4f8>
   8b600:	100b883a 	mov	r5,r2
   8b604:	300c943a 	slli	r6,r6,16
   8b608:	91ffffcc 	andi	r7,r18,65535
   8b60c:	9004d43a 	srli	r2,r18,16
   8b610:	314cb03a 	or	r6,r6,r5
   8b614:	317fffcc 	andi	r5,r6,65535
   8b618:	300cd43a 	srli	r6,r6,16
   8b61c:	29d3383a 	mul	r9,r5,r7
   8b620:	288b383a 	mul	r5,r5,r2
   8b624:	31cf383a 	mul	r7,r6,r7
   8b628:	4806d43a 	srli	r3,r9,16
   8b62c:	4111c83a 	sub	r8,r8,r4
   8b630:	29cb883a 	add	r5,r5,r7
   8b634:	194b883a 	add	r5,r3,r5
   8b638:	3085383a 	mul	r2,r6,r2
   8b63c:	29c0022e 	bgeu	r5,r7,8b648 <__umoddi3+0x3d8>
   8b640:	00c00074 	movhi	r3,1
   8b644:	10c5883a 	add	r2,r2,r3
   8b648:	2808d43a 	srli	r4,r5,16
   8b64c:	280a943a 	slli	r5,r5,16
   8b650:	4a7fffcc 	andi	r9,r9,65535
   8b654:	2085883a 	add	r2,r4,r2
   8b658:	2a4b883a 	add	r5,r5,r9
   8b65c:	40803636 	bltu	r8,r2,8b738 <__umoddi3+0x4c8>
   8b660:	40804d26 	beq	r8,r2,8b798 <__umoddi3+0x528>
   8b664:	4089c83a 	sub	r4,r8,r2
   8b668:	280f883a 	mov	r7,r5
   8b66c:	81cfc83a 	sub	r7,r16,r7
   8b670:	81c7803a 	cmpltu	r3,r16,r7
   8b674:	20c7c83a 	sub	r3,r4,r3
   8b678:	1cc4983a 	sll	r2,r3,r19
   8b67c:	3d0ed83a 	srl	r7,r7,r20
   8b680:	1d06d83a 	srl	r3,r3,r20
   8b684:	11c4b03a 	or	r2,r2,r7
   8b688:	003f9306 	br	8b4d8 <__alt_data_end+0xfffbf9e8>
   8b68c:	9ca6983a 	sll	r19,r19,r18
   8b690:	88e8d83a 	srl	r20,r17,r3
   8b694:	80c4d83a 	srl	r2,r16,r3
   8b698:	982cd43a 	srli	r22,r19,16
   8b69c:	8ca2983a 	sll	r17,r17,r18
   8b6a0:	a009883a 	mov	r4,r20
   8b6a4:	b00b883a 	mov	r5,r22
   8b6a8:	1478b03a 	or	fp,r2,r17
   8b6ac:	00814c40 	call	814c4 <__umodsi3>
   8b6b0:	a009883a 	mov	r4,r20
   8b6b4:	b00b883a 	mov	r5,r22
   8b6b8:	1023883a 	mov	r17,r2
   8b6bc:	00814600 	call	81460 <__udivsi3>
   8b6c0:	9d7fffcc 	andi	r21,r19,65535
   8b6c4:	880a943a 	slli	r5,r17,16
   8b6c8:	e008d43a 	srli	r4,fp,16
   8b6cc:	a885383a 	mul	r2,r21,r2
   8b6d0:	84a8983a 	sll	r20,r16,r18
   8b6d4:	2148b03a 	or	r4,r4,r5
   8b6d8:	2080042e 	bgeu	r4,r2,8b6ec <__umoddi3+0x47c>
   8b6dc:	24c9883a 	add	r4,r4,r19
   8b6e0:	24c00236 	bltu	r4,r19,8b6ec <__umoddi3+0x47c>
   8b6e4:	2080012e 	bgeu	r4,r2,8b6ec <__umoddi3+0x47c>
   8b6e8:	24c9883a 	add	r4,r4,r19
   8b6ec:	20a3c83a 	sub	r17,r4,r2
   8b6f0:	b00b883a 	mov	r5,r22
   8b6f4:	8809883a 	mov	r4,r17
   8b6f8:	00814c40 	call	814c4 <__umodsi3>
   8b6fc:	102f883a 	mov	r23,r2
   8b700:	8809883a 	mov	r4,r17
   8b704:	b00b883a 	mov	r5,r22
   8b708:	00814600 	call	81460 <__udivsi3>
   8b70c:	b82e943a 	slli	r23,r23,16
   8b710:	a885383a 	mul	r2,r21,r2
   8b714:	e13fffcc 	andi	r4,fp,65535
   8b718:	25c8b03a 	or	r4,r4,r23
   8b71c:	2080042e 	bgeu	r4,r2,8b730 <__umoddi3+0x4c0>
   8b720:	24c9883a 	add	r4,r4,r19
   8b724:	24c00236 	bltu	r4,r19,8b730 <__umoddi3+0x4c0>
   8b728:	2080012e 	bgeu	r4,r2,8b730 <__umoddi3+0x4c0>
   8b72c:	24c9883a 	add	r4,r4,r19
   8b730:	20a3c83a 	sub	r17,r4,r2
   8b734:	003f4806 	br	8b458 <__alt_data_end+0xfffbf968>
   8b738:	2c8fc83a 	sub	r7,r5,r18
   8b73c:	1545c83a 	sub	r2,r2,r21
   8b740:	29cb803a 	cmpltu	r5,r5,r7
   8b744:	1145c83a 	sub	r2,r2,r5
   8b748:	4089c83a 	sub	r4,r8,r2
   8b74c:	003fc706 	br	8b66c <__alt_data_end+0xfffbfb7c>
   8b750:	01000604 	movi	r4,24
   8b754:	003f1806 	br	8b3b8 <__alt_data_end+0xfffbf8c8>
   8b758:	00800604 	movi	r2,24
   8b75c:	003f3206 	br	8b428 <__alt_data_end+0xfffbf938>
   8b760:	01000604 	movi	r4,24
   8b764:	003ed906 	br	8b2cc <__alt_data_end+0xfffbf7dc>
   8b768:	413fa52e 	bgeu	r8,r4,8b600 <__alt_data_end+0xfffbfb10>
   8b76c:	297fff84 	addi	r5,r5,-2
   8b770:	4551883a 	add	r8,r8,r21
   8b774:	003fa306 	br	8b604 <__alt_data_end+0xfffbfb14>
   8b778:	15ff8b2e 	bgeu	r2,r23,8b5a8 <__alt_data_end+0xfffbfab8>
   8b77c:	31bfff84 	addi	r6,r6,-2
   8b780:	1545883a 	add	r2,r2,r21
   8b784:	003f8906 	br	8b5ac <__alt_data_end+0xfffbfabc>
   8b788:	24c9883a 	add	r4,r4,r19
   8b78c:	003eee06 	br	8b348 <__alt_data_end+0xfffbf858>
   8b790:	8005883a 	mov	r2,r16
   8b794:	003f1706 	br	8b3f4 <__alt_data_end+0xfffbf904>
   8b798:	817fe736 	bltu	r16,r5,8b738 <__alt_data_end+0xfffbfc48>
   8b79c:	280f883a 	mov	r7,r5
   8b7a0:	0009883a 	mov	r4,zero
   8b7a4:	003fb106 	br	8b66c <__alt_data_end+0xfffbfb7c>

0008b7a8 <__adddf3>:
   8b7a8:	02c00434 	movhi	r11,16
   8b7ac:	5affffc4 	addi	r11,r11,-1
   8b7b0:	2806d7fa 	srli	r3,r5,31
   8b7b4:	2ad4703a 	and	r10,r5,r11
   8b7b8:	3ad2703a 	and	r9,r7,r11
   8b7bc:	3804d53a 	srli	r2,r7,20
   8b7c0:	3018d77a 	srli	r12,r6,29
   8b7c4:	280ad53a 	srli	r5,r5,20
   8b7c8:	501490fa 	slli	r10,r10,3
   8b7cc:	2010d77a 	srli	r8,r4,29
   8b7d0:	481290fa 	slli	r9,r9,3
   8b7d4:	380ed7fa 	srli	r7,r7,31
   8b7d8:	defffb04 	addi	sp,sp,-20
   8b7dc:	dc800215 	stw	r18,8(sp)
   8b7e0:	dc400115 	stw	r17,4(sp)
   8b7e4:	dc000015 	stw	r16,0(sp)
   8b7e8:	dfc00415 	stw	ra,16(sp)
   8b7ec:	dcc00315 	stw	r19,12(sp)
   8b7f0:	1c803fcc 	andi	r18,r3,255
   8b7f4:	2c01ffcc 	andi	r16,r5,2047
   8b7f8:	5210b03a 	or	r8,r10,r8
   8b7fc:	202290fa 	slli	r17,r4,3
   8b800:	1081ffcc 	andi	r2,r2,2047
   8b804:	4b12b03a 	or	r9,r9,r12
   8b808:	300c90fa 	slli	r6,r6,3
   8b80c:	91c07526 	beq	r18,r7,8b9e4 <__adddf3+0x23c>
   8b810:	8087c83a 	sub	r3,r16,r2
   8b814:	00c0ab0e 	bge	zero,r3,8bac4 <__adddf3+0x31c>
   8b818:	10002a1e 	bne	r2,zero,8b8c4 <__adddf3+0x11c>
   8b81c:	4984b03a 	or	r2,r9,r6
   8b820:	1000961e 	bne	r2,zero,8ba7c <__adddf3+0x2d4>
   8b824:	888001cc 	andi	r2,r17,7
   8b828:	10000726 	beq	r2,zero,8b848 <__adddf3+0xa0>
   8b82c:	888003cc 	andi	r2,r17,15
   8b830:	00c00104 	movi	r3,4
   8b834:	10c00426 	beq	r2,r3,8b848 <__adddf3+0xa0>
   8b838:	88c7883a 	add	r3,r17,r3
   8b83c:	1c63803a 	cmpltu	r17,r3,r17
   8b840:	4451883a 	add	r8,r8,r17
   8b844:	1823883a 	mov	r17,r3
   8b848:	4080202c 	andhi	r2,r8,128
   8b84c:	10005926 	beq	r2,zero,8b9b4 <__adddf3+0x20c>
   8b850:	84000044 	addi	r16,r16,1
   8b854:	0081ffc4 	movi	r2,2047
   8b858:	8080ba26 	beq	r16,r2,8bb44 <__adddf3+0x39c>
   8b85c:	00bfe034 	movhi	r2,65408
   8b860:	10bfffc4 	addi	r2,r2,-1
   8b864:	4090703a 	and	r8,r8,r2
   8b868:	4004977a 	slli	r2,r8,29
   8b86c:	4010927a 	slli	r8,r8,9
   8b870:	8822d0fa 	srli	r17,r17,3
   8b874:	8401ffcc 	andi	r16,r16,2047
   8b878:	4010d33a 	srli	r8,r8,12
   8b87c:	9007883a 	mov	r3,r18
   8b880:	1444b03a 	or	r2,r2,r17
   8b884:	8401ffcc 	andi	r16,r16,2047
   8b888:	8020953a 	slli	r16,r16,20
   8b88c:	18c03fcc 	andi	r3,r3,255
   8b890:	01000434 	movhi	r4,16
   8b894:	213fffc4 	addi	r4,r4,-1
   8b898:	180697fa 	slli	r3,r3,31
   8b89c:	4110703a 	and	r8,r8,r4
   8b8a0:	4410b03a 	or	r8,r8,r16
   8b8a4:	40c6b03a 	or	r3,r8,r3
   8b8a8:	dfc00417 	ldw	ra,16(sp)
   8b8ac:	dcc00317 	ldw	r19,12(sp)
   8b8b0:	dc800217 	ldw	r18,8(sp)
   8b8b4:	dc400117 	ldw	r17,4(sp)
   8b8b8:	dc000017 	ldw	r16,0(sp)
   8b8bc:	dec00504 	addi	sp,sp,20
   8b8c0:	f800283a 	ret
   8b8c4:	0081ffc4 	movi	r2,2047
   8b8c8:	80bfd626 	beq	r16,r2,8b824 <__alt_data_end+0xfffbfd34>
   8b8cc:	4a402034 	orhi	r9,r9,128
   8b8d0:	00800e04 	movi	r2,56
   8b8d4:	10c09f16 	blt	r2,r3,8bb54 <__adddf3+0x3ac>
   8b8d8:	008007c4 	movi	r2,31
   8b8dc:	10c0c216 	blt	r2,r3,8bbe8 <__adddf3+0x440>
   8b8e0:	00800804 	movi	r2,32
   8b8e4:	10c5c83a 	sub	r2,r2,r3
   8b8e8:	488a983a 	sll	r5,r9,r2
   8b8ec:	30c8d83a 	srl	r4,r6,r3
   8b8f0:	3084983a 	sll	r2,r6,r2
   8b8f4:	48c6d83a 	srl	r3,r9,r3
   8b8f8:	290cb03a 	or	r6,r5,r4
   8b8fc:	1004c03a 	cmpne	r2,r2,zero
   8b900:	308cb03a 	or	r6,r6,r2
   8b904:	898dc83a 	sub	r6,r17,r6
   8b908:	89a3803a 	cmpltu	r17,r17,r6
   8b90c:	40d1c83a 	sub	r8,r8,r3
   8b910:	4451c83a 	sub	r8,r8,r17
   8b914:	3023883a 	mov	r17,r6
   8b918:	4080202c 	andhi	r2,r8,128
   8b91c:	10002326 	beq	r2,zero,8b9ac <__adddf3+0x204>
   8b920:	04c02034 	movhi	r19,128
   8b924:	9cffffc4 	addi	r19,r19,-1
   8b928:	44e6703a 	and	r19,r8,r19
   8b92c:	98007626 	beq	r19,zero,8bb08 <__adddf3+0x360>
   8b930:	9809883a 	mov	r4,r19
   8b934:	008ddac0 	call	8ddac <__clzsi2>
   8b938:	10fffe04 	addi	r3,r2,-8
   8b93c:	010007c4 	movi	r4,31
   8b940:	20c07716 	blt	r4,r3,8bb20 <__adddf3+0x378>
   8b944:	00800804 	movi	r2,32
   8b948:	10c5c83a 	sub	r2,r2,r3
   8b94c:	8884d83a 	srl	r2,r17,r2
   8b950:	98d0983a 	sll	r8,r19,r3
   8b954:	88e2983a 	sll	r17,r17,r3
   8b958:	1204b03a 	or	r2,r2,r8
   8b95c:	1c007416 	blt	r3,r16,8bb30 <__adddf3+0x388>
   8b960:	1c21c83a 	sub	r16,r3,r16
   8b964:	82000044 	addi	r8,r16,1
   8b968:	00c007c4 	movi	r3,31
   8b96c:	1a009116 	blt	r3,r8,8bbb4 <__adddf3+0x40c>
   8b970:	00c00804 	movi	r3,32
   8b974:	1a07c83a 	sub	r3,r3,r8
   8b978:	8a08d83a 	srl	r4,r17,r8
   8b97c:	88e2983a 	sll	r17,r17,r3
   8b980:	10c6983a 	sll	r3,r2,r3
   8b984:	1210d83a 	srl	r8,r2,r8
   8b988:	8804c03a 	cmpne	r2,r17,zero
   8b98c:	1906b03a 	or	r3,r3,r4
   8b990:	18a2b03a 	or	r17,r3,r2
   8b994:	0021883a 	mov	r16,zero
   8b998:	003fa206 	br	8b824 <__alt_data_end+0xfffbfd34>
   8b99c:	1890b03a 	or	r8,r3,r2
   8b9a0:	40017d26 	beq	r8,zero,8bf98 <__adddf3+0x7f0>
   8b9a4:	1011883a 	mov	r8,r2
   8b9a8:	1823883a 	mov	r17,r3
   8b9ac:	888001cc 	andi	r2,r17,7
   8b9b0:	103f9e1e 	bne	r2,zero,8b82c <__alt_data_end+0xfffbfd3c>
   8b9b4:	4004977a 	slli	r2,r8,29
   8b9b8:	8822d0fa 	srli	r17,r17,3
   8b9bc:	4010d0fa 	srli	r8,r8,3
   8b9c0:	9007883a 	mov	r3,r18
   8b9c4:	1444b03a 	or	r2,r2,r17
   8b9c8:	0101ffc4 	movi	r4,2047
   8b9cc:	81002426 	beq	r16,r4,8ba60 <__adddf3+0x2b8>
   8b9d0:	8120703a 	and	r16,r16,r4
   8b9d4:	01000434 	movhi	r4,16
   8b9d8:	213fffc4 	addi	r4,r4,-1
   8b9dc:	4110703a 	and	r8,r8,r4
   8b9e0:	003fa806 	br	8b884 <__alt_data_end+0xfffbfd94>
   8b9e4:	8089c83a 	sub	r4,r16,r2
   8b9e8:	01005e0e 	bge	zero,r4,8bb64 <__adddf3+0x3bc>
   8b9ec:	10002b26 	beq	r2,zero,8ba9c <__adddf3+0x2f4>
   8b9f0:	0081ffc4 	movi	r2,2047
   8b9f4:	80bf8b26 	beq	r16,r2,8b824 <__alt_data_end+0xfffbfd34>
   8b9f8:	4a402034 	orhi	r9,r9,128
   8b9fc:	00800e04 	movi	r2,56
   8ba00:	1100a40e 	bge	r2,r4,8bc94 <__adddf3+0x4ec>
   8ba04:	498cb03a 	or	r6,r9,r6
   8ba08:	300ac03a 	cmpne	r5,r6,zero
   8ba0c:	0013883a 	mov	r9,zero
   8ba10:	2c4b883a 	add	r5,r5,r17
   8ba14:	2c63803a 	cmpltu	r17,r5,r17
   8ba18:	4a11883a 	add	r8,r9,r8
   8ba1c:	8a11883a 	add	r8,r17,r8
   8ba20:	2823883a 	mov	r17,r5
   8ba24:	4080202c 	andhi	r2,r8,128
   8ba28:	103fe026 	beq	r2,zero,8b9ac <__alt_data_end+0xfffbfebc>
   8ba2c:	84000044 	addi	r16,r16,1
   8ba30:	0081ffc4 	movi	r2,2047
   8ba34:	8080d226 	beq	r16,r2,8bd80 <__adddf3+0x5d8>
   8ba38:	00bfe034 	movhi	r2,65408
   8ba3c:	10bfffc4 	addi	r2,r2,-1
   8ba40:	4090703a 	and	r8,r8,r2
   8ba44:	880ad07a 	srli	r5,r17,1
   8ba48:	400897fa 	slli	r4,r8,31
   8ba4c:	88c0004c 	andi	r3,r17,1
   8ba50:	28e2b03a 	or	r17,r5,r3
   8ba54:	4010d07a 	srli	r8,r8,1
   8ba58:	2462b03a 	or	r17,r4,r17
   8ba5c:	003f7106 	br	8b824 <__alt_data_end+0xfffbfd34>
   8ba60:	4088b03a 	or	r4,r8,r2
   8ba64:	20014526 	beq	r4,zero,8bf7c <__adddf3+0x7d4>
   8ba68:	01000434 	movhi	r4,16
   8ba6c:	42000234 	orhi	r8,r8,8
   8ba70:	213fffc4 	addi	r4,r4,-1
   8ba74:	4110703a 	and	r8,r8,r4
   8ba78:	003f8206 	br	8b884 <__alt_data_end+0xfffbfd94>
   8ba7c:	18ffffc4 	addi	r3,r3,-1
   8ba80:	1800491e 	bne	r3,zero,8bba8 <__adddf3+0x400>
   8ba84:	898bc83a 	sub	r5,r17,r6
   8ba88:	8963803a 	cmpltu	r17,r17,r5
   8ba8c:	4251c83a 	sub	r8,r8,r9
   8ba90:	4451c83a 	sub	r8,r8,r17
   8ba94:	2823883a 	mov	r17,r5
   8ba98:	003f9f06 	br	8b918 <__alt_data_end+0xfffbfe28>
   8ba9c:	4984b03a 	or	r2,r9,r6
   8baa0:	103f6026 	beq	r2,zero,8b824 <__alt_data_end+0xfffbfd34>
   8baa4:	213fffc4 	addi	r4,r4,-1
   8baa8:	2000931e 	bne	r4,zero,8bcf8 <__adddf3+0x550>
   8baac:	898d883a 	add	r6,r17,r6
   8bab0:	3463803a 	cmpltu	r17,r6,r17
   8bab4:	4251883a 	add	r8,r8,r9
   8bab8:	8a11883a 	add	r8,r17,r8
   8babc:	3023883a 	mov	r17,r6
   8bac0:	003fd806 	br	8ba24 <__alt_data_end+0xfffbff34>
   8bac4:	1800541e 	bne	r3,zero,8bc18 <__adddf3+0x470>
   8bac8:	80800044 	addi	r2,r16,1
   8bacc:	1081ffcc 	andi	r2,r2,2047
   8bad0:	00c00044 	movi	r3,1
   8bad4:	1880a00e 	bge	r3,r2,8bd58 <__adddf3+0x5b0>
   8bad8:	8989c83a 	sub	r4,r17,r6
   8badc:	8905803a 	cmpltu	r2,r17,r4
   8bae0:	4267c83a 	sub	r19,r8,r9
   8bae4:	98a7c83a 	sub	r19,r19,r2
   8bae8:	9880202c 	andhi	r2,r19,128
   8baec:	10006326 	beq	r2,zero,8bc7c <__adddf3+0x4d4>
   8baf0:	3463c83a 	sub	r17,r6,r17
   8baf4:	4a07c83a 	sub	r3,r9,r8
   8baf8:	344d803a 	cmpltu	r6,r6,r17
   8bafc:	19a7c83a 	sub	r19,r3,r6
   8bb00:	3825883a 	mov	r18,r7
   8bb04:	983f8a1e 	bne	r19,zero,8b930 <__alt_data_end+0xfffbfe40>
   8bb08:	8809883a 	mov	r4,r17
   8bb0c:	008ddac0 	call	8ddac <__clzsi2>
   8bb10:	10800804 	addi	r2,r2,32
   8bb14:	10fffe04 	addi	r3,r2,-8
   8bb18:	010007c4 	movi	r4,31
   8bb1c:	20ff890e 	bge	r4,r3,8b944 <__alt_data_end+0xfffbfe54>
   8bb20:	10bff604 	addi	r2,r2,-40
   8bb24:	8884983a 	sll	r2,r17,r2
   8bb28:	0023883a 	mov	r17,zero
   8bb2c:	1c3f8c0e 	bge	r3,r16,8b960 <__alt_data_end+0xfffbfe70>
   8bb30:	023fe034 	movhi	r8,65408
   8bb34:	423fffc4 	addi	r8,r8,-1
   8bb38:	80e1c83a 	sub	r16,r16,r3
   8bb3c:	1210703a 	and	r8,r2,r8
   8bb40:	003f3806 	br	8b824 <__alt_data_end+0xfffbfd34>
   8bb44:	9007883a 	mov	r3,r18
   8bb48:	0011883a 	mov	r8,zero
   8bb4c:	0005883a 	mov	r2,zero
   8bb50:	003f4c06 	br	8b884 <__alt_data_end+0xfffbfd94>
   8bb54:	498cb03a 	or	r6,r9,r6
   8bb58:	300cc03a 	cmpne	r6,r6,zero
   8bb5c:	0007883a 	mov	r3,zero
   8bb60:	003f6806 	br	8b904 <__alt_data_end+0xfffbfe14>
   8bb64:	20009c1e 	bne	r4,zero,8bdd8 <__adddf3+0x630>
   8bb68:	80800044 	addi	r2,r16,1
   8bb6c:	1141ffcc 	andi	r5,r2,2047
   8bb70:	01000044 	movi	r4,1
   8bb74:	2140670e 	bge	r4,r5,8bd14 <__adddf3+0x56c>
   8bb78:	0101ffc4 	movi	r4,2047
   8bb7c:	11007f26 	beq	r2,r4,8bd7c <__adddf3+0x5d4>
   8bb80:	898d883a 	add	r6,r17,r6
   8bb84:	4247883a 	add	r3,r8,r9
   8bb88:	3451803a 	cmpltu	r8,r6,r17
   8bb8c:	40d1883a 	add	r8,r8,r3
   8bb90:	402297fa 	slli	r17,r8,31
   8bb94:	300cd07a 	srli	r6,r6,1
   8bb98:	4010d07a 	srli	r8,r8,1
   8bb9c:	1021883a 	mov	r16,r2
   8bba0:	89a2b03a 	or	r17,r17,r6
   8bba4:	003f1f06 	br	8b824 <__alt_data_end+0xfffbfd34>
   8bba8:	0081ffc4 	movi	r2,2047
   8bbac:	80bf481e 	bne	r16,r2,8b8d0 <__alt_data_end+0xfffbfde0>
   8bbb0:	003f1c06 	br	8b824 <__alt_data_end+0xfffbfd34>
   8bbb4:	843ff844 	addi	r16,r16,-31
   8bbb8:	01000804 	movi	r4,32
   8bbbc:	1406d83a 	srl	r3,r2,r16
   8bbc0:	41005026 	beq	r8,r4,8bd04 <__adddf3+0x55c>
   8bbc4:	01001004 	movi	r4,64
   8bbc8:	2211c83a 	sub	r8,r4,r8
   8bbcc:	1204983a 	sll	r2,r2,r8
   8bbd0:	88a2b03a 	or	r17,r17,r2
   8bbd4:	8822c03a 	cmpne	r17,r17,zero
   8bbd8:	1c62b03a 	or	r17,r3,r17
   8bbdc:	0011883a 	mov	r8,zero
   8bbe0:	0021883a 	mov	r16,zero
   8bbe4:	003f7106 	br	8b9ac <__alt_data_end+0xfffbfebc>
   8bbe8:	193ff804 	addi	r4,r3,-32
   8bbec:	00800804 	movi	r2,32
   8bbf0:	4908d83a 	srl	r4,r9,r4
   8bbf4:	18804526 	beq	r3,r2,8bd0c <__adddf3+0x564>
   8bbf8:	00801004 	movi	r2,64
   8bbfc:	10c5c83a 	sub	r2,r2,r3
   8bc00:	4886983a 	sll	r3,r9,r2
   8bc04:	198cb03a 	or	r6,r3,r6
   8bc08:	300cc03a 	cmpne	r6,r6,zero
   8bc0c:	218cb03a 	or	r6,r4,r6
   8bc10:	0007883a 	mov	r3,zero
   8bc14:	003f3b06 	br	8b904 <__alt_data_end+0xfffbfe14>
   8bc18:	80002a26 	beq	r16,zero,8bcc4 <__adddf3+0x51c>
   8bc1c:	0101ffc4 	movi	r4,2047
   8bc20:	11006826 	beq	r2,r4,8bdc4 <__adddf3+0x61c>
   8bc24:	00c7c83a 	sub	r3,zero,r3
   8bc28:	42002034 	orhi	r8,r8,128
   8bc2c:	01000e04 	movi	r4,56
   8bc30:	20c07c16 	blt	r4,r3,8be24 <__adddf3+0x67c>
   8bc34:	010007c4 	movi	r4,31
   8bc38:	20c0da16 	blt	r4,r3,8bfa4 <__adddf3+0x7fc>
   8bc3c:	01000804 	movi	r4,32
   8bc40:	20c9c83a 	sub	r4,r4,r3
   8bc44:	4114983a 	sll	r10,r8,r4
   8bc48:	88cad83a 	srl	r5,r17,r3
   8bc4c:	8908983a 	sll	r4,r17,r4
   8bc50:	40c6d83a 	srl	r3,r8,r3
   8bc54:	5162b03a 	or	r17,r10,r5
   8bc58:	2008c03a 	cmpne	r4,r4,zero
   8bc5c:	8922b03a 	or	r17,r17,r4
   8bc60:	3463c83a 	sub	r17,r6,r17
   8bc64:	48c7c83a 	sub	r3,r9,r3
   8bc68:	344d803a 	cmpltu	r6,r6,r17
   8bc6c:	1991c83a 	sub	r8,r3,r6
   8bc70:	1021883a 	mov	r16,r2
   8bc74:	3825883a 	mov	r18,r7
   8bc78:	003f2706 	br	8b918 <__alt_data_end+0xfffbfe28>
   8bc7c:	24d0b03a 	or	r8,r4,r19
   8bc80:	40001b1e 	bne	r8,zero,8bcf0 <__adddf3+0x548>
   8bc84:	0005883a 	mov	r2,zero
   8bc88:	0007883a 	mov	r3,zero
   8bc8c:	0021883a 	mov	r16,zero
   8bc90:	003f4d06 	br	8b9c8 <__alt_data_end+0xfffbfed8>
   8bc94:	008007c4 	movi	r2,31
   8bc98:	11003c16 	blt	r2,r4,8bd8c <__adddf3+0x5e4>
   8bc9c:	00800804 	movi	r2,32
   8bca0:	1105c83a 	sub	r2,r2,r4
   8bca4:	488e983a 	sll	r7,r9,r2
   8bca8:	310ad83a 	srl	r5,r6,r4
   8bcac:	3084983a 	sll	r2,r6,r2
   8bcb0:	4912d83a 	srl	r9,r9,r4
   8bcb4:	394ab03a 	or	r5,r7,r5
   8bcb8:	1004c03a 	cmpne	r2,r2,zero
   8bcbc:	288ab03a 	or	r5,r5,r2
   8bcc0:	003f5306 	br	8ba10 <__alt_data_end+0xfffbff20>
   8bcc4:	4448b03a 	or	r4,r8,r17
   8bcc8:	20003e26 	beq	r4,zero,8bdc4 <__adddf3+0x61c>
   8bccc:	00c6303a 	nor	r3,zero,r3
   8bcd0:	18003a1e 	bne	r3,zero,8bdbc <__adddf3+0x614>
   8bcd4:	3463c83a 	sub	r17,r6,r17
   8bcd8:	4a07c83a 	sub	r3,r9,r8
   8bcdc:	344d803a 	cmpltu	r6,r6,r17
   8bce0:	1991c83a 	sub	r8,r3,r6
   8bce4:	1021883a 	mov	r16,r2
   8bce8:	3825883a 	mov	r18,r7
   8bcec:	003f0a06 	br	8b918 <__alt_data_end+0xfffbfe28>
   8bcf0:	2023883a 	mov	r17,r4
   8bcf4:	003f0d06 	br	8b92c <__alt_data_end+0xfffbfe3c>
   8bcf8:	0081ffc4 	movi	r2,2047
   8bcfc:	80bf3f1e 	bne	r16,r2,8b9fc <__alt_data_end+0xfffbff0c>
   8bd00:	003ec806 	br	8b824 <__alt_data_end+0xfffbfd34>
   8bd04:	0005883a 	mov	r2,zero
   8bd08:	003fb106 	br	8bbd0 <__alt_data_end+0xfffc00e0>
   8bd0c:	0007883a 	mov	r3,zero
   8bd10:	003fbc06 	br	8bc04 <__alt_data_end+0xfffc0114>
   8bd14:	4444b03a 	or	r2,r8,r17
   8bd18:	8000871e 	bne	r16,zero,8bf38 <__adddf3+0x790>
   8bd1c:	1000ba26 	beq	r2,zero,8c008 <__adddf3+0x860>
   8bd20:	4984b03a 	or	r2,r9,r6
   8bd24:	103ebf26 	beq	r2,zero,8b824 <__alt_data_end+0xfffbfd34>
   8bd28:	8985883a 	add	r2,r17,r6
   8bd2c:	4247883a 	add	r3,r8,r9
   8bd30:	1451803a 	cmpltu	r8,r2,r17
   8bd34:	40d1883a 	add	r8,r8,r3
   8bd38:	40c0202c 	andhi	r3,r8,128
   8bd3c:	1023883a 	mov	r17,r2
   8bd40:	183f1a26 	beq	r3,zero,8b9ac <__alt_data_end+0xfffbfebc>
   8bd44:	00bfe034 	movhi	r2,65408
   8bd48:	10bfffc4 	addi	r2,r2,-1
   8bd4c:	2021883a 	mov	r16,r4
   8bd50:	4090703a 	and	r8,r8,r2
   8bd54:	003eb306 	br	8b824 <__alt_data_end+0xfffbfd34>
   8bd58:	4444b03a 	or	r2,r8,r17
   8bd5c:	8000291e 	bne	r16,zero,8be04 <__adddf3+0x65c>
   8bd60:	10004b1e 	bne	r2,zero,8be90 <__adddf3+0x6e8>
   8bd64:	4990b03a 	or	r8,r9,r6
   8bd68:	40008b26 	beq	r8,zero,8bf98 <__adddf3+0x7f0>
   8bd6c:	4811883a 	mov	r8,r9
   8bd70:	3023883a 	mov	r17,r6
   8bd74:	3825883a 	mov	r18,r7
   8bd78:	003eaa06 	br	8b824 <__alt_data_end+0xfffbfd34>
   8bd7c:	1021883a 	mov	r16,r2
   8bd80:	0011883a 	mov	r8,zero
   8bd84:	0005883a 	mov	r2,zero
   8bd88:	003f0f06 	br	8b9c8 <__alt_data_end+0xfffbfed8>
   8bd8c:	217ff804 	addi	r5,r4,-32
   8bd90:	00800804 	movi	r2,32
   8bd94:	494ad83a 	srl	r5,r9,r5
   8bd98:	20807d26 	beq	r4,r2,8bf90 <__adddf3+0x7e8>
   8bd9c:	00801004 	movi	r2,64
   8bda0:	1109c83a 	sub	r4,r2,r4
   8bda4:	4912983a 	sll	r9,r9,r4
   8bda8:	498cb03a 	or	r6,r9,r6
   8bdac:	300cc03a 	cmpne	r6,r6,zero
   8bdb0:	298ab03a 	or	r5,r5,r6
   8bdb4:	0013883a 	mov	r9,zero
   8bdb8:	003f1506 	br	8ba10 <__alt_data_end+0xfffbff20>
   8bdbc:	0101ffc4 	movi	r4,2047
   8bdc0:	113f9a1e 	bne	r2,r4,8bc2c <__alt_data_end+0xfffc013c>
   8bdc4:	4811883a 	mov	r8,r9
   8bdc8:	3023883a 	mov	r17,r6
   8bdcc:	1021883a 	mov	r16,r2
   8bdd0:	3825883a 	mov	r18,r7
   8bdd4:	003e9306 	br	8b824 <__alt_data_end+0xfffbfd34>
   8bdd8:	8000161e 	bne	r16,zero,8be34 <__adddf3+0x68c>
   8bddc:	444ab03a 	or	r5,r8,r17
   8bde0:	28005126 	beq	r5,zero,8bf28 <__adddf3+0x780>
   8bde4:	0108303a 	nor	r4,zero,r4
   8bde8:	20004d1e 	bne	r4,zero,8bf20 <__adddf3+0x778>
   8bdec:	89a3883a 	add	r17,r17,r6
   8bdf0:	4253883a 	add	r9,r8,r9
   8bdf4:	898d803a 	cmpltu	r6,r17,r6
   8bdf8:	3251883a 	add	r8,r6,r9
   8bdfc:	1021883a 	mov	r16,r2
   8be00:	003f0806 	br	8ba24 <__alt_data_end+0xfffbff34>
   8be04:	1000301e 	bne	r2,zero,8bec8 <__adddf3+0x720>
   8be08:	4984b03a 	or	r2,r9,r6
   8be0c:	10007126 	beq	r2,zero,8bfd4 <__adddf3+0x82c>
   8be10:	4811883a 	mov	r8,r9
   8be14:	3023883a 	mov	r17,r6
   8be18:	3825883a 	mov	r18,r7
   8be1c:	0401ffc4 	movi	r16,2047
   8be20:	003e8006 	br	8b824 <__alt_data_end+0xfffbfd34>
   8be24:	4462b03a 	or	r17,r8,r17
   8be28:	8822c03a 	cmpne	r17,r17,zero
   8be2c:	0007883a 	mov	r3,zero
   8be30:	003f8b06 	br	8bc60 <__alt_data_end+0xfffc0170>
   8be34:	0141ffc4 	movi	r5,2047
   8be38:	11403b26 	beq	r2,r5,8bf28 <__adddf3+0x780>
   8be3c:	0109c83a 	sub	r4,zero,r4
   8be40:	42002034 	orhi	r8,r8,128
   8be44:	01400e04 	movi	r5,56
   8be48:	29006716 	blt	r5,r4,8bfe8 <__adddf3+0x840>
   8be4c:	014007c4 	movi	r5,31
   8be50:	29007016 	blt	r5,r4,8c014 <__adddf3+0x86c>
   8be54:	01400804 	movi	r5,32
   8be58:	290bc83a 	sub	r5,r5,r4
   8be5c:	4154983a 	sll	r10,r8,r5
   8be60:	890ed83a 	srl	r7,r17,r4
   8be64:	894a983a 	sll	r5,r17,r5
   8be68:	4108d83a 	srl	r4,r8,r4
   8be6c:	51e2b03a 	or	r17,r10,r7
   8be70:	280ac03a 	cmpne	r5,r5,zero
   8be74:	8962b03a 	or	r17,r17,r5
   8be78:	89a3883a 	add	r17,r17,r6
   8be7c:	2253883a 	add	r9,r4,r9
   8be80:	898d803a 	cmpltu	r6,r17,r6
   8be84:	3251883a 	add	r8,r6,r9
   8be88:	1021883a 	mov	r16,r2
   8be8c:	003ee506 	br	8ba24 <__alt_data_end+0xfffbff34>
   8be90:	4984b03a 	or	r2,r9,r6
   8be94:	103e6326 	beq	r2,zero,8b824 <__alt_data_end+0xfffbfd34>
   8be98:	8987c83a 	sub	r3,r17,r6
   8be9c:	88c9803a 	cmpltu	r4,r17,r3
   8bea0:	4245c83a 	sub	r2,r8,r9
   8bea4:	1105c83a 	sub	r2,r2,r4
   8bea8:	1100202c 	andhi	r4,r2,128
   8beac:	203ebb26 	beq	r4,zero,8b99c <__alt_data_end+0xfffbfeac>
   8beb0:	3463c83a 	sub	r17,r6,r17
   8beb4:	4a07c83a 	sub	r3,r9,r8
   8beb8:	344d803a 	cmpltu	r6,r6,r17
   8bebc:	1991c83a 	sub	r8,r3,r6
   8bec0:	3825883a 	mov	r18,r7
   8bec4:	003e5706 	br	8b824 <__alt_data_end+0xfffbfd34>
   8bec8:	4984b03a 	or	r2,r9,r6
   8becc:	10002e26 	beq	r2,zero,8bf88 <__adddf3+0x7e0>
   8bed0:	4004d0fa 	srli	r2,r8,3
   8bed4:	8822d0fa 	srli	r17,r17,3
   8bed8:	4010977a 	slli	r8,r8,29
   8bedc:	10c0022c 	andhi	r3,r2,8
   8bee0:	4462b03a 	or	r17,r8,r17
   8bee4:	18000826 	beq	r3,zero,8bf08 <__adddf3+0x760>
   8bee8:	4808d0fa 	srli	r4,r9,3
   8beec:	20c0022c 	andhi	r3,r4,8
   8bef0:	1800051e 	bne	r3,zero,8bf08 <__adddf3+0x760>
   8bef4:	300cd0fa 	srli	r6,r6,3
   8bef8:	4806977a 	slli	r3,r9,29
   8befc:	2005883a 	mov	r2,r4
   8bf00:	3825883a 	mov	r18,r7
   8bf04:	19a2b03a 	or	r17,r3,r6
   8bf08:	8810d77a 	srli	r8,r17,29
   8bf0c:	100490fa 	slli	r2,r2,3
   8bf10:	882290fa 	slli	r17,r17,3
   8bf14:	0401ffc4 	movi	r16,2047
   8bf18:	4090b03a 	or	r8,r8,r2
   8bf1c:	003e4106 	br	8b824 <__alt_data_end+0xfffbfd34>
   8bf20:	0141ffc4 	movi	r5,2047
   8bf24:	117fc71e 	bne	r2,r5,8be44 <__alt_data_end+0xfffc0354>
   8bf28:	4811883a 	mov	r8,r9
   8bf2c:	3023883a 	mov	r17,r6
   8bf30:	1021883a 	mov	r16,r2
   8bf34:	003e3b06 	br	8b824 <__alt_data_end+0xfffbfd34>
   8bf38:	10002f26 	beq	r2,zero,8bff8 <__adddf3+0x850>
   8bf3c:	4984b03a 	or	r2,r9,r6
   8bf40:	10001126 	beq	r2,zero,8bf88 <__adddf3+0x7e0>
   8bf44:	4004d0fa 	srli	r2,r8,3
   8bf48:	8822d0fa 	srli	r17,r17,3
   8bf4c:	4010977a 	slli	r8,r8,29
   8bf50:	10c0022c 	andhi	r3,r2,8
   8bf54:	4462b03a 	or	r17,r8,r17
   8bf58:	183feb26 	beq	r3,zero,8bf08 <__alt_data_end+0xfffc0418>
   8bf5c:	4808d0fa 	srli	r4,r9,3
   8bf60:	20c0022c 	andhi	r3,r4,8
   8bf64:	183fe81e 	bne	r3,zero,8bf08 <__alt_data_end+0xfffc0418>
   8bf68:	300cd0fa 	srli	r6,r6,3
   8bf6c:	4806977a 	slli	r3,r9,29
   8bf70:	2005883a 	mov	r2,r4
   8bf74:	19a2b03a 	or	r17,r3,r6
   8bf78:	003fe306 	br	8bf08 <__alt_data_end+0xfffc0418>
   8bf7c:	0011883a 	mov	r8,zero
   8bf80:	0005883a 	mov	r2,zero
   8bf84:	003e3f06 	br	8b884 <__alt_data_end+0xfffbfd94>
   8bf88:	0401ffc4 	movi	r16,2047
   8bf8c:	003e2506 	br	8b824 <__alt_data_end+0xfffbfd34>
   8bf90:	0013883a 	mov	r9,zero
   8bf94:	003f8406 	br	8bda8 <__alt_data_end+0xfffc02b8>
   8bf98:	0005883a 	mov	r2,zero
   8bf9c:	0007883a 	mov	r3,zero
   8bfa0:	003e8906 	br	8b9c8 <__alt_data_end+0xfffbfed8>
   8bfa4:	197ff804 	addi	r5,r3,-32
   8bfa8:	01000804 	movi	r4,32
   8bfac:	414ad83a 	srl	r5,r8,r5
   8bfb0:	19002426 	beq	r3,r4,8c044 <__adddf3+0x89c>
   8bfb4:	01001004 	movi	r4,64
   8bfb8:	20c7c83a 	sub	r3,r4,r3
   8bfbc:	40c6983a 	sll	r3,r8,r3
   8bfc0:	1c46b03a 	or	r3,r3,r17
   8bfc4:	1806c03a 	cmpne	r3,r3,zero
   8bfc8:	28e2b03a 	or	r17,r5,r3
   8bfcc:	0007883a 	mov	r3,zero
   8bfd0:	003f2306 	br	8bc60 <__alt_data_end+0xfffc0170>
   8bfd4:	0007883a 	mov	r3,zero
   8bfd8:	5811883a 	mov	r8,r11
   8bfdc:	00bfffc4 	movi	r2,-1
   8bfe0:	0401ffc4 	movi	r16,2047
   8bfe4:	003e7806 	br	8b9c8 <__alt_data_end+0xfffbfed8>
   8bfe8:	4462b03a 	or	r17,r8,r17
   8bfec:	8822c03a 	cmpne	r17,r17,zero
   8bff0:	0009883a 	mov	r4,zero
   8bff4:	003fa006 	br	8be78 <__alt_data_end+0xfffc0388>
   8bff8:	4811883a 	mov	r8,r9
   8bffc:	3023883a 	mov	r17,r6
   8c000:	0401ffc4 	movi	r16,2047
   8c004:	003e0706 	br	8b824 <__alt_data_end+0xfffbfd34>
   8c008:	4811883a 	mov	r8,r9
   8c00c:	3023883a 	mov	r17,r6
   8c010:	003e0406 	br	8b824 <__alt_data_end+0xfffbfd34>
   8c014:	21fff804 	addi	r7,r4,-32
   8c018:	01400804 	movi	r5,32
   8c01c:	41ced83a 	srl	r7,r8,r7
   8c020:	21400a26 	beq	r4,r5,8c04c <__adddf3+0x8a4>
   8c024:	01401004 	movi	r5,64
   8c028:	2909c83a 	sub	r4,r5,r4
   8c02c:	4108983a 	sll	r4,r8,r4
   8c030:	2448b03a 	or	r4,r4,r17
   8c034:	2008c03a 	cmpne	r4,r4,zero
   8c038:	3922b03a 	or	r17,r7,r4
   8c03c:	0009883a 	mov	r4,zero
   8c040:	003f8d06 	br	8be78 <__alt_data_end+0xfffc0388>
   8c044:	0007883a 	mov	r3,zero
   8c048:	003fdd06 	br	8bfc0 <__alt_data_end+0xfffc04d0>
   8c04c:	0009883a 	mov	r4,zero
   8c050:	003ff706 	br	8c030 <__alt_data_end+0xfffc0540>

0008c054 <__divdf3>:
   8c054:	defff204 	addi	sp,sp,-56
   8c058:	dd400915 	stw	r21,36(sp)
   8c05c:	282ad53a 	srli	r21,r5,20
   8c060:	dd000815 	stw	r20,32(sp)
   8c064:	2828d7fa 	srli	r20,r5,31
   8c068:	dc000415 	stw	r16,16(sp)
   8c06c:	04000434 	movhi	r16,16
   8c070:	df000c15 	stw	fp,48(sp)
   8c074:	843fffc4 	addi	r16,r16,-1
   8c078:	dfc00d15 	stw	ra,52(sp)
   8c07c:	ddc00b15 	stw	r23,44(sp)
   8c080:	dd800a15 	stw	r22,40(sp)
   8c084:	dcc00715 	stw	r19,28(sp)
   8c088:	dc800615 	stw	r18,24(sp)
   8c08c:	dc400515 	stw	r17,20(sp)
   8c090:	ad41ffcc 	andi	r21,r21,2047
   8c094:	2c20703a 	and	r16,r5,r16
   8c098:	a7003fcc 	andi	fp,r20,255
   8c09c:	a8006126 	beq	r21,zero,8c224 <__divdf3+0x1d0>
   8c0a0:	0081ffc4 	movi	r2,2047
   8c0a4:	2025883a 	mov	r18,r4
   8c0a8:	a8803726 	beq	r21,r2,8c188 <__divdf3+0x134>
   8c0ac:	80800434 	orhi	r2,r16,16
   8c0b0:	100490fa 	slli	r2,r2,3
   8c0b4:	2020d77a 	srli	r16,r4,29
   8c0b8:	202490fa 	slli	r18,r4,3
   8c0bc:	ad7f0044 	addi	r21,r21,-1023
   8c0c0:	80a0b03a 	or	r16,r16,r2
   8c0c4:	0027883a 	mov	r19,zero
   8c0c8:	0013883a 	mov	r9,zero
   8c0cc:	3804d53a 	srli	r2,r7,20
   8c0d0:	382cd7fa 	srli	r22,r7,31
   8c0d4:	04400434 	movhi	r17,16
   8c0d8:	8c7fffc4 	addi	r17,r17,-1
   8c0dc:	1081ffcc 	andi	r2,r2,2047
   8c0e0:	3011883a 	mov	r8,r6
   8c0e4:	3c62703a 	and	r17,r7,r17
   8c0e8:	b5c03fcc 	andi	r23,r22,255
   8c0ec:	10006c26 	beq	r2,zero,8c2a0 <__divdf3+0x24c>
   8c0f0:	00c1ffc4 	movi	r3,2047
   8c0f4:	10c06426 	beq	r2,r3,8c288 <__divdf3+0x234>
   8c0f8:	88c00434 	orhi	r3,r17,16
   8c0fc:	180690fa 	slli	r3,r3,3
   8c100:	3022d77a 	srli	r17,r6,29
   8c104:	301090fa 	slli	r8,r6,3
   8c108:	10bf0044 	addi	r2,r2,-1023
   8c10c:	88e2b03a 	or	r17,r17,r3
   8c110:	000f883a 	mov	r7,zero
   8c114:	a58cf03a 	xor	r6,r20,r22
   8c118:	3cc8b03a 	or	r4,r7,r19
   8c11c:	a8abc83a 	sub	r21,r21,r2
   8c120:	008003c4 	movi	r2,15
   8c124:	3007883a 	mov	r3,r6
   8c128:	34c03fcc 	andi	r19,r6,255
   8c12c:	11009036 	bltu	r2,r4,8c370 <__divdf3+0x31c>
   8c130:	200890ba 	slli	r4,r4,2
   8c134:	00800274 	movhi	r2,9
   8c138:	10b05204 	addi	r2,r2,-16056
   8c13c:	2089883a 	add	r4,r4,r2
   8c140:	20800017 	ldw	r2,0(r4)
   8c144:	1000683a 	jmp	r2
   8c148:	0008c370 	cmpltui	zero,zero,8973
   8c14c:	0008c1c0 	call	8c1c <__reset-0x773e4>
   8c150:	0008c360 	cmpeqi	zero,zero,8973
   8c154:	0008c1b4 	movhi	zero,8966
   8c158:	0008c360 	cmpeqi	zero,zero,8973
   8c15c:	0008c334 	movhi	zero,8972
   8c160:	0008c360 	cmpeqi	zero,zero,8973
   8c164:	0008c1b4 	movhi	zero,8966
   8c168:	0008c1c0 	call	8c1c <__reset-0x773e4>
   8c16c:	0008c1c0 	call	8c1c <__reset-0x773e4>
   8c170:	0008c334 	movhi	zero,8972
   8c174:	0008c1b4 	movhi	zero,8966
   8c178:	0008c1a4 	muli	zero,zero,8966
   8c17c:	0008c1a4 	muli	zero,zero,8966
   8c180:	0008c1a4 	muli	zero,zero,8966
   8c184:	0008c654 	movui	zero,8985
   8c188:	2404b03a 	or	r2,r4,r16
   8c18c:	1000661e 	bne	r2,zero,8c328 <__divdf3+0x2d4>
   8c190:	04c00204 	movi	r19,8
   8c194:	0021883a 	mov	r16,zero
   8c198:	0025883a 	mov	r18,zero
   8c19c:	02400084 	movi	r9,2
   8c1a0:	003fca06 	br	8c0cc <__alt_data_end+0xfffc05dc>
   8c1a4:	8023883a 	mov	r17,r16
   8c1a8:	9011883a 	mov	r8,r18
   8c1ac:	e02f883a 	mov	r23,fp
   8c1b0:	480f883a 	mov	r7,r9
   8c1b4:	00800084 	movi	r2,2
   8c1b8:	3881311e 	bne	r7,r2,8c680 <__divdf3+0x62c>
   8c1bc:	b827883a 	mov	r19,r23
   8c1c0:	98c0004c 	andi	r3,r19,1
   8c1c4:	0081ffc4 	movi	r2,2047
   8c1c8:	000b883a 	mov	r5,zero
   8c1cc:	0025883a 	mov	r18,zero
   8c1d0:	1004953a 	slli	r2,r2,20
   8c1d4:	18c03fcc 	andi	r3,r3,255
   8c1d8:	04400434 	movhi	r17,16
   8c1dc:	8c7fffc4 	addi	r17,r17,-1
   8c1e0:	180697fa 	slli	r3,r3,31
   8c1e4:	2c4a703a 	and	r5,r5,r17
   8c1e8:	288ab03a 	or	r5,r5,r2
   8c1ec:	28c6b03a 	or	r3,r5,r3
   8c1f0:	9005883a 	mov	r2,r18
   8c1f4:	dfc00d17 	ldw	ra,52(sp)
   8c1f8:	df000c17 	ldw	fp,48(sp)
   8c1fc:	ddc00b17 	ldw	r23,44(sp)
   8c200:	dd800a17 	ldw	r22,40(sp)
   8c204:	dd400917 	ldw	r21,36(sp)
   8c208:	dd000817 	ldw	r20,32(sp)
   8c20c:	dcc00717 	ldw	r19,28(sp)
   8c210:	dc800617 	ldw	r18,24(sp)
   8c214:	dc400517 	ldw	r17,20(sp)
   8c218:	dc000417 	ldw	r16,16(sp)
   8c21c:	dec00e04 	addi	sp,sp,56
   8c220:	f800283a 	ret
   8c224:	2404b03a 	or	r2,r4,r16
   8c228:	2027883a 	mov	r19,r4
   8c22c:	10003926 	beq	r2,zero,8c314 <__divdf3+0x2c0>
   8c230:	80012e26 	beq	r16,zero,8c6ec <__divdf3+0x698>
   8c234:	8009883a 	mov	r4,r16
   8c238:	d9800315 	stw	r6,12(sp)
   8c23c:	d9c00215 	stw	r7,8(sp)
   8c240:	008ddac0 	call	8ddac <__clzsi2>
   8c244:	d9800317 	ldw	r6,12(sp)
   8c248:	d9c00217 	ldw	r7,8(sp)
   8c24c:	113ffd44 	addi	r4,r2,-11
   8c250:	00c00704 	movi	r3,28
   8c254:	19012116 	blt	r3,r4,8c6dc <__divdf3+0x688>
   8c258:	00c00744 	movi	r3,29
   8c25c:	147ffe04 	addi	r17,r2,-8
   8c260:	1907c83a 	sub	r3,r3,r4
   8c264:	8460983a 	sll	r16,r16,r17
   8c268:	98c6d83a 	srl	r3,r19,r3
   8c26c:	9c64983a 	sll	r18,r19,r17
   8c270:	1c20b03a 	or	r16,r3,r16
   8c274:	1080fcc4 	addi	r2,r2,1011
   8c278:	00abc83a 	sub	r21,zero,r2
   8c27c:	0027883a 	mov	r19,zero
   8c280:	0013883a 	mov	r9,zero
   8c284:	003f9106 	br	8c0cc <__alt_data_end+0xfffc05dc>
   8c288:	3446b03a 	or	r3,r6,r17
   8c28c:	18001f1e 	bne	r3,zero,8c30c <__divdf3+0x2b8>
   8c290:	0023883a 	mov	r17,zero
   8c294:	0011883a 	mov	r8,zero
   8c298:	01c00084 	movi	r7,2
   8c29c:	003f9d06 	br	8c114 <__alt_data_end+0xfffc0624>
   8c2a0:	3446b03a 	or	r3,r6,r17
   8c2a4:	18001526 	beq	r3,zero,8c2fc <__divdf3+0x2a8>
   8c2a8:	88011b26 	beq	r17,zero,8c718 <__divdf3+0x6c4>
   8c2ac:	8809883a 	mov	r4,r17
   8c2b0:	d9800315 	stw	r6,12(sp)
   8c2b4:	da400115 	stw	r9,4(sp)
   8c2b8:	008ddac0 	call	8ddac <__clzsi2>
   8c2bc:	d9800317 	ldw	r6,12(sp)
   8c2c0:	da400117 	ldw	r9,4(sp)
   8c2c4:	113ffd44 	addi	r4,r2,-11
   8c2c8:	00c00704 	movi	r3,28
   8c2cc:	19010e16 	blt	r3,r4,8c708 <__divdf3+0x6b4>
   8c2d0:	00c00744 	movi	r3,29
   8c2d4:	123ffe04 	addi	r8,r2,-8
   8c2d8:	1907c83a 	sub	r3,r3,r4
   8c2dc:	8a22983a 	sll	r17,r17,r8
   8c2e0:	30c6d83a 	srl	r3,r6,r3
   8c2e4:	3210983a 	sll	r8,r6,r8
   8c2e8:	1c62b03a 	or	r17,r3,r17
   8c2ec:	1080fcc4 	addi	r2,r2,1011
   8c2f0:	0085c83a 	sub	r2,zero,r2
   8c2f4:	000f883a 	mov	r7,zero
   8c2f8:	003f8606 	br	8c114 <__alt_data_end+0xfffc0624>
   8c2fc:	0023883a 	mov	r17,zero
   8c300:	0011883a 	mov	r8,zero
   8c304:	01c00044 	movi	r7,1
   8c308:	003f8206 	br	8c114 <__alt_data_end+0xfffc0624>
   8c30c:	01c000c4 	movi	r7,3
   8c310:	003f8006 	br	8c114 <__alt_data_end+0xfffc0624>
   8c314:	04c00104 	movi	r19,4
   8c318:	0021883a 	mov	r16,zero
   8c31c:	0025883a 	mov	r18,zero
   8c320:	02400044 	movi	r9,1
   8c324:	003f6906 	br	8c0cc <__alt_data_end+0xfffc05dc>
   8c328:	04c00304 	movi	r19,12
   8c32c:	024000c4 	movi	r9,3
   8c330:	003f6606 	br	8c0cc <__alt_data_end+0xfffc05dc>
   8c334:	01400434 	movhi	r5,16
   8c338:	0007883a 	mov	r3,zero
   8c33c:	297fffc4 	addi	r5,r5,-1
   8c340:	04bfffc4 	movi	r18,-1
   8c344:	0081ffc4 	movi	r2,2047
   8c348:	003fa106 	br	8c1d0 <__alt_data_end+0xfffc06e0>
   8c34c:	00c00044 	movi	r3,1
   8c350:	1887c83a 	sub	r3,r3,r2
   8c354:	01000e04 	movi	r4,56
   8c358:	20c1210e 	bge	r4,r3,8c7e0 <__divdf3+0x78c>
   8c35c:	98c0004c 	andi	r3,r19,1
   8c360:	0005883a 	mov	r2,zero
   8c364:	000b883a 	mov	r5,zero
   8c368:	0025883a 	mov	r18,zero
   8c36c:	003f9806 	br	8c1d0 <__alt_data_end+0xfffc06e0>
   8c370:	8c00fd36 	bltu	r17,r16,8c768 <__divdf3+0x714>
   8c374:	8440fb26 	beq	r16,r17,8c764 <__divdf3+0x710>
   8c378:	8007883a 	mov	r3,r16
   8c37c:	ad7fffc4 	addi	r21,r21,-1
   8c380:	0021883a 	mov	r16,zero
   8c384:	4004d63a 	srli	r2,r8,24
   8c388:	8822923a 	slli	r17,r17,8
   8c38c:	1809883a 	mov	r4,r3
   8c390:	402c923a 	slli	r22,r8,8
   8c394:	88b8b03a 	or	fp,r17,r2
   8c398:	e028d43a 	srli	r20,fp,16
   8c39c:	d8c00015 	stw	r3,0(sp)
   8c3a0:	e5ffffcc 	andi	r23,fp,65535
   8c3a4:	a00b883a 	mov	r5,r20
   8c3a8:	00814600 	call	81460 <__udivsi3>
   8c3ac:	d8c00017 	ldw	r3,0(sp)
   8c3b0:	a00b883a 	mov	r5,r20
   8c3b4:	d8800315 	stw	r2,12(sp)
   8c3b8:	1809883a 	mov	r4,r3
   8c3bc:	00814c40 	call	814c4 <__umodsi3>
   8c3c0:	d9800317 	ldw	r6,12(sp)
   8c3c4:	1006943a 	slli	r3,r2,16
   8c3c8:	9004d43a 	srli	r2,r18,16
   8c3cc:	b9a3383a 	mul	r17,r23,r6
   8c3d0:	10c4b03a 	or	r2,r2,r3
   8c3d4:	1440062e 	bgeu	r2,r17,8c3f0 <__divdf3+0x39c>
   8c3d8:	1705883a 	add	r2,r2,fp
   8c3dc:	30ffffc4 	addi	r3,r6,-1
   8c3e0:	1700ee36 	bltu	r2,fp,8c79c <__divdf3+0x748>
   8c3e4:	1440ed2e 	bgeu	r2,r17,8c79c <__divdf3+0x748>
   8c3e8:	31bfff84 	addi	r6,r6,-2
   8c3ec:	1705883a 	add	r2,r2,fp
   8c3f0:	1463c83a 	sub	r17,r2,r17
   8c3f4:	a00b883a 	mov	r5,r20
   8c3f8:	8809883a 	mov	r4,r17
   8c3fc:	d9800315 	stw	r6,12(sp)
   8c400:	00814600 	call	81460 <__udivsi3>
   8c404:	a00b883a 	mov	r5,r20
   8c408:	8809883a 	mov	r4,r17
   8c40c:	d8800215 	stw	r2,8(sp)
   8c410:	00814c40 	call	814c4 <__umodsi3>
   8c414:	d9c00217 	ldw	r7,8(sp)
   8c418:	1004943a 	slli	r2,r2,16
   8c41c:	94bfffcc 	andi	r18,r18,65535
   8c420:	b9d1383a 	mul	r8,r23,r7
   8c424:	90a4b03a 	or	r18,r18,r2
   8c428:	d9800317 	ldw	r6,12(sp)
   8c42c:	9200062e 	bgeu	r18,r8,8c448 <__divdf3+0x3f4>
   8c430:	9725883a 	add	r18,r18,fp
   8c434:	38bfffc4 	addi	r2,r7,-1
   8c438:	9700d636 	bltu	r18,fp,8c794 <__divdf3+0x740>
   8c43c:	9200d52e 	bgeu	r18,r8,8c794 <__divdf3+0x740>
   8c440:	39ffff84 	addi	r7,r7,-2
   8c444:	9725883a 	add	r18,r18,fp
   8c448:	3004943a 	slli	r2,r6,16
   8c44c:	b012d43a 	srli	r9,r22,16
   8c450:	b1bfffcc 	andi	r6,r22,65535
   8c454:	11e2b03a 	or	r17,r2,r7
   8c458:	8806d43a 	srli	r3,r17,16
   8c45c:	893fffcc 	andi	r4,r17,65535
   8c460:	218b383a 	mul	r5,r4,r6
   8c464:	30c5383a 	mul	r2,r6,r3
   8c468:	2249383a 	mul	r4,r4,r9
   8c46c:	280ed43a 	srli	r7,r5,16
   8c470:	9225c83a 	sub	r18,r18,r8
   8c474:	2089883a 	add	r4,r4,r2
   8c478:	3909883a 	add	r4,r7,r4
   8c47c:	1a47383a 	mul	r3,r3,r9
   8c480:	2080022e 	bgeu	r4,r2,8c48c <__divdf3+0x438>
   8c484:	00800074 	movhi	r2,1
   8c488:	1887883a 	add	r3,r3,r2
   8c48c:	2004d43a 	srli	r2,r4,16
   8c490:	2008943a 	slli	r4,r4,16
   8c494:	297fffcc 	andi	r5,r5,65535
   8c498:	10c7883a 	add	r3,r2,r3
   8c49c:	2149883a 	add	r4,r4,r5
   8c4a0:	90c0a536 	bltu	r18,r3,8c738 <__divdf3+0x6e4>
   8c4a4:	90c0bf26 	beq	r18,r3,8c7a4 <__divdf3+0x750>
   8c4a8:	90c7c83a 	sub	r3,r18,r3
   8c4ac:	810fc83a 	sub	r7,r16,r4
   8c4b0:	81e5803a 	cmpltu	r18,r16,r7
   8c4b4:	1ca5c83a 	sub	r18,r3,r18
   8c4b8:	e480c126 	beq	fp,r18,8c7c0 <__divdf3+0x76c>
   8c4bc:	a00b883a 	mov	r5,r20
   8c4c0:	9009883a 	mov	r4,r18
   8c4c4:	d9800315 	stw	r6,12(sp)
   8c4c8:	d9c00215 	stw	r7,8(sp)
   8c4cc:	da400115 	stw	r9,4(sp)
   8c4d0:	00814600 	call	81460 <__udivsi3>
   8c4d4:	a00b883a 	mov	r5,r20
   8c4d8:	9009883a 	mov	r4,r18
   8c4dc:	d8800015 	stw	r2,0(sp)
   8c4e0:	00814c40 	call	814c4 <__umodsi3>
   8c4e4:	d9c00217 	ldw	r7,8(sp)
   8c4e8:	da000017 	ldw	r8,0(sp)
   8c4ec:	1006943a 	slli	r3,r2,16
   8c4f0:	3804d43a 	srli	r2,r7,16
   8c4f4:	ba21383a 	mul	r16,r23,r8
   8c4f8:	d9800317 	ldw	r6,12(sp)
   8c4fc:	10c4b03a 	or	r2,r2,r3
   8c500:	da400117 	ldw	r9,4(sp)
   8c504:	1400062e 	bgeu	r2,r16,8c520 <__divdf3+0x4cc>
   8c508:	1705883a 	add	r2,r2,fp
   8c50c:	40ffffc4 	addi	r3,r8,-1
   8c510:	1700ad36 	bltu	r2,fp,8c7c8 <__divdf3+0x774>
   8c514:	1400ac2e 	bgeu	r2,r16,8c7c8 <__divdf3+0x774>
   8c518:	423fff84 	addi	r8,r8,-2
   8c51c:	1705883a 	add	r2,r2,fp
   8c520:	1421c83a 	sub	r16,r2,r16
   8c524:	a00b883a 	mov	r5,r20
   8c528:	8009883a 	mov	r4,r16
   8c52c:	d9800315 	stw	r6,12(sp)
   8c530:	d9c00215 	stw	r7,8(sp)
   8c534:	da000015 	stw	r8,0(sp)
   8c538:	da400115 	stw	r9,4(sp)
   8c53c:	00814600 	call	81460 <__udivsi3>
   8c540:	8009883a 	mov	r4,r16
   8c544:	a00b883a 	mov	r5,r20
   8c548:	1025883a 	mov	r18,r2
   8c54c:	00814c40 	call	814c4 <__umodsi3>
   8c550:	d9c00217 	ldw	r7,8(sp)
   8c554:	1004943a 	slli	r2,r2,16
   8c558:	bcaf383a 	mul	r23,r23,r18
   8c55c:	393fffcc 	andi	r4,r7,65535
   8c560:	2088b03a 	or	r4,r4,r2
   8c564:	d9800317 	ldw	r6,12(sp)
   8c568:	da000017 	ldw	r8,0(sp)
   8c56c:	da400117 	ldw	r9,4(sp)
   8c570:	25c0062e 	bgeu	r4,r23,8c58c <__divdf3+0x538>
   8c574:	2709883a 	add	r4,r4,fp
   8c578:	90bfffc4 	addi	r2,r18,-1
   8c57c:	27009436 	bltu	r4,fp,8c7d0 <__divdf3+0x77c>
   8c580:	25c0932e 	bgeu	r4,r23,8c7d0 <__divdf3+0x77c>
   8c584:	94bfff84 	addi	r18,r18,-2
   8c588:	2709883a 	add	r4,r4,fp
   8c58c:	4004943a 	slli	r2,r8,16
   8c590:	25efc83a 	sub	r23,r4,r23
   8c594:	1490b03a 	or	r8,r2,r18
   8c598:	4008d43a 	srli	r4,r8,16
   8c59c:	40ffffcc 	andi	r3,r8,65535
   8c5a0:	30c5383a 	mul	r2,r6,r3
   8c5a4:	1a47383a 	mul	r3,r3,r9
   8c5a8:	310d383a 	mul	r6,r6,r4
   8c5ac:	100ad43a 	srli	r5,r2,16
   8c5b0:	4913383a 	mul	r9,r9,r4
   8c5b4:	1987883a 	add	r3,r3,r6
   8c5b8:	28c7883a 	add	r3,r5,r3
   8c5bc:	1980022e 	bgeu	r3,r6,8c5c8 <__divdf3+0x574>
   8c5c0:	01000074 	movhi	r4,1
   8c5c4:	4913883a 	add	r9,r9,r4
   8c5c8:	1808d43a 	srli	r4,r3,16
   8c5cc:	1806943a 	slli	r3,r3,16
   8c5d0:	10bfffcc 	andi	r2,r2,65535
   8c5d4:	2253883a 	add	r9,r4,r9
   8c5d8:	1887883a 	add	r3,r3,r2
   8c5dc:	ba403836 	bltu	r23,r9,8c6c0 <__divdf3+0x66c>
   8c5e0:	ba403626 	beq	r23,r9,8c6bc <__divdf3+0x668>
   8c5e4:	42000054 	ori	r8,r8,1
   8c5e8:	a880ffc4 	addi	r2,r21,1023
   8c5ec:	00bf570e 	bge	zero,r2,8c34c <__alt_data_end+0xfffc085c>
   8c5f0:	40c001cc 	andi	r3,r8,7
   8c5f4:	18000726 	beq	r3,zero,8c614 <__divdf3+0x5c0>
   8c5f8:	40c003cc 	andi	r3,r8,15
   8c5fc:	01000104 	movi	r4,4
   8c600:	19000426 	beq	r3,r4,8c614 <__divdf3+0x5c0>
   8c604:	4107883a 	add	r3,r8,r4
   8c608:	1a11803a 	cmpltu	r8,r3,r8
   8c60c:	8a23883a 	add	r17,r17,r8
   8c610:	1811883a 	mov	r8,r3
   8c614:	88c0402c 	andhi	r3,r17,256
   8c618:	18000426 	beq	r3,zero,8c62c <__divdf3+0x5d8>
   8c61c:	00ffc034 	movhi	r3,65280
   8c620:	18ffffc4 	addi	r3,r3,-1
   8c624:	a8810004 	addi	r2,r21,1024
   8c628:	88e2703a 	and	r17,r17,r3
   8c62c:	00c1ff84 	movi	r3,2046
   8c630:	18bee316 	blt	r3,r2,8c1c0 <__alt_data_end+0xfffc06d0>
   8c634:	8824977a 	slli	r18,r17,29
   8c638:	4010d0fa 	srli	r8,r8,3
   8c63c:	8822927a 	slli	r17,r17,9
   8c640:	1081ffcc 	andi	r2,r2,2047
   8c644:	9224b03a 	or	r18,r18,r8
   8c648:	880ad33a 	srli	r5,r17,12
   8c64c:	98c0004c 	andi	r3,r19,1
   8c650:	003edf06 	br	8c1d0 <__alt_data_end+0xfffc06e0>
   8c654:	8080022c 	andhi	r2,r16,8
   8c658:	10001226 	beq	r2,zero,8c6a4 <__divdf3+0x650>
   8c65c:	8880022c 	andhi	r2,r17,8
   8c660:	1000101e 	bne	r2,zero,8c6a4 <__divdf3+0x650>
   8c664:	00800434 	movhi	r2,16
   8c668:	89400234 	orhi	r5,r17,8
   8c66c:	10bfffc4 	addi	r2,r2,-1
   8c670:	b007883a 	mov	r3,r22
   8c674:	288a703a 	and	r5,r5,r2
   8c678:	4025883a 	mov	r18,r8
   8c67c:	003f3106 	br	8c344 <__alt_data_end+0xfffc0854>
   8c680:	008000c4 	movi	r2,3
   8c684:	3880a626 	beq	r7,r2,8c920 <__divdf3+0x8cc>
   8c688:	00800044 	movi	r2,1
   8c68c:	3880521e 	bne	r7,r2,8c7d8 <__divdf3+0x784>
   8c690:	b807883a 	mov	r3,r23
   8c694:	0005883a 	mov	r2,zero
   8c698:	000b883a 	mov	r5,zero
   8c69c:	0025883a 	mov	r18,zero
   8c6a0:	003ecb06 	br	8c1d0 <__alt_data_end+0xfffc06e0>
   8c6a4:	00800434 	movhi	r2,16
   8c6a8:	81400234 	orhi	r5,r16,8
   8c6ac:	10bfffc4 	addi	r2,r2,-1
   8c6b0:	a007883a 	mov	r3,r20
   8c6b4:	288a703a 	and	r5,r5,r2
   8c6b8:	003f2206 	br	8c344 <__alt_data_end+0xfffc0854>
   8c6bc:	183fca26 	beq	r3,zero,8c5e8 <__alt_data_end+0xfffc0af8>
   8c6c0:	e5ef883a 	add	r23,fp,r23
   8c6c4:	40bfffc4 	addi	r2,r8,-1
   8c6c8:	bf00392e 	bgeu	r23,fp,8c7b0 <__divdf3+0x75c>
   8c6cc:	1011883a 	mov	r8,r2
   8c6d0:	ba7fc41e 	bne	r23,r9,8c5e4 <__alt_data_end+0xfffc0af4>
   8c6d4:	b0ffc31e 	bne	r22,r3,8c5e4 <__alt_data_end+0xfffc0af4>
   8c6d8:	003fc306 	br	8c5e8 <__alt_data_end+0xfffc0af8>
   8c6dc:	143ff604 	addi	r16,r2,-40
   8c6e0:	9c20983a 	sll	r16,r19,r16
   8c6e4:	0025883a 	mov	r18,zero
   8c6e8:	003ee206 	br	8c274 <__alt_data_end+0xfffc0784>
   8c6ec:	d9800315 	stw	r6,12(sp)
   8c6f0:	d9c00215 	stw	r7,8(sp)
   8c6f4:	008ddac0 	call	8ddac <__clzsi2>
   8c6f8:	10800804 	addi	r2,r2,32
   8c6fc:	d9c00217 	ldw	r7,8(sp)
   8c700:	d9800317 	ldw	r6,12(sp)
   8c704:	003ed106 	br	8c24c <__alt_data_end+0xfffc075c>
   8c708:	147ff604 	addi	r17,r2,-40
   8c70c:	3462983a 	sll	r17,r6,r17
   8c710:	0011883a 	mov	r8,zero
   8c714:	003ef506 	br	8c2ec <__alt_data_end+0xfffc07fc>
   8c718:	3009883a 	mov	r4,r6
   8c71c:	d9800315 	stw	r6,12(sp)
   8c720:	da400115 	stw	r9,4(sp)
   8c724:	008ddac0 	call	8ddac <__clzsi2>
   8c728:	10800804 	addi	r2,r2,32
   8c72c:	da400117 	ldw	r9,4(sp)
   8c730:	d9800317 	ldw	r6,12(sp)
   8c734:	003ee306 	br	8c2c4 <__alt_data_end+0xfffc07d4>
   8c738:	85a1883a 	add	r16,r16,r22
   8c73c:	8585803a 	cmpltu	r2,r16,r22
   8c740:	1705883a 	add	r2,r2,fp
   8c744:	14a5883a 	add	r18,r2,r18
   8c748:	88bfffc4 	addi	r2,r17,-1
   8c74c:	e4800c2e 	bgeu	fp,r18,8c780 <__divdf3+0x72c>
   8c750:	90c03e36 	bltu	r18,r3,8c84c <__divdf3+0x7f8>
   8c754:	1c806926 	beq	r3,r18,8c8fc <__divdf3+0x8a8>
   8c758:	90c7c83a 	sub	r3,r18,r3
   8c75c:	1023883a 	mov	r17,r2
   8c760:	003f5206 	br	8c4ac <__alt_data_end+0xfffc09bc>
   8c764:	923f0436 	bltu	r18,r8,8c378 <__alt_data_end+0xfffc0888>
   8c768:	800897fa 	slli	r4,r16,31
   8c76c:	9004d07a 	srli	r2,r18,1
   8c770:	8006d07a 	srli	r3,r16,1
   8c774:	902097fa 	slli	r16,r18,31
   8c778:	20a4b03a 	or	r18,r4,r2
   8c77c:	003f0106 	br	8c384 <__alt_data_end+0xfffc0894>
   8c780:	e4bff51e 	bne	fp,r18,8c758 <__alt_data_end+0xfffc0c68>
   8c784:	85bff22e 	bgeu	r16,r22,8c750 <__alt_data_end+0xfffc0c60>
   8c788:	e0c7c83a 	sub	r3,fp,r3
   8c78c:	1023883a 	mov	r17,r2
   8c790:	003f4606 	br	8c4ac <__alt_data_end+0xfffc09bc>
   8c794:	100f883a 	mov	r7,r2
   8c798:	003f2b06 	br	8c448 <__alt_data_end+0xfffc0958>
   8c79c:	180d883a 	mov	r6,r3
   8c7a0:	003f1306 	br	8c3f0 <__alt_data_end+0xfffc0900>
   8c7a4:	813fe436 	bltu	r16,r4,8c738 <__alt_data_end+0xfffc0c48>
   8c7a8:	0007883a 	mov	r3,zero
   8c7ac:	003f3f06 	br	8c4ac <__alt_data_end+0xfffc09bc>
   8c7b0:	ba402c36 	bltu	r23,r9,8c864 <__divdf3+0x810>
   8c7b4:	4dc05426 	beq	r9,r23,8c908 <__divdf3+0x8b4>
   8c7b8:	1011883a 	mov	r8,r2
   8c7bc:	003f8906 	br	8c5e4 <__alt_data_end+0xfffc0af4>
   8c7c0:	023fffc4 	movi	r8,-1
   8c7c4:	003f8806 	br	8c5e8 <__alt_data_end+0xfffc0af8>
   8c7c8:	1811883a 	mov	r8,r3
   8c7cc:	003f5406 	br	8c520 <__alt_data_end+0xfffc0a30>
   8c7d0:	1025883a 	mov	r18,r2
   8c7d4:	003f6d06 	br	8c58c <__alt_data_end+0xfffc0a9c>
   8c7d8:	b827883a 	mov	r19,r23
   8c7dc:	003f8206 	br	8c5e8 <__alt_data_end+0xfffc0af8>
   8c7e0:	010007c4 	movi	r4,31
   8c7e4:	20c02616 	blt	r4,r3,8c880 <__divdf3+0x82c>
   8c7e8:	00800804 	movi	r2,32
   8c7ec:	10c5c83a 	sub	r2,r2,r3
   8c7f0:	888a983a 	sll	r5,r17,r2
   8c7f4:	40c8d83a 	srl	r4,r8,r3
   8c7f8:	4084983a 	sll	r2,r8,r2
   8c7fc:	88e2d83a 	srl	r17,r17,r3
   8c800:	2906b03a 	or	r3,r5,r4
   8c804:	1004c03a 	cmpne	r2,r2,zero
   8c808:	1886b03a 	or	r3,r3,r2
   8c80c:	188001cc 	andi	r2,r3,7
   8c810:	10000726 	beq	r2,zero,8c830 <__divdf3+0x7dc>
   8c814:	188003cc 	andi	r2,r3,15
   8c818:	01000104 	movi	r4,4
   8c81c:	11000426 	beq	r2,r4,8c830 <__divdf3+0x7dc>
   8c820:	1805883a 	mov	r2,r3
   8c824:	10c00104 	addi	r3,r2,4
   8c828:	1885803a 	cmpltu	r2,r3,r2
   8c82c:	88a3883a 	add	r17,r17,r2
   8c830:	8880202c 	andhi	r2,r17,128
   8c834:	10002726 	beq	r2,zero,8c8d4 <__divdf3+0x880>
   8c838:	98c0004c 	andi	r3,r19,1
   8c83c:	00800044 	movi	r2,1
   8c840:	000b883a 	mov	r5,zero
   8c844:	0025883a 	mov	r18,zero
   8c848:	003e6106 	br	8c1d0 <__alt_data_end+0xfffc06e0>
   8c84c:	85a1883a 	add	r16,r16,r22
   8c850:	8585803a 	cmpltu	r2,r16,r22
   8c854:	1705883a 	add	r2,r2,fp
   8c858:	14a5883a 	add	r18,r2,r18
   8c85c:	8c7fff84 	addi	r17,r17,-2
   8c860:	003f1106 	br	8c4a8 <__alt_data_end+0xfffc09b8>
   8c864:	b589883a 	add	r4,r22,r22
   8c868:	25ad803a 	cmpltu	r22,r4,r22
   8c86c:	b739883a 	add	fp,r22,fp
   8c870:	40bfff84 	addi	r2,r8,-2
   8c874:	bf2f883a 	add	r23,r23,fp
   8c878:	202d883a 	mov	r22,r4
   8c87c:	003f9306 	br	8c6cc <__alt_data_end+0xfffc0bdc>
   8c880:	013ff844 	movi	r4,-31
   8c884:	2085c83a 	sub	r2,r4,r2
   8c888:	8888d83a 	srl	r4,r17,r2
   8c88c:	00800804 	movi	r2,32
   8c890:	18802126 	beq	r3,r2,8c918 <__divdf3+0x8c4>
   8c894:	00801004 	movi	r2,64
   8c898:	10c5c83a 	sub	r2,r2,r3
   8c89c:	8884983a 	sll	r2,r17,r2
   8c8a0:	1204b03a 	or	r2,r2,r8
   8c8a4:	1004c03a 	cmpne	r2,r2,zero
   8c8a8:	2084b03a 	or	r2,r4,r2
   8c8ac:	144001cc 	andi	r17,r2,7
   8c8b0:	88000d1e 	bne	r17,zero,8c8e8 <__divdf3+0x894>
   8c8b4:	000b883a 	mov	r5,zero
   8c8b8:	1024d0fa 	srli	r18,r2,3
   8c8bc:	98c0004c 	andi	r3,r19,1
   8c8c0:	0005883a 	mov	r2,zero
   8c8c4:	9464b03a 	or	r18,r18,r17
   8c8c8:	003e4106 	br	8c1d0 <__alt_data_end+0xfffc06e0>
   8c8cc:	1007883a 	mov	r3,r2
   8c8d0:	0023883a 	mov	r17,zero
   8c8d4:	880a927a 	slli	r5,r17,9
   8c8d8:	1805883a 	mov	r2,r3
   8c8dc:	8822977a 	slli	r17,r17,29
   8c8e0:	280ad33a 	srli	r5,r5,12
   8c8e4:	003ff406 	br	8c8b8 <__alt_data_end+0xfffc0dc8>
   8c8e8:	10c003cc 	andi	r3,r2,15
   8c8ec:	01000104 	movi	r4,4
   8c8f0:	193ff626 	beq	r3,r4,8c8cc <__alt_data_end+0xfffc0ddc>
   8c8f4:	0023883a 	mov	r17,zero
   8c8f8:	003fca06 	br	8c824 <__alt_data_end+0xfffc0d34>
   8c8fc:	813fd336 	bltu	r16,r4,8c84c <__alt_data_end+0xfffc0d5c>
   8c900:	1023883a 	mov	r17,r2
   8c904:	003fa806 	br	8c7a8 <__alt_data_end+0xfffc0cb8>
   8c908:	b0ffd636 	bltu	r22,r3,8c864 <__alt_data_end+0xfffc0d74>
   8c90c:	1011883a 	mov	r8,r2
   8c910:	b0ff341e 	bne	r22,r3,8c5e4 <__alt_data_end+0xfffc0af4>
   8c914:	003f3406 	br	8c5e8 <__alt_data_end+0xfffc0af8>
   8c918:	0005883a 	mov	r2,zero
   8c91c:	003fe006 	br	8c8a0 <__alt_data_end+0xfffc0db0>
   8c920:	00800434 	movhi	r2,16
   8c924:	89400234 	orhi	r5,r17,8
   8c928:	10bfffc4 	addi	r2,r2,-1
   8c92c:	b807883a 	mov	r3,r23
   8c930:	288a703a 	and	r5,r5,r2
   8c934:	4025883a 	mov	r18,r8
   8c938:	003e8206 	br	8c344 <__alt_data_end+0xfffc0854>

0008c93c <__eqdf2>:
   8c93c:	2804d53a 	srli	r2,r5,20
   8c940:	3806d53a 	srli	r3,r7,20
   8c944:	02000434 	movhi	r8,16
   8c948:	423fffc4 	addi	r8,r8,-1
   8c94c:	1081ffcc 	andi	r2,r2,2047
   8c950:	0281ffc4 	movi	r10,2047
   8c954:	2a12703a 	and	r9,r5,r8
   8c958:	18c1ffcc 	andi	r3,r3,2047
   8c95c:	3a10703a 	and	r8,r7,r8
   8c960:	280ad7fa 	srli	r5,r5,31
   8c964:	380ed7fa 	srli	r7,r7,31
   8c968:	12801026 	beq	r2,r10,8c9ac <__eqdf2+0x70>
   8c96c:	0281ffc4 	movi	r10,2047
   8c970:	1a800a26 	beq	r3,r10,8c99c <__eqdf2+0x60>
   8c974:	10c00226 	beq	r2,r3,8c980 <__eqdf2+0x44>
   8c978:	00800044 	movi	r2,1
   8c97c:	f800283a 	ret
   8c980:	4a3ffd1e 	bne	r9,r8,8c978 <__alt_data_end+0xfffc0e88>
   8c984:	21bffc1e 	bne	r4,r6,8c978 <__alt_data_end+0xfffc0e88>
   8c988:	29c00c26 	beq	r5,r7,8c9bc <__eqdf2+0x80>
   8c98c:	103ffa1e 	bne	r2,zero,8c978 <__alt_data_end+0xfffc0e88>
   8c990:	2244b03a 	or	r2,r4,r9
   8c994:	1004c03a 	cmpne	r2,r2,zero
   8c998:	f800283a 	ret
   8c99c:	3214b03a 	or	r10,r6,r8
   8c9a0:	503ff426 	beq	r10,zero,8c974 <__alt_data_end+0xfffc0e84>
   8c9a4:	00800044 	movi	r2,1
   8c9a8:	f800283a 	ret
   8c9ac:	2254b03a 	or	r10,r4,r9
   8c9b0:	503fee26 	beq	r10,zero,8c96c <__alt_data_end+0xfffc0e7c>
   8c9b4:	00800044 	movi	r2,1
   8c9b8:	f800283a 	ret
   8c9bc:	0005883a 	mov	r2,zero
   8c9c0:	f800283a 	ret

0008c9c4 <__gedf2>:
   8c9c4:	2804d53a 	srli	r2,r5,20
   8c9c8:	3806d53a 	srli	r3,r7,20
   8c9cc:	02000434 	movhi	r8,16
   8c9d0:	423fffc4 	addi	r8,r8,-1
   8c9d4:	1081ffcc 	andi	r2,r2,2047
   8c9d8:	0241ffc4 	movi	r9,2047
   8c9dc:	2a14703a 	and	r10,r5,r8
   8c9e0:	18c1ffcc 	andi	r3,r3,2047
   8c9e4:	3a10703a 	and	r8,r7,r8
   8c9e8:	280ad7fa 	srli	r5,r5,31
   8c9ec:	380ed7fa 	srli	r7,r7,31
   8c9f0:	12401d26 	beq	r2,r9,8ca68 <__gedf2+0xa4>
   8c9f4:	0241ffc4 	movi	r9,2047
   8c9f8:	1a401226 	beq	r3,r9,8ca44 <__gedf2+0x80>
   8c9fc:	1000081e 	bne	r2,zero,8ca20 <__gedf2+0x5c>
   8ca00:	2296b03a 	or	r11,r4,r10
   8ca04:	5813003a 	cmpeq	r9,r11,zero
   8ca08:	1800091e 	bne	r3,zero,8ca30 <__gedf2+0x6c>
   8ca0c:	3218b03a 	or	r12,r6,r8
   8ca10:	6000071e 	bne	r12,zero,8ca30 <__gedf2+0x6c>
   8ca14:	0005883a 	mov	r2,zero
   8ca18:	5800101e 	bne	r11,zero,8ca5c <__gedf2+0x98>
   8ca1c:	f800283a 	ret
   8ca20:	18000c1e 	bne	r3,zero,8ca54 <__gedf2+0x90>
   8ca24:	3212b03a 	or	r9,r6,r8
   8ca28:	48000c26 	beq	r9,zero,8ca5c <__gedf2+0x98>
   8ca2c:	0013883a 	mov	r9,zero
   8ca30:	39c03fcc 	andi	r7,r7,255
   8ca34:	48000826 	beq	r9,zero,8ca58 <__gedf2+0x94>
   8ca38:	38000926 	beq	r7,zero,8ca60 <__gedf2+0x9c>
   8ca3c:	00800044 	movi	r2,1
   8ca40:	f800283a 	ret
   8ca44:	3212b03a 	or	r9,r6,r8
   8ca48:	483fec26 	beq	r9,zero,8c9fc <__alt_data_end+0xfffc0f0c>
   8ca4c:	00bfff84 	movi	r2,-2
   8ca50:	f800283a 	ret
   8ca54:	39c03fcc 	andi	r7,r7,255
   8ca58:	29c00626 	beq	r5,r7,8ca74 <__gedf2+0xb0>
   8ca5c:	283ff726 	beq	r5,zero,8ca3c <__alt_data_end+0xfffc0f4c>
   8ca60:	00bfffc4 	movi	r2,-1
   8ca64:	f800283a 	ret
   8ca68:	2292b03a 	or	r9,r4,r10
   8ca6c:	483fe126 	beq	r9,zero,8c9f4 <__alt_data_end+0xfffc0f04>
   8ca70:	003ff606 	br	8ca4c <__alt_data_end+0xfffc0f5c>
   8ca74:	18bff916 	blt	r3,r2,8ca5c <__alt_data_end+0xfffc0f6c>
   8ca78:	10c00316 	blt	r2,r3,8ca88 <__gedf2+0xc4>
   8ca7c:	42bff736 	bltu	r8,r10,8ca5c <__alt_data_end+0xfffc0f6c>
   8ca80:	52000326 	beq	r10,r8,8ca90 <__gedf2+0xcc>
   8ca84:	5200042e 	bgeu	r10,r8,8ca98 <__gedf2+0xd4>
   8ca88:	283fec1e 	bne	r5,zero,8ca3c <__alt_data_end+0xfffc0f4c>
   8ca8c:	003ff406 	br	8ca60 <__alt_data_end+0xfffc0f70>
   8ca90:	313ff236 	bltu	r6,r4,8ca5c <__alt_data_end+0xfffc0f6c>
   8ca94:	21bffc36 	bltu	r4,r6,8ca88 <__alt_data_end+0xfffc0f98>
   8ca98:	0005883a 	mov	r2,zero
   8ca9c:	f800283a 	ret

0008caa0 <__ledf2>:
   8caa0:	2804d53a 	srli	r2,r5,20
   8caa4:	3810d53a 	srli	r8,r7,20
   8caa8:	00c00434 	movhi	r3,16
   8caac:	18ffffc4 	addi	r3,r3,-1
   8cab0:	1081ffcc 	andi	r2,r2,2047
   8cab4:	0241ffc4 	movi	r9,2047
   8cab8:	28d4703a 	and	r10,r5,r3
   8cabc:	4201ffcc 	andi	r8,r8,2047
   8cac0:	38c6703a 	and	r3,r7,r3
   8cac4:	280ad7fa 	srli	r5,r5,31
   8cac8:	380ed7fa 	srli	r7,r7,31
   8cacc:	12401f26 	beq	r2,r9,8cb4c <__ledf2+0xac>
   8cad0:	0241ffc4 	movi	r9,2047
   8cad4:	42401426 	beq	r8,r9,8cb28 <__ledf2+0x88>
   8cad8:	1000091e 	bne	r2,zero,8cb00 <__ledf2+0x60>
   8cadc:	2296b03a 	or	r11,r4,r10
   8cae0:	5813003a 	cmpeq	r9,r11,zero
   8cae4:	29403fcc 	andi	r5,r5,255
   8cae8:	40000a1e 	bne	r8,zero,8cb14 <__ledf2+0x74>
   8caec:	30d8b03a 	or	r12,r6,r3
   8caf0:	6000081e 	bne	r12,zero,8cb14 <__ledf2+0x74>
   8caf4:	0005883a 	mov	r2,zero
   8caf8:	5800111e 	bne	r11,zero,8cb40 <__ledf2+0xa0>
   8cafc:	f800283a 	ret
   8cb00:	29403fcc 	andi	r5,r5,255
   8cb04:	40000c1e 	bne	r8,zero,8cb38 <__ledf2+0x98>
   8cb08:	30d2b03a 	or	r9,r6,r3
   8cb0c:	48000c26 	beq	r9,zero,8cb40 <__ledf2+0xa0>
   8cb10:	0013883a 	mov	r9,zero
   8cb14:	39c03fcc 	andi	r7,r7,255
   8cb18:	48000826 	beq	r9,zero,8cb3c <__ledf2+0x9c>
   8cb1c:	38001126 	beq	r7,zero,8cb64 <__ledf2+0xc4>
   8cb20:	00800044 	movi	r2,1
   8cb24:	f800283a 	ret
   8cb28:	30d2b03a 	or	r9,r6,r3
   8cb2c:	483fea26 	beq	r9,zero,8cad8 <__alt_data_end+0xfffc0fe8>
   8cb30:	00800084 	movi	r2,2
   8cb34:	f800283a 	ret
   8cb38:	39c03fcc 	andi	r7,r7,255
   8cb3c:	39400726 	beq	r7,r5,8cb5c <__ledf2+0xbc>
   8cb40:	2800081e 	bne	r5,zero,8cb64 <__ledf2+0xc4>
   8cb44:	00800044 	movi	r2,1
   8cb48:	f800283a 	ret
   8cb4c:	2292b03a 	or	r9,r4,r10
   8cb50:	483fdf26 	beq	r9,zero,8cad0 <__alt_data_end+0xfffc0fe0>
   8cb54:	00800084 	movi	r2,2
   8cb58:	f800283a 	ret
   8cb5c:	4080030e 	bge	r8,r2,8cb6c <__ledf2+0xcc>
   8cb60:	383fef26 	beq	r7,zero,8cb20 <__alt_data_end+0xfffc1030>
   8cb64:	00bfffc4 	movi	r2,-1
   8cb68:	f800283a 	ret
   8cb6c:	123feb16 	blt	r2,r8,8cb1c <__alt_data_end+0xfffc102c>
   8cb70:	1abff336 	bltu	r3,r10,8cb40 <__alt_data_end+0xfffc1050>
   8cb74:	50c00326 	beq	r10,r3,8cb84 <__ledf2+0xe4>
   8cb78:	50c0042e 	bgeu	r10,r3,8cb8c <__ledf2+0xec>
   8cb7c:	283fe81e 	bne	r5,zero,8cb20 <__alt_data_end+0xfffc1030>
   8cb80:	003ff806 	br	8cb64 <__alt_data_end+0xfffc1074>
   8cb84:	313fee36 	bltu	r6,r4,8cb40 <__alt_data_end+0xfffc1050>
   8cb88:	21bffc36 	bltu	r4,r6,8cb7c <__alt_data_end+0xfffc108c>
   8cb8c:	0005883a 	mov	r2,zero
   8cb90:	f800283a 	ret

0008cb94 <__muldf3>:
   8cb94:	defff304 	addi	sp,sp,-52
   8cb98:	2804d53a 	srli	r2,r5,20
   8cb9c:	dd800915 	stw	r22,36(sp)
   8cba0:	282cd7fa 	srli	r22,r5,31
   8cba4:	dc000315 	stw	r16,12(sp)
   8cba8:	04000434 	movhi	r16,16
   8cbac:	dd400815 	stw	r21,32(sp)
   8cbb0:	dc800515 	stw	r18,20(sp)
   8cbb4:	843fffc4 	addi	r16,r16,-1
   8cbb8:	dfc00c15 	stw	ra,48(sp)
   8cbbc:	df000b15 	stw	fp,44(sp)
   8cbc0:	ddc00a15 	stw	r23,40(sp)
   8cbc4:	dd000715 	stw	r20,28(sp)
   8cbc8:	dcc00615 	stw	r19,24(sp)
   8cbcc:	dc400415 	stw	r17,16(sp)
   8cbd0:	1481ffcc 	andi	r18,r2,2047
   8cbd4:	2c20703a 	and	r16,r5,r16
   8cbd8:	b02b883a 	mov	r21,r22
   8cbdc:	b2403fcc 	andi	r9,r22,255
   8cbe0:	90006026 	beq	r18,zero,8cd64 <__muldf3+0x1d0>
   8cbe4:	0081ffc4 	movi	r2,2047
   8cbe8:	2029883a 	mov	r20,r4
   8cbec:	90803626 	beq	r18,r2,8ccc8 <__muldf3+0x134>
   8cbf0:	80800434 	orhi	r2,r16,16
   8cbf4:	100490fa 	slli	r2,r2,3
   8cbf8:	2020d77a 	srli	r16,r4,29
   8cbfc:	202890fa 	slli	r20,r4,3
   8cc00:	94bf0044 	addi	r18,r18,-1023
   8cc04:	80a0b03a 	or	r16,r16,r2
   8cc08:	0027883a 	mov	r19,zero
   8cc0c:	0039883a 	mov	fp,zero
   8cc10:	3804d53a 	srli	r2,r7,20
   8cc14:	382ed7fa 	srli	r23,r7,31
   8cc18:	04400434 	movhi	r17,16
   8cc1c:	8c7fffc4 	addi	r17,r17,-1
   8cc20:	1081ffcc 	andi	r2,r2,2047
   8cc24:	3011883a 	mov	r8,r6
   8cc28:	3c62703a 	and	r17,r7,r17
   8cc2c:	ba803fcc 	andi	r10,r23,255
   8cc30:	10006d26 	beq	r2,zero,8cde8 <__muldf3+0x254>
   8cc34:	00c1ffc4 	movi	r3,2047
   8cc38:	10c06526 	beq	r2,r3,8cdd0 <__muldf3+0x23c>
   8cc3c:	88c00434 	orhi	r3,r17,16
   8cc40:	180690fa 	slli	r3,r3,3
   8cc44:	3022d77a 	srli	r17,r6,29
   8cc48:	301090fa 	slli	r8,r6,3
   8cc4c:	10bf0044 	addi	r2,r2,-1023
   8cc50:	88e2b03a 	or	r17,r17,r3
   8cc54:	000b883a 	mov	r5,zero
   8cc58:	9085883a 	add	r2,r18,r2
   8cc5c:	2cc8b03a 	or	r4,r5,r19
   8cc60:	00c003c4 	movi	r3,15
   8cc64:	bdacf03a 	xor	r22,r23,r22
   8cc68:	12c00044 	addi	r11,r2,1
   8cc6c:	19009936 	bltu	r3,r4,8ced4 <__muldf3+0x340>
   8cc70:	200890ba 	slli	r4,r4,2
   8cc74:	00c00274 	movhi	r3,9
   8cc78:	18f32204 	addi	r3,r3,-13176
   8cc7c:	20c9883a 	add	r4,r4,r3
   8cc80:	20c00017 	ldw	r3,0(r4)
   8cc84:	1800683a 	jmp	r3
   8cc88:	0008ced4 	movui	zero,9019
   8cc8c:	0008cce8 	cmpgeui	zero,zero,9011
   8cc90:	0008cce8 	cmpgeui	zero,zero,9011
   8cc94:	0008cce4 	muli	zero,zero,9011
   8cc98:	0008ceb0 	cmpltui	zero,zero,9018
   8cc9c:	0008ceb0 	cmpltui	zero,zero,9018
   8cca0:	0008ce98 	cmpnei	zero,zero,9018
   8cca4:	0008cce4 	muli	zero,zero,9011
   8cca8:	0008ceb0 	cmpltui	zero,zero,9018
   8ccac:	0008ce98 	cmpnei	zero,zero,9018
   8ccb0:	0008ceb0 	cmpltui	zero,zero,9018
   8ccb4:	0008cce4 	muli	zero,zero,9011
   8ccb8:	0008cec0 	call	8cec <__reset-0x77314>
   8ccbc:	0008cec0 	call	8cec <__reset-0x77314>
   8ccc0:	0008cec0 	call	8cec <__reset-0x77314>
   8ccc4:	0008d0dc 	xori	zero,zero,9027
   8ccc8:	2404b03a 	or	r2,r4,r16
   8cccc:	10006f1e 	bne	r2,zero,8ce8c <__muldf3+0x2f8>
   8ccd0:	04c00204 	movi	r19,8
   8ccd4:	0021883a 	mov	r16,zero
   8ccd8:	0029883a 	mov	r20,zero
   8ccdc:	07000084 	movi	fp,2
   8cce0:	003fcb06 	br	8cc10 <__alt_data_end+0xfffc1120>
   8cce4:	502d883a 	mov	r22,r10
   8cce8:	00800084 	movi	r2,2
   8ccec:	28805726 	beq	r5,r2,8ce4c <__muldf3+0x2b8>
   8ccf0:	008000c4 	movi	r2,3
   8ccf4:	28816626 	beq	r5,r2,8d290 <__muldf3+0x6fc>
   8ccf8:	00800044 	movi	r2,1
   8ccfc:	2881411e 	bne	r5,r2,8d204 <__muldf3+0x670>
   8cd00:	b02b883a 	mov	r21,r22
   8cd04:	0005883a 	mov	r2,zero
   8cd08:	000b883a 	mov	r5,zero
   8cd0c:	0029883a 	mov	r20,zero
   8cd10:	1004953a 	slli	r2,r2,20
   8cd14:	a8c03fcc 	andi	r3,r21,255
   8cd18:	04400434 	movhi	r17,16
   8cd1c:	8c7fffc4 	addi	r17,r17,-1
   8cd20:	180697fa 	slli	r3,r3,31
   8cd24:	2c4a703a 	and	r5,r5,r17
   8cd28:	288ab03a 	or	r5,r5,r2
   8cd2c:	28c6b03a 	or	r3,r5,r3
   8cd30:	a005883a 	mov	r2,r20
   8cd34:	dfc00c17 	ldw	ra,48(sp)
   8cd38:	df000b17 	ldw	fp,44(sp)
   8cd3c:	ddc00a17 	ldw	r23,40(sp)
   8cd40:	dd800917 	ldw	r22,36(sp)
   8cd44:	dd400817 	ldw	r21,32(sp)
   8cd48:	dd000717 	ldw	r20,28(sp)
   8cd4c:	dcc00617 	ldw	r19,24(sp)
   8cd50:	dc800517 	ldw	r18,20(sp)
   8cd54:	dc400417 	ldw	r17,16(sp)
   8cd58:	dc000317 	ldw	r16,12(sp)
   8cd5c:	dec00d04 	addi	sp,sp,52
   8cd60:	f800283a 	ret
   8cd64:	2404b03a 	or	r2,r4,r16
   8cd68:	2027883a 	mov	r19,r4
   8cd6c:	10004226 	beq	r2,zero,8ce78 <__muldf3+0x2e4>
   8cd70:	8000fc26 	beq	r16,zero,8d164 <__muldf3+0x5d0>
   8cd74:	8009883a 	mov	r4,r16
   8cd78:	d9800215 	stw	r6,8(sp)
   8cd7c:	d9c00015 	stw	r7,0(sp)
   8cd80:	da400115 	stw	r9,4(sp)
   8cd84:	008ddac0 	call	8ddac <__clzsi2>
   8cd88:	d9800217 	ldw	r6,8(sp)
   8cd8c:	d9c00017 	ldw	r7,0(sp)
   8cd90:	da400117 	ldw	r9,4(sp)
   8cd94:	113ffd44 	addi	r4,r2,-11
   8cd98:	00c00704 	movi	r3,28
   8cd9c:	1900ed16 	blt	r3,r4,8d154 <__muldf3+0x5c0>
   8cda0:	00c00744 	movi	r3,29
   8cda4:	147ffe04 	addi	r17,r2,-8
   8cda8:	1907c83a 	sub	r3,r3,r4
   8cdac:	8460983a 	sll	r16,r16,r17
   8cdb0:	98c6d83a 	srl	r3,r19,r3
   8cdb4:	9c68983a 	sll	r20,r19,r17
   8cdb8:	1c20b03a 	or	r16,r3,r16
   8cdbc:	1080fcc4 	addi	r2,r2,1011
   8cdc0:	00a5c83a 	sub	r18,zero,r2
   8cdc4:	0027883a 	mov	r19,zero
   8cdc8:	0039883a 	mov	fp,zero
   8cdcc:	003f9006 	br	8cc10 <__alt_data_end+0xfffc1120>
   8cdd0:	3446b03a 	or	r3,r6,r17
   8cdd4:	1800261e 	bne	r3,zero,8ce70 <__muldf3+0x2dc>
   8cdd8:	0023883a 	mov	r17,zero
   8cddc:	0011883a 	mov	r8,zero
   8cde0:	01400084 	movi	r5,2
   8cde4:	003f9c06 	br	8cc58 <__alt_data_end+0xfffc1168>
   8cde8:	3446b03a 	or	r3,r6,r17
   8cdec:	18001c26 	beq	r3,zero,8ce60 <__muldf3+0x2cc>
   8cdf0:	8800ce26 	beq	r17,zero,8d12c <__muldf3+0x598>
   8cdf4:	8809883a 	mov	r4,r17
   8cdf8:	d9800215 	stw	r6,8(sp)
   8cdfc:	da400115 	stw	r9,4(sp)
   8ce00:	da800015 	stw	r10,0(sp)
   8ce04:	008ddac0 	call	8ddac <__clzsi2>
   8ce08:	d9800217 	ldw	r6,8(sp)
   8ce0c:	da400117 	ldw	r9,4(sp)
   8ce10:	da800017 	ldw	r10,0(sp)
   8ce14:	113ffd44 	addi	r4,r2,-11
   8ce18:	00c00704 	movi	r3,28
   8ce1c:	1900bf16 	blt	r3,r4,8d11c <__muldf3+0x588>
   8ce20:	00c00744 	movi	r3,29
   8ce24:	123ffe04 	addi	r8,r2,-8
   8ce28:	1907c83a 	sub	r3,r3,r4
   8ce2c:	8a22983a 	sll	r17,r17,r8
   8ce30:	30c6d83a 	srl	r3,r6,r3
   8ce34:	3210983a 	sll	r8,r6,r8
   8ce38:	1c62b03a 	or	r17,r3,r17
   8ce3c:	1080fcc4 	addi	r2,r2,1011
   8ce40:	0085c83a 	sub	r2,zero,r2
   8ce44:	000b883a 	mov	r5,zero
   8ce48:	003f8306 	br	8cc58 <__alt_data_end+0xfffc1168>
   8ce4c:	b02b883a 	mov	r21,r22
   8ce50:	0081ffc4 	movi	r2,2047
   8ce54:	000b883a 	mov	r5,zero
   8ce58:	0029883a 	mov	r20,zero
   8ce5c:	003fac06 	br	8cd10 <__alt_data_end+0xfffc1220>
   8ce60:	0023883a 	mov	r17,zero
   8ce64:	0011883a 	mov	r8,zero
   8ce68:	01400044 	movi	r5,1
   8ce6c:	003f7a06 	br	8cc58 <__alt_data_end+0xfffc1168>
   8ce70:	014000c4 	movi	r5,3
   8ce74:	003f7806 	br	8cc58 <__alt_data_end+0xfffc1168>
   8ce78:	04c00104 	movi	r19,4
   8ce7c:	0021883a 	mov	r16,zero
   8ce80:	0029883a 	mov	r20,zero
   8ce84:	07000044 	movi	fp,1
   8ce88:	003f6106 	br	8cc10 <__alt_data_end+0xfffc1120>
   8ce8c:	04c00304 	movi	r19,12
   8ce90:	070000c4 	movi	fp,3
   8ce94:	003f5e06 	br	8cc10 <__alt_data_end+0xfffc1120>
   8ce98:	01400434 	movhi	r5,16
   8ce9c:	002b883a 	mov	r21,zero
   8cea0:	297fffc4 	addi	r5,r5,-1
   8cea4:	053fffc4 	movi	r20,-1
   8cea8:	0081ffc4 	movi	r2,2047
   8ceac:	003f9806 	br	8cd10 <__alt_data_end+0xfffc1220>
   8ceb0:	8023883a 	mov	r17,r16
   8ceb4:	a011883a 	mov	r8,r20
   8ceb8:	e00b883a 	mov	r5,fp
   8cebc:	003f8a06 	br	8cce8 <__alt_data_end+0xfffc11f8>
   8cec0:	8023883a 	mov	r17,r16
   8cec4:	a011883a 	mov	r8,r20
   8cec8:	482d883a 	mov	r22,r9
   8cecc:	e00b883a 	mov	r5,fp
   8ced0:	003f8506 	br	8cce8 <__alt_data_end+0xfffc11f8>
   8ced4:	a00ad43a 	srli	r5,r20,16
   8ced8:	401ad43a 	srli	r13,r8,16
   8cedc:	a53fffcc 	andi	r20,r20,65535
   8cee0:	423fffcc 	andi	r8,r8,65535
   8cee4:	4519383a 	mul	r12,r8,r20
   8cee8:	4147383a 	mul	r3,r8,r5
   8ceec:	6d09383a 	mul	r4,r13,r20
   8cef0:	600cd43a 	srli	r6,r12,16
   8cef4:	2b5d383a 	mul	r14,r5,r13
   8cef8:	20c9883a 	add	r4,r4,r3
   8cefc:	310d883a 	add	r6,r6,r4
   8cf00:	30c0022e 	bgeu	r6,r3,8cf0c <__muldf3+0x378>
   8cf04:	00c00074 	movhi	r3,1
   8cf08:	70dd883a 	add	r14,r14,r3
   8cf0c:	8826d43a 	srli	r19,r17,16
   8cf10:	8bffffcc 	andi	r15,r17,65535
   8cf14:	7d23383a 	mul	r17,r15,r20
   8cf18:	7949383a 	mul	r4,r15,r5
   8cf1c:	9d29383a 	mul	r20,r19,r20
   8cf20:	8814d43a 	srli	r10,r17,16
   8cf24:	3012943a 	slli	r9,r6,16
   8cf28:	a129883a 	add	r20,r20,r4
   8cf2c:	633fffcc 	andi	r12,r12,65535
   8cf30:	5515883a 	add	r10,r10,r20
   8cf34:	3006d43a 	srli	r3,r6,16
   8cf38:	4b13883a 	add	r9,r9,r12
   8cf3c:	2ccb383a 	mul	r5,r5,r19
   8cf40:	5100022e 	bgeu	r10,r4,8cf4c <__muldf3+0x3b8>
   8cf44:	01000074 	movhi	r4,1
   8cf48:	290b883a 	add	r5,r5,r4
   8cf4c:	802ad43a 	srli	r21,r16,16
   8cf50:	843fffcc 	andi	r16,r16,65535
   8cf54:	440d383a 	mul	r6,r8,r16
   8cf58:	4565383a 	mul	r18,r8,r21
   8cf5c:	8349383a 	mul	r4,r16,r13
   8cf60:	500e943a 	slli	r7,r10,16
   8cf64:	3010d43a 	srli	r8,r6,16
   8cf68:	5028d43a 	srli	r20,r10,16
   8cf6c:	2489883a 	add	r4,r4,r18
   8cf70:	8abfffcc 	andi	r10,r17,65535
   8cf74:	3a95883a 	add	r10,r7,r10
   8cf78:	4119883a 	add	r12,r8,r4
   8cf7c:	a169883a 	add	r20,r20,r5
   8cf80:	1a87883a 	add	r3,r3,r10
   8cf84:	6d5b383a 	mul	r13,r13,r21
   8cf88:	6480022e 	bgeu	r12,r18,8cf94 <__muldf3+0x400>
   8cf8c:	01000074 	movhi	r4,1
   8cf90:	691b883a 	add	r13,r13,r4
   8cf94:	7c25383a 	mul	r18,r15,r16
   8cf98:	7d4b383a 	mul	r5,r15,r21
   8cf9c:	84cf383a 	mul	r7,r16,r19
   8cfa0:	901ed43a 	srli	r15,r18,16
   8cfa4:	6008d43a 	srli	r4,r12,16
   8cfa8:	6010943a 	slli	r8,r12,16
   8cfac:	394f883a 	add	r7,r7,r5
   8cfb0:	333fffcc 	andi	r12,r6,65535
   8cfb4:	79df883a 	add	r15,r15,r7
   8cfb8:	235b883a 	add	r13,r4,r13
   8cfbc:	9d63383a 	mul	r17,r19,r21
   8cfc0:	4309883a 	add	r4,r8,r12
   8cfc4:	7940022e 	bgeu	r15,r5,8cfd0 <__muldf3+0x43c>
   8cfc8:	01400074 	movhi	r5,1
   8cfcc:	8963883a 	add	r17,r17,r5
   8cfd0:	780a943a 	slli	r5,r15,16
   8cfd4:	91bfffcc 	andi	r6,r18,65535
   8cfd8:	70c7883a 	add	r3,r14,r3
   8cfdc:	298d883a 	add	r6,r5,r6
   8cfe0:	1a8f803a 	cmpltu	r7,r3,r10
   8cfe4:	350b883a 	add	r5,r6,r20
   8cfe8:	20c7883a 	add	r3,r4,r3
   8cfec:	3955883a 	add	r10,r7,r5
   8cff0:	1909803a 	cmpltu	r4,r3,r4
   8cff4:	6a91883a 	add	r8,r13,r10
   8cff8:	780cd43a 	srli	r6,r15,16
   8cffc:	2219883a 	add	r12,r4,r8
   8d000:	2d0b803a 	cmpltu	r5,r5,r20
   8d004:	51cf803a 	cmpltu	r7,r10,r7
   8d008:	29ceb03a 	or	r7,r5,r7
   8d00c:	4351803a 	cmpltu	r8,r8,r13
   8d010:	610b803a 	cmpltu	r5,r12,r4
   8d014:	4148b03a 	or	r4,r8,r5
   8d018:	398f883a 	add	r7,r7,r6
   8d01c:	3909883a 	add	r4,r7,r4
   8d020:	1810927a 	slli	r8,r3,9
   8d024:	2449883a 	add	r4,r4,r17
   8d028:	2008927a 	slli	r4,r4,9
   8d02c:	6022d5fa 	srli	r17,r12,23
   8d030:	1806d5fa 	srli	r3,r3,23
   8d034:	4252b03a 	or	r9,r8,r9
   8d038:	600a927a 	slli	r5,r12,9
   8d03c:	4810c03a 	cmpne	r8,r9,zero
   8d040:	2462b03a 	or	r17,r4,r17
   8d044:	40c6b03a 	or	r3,r8,r3
   8d048:	8900402c 	andhi	r4,r17,256
   8d04c:	1950b03a 	or	r8,r3,r5
   8d050:	20000726 	beq	r4,zero,8d070 <__muldf3+0x4dc>
   8d054:	4006d07a 	srli	r3,r8,1
   8d058:	880497fa 	slli	r2,r17,31
   8d05c:	4200004c 	andi	r8,r8,1
   8d060:	8822d07a 	srli	r17,r17,1
   8d064:	1a10b03a 	or	r8,r3,r8
   8d068:	1210b03a 	or	r8,r2,r8
   8d06c:	5805883a 	mov	r2,r11
   8d070:	1140ffc4 	addi	r5,r2,1023
   8d074:	0140440e 	bge	zero,r5,8d188 <__muldf3+0x5f4>
   8d078:	40c001cc 	andi	r3,r8,7
   8d07c:	18000726 	beq	r3,zero,8d09c <__muldf3+0x508>
   8d080:	40c003cc 	andi	r3,r8,15
   8d084:	01000104 	movi	r4,4
   8d088:	19000426 	beq	r3,r4,8d09c <__muldf3+0x508>
   8d08c:	4107883a 	add	r3,r8,r4
   8d090:	1a11803a 	cmpltu	r8,r3,r8
   8d094:	8a23883a 	add	r17,r17,r8
   8d098:	1811883a 	mov	r8,r3
   8d09c:	88c0402c 	andhi	r3,r17,256
   8d0a0:	18000426 	beq	r3,zero,8d0b4 <__muldf3+0x520>
   8d0a4:	11410004 	addi	r5,r2,1024
   8d0a8:	00bfc034 	movhi	r2,65280
   8d0ac:	10bfffc4 	addi	r2,r2,-1
   8d0b0:	88a2703a 	and	r17,r17,r2
   8d0b4:	0081ff84 	movi	r2,2046
   8d0b8:	117f6416 	blt	r2,r5,8ce4c <__alt_data_end+0xfffc135c>
   8d0bc:	8828977a 	slli	r20,r17,29
   8d0c0:	4010d0fa 	srli	r8,r8,3
   8d0c4:	8822927a 	slli	r17,r17,9
   8d0c8:	2881ffcc 	andi	r2,r5,2047
   8d0cc:	a228b03a 	or	r20,r20,r8
   8d0d0:	880ad33a 	srli	r5,r17,12
   8d0d4:	b02b883a 	mov	r21,r22
   8d0d8:	003f0d06 	br	8cd10 <__alt_data_end+0xfffc1220>
   8d0dc:	8080022c 	andhi	r2,r16,8
   8d0e0:	10000926 	beq	r2,zero,8d108 <__muldf3+0x574>
   8d0e4:	8880022c 	andhi	r2,r17,8
   8d0e8:	1000071e 	bne	r2,zero,8d108 <__muldf3+0x574>
   8d0ec:	00800434 	movhi	r2,16
   8d0f0:	89400234 	orhi	r5,r17,8
   8d0f4:	10bfffc4 	addi	r2,r2,-1
   8d0f8:	b82b883a 	mov	r21,r23
   8d0fc:	288a703a 	and	r5,r5,r2
   8d100:	4029883a 	mov	r20,r8
   8d104:	003f6806 	br	8cea8 <__alt_data_end+0xfffc13b8>
   8d108:	00800434 	movhi	r2,16
   8d10c:	81400234 	orhi	r5,r16,8
   8d110:	10bfffc4 	addi	r2,r2,-1
   8d114:	288a703a 	and	r5,r5,r2
   8d118:	003f6306 	br	8cea8 <__alt_data_end+0xfffc13b8>
   8d11c:	147ff604 	addi	r17,r2,-40
   8d120:	3462983a 	sll	r17,r6,r17
   8d124:	0011883a 	mov	r8,zero
   8d128:	003f4406 	br	8ce3c <__alt_data_end+0xfffc134c>
   8d12c:	3009883a 	mov	r4,r6
   8d130:	d9800215 	stw	r6,8(sp)
   8d134:	da400115 	stw	r9,4(sp)
   8d138:	da800015 	stw	r10,0(sp)
   8d13c:	008ddac0 	call	8ddac <__clzsi2>
   8d140:	10800804 	addi	r2,r2,32
   8d144:	da800017 	ldw	r10,0(sp)
   8d148:	da400117 	ldw	r9,4(sp)
   8d14c:	d9800217 	ldw	r6,8(sp)
   8d150:	003f3006 	br	8ce14 <__alt_data_end+0xfffc1324>
   8d154:	143ff604 	addi	r16,r2,-40
   8d158:	9c20983a 	sll	r16,r19,r16
   8d15c:	0029883a 	mov	r20,zero
   8d160:	003f1606 	br	8cdbc <__alt_data_end+0xfffc12cc>
   8d164:	d9800215 	stw	r6,8(sp)
   8d168:	d9c00015 	stw	r7,0(sp)
   8d16c:	da400115 	stw	r9,4(sp)
   8d170:	008ddac0 	call	8ddac <__clzsi2>
   8d174:	10800804 	addi	r2,r2,32
   8d178:	da400117 	ldw	r9,4(sp)
   8d17c:	d9c00017 	ldw	r7,0(sp)
   8d180:	d9800217 	ldw	r6,8(sp)
   8d184:	003f0306 	br	8cd94 <__alt_data_end+0xfffc12a4>
   8d188:	00c00044 	movi	r3,1
   8d18c:	1947c83a 	sub	r3,r3,r5
   8d190:	00800e04 	movi	r2,56
   8d194:	10feda16 	blt	r2,r3,8cd00 <__alt_data_end+0xfffc1210>
   8d198:	008007c4 	movi	r2,31
   8d19c:	10c01b16 	blt	r2,r3,8d20c <__muldf3+0x678>
   8d1a0:	00800804 	movi	r2,32
   8d1a4:	10c5c83a 	sub	r2,r2,r3
   8d1a8:	888a983a 	sll	r5,r17,r2
   8d1ac:	40c8d83a 	srl	r4,r8,r3
   8d1b0:	4084983a 	sll	r2,r8,r2
   8d1b4:	88e2d83a 	srl	r17,r17,r3
   8d1b8:	2906b03a 	or	r3,r5,r4
   8d1bc:	1004c03a 	cmpne	r2,r2,zero
   8d1c0:	1886b03a 	or	r3,r3,r2
   8d1c4:	188001cc 	andi	r2,r3,7
   8d1c8:	10000726 	beq	r2,zero,8d1e8 <__muldf3+0x654>
   8d1cc:	188003cc 	andi	r2,r3,15
   8d1d0:	01000104 	movi	r4,4
   8d1d4:	11000426 	beq	r2,r4,8d1e8 <__muldf3+0x654>
   8d1d8:	1805883a 	mov	r2,r3
   8d1dc:	10c00104 	addi	r3,r2,4
   8d1e0:	1885803a 	cmpltu	r2,r3,r2
   8d1e4:	88a3883a 	add	r17,r17,r2
   8d1e8:	8880202c 	andhi	r2,r17,128
   8d1ec:	10001c26 	beq	r2,zero,8d260 <__muldf3+0x6cc>
   8d1f0:	b02b883a 	mov	r21,r22
   8d1f4:	00800044 	movi	r2,1
   8d1f8:	000b883a 	mov	r5,zero
   8d1fc:	0029883a 	mov	r20,zero
   8d200:	003ec306 	br	8cd10 <__alt_data_end+0xfffc1220>
   8d204:	5805883a 	mov	r2,r11
   8d208:	003f9906 	br	8d070 <__alt_data_end+0xfffc1580>
   8d20c:	00bff844 	movi	r2,-31
   8d210:	1145c83a 	sub	r2,r2,r5
   8d214:	8888d83a 	srl	r4,r17,r2
   8d218:	00800804 	movi	r2,32
   8d21c:	18801a26 	beq	r3,r2,8d288 <__muldf3+0x6f4>
   8d220:	00801004 	movi	r2,64
   8d224:	10c5c83a 	sub	r2,r2,r3
   8d228:	8884983a 	sll	r2,r17,r2
   8d22c:	1204b03a 	or	r2,r2,r8
   8d230:	1004c03a 	cmpne	r2,r2,zero
   8d234:	2084b03a 	or	r2,r4,r2
   8d238:	144001cc 	andi	r17,r2,7
   8d23c:	88000d1e 	bne	r17,zero,8d274 <__muldf3+0x6e0>
   8d240:	000b883a 	mov	r5,zero
   8d244:	1028d0fa 	srli	r20,r2,3
   8d248:	b02b883a 	mov	r21,r22
   8d24c:	0005883a 	mov	r2,zero
   8d250:	a468b03a 	or	r20,r20,r17
   8d254:	003eae06 	br	8cd10 <__alt_data_end+0xfffc1220>
   8d258:	1007883a 	mov	r3,r2
   8d25c:	0023883a 	mov	r17,zero
   8d260:	880a927a 	slli	r5,r17,9
   8d264:	1805883a 	mov	r2,r3
   8d268:	8822977a 	slli	r17,r17,29
   8d26c:	280ad33a 	srli	r5,r5,12
   8d270:	003ff406 	br	8d244 <__alt_data_end+0xfffc1754>
   8d274:	10c003cc 	andi	r3,r2,15
   8d278:	01000104 	movi	r4,4
   8d27c:	193ff626 	beq	r3,r4,8d258 <__alt_data_end+0xfffc1768>
   8d280:	0023883a 	mov	r17,zero
   8d284:	003fd506 	br	8d1dc <__alt_data_end+0xfffc16ec>
   8d288:	0005883a 	mov	r2,zero
   8d28c:	003fe706 	br	8d22c <__alt_data_end+0xfffc173c>
   8d290:	00800434 	movhi	r2,16
   8d294:	89400234 	orhi	r5,r17,8
   8d298:	10bfffc4 	addi	r2,r2,-1
   8d29c:	b02b883a 	mov	r21,r22
   8d2a0:	288a703a 	and	r5,r5,r2
   8d2a4:	4029883a 	mov	r20,r8
   8d2a8:	003eff06 	br	8cea8 <__alt_data_end+0xfffc13b8>

0008d2ac <__subdf3>:
   8d2ac:	02000434 	movhi	r8,16
   8d2b0:	423fffc4 	addi	r8,r8,-1
   8d2b4:	defffb04 	addi	sp,sp,-20
   8d2b8:	2a14703a 	and	r10,r5,r8
   8d2bc:	3812d53a 	srli	r9,r7,20
   8d2c0:	3a10703a 	and	r8,r7,r8
   8d2c4:	2006d77a 	srli	r3,r4,29
   8d2c8:	3004d77a 	srli	r2,r6,29
   8d2cc:	dc000015 	stw	r16,0(sp)
   8d2d0:	501490fa 	slli	r10,r10,3
   8d2d4:	2820d53a 	srli	r16,r5,20
   8d2d8:	401090fa 	slli	r8,r8,3
   8d2dc:	dc800215 	stw	r18,8(sp)
   8d2e0:	dc400115 	stw	r17,4(sp)
   8d2e4:	dfc00415 	stw	ra,16(sp)
   8d2e8:	202290fa 	slli	r17,r4,3
   8d2ec:	dcc00315 	stw	r19,12(sp)
   8d2f0:	4a41ffcc 	andi	r9,r9,2047
   8d2f4:	0101ffc4 	movi	r4,2047
   8d2f8:	2824d7fa 	srli	r18,r5,31
   8d2fc:	8401ffcc 	andi	r16,r16,2047
   8d300:	50c6b03a 	or	r3,r10,r3
   8d304:	380ed7fa 	srli	r7,r7,31
   8d308:	408ab03a 	or	r5,r8,r2
   8d30c:	300c90fa 	slli	r6,r6,3
   8d310:	49009626 	beq	r9,r4,8d56c <__subdf3+0x2c0>
   8d314:	39c0005c 	xori	r7,r7,1
   8d318:	8245c83a 	sub	r2,r16,r9
   8d31c:	3c807426 	beq	r7,r18,8d4f0 <__subdf3+0x244>
   8d320:	0080af0e 	bge	zero,r2,8d5e0 <__subdf3+0x334>
   8d324:	48002a1e 	bne	r9,zero,8d3d0 <__subdf3+0x124>
   8d328:	2988b03a 	or	r4,r5,r6
   8d32c:	20009a1e 	bne	r4,zero,8d598 <__subdf3+0x2ec>
   8d330:	888001cc 	andi	r2,r17,7
   8d334:	10000726 	beq	r2,zero,8d354 <__subdf3+0xa8>
   8d338:	888003cc 	andi	r2,r17,15
   8d33c:	01000104 	movi	r4,4
   8d340:	11000426 	beq	r2,r4,8d354 <__subdf3+0xa8>
   8d344:	890b883a 	add	r5,r17,r4
   8d348:	2c63803a 	cmpltu	r17,r5,r17
   8d34c:	1c47883a 	add	r3,r3,r17
   8d350:	2823883a 	mov	r17,r5
   8d354:	1880202c 	andhi	r2,r3,128
   8d358:	10005926 	beq	r2,zero,8d4c0 <__subdf3+0x214>
   8d35c:	84000044 	addi	r16,r16,1
   8d360:	0081ffc4 	movi	r2,2047
   8d364:	8080be26 	beq	r16,r2,8d660 <__subdf3+0x3b4>
   8d368:	017fe034 	movhi	r5,65408
   8d36c:	297fffc4 	addi	r5,r5,-1
   8d370:	1946703a 	and	r3,r3,r5
   8d374:	1804977a 	slli	r2,r3,29
   8d378:	1806927a 	slli	r3,r3,9
   8d37c:	8822d0fa 	srli	r17,r17,3
   8d380:	8401ffcc 	andi	r16,r16,2047
   8d384:	180ad33a 	srli	r5,r3,12
   8d388:	9100004c 	andi	r4,r18,1
   8d38c:	1444b03a 	or	r2,r2,r17
   8d390:	80c1ffcc 	andi	r3,r16,2047
   8d394:	1820953a 	slli	r16,r3,20
   8d398:	20c03fcc 	andi	r3,r4,255
   8d39c:	180897fa 	slli	r4,r3,31
   8d3a0:	00c00434 	movhi	r3,16
   8d3a4:	18ffffc4 	addi	r3,r3,-1
   8d3a8:	28c6703a 	and	r3,r5,r3
   8d3ac:	1c06b03a 	or	r3,r3,r16
   8d3b0:	1906b03a 	or	r3,r3,r4
   8d3b4:	dfc00417 	ldw	ra,16(sp)
   8d3b8:	dcc00317 	ldw	r19,12(sp)
   8d3bc:	dc800217 	ldw	r18,8(sp)
   8d3c0:	dc400117 	ldw	r17,4(sp)
   8d3c4:	dc000017 	ldw	r16,0(sp)
   8d3c8:	dec00504 	addi	sp,sp,20
   8d3cc:	f800283a 	ret
   8d3d0:	0101ffc4 	movi	r4,2047
   8d3d4:	813fd626 	beq	r16,r4,8d330 <__alt_data_end+0xfffc1840>
   8d3d8:	29402034 	orhi	r5,r5,128
   8d3dc:	01000e04 	movi	r4,56
   8d3e0:	2080a316 	blt	r4,r2,8d670 <__subdf3+0x3c4>
   8d3e4:	010007c4 	movi	r4,31
   8d3e8:	2080c616 	blt	r4,r2,8d704 <__subdf3+0x458>
   8d3ec:	01000804 	movi	r4,32
   8d3f0:	2089c83a 	sub	r4,r4,r2
   8d3f4:	2910983a 	sll	r8,r5,r4
   8d3f8:	308ed83a 	srl	r7,r6,r2
   8d3fc:	3108983a 	sll	r4,r6,r4
   8d400:	2884d83a 	srl	r2,r5,r2
   8d404:	41ccb03a 	or	r6,r8,r7
   8d408:	2008c03a 	cmpne	r4,r4,zero
   8d40c:	310cb03a 	or	r6,r6,r4
   8d410:	898dc83a 	sub	r6,r17,r6
   8d414:	89a3803a 	cmpltu	r17,r17,r6
   8d418:	1887c83a 	sub	r3,r3,r2
   8d41c:	1c47c83a 	sub	r3,r3,r17
   8d420:	3023883a 	mov	r17,r6
   8d424:	1880202c 	andhi	r2,r3,128
   8d428:	10002326 	beq	r2,zero,8d4b8 <__subdf3+0x20c>
   8d42c:	04c02034 	movhi	r19,128
   8d430:	9cffffc4 	addi	r19,r19,-1
   8d434:	1ce6703a 	and	r19,r3,r19
   8d438:	98007a26 	beq	r19,zero,8d624 <__subdf3+0x378>
   8d43c:	9809883a 	mov	r4,r19
   8d440:	008ddac0 	call	8ddac <__clzsi2>
   8d444:	113ffe04 	addi	r4,r2,-8
   8d448:	00c007c4 	movi	r3,31
   8d44c:	19007b16 	blt	r3,r4,8d63c <__subdf3+0x390>
   8d450:	00800804 	movi	r2,32
   8d454:	1105c83a 	sub	r2,r2,r4
   8d458:	8884d83a 	srl	r2,r17,r2
   8d45c:	9906983a 	sll	r3,r19,r4
   8d460:	8922983a 	sll	r17,r17,r4
   8d464:	10c4b03a 	or	r2,r2,r3
   8d468:	24007816 	blt	r4,r16,8d64c <__subdf3+0x3a0>
   8d46c:	2421c83a 	sub	r16,r4,r16
   8d470:	80c00044 	addi	r3,r16,1
   8d474:	010007c4 	movi	r4,31
   8d478:	20c09516 	blt	r4,r3,8d6d0 <__subdf3+0x424>
   8d47c:	01400804 	movi	r5,32
   8d480:	28cbc83a 	sub	r5,r5,r3
   8d484:	88c8d83a 	srl	r4,r17,r3
   8d488:	8962983a 	sll	r17,r17,r5
   8d48c:	114a983a 	sll	r5,r2,r5
   8d490:	10c6d83a 	srl	r3,r2,r3
   8d494:	8804c03a 	cmpne	r2,r17,zero
   8d498:	290ab03a 	or	r5,r5,r4
   8d49c:	28a2b03a 	or	r17,r5,r2
   8d4a0:	0021883a 	mov	r16,zero
   8d4a4:	003fa206 	br	8d330 <__alt_data_end+0xfffc1840>
   8d4a8:	2090b03a 	or	r8,r4,r2
   8d4ac:	40018e26 	beq	r8,zero,8dae8 <__subdf3+0x83c>
   8d4b0:	1007883a 	mov	r3,r2
   8d4b4:	2023883a 	mov	r17,r4
   8d4b8:	888001cc 	andi	r2,r17,7
   8d4bc:	103f9e1e 	bne	r2,zero,8d338 <__alt_data_end+0xfffc1848>
   8d4c0:	1804977a 	slli	r2,r3,29
   8d4c4:	8822d0fa 	srli	r17,r17,3
   8d4c8:	1810d0fa 	srli	r8,r3,3
   8d4cc:	9100004c 	andi	r4,r18,1
   8d4d0:	1444b03a 	or	r2,r2,r17
   8d4d4:	00c1ffc4 	movi	r3,2047
   8d4d8:	80c02826 	beq	r16,r3,8d57c <__subdf3+0x2d0>
   8d4dc:	01400434 	movhi	r5,16
   8d4e0:	297fffc4 	addi	r5,r5,-1
   8d4e4:	80e0703a 	and	r16,r16,r3
   8d4e8:	414a703a 	and	r5,r8,r5
   8d4ec:	003fa806 	br	8d390 <__alt_data_end+0xfffc18a0>
   8d4f0:	0080630e 	bge	zero,r2,8d680 <__subdf3+0x3d4>
   8d4f4:	48003026 	beq	r9,zero,8d5b8 <__subdf3+0x30c>
   8d4f8:	0101ffc4 	movi	r4,2047
   8d4fc:	813f8c26 	beq	r16,r4,8d330 <__alt_data_end+0xfffc1840>
   8d500:	29402034 	orhi	r5,r5,128
   8d504:	01000e04 	movi	r4,56
   8d508:	2080a90e 	bge	r4,r2,8d7b0 <__subdf3+0x504>
   8d50c:	298cb03a 	or	r6,r5,r6
   8d510:	3012c03a 	cmpne	r9,r6,zero
   8d514:	0005883a 	mov	r2,zero
   8d518:	4c53883a 	add	r9,r9,r17
   8d51c:	4c63803a 	cmpltu	r17,r9,r17
   8d520:	10c7883a 	add	r3,r2,r3
   8d524:	88c7883a 	add	r3,r17,r3
   8d528:	4823883a 	mov	r17,r9
   8d52c:	1880202c 	andhi	r2,r3,128
   8d530:	1000d026 	beq	r2,zero,8d874 <__subdf3+0x5c8>
   8d534:	84000044 	addi	r16,r16,1
   8d538:	0081ffc4 	movi	r2,2047
   8d53c:	8080fe26 	beq	r16,r2,8d938 <__subdf3+0x68c>
   8d540:	00bfe034 	movhi	r2,65408
   8d544:	10bfffc4 	addi	r2,r2,-1
   8d548:	1886703a 	and	r3,r3,r2
   8d54c:	880ad07a 	srli	r5,r17,1
   8d550:	180497fa 	slli	r2,r3,31
   8d554:	8900004c 	andi	r4,r17,1
   8d558:	2922b03a 	or	r17,r5,r4
   8d55c:	1806d07a 	srli	r3,r3,1
   8d560:	1462b03a 	or	r17,r2,r17
   8d564:	3825883a 	mov	r18,r7
   8d568:	003f7106 	br	8d330 <__alt_data_end+0xfffc1840>
   8d56c:	2984b03a 	or	r2,r5,r6
   8d570:	103f6826 	beq	r2,zero,8d314 <__alt_data_end+0xfffc1824>
   8d574:	39c03fcc 	andi	r7,r7,255
   8d578:	003f6706 	br	8d318 <__alt_data_end+0xfffc1828>
   8d57c:	4086b03a 	or	r3,r8,r2
   8d580:	18015226 	beq	r3,zero,8dacc <__subdf3+0x820>
   8d584:	00c00434 	movhi	r3,16
   8d588:	41400234 	orhi	r5,r8,8
   8d58c:	18ffffc4 	addi	r3,r3,-1
   8d590:	28ca703a 	and	r5,r5,r3
   8d594:	003f7e06 	br	8d390 <__alt_data_end+0xfffc18a0>
   8d598:	10bfffc4 	addi	r2,r2,-1
   8d59c:	1000491e 	bne	r2,zero,8d6c4 <__subdf3+0x418>
   8d5a0:	898fc83a 	sub	r7,r17,r6
   8d5a4:	89e3803a 	cmpltu	r17,r17,r7
   8d5a8:	1947c83a 	sub	r3,r3,r5
   8d5ac:	1c47c83a 	sub	r3,r3,r17
   8d5b0:	3823883a 	mov	r17,r7
   8d5b4:	003f9b06 	br	8d424 <__alt_data_end+0xfffc1934>
   8d5b8:	2988b03a 	or	r4,r5,r6
   8d5bc:	203f5c26 	beq	r4,zero,8d330 <__alt_data_end+0xfffc1840>
   8d5c0:	10bfffc4 	addi	r2,r2,-1
   8d5c4:	1000931e 	bne	r2,zero,8d814 <__subdf3+0x568>
   8d5c8:	898d883a 	add	r6,r17,r6
   8d5cc:	3463803a 	cmpltu	r17,r6,r17
   8d5d0:	1947883a 	add	r3,r3,r5
   8d5d4:	88c7883a 	add	r3,r17,r3
   8d5d8:	3023883a 	mov	r17,r6
   8d5dc:	003fd306 	br	8d52c <__alt_data_end+0xfffc1a3c>
   8d5e0:	1000541e 	bne	r2,zero,8d734 <__subdf3+0x488>
   8d5e4:	80800044 	addi	r2,r16,1
   8d5e8:	1081ffcc 	andi	r2,r2,2047
   8d5ec:	01000044 	movi	r4,1
   8d5f0:	2080a20e 	bge	r4,r2,8d87c <__subdf3+0x5d0>
   8d5f4:	8989c83a 	sub	r4,r17,r6
   8d5f8:	8905803a 	cmpltu	r2,r17,r4
   8d5fc:	1967c83a 	sub	r19,r3,r5
   8d600:	98a7c83a 	sub	r19,r19,r2
   8d604:	9880202c 	andhi	r2,r19,128
   8d608:	10006326 	beq	r2,zero,8d798 <__subdf3+0x4ec>
   8d60c:	3463c83a 	sub	r17,r6,r17
   8d610:	28c7c83a 	sub	r3,r5,r3
   8d614:	344d803a 	cmpltu	r6,r6,r17
   8d618:	19a7c83a 	sub	r19,r3,r6
   8d61c:	3825883a 	mov	r18,r7
   8d620:	983f861e 	bne	r19,zero,8d43c <__alt_data_end+0xfffc194c>
   8d624:	8809883a 	mov	r4,r17
   8d628:	008ddac0 	call	8ddac <__clzsi2>
   8d62c:	10800804 	addi	r2,r2,32
   8d630:	113ffe04 	addi	r4,r2,-8
   8d634:	00c007c4 	movi	r3,31
   8d638:	193f850e 	bge	r3,r4,8d450 <__alt_data_end+0xfffc1960>
   8d63c:	10bff604 	addi	r2,r2,-40
   8d640:	8884983a 	sll	r2,r17,r2
   8d644:	0023883a 	mov	r17,zero
   8d648:	243f880e 	bge	r4,r16,8d46c <__alt_data_end+0xfffc197c>
   8d64c:	00ffe034 	movhi	r3,65408
   8d650:	18ffffc4 	addi	r3,r3,-1
   8d654:	8121c83a 	sub	r16,r16,r4
   8d658:	10c6703a 	and	r3,r2,r3
   8d65c:	003f3406 	br	8d330 <__alt_data_end+0xfffc1840>
   8d660:	9100004c 	andi	r4,r18,1
   8d664:	000b883a 	mov	r5,zero
   8d668:	0005883a 	mov	r2,zero
   8d66c:	003f4806 	br	8d390 <__alt_data_end+0xfffc18a0>
   8d670:	298cb03a 	or	r6,r5,r6
   8d674:	300cc03a 	cmpne	r6,r6,zero
   8d678:	0005883a 	mov	r2,zero
   8d67c:	003f6406 	br	8d410 <__alt_data_end+0xfffc1920>
   8d680:	10009a1e 	bne	r2,zero,8d8ec <__subdf3+0x640>
   8d684:	82400044 	addi	r9,r16,1
   8d688:	4881ffcc 	andi	r2,r9,2047
   8d68c:	02800044 	movi	r10,1
   8d690:	5080670e 	bge	r10,r2,8d830 <__subdf3+0x584>
   8d694:	0081ffc4 	movi	r2,2047
   8d698:	4880af26 	beq	r9,r2,8d958 <__subdf3+0x6ac>
   8d69c:	898d883a 	add	r6,r17,r6
   8d6a0:	1945883a 	add	r2,r3,r5
   8d6a4:	3447803a 	cmpltu	r3,r6,r17
   8d6a8:	1887883a 	add	r3,r3,r2
   8d6ac:	182297fa 	slli	r17,r3,31
   8d6b0:	300cd07a 	srli	r6,r6,1
   8d6b4:	1806d07a 	srli	r3,r3,1
   8d6b8:	4821883a 	mov	r16,r9
   8d6bc:	89a2b03a 	or	r17,r17,r6
   8d6c0:	003f1b06 	br	8d330 <__alt_data_end+0xfffc1840>
   8d6c4:	0101ffc4 	movi	r4,2047
   8d6c8:	813f441e 	bne	r16,r4,8d3dc <__alt_data_end+0xfffc18ec>
   8d6cc:	003f1806 	br	8d330 <__alt_data_end+0xfffc1840>
   8d6d0:	843ff844 	addi	r16,r16,-31
   8d6d4:	01400804 	movi	r5,32
   8d6d8:	1408d83a 	srl	r4,r2,r16
   8d6dc:	19405026 	beq	r3,r5,8d820 <__subdf3+0x574>
   8d6e0:	01401004 	movi	r5,64
   8d6e4:	28c7c83a 	sub	r3,r5,r3
   8d6e8:	10c4983a 	sll	r2,r2,r3
   8d6ec:	88a2b03a 	or	r17,r17,r2
   8d6f0:	8822c03a 	cmpne	r17,r17,zero
   8d6f4:	2462b03a 	or	r17,r4,r17
   8d6f8:	0007883a 	mov	r3,zero
   8d6fc:	0021883a 	mov	r16,zero
   8d700:	003f6d06 	br	8d4b8 <__alt_data_end+0xfffc19c8>
   8d704:	11fff804 	addi	r7,r2,-32
   8d708:	01000804 	movi	r4,32
   8d70c:	29ced83a 	srl	r7,r5,r7
   8d710:	11004526 	beq	r2,r4,8d828 <__subdf3+0x57c>
   8d714:	01001004 	movi	r4,64
   8d718:	2089c83a 	sub	r4,r4,r2
   8d71c:	2904983a 	sll	r2,r5,r4
   8d720:	118cb03a 	or	r6,r2,r6
   8d724:	300cc03a 	cmpne	r6,r6,zero
   8d728:	398cb03a 	or	r6,r7,r6
   8d72c:	0005883a 	mov	r2,zero
   8d730:	003f3706 	br	8d410 <__alt_data_end+0xfffc1920>
   8d734:	80002a26 	beq	r16,zero,8d7e0 <__subdf3+0x534>
   8d738:	0101ffc4 	movi	r4,2047
   8d73c:	49006626 	beq	r9,r4,8d8d8 <__subdf3+0x62c>
   8d740:	0085c83a 	sub	r2,zero,r2
   8d744:	18c02034 	orhi	r3,r3,128
   8d748:	01000e04 	movi	r4,56
   8d74c:	20807e16 	blt	r4,r2,8d948 <__subdf3+0x69c>
   8d750:	010007c4 	movi	r4,31
   8d754:	2080e716 	blt	r4,r2,8daf4 <__subdf3+0x848>
   8d758:	01000804 	movi	r4,32
   8d75c:	2089c83a 	sub	r4,r4,r2
   8d760:	1914983a 	sll	r10,r3,r4
   8d764:	8890d83a 	srl	r8,r17,r2
   8d768:	8908983a 	sll	r4,r17,r4
   8d76c:	1884d83a 	srl	r2,r3,r2
   8d770:	5222b03a 	or	r17,r10,r8
   8d774:	2006c03a 	cmpne	r3,r4,zero
   8d778:	88e2b03a 	or	r17,r17,r3
   8d77c:	3463c83a 	sub	r17,r6,r17
   8d780:	2885c83a 	sub	r2,r5,r2
   8d784:	344d803a 	cmpltu	r6,r6,r17
   8d788:	1187c83a 	sub	r3,r2,r6
   8d78c:	4821883a 	mov	r16,r9
   8d790:	3825883a 	mov	r18,r7
   8d794:	003f2306 	br	8d424 <__alt_data_end+0xfffc1934>
   8d798:	24d0b03a 	or	r8,r4,r19
   8d79c:	40001b1e 	bne	r8,zero,8d80c <__subdf3+0x560>
   8d7a0:	0005883a 	mov	r2,zero
   8d7a4:	0009883a 	mov	r4,zero
   8d7a8:	0021883a 	mov	r16,zero
   8d7ac:	003f4906 	br	8d4d4 <__alt_data_end+0xfffc19e4>
   8d7b0:	010007c4 	movi	r4,31
   8d7b4:	20803a16 	blt	r4,r2,8d8a0 <__subdf3+0x5f4>
   8d7b8:	01000804 	movi	r4,32
   8d7bc:	2089c83a 	sub	r4,r4,r2
   8d7c0:	2912983a 	sll	r9,r5,r4
   8d7c4:	3090d83a 	srl	r8,r6,r2
   8d7c8:	3108983a 	sll	r4,r6,r4
   8d7cc:	2884d83a 	srl	r2,r5,r2
   8d7d0:	4a12b03a 	or	r9,r9,r8
   8d7d4:	2008c03a 	cmpne	r4,r4,zero
   8d7d8:	4912b03a 	or	r9,r9,r4
   8d7dc:	003f4e06 	br	8d518 <__alt_data_end+0xfffc1a28>
   8d7e0:	1c48b03a 	or	r4,r3,r17
   8d7e4:	20003c26 	beq	r4,zero,8d8d8 <__subdf3+0x62c>
   8d7e8:	0084303a 	nor	r2,zero,r2
   8d7ec:	1000381e 	bne	r2,zero,8d8d0 <__subdf3+0x624>
   8d7f0:	3463c83a 	sub	r17,r6,r17
   8d7f4:	28c5c83a 	sub	r2,r5,r3
   8d7f8:	344d803a 	cmpltu	r6,r6,r17
   8d7fc:	1187c83a 	sub	r3,r2,r6
   8d800:	4821883a 	mov	r16,r9
   8d804:	3825883a 	mov	r18,r7
   8d808:	003f0606 	br	8d424 <__alt_data_end+0xfffc1934>
   8d80c:	2023883a 	mov	r17,r4
   8d810:	003f0906 	br	8d438 <__alt_data_end+0xfffc1948>
   8d814:	0101ffc4 	movi	r4,2047
   8d818:	813f3a1e 	bne	r16,r4,8d504 <__alt_data_end+0xfffc1a14>
   8d81c:	003ec406 	br	8d330 <__alt_data_end+0xfffc1840>
   8d820:	0005883a 	mov	r2,zero
   8d824:	003fb106 	br	8d6ec <__alt_data_end+0xfffc1bfc>
   8d828:	0005883a 	mov	r2,zero
   8d82c:	003fbc06 	br	8d720 <__alt_data_end+0xfffc1c30>
   8d830:	1c44b03a 	or	r2,r3,r17
   8d834:	80008e1e 	bne	r16,zero,8da70 <__subdf3+0x7c4>
   8d838:	1000c826 	beq	r2,zero,8db5c <__subdf3+0x8b0>
   8d83c:	2984b03a 	or	r2,r5,r6
   8d840:	103ebb26 	beq	r2,zero,8d330 <__alt_data_end+0xfffc1840>
   8d844:	8989883a 	add	r4,r17,r6
   8d848:	1945883a 	add	r2,r3,r5
   8d84c:	2447803a 	cmpltu	r3,r4,r17
   8d850:	1887883a 	add	r3,r3,r2
   8d854:	1880202c 	andhi	r2,r3,128
   8d858:	2023883a 	mov	r17,r4
   8d85c:	103f1626 	beq	r2,zero,8d4b8 <__alt_data_end+0xfffc19c8>
   8d860:	00bfe034 	movhi	r2,65408
   8d864:	10bfffc4 	addi	r2,r2,-1
   8d868:	5021883a 	mov	r16,r10
   8d86c:	1886703a 	and	r3,r3,r2
   8d870:	003eaf06 	br	8d330 <__alt_data_end+0xfffc1840>
   8d874:	3825883a 	mov	r18,r7
   8d878:	003f0f06 	br	8d4b8 <__alt_data_end+0xfffc19c8>
   8d87c:	1c44b03a 	or	r2,r3,r17
   8d880:	8000251e 	bne	r16,zero,8d918 <__subdf3+0x66c>
   8d884:	1000661e 	bne	r2,zero,8da20 <__subdf3+0x774>
   8d888:	2990b03a 	or	r8,r5,r6
   8d88c:	40009626 	beq	r8,zero,8dae8 <__subdf3+0x83c>
   8d890:	2807883a 	mov	r3,r5
   8d894:	3023883a 	mov	r17,r6
   8d898:	3825883a 	mov	r18,r7
   8d89c:	003ea406 	br	8d330 <__alt_data_end+0xfffc1840>
   8d8a0:	127ff804 	addi	r9,r2,-32
   8d8a4:	01000804 	movi	r4,32
   8d8a8:	2a52d83a 	srl	r9,r5,r9
   8d8ac:	11008c26 	beq	r2,r4,8dae0 <__subdf3+0x834>
   8d8b0:	01001004 	movi	r4,64
   8d8b4:	2085c83a 	sub	r2,r4,r2
   8d8b8:	2884983a 	sll	r2,r5,r2
   8d8bc:	118cb03a 	or	r6,r2,r6
   8d8c0:	300cc03a 	cmpne	r6,r6,zero
   8d8c4:	4992b03a 	or	r9,r9,r6
   8d8c8:	0005883a 	mov	r2,zero
   8d8cc:	003f1206 	br	8d518 <__alt_data_end+0xfffc1a28>
   8d8d0:	0101ffc4 	movi	r4,2047
   8d8d4:	493f9c1e 	bne	r9,r4,8d748 <__alt_data_end+0xfffc1c58>
   8d8d8:	2807883a 	mov	r3,r5
   8d8dc:	3023883a 	mov	r17,r6
   8d8e0:	4821883a 	mov	r16,r9
   8d8e4:	3825883a 	mov	r18,r7
   8d8e8:	003e9106 	br	8d330 <__alt_data_end+0xfffc1840>
   8d8ec:	80001f1e 	bne	r16,zero,8d96c <__subdf3+0x6c0>
   8d8f0:	1c48b03a 	or	r4,r3,r17
   8d8f4:	20005a26 	beq	r4,zero,8da60 <__subdf3+0x7b4>
   8d8f8:	0084303a 	nor	r2,zero,r2
   8d8fc:	1000561e 	bne	r2,zero,8da58 <__subdf3+0x7ac>
   8d900:	89a3883a 	add	r17,r17,r6
   8d904:	1945883a 	add	r2,r3,r5
   8d908:	898d803a 	cmpltu	r6,r17,r6
   8d90c:	3087883a 	add	r3,r6,r2
   8d910:	4821883a 	mov	r16,r9
   8d914:	003f0506 	br	8d52c <__alt_data_end+0xfffc1a3c>
   8d918:	10002b1e 	bne	r2,zero,8d9c8 <__subdf3+0x71c>
   8d91c:	2984b03a 	or	r2,r5,r6
   8d920:	10008026 	beq	r2,zero,8db24 <__subdf3+0x878>
   8d924:	2807883a 	mov	r3,r5
   8d928:	3023883a 	mov	r17,r6
   8d92c:	3825883a 	mov	r18,r7
   8d930:	0401ffc4 	movi	r16,2047
   8d934:	003e7e06 	br	8d330 <__alt_data_end+0xfffc1840>
   8d938:	3809883a 	mov	r4,r7
   8d93c:	0011883a 	mov	r8,zero
   8d940:	0005883a 	mov	r2,zero
   8d944:	003ee306 	br	8d4d4 <__alt_data_end+0xfffc19e4>
   8d948:	1c62b03a 	or	r17,r3,r17
   8d94c:	8822c03a 	cmpne	r17,r17,zero
   8d950:	0005883a 	mov	r2,zero
   8d954:	003f8906 	br	8d77c <__alt_data_end+0xfffc1c8c>
   8d958:	3809883a 	mov	r4,r7
   8d95c:	4821883a 	mov	r16,r9
   8d960:	0011883a 	mov	r8,zero
   8d964:	0005883a 	mov	r2,zero
   8d968:	003eda06 	br	8d4d4 <__alt_data_end+0xfffc19e4>
   8d96c:	0101ffc4 	movi	r4,2047
   8d970:	49003b26 	beq	r9,r4,8da60 <__subdf3+0x7b4>
   8d974:	0085c83a 	sub	r2,zero,r2
   8d978:	18c02034 	orhi	r3,r3,128
   8d97c:	01000e04 	movi	r4,56
   8d980:	20806e16 	blt	r4,r2,8db3c <__subdf3+0x890>
   8d984:	010007c4 	movi	r4,31
   8d988:	20807716 	blt	r4,r2,8db68 <__subdf3+0x8bc>
   8d98c:	01000804 	movi	r4,32
   8d990:	2089c83a 	sub	r4,r4,r2
   8d994:	1914983a 	sll	r10,r3,r4
   8d998:	8890d83a 	srl	r8,r17,r2
   8d99c:	8908983a 	sll	r4,r17,r4
   8d9a0:	1884d83a 	srl	r2,r3,r2
   8d9a4:	5222b03a 	or	r17,r10,r8
   8d9a8:	2006c03a 	cmpne	r3,r4,zero
   8d9ac:	88e2b03a 	or	r17,r17,r3
   8d9b0:	89a3883a 	add	r17,r17,r6
   8d9b4:	1145883a 	add	r2,r2,r5
   8d9b8:	898d803a 	cmpltu	r6,r17,r6
   8d9bc:	3087883a 	add	r3,r6,r2
   8d9c0:	4821883a 	mov	r16,r9
   8d9c4:	003ed906 	br	8d52c <__alt_data_end+0xfffc1a3c>
   8d9c8:	2984b03a 	or	r2,r5,r6
   8d9cc:	10004226 	beq	r2,zero,8dad8 <__subdf3+0x82c>
   8d9d0:	1808d0fa 	srli	r4,r3,3
   8d9d4:	8822d0fa 	srli	r17,r17,3
   8d9d8:	1806977a 	slli	r3,r3,29
   8d9dc:	2080022c 	andhi	r2,r4,8
   8d9e0:	1c62b03a 	or	r17,r3,r17
   8d9e4:	10000826 	beq	r2,zero,8da08 <__subdf3+0x75c>
   8d9e8:	2812d0fa 	srli	r9,r5,3
   8d9ec:	4880022c 	andhi	r2,r9,8
   8d9f0:	1000051e 	bne	r2,zero,8da08 <__subdf3+0x75c>
   8d9f4:	300cd0fa 	srli	r6,r6,3
   8d9f8:	2804977a 	slli	r2,r5,29
   8d9fc:	4809883a 	mov	r4,r9
   8da00:	3825883a 	mov	r18,r7
   8da04:	11a2b03a 	or	r17,r2,r6
   8da08:	8806d77a 	srli	r3,r17,29
   8da0c:	200890fa 	slli	r4,r4,3
   8da10:	882290fa 	slli	r17,r17,3
   8da14:	0401ffc4 	movi	r16,2047
   8da18:	1906b03a 	or	r3,r3,r4
   8da1c:	003e4406 	br	8d330 <__alt_data_end+0xfffc1840>
   8da20:	2984b03a 	or	r2,r5,r6
   8da24:	103e4226 	beq	r2,zero,8d330 <__alt_data_end+0xfffc1840>
   8da28:	8989c83a 	sub	r4,r17,r6
   8da2c:	8911803a 	cmpltu	r8,r17,r4
   8da30:	1945c83a 	sub	r2,r3,r5
   8da34:	1205c83a 	sub	r2,r2,r8
   8da38:	1200202c 	andhi	r8,r2,128
   8da3c:	403e9a26 	beq	r8,zero,8d4a8 <__alt_data_end+0xfffc19b8>
   8da40:	3463c83a 	sub	r17,r6,r17
   8da44:	28c5c83a 	sub	r2,r5,r3
   8da48:	344d803a 	cmpltu	r6,r6,r17
   8da4c:	1187c83a 	sub	r3,r2,r6
   8da50:	3825883a 	mov	r18,r7
   8da54:	003e3606 	br	8d330 <__alt_data_end+0xfffc1840>
   8da58:	0101ffc4 	movi	r4,2047
   8da5c:	493fc71e 	bne	r9,r4,8d97c <__alt_data_end+0xfffc1e8c>
   8da60:	2807883a 	mov	r3,r5
   8da64:	3023883a 	mov	r17,r6
   8da68:	4821883a 	mov	r16,r9
   8da6c:	003e3006 	br	8d330 <__alt_data_end+0xfffc1840>
   8da70:	10003626 	beq	r2,zero,8db4c <__subdf3+0x8a0>
   8da74:	2984b03a 	or	r2,r5,r6
   8da78:	10001726 	beq	r2,zero,8dad8 <__subdf3+0x82c>
   8da7c:	1808d0fa 	srli	r4,r3,3
   8da80:	8822d0fa 	srli	r17,r17,3
   8da84:	1806977a 	slli	r3,r3,29
   8da88:	2080022c 	andhi	r2,r4,8
   8da8c:	1c62b03a 	or	r17,r3,r17
   8da90:	10000726 	beq	r2,zero,8dab0 <__subdf3+0x804>
   8da94:	2812d0fa 	srli	r9,r5,3
   8da98:	4880022c 	andhi	r2,r9,8
   8da9c:	1000041e 	bne	r2,zero,8dab0 <__subdf3+0x804>
   8daa0:	300cd0fa 	srli	r6,r6,3
   8daa4:	2804977a 	slli	r2,r5,29
   8daa8:	4809883a 	mov	r4,r9
   8daac:	11a2b03a 	or	r17,r2,r6
   8dab0:	8806d77a 	srli	r3,r17,29
   8dab4:	200890fa 	slli	r4,r4,3
   8dab8:	882290fa 	slli	r17,r17,3
   8dabc:	3825883a 	mov	r18,r7
   8dac0:	1906b03a 	or	r3,r3,r4
   8dac4:	0401ffc4 	movi	r16,2047
   8dac8:	003e1906 	br	8d330 <__alt_data_end+0xfffc1840>
   8dacc:	000b883a 	mov	r5,zero
   8dad0:	0005883a 	mov	r2,zero
   8dad4:	003e2e06 	br	8d390 <__alt_data_end+0xfffc18a0>
   8dad8:	0401ffc4 	movi	r16,2047
   8dadc:	003e1406 	br	8d330 <__alt_data_end+0xfffc1840>
   8dae0:	0005883a 	mov	r2,zero
   8dae4:	003f7506 	br	8d8bc <__alt_data_end+0xfffc1dcc>
   8dae8:	0005883a 	mov	r2,zero
   8daec:	0009883a 	mov	r4,zero
   8daf0:	003e7806 	br	8d4d4 <__alt_data_end+0xfffc19e4>
   8daf4:	123ff804 	addi	r8,r2,-32
   8daf8:	01000804 	movi	r4,32
   8dafc:	1a10d83a 	srl	r8,r3,r8
   8db00:	11002526 	beq	r2,r4,8db98 <__subdf3+0x8ec>
   8db04:	01001004 	movi	r4,64
   8db08:	2085c83a 	sub	r2,r4,r2
   8db0c:	1884983a 	sll	r2,r3,r2
   8db10:	1444b03a 	or	r2,r2,r17
   8db14:	1004c03a 	cmpne	r2,r2,zero
   8db18:	40a2b03a 	or	r17,r8,r2
   8db1c:	0005883a 	mov	r2,zero
   8db20:	003f1606 	br	8d77c <__alt_data_end+0xfffc1c8c>
   8db24:	02000434 	movhi	r8,16
   8db28:	0009883a 	mov	r4,zero
   8db2c:	423fffc4 	addi	r8,r8,-1
   8db30:	00bfffc4 	movi	r2,-1
   8db34:	0401ffc4 	movi	r16,2047
   8db38:	003e6606 	br	8d4d4 <__alt_data_end+0xfffc19e4>
   8db3c:	1c62b03a 	or	r17,r3,r17
   8db40:	8822c03a 	cmpne	r17,r17,zero
   8db44:	0005883a 	mov	r2,zero
   8db48:	003f9906 	br	8d9b0 <__alt_data_end+0xfffc1ec0>
   8db4c:	2807883a 	mov	r3,r5
   8db50:	3023883a 	mov	r17,r6
   8db54:	0401ffc4 	movi	r16,2047
   8db58:	003df506 	br	8d330 <__alt_data_end+0xfffc1840>
   8db5c:	2807883a 	mov	r3,r5
   8db60:	3023883a 	mov	r17,r6
   8db64:	003df206 	br	8d330 <__alt_data_end+0xfffc1840>
   8db68:	123ff804 	addi	r8,r2,-32
   8db6c:	01000804 	movi	r4,32
   8db70:	1a10d83a 	srl	r8,r3,r8
   8db74:	11000a26 	beq	r2,r4,8dba0 <__subdf3+0x8f4>
   8db78:	01001004 	movi	r4,64
   8db7c:	2085c83a 	sub	r2,r4,r2
   8db80:	1884983a 	sll	r2,r3,r2
   8db84:	1444b03a 	or	r2,r2,r17
   8db88:	1004c03a 	cmpne	r2,r2,zero
   8db8c:	40a2b03a 	or	r17,r8,r2
   8db90:	0005883a 	mov	r2,zero
   8db94:	003f8606 	br	8d9b0 <__alt_data_end+0xfffc1ec0>
   8db98:	0005883a 	mov	r2,zero
   8db9c:	003fdc06 	br	8db10 <__alt_data_end+0xfffc2020>
   8dba0:	0005883a 	mov	r2,zero
   8dba4:	003ff706 	br	8db84 <__alt_data_end+0xfffc2094>

0008dba8 <__fixdfsi>:
   8dba8:	280cd53a 	srli	r6,r5,20
   8dbac:	00c00434 	movhi	r3,16
   8dbb0:	18ffffc4 	addi	r3,r3,-1
   8dbb4:	3181ffcc 	andi	r6,r6,2047
   8dbb8:	01c0ff84 	movi	r7,1022
   8dbbc:	28c6703a 	and	r3,r5,r3
   8dbc0:	280ad7fa 	srli	r5,r5,31
   8dbc4:	3980120e 	bge	r7,r6,8dc10 <__fixdfsi+0x68>
   8dbc8:	00810744 	movi	r2,1053
   8dbcc:	11800c16 	blt	r2,r6,8dc00 <__fixdfsi+0x58>
   8dbd0:	00810cc4 	movi	r2,1075
   8dbd4:	1185c83a 	sub	r2,r2,r6
   8dbd8:	01c007c4 	movi	r7,31
   8dbdc:	18c00434 	orhi	r3,r3,16
   8dbe0:	38800d16 	blt	r7,r2,8dc18 <__fixdfsi+0x70>
   8dbe4:	31befb44 	addi	r6,r6,-1043
   8dbe8:	2084d83a 	srl	r2,r4,r2
   8dbec:	1986983a 	sll	r3,r3,r6
   8dbf0:	1884b03a 	or	r2,r3,r2
   8dbf4:	28000726 	beq	r5,zero,8dc14 <__fixdfsi+0x6c>
   8dbf8:	0085c83a 	sub	r2,zero,r2
   8dbfc:	f800283a 	ret
   8dc00:	00a00034 	movhi	r2,32768
   8dc04:	10bfffc4 	addi	r2,r2,-1
   8dc08:	2885883a 	add	r2,r5,r2
   8dc0c:	f800283a 	ret
   8dc10:	0005883a 	mov	r2,zero
   8dc14:	f800283a 	ret
   8dc18:	008104c4 	movi	r2,1043
   8dc1c:	1185c83a 	sub	r2,r2,r6
   8dc20:	1884d83a 	srl	r2,r3,r2
   8dc24:	003ff306 	br	8dbf4 <__alt_data_end+0xfffc2104>

0008dc28 <__floatsidf>:
   8dc28:	defffd04 	addi	sp,sp,-12
   8dc2c:	dfc00215 	stw	ra,8(sp)
   8dc30:	dc400115 	stw	r17,4(sp)
   8dc34:	dc000015 	stw	r16,0(sp)
   8dc38:	20002b26 	beq	r4,zero,8dce8 <__floatsidf+0xc0>
   8dc3c:	2023883a 	mov	r17,r4
   8dc40:	2020d7fa 	srli	r16,r4,31
   8dc44:	20002d16 	blt	r4,zero,8dcfc <__floatsidf+0xd4>
   8dc48:	8809883a 	mov	r4,r17
   8dc4c:	008ddac0 	call	8ddac <__clzsi2>
   8dc50:	01410784 	movi	r5,1054
   8dc54:	288bc83a 	sub	r5,r5,r2
   8dc58:	01010cc4 	movi	r4,1075
   8dc5c:	2149c83a 	sub	r4,r4,r5
   8dc60:	00c007c4 	movi	r3,31
   8dc64:	1900160e 	bge	r3,r4,8dcc0 <__floatsidf+0x98>
   8dc68:	00c104c4 	movi	r3,1043
   8dc6c:	1947c83a 	sub	r3,r3,r5
   8dc70:	88c6983a 	sll	r3,r17,r3
   8dc74:	00800434 	movhi	r2,16
   8dc78:	10bfffc4 	addi	r2,r2,-1
   8dc7c:	1886703a 	and	r3,r3,r2
   8dc80:	2941ffcc 	andi	r5,r5,2047
   8dc84:	800d883a 	mov	r6,r16
   8dc88:	0005883a 	mov	r2,zero
   8dc8c:	280a953a 	slli	r5,r5,20
   8dc90:	31803fcc 	andi	r6,r6,255
   8dc94:	01000434 	movhi	r4,16
   8dc98:	300c97fa 	slli	r6,r6,31
   8dc9c:	213fffc4 	addi	r4,r4,-1
   8dca0:	1906703a 	and	r3,r3,r4
   8dca4:	1946b03a 	or	r3,r3,r5
   8dca8:	1986b03a 	or	r3,r3,r6
   8dcac:	dfc00217 	ldw	ra,8(sp)
   8dcb0:	dc400117 	ldw	r17,4(sp)
   8dcb4:	dc000017 	ldw	r16,0(sp)
   8dcb8:	dec00304 	addi	sp,sp,12
   8dcbc:	f800283a 	ret
   8dcc0:	00c002c4 	movi	r3,11
   8dcc4:	1887c83a 	sub	r3,r3,r2
   8dcc8:	88c6d83a 	srl	r3,r17,r3
   8dccc:	8904983a 	sll	r2,r17,r4
   8dcd0:	01000434 	movhi	r4,16
   8dcd4:	213fffc4 	addi	r4,r4,-1
   8dcd8:	2941ffcc 	andi	r5,r5,2047
   8dcdc:	1906703a 	and	r3,r3,r4
   8dce0:	800d883a 	mov	r6,r16
   8dce4:	003fe906 	br	8dc8c <__alt_data_end+0xfffc219c>
   8dce8:	000d883a 	mov	r6,zero
   8dcec:	000b883a 	mov	r5,zero
   8dcf0:	0007883a 	mov	r3,zero
   8dcf4:	0005883a 	mov	r2,zero
   8dcf8:	003fe406 	br	8dc8c <__alt_data_end+0xfffc219c>
   8dcfc:	0123c83a 	sub	r17,zero,r4
   8dd00:	003fd106 	br	8dc48 <__alt_data_end+0xfffc2158>

0008dd04 <__floatunsidf>:
   8dd04:	defffe04 	addi	sp,sp,-8
   8dd08:	dc000015 	stw	r16,0(sp)
   8dd0c:	dfc00115 	stw	ra,4(sp)
   8dd10:	2021883a 	mov	r16,r4
   8dd14:	20002226 	beq	r4,zero,8dda0 <__floatunsidf+0x9c>
   8dd18:	008ddac0 	call	8ddac <__clzsi2>
   8dd1c:	01010784 	movi	r4,1054
   8dd20:	2089c83a 	sub	r4,r4,r2
   8dd24:	01810cc4 	movi	r6,1075
   8dd28:	310dc83a 	sub	r6,r6,r4
   8dd2c:	00c007c4 	movi	r3,31
   8dd30:	1980120e 	bge	r3,r6,8dd7c <__floatunsidf+0x78>
   8dd34:	00c104c4 	movi	r3,1043
   8dd38:	1907c83a 	sub	r3,r3,r4
   8dd3c:	80ca983a 	sll	r5,r16,r3
   8dd40:	00800434 	movhi	r2,16
   8dd44:	10bfffc4 	addi	r2,r2,-1
   8dd48:	2101ffcc 	andi	r4,r4,2047
   8dd4c:	0021883a 	mov	r16,zero
   8dd50:	288a703a 	and	r5,r5,r2
   8dd54:	2008953a 	slli	r4,r4,20
   8dd58:	00c00434 	movhi	r3,16
   8dd5c:	18ffffc4 	addi	r3,r3,-1
   8dd60:	28c6703a 	and	r3,r5,r3
   8dd64:	8005883a 	mov	r2,r16
   8dd68:	1906b03a 	or	r3,r3,r4
   8dd6c:	dfc00117 	ldw	ra,4(sp)
   8dd70:	dc000017 	ldw	r16,0(sp)
   8dd74:	dec00204 	addi	sp,sp,8
   8dd78:	f800283a 	ret
   8dd7c:	00c002c4 	movi	r3,11
   8dd80:	188bc83a 	sub	r5,r3,r2
   8dd84:	814ad83a 	srl	r5,r16,r5
   8dd88:	00c00434 	movhi	r3,16
   8dd8c:	18ffffc4 	addi	r3,r3,-1
   8dd90:	81a0983a 	sll	r16,r16,r6
   8dd94:	2101ffcc 	andi	r4,r4,2047
   8dd98:	28ca703a 	and	r5,r5,r3
   8dd9c:	003fed06 	br	8dd54 <__alt_data_end+0xfffc2264>
   8dda0:	0009883a 	mov	r4,zero
   8dda4:	000b883a 	mov	r5,zero
   8dda8:	003fea06 	br	8dd54 <__alt_data_end+0xfffc2264>

0008ddac <__clzsi2>:
   8ddac:	00bfffd4 	movui	r2,65535
   8ddb0:	11000536 	bltu	r2,r4,8ddc8 <__clzsi2+0x1c>
   8ddb4:	00803fc4 	movi	r2,255
   8ddb8:	11000f36 	bltu	r2,r4,8ddf8 <__clzsi2+0x4c>
   8ddbc:	00800804 	movi	r2,32
   8ddc0:	0007883a 	mov	r3,zero
   8ddc4:	00000506 	br	8dddc <__clzsi2+0x30>
   8ddc8:	00804034 	movhi	r2,256
   8ddcc:	10bfffc4 	addi	r2,r2,-1
   8ddd0:	11000c2e 	bgeu	r2,r4,8de04 <__clzsi2+0x58>
   8ddd4:	00800204 	movi	r2,8
   8ddd8:	00c00604 	movi	r3,24
   8dddc:	20c8d83a 	srl	r4,r4,r3
   8dde0:	00c00274 	movhi	r3,9
   8dde4:	18c31604 	addi	r3,r3,3160
   8dde8:	1909883a 	add	r4,r3,r4
   8ddec:	20c00003 	ldbu	r3,0(r4)
   8ddf0:	10c5c83a 	sub	r2,r2,r3
   8ddf4:	f800283a 	ret
   8ddf8:	00800604 	movi	r2,24
   8ddfc:	00c00204 	movi	r3,8
   8de00:	003ff606 	br	8dddc <__alt_data_end+0xfffc22ec>
   8de04:	00800404 	movi	r2,16
   8de08:	1007883a 	mov	r3,r2
   8de0c:	003ff306 	br	8dddc <__alt_data_end+0xfffc22ec>

0008de10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8de10:	defffe04 	addi	sp,sp,-8
   8de14:	dfc00115 	stw	ra,4(sp)
   8de18:	df000015 	stw	fp,0(sp)
   8de1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8de20:	d0a00b17 	ldw	r2,-32724(gp)
   8de24:	10000326 	beq	r2,zero,8de34 <alt_get_errno+0x24>
   8de28:	d0a00b17 	ldw	r2,-32724(gp)
   8de2c:	103ee83a 	callr	r2
   8de30:	00000106 	br	8de38 <alt_get_errno+0x28>
   8de34:	d0a6f904 	addi	r2,gp,-25628
}
   8de38:	e037883a 	mov	sp,fp
   8de3c:	dfc00117 	ldw	ra,4(sp)
   8de40:	df000017 	ldw	fp,0(sp)
   8de44:	dec00204 	addi	sp,sp,8
   8de48:	f800283a 	ret

0008de4c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8de4c:	defffb04 	addi	sp,sp,-20
   8de50:	dfc00415 	stw	ra,16(sp)
   8de54:	df000315 	stw	fp,12(sp)
   8de58:	df000304 	addi	fp,sp,12
   8de5c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8de60:	e0bfff17 	ldw	r2,-4(fp)
   8de64:	10000616 	blt	r2,zero,8de80 <close+0x34>
   8de68:	e0bfff17 	ldw	r2,-4(fp)
   8de6c:	10c00324 	muli	r3,r2,12
   8de70:	00800274 	movhi	r2,9
   8de74:	1085c104 	addi	r2,r2,5892
   8de78:	1885883a 	add	r2,r3,r2
   8de7c:	00000106 	br	8de84 <close+0x38>
   8de80:	0005883a 	mov	r2,zero
   8de84:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   8de88:	e0bffd17 	ldw	r2,-12(fp)
   8de8c:	10001926 	beq	r2,zero,8def4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8de90:	e0bffd17 	ldw	r2,-12(fp)
   8de94:	10800017 	ldw	r2,0(r2)
   8de98:	10800417 	ldw	r2,16(r2)
   8de9c:	10000626 	beq	r2,zero,8deb8 <close+0x6c>
   8dea0:	e0bffd17 	ldw	r2,-12(fp)
   8dea4:	10800017 	ldw	r2,0(r2)
   8dea8:	10800417 	ldw	r2,16(r2)
   8deac:	e13ffd17 	ldw	r4,-12(fp)
   8deb0:	103ee83a 	callr	r2
   8deb4:	00000106 	br	8debc <close+0x70>
   8deb8:	0005883a 	mov	r2,zero
   8debc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8dec0:	e13fff17 	ldw	r4,-4(fp)
   8dec4:	008eb200 	call	8eb20 <alt_release_fd>
    if (rval < 0)
   8dec8:	e0bffe17 	ldw	r2,-8(fp)
   8decc:	1000070e 	bge	r2,zero,8deec <close+0xa0>
    {
      ALT_ERRNO = -rval;
   8ded0:	008de100 	call	8de10 <alt_get_errno>
   8ded4:	1007883a 	mov	r3,r2
   8ded8:	e0bffe17 	ldw	r2,-8(fp)
   8dedc:	0085c83a 	sub	r2,zero,r2
   8dee0:	18800015 	stw	r2,0(r3)
      return -1;
   8dee4:	00bfffc4 	movi	r2,-1
   8dee8:	00000706 	br	8df08 <close+0xbc>
    }
    return 0;
   8deec:	0005883a 	mov	r2,zero
   8def0:	00000506 	br	8df08 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8def4:	008de100 	call	8de10 <alt_get_errno>
   8def8:	1007883a 	mov	r3,r2
   8defc:	00801444 	movi	r2,81
   8df00:	18800015 	stw	r2,0(r3)
    return -1;
   8df04:	00bfffc4 	movi	r2,-1
  }
}
   8df08:	e037883a 	mov	sp,fp
   8df0c:	dfc00117 	ldw	ra,4(sp)
   8df10:	df000017 	ldw	fp,0(sp)
   8df14:	dec00204 	addi	sp,sp,8
   8df18:	f800283a 	ret

0008df1c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8df1c:	defffc04 	addi	sp,sp,-16
   8df20:	df000315 	stw	fp,12(sp)
   8df24:	df000304 	addi	fp,sp,12
   8df28:	e13ffd15 	stw	r4,-12(fp)
   8df2c:	e17ffe15 	stw	r5,-8(fp)
   8df30:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8df34:	e0bfff17 	ldw	r2,-4(fp)
}
   8df38:	e037883a 	mov	sp,fp
   8df3c:	df000017 	ldw	fp,0(sp)
   8df40:	dec00104 	addi	sp,sp,4
   8df44:	f800283a 	ret

0008df48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8df48:	defffe04 	addi	sp,sp,-8
   8df4c:	dfc00115 	stw	ra,4(sp)
   8df50:	df000015 	stw	fp,0(sp)
   8df54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8df58:	d0a00b17 	ldw	r2,-32724(gp)
   8df5c:	10000326 	beq	r2,zero,8df6c <alt_get_errno+0x24>
   8df60:	d0a00b17 	ldw	r2,-32724(gp)
   8df64:	103ee83a 	callr	r2
   8df68:	00000106 	br	8df70 <alt_get_errno+0x28>
   8df6c:	d0a6f904 	addi	r2,gp,-25628
}
   8df70:	e037883a 	mov	sp,fp
   8df74:	dfc00117 	ldw	ra,4(sp)
   8df78:	df000017 	ldw	fp,0(sp)
   8df7c:	dec00204 	addi	sp,sp,8
   8df80:	f800283a 	ret

0008df84 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8df84:	defffb04 	addi	sp,sp,-20
   8df88:	dfc00415 	stw	ra,16(sp)
   8df8c:	df000315 	stw	fp,12(sp)
   8df90:	df000304 	addi	fp,sp,12
   8df94:	e13ffe15 	stw	r4,-8(fp)
   8df98:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8df9c:	e0bffe17 	ldw	r2,-8(fp)
   8dfa0:	10000616 	blt	r2,zero,8dfbc <fstat+0x38>
   8dfa4:	e0bffe17 	ldw	r2,-8(fp)
   8dfa8:	10c00324 	muli	r3,r2,12
   8dfac:	00800274 	movhi	r2,9
   8dfb0:	1085c104 	addi	r2,r2,5892
   8dfb4:	1885883a 	add	r2,r3,r2
   8dfb8:	00000106 	br	8dfc0 <fstat+0x3c>
   8dfbc:	0005883a 	mov	r2,zero
   8dfc0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   8dfc4:	e0bffd17 	ldw	r2,-12(fp)
   8dfc8:	10001026 	beq	r2,zero,8e00c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8dfcc:	e0bffd17 	ldw	r2,-12(fp)
   8dfd0:	10800017 	ldw	r2,0(r2)
   8dfd4:	10800817 	ldw	r2,32(r2)
   8dfd8:	10000726 	beq	r2,zero,8dff8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   8dfdc:	e0bffd17 	ldw	r2,-12(fp)
   8dfe0:	10800017 	ldw	r2,0(r2)
   8dfe4:	10800817 	ldw	r2,32(r2)
   8dfe8:	e17fff17 	ldw	r5,-4(fp)
   8dfec:	e13ffd17 	ldw	r4,-12(fp)
   8dff0:	103ee83a 	callr	r2
   8dff4:	00000a06 	br	8e020 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8dff8:	e0bfff17 	ldw	r2,-4(fp)
   8dffc:	00c80004 	movi	r3,8192
   8e000:	10c00115 	stw	r3,4(r2)
      return 0;
   8e004:	0005883a 	mov	r2,zero
   8e008:	00000506 	br	8e020 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e00c:	008df480 	call	8df48 <alt_get_errno>
   8e010:	1007883a 	mov	r3,r2
   8e014:	00801444 	movi	r2,81
   8e018:	18800015 	stw	r2,0(r3)
    return -1;
   8e01c:	00bfffc4 	movi	r2,-1
  }
}
   8e020:	e037883a 	mov	sp,fp
   8e024:	dfc00117 	ldw	ra,4(sp)
   8e028:	df000017 	ldw	fp,0(sp)
   8e02c:	dec00204 	addi	sp,sp,8
   8e030:	f800283a 	ret

0008e034 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
   8e034:	defff404 	addi	sp,sp,-48
   8e038:	dfc00b15 	stw	ra,44(sp)
   8e03c:	df000a15 	stw	fp,40(sp)
   8e040:	dd000915 	stw	r20,36(sp)
   8e044:	dcc00815 	stw	r19,32(sp)
   8e048:	dc800715 	stw	r18,28(sp)
   8e04c:	dc400615 	stw	r17,24(sp)
   8e050:	dc000515 	stw	r16,20(sp)
   8e054:	df000a04 	addi	fp,sp,40
   8e058:	e13ff915 	stw	r4,-28(fp)
   8e05c:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
   8e060:	e0bffa17 	ldw	r2,-24(fp)
   8e064:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8e068:	d0a70917 	ldw	r2,-25564(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
   8e06c:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8e070:	d0a70817 	ldw	r2,-25568(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
   8e074:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
   8e078:	e0bff817 	ldw	r2,-32(fp)
   8e07c:	10005f26 	beq	r2,zero,8e1fc <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   8e080:	d0a70217 	ldw	r2,-25592(gp)
   8e084:	1029883a 	mov	r20,r2
   8e088:	e17ff817 	ldw	r5,-32(fp)
   8e08c:	e13ff717 	ldw	r4,-36(fp)
   8e090:	00814600 	call	81460 <__udivsi3>
   8e094:	a085883a 	add	r2,r20,r2
   8e098:	1007883a 	mov	r3,r2
   8e09c:	e0bff917 	ldw	r2,-28(fp)
   8e0a0:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
   8e0a4:	d0a70317 	ldw	r2,-25588(gp)
   8e0a8:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
   8e0ac:	e0bff717 	ldw	r2,-36(fp)
   8e0b0:	1021883a 	mov	r16,r2
   8e0b4:	0023883a 	mov	r17,zero
   8e0b8:	e17ff817 	ldw	r5,-32(fp)
   8e0bc:	010003f4 	movhi	r4,15
   8e0c0:	21109004 	addi	r4,r4,16960
   8e0c4:	00814600 	call	81460 <__udivsi3>
   8e0c8:	1025883a 	mov	r18,r2
   8e0cc:	0027883a 	mov	r19,zero
   8e0d0:	900d883a 	mov	r6,r18
   8e0d4:	980f883a 	mov	r7,r19
   8e0d8:	8009883a 	mov	r4,r16
   8e0dc:	880b883a 	mov	r5,r17
   8e0e0:	008ac980 	call	8ac98 <__muldi3>
   8e0e4:	1009883a 	mov	r4,r2
   8e0e8:	180b883a 	mov	r5,r3
   8e0ec:	2005883a 	mov	r2,r4
   8e0f0:	2807883a 	mov	r3,r5
   8e0f4:	018003f4 	movhi	r6,15
   8e0f8:	31909004 	addi	r6,r6,16960
   8e0fc:	000f883a 	mov	r7,zero
   8e100:	1009883a 	mov	r4,r2
   8e104:	180b883a 	mov	r5,r3
   8e108:	008b2700 	call	8b270 <__umoddi3>
   8e10c:	1009883a 	mov	r4,r2
   8e110:	180b883a 	mov	r5,r3
   8e114:	2005883a 	mov	r2,r4
   8e118:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
   8e11c:	a085883a 	add	r2,r20,r2
   8e120:	1007883a 	mov	r3,r2
   8e124:	e0bff917 	ldw	r2,-28(fp)
   8e128:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   8e12c:	00001406 	br	8e180 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
   8e130:	e0bff917 	ldw	r2,-28(fp)
   8e134:	10800017 	ldw	r2,0(r2)
   8e138:	00800516 	blt	zero,r2,8e150 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
   8e13c:	e0bff917 	ldw	r2,-28(fp)
   8e140:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
   8e144:	e0bff917 	ldw	r2,-28(fp)
   8e148:	10000115 	stw	zero,4(r2)
          break;
   8e14c:	00000f06 	br	8e18c <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
   8e150:	e0bff917 	ldw	r2,-28(fp)
   8e154:	10800017 	ldw	r2,0(r2)
   8e158:	10ffffc4 	addi	r3,r2,-1
   8e15c:	e0bff917 	ldw	r2,-28(fp)
   8e160:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
   8e164:	e0bff917 	ldw	r2,-28(fp)
   8e168:	10c00117 	ldw	r3,4(r2)
   8e16c:	008003f4 	movhi	r2,15
   8e170:	10909004 	addi	r2,r2,16960
   8e174:	1887883a 	add	r3,r3,r2
   8e178:	e0bff917 	ldw	r2,-28(fp)
   8e17c:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   8e180:	e0bff917 	ldw	r2,-28(fp)
   8e184:	10800117 	ldw	r2,4(r2)
   8e188:	103fe916 	blt	r2,zero,8e130 <__alt_data_end+0xfffc2640>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   8e18c:	00000c06 	br	8e1c0 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
   8e190:	e0bff917 	ldw	r2,-28(fp)
   8e194:	10800017 	ldw	r2,0(r2)
   8e198:	10c00044 	addi	r3,r2,1
   8e19c:	e0bff917 	ldw	r2,-28(fp)
   8e1a0:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
   8e1a4:	e0bff917 	ldw	r2,-28(fp)
   8e1a8:	10c00117 	ldw	r3,4(r2)
   8e1ac:	00bffc74 	movhi	r2,65521
   8e1b0:	10af7004 	addi	r2,r2,-16960
   8e1b4:	1887883a 	add	r3,r3,r2
   8e1b8:	e0bff917 	ldw	r2,-28(fp)
   8e1bc:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   8e1c0:	e0bff917 	ldw	r2,-28(fp)
   8e1c4:	10c00117 	ldw	r3,4(r2)
   8e1c8:	008003f4 	movhi	r2,15
   8e1cc:	10908fc4 	addi	r2,r2,16959
   8e1d0:	10ffef16 	blt	r2,r3,8e190 <__alt_data_end+0xfffc26a0>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
   8e1d4:	e0bff617 	ldw	r2,-40(fp)
   8e1d8:	10000626 	beq	r2,zero,8e1f4 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
   8e1dc:	d0e70017 	ldw	r3,-25600(gp)
   8e1e0:	e0bff617 	ldw	r2,-40(fp)
   8e1e4:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
   8e1e8:	d0e70117 	ldw	r3,-25596(gp)
   8e1ec:	e0bff617 	ldw	r2,-40(fp)
   8e1f0:	10c00115 	stw	r3,4(r2)
    }

    return 0;
   8e1f4:	0005883a 	mov	r2,zero
   8e1f8:	00000106 	br	8e200 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
   8e1fc:	00bfde84 	movi	r2,-134
}
   8e200:	e6fffb04 	addi	sp,fp,-20
   8e204:	dfc00617 	ldw	ra,24(sp)
   8e208:	df000517 	ldw	fp,20(sp)
   8e20c:	dd000417 	ldw	r20,16(sp)
   8e210:	dcc00317 	ldw	r19,12(sp)
   8e214:	dc800217 	ldw	r18,8(sp)
   8e218:	dc400117 	ldw	r17,4(sp)
   8e21c:	dc000017 	ldw	r16,0(sp)
   8e220:	dec00704 	addi	sp,sp,28
   8e224:	f800283a 	ret

0008e228 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8e228:	defff904 	addi	sp,sp,-28
   8e22c:	dfc00615 	stw	ra,24(sp)
   8e230:	df000515 	stw	fp,20(sp)
   8e234:	df000504 	addi	fp,sp,20
   8e238:	e13ffc15 	stw	r4,-16(fp)
   8e23c:	e17ffd15 	stw	r5,-12(fp)
   8e240:	e1bffe15 	stw	r6,-8(fp)
   8e244:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8e248:	e0800217 	ldw	r2,8(fp)
   8e24c:	d8800015 	stw	r2,0(sp)
   8e250:	e1ffff17 	ldw	r7,-4(fp)
   8e254:	e1bffe17 	ldw	r6,-8(fp)
   8e258:	e17ffd17 	ldw	r5,-12(fp)
   8e25c:	e13ffc17 	ldw	r4,-16(fp)
   8e260:	008e3d80 	call	8e3d8 <alt_iic_isr_register>
}  
   8e264:	e037883a 	mov	sp,fp
   8e268:	dfc00117 	ldw	ra,4(sp)
   8e26c:	df000017 	ldw	fp,0(sp)
   8e270:	dec00204 	addi	sp,sp,8
   8e274:	f800283a 	ret

0008e278 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8e278:	defff904 	addi	sp,sp,-28
   8e27c:	df000615 	stw	fp,24(sp)
   8e280:	df000604 	addi	fp,sp,24
   8e284:	e13ffe15 	stw	r4,-8(fp)
   8e288:	e17fff15 	stw	r5,-4(fp)
   8e28c:	e0bfff17 	ldw	r2,-4(fp)
   8e290:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e294:	0005303a 	rdctl	r2,status
   8e298:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e29c:	e0fffb17 	ldw	r3,-20(fp)
   8e2a0:	00bfff84 	movi	r2,-2
   8e2a4:	1884703a 	and	r2,r3,r2
   8e2a8:	1001703a 	wrctl	status,r2
  
  return context;
   8e2ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8e2b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   8e2b4:	00c00044 	movi	r3,1
   8e2b8:	e0bffa17 	ldw	r2,-24(fp)
   8e2bc:	1884983a 	sll	r2,r3,r2
   8e2c0:	1007883a 	mov	r3,r2
   8e2c4:	d0a70417 	ldw	r2,-25584(gp)
   8e2c8:	1884b03a 	or	r2,r3,r2
   8e2cc:	d0a70415 	stw	r2,-25584(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8e2d0:	d0a70417 	ldw	r2,-25584(gp)
   8e2d4:	100170fa 	wrctl	ienable,r2
   8e2d8:	e0bffc17 	ldw	r2,-16(fp)
   8e2dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e2e0:	e0bffd17 	ldw	r2,-12(fp)
   8e2e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8e2e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   8e2ec:	0001883a 	nop
}
   8e2f0:	e037883a 	mov	sp,fp
   8e2f4:	df000017 	ldw	fp,0(sp)
   8e2f8:	dec00104 	addi	sp,sp,4
   8e2fc:	f800283a 	ret

0008e300 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8e300:	defff904 	addi	sp,sp,-28
   8e304:	df000615 	stw	fp,24(sp)
   8e308:	df000604 	addi	fp,sp,24
   8e30c:	e13ffe15 	stw	r4,-8(fp)
   8e310:	e17fff15 	stw	r5,-4(fp)
   8e314:	e0bfff17 	ldw	r2,-4(fp)
   8e318:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e31c:	0005303a 	rdctl	r2,status
   8e320:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e324:	e0fffb17 	ldw	r3,-20(fp)
   8e328:	00bfff84 	movi	r2,-2
   8e32c:	1884703a 	and	r2,r3,r2
   8e330:	1001703a 	wrctl	status,r2
  
  return context;
   8e334:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8e338:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   8e33c:	00c00044 	movi	r3,1
   8e340:	e0bffa17 	ldw	r2,-24(fp)
   8e344:	1884983a 	sll	r2,r3,r2
   8e348:	0084303a 	nor	r2,zero,r2
   8e34c:	1007883a 	mov	r3,r2
   8e350:	d0a70417 	ldw	r2,-25584(gp)
   8e354:	1884703a 	and	r2,r3,r2
   8e358:	d0a70415 	stw	r2,-25584(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8e35c:	d0a70417 	ldw	r2,-25584(gp)
   8e360:	100170fa 	wrctl	ienable,r2
   8e364:	e0bffc17 	ldw	r2,-16(fp)
   8e368:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e36c:	e0bffd17 	ldw	r2,-12(fp)
   8e370:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8e374:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   8e378:	0001883a 	nop
}
   8e37c:	e037883a 	mov	sp,fp
   8e380:	df000017 	ldw	fp,0(sp)
   8e384:	dec00104 	addi	sp,sp,4
   8e388:	f800283a 	ret

0008e38c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8e38c:	defffc04 	addi	sp,sp,-16
   8e390:	df000315 	stw	fp,12(sp)
   8e394:	df000304 	addi	fp,sp,12
   8e398:	e13ffe15 	stw	r4,-8(fp)
   8e39c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8e3a0:	000530fa 	rdctl	r2,ienable
   8e3a4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8e3a8:	00c00044 	movi	r3,1
   8e3ac:	e0bfff17 	ldw	r2,-4(fp)
   8e3b0:	1884983a 	sll	r2,r3,r2
   8e3b4:	1007883a 	mov	r3,r2
   8e3b8:	e0bffd17 	ldw	r2,-12(fp)
   8e3bc:	1884703a 	and	r2,r3,r2
   8e3c0:	1004c03a 	cmpne	r2,r2,zero
   8e3c4:	10803fcc 	andi	r2,r2,255
}
   8e3c8:	e037883a 	mov	sp,fp
   8e3cc:	df000017 	ldw	fp,0(sp)
   8e3d0:	dec00104 	addi	sp,sp,4
   8e3d4:	f800283a 	ret

0008e3d8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8e3d8:	defff504 	addi	sp,sp,-44
   8e3dc:	dfc00a15 	stw	ra,40(sp)
   8e3e0:	df000915 	stw	fp,36(sp)
   8e3e4:	df000904 	addi	fp,sp,36
   8e3e8:	e13ffc15 	stw	r4,-16(fp)
   8e3ec:	e17ffd15 	stw	r5,-12(fp)
   8e3f0:	e1bffe15 	stw	r6,-8(fp)
   8e3f4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   8e3f8:	00bffa84 	movi	r2,-22
   8e3fc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8e400:	e0bffd17 	ldw	r2,-12(fp)
   8e404:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8e408:	e0bff817 	ldw	r2,-32(fp)
   8e40c:	10800808 	cmpgei	r2,r2,32
   8e410:	1000271e 	bne	r2,zero,8e4b0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e414:	0005303a 	rdctl	r2,status
   8e418:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e41c:	e0fffb17 	ldw	r3,-20(fp)
   8e420:	00bfff84 	movi	r2,-2
   8e424:	1884703a 	and	r2,r3,r2
   8e428:	1001703a 	wrctl	status,r2
  
  return context;
   8e42c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8e430:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   8e434:	00800274 	movhi	r2,9
   8e438:	10917b04 	addi	r2,r2,17900
   8e43c:	e0fff817 	ldw	r3,-32(fp)
   8e440:	180690fa 	slli	r3,r3,3
   8e444:	10c5883a 	add	r2,r2,r3
   8e448:	e0fffe17 	ldw	r3,-8(fp)
   8e44c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   8e450:	00800274 	movhi	r2,9
   8e454:	10917b04 	addi	r2,r2,17900
   8e458:	e0fff817 	ldw	r3,-32(fp)
   8e45c:	180690fa 	slli	r3,r3,3
   8e460:	10c5883a 	add	r2,r2,r3
   8e464:	10800104 	addi	r2,r2,4
   8e468:	e0ffff17 	ldw	r3,-4(fp)
   8e46c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8e470:	e0bffe17 	ldw	r2,-8(fp)
   8e474:	10000526 	beq	r2,zero,8e48c <alt_iic_isr_register+0xb4>
   8e478:	e0bff817 	ldw	r2,-32(fp)
   8e47c:	100b883a 	mov	r5,r2
   8e480:	e13ffc17 	ldw	r4,-16(fp)
   8e484:	008e2780 	call	8e278 <alt_ic_irq_enable>
   8e488:	00000406 	br	8e49c <alt_iic_isr_register+0xc4>
   8e48c:	e0bff817 	ldw	r2,-32(fp)
   8e490:	100b883a 	mov	r5,r2
   8e494:	e13ffc17 	ldw	r4,-16(fp)
   8e498:	008e3000 	call	8e300 <alt_ic_irq_disable>
   8e49c:	e0bff715 	stw	r2,-36(fp)
   8e4a0:	e0bffa17 	ldw	r2,-24(fp)
   8e4a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e4a8:	e0bff917 	ldw	r2,-28(fp)
   8e4ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8e4b0:	e0bff717 	ldw	r2,-36(fp)
}
   8e4b4:	e037883a 	mov	sp,fp
   8e4b8:	dfc00117 	ldw	ra,4(sp)
   8e4bc:	df000017 	ldw	fp,0(sp)
   8e4c0:	dec00204 	addi	sp,sp,8
   8e4c4:	f800283a 	ret

0008e4c8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   8e4c8:	defff004 	addi	sp,sp,-64
   8e4cc:	df000f15 	stw	fp,60(sp)
   8e4d0:	df000f04 	addi	fp,sp,60
   8e4d4:	e13ffd15 	stw	r4,-12(fp)
   8e4d8:	e17ffe15 	stw	r5,-8(fp)
   8e4dc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   8e4e0:	00bffa84 	movi	r2,-22
   8e4e4:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8e4e8:	e0bffd17 	ldw	r2,-12(fp)
   8e4ec:	10800828 	cmpgeui	r2,r2,32
   8e4f0:	1000501e 	bne	r2,zero,8e634 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e4f4:	0005303a 	rdctl	r2,status
   8e4f8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e4fc:	e0fff617 	ldw	r3,-40(fp)
   8e500:	00bfff84 	movi	r2,-2
   8e504:	1884703a 	and	r2,r3,r2
   8e508:	1001703a 	wrctl	status,r2
  
  return context;
   8e50c:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   8e510:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   8e514:	00800274 	movhi	r2,9
   8e518:	10917b04 	addi	r2,r2,17900
   8e51c:	e0fffd17 	ldw	r3,-12(fp)
   8e520:	180690fa 	slli	r3,r3,3
   8e524:	10c5883a 	add	r2,r2,r3
   8e528:	e0ffff17 	ldw	r3,-4(fp)
   8e52c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   8e530:	00800274 	movhi	r2,9
   8e534:	10917b04 	addi	r2,r2,17900
   8e538:	e0fffd17 	ldw	r3,-12(fp)
   8e53c:	180690fa 	slli	r3,r3,3
   8e540:	10c5883a 	add	r2,r2,r3
   8e544:	10800104 	addi	r2,r2,4
   8e548:	e0fffe17 	ldw	r3,-8(fp)
   8e54c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   8e550:	e0bfff17 	ldw	r2,-4(fp)
   8e554:	10001926 	beq	r2,zero,8e5bc <alt_irq_register+0xf4>
   8e558:	e0bffd17 	ldw	r2,-12(fp)
   8e55c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e560:	0005303a 	rdctl	r2,status
   8e564:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e568:	e0fff717 	ldw	r3,-36(fp)
   8e56c:	00bfff84 	movi	r2,-2
   8e570:	1884703a 	and	r2,r3,r2
   8e574:	1001703a 	wrctl	status,r2
  
  return context;
   8e578:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8e57c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   8e580:	00c00044 	movi	r3,1
   8e584:	e0bff217 	ldw	r2,-56(fp)
   8e588:	1884983a 	sll	r2,r3,r2
   8e58c:	1007883a 	mov	r3,r2
   8e590:	d0a70417 	ldw	r2,-25584(gp)
   8e594:	1884b03a 	or	r2,r3,r2
   8e598:	d0a70415 	stw	r2,-25584(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8e59c:	d0a70417 	ldw	r2,-25584(gp)
   8e5a0:	100170fa 	wrctl	ienable,r2
   8e5a4:	e0bff817 	ldw	r2,-32(fp)
   8e5a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e5ac:	e0bff917 	ldw	r2,-28(fp)
   8e5b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8e5b4:	0005883a 	mov	r2,zero
   8e5b8:	00001906 	br	8e620 <alt_irq_register+0x158>
   8e5bc:	e0bffd17 	ldw	r2,-12(fp)
   8e5c0:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e5c4:	0005303a 	rdctl	r2,status
   8e5c8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e5cc:	e0fffa17 	ldw	r3,-24(fp)
   8e5d0:	00bfff84 	movi	r2,-2
   8e5d4:	1884703a 	and	r2,r3,r2
   8e5d8:	1001703a 	wrctl	status,r2
  
  return context;
   8e5dc:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8e5e0:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   8e5e4:	00c00044 	movi	r3,1
   8e5e8:	e0bff417 	ldw	r2,-48(fp)
   8e5ec:	1884983a 	sll	r2,r3,r2
   8e5f0:	0084303a 	nor	r2,zero,r2
   8e5f4:	1007883a 	mov	r3,r2
   8e5f8:	d0a70417 	ldw	r2,-25584(gp)
   8e5fc:	1884703a 	and	r2,r3,r2
   8e600:	d0a70415 	stw	r2,-25584(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8e604:	d0a70417 	ldw	r2,-25584(gp)
   8e608:	100170fa 	wrctl	ienable,r2
   8e60c:	e0bffb17 	ldw	r2,-20(fp)
   8e610:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e614:	e0bffc17 	ldw	r2,-16(fp)
   8e618:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8e61c:	0005883a 	mov	r2,zero
   8e620:	e0bff115 	stw	r2,-60(fp)
   8e624:	e0bff317 	ldw	r2,-52(fp)
   8e628:	e0bff515 	stw	r2,-44(fp)
   8e62c:	e0bff517 	ldw	r2,-44(fp)
   8e630:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   8e634:	e0bff117 	ldw	r2,-60(fp)
}
   8e638:	e037883a 	mov	sp,fp
   8e63c:	df000017 	ldw	fp,0(sp)
   8e640:	dec00104 	addi	sp,sp,4
   8e644:	f800283a 	ret

0008e648 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e648:	defffe04 	addi	sp,sp,-8
   8e64c:	dfc00115 	stw	ra,4(sp)
   8e650:	df000015 	stw	fp,0(sp)
   8e654:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e658:	d0a00b17 	ldw	r2,-32724(gp)
   8e65c:	10000326 	beq	r2,zero,8e66c <alt_get_errno+0x24>
   8e660:	d0a00b17 	ldw	r2,-32724(gp)
   8e664:	103ee83a 	callr	r2
   8e668:	00000106 	br	8e670 <alt_get_errno+0x28>
   8e66c:	d0a6f904 	addi	r2,gp,-25628
}
   8e670:	e037883a 	mov	sp,fp
   8e674:	dfc00117 	ldw	ra,4(sp)
   8e678:	df000017 	ldw	fp,0(sp)
   8e67c:	dec00204 	addi	sp,sp,8
   8e680:	f800283a 	ret

0008e684 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8e684:	deffed04 	addi	sp,sp,-76
   8e688:	dfc01215 	stw	ra,72(sp)
   8e68c:	df001115 	stw	fp,68(sp)
   8e690:	df001104 	addi	fp,sp,68
   8e694:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e698:	e0bfff17 	ldw	r2,-4(fp)
   8e69c:	10000616 	blt	r2,zero,8e6b8 <isatty+0x34>
   8e6a0:	e0bfff17 	ldw	r2,-4(fp)
   8e6a4:	10c00324 	muli	r3,r2,12
   8e6a8:	00800274 	movhi	r2,9
   8e6ac:	1085c104 	addi	r2,r2,5892
   8e6b0:	1885883a 	add	r2,r3,r2
   8e6b4:	00000106 	br	8e6bc <isatty+0x38>
   8e6b8:	0005883a 	mov	r2,zero
   8e6bc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   8e6c0:	e0bfef17 	ldw	r2,-68(fp)
   8e6c4:	10000e26 	beq	r2,zero,8e700 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8e6c8:	e0bfef17 	ldw	r2,-68(fp)
   8e6cc:	10800017 	ldw	r2,0(r2)
   8e6d0:	10800817 	ldw	r2,32(r2)
   8e6d4:	1000021e 	bne	r2,zero,8e6e0 <isatty+0x5c>
    {
      return 1;
   8e6d8:	00800044 	movi	r2,1
   8e6dc:	00000d06 	br	8e714 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8e6e0:	e0bff004 	addi	r2,fp,-64
   8e6e4:	100b883a 	mov	r5,r2
   8e6e8:	e13fff17 	ldw	r4,-4(fp)
   8e6ec:	008df840 	call	8df84 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8e6f0:	e0bff117 	ldw	r2,-60(fp)
   8e6f4:	10880020 	cmpeqi	r2,r2,8192
   8e6f8:	10803fcc 	andi	r2,r2,255
   8e6fc:	00000506 	br	8e714 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e700:	008e6480 	call	8e648 <alt_get_errno>
   8e704:	1007883a 	mov	r3,r2
   8e708:	00801444 	movi	r2,81
   8e70c:	18800015 	stw	r2,0(r3)
    return 0;
   8e710:	0005883a 	mov	r2,zero
  }
}
   8e714:	e037883a 	mov	sp,fp
   8e718:	dfc00117 	ldw	ra,4(sp)
   8e71c:	df000017 	ldw	fp,0(sp)
   8e720:	dec00204 	addi	sp,sp,8
   8e724:	f800283a 	ret

0008e728 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8e728:	defffc04 	addi	sp,sp,-16
   8e72c:	df000315 	stw	fp,12(sp)
   8e730:	df000304 	addi	fp,sp,12
   8e734:	e13ffd15 	stw	r4,-12(fp)
   8e738:	e17ffe15 	stw	r5,-8(fp)
   8e73c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8e740:	e0fffe17 	ldw	r3,-8(fp)
   8e744:	e0bffd17 	ldw	r2,-12(fp)
   8e748:	18800c26 	beq	r3,r2,8e77c <alt_load_section+0x54>
  {
    while( to != end )
   8e74c:	00000806 	br	8e770 <alt_load_section+0x48>
    {
      *to++ = *from++;
   8e750:	e0bffe17 	ldw	r2,-8(fp)
   8e754:	10c00104 	addi	r3,r2,4
   8e758:	e0fffe15 	stw	r3,-8(fp)
   8e75c:	e0fffd17 	ldw	r3,-12(fp)
   8e760:	19000104 	addi	r4,r3,4
   8e764:	e13ffd15 	stw	r4,-12(fp)
   8e768:	18c00017 	ldw	r3,0(r3)
   8e76c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8e770:	e0fffe17 	ldw	r3,-8(fp)
   8e774:	e0bfff17 	ldw	r2,-4(fp)
   8e778:	18bff51e 	bne	r3,r2,8e750 <__alt_data_end+0xfffc2c60>
    {
      *to++ = *from++;
    }
  }
}
   8e77c:	0001883a 	nop
   8e780:	e037883a 	mov	sp,fp
   8e784:	df000017 	ldw	fp,0(sp)
   8e788:	dec00104 	addi	sp,sp,4
   8e78c:	f800283a 	ret

0008e790 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8e790:	defffe04 	addi	sp,sp,-8
   8e794:	dfc00115 	stw	ra,4(sp)
   8e798:	df000015 	stw	fp,0(sp)
   8e79c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8e7a0:	01800274 	movhi	r6,9
   8e7a4:	318a4904 	addi	r6,r6,10532
   8e7a8:	01400274 	movhi	r5,9
   8e7ac:	29436104 	addi	r5,r5,3460
   8e7b0:	01000274 	movhi	r4,9
   8e7b4:	210a4904 	addi	r4,r4,10532
   8e7b8:	008e7280 	call	8e728 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8e7bc:	01800234 	movhi	r6,8
   8e7c0:	31809104 	addi	r6,r6,580
   8e7c4:	01400234 	movhi	r5,8
   8e7c8:	29400804 	addi	r5,r5,32
   8e7cc:	01000234 	movhi	r4,8
   8e7d0:	21000804 	addi	r4,r4,32
   8e7d4:	008e7280 	call	8e728 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8e7d8:	01800274 	movhi	r6,9
   8e7dc:	31836104 	addi	r6,r6,3460
   8e7e0:	01400274 	movhi	r5,9
   8e7e4:	29424d04 	addi	r5,r5,2356
   8e7e8:	01000274 	movhi	r4,9
   8e7ec:	21024d04 	addi	r4,r4,2356
   8e7f0:	008e7280 	call	8e728 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8e7f4:	008fc640 	call	8fc64 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8e7f8:	008fe4c0 	call	8fe4c <alt_icache_flush_all>
}
   8e7fc:	0001883a 	nop
   8e800:	e037883a 	mov	sp,fp
   8e804:	dfc00117 	ldw	ra,4(sp)
   8e808:	df000017 	ldw	fp,0(sp)
   8e80c:	dec00204 	addi	sp,sp,8
   8e810:	f800283a 	ret

0008e814 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e814:	defffe04 	addi	sp,sp,-8
   8e818:	dfc00115 	stw	ra,4(sp)
   8e81c:	df000015 	stw	fp,0(sp)
   8e820:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e824:	d0a00b17 	ldw	r2,-32724(gp)
   8e828:	10000326 	beq	r2,zero,8e838 <alt_get_errno+0x24>
   8e82c:	d0a00b17 	ldw	r2,-32724(gp)
   8e830:	103ee83a 	callr	r2
   8e834:	00000106 	br	8e83c <alt_get_errno+0x28>
   8e838:	d0a6f904 	addi	r2,gp,-25628
}
   8e83c:	e037883a 	mov	sp,fp
   8e840:	dfc00117 	ldw	ra,4(sp)
   8e844:	df000017 	ldw	fp,0(sp)
   8e848:	dec00204 	addi	sp,sp,8
   8e84c:	f800283a 	ret

0008e850 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8e850:	defff904 	addi	sp,sp,-28
   8e854:	dfc00615 	stw	ra,24(sp)
   8e858:	df000515 	stw	fp,20(sp)
   8e85c:	df000504 	addi	fp,sp,20
   8e860:	e13ffd15 	stw	r4,-12(fp)
   8e864:	e17ffe15 	stw	r5,-8(fp)
   8e868:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   8e86c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e870:	e0bffd17 	ldw	r2,-12(fp)
   8e874:	10000616 	blt	r2,zero,8e890 <lseek+0x40>
   8e878:	e0bffd17 	ldw	r2,-12(fp)
   8e87c:	10c00324 	muli	r3,r2,12
   8e880:	00800274 	movhi	r2,9
   8e884:	1085c104 	addi	r2,r2,5892
   8e888:	1885883a 	add	r2,r3,r2
   8e88c:	00000106 	br	8e894 <lseek+0x44>
   8e890:	0005883a 	mov	r2,zero
   8e894:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   8e898:	e0bffc17 	ldw	r2,-16(fp)
   8e89c:	10001026 	beq	r2,zero,8e8e0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8e8a0:	e0bffc17 	ldw	r2,-16(fp)
   8e8a4:	10800017 	ldw	r2,0(r2)
   8e8a8:	10800717 	ldw	r2,28(r2)
   8e8ac:	10000926 	beq	r2,zero,8e8d4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8e8b0:	e0bffc17 	ldw	r2,-16(fp)
   8e8b4:	10800017 	ldw	r2,0(r2)
   8e8b8:	10800717 	ldw	r2,28(r2)
   8e8bc:	e1bfff17 	ldw	r6,-4(fp)
   8e8c0:	e17ffe17 	ldw	r5,-8(fp)
   8e8c4:	e13ffc17 	ldw	r4,-16(fp)
   8e8c8:	103ee83a 	callr	r2
   8e8cc:	e0bffb15 	stw	r2,-20(fp)
   8e8d0:	00000506 	br	8e8e8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   8e8d4:	00bfde84 	movi	r2,-134
   8e8d8:	e0bffb15 	stw	r2,-20(fp)
   8e8dc:	00000206 	br	8e8e8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   8e8e0:	00bfebc4 	movi	r2,-81
   8e8e4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   8e8e8:	e0bffb17 	ldw	r2,-20(fp)
   8e8ec:	1000070e 	bge	r2,zero,8e90c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   8e8f0:	008e8140 	call	8e814 <alt_get_errno>
   8e8f4:	1007883a 	mov	r3,r2
   8e8f8:	e0bffb17 	ldw	r2,-20(fp)
   8e8fc:	0085c83a 	sub	r2,zero,r2
   8e900:	18800015 	stw	r2,0(r3)
    rc = -1;
   8e904:	00bfffc4 	movi	r2,-1
   8e908:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   8e90c:	e0bffb17 	ldw	r2,-20(fp)
}
   8e910:	e037883a 	mov	sp,fp
   8e914:	dfc00117 	ldw	ra,4(sp)
   8e918:	df000017 	ldw	fp,0(sp)
   8e91c:	dec00204 	addi	sp,sp,8
   8e920:	f800283a 	ret

0008e924 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8e924:	defffd04 	addi	sp,sp,-12
   8e928:	dfc00215 	stw	ra,8(sp)
   8e92c:	df000115 	stw	fp,4(sp)
   8e930:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8e934:	0009883a 	mov	r4,zero
   8e938:	008ef400 	call	8ef40 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8e93c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8e940:	008ef780 	call	8ef78 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8e944:	01800274 	movhi	r6,9
   8e948:	31835904 	addi	r6,r6,3428
   8e94c:	01400274 	movhi	r5,9
   8e950:	29435904 	addi	r5,r5,3428
   8e954:	01000274 	movhi	r4,9
   8e958:	21035904 	addi	r4,r4,3428
   8e95c:	008ffe00 	call	8ffe0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8e960:	008fd8c0 	call	8fd8c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8e964:	01000274 	movhi	r4,9
   8e968:	213f7b04 	addi	r4,r4,-532
   8e96c:	00905a00 	call	905a0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8e970:	d0a70517 	ldw	r2,-25580(gp)
   8e974:	d0e70617 	ldw	r3,-25576(gp)
   8e978:	d1270717 	ldw	r4,-25572(gp)
   8e97c:	200d883a 	mov	r6,r4
   8e980:	180b883a 	mov	r5,r3
   8e984:	1009883a 	mov	r4,r2
   8e988:	00808040 	call	80804 <main>
   8e98c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8e990:	01000044 	movi	r4,1
   8e994:	008de4c0 	call	8de4c <close>
  exit (result);
   8e998:	e13fff17 	ldw	r4,-4(fp)
   8e99c:	00905b40 	call	905b4 <exit>

0008e9a0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8e9a0:	defffe04 	addi	sp,sp,-8
   8e9a4:	df000115 	stw	fp,4(sp)
   8e9a8:	df000104 	addi	fp,sp,4
   8e9ac:	e13fff15 	stw	r4,-4(fp)
}
   8e9b0:	0001883a 	nop
   8e9b4:	e037883a 	mov	sp,fp
   8e9b8:	df000017 	ldw	fp,0(sp)
   8e9bc:	dec00104 	addi	sp,sp,4
   8e9c0:	f800283a 	ret

0008e9c4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8e9c4:	defffe04 	addi	sp,sp,-8
   8e9c8:	df000115 	stw	fp,4(sp)
   8e9cc:	df000104 	addi	fp,sp,4
   8e9d0:	e13fff15 	stw	r4,-4(fp)
}
   8e9d4:	0001883a 	nop
   8e9d8:	e037883a 	mov	sp,fp
   8e9dc:	df000017 	ldw	fp,0(sp)
   8e9e0:	dec00104 	addi	sp,sp,4
   8e9e4:	f800283a 	ret

0008e9e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8e9e8:	defffe04 	addi	sp,sp,-8
   8e9ec:	dfc00115 	stw	ra,4(sp)
   8e9f0:	df000015 	stw	fp,0(sp)
   8e9f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8e9f8:	d0a00b17 	ldw	r2,-32724(gp)
   8e9fc:	10000326 	beq	r2,zero,8ea0c <alt_get_errno+0x24>
   8ea00:	d0a00b17 	ldw	r2,-32724(gp)
   8ea04:	103ee83a 	callr	r2
   8ea08:	00000106 	br	8ea10 <alt_get_errno+0x28>
   8ea0c:	d0a6f904 	addi	r2,gp,-25628
}
   8ea10:	e037883a 	mov	sp,fp
   8ea14:	dfc00117 	ldw	ra,4(sp)
   8ea18:	df000017 	ldw	fp,0(sp)
   8ea1c:	dec00204 	addi	sp,sp,8
   8ea20:	f800283a 	ret

0008ea24 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8ea24:	defff904 	addi	sp,sp,-28
   8ea28:	dfc00615 	stw	ra,24(sp)
   8ea2c:	df000515 	stw	fp,20(sp)
   8ea30:	df000504 	addi	fp,sp,20
   8ea34:	e13ffd15 	stw	r4,-12(fp)
   8ea38:	e17ffe15 	stw	r5,-8(fp)
   8ea3c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ea40:	e0bffd17 	ldw	r2,-12(fp)
   8ea44:	10000616 	blt	r2,zero,8ea60 <read+0x3c>
   8ea48:	e0bffd17 	ldw	r2,-12(fp)
   8ea4c:	10c00324 	muli	r3,r2,12
   8ea50:	00800274 	movhi	r2,9
   8ea54:	1085c104 	addi	r2,r2,5892
   8ea58:	1885883a 	add	r2,r3,r2
   8ea5c:	00000106 	br	8ea64 <read+0x40>
   8ea60:	0005883a 	mov	r2,zero
   8ea64:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8ea68:	e0bffb17 	ldw	r2,-20(fp)
   8ea6c:	10002226 	beq	r2,zero,8eaf8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8ea70:	e0bffb17 	ldw	r2,-20(fp)
   8ea74:	10800217 	ldw	r2,8(r2)
   8ea78:	108000cc 	andi	r2,r2,3
   8ea7c:	10800060 	cmpeqi	r2,r2,1
   8ea80:	1000181e 	bne	r2,zero,8eae4 <read+0xc0>
        (fd->dev->read))
   8ea84:	e0bffb17 	ldw	r2,-20(fp)
   8ea88:	10800017 	ldw	r2,0(r2)
   8ea8c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8ea90:	10001426 	beq	r2,zero,8eae4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8ea94:	e0bffb17 	ldw	r2,-20(fp)
   8ea98:	10800017 	ldw	r2,0(r2)
   8ea9c:	10800517 	ldw	r2,20(r2)
   8eaa0:	e0ffff17 	ldw	r3,-4(fp)
   8eaa4:	180d883a 	mov	r6,r3
   8eaa8:	e17ffe17 	ldw	r5,-8(fp)
   8eaac:	e13ffb17 	ldw	r4,-20(fp)
   8eab0:	103ee83a 	callr	r2
   8eab4:	e0bffc15 	stw	r2,-16(fp)
   8eab8:	e0bffc17 	ldw	r2,-16(fp)
   8eabc:	1000070e 	bge	r2,zero,8eadc <read+0xb8>
        {
          ALT_ERRNO = -rval;
   8eac0:	008e9e80 	call	8e9e8 <alt_get_errno>
   8eac4:	1007883a 	mov	r3,r2
   8eac8:	e0bffc17 	ldw	r2,-16(fp)
   8eacc:	0085c83a 	sub	r2,zero,r2
   8ead0:	18800015 	stw	r2,0(r3)
          return -1;
   8ead4:	00bfffc4 	movi	r2,-1
   8ead8:	00000c06 	br	8eb0c <read+0xe8>
        }
        return rval;
   8eadc:	e0bffc17 	ldw	r2,-16(fp)
   8eae0:	00000a06 	br	8eb0c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   8eae4:	008e9e80 	call	8e9e8 <alt_get_errno>
   8eae8:	1007883a 	mov	r3,r2
   8eaec:	00800344 	movi	r2,13
   8eaf0:	18800015 	stw	r2,0(r3)
   8eaf4:	00000406 	br	8eb08 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8eaf8:	008e9e80 	call	8e9e8 <alt_get_errno>
   8eafc:	1007883a 	mov	r3,r2
   8eb00:	00801444 	movi	r2,81
   8eb04:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8eb08:	00bfffc4 	movi	r2,-1
}
   8eb0c:	e037883a 	mov	sp,fp
   8eb10:	dfc00117 	ldw	ra,4(sp)
   8eb14:	df000017 	ldw	fp,0(sp)
   8eb18:	dec00204 	addi	sp,sp,8
   8eb1c:	f800283a 	ret

0008eb20 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8eb20:	defffe04 	addi	sp,sp,-8
   8eb24:	df000115 	stw	fp,4(sp)
   8eb28:	df000104 	addi	fp,sp,4
   8eb2c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8eb30:	e0bfff17 	ldw	r2,-4(fp)
   8eb34:	108000d0 	cmplti	r2,r2,3
   8eb38:	10000d1e 	bne	r2,zero,8eb70 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   8eb3c:	00800274 	movhi	r2,9
   8eb40:	1085c104 	addi	r2,r2,5892
   8eb44:	e0ffff17 	ldw	r3,-4(fp)
   8eb48:	18c00324 	muli	r3,r3,12
   8eb4c:	10c5883a 	add	r2,r2,r3
   8eb50:	10800204 	addi	r2,r2,8
   8eb54:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8eb58:	00800274 	movhi	r2,9
   8eb5c:	1085c104 	addi	r2,r2,5892
   8eb60:	e0ffff17 	ldw	r3,-4(fp)
   8eb64:	18c00324 	muli	r3,r3,12
   8eb68:	10c5883a 	add	r2,r2,r3
   8eb6c:	10000015 	stw	zero,0(r2)
  }
}
   8eb70:	0001883a 	nop
   8eb74:	e037883a 	mov	sp,fp
   8eb78:	df000017 	ldw	fp,0(sp)
   8eb7c:	dec00104 	addi	sp,sp,4
   8eb80:	f800283a 	ret

0008eb84 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8eb84:	defff904 	addi	sp,sp,-28
   8eb88:	df000615 	stw	fp,24(sp)
   8eb8c:	df000604 	addi	fp,sp,24
   8eb90:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8eb94:	0005303a 	rdctl	r2,status
   8eb98:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8eb9c:	e0fffe17 	ldw	r3,-8(fp)
   8eba0:	00bfff84 	movi	r2,-2
   8eba4:	1884703a 	and	r2,r3,r2
   8eba8:	1001703a 	wrctl	status,r2
  
  return context;
   8ebac:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8ebb0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8ebb4:	d0a00d17 	ldw	r2,-32716(gp)
   8ebb8:	10c000c4 	addi	r3,r2,3
   8ebbc:	00bfff04 	movi	r2,-4
   8ebc0:	1884703a 	and	r2,r3,r2
   8ebc4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8ebc8:	d0e00d17 	ldw	r3,-32716(gp)
   8ebcc:	e0bfff17 	ldw	r2,-4(fp)
   8ebd0:	1887883a 	add	r3,r3,r2
   8ebd4:	00800374 	movhi	r2,13
   8ebd8:	10aebc04 	addi	r2,r2,-17680
   8ebdc:	10c0062e 	bgeu	r2,r3,8ebf8 <sbrk+0x74>
   8ebe0:	e0bffb17 	ldw	r2,-20(fp)
   8ebe4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ebe8:	e0bffa17 	ldw	r2,-24(fp)
   8ebec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8ebf0:	00bfffc4 	movi	r2,-1
   8ebf4:	00000b06 	br	8ec24 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   8ebf8:	d0a00d17 	ldw	r2,-32716(gp)
   8ebfc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   8ec00:	d0e00d17 	ldw	r3,-32716(gp)
   8ec04:	e0bfff17 	ldw	r2,-4(fp)
   8ec08:	1885883a 	add	r2,r3,r2
   8ec0c:	d0a00d15 	stw	r2,-32716(gp)
   8ec10:	e0bffb17 	ldw	r2,-20(fp)
   8ec14:	e0bffc15 	stw	r2,-16(fp)
   8ec18:	e0bffc17 	ldw	r2,-16(fp)
   8ec1c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8ec20:	e0bffd17 	ldw	r2,-12(fp)
} 
   8ec24:	e037883a 	mov	sp,fp
   8ec28:	df000017 	ldw	fp,0(sp)
   8ec2c:	dec00104 	addi	sp,sp,4
   8ec30:	f800283a 	ret

0008ec34 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8ec34:	defffa04 	addi	sp,sp,-24
   8ec38:	df000515 	stw	fp,20(sp)
   8ec3c:	df000504 	addi	fp,sp,20
   8ec40:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ec44:	0005303a 	rdctl	r2,status
   8ec48:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ec4c:	e0fffc17 	ldw	r3,-16(fp)
   8ec50:	00bfff84 	movi	r2,-2
   8ec54:	1884703a 	and	r2,r3,r2
   8ec58:	1001703a 	wrctl	status,r2
  
  return context;
   8ec5c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8ec60:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   8ec64:	e0bfff17 	ldw	r2,-4(fp)
   8ec68:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8ec6c:	e0bffd17 	ldw	r2,-12(fp)
   8ec70:	10800017 	ldw	r2,0(r2)
   8ec74:	e0fffd17 	ldw	r3,-12(fp)
   8ec78:	18c00117 	ldw	r3,4(r3)
   8ec7c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   8ec80:	e0bffd17 	ldw	r2,-12(fp)
   8ec84:	10800117 	ldw	r2,4(r2)
   8ec88:	e0fffd17 	ldw	r3,-12(fp)
   8ec8c:	18c00017 	ldw	r3,0(r3)
   8ec90:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8ec94:	e0bffd17 	ldw	r2,-12(fp)
   8ec98:	e0fffd17 	ldw	r3,-12(fp)
   8ec9c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   8eca0:	e0bffd17 	ldw	r2,-12(fp)
   8eca4:	e0fffd17 	ldw	r3,-12(fp)
   8eca8:	10c00015 	stw	r3,0(r2)
   8ecac:	e0bffb17 	ldw	r2,-20(fp)
   8ecb0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ecb4:	e0bffe17 	ldw	r2,-8(fp)
   8ecb8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8ecbc:	0001883a 	nop
   8ecc0:	e037883a 	mov	sp,fp
   8ecc4:	df000017 	ldw	fp,0(sp)
   8ecc8:	dec00104 	addi	sp,sp,4
   8eccc:	f800283a 	ret

0008ecd0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8ecd0:	defffb04 	addi	sp,sp,-20
   8ecd4:	dfc00415 	stw	ra,16(sp)
   8ecd8:	df000315 	stw	fp,12(sp)
   8ecdc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8ece0:	d0a00e17 	ldw	r2,-32712(gp)
   8ece4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8ece8:	d0a70917 	ldw	r2,-25564(gp)
   8ecec:	10800044 	addi	r2,r2,1
   8ecf0:	d0a70915 	stw	r2,-25564(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8ecf4:	00002e06 	br	8edb0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   8ecf8:	e0bffd17 	ldw	r2,-12(fp)
   8ecfc:	10800017 	ldw	r2,0(r2)
   8ed00:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8ed04:	e0bffd17 	ldw	r2,-12(fp)
   8ed08:	10800403 	ldbu	r2,16(r2)
   8ed0c:	10803fcc 	andi	r2,r2,255
   8ed10:	10000426 	beq	r2,zero,8ed24 <alt_tick+0x54>
   8ed14:	d0a70917 	ldw	r2,-25564(gp)
   8ed18:	1000021e 	bne	r2,zero,8ed24 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   8ed1c:	e0bffd17 	ldw	r2,-12(fp)
   8ed20:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8ed24:	e0bffd17 	ldw	r2,-12(fp)
   8ed28:	10800217 	ldw	r2,8(r2)
   8ed2c:	d0e70917 	ldw	r3,-25564(gp)
   8ed30:	18801d36 	bltu	r3,r2,8eda8 <alt_tick+0xd8>
   8ed34:	e0bffd17 	ldw	r2,-12(fp)
   8ed38:	10800403 	ldbu	r2,16(r2)
   8ed3c:	10803fcc 	andi	r2,r2,255
   8ed40:	1000191e 	bne	r2,zero,8eda8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   8ed44:	e0bffd17 	ldw	r2,-12(fp)
   8ed48:	10800317 	ldw	r2,12(r2)
   8ed4c:	e0fffd17 	ldw	r3,-12(fp)
   8ed50:	18c00517 	ldw	r3,20(r3)
   8ed54:	1809883a 	mov	r4,r3
   8ed58:	103ee83a 	callr	r2
   8ed5c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8ed60:	e0bfff17 	ldw	r2,-4(fp)
   8ed64:	1000031e 	bne	r2,zero,8ed74 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   8ed68:	e13ffd17 	ldw	r4,-12(fp)
   8ed6c:	008ec340 	call	8ec34 <alt_alarm_stop>
   8ed70:	00000d06 	br	8eda8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   8ed74:	e0bffd17 	ldw	r2,-12(fp)
   8ed78:	10c00217 	ldw	r3,8(r2)
   8ed7c:	e0bfff17 	ldw	r2,-4(fp)
   8ed80:	1887883a 	add	r3,r3,r2
   8ed84:	e0bffd17 	ldw	r2,-12(fp)
   8ed88:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8ed8c:	e0bffd17 	ldw	r2,-12(fp)
   8ed90:	10c00217 	ldw	r3,8(r2)
   8ed94:	d0a70917 	ldw	r2,-25564(gp)
   8ed98:	1880032e 	bgeu	r3,r2,8eda8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   8ed9c:	e0bffd17 	ldw	r2,-12(fp)
   8eda0:	00c00044 	movi	r3,1
   8eda4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   8eda8:	e0bffe17 	ldw	r2,-8(fp)
   8edac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8edb0:	e0fffd17 	ldw	r3,-12(fp)
   8edb4:	d0a00e04 	addi	r2,gp,-32712
   8edb8:	18bfcf1e 	bne	r3,r2,8ecf8 <__alt_data_end+0xfffc3208>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   8edbc:	0001883a 	nop
}
   8edc0:	0001883a 	nop
   8edc4:	e037883a 	mov	sp,fp
   8edc8:	dfc00117 	ldw	ra,4(sp)
   8edcc:	df000017 	ldw	fp,0(sp)
   8edd0:	dec00204 	addi	sp,sp,8
   8edd4:	f800283a 	ret

0008edd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8edd8:	defffe04 	addi	sp,sp,-8
   8eddc:	dfc00115 	stw	ra,4(sp)
   8ede0:	df000015 	stw	fp,0(sp)
   8ede4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8ede8:	d0a00b17 	ldw	r2,-32724(gp)
   8edec:	10000326 	beq	r2,zero,8edfc <alt_get_errno+0x24>
   8edf0:	d0a00b17 	ldw	r2,-32724(gp)
   8edf4:	103ee83a 	callr	r2
   8edf8:	00000106 	br	8ee00 <alt_get_errno+0x28>
   8edfc:	d0a6f904 	addi	r2,gp,-25628
}
   8ee00:	e037883a 	mov	sp,fp
   8ee04:	dfc00117 	ldw	ra,4(sp)
   8ee08:	df000017 	ldw	fp,0(sp)
   8ee0c:	dec00204 	addi	sp,sp,8
   8ee10:	f800283a 	ret

0008ee14 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8ee14:	defff904 	addi	sp,sp,-28
   8ee18:	dfc00615 	stw	ra,24(sp)
   8ee1c:	df000515 	stw	fp,20(sp)
   8ee20:	df000504 	addi	fp,sp,20
   8ee24:	e13ffd15 	stw	r4,-12(fp)
   8ee28:	e17ffe15 	stw	r5,-8(fp)
   8ee2c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8ee30:	e0bffd17 	ldw	r2,-12(fp)
   8ee34:	10000616 	blt	r2,zero,8ee50 <write+0x3c>
   8ee38:	e0bffd17 	ldw	r2,-12(fp)
   8ee3c:	10c00324 	muli	r3,r2,12
   8ee40:	00800274 	movhi	r2,9
   8ee44:	1085c104 	addi	r2,r2,5892
   8ee48:	1885883a 	add	r2,r3,r2
   8ee4c:	00000106 	br	8ee54 <write+0x40>
   8ee50:	0005883a 	mov	r2,zero
   8ee54:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8ee58:	e0bffb17 	ldw	r2,-20(fp)
   8ee5c:	10002126 	beq	r2,zero,8eee4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8ee60:	e0bffb17 	ldw	r2,-20(fp)
   8ee64:	10800217 	ldw	r2,8(r2)
   8ee68:	108000cc 	andi	r2,r2,3
   8ee6c:	10001826 	beq	r2,zero,8eed0 <write+0xbc>
   8ee70:	e0bffb17 	ldw	r2,-20(fp)
   8ee74:	10800017 	ldw	r2,0(r2)
   8ee78:	10800617 	ldw	r2,24(r2)
   8ee7c:	10001426 	beq	r2,zero,8eed0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8ee80:	e0bffb17 	ldw	r2,-20(fp)
   8ee84:	10800017 	ldw	r2,0(r2)
   8ee88:	10800617 	ldw	r2,24(r2)
   8ee8c:	e0ffff17 	ldw	r3,-4(fp)
   8ee90:	180d883a 	mov	r6,r3
   8ee94:	e17ffe17 	ldw	r5,-8(fp)
   8ee98:	e13ffb17 	ldw	r4,-20(fp)
   8ee9c:	103ee83a 	callr	r2
   8eea0:	e0bffc15 	stw	r2,-16(fp)
   8eea4:	e0bffc17 	ldw	r2,-16(fp)
   8eea8:	1000070e 	bge	r2,zero,8eec8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   8eeac:	008edd80 	call	8edd8 <alt_get_errno>
   8eeb0:	1007883a 	mov	r3,r2
   8eeb4:	e0bffc17 	ldw	r2,-16(fp)
   8eeb8:	0085c83a 	sub	r2,zero,r2
   8eebc:	18800015 	stw	r2,0(r3)
        return -1;
   8eec0:	00bfffc4 	movi	r2,-1
   8eec4:	00000c06 	br	8eef8 <write+0xe4>
      }
      return rval;
   8eec8:	e0bffc17 	ldw	r2,-16(fp)
   8eecc:	00000a06 	br	8eef8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8eed0:	008edd80 	call	8edd8 <alt_get_errno>
   8eed4:	1007883a 	mov	r3,r2
   8eed8:	00800344 	movi	r2,13
   8eedc:	18800015 	stw	r2,0(r3)
   8eee0:	00000406 	br	8eef4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8eee4:	008edd80 	call	8edd8 <alt_get_errno>
   8eee8:	1007883a 	mov	r3,r2
   8eeec:	00801444 	movi	r2,81
   8eef0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   8eef4:	00bfffc4 	movi	r2,-1
}
   8eef8:	e037883a 	mov	sp,fp
   8eefc:	dfc00117 	ldw	ra,4(sp)
   8ef00:	df000017 	ldw	fp,0(sp)
   8ef04:	dec00204 	addi	sp,sp,8
   8ef08:	f800283a 	ret

0008ef0c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8ef0c:	defffd04 	addi	sp,sp,-12
   8ef10:	dfc00215 	stw	ra,8(sp)
   8ef14:	df000115 	stw	fp,4(sp)
   8ef18:	df000104 	addi	fp,sp,4
   8ef1c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8ef20:	d1600804 	addi	r5,gp,-32736
   8ef24:	e13fff17 	ldw	r4,-4(fp)
   8ef28:	008fce80 	call	8fce8 <alt_dev_llist_insert>
}
   8ef2c:	e037883a 	mov	sp,fp
   8ef30:	dfc00117 	ldw	ra,4(sp)
   8ef34:	df000017 	ldw	fp,0(sp)
   8ef38:	dec00204 	addi	sp,sp,8
   8ef3c:	f800283a 	ret

0008ef40 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8ef40:	defffd04 	addi	sp,sp,-12
   8ef44:	dfc00215 	stw	ra,8(sp)
   8ef48:	df000115 	stw	fp,4(sp)
   8ef4c:	df000104 	addi	fp,sp,4
   8ef50:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   8ef54:	00902b00 	call	902b0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8ef58:	00800044 	movi	r2,1
   8ef5c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8ef60:	0001883a 	nop
   8ef64:	e037883a 	mov	sp,fp
   8ef68:	dfc00117 	ldw	ra,4(sp)
   8ef6c:	df000017 	ldw	fp,0(sp)
   8ef70:	dec00204 	addi	sp,sp,8
   8ef74:	f800283a 	ret

0008ef78 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8ef78:	defffe04 	addi	sp,sp,-8
   8ef7c:	dfc00115 	stw	ra,4(sp)
   8ef80:	df000015 	stw	fp,0(sp)
   8ef84:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   8ef88:	01c0fa04 	movi	r7,1000
   8ef8c:	000d883a 	mov	r6,zero
   8ef90:	000b883a 	mov	r5,zero
   8ef94:	01000434 	movhi	r4,16
   8ef98:	21040004 	addi	r4,r4,4096
   8ef9c:	008fabc0 	call	8fabc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   8efa0:	01800044 	movi	r6,1
   8efa4:	000b883a 	mov	r5,zero
   8efa8:	01000274 	movhi	r4,9
   8efac:	21062b04 	addi	r4,r4,6316
   8efb0:	008f1400 	call	8f140 <altera_avalon_jtag_uart_init>
   8efb4:	01000274 	movhi	r4,9
   8efb8:	21062104 	addi	r4,r4,6276
   8efbc:	008ef0c0 	call	8ef0c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   8efc0:	0001883a 	nop
}
   8efc4:	0001883a 	nop
   8efc8:	e037883a 	mov	sp,fp
   8efcc:	dfc00117 	ldw	ra,4(sp)
   8efd0:	df000017 	ldw	fp,0(sp)
   8efd4:	dec00204 	addi	sp,sp,8
   8efd8:	f800283a 	ret

0008efdc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8efdc:	defffa04 	addi	sp,sp,-24
   8efe0:	dfc00515 	stw	ra,20(sp)
   8efe4:	df000415 	stw	fp,16(sp)
   8efe8:	df000404 	addi	fp,sp,16
   8efec:	e13ffd15 	stw	r4,-12(fp)
   8eff0:	e17ffe15 	stw	r5,-8(fp)
   8eff4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8eff8:	e0bffd17 	ldw	r2,-12(fp)
   8effc:	10800017 	ldw	r2,0(r2)
   8f000:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8f004:	e0bffc17 	ldw	r2,-16(fp)
   8f008:	10c00a04 	addi	r3,r2,40
   8f00c:	e0bffd17 	ldw	r2,-12(fp)
   8f010:	10800217 	ldw	r2,8(r2)
   8f014:	100f883a 	mov	r7,r2
   8f018:	e1bfff17 	ldw	r6,-4(fp)
   8f01c:	e17ffe17 	ldw	r5,-8(fp)
   8f020:	1809883a 	mov	r4,r3
   8f024:	008f6040 	call	8f604 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8f028:	e037883a 	mov	sp,fp
   8f02c:	dfc00117 	ldw	ra,4(sp)
   8f030:	df000017 	ldw	fp,0(sp)
   8f034:	dec00204 	addi	sp,sp,8
   8f038:	f800283a 	ret

0008f03c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8f03c:	defffa04 	addi	sp,sp,-24
   8f040:	dfc00515 	stw	ra,20(sp)
   8f044:	df000415 	stw	fp,16(sp)
   8f048:	df000404 	addi	fp,sp,16
   8f04c:	e13ffd15 	stw	r4,-12(fp)
   8f050:	e17ffe15 	stw	r5,-8(fp)
   8f054:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8f058:	e0bffd17 	ldw	r2,-12(fp)
   8f05c:	10800017 	ldw	r2,0(r2)
   8f060:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8f064:	e0bffc17 	ldw	r2,-16(fp)
   8f068:	10c00a04 	addi	r3,r2,40
   8f06c:	e0bffd17 	ldw	r2,-12(fp)
   8f070:	10800217 	ldw	r2,8(r2)
   8f074:	100f883a 	mov	r7,r2
   8f078:	e1bfff17 	ldw	r6,-4(fp)
   8f07c:	e17ffe17 	ldw	r5,-8(fp)
   8f080:	1809883a 	mov	r4,r3
   8f084:	008f8200 	call	8f820 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8f088:	e037883a 	mov	sp,fp
   8f08c:	dfc00117 	ldw	ra,4(sp)
   8f090:	df000017 	ldw	fp,0(sp)
   8f094:	dec00204 	addi	sp,sp,8
   8f098:	f800283a 	ret

0008f09c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8f09c:	defffc04 	addi	sp,sp,-16
   8f0a0:	dfc00315 	stw	ra,12(sp)
   8f0a4:	df000215 	stw	fp,8(sp)
   8f0a8:	df000204 	addi	fp,sp,8
   8f0ac:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8f0b0:	e0bfff17 	ldw	r2,-4(fp)
   8f0b4:	10800017 	ldw	r2,0(r2)
   8f0b8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8f0bc:	e0bffe17 	ldw	r2,-8(fp)
   8f0c0:	10c00a04 	addi	r3,r2,40
   8f0c4:	e0bfff17 	ldw	r2,-4(fp)
   8f0c8:	10800217 	ldw	r2,8(r2)
   8f0cc:	100b883a 	mov	r5,r2
   8f0d0:	1809883a 	mov	r4,r3
   8f0d4:	008f4ac0 	call	8f4ac <altera_avalon_jtag_uart_close>
}
   8f0d8:	e037883a 	mov	sp,fp
   8f0dc:	dfc00117 	ldw	ra,4(sp)
   8f0e0:	df000017 	ldw	fp,0(sp)
   8f0e4:	dec00204 	addi	sp,sp,8
   8f0e8:	f800283a 	ret

0008f0ec <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8f0ec:	defffa04 	addi	sp,sp,-24
   8f0f0:	dfc00515 	stw	ra,20(sp)
   8f0f4:	df000415 	stw	fp,16(sp)
   8f0f8:	df000404 	addi	fp,sp,16
   8f0fc:	e13ffd15 	stw	r4,-12(fp)
   8f100:	e17ffe15 	stw	r5,-8(fp)
   8f104:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8f108:	e0bffd17 	ldw	r2,-12(fp)
   8f10c:	10800017 	ldw	r2,0(r2)
   8f110:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8f114:	e0bffc17 	ldw	r2,-16(fp)
   8f118:	10800a04 	addi	r2,r2,40
   8f11c:	e1bfff17 	ldw	r6,-4(fp)
   8f120:	e17ffe17 	ldw	r5,-8(fp)
   8f124:	1009883a 	mov	r4,r2
   8f128:	008f5140 	call	8f514 <altera_avalon_jtag_uart_ioctl>
}
   8f12c:	e037883a 	mov	sp,fp
   8f130:	dfc00117 	ldw	ra,4(sp)
   8f134:	df000017 	ldw	fp,0(sp)
   8f138:	dec00204 	addi	sp,sp,8
   8f13c:	f800283a 	ret

0008f140 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8f140:	defffa04 	addi	sp,sp,-24
   8f144:	dfc00515 	stw	ra,20(sp)
   8f148:	df000415 	stw	fp,16(sp)
   8f14c:	df000404 	addi	fp,sp,16
   8f150:	e13ffd15 	stw	r4,-12(fp)
   8f154:	e17ffe15 	stw	r5,-8(fp)
   8f158:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f15c:	e0bffd17 	ldw	r2,-12(fp)
   8f160:	00c00044 	movi	r3,1
   8f164:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8f168:	e0bffd17 	ldw	r2,-12(fp)
   8f16c:	10800017 	ldw	r2,0(r2)
   8f170:	10800104 	addi	r2,r2,4
   8f174:	1007883a 	mov	r3,r2
   8f178:	e0bffd17 	ldw	r2,-12(fp)
   8f17c:	10800817 	ldw	r2,32(r2)
   8f180:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8f184:	e0bffe17 	ldw	r2,-8(fp)
   8f188:	e0ffff17 	ldw	r3,-4(fp)
   8f18c:	d8000015 	stw	zero,0(sp)
   8f190:	e1fffd17 	ldw	r7,-12(fp)
   8f194:	01800274 	movhi	r6,9
   8f198:	31bc8004 	addi	r6,r6,-3584
   8f19c:	180b883a 	mov	r5,r3
   8f1a0:	1009883a 	mov	r4,r2
   8f1a4:	008e2280 	call	8e228 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8f1a8:	e0bffd17 	ldw	r2,-12(fp)
   8f1ac:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8f1b0:	e0bffd17 	ldw	r2,-12(fp)
   8f1b4:	10800204 	addi	r2,r2,8
   8f1b8:	d0e70817 	ldw	r3,-25568(gp)
   8f1bc:	e1fffd17 	ldw	r7,-12(fp)
   8f1c0:	01800274 	movhi	r6,9
   8f1c4:	31bd0304 	addi	r6,r6,-3060
   8f1c8:	180b883a 	mov	r5,r3
   8f1cc:	1009883a 	mov	r4,r2
   8f1d0:	008fb380 	call	8fb38 <alt_alarm_start>
   8f1d4:	1000040e 	bge	r2,zero,8f1e8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8f1d8:	e0fffd17 	ldw	r3,-12(fp)
   8f1dc:	00a00034 	movhi	r2,32768
   8f1e0:	10bfffc4 	addi	r2,r2,-1
   8f1e4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8f1e8:	0001883a 	nop
   8f1ec:	e037883a 	mov	sp,fp
   8f1f0:	dfc00117 	ldw	ra,4(sp)
   8f1f4:	df000017 	ldw	fp,0(sp)
   8f1f8:	dec00204 	addi	sp,sp,8
   8f1fc:	f800283a 	ret

0008f200 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8f200:	defff804 	addi	sp,sp,-32
   8f204:	df000715 	stw	fp,28(sp)
   8f208:	df000704 	addi	fp,sp,28
   8f20c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8f210:	e0bfff17 	ldw	r2,-4(fp)
   8f214:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   8f218:	e0bffb17 	ldw	r2,-20(fp)
   8f21c:	10800017 	ldw	r2,0(r2)
   8f220:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f224:	e0bffc17 	ldw	r2,-16(fp)
   8f228:	10800104 	addi	r2,r2,4
   8f22c:	10800037 	ldwio	r2,0(r2)
   8f230:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8f234:	e0bffd17 	ldw	r2,-12(fp)
   8f238:	1080c00c 	andi	r2,r2,768
   8f23c:	10006d26 	beq	r2,zero,8f3f4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8f240:	e0bffd17 	ldw	r2,-12(fp)
   8f244:	1080400c 	andi	r2,r2,256
   8f248:	10003526 	beq	r2,zero,8f320 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8f24c:	00800074 	movhi	r2,1
   8f250:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f254:	e0bffb17 	ldw	r2,-20(fp)
   8f258:	10800a17 	ldw	r2,40(r2)
   8f25c:	10800044 	addi	r2,r2,1
   8f260:	1081ffcc 	andi	r2,r2,2047
   8f264:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   8f268:	e0bffb17 	ldw	r2,-20(fp)
   8f26c:	10c00b17 	ldw	r3,44(r2)
   8f270:	e0bffe17 	ldw	r2,-8(fp)
   8f274:	18801526 	beq	r3,r2,8f2cc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8f278:	e0bffc17 	ldw	r2,-16(fp)
   8f27c:	10800037 	ldwio	r2,0(r2)
   8f280:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8f284:	e0bff917 	ldw	r2,-28(fp)
   8f288:	10a0000c 	andi	r2,r2,32768
   8f28c:	10001126 	beq	r2,zero,8f2d4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8f290:	e0bffb17 	ldw	r2,-20(fp)
   8f294:	10800a17 	ldw	r2,40(r2)
   8f298:	e0fff917 	ldw	r3,-28(fp)
   8f29c:	1809883a 	mov	r4,r3
   8f2a0:	e0fffb17 	ldw	r3,-20(fp)
   8f2a4:	1885883a 	add	r2,r3,r2
   8f2a8:	10800e04 	addi	r2,r2,56
   8f2ac:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f2b0:	e0bffb17 	ldw	r2,-20(fp)
   8f2b4:	10800a17 	ldw	r2,40(r2)
   8f2b8:	10800044 	addi	r2,r2,1
   8f2bc:	10c1ffcc 	andi	r3,r2,2047
   8f2c0:	e0bffb17 	ldw	r2,-20(fp)
   8f2c4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8f2c8:	003fe206 	br	8f254 <__alt_data_end+0xfffc3764>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   8f2cc:	0001883a 	nop
   8f2d0:	00000106 	br	8f2d8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   8f2d4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8f2d8:	e0bff917 	ldw	r2,-28(fp)
   8f2dc:	10bfffec 	andhi	r2,r2,65535
   8f2e0:	10000f26 	beq	r2,zero,8f320 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f2e4:	e0bffb17 	ldw	r2,-20(fp)
   8f2e8:	10c00817 	ldw	r3,32(r2)
   8f2ec:	00bfff84 	movi	r2,-2
   8f2f0:	1886703a 	and	r3,r3,r2
   8f2f4:	e0bffb17 	ldw	r2,-20(fp)
   8f2f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8f2fc:	e0bffc17 	ldw	r2,-16(fp)
   8f300:	10800104 	addi	r2,r2,4
   8f304:	1007883a 	mov	r3,r2
   8f308:	e0bffb17 	ldw	r2,-20(fp)
   8f30c:	10800817 	ldw	r2,32(r2)
   8f310:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f314:	e0bffc17 	ldw	r2,-16(fp)
   8f318:	10800104 	addi	r2,r2,4
   8f31c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8f320:	e0bffd17 	ldw	r2,-12(fp)
   8f324:	1080800c 	andi	r2,r2,512
   8f328:	103fbe26 	beq	r2,zero,8f224 <__alt_data_end+0xfffc3734>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8f32c:	e0bffd17 	ldw	r2,-12(fp)
   8f330:	1004d43a 	srli	r2,r2,16
   8f334:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8f338:	00001406 	br	8f38c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8f33c:	e0bffc17 	ldw	r2,-16(fp)
   8f340:	e0fffb17 	ldw	r3,-20(fp)
   8f344:	18c00d17 	ldw	r3,52(r3)
   8f348:	e13ffb17 	ldw	r4,-20(fp)
   8f34c:	20c7883a 	add	r3,r4,r3
   8f350:	18c20e04 	addi	r3,r3,2104
   8f354:	18c00003 	ldbu	r3,0(r3)
   8f358:	18c03fcc 	andi	r3,r3,255
   8f35c:	18c0201c 	xori	r3,r3,128
   8f360:	18ffe004 	addi	r3,r3,-128
   8f364:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f368:	e0bffb17 	ldw	r2,-20(fp)
   8f36c:	10800d17 	ldw	r2,52(r2)
   8f370:	10800044 	addi	r2,r2,1
   8f374:	10c1ffcc 	andi	r3,r2,2047
   8f378:	e0bffb17 	ldw	r2,-20(fp)
   8f37c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8f380:	e0bffa17 	ldw	r2,-24(fp)
   8f384:	10bfffc4 	addi	r2,r2,-1
   8f388:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8f38c:	e0bffa17 	ldw	r2,-24(fp)
   8f390:	10000526 	beq	r2,zero,8f3a8 <altera_avalon_jtag_uart_irq+0x1a8>
   8f394:	e0bffb17 	ldw	r2,-20(fp)
   8f398:	10c00d17 	ldw	r3,52(r2)
   8f39c:	e0bffb17 	ldw	r2,-20(fp)
   8f3a0:	10800c17 	ldw	r2,48(r2)
   8f3a4:	18bfe51e 	bne	r3,r2,8f33c <__alt_data_end+0xfffc384c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8f3a8:	e0bffa17 	ldw	r2,-24(fp)
   8f3ac:	103f9d26 	beq	r2,zero,8f224 <__alt_data_end+0xfffc3734>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8f3b0:	e0bffb17 	ldw	r2,-20(fp)
   8f3b4:	10c00817 	ldw	r3,32(r2)
   8f3b8:	00bfff44 	movi	r2,-3
   8f3bc:	1886703a 	and	r3,r3,r2
   8f3c0:	e0bffb17 	ldw	r2,-20(fp)
   8f3c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8f3c8:	e0bffb17 	ldw	r2,-20(fp)
   8f3cc:	10800017 	ldw	r2,0(r2)
   8f3d0:	10800104 	addi	r2,r2,4
   8f3d4:	1007883a 	mov	r3,r2
   8f3d8:	e0bffb17 	ldw	r2,-20(fp)
   8f3dc:	10800817 	ldw	r2,32(r2)
   8f3e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8f3e4:	e0bffc17 	ldw	r2,-16(fp)
   8f3e8:	10800104 	addi	r2,r2,4
   8f3ec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8f3f0:	003f8c06 	br	8f224 <__alt_data_end+0xfffc3734>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   8f3f4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   8f3f8:	0001883a 	nop
   8f3fc:	e037883a 	mov	sp,fp
   8f400:	df000017 	ldw	fp,0(sp)
   8f404:	dec00104 	addi	sp,sp,4
   8f408:	f800283a 	ret

0008f40c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8f40c:	defff804 	addi	sp,sp,-32
   8f410:	df000715 	stw	fp,28(sp)
   8f414:	df000704 	addi	fp,sp,28
   8f418:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8f41c:	e0bffb17 	ldw	r2,-20(fp)
   8f420:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8f424:	e0bff917 	ldw	r2,-28(fp)
   8f428:	10800017 	ldw	r2,0(r2)
   8f42c:	10800104 	addi	r2,r2,4
   8f430:	10800037 	ldwio	r2,0(r2)
   8f434:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8f438:	e0bffa17 	ldw	r2,-24(fp)
   8f43c:	1081000c 	andi	r2,r2,1024
   8f440:	10000b26 	beq	r2,zero,8f470 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8f444:	e0bff917 	ldw	r2,-28(fp)
   8f448:	10800017 	ldw	r2,0(r2)
   8f44c:	10800104 	addi	r2,r2,4
   8f450:	1007883a 	mov	r3,r2
   8f454:	e0bff917 	ldw	r2,-28(fp)
   8f458:	10800817 	ldw	r2,32(r2)
   8f45c:	10810014 	ori	r2,r2,1024
   8f460:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   8f464:	e0bff917 	ldw	r2,-28(fp)
   8f468:	10000915 	stw	zero,36(r2)
   8f46c:	00000a06 	br	8f498 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8f470:	e0bff917 	ldw	r2,-28(fp)
   8f474:	10c00917 	ldw	r3,36(r2)
   8f478:	00a00034 	movhi	r2,32768
   8f47c:	10bfff04 	addi	r2,r2,-4
   8f480:	10c00536 	bltu	r2,r3,8f498 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   8f484:	e0bff917 	ldw	r2,-28(fp)
   8f488:	10800917 	ldw	r2,36(r2)
   8f48c:	10c00044 	addi	r3,r2,1
   8f490:	e0bff917 	ldw	r2,-28(fp)
   8f494:	10c00915 	stw	r3,36(r2)
   8f498:	d0a70817 	ldw	r2,-25568(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8f49c:	e037883a 	mov	sp,fp
   8f4a0:	df000017 	ldw	fp,0(sp)
   8f4a4:	dec00104 	addi	sp,sp,4
   8f4a8:	f800283a 	ret

0008f4ac <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8f4ac:	defffd04 	addi	sp,sp,-12
   8f4b0:	df000215 	stw	fp,8(sp)
   8f4b4:	df000204 	addi	fp,sp,8
   8f4b8:	e13ffe15 	stw	r4,-8(fp)
   8f4bc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8f4c0:	00000506 	br	8f4d8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   8f4c4:	e0bfff17 	ldw	r2,-4(fp)
   8f4c8:	1090000c 	andi	r2,r2,16384
   8f4cc:	10000226 	beq	r2,zero,8f4d8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   8f4d0:	00bffd44 	movi	r2,-11
   8f4d4:	00000b06 	br	8f504 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8f4d8:	e0bffe17 	ldw	r2,-8(fp)
   8f4dc:	10c00d17 	ldw	r3,52(r2)
   8f4e0:	e0bffe17 	ldw	r2,-8(fp)
   8f4e4:	10800c17 	ldw	r2,48(r2)
   8f4e8:	18800526 	beq	r3,r2,8f500 <altera_avalon_jtag_uart_close+0x54>
   8f4ec:	e0bffe17 	ldw	r2,-8(fp)
   8f4f0:	10c00917 	ldw	r3,36(r2)
   8f4f4:	e0bffe17 	ldw	r2,-8(fp)
   8f4f8:	10800117 	ldw	r2,4(r2)
   8f4fc:	18bff136 	bltu	r3,r2,8f4c4 <__alt_data_end+0xfffc39d4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8f500:	0005883a 	mov	r2,zero
}
   8f504:	e037883a 	mov	sp,fp
   8f508:	df000017 	ldw	fp,0(sp)
   8f50c:	dec00104 	addi	sp,sp,4
   8f510:	f800283a 	ret

0008f514 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8f514:	defffa04 	addi	sp,sp,-24
   8f518:	df000515 	stw	fp,20(sp)
   8f51c:	df000504 	addi	fp,sp,20
   8f520:	e13ffd15 	stw	r4,-12(fp)
   8f524:	e17ffe15 	stw	r5,-8(fp)
   8f528:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   8f52c:	00bff9c4 	movi	r2,-25
   8f530:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   8f534:	e0bffe17 	ldw	r2,-8(fp)
   8f538:	10da8060 	cmpeqi	r3,r2,27137
   8f53c:	1800031e 	bne	r3,zero,8f54c <altera_avalon_jtag_uart_ioctl+0x38>
   8f540:	109a80a0 	cmpeqi	r2,r2,27138
   8f544:	1000181e 	bne	r2,zero,8f5a8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   8f548:	00002906 	br	8f5f0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8f54c:	e0bffd17 	ldw	r2,-12(fp)
   8f550:	10c00117 	ldw	r3,4(r2)
   8f554:	00a00034 	movhi	r2,32768
   8f558:	10bfffc4 	addi	r2,r2,-1
   8f55c:	18802126 	beq	r3,r2,8f5e4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   8f560:	e0bfff17 	ldw	r2,-4(fp)
   8f564:	10800017 	ldw	r2,0(r2)
   8f568:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8f56c:	e0bffc17 	ldw	r2,-16(fp)
   8f570:	10800090 	cmplti	r2,r2,2
   8f574:	1000061e 	bne	r2,zero,8f590 <altera_avalon_jtag_uart_ioctl+0x7c>
   8f578:	e0fffc17 	ldw	r3,-16(fp)
   8f57c:	00a00034 	movhi	r2,32768
   8f580:	10bfffc4 	addi	r2,r2,-1
   8f584:	18800226 	beq	r3,r2,8f590 <altera_avalon_jtag_uart_ioctl+0x7c>
   8f588:	e0bffc17 	ldw	r2,-16(fp)
   8f58c:	00000206 	br	8f598 <altera_avalon_jtag_uart_ioctl+0x84>
   8f590:	00a00034 	movhi	r2,32768
   8f594:	10bfff84 	addi	r2,r2,-2
   8f598:	e0fffd17 	ldw	r3,-12(fp)
   8f59c:	18800115 	stw	r2,4(r3)
      rc = 0;
   8f5a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8f5a4:	00000f06 	br	8f5e4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8f5a8:	e0bffd17 	ldw	r2,-12(fp)
   8f5ac:	10c00117 	ldw	r3,4(r2)
   8f5b0:	00a00034 	movhi	r2,32768
   8f5b4:	10bfffc4 	addi	r2,r2,-1
   8f5b8:	18800c26 	beq	r3,r2,8f5ec <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8f5bc:	e0bffd17 	ldw	r2,-12(fp)
   8f5c0:	10c00917 	ldw	r3,36(r2)
   8f5c4:	e0bffd17 	ldw	r2,-12(fp)
   8f5c8:	10800117 	ldw	r2,4(r2)
   8f5cc:	1885803a 	cmpltu	r2,r3,r2
   8f5d0:	10c03fcc 	andi	r3,r2,255
   8f5d4:	e0bfff17 	ldw	r2,-4(fp)
   8f5d8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   8f5dc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8f5e0:	00000206 	br	8f5ec <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   8f5e4:	0001883a 	nop
   8f5e8:	00000106 	br	8f5f0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   8f5ec:	0001883a 	nop

  default:
    break;
  }

  return rc;
   8f5f0:	e0bffb17 	ldw	r2,-20(fp)
}
   8f5f4:	e037883a 	mov	sp,fp
   8f5f8:	df000017 	ldw	fp,0(sp)
   8f5fc:	dec00104 	addi	sp,sp,4
   8f600:	f800283a 	ret

0008f604 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8f604:	defff304 	addi	sp,sp,-52
   8f608:	dfc00c15 	stw	ra,48(sp)
   8f60c:	df000b15 	stw	fp,44(sp)
   8f610:	df000b04 	addi	fp,sp,44
   8f614:	e13ffc15 	stw	r4,-16(fp)
   8f618:	e17ffd15 	stw	r5,-12(fp)
   8f61c:	e1bffe15 	stw	r6,-8(fp)
   8f620:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   8f624:	e0bffd17 	ldw	r2,-12(fp)
   8f628:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8f62c:	00004706 	br	8f74c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8f630:	e0bffc17 	ldw	r2,-16(fp)
   8f634:	10800a17 	ldw	r2,40(r2)
   8f638:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8f63c:	e0bffc17 	ldw	r2,-16(fp)
   8f640:	10800b17 	ldw	r2,44(r2)
   8f644:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   8f648:	e0fff717 	ldw	r3,-36(fp)
   8f64c:	e0bff817 	ldw	r2,-32(fp)
   8f650:	18800536 	bltu	r3,r2,8f668 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8f654:	e0fff717 	ldw	r3,-36(fp)
   8f658:	e0bff817 	ldw	r2,-32(fp)
   8f65c:	1885c83a 	sub	r2,r3,r2
   8f660:	e0bff615 	stw	r2,-40(fp)
   8f664:	00000406 	br	8f678 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8f668:	00c20004 	movi	r3,2048
   8f66c:	e0bff817 	ldw	r2,-32(fp)
   8f670:	1885c83a 	sub	r2,r3,r2
   8f674:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8f678:	e0bff617 	ldw	r2,-40(fp)
   8f67c:	10001e26 	beq	r2,zero,8f6f8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   8f680:	e0fffe17 	ldw	r3,-8(fp)
   8f684:	e0bff617 	ldw	r2,-40(fp)
   8f688:	1880022e 	bgeu	r3,r2,8f694 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   8f68c:	e0bffe17 	ldw	r2,-8(fp)
   8f690:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8f694:	e0bffc17 	ldw	r2,-16(fp)
   8f698:	10c00e04 	addi	r3,r2,56
   8f69c:	e0bff817 	ldw	r2,-32(fp)
   8f6a0:	1885883a 	add	r2,r3,r2
   8f6a4:	e1bff617 	ldw	r6,-40(fp)
   8f6a8:	100b883a 	mov	r5,r2
   8f6ac:	e13ff517 	ldw	r4,-44(fp)
   8f6b0:	00871100 	call	87110 <memcpy>
      ptr   += n;
   8f6b4:	e0fff517 	ldw	r3,-44(fp)
   8f6b8:	e0bff617 	ldw	r2,-40(fp)
   8f6bc:	1885883a 	add	r2,r3,r2
   8f6c0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   8f6c4:	e0fffe17 	ldw	r3,-8(fp)
   8f6c8:	e0bff617 	ldw	r2,-40(fp)
   8f6cc:	1885c83a 	sub	r2,r3,r2
   8f6d0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f6d4:	e0fff817 	ldw	r3,-32(fp)
   8f6d8:	e0bff617 	ldw	r2,-40(fp)
   8f6dc:	1885883a 	add	r2,r3,r2
   8f6e0:	10c1ffcc 	andi	r3,r2,2047
   8f6e4:	e0bffc17 	ldw	r2,-16(fp)
   8f6e8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8f6ec:	e0bffe17 	ldw	r2,-8(fp)
   8f6f0:	00bfcf16 	blt	zero,r2,8f630 <__alt_data_end+0xfffc3b40>
   8f6f4:	00000106 	br	8f6fc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   8f6f8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   8f6fc:	e0fff517 	ldw	r3,-44(fp)
   8f700:	e0bffd17 	ldw	r2,-12(fp)
   8f704:	1880141e 	bne	r3,r2,8f758 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8f708:	e0bfff17 	ldw	r2,-4(fp)
   8f70c:	1090000c 	andi	r2,r2,16384
   8f710:	1000131e 	bne	r2,zero,8f760 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8f714:	0001883a 	nop
   8f718:	e0bffc17 	ldw	r2,-16(fp)
   8f71c:	10c00a17 	ldw	r3,40(r2)
   8f720:	e0bff717 	ldw	r2,-36(fp)
   8f724:	1880051e 	bne	r3,r2,8f73c <altera_avalon_jtag_uart_read+0x138>
   8f728:	e0bffc17 	ldw	r2,-16(fp)
   8f72c:	10c00917 	ldw	r3,36(r2)
   8f730:	e0bffc17 	ldw	r2,-16(fp)
   8f734:	10800117 	ldw	r2,4(r2)
   8f738:	18bff736 	bltu	r3,r2,8f718 <__alt_data_end+0xfffc3c28>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8f73c:	e0bffc17 	ldw	r2,-16(fp)
   8f740:	10c00a17 	ldw	r3,40(r2)
   8f744:	e0bff717 	ldw	r2,-36(fp)
   8f748:	18800726 	beq	r3,r2,8f768 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8f74c:	e0bffe17 	ldw	r2,-8(fp)
   8f750:	00bfb716 	blt	zero,r2,8f630 <__alt_data_end+0xfffc3b40>
   8f754:	00000506 	br	8f76c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   8f758:	0001883a 	nop
   8f75c:	00000306 	br	8f76c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   8f760:	0001883a 	nop
   8f764:	00000106 	br	8f76c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   8f768:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8f76c:	e0fff517 	ldw	r3,-44(fp)
   8f770:	e0bffd17 	ldw	r2,-12(fp)
   8f774:	18801826 	beq	r3,r2,8f7d8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f778:	0005303a 	rdctl	r2,status
   8f77c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f780:	e0fffb17 	ldw	r3,-20(fp)
   8f784:	00bfff84 	movi	r2,-2
   8f788:	1884703a 	and	r2,r3,r2
   8f78c:	1001703a 	wrctl	status,r2
  
  return context;
   8f790:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8f794:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8f798:	e0bffc17 	ldw	r2,-16(fp)
   8f79c:	10800817 	ldw	r2,32(r2)
   8f7a0:	10c00054 	ori	r3,r2,1
   8f7a4:	e0bffc17 	ldw	r2,-16(fp)
   8f7a8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8f7ac:	e0bffc17 	ldw	r2,-16(fp)
   8f7b0:	10800017 	ldw	r2,0(r2)
   8f7b4:	10800104 	addi	r2,r2,4
   8f7b8:	1007883a 	mov	r3,r2
   8f7bc:	e0bffc17 	ldw	r2,-16(fp)
   8f7c0:	10800817 	ldw	r2,32(r2)
   8f7c4:	18800035 	stwio	r2,0(r3)
   8f7c8:	e0bffa17 	ldw	r2,-24(fp)
   8f7cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f7d0:	e0bff917 	ldw	r2,-28(fp)
   8f7d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8f7d8:	e0fff517 	ldw	r3,-44(fp)
   8f7dc:	e0bffd17 	ldw	r2,-12(fp)
   8f7e0:	18800426 	beq	r3,r2,8f7f4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   8f7e4:	e0fff517 	ldw	r3,-44(fp)
   8f7e8:	e0bffd17 	ldw	r2,-12(fp)
   8f7ec:	1885c83a 	sub	r2,r3,r2
   8f7f0:	00000606 	br	8f80c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   8f7f4:	e0bfff17 	ldw	r2,-4(fp)
   8f7f8:	1090000c 	andi	r2,r2,16384
   8f7fc:	10000226 	beq	r2,zero,8f808 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   8f800:	00bffd44 	movi	r2,-11
   8f804:	00000106 	br	8f80c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   8f808:	00bffec4 	movi	r2,-5
}
   8f80c:	e037883a 	mov	sp,fp
   8f810:	dfc00117 	ldw	ra,4(sp)
   8f814:	df000017 	ldw	fp,0(sp)
   8f818:	dec00204 	addi	sp,sp,8
   8f81c:	f800283a 	ret

0008f820 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8f820:	defff304 	addi	sp,sp,-52
   8f824:	dfc00c15 	stw	ra,48(sp)
   8f828:	df000b15 	stw	fp,44(sp)
   8f82c:	df000b04 	addi	fp,sp,44
   8f830:	e13ffc15 	stw	r4,-16(fp)
   8f834:	e17ffd15 	stw	r5,-12(fp)
   8f838:	e1bffe15 	stw	r6,-8(fp)
   8f83c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8f840:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8f844:	e0bffd17 	ldw	r2,-12(fp)
   8f848:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8f84c:	00003706 	br	8f92c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8f850:	e0bffc17 	ldw	r2,-16(fp)
   8f854:	10800c17 	ldw	r2,48(r2)
   8f858:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   8f85c:	e0bffc17 	ldw	r2,-16(fp)
   8f860:	10800d17 	ldw	r2,52(r2)
   8f864:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   8f868:	e0fff917 	ldw	r3,-28(fp)
   8f86c:	e0bff517 	ldw	r2,-44(fp)
   8f870:	1880062e 	bgeu	r3,r2,8f88c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8f874:	e0fff517 	ldw	r3,-44(fp)
   8f878:	e0bff917 	ldw	r2,-28(fp)
   8f87c:	1885c83a 	sub	r2,r3,r2
   8f880:	10bfffc4 	addi	r2,r2,-1
   8f884:	e0bff615 	stw	r2,-40(fp)
   8f888:	00000b06 	br	8f8b8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   8f88c:	e0bff517 	ldw	r2,-44(fp)
   8f890:	10000526 	beq	r2,zero,8f8a8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8f894:	00c20004 	movi	r3,2048
   8f898:	e0bff917 	ldw	r2,-28(fp)
   8f89c:	1885c83a 	sub	r2,r3,r2
   8f8a0:	e0bff615 	stw	r2,-40(fp)
   8f8a4:	00000406 	br	8f8b8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8f8a8:	00c1ffc4 	movi	r3,2047
   8f8ac:	e0bff917 	ldw	r2,-28(fp)
   8f8b0:	1885c83a 	sub	r2,r3,r2
   8f8b4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8f8b8:	e0bff617 	ldw	r2,-40(fp)
   8f8bc:	10001e26 	beq	r2,zero,8f938 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   8f8c0:	e0fffe17 	ldw	r3,-8(fp)
   8f8c4:	e0bff617 	ldw	r2,-40(fp)
   8f8c8:	1880022e 	bgeu	r3,r2,8f8d4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   8f8cc:	e0bffe17 	ldw	r2,-8(fp)
   8f8d0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8f8d4:	e0bffc17 	ldw	r2,-16(fp)
   8f8d8:	10c20e04 	addi	r3,r2,2104
   8f8dc:	e0bff917 	ldw	r2,-28(fp)
   8f8e0:	1885883a 	add	r2,r3,r2
   8f8e4:	e1bff617 	ldw	r6,-40(fp)
   8f8e8:	e17ffd17 	ldw	r5,-12(fp)
   8f8ec:	1009883a 	mov	r4,r2
   8f8f0:	00871100 	call	87110 <memcpy>
      ptr   += n;
   8f8f4:	e0fffd17 	ldw	r3,-12(fp)
   8f8f8:	e0bff617 	ldw	r2,-40(fp)
   8f8fc:	1885883a 	add	r2,r3,r2
   8f900:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   8f904:	e0fffe17 	ldw	r3,-8(fp)
   8f908:	e0bff617 	ldw	r2,-40(fp)
   8f90c:	1885c83a 	sub	r2,r3,r2
   8f910:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8f914:	e0fff917 	ldw	r3,-28(fp)
   8f918:	e0bff617 	ldw	r2,-40(fp)
   8f91c:	1885883a 	add	r2,r3,r2
   8f920:	10c1ffcc 	andi	r3,r2,2047
   8f924:	e0bffc17 	ldw	r2,-16(fp)
   8f928:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8f92c:	e0bffe17 	ldw	r2,-8(fp)
   8f930:	00bfc716 	blt	zero,r2,8f850 <__alt_data_end+0xfffc3d60>
   8f934:	00000106 	br	8f93c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   8f938:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f93c:	0005303a 	rdctl	r2,status
   8f940:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f944:	e0fffb17 	ldw	r3,-20(fp)
   8f948:	00bfff84 	movi	r2,-2
   8f94c:	1884703a 	and	r2,r3,r2
   8f950:	1001703a 	wrctl	status,r2
  
  return context;
   8f954:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8f958:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8f95c:	e0bffc17 	ldw	r2,-16(fp)
   8f960:	10800817 	ldw	r2,32(r2)
   8f964:	10c00094 	ori	r3,r2,2
   8f968:	e0bffc17 	ldw	r2,-16(fp)
   8f96c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8f970:	e0bffc17 	ldw	r2,-16(fp)
   8f974:	10800017 	ldw	r2,0(r2)
   8f978:	10800104 	addi	r2,r2,4
   8f97c:	1007883a 	mov	r3,r2
   8f980:	e0bffc17 	ldw	r2,-16(fp)
   8f984:	10800817 	ldw	r2,32(r2)
   8f988:	18800035 	stwio	r2,0(r3)
   8f98c:	e0bffa17 	ldw	r2,-24(fp)
   8f990:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f994:	e0bff817 	ldw	r2,-32(fp)
   8f998:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8f99c:	e0bffe17 	ldw	r2,-8(fp)
   8f9a0:	0080100e 	bge	zero,r2,8f9e4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   8f9a4:	e0bfff17 	ldw	r2,-4(fp)
   8f9a8:	1090000c 	andi	r2,r2,16384
   8f9ac:	1000101e 	bne	r2,zero,8f9f0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8f9b0:	0001883a 	nop
   8f9b4:	e0bffc17 	ldw	r2,-16(fp)
   8f9b8:	10c00d17 	ldw	r3,52(r2)
   8f9bc:	e0bff517 	ldw	r2,-44(fp)
   8f9c0:	1880051e 	bne	r3,r2,8f9d8 <altera_avalon_jtag_uart_write+0x1b8>
   8f9c4:	e0bffc17 	ldw	r2,-16(fp)
   8f9c8:	10c00917 	ldw	r3,36(r2)
   8f9cc:	e0bffc17 	ldw	r2,-16(fp)
   8f9d0:	10800117 	ldw	r2,4(r2)
   8f9d4:	18bff736 	bltu	r3,r2,8f9b4 <__alt_data_end+0xfffc3ec4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   8f9d8:	e0bffc17 	ldw	r2,-16(fp)
   8f9dc:	10800917 	ldw	r2,36(r2)
   8f9e0:	1000051e 	bne	r2,zero,8f9f8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   8f9e4:	e0bffe17 	ldw	r2,-8(fp)
   8f9e8:	00bfd016 	blt	zero,r2,8f92c <__alt_data_end+0xfffc3e3c>
   8f9ec:	00000306 	br	8f9fc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   8f9f0:	0001883a 	nop
   8f9f4:	00000106 	br	8f9fc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   8f9f8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8f9fc:	e0fffd17 	ldw	r3,-12(fp)
   8fa00:	e0bff717 	ldw	r2,-36(fp)
   8fa04:	18800426 	beq	r3,r2,8fa18 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   8fa08:	e0fffd17 	ldw	r3,-12(fp)
   8fa0c:	e0bff717 	ldw	r2,-36(fp)
   8fa10:	1885c83a 	sub	r2,r3,r2
   8fa14:	00000606 	br	8fa30 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   8fa18:	e0bfff17 	ldw	r2,-4(fp)
   8fa1c:	1090000c 	andi	r2,r2,16384
   8fa20:	10000226 	beq	r2,zero,8fa2c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   8fa24:	00bffd44 	movi	r2,-11
   8fa28:	00000106 	br	8fa30 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8fa2c:	00bffec4 	movi	r2,-5
}
   8fa30:	e037883a 	mov	sp,fp
   8fa34:	dfc00117 	ldw	ra,4(sp)
   8fa38:	df000017 	ldw	fp,0(sp)
   8fa3c:	dec00204 	addi	sp,sp,8
   8fa40:	f800283a 	ret

0008fa44 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   8fa44:	defffa04 	addi	sp,sp,-24
   8fa48:	dfc00515 	stw	ra,20(sp)
   8fa4c:	df000415 	stw	fp,16(sp)
   8fa50:	df000404 	addi	fp,sp,16
   8fa54:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   8fa58:	0007883a 	mov	r3,zero
   8fa5c:	e0bfff17 	ldw	r2,-4(fp)
   8fa60:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   8fa64:	e0bfff17 	ldw	r2,-4(fp)
   8fa68:	10800104 	addi	r2,r2,4
   8fa6c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fa70:	0005303a 	rdctl	r2,status
   8fa74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8fa78:	e0fffd17 	ldw	r3,-12(fp)
   8fa7c:	00bfff84 	movi	r2,-2
   8fa80:	1884703a 	and	r2,r3,r2
   8fa84:	1001703a 	wrctl	status,r2
  
  return context;
   8fa88:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   8fa8c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   8fa90:	008ecd00 	call	8ecd0 <alt_tick>
   8fa94:	e0bffc17 	ldw	r2,-16(fp)
   8fa98:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fa9c:	e0bffe17 	ldw	r2,-8(fp)
   8faa0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   8faa4:	0001883a 	nop
   8faa8:	e037883a 	mov	sp,fp
   8faac:	dfc00117 	ldw	ra,4(sp)
   8fab0:	df000017 	ldw	fp,0(sp)
   8fab4:	dec00204 	addi	sp,sp,8
   8fab8:	f800283a 	ret

0008fabc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   8fabc:	defff804 	addi	sp,sp,-32
   8fac0:	dfc00715 	stw	ra,28(sp)
   8fac4:	df000615 	stw	fp,24(sp)
   8fac8:	df000604 	addi	fp,sp,24
   8facc:	e13ffc15 	stw	r4,-16(fp)
   8fad0:	e17ffd15 	stw	r5,-12(fp)
   8fad4:	e1bffe15 	stw	r6,-8(fp)
   8fad8:	e1ffff15 	stw	r7,-4(fp)
   8fadc:	e0bfff17 	ldw	r2,-4(fp)
   8fae0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   8fae4:	d0a70817 	ldw	r2,-25568(gp)
   8fae8:	1000021e 	bne	r2,zero,8faf4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   8faec:	e0bffb17 	ldw	r2,-20(fp)
   8faf0:	d0a70815 	stw	r2,-25568(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   8faf4:	e0bffc17 	ldw	r2,-16(fp)
   8faf8:	10800104 	addi	r2,r2,4
   8fafc:	00c001c4 	movi	r3,7
   8fb00:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   8fb04:	d8000015 	stw	zero,0(sp)
   8fb08:	e1fffc17 	ldw	r7,-16(fp)
   8fb0c:	01800274 	movhi	r6,9
   8fb10:	31be9104 	addi	r6,r6,-1468
   8fb14:	e17ffe17 	ldw	r5,-8(fp)
   8fb18:	e13ffd17 	ldw	r4,-12(fp)
   8fb1c:	008e2280 	call	8e228 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   8fb20:	0001883a 	nop
   8fb24:	e037883a 	mov	sp,fp
   8fb28:	dfc00117 	ldw	ra,4(sp)
   8fb2c:	df000017 	ldw	fp,0(sp)
   8fb30:	dec00204 	addi	sp,sp,8
   8fb34:	f800283a 	ret

0008fb38 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8fb38:	defff504 	addi	sp,sp,-44
   8fb3c:	df000a15 	stw	fp,40(sp)
   8fb40:	df000a04 	addi	fp,sp,40
   8fb44:	e13ffc15 	stw	r4,-16(fp)
   8fb48:	e17ffd15 	stw	r5,-12(fp)
   8fb4c:	e1bffe15 	stw	r6,-8(fp)
   8fb50:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8fb54:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8fb58:	d0a70817 	ldw	r2,-25568(gp)
  
  if (alt_ticks_per_second ())
   8fb5c:	10003c26 	beq	r2,zero,8fc50 <alt_alarm_start+0x118>
  {
    if (alarm)
   8fb60:	e0bffc17 	ldw	r2,-16(fp)
   8fb64:	10003826 	beq	r2,zero,8fc48 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   8fb68:	e0bffc17 	ldw	r2,-16(fp)
   8fb6c:	e0fffe17 	ldw	r3,-8(fp)
   8fb70:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   8fb74:	e0bffc17 	ldw	r2,-16(fp)
   8fb78:	e0ffff17 	ldw	r3,-4(fp)
   8fb7c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8fb80:	0005303a 	rdctl	r2,status
   8fb84:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8fb88:	e0fff917 	ldw	r3,-28(fp)
   8fb8c:	00bfff84 	movi	r2,-2
   8fb90:	1884703a 	and	r2,r3,r2
   8fb94:	1001703a 	wrctl	status,r2
  
  return context;
   8fb98:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   8fb9c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8fba0:	d0a70917 	ldw	r2,-25564(gp)
      
      current_nticks = alt_nticks();
   8fba4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8fba8:	e0fffd17 	ldw	r3,-12(fp)
   8fbac:	e0bff617 	ldw	r2,-40(fp)
   8fbb0:	1885883a 	add	r2,r3,r2
   8fbb4:	10c00044 	addi	r3,r2,1
   8fbb8:	e0bffc17 	ldw	r2,-16(fp)
   8fbbc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8fbc0:	e0bffc17 	ldw	r2,-16(fp)
   8fbc4:	10c00217 	ldw	r3,8(r2)
   8fbc8:	e0bff617 	ldw	r2,-40(fp)
   8fbcc:	1880042e 	bgeu	r3,r2,8fbe0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   8fbd0:	e0bffc17 	ldw	r2,-16(fp)
   8fbd4:	00c00044 	movi	r3,1
   8fbd8:	10c00405 	stb	r3,16(r2)
   8fbdc:	00000206 	br	8fbe8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   8fbe0:	e0bffc17 	ldw	r2,-16(fp)
   8fbe4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8fbe8:	e0bffc17 	ldw	r2,-16(fp)
   8fbec:	d0e00e04 	addi	r3,gp,-32712
   8fbf0:	e0fffa15 	stw	r3,-24(fp)
   8fbf4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8fbf8:	e0bffb17 	ldw	r2,-20(fp)
   8fbfc:	e0fffa17 	ldw	r3,-24(fp)
   8fc00:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8fc04:	e0bffa17 	ldw	r2,-24(fp)
   8fc08:	10c00017 	ldw	r3,0(r2)
   8fc0c:	e0bffb17 	ldw	r2,-20(fp)
   8fc10:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8fc14:	e0bffa17 	ldw	r2,-24(fp)
   8fc18:	10800017 	ldw	r2,0(r2)
   8fc1c:	e0fffb17 	ldw	r3,-20(fp)
   8fc20:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8fc24:	e0bffa17 	ldw	r2,-24(fp)
   8fc28:	e0fffb17 	ldw	r3,-20(fp)
   8fc2c:	10c00015 	stw	r3,0(r2)
   8fc30:	e0bff817 	ldw	r2,-32(fp)
   8fc34:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8fc38:	e0bff717 	ldw	r2,-36(fp)
   8fc3c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8fc40:	0005883a 	mov	r2,zero
   8fc44:	00000306 	br	8fc54 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   8fc48:	00bffa84 	movi	r2,-22
   8fc4c:	00000106 	br	8fc54 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   8fc50:	00bfde84 	movi	r2,-134
  }
}
   8fc54:	e037883a 	mov	sp,fp
   8fc58:	df000017 	ldw	fp,0(sp)
   8fc5c:	dec00104 	addi	sp,sp,4
   8fc60:	f800283a 	ret

0008fc64 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8fc64:	defffe04 	addi	sp,sp,-8
   8fc68:	df000115 	stw	fp,4(sp)
   8fc6c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   8fc70:	e03fff15 	stw	zero,-4(fp)
   8fc74:	00000506 	br	8fc8c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   8fc78:	e0bfff17 	ldw	r2,-4(fp)
   8fc7c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   8fc80:	e0bfff17 	ldw	r2,-4(fp)
   8fc84:	10800804 	addi	r2,r2,32
   8fc88:	e0bfff15 	stw	r2,-4(fp)
   8fc8c:	e0bfff17 	ldw	r2,-4(fp)
   8fc90:	10820030 	cmpltui	r2,r2,2048
   8fc94:	103ff81e 	bne	r2,zero,8fc78 <__alt_data_end+0xfffc4188>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8fc98:	0001883a 	nop
   8fc9c:	e037883a 	mov	sp,fp
   8fca0:	df000017 	ldw	fp,0(sp)
   8fca4:	dec00104 	addi	sp,sp,4
   8fca8:	f800283a 	ret

0008fcac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8fcac:	defffe04 	addi	sp,sp,-8
   8fcb0:	dfc00115 	stw	ra,4(sp)
   8fcb4:	df000015 	stw	fp,0(sp)
   8fcb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8fcbc:	d0a00b17 	ldw	r2,-32724(gp)
   8fcc0:	10000326 	beq	r2,zero,8fcd0 <alt_get_errno+0x24>
   8fcc4:	d0a00b17 	ldw	r2,-32724(gp)
   8fcc8:	103ee83a 	callr	r2
   8fccc:	00000106 	br	8fcd4 <alt_get_errno+0x28>
   8fcd0:	d0a6f904 	addi	r2,gp,-25628
}
   8fcd4:	e037883a 	mov	sp,fp
   8fcd8:	dfc00117 	ldw	ra,4(sp)
   8fcdc:	df000017 	ldw	fp,0(sp)
   8fce0:	dec00204 	addi	sp,sp,8
   8fce4:	f800283a 	ret

0008fce8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8fce8:	defffa04 	addi	sp,sp,-24
   8fcec:	dfc00515 	stw	ra,20(sp)
   8fcf0:	df000415 	stw	fp,16(sp)
   8fcf4:	df000404 	addi	fp,sp,16
   8fcf8:	e13ffe15 	stw	r4,-8(fp)
   8fcfc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8fd00:	e0bffe17 	ldw	r2,-8(fp)
   8fd04:	10000326 	beq	r2,zero,8fd14 <alt_dev_llist_insert+0x2c>
   8fd08:	e0bffe17 	ldw	r2,-8(fp)
   8fd0c:	10800217 	ldw	r2,8(r2)
   8fd10:	1000061e 	bne	r2,zero,8fd2c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   8fd14:	008fcac0 	call	8fcac <alt_get_errno>
   8fd18:	1007883a 	mov	r3,r2
   8fd1c:	00800584 	movi	r2,22
   8fd20:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   8fd24:	00bffa84 	movi	r2,-22
   8fd28:	00001306 	br	8fd78 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8fd2c:	e0bffe17 	ldw	r2,-8(fp)
   8fd30:	e0ffff17 	ldw	r3,-4(fp)
   8fd34:	e0fffc15 	stw	r3,-16(fp)
   8fd38:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8fd3c:	e0bffd17 	ldw	r2,-12(fp)
   8fd40:	e0fffc17 	ldw	r3,-16(fp)
   8fd44:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8fd48:	e0bffc17 	ldw	r2,-16(fp)
   8fd4c:	10c00017 	ldw	r3,0(r2)
   8fd50:	e0bffd17 	ldw	r2,-12(fp)
   8fd54:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8fd58:	e0bffc17 	ldw	r2,-16(fp)
   8fd5c:	10800017 	ldw	r2,0(r2)
   8fd60:	e0fffd17 	ldw	r3,-12(fp)
   8fd64:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8fd68:	e0bffc17 	ldw	r2,-16(fp)
   8fd6c:	e0fffd17 	ldw	r3,-12(fp)
   8fd70:	10c00015 	stw	r3,0(r2)

  return 0;  
   8fd74:	0005883a 	mov	r2,zero
}
   8fd78:	e037883a 	mov	sp,fp
   8fd7c:	dfc00117 	ldw	ra,4(sp)
   8fd80:	df000017 	ldw	fp,0(sp)
   8fd84:	dec00204 	addi	sp,sp,8
   8fd88:	f800283a 	ret

0008fd8c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8fd8c:	defffd04 	addi	sp,sp,-12
   8fd90:	dfc00215 	stw	ra,8(sp)
   8fd94:	df000115 	stw	fp,4(sp)
   8fd98:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8fd9c:	00800274 	movhi	r2,9
   8fda0:	10824c04 	addi	r2,r2,2352
   8fda4:	e0bfff15 	stw	r2,-4(fp)
   8fda8:	00000606 	br	8fdc4 <_do_ctors+0x38>
        (*ctor) (); 
   8fdac:	e0bfff17 	ldw	r2,-4(fp)
   8fdb0:	10800017 	ldw	r2,0(r2)
   8fdb4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8fdb8:	e0bfff17 	ldw	r2,-4(fp)
   8fdbc:	10bfff04 	addi	r2,r2,-4
   8fdc0:	e0bfff15 	stw	r2,-4(fp)
   8fdc4:	e0ffff17 	ldw	r3,-4(fp)
   8fdc8:	00800274 	movhi	r2,9
   8fdcc:	10824d04 	addi	r2,r2,2356
   8fdd0:	18bff62e 	bgeu	r3,r2,8fdac <__alt_data_end+0xfffc42bc>
        (*ctor) (); 
}
   8fdd4:	0001883a 	nop
   8fdd8:	e037883a 	mov	sp,fp
   8fddc:	dfc00117 	ldw	ra,4(sp)
   8fde0:	df000017 	ldw	fp,0(sp)
   8fde4:	dec00204 	addi	sp,sp,8
   8fde8:	f800283a 	ret

0008fdec <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8fdec:	defffd04 	addi	sp,sp,-12
   8fdf0:	dfc00215 	stw	ra,8(sp)
   8fdf4:	df000115 	stw	fp,4(sp)
   8fdf8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8fdfc:	00800274 	movhi	r2,9
   8fe00:	10824c04 	addi	r2,r2,2352
   8fe04:	e0bfff15 	stw	r2,-4(fp)
   8fe08:	00000606 	br	8fe24 <_do_dtors+0x38>
        (*dtor) (); 
   8fe0c:	e0bfff17 	ldw	r2,-4(fp)
   8fe10:	10800017 	ldw	r2,0(r2)
   8fe14:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8fe18:	e0bfff17 	ldw	r2,-4(fp)
   8fe1c:	10bfff04 	addi	r2,r2,-4
   8fe20:	e0bfff15 	stw	r2,-4(fp)
   8fe24:	e0ffff17 	ldw	r3,-4(fp)
   8fe28:	00800274 	movhi	r2,9
   8fe2c:	10824d04 	addi	r2,r2,2356
   8fe30:	18bff62e 	bgeu	r3,r2,8fe0c <__alt_data_end+0xfffc431c>
        (*dtor) (); 
}
   8fe34:	0001883a 	nop
   8fe38:	e037883a 	mov	sp,fp
   8fe3c:	dfc00117 	ldw	ra,4(sp)
   8fe40:	df000017 	ldw	fp,0(sp)
   8fe44:	dec00204 	addi	sp,sp,8
   8fe48:	f800283a 	ret

0008fe4c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8fe4c:	defffe04 	addi	sp,sp,-8
   8fe50:	dfc00115 	stw	ra,4(sp)
   8fe54:	df000015 	stw	fp,0(sp)
   8fe58:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   8fe5c:	01440004 	movi	r5,4096
   8fe60:	0009883a 	mov	r4,zero
   8fe64:	00905100 	call	90510 <alt_icache_flush>
#endif
}
   8fe68:	0001883a 	nop
   8fe6c:	e037883a 	mov	sp,fp
   8fe70:	dfc00117 	ldw	ra,4(sp)
   8fe74:	df000017 	ldw	fp,0(sp)
   8fe78:	dec00204 	addi	sp,sp,8
   8fe7c:	f800283a 	ret

0008fe80 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   8fe80:	defffe04 	addi	sp,sp,-8
   8fe84:	df000115 	stw	fp,4(sp)
   8fe88:	df000104 	addi	fp,sp,4
   8fe8c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   8fe90:	e0bfff17 	ldw	r2,-4(fp)
   8fe94:	10bffe84 	addi	r2,r2,-6
   8fe98:	10c00428 	cmpgeui	r3,r2,16
   8fe9c:	18001a1e 	bne	r3,zero,8ff08 <alt_exception_cause_generated_bad_addr+0x88>
   8fea0:	100690ba 	slli	r3,r2,2
   8fea4:	00800274 	movhi	r2,9
   8fea8:	10bfae04 	addi	r2,r2,-328
   8feac:	1885883a 	add	r2,r3,r2
   8feb0:	10800017 	ldw	r2,0(r2)
   8feb4:	1000683a 	jmp	r2
   8feb8:	0008fef8 	rdprs	zero,zero,9211
   8febc:	0008fef8 	rdprs	zero,zero,9211
   8fec0:	0008ff08 	cmpgei	zero,zero,9212
   8fec4:	0008ff08 	cmpgei	zero,zero,9212
   8fec8:	0008ff08 	cmpgei	zero,zero,9212
   8fecc:	0008fef8 	rdprs	zero,zero,9211
   8fed0:	0008ff00 	call	8ff0 <__reset-0x77010>
   8fed4:	0008ff08 	cmpgei	zero,zero,9212
   8fed8:	0008fef8 	rdprs	zero,zero,9211
   8fedc:	0008fef8 	rdprs	zero,zero,9211
   8fee0:	0008ff08 	cmpgei	zero,zero,9212
   8fee4:	0008fef8 	rdprs	zero,zero,9211
   8fee8:	0008ff00 	call	8ff0 <__reset-0x77010>
   8feec:	0008ff08 	cmpgei	zero,zero,9212
   8fef0:	0008ff08 	cmpgei	zero,zero,9212
   8fef4:	0008fef8 	rdprs	zero,zero,9211
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   8fef8:	00800044 	movi	r2,1
   8fefc:	00000306 	br	8ff0c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   8ff00:	0005883a 	mov	r2,zero
   8ff04:	00000106 	br	8ff0c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   8ff08:	0005883a 	mov	r2,zero
  }
}
   8ff0c:	e037883a 	mov	sp,fp
   8ff10:	df000017 	ldw	fp,0(sp)
   8ff14:	dec00104 	addi	sp,sp,4
   8ff18:	f800283a 	ret

0008ff1c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8ff1c:	defff904 	addi	sp,sp,-28
   8ff20:	dfc00615 	stw	ra,24(sp)
   8ff24:	df000515 	stw	fp,20(sp)
   8ff28:	df000504 	addi	fp,sp,20
   8ff2c:	e13ffc15 	stw	r4,-16(fp)
   8ff30:	e17ffd15 	stw	r5,-12(fp)
   8ff34:	e1bffe15 	stw	r6,-8(fp)
   8ff38:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8ff3c:	e1bfff17 	ldw	r6,-4(fp)
   8ff40:	e17ffe17 	ldw	r5,-8(fp)
   8ff44:	e13ffd17 	ldw	r4,-12(fp)
   8ff48:	009015c0 	call	9015c <open>
   8ff4c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8ff50:	e0bffb17 	ldw	r2,-20(fp)
   8ff54:	10001c16 	blt	r2,zero,8ffc8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   8ff58:	00800274 	movhi	r2,9
   8ff5c:	1085c104 	addi	r2,r2,5892
   8ff60:	e0fffb17 	ldw	r3,-20(fp)
   8ff64:	18c00324 	muli	r3,r3,12
   8ff68:	10c5883a 	add	r2,r2,r3
   8ff6c:	10c00017 	ldw	r3,0(r2)
   8ff70:	e0bffc17 	ldw	r2,-16(fp)
   8ff74:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8ff78:	00800274 	movhi	r2,9
   8ff7c:	1085c104 	addi	r2,r2,5892
   8ff80:	e0fffb17 	ldw	r3,-20(fp)
   8ff84:	18c00324 	muli	r3,r3,12
   8ff88:	10c5883a 	add	r2,r2,r3
   8ff8c:	10800104 	addi	r2,r2,4
   8ff90:	10c00017 	ldw	r3,0(r2)
   8ff94:	e0bffc17 	ldw	r2,-16(fp)
   8ff98:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8ff9c:	00800274 	movhi	r2,9
   8ffa0:	1085c104 	addi	r2,r2,5892
   8ffa4:	e0fffb17 	ldw	r3,-20(fp)
   8ffa8:	18c00324 	muli	r3,r3,12
   8ffac:	10c5883a 	add	r2,r2,r3
   8ffb0:	10800204 	addi	r2,r2,8
   8ffb4:	10c00017 	ldw	r3,0(r2)
   8ffb8:	e0bffc17 	ldw	r2,-16(fp)
   8ffbc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8ffc0:	e13ffb17 	ldw	r4,-20(fp)
   8ffc4:	008eb200 	call	8eb20 <alt_release_fd>
  }
} 
   8ffc8:	0001883a 	nop
   8ffcc:	e037883a 	mov	sp,fp
   8ffd0:	dfc00117 	ldw	ra,4(sp)
   8ffd4:	df000017 	ldw	fp,0(sp)
   8ffd8:	dec00204 	addi	sp,sp,8
   8ffdc:	f800283a 	ret

0008ffe0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8ffe0:	defffb04 	addi	sp,sp,-20
   8ffe4:	dfc00415 	stw	ra,16(sp)
   8ffe8:	df000315 	stw	fp,12(sp)
   8ffec:	df000304 	addi	fp,sp,12
   8fff0:	e13ffd15 	stw	r4,-12(fp)
   8fff4:	e17ffe15 	stw	r5,-8(fp)
   8fff8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8fffc:	01c07fc4 	movi	r7,511
   90000:	01800044 	movi	r6,1
   90004:	e17ffd17 	ldw	r5,-12(fp)
   90008:	01000274 	movhi	r4,9
   9000c:	2105c404 	addi	r4,r4,5904
   90010:	008ff1c0 	call	8ff1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   90014:	01c07fc4 	movi	r7,511
   90018:	000d883a 	mov	r6,zero
   9001c:	e17ffe17 	ldw	r5,-8(fp)
   90020:	01000274 	movhi	r4,9
   90024:	2105c104 	addi	r4,r4,5892
   90028:	008ff1c0 	call	8ff1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   9002c:	01c07fc4 	movi	r7,511
   90030:	01800044 	movi	r6,1
   90034:	e17fff17 	ldw	r5,-4(fp)
   90038:	01000274 	movhi	r4,9
   9003c:	2105c704 	addi	r4,r4,5916
   90040:	008ff1c0 	call	8ff1c <alt_open_fd>
}  
   90044:	0001883a 	nop
   90048:	e037883a 	mov	sp,fp
   9004c:	dfc00117 	ldw	ra,4(sp)
   90050:	df000017 	ldw	fp,0(sp)
   90054:	dec00204 	addi	sp,sp,8
   90058:	f800283a 	ret

0009005c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   9005c:	defffe04 	addi	sp,sp,-8
   90060:	dfc00115 	stw	ra,4(sp)
   90064:	df000015 	stw	fp,0(sp)
   90068:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   9006c:	d0a00b17 	ldw	r2,-32724(gp)
   90070:	10000326 	beq	r2,zero,90080 <alt_get_errno+0x24>
   90074:	d0a00b17 	ldw	r2,-32724(gp)
   90078:	103ee83a 	callr	r2
   9007c:	00000106 	br	90084 <alt_get_errno+0x28>
   90080:	d0a6f904 	addi	r2,gp,-25628
}
   90084:	e037883a 	mov	sp,fp
   90088:	dfc00117 	ldw	ra,4(sp)
   9008c:	df000017 	ldw	fp,0(sp)
   90090:	dec00204 	addi	sp,sp,8
   90094:	f800283a 	ret

00090098 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   90098:	defffd04 	addi	sp,sp,-12
   9009c:	df000215 	stw	fp,8(sp)
   900a0:	df000204 	addi	fp,sp,8
   900a4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   900a8:	e0bfff17 	ldw	r2,-4(fp)
   900ac:	10800217 	ldw	r2,8(r2)
   900b0:	10d00034 	orhi	r3,r2,16384
   900b4:	e0bfff17 	ldw	r2,-4(fp)
   900b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   900bc:	e03ffe15 	stw	zero,-8(fp)
   900c0:	00001d06 	br	90138 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   900c4:	00800274 	movhi	r2,9
   900c8:	1085c104 	addi	r2,r2,5892
   900cc:	e0fffe17 	ldw	r3,-8(fp)
   900d0:	18c00324 	muli	r3,r3,12
   900d4:	10c5883a 	add	r2,r2,r3
   900d8:	10c00017 	ldw	r3,0(r2)
   900dc:	e0bfff17 	ldw	r2,-4(fp)
   900e0:	10800017 	ldw	r2,0(r2)
   900e4:	1880111e 	bne	r3,r2,9012c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   900e8:	00800274 	movhi	r2,9
   900ec:	1085c104 	addi	r2,r2,5892
   900f0:	e0fffe17 	ldw	r3,-8(fp)
   900f4:	18c00324 	muli	r3,r3,12
   900f8:	10c5883a 	add	r2,r2,r3
   900fc:	10800204 	addi	r2,r2,8
   90100:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   90104:	1000090e 	bge	r2,zero,9012c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   90108:	e0bffe17 	ldw	r2,-8(fp)
   9010c:	10c00324 	muli	r3,r2,12
   90110:	00800274 	movhi	r2,9
   90114:	1085c104 	addi	r2,r2,5892
   90118:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   9011c:	e0bfff17 	ldw	r2,-4(fp)
   90120:	18800226 	beq	r3,r2,9012c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   90124:	00bffcc4 	movi	r2,-13
   90128:	00000806 	br	9014c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   9012c:	e0bffe17 	ldw	r2,-8(fp)
   90130:	10800044 	addi	r2,r2,1
   90134:	e0bffe15 	stw	r2,-8(fp)
   90138:	d0a00a17 	ldw	r2,-32728(gp)
   9013c:	1007883a 	mov	r3,r2
   90140:	e0bffe17 	ldw	r2,-8(fp)
   90144:	18bfdf2e 	bgeu	r3,r2,900c4 <__alt_data_end+0xfffc45d4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   90148:	0005883a 	mov	r2,zero
}
   9014c:	e037883a 	mov	sp,fp
   90150:	df000017 	ldw	fp,0(sp)
   90154:	dec00104 	addi	sp,sp,4
   90158:	f800283a 	ret

0009015c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   9015c:	defff604 	addi	sp,sp,-40
   90160:	dfc00915 	stw	ra,36(sp)
   90164:	df000815 	stw	fp,32(sp)
   90168:	df000804 	addi	fp,sp,32
   9016c:	e13ffd15 	stw	r4,-12(fp)
   90170:	e17ffe15 	stw	r5,-8(fp)
   90174:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   90178:	00bfffc4 	movi	r2,-1
   9017c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   90180:	00bffb44 	movi	r2,-19
   90184:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   90188:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   9018c:	d1600804 	addi	r5,gp,-32736
   90190:	e13ffd17 	ldw	r4,-12(fp)
   90194:	00902d40 	call	902d4 <alt_find_dev>
   90198:	e0bff815 	stw	r2,-32(fp)
   9019c:	e0bff817 	ldw	r2,-32(fp)
   901a0:	1000051e 	bne	r2,zero,901b8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   901a4:	e13ffd17 	ldw	r4,-12(fp)
   901a8:	00903640 	call	90364 <alt_find_file>
   901ac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   901b0:	00800044 	movi	r2,1
   901b4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   901b8:	e0bff817 	ldw	r2,-32(fp)
   901bc:	10002926 	beq	r2,zero,90264 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   901c0:	e13ff817 	ldw	r4,-32(fp)
   901c4:	009046c0 	call	9046c <alt_get_fd>
   901c8:	e0bff915 	stw	r2,-28(fp)
   901cc:	e0bff917 	ldw	r2,-28(fp)
   901d0:	1000030e 	bge	r2,zero,901e0 <open+0x84>
    {
      status = index;
   901d4:	e0bff917 	ldw	r2,-28(fp)
   901d8:	e0bffa15 	stw	r2,-24(fp)
   901dc:	00002306 	br	9026c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   901e0:	e0bff917 	ldw	r2,-28(fp)
   901e4:	10c00324 	muli	r3,r2,12
   901e8:	00800274 	movhi	r2,9
   901ec:	1085c104 	addi	r2,r2,5892
   901f0:	1885883a 	add	r2,r3,r2
   901f4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   901f8:	e0fffe17 	ldw	r3,-8(fp)
   901fc:	00900034 	movhi	r2,16384
   90200:	10bfffc4 	addi	r2,r2,-1
   90204:	1886703a 	and	r3,r3,r2
   90208:	e0bffc17 	ldw	r2,-16(fp)
   9020c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   90210:	e0bffb17 	ldw	r2,-20(fp)
   90214:	1000051e 	bne	r2,zero,9022c <open+0xd0>
   90218:	e13ffc17 	ldw	r4,-16(fp)
   9021c:	00900980 	call	90098 <alt_file_locked>
   90220:	e0bffa15 	stw	r2,-24(fp)
   90224:	e0bffa17 	ldw	r2,-24(fp)
   90228:	10001016 	blt	r2,zero,9026c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   9022c:	e0bff817 	ldw	r2,-32(fp)
   90230:	10800317 	ldw	r2,12(r2)
   90234:	10000826 	beq	r2,zero,90258 <open+0xfc>
   90238:	e0bff817 	ldw	r2,-32(fp)
   9023c:	10800317 	ldw	r2,12(r2)
   90240:	e1ffff17 	ldw	r7,-4(fp)
   90244:	e1bffe17 	ldw	r6,-8(fp)
   90248:	e17ffd17 	ldw	r5,-12(fp)
   9024c:	e13ffc17 	ldw	r4,-16(fp)
   90250:	103ee83a 	callr	r2
   90254:	00000106 	br	9025c <open+0x100>
   90258:	0005883a 	mov	r2,zero
   9025c:	e0bffa15 	stw	r2,-24(fp)
   90260:	00000206 	br	9026c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   90264:	00bffb44 	movi	r2,-19
   90268:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   9026c:	e0bffa17 	ldw	r2,-24(fp)
   90270:	1000090e 	bge	r2,zero,90298 <open+0x13c>
  {
    alt_release_fd (index);  
   90274:	e13ff917 	ldw	r4,-28(fp)
   90278:	008eb200 	call	8eb20 <alt_release_fd>
    ALT_ERRNO = -status;
   9027c:	009005c0 	call	9005c <alt_get_errno>
   90280:	1007883a 	mov	r3,r2
   90284:	e0bffa17 	ldw	r2,-24(fp)
   90288:	0085c83a 	sub	r2,zero,r2
   9028c:	18800015 	stw	r2,0(r3)
    return -1;
   90290:	00bfffc4 	movi	r2,-1
   90294:	00000106 	br	9029c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   90298:	e0bff917 	ldw	r2,-28(fp)
}
   9029c:	e037883a 	mov	sp,fp
   902a0:	dfc00117 	ldw	ra,4(sp)
   902a4:	df000017 	ldw	fp,0(sp)
   902a8:	dec00204 	addi	sp,sp,8
   902ac:	f800283a 	ret

000902b0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   902b0:	deffff04 	addi	sp,sp,-4
   902b4:	df000015 	stw	fp,0(sp)
   902b8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   902bc:	000170fa 	wrctl	ienable,zero
}
   902c0:	0001883a 	nop
   902c4:	e037883a 	mov	sp,fp
   902c8:	df000017 	ldw	fp,0(sp)
   902cc:	dec00104 	addi	sp,sp,4
   902d0:	f800283a 	ret

000902d4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   902d4:	defffa04 	addi	sp,sp,-24
   902d8:	dfc00515 	stw	ra,20(sp)
   902dc:	df000415 	stw	fp,16(sp)
   902e0:	df000404 	addi	fp,sp,16
   902e4:	e13ffe15 	stw	r4,-8(fp)
   902e8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   902ec:	e0bfff17 	ldw	r2,-4(fp)
   902f0:	10800017 	ldw	r2,0(r2)
   902f4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   902f8:	e13ffe17 	ldw	r4,-8(fp)
   902fc:	00816d80 	call	816d8 <strlen>
   90300:	10800044 	addi	r2,r2,1
   90304:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   90308:	00000d06 	br	90340 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   9030c:	e0bffc17 	ldw	r2,-16(fp)
   90310:	10800217 	ldw	r2,8(r2)
   90314:	e0fffd17 	ldw	r3,-12(fp)
   90318:	180d883a 	mov	r6,r3
   9031c:	e17ffe17 	ldw	r5,-8(fp)
   90320:	1009883a 	mov	r4,r2
   90324:	00905ec0 	call	905ec <memcmp>
   90328:	1000021e 	bne	r2,zero,90334 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   9032c:	e0bffc17 	ldw	r2,-16(fp)
   90330:	00000706 	br	90350 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   90334:	e0bffc17 	ldw	r2,-16(fp)
   90338:	10800017 	ldw	r2,0(r2)
   9033c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   90340:	e0fffc17 	ldw	r3,-16(fp)
   90344:	e0bfff17 	ldw	r2,-4(fp)
   90348:	18bff01e 	bne	r3,r2,9030c <__alt_data_end+0xfffc481c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   9034c:	0005883a 	mov	r2,zero
}
   90350:	e037883a 	mov	sp,fp
   90354:	dfc00117 	ldw	ra,4(sp)
   90358:	df000017 	ldw	fp,0(sp)
   9035c:	dec00204 	addi	sp,sp,8
   90360:	f800283a 	ret

00090364 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   90364:	defffb04 	addi	sp,sp,-20
   90368:	dfc00415 	stw	ra,16(sp)
   9036c:	df000315 	stw	fp,12(sp)
   90370:	df000304 	addi	fp,sp,12
   90374:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   90378:	d0a00617 	ldw	r2,-32744(gp)
   9037c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   90380:	00003106 	br	90448 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   90384:	e0bffd17 	ldw	r2,-12(fp)
   90388:	10800217 	ldw	r2,8(r2)
   9038c:	1009883a 	mov	r4,r2
   90390:	00816d80 	call	816d8 <strlen>
   90394:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   90398:	e0bffd17 	ldw	r2,-12(fp)
   9039c:	10c00217 	ldw	r3,8(r2)
   903a0:	e0bffe17 	ldw	r2,-8(fp)
   903a4:	10bfffc4 	addi	r2,r2,-1
   903a8:	1885883a 	add	r2,r3,r2
   903ac:	10800003 	ldbu	r2,0(r2)
   903b0:	10803fcc 	andi	r2,r2,255
   903b4:	1080201c 	xori	r2,r2,128
   903b8:	10bfe004 	addi	r2,r2,-128
   903bc:	10800bd8 	cmpnei	r2,r2,47
   903c0:	1000031e 	bne	r2,zero,903d0 <alt_find_file+0x6c>
    {
      len -= 1;
   903c4:	e0bffe17 	ldw	r2,-8(fp)
   903c8:	10bfffc4 	addi	r2,r2,-1
   903cc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   903d0:	e0bffe17 	ldw	r2,-8(fp)
   903d4:	e0ffff17 	ldw	r3,-4(fp)
   903d8:	1885883a 	add	r2,r3,r2
   903dc:	10800003 	ldbu	r2,0(r2)
   903e0:	10803fcc 	andi	r2,r2,255
   903e4:	1080201c 	xori	r2,r2,128
   903e8:	10bfe004 	addi	r2,r2,-128
   903ec:	10800be0 	cmpeqi	r2,r2,47
   903f0:	1000081e 	bne	r2,zero,90414 <alt_find_file+0xb0>
   903f4:	e0bffe17 	ldw	r2,-8(fp)
   903f8:	e0ffff17 	ldw	r3,-4(fp)
   903fc:	1885883a 	add	r2,r3,r2
   90400:	10800003 	ldbu	r2,0(r2)
   90404:	10803fcc 	andi	r2,r2,255
   90408:	1080201c 	xori	r2,r2,128
   9040c:	10bfe004 	addi	r2,r2,-128
   90410:	10000a1e 	bne	r2,zero,9043c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   90414:	e0bffd17 	ldw	r2,-12(fp)
   90418:	10800217 	ldw	r2,8(r2)
   9041c:	e0fffe17 	ldw	r3,-8(fp)
   90420:	180d883a 	mov	r6,r3
   90424:	e17fff17 	ldw	r5,-4(fp)
   90428:	1009883a 	mov	r4,r2
   9042c:	00905ec0 	call	905ec <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   90430:	1000021e 	bne	r2,zero,9043c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   90434:	e0bffd17 	ldw	r2,-12(fp)
   90438:	00000706 	br	90458 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   9043c:	e0bffd17 	ldw	r2,-12(fp)
   90440:	10800017 	ldw	r2,0(r2)
   90444:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   90448:	e0fffd17 	ldw	r3,-12(fp)
   9044c:	d0a00604 	addi	r2,gp,-32744
   90450:	18bfcc1e 	bne	r3,r2,90384 <__alt_data_end+0xfffc4894>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   90454:	0005883a 	mov	r2,zero
}
   90458:	e037883a 	mov	sp,fp
   9045c:	dfc00117 	ldw	ra,4(sp)
   90460:	df000017 	ldw	fp,0(sp)
   90464:	dec00204 	addi	sp,sp,8
   90468:	f800283a 	ret

0009046c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   9046c:	defffc04 	addi	sp,sp,-16
   90470:	df000315 	stw	fp,12(sp)
   90474:	df000304 	addi	fp,sp,12
   90478:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   9047c:	00bffa04 	movi	r2,-24
   90480:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   90484:	e03ffd15 	stw	zero,-12(fp)
   90488:	00001906 	br	904f0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   9048c:	00800274 	movhi	r2,9
   90490:	1085c104 	addi	r2,r2,5892
   90494:	e0fffd17 	ldw	r3,-12(fp)
   90498:	18c00324 	muli	r3,r3,12
   9049c:	10c5883a 	add	r2,r2,r3
   904a0:	10800017 	ldw	r2,0(r2)
   904a4:	10000f1e 	bne	r2,zero,904e4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   904a8:	00800274 	movhi	r2,9
   904ac:	1085c104 	addi	r2,r2,5892
   904b0:	e0fffd17 	ldw	r3,-12(fp)
   904b4:	18c00324 	muli	r3,r3,12
   904b8:	10c5883a 	add	r2,r2,r3
   904bc:	e0ffff17 	ldw	r3,-4(fp)
   904c0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   904c4:	d0e00a17 	ldw	r3,-32728(gp)
   904c8:	e0bffd17 	ldw	r2,-12(fp)
   904cc:	1880020e 	bge	r3,r2,904d8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   904d0:	e0bffd17 	ldw	r2,-12(fp)
   904d4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   904d8:	e0bffd17 	ldw	r2,-12(fp)
   904dc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   904e0:	00000606 	br	904fc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   904e4:	e0bffd17 	ldw	r2,-12(fp)
   904e8:	10800044 	addi	r2,r2,1
   904ec:	e0bffd15 	stw	r2,-12(fp)
   904f0:	e0bffd17 	ldw	r2,-12(fp)
   904f4:	10800810 	cmplti	r2,r2,32
   904f8:	103fe41e 	bne	r2,zero,9048c <__alt_data_end+0xfffc499c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   904fc:	e0bffe17 	ldw	r2,-8(fp)
}
   90500:	e037883a 	mov	sp,fp
   90504:	df000017 	ldw	fp,0(sp)
   90508:	dec00104 	addi	sp,sp,4
   9050c:	f800283a 	ret

00090510 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   90510:	defffb04 	addi	sp,sp,-20
   90514:	df000415 	stw	fp,16(sp)
   90518:	df000404 	addi	fp,sp,16
   9051c:	e13ffe15 	stw	r4,-8(fp)
   90520:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   90524:	e0bfff17 	ldw	r2,-4(fp)
   90528:	10840070 	cmpltui	r2,r2,4097
   9052c:	1000021e 	bne	r2,zero,90538 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   90530:	00840004 	movi	r2,4096
   90534:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   90538:	e0fffe17 	ldw	r3,-8(fp)
   9053c:	e0bfff17 	ldw	r2,-4(fp)
   90540:	1885883a 	add	r2,r3,r2
   90544:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   90548:	e0bffe17 	ldw	r2,-8(fp)
   9054c:	e0bffc15 	stw	r2,-16(fp)
   90550:	00000506 	br	90568 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   90554:	e0bffc17 	ldw	r2,-16(fp)
   90558:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   9055c:	e0bffc17 	ldw	r2,-16(fp)
   90560:	10800804 	addi	r2,r2,32
   90564:	e0bffc15 	stw	r2,-16(fp)
   90568:	e0fffc17 	ldw	r3,-16(fp)
   9056c:	e0bffd17 	ldw	r2,-12(fp)
   90570:	18bff836 	bltu	r3,r2,90554 <__alt_data_end+0xfffc4a64>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   90574:	e0bffe17 	ldw	r2,-8(fp)
   90578:	108007cc 	andi	r2,r2,31
   9057c:	10000226 	beq	r2,zero,90588 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   90580:	e0bffc17 	ldw	r2,-16(fp)
   90584:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   90588:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   9058c:	0001883a 	nop
   90590:	e037883a 	mov	sp,fp
   90594:	df000017 	ldw	fp,0(sp)
   90598:	dec00104 	addi	sp,sp,4
   9059c:	f800283a 	ret

000905a0 <atexit>:
   905a0:	200b883a 	mov	r5,r4
   905a4:	000f883a 	mov	r7,zero
   905a8:	000d883a 	mov	r6,zero
   905ac:	0009883a 	mov	r4,zero
   905b0:	00906681 	jmpi	90668 <__register_exitproc>

000905b4 <exit>:
   905b4:	defffe04 	addi	sp,sp,-8
   905b8:	000b883a 	mov	r5,zero
   905bc:	dc000015 	stw	r16,0(sp)
   905c0:	dfc00115 	stw	ra,4(sp)
   905c4:	2021883a 	mov	r16,r4
   905c8:	00907800 	call	90780 <__call_exitprocs>
   905cc:	00800274 	movhi	r2,9
   905d0:	108a3904 	addi	r2,r2,10468
   905d4:	11000017 	ldw	r4,0(r2)
   905d8:	20800f17 	ldw	r2,60(r4)
   905dc:	10000126 	beq	r2,zero,905e4 <exit+0x30>
   905e0:	103ee83a 	callr	r2
   905e4:	8009883a 	mov	r4,r16
   905e8:	00909000 	call	90900 <_exit>

000905ec <memcmp>:
   905ec:	01c000c4 	movi	r7,3
   905f0:	3980192e 	bgeu	r7,r6,90658 <memcmp+0x6c>
   905f4:	2144b03a 	or	r2,r4,r5
   905f8:	11c4703a 	and	r2,r2,r7
   905fc:	10000f26 	beq	r2,zero,9063c <memcmp+0x50>
   90600:	20800003 	ldbu	r2,0(r4)
   90604:	28c00003 	ldbu	r3,0(r5)
   90608:	10c0151e 	bne	r2,r3,90660 <memcmp+0x74>
   9060c:	31bfff84 	addi	r6,r6,-2
   90610:	01ffffc4 	movi	r7,-1
   90614:	00000406 	br	90628 <memcmp+0x3c>
   90618:	20800003 	ldbu	r2,0(r4)
   9061c:	28c00003 	ldbu	r3,0(r5)
   90620:	31bfffc4 	addi	r6,r6,-1
   90624:	10c00e1e 	bne	r2,r3,90660 <memcmp+0x74>
   90628:	21000044 	addi	r4,r4,1
   9062c:	29400044 	addi	r5,r5,1
   90630:	31fff91e 	bne	r6,r7,90618 <__alt_data_end+0xfffc4b28>
   90634:	0005883a 	mov	r2,zero
   90638:	f800283a 	ret
   9063c:	20c00017 	ldw	r3,0(r4)
   90640:	28800017 	ldw	r2,0(r5)
   90644:	18bfee1e 	bne	r3,r2,90600 <__alt_data_end+0xfffc4b10>
   90648:	31bfff04 	addi	r6,r6,-4
   9064c:	21000104 	addi	r4,r4,4
   90650:	29400104 	addi	r5,r5,4
   90654:	39bff936 	bltu	r7,r6,9063c <__alt_data_end+0xfffc4b4c>
   90658:	303fe91e 	bne	r6,zero,90600 <__alt_data_end+0xfffc4b10>
   9065c:	003ff506 	br	90634 <__alt_data_end+0xfffc4b44>
   90660:	10c5c83a 	sub	r2,r2,r3
   90664:	f800283a 	ret

00090668 <__register_exitproc>:
   90668:	defffa04 	addi	sp,sp,-24
   9066c:	dc000315 	stw	r16,12(sp)
   90670:	04000274 	movhi	r16,9
   90674:	840a3904 	addi	r16,r16,10468
   90678:	80c00017 	ldw	r3,0(r16)
   9067c:	dc400415 	stw	r17,16(sp)
   90680:	dfc00515 	stw	ra,20(sp)
   90684:	18805217 	ldw	r2,328(r3)
   90688:	2023883a 	mov	r17,r4
   9068c:	10003726 	beq	r2,zero,9076c <__register_exitproc+0x104>
   90690:	10c00117 	ldw	r3,4(r2)
   90694:	010007c4 	movi	r4,31
   90698:	20c00e16 	blt	r4,r3,906d4 <__register_exitproc+0x6c>
   9069c:	1a000044 	addi	r8,r3,1
   906a0:	8800221e 	bne	r17,zero,9072c <__register_exitproc+0xc4>
   906a4:	18c00084 	addi	r3,r3,2
   906a8:	18c7883a 	add	r3,r3,r3
   906ac:	18c7883a 	add	r3,r3,r3
   906b0:	12000115 	stw	r8,4(r2)
   906b4:	10c7883a 	add	r3,r2,r3
   906b8:	19400015 	stw	r5,0(r3)
   906bc:	0005883a 	mov	r2,zero
   906c0:	dfc00517 	ldw	ra,20(sp)
   906c4:	dc400417 	ldw	r17,16(sp)
   906c8:	dc000317 	ldw	r16,12(sp)
   906cc:	dec00604 	addi	sp,sp,24
   906d0:	f800283a 	ret
   906d4:	00800034 	movhi	r2,0
   906d8:	10800004 	addi	r2,r2,0
   906dc:	10002626 	beq	r2,zero,90778 <__register_exitproc+0x110>
   906e0:	01006404 	movi	r4,400
   906e4:	d9400015 	stw	r5,0(sp)
   906e8:	d9800115 	stw	r6,4(sp)
   906ec:	d9c00215 	stw	r7,8(sp)
   906f0:	00000000 	call	0 <__reset-0x80000>
   906f4:	d9400017 	ldw	r5,0(sp)
   906f8:	d9800117 	ldw	r6,4(sp)
   906fc:	d9c00217 	ldw	r7,8(sp)
   90700:	10001d26 	beq	r2,zero,90778 <__register_exitproc+0x110>
   90704:	81000017 	ldw	r4,0(r16)
   90708:	10000115 	stw	zero,4(r2)
   9070c:	02000044 	movi	r8,1
   90710:	22405217 	ldw	r9,328(r4)
   90714:	0007883a 	mov	r3,zero
   90718:	12400015 	stw	r9,0(r2)
   9071c:	20805215 	stw	r2,328(r4)
   90720:	10006215 	stw	zero,392(r2)
   90724:	10006315 	stw	zero,396(r2)
   90728:	883fde26 	beq	r17,zero,906a4 <__alt_data_end+0xfffc4bb4>
   9072c:	18c9883a 	add	r4,r3,r3
   90730:	2109883a 	add	r4,r4,r4
   90734:	1109883a 	add	r4,r2,r4
   90738:	21802215 	stw	r6,136(r4)
   9073c:	01800044 	movi	r6,1
   90740:	12406217 	ldw	r9,392(r2)
   90744:	30cc983a 	sll	r6,r6,r3
   90748:	4992b03a 	or	r9,r9,r6
   9074c:	12406215 	stw	r9,392(r2)
   90750:	21c04215 	stw	r7,264(r4)
   90754:	01000084 	movi	r4,2
   90758:	893fd21e 	bne	r17,r4,906a4 <__alt_data_end+0xfffc4bb4>
   9075c:	11006317 	ldw	r4,396(r2)
   90760:	218cb03a 	or	r6,r4,r6
   90764:	11806315 	stw	r6,396(r2)
   90768:	003fce06 	br	906a4 <__alt_data_end+0xfffc4bb4>
   9076c:	18805304 	addi	r2,r3,332
   90770:	18805215 	stw	r2,328(r3)
   90774:	003fc606 	br	90690 <__alt_data_end+0xfffc4ba0>
   90778:	00bfffc4 	movi	r2,-1
   9077c:	003fd006 	br	906c0 <__alt_data_end+0xfffc4bd0>

00090780 <__call_exitprocs>:
   90780:	defff504 	addi	sp,sp,-44
   90784:	df000915 	stw	fp,36(sp)
   90788:	dd400615 	stw	r21,24(sp)
   9078c:	dc800315 	stw	r18,12(sp)
   90790:	dfc00a15 	stw	ra,40(sp)
   90794:	ddc00815 	stw	r23,32(sp)
   90798:	dd800715 	stw	r22,28(sp)
   9079c:	dd000515 	stw	r20,20(sp)
   907a0:	dcc00415 	stw	r19,16(sp)
   907a4:	dc400215 	stw	r17,8(sp)
   907a8:	dc000115 	stw	r16,4(sp)
   907ac:	d9000015 	stw	r4,0(sp)
   907b0:	2839883a 	mov	fp,r5
   907b4:	04800044 	movi	r18,1
   907b8:	057fffc4 	movi	r21,-1
   907bc:	00800274 	movhi	r2,9
   907c0:	108a3904 	addi	r2,r2,10468
   907c4:	12000017 	ldw	r8,0(r2)
   907c8:	45005217 	ldw	r20,328(r8)
   907cc:	44c05204 	addi	r19,r8,328
   907d0:	a0001c26 	beq	r20,zero,90844 <__call_exitprocs+0xc4>
   907d4:	a0800117 	ldw	r2,4(r20)
   907d8:	15ffffc4 	addi	r23,r2,-1
   907dc:	b8000d16 	blt	r23,zero,90814 <__call_exitprocs+0x94>
   907e0:	14000044 	addi	r16,r2,1
   907e4:	8421883a 	add	r16,r16,r16
   907e8:	8421883a 	add	r16,r16,r16
   907ec:	84402004 	addi	r17,r16,128
   907f0:	a463883a 	add	r17,r20,r17
   907f4:	a421883a 	add	r16,r20,r16
   907f8:	e0001e26 	beq	fp,zero,90874 <__call_exitprocs+0xf4>
   907fc:	80804017 	ldw	r2,256(r16)
   90800:	e0801c26 	beq	fp,r2,90874 <__call_exitprocs+0xf4>
   90804:	bdffffc4 	addi	r23,r23,-1
   90808:	843fff04 	addi	r16,r16,-4
   9080c:	8c7fff04 	addi	r17,r17,-4
   90810:	bd7ff91e 	bne	r23,r21,907f8 <__alt_data_end+0xfffc4d08>
   90814:	00800034 	movhi	r2,0
   90818:	10800004 	addi	r2,r2,0
   9081c:	10000926 	beq	r2,zero,90844 <__call_exitprocs+0xc4>
   90820:	a0800117 	ldw	r2,4(r20)
   90824:	1000301e 	bne	r2,zero,908e8 <__call_exitprocs+0x168>
   90828:	a0800017 	ldw	r2,0(r20)
   9082c:	10003226 	beq	r2,zero,908f8 <__call_exitprocs+0x178>
   90830:	a009883a 	mov	r4,r20
   90834:	98800015 	stw	r2,0(r19)
   90838:	00000000 	call	0 <__reset-0x80000>
   9083c:	9d000017 	ldw	r20,0(r19)
   90840:	a03fe41e 	bne	r20,zero,907d4 <__alt_data_end+0xfffc4ce4>
   90844:	dfc00a17 	ldw	ra,40(sp)
   90848:	df000917 	ldw	fp,36(sp)
   9084c:	ddc00817 	ldw	r23,32(sp)
   90850:	dd800717 	ldw	r22,28(sp)
   90854:	dd400617 	ldw	r21,24(sp)
   90858:	dd000517 	ldw	r20,20(sp)
   9085c:	dcc00417 	ldw	r19,16(sp)
   90860:	dc800317 	ldw	r18,12(sp)
   90864:	dc400217 	ldw	r17,8(sp)
   90868:	dc000117 	ldw	r16,4(sp)
   9086c:	dec00b04 	addi	sp,sp,44
   90870:	f800283a 	ret
   90874:	a0800117 	ldw	r2,4(r20)
   90878:	80c00017 	ldw	r3,0(r16)
   9087c:	10bfffc4 	addi	r2,r2,-1
   90880:	15c01426 	beq	r2,r23,908d4 <__call_exitprocs+0x154>
   90884:	80000015 	stw	zero,0(r16)
   90888:	183fde26 	beq	r3,zero,90804 <__alt_data_end+0xfffc4d14>
   9088c:	95c8983a 	sll	r4,r18,r23
   90890:	a0806217 	ldw	r2,392(r20)
   90894:	a5800117 	ldw	r22,4(r20)
   90898:	2084703a 	and	r2,r4,r2
   9089c:	10000b26 	beq	r2,zero,908cc <__call_exitprocs+0x14c>
   908a0:	a0806317 	ldw	r2,396(r20)
   908a4:	2088703a 	and	r4,r4,r2
   908a8:	20000c1e 	bne	r4,zero,908dc <__call_exitprocs+0x15c>
   908ac:	89400017 	ldw	r5,0(r17)
   908b0:	d9000017 	ldw	r4,0(sp)
   908b4:	183ee83a 	callr	r3
   908b8:	a0800117 	ldw	r2,4(r20)
   908bc:	15bfbf1e 	bne	r2,r22,907bc <__alt_data_end+0xfffc4ccc>
   908c0:	98800017 	ldw	r2,0(r19)
   908c4:	153fcf26 	beq	r2,r20,90804 <__alt_data_end+0xfffc4d14>
   908c8:	003fbc06 	br	907bc <__alt_data_end+0xfffc4ccc>
   908cc:	183ee83a 	callr	r3
   908d0:	003ff906 	br	908b8 <__alt_data_end+0xfffc4dc8>
   908d4:	a5c00115 	stw	r23,4(r20)
   908d8:	003feb06 	br	90888 <__alt_data_end+0xfffc4d98>
   908dc:	89000017 	ldw	r4,0(r17)
   908e0:	183ee83a 	callr	r3
   908e4:	003ff406 	br	908b8 <__alt_data_end+0xfffc4dc8>
   908e8:	a0800017 	ldw	r2,0(r20)
   908ec:	a027883a 	mov	r19,r20
   908f0:	1029883a 	mov	r20,r2
   908f4:	003fb606 	br	907d0 <__alt_data_end+0xfffc4ce0>
   908f8:	0005883a 	mov	r2,zero
   908fc:	003ffb06 	br	908ec <__alt_data_end+0xfffc4dfc>

00090900 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   90900:	defffd04 	addi	sp,sp,-12
   90904:	df000215 	stw	fp,8(sp)
   90908:	df000204 	addi	fp,sp,8
   9090c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   90910:	0001883a 	nop
   90914:	e0bfff17 	ldw	r2,-4(fp)
   90918:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   9091c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   90920:	10000226 	beq	r2,zero,9092c <_exit+0x2c>
    ALT_SIM_FAIL();
   90924:	002af070 	cmpltui	zero,zero,43969
   90928:	00000106 	br	90930 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   9092c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   90930:	003fff06 	br	90930 <__alt_data_end+0xfffc4e40>
