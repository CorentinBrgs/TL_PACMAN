// HDMI_QSYS_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.0 614

`timescale 1 ps / 1 ps
module HDMI_QSYS_mm_interconnect_0 (
		input  wire        clk_50_clk_clk,                               //                             clk_50_clk.clk
		input  wire        pll_sys_outclk0_clk,                          //                        pll_sys_outclk0.clk
		input  wire        nios2_qsys_reset_reset_bridge_in_reset_reset, // nios2_qsys_reset_reset_bridge_in_reset.reset
		input  wire        position_reset_reset_bridge_in_reset_reset,   //   position_reset_reset_bridge_in_reset.reset
		input  wire [20:0] nios2_qsys_data_master_address,               //                 nios2_qsys_data_master.address
		output wire        nios2_qsys_data_master_waitrequest,           //                                       .waitrequest
		input  wire [3:0]  nios2_qsys_data_master_byteenable,            //                                       .byteenable
		input  wire        nios2_qsys_data_master_read,                  //                                       .read
		output wire [31:0] nios2_qsys_data_master_readdata,              //                                       .readdata
		output wire        nios2_qsys_data_master_readdatavalid,         //                                       .readdatavalid
		input  wire        nios2_qsys_data_master_write,                 //                                       .write
		input  wire [31:0] nios2_qsys_data_master_writedata,             //                                       .writedata
		input  wire        nios2_qsys_data_master_debugaccess,           //                                       .debugaccess
		input  wire [20:0] nios2_qsys_instruction_master_address,        //          nios2_qsys_instruction_master.address
		output wire        nios2_qsys_instruction_master_waitrequest,    //                                       .waitrequest
		input  wire        nios2_qsys_instruction_master_read,           //                                       .read
		output wire [31:0] nios2_qsys_instruction_master_readdata,       //                                       .readdata
		output wire        nios2_qsys_instruction_master_readdatavalid,  //                                       .readdatavalid
		output wire [1:0]  background_data_s1_address,                   //                     background_data_s1.address
		output wire        background_data_s1_write,                     //                                       .write
		input  wire [31:0] background_data_s1_readdata,                  //                                       .readdata
		output wire [31:0] background_data_s1_writedata,                 //                                       .writedata
		output wire        background_data_s1_chipselect,                //                                       .chipselect
		output wire [1:0]  background_wr_s1_address,                     //                       background_wr_s1.address
		output wire        background_wr_s1_write,                       //                                       .write
		input  wire [31:0] background_wr_s1_readdata,                    //                                       .readdata
		output wire [31:0] background_wr_s1_writedata,                   //                                       .writedata
		output wire        background_wr_s1_chipselect,                  //                                       .chipselect
		output wire [1:0]  down_button_s1_address,                       //                         down_button_s1.address
		output wire        down_button_s1_write,                         //                                       .write
		input  wire [31:0] down_button_s1_readdata,                      //                                       .readdata
		output wire [31:0] down_button_s1_writedata,                     //                                       .writedata
		output wire        down_button_s1_chipselect,                    //                                       .chipselect
		output wire [1:0]  food_layer_data_s1_address,                   //                     food_layer_data_s1.address
		output wire        food_layer_data_s1_write,                     //                                       .write
		input  wire [31:0] food_layer_data_s1_readdata,                  //                                       .readdata
		output wire [31:0] food_layer_data_s1_writedata,                 //                                       .writedata
		output wire        food_layer_data_s1_chipselect,                //                                       .chipselect
		output wire [1:0]  food_layer_wr_s1_address,                     //                       food_layer_wr_s1.address
		output wire        food_layer_wr_s1_write,                       //                                       .write
		input  wire [31:0] food_layer_wr_s1_readdata,                    //                                       .readdata
		output wire [31:0] food_layer_wr_s1_writedata,                   //                                       .writedata
		output wire        food_layer_wr_s1_chipselect,                  //                                       .chipselect
		output wire [1:0]  hdmi_tx_int_n_s1_address,                     //                       hdmi_tx_int_n_s1.address
		output wire        hdmi_tx_int_n_s1_write,                       //                                       .write
		input  wire [31:0] hdmi_tx_int_n_s1_readdata,                    //                                       .readdata
		output wire [31:0] hdmi_tx_int_n_s1_writedata,                   //                                       .writedata
		output wire        hdmi_tx_int_n_s1_chipselect,                  //                                       .chipselect
		output wire [1:0]  i2c_scl_s1_address,                           //                             i2c_scl_s1.address
		output wire        i2c_scl_s1_write,                             //                                       .write
		input  wire [31:0] i2c_scl_s1_readdata,                          //                                       .readdata
		output wire [31:0] i2c_scl_s1_writedata,                         //                                       .writedata
		output wire        i2c_scl_s1_chipselect,                        //                                       .chipselect
		output wire [1:0]  i2c_sda_s1_address,                           //                             i2c_sda_s1.address
		output wire        i2c_sda_s1_write,                             //                                       .write
		input  wire [31:0] i2c_sda_s1_readdata,                          //                                       .readdata
		output wire [31:0] i2c_sda_s1_writedata,                         //                                       .writedata
		output wire        i2c_sda_s1_chipselect,                        //                                       .chipselect
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,          //            jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,            //                                       .write
		output wire        jtag_uart_avalon_jtag_slave_read,             //                                       .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,         //                                       .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,        //                                       .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,      //                                       .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,       //                                       .chipselect
		output wire [1:0]  led_s1_address,                               //                                 led_s1.address
		output wire        led_s1_write,                                 //                                       .write
		input  wire [31:0] led_s1_readdata,                              //                                       .readdata
		output wire [31:0] led_s1_writedata,                             //                                       .writedata
		output wire        led_s1_chipselect,                            //                                       .chipselect
		output wire [1:0]  left_button_s1_address,                       //                         left_button_s1.address
		output wire        left_button_s1_write,                         //                                       .write
		input  wire [31:0] left_button_s1_readdata,                      //                                       .readdata
		output wire [31:0] left_button_s1_writedata,                     //                                       .writedata
		output wire        left_button_s1_chipselect,                    //                                       .chipselect
		output wire [8:0]  nios2_qsys_debug_mem_slave_address,           //             nios2_qsys_debug_mem_slave.address
		output wire        nios2_qsys_debug_mem_slave_write,             //                                       .write
		output wire        nios2_qsys_debug_mem_slave_read,              //                                       .read
		input  wire [31:0] nios2_qsys_debug_mem_slave_readdata,          //                                       .readdata
		output wire [31:0] nios2_qsys_debug_mem_slave_writedata,         //                                       .writedata
		output wire [3:0]  nios2_qsys_debug_mem_slave_byteenable,        //                                       .byteenable
		input  wire        nios2_qsys_debug_mem_slave_waitrequest,       //                                       .waitrequest
		output wire        nios2_qsys_debug_mem_slave_debugaccess,       //                                       .debugaccess
		output wire [16:0] onchip_memory2_s1_address,                    //                      onchip_memory2_s1.address
		output wire        onchip_memory2_s1_write,                      //                                       .write
		input  wire [31:0] onchip_memory2_s1_readdata,                   //                                       .readdata
		output wire [31:0] onchip_memory2_s1_writedata,                  //                                       .writedata
		output wire [3:0]  onchip_memory2_s1_byteenable,                 //                                       .byteenable
		output wire        onchip_memory2_s1_chipselect,                 //                                       .chipselect
		output wire        onchip_memory2_s1_clken,                      //                                       .clken
		output wire [1:0]  position_s1_address,                          //                            position_s1.address
		output wire        position_s1_write,                            //                                       .write
		input  wire [31:0] position_s1_readdata,                         //                                       .readdata
		output wire [31:0] position_s1_writedata,                        //                                       .writedata
		output wire        position_s1_chipselect,                       //                                       .chipselect
		output wire [1:0]  refresh_s1_address,                           //                             refresh_s1.address
		output wire        refresh_s1_write,                             //                                       .write
		input  wire [31:0] refresh_s1_readdata,                          //                                       .readdata
		output wire [31:0] refresh_s1_writedata,                         //                                       .writedata
		output wire        refresh_s1_chipselect,                        //                                       .chipselect
		output wire [1:0]  right_button_s1_address,                      //                        right_button_s1.address
		output wire        right_button_s1_write,                        //                                       .write
		input  wire [31:0] right_button_s1_readdata,                     //                                       .readdata
		output wire [31:0] right_button_s1_writedata,                    //                                       .writedata
		output wire        right_button_s1_chipselect,                   //                                       .chipselect
		output wire [0:0]  sysid_qsys_control_slave_address,             //               sysid_qsys_control_slave.address
		input  wire [31:0] sysid_qsys_control_slave_readdata,            //                                       .readdata
		output wire [2:0]  timer_s1_address,                             //                               timer_s1.address
		output wire        timer_s1_write,                               //                                       .write
		input  wire [15:0] timer_s1_readdata,                            //                                       .readdata
		output wire [15:0] timer_s1_writedata,                           //                                       .writedata
		output wire        timer_s1_chipselect,                          //                                       .chipselect
		output wire [1:0]  up_button_s1_address,                         //                           up_button_s1.address
		output wire        up_button_s1_write,                           //                                       .write
		input  wire [31:0] up_button_s1_readdata,                        //                                       .readdata
		output wire [31:0] up_button_s1_writedata,                       //                                       .writedata
		output wire        up_button_s1_chipselect                       //                                       .chipselect
	);

	wire          nios2_qsys_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_qsys_data_master_agent:av_waitrequest -> nios2_qsys_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_qsys_data_master_translator_avalon_universal_master_0_readdata;             // nios2_qsys_data_master_agent:av_readdata -> nios2_qsys_data_master_translator:uav_readdata
	wire          nios2_qsys_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_qsys_data_master_translator:uav_debugaccess -> nios2_qsys_data_master_agent:av_debugaccess
	wire   [20:0] nios2_qsys_data_master_translator_avalon_universal_master_0_address;              // nios2_qsys_data_master_translator:uav_address -> nios2_qsys_data_master_agent:av_address
	wire          nios2_qsys_data_master_translator_avalon_universal_master_0_read;                 // nios2_qsys_data_master_translator:uav_read -> nios2_qsys_data_master_agent:av_read
	wire    [3:0] nios2_qsys_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_qsys_data_master_translator:uav_byteenable -> nios2_qsys_data_master_agent:av_byteenable
	wire          nios2_qsys_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_qsys_data_master_agent:av_readdatavalid -> nios2_qsys_data_master_translator:uav_readdatavalid
	wire          nios2_qsys_data_master_translator_avalon_universal_master_0_lock;                 // nios2_qsys_data_master_translator:uav_lock -> nios2_qsys_data_master_agent:av_lock
	wire          nios2_qsys_data_master_translator_avalon_universal_master_0_write;                // nios2_qsys_data_master_translator:uav_write -> nios2_qsys_data_master_agent:av_write
	wire   [31:0] nios2_qsys_data_master_translator_avalon_universal_master_0_writedata;            // nios2_qsys_data_master_translator:uav_writedata -> nios2_qsys_data_master_agent:av_writedata
	wire    [2:0] nios2_qsys_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_qsys_data_master_translator:uav_burstcount -> nios2_qsys_data_master_agent:av_burstcount
	wire          nios2_qsys_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_qsys_instruction_master_agent:av_waitrequest -> nios2_qsys_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_qsys_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_qsys_instruction_master_agent:av_readdata -> nios2_qsys_instruction_master_translator:uav_readdata
	wire          nios2_qsys_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_qsys_instruction_master_translator:uav_debugaccess -> nios2_qsys_instruction_master_agent:av_debugaccess
	wire   [20:0] nios2_qsys_instruction_master_translator_avalon_universal_master_0_address;       // nios2_qsys_instruction_master_translator:uav_address -> nios2_qsys_instruction_master_agent:av_address
	wire          nios2_qsys_instruction_master_translator_avalon_universal_master_0_read;          // nios2_qsys_instruction_master_translator:uav_read -> nios2_qsys_instruction_master_agent:av_read
	wire    [3:0] nios2_qsys_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_qsys_instruction_master_translator:uav_byteenable -> nios2_qsys_instruction_master_agent:av_byteenable
	wire          nios2_qsys_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_qsys_instruction_master_agent:av_readdatavalid -> nios2_qsys_instruction_master_translator:uav_readdatavalid
	wire          nios2_qsys_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_qsys_instruction_master_translator:uav_lock -> nios2_qsys_instruction_master_agent:av_lock
	wire          nios2_qsys_instruction_master_translator_avalon_universal_master_0_write;         // nios2_qsys_instruction_master_translator:uav_write -> nios2_qsys_instruction_master_agent:av_write
	wire   [31:0] nios2_qsys_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_qsys_instruction_master_translator:uav_writedata -> nios2_qsys_instruction_master_agent:av_writedata
	wire    [2:0] nios2_qsys_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_qsys_instruction_master_translator:uav_burstcount -> nios2_qsys_instruction_master_agent:av_burstcount
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                    // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                 // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                 // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [20:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                     // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                  // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                        // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                               // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                        // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                   // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                       // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                  // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [101:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                 // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                        // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                          // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                             // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [101:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                              // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                             // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                     // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                       // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                // cmd_mux:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [100:0] cmd_mux_src_data;                                                                 // cmd_mux:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [18:0] cmd_mux_src_channel;                                                              // cmd_mux:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                        // cmd_mux:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                          // cmd_mux:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] sysid_qsys_control_slave_agent_m0_readdata;                                       // sysid_qsys_control_slave_translator:uav_readdata -> sysid_qsys_control_slave_agent:m0_readdata
	wire          sysid_qsys_control_slave_agent_m0_waitrequest;                                    // sysid_qsys_control_slave_translator:uav_waitrequest -> sysid_qsys_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_control_slave_agent_m0_debugaccess;                                    // sysid_qsys_control_slave_agent:m0_debugaccess -> sysid_qsys_control_slave_translator:uav_debugaccess
	wire   [20:0] sysid_qsys_control_slave_agent_m0_address;                                        // sysid_qsys_control_slave_agent:m0_address -> sysid_qsys_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_control_slave_agent_m0_byteenable;                                     // sysid_qsys_control_slave_agent:m0_byteenable -> sysid_qsys_control_slave_translator:uav_byteenable
	wire          sysid_qsys_control_slave_agent_m0_read;                                           // sysid_qsys_control_slave_agent:m0_read -> sysid_qsys_control_slave_translator:uav_read
	wire          sysid_qsys_control_slave_agent_m0_readdatavalid;                                  // sysid_qsys_control_slave_translator:uav_readdatavalid -> sysid_qsys_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_control_slave_agent_m0_lock;                                           // sysid_qsys_control_slave_agent:m0_lock -> sysid_qsys_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_control_slave_agent_m0_writedata;                                      // sysid_qsys_control_slave_agent:m0_writedata -> sysid_qsys_control_slave_translator:uav_writedata
	wire          sysid_qsys_control_slave_agent_m0_write;                                          // sysid_qsys_control_slave_agent:m0_write -> sysid_qsys_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_control_slave_agent_m0_burstcount;                                     // sysid_qsys_control_slave_agent:m0_burstcount -> sysid_qsys_control_slave_translator:uav_burstcount
	wire          sysid_qsys_control_slave_agent_rf_source_valid;                                   // sysid_qsys_control_slave_agent:rf_source_valid -> sysid_qsys_control_slave_agent_rsp_fifo:in_valid
	wire  [101:0] sysid_qsys_control_slave_agent_rf_source_data;                                    // sysid_qsys_control_slave_agent:rf_source_data -> sysid_qsys_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_control_slave_agent_rf_source_ready;                                   // sysid_qsys_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_control_slave_agent:rf_source_ready
	wire          sysid_qsys_control_slave_agent_rf_source_startofpacket;                           // sysid_qsys_control_slave_agent:rf_source_startofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_control_slave_agent_rf_source_endofpacket;                             // sysid_qsys_control_slave_agent:rf_source_endofpacket -> sysid_qsys_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_valid;                                // sysid_qsys_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_control_slave_agent:rf_sink_valid
	wire  [101:0] sysid_qsys_control_slave_agent_rsp_fifo_out_data;                                 // sysid_qsys_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_control_slave_agent:rf_sink_data
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_ready;                                // sysid_qsys_control_slave_agent:rf_sink_ready -> sysid_qsys_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket;                        // sysid_qsys_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket;                          // sysid_qsys_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                            // cmd_mux_001:src_valid -> sysid_qsys_control_slave_agent:cp_valid
	wire  [100:0] cmd_mux_001_src_data;                                                             // cmd_mux_001:src_data -> sysid_qsys_control_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                            // sysid_qsys_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [18:0] cmd_mux_001_src_channel;                                                          // cmd_mux_001:src_channel -> sysid_qsys_control_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                    // cmd_mux_001:src_startofpacket -> sysid_qsys_control_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                      // cmd_mux_001:src_endofpacket -> sysid_qsys_control_slave_agent:cp_endofpacket
	wire   [31:0] nios2_qsys_debug_mem_slave_agent_m0_readdata;                                     // nios2_qsys_debug_mem_slave_translator:uav_readdata -> nios2_qsys_debug_mem_slave_agent:m0_readdata
	wire          nios2_qsys_debug_mem_slave_agent_m0_waitrequest;                                  // nios2_qsys_debug_mem_slave_translator:uav_waitrequest -> nios2_qsys_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_qsys_debug_mem_slave_agent_m0_debugaccess;                                  // nios2_qsys_debug_mem_slave_agent:m0_debugaccess -> nios2_qsys_debug_mem_slave_translator:uav_debugaccess
	wire   [20:0] nios2_qsys_debug_mem_slave_agent_m0_address;                                      // nios2_qsys_debug_mem_slave_agent:m0_address -> nios2_qsys_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_qsys_debug_mem_slave_agent_m0_byteenable;                                   // nios2_qsys_debug_mem_slave_agent:m0_byteenable -> nios2_qsys_debug_mem_slave_translator:uav_byteenable
	wire          nios2_qsys_debug_mem_slave_agent_m0_read;                                         // nios2_qsys_debug_mem_slave_agent:m0_read -> nios2_qsys_debug_mem_slave_translator:uav_read
	wire          nios2_qsys_debug_mem_slave_agent_m0_readdatavalid;                                // nios2_qsys_debug_mem_slave_translator:uav_readdatavalid -> nios2_qsys_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_qsys_debug_mem_slave_agent_m0_lock;                                         // nios2_qsys_debug_mem_slave_agent:m0_lock -> nios2_qsys_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_qsys_debug_mem_slave_agent_m0_writedata;                                    // nios2_qsys_debug_mem_slave_agent:m0_writedata -> nios2_qsys_debug_mem_slave_translator:uav_writedata
	wire          nios2_qsys_debug_mem_slave_agent_m0_write;                                        // nios2_qsys_debug_mem_slave_agent:m0_write -> nios2_qsys_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_qsys_debug_mem_slave_agent_m0_burstcount;                                   // nios2_qsys_debug_mem_slave_agent:m0_burstcount -> nios2_qsys_debug_mem_slave_translator:uav_burstcount
	wire          nios2_qsys_debug_mem_slave_agent_rf_source_valid;                                 // nios2_qsys_debug_mem_slave_agent:rf_source_valid -> nios2_qsys_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [101:0] nios2_qsys_debug_mem_slave_agent_rf_source_data;                                  // nios2_qsys_debug_mem_slave_agent:rf_source_data -> nios2_qsys_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_qsys_debug_mem_slave_agent_rf_source_ready;                                 // nios2_qsys_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_qsys_debug_mem_slave_agent:rf_source_ready
	wire          nios2_qsys_debug_mem_slave_agent_rf_source_startofpacket;                         // nios2_qsys_debug_mem_slave_agent:rf_source_startofpacket -> nios2_qsys_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_qsys_debug_mem_slave_agent_rf_source_endofpacket;                           // nios2_qsys_debug_mem_slave_agent:rf_source_endofpacket -> nios2_qsys_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_qsys_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios2_qsys_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_qsys_debug_mem_slave_agent:rf_sink_valid
	wire  [101:0] nios2_qsys_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios2_qsys_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_qsys_debug_mem_slave_agent:rf_sink_data
	wire          nios2_qsys_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios2_qsys_debug_mem_slave_agent:rf_sink_ready -> nios2_qsys_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_qsys_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_qsys_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_qsys_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_qsys_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_qsys_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_qsys_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                            // cmd_mux_002:src_valid -> nios2_qsys_debug_mem_slave_agent:cp_valid
	wire  [100:0] cmd_mux_002_src_data;                                                             // cmd_mux_002:src_data -> nios2_qsys_debug_mem_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                            // nios2_qsys_debug_mem_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [18:0] cmd_mux_002_src_channel;                                                          // cmd_mux_002:src_channel -> nios2_qsys_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                    // cmd_mux_002:src_startofpacket -> nios2_qsys_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                      // cmd_mux_002:src_endofpacket -> nios2_qsys_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] timer_s1_agent_m0_readdata;                                                       // timer_s1_translator:uav_readdata -> timer_s1_agent:m0_readdata
	wire          timer_s1_agent_m0_waitrequest;                                                    // timer_s1_translator:uav_waitrequest -> timer_s1_agent:m0_waitrequest
	wire          timer_s1_agent_m0_debugaccess;                                                    // timer_s1_agent:m0_debugaccess -> timer_s1_translator:uav_debugaccess
	wire   [20:0] timer_s1_agent_m0_address;                                                        // timer_s1_agent:m0_address -> timer_s1_translator:uav_address
	wire    [3:0] timer_s1_agent_m0_byteenable;                                                     // timer_s1_agent:m0_byteenable -> timer_s1_translator:uav_byteenable
	wire          timer_s1_agent_m0_read;                                                           // timer_s1_agent:m0_read -> timer_s1_translator:uav_read
	wire          timer_s1_agent_m0_readdatavalid;                                                  // timer_s1_translator:uav_readdatavalid -> timer_s1_agent:m0_readdatavalid
	wire          timer_s1_agent_m0_lock;                                                           // timer_s1_agent:m0_lock -> timer_s1_translator:uav_lock
	wire   [31:0] timer_s1_agent_m0_writedata;                                                      // timer_s1_agent:m0_writedata -> timer_s1_translator:uav_writedata
	wire          timer_s1_agent_m0_write;                                                          // timer_s1_agent:m0_write -> timer_s1_translator:uav_write
	wire    [2:0] timer_s1_agent_m0_burstcount;                                                     // timer_s1_agent:m0_burstcount -> timer_s1_translator:uav_burstcount
	wire          timer_s1_agent_rf_source_valid;                                                   // timer_s1_agent:rf_source_valid -> timer_s1_agent_rsp_fifo:in_valid
	wire  [101:0] timer_s1_agent_rf_source_data;                                                    // timer_s1_agent:rf_source_data -> timer_s1_agent_rsp_fifo:in_data
	wire          timer_s1_agent_rf_source_ready;                                                   // timer_s1_agent_rsp_fifo:in_ready -> timer_s1_agent:rf_source_ready
	wire          timer_s1_agent_rf_source_startofpacket;                                           // timer_s1_agent:rf_source_startofpacket -> timer_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_s1_agent_rf_source_endofpacket;                                             // timer_s1_agent:rf_source_endofpacket -> timer_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_s1_agent_rsp_fifo_out_valid;                                                // timer_s1_agent_rsp_fifo:out_valid -> timer_s1_agent:rf_sink_valid
	wire  [101:0] timer_s1_agent_rsp_fifo_out_data;                                                 // timer_s1_agent_rsp_fifo:out_data -> timer_s1_agent:rf_sink_data
	wire          timer_s1_agent_rsp_fifo_out_ready;                                                // timer_s1_agent:rf_sink_ready -> timer_s1_agent_rsp_fifo:out_ready
	wire          timer_s1_agent_rsp_fifo_out_startofpacket;                                        // timer_s1_agent_rsp_fifo:out_startofpacket -> timer_s1_agent:rf_sink_startofpacket
	wire          timer_s1_agent_rsp_fifo_out_endofpacket;                                          // timer_s1_agent_rsp_fifo:out_endofpacket -> timer_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                            // cmd_mux_003:src_valid -> timer_s1_agent:cp_valid
	wire  [100:0] cmd_mux_003_src_data;                                                             // cmd_mux_003:src_data -> timer_s1_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                            // timer_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [18:0] cmd_mux_003_src_channel;                                                          // cmd_mux_003:src_channel -> timer_s1_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                    // cmd_mux_003:src_startofpacket -> timer_s1_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                      // cmd_mux_003:src_endofpacket -> timer_s1_agent:cp_endofpacket
	wire   [31:0] onchip_memory2_s1_agent_m0_readdata;                                              // onchip_memory2_s1_translator:uav_readdata -> onchip_memory2_s1_agent:m0_readdata
	wire          onchip_memory2_s1_agent_m0_waitrequest;                                           // onchip_memory2_s1_translator:uav_waitrequest -> onchip_memory2_s1_agent:m0_waitrequest
	wire          onchip_memory2_s1_agent_m0_debugaccess;                                           // onchip_memory2_s1_agent:m0_debugaccess -> onchip_memory2_s1_translator:uav_debugaccess
	wire   [20:0] onchip_memory2_s1_agent_m0_address;                                               // onchip_memory2_s1_agent:m0_address -> onchip_memory2_s1_translator:uav_address
	wire    [3:0] onchip_memory2_s1_agent_m0_byteenable;                                            // onchip_memory2_s1_agent:m0_byteenable -> onchip_memory2_s1_translator:uav_byteenable
	wire          onchip_memory2_s1_agent_m0_read;                                                  // onchip_memory2_s1_agent:m0_read -> onchip_memory2_s1_translator:uav_read
	wire          onchip_memory2_s1_agent_m0_readdatavalid;                                         // onchip_memory2_s1_translator:uav_readdatavalid -> onchip_memory2_s1_agent:m0_readdatavalid
	wire          onchip_memory2_s1_agent_m0_lock;                                                  // onchip_memory2_s1_agent:m0_lock -> onchip_memory2_s1_translator:uav_lock
	wire   [31:0] onchip_memory2_s1_agent_m0_writedata;                                             // onchip_memory2_s1_agent:m0_writedata -> onchip_memory2_s1_translator:uav_writedata
	wire          onchip_memory2_s1_agent_m0_write;                                                 // onchip_memory2_s1_agent:m0_write -> onchip_memory2_s1_translator:uav_write
	wire    [2:0] onchip_memory2_s1_agent_m0_burstcount;                                            // onchip_memory2_s1_agent:m0_burstcount -> onchip_memory2_s1_translator:uav_burstcount
	wire          onchip_memory2_s1_agent_rf_source_valid;                                          // onchip_memory2_s1_agent:rf_source_valid -> onchip_memory2_s1_agent_rsp_fifo:in_valid
	wire  [101:0] onchip_memory2_s1_agent_rf_source_data;                                           // onchip_memory2_s1_agent:rf_source_data -> onchip_memory2_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_s1_agent_rf_source_ready;                                          // onchip_memory2_s1_agent_rsp_fifo:in_ready -> onchip_memory2_s1_agent:rf_source_ready
	wire          onchip_memory2_s1_agent_rf_source_startofpacket;                                  // onchip_memory2_s1_agent:rf_source_startofpacket -> onchip_memory2_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_s1_agent_rf_source_endofpacket;                                    // onchip_memory2_s1_agent:rf_source_endofpacket -> onchip_memory2_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_s1_agent_rsp_fifo_out_valid;                                       // onchip_memory2_s1_agent_rsp_fifo:out_valid -> onchip_memory2_s1_agent:rf_sink_valid
	wire  [101:0] onchip_memory2_s1_agent_rsp_fifo_out_data;                                        // onchip_memory2_s1_agent_rsp_fifo:out_data -> onchip_memory2_s1_agent:rf_sink_data
	wire          onchip_memory2_s1_agent_rsp_fifo_out_ready;                                       // onchip_memory2_s1_agent:rf_sink_ready -> onchip_memory2_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_s1_agent_rsp_fifo_out_startofpacket;                               // onchip_memory2_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_s1_agent_rsp_fifo_out_endofpacket;                                 // onchip_memory2_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                            // cmd_mux_004:src_valid -> onchip_memory2_s1_agent:cp_valid
	wire  [100:0] cmd_mux_004_src_data;                                                             // cmd_mux_004:src_data -> onchip_memory2_s1_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                            // onchip_memory2_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [18:0] cmd_mux_004_src_channel;                                                          // cmd_mux_004:src_channel -> onchip_memory2_s1_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                    // cmd_mux_004:src_startofpacket -> onchip_memory2_s1_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                      // cmd_mux_004:src_endofpacket -> onchip_memory2_s1_agent:cp_endofpacket
	wire   [31:0] i2c_sda_s1_agent_m0_readdata;                                                     // i2c_sda_s1_translator:uav_readdata -> i2c_sda_s1_agent:m0_readdata
	wire          i2c_sda_s1_agent_m0_waitrequest;                                                  // i2c_sda_s1_translator:uav_waitrequest -> i2c_sda_s1_agent:m0_waitrequest
	wire          i2c_sda_s1_agent_m0_debugaccess;                                                  // i2c_sda_s1_agent:m0_debugaccess -> i2c_sda_s1_translator:uav_debugaccess
	wire   [20:0] i2c_sda_s1_agent_m0_address;                                                      // i2c_sda_s1_agent:m0_address -> i2c_sda_s1_translator:uav_address
	wire    [3:0] i2c_sda_s1_agent_m0_byteenable;                                                   // i2c_sda_s1_agent:m0_byteenable -> i2c_sda_s1_translator:uav_byteenable
	wire          i2c_sda_s1_agent_m0_read;                                                         // i2c_sda_s1_agent:m0_read -> i2c_sda_s1_translator:uav_read
	wire          i2c_sda_s1_agent_m0_readdatavalid;                                                // i2c_sda_s1_translator:uav_readdatavalid -> i2c_sda_s1_agent:m0_readdatavalid
	wire          i2c_sda_s1_agent_m0_lock;                                                         // i2c_sda_s1_agent:m0_lock -> i2c_sda_s1_translator:uav_lock
	wire   [31:0] i2c_sda_s1_agent_m0_writedata;                                                    // i2c_sda_s1_agent:m0_writedata -> i2c_sda_s1_translator:uav_writedata
	wire          i2c_sda_s1_agent_m0_write;                                                        // i2c_sda_s1_agent:m0_write -> i2c_sda_s1_translator:uav_write
	wire    [2:0] i2c_sda_s1_agent_m0_burstcount;                                                   // i2c_sda_s1_agent:m0_burstcount -> i2c_sda_s1_translator:uav_burstcount
	wire          i2c_sda_s1_agent_rf_source_valid;                                                 // i2c_sda_s1_agent:rf_source_valid -> i2c_sda_s1_agent_rsp_fifo:in_valid
	wire  [101:0] i2c_sda_s1_agent_rf_source_data;                                                  // i2c_sda_s1_agent:rf_source_data -> i2c_sda_s1_agent_rsp_fifo:in_data
	wire          i2c_sda_s1_agent_rf_source_ready;                                                 // i2c_sda_s1_agent_rsp_fifo:in_ready -> i2c_sda_s1_agent:rf_source_ready
	wire          i2c_sda_s1_agent_rf_source_startofpacket;                                         // i2c_sda_s1_agent:rf_source_startofpacket -> i2c_sda_s1_agent_rsp_fifo:in_startofpacket
	wire          i2c_sda_s1_agent_rf_source_endofpacket;                                           // i2c_sda_s1_agent:rf_source_endofpacket -> i2c_sda_s1_agent_rsp_fifo:in_endofpacket
	wire          i2c_sda_s1_agent_rsp_fifo_out_valid;                                              // i2c_sda_s1_agent_rsp_fifo:out_valid -> i2c_sda_s1_agent:rf_sink_valid
	wire  [101:0] i2c_sda_s1_agent_rsp_fifo_out_data;                                               // i2c_sda_s1_agent_rsp_fifo:out_data -> i2c_sda_s1_agent:rf_sink_data
	wire          i2c_sda_s1_agent_rsp_fifo_out_ready;                                              // i2c_sda_s1_agent:rf_sink_ready -> i2c_sda_s1_agent_rsp_fifo:out_ready
	wire          i2c_sda_s1_agent_rsp_fifo_out_startofpacket;                                      // i2c_sda_s1_agent_rsp_fifo:out_startofpacket -> i2c_sda_s1_agent:rf_sink_startofpacket
	wire          i2c_sda_s1_agent_rsp_fifo_out_endofpacket;                                        // i2c_sda_s1_agent_rsp_fifo:out_endofpacket -> i2c_sda_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                            // cmd_mux_005:src_valid -> i2c_sda_s1_agent:cp_valid
	wire  [100:0] cmd_mux_005_src_data;                                                             // cmd_mux_005:src_data -> i2c_sda_s1_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                            // i2c_sda_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [18:0] cmd_mux_005_src_channel;                                                          // cmd_mux_005:src_channel -> i2c_sda_s1_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                    // cmd_mux_005:src_startofpacket -> i2c_sda_s1_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                      // cmd_mux_005:src_endofpacket -> i2c_sda_s1_agent:cp_endofpacket
	wire   [31:0] i2c_scl_s1_agent_m0_readdata;                                                     // i2c_scl_s1_translator:uav_readdata -> i2c_scl_s1_agent:m0_readdata
	wire          i2c_scl_s1_agent_m0_waitrequest;                                                  // i2c_scl_s1_translator:uav_waitrequest -> i2c_scl_s1_agent:m0_waitrequest
	wire          i2c_scl_s1_agent_m0_debugaccess;                                                  // i2c_scl_s1_agent:m0_debugaccess -> i2c_scl_s1_translator:uav_debugaccess
	wire   [20:0] i2c_scl_s1_agent_m0_address;                                                      // i2c_scl_s1_agent:m0_address -> i2c_scl_s1_translator:uav_address
	wire    [3:0] i2c_scl_s1_agent_m0_byteenable;                                                   // i2c_scl_s1_agent:m0_byteenable -> i2c_scl_s1_translator:uav_byteenable
	wire          i2c_scl_s1_agent_m0_read;                                                         // i2c_scl_s1_agent:m0_read -> i2c_scl_s1_translator:uav_read
	wire          i2c_scl_s1_agent_m0_readdatavalid;                                                // i2c_scl_s1_translator:uav_readdatavalid -> i2c_scl_s1_agent:m0_readdatavalid
	wire          i2c_scl_s1_agent_m0_lock;                                                         // i2c_scl_s1_agent:m0_lock -> i2c_scl_s1_translator:uav_lock
	wire   [31:0] i2c_scl_s1_agent_m0_writedata;                                                    // i2c_scl_s1_agent:m0_writedata -> i2c_scl_s1_translator:uav_writedata
	wire          i2c_scl_s1_agent_m0_write;                                                        // i2c_scl_s1_agent:m0_write -> i2c_scl_s1_translator:uav_write
	wire    [2:0] i2c_scl_s1_agent_m0_burstcount;                                                   // i2c_scl_s1_agent:m0_burstcount -> i2c_scl_s1_translator:uav_burstcount
	wire          i2c_scl_s1_agent_rf_source_valid;                                                 // i2c_scl_s1_agent:rf_source_valid -> i2c_scl_s1_agent_rsp_fifo:in_valid
	wire  [101:0] i2c_scl_s1_agent_rf_source_data;                                                  // i2c_scl_s1_agent:rf_source_data -> i2c_scl_s1_agent_rsp_fifo:in_data
	wire          i2c_scl_s1_agent_rf_source_ready;                                                 // i2c_scl_s1_agent_rsp_fifo:in_ready -> i2c_scl_s1_agent:rf_source_ready
	wire          i2c_scl_s1_agent_rf_source_startofpacket;                                         // i2c_scl_s1_agent:rf_source_startofpacket -> i2c_scl_s1_agent_rsp_fifo:in_startofpacket
	wire          i2c_scl_s1_agent_rf_source_endofpacket;                                           // i2c_scl_s1_agent:rf_source_endofpacket -> i2c_scl_s1_agent_rsp_fifo:in_endofpacket
	wire          i2c_scl_s1_agent_rsp_fifo_out_valid;                                              // i2c_scl_s1_agent_rsp_fifo:out_valid -> i2c_scl_s1_agent:rf_sink_valid
	wire  [101:0] i2c_scl_s1_agent_rsp_fifo_out_data;                                               // i2c_scl_s1_agent_rsp_fifo:out_data -> i2c_scl_s1_agent:rf_sink_data
	wire          i2c_scl_s1_agent_rsp_fifo_out_ready;                                              // i2c_scl_s1_agent:rf_sink_ready -> i2c_scl_s1_agent_rsp_fifo:out_ready
	wire          i2c_scl_s1_agent_rsp_fifo_out_startofpacket;                                      // i2c_scl_s1_agent_rsp_fifo:out_startofpacket -> i2c_scl_s1_agent:rf_sink_startofpacket
	wire          i2c_scl_s1_agent_rsp_fifo_out_endofpacket;                                        // i2c_scl_s1_agent_rsp_fifo:out_endofpacket -> i2c_scl_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                            // cmd_mux_006:src_valid -> i2c_scl_s1_agent:cp_valid
	wire  [100:0] cmd_mux_006_src_data;                                                             // cmd_mux_006:src_data -> i2c_scl_s1_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                            // i2c_scl_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [18:0] cmd_mux_006_src_channel;                                                          // cmd_mux_006:src_channel -> i2c_scl_s1_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                    // cmd_mux_006:src_startofpacket -> i2c_scl_s1_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                      // cmd_mux_006:src_endofpacket -> i2c_scl_s1_agent:cp_endofpacket
	wire   [31:0] led_s1_agent_m0_readdata;                                                         // led_s1_translator:uav_readdata -> led_s1_agent:m0_readdata
	wire          led_s1_agent_m0_waitrequest;                                                      // led_s1_translator:uav_waitrequest -> led_s1_agent:m0_waitrequest
	wire          led_s1_agent_m0_debugaccess;                                                      // led_s1_agent:m0_debugaccess -> led_s1_translator:uav_debugaccess
	wire   [20:0] led_s1_agent_m0_address;                                                          // led_s1_agent:m0_address -> led_s1_translator:uav_address
	wire    [3:0] led_s1_agent_m0_byteenable;                                                       // led_s1_agent:m0_byteenable -> led_s1_translator:uav_byteenable
	wire          led_s1_agent_m0_read;                                                             // led_s1_agent:m0_read -> led_s1_translator:uav_read
	wire          led_s1_agent_m0_readdatavalid;                                                    // led_s1_translator:uav_readdatavalid -> led_s1_agent:m0_readdatavalid
	wire          led_s1_agent_m0_lock;                                                             // led_s1_agent:m0_lock -> led_s1_translator:uav_lock
	wire   [31:0] led_s1_agent_m0_writedata;                                                        // led_s1_agent:m0_writedata -> led_s1_translator:uav_writedata
	wire          led_s1_agent_m0_write;                                                            // led_s1_agent:m0_write -> led_s1_translator:uav_write
	wire    [2:0] led_s1_agent_m0_burstcount;                                                       // led_s1_agent:m0_burstcount -> led_s1_translator:uav_burstcount
	wire          led_s1_agent_rf_source_valid;                                                     // led_s1_agent:rf_source_valid -> led_s1_agent_rsp_fifo:in_valid
	wire  [101:0] led_s1_agent_rf_source_data;                                                      // led_s1_agent:rf_source_data -> led_s1_agent_rsp_fifo:in_data
	wire          led_s1_agent_rf_source_ready;                                                     // led_s1_agent_rsp_fifo:in_ready -> led_s1_agent:rf_source_ready
	wire          led_s1_agent_rf_source_startofpacket;                                             // led_s1_agent:rf_source_startofpacket -> led_s1_agent_rsp_fifo:in_startofpacket
	wire          led_s1_agent_rf_source_endofpacket;                                               // led_s1_agent:rf_source_endofpacket -> led_s1_agent_rsp_fifo:in_endofpacket
	wire          led_s1_agent_rsp_fifo_out_valid;                                                  // led_s1_agent_rsp_fifo:out_valid -> led_s1_agent:rf_sink_valid
	wire  [101:0] led_s1_agent_rsp_fifo_out_data;                                                   // led_s1_agent_rsp_fifo:out_data -> led_s1_agent:rf_sink_data
	wire          led_s1_agent_rsp_fifo_out_ready;                                                  // led_s1_agent:rf_sink_ready -> led_s1_agent_rsp_fifo:out_ready
	wire          led_s1_agent_rsp_fifo_out_startofpacket;                                          // led_s1_agent_rsp_fifo:out_startofpacket -> led_s1_agent:rf_sink_startofpacket
	wire          led_s1_agent_rsp_fifo_out_endofpacket;                                            // led_s1_agent_rsp_fifo:out_endofpacket -> led_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                            // cmd_mux_007:src_valid -> led_s1_agent:cp_valid
	wire  [100:0] cmd_mux_007_src_data;                                                             // cmd_mux_007:src_data -> led_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                            // led_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [18:0] cmd_mux_007_src_channel;                                                          // cmd_mux_007:src_channel -> led_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                    // cmd_mux_007:src_startofpacket -> led_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                      // cmd_mux_007:src_endofpacket -> led_s1_agent:cp_endofpacket
	wire   [31:0] hdmi_tx_int_n_s1_agent_m0_readdata;                                               // hdmi_tx_int_n_s1_translator:uav_readdata -> hdmi_tx_int_n_s1_agent:m0_readdata
	wire          hdmi_tx_int_n_s1_agent_m0_waitrequest;                                            // hdmi_tx_int_n_s1_translator:uav_waitrequest -> hdmi_tx_int_n_s1_agent:m0_waitrequest
	wire          hdmi_tx_int_n_s1_agent_m0_debugaccess;                                            // hdmi_tx_int_n_s1_agent:m0_debugaccess -> hdmi_tx_int_n_s1_translator:uav_debugaccess
	wire   [20:0] hdmi_tx_int_n_s1_agent_m0_address;                                                // hdmi_tx_int_n_s1_agent:m0_address -> hdmi_tx_int_n_s1_translator:uav_address
	wire    [3:0] hdmi_tx_int_n_s1_agent_m0_byteenable;                                             // hdmi_tx_int_n_s1_agent:m0_byteenable -> hdmi_tx_int_n_s1_translator:uav_byteenable
	wire          hdmi_tx_int_n_s1_agent_m0_read;                                                   // hdmi_tx_int_n_s1_agent:m0_read -> hdmi_tx_int_n_s1_translator:uav_read
	wire          hdmi_tx_int_n_s1_agent_m0_readdatavalid;                                          // hdmi_tx_int_n_s1_translator:uav_readdatavalid -> hdmi_tx_int_n_s1_agent:m0_readdatavalid
	wire          hdmi_tx_int_n_s1_agent_m0_lock;                                                   // hdmi_tx_int_n_s1_agent:m0_lock -> hdmi_tx_int_n_s1_translator:uav_lock
	wire   [31:0] hdmi_tx_int_n_s1_agent_m0_writedata;                                              // hdmi_tx_int_n_s1_agent:m0_writedata -> hdmi_tx_int_n_s1_translator:uav_writedata
	wire          hdmi_tx_int_n_s1_agent_m0_write;                                                  // hdmi_tx_int_n_s1_agent:m0_write -> hdmi_tx_int_n_s1_translator:uav_write
	wire    [2:0] hdmi_tx_int_n_s1_agent_m0_burstcount;                                             // hdmi_tx_int_n_s1_agent:m0_burstcount -> hdmi_tx_int_n_s1_translator:uav_burstcount
	wire          hdmi_tx_int_n_s1_agent_rf_source_valid;                                           // hdmi_tx_int_n_s1_agent:rf_source_valid -> hdmi_tx_int_n_s1_agent_rsp_fifo:in_valid
	wire  [101:0] hdmi_tx_int_n_s1_agent_rf_source_data;                                            // hdmi_tx_int_n_s1_agent:rf_source_data -> hdmi_tx_int_n_s1_agent_rsp_fifo:in_data
	wire          hdmi_tx_int_n_s1_agent_rf_source_ready;                                           // hdmi_tx_int_n_s1_agent_rsp_fifo:in_ready -> hdmi_tx_int_n_s1_agent:rf_source_ready
	wire          hdmi_tx_int_n_s1_agent_rf_source_startofpacket;                                   // hdmi_tx_int_n_s1_agent:rf_source_startofpacket -> hdmi_tx_int_n_s1_agent_rsp_fifo:in_startofpacket
	wire          hdmi_tx_int_n_s1_agent_rf_source_endofpacket;                                     // hdmi_tx_int_n_s1_agent:rf_source_endofpacket -> hdmi_tx_int_n_s1_agent_rsp_fifo:in_endofpacket
	wire          hdmi_tx_int_n_s1_agent_rsp_fifo_out_valid;                                        // hdmi_tx_int_n_s1_agent_rsp_fifo:out_valid -> hdmi_tx_int_n_s1_agent:rf_sink_valid
	wire  [101:0] hdmi_tx_int_n_s1_agent_rsp_fifo_out_data;                                         // hdmi_tx_int_n_s1_agent_rsp_fifo:out_data -> hdmi_tx_int_n_s1_agent:rf_sink_data
	wire          hdmi_tx_int_n_s1_agent_rsp_fifo_out_ready;                                        // hdmi_tx_int_n_s1_agent:rf_sink_ready -> hdmi_tx_int_n_s1_agent_rsp_fifo:out_ready
	wire          hdmi_tx_int_n_s1_agent_rsp_fifo_out_startofpacket;                                // hdmi_tx_int_n_s1_agent_rsp_fifo:out_startofpacket -> hdmi_tx_int_n_s1_agent:rf_sink_startofpacket
	wire          hdmi_tx_int_n_s1_agent_rsp_fifo_out_endofpacket;                                  // hdmi_tx_int_n_s1_agent_rsp_fifo:out_endofpacket -> hdmi_tx_int_n_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                            // cmd_mux_008:src_valid -> hdmi_tx_int_n_s1_agent:cp_valid
	wire  [100:0] cmd_mux_008_src_data;                                                             // cmd_mux_008:src_data -> hdmi_tx_int_n_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                            // hdmi_tx_int_n_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [18:0] cmd_mux_008_src_channel;                                                          // cmd_mux_008:src_channel -> hdmi_tx_int_n_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                    // cmd_mux_008:src_startofpacket -> hdmi_tx_int_n_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                      // cmd_mux_008:src_endofpacket -> hdmi_tx_int_n_s1_agent:cp_endofpacket
	wire   [31:0] position_s1_agent_m0_readdata;                                                    // position_s1_translator:uav_readdata -> position_s1_agent:m0_readdata
	wire          position_s1_agent_m0_waitrequest;                                                 // position_s1_translator:uav_waitrequest -> position_s1_agent:m0_waitrequest
	wire          position_s1_agent_m0_debugaccess;                                                 // position_s1_agent:m0_debugaccess -> position_s1_translator:uav_debugaccess
	wire   [20:0] position_s1_agent_m0_address;                                                     // position_s1_agent:m0_address -> position_s1_translator:uav_address
	wire    [3:0] position_s1_agent_m0_byteenable;                                                  // position_s1_agent:m0_byteenable -> position_s1_translator:uav_byteenable
	wire          position_s1_agent_m0_read;                                                        // position_s1_agent:m0_read -> position_s1_translator:uav_read
	wire          position_s1_agent_m0_readdatavalid;                                               // position_s1_translator:uav_readdatavalid -> position_s1_agent:m0_readdatavalid
	wire          position_s1_agent_m0_lock;                                                        // position_s1_agent:m0_lock -> position_s1_translator:uav_lock
	wire   [31:0] position_s1_agent_m0_writedata;                                                   // position_s1_agent:m0_writedata -> position_s1_translator:uav_writedata
	wire          position_s1_agent_m0_write;                                                       // position_s1_agent:m0_write -> position_s1_translator:uav_write
	wire    [2:0] position_s1_agent_m0_burstcount;                                                  // position_s1_agent:m0_burstcount -> position_s1_translator:uav_burstcount
	wire          position_s1_agent_rf_source_valid;                                                // position_s1_agent:rf_source_valid -> position_s1_agent_rsp_fifo:in_valid
	wire  [101:0] position_s1_agent_rf_source_data;                                                 // position_s1_agent:rf_source_data -> position_s1_agent_rsp_fifo:in_data
	wire          position_s1_agent_rf_source_ready;                                                // position_s1_agent_rsp_fifo:in_ready -> position_s1_agent:rf_source_ready
	wire          position_s1_agent_rf_source_startofpacket;                                        // position_s1_agent:rf_source_startofpacket -> position_s1_agent_rsp_fifo:in_startofpacket
	wire          position_s1_agent_rf_source_endofpacket;                                          // position_s1_agent:rf_source_endofpacket -> position_s1_agent_rsp_fifo:in_endofpacket
	wire          position_s1_agent_rsp_fifo_out_valid;                                             // position_s1_agent_rsp_fifo:out_valid -> position_s1_agent:rf_sink_valid
	wire  [101:0] position_s1_agent_rsp_fifo_out_data;                                              // position_s1_agent_rsp_fifo:out_data -> position_s1_agent:rf_sink_data
	wire          position_s1_agent_rsp_fifo_out_ready;                                             // position_s1_agent:rf_sink_ready -> position_s1_agent_rsp_fifo:out_ready
	wire          position_s1_agent_rsp_fifo_out_startofpacket;                                     // position_s1_agent_rsp_fifo:out_startofpacket -> position_s1_agent:rf_sink_startofpacket
	wire          position_s1_agent_rsp_fifo_out_endofpacket;                                       // position_s1_agent_rsp_fifo:out_endofpacket -> position_s1_agent:rf_sink_endofpacket
	wire          position_s1_agent_rdata_fifo_src_valid;                                           // position_s1_agent:rdata_fifo_src_valid -> position_s1_agent_rdata_fifo:in_valid
	wire   [33:0] position_s1_agent_rdata_fifo_src_data;                                            // position_s1_agent:rdata_fifo_src_data -> position_s1_agent_rdata_fifo:in_data
	wire          position_s1_agent_rdata_fifo_src_ready;                                           // position_s1_agent_rdata_fifo:in_ready -> position_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_009_src_valid;                                                            // cmd_mux_009:src_valid -> position_s1_agent:cp_valid
	wire  [100:0] cmd_mux_009_src_data;                                                             // cmd_mux_009:src_data -> position_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                            // position_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [18:0] cmd_mux_009_src_channel;                                                          // cmd_mux_009:src_channel -> position_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                    // cmd_mux_009:src_startofpacket -> position_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                      // cmd_mux_009:src_endofpacket -> position_s1_agent:cp_endofpacket
	wire   [31:0] refresh_s1_agent_m0_readdata;                                                     // refresh_s1_translator:uav_readdata -> refresh_s1_agent:m0_readdata
	wire          refresh_s1_agent_m0_waitrequest;                                                  // refresh_s1_translator:uav_waitrequest -> refresh_s1_agent:m0_waitrequest
	wire          refresh_s1_agent_m0_debugaccess;                                                  // refresh_s1_agent:m0_debugaccess -> refresh_s1_translator:uav_debugaccess
	wire   [20:0] refresh_s1_agent_m0_address;                                                      // refresh_s1_agent:m0_address -> refresh_s1_translator:uav_address
	wire    [3:0] refresh_s1_agent_m0_byteenable;                                                   // refresh_s1_agent:m0_byteenable -> refresh_s1_translator:uav_byteenable
	wire          refresh_s1_agent_m0_read;                                                         // refresh_s1_agent:m0_read -> refresh_s1_translator:uav_read
	wire          refresh_s1_agent_m0_readdatavalid;                                                // refresh_s1_translator:uav_readdatavalid -> refresh_s1_agent:m0_readdatavalid
	wire          refresh_s1_agent_m0_lock;                                                         // refresh_s1_agent:m0_lock -> refresh_s1_translator:uav_lock
	wire   [31:0] refresh_s1_agent_m0_writedata;                                                    // refresh_s1_agent:m0_writedata -> refresh_s1_translator:uav_writedata
	wire          refresh_s1_agent_m0_write;                                                        // refresh_s1_agent:m0_write -> refresh_s1_translator:uav_write
	wire    [2:0] refresh_s1_agent_m0_burstcount;                                                   // refresh_s1_agent:m0_burstcount -> refresh_s1_translator:uav_burstcount
	wire          refresh_s1_agent_rf_source_valid;                                                 // refresh_s1_agent:rf_source_valid -> refresh_s1_agent_rsp_fifo:in_valid
	wire  [101:0] refresh_s1_agent_rf_source_data;                                                  // refresh_s1_agent:rf_source_data -> refresh_s1_agent_rsp_fifo:in_data
	wire          refresh_s1_agent_rf_source_ready;                                                 // refresh_s1_agent_rsp_fifo:in_ready -> refresh_s1_agent:rf_source_ready
	wire          refresh_s1_agent_rf_source_startofpacket;                                         // refresh_s1_agent:rf_source_startofpacket -> refresh_s1_agent_rsp_fifo:in_startofpacket
	wire          refresh_s1_agent_rf_source_endofpacket;                                           // refresh_s1_agent:rf_source_endofpacket -> refresh_s1_agent_rsp_fifo:in_endofpacket
	wire          refresh_s1_agent_rsp_fifo_out_valid;                                              // refresh_s1_agent_rsp_fifo:out_valid -> refresh_s1_agent:rf_sink_valid
	wire  [101:0] refresh_s1_agent_rsp_fifo_out_data;                                               // refresh_s1_agent_rsp_fifo:out_data -> refresh_s1_agent:rf_sink_data
	wire          refresh_s1_agent_rsp_fifo_out_ready;                                              // refresh_s1_agent:rf_sink_ready -> refresh_s1_agent_rsp_fifo:out_ready
	wire          refresh_s1_agent_rsp_fifo_out_startofpacket;                                      // refresh_s1_agent_rsp_fifo:out_startofpacket -> refresh_s1_agent:rf_sink_startofpacket
	wire          refresh_s1_agent_rsp_fifo_out_endofpacket;                                        // refresh_s1_agent_rsp_fifo:out_endofpacket -> refresh_s1_agent:rf_sink_endofpacket
	wire          refresh_s1_agent_rdata_fifo_src_valid;                                            // refresh_s1_agent:rdata_fifo_src_valid -> refresh_s1_agent_rdata_fifo:in_valid
	wire   [33:0] refresh_s1_agent_rdata_fifo_src_data;                                             // refresh_s1_agent:rdata_fifo_src_data -> refresh_s1_agent_rdata_fifo:in_data
	wire          refresh_s1_agent_rdata_fifo_src_ready;                                            // refresh_s1_agent_rdata_fifo:in_ready -> refresh_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_010_src_valid;                                                            // cmd_mux_010:src_valid -> refresh_s1_agent:cp_valid
	wire  [100:0] cmd_mux_010_src_data;                                                             // cmd_mux_010:src_data -> refresh_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                            // refresh_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [18:0] cmd_mux_010_src_channel;                                                          // cmd_mux_010:src_channel -> refresh_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                    // cmd_mux_010:src_startofpacket -> refresh_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                      // cmd_mux_010:src_endofpacket -> refresh_s1_agent:cp_endofpacket
	wire   [31:0] background_data_s1_agent_m0_readdata;                                             // background_data_s1_translator:uav_readdata -> background_data_s1_agent:m0_readdata
	wire          background_data_s1_agent_m0_waitrequest;                                          // background_data_s1_translator:uav_waitrequest -> background_data_s1_agent:m0_waitrequest
	wire          background_data_s1_agent_m0_debugaccess;                                          // background_data_s1_agent:m0_debugaccess -> background_data_s1_translator:uav_debugaccess
	wire   [20:0] background_data_s1_agent_m0_address;                                              // background_data_s1_agent:m0_address -> background_data_s1_translator:uav_address
	wire    [3:0] background_data_s1_agent_m0_byteenable;                                           // background_data_s1_agent:m0_byteenable -> background_data_s1_translator:uav_byteenable
	wire          background_data_s1_agent_m0_read;                                                 // background_data_s1_agent:m0_read -> background_data_s1_translator:uav_read
	wire          background_data_s1_agent_m0_readdatavalid;                                        // background_data_s1_translator:uav_readdatavalid -> background_data_s1_agent:m0_readdatavalid
	wire          background_data_s1_agent_m0_lock;                                                 // background_data_s1_agent:m0_lock -> background_data_s1_translator:uav_lock
	wire   [31:0] background_data_s1_agent_m0_writedata;                                            // background_data_s1_agent:m0_writedata -> background_data_s1_translator:uav_writedata
	wire          background_data_s1_agent_m0_write;                                                // background_data_s1_agent:m0_write -> background_data_s1_translator:uav_write
	wire    [2:0] background_data_s1_agent_m0_burstcount;                                           // background_data_s1_agent:m0_burstcount -> background_data_s1_translator:uav_burstcount
	wire          background_data_s1_agent_rf_source_valid;                                         // background_data_s1_agent:rf_source_valid -> background_data_s1_agent_rsp_fifo:in_valid
	wire  [101:0] background_data_s1_agent_rf_source_data;                                          // background_data_s1_agent:rf_source_data -> background_data_s1_agent_rsp_fifo:in_data
	wire          background_data_s1_agent_rf_source_ready;                                         // background_data_s1_agent_rsp_fifo:in_ready -> background_data_s1_agent:rf_source_ready
	wire          background_data_s1_agent_rf_source_startofpacket;                                 // background_data_s1_agent:rf_source_startofpacket -> background_data_s1_agent_rsp_fifo:in_startofpacket
	wire          background_data_s1_agent_rf_source_endofpacket;                                   // background_data_s1_agent:rf_source_endofpacket -> background_data_s1_agent_rsp_fifo:in_endofpacket
	wire          background_data_s1_agent_rsp_fifo_out_valid;                                      // background_data_s1_agent_rsp_fifo:out_valid -> background_data_s1_agent:rf_sink_valid
	wire  [101:0] background_data_s1_agent_rsp_fifo_out_data;                                       // background_data_s1_agent_rsp_fifo:out_data -> background_data_s1_agent:rf_sink_data
	wire          background_data_s1_agent_rsp_fifo_out_ready;                                      // background_data_s1_agent:rf_sink_ready -> background_data_s1_agent_rsp_fifo:out_ready
	wire          background_data_s1_agent_rsp_fifo_out_startofpacket;                              // background_data_s1_agent_rsp_fifo:out_startofpacket -> background_data_s1_agent:rf_sink_startofpacket
	wire          background_data_s1_agent_rsp_fifo_out_endofpacket;                                // background_data_s1_agent_rsp_fifo:out_endofpacket -> background_data_s1_agent:rf_sink_endofpacket
	wire          background_data_s1_agent_rdata_fifo_src_valid;                                    // background_data_s1_agent:rdata_fifo_src_valid -> background_data_s1_agent_rdata_fifo:in_valid
	wire   [33:0] background_data_s1_agent_rdata_fifo_src_data;                                     // background_data_s1_agent:rdata_fifo_src_data -> background_data_s1_agent_rdata_fifo:in_data
	wire          background_data_s1_agent_rdata_fifo_src_ready;                                    // background_data_s1_agent_rdata_fifo:in_ready -> background_data_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_011_src_valid;                                                            // cmd_mux_011:src_valid -> background_data_s1_agent:cp_valid
	wire  [100:0] cmd_mux_011_src_data;                                                             // cmd_mux_011:src_data -> background_data_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                            // background_data_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [18:0] cmd_mux_011_src_channel;                                                          // cmd_mux_011:src_channel -> background_data_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                    // cmd_mux_011:src_startofpacket -> background_data_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                      // cmd_mux_011:src_endofpacket -> background_data_s1_agent:cp_endofpacket
	wire   [31:0] background_wr_s1_agent_m0_readdata;                                               // background_wr_s1_translator:uav_readdata -> background_wr_s1_agent:m0_readdata
	wire          background_wr_s1_agent_m0_waitrequest;                                            // background_wr_s1_translator:uav_waitrequest -> background_wr_s1_agent:m0_waitrequest
	wire          background_wr_s1_agent_m0_debugaccess;                                            // background_wr_s1_agent:m0_debugaccess -> background_wr_s1_translator:uav_debugaccess
	wire   [20:0] background_wr_s1_agent_m0_address;                                                // background_wr_s1_agent:m0_address -> background_wr_s1_translator:uav_address
	wire    [3:0] background_wr_s1_agent_m0_byteenable;                                             // background_wr_s1_agent:m0_byteenable -> background_wr_s1_translator:uav_byteenable
	wire          background_wr_s1_agent_m0_read;                                                   // background_wr_s1_agent:m0_read -> background_wr_s1_translator:uav_read
	wire          background_wr_s1_agent_m0_readdatavalid;                                          // background_wr_s1_translator:uav_readdatavalid -> background_wr_s1_agent:m0_readdatavalid
	wire          background_wr_s1_agent_m0_lock;                                                   // background_wr_s1_agent:m0_lock -> background_wr_s1_translator:uav_lock
	wire   [31:0] background_wr_s1_agent_m0_writedata;                                              // background_wr_s1_agent:m0_writedata -> background_wr_s1_translator:uav_writedata
	wire          background_wr_s1_agent_m0_write;                                                  // background_wr_s1_agent:m0_write -> background_wr_s1_translator:uav_write
	wire    [2:0] background_wr_s1_agent_m0_burstcount;                                             // background_wr_s1_agent:m0_burstcount -> background_wr_s1_translator:uav_burstcount
	wire          background_wr_s1_agent_rf_source_valid;                                           // background_wr_s1_agent:rf_source_valid -> background_wr_s1_agent_rsp_fifo:in_valid
	wire  [101:0] background_wr_s1_agent_rf_source_data;                                            // background_wr_s1_agent:rf_source_data -> background_wr_s1_agent_rsp_fifo:in_data
	wire          background_wr_s1_agent_rf_source_ready;                                           // background_wr_s1_agent_rsp_fifo:in_ready -> background_wr_s1_agent:rf_source_ready
	wire          background_wr_s1_agent_rf_source_startofpacket;                                   // background_wr_s1_agent:rf_source_startofpacket -> background_wr_s1_agent_rsp_fifo:in_startofpacket
	wire          background_wr_s1_agent_rf_source_endofpacket;                                     // background_wr_s1_agent:rf_source_endofpacket -> background_wr_s1_agent_rsp_fifo:in_endofpacket
	wire          background_wr_s1_agent_rsp_fifo_out_valid;                                        // background_wr_s1_agent_rsp_fifo:out_valid -> background_wr_s1_agent:rf_sink_valid
	wire  [101:0] background_wr_s1_agent_rsp_fifo_out_data;                                         // background_wr_s1_agent_rsp_fifo:out_data -> background_wr_s1_agent:rf_sink_data
	wire          background_wr_s1_agent_rsp_fifo_out_ready;                                        // background_wr_s1_agent:rf_sink_ready -> background_wr_s1_agent_rsp_fifo:out_ready
	wire          background_wr_s1_agent_rsp_fifo_out_startofpacket;                                // background_wr_s1_agent_rsp_fifo:out_startofpacket -> background_wr_s1_agent:rf_sink_startofpacket
	wire          background_wr_s1_agent_rsp_fifo_out_endofpacket;                                  // background_wr_s1_agent_rsp_fifo:out_endofpacket -> background_wr_s1_agent:rf_sink_endofpacket
	wire          background_wr_s1_agent_rdata_fifo_src_valid;                                      // background_wr_s1_agent:rdata_fifo_src_valid -> background_wr_s1_agent_rdata_fifo:in_valid
	wire   [33:0] background_wr_s1_agent_rdata_fifo_src_data;                                       // background_wr_s1_agent:rdata_fifo_src_data -> background_wr_s1_agent_rdata_fifo:in_data
	wire          background_wr_s1_agent_rdata_fifo_src_ready;                                      // background_wr_s1_agent_rdata_fifo:in_ready -> background_wr_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_012_src_valid;                                                            // cmd_mux_012:src_valid -> background_wr_s1_agent:cp_valid
	wire  [100:0] cmd_mux_012_src_data;                                                             // cmd_mux_012:src_data -> background_wr_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                            // background_wr_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [18:0] cmd_mux_012_src_channel;                                                          // cmd_mux_012:src_channel -> background_wr_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                    // cmd_mux_012:src_startofpacket -> background_wr_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                      // cmd_mux_012:src_endofpacket -> background_wr_s1_agent:cp_endofpacket
	wire   [31:0] left_button_s1_agent_m0_readdata;                                                 // left_button_s1_translator:uav_readdata -> left_button_s1_agent:m0_readdata
	wire          left_button_s1_agent_m0_waitrequest;                                              // left_button_s1_translator:uav_waitrequest -> left_button_s1_agent:m0_waitrequest
	wire          left_button_s1_agent_m0_debugaccess;                                              // left_button_s1_agent:m0_debugaccess -> left_button_s1_translator:uav_debugaccess
	wire   [20:0] left_button_s1_agent_m0_address;                                                  // left_button_s1_agent:m0_address -> left_button_s1_translator:uav_address
	wire    [3:0] left_button_s1_agent_m0_byteenable;                                               // left_button_s1_agent:m0_byteenable -> left_button_s1_translator:uav_byteenable
	wire          left_button_s1_agent_m0_read;                                                     // left_button_s1_agent:m0_read -> left_button_s1_translator:uav_read
	wire          left_button_s1_agent_m0_readdatavalid;                                            // left_button_s1_translator:uav_readdatavalid -> left_button_s1_agent:m0_readdatavalid
	wire          left_button_s1_agent_m0_lock;                                                     // left_button_s1_agent:m0_lock -> left_button_s1_translator:uav_lock
	wire   [31:0] left_button_s1_agent_m0_writedata;                                                // left_button_s1_agent:m0_writedata -> left_button_s1_translator:uav_writedata
	wire          left_button_s1_agent_m0_write;                                                    // left_button_s1_agent:m0_write -> left_button_s1_translator:uav_write
	wire    [2:0] left_button_s1_agent_m0_burstcount;                                               // left_button_s1_agent:m0_burstcount -> left_button_s1_translator:uav_burstcount
	wire          left_button_s1_agent_rf_source_valid;                                             // left_button_s1_agent:rf_source_valid -> left_button_s1_agent_rsp_fifo:in_valid
	wire  [101:0] left_button_s1_agent_rf_source_data;                                              // left_button_s1_agent:rf_source_data -> left_button_s1_agent_rsp_fifo:in_data
	wire          left_button_s1_agent_rf_source_ready;                                             // left_button_s1_agent_rsp_fifo:in_ready -> left_button_s1_agent:rf_source_ready
	wire          left_button_s1_agent_rf_source_startofpacket;                                     // left_button_s1_agent:rf_source_startofpacket -> left_button_s1_agent_rsp_fifo:in_startofpacket
	wire          left_button_s1_agent_rf_source_endofpacket;                                       // left_button_s1_agent:rf_source_endofpacket -> left_button_s1_agent_rsp_fifo:in_endofpacket
	wire          left_button_s1_agent_rsp_fifo_out_valid;                                          // left_button_s1_agent_rsp_fifo:out_valid -> left_button_s1_agent:rf_sink_valid
	wire  [101:0] left_button_s1_agent_rsp_fifo_out_data;                                           // left_button_s1_agent_rsp_fifo:out_data -> left_button_s1_agent:rf_sink_data
	wire          left_button_s1_agent_rsp_fifo_out_ready;                                          // left_button_s1_agent:rf_sink_ready -> left_button_s1_agent_rsp_fifo:out_ready
	wire          left_button_s1_agent_rsp_fifo_out_startofpacket;                                  // left_button_s1_agent_rsp_fifo:out_startofpacket -> left_button_s1_agent:rf_sink_startofpacket
	wire          left_button_s1_agent_rsp_fifo_out_endofpacket;                                    // left_button_s1_agent_rsp_fifo:out_endofpacket -> left_button_s1_agent:rf_sink_endofpacket
	wire          left_button_s1_agent_rdata_fifo_src_valid;                                        // left_button_s1_agent:rdata_fifo_src_valid -> left_button_s1_agent_rdata_fifo:in_valid
	wire   [33:0] left_button_s1_agent_rdata_fifo_src_data;                                         // left_button_s1_agent:rdata_fifo_src_data -> left_button_s1_agent_rdata_fifo:in_data
	wire          left_button_s1_agent_rdata_fifo_src_ready;                                        // left_button_s1_agent_rdata_fifo:in_ready -> left_button_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_013_src_valid;                                                            // cmd_mux_013:src_valid -> left_button_s1_agent:cp_valid
	wire  [100:0] cmd_mux_013_src_data;                                                             // cmd_mux_013:src_data -> left_button_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                            // left_button_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [18:0] cmd_mux_013_src_channel;                                                          // cmd_mux_013:src_channel -> left_button_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                    // cmd_mux_013:src_startofpacket -> left_button_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                      // cmd_mux_013:src_endofpacket -> left_button_s1_agent:cp_endofpacket
	wire   [31:0] up_button_s1_agent_m0_readdata;                                                   // up_button_s1_translator:uav_readdata -> up_button_s1_agent:m0_readdata
	wire          up_button_s1_agent_m0_waitrequest;                                                // up_button_s1_translator:uav_waitrequest -> up_button_s1_agent:m0_waitrequest
	wire          up_button_s1_agent_m0_debugaccess;                                                // up_button_s1_agent:m0_debugaccess -> up_button_s1_translator:uav_debugaccess
	wire   [20:0] up_button_s1_agent_m0_address;                                                    // up_button_s1_agent:m0_address -> up_button_s1_translator:uav_address
	wire    [3:0] up_button_s1_agent_m0_byteenable;                                                 // up_button_s1_agent:m0_byteenable -> up_button_s1_translator:uav_byteenable
	wire          up_button_s1_agent_m0_read;                                                       // up_button_s1_agent:m0_read -> up_button_s1_translator:uav_read
	wire          up_button_s1_agent_m0_readdatavalid;                                              // up_button_s1_translator:uav_readdatavalid -> up_button_s1_agent:m0_readdatavalid
	wire          up_button_s1_agent_m0_lock;                                                       // up_button_s1_agent:m0_lock -> up_button_s1_translator:uav_lock
	wire   [31:0] up_button_s1_agent_m0_writedata;                                                  // up_button_s1_agent:m0_writedata -> up_button_s1_translator:uav_writedata
	wire          up_button_s1_agent_m0_write;                                                      // up_button_s1_agent:m0_write -> up_button_s1_translator:uav_write
	wire    [2:0] up_button_s1_agent_m0_burstcount;                                                 // up_button_s1_agent:m0_burstcount -> up_button_s1_translator:uav_burstcount
	wire          up_button_s1_agent_rf_source_valid;                                               // up_button_s1_agent:rf_source_valid -> up_button_s1_agent_rsp_fifo:in_valid
	wire  [101:0] up_button_s1_agent_rf_source_data;                                                // up_button_s1_agent:rf_source_data -> up_button_s1_agent_rsp_fifo:in_data
	wire          up_button_s1_agent_rf_source_ready;                                               // up_button_s1_agent_rsp_fifo:in_ready -> up_button_s1_agent:rf_source_ready
	wire          up_button_s1_agent_rf_source_startofpacket;                                       // up_button_s1_agent:rf_source_startofpacket -> up_button_s1_agent_rsp_fifo:in_startofpacket
	wire          up_button_s1_agent_rf_source_endofpacket;                                         // up_button_s1_agent:rf_source_endofpacket -> up_button_s1_agent_rsp_fifo:in_endofpacket
	wire          up_button_s1_agent_rsp_fifo_out_valid;                                            // up_button_s1_agent_rsp_fifo:out_valid -> up_button_s1_agent:rf_sink_valid
	wire  [101:0] up_button_s1_agent_rsp_fifo_out_data;                                             // up_button_s1_agent_rsp_fifo:out_data -> up_button_s1_agent:rf_sink_data
	wire          up_button_s1_agent_rsp_fifo_out_ready;                                            // up_button_s1_agent:rf_sink_ready -> up_button_s1_agent_rsp_fifo:out_ready
	wire          up_button_s1_agent_rsp_fifo_out_startofpacket;                                    // up_button_s1_agent_rsp_fifo:out_startofpacket -> up_button_s1_agent:rf_sink_startofpacket
	wire          up_button_s1_agent_rsp_fifo_out_endofpacket;                                      // up_button_s1_agent_rsp_fifo:out_endofpacket -> up_button_s1_agent:rf_sink_endofpacket
	wire          up_button_s1_agent_rdata_fifo_src_valid;                                          // up_button_s1_agent:rdata_fifo_src_valid -> up_button_s1_agent_rdata_fifo:in_valid
	wire   [33:0] up_button_s1_agent_rdata_fifo_src_data;                                           // up_button_s1_agent:rdata_fifo_src_data -> up_button_s1_agent_rdata_fifo:in_data
	wire          up_button_s1_agent_rdata_fifo_src_ready;                                          // up_button_s1_agent_rdata_fifo:in_ready -> up_button_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_014_src_valid;                                                            // cmd_mux_014:src_valid -> up_button_s1_agent:cp_valid
	wire  [100:0] cmd_mux_014_src_data;                                                             // cmd_mux_014:src_data -> up_button_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                            // up_button_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [18:0] cmd_mux_014_src_channel;                                                          // cmd_mux_014:src_channel -> up_button_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                    // cmd_mux_014:src_startofpacket -> up_button_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                      // cmd_mux_014:src_endofpacket -> up_button_s1_agent:cp_endofpacket
	wire   [31:0] down_button_s1_agent_m0_readdata;                                                 // down_button_s1_translator:uav_readdata -> down_button_s1_agent:m0_readdata
	wire          down_button_s1_agent_m0_waitrequest;                                              // down_button_s1_translator:uav_waitrequest -> down_button_s1_agent:m0_waitrequest
	wire          down_button_s1_agent_m0_debugaccess;                                              // down_button_s1_agent:m0_debugaccess -> down_button_s1_translator:uav_debugaccess
	wire   [20:0] down_button_s1_agent_m0_address;                                                  // down_button_s1_agent:m0_address -> down_button_s1_translator:uav_address
	wire    [3:0] down_button_s1_agent_m0_byteenable;                                               // down_button_s1_agent:m0_byteenable -> down_button_s1_translator:uav_byteenable
	wire          down_button_s1_agent_m0_read;                                                     // down_button_s1_agent:m0_read -> down_button_s1_translator:uav_read
	wire          down_button_s1_agent_m0_readdatavalid;                                            // down_button_s1_translator:uav_readdatavalid -> down_button_s1_agent:m0_readdatavalid
	wire          down_button_s1_agent_m0_lock;                                                     // down_button_s1_agent:m0_lock -> down_button_s1_translator:uav_lock
	wire   [31:0] down_button_s1_agent_m0_writedata;                                                // down_button_s1_agent:m0_writedata -> down_button_s1_translator:uav_writedata
	wire          down_button_s1_agent_m0_write;                                                    // down_button_s1_agent:m0_write -> down_button_s1_translator:uav_write
	wire    [2:0] down_button_s1_agent_m0_burstcount;                                               // down_button_s1_agent:m0_burstcount -> down_button_s1_translator:uav_burstcount
	wire          down_button_s1_agent_rf_source_valid;                                             // down_button_s1_agent:rf_source_valid -> down_button_s1_agent_rsp_fifo:in_valid
	wire  [101:0] down_button_s1_agent_rf_source_data;                                              // down_button_s1_agent:rf_source_data -> down_button_s1_agent_rsp_fifo:in_data
	wire          down_button_s1_agent_rf_source_ready;                                             // down_button_s1_agent_rsp_fifo:in_ready -> down_button_s1_agent:rf_source_ready
	wire          down_button_s1_agent_rf_source_startofpacket;                                     // down_button_s1_agent:rf_source_startofpacket -> down_button_s1_agent_rsp_fifo:in_startofpacket
	wire          down_button_s1_agent_rf_source_endofpacket;                                       // down_button_s1_agent:rf_source_endofpacket -> down_button_s1_agent_rsp_fifo:in_endofpacket
	wire          down_button_s1_agent_rsp_fifo_out_valid;                                          // down_button_s1_agent_rsp_fifo:out_valid -> down_button_s1_agent:rf_sink_valid
	wire  [101:0] down_button_s1_agent_rsp_fifo_out_data;                                           // down_button_s1_agent_rsp_fifo:out_data -> down_button_s1_agent:rf_sink_data
	wire          down_button_s1_agent_rsp_fifo_out_ready;                                          // down_button_s1_agent:rf_sink_ready -> down_button_s1_agent_rsp_fifo:out_ready
	wire          down_button_s1_agent_rsp_fifo_out_startofpacket;                                  // down_button_s1_agent_rsp_fifo:out_startofpacket -> down_button_s1_agent:rf_sink_startofpacket
	wire          down_button_s1_agent_rsp_fifo_out_endofpacket;                                    // down_button_s1_agent_rsp_fifo:out_endofpacket -> down_button_s1_agent:rf_sink_endofpacket
	wire          down_button_s1_agent_rdata_fifo_src_valid;                                        // down_button_s1_agent:rdata_fifo_src_valid -> down_button_s1_agent_rdata_fifo:in_valid
	wire   [33:0] down_button_s1_agent_rdata_fifo_src_data;                                         // down_button_s1_agent:rdata_fifo_src_data -> down_button_s1_agent_rdata_fifo:in_data
	wire          down_button_s1_agent_rdata_fifo_src_ready;                                        // down_button_s1_agent_rdata_fifo:in_ready -> down_button_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_015_src_valid;                                                            // cmd_mux_015:src_valid -> down_button_s1_agent:cp_valid
	wire  [100:0] cmd_mux_015_src_data;                                                             // cmd_mux_015:src_data -> down_button_s1_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                            // down_button_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [18:0] cmd_mux_015_src_channel;                                                          // cmd_mux_015:src_channel -> down_button_s1_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                    // cmd_mux_015:src_startofpacket -> down_button_s1_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                      // cmd_mux_015:src_endofpacket -> down_button_s1_agent:cp_endofpacket
	wire   [31:0] right_button_s1_agent_m0_readdata;                                                // right_button_s1_translator:uav_readdata -> right_button_s1_agent:m0_readdata
	wire          right_button_s1_agent_m0_waitrequest;                                             // right_button_s1_translator:uav_waitrequest -> right_button_s1_agent:m0_waitrequest
	wire          right_button_s1_agent_m0_debugaccess;                                             // right_button_s1_agent:m0_debugaccess -> right_button_s1_translator:uav_debugaccess
	wire   [20:0] right_button_s1_agent_m0_address;                                                 // right_button_s1_agent:m0_address -> right_button_s1_translator:uav_address
	wire    [3:0] right_button_s1_agent_m0_byteenable;                                              // right_button_s1_agent:m0_byteenable -> right_button_s1_translator:uav_byteenable
	wire          right_button_s1_agent_m0_read;                                                    // right_button_s1_agent:m0_read -> right_button_s1_translator:uav_read
	wire          right_button_s1_agent_m0_readdatavalid;                                           // right_button_s1_translator:uav_readdatavalid -> right_button_s1_agent:m0_readdatavalid
	wire          right_button_s1_agent_m0_lock;                                                    // right_button_s1_agent:m0_lock -> right_button_s1_translator:uav_lock
	wire   [31:0] right_button_s1_agent_m0_writedata;                                               // right_button_s1_agent:m0_writedata -> right_button_s1_translator:uav_writedata
	wire          right_button_s1_agent_m0_write;                                                   // right_button_s1_agent:m0_write -> right_button_s1_translator:uav_write
	wire    [2:0] right_button_s1_agent_m0_burstcount;                                              // right_button_s1_agent:m0_burstcount -> right_button_s1_translator:uav_burstcount
	wire          right_button_s1_agent_rf_source_valid;                                            // right_button_s1_agent:rf_source_valid -> right_button_s1_agent_rsp_fifo:in_valid
	wire  [101:0] right_button_s1_agent_rf_source_data;                                             // right_button_s1_agent:rf_source_data -> right_button_s1_agent_rsp_fifo:in_data
	wire          right_button_s1_agent_rf_source_ready;                                            // right_button_s1_agent_rsp_fifo:in_ready -> right_button_s1_agent:rf_source_ready
	wire          right_button_s1_agent_rf_source_startofpacket;                                    // right_button_s1_agent:rf_source_startofpacket -> right_button_s1_agent_rsp_fifo:in_startofpacket
	wire          right_button_s1_agent_rf_source_endofpacket;                                      // right_button_s1_agent:rf_source_endofpacket -> right_button_s1_agent_rsp_fifo:in_endofpacket
	wire          right_button_s1_agent_rsp_fifo_out_valid;                                         // right_button_s1_agent_rsp_fifo:out_valid -> right_button_s1_agent:rf_sink_valid
	wire  [101:0] right_button_s1_agent_rsp_fifo_out_data;                                          // right_button_s1_agent_rsp_fifo:out_data -> right_button_s1_agent:rf_sink_data
	wire          right_button_s1_agent_rsp_fifo_out_ready;                                         // right_button_s1_agent:rf_sink_ready -> right_button_s1_agent_rsp_fifo:out_ready
	wire          right_button_s1_agent_rsp_fifo_out_startofpacket;                                 // right_button_s1_agent_rsp_fifo:out_startofpacket -> right_button_s1_agent:rf_sink_startofpacket
	wire          right_button_s1_agent_rsp_fifo_out_endofpacket;                                   // right_button_s1_agent_rsp_fifo:out_endofpacket -> right_button_s1_agent:rf_sink_endofpacket
	wire          right_button_s1_agent_rdata_fifo_src_valid;                                       // right_button_s1_agent:rdata_fifo_src_valid -> right_button_s1_agent_rdata_fifo:in_valid
	wire   [33:0] right_button_s1_agent_rdata_fifo_src_data;                                        // right_button_s1_agent:rdata_fifo_src_data -> right_button_s1_agent_rdata_fifo:in_data
	wire          right_button_s1_agent_rdata_fifo_src_ready;                                       // right_button_s1_agent_rdata_fifo:in_ready -> right_button_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_016_src_valid;                                                            // cmd_mux_016:src_valid -> right_button_s1_agent:cp_valid
	wire  [100:0] cmd_mux_016_src_data;                                                             // cmd_mux_016:src_data -> right_button_s1_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                            // right_button_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [18:0] cmd_mux_016_src_channel;                                                          // cmd_mux_016:src_channel -> right_button_s1_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                    // cmd_mux_016:src_startofpacket -> right_button_s1_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                      // cmd_mux_016:src_endofpacket -> right_button_s1_agent:cp_endofpacket
	wire   [31:0] food_layer_data_s1_agent_m0_readdata;                                             // food_layer_data_s1_translator:uav_readdata -> food_layer_data_s1_agent:m0_readdata
	wire          food_layer_data_s1_agent_m0_waitrequest;                                          // food_layer_data_s1_translator:uav_waitrequest -> food_layer_data_s1_agent:m0_waitrequest
	wire          food_layer_data_s1_agent_m0_debugaccess;                                          // food_layer_data_s1_agent:m0_debugaccess -> food_layer_data_s1_translator:uav_debugaccess
	wire   [20:0] food_layer_data_s1_agent_m0_address;                                              // food_layer_data_s1_agent:m0_address -> food_layer_data_s1_translator:uav_address
	wire    [3:0] food_layer_data_s1_agent_m0_byteenable;                                           // food_layer_data_s1_agent:m0_byteenable -> food_layer_data_s1_translator:uav_byteenable
	wire          food_layer_data_s1_agent_m0_read;                                                 // food_layer_data_s1_agent:m0_read -> food_layer_data_s1_translator:uav_read
	wire          food_layer_data_s1_agent_m0_readdatavalid;                                        // food_layer_data_s1_translator:uav_readdatavalid -> food_layer_data_s1_agent:m0_readdatavalid
	wire          food_layer_data_s1_agent_m0_lock;                                                 // food_layer_data_s1_agent:m0_lock -> food_layer_data_s1_translator:uav_lock
	wire   [31:0] food_layer_data_s1_agent_m0_writedata;                                            // food_layer_data_s1_agent:m0_writedata -> food_layer_data_s1_translator:uav_writedata
	wire          food_layer_data_s1_agent_m0_write;                                                // food_layer_data_s1_agent:m0_write -> food_layer_data_s1_translator:uav_write
	wire    [2:0] food_layer_data_s1_agent_m0_burstcount;                                           // food_layer_data_s1_agent:m0_burstcount -> food_layer_data_s1_translator:uav_burstcount
	wire          food_layer_data_s1_agent_rf_source_valid;                                         // food_layer_data_s1_agent:rf_source_valid -> food_layer_data_s1_agent_rsp_fifo:in_valid
	wire  [101:0] food_layer_data_s1_agent_rf_source_data;                                          // food_layer_data_s1_agent:rf_source_data -> food_layer_data_s1_agent_rsp_fifo:in_data
	wire          food_layer_data_s1_agent_rf_source_ready;                                         // food_layer_data_s1_agent_rsp_fifo:in_ready -> food_layer_data_s1_agent:rf_source_ready
	wire          food_layer_data_s1_agent_rf_source_startofpacket;                                 // food_layer_data_s1_agent:rf_source_startofpacket -> food_layer_data_s1_agent_rsp_fifo:in_startofpacket
	wire          food_layer_data_s1_agent_rf_source_endofpacket;                                   // food_layer_data_s1_agent:rf_source_endofpacket -> food_layer_data_s1_agent_rsp_fifo:in_endofpacket
	wire          food_layer_data_s1_agent_rsp_fifo_out_valid;                                      // food_layer_data_s1_agent_rsp_fifo:out_valid -> food_layer_data_s1_agent:rf_sink_valid
	wire  [101:0] food_layer_data_s1_agent_rsp_fifo_out_data;                                       // food_layer_data_s1_agent_rsp_fifo:out_data -> food_layer_data_s1_agent:rf_sink_data
	wire          food_layer_data_s1_agent_rsp_fifo_out_ready;                                      // food_layer_data_s1_agent:rf_sink_ready -> food_layer_data_s1_agent_rsp_fifo:out_ready
	wire          food_layer_data_s1_agent_rsp_fifo_out_startofpacket;                              // food_layer_data_s1_agent_rsp_fifo:out_startofpacket -> food_layer_data_s1_agent:rf_sink_startofpacket
	wire          food_layer_data_s1_agent_rsp_fifo_out_endofpacket;                                // food_layer_data_s1_agent_rsp_fifo:out_endofpacket -> food_layer_data_s1_agent:rf_sink_endofpacket
	wire          food_layer_data_s1_agent_rdata_fifo_src_valid;                                    // food_layer_data_s1_agent:rdata_fifo_src_valid -> food_layer_data_s1_agent_rdata_fifo:in_valid
	wire   [33:0] food_layer_data_s1_agent_rdata_fifo_src_data;                                     // food_layer_data_s1_agent:rdata_fifo_src_data -> food_layer_data_s1_agent_rdata_fifo:in_data
	wire          food_layer_data_s1_agent_rdata_fifo_src_ready;                                    // food_layer_data_s1_agent_rdata_fifo:in_ready -> food_layer_data_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_017_src_valid;                                                            // cmd_mux_017:src_valid -> food_layer_data_s1_agent:cp_valid
	wire  [100:0] cmd_mux_017_src_data;                                                             // cmd_mux_017:src_data -> food_layer_data_s1_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                            // food_layer_data_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [18:0] cmd_mux_017_src_channel;                                                          // cmd_mux_017:src_channel -> food_layer_data_s1_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                    // cmd_mux_017:src_startofpacket -> food_layer_data_s1_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                      // cmd_mux_017:src_endofpacket -> food_layer_data_s1_agent:cp_endofpacket
	wire   [31:0] food_layer_wr_s1_agent_m0_readdata;                                               // food_layer_wr_s1_translator:uav_readdata -> food_layer_wr_s1_agent:m0_readdata
	wire          food_layer_wr_s1_agent_m0_waitrequest;                                            // food_layer_wr_s1_translator:uav_waitrequest -> food_layer_wr_s1_agent:m0_waitrequest
	wire          food_layer_wr_s1_agent_m0_debugaccess;                                            // food_layer_wr_s1_agent:m0_debugaccess -> food_layer_wr_s1_translator:uav_debugaccess
	wire   [20:0] food_layer_wr_s1_agent_m0_address;                                                // food_layer_wr_s1_agent:m0_address -> food_layer_wr_s1_translator:uav_address
	wire    [3:0] food_layer_wr_s1_agent_m0_byteenable;                                             // food_layer_wr_s1_agent:m0_byteenable -> food_layer_wr_s1_translator:uav_byteenable
	wire          food_layer_wr_s1_agent_m0_read;                                                   // food_layer_wr_s1_agent:m0_read -> food_layer_wr_s1_translator:uav_read
	wire          food_layer_wr_s1_agent_m0_readdatavalid;                                          // food_layer_wr_s1_translator:uav_readdatavalid -> food_layer_wr_s1_agent:m0_readdatavalid
	wire          food_layer_wr_s1_agent_m0_lock;                                                   // food_layer_wr_s1_agent:m0_lock -> food_layer_wr_s1_translator:uav_lock
	wire   [31:0] food_layer_wr_s1_agent_m0_writedata;                                              // food_layer_wr_s1_agent:m0_writedata -> food_layer_wr_s1_translator:uav_writedata
	wire          food_layer_wr_s1_agent_m0_write;                                                  // food_layer_wr_s1_agent:m0_write -> food_layer_wr_s1_translator:uav_write
	wire    [2:0] food_layer_wr_s1_agent_m0_burstcount;                                             // food_layer_wr_s1_agent:m0_burstcount -> food_layer_wr_s1_translator:uav_burstcount
	wire          food_layer_wr_s1_agent_rf_source_valid;                                           // food_layer_wr_s1_agent:rf_source_valid -> food_layer_wr_s1_agent_rsp_fifo:in_valid
	wire  [101:0] food_layer_wr_s1_agent_rf_source_data;                                            // food_layer_wr_s1_agent:rf_source_data -> food_layer_wr_s1_agent_rsp_fifo:in_data
	wire          food_layer_wr_s1_agent_rf_source_ready;                                           // food_layer_wr_s1_agent_rsp_fifo:in_ready -> food_layer_wr_s1_agent:rf_source_ready
	wire          food_layer_wr_s1_agent_rf_source_startofpacket;                                   // food_layer_wr_s1_agent:rf_source_startofpacket -> food_layer_wr_s1_agent_rsp_fifo:in_startofpacket
	wire          food_layer_wr_s1_agent_rf_source_endofpacket;                                     // food_layer_wr_s1_agent:rf_source_endofpacket -> food_layer_wr_s1_agent_rsp_fifo:in_endofpacket
	wire          food_layer_wr_s1_agent_rsp_fifo_out_valid;                                        // food_layer_wr_s1_agent_rsp_fifo:out_valid -> food_layer_wr_s1_agent:rf_sink_valid
	wire  [101:0] food_layer_wr_s1_agent_rsp_fifo_out_data;                                         // food_layer_wr_s1_agent_rsp_fifo:out_data -> food_layer_wr_s1_agent:rf_sink_data
	wire          food_layer_wr_s1_agent_rsp_fifo_out_ready;                                        // food_layer_wr_s1_agent:rf_sink_ready -> food_layer_wr_s1_agent_rsp_fifo:out_ready
	wire          food_layer_wr_s1_agent_rsp_fifo_out_startofpacket;                                // food_layer_wr_s1_agent_rsp_fifo:out_startofpacket -> food_layer_wr_s1_agent:rf_sink_startofpacket
	wire          food_layer_wr_s1_agent_rsp_fifo_out_endofpacket;                                  // food_layer_wr_s1_agent_rsp_fifo:out_endofpacket -> food_layer_wr_s1_agent:rf_sink_endofpacket
	wire          food_layer_wr_s1_agent_rdata_fifo_src_valid;                                      // food_layer_wr_s1_agent:rdata_fifo_src_valid -> food_layer_wr_s1_agent_rdata_fifo:in_valid
	wire   [33:0] food_layer_wr_s1_agent_rdata_fifo_src_data;                                       // food_layer_wr_s1_agent:rdata_fifo_src_data -> food_layer_wr_s1_agent_rdata_fifo:in_data
	wire          food_layer_wr_s1_agent_rdata_fifo_src_ready;                                      // food_layer_wr_s1_agent_rdata_fifo:in_ready -> food_layer_wr_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_018_src_valid;                                                            // cmd_mux_018:src_valid -> food_layer_wr_s1_agent:cp_valid
	wire  [100:0] cmd_mux_018_src_data;                                                             // cmd_mux_018:src_data -> food_layer_wr_s1_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                            // food_layer_wr_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [18:0] cmd_mux_018_src_channel;                                                          // cmd_mux_018:src_channel -> food_layer_wr_s1_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                    // cmd_mux_018:src_startofpacket -> food_layer_wr_s1_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                      // cmd_mux_018:src_endofpacket -> food_layer_wr_s1_agent:cp_endofpacket
	wire          nios2_qsys_data_master_agent_cp_valid;                                            // nios2_qsys_data_master_agent:cp_valid -> router:sink_valid
	wire  [100:0] nios2_qsys_data_master_agent_cp_data;                                             // nios2_qsys_data_master_agent:cp_data -> router:sink_data
	wire          nios2_qsys_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_qsys_data_master_agent:cp_ready
	wire          nios2_qsys_data_master_agent_cp_startofpacket;                                    // nios2_qsys_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          nios2_qsys_data_master_agent_cp_endofpacket;                                      // nios2_qsys_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          nios2_qsys_instruction_master_agent_cp_valid;                                     // nios2_qsys_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [100:0] nios2_qsys_instruction_master_agent_cp_data;                                      // nios2_qsys_instruction_master_agent:cp_data -> router_001:sink_data
	wire          nios2_qsys_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> nios2_qsys_instruction_master_agent:cp_ready
	wire          nios2_qsys_instruction_master_agent_cp_startofpacket;                             // nios2_qsys_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          nios2_qsys_instruction_master_agent_cp_endofpacket;                               // nios2_qsys_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                       // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [100:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                        // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                       // router_002:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                               // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                 // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                             // router_002:src_valid -> rsp_demux:sink_valid
	wire  [100:0] router_002_src_data;                                                              // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                             // rsp_demux:sink_ready -> router_002:src_ready
	wire   [18:0] router_002_src_channel;                                                           // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                     // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                       // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          sysid_qsys_control_slave_agent_rp_valid;                                          // sysid_qsys_control_slave_agent:rp_valid -> router_003:sink_valid
	wire  [100:0] sysid_qsys_control_slave_agent_rp_data;                                           // sysid_qsys_control_slave_agent:rp_data -> router_003:sink_data
	wire          sysid_qsys_control_slave_agent_rp_ready;                                          // router_003:sink_ready -> sysid_qsys_control_slave_agent:rp_ready
	wire          sysid_qsys_control_slave_agent_rp_startofpacket;                                  // sysid_qsys_control_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          sysid_qsys_control_slave_agent_rp_endofpacket;                                    // sysid_qsys_control_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                             // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [100:0] router_003_src_data;                                                              // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                             // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [18:0] router_003_src_channel;                                                           // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                     // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                       // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          nios2_qsys_debug_mem_slave_agent_rp_valid;                                        // nios2_qsys_debug_mem_slave_agent:rp_valid -> router_004:sink_valid
	wire  [100:0] nios2_qsys_debug_mem_slave_agent_rp_data;                                         // nios2_qsys_debug_mem_slave_agent:rp_data -> router_004:sink_data
	wire          nios2_qsys_debug_mem_slave_agent_rp_ready;                                        // router_004:sink_ready -> nios2_qsys_debug_mem_slave_agent:rp_ready
	wire          nios2_qsys_debug_mem_slave_agent_rp_startofpacket;                                // nios2_qsys_debug_mem_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          nios2_qsys_debug_mem_slave_agent_rp_endofpacket;                                  // nios2_qsys_debug_mem_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                             // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [100:0] router_004_src_data;                                                              // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                             // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [18:0] router_004_src_channel;                                                           // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                     // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                       // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          timer_s1_agent_rp_valid;                                                          // timer_s1_agent:rp_valid -> router_005:sink_valid
	wire  [100:0] timer_s1_agent_rp_data;                                                           // timer_s1_agent:rp_data -> router_005:sink_data
	wire          timer_s1_agent_rp_ready;                                                          // router_005:sink_ready -> timer_s1_agent:rp_ready
	wire          timer_s1_agent_rp_startofpacket;                                                  // timer_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          timer_s1_agent_rp_endofpacket;                                                    // timer_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                             // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [100:0] router_005_src_data;                                                              // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                             // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [18:0] router_005_src_channel;                                                           // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                     // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                       // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          onchip_memory2_s1_agent_rp_valid;                                                 // onchip_memory2_s1_agent:rp_valid -> router_006:sink_valid
	wire  [100:0] onchip_memory2_s1_agent_rp_data;                                                  // onchip_memory2_s1_agent:rp_data -> router_006:sink_data
	wire          onchip_memory2_s1_agent_rp_ready;                                                 // router_006:sink_ready -> onchip_memory2_s1_agent:rp_ready
	wire          onchip_memory2_s1_agent_rp_startofpacket;                                         // onchip_memory2_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          onchip_memory2_s1_agent_rp_endofpacket;                                           // onchip_memory2_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                             // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [100:0] router_006_src_data;                                                              // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                             // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [18:0] router_006_src_channel;                                                           // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                     // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                       // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          i2c_sda_s1_agent_rp_valid;                                                        // i2c_sda_s1_agent:rp_valid -> router_007:sink_valid
	wire  [100:0] i2c_sda_s1_agent_rp_data;                                                         // i2c_sda_s1_agent:rp_data -> router_007:sink_data
	wire          i2c_sda_s1_agent_rp_ready;                                                        // router_007:sink_ready -> i2c_sda_s1_agent:rp_ready
	wire          i2c_sda_s1_agent_rp_startofpacket;                                                // i2c_sda_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          i2c_sda_s1_agent_rp_endofpacket;                                                  // i2c_sda_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                             // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [100:0] router_007_src_data;                                                              // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                             // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [18:0] router_007_src_channel;                                                           // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                     // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                       // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          i2c_scl_s1_agent_rp_valid;                                                        // i2c_scl_s1_agent:rp_valid -> router_008:sink_valid
	wire  [100:0] i2c_scl_s1_agent_rp_data;                                                         // i2c_scl_s1_agent:rp_data -> router_008:sink_data
	wire          i2c_scl_s1_agent_rp_ready;                                                        // router_008:sink_ready -> i2c_scl_s1_agent:rp_ready
	wire          i2c_scl_s1_agent_rp_startofpacket;                                                // i2c_scl_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          i2c_scl_s1_agent_rp_endofpacket;                                                  // i2c_scl_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                             // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [100:0] router_008_src_data;                                                              // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                             // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [18:0] router_008_src_channel;                                                           // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                     // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                       // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          led_s1_agent_rp_valid;                                                            // led_s1_agent:rp_valid -> router_009:sink_valid
	wire  [100:0] led_s1_agent_rp_data;                                                             // led_s1_agent:rp_data -> router_009:sink_data
	wire          led_s1_agent_rp_ready;                                                            // router_009:sink_ready -> led_s1_agent:rp_ready
	wire          led_s1_agent_rp_startofpacket;                                                    // led_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          led_s1_agent_rp_endofpacket;                                                      // led_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                             // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [100:0] router_009_src_data;                                                              // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                             // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [18:0] router_009_src_channel;                                                           // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                     // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                       // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          hdmi_tx_int_n_s1_agent_rp_valid;                                                  // hdmi_tx_int_n_s1_agent:rp_valid -> router_010:sink_valid
	wire  [100:0] hdmi_tx_int_n_s1_agent_rp_data;                                                   // hdmi_tx_int_n_s1_agent:rp_data -> router_010:sink_data
	wire          hdmi_tx_int_n_s1_agent_rp_ready;                                                  // router_010:sink_ready -> hdmi_tx_int_n_s1_agent:rp_ready
	wire          hdmi_tx_int_n_s1_agent_rp_startofpacket;                                          // hdmi_tx_int_n_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          hdmi_tx_int_n_s1_agent_rp_endofpacket;                                            // hdmi_tx_int_n_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                             // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [100:0] router_010_src_data;                                                              // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                             // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [18:0] router_010_src_channel;                                                           // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                     // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                       // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          position_s1_agent_rp_valid;                                                       // position_s1_agent:rp_valid -> router_011:sink_valid
	wire  [100:0] position_s1_agent_rp_data;                                                        // position_s1_agent:rp_data -> router_011:sink_data
	wire          position_s1_agent_rp_ready;                                                       // router_011:sink_ready -> position_s1_agent:rp_ready
	wire          position_s1_agent_rp_startofpacket;                                               // position_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          position_s1_agent_rp_endofpacket;                                                 // position_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                             // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [100:0] router_011_src_data;                                                              // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                             // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [18:0] router_011_src_channel;                                                           // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                                     // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                                       // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          refresh_s1_agent_rp_valid;                                                        // refresh_s1_agent:rp_valid -> router_012:sink_valid
	wire  [100:0] refresh_s1_agent_rp_data;                                                         // refresh_s1_agent:rp_data -> router_012:sink_data
	wire          refresh_s1_agent_rp_ready;                                                        // router_012:sink_ready -> refresh_s1_agent:rp_ready
	wire          refresh_s1_agent_rp_startofpacket;                                                // refresh_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          refresh_s1_agent_rp_endofpacket;                                                  // refresh_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                             // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [100:0] router_012_src_data;                                                              // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                             // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [18:0] router_012_src_channel;                                                           // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                                     // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                                       // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          background_data_s1_agent_rp_valid;                                                // background_data_s1_agent:rp_valid -> router_013:sink_valid
	wire  [100:0] background_data_s1_agent_rp_data;                                                 // background_data_s1_agent:rp_data -> router_013:sink_data
	wire          background_data_s1_agent_rp_ready;                                                // router_013:sink_ready -> background_data_s1_agent:rp_ready
	wire          background_data_s1_agent_rp_startofpacket;                                        // background_data_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          background_data_s1_agent_rp_endofpacket;                                          // background_data_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                             // router_013:src_valid -> rsp_demux_011:sink_valid
	wire  [100:0] router_013_src_data;                                                              // router_013:src_data -> rsp_demux_011:sink_data
	wire          router_013_src_ready;                                                             // rsp_demux_011:sink_ready -> router_013:src_ready
	wire   [18:0] router_013_src_channel;                                                           // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_startofpacket;                                                     // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_013_src_endofpacket;                                                       // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          background_wr_s1_agent_rp_valid;                                                  // background_wr_s1_agent:rp_valid -> router_014:sink_valid
	wire  [100:0] background_wr_s1_agent_rp_data;                                                   // background_wr_s1_agent:rp_data -> router_014:sink_data
	wire          background_wr_s1_agent_rp_ready;                                                  // router_014:sink_ready -> background_wr_s1_agent:rp_ready
	wire          background_wr_s1_agent_rp_startofpacket;                                          // background_wr_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          background_wr_s1_agent_rp_endofpacket;                                            // background_wr_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                             // router_014:src_valid -> rsp_demux_012:sink_valid
	wire  [100:0] router_014_src_data;                                                              // router_014:src_data -> rsp_demux_012:sink_data
	wire          router_014_src_ready;                                                             // rsp_demux_012:sink_ready -> router_014:src_ready
	wire   [18:0] router_014_src_channel;                                                           // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_startofpacket;                                                     // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_014_src_endofpacket;                                                       // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          left_button_s1_agent_rp_valid;                                                    // left_button_s1_agent:rp_valid -> router_015:sink_valid
	wire  [100:0] left_button_s1_agent_rp_data;                                                     // left_button_s1_agent:rp_data -> router_015:sink_data
	wire          left_button_s1_agent_rp_ready;                                                    // router_015:sink_ready -> left_button_s1_agent:rp_ready
	wire          left_button_s1_agent_rp_startofpacket;                                            // left_button_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          left_button_s1_agent_rp_endofpacket;                                              // left_button_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                             // router_015:src_valid -> rsp_demux_013:sink_valid
	wire  [100:0] router_015_src_data;                                                              // router_015:src_data -> rsp_demux_013:sink_data
	wire          router_015_src_ready;                                                             // rsp_demux_013:sink_ready -> router_015:src_ready
	wire   [18:0] router_015_src_channel;                                                           // router_015:src_channel -> rsp_demux_013:sink_channel
	wire          router_015_src_startofpacket;                                                     // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_015_src_endofpacket;                                                       // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          up_button_s1_agent_rp_valid;                                                      // up_button_s1_agent:rp_valid -> router_016:sink_valid
	wire  [100:0] up_button_s1_agent_rp_data;                                                       // up_button_s1_agent:rp_data -> router_016:sink_data
	wire          up_button_s1_agent_rp_ready;                                                      // router_016:sink_ready -> up_button_s1_agent:rp_ready
	wire          up_button_s1_agent_rp_startofpacket;                                              // up_button_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          up_button_s1_agent_rp_endofpacket;                                                // up_button_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                             // router_016:src_valid -> rsp_demux_014:sink_valid
	wire  [100:0] router_016_src_data;                                                              // router_016:src_data -> rsp_demux_014:sink_data
	wire          router_016_src_ready;                                                             // rsp_demux_014:sink_ready -> router_016:src_ready
	wire   [18:0] router_016_src_channel;                                                           // router_016:src_channel -> rsp_demux_014:sink_channel
	wire          router_016_src_startofpacket;                                                     // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_016_src_endofpacket;                                                       // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          down_button_s1_agent_rp_valid;                                                    // down_button_s1_agent:rp_valid -> router_017:sink_valid
	wire  [100:0] down_button_s1_agent_rp_data;                                                     // down_button_s1_agent:rp_data -> router_017:sink_data
	wire          down_button_s1_agent_rp_ready;                                                    // router_017:sink_ready -> down_button_s1_agent:rp_ready
	wire          down_button_s1_agent_rp_startofpacket;                                            // down_button_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          down_button_s1_agent_rp_endofpacket;                                              // down_button_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                             // router_017:src_valid -> rsp_demux_015:sink_valid
	wire  [100:0] router_017_src_data;                                                              // router_017:src_data -> rsp_demux_015:sink_data
	wire          router_017_src_ready;                                                             // rsp_demux_015:sink_ready -> router_017:src_ready
	wire   [18:0] router_017_src_channel;                                                           // router_017:src_channel -> rsp_demux_015:sink_channel
	wire          router_017_src_startofpacket;                                                     // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_017_src_endofpacket;                                                       // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          right_button_s1_agent_rp_valid;                                                   // right_button_s1_agent:rp_valid -> router_018:sink_valid
	wire  [100:0] right_button_s1_agent_rp_data;                                                    // right_button_s1_agent:rp_data -> router_018:sink_data
	wire          right_button_s1_agent_rp_ready;                                                   // router_018:sink_ready -> right_button_s1_agent:rp_ready
	wire          right_button_s1_agent_rp_startofpacket;                                           // right_button_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          right_button_s1_agent_rp_endofpacket;                                             // right_button_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                             // router_018:src_valid -> rsp_demux_016:sink_valid
	wire  [100:0] router_018_src_data;                                                              // router_018:src_data -> rsp_demux_016:sink_data
	wire          router_018_src_ready;                                                             // rsp_demux_016:sink_ready -> router_018:src_ready
	wire   [18:0] router_018_src_channel;                                                           // router_018:src_channel -> rsp_demux_016:sink_channel
	wire          router_018_src_startofpacket;                                                     // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_018_src_endofpacket;                                                       // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          food_layer_data_s1_agent_rp_valid;                                                // food_layer_data_s1_agent:rp_valid -> router_019:sink_valid
	wire  [100:0] food_layer_data_s1_agent_rp_data;                                                 // food_layer_data_s1_agent:rp_data -> router_019:sink_data
	wire          food_layer_data_s1_agent_rp_ready;                                                // router_019:sink_ready -> food_layer_data_s1_agent:rp_ready
	wire          food_layer_data_s1_agent_rp_startofpacket;                                        // food_layer_data_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          food_layer_data_s1_agent_rp_endofpacket;                                          // food_layer_data_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                             // router_019:src_valid -> rsp_demux_017:sink_valid
	wire  [100:0] router_019_src_data;                                                              // router_019:src_data -> rsp_demux_017:sink_data
	wire          router_019_src_ready;                                                             // rsp_demux_017:sink_ready -> router_019:src_ready
	wire   [18:0] router_019_src_channel;                                                           // router_019:src_channel -> rsp_demux_017:sink_channel
	wire          router_019_src_startofpacket;                                                     // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_019_src_endofpacket;                                                       // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          food_layer_wr_s1_agent_rp_valid;                                                  // food_layer_wr_s1_agent:rp_valid -> router_020:sink_valid
	wire  [100:0] food_layer_wr_s1_agent_rp_data;                                                   // food_layer_wr_s1_agent:rp_data -> router_020:sink_data
	wire          food_layer_wr_s1_agent_rp_ready;                                                  // router_020:sink_ready -> food_layer_wr_s1_agent:rp_ready
	wire          food_layer_wr_s1_agent_rp_startofpacket;                                          // food_layer_wr_s1_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          food_layer_wr_s1_agent_rp_endofpacket;                                            // food_layer_wr_s1_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                             // router_020:src_valid -> rsp_demux_018:sink_valid
	wire  [100:0] router_020_src_data;                                                              // router_020:src_data -> rsp_demux_018:sink_data
	wire          router_020_src_ready;                                                             // rsp_demux_018:sink_ready -> router_020:src_ready
	wire   [18:0] router_020_src_channel;                                                           // router_020:src_channel -> rsp_demux_018:sink_channel
	wire          router_020_src_startofpacket;                                                     // router_020:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_020_src_endofpacket;                                                       // router_020:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          router_src_valid;                                                                 // router:src_valid -> nios2_qsys_data_master_limiter:cmd_sink_valid
	wire  [100:0] router_src_data;                                                                  // router:src_data -> nios2_qsys_data_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                                 // nios2_qsys_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire   [18:0] router_src_channel;                                                               // router:src_channel -> nios2_qsys_data_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                         // router:src_startofpacket -> nios2_qsys_data_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                           // router:src_endofpacket -> nios2_qsys_data_master_limiter:cmd_sink_endofpacket
	wire  [100:0] nios2_qsys_data_master_limiter_cmd_src_data;                                      // nios2_qsys_data_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          nios2_qsys_data_master_limiter_cmd_src_ready;                                     // cmd_demux:sink_ready -> nios2_qsys_data_master_limiter:cmd_src_ready
	wire   [18:0] nios2_qsys_data_master_limiter_cmd_src_channel;                                   // nios2_qsys_data_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          nios2_qsys_data_master_limiter_cmd_src_startofpacket;                             // nios2_qsys_data_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          nios2_qsys_data_master_limiter_cmd_src_endofpacket;                               // nios2_qsys_data_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                // rsp_mux:src_valid -> nios2_qsys_data_master_limiter:rsp_sink_valid
	wire  [100:0] rsp_mux_src_data;                                                                 // rsp_mux:src_data -> nios2_qsys_data_master_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                // nios2_qsys_data_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [18:0] rsp_mux_src_channel;                                                              // rsp_mux:src_channel -> nios2_qsys_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                        // rsp_mux:src_startofpacket -> nios2_qsys_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                          // rsp_mux:src_endofpacket -> nios2_qsys_data_master_limiter:rsp_sink_endofpacket
	wire          nios2_qsys_data_master_limiter_rsp_src_valid;                                     // nios2_qsys_data_master_limiter:rsp_src_valid -> nios2_qsys_data_master_agent:rp_valid
	wire  [100:0] nios2_qsys_data_master_limiter_rsp_src_data;                                      // nios2_qsys_data_master_limiter:rsp_src_data -> nios2_qsys_data_master_agent:rp_data
	wire          nios2_qsys_data_master_limiter_rsp_src_ready;                                     // nios2_qsys_data_master_agent:rp_ready -> nios2_qsys_data_master_limiter:rsp_src_ready
	wire   [18:0] nios2_qsys_data_master_limiter_rsp_src_channel;                                   // nios2_qsys_data_master_limiter:rsp_src_channel -> nios2_qsys_data_master_agent:rp_channel
	wire          nios2_qsys_data_master_limiter_rsp_src_startofpacket;                             // nios2_qsys_data_master_limiter:rsp_src_startofpacket -> nios2_qsys_data_master_agent:rp_startofpacket
	wire          nios2_qsys_data_master_limiter_rsp_src_endofpacket;                               // nios2_qsys_data_master_limiter:rsp_src_endofpacket -> nios2_qsys_data_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                             // router_001:src_valid -> nios2_qsys_instruction_master_limiter:cmd_sink_valid
	wire  [100:0] router_001_src_data;                                                              // router_001:src_data -> nios2_qsys_instruction_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                             // nios2_qsys_instruction_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [18:0] router_001_src_channel;                                                           // router_001:src_channel -> nios2_qsys_instruction_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                     // router_001:src_startofpacket -> nios2_qsys_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                       // router_001:src_endofpacket -> nios2_qsys_instruction_master_limiter:cmd_sink_endofpacket
	wire  [100:0] nios2_qsys_instruction_master_limiter_cmd_src_data;                               // nios2_qsys_instruction_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          nios2_qsys_instruction_master_limiter_cmd_src_ready;                              // cmd_demux_001:sink_ready -> nios2_qsys_instruction_master_limiter:cmd_src_ready
	wire   [18:0] nios2_qsys_instruction_master_limiter_cmd_src_channel;                            // nios2_qsys_instruction_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          nios2_qsys_instruction_master_limiter_cmd_src_startofpacket;                      // nios2_qsys_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          nios2_qsys_instruction_master_limiter_cmd_src_endofpacket;                        // nios2_qsys_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                            // rsp_mux_001:src_valid -> nios2_qsys_instruction_master_limiter:rsp_sink_valid
	wire  [100:0] rsp_mux_001_src_data;                                                             // rsp_mux_001:src_data -> nios2_qsys_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                            // nios2_qsys_instruction_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [18:0] rsp_mux_001_src_channel;                                                          // rsp_mux_001:src_channel -> nios2_qsys_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                    // rsp_mux_001:src_startofpacket -> nios2_qsys_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                      // rsp_mux_001:src_endofpacket -> nios2_qsys_instruction_master_limiter:rsp_sink_endofpacket
	wire          nios2_qsys_instruction_master_limiter_rsp_src_valid;                              // nios2_qsys_instruction_master_limiter:rsp_src_valid -> nios2_qsys_instruction_master_agent:rp_valid
	wire  [100:0] nios2_qsys_instruction_master_limiter_rsp_src_data;                               // nios2_qsys_instruction_master_limiter:rsp_src_data -> nios2_qsys_instruction_master_agent:rp_data
	wire          nios2_qsys_instruction_master_limiter_rsp_src_ready;                              // nios2_qsys_instruction_master_agent:rp_ready -> nios2_qsys_instruction_master_limiter:rsp_src_ready
	wire   [18:0] nios2_qsys_instruction_master_limiter_rsp_src_channel;                            // nios2_qsys_instruction_master_limiter:rsp_src_channel -> nios2_qsys_instruction_master_agent:rp_channel
	wire          nios2_qsys_instruction_master_limiter_rsp_src_startofpacket;                      // nios2_qsys_instruction_master_limiter:rsp_src_startofpacket -> nios2_qsys_instruction_master_agent:rp_startofpacket
	wire          nios2_qsys_instruction_master_limiter_rsp_src_endofpacket;                        // nios2_qsys_instruction_master_limiter:rsp_src_endofpacket -> nios2_qsys_instruction_master_agent:rp_endofpacket
	wire          cmd_demux_src0_valid;                                                             // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [100:0] cmd_demux_src0_data;                                                              // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                             // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [18:0] cmd_demux_src0_channel;                                                           // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                     // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                       // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                             // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [100:0] cmd_demux_src1_data;                                                              // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                             // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [18:0] cmd_demux_src1_channel;                                                           // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                     // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                       // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                             // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [100:0] cmd_demux_src2_data;                                                              // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                             // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [18:0] cmd_demux_src2_channel;                                                           // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                     // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                       // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                             // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [100:0] cmd_demux_src3_data;                                                              // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                             // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [18:0] cmd_demux_src3_channel;                                                           // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                     // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                       // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                             // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [100:0] cmd_demux_src4_data;                                                              // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                             // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [18:0] cmd_demux_src4_channel;                                                           // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                     // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                       // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                             // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [100:0] cmd_demux_src5_data;                                                              // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                             // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [18:0] cmd_demux_src5_channel;                                                           // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                     // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                       // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                             // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [100:0] cmd_demux_src6_data;                                                              // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                             // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [18:0] cmd_demux_src6_channel;                                                           // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                     // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                       // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                             // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [100:0] cmd_demux_src7_data;                                                              // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                             // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [18:0] cmd_demux_src7_channel;                                                           // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                     // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                       // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                             // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [100:0] cmd_demux_src8_data;                                                              // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                             // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [18:0] cmd_demux_src8_channel;                                                           // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                     // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                       // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                         // cmd_demux_001:src0_valid -> cmd_mux_002:sink1_valid
	wire  [100:0] cmd_demux_001_src0_data;                                                          // cmd_demux_001:src0_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src0_ready;                                                         // cmd_mux_002:sink1_ready -> cmd_demux_001:src0_ready
	wire   [18:0] cmd_demux_001_src0_channel;                                                       // cmd_demux_001:src0_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                 // cmd_demux_001:src0_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                   // cmd_demux_001:src0_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                         // cmd_demux_001:src1_valid -> cmd_mux_004:sink1_valid
	wire  [100:0] cmd_demux_001_src1_data;                                                          // cmd_demux_001:src1_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src1_ready;                                                         // cmd_mux_004:sink1_ready -> cmd_demux_001:src1_ready
	wire   [18:0] cmd_demux_001_src1_channel;                                                       // cmd_demux_001:src1_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                 // cmd_demux_001:src1_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                   // cmd_demux_001:src1_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                             // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [100:0] rsp_demux_src0_data;                                                              // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                             // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [18:0] rsp_demux_src0_channel;                                                           // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                     // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                       // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                         // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [100:0] rsp_demux_001_src0_data;                                                          // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                         // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [18:0] rsp_demux_001_src0_channel;                                                       // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                 // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                   // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                         // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [100:0] rsp_demux_002_src0_data;                                                          // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                         // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [18:0] rsp_demux_002_src0_channel;                                                       // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                 // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                   // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                         // rsp_demux_002:src1_valid -> rsp_mux_001:sink0_valid
	wire  [100:0] rsp_demux_002_src1_data;                                                          // rsp_demux_002:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_002_src1_ready;                                                         // rsp_mux_001:sink0_ready -> rsp_demux_002:src1_ready
	wire   [18:0] rsp_demux_002_src1_channel;                                                       // rsp_demux_002:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_002_src1_startofpacket;                                                 // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                   // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_003_src0_valid;                                                         // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [100:0] rsp_demux_003_src0_data;                                                          // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                         // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [18:0] rsp_demux_003_src0_channel;                                                       // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                 // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                   // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                         // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [100:0] rsp_demux_004_src0_data;                                                          // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                         // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [18:0] rsp_demux_004_src0_channel;                                                       // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                 // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                   // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                         // rsp_demux_004:src1_valid -> rsp_mux_001:sink1_valid
	wire  [100:0] rsp_demux_004_src1_data;                                                          // rsp_demux_004:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_004_src1_ready;                                                         // rsp_mux_001:sink1_ready -> rsp_demux_004:src1_ready
	wire   [18:0] rsp_demux_004_src1_channel;                                                       // rsp_demux_004:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_004_src1_startofpacket;                                                 // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                   // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_005_src0_valid;                                                         // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [100:0] rsp_demux_005_src0_data;                                                          // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                         // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [18:0] rsp_demux_005_src0_channel;                                                       // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                 // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                   // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                         // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [100:0] rsp_demux_006_src0_data;                                                          // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                         // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [18:0] rsp_demux_006_src0_channel;                                                       // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                 // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                   // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                         // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [100:0] rsp_demux_007_src0_data;                                                          // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                         // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [18:0] rsp_demux_007_src0_channel;                                                       // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                 // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                   // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                         // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [100:0] rsp_demux_008_src0_data;                                                          // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                         // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [18:0] rsp_demux_008_src0_channel;                                                       // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                 // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                   // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          cmd_demux_src9_valid;                                                             // cmd_demux:src9_valid -> crosser:in_valid
	wire  [100:0] cmd_demux_src9_data;                                                              // cmd_demux:src9_data -> crosser:in_data
	wire          cmd_demux_src9_ready;                                                             // crosser:in_ready -> cmd_demux:src9_ready
	wire   [18:0] cmd_demux_src9_channel;                                                           // cmd_demux:src9_channel -> crosser:in_channel
	wire          cmd_demux_src9_startofpacket;                                                     // cmd_demux:src9_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                       // cmd_demux:src9_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                // crosser:out_valid -> cmd_mux_009:sink0_valid
	wire  [100:0] crosser_out_data;                                                                 // crosser:out_data -> cmd_mux_009:sink0_data
	wire          crosser_out_ready;                                                                // cmd_mux_009:sink0_ready -> crosser:out_ready
	wire   [18:0] crosser_out_channel;                                                              // crosser:out_channel -> cmd_mux_009:sink0_channel
	wire          crosser_out_startofpacket;                                                        // crosser:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                          // crosser:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                            // cmd_demux:src10_valid -> crosser_001:in_valid
	wire  [100:0] cmd_demux_src10_data;                                                             // cmd_demux:src10_data -> crosser_001:in_data
	wire          cmd_demux_src10_ready;                                                            // crosser_001:in_ready -> cmd_demux:src10_ready
	wire   [18:0] cmd_demux_src10_channel;                                                          // cmd_demux:src10_channel -> crosser_001:in_channel
	wire          cmd_demux_src10_startofpacket;                                                    // cmd_demux:src10_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                      // cmd_demux:src10_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                            // crosser_001:out_valid -> cmd_mux_010:sink0_valid
	wire  [100:0] crosser_001_out_data;                                                             // crosser_001:out_data -> cmd_mux_010:sink0_data
	wire          crosser_001_out_ready;                                                            // cmd_mux_010:sink0_ready -> crosser_001:out_ready
	wire   [18:0] crosser_001_out_channel;                                                          // crosser_001:out_channel -> cmd_mux_010:sink0_channel
	wire          crosser_001_out_startofpacket;                                                    // crosser_001:out_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                                      // crosser_001:out_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                            // cmd_demux:src11_valid -> crosser_002:in_valid
	wire  [100:0] cmd_demux_src11_data;                                                             // cmd_demux:src11_data -> crosser_002:in_data
	wire          cmd_demux_src11_ready;                                                            // crosser_002:in_ready -> cmd_demux:src11_ready
	wire   [18:0] cmd_demux_src11_channel;                                                          // cmd_demux:src11_channel -> crosser_002:in_channel
	wire          cmd_demux_src11_startofpacket;                                                    // cmd_demux:src11_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                      // cmd_demux:src11_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                            // crosser_002:out_valid -> cmd_mux_011:sink0_valid
	wire  [100:0] crosser_002_out_data;                                                             // crosser_002:out_data -> cmd_mux_011:sink0_data
	wire          crosser_002_out_ready;                                                            // cmd_mux_011:sink0_ready -> crosser_002:out_ready
	wire   [18:0] crosser_002_out_channel;                                                          // crosser_002:out_channel -> cmd_mux_011:sink0_channel
	wire          crosser_002_out_startofpacket;                                                    // crosser_002:out_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                                      // crosser_002:out_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                            // cmd_demux:src12_valid -> crosser_003:in_valid
	wire  [100:0] cmd_demux_src12_data;                                                             // cmd_demux:src12_data -> crosser_003:in_data
	wire          cmd_demux_src12_ready;                                                            // crosser_003:in_ready -> cmd_demux:src12_ready
	wire   [18:0] cmd_demux_src12_channel;                                                          // cmd_demux:src12_channel -> crosser_003:in_channel
	wire          cmd_demux_src12_startofpacket;                                                    // cmd_demux:src12_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                      // cmd_demux:src12_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                            // crosser_003:out_valid -> cmd_mux_012:sink0_valid
	wire  [100:0] crosser_003_out_data;                                                             // crosser_003:out_data -> cmd_mux_012:sink0_data
	wire          crosser_003_out_ready;                                                            // cmd_mux_012:sink0_ready -> crosser_003:out_ready
	wire   [18:0] crosser_003_out_channel;                                                          // crosser_003:out_channel -> cmd_mux_012:sink0_channel
	wire          crosser_003_out_startofpacket;                                                    // crosser_003:out_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                                      // crosser_003:out_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                            // cmd_demux:src13_valid -> crosser_004:in_valid
	wire  [100:0] cmd_demux_src13_data;                                                             // cmd_demux:src13_data -> crosser_004:in_data
	wire          cmd_demux_src13_ready;                                                            // crosser_004:in_ready -> cmd_demux:src13_ready
	wire   [18:0] cmd_demux_src13_channel;                                                          // cmd_demux:src13_channel -> crosser_004:in_channel
	wire          cmd_demux_src13_startofpacket;                                                    // cmd_demux:src13_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                      // cmd_demux:src13_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                            // crosser_004:out_valid -> cmd_mux_013:sink0_valid
	wire  [100:0] crosser_004_out_data;                                                             // crosser_004:out_data -> cmd_mux_013:sink0_data
	wire          crosser_004_out_ready;                                                            // cmd_mux_013:sink0_ready -> crosser_004:out_ready
	wire   [18:0] crosser_004_out_channel;                                                          // crosser_004:out_channel -> cmd_mux_013:sink0_channel
	wire          crosser_004_out_startofpacket;                                                    // crosser_004:out_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                                      // crosser_004:out_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                            // cmd_demux:src14_valid -> crosser_005:in_valid
	wire  [100:0] cmd_demux_src14_data;                                                             // cmd_demux:src14_data -> crosser_005:in_data
	wire          cmd_demux_src14_ready;                                                            // crosser_005:in_ready -> cmd_demux:src14_ready
	wire   [18:0] cmd_demux_src14_channel;                                                          // cmd_demux:src14_channel -> crosser_005:in_channel
	wire          cmd_demux_src14_startofpacket;                                                    // cmd_demux:src14_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                      // cmd_demux:src14_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                            // crosser_005:out_valid -> cmd_mux_014:sink0_valid
	wire  [100:0] crosser_005_out_data;                                                             // crosser_005:out_data -> cmd_mux_014:sink0_data
	wire          crosser_005_out_ready;                                                            // cmd_mux_014:sink0_ready -> crosser_005:out_ready
	wire   [18:0] crosser_005_out_channel;                                                          // crosser_005:out_channel -> cmd_mux_014:sink0_channel
	wire          crosser_005_out_startofpacket;                                                    // crosser_005:out_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                                      // crosser_005:out_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                            // cmd_demux:src15_valid -> crosser_006:in_valid
	wire  [100:0] cmd_demux_src15_data;                                                             // cmd_demux:src15_data -> crosser_006:in_data
	wire          cmd_demux_src15_ready;                                                            // crosser_006:in_ready -> cmd_demux:src15_ready
	wire   [18:0] cmd_demux_src15_channel;                                                          // cmd_demux:src15_channel -> crosser_006:in_channel
	wire          cmd_demux_src15_startofpacket;                                                    // cmd_demux:src15_startofpacket -> crosser_006:in_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                      // cmd_demux:src15_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                            // crosser_006:out_valid -> cmd_mux_015:sink0_valid
	wire  [100:0] crosser_006_out_data;                                                             // crosser_006:out_data -> cmd_mux_015:sink0_data
	wire          crosser_006_out_ready;                                                            // cmd_mux_015:sink0_ready -> crosser_006:out_ready
	wire   [18:0] crosser_006_out_channel;                                                          // crosser_006:out_channel -> cmd_mux_015:sink0_channel
	wire          crosser_006_out_startofpacket;                                                    // crosser_006:out_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          crosser_006_out_endofpacket;                                                      // crosser_006:out_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                            // cmd_demux:src16_valid -> crosser_007:in_valid
	wire  [100:0] cmd_demux_src16_data;                                                             // cmd_demux:src16_data -> crosser_007:in_data
	wire          cmd_demux_src16_ready;                                                            // crosser_007:in_ready -> cmd_demux:src16_ready
	wire   [18:0] cmd_demux_src16_channel;                                                          // cmd_demux:src16_channel -> crosser_007:in_channel
	wire          cmd_demux_src16_startofpacket;                                                    // cmd_demux:src16_startofpacket -> crosser_007:in_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                      // cmd_demux:src16_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                            // crosser_007:out_valid -> cmd_mux_016:sink0_valid
	wire  [100:0] crosser_007_out_data;                                                             // crosser_007:out_data -> cmd_mux_016:sink0_data
	wire          crosser_007_out_ready;                                                            // cmd_mux_016:sink0_ready -> crosser_007:out_ready
	wire   [18:0] crosser_007_out_channel;                                                          // crosser_007:out_channel -> cmd_mux_016:sink0_channel
	wire          crosser_007_out_startofpacket;                                                    // crosser_007:out_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          crosser_007_out_endofpacket;                                                      // crosser_007:out_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                            // cmd_demux:src17_valid -> crosser_008:in_valid
	wire  [100:0] cmd_demux_src17_data;                                                             // cmd_demux:src17_data -> crosser_008:in_data
	wire          cmd_demux_src17_ready;                                                            // crosser_008:in_ready -> cmd_demux:src17_ready
	wire   [18:0] cmd_demux_src17_channel;                                                          // cmd_demux:src17_channel -> crosser_008:in_channel
	wire          cmd_demux_src17_startofpacket;                                                    // cmd_demux:src17_startofpacket -> crosser_008:in_startofpacket
	wire          cmd_demux_src17_endofpacket;                                                      // cmd_demux:src17_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                                            // crosser_008:out_valid -> cmd_mux_017:sink0_valid
	wire  [100:0] crosser_008_out_data;                                                             // crosser_008:out_data -> cmd_mux_017:sink0_data
	wire          crosser_008_out_ready;                                                            // cmd_mux_017:sink0_ready -> crosser_008:out_ready
	wire   [18:0] crosser_008_out_channel;                                                          // crosser_008:out_channel -> cmd_mux_017:sink0_channel
	wire          crosser_008_out_startofpacket;                                                    // crosser_008:out_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          crosser_008_out_endofpacket;                                                      // crosser_008:out_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                            // cmd_demux:src18_valid -> crosser_009:in_valid
	wire  [100:0] cmd_demux_src18_data;                                                             // cmd_demux:src18_data -> crosser_009:in_data
	wire          cmd_demux_src18_ready;                                                            // crosser_009:in_ready -> cmd_demux:src18_ready
	wire   [18:0] cmd_demux_src18_channel;                                                          // cmd_demux:src18_channel -> crosser_009:in_channel
	wire          cmd_demux_src18_startofpacket;                                                    // cmd_demux:src18_startofpacket -> crosser_009:in_startofpacket
	wire          cmd_demux_src18_endofpacket;                                                      // cmd_demux:src18_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                                            // crosser_009:out_valid -> cmd_mux_018:sink0_valid
	wire  [100:0] crosser_009_out_data;                                                             // crosser_009:out_data -> cmd_mux_018:sink0_data
	wire          crosser_009_out_ready;                                                            // cmd_mux_018:sink0_ready -> crosser_009:out_ready
	wire   [18:0] crosser_009_out_channel;                                                          // crosser_009:out_channel -> cmd_mux_018:sink0_channel
	wire          crosser_009_out_startofpacket;                                                    // crosser_009:out_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          crosser_009_out_endofpacket;                                                      // crosser_009:out_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          rsp_demux_009_src0_valid;                                                         // rsp_demux_009:src0_valid -> crosser_010:in_valid
	wire  [100:0] rsp_demux_009_src0_data;                                                          // rsp_demux_009:src0_data -> crosser_010:in_data
	wire          rsp_demux_009_src0_ready;                                                         // crosser_010:in_ready -> rsp_demux_009:src0_ready
	wire   [18:0] rsp_demux_009_src0_channel;                                                       // rsp_demux_009:src0_channel -> crosser_010:in_channel
	wire          rsp_demux_009_src0_startofpacket;                                                 // rsp_demux_009:src0_startofpacket -> crosser_010:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                   // rsp_demux_009:src0_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                                            // crosser_010:out_valid -> rsp_mux:sink9_valid
	wire  [100:0] crosser_010_out_data;                                                             // crosser_010:out_data -> rsp_mux:sink9_data
	wire          crosser_010_out_ready;                                                            // rsp_mux:sink9_ready -> crosser_010:out_ready
	wire   [18:0] crosser_010_out_channel;                                                          // crosser_010:out_channel -> rsp_mux:sink9_channel
	wire          crosser_010_out_startofpacket;                                                    // crosser_010:out_startofpacket -> rsp_mux:sink9_startofpacket
	wire          crosser_010_out_endofpacket;                                                      // crosser_010:out_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                         // rsp_demux_010:src0_valid -> crosser_011:in_valid
	wire  [100:0] rsp_demux_010_src0_data;                                                          // rsp_demux_010:src0_data -> crosser_011:in_data
	wire          rsp_demux_010_src0_ready;                                                         // crosser_011:in_ready -> rsp_demux_010:src0_ready
	wire   [18:0] rsp_demux_010_src0_channel;                                                       // rsp_demux_010:src0_channel -> crosser_011:in_channel
	wire          rsp_demux_010_src0_startofpacket;                                                 // rsp_demux_010:src0_startofpacket -> crosser_011:in_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                   // rsp_demux_010:src0_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                                            // crosser_011:out_valid -> rsp_mux:sink10_valid
	wire  [100:0] crosser_011_out_data;                                                             // crosser_011:out_data -> rsp_mux:sink10_data
	wire          crosser_011_out_ready;                                                            // rsp_mux:sink10_ready -> crosser_011:out_ready
	wire   [18:0] crosser_011_out_channel;                                                          // crosser_011:out_channel -> rsp_mux:sink10_channel
	wire          crosser_011_out_startofpacket;                                                    // crosser_011:out_startofpacket -> rsp_mux:sink10_startofpacket
	wire          crosser_011_out_endofpacket;                                                      // crosser_011:out_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                         // rsp_demux_011:src0_valid -> crosser_012:in_valid
	wire  [100:0] rsp_demux_011_src0_data;                                                          // rsp_demux_011:src0_data -> crosser_012:in_data
	wire          rsp_demux_011_src0_ready;                                                         // crosser_012:in_ready -> rsp_demux_011:src0_ready
	wire   [18:0] rsp_demux_011_src0_channel;                                                       // rsp_demux_011:src0_channel -> crosser_012:in_channel
	wire          rsp_demux_011_src0_startofpacket;                                                 // rsp_demux_011:src0_startofpacket -> crosser_012:in_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                   // rsp_demux_011:src0_endofpacket -> crosser_012:in_endofpacket
	wire          crosser_012_out_valid;                                                            // crosser_012:out_valid -> rsp_mux:sink11_valid
	wire  [100:0] crosser_012_out_data;                                                             // crosser_012:out_data -> rsp_mux:sink11_data
	wire          crosser_012_out_ready;                                                            // rsp_mux:sink11_ready -> crosser_012:out_ready
	wire   [18:0] crosser_012_out_channel;                                                          // crosser_012:out_channel -> rsp_mux:sink11_channel
	wire          crosser_012_out_startofpacket;                                                    // crosser_012:out_startofpacket -> rsp_mux:sink11_startofpacket
	wire          crosser_012_out_endofpacket;                                                      // crosser_012:out_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                         // rsp_demux_012:src0_valid -> crosser_013:in_valid
	wire  [100:0] rsp_demux_012_src0_data;                                                          // rsp_demux_012:src0_data -> crosser_013:in_data
	wire          rsp_demux_012_src0_ready;                                                         // crosser_013:in_ready -> rsp_demux_012:src0_ready
	wire   [18:0] rsp_demux_012_src0_channel;                                                       // rsp_demux_012:src0_channel -> crosser_013:in_channel
	wire          rsp_demux_012_src0_startofpacket;                                                 // rsp_demux_012:src0_startofpacket -> crosser_013:in_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                   // rsp_demux_012:src0_endofpacket -> crosser_013:in_endofpacket
	wire          crosser_013_out_valid;                                                            // crosser_013:out_valid -> rsp_mux:sink12_valid
	wire  [100:0] crosser_013_out_data;                                                             // crosser_013:out_data -> rsp_mux:sink12_data
	wire          crosser_013_out_ready;                                                            // rsp_mux:sink12_ready -> crosser_013:out_ready
	wire   [18:0] crosser_013_out_channel;                                                          // crosser_013:out_channel -> rsp_mux:sink12_channel
	wire          crosser_013_out_startofpacket;                                                    // crosser_013:out_startofpacket -> rsp_mux:sink12_startofpacket
	wire          crosser_013_out_endofpacket;                                                      // crosser_013:out_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                         // rsp_demux_013:src0_valid -> crosser_014:in_valid
	wire  [100:0] rsp_demux_013_src0_data;                                                          // rsp_demux_013:src0_data -> crosser_014:in_data
	wire          rsp_demux_013_src0_ready;                                                         // crosser_014:in_ready -> rsp_demux_013:src0_ready
	wire   [18:0] rsp_demux_013_src0_channel;                                                       // rsp_demux_013:src0_channel -> crosser_014:in_channel
	wire          rsp_demux_013_src0_startofpacket;                                                 // rsp_demux_013:src0_startofpacket -> crosser_014:in_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                   // rsp_demux_013:src0_endofpacket -> crosser_014:in_endofpacket
	wire          crosser_014_out_valid;                                                            // crosser_014:out_valid -> rsp_mux:sink13_valid
	wire  [100:0] crosser_014_out_data;                                                             // crosser_014:out_data -> rsp_mux:sink13_data
	wire          crosser_014_out_ready;                                                            // rsp_mux:sink13_ready -> crosser_014:out_ready
	wire   [18:0] crosser_014_out_channel;                                                          // crosser_014:out_channel -> rsp_mux:sink13_channel
	wire          crosser_014_out_startofpacket;                                                    // crosser_014:out_startofpacket -> rsp_mux:sink13_startofpacket
	wire          crosser_014_out_endofpacket;                                                      // crosser_014:out_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                         // rsp_demux_014:src0_valid -> crosser_015:in_valid
	wire  [100:0] rsp_demux_014_src0_data;                                                          // rsp_demux_014:src0_data -> crosser_015:in_data
	wire          rsp_demux_014_src0_ready;                                                         // crosser_015:in_ready -> rsp_demux_014:src0_ready
	wire   [18:0] rsp_demux_014_src0_channel;                                                       // rsp_demux_014:src0_channel -> crosser_015:in_channel
	wire          rsp_demux_014_src0_startofpacket;                                                 // rsp_demux_014:src0_startofpacket -> crosser_015:in_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                   // rsp_demux_014:src0_endofpacket -> crosser_015:in_endofpacket
	wire          crosser_015_out_valid;                                                            // crosser_015:out_valid -> rsp_mux:sink14_valid
	wire  [100:0] crosser_015_out_data;                                                             // crosser_015:out_data -> rsp_mux:sink14_data
	wire          crosser_015_out_ready;                                                            // rsp_mux:sink14_ready -> crosser_015:out_ready
	wire   [18:0] crosser_015_out_channel;                                                          // crosser_015:out_channel -> rsp_mux:sink14_channel
	wire          crosser_015_out_startofpacket;                                                    // crosser_015:out_startofpacket -> rsp_mux:sink14_startofpacket
	wire          crosser_015_out_endofpacket;                                                      // crosser_015:out_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                         // rsp_demux_015:src0_valid -> crosser_016:in_valid
	wire  [100:0] rsp_demux_015_src0_data;                                                          // rsp_demux_015:src0_data -> crosser_016:in_data
	wire          rsp_demux_015_src0_ready;                                                         // crosser_016:in_ready -> rsp_demux_015:src0_ready
	wire   [18:0] rsp_demux_015_src0_channel;                                                       // rsp_demux_015:src0_channel -> crosser_016:in_channel
	wire          rsp_demux_015_src0_startofpacket;                                                 // rsp_demux_015:src0_startofpacket -> crosser_016:in_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                   // rsp_demux_015:src0_endofpacket -> crosser_016:in_endofpacket
	wire          crosser_016_out_valid;                                                            // crosser_016:out_valid -> rsp_mux:sink15_valid
	wire  [100:0] crosser_016_out_data;                                                             // crosser_016:out_data -> rsp_mux:sink15_data
	wire          crosser_016_out_ready;                                                            // rsp_mux:sink15_ready -> crosser_016:out_ready
	wire   [18:0] crosser_016_out_channel;                                                          // crosser_016:out_channel -> rsp_mux:sink15_channel
	wire          crosser_016_out_startofpacket;                                                    // crosser_016:out_startofpacket -> rsp_mux:sink15_startofpacket
	wire          crosser_016_out_endofpacket;                                                      // crosser_016:out_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                         // rsp_demux_016:src0_valid -> crosser_017:in_valid
	wire  [100:0] rsp_demux_016_src0_data;                                                          // rsp_demux_016:src0_data -> crosser_017:in_data
	wire          rsp_demux_016_src0_ready;                                                         // crosser_017:in_ready -> rsp_demux_016:src0_ready
	wire   [18:0] rsp_demux_016_src0_channel;                                                       // rsp_demux_016:src0_channel -> crosser_017:in_channel
	wire          rsp_demux_016_src0_startofpacket;                                                 // rsp_demux_016:src0_startofpacket -> crosser_017:in_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                   // rsp_demux_016:src0_endofpacket -> crosser_017:in_endofpacket
	wire          crosser_017_out_valid;                                                            // crosser_017:out_valid -> rsp_mux:sink16_valid
	wire  [100:0] crosser_017_out_data;                                                             // crosser_017:out_data -> rsp_mux:sink16_data
	wire          crosser_017_out_ready;                                                            // rsp_mux:sink16_ready -> crosser_017:out_ready
	wire   [18:0] crosser_017_out_channel;                                                          // crosser_017:out_channel -> rsp_mux:sink16_channel
	wire          crosser_017_out_startofpacket;                                                    // crosser_017:out_startofpacket -> rsp_mux:sink16_startofpacket
	wire          crosser_017_out_endofpacket;                                                      // crosser_017:out_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                         // rsp_demux_017:src0_valid -> crosser_018:in_valid
	wire  [100:0] rsp_demux_017_src0_data;                                                          // rsp_demux_017:src0_data -> crosser_018:in_data
	wire          rsp_demux_017_src0_ready;                                                         // crosser_018:in_ready -> rsp_demux_017:src0_ready
	wire   [18:0] rsp_demux_017_src0_channel;                                                       // rsp_demux_017:src0_channel -> crosser_018:in_channel
	wire          rsp_demux_017_src0_startofpacket;                                                 // rsp_demux_017:src0_startofpacket -> crosser_018:in_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                   // rsp_demux_017:src0_endofpacket -> crosser_018:in_endofpacket
	wire          crosser_018_out_valid;                                                            // crosser_018:out_valid -> rsp_mux:sink17_valid
	wire  [100:0] crosser_018_out_data;                                                             // crosser_018:out_data -> rsp_mux:sink17_data
	wire          crosser_018_out_ready;                                                            // rsp_mux:sink17_ready -> crosser_018:out_ready
	wire   [18:0] crosser_018_out_channel;                                                          // crosser_018:out_channel -> rsp_mux:sink17_channel
	wire          crosser_018_out_startofpacket;                                                    // crosser_018:out_startofpacket -> rsp_mux:sink17_startofpacket
	wire          crosser_018_out_endofpacket;                                                      // crosser_018:out_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                         // rsp_demux_018:src0_valid -> crosser_019:in_valid
	wire  [100:0] rsp_demux_018_src0_data;                                                          // rsp_demux_018:src0_data -> crosser_019:in_data
	wire          rsp_demux_018_src0_ready;                                                         // crosser_019:in_ready -> rsp_demux_018:src0_ready
	wire   [18:0] rsp_demux_018_src0_channel;                                                       // rsp_demux_018:src0_channel -> crosser_019:in_channel
	wire          rsp_demux_018_src0_startofpacket;                                                 // rsp_demux_018:src0_startofpacket -> crosser_019:in_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                   // rsp_demux_018:src0_endofpacket -> crosser_019:in_endofpacket
	wire          crosser_019_out_valid;                                                            // crosser_019:out_valid -> rsp_mux:sink18_valid
	wire  [100:0] crosser_019_out_data;                                                             // crosser_019:out_data -> rsp_mux:sink18_data
	wire          crosser_019_out_ready;                                                            // rsp_mux:sink18_ready -> crosser_019:out_ready
	wire   [18:0] crosser_019_out_channel;                                                          // crosser_019:out_channel -> rsp_mux:sink18_channel
	wire          crosser_019_out_startofpacket;                                                    // crosser_019:out_startofpacket -> rsp_mux:sink18_startofpacket
	wire          crosser_019_out_endofpacket;                                                      // crosser_019:out_endofpacket -> rsp_mux:sink18_endofpacket
	wire   [18:0] nios2_qsys_data_master_limiter_cmd_valid_data;                                    // nios2_qsys_data_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [18:0] nios2_qsys_instruction_master_limiter_cmd_valid_data;                             // nios2_qsys_instruction_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                           // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                            // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                           // avalon_st_adapter:in_0_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                    // avalon_st_adapter:out_0_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                     // avalon_st_adapter:out_0_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                    // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                    // avalon_st_adapter:out_0_error -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_valid;                              // sysid_qsys_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] sysid_qsys_control_slave_agent_rdata_fifo_src_data;                               // sysid_qsys_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          sysid_qsys_control_slave_agent_rdata_fifo_src_ready;                              // avalon_st_adapter_001:in_0_ready -> sysid_qsys_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                // avalon_st_adapter_001:out_0_valid -> sysid_qsys_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                 // avalon_st_adapter_001:out_0_data -> sysid_qsys_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                // sysid_qsys_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                // avalon_st_adapter_001:out_0_error -> sysid_qsys_control_slave_agent:rdata_fifo_sink_error
	wire          nios2_qsys_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios2_qsys_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] nios2_qsys_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios2_qsys_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          nios2_qsys_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_002:in_0_ready -> nios2_qsys_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                // avalon_st_adapter_002:out_0_valid -> nios2_qsys_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                 // avalon_st_adapter_002:out_0_data -> nios2_qsys_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                // nios2_qsys_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                // avalon_st_adapter_002:out_0_error -> nios2_qsys_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          timer_s1_agent_rdata_fifo_src_valid;                                              // timer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] timer_s1_agent_rdata_fifo_src_data;                                               // timer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          timer_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_003:in_0_ready -> timer_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                // avalon_st_adapter_003:out_0_valid -> timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                 // avalon_st_adapter_003:out_0_data -> timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                // timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                // avalon_st_adapter_003:out_0_error -> timer_s1_agent:rdata_fifo_sink_error
	wire          onchip_memory2_s1_agent_rdata_fifo_src_valid;                                     // onchip_memory2_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] onchip_memory2_s1_agent_rdata_fifo_src_data;                                      // onchip_memory2_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          onchip_memory2_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_004:in_0_ready -> onchip_memory2_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                // avalon_st_adapter_004:out_0_valid -> onchip_memory2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                 // avalon_st_adapter_004:out_0_data -> onchip_memory2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                // onchip_memory2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                // avalon_st_adapter_004:out_0_error -> onchip_memory2_s1_agent:rdata_fifo_sink_error
	wire          i2c_sda_s1_agent_rdata_fifo_src_valid;                                            // i2c_sda_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] i2c_sda_s1_agent_rdata_fifo_src_data;                                             // i2c_sda_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          i2c_sda_s1_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_005:in_0_ready -> i2c_sda_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                // avalon_st_adapter_005:out_0_valid -> i2c_sda_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                 // avalon_st_adapter_005:out_0_data -> i2c_sda_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                // i2c_sda_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                // avalon_st_adapter_005:out_0_error -> i2c_sda_s1_agent:rdata_fifo_sink_error
	wire          i2c_scl_s1_agent_rdata_fifo_src_valid;                                            // i2c_scl_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] i2c_scl_s1_agent_rdata_fifo_src_data;                                             // i2c_scl_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          i2c_scl_s1_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_006:in_0_ready -> i2c_scl_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                // avalon_st_adapter_006:out_0_valid -> i2c_scl_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                 // avalon_st_adapter_006:out_0_data -> i2c_scl_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                // i2c_scl_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                // avalon_st_adapter_006:out_0_error -> i2c_scl_s1_agent:rdata_fifo_sink_error
	wire          led_s1_agent_rdata_fifo_src_valid;                                                // led_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] led_s1_agent_rdata_fifo_src_data;                                                 // led_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          led_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_007:in_0_ready -> led_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                // avalon_st_adapter_007:out_0_valid -> led_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                 // avalon_st_adapter_007:out_0_data -> led_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                // led_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                // avalon_st_adapter_007:out_0_error -> led_s1_agent:rdata_fifo_sink_error
	wire          hdmi_tx_int_n_s1_agent_rdata_fifo_src_valid;                                      // hdmi_tx_int_n_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] hdmi_tx_int_n_s1_agent_rdata_fifo_src_data;                                       // hdmi_tx_int_n_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          hdmi_tx_int_n_s1_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_008:in_0_ready -> hdmi_tx_int_n_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                // avalon_st_adapter_008:out_0_valid -> hdmi_tx_int_n_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                 // avalon_st_adapter_008:out_0_data -> hdmi_tx_int_n_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                // hdmi_tx_int_n_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                // avalon_st_adapter_008:out_0_error -> hdmi_tx_int_n_s1_agent:rdata_fifo_sink_error
	wire          position_s1_agent_rdata_fifo_out_valid;                                           // position_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] position_s1_agent_rdata_fifo_out_data;                                            // position_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          position_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_009:in_0_ready -> position_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                // avalon_st_adapter_009:out_0_valid -> position_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                 // avalon_st_adapter_009:out_0_data -> position_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                // position_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                // avalon_st_adapter_009:out_0_error -> position_s1_agent:rdata_fifo_sink_error
	wire          refresh_s1_agent_rdata_fifo_out_valid;                                            // refresh_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] refresh_s1_agent_rdata_fifo_out_data;                                             // refresh_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          refresh_s1_agent_rdata_fifo_out_ready;                                            // avalon_st_adapter_010:in_0_ready -> refresh_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                // avalon_st_adapter_010:out_0_valid -> refresh_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                 // avalon_st_adapter_010:out_0_data -> refresh_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                // refresh_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                // avalon_st_adapter_010:out_0_error -> refresh_s1_agent:rdata_fifo_sink_error
	wire          background_data_s1_agent_rdata_fifo_out_valid;                                    // background_data_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] background_data_s1_agent_rdata_fifo_out_data;                                     // background_data_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          background_data_s1_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_011:in_0_ready -> background_data_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                // avalon_st_adapter_011:out_0_valid -> background_data_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                 // avalon_st_adapter_011:out_0_data -> background_data_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                // background_data_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                // avalon_st_adapter_011:out_0_error -> background_data_s1_agent:rdata_fifo_sink_error
	wire          background_wr_s1_agent_rdata_fifo_out_valid;                                      // background_wr_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] background_wr_s1_agent_rdata_fifo_out_data;                                       // background_wr_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          background_wr_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_012:in_0_ready -> background_wr_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                // avalon_st_adapter_012:out_0_valid -> background_wr_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                 // avalon_st_adapter_012:out_0_data -> background_wr_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                // background_wr_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                // avalon_st_adapter_012:out_0_error -> background_wr_s1_agent:rdata_fifo_sink_error
	wire          left_button_s1_agent_rdata_fifo_out_valid;                                        // left_button_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] left_button_s1_agent_rdata_fifo_out_data;                                         // left_button_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire          left_button_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_013:in_0_ready -> left_button_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                // avalon_st_adapter_013:out_0_valid -> left_button_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                 // avalon_st_adapter_013:out_0_data -> left_button_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                // left_button_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                // avalon_st_adapter_013:out_0_error -> left_button_s1_agent:rdata_fifo_sink_error
	wire          up_button_s1_agent_rdata_fifo_out_valid;                                          // up_button_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] up_button_s1_agent_rdata_fifo_out_data;                                           // up_button_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          up_button_s1_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_014:in_0_ready -> up_button_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                // avalon_st_adapter_014:out_0_valid -> up_button_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                 // avalon_st_adapter_014:out_0_data -> up_button_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                // up_button_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                // avalon_st_adapter_014:out_0_error -> up_button_s1_agent:rdata_fifo_sink_error
	wire          down_button_s1_agent_rdata_fifo_out_valid;                                        // down_button_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] down_button_s1_agent_rdata_fifo_out_data;                                         // down_button_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire          down_button_s1_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_015:in_0_ready -> down_button_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                // avalon_st_adapter_015:out_0_valid -> down_button_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                 // avalon_st_adapter_015:out_0_data -> down_button_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                // down_button_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                // avalon_st_adapter_015:out_0_error -> down_button_s1_agent:rdata_fifo_sink_error
	wire          right_button_s1_agent_rdata_fifo_out_valid;                                       // right_button_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] right_button_s1_agent_rdata_fifo_out_data;                                        // right_button_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_016:in_0_data
	wire          right_button_s1_agent_rdata_fifo_out_ready;                                       // avalon_st_adapter_016:in_0_ready -> right_button_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                // avalon_st_adapter_016:out_0_valid -> right_button_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                 // avalon_st_adapter_016:out_0_data -> right_button_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                // right_button_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                // avalon_st_adapter_016:out_0_error -> right_button_s1_agent:rdata_fifo_sink_error
	wire          food_layer_data_s1_agent_rdata_fifo_out_valid;                                    // food_layer_data_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] food_layer_data_s1_agent_rdata_fifo_out_data;                                     // food_layer_data_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_017:in_0_data
	wire          food_layer_data_s1_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_017:in_0_ready -> food_layer_data_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                // avalon_st_adapter_017:out_0_valid -> food_layer_data_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                 // avalon_st_adapter_017:out_0_data -> food_layer_data_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                // food_layer_data_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                // avalon_st_adapter_017:out_0_error -> food_layer_data_s1_agent:rdata_fifo_sink_error
	wire          food_layer_wr_s1_agent_rdata_fifo_out_valid;                                      // food_layer_wr_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] food_layer_wr_s1_agent_rdata_fifo_out_data;                                       // food_layer_wr_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_018:in_0_data
	wire          food_layer_wr_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_018:in_0_ready -> food_layer_wr_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                // avalon_st_adapter_018:out_0_valid -> food_layer_wr_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                 // avalon_st_adapter_018:out_0_data -> food_layer_wr_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                // food_layer_wr_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                // avalon_st_adapter_018:out_0_error -> food_layer_wr_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (21),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (21),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_qsys_data_master_translator (
		.clk                    (pll_sys_outclk0_clk),                                                       //                       clk.clk
		.reset                  (nios2_qsys_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_qsys_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_qsys_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_qsys_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_qsys_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_qsys_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_qsys_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_qsys_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_qsys_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_qsys_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_qsys_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_qsys_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_qsys_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_qsys_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_qsys_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_qsys_data_master_read),                                               //                          .read
		.av_readdata            (nios2_qsys_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios2_qsys_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (nios2_qsys_data_master_write),                                              //                          .write
		.av_writedata           (nios2_qsys_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_qsys_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (21),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (21),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_qsys_instruction_master_translator (
		.clk                    (pll_sys_outclk0_clk),                                                              //                       clk.clk
		.reset                  (nios2_qsys_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_qsys_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_qsys_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_qsys_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_qsys_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_qsys_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_qsys_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_qsys_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_qsys_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_qsys_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_qsys_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_qsys_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_qsys_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_qsys_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_qsys_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_qsys_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios2_qsys_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                             //               (terminated)
		.av_byteenable          (4'b1111),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                                             //               (terminated)
		.av_write               (1'b0),                                                                             //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                             //               (terminated)
		.av_lock                (1'b0),                                                                             //               (terminated)
		.av_debugaccess         (1'b0),                                                                             //               (terminated)
		.uav_clken              (),                                                                                 //               (terminated)
		.av_clken               (1'b1),                                                                             //               (terminated)
		.uav_response           (2'b00),                                                                            //               (terminated)
		.av_response            (),                                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                                  //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (pll_sys_outclk0_clk),                                //                      clk.clk
		.reset                  (nios2_qsys_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_control_slave_translator (
		.clk                    (pll_sys_outclk0_clk),                             //                      clk.clk
		.reset                  (nios2_qsys_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (sysid_qsys_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                //              (terminated)
		.av_read                (),                                                //              (terminated)
		.av_writedata           (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_qsys_debug_mem_slave_translator (
		.clk                    (pll_sys_outclk0_clk),                               //                      clk.clk
		.reset                  (nios2_qsys_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_qsys_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_qsys_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_qsys_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_qsys_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_qsys_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_qsys_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_qsys_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_qsys_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_qsys_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_qsys_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_qsys_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_qsys_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_qsys_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_qsys_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_qsys_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_qsys_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_qsys_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_qsys_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_qsys_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_s1_translator (
		.clk                    (pll_sys_outclk0_clk),                          //                      clk.clk
		.reset                  (nios2_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (timer_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (timer_s1_agent_m0_read),                       //                         .read
		.uav_write              (timer_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (timer_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (timer_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (timer_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (timer_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (timer_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (timer_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (timer_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (timer_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (timer_s1_write),                               //                         .write
		.av_readdata            (timer_s1_readdata),                            //                         .readdata
		.av_writedata           (timer_s1_writedata),                           //                         .writedata
		.av_chipselect          (timer_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (17),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_s1_translator (
		.clk                    (pll_sys_outclk0_clk),                          //                      clk.clk
		.reset                  (nios2_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (onchip_memory2_s1_agent_m0_read),              //                         .read
		.uav_write              (onchip_memory2_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (onchip_memory2_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (onchip_memory2_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (onchip_memory2_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (onchip_memory2_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (onchip_memory2_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (onchip_memory2_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_s1_write),                      //                         .write
		.av_readdata            (onchip_memory2_s1_readdata),                   //                         .readdata
		.av_writedata           (onchip_memory2_s1_writedata),                  //                         .writedata
		.av_byteenable          (onchip_memory2_s1_byteenable),                 //                         .byteenable
		.av_chipselect          (onchip_memory2_s1_chipselect),                 //                         .chipselect
		.av_clken               (onchip_memory2_s1_clken),                      //                         .clken
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_sda_s1_translator (
		.clk                    (pll_sys_outclk0_clk),                          //                      clk.clk
		.reset                  (nios2_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_sda_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_sda_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (i2c_sda_s1_agent_m0_read),                     //                         .read
		.uav_write              (i2c_sda_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (i2c_sda_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (i2c_sda_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (i2c_sda_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (i2c_sda_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (i2c_sda_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (i2c_sda_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (i2c_sda_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (i2c_sda_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (i2c_sda_s1_write),                             //                         .write
		.av_readdata            (i2c_sda_s1_readdata),                          //                         .readdata
		.av_writedata           (i2c_sda_s1_writedata),                         //                         .writedata
		.av_chipselect          (i2c_sda_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_scl_s1_translator (
		.clk                    (pll_sys_outclk0_clk),                          //                      clk.clk
		.reset                  (nios2_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_scl_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_scl_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (i2c_scl_s1_agent_m0_read),                     //                         .read
		.uav_write              (i2c_scl_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (i2c_scl_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (i2c_scl_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (i2c_scl_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (i2c_scl_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (i2c_scl_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (i2c_scl_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (i2c_scl_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (i2c_scl_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (i2c_scl_s1_write),                             //                         .write
		.av_readdata            (i2c_scl_s1_readdata),                          //                         .readdata
		.av_writedata           (i2c_scl_s1_writedata),                         //                         .writedata
		.av_chipselect          (i2c_scl_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_s1_translator (
		.clk                    (pll_sys_outclk0_clk),                          //                      clk.clk
		.reset                  (nios2_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (led_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (led_s1_agent_m0_read),                         //                         .read
		.uav_write              (led_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (led_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (led_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (led_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (led_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (led_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (led_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (led_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (led_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (led_s1_write),                                 //                         .write
		.av_readdata            (led_s1_readdata),                              //                         .readdata
		.av_writedata           (led_s1_writedata),                             //                         .writedata
		.av_chipselect          (led_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hdmi_tx_int_n_s1_translator (
		.clk                    (pll_sys_outclk0_clk),                          //                      clk.clk
		.reset                  (nios2_qsys_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hdmi_tx_int_n_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (hdmi_tx_int_n_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (hdmi_tx_int_n_s1_agent_m0_read),               //                         .read
		.uav_write              (hdmi_tx_int_n_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (hdmi_tx_int_n_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (hdmi_tx_int_n_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (hdmi_tx_int_n_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (hdmi_tx_int_n_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (hdmi_tx_int_n_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (hdmi_tx_int_n_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (hdmi_tx_int_n_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (hdmi_tx_int_n_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (hdmi_tx_int_n_s1_write),                       //                         .write
		.av_readdata            (hdmi_tx_int_n_s1_readdata),                    //                         .readdata
		.av_writedata           (hdmi_tx_int_n_s1_writedata),                   //                         .writedata
		.av_chipselect          (hdmi_tx_int_n_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                             //              (terminated)
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) position_s1_translator (
		.clk                    (clk_50_clk_clk),                             //                      clk.clk
		.reset                  (position_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (position_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (position_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (position_s1_agent_m0_read),                  //                         .read
		.uav_write              (position_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (position_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (position_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (position_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (position_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (position_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (position_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (position_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (position_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (position_s1_write),                          //                         .write
		.av_readdata            (position_s1_readdata),                       //                         .readdata
		.av_writedata           (position_s1_writedata),                      //                         .writedata
		.av_chipselect          (position_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) refresh_s1_translator (
		.clk                    (clk_50_clk_clk),                             //                      clk.clk
		.reset                  (position_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (refresh_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (refresh_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (refresh_s1_agent_m0_read),                   //                         .read
		.uav_write              (refresh_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (refresh_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (refresh_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (refresh_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (refresh_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (refresh_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (refresh_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (refresh_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (refresh_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (refresh_s1_write),                           //                         .write
		.av_readdata            (refresh_s1_readdata),                        //                         .readdata
		.av_writedata           (refresh_s1_writedata),                       //                         .writedata
		.av_chipselect          (refresh_s1_chipselect),                      //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) background_data_s1_translator (
		.clk                    (clk_50_clk_clk),                             //                      clk.clk
		.reset                  (position_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (background_data_s1_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (background_data_s1_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (background_data_s1_agent_m0_read),           //                         .read
		.uav_write              (background_data_s1_agent_m0_write),          //                         .write
		.uav_waitrequest        (background_data_s1_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (background_data_s1_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (background_data_s1_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (background_data_s1_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (background_data_s1_agent_m0_writedata),      //                         .writedata
		.uav_lock               (background_data_s1_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (background_data_s1_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (background_data_s1_address),                 //      avalon_anti_slave_0.address
		.av_write               (background_data_s1_write),                   //                         .write
		.av_readdata            (background_data_s1_readdata),                //                         .readdata
		.av_writedata           (background_data_s1_writedata),               //                         .writedata
		.av_chipselect          (background_data_s1_chipselect),              //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) background_wr_s1_translator (
		.clk                    (clk_50_clk_clk),                             //                      clk.clk
		.reset                  (position_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (background_wr_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (background_wr_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (background_wr_s1_agent_m0_read),             //                         .read
		.uav_write              (background_wr_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (background_wr_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (background_wr_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (background_wr_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (background_wr_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (background_wr_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (background_wr_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (background_wr_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (background_wr_s1_address),                   //      avalon_anti_slave_0.address
		.av_write               (background_wr_s1_write),                     //                         .write
		.av_readdata            (background_wr_s1_readdata),                  //                         .readdata
		.av_writedata           (background_wr_s1_writedata),                 //                         .writedata
		.av_chipselect          (background_wr_s1_chipselect),                //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) left_button_s1_translator (
		.clk                    (clk_50_clk_clk),                             //                      clk.clk
		.reset                  (position_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (left_button_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (left_button_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (left_button_s1_agent_m0_read),               //                         .read
		.uav_write              (left_button_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (left_button_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (left_button_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (left_button_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (left_button_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (left_button_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (left_button_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (left_button_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (left_button_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (left_button_s1_write),                       //                         .write
		.av_readdata            (left_button_s1_readdata),                    //                         .readdata
		.av_writedata           (left_button_s1_writedata),                   //                         .writedata
		.av_chipselect          (left_button_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) up_button_s1_translator (
		.clk                    (clk_50_clk_clk),                             //                      clk.clk
		.reset                  (position_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (up_button_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (up_button_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (up_button_s1_agent_m0_read),                 //                         .read
		.uav_write              (up_button_s1_agent_m0_write),                //                         .write
		.uav_waitrequest        (up_button_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (up_button_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (up_button_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (up_button_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (up_button_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock               (up_button_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (up_button_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (up_button_s1_address),                       //      avalon_anti_slave_0.address
		.av_write               (up_button_s1_write),                         //                         .write
		.av_readdata            (up_button_s1_readdata),                      //                         .readdata
		.av_writedata           (up_button_s1_writedata),                     //                         .writedata
		.av_chipselect          (up_button_s1_chipselect),                    //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) down_button_s1_translator (
		.clk                    (clk_50_clk_clk),                             //                      clk.clk
		.reset                  (position_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (down_button_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (down_button_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (down_button_s1_agent_m0_read),               //                         .read
		.uav_write              (down_button_s1_agent_m0_write),              //                         .write
		.uav_waitrequest        (down_button_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (down_button_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (down_button_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (down_button_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (down_button_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock               (down_button_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (down_button_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (down_button_s1_address),                     //      avalon_anti_slave_0.address
		.av_write               (down_button_s1_write),                       //                         .write
		.av_readdata            (down_button_s1_readdata),                    //                         .readdata
		.av_writedata           (down_button_s1_writedata),                   //                         .writedata
		.av_chipselect          (down_button_s1_chipselect),                  //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) right_button_s1_translator (
		.clk                    (clk_50_clk_clk),                             //                      clk.clk
		.reset                  (position_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (right_button_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (right_button_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (right_button_s1_agent_m0_read),              //                         .read
		.uav_write              (right_button_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (right_button_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (right_button_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (right_button_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (right_button_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (right_button_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (right_button_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (right_button_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (right_button_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (right_button_s1_write),                      //                         .write
		.av_readdata            (right_button_s1_readdata),                   //                         .readdata
		.av_writedata           (right_button_s1_writedata),                  //                         .writedata
		.av_chipselect          (right_button_s1_chipselect),                 //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) food_layer_data_s1_translator (
		.clk                    (clk_50_clk_clk),                             //                      clk.clk
		.reset                  (position_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (food_layer_data_s1_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (food_layer_data_s1_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (food_layer_data_s1_agent_m0_read),           //                         .read
		.uav_write              (food_layer_data_s1_agent_m0_write),          //                         .write
		.uav_waitrequest        (food_layer_data_s1_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (food_layer_data_s1_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (food_layer_data_s1_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (food_layer_data_s1_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (food_layer_data_s1_agent_m0_writedata),      //                         .writedata
		.uav_lock               (food_layer_data_s1_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (food_layer_data_s1_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (food_layer_data_s1_address),                 //      avalon_anti_slave_0.address
		.av_write               (food_layer_data_s1_write),                   //                         .write
		.av_readdata            (food_layer_data_s1_readdata),                //                         .readdata
		.av_writedata           (food_layer_data_s1_writedata),               //                         .writedata
		.av_chipselect          (food_layer_data_s1_chipselect),              //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) food_layer_wr_s1_translator (
		.clk                    (clk_50_clk_clk),                             //                      clk.clk
		.reset                  (position_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (food_layer_wr_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (food_layer_wr_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (food_layer_wr_s1_agent_m0_read),             //                         .read
		.uav_write              (food_layer_wr_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (food_layer_wr_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (food_layer_wr_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (food_layer_wr_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (food_layer_wr_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (food_layer_wr_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (food_layer_wr_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (food_layer_wr_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (food_layer_wr_s1_address),                   //      avalon_anti_slave_0.address
		.av_write               (food_layer_wr_s1_write),                     //                         .write
		.av_readdata            (food_layer_wr_s1_readdata),                  //                         .readdata
		.av_writedata           (food_layer_wr_s1_writedata),                 //                         .writedata
		.av_chipselect          (food_layer_wr_s1_chipselect),                //                         .chipselect
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_QOS_H                 (77),
		.PKT_QOS_L                 (77),
		.PKT_DATA_SIDEBAND_H       (75),
		.PKT_DATA_SIDEBAND_L       (75),
		.PKT_ADDR_SIDEBAND_H       (74),
		.PKT_ADDR_SIDEBAND_L       (74),
		.PKT_BURST_TYPE_H          (73),
		.PKT_BURST_TYPE_L          (72),
		.PKT_CACHE_H               (95),
		.PKT_CACHE_L               (92),
		.PKT_THREAD_ID_H           (88),
		.PKT_THREAD_ID_L           (88),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.ST_DATA_W                 (101),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_data_master_agent (
		.clk                   (pll_sys_outclk0_clk),                                                       //       clk.clk
		.reset                 (nios2_qsys_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_qsys_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_qsys_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_qsys_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_qsys_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_qsys_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_qsys_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_qsys_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_qsys_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_qsys_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_qsys_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_qsys_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_qsys_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_qsys_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_qsys_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_qsys_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_qsys_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_qsys_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_qsys_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_qsys_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_qsys_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_qsys_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_qsys_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_QOS_H                 (77),
		.PKT_QOS_L                 (77),
		.PKT_DATA_SIDEBAND_H       (75),
		.PKT_DATA_SIDEBAND_L       (75),
		.PKT_ADDR_SIDEBAND_H       (74),
		.PKT_ADDR_SIDEBAND_L       (74),
		.PKT_BURST_TYPE_H          (73),
		.PKT_BURST_TYPE_L          (72),
		.PKT_CACHE_H               (95),
		.PKT_CACHE_L               (92),
		.PKT_THREAD_ID_H           (88),
		.PKT_THREAD_ID_L           (88),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.ST_DATA_W                 (101),
		.ST_CHANNEL_W              (19),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_instruction_master_agent (
		.clk                   (pll_sys_outclk0_clk),                                                              //       clk.clk
		.reset                 (nios2_qsys_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_qsys_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_qsys_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_qsys_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_qsys_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_qsys_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_qsys_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_qsys_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_qsys_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_qsys_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_qsys_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_qsys_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_qsys_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_qsys_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_qsys_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_qsys_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_qsys_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_qsys_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_qsys_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_qsys_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_qsys_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_qsys_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_qsys_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (pll_sys_outclk0_clk),                                          //             clk.clk
		.reset                   (nios2_qsys_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                          //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                                          //       clk.clk
		.reset             (nios2_qsys_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_control_slave_agent (
		.clk                     (pll_sys_outclk0_clk),                                       //             clk.clk
		.reset                   (nios2_qsys_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (sysid_qsys_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_qsys_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_qsys_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_qsys_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_qsys_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_qsys_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_qsys_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_qsys_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_qsys_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_qsys_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_qsys_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_qsys_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_qsys_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_qsys_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_qsys_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_qsys_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                   //                .channel
		.rf_sink_ready           (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_qsys_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_qsys_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_qsys_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (sysid_qsys_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_qsys_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_control_slave_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                                       //       clk.clk
		.reset             (nios2_qsys_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sysid_qsys_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_qsys_debug_mem_slave_agent (
		.clk                     (pll_sys_outclk0_clk),                                         //             clk.clk
		.reset                   (nios2_qsys_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_qsys_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_qsys_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_qsys_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_qsys_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_qsys_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_qsys_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_qsys_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_qsys_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_qsys_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_qsys_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_qsys_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_qsys_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_qsys_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_qsys_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_qsys_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_qsys_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                     //                .channel
		.rf_sink_ready           (nios2_qsys_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_qsys_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_qsys_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_qsys_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_qsys_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_qsys_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_qsys_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_qsys_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_qsys_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_qsys_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (nios2_qsys_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_qsys_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_qsys_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_qsys_debug_mem_slave_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                                         //       clk.clk
		.reset             (nios2_qsys_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_qsys_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_qsys_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_qsys_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_qsys_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_qsys_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_qsys_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_qsys_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_qsys_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_qsys_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_qsys_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_s1_agent (
		.clk                     (pll_sys_outclk0_clk),                          //             clk.clk
		.reset                   (nios2_qsys_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (timer_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (timer_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (timer_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (timer_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (timer_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (timer_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (timer_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (timer_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (timer_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (timer_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (timer_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (timer_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (timer_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (timer_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (timer_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_003_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                      //                .channel
		.rf_sink_ready           (timer_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (timer_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (timer_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (timer_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (timer_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (timer_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (timer_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (timer_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (timer_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (timer_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),            //                .error
		.rdata_fifo_src_ready    (timer_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (timer_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_s1_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                          //       clk.clk
		.reset             (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_s1_agent_rf_source_data),                //        in.data
		.in_valid          (timer_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (timer_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (timer_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (timer_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (timer_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (timer_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (timer_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (timer_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (timer_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_s1_agent (
		.clk                     (pll_sys_outclk0_clk),                                //             clk.clk
		.reset                   (nios2_qsys_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (onchip_memory2_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory2_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory2_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory2_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory2_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory2_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory2_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory2_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory2_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory2_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory2_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory2_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory2_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory2_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory2_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory2_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_004_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                            //                .channel
		.rf_sink_ready           (onchip_memory2_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory2_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory2_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory2_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory2_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory2_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory2_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (onchip_memory2_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory2_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_s1_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                                //       clk.clk
		.reset             (nios2_qsys_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (onchip_memory2_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_sda_s1_agent (
		.clk                     (pll_sys_outclk0_clk),                          //             clk.clk
		.reset                   (nios2_qsys_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (i2c_sda_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (i2c_sda_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (i2c_sda_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (i2c_sda_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (i2c_sda_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (i2c_sda_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (i2c_sda_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (i2c_sda_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (i2c_sda_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (i2c_sda_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (i2c_sda_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (i2c_sda_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (i2c_sda_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (i2c_sda_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (i2c_sda_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (i2c_sda_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_005_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                      //                .channel
		.rf_sink_ready           (i2c_sda_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (i2c_sda_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (i2c_sda_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (i2c_sda_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (i2c_sda_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (i2c_sda_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (i2c_sda_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (i2c_sda_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (i2c_sda_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (i2c_sda_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),            //                .error
		.rdata_fifo_src_ready    (i2c_sda_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_sda_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (i2c_sda_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_sda_s1_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                          //       clk.clk
		.reset             (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (i2c_sda_s1_agent_rf_source_data),              //        in.data
		.in_valid          (i2c_sda_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (i2c_sda_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (i2c_sda_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (i2c_sda_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (i2c_sda_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (i2c_sda_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (i2c_sda_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (i2c_sda_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (i2c_sda_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_scl_s1_agent (
		.clk                     (pll_sys_outclk0_clk),                          //             clk.clk
		.reset                   (nios2_qsys_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (i2c_scl_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (i2c_scl_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (i2c_scl_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (i2c_scl_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (i2c_scl_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (i2c_scl_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (i2c_scl_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (i2c_scl_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (i2c_scl_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (i2c_scl_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (i2c_scl_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (i2c_scl_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (i2c_scl_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (i2c_scl_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (i2c_scl_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (i2c_scl_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_006_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                      //                .channel
		.rf_sink_ready           (i2c_scl_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (i2c_scl_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (i2c_scl_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (i2c_scl_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (i2c_scl_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (i2c_scl_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (i2c_scl_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (i2c_scl_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (i2c_scl_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (i2c_scl_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),            //                .error
		.rdata_fifo_src_ready    (i2c_scl_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_scl_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (i2c_scl_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_scl_s1_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                          //       clk.clk
		.reset             (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (i2c_scl_s1_agent_rf_source_data),              //        in.data
		.in_valid          (i2c_scl_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (i2c_scl_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (i2c_scl_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (i2c_scl_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (i2c_scl_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (i2c_scl_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (i2c_scl_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (i2c_scl_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (i2c_scl_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_s1_agent (
		.clk                     (pll_sys_outclk0_clk),                          //             clk.clk
		.reset                   (nios2_qsys_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (led_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (led_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (led_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (led_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (led_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (led_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (led_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (led_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (led_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (led_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (led_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (led_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (led_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (led_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (led_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_007_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                      //                .channel
		.rf_sink_ready           (led_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (led_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (led_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (led_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (led_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (led_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (led_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (led_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (led_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (led_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),            //                .error
		.rdata_fifo_src_ready    (led_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (led_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                          //       clk.clk
		.reset             (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (led_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (led_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (led_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (led_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (led_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (led_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (led_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (led_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (led_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hdmi_tx_int_n_s1_agent (
		.clk                     (pll_sys_outclk0_clk),                               //             clk.clk
		.reset                   (nios2_qsys_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (hdmi_tx_int_n_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hdmi_tx_int_n_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hdmi_tx_int_n_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hdmi_tx_int_n_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hdmi_tx_int_n_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (hdmi_tx_int_n_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hdmi_tx_int_n_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hdmi_tx_int_n_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (hdmi_tx_int_n_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hdmi_tx_int_n_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (hdmi_tx_int_n_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (hdmi_tx_int_n_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hdmi_tx_int_n_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (hdmi_tx_int_n_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (hdmi_tx_int_n_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (hdmi_tx_int_n_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_008_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                           //                .channel
		.rf_sink_ready           (hdmi_tx_int_n_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hdmi_tx_int_n_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hdmi_tx_int_n_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hdmi_tx_int_n_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hdmi_tx_int_n_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hdmi_tx_int_n_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hdmi_tx_int_n_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hdmi_tx_int_n_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hdmi_tx_int_n_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hdmi_tx_int_n_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (hdmi_tx_int_n_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hdmi_tx_int_n_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hdmi_tx_int_n_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hdmi_tx_int_n_s1_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                               //       clk.clk
		.reset             (nios2_qsys_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (hdmi_tx_int_n_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hdmi_tx_int_n_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hdmi_tx_int_n_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hdmi_tx_int_n_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hdmi_tx_int_n_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hdmi_tx_int_n_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hdmi_tx_int_n_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hdmi_tx_int_n_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hdmi_tx_int_n_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hdmi_tx_int_n_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) position_s1_agent (
		.clk                     (clk_50_clk_clk),                               //             clk.clk
		.reset                   (position_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (position_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (position_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (position_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (position_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (position_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (position_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (position_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (position_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (position_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (position_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (position_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (position_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (position_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (position_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (position_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (position_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_009_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                      //                .channel
		.rf_sink_ready           (position_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (position_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (position_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (position_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (position_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (position_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (position_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (position_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (position_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (position_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),            //                .error
		.rdata_fifo_src_ready    (position_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (position_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (position_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) position_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                               //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (position_s1_agent_rf_source_data),             //        in.data
		.in_valid          (position_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (position_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (position_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (position_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (position_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (position_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (position_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (position_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (position_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) position_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                             //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (position_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (position_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (position_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (position_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (position_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (position_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) refresh_s1_agent (
		.clk                     (clk_50_clk_clk),                              //             clk.clk
		.reset                   (position_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (refresh_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (refresh_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (refresh_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (refresh_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (refresh_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (refresh_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (refresh_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (refresh_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (refresh_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (refresh_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (refresh_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (refresh_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (refresh_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (refresh_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (refresh_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (refresh_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_010_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                     //                .channel
		.rf_sink_ready           (refresh_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (refresh_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (refresh_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (refresh_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (refresh_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (refresh_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (refresh_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (refresh_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (refresh_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (refresh_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),           //                .error
		.rdata_fifo_src_ready    (refresh_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (refresh_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (refresh_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) refresh_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (refresh_s1_agent_rf_source_data),             //        in.data
		.in_valid          (refresh_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (refresh_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (refresh_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (refresh_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (refresh_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (refresh_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (refresh_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (refresh_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (refresh_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) refresh_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                             //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (refresh_s1_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (refresh_s1_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (refresh_s1_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (refresh_s1_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (refresh_s1_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (refresh_s1_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) background_data_s1_agent (
		.clk                     (clk_50_clk_clk),                                      //             clk.clk
		.reset                   (position_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (background_data_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (background_data_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (background_data_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (background_data_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (background_data_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (background_data_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (background_data_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (background_data_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (background_data_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (background_data_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (background_data_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (background_data_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (background_data_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (background_data_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (background_data_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (background_data_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                             //                .channel
		.rf_sink_ready           (background_data_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (background_data_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (background_data_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (background_data_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (background_data_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (background_data_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (background_data_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (background_data_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (background_data_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (background_data_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (background_data_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (background_data_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (background_data_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) background_data_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                      //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (background_data_s1_agent_rf_source_data),             //        in.data
		.in_valid          (background_data_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (background_data_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (background_data_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (background_data_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (background_data_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (background_data_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (background_data_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (background_data_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (background_data_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) background_data_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (background_data_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (background_data_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (background_data_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (background_data_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (background_data_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (background_data_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) background_wr_s1_agent (
		.clk                     (clk_50_clk_clk),                                    //             clk.clk
		.reset                   (position_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (background_wr_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (background_wr_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (background_wr_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (background_wr_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (background_wr_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (background_wr_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (background_wr_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (background_wr_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (background_wr_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (background_wr_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (background_wr_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (background_wr_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (background_wr_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (background_wr_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (background_wr_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (background_wr_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_012_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                           //                .channel
		.rf_sink_ready           (background_wr_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (background_wr_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (background_wr_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (background_wr_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (background_wr_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (background_wr_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (background_wr_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (background_wr_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (background_wr_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (background_wr_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (background_wr_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (background_wr_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (background_wr_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) background_wr_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                    //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (background_wr_s1_agent_rf_source_data),             //        in.data
		.in_valid          (background_wr_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (background_wr_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (background_wr_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (background_wr_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (background_wr_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (background_wr_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (background_wr_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (background_wr_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (background_wr_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) background_wr_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (background_wr_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (background_wr_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (background_wr_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (background_wr_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (background_wr_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (background_wr_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) left_button_s1_agent (
		.clk                     (clk_50_clk_clk),                                  //             clk.clk
		.reset                   (position_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (left_button_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (left_button_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (left_button_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (left_button_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (left_button_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (left_button_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (left_button_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (left_button_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (left_button_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (left_button_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (left_button_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (left_button_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (left_button_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (left_button_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (left_button_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (left_button_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_013_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                         //                .channel
		.rf_sink_ready           (left_button_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (left_button_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (left_button_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (left_button_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (left_button_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (left_button_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (left_button_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (left_button_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (left_button_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (left_button_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),               //                .error
		.rdata_fifo_src_ready    (left_button_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (left_button_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (left_button_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) left_button_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                  //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (left_button_s1_agent_rf_source_data),             //        in.data
		.in_valid          (left_button_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (left_button_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (left_button_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (left_button_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (left_button_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (left_button_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (left_button_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (left_button_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (left_button_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) left_button_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                             //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (left_button_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (left_button_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (left_button_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (left_button_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (left_button_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (left_button_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) up_button_s1_agent (
		.clk                     (clk_50_clk_clk),                                //             clk.clk
		.reset                   (position_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (up_button_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (up_button_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (up_button_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (up_button_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (up_button_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (up_button_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (up_button_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (up_button_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (up_button_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (up_button_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (up_button_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (up_button_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (up_button_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (up_button_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (up_button_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (up_button_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_014_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                       //                .channel
		.rf_sink_ready           (up_button_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (up_button_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (up_button_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (up_button_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (up_button_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (up_button_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (up_button_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (up_button_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (up_button_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (up_button_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),             //                .error
		.rdata_fifo_src_ready    (up_button_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (up_button_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (up_button_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) up_button_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (up_button_s1_agent_rf_source_data),             //        in.data
		.in_valid          (up_button_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (up_button_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (up_button_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (up_button_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (up_button_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (up_button_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (up_button_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (up_button_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (up_button_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) up_button_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                             //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (up_button_s1_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (up_button_s1_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (up_button_s1_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (up_button_s1_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (up_button_s1_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (up_button_s1_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) down_button_s1_agent (
		.clk                     (clk_50_clk_clk),                                  //             clk.clk
		.reset                   (position_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (down_button_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (down_button_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (down_button_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (down_button_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (down_button_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (down_button_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (down_button_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (down_button_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (down_button_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (down_button_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (down_button_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (down_button_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (down_button_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (down_button_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (down_button_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (down_button_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_015_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                         //                .channel
		.rf_sink_ready           (down_button_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (down_button_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (down_button_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (down_button_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (down_button_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (down_button_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (down_button_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (down_button_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (down_button_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (down_button_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),               //                .error
		.rdata_fifo_src_ready    (down_button_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (down_button_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (down_button_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) down_button_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                  //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (down_button_s1_agent_rf_source_data),             //        in.data
		.in_valid          (down_button_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (down_button_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (down_button_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (down_button_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (down_button_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (down_button_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (down_button_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (down_button_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (down_button_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) down_button_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                             //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (down_button_s1_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (down_button_s1_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (down_button_s1_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (down_button_s1_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (down_button_s1_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (down_button_s1_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) right_button_s1_agent (
		.clk                     (clk_50_clk_clk),                                   //             clk.clk
		.reset                   (position_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (right_button_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (right_button_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (right_button_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (right_button_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (right_button_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (right_button_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (right_button_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (right_button_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (right_button_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (right_button_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (right_button_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (right_button_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (right_button_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (right_button_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (right_button_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (right_button_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_016_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                          //                .channel
		.rf_sink_ready           (right_button_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (right_button_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (right_button_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (right_button_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (right_button_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (right_button_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (right_button_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (right_button_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (right_button_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (right_button_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                //                .error
		.rdata_fifo_src_ready    (right_button_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (right_button_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (right_button_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) right_button_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                   //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (right_button_s1_agent_rf_source_data),             //        in.data
		.in_valid          (right_button_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (right_button_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (right_button_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (right_button_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (right_button_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (right_button_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (right_button_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (right_button_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (right_button_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) right_button_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                             //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (right_button_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (right_button_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (right_button_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (right_button_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (right_button_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (right_button_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) food_layer_data_s1_agent (
		.clk                     (clk_50_clk_clk),                                      //             clk.clk
		.reset                   (position_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (food_layer_data_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (food_layer_data_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (food_layer_data_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (food_layer_data_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (food_layer_data_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (food_layer_data_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (food_layer_data_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (food_layer_data_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (food_layer_data_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (food_layer_data_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (food_layer_data_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (food_layer_data_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (food_layer_data_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (food_layer_data_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (food_layer_data_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (food_layer_data_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_017_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                             //                .channel
		.rf_sink_ready           (food_layer_data_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (food_layer_data_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (food_layer_data_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (food_layer_data_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (food_layer_data_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (food_layer_data_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (food_layer_data_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (food_layer_data_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (food_layer_data_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (food_layer_data_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (food_layer_data_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (food_layer_data_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (food_layer_data_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) food_layer_data_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                      //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (food_layer_data_s1_agent_rf_source_data),             //        in.data
		.in_valid          (food_layer_data_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (food_layer_data_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (food_layer_data_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (food_layer_data_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (food_layer_data_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (food_layer_data_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (food_layer_data_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (food_layer_data_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (food_layer_data_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) food_layer_data_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                                //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (food_layer_data_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (food_layer_data_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (food_layer_data_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (food_layer_data_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (food_layer_data_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (food_layer_data_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (100),
		.PKT_ORI_BURST_SIZE_L      (98),
		.PKT_RESPONSE_STATUS_H     (97),
		.PKT_RESPONSE_STATUS_L     (96),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (91),
		.PKT_PROTECTION_L          (89),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (19),
		.ST_DATA_W                 (101),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) food_layer_wr_s1_agent (
		.clk                     (clk_50_clk_clk),                                    //             clk.clk
		.reset                   (position_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (food_layer_wr_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (food_layer_wr_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (food_layer_wr_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (food_layer_wr_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (food_layer_wr_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (food_layer_wr_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (food_layer_wr_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (food_layer_wr_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (food_layer_wr_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (food_layer_wr_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (food_layer_wr_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (food_layer_wr_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (food_layer_wr_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (food_layer_wr_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (food_layer_wr_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (food_layer_wr_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_018_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                           //                .channel
		.rf_sink_ready           (food_layer_wr_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (food_layer_wr_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (food_layer_wr_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (food_layer_wr_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (food_layer_wr_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (food_layer_wr_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (food_layer_wr_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (food_layer_wr_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (food_layer_wr_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (food_layer_wr_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (food_layer_wr_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (food_layer_wr_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (food_layer_wr_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (102),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) food_layer_wr_s1_agent_rsp_fifo (
		.clk               (clk_50_clk_clk),                                    //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (food_layer_wr_s1_agent_rf_source_data),             //        in.data
		.in_valid          (food_layer_wr_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (food_layer_wr_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (food_layer_wr_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (food_layer_wr_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (food_layer_wr_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (food_layer_wr_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (food_layer_wr_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (food_layer_wr_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (food_layer_wr_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) food_layer_wr_s1_agent_rdata_fifo (
		.clk               (clk_50_clk_clk),                              //       clk.clk
		.reset             (position_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (food_layer_wr_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (food_layer_wr_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (food_layer_wr_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (food_layer_wr_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (food_layer_wr_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (food_layer_wr_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	HDMI_QSYS_mm_interconnect_0_router router (
		.sink_ready         (nios2_qsys_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_qsys_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_qsys_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_qsys_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_qsys_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                           //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_qsys_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_qsys_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_qsys_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_qsys_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_qsys_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                                  //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                                 //       src.ready
		.src_valid          (router_001_src_valid),                                 //          .valid
		.src_data           (router_001_src_data),                                  //          .data
		.src_channel        (router_001_src_channel),                               //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                            //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                                //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_002_src_ready),                               //       src.ready
		.src_valid          (router_002_src_valid),                               //          .valid
		.src_data           (router_002_src_data),                                //          .data
		.src_channel        (router_002_src_channel),                             //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                          //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (sysid_qsys_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                             //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_003_src_ready),                            //       src.ready
		.src_valid          (router_003_src_valid),                            //          .valid
		.src_data           (router_003_src_data),                             //          .data
		.src_channel        (router_003_src_channel),                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                       //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (nios2_qsys_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_qsys_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_qsys_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_qsys_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_qsys_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                               //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_004_src_ready),                              //       src.ready
		.src_valid          (router_004_src_valid),                              //          .valid
		.src_data           (router_004_src_data),                               //          .data
		.src_channel        (router_004_src_channel),                            //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                         //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (timer_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (timer_s1_agent_rp_valid),                      //          .valid
		.sink_data          (timer_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (timer_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (timer_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                          //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                         //       src.ready
		.src_valid          (router_005_src_valid),                         //          .valid
		.src_data           (router_005_src_data),                          //          .data
		.src_channel        (router_005_src_channel),                       //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                    //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_004 router_006 (
		.sink_ready         (onchip_memory2_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (onchip_memory2_s1_agent_rp_valid),             //          .valid
		.sink_data          (onchip_memory2_s1_agent_rp_data),              //          .data
		.sink_startofpacket (onchip_memory2_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (onchip_memory2_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                          //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                         //       src.ready
		.src_valid          (router_006_src_valid),                         //          .valid
		.src_data           (router_006_src_data),                          //          .data
		.src_channel        (router_006_src_channel),                       //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                    //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (i2c_sda_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (i2c_sda_s1_agent_rp_valid),                    //          .valid
		.sink_data          (i2c_sda_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (i2c_sda_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (i2c_sda_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                          //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                         //       src.ready
		.src_valid          (router_007_src_valid),                         //          .valid
		.src_data           (router_007_src_data),                          //          .data
		.src_channel        (router_007_src_channel),                       //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                    //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (i2c_scl_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (i2c_scl_s1_agent_rp_valid),                    //          .valid
		.sink_data          (i2c_scl_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (i2c_scl_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (i2c_scl_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                          //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                         //       src.ready
		.src_valid          (router_008_src_valid),                         //          .valid
		.src_data           (router_008_src_data),                          //          .data
		.src_channel        (router_008_src_channel),                       //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                    //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (led_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (led_s1_agent_rp_valid),                        //          .valid
		.sink_data          (led_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (led_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (led_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                          //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                         //       src.ready
		.src_valid          (router_009_src_valid),                         //          .valid
		.src_data           (router_009_src_data),                          //          .data
		.src_channel        (router_009_src_channel),                       //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                    //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_002 router_010 (
		.sink_ready         (hdmi_tx_int_n_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (hdmi_tx_int_n_s1_agent_rp_valid),              //          .valid
		.sink_data          (hdmi_tx_int_n_s1_agent_rp_data),               //          .data
		.sink_startofpacket (hdmi_tx_int_n_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (hdmi_tx_int_n_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                          //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                         //       src.ready
		.src_valid          (router_010_src_valid),                         //          .valid
		.src_data           (router_010_src_data),                          //          .data
		.src_channel        (router_010_src_channel),                       //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                    //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (position_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (position_s1_agent_rp_valid),                 //          .valid
		.sink_data          (position_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (position_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (position_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                       //       src.ready
		.src_valid          (router_011_src_valid),                       //          .valid
		.src_data           (router_011_src_data),                        //          .data
		.src_channel        (router_011_src_channel),                     //          .channel
		.src_startofpacket  (router_011_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                  //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_002 router_012 (
		.sink_ready         (refresh_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (refresh_s1_agent_rp_valid),                  //          .valid
		.sink_data          (refresh_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (refresh_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (refresh_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                       //       src.ready
		.src_valid          (router_012_src_valid),                       //          .valid
		.src_data           (router_012_src_data),                        //          .data
		.src_channel        (router_012_src_channel),                     //          .channel
		.src_startofpacket  (router_012_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                  //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_002 router_013 (
		.sink_ready         (background_data_s1_agent_rp_ready),          //      sink.ready
		.sink_valid         (background_data_s1_agent_rp_valid),          //          .valid
		.sink_data          (background_data_s1_agent_rp_data),           //          .data
		.sink_startofpacket (background_data_s1_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (background_data_s1_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                       //       src.ready
		.src_valid          (router_013_src_valid),                       //          .valid
		.src_data           (router_013_src_data),                        //          .data
		.src_channel        (router_013_src_channel),                     //          .channel
		.src_startofpacket  (router_013_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                  //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_002 router_014 (
		.sink_ready         (background_wr_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (background_wr_s1_agent_rp_valid),            //          .valid
		.sink_data          (background_wr_s1_agent_rp_data),             //          .data
		.sink_startofpacket (background_wr_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (background_wr_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                       //       src.ready
		.src_valid          (router_014_src_valid),                       //          .valid
		.src_data           (router_014_src_data),                        //          .data
		.src_channel        (router_014_src_channel),                     //          .channel
		.src_startofpacket  (router_014_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                  //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_002 router_015 (
		.sink_ready         (left_button_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (left_button_s1_agent_rp_valid),              //          .valid
		.sink_data          (left_button_s1_agent_rp_data),               //          .data
		.sink_startofpacket (left_button_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (left_button_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                       //       src.ready
		.src_valid          (router_015_src_valid),                       //          .valid
		.src_data           (router_015_src_data),                        //          .data
		.src_channel        (router_015_src_channel),                     //          .channel
		.src_startofpacket  (router_015_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                  //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_002 router_016 (
		.sink_ready         (up_button_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (up_button_s1_agent_rp_valid),                //          .valid
		.sink_data          (up_button_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (up_button_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (up_button_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                       //       src.ready
		.src_valid          (router_016_src_valid),                       //          .valid
		.src_data           (router_016_src_data),                        //          .data
		.src_channel        (router_016_src_channel),                     //          .channel
		.src_startofpacket  (router_016_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                  //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_002 router_017 (
		.sink_ready         (down_button_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (down_button_s1_agent_rp_valid),              //          .valid
		.sink_data          (down_button_s1_agent_rp_data),               //          .data
		.sink_startofpacket (down_button_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (down_button_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                       //       src.ready
		.src_valid          (router_017_src_valid),                       //          .valid
		.src_data           (router_017_src_data),                        //          .data
		.src_channel        (router_017_src_channel),                     //          .channel
		.src_startofpacket  (router_017_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                  //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_002 router_018 (
		.sink_ready         (right_button_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (right_button_s1_agent_rp_valid),             //          .valid
		.sink_data          (right_button_s1_agent_rp_data),              //          .data
		.sink_startofpacket (right_button_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (right_button_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                       //       src.ready
		.src_valid          (router_018_src_valid),                       //          .valid
		.src_data           (router_018_src_data),                        //          .data
		.src_channel        (router_018_src_channel),                     //          .channel
		.src_startofpacket  (router_018_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                  //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_002 router_019 (
		.sink_ready         (food_layer_data_s1_agent_rp_ready),          //      sink.ready
		.sink_valid         (food_layer_data_s1_agent_rp_valid),          //          .valid
		.sink_data          (food_layer_data_s1_agent_rp_data),           //          .data
		.sink_startofpacket (food_layer_data_s1_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (food_layer_data_s1_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                       //       src.ready
		.src_valid          (router_019_src_valid),                       //          .valid
		.src_data           (router_019_src_data),                        //          .data
		.src_channel        (router_019_src_channel),                     //          .channel
		.src_startofpacket  (router_019_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                  //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_router_002 router_020 (
		.sink_ready         (food_layer_wr_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (food_layer_wr_s1_agent_rp_valid),            //          .valid
		.sink_data          (food_layer_wr_s1_agent_rp_data),             //          .data
		.sink_startofpacket (food_layer_wr_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (food_layer_wr_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                       //       src.ready
		.src_valid          (router_020_src_valid),                       //          .valid
		.src_data           (router_020_src_data),                        //          .data
		.src_channel        (router_020_src_channel),                     //          .channel
		.src_startofpacket  (router_020_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                  //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (5),
		.PIPELINED                 (0),
		.ST_DATA_W                 (101),
		.ST_CHANNEL_W              (19),
		.VALID_WIDTH               (19),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_qsys_data_master_limiter (
		.clk                    (pll_sys_outclk0_clk),                                  //       clk.clk
		.reset                  (nios2_qsys_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                     //          .valid
		.cmd_sink_data          (router_src_data),                                      //          .data
		.cmd_sink_channel       (router_src_channel),                                   //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                             //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                               //          .endofpacket
		.cmd_src_ready          (nios2_qsys_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_qsys_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_qsys_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_qsys_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_qsys_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                    //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                  //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                              //          .endofpacket
		.rsp_src_ready          (nios2_qsys_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_qsys_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_qsys_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_qsys_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_qsys_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_qsys_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_qsys_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (87),
		.PKT_DEST_ID_L             (83),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (78),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (101),
		.ST_CHANNEL_W              (19),
		.VALID_WIDTH               (19),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_qsys_instruction_master_limiter (
		.clk                    (pll_sys_outclk0_clk),                                         //       clk.clk
		.reset                  (nios2_qsys_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                        //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                        //          .valid
		.cmd_sink_data          (router_001_src_data),                                         //          .data
		.cmd_sink_channel       (router_001_src_channel),                                      //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                  //          .endofpacket
		.cmd_src_ready          (nios2_qsys_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_qsys_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_qsys_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_qsys_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_qsys_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                       //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                       //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                     //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                        //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                               //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                 //          .endofpacket
		.rsp_src_ready          (nios2_qsys_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_qsys_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_qsys_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_qsys_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_qsys_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_qsys_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_qsys_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	HDMI_QSYS_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (pll_sys_outclk0_clk),                                  //        clk.clk
		.reset               (nios2_qsys_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready          (nios2_qsys_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (nios2_qsys_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (nios2_qsys_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (nios2_qsys_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (nios2_qsys_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (nios2_qsys_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                 //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                 //           .valid
		.src0_data           (cmd_demux_src0_data),                                  //           .data
		.src0_channel        (cmd_demux_src0_channel),                               //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                         //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                           //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                 //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                 //           .valid
		.src1_data           (cmd_demux_src1_data),                                  //           .data
		.src1_channel        (cmd_demux_src1_channel),                               //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                         //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                           //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                 //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                 //           .valid
		.src2_data           (cmd_demux_src2_data),                                  //           .data
		.src2_channel        (cmd_demux_src2_channel),                               //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                         //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                           //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                 //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                 //           .valid
		.src3_data           (cmd_demux_src3_data),                                  //           .data
		.src3_channel        (cmd_demux_src3_channel),                               //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                         //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                           //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                 //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                 //           .valid
		.src4_data           (cmd_demux_src4_data),                                  //           .data
		.src4_channel        (cmd_demux_src4_channel),                               //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                         //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                           //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                 //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                 //           .valid
		.src5_data           (cmd_demux_src5_data),                                  //           .data
		.src5_channel        (cmd_demux_src5_channel),                               //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                         //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                           //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                 //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                 //           .valid
		.src6_data           (cmd_demux_src6_data),                                  //           .data
		.src6_channel        (cmd_demux_src6_channel),                               //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                         //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                           //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                 //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                 //           .valid
		.src7_data           (cmd_demux_src7_data),                                  //           .data
		.src7_channel        (cmd_demux_src7_channel),                               //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                         //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                           //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                 //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                 //           .valid
		.src8_data           (cmd_demux_src8_data),                                  //           .data
		.src8_channel        (cmd_demux_src8_channel),                               //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                         //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                           //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                 //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                 //           .valid
		.src9_data           (cmd_demux_src9_data),                                  //           .data
		.src9_channel        (cmd_demux_src9_channel),                               //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                         //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                           //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                //           .valid
		.src10_data          (cmd_demux_src10_data),                                 //           .data
		.src10_channel       (cmd_demux_src10_channel),                              //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                        //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                          //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                //           .valid
		.src11_data          (cmd_demux_src11_data),                                 //           .data
		.src11_channel       (cmd_demux_src11_channel),                              //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                        //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                          //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                //           .valid
		.src12_data          (cmd_demux_src12_data),                                 //           .data
		.src12_channel       (cmd_demux_src12_channel),                              //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                        //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                          //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                                //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                                //           .valid
		.src13_data          (cmd_demux_src13_data),                                 //           .data
		.src13_channel       (cmd_demux_src13_channel),                              //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                        //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                          //           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                                //      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                                //           .valid
		.src14_data          (cmd_demux_src14_data),                                 //           .data
		.src14_channel       (cmd_demux_src14_channel),                              //           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                        //           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                          //           .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                                //      src15.ready
		.src15_valid         (cmd_demux_src15_valid),                                //           .valid
		.src15_data          (cmd_demux_src15_data),                                 //           .data
		.src15_channel       (cmd_demux_src15_channel),                              //           .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                        //           .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                          //           .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                                //      src16.ready
		.src16_valid         (cmd_demux_src16_valid),                                //           .valid
		.src16_data          (cmd_demux_src16_data),                                 //           .data
		.src16_channel       (cmd_demux_src16_channel),                              //           .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                        //           .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                          //           .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                                //      src17.ready
		.src17_valid         (cmd_demux_src17_valid),                                //           .valid
		.src17_data          (cmd_demux_src17_data),                                 //           .data
		.src17_channel       (cmd_demux_src17_channel),                              //           .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                        //           .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                          //           .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                                //      src18.ready
		.src18_valid         (cmd_demux_src18_valid),                                //           .valid
		.src18_data          (cmd_demux_src18_data),                                 //           .data
		.src18_channel       (cmd_demux_src18_channel),                              //           .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                        //           .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket)                           //           .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (pll_sys_outclk0_clk),                                         //        clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (nios2_qsys_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios2_qsys_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios2_qsys_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios2_qsys_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios2_qsys_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios2_qsys_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                    //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                    //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                     //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                  //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                            //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                              //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                    //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                    //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                     //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                  //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                            //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                               //           .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (pll_sys_outclk0_clk),                          //       clk.clk
		.reset               (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_src_valid),                            //          .valid
		.src_data            (cmd_mux_src_data),                             //          .data
		.src_channel         (cmd_mux_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                       //          .channel
		.sink0_data          (cmd_demux_src0_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                    //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (pll_sys_outclk0_clk),                          //       clk.clk
		.reset               (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                        //          .valid
		.src_data            (cmd_mux_001_src_data),                         //          .data
		.src_channel         (cmd_mux_001_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                       //          .channel
		.sink0_data          (cmd_demux_src1_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                    //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (pll_sys_outclk0_clk),                          //       clk.clk
		.reset               (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                        //          .valid
		.src_data            (cmd_mux_002_src_data),                         //          .data
		.src_channel         (cmd_mux_002_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                       //          .channel
		.sink0_data          (cmd_demux_src2_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (pll_sys_outclk0_clk),                          //       clk.clk
		.reset               (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                        //          .valid
		.src_data            (cmd_mux_003_src_data),                         //          .data
		.src_channel         (cmd_mux_003_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                       //          .channel
		.sink0_data          (cmd_demux_src3_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                    //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_mux_002 cmd_mux_004 (
		.clk                 (pll_sys_outclk0_clk),                          //       clk.clk
		.reset               (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                        //          .valid
		.src_data            (cmd_mux_004_src_data),                         //          .data
		.src_channel         (cmd_mux_004_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                       //          .channel
		.sink0_data          (cmd_demux_src4_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                   //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                     //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                     //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                   //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                      //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (pll_sys_outclk0_clk),                          //       clk.clk
		.reset               (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                        //          .valid
		.src_data            (cmd_mux_005_src_data),                         //          .data
		.src_channel         (cmd_mux_005_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                       //          .channel
		.sink0_data          (cmd_demux_src5_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                    //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (pll_sys_outclk0_clk),                          //       clk.clk
		.reset               (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                        //          .valid
		.src_data            (cmd_mux_006_src_data),                         //          .data
		.src_channel         (cmd_mux_006_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                       //          .channel
		.sink0_data          (cmd_demux_src6_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                    //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (pll_sys_outclk0_clk),                          //       clk.clk
		.reset               (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                        //          .valid
		.src_data            (cmd_mux_007_src_data),                         //          .data
		.src_channel         (cmd_mux_007_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                       //          .channel
		.sink0_data          (cmd_demux_src7_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                    //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (pll_sys_outclk0_clk),                          //       clk.clk
		.reset               (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                        //          .valid
		.src_data            (cmd_mux_008_src_data),                         //          .data
		.src_channel         (cmd_mux_008_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                       //          .channel
		.sink0_data          (cmd_demux_src8_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                    //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_50_clk_clk),                             //       clk.clk
		.reset               (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                      //          .valid
		.src_data            (cmd_mux_009_src_data),                       //          .data
		.src_channel         (cmd_mux_009_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                //          .endofpacket
		.sink0_ready         (crosser_out_ready),                          //     sink0.ready
		.sink0_valid         (crosser_out_valid),                          //          .valid
		.sink0_channel       (crosser_out_channel),                        //          .channel
		.sink0_data          (crosser_out_data),                           //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                     //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (clk_50_clk_clk),                             //       clk.clk
		.reset               (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                      //          .valid
		.src_data            (cmd_mux_010_src_data),                       //          .data
		.src_channel         (cmd_mux_010_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                      //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                      //          .valid
		.sink0_channel       (crosser_001_out_channel),                    //          .channel
		.sink0_data          (crosser_001_out_data),                       //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                 //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (clk_50_clk_clk),                             //       clk.clk
		.reset               (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                      //          .valid
		.src_data            (cmd_mux_011_src_data),                       //          .data
		.src_channel         (cmd_mux_011_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                      //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                      //          .valid
		.sink0_channel       (crosser_002_out_channel),                    //          .channel
		.sink0_data          (crosser_002_out_data),                       //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                 //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (clk_50_clk_clk),                             //       clk.clk
		.reset               (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                      //          .valid
		.src_data            (cmd_mux_012_src_data),                       //          .data
		.src_channel         (cmd_mux_012_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                      //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                      //          .valid
		.sink0_channel       (crosser_003_out_channel),                    //          .channel
		.sink0_data          (crosser_003_out_data),                       //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)                 //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (clk_50_clk_clk),                             //       clk.clk
		.reset               (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                      //          .valid
		.src_data            (cmd_mux_013_src_data),                       //          .data
		.src_channel         (cmd_mux_013_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                      //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                      //          .valid
		.sink0_channel       (crosser_004_out_channel),                    //          .channel
		.sink0_data          (crosser_004_out_data),                       //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket)                 //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (clk_50_clk_clk),                             //       clk.clk
		.reset               (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                      //          .valid
		.src_data            (cmd_mux_014_src_data),                       //          .data
		.src_channel         (cmd_mux_014_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                      //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                      //          .valid
		.sink0_channel       (crosser_005_out_channel),                    //          .channel
		.sink0_data          (crosser_005_out_data),                       //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket)                 //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (clk_50_clk_clk),                             //       clk.clk
		.reset               (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                      //          .valid
		.src_data            (cmd_mux_015_src_data),                       //          .data
		.src_channel         (cmd_mux_015_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                //          .endofpacket
		.sink0_ready         (crosser_006_out_ready),                      //     sink0.ready
		.sink0_valid         (crosser_006_out_valid),                      //          .valid
		.sink0_channel       (crosser_006_out_channel),                    //          .channel
		.sink0_data          (crosser_006_out_data),                       //          .data
		.sink0_startofpacket (crosser_006_out_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (crosser_006_out_endofpacket)                 //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (clk_50_clk_clk),                             //       clk.clk
		.reset               (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                      //          .valid
		.src_data            (cmd_mux_016_src_data),                       //          .data
		.src_channel         (cmd_mux_016_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                //          .endofpacket
		.sink0_ready         (crosser_007_out_ready),                      //     sink0.ready
		.sink0_valid         (crosser_007_out_valid),                      //          .valid
		.sink0_channel       (crosser_007_out_channel),                    //          .channel
		.sink0_data          (crosser_007_out_data),                       //          .data
		.sink0_startofpacket (crosser_007_out_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (crosser_007_out_endofpacket)                 //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (clk_50_clk_clk),                             //       clk.clk
		.reset               (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                      //          .valid
		.src_data            (cmd_mux_017_src_data),                       //          .data
		.src_channel         (cmd_mux_017_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                //          .endofpacket
		.sink0_ready         (crosser_008_out_ready),                      //     sink0.ready
		.sink0_valid         (crosser_008_out_valid),                      //          .valid
		.sink0_channel       (crosser_008_out_channel),                    //          .channel
		.sink0_data          (crosser_008_out_data),                       //          .data
		.sink0_startofpacket (crosser_008_out_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (crosser_008_out_endofpacket)                 //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_cmd_mux cmd_mux_018 (
		.clk                 (clk_50_clk_clk),                             //       clk.clk
		.reset               (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                      //          .valid
		.src_data            (cmd_mux_018_src_data),                       //          .data
		.src_channel         (cmd_mux_018_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                //          .endofpacket
		.sink0_ready         (crosser_009_out_ready),                      //     sink0.ready
		.sink0_valid         (crosser_009_out_valid),                      //          .valid
		.sink0_channel       (crosser_009_out_channel),                    //          .channel
		.sink0_data          (crosser_009_out_data),                       //          .data
		.sink0_startofpacket (crosser_009_out_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (crosser_009_out_endofpacket)                 //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (pll_sys_outclk0_clk),                          //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                         //      sink.ready
		.sink_channel       (router_002_src_channel),                       //          .channel
		.sink_data          (router_002_src_data),                          //          .data
		.sink_startofpacket (router_002_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_002_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_src0_data),                          //          .data
		.src0_channel       (rsp_demux_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                    //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (pll_sys_outclk0_clk),                          //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                         //      sink.ready
		.sink_channel       (router_003_src_channel),                       //          .channel
		.sink_data          (router_003_src_data),                          //          .data
		.sink_startofpacket (router_003_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_003_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_001_src0_data),                      //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (pll_sys_outclk0_clk),                          //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                         //      sink.ready
		.sink_channel       (router_004_src_channel),                       //          .channel
		.sink_data          (router_004_src_data),                          //          .data
		.sink_startofpacket (router_004_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_004_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_002_src0_data),                      //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_002_src1_data),                      //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (pll_sys_outclk0_clk),                          //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                         //      sink.ready
		.sink_channel       (router_005_src_channel),                       //          .channel
		.sink_data          (router_005_src_data),                          //          .data
		.sink_startofpacket (router_005_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_005_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_003_src0_data),                      //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_demux_002 rsp_demux_004 (
		.clk                (pll_sys_outclk0_clk),                          //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                         //      sink.ready
		.sink_channel       (router_006_src_channel),                       //          .channel
		.sink_data          (router_006_src_data),                          //          .data
		.sink_startofpacket (router_006_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_006_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_004_src0_data),                      //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_004_src1_data),                      //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (pll_sys_outclk0_clk),                          //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                         //      sink.ready
		.sink_channel       (router_007_src_channel),                       //          .channel
		.sink_data          (router_007_src_data),                          //          .data
		.sink_startofpacket (router_007_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_007_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_005_src0_data),                      //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (pll_sys_outclk0_clk),                          //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                         //      sink.ready
		.sink_channel       (router_008_src_channel),                       //          .channel
		.sink_data          (router_008_src_data),                          //          .data
		.sink_startofpacket (router_008_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_008_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_006_src0_data),                      //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (pll_sys_outclk0_clk),                          //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                         //      sink.ready
		.sink_channel       (router_009_src_channel),                       //          .channel
		.sink_data          (router_009_src_data),                          //          .data
		.sink_startofpacket (router_009_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_009_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_007_src0_data),                      //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (pll_sys_outclk0_clk),                          //       clk.clk
		.reset              (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                         //      sink.ready
		.sink_channel       (router_010_src_channel),                       //          .channel
		.sink_data          (router_010_src_data),                          //          .data
		.sink_startofpacket (router_010_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_010_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_008_src0_data),                      //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                       //      sink.ready
		.sink_channel       (router_011_src_channel),                     //          .channel
		.sink_data          (router_011_src_data),                        //          .data
		.sink_startofpacket (router_011_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_011_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_009_src0_data),                    //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)              //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                       //      sink.ready
		.sink_channel       (router_012_src_channel),                     //          .channel
		.sink_data          (router_012_src_data),                        //          .data
		.sink_startofpacket (router_012_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_012_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_010_src0_data),                    //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)              //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                       //      sink.ready
		.sink_channel       (router_013_src_channel),                     //          .channel
		.sink_data          (router_013_src_data),                        //          .data
		.sink_startofpacket (router_013_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_013_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_011_src0_data),                    //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)              //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                       //      sink.ready
		.sink_channel       (router_014_src_channel),                     //          .channel
		.sink_data          (router_014_src_data),                        //          .data
		.sink_startofpacket (router_014_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_014_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_012_src0_data),                    //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)              //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                       //      sink.ready
		.sink_channel       (router_015_src_channel),                     //          .channel
		.sink_data          (router_015_src_data),                        //          .data
		.sink_startofpacket (router_015_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_015_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_013_src0_data),                    //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)              //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                       //      sink.ready
		.sink_channel       (router_016_src_channel),                     //          .channel
		.sink_data          (router_016_src_data),                        //          .data
		.sink_startofpacket (router_016_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_016_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_014_src0_data),                    //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)              //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                       //      sink.ready
		.sink_channel       (router_017_src_channel),                     //          .channel
		.sink_data          (router_017_src_data),                        //          .data
		.sink_startofpacket (router_017_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_017_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_015_src0_data),                    //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)              //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                       //      sink.ready
		.sink_channel       (router_018_src_channel),                     //          .channel
		.sink_data          (router_018_src_data),                        //          .data
		.sink_startofpacket (router_018_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_018_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_016_src0_data),                    //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)              //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_demux rsp_demux_017 (
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                       //      sink.ready
		.sink_channel       (router_019_src_channel),                     //          .channel
		.sink_data          (router_019_src_data),                        //          .data
		.sink_startofpacket (router_019_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_019_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_017_src0_data),                    //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)              //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_demux rsp_demux_018 (
		.clk                (clk_50_clk_clk),                             //       clk.clk
		.reset              (position_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                       //      sink.ready
		.sink_channel       (router_020_src_channel),                     //          .channel
		.sink_data          (router_020_src_data),                        //          .data
		.sink_startofpacket (router_020_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_020_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_018_src0_data),                    //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)              //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (pll_sys_outclk0_clk),                          //       clk.clk
		.reset                (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                            //       src.ready
		.src_valid            (rsp_mux_src_valid),                            //          .valid
		.src_data             (rsp_mux_src_data),                             //          .data
		.src_channel          (rsp_mux_src_channel),                          //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                         //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                         //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                       //          .channel
		.sink0_data           (rsp_demux_src0_data),                          //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                   //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                     //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                     //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                   //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                      //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),             //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),               //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                     //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                     //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                   //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                      //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),             //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),               //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                     //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                     //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                   //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                      //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),             //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),               //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                     //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                     //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                   //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                      //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),             //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),               //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                     //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                     //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                   //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                      //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),             //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),               //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                     //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                     //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                   //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                      //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),             //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),               //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                     //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                     //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                   //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                      //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),             //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),               //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                     //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                     //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                   //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                      //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),             //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),               //          .endofpacket
		.sink9_ready          (crosser_010_out_ready),                        //     sink9.ready
		.sink9_valid          (crosser_010_out_valid),                        //          .valid
		.sink9_channel        (crosser_010_out_channel),                      //          .channel
		.sink9_data           (crosser_010_out_data),                         //          .data
		.sink9_startofpacket  (crosser_010_out_startofpacket),                //          .startofpacket
		.sink9_endofpacket    (crosser_010_out_endofpacket),                  //          .endofpacket
		.sink10_ready         (crosser_011_out_ready),                        //    sink10.ready
		.sink10_valid         (crosser_011_out_valid),                        //          .valid
		.sink10_channel       (crosser_011_out_channel),                      //          .channel
		.sink10_data          (crosser_011_out_data),                         //          .data
		.sink10_startofpacket (crosser_011_out_startofpacket),                //          .startofpacket
		.sink10_endofpacket   (crosser_011_out_endofpacket),                  //          .endofpacket
		.sink11_ready         (crosser_012_out_ready),                        //    sink11.ready
		.sink11_valid         (crosser_012_out_valid),                        //          .valid
		.sink11_channel       (crosser_012_out_channel),                      //          .channel
		.sink11_data          (crosser_012_out_data),                         //          .data
		.sink11_startofpacket (crosser_012_out_startofpacket),                //          .startofpacket
		.sink11_endofpacket   (crosser_012_out_endofpacket),                  //          .endofpacket
		.sink12_ready         (crosser_013_out_ready),                        //    sink12.ready
		.sink12_valid         (crosser_013_out_valid),                        //          .valid
		.sink12_channel       (crosser_013_out_channel),                      //          .channel
		.sink12_data          (crosser_013_out_data),                         //          .data
		.sink12_startofpacket (crosser_013_out_startofpacket),                //          .startofpacket
		.sink12_endofpacket   (crosser_013_out_endofpacket),                  //          .endofpacket
		.sink13_ready         (crosser_014_out_ready),                        //    sink13.ready
		.sink13_valid         (crosser_014_out_valid),                        //          .valid
		.sink13_channel       (crosser_014_out_channel),                      //          .channel
		.sink13_data          (crosser_014_out_data),                         //          .data
		.sink13_startofpacket (crosser_014_out_startofpacket),                //          .startofpacket
		.sink13_endofpacket   (crosser_014_out_endofpacket),                  //          .endofpacket
		.sink14_ready         (crosser_015_out_ready),                        //    sink14.ready
		.sink14_valid         (crosser_015_out_valid),                        //          .valid
		.sink14_channel       (crosser_015_out_channel),                      //          .channel
		.sink14_data          (crosser_015_out_data),                         //          .data
		.sink14_startofpacket (crosser_015_out_startofpacket),                //          .startofpacket
		.sink14_endofpacket   (crosser_015_out_endofpacket),                  //          .endofpacket
		.sink15_ready         (crosser_016_out_ready),                        //    sink15.ready
		.sink15_valid         (crosser_016_out_valid),                        //          .valid
		.sink15_channel       (crosser_016_out_channel),                      //          .channel
		.sink15_data          (crosser_016_out_data),                         //          .data
		.sink15_startofpacket (crosser_016_out_startofpacket),                //          .startofpacket
		.sink15_endofpacket   (crosser_016_out_endofpacket),                  //          .endofpacket
		.sink16_ready         (crosser_017_out_ready),                        //    sink16.ready
		.sink16_valid         (crosser_017_out_valid),                        //          .valid
		.sink16_channel       (crosser_017_out_channel),                      //          .channel
		.sink16_data          (crosser_017_out_data),                         //          .data
		.sink16_startofpacket (crosser_017_out_startofpacket),                //          .startofpacket
		.sink16_endofpacket   (crosser_017_out_endofpacket),                  //          .endofpacket
		.sink17_ready         (crosser_018_out_ready),                        //    sink17.ready
		.sink17_valid         (crosser_018_out_valid),                        //          .valid
		.sink17_channel       (crosser_018_out_channel),                      //          .channel
		.sink17_data          (crosser_018_out_data),                         //          .data
		.sink17_startofpacket (crosser_018_out_startofpacket),                //          .startofpacket
		.sink17_endofpacket   (crosser_018_out_endofpacket),                  //          .endofpacket
		.sink18_ready         (crosser_019_out_ready),                        //    sink18.ready
		.sink18_valid         (crosser_019_out_valid),                        //          .valid
		.sink18_channel       (crosser_019_out_channel),                      //          .channel
		.sink18_data          (crosser_019_out_data),                         //          .data
		.sink18_startofpacket (crosser_019_out_startofpacket),                //          .startofpacket
		.sink18_endofpacket   (crosser_019_out_endofpacket)                   //          .endofpacket
	);

	HDMI_QSYS_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (pll_sys_outclk0_clk),                          //       clk.clk
		.reset               (nios2_qsys_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                        //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                        //          .valid
		.src_data            (rsp_mux_001_src_data),                         //          .data
		.src_channel         (rsp_mux_001_src_channel),                      //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (rsp_demux_002_src1_ready),                     //     sink0.ready
		.sink0_valid         (rsp_demux_002_src1_valid),                     //          .valid
		.sink0_channel       (rsp_demux_002_src1_channel),                   //          .channel
		.sink0_data          (rsp_demux_002_src1_data),                      //          .data
		.sink0_startofpacket (rsp_demux_002_src1_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_002_src1_endofpacket),               //          .endofpacket
		.sink1_ready         (rsp_demux_004_src1_ready),                     //     sink1.ready
		.sink1_valid         (rsp_demux_004_src1_valid),                     //          .valid
		.sink1_channel       (rsp_demux_004_src1_channel),                   //          .channel
		.sink1_data          (rsp_demux_004_src1_data),                      //          .data
		.sink1_startofpacket (rsp_demux_004_src1_startofpacket),             //          .startofpacket
		.sink1_endofpacket   (rsp_demux_004_src1_endofpacket)                //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (pll_sys_outclk0_clk),                          //        in_clk.clk
		.in_reset          (nios2_qsys_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                               //       out_clk.clk
		.out_reset         (position_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_src9_ready),                         //            in.ready
		.in_valid          (cmd_demux_src9_valid),                         //              .valid
		.in_startofpacket  (cmd_demux_src9_startofpacket),                 //              .startofpacket
		.in_endofpacket    (cmd_demux_src9_endofpacket),                   //              .endofpacket
		.in_channel        (cmd_demux_src9_channel),                       //              .channel
		.in_data           (cmd_demux_src9_data),                          //              .data
		.out_ready         (crosser_out_ready),                            //           out.ready
		.out_valid         (crosser_out_valid),                            //              .valid
		.out_startofpacket (crosser_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_out_channel),                          //              .channel
		.out_data          (crosser_out_data),                             //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (pll_sys_outclk0_clk),                          //        in_clk.clk
		.in_reset          (nios2_qsys_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                               //       out_clk.clk
		.out_reset         (position_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_src10_ready),                        //            in.ready
		.in_valid          (cmd_demux_src10_valid),                        //              .valid
		.in_startofpacket  (cmd_demux_src10_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_demux_src10_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_demux_src10_channel),                      //              .channel
		.in_data           (cmd_demux_src10_data),                         //              .data
		.out_ready         (crosser_001_out_ready),                        //           out.ready
		.out_valid         (crosser_001_out_valid),                        //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_001_out_channel),                      //              .channel
		.out_data          (crosser_001_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (pll_sys_outclk0_clk),                          //        in_clk.clk
		.in_reset          (nios2_qsys_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                               //       out_clk.clk
		.out_reset         (position_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_src11_ready),                        //            in.ready
		.in_valid          (cmd_demux_src11_valid),                        //              .valid
		.in_startofpacket  (cmd_demux_src11_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_demux_src11_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_demux_src11_channel),                      //              .channel
		.in_data           (cmd_demux_src11_data),                         //              .data
		.out_ready         (crosser_002_out_ready),                        //           out.ready
		.out_valid         (crosser_002_out_valid),                        //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_002_out_channel),                      //              .channel
		.out_data          (crosser_002_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (pll_sys_outclk0_clk),                          //        in_clk.clk
		.in_reset          (nios2_qsys_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                               //       out_clk.clk
		.out_reset         (position_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_src12_ready),                        //            in.ready
		.in_valid          (cmd_demux_src12_valid),                        //              .valid
		.in_startofpacket  (cmd_demux_src12_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_demux_src12_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_demux_src12_channel),                      //              .channel
		.in_data           (cmd_demux_src12_data),                         //              .data
		.out_ready         (crosser_003_out_ready),                        //           out.ready
		.out_valid         (crosser_003_out_valid),                        //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_003_out_channel),                      //              .channel
		.out_data          (crosser_003_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (pll_sys_outclk0_clk),                          //        in_clk.clk
		.in_reset          (nios2_qsys_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                               //       out_clk.clk
		.out_reset         (position_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_src13_ready),                        //            in.ready
		.in_valid          (cmd_demux_src13_valid),                        //              .valid
		.in_startofpacket  (cmd_demux_src13_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_demux_src13_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_demux_src13_channel),                      //              .channel
		.in_data           (cmd_demux_src13_data),                         //              .data
		.out_ready         (crosser_004_out_ready),                        //           out.ready
		.out_valid         (crosser_004_out_valid),                        //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_004_out_channel),                      //              .channel
		.out_data          (crosser_004_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (pll_sys_outclk0_clk),                          //        in_clk.clk
		.in_reset          (nios2_qsys_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                               //       out_clk.clk
		.out_reset         (position_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_src14_ready),                        //            in.ready
		.in_valid          (cmd_demux_src14_valid),                        //              .valid
		.in_startofpacket  (cmd_demux_src14_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_demux_src14_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_demux_src14_channel),                      //              .channel
		.in_data           (cmd_demux_src14_data),                         //              .data
		.out_ready         (crosser_005_out_ready),                        //           out.ready
		.out_valid         (crosser_005_out_valid),                        //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_005_out_channel),                      //              .channel
		.out_data          (crosser_005_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (pll_sys_outclk0_clk),                          //        in_clk.clk
		.in_reset          (nios2_qsys_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                               //       out_clk.clk
		.out_reset         (position_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_src15_ready),                        //            in.ready
		.in_valid          (cmd_demux_src15_valid),                        //              .valid
		.in_startofpacket  (cmd_demux_src15_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_demux_src15_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_demux_src15_channel),                      //              .channel
		.in_data           (cmd_demux_src15_data),                         //              .data
		.out_ready         (crosser_006_out_ready),                        //           out.ready
		.out_valid         (crosser_006_out_valid),                        //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_006_out_channel),                      //              .channel
		.out_data          (crosser_006_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (pll_sys_outclk0_clk),                          //        in_clk.clk
		.in_reset          (nios2_qsys_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                               //       out_clk.clk
		.out_reset         (position_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_src16_ready),                        //            in.ready
		.in_valid          (cmd_demux_src16_valid),                        //              .valid
		.in_startofpacket  (cmd_demux_src16_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_demux_src16_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_demux_src16_channel),                      //              .channel
		.in_data           (cmd_demux_src16_data),                         //              .data
		.out_ready         (crosser_007_out_ready),                        //           out.ready
		.out_valid         (crosser_007_out_valid),                        //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_007_out_channel),                      //              .channel
		.out_data          (crosser_007_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (pll_sys_outclk0_clk),                          //        in_clk.clk
		.in_reset          (nios2_qsys_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                               //       out_clk.clk
		.out_reset         (position_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_src17_ready),                        //            in.ready
		.in_valid          (cmd_demux_src17_valid),                        //              .valid
		.in_startofpacket  (cmd_demux_src17_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_demux_src17_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_demux_src17_channel),                      //              .channel
		.in_data           (cmd_demux_src17_data),                         //              .data
		.out_ready         (crosser_008_out_ready),                        //           out.ready
		.out_valid         (crosser_008_out_valid),                        //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_008_out_channel),                      //              .channel
		.out_data          (crosser_008_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (pll_sys_outclk0_clk),                          //        in_clk.clk
		.in_reset          (nios2_qsys_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_50_clk_clk),                               //       out_clk.clk
		.out_reset         (position_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_src18_ready),                        //            in.ready
		.in_valid          (cmd_demux_src18_valid),                        //              .valid
		.in_startofpacket  (cmd_demux_src18_startofpacket),                //              .startofpacket
		.in_endofpacket    (cmd_demux_src18_endofpacket),                  //              .endofpacket
		.in_channel        (cmd_demux_src18_channel),                      //              .channel
		.in_data           (cmd_demux_src18_data),                         //              .data
		.out_ready         (crosser_009_out_ready),                        //           out.ready
		.out_valid         (crosser_009_out_valid),                        //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_009_out_channel),                      //              .channel
		.out_data          (crosser_009_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (clk_50_clk_clk),                               //        in_clk.clk
		.in_reset          (position_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk0_clk),                          //       out_clk.clk
		.out_reset         (nios2_qsys_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_009_src0_ready),                     //            in.ready
		.in_valid          (rsp_demux_009_src0_valid),                     //              .valid
		.in_startofpacket  (rsp_demux_009_src0_startofpacket),             //              .startofpacket
		.in_endofpacket    (rsp_demux_009_src0_endofpacket),               //              .endofpacket
		.in_channel        (rsp_demux_009_src0_channel),                   //              .channel
		.in_data           (rsp_demux_009_src0_data),                      //              .data
		.out_ready         (crosser_010_out_ready),                        //           out.ready
		.out_valid         (crosser_010_out_valid),                        //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_010_out_channel),                      //              .channel
		.out_data          (crosser_010_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (clk_50_clk_clk),                               //        in_clk.clk
		.in_reset          (position_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk0_clk),                          //       out_clk.clk
		.out_reset         (nios2_qsys_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_010_src0_ready),                     //            in.ready
		.in_valid          (rsp_demux_010_src0_valid),                     //              .valid
		.in_startofpacket  (rsp_demux_010_src0_startofpacket),             //              .startofpacket
		.in_endofpacket    (rsp_demux_010_src0_endofpacket),               //              .endofpacket
		.in_channel        (rsp_demux_010_src0_channel),                   //              .channel
		.in_data           (rsp_demux_010_src0_data),                      //              .data
		.out_ready         (crosser_011_out_ready),                        //           out.ready
		.out_valid         (crosser_011_out_valid),                        //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_011_out_channel),                      //              .channel
		.out_data          (crosser_011_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_012 (
		.in_clk            (clk_50_clk_clk),                               //        in_clk.clk
		.in_reset          (position_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk0_clk),                          //       out_clk.clk
		.out_reset         (nios2_qsys_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_011_src0_ready),                     //            in.ready
		.in_valid          (rsp_demux_011_src0_valid),                     //              .valid
		.in_startofpacket  (rsp_demux_011_src0_startofpacket),             //              .startofpacket
		.in_endofpacket    (rsp_demux_011_src0_endofpacket),               //              .endofpacket
		.in_channel        (rsp_demux_011_src0_channel),                   //              .channel
		.in_data           (rsp_demux_011_src0_data),                      //              .data
		.out_ready         (crosser_012_out_ready),                        //           out.ready
		.out_valid         (crosser_012_out_valid),                        //              .valid
		.out_startofpacket (crosser_012_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_012_out_channel),                      //              .channel
		.out_data          (crosser_012_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_013 (
		.in_clk            (clk_50_clk_clk),                               //        in_clk.clk
		.in_reset          (position_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk0_clk),                          //       out_clk.clk
		.out_reset         (nios2_qsys_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_012_src0_ready),                     //            in.ready
		.in_valid          (rsp_demux_012_src0_valid),                     //              .valid
		.in_startofpacket  (rsp_demux_012_src0_startofpacket),             //              .startofpacket
		.in_endofpacket    (rsp_demux_012_src0_endofpacket),               //              .endofpacket
		.in_channel        (rsp_demux_012_src0_channel),                   //              .channel
		.in_data           (rsp_demux_012_src0_data),                      //              .data
		.out_ready         (crosser_013_out_ready),                        //           out.ready
		.out_valid         (crosser_013_out_valid),                        //              .valid
		.out_startofpacket (crosser_013_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_013_out_channel),                      //              .channel
		.out_data          (crosser_013_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_014 (
		.in_clk            (clk_50_clk_clk),                               //        in_clk.clk
		.in_reset          (position_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk0_clk),                          //       out_clk.clk
		.out_reset         (nios2_qsys_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_013_src0_ready),                     //            in.ready
		.in_valid          (rsp_demux_013_src0_valid),                     //              .valid
		.in_startofpacket  (rsp_demux_013_src0_startofpacket),             //              .startofpacket
		.in_endofpacket    (rsp_demux_013_src0_endofpacket),               //              .endofpacket
		.in_channel        (rsp_demux_013_src0_channel),                   //              .channel
		.in_data           (rsp_demux_013_src0_data),                      //              .data
		.out_ready         (crosser_014_out_ready),                        //           out.ready
		.out_valid         (crosser_014_out_valid),                        //              .valid
		.out_startofpacket (crosser_014_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_014_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_014_out_channel),                      //              .channel
		.out_data          (crosser_014_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_015 (
		.in_clk            (clk_50_clk_clk),                               //        in_clk.clk
		.in_reset          (position_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk0_clk),                          //       out_clk.clk
		.out_reset         (nios2_qsys_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_014_src0_ready),                     //            in.ready
		.in_valid          (rsp_demux_014_src0_valid),                     //              .valid
		.in_startofpacket  (rsp_demux_014_src0_startofpacket),             //              .startofpacket
		.in_endofpacket    (rsp_demux_014_src0_endofpacket),               //              .endofpacket
		.in_channel        (rsp_demux_014_src0_channel),                   //              .channel
		.in_data           (rsp_demux_014_src0_data),                      //              .data
		.out_ready         (crosser_015_out_ready),                        //           out.ready
		.out_valid         (crosser_015_out_valid),                        //              .valid
		.out_startofpacket (crosser_015_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_015_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_015_out_channel),                      //              .channel
		.out_data          (crosser_015_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_016 (
		.in_clk            (clk_50_clk_clk),                               //        in_clk.clk
		.in_reset          (position_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk0_clk),                          //       out_clk.clk
		.out_reset         (nios2_qsys_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_015_src0_ready),                     //            in.ready
		.in_valid          (rsp_demux_015_src0_valid),                     //              .valid
		.in_startofpacket  (rsp_demux_015_src0_startofpacket),             //              .startofpacket
		.in_endofpacket    (rsp_demux_015_src0_endofpacket),               //              .endofpacket
		.in_channel        (rsp_demux_015_src0_channel),                   //              .channel
		.in_data           (rsp_demux_015_src0_data),                      //              .data
		.out_ready         (crosser_016_out_ready),                        //           out.ready
		.out_valid         (crosser_016_out_valid),                        //              .valid
		.out_startofpacket (crosser_016_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_016_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_016_out_channel),                      //              .channel
		.out_data          (crosser_016_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_017 (
		.in_clk            (clk_50_clk_clk),                               //        in_clk.clk
		.in_reset          (position_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk0_clk),                          //       out_clk.clk
		.out_reset         (nios2_qsys_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_016_src0_ready),                     //            in.ready
		.in_valid          (rsp_demux_016_src0_valid),                     //              .valid
		.in_startofpacket  (rsp_demux_016_src0_startofpacket),             //              .startofpacket
		.in_endofpacket    (rsp_demux_016_src0_endofpacket),               //              .endofpacket
		.in_channel        (rsp_demux_016_src0_channel),                   //              .channel
		.in_data           (rsp_demux_016_src0_data),                      //              .data
		.out_ready         (crosser_017_out_ready),                        //           out.ready
		.out_valid         (crosser_017_out_valid),                        //              .valid
		.out_startofpacket (crosser_017_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_017_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_017_out_channel),                      //              .channel
		.out_data          (crosser_017_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_018 (
		.in_clk            (clk_50_clk_clk),                               //        in_clk.clk
		.in_reset          (position_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk0_clk),                          //       out_clk.clk
		.out_reset         (nios2_qsys_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_017_src0_ready),                     //            in.ready
		.in_valid          (rsp_demux_017_src0_valid),                     //              .valid
		.in_startofpacket  (rsp_demux_017_src0_startofpacket),             //              .startofpacket
		.in_endofpacket    (rsp_demux_017_src0_endofpacket),               //              .endofpacket
		.in_channel        (rsp_demux_017_src0_channel),                   //              .channel
		.in_data           (rsp_demux_017_src0_data),                      //              .data
		.out_ready         (crosser_018_out_ready),                        //           out.ready
		.out_valid         (crosser_018_out_valid),                        //              .valid
		.out_startofpacket (crosser_018_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_018_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_018_out_channel),                      //              .channel
		.out_data          (crosser_018_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (101),
		.BITS_PER_SYMBOL     (101),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (19),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_019 (
		.in_clk            (clk_50_clk_clk),                               //        in_clk.clk
		.in_reset          (position_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (pll_sys_outclk0_clk),                          //       out_clk.clk
		.out_reset         (nios2_qsys_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_018_src0_ready),                     //            in.ready
		.in_valid          (rsp_demux_018_src0_valid),                     //              .valid
		.in_startofpacket  (rsp_demux_018_src0_startofpacket),             //              .startofpacket
		.in_endofpacket    (rsp_demux_018_src0_endofpacket),               //              .endofpacket
		.in_channel        (rsp_demux_018_src0_channel),                   //              .channel
		.in_data           (rsp_demux_018_src0_data),                      //              .data
		.out_ready         (crosser_019_out_ready),                        //           out.ready
		.out_valid         (crosser_019_out_valid),                        //              .valid
		.out_startofpacket (crosser_019_out_startofpacket),                //              .startofpacket
		.out_endofpacket   (crosser_019_out_endofpacket),                  //              .endofpacket
		.out_channel       (crosser_019_out_channel),                      //              .channel
		.out_data          (crosser_019_out_data),                         //              .data
		.in_empty          (1'b0),                                         //   (terminated)
		.in_error          (1'b0),                                         //   (terminated)
		.out_empty         (),                                             //   (terminated)
		.out_error         ()                                              //   (terminated)
	);

	HDMI_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pll_sys_outclk0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                           //         .error
	);

	HDMI_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (pll_sys_outclk0_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (sysid_qsys_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysid_qsys_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                    //         .error
	);

	HDMI_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (pll_sys_outclk0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_qsys_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_qsys_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_qsys_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                      //         .error
	);

	HDMI_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (pll_sys_outclk0_clk),                          // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (timer_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (timer_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)             //         .error
	);

	HDMI_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (pll_sys_outclk0_clk),                          // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (onchip_memory2_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (onchip_memory2_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)             //         .error
	);

	HDMI_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (pll_sys_outclk0_clk),                          // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (i2c_sda_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (i2c_sda_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (i2c_sda_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)             //         .error
	);

	HDMI_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (pll_sys_outclk0_clk),                          // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (i2c_scl_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (i2c_scl_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (i2c_scl_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)             //         .error
	);

	HDMI_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (pll_sys_outclk0_clk),                          // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (led_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (led_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)             //         .error
	);

	HDMI_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (pll_sys_outclk0_clk),                          // in_clk_0.clk
		.in_rst_0_reset (nios2_qsys_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hdmi_tx_int_n_s1_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (hdmi_tx_int_n_s1_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (hdmi_tx_int_n_s1_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)             //         .error
	);

	HDMI_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_50_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (position_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (position_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (position_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (position_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)           //         .error
	);

	HDMI_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_50_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (position_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (refresh_s1_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (refresh_s1_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (refresh_s1_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)           //         .error
	);

	HDMI_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_50_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (position_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (background_data_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (background_data_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (background_data_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)              //         .error
	);

	HDMI_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_50_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (position_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (background_wr_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (background_wr_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (background_wr_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)            //         .error
	);

	HDMI_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_50_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (position_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (left_button_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (left_button_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (left_button_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)           //         .error
	);

	HDMI_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_50_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (position_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (up_button_s1_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (up_button_s1_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (up_button_s1_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)           //         .error
	);

	HDMI_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_50_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (position_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (down_button_s1_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (down_button_s1_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (down_button_s1_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)           //         .error
	);

	HDMI_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (clk_50_clk_clk),                             // in_clk_0.clk
		.in_rst_0_reset (position_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (right_button_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (right_button_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (right_button_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)           //         .error
	);

	HDMI_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (clk_50_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (position_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (food_layer_data_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (food_layer_data_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (food_layer_data_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)              //         .error
	);

	HDMI_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (clk_50_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (position_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (food_layer_wr_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (food_layer_wr_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (food_layer_wr_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)            //         .error
	);

endmodule
